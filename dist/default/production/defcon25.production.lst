

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Jul 26 15:28:58 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16LF18346
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBANK10,global,class=CODE,delta=2
    13                           	psect	idataBIGRAM,global,class=CODE,delta=2
    14                           	psect	stringtext1,global,class=STRCODE,delta=2
    15                           	psect	stringtext2,global,class=STRCODE,delta=2
    16                           	psect	stringtext3,global,class=STRCODE,delta=2
    17                           	psect	stringtext4,global,class=STRCODE,delta=2
    18                           	psect	stringtext5,global,class=STRCODE,delta=2
    19                           	psect	stringtext6,global,class=STRCODE,delta=2
    20                           	psect	stringtext7,global,class=STRCODE,delta=2
    21                           	psect	stringtext8,global,class=STRCODE,delta=2
    22                           	psect	stringtext9,global,class=STRCODE,delta=2
    23                           	psect	stringtext10,global,class=STRCODE,delta=2
    24                           	psect	stringtext11,global,class=STRCODE,delta=2
    25                           	psect	stringtext12,global,class=STRCODE,delta=2
    26                           	psect	stringtext13,global,class=STRCODE,delta=2
    27                           	psect	stringtext14,global,class=STRCODE,delta=2
    28                           	psect	stringtext15,global,class=STRCODE,delta=2
    29                           	psect	stringtext16,global,class=STRCODE,delta=2
    30                           	psect	stringtext17,global,class=STRCODE,delta=2
    31                           	psect	stringtext18,global,class=STRCODE,delta=2
    32                           	psect	stringtext19,global,class=STRCODE,delta=2
    33                           	psect	stringtext20,global,class=STRCODE,delta=2
    34                           	psect	stringtext21,global,class=STRCODE,delta=2
    35                           	psect	stringtext22,global,class=STRCODE,delta=2
    36                           	psect	stringtext23,global,class=STRCODE,delta=2
    37                           	psect	stringtext24,global,class=STRCODE,delta=2
    38                           	psect	stringtext25,global,class=STRCODE,delta=2
    39                           	psect	stringtext26,global,class=STRCODE,delta=2
    40                           	psect	stringtext27,global,class=STRCODE,delta=2
    41                           	psect	stringtext28,global,class=STRCODE,delta=2
    42                           	psect	stringtext29,global,class=STRCODE,delta=2
    43                           	psect	stringtext30,global,class=STRCODE,delta=2
    44                           	psect	stringtext31,global,class=STRCODE,delta=2
    45                           	psect	stringtext32,global,class=STRCODE,delta=2
    46                           	psect	stringtext33,global,class=STRCODE,delta=2
    47                           	psect	stringtext34,global,class=STRCODE,delta=2
    48                           	psect	stringtext35,global,class=STRCODE,delta=2
    49                           	psect	stringtext36,global,class=STRCODE,delta=2
    50                           	psect	stringtext37,global,class=STRCODE,delta=2
    51                           	psect	stringtext38,global,class=STRCODE,delta=2
    52                           	psect	stringtext39,global,class=STRCODE,delta=2
    53                           	psect	stringtext40,global,class=STRCODE,delta=2
    54                           	psect	stringtext41,global,class=STRCODE,delta=2
    55                           	psect	stringtext42,global,class=STRCODE,delta=2
    56                           	psect	stringtext43,global,class=STRCODE,delta=2
    57                           	psect	stringtext44,global,class=STRCODE,delta=2
    58                           	psect	stringtext45,global,class=STRCODE,delta=2
    59                           	psect	stringtext46,global,class=STRCODE,delta=2
    60                           	psect	stringtext47,global,class=STRCODE,delta=2
    61                           	psect	stringtext48,global,class=STRCODE,delta=2
    62                           	psect	stringtext49,global,class=STRCODE,delta=2
    63                           	psect	stringtext50,global,class=STRCODE,delta=2
    64                           	psect	stringtext51,global,class=STRCODE,delta=2
    65                           	psect	stringtext52,global,class=STRCODE,delta=2
    66                           	psect	stringtext53,global,class=STRCODE,delta=2
    67                           	psect	stringtext54,global,class=STRCODE,delta=2
    68                           	psect	stringtext55,global,class=STRCODE,delta=2
    69                           	psect	stringtext56,global,class=STRCODE,delta=2
    70                           	psect	stringtext57,global,class=STRCODE,delta=2
    71                           	psect	stringtext58,global,class=STRCODE,delta=2
    72                           	psect	stringtext59,global,class=STRCODE,delta=2
    73                           	psect	stringtext60,global,class=STRCODE,delta=2
    74                           	psect	stringtext61,global,class=STRCODE,delta=2
    75                           	psect	stringtext62,global,class=STRCODE,delta=2
    76                           	psect	stringtext63,global,class=STRCODE,delta=2
    77                           	psect	stringtext64,global,class=STRCODE,delta=2
    78                           	psect	stringtext65,global,class=STRCODE,delta=2
    79                           	psect	stringtext66,global,class=STRCODE,delta=2
    80                           	psect	stringtext67,global,class=STRCODE,delta=2
    81                           	psect	stringtext68,global,class=STRCODE,delta=2
    82                           	psect	stringtext69,global,class=STRCODE,delta=2
    83                           	psect	stringtext70,global,class=STRCODE,delta=2
    84                           	psect	stringtext71,global,class=STRCODE,delta=2
    85                           	psect	stringtext72,global,class=STRCODE,delta=2
    86                           	psect	stringtext73,global,class=STRCODE,delta=2
    87                           	psect	stringtext74,global,class=STRCODE,delta=2
    88                           	psect	stringtext75,global,class=STRCODE,delta=2
    89                           	psect	stringtext76,global,class=STRCODE,delta=2
    90                           	psect	stringtext77,global,class=STRCODE,delta=2
    91                           	psect	stringtext78,global,class=STRCODE,delta=2
    92                           	psect	stringtext79,global,class=STRCODE,delta=2
    93                           	psect	stringtext80,global,class=STRCODE,delta=2
    94                           	psect	cinit,global,class=CODE,merge=1,delta=2
    95                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    96                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    97                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    98                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    99                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
   100                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
   101                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
   102                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
   103                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
   104                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
   105                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
   106                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
   107                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
   108                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
   109                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
   110                           	psect	bssBANK11,global,class=BANK11,space=1,delta=1
   111                           	psect	inittext,global,class=CODE,delta=2
   112                           	psect	clrtext,global,class=CODE,delta=2
   113                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
   114                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
   115                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   116                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   117                           	psect	text1,local,class=CODE,merge=1,delta=2
   118                           	psect	text2,local,class=CODE,merge=1,delta=2
   119                           	psect	text3,local,class=CODE,merge=1,delta=2
   120                           	psect	text4,local,class=CODE,merge=1,delta=2
   121                           	psect	text5,local,class=CODE,merge=1,delta=2
   122                           	psect	text6,local,class=CODE,merge=1,delta=2
   123                           	psect	text7,local,class=CODE,merge=1,delta=2
   124                           	psect	text8,local,class=CODE,merge=1,delta=2
   125                           	psect	text9,local,class=CODE,merge=1,delta=2
   126                           	psect	text10,local,class=CODE,merge=1,delta=2
   127                           	psect	text11,local,class=CODE,merge=1,delta=2
   128                           	psect	text12,local,class=CODE,merge=1,delta=2
   129                           	psect	text13,local,class=CODE,merge=1,delta=2
   130                           	psect	text14,local,class=CODE,merge=1,delta=2
   131                           	psect	text15,local,class=CODE,merge=1,delta=2
   132                           	psect	text16,local,class=CODE,merge=1,delta=2
   133                           	psect	text17,local,class=CODE,merge=1,delta=2
   134                           	psect	text18,local,class=CODE,merge=1,delta=2
   135                           	psect	swtext1,local,class=CONST,delta=2
   136                           	psect	text19,local,class=CODE,merge=1,delta=2
   137                           	psect	text20,local,class=CODE,merge=1,delta=2
   138                           	psect	text21,local,class=CODE,merge=1,delta=2
   139                           	psect	text22,local,class=CODE,merge=1,delta=2
   140                           	psect	text23,local,class=CODE,merge=1,delta=2
   141                           	psect	text24,local,class=CODE,merge=1,delta=2
   142                           	psect	text25,local,class=CODE,merge=1,delta=2
   143                           	psect	text26,local,class=CODE,merge=1,delta=2
   144                           	psect	text27,local,class=CODE,merge=1,delta=2
   145                           	psect	text28,local,class=CODE,merge=1,delta=2
   146                           	psect	text29,local,class=CODE,merge=1,delta=2
   147                           	psect	text30,local,class=CODE,merge=1,delta=2
   148                           	psect	text31,local,class=CODE,merge=1,delta=2
   149                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
   150                           	psect	text33,local,class=CODE,merge=1,delta=2
   151                           	psect	text34,local,class=CODE,merge=1,delta=2
   152                           	psect	text35,local,class=CODE,merge=1,delta=2
   153                           	psect	text36,local,class=CODE,merge=1,delta=2
   154                           	psect	text37,local,class=CODE,merge=1,delta=2
   155                           	psect	text38,local,class=CODE,merge=1,delta=2
   156                           	psect	text39,local,class=CODE,merge=1,delta=2
   157                           	psect	text40,local,class=CODE,merge=1,delta=2
   158                           	psect	text41,local,class=CODE,merge=1,delta=2
   159                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
   160                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
   161                           	psect	text44,local,class=CODE,merge=1,delta=2
   162                           	psect	text45,local,class=CODE,merge=1,delta=2
   163                           	psect	text46,local,class=CODE,merge=1,delta=2
   164                           	psect	text47,local,class=CODE,merge=1,delta=2
   165                           	psect	text48,local,class=CODE,merge=1,delta=2
   166                           	psect	text49,local,class=CODE,merge=1,delta=2
   167                           	psect	text50,local,class=CODE,merge=1,delta=2
   168                           	psect	text51,local,class=CODE,merge=1,delta=2
   169                           	psect	text52,local,class=CODE,merge=1,delta=2
   170                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
   171                           	psect	text54,local,class=CODE,merge=1,delta=2,group=2
   172                           	psect	text55,local,class=CODE,merge=1,delta=2,group=2
   173                           	psect	text56,local,class=CODE,merge=1,delta=2
   174                           	psect	text57,local,class=CODE,merge=1,delta=2
   175                           	psect	text58,local,class=CODE,merge=1,delta=2
   176                           	psect	text59,local,class=CODE,merge=1,delta=2
   177                           	psect	text60,local,class=CODE,merge=1,delta=2
   178                           	psect	text61,local,class=CODE,merge=1,delta=2
   179                           	psect	text62,local,class=CODE,merge=1,delta=2
   180                           	psect	text63,local,class=CODE,merge=1,delta=2
   181                           	psect	text64,local,class=CODE,merge=1,delta=2
   182                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
   183                           	psect	text66,local,class=CODE,merge=1,delta=2
   184                           	psect	text67,local,class=CODE,merge=1,delta=2
   185                           	psect	text68,local,class=CODE,merge=1,delta=2
   186                           	psect	text69,local,class=CODE,merge=1,delta=2
   187                           	psect	text70,local,class=CODE,merge=1,delta=2
   188                           	psect	text71,local,class=CODE,merge=1,delta=2
   189                           	psect	text72,local,class=CODE,merge=1,delta=2
   190                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   191                           	psect	text74,local,class=CODE,merge=1,delta=2,group=2
   192                           	psect	text75,local,class=CODE,merge=1,delta=2
   193                           	psect	text76,local,class=CODE,merge=1,delta=2
   194                           	psect	text77,local,class=CODE,merge=1,delta=2
   195                           	psect	text78,local,class=CODE,merge=1,delta=2
   196                           	psect	text79,local,class=CODE,merge=1,delta=2,group=2
   197                           	psect	text80,local,class=CODE,merge=1,delta=2
   198                           	psect	text81,local,class=CODE,merge=1,delta=2
   199                           	psect	text82,local,class=CODE,merge=1,delta=2
   200                           	psect	text83,local,class=CODE,merge=1,delta=2
   201                           	psect	text84,local,class=CODE,merge=1,delta=2
   202                           	psect	text85,local,class=CODE,merge=1,delta=2
   203                           	psect	text86,local,class=CODE,merge=1,delta=2
   204                           	psect	text87,local,class=CODE,merge=1,delta=2
   205                           	psect	text88,local,class=CODE,merge=1,delta=2
   206                           	psect	text89,local,class=CODE,merge=1,delta=2
   207                           	psect	text90,local,class=CODE,merge=1,delta=2
   208                           	psect	text91,local,class=CODE,merge=1,delta=2
   209                           	psect	text92,local,class=CODE,merge=1,delta=2
   210                           	psect	text93,local,class=CODE,merge=1,delta=2
   211                           	psect	text94,local,class=CODE,merge=1,delta=2
   212                           	psect	text95,local,class=CODE,merge=1,delta=2
   213                           	psect	text96,local,class=CODE,merge=1,delta=2
   214                           	psect	text97,local,class=CODE,merge=1,delta=2
   215                           	psect	text98,local,class=CODE,merge=1,delta=2
   216                           	psect	text99,local,class=CODE,merge=1,delta=2
   217                           	psect	text100,local,class=CODE,merge=1,delta=2
   218                           	psect	text101,local,class=CODE,merge=1,delta=2
   219                           	psect	text102,local,class=CODE,merge=1,delta=2
   220                           	psect	intentry,global,class=CODE,delta=2
   221                           	psect	text104,local,class=CODE,merge=1,delta=2
   222                           	psect	text105,local,class=CODE,merge=1,delta=2
   223                           	psect	text106,local,class=CODE,merge=1,delta=2
   224                           	dabs	1,0xCA0,32
   225                           	dabs	1,0xC20,80
   226                           	dabs	1,0xBA0,80
   227                           	dabs	1,0xB30,64
   228                           	dabs	1,0x26F0,0,_asciiCharTableLookup
   229                           	dabs	1,0x7E,2
   230  0000                     
   231                           ; Version 1.42
   232                           ; Generated 13/04/2017 GMT
   233                           ; 
   234                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   235                           ; All rights reserved.
   236                           ; 
   237                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   238                           ; 
   239                           ; Redistribution and use in source and binary forms, with or without modification, are
   240                           ; permitted provided that the following conditions are met:
   241                           ; 
   242                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   243                           ;        conditions and the following disclaimer.
   244                           ; 
   245                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   246                           ;        of conditions and the following disclaimer in the documentation and/or other
   247                           ;        materials provided with the distribution.
   248                           ; 
   249                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   250                           ;        software without specific prior written permission.
   251                           ; 
   252                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   253                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   254                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   255                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   256                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   257                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   258                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   259                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   260                           ; 
   261                           ; 
   262                           ; Code-generator required, PIC16LF18346 Definitions
   263                           ; 
   264                           ; SFR Addresses
   265  0000                     	;# 
   266  0001                     	;# 
   267  0002                     	;# 
   268  0003                     	;# 
   269  0004                     	;# 
   270  0005                     	;# 
   271  0006                     	;# 
   272  0007                     	;# 
   273  0008                     	;# 
   274  0009                     	;# 
   275  000A                     	;# 
   276  000B                     	;# 
   277  000C                     	;# 
   278  000D                     	;# 
   279  000E                     	;# 
   280  0010                     	;# 
   281  0011                     	;# 
   282  0012                     	;# 
   283  0013                     	;# 
   284  0014                     	;# 
   285  0015                     	;# 
   286  0015                     	;# 
   287  0016                     	;# 
   288  0016                     	;# 
   289  0017                     	;# 
   290  0018                     	;# 
   291  0019                     	;# 
   292  0019                     	;# 
   293  001A                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  001D                     	;# 
   297  001E                     	;# 
   298  001F                     	;# 
   299  008C                     	;# 
   300  008D                     	;# 
   301  008E                     	;# 
   302  0090                     	;# 
   303  0091                     	;# 
   304  0092                     	;# 
   305  0093                     	;# 
   306  0094                     	;# 
   307  0097                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  009F                     	;# 
   314  010C                     	;# 
   315  010D                     	;# 
   316  010E                     	;# 
   317  0111                     	;# 
   318  0112                     	;# 
   319  0113                     	;# 
   320  0114                     	;# 
   321  0115                     	;# 
   322  0116                     	;# 
   323  0117                     	;# 
   324  0118                     	;# 
   325  0119                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  018E                     	;# 
   329  0199                     	;# 
   330  0199                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019A                     	;# 
   334  019A                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019C                     	;# 
   341  019C                     	;# 
   342  019C                     	;# 
   343  019D                     	;# 
   344  019D                     	;# 
   345  019D                     	;# 
   346  019E                     	;# 
   347  019E                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  019F                     	;# 
   351  019F                     	;# 
   352  019F                     	;# 
   353  019F                     	;# 
   354  020C                     	;# 
   355  020D                     	;# 
   356  020E                     	;# 
   357  0211                     	;# 
   358  0211                     	;# 
   359  0212                     	;# 
   360  0212                     	;# 
   361  0213                     	;# 
   362  0213                     	;# 
   363  0214                     	;# 
   364  0214                     	;# 
   365  0215                     	;# 
   366  0215                     	;# 
   367  0215                     	;# 
   368  0215                     	;# 
   369  0216                     	;# 
   370  0216                     	;# 
   371  0217                     	;# 
   372  0217                     	;# 
   373  0219                     	;# 
   374  021A                     	;# 
   375  021B                     	;# 
   376  021C                     	;# 
   377  021D                     	;# 
   378  021D                     	;# 
   379  021E                     	;# 
   380  021F                     	;# 
   381  028C                     	;# 
   382  028D                     	;# 
   383  028E                     	;# 
   384  0291                     	;# 
   385  0291                     	;# 
   386  0292                     	;# 
   387  0293                     	;# 
   388  0294                     	;# 
   389  0295                     	;# 
   390  0295                     	;# 
   391  0296                     	;# 
   392  0297                     	;# 
   393  0298                     	;# 
   394  029F                     	;# 
   395  030C                     	;# 
   396  030D                     	;# 
   397  030E                     	;# 
   398  0311                     	;# 
   399  0311                     	;# 
   400  0312                     	;# 
   401  0313                     	;# 
   402  0314                     	;# 
   403  0315                     	;# 
   404  0315                     	;# 
   405  0316                     	;# 
   406  0317                     	;# 
   407  0318                     	;# 
   408  038C                     	;# 
   409  038D                     	;# 
   410  038E                     	;# 
   411  0391                     	;# 
   412  0392                     	;# 
   413  0393                     	;# 
   414  0394                     	;# 
   415  0395                     	;# 
   416  0396                     	;# 
   417  0397                     	;# 
   418  0398                     	;# 
   419  0399                     	;# 
   420  039A                     	;# 
   421  039C                     	;# 
   422  039D                     	;# 
   423  039E                     	;# 
   424  039F                     	;# 
   425  0411                     	;# 
   426  0411                     	;# 
   427  0412                     	;# 
   428  0413                     	;# 
   429  0414                     	;# 
   430  0415                     	;# 
   431  0416                     	;# 
   432  0417                     	;# 
   433  0418                     	;# 
   434  0418                     	;# 
   435  0419                     	;# 
   436  041A                     	;# 
   437  041B                     	;# 
   438  041C                     	;# 
   439  041D                     	;# 
   440  041E                     	;# 
   441  041F                     	;# 
   442  0498                     	;# 
   443  0498                     	;# 
   444  0499                     	;# 
   445  049A                     	;# 
   446  049B                     	;# 
   447  049B                     	;# 
   448  049C                     	;# 
   449  049D                     	;# 
   450  049E                     	;# 
   451  049F                     	;# 
   452  0617                     	;# 
   453  0618                     	;# 
   454  0619                     	;# 
   455  0619                     	;# 
   456  061A                     	;# 
   457  061B                     	;# 
   458  061C                     	;# 
   459  061C                     	;# 
   460  061F                     	;# 
   461  0691                     	;# 
   462  0692                     	;# 
   463  0693                     	;# 
   464  0694                     	;# 
   465  0695                     	;# 
   466  0696                     	;# 
   467  0697                     	;# 
   468  0698                     	;# 
   469  0699                     	;# 
   470  0711                     	;# 
   471  0712                     	;# 
   472  0713                     	;# 
   473  0714                     	;# 
   474  0715                     	;# 
   475  0716                     	;# 
   476  0717                     	;# 
   477  0718                     	;# 
   478  0719                     	;# 
   479  0891                     	;# 
   480  0891                     	;# 
   481  0891                     	;# 
   482  0891                     	;# 
   483  0891                     	;# 
   484  0891                     	;# 
   485  0892                     	;# 
   486  0892                     	;# 
   487  0892                     	;# 
   488  0893                     	;# 
   489  0893                     	;# 
   490  0893                     	;# 
   491  0893                     	;# 
   492  0893                     	;# 
   493  0893                     	;# 
   494  0894                     	;# 
   495  0894                     	;# 
   496  0894                     	;# 
   497  0895                     	;# 
   498  0895                     	;# 
   499  0895                     	;# 
   500  0896                     	;# 
   501  0896                     	;# 
   502  0896                     	;# 
   503  089B                     	;# 
   504  0911                     	;# 
   505  0912                     	;# 
   506  0913                     	;# 
   507  0914                     	;# 
   508  0915                     	;# 
   509  0916                     	;# 
   510  0918                     	;# 
   511  0919                     	;# 
   512  091A                     	;# 
   513  091B                     	;# 
   514  091C                     	;# 
   515  091D                     	;# 
   516  091E                     	;# 
   517  091F                     	;# 
   518  0E0F                     	;# 
   519  0E10                     	;# 
   520  0E11                     	;# 
   521  0E12                     	;# 
   522  0E13                     	;# 
   523  0E14                     	;# 
   524  0E15                     	;# 
   525  0E16                     	;# 
   526  0E17                     	;# 
   527  0E18                     	;# 
   528  0E19                     	;# 
   529  0E1A                     	;# 
   530  0E1B                     	;# 
   531  0E1C                     	;# 
   532  0E1D                     	;# 
   533  0E1E                     	;# 
   534  0E1F                     	;# 
   535  0E20                     	;# 
   536  0E21                     	;# 
   537  0E22                     	;# 
   538  0E24                     	;# 
   539  0E25                     	;# 
   540  0E28                     	;# 
   541  0E29                     	;# 
   542  0E2A                     	;# 
   543  0E2B                     	;# 
   544  0E2C                     	;# 
   545  0E2D                     	;# 
   546  0E2E                     	;# 
   547  0E2F                     	;# 
   548  0E90                     	;# 
   549  0E91                     	;# 
   550  0E92                     	;# 
   551  0E94                     	;# 
   552  0E95                     	;# 
   553  0E9C                     	;# 
   554  0E9D                     	;# 
   555  0E9E                     	;# 
   556  0E9F                     	;# 
   557  0EA0                     	;# 
   558  0EA1                     	;# 
   559  0EA2                     	;# 
   560  0EA3                     	;# 
   561  0EA4                     	;# 
   562  0EA5                     	;# 
   563  0EA6                     	;# 
   564  0EA7                     	;# 
   565  0F0F                     	;# 
   566  0F10                     	;# 
   567  0F11                     	;# 
   568  0F12                     	;# 
   569  0F13                     	;# 
   570  0F14                     	;# 
   571  0F15                     	;# 
   572  0F16                     	;# 
   573  0F17                     	;# 
   574  0F18                     	;# 
   575  0F19                     	;# 
   576  0F1A                     	;# 
   577  0F1B                     	;# 
   578  0F1C                     	;# 
   579  0F1D                     	;# 
   580  0F1E                     	;# 
   581  0F1F                     	;# 
   582  0F20                     	;# 
   583  0F21                     	;# 
   584  0F22                     	;# 
   585  0F23                     	;# 
   586  0F24                     	;# 
   587  0F25                     	;# 
   588  0F26                     	;# 
   589  0F27                     	;# 
   590  0F28                     	;# 
   591  0F29                     	;# 
   592  0F2A                     	;# 
   593  0F2B                     	;# 
   594  0F2C                     	;# 
   595  0F2D                     	;# 
   596  0F2E                     	;# 
   597  0F2F                     	;# 
   598  0F30                     	;# 
   599  0F31                     	;# 
   600  0F32                     	;# 
   601  0F33                     	;# 
   602  0F34                     	;# 
   603  0F35                     	;# 
   604  0F36                     	;# 
   605  0F37                     	;# 
   606  0FE4                     	;# 
   607  0FE5                     	;# 
   608  0FE6                     	;# 
   609  0FE7                     	;# 
   610  0FE8                     	;# 
   611  0FE9                     	;# 
   612  0FEA                     	;# 
   613  0FEB                     	;# 
   614  0FED                     	;# 
   615  0FEE                     	;# 
   616  0FEF                     	;# 
   617  0000                     	;# 
   618  0001                     	;# 
   619  0002                     	;# 
   620  0003                     	;# 
   621  0004                     	;# 
   622  0005                     	;# 
   623  0006                     	;# 
   624  0007                     	;# 
   625  0008                     	;# 
   626  0009                     	;# 
   627  000A                     	;# 
   628  000B                     	;# 
   629  000C                     	;# 
   630  000D                     	;# 
   631  000E                     	;# 
   632  0010                     	;# 
   633  0011                     	;# 
   634  0012                     	;# 
   635  0013                     	;# 
   636  0014                     	;# 
   637  0015                     	;# 
   638  0015                     	;# 
   639  0016                     	;# 
   640  0016                     	;# 
   641  0017                     	;# 
   642  0018                     	;# 
   643  0019                     	;# 
   644  0019                     	;# 
   645  001A                     	;# 
   646  001B                     	;# 
   647  001C                     	;# 
   648  001D                     	;# 
   649  001E                     	;# 
   650  001F                     	;# 
   651  008C                     	;# 
   652  008D                     	;# 
   653  008E                     	;# 
   654  0090                     	;# 
   655  0091                     	;# 
   656  0092                     	;# 
   657  0093                     	;# 
   658  0094                     	;# 
   659  0097                     	;# 
   660  009B                     	;# 
   661  009B                     	;# 
   662  009C                     	;# 
   663  009D                     	;# 
   664  009E                     	;# 
   665  009F                     	;# 
   666  010C                     	;# 
   667  010D                     	;# 
   668  010E                     	;# 
   669  0111                     	;# 
   670  0112                     	;# 
   671  0113                     	;# 
   672  0114                     	;# 
   673  0115                     	;# 
   674  0116                     	;# 
   675  0117                     	;# 
   676  0118                     	;# 
   677  0119                     	;# 
   678  018C                     	;# 
   679  018D                     	;# 
   680  018E                     	;# 
   681  0199                     	;# 
   682  0199                     	;# 
   683  0199                     	;# 
   684  019A                     	;# 
   685  019A                     	;# 
   686  019A                     	;# 
   687  019B                     	;# 
   688  019B                     	;# 
   689  019B                     	;# 
   690  019B                     	;# 
   691  019B                     	;# 
   692  019C                     	;# 
   693  019C                     	;# 
   694  019C                     	;# 
   695  019D                     	;# 
   696  019D                     	;# 
   697  019D                     	;# 
   698  019E                     	;# 
   699  019E                     	;# 
   700  019E                     	;# 
   701  019F                     	;# 
   702  019F                     	;# 
   703  019F                     	;# 
   704  019F                     	;# 
   705  019F                     	;# 
   706  020C                     	;# 
   707  020D                     	;# 
   708  020E                     	;# 
   709  0211                     	;# 
   710  0211                     	;# 
   711  0212                     	;# 
   712  0212                     	;# 
   713  0213                     	;# 
   714  0213                     	;# 
   715  0214                     	;# 
   716  0214                     	;# 
   717  0215                     	;# 
   718  0215                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0216                     	;# 
   722  0216                     	;# 
   723  0217                     	;# 
   724  0217                     	;# 
   725  0219                     	;# 
   726  021A                     	;# 
   727  021B                     	;# 
   728  021C                     	;# 
   729  021D                     	;# 
   730  021D                     	;# 
   731  021E                     	;# 
   732  021F                     	;# 
   733  028C                     	;# 
   734  028D                     	;# 
   735  028E                     	;# 
   736  0291                     	;# 
   737  0291                     	;# 
   738  0292                     	;# 
   739  0293                     	;# 
   740  0294                     	;# 
   741  0295                     	;# 
   742  0295                     	;# 
   743  0296                     	;# 
   744  0297                     	;# 
   745  0298                     	;# 
   746  029F                     	;# 
   747  030C                     	;# 
   748  030D                     	;# 
   749  030E                     	;# 
   750  0311                     	;# 
   751  0311                     	;# 
   752  0312                     	;# 
   753  0313                     	;# 
   754  0314                     	;# 
   755  0315                     	;# 
   756  0315                     	;# 
   757  0316                     	;# 
   758  0317                     	;# 
   759  0318                     	;# 
   760  038C                     	;# 
   761  038D                     	;# 
   762  038E                     	;# 
   763  0391                     	;# 
   764  0392                     	;# 
   765  0393                     	;# 
   766  0394                     	;# 
   767  0395                     	;# 
   768  0396                     	;# 
   769  0397                     	;# 
   770  0398                     	;# 
   771  0399                     	;# 
   772  039A                     	;# 
   773  039C                     	;# 
   774  039D                     	;# 
   775  039E                     	;# 
   776  039F                     	;# 
   777  0411                     	;# 
   778  0411                     	;# 
   779  0412                     	;# 
   780  0413                     	;# 
   781  0414                     	;# 
   782  0415                     	;# 
   783  0416                     	;# 
   784  0417                     	;# 
   785  0418                     	;# 
   786  0418                     	;# 
   787  0419                     	;# 
   788  041A                     	;# 
   789  041B                     	;# 
   790  041C                     	;# 
   791  041D                     	;# 
   792  041E                     	;# 
   793  041F                     	;# 
   794  0498                     	;# 
   795  0498                     	;# 
   796  0499                     	;# 
   797  049A                     	;# 
   798  049B                     	;# 
   799  049B                     	;# 
   800  049C                     	;# 
   801  049D                     	;# 
   802  049E                     	;# 
   803  049F                     	;# 
   804  0617                     	;# 
   805  0618                     	;# 
   806  0619                     	;# 
   807  0619                     	;# 
   808  061A                     	;# 
   809  061B                     	;# 
   810  061C                     	;# 
   811  061C                     	;# 
   812  061F                     	;# 
   813  0691                     	;# 
   814  0692                     	;# 
   815  0693                     	;# 
   816  0694                     	;# 
   817  0695                     	;# 
   818  0696                     	;# 
   819  0697                     	;# 
   820  0698                     	;# 
   821  0699                     	;# 
   822  0711                     	;# 
   823  0712                     	;# 
   824  0713                     	;# 
   825  0714                     	;# 
   826  0715                     	;# 
   827  0716                     	;# 
   828  0717                     	;# 
   829  0718                     	;# 
   830  0719                     	;# 
   831  0891                     	;# 
   832  0891                     	;# 
   833  0891                     	;# 
   834  0891                     	;# 
   835  0891                     	;# 
   836  0891                     	;# 
   837  0892                     	;# 
   838  0892                     	;# 
   839  0892                     	;# 
   840  0893                     	;# 
   841  0893                     	;# 
   842  0893                     	;# 
   843  0893                     	;# 
   844  0893                     	;# 
   845  0893                     	;# 
   846  0894                     	;# 
   847  0894                     	;# 
   848  0894                     	;# 
   849  0895                     	;# 
   850  0895                     	;# 
   851  0895                     	;# 
   852  0896                     	;# 
   853  0896                     	;# 
   854  0896                     	;# 
   855  089B                     	;# 
   856  0911                     	;# 
   857  0912                     	;# 
   858  0913                     	;# 
   859  0914                     	;# 
   860  0915                     	;# 
   861  0916                     	;# 
   862  0918                     	;# 
   863  0919                     	;# 
   864  091A                     	;# 
   865  091B                     	;# 
   866  091C                     	;# 
   867  091D                     	;# 
   868  091E                     	;# 
   869  091F                     	;# 
   870  0E0F                     	;# 
   871  0E10                     	;# 
   872  0E11                     	;# 
   873  0E12                     	;# 
   874  0E13                     	;# 
   875  0E14                     	;# 
   876  0E15                     	;# 
   877  0E16                     	;# 
   878  0E17                     	;# 
   879  0E18                     	;# 
   880  0E19                     	;# 
   881  0E1A                     	;# 
   882  0E1B                     	;# 
   883  0E1C                     	;# 
   884  0E1D                     	;# 
   885  0E1E                     	;# 
   886  0E1F                     	;# 
   887  0E20                     	;# 
   888  0E21                     	;# 
   889  0E22                     	;# 
   890  0E24                     	;# 
   891  0E25                     	;# 
   892  0E28                     	;# 
   893  0E29                     	;# 
   894  0E2A                     	;# 
   895  0E2B                     	;# 
   896  0E2C                     	;# 
   897  0E2D                     	;# 
   898  0E2E                     	;# 
   899  0E2F                     	;# 
   900  0E90                     	;# 
   901  0E91                     	;# 
   902  0E92                     	;# 
   903  0E94                     	;# 
   904  0E95                     	;# 
   905  0E9C                     	;# 
   906  0E9D                     	;# 
   907  0E9E                     	;# 
   908  0E9F                     	;# 
   909  0EA0                     	;# 
   910  0EA1                     	;# 
   911  0EA2                     	;# 
   912  0EA3                     	;# 
   913  0EA4                     	;# 
   914  0EA5                     	;# 
   915  0EA6                     	;# 
   916  0EA7                     	;# 
   917  0F0F                     	;# 
   918  0F10                     	;# 
   919  0F11                     	;# 
   920  0F12                     	;# 
   921  0F13                     	;# 
   922  0F14                     	;# 
   923  0F15                     	;# 
   924  0F16                     	;# 
   925  0F17                     	;# 
   926  0F18                     	;# 
   927  0F19                     	;# 
   928  0F1A                     	;# 
   929  0F1B                     	;# 
   930  0F1C                     	;# 
   931  0F1D                     	;# 
   932  0F1E                     	;# 
   933  0F1F                     	;# 
   934  0F20                     	;# 
   935  0F21                     	;# 
   936  0F22                     	;# 
   937  0F23                     	;# 
   938  0F24                     	;# 
   939  0F25                     	;# 
   940  0F26                     	;# 
   941  0F27                     	;# 
   942  0F28                     	;# 
   943  0F29                     	;# 
   944  0F2A                     	;# 
   945  0F2B                     	;# 
   946  0F2C                     	;# 
   947  0F2D                     	;# 
   948  0F2E                     	;# 
   949  0F2F                     	;# 
   950  0F30                     	;# 
   951  0F31                     	;# 
   952  0F32                     	;# 
   953  0F33                     	;# 
   954  0F34                     	;# 
   955  0F35                     	;# 
   956  0F36                     	;# 
   957  0F37                     	;# 
   958  0FE4                     	;# 
   959  0FE5                     	;# 
   960  0FE6                     	;# 
   961  0FE7                     	;# 
   962  0FE8                     	;# 
   963  0FE9                     	;# 
   964  0FEA                     	;# 
   965  0FEB                     	;# 
   966  0FED                     	;# 
   967  0FEE                     	;# 
   968  0FEF                     	;# 
   969  0000                     	;# 
   970  0001                     	;# 
   971  0002                     	;# 
   972  0003                     	;# 
   973  0004                     	;# 
   974  0005                     	;# 
   975  0006                     	;# 
   976  0007                     	;# 
   977  0008                     	;# 
   978  0009                     	;# 
   979  000A                     	;# 
   980  000B                     	;# 
   981  000C                     	;# 
   982  000D                     	;# 
   983  000E                     	;# 
   984  0010                     	;# 
   985  0011                     	;# 
   986  0012                     	;# 
   987  0013                     	;# 
   988  0014                     	;# 
   989  0015                     	;# 
   990  0015                     	;# 
   991  0016                     	;# 
   992  0016                     	;# 
   993  0017                     	;# 
   994  0018                     	;# 
   995  0019                     	;# 
   996  0019                     	;# 
   997  001A                     	;# 
   998  001B                     	;# 
   999  001C                     	;# 
  1000  001D                     	;# 
  1001  001E                     	;# 
  1002  001F                     	;# 
  1003  008C                     	;# 
  1004  008D                     	;# 
  1005  008E                     	;# 
  1006  0090                     	;# 
  1007  0091                     	;# 
  1008  0092                     	;# 
  1009  0093                     	;# 
  1010  0094                     	;# 
  1011  0097                     	;# 
  1012  009B                     	;# 
  1013  009B                     	;# 
  1014  009C                     	;# 
  1015  009D                     	;# 
  1016  009E                     	;# 
  1017  009F                     	;# 
  1018  010C                     	;# 
  1019  010D                     	;# 
  1020  010E                     	;# 
  1021  0111                     	;# 
  1022  0112                     	;# 
  1023  0113                     	;# 
  1024  0114                     	;# 
  1025  0115                     	;# 
  1026  0116                     	;# 
  1027  0117                     	;# 
  1028  0118                     	;# 
  1029  0119                     	;# 
  1030  018C                     	;# 
  1031  018D                     	;# 
  1032  018E                     	;# 
  1033  0199                     	;# 
  1034  0199                     	;# 
  1035  0199                     	;# 
  1036  019A                     	;# 
  1037  019A                     	;# 
  1038  019A                     	;# 
  1039  019B                     	;# 
  1040  019B                     	;# 
  1041  019B                     	;# 
  1042  019B                     	;# 
  1043  019B                     	;# 
  1044  019C                     	;# 
  1045  019C                     	;# 
  1046  019C                     	;# 
  1047  019D                     	;# 
  1048  019D                     	;# 
  1049  019D                     	;# 
  1050  019E                     	;# 
  1051  019E                     	;# 
  1052  019E                     	;# 
  1053  019F                     	;# 
  1054  019F                     	;# 
  1055  019F                     	;# 
  1056  019F                     	;# 
  1057  019F                     	;# 
  1058  020C                     	;# 
  1059  020D                     	;# 
  1060  020E                     	;# 
  1061  0211                     	;# 
  1062  0211                     	;# 
  1063  0212                     	;# 
  1064  0212                     	;# 
  1065  0213                     	;# 
  1066  0213                     	;# 
  1067  0214                     	;# 
  1068  0214                     	;# 
  1069  0215                     	;# 
  1070  0215                     	;# 
  1071  0215                     	;# 
  1072  0215                     	;# 
  1073  0216                     	;# 
  1074  0216                     	;# 
  1075  0217                     	;# 
  1076  0217                     	;# 
  1077  0219                     	;# 
  1078  021A                     	;# 
  1079  021B                     	;# 
  1080  021C                     	;# 
  1081  021D                     	;# 
  1082  021D                     	;# 
  1083  021E                     	;# 
  1084  021F                     	;# 
  1085  028C                     	;# 
  1086  028D                     	;# 
  1087  028E                     	;# 
  1088  0291                     	;# 
  1089  0291                     	;# 
  1090  0292                     	;# 
  1091  0293                     	;# 
  1092  0294                     	;# 
  1093  0295                     	;# 
  1094  0295                     	;# 
  1095  0296                     	;# 
  1096  0297                     	;# 
  1097  0298                     	;# 
  1098  029F                     	;# 
  1099  030C                     	;# 
  1100  030D                     	;# 
  1101  030E                     	;# 
  1102  0311                     	;# 
  1103  0311                     	;# 
  1104  0312                     	;# 
  1105  0313                     	;# 
  1106  0314                     	;# 
  1107  0315                     	;# 
  1108  0315                     	;# 
  1109  0316                     	;# 
  1110  0317                     	;# 
  1111  0318                     	;# 
  1112  038C                     	;# 
  1113  038D                     	;# 
  1114  038E                     	;# 
  1115  0391                     	;# 
  1116  0392                     	;# 
  1117  0393                     	;# 
  1118  0394                     	;# 
  1119  0395                     	;# 
  1120  0396                     	;# 
  1121  0397                     	;# 
  1122  0398                     	;# 
  1123  0399                     	;# 
  1124  039A                     	;# 
  1125  039C                     	;# 
  1126  039D                     	;# 
  1127  039E                     	;# 
  1128  039F                     	;# 
  1129  0411                     	;# 
  1130  0411                     	;# 
  1131  0412                     	;# 
  1132  0413                     	;# 
  1133  0414                     	;# 
  1134  0415                     	;# 
  1135  0416                     	;# 
  1136  0417                     	;# 
  1137  0418                     	;# 
  1138  0418                     	;# 
  1139  0419                     	;# 
  1140  041A                     	;# 
  1141  041B                     	;# 
  1142  041C                     	;# 
  1143  041D                     	;# 
  1144  041E                     	;# 
  1145  041F                     	;# 
  1146  0498                     	;# 
  1147  0498                     	;# 
  1148  0499                     	;# 
  1149  049A                     	;# 
  1150  049B                     	;# 
  1151  049B                     	;# 
  1152  049C                     	;# 
  1153  049D                     	;# 
  1154  049E                     	;# 
  1155  049F                     	;# 
  1156  0617                     	;# 
  1157  0618                     	;# 
  1158  0619                     	;# 
  1159  0619                     	;# 
  1160  061A                     	;# 
  1161  061B                     	;# 
  1162  061C                     	;# 
  1163  061C                     	;# 
  1164  061F                     	;# 
  1165  0691                     	;# 
  1166  0692                     	;# 
  1167  0693                     	;# 
  1168  0694                     	;# 
  1169  0695                     	;# 
  1170  0696                     	;# 
  1171  0697                     	;# 
  1172  0698                     	;# 
  1173  0699                     	;# 
  1174  0711                     	;# 
  1175  0712                     	;# 
  1176  0713                     	;# 
  1177  0714                     	;# 
  1178  0715                     	;# 
  1179  0716                     	;# 
  1180  0717                     	;# 
  1181  0718                     	;# 
  1182  0719                     	;# 
  1183  0891                     	;# 
  1184  0891                     	;# 
  1185  0891                     	;# 
  1186  0891                     	;# 
  1187  0891                     	;# 
  1188  0891                     	;# 
  1189  0892                     	;# 
  1190  0892                     	;# 
  1191  0892                     	;# 
  1192  0893                     	;# 
  1193  0893                     	;# 
  1194  0893                     	;# 
  1195  0893                     	;# 
  1196  0893                     	;# 
  1197  0893                     	;# 
  1198  0894                     	;# 
  1199  0894                     	;# 
  1200  0894                     	;# 
  1201  0895                     	;# 
  1202  0895                     	;# 
  1203  0895                     	;# 
  1204  0896                     	;# 
  1205  0896                     	;# 
  1206  0896                     	;# 
  1207  089B                     	;# 
  1208  0911                     	;# 
  1209  0912                     	;# 
  1210  0913                     	;# 
  1211  0914                     	;# 
  1212  0915                     	;# 
  1213  0916                     	;# 
  1214  0918                     	;# 
  1215  0919                     	;# 
  1216  091A                     	;# 
  1217  091B                     	;# 
  1218  091C                     	;# 
  1219  091D                     	;# 
  1220  091E                     	;# 
  1221  091F                     	;# 
  1222  0E0F                     	;# 
  1223  0E10                     	;# 
  1224  0E11                     	;# 
  1225  0E12                     	;# 
  1226  0E13                     	;# 
  1227  0E14                     	;# 
  1228  0E15                     	;# 
  1229  0E16                     	;# 
  1230  0E17                     	;# 
  1231  0E18                     	;# 
  1232  0E19                     	;# 
  1233  0E1A                     	;# 
  1234  0E1B                     	;# 
  1235  0E1C                     	;# 
  1236  0E1D                     	;# 
  1237  0E1E                     	;# 
  1238  0E1F                     	;# 
  1239  0E20                     	;# 
  1240  0E21                     	;# 
  1241  0E22                     	;# 
  1242  0E24                     	;# 
  1243  0E25                     	;# 
  1244  0E28                     	;# 
  1245  0E29                     	;# 
  1246  0E2A                     	;# 
  1247  0E2B                     	;# 
  1248  0E2C                     	;# 
  1249  0E2D                     	;# 
  1250  0E2E                     	;# 
  1251  0E2F                     	;# 
  1252  0E90                     	;# 
  1253  0E91                     	;# 
  1254  0E92                     	;# 
  1255  0E94                     	;# 
  1256  0E95                     	;# 
  1257  0E9C                     	;# 
  1258  0E9D                     	;# 
  1259  0E9E                     	;# 
  1260  0E9F                     	;# 
  1261  0EA0                     	;# 
  1262  0EA1                     	;# 
  1263  0EA2                     	;# 
  1264  0EA3                     	;# 
  1265  0EA4                     	;# 
  1266  0EA5                     	;# 
  1267  0EA6                     	;# 
  1268  0EA7                     	;# 
  1269  0F0F                     	;# 
  1270  0F10                     	;# 
  1271  0F11                     	;# 
  1272  0F12                     	;# 
  1273  0F13                     	;# 
  1274  0F14                     	;# 
  1275  0F15                     	;# 
  1276  0F16                     	;# 
  1277  0F17                     	;# 
  1278  0F18                     	;# 
  1279  0F19                     	;# 
  1280  0F1A                     	;# 
  1281  0F1B                     	;# 
  1282  0F1C                     	;# 
  1283  0F1D                     	;# 
  1284  0F1E                     	;# 
  1285  0F1F                     	;# 
  1286  0F20                     	;# 
  1287  0F21                     	;# 
  1288  0F22                     	;# 
  1289  0F23                     	;# 
  1290  0F24                     	;# 
  1291  0F25                     	;# 
  1292  0F26                     	;# 
  1293  0F27                     	;# 
  1294  0F28                     	;# 
  1295  0F29                     	;# 
  1296  0F2A                     	;# 
  1297  0F2B                     	;# 
  1298  0F2C                     	;# 
  1299  0F2D                     	;# 
  1300  0F2E                     	;# 
  1301  0F2F                     	;# 
  1302  0F30                     	;# 
  1303  0F31                     	;# 
  1304  0F32                     	;# 
  1305  0F33                     	;# 
  1306  0F34                     	;# 
  1307  0F35                     	;# 
  1308  0F36                     	;# 
  1309  0F37                     	;# 
  1310  0FE4                     	;# 
  1311  0FE5                     	;# 
  1312  0FE6                     	;# 
  1313  0FE7                     	;# 
  1314  0FE8                     	;# 
  1315  0FE9                     	;# 
  1316  0FEA                     	;# 
  1317  0FEB                     	;# 
  1318  0FED                     	;# 
  1319  0FEE                     	;# 
  1320  0FEF                     	;# 
  1321  0000                     	;# 
  1322  0001                     	;# 
  1323  0002                     	;# 
  1324  0003                     	;# 
  1325  0004                     	;# 
  1326  0005                     	;# 
  1327  0006                     	;# 
  1328  0007                     	;# 
  1329  0008                     	;# 
  1330  0009                     	;# 
  1331  000A                     	;# 
  1332  000B                     	;# 
  1333  000C                     	;# 
  1334  000D                     	;# 
  1335  000E                     	;# 
  1336  0010                     	;# 
  1337  0011                     	;# 
  1338  0012                     	;# 
  1339  0013                     	;# 
  1340  0014                     	;# 
  1341  0015                     	;# 
  1342  0015                     	;# 
  1343  0016                     	;# 
  1344  0016                     	;# 
  1345  0017                     	;# 
  1346  0018                     	;# 
  1347  0019                     	;# 
  1348  0019                     	;# 
  1349  001A                     	;# 
  1350  001B                     	;# 
  1351  001C                     	;# 
  1352  001D                     	;# 
  1353  001E                     	;# 
  1354  001F                     	;# 
  1355  008C                     	;# 
  1356  008D                     	;# 
  1357  008E                     	;# 
  1358  0090                     	;# 
  1359  0091                     	;# 
  1360  0092                     	;# 
  1361  0093                     	;# 
  1362  0094                     	;# 
  1363  0097                     	;# 
  1364  009B                     	;# 
  1365  009B                     	;# 
  1366  009C                     	;# 
  1367  009D                     	;# 
  1368  009E                     	;# 
  1369  009F                     	;# 
  1370  010C                     	;# 
  1371  010D                     	;# 
  1372  010E                     	;# 
  1373  0111                     	;# 
  1374  0112                     	;# 
  1375  0113                     	;# 
  1376  0114                     	;# 
  1377  0115                     	;# 
  1378  0116                     	;# 
  1379  0117                     	;# 
  1380  0118                     	;# 
  1381  0119                     	;# 
  1382  018C                     	;# 
  1383  018D                     	;# 
  1384  018E                     	;# 
  1385  0199                     	;# 
  1386  0199                     	;# 
  1387  0199                     	;# 
  1388  019A                     	;# 
  1389  019A                     	;# 
  1390  019A                     	;# 
  1391  019B                     	;# 
  1392  019B                     	;# 
  1393  019B                     	;# 
  1394  019B                     	;# 
  1395  019B                     	;# 
  1396  019C                     	;# 
  1397  019C                     	;# 
  1398  019C                     	;# 
  1399  019D                     	;# 
  1400  019D                     	;# 
  1401  019D                     	;# 
  1402  019E                     	;# 
  1403  019E                     	;# 
  1404  019E                     	;# 
  1405  019F                     	;# 
  1406  019F                     	;# 
  1407  019F                     	;# 
  1408  019F                     	;# 
  1409  019F                     	;# 
  1410  020C                     	;# 
  1411  020D                     	;# 
  1412  020E                     	;# 
  1413  0211                     	;# 
  1414  0211                     	;# 
  1415  0212                     	;# 
  1416  0212                     	;# 
  1417  0213                     	;# 
  1418  0213                     	;# 
  1419  0214                     	;# 
  1420  0214                     	;# 
  1421  0215                     	;# 
  1422  0215                     	;# 
  1423  0215                     	;# 
  1424  0215                     	;# 
  1425  0216                     	;# 
  1426  0216                     	;# 
  1427  0217                     	;# 
  1428  0217                     	;# 
  1429  0219                     	;# 
  1430  021A                     	;# 
  1431  021B                     	;# 
  1432  021C                     	;# 
  1433  021D                     	;# 
  1434  021D                     	;# 
  1435  021E                     	;# 
  1436  021F                     	;# 
  1437  028C                     	;# 
  1438  028D                     	;# 
  1439  028E                     	;# 
  1440  0291                     	;# 
  1441  0291                     	;# 
  1442  0292                     	;# 
  1443  0293                     	;# 
  1444  0294                     	;# 
  1445  0295                     	;# 
  1446  0295                     	;# 
  1447  0296                     	;# 
  1448  0297                     	;# 
  1449  0298                     	;# 
  1450  029F                     	;# 
  1451  030C                     	;# 
  1452  030D                     	;# 
  1453  030E                     	;# 
  1454  0311                     	;# 
  1455  0311                     	;# 
  1456  0312                     	;# 
  1457  0313                     	;# 
  1458  0314                     	;# 
  1459  0315                     	;# 
  1460  0315                     	;# 
  1461  0316                     	;# 
  1462  0317                     	;# 
  1463  0318                     	;# 
  1464  038C                     	;# 
  1465  038D                     	;# 
  1466  038E                     	;# 
  1467  0391                     	;# 
  1468  0392                     	;# 
  1469  0393                     	;# 
  1470  0394                     	;# 
  1471  0395                     	;# 
  1472  0396                     	;# 
  1473  0397                     	;# 
  1474  0398                     	;# 
  1475  0399                     	;# 
  1476  039A                     	;# 
  1477  039C                     	;# 
  1478  039D                     	;# 
  1479  039E                     	;# 
  1480  039F                     	;# 
  1481  0411                     	;# 
  1482  0411                     	;# 
  1483  0412                     	;# 
  1484  0413                     	;# 
  1485  0414                     	;# 
  1486  0415                     	;# 
  1487  0416                     	;# 
  1488  0417                     	;# 
  1489  0418                     	;# 
  1490  0418                     	;# 
  1491  0419                     	;# 
  1492  041A                     	;# 
  1493  041B                     	;# 
  1494  041C                     	;# 
  1495  041D                     	;# 
  1496  041E                     	;# 
  1497  041F                     	;# 
  1498  0498                     	;# 
  1499  0498                     	;# 
  1500  0499                     	;# 
  1501  049A                     	;# 
  1502  049B                     	;# 
  1503  049B                     	;# 
  1504  049C                     	;# 
  1505  049D                     	;# 
  1506  049E                     	;# 
  1507  049F                     	;# 
  1508  0617                     	;# 
  1509  0618                     	;# 
  1510  0619                     	;# 
  1511  0619                     	;# 
  1512  061A                     	;# 
  1513  061B                     	;# 
  1514  061C                     	;# 
  1515  061C                     	;# 
  1516  061F                     	;# 
  1517  0691                     	;# 
  1518  0692                     	;# 
  1519  0693                     	;# 
  1520  0694                     	;# 
  1521  0695                     	;# 
  1522  0696                     	;# 
  1523  0697                     	;# 
  1524  0698                     	;# 
  1525  0699                     	;# 
  1526  0711                     	;# 
  1527  0712                     	;# 
  1528  0713                     	;# 
  1529  0714                     	;# 
  1530  0715                     	;# 
  1531  0716                     	;# 
  1532  0717                     	;# 
  1533  0718                     	;# 
  1534  0719                     	;# 
  1535  0891                     	;# 
  1536  0891                     	;# 
  1537  0891                     	;# 
  1538  0891                     	;# 
  1539  0891                     	;# 
  1540  0891                     	;# 
  1541  0892                     	;# 
  1542  0892                     	;# 
  1543  0892                     	;# 
  1544  0893                     	;# 
  1545  0893                     	;# 
  1546  0893                     	;# 
  1547  0893                     	;# 
  1548  0893                     	;# 
  1549  0893                     	;# 
  1550  0894                     	;# 
  1551  0894                     	;# 
  1552  0894                     	;# 
  1553  0895                     	;# 
  1554  0895                     	;# 
  1555  0895                     	;# 
  1556  0896                     	;# 
  1557  0896                     	;# 
  1558  0896                     	;# 
  1559  089B                     	;# 
  1560  0911                     	;# 
  1561  0912                     	;# 
  1562  0913                     	;# 
  1563  0914                     	;# 
  1564  0915                     	;# 
  1565  0916                     	;# 
  1566  0918                     	;# 
  1567  0919                     	;# 
  1568  091A                     	;# 
  1569  091B                     	;# 
  1570  091C                     	;# 
  1571  091D                     	;# 
  1572  091E                     	;# 
  1573  091F                     	;# 
  1574  0E0F                     	;# 
  1575  0E10                     	;# 
  1576  0E11                     	;# 
  1577  0E12                     	;# 
  1578  0E13                     	;# 
  1579  0E14                     	;# 
  1580  0E15                     	;# 
  1581  0E16                     	;# 
  1582  0E17                     	;# 
  1583  0E18                     	;# 
  1584  0E19                     	;# 
  1585  0E1A                     	;# 
  1586  0E1B                     	;# 
  1587  0E1C                     	;# 
  1588  0E1D                     	;# 
  1589  0E1E                     	;# 
  1590  0E1F                     	;# 
  1591  0E20                     	;# 
  1592  0E21                     	;# 
  1593  0E22                     	;# 
  1594  0E24                     	;# 
  1595  0E25                     	;# 
  1596  0E28                     	;# 
  1597  0E29                     	;# 
  1598  0E2A                     	;# 
  1599  0E2B                     	;# 
  1600  0E2C                     	;# 
  1601  0E2D                     	;# 
  1602  0E2E                     	;# 
  1603  0E2F                     	;# 
  1604  0E90                     	;# 
  1605  0E91                     	;# 
  1606  0E92                     	;# 
  1607  0E94                     	;# 
  1608  0E95                     	;# 
  1609  0E9C                     	;# 
  1610  0E9D                     	;# 
  1611  0E9E                     	;# 
  1612  0E9F                     	;# 
  1613  0EA0                     	;# 
  1614  0EA1                     	;# 
  1615  0EA2                     	;# 
  1616  0EA3                     	;# 
  1617  0EA4                     	;# 
  1618  0EA5                     	;# 
  1619  0EA6                     	;# 
  1620  0EA7                     	;# 
  1621  0F0F                     	;# 
  1622  0F10                     	;# 
  1623  0F11                     	;# 
  1624  0F12                     	;# 
  1625  0F13                     	;# 
  1626  0F14                     	;# 
  1627  0F15                     	;# 
  1628  0F16                     	;# 
  1629  0F17                     	;# 
  1630  0F18                     	;# 
  1631  0F19                     	;# 
  1632  0F1A                     	;# 
  1633  0F1B                     	;# 
  1634  0F1C                     	;# 
  1635  0F1D                     	;# 
  1636  0F1E                     	;# 
  1637  0F1F                     	;# 
  1638  0F20                     	;# 
  1639  0F21                     	;# 
  1640  0F22                     	;# 
  1641  0F23                     	;# 
  1642  0F24                     	;# 
  1643  0F25                     	;# 
  1644  0F26                     	;# 
  1645  0F27                     	;# 
  1646  0F28                     	;# 
  1647  0F29                     	;# 
  1648  0F2A                     	;# 
  1649  0F2B                     	;# 
  1650  0F2C                     	;# 
  1651  0F2D                     	;# 
  1652  0F2E                     	;# 
  1653  0F2F                     	;# 
  1654  0F30                     	;# 
  1655  0F31                     	;# 
  1656  0F32                     	;# 
  1657  0F33                     	;# 
  1658  0F34                     	;# 
  1659  0F35                     	;# 
  1660  0F36                     	;# 
  1661  0F37                     	;# 
  1662  0FE4                     	;# 
  1663  0FE5                     	;# 
  1664  0FE6                     	;# 
  1665  0FE7                     	;# 
  1666  0FE8                     	;# 
  1667  0FE9                     	;# 
  1668  0FEA                     	;# 
  1669  0FEB                     	;# 
  1670  0FED                     	;# 
  1671  0FEE                     	;# 
  1672  0FEF                     	;# 
  1673  0000                     	;# 
  1674  0001                     	;# 
  1675  0002                     	;# 
  1676  0003                     	;# 
  1677  0004                     	;# 
  1678  0005                     	;# 
  1679  0006                     	;# 
  1680  0007                     	;# 
  1681  0008                     	;# 
  1682  0009                     	;# 
  1683  000A                     	;# 
  1684  000B                     	;# 
  1685  000C                     	;# 
  1686  000D                     	;# 
  1687  000E                     	;# 
  1688  0010                     	;# 
  1689  0011                     	;# 
  1690  0012                     	;# 
  1691  0013                     	;# 
  1692  0014                     	;# 
  1693  0015                     	;# 
  1694  0015                     	;# 
  1695  0016                     	;# 
  1696  0016                     	;# 
  1697  0017                     	;# 
  1698  0018                     	;# 
  1699  0019                     	;# 
  1700  0019                     	;# 
  1701  001A                     	;# 
  1702  001B                     	;# 
  1703  001C                     	;# 
  1704  001D                     	;# 
  1705  001E                     	;# 
  1706  001F                     	;# 
  1707  008C                     	;# 
  1708  008D                     	;# 
  1709  008E                     	;# 
  1710  0090                     	;# 
  1711  0091                     	;# 
  1712  0092                     	;# 
  1713  0093                     	;# 
  1714  0094                     	;# 
  1715  0097                     	;# 
  1716  009B                     	;# 
  1717  009B                     	;# 
  1718  009C                     	;# 
  1719  009D                     	;# 
  1720  009E                     	;# 
  1721  009F                     	;# 
  1722  010C                     	;# 
  1723  010D                     	;# 
  1724  010E                     	;# 
  1725  0111                     	;# 
  1726  0112                     	;# 
  1727  0113                     	;# 
  1728  0114                     	;# 
  1729  0115                     	;# 
  1730  0116                     	;# 
  1731  0117                     	;# 
  1732  0118                     	;# 
  1733  0119                     	;# 
  1734  018C                     	;# 
  1735  018D                     	;# 
  1736  018E                     	;# 
  1737  0199                     	;# 
  1738  0199                     	;# 
  1739  0199                     	;# 
  1740  019A                     	;# 
  1741  019A                     	;# 
  1742  019A                     	;# 
  1743  019B                     	;# 
  1744  019B                     	;# 
  1745  019B                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019C                     	;# 
  1749  019C                     	;# 
  1750  019C                     	;# 
  1751  019D                     	;# 
  1752  019D                     	;# 
  1753  019D                     	;# 
  1754  019E                     	;# 
  1755  019E                     	;# 
  1756  019E                     	;# 
  1757  019F                     	;# 
  1758  019F                     	;# 
  1759  019F                     	;# 
  1760  019F                     	;# 
  1761  019F                     	;# 
  1762  020C                     	;# 
  1763  020D                     	;# 
  1764  020E                     	;# 
  1765  0211                     	;# 
  1766  0211                     	;# 
  1767  0212                     	;# 
  1768  0212                     	;# 
  1769  0213                     	;# 
  1770  0213                     	;# 
  1771  0214                     	;# 
  1772  0214                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0219                     	;# 
  1782  021A                     	;# 
  1783  021B                     	;# 
  1784  021C                     	;# 
  1785  021D                     	;# 
  1786  021D                     	;# 
  1787  021E                     	;# 
  1788  021F                     	;# 
  1789  028C                     	;# 
  1790  028D                     	;# 
  1791  028E                     	;# 
  1792  0291                     	;# 
  1793  0291                     	;# 
  1794  0292                     	;# 
  1795  0293                     	;# 
  1796  0294                     	;# 
  1797  0295                     	;# 
  1798  0295                     	;# 
  1799  0296                     	;# 
  1800  0297                     	;# 
  1801  0298                     	;# 
  1802  029F                     	;# 
  1803  030C                     	;# 
  1804  030D                     	;# 
  1805  030E                     	;# 
  1806  0311                     	;# 
  1807  0311                     	;# 
  1808  0312                     	;# 
  1809  0313                     	;# 
  1810  0314                     	;# 
  1811  0315                     	;# 
  1812  0315                     	;# 
  1813  0316                     	;# 
  1814  0317                     	;# 
  1815  0318                     	;# 
  1816  038C                     	;# 
  1817  038D                     	;# 
  1818  038E                     	;# 
  1819  0391                     	;# 
  1820  0392                     	;# 
  1821  0393                     	;# 
  1822  0394                     	;# 
  1823  0395                     	;# 
  1824  0396                     	;# 
  1825  0397                     	;# 
  1826  0398                     	;# 
  1827  0399                     	;# 
  1828  039A                     	;# 
  1829  039C                     	;# 
  1830  039D                     	;# 
  1831  039E                     	;# 
  1832  039F                     	;# 
  1833  0411                     	;# 
  1834  0411                     	;# 
  1835  0412                     	;# 
  1836  0413                     	;# 
  1837  0414                     	;# 
  1838  0415                     	;# 
  1839  0416                     	;# 
  1840  0417                     	;# 
  1841  0418                     	;# 
  1842  0418                     	;# 
  1843  0419                     	;# 
  1844  041A                     	;# 
  1845  041B                     	;# 
  1846  041C                     	;# 
  1847  041D                     	;# 
  1848  041E                     	;# 
  1849  041F                     	;# 
  1850  0498                     	;# 
  1851  0498                     	;# 
  1852  0499                     	;# 
  1853  049A                     	;# 
  1854  049B                     	;# 
  1855  049B                     	;# 
  1856  049C                     	;# 
  1857  049D                     	;# 
  1858  049E                     	;# 
  1859  049F                     	;# 
  1860  0617                     	;# 
  1861  0618                     	;# 
  1862  0619                     	;# 
  1863  0619                     	;# 
  1864  061A                     	;# 
  1865  061B                     	;# 
  1866  061C                     	;# 
  1867  061C                     	;# 
  1868  061F                     	;# 
  1869  0691                     	;# 
  1870  0692                     	;# 
  1871  0693                     	;# 
  1872  0694                     	;# 
  1873  0695                     	;# 
  1874  0696                     	;# 
  1875  0697                     	;# 
  1876  0698                     	;# 
  1877  0699                     	;# 
  1878  0711                     	;# 
  1879  0712                     	;# 
  1880  0713                     	;# 
  1881  0714                     	;# 
  1882  0715                     	;# 
  1883  0716                     	;# 
  1884  0717                     	;# 
  1885  0718                     	;# 
  1886  0719                     	;# 
  1887  0891                     	;# 
  1888  0891                     	;# 
  1889  0891                     	;# 
  1890  0891                     	;# 
  1891  0891                     	;# 
  1892  0891                     	;# 
  1893  0892                     	;# 
  1894  0892                     	;# 
  1895  0892                     	;# 
  1896  0893                     	;# 
  1897  0893                     	;# 
  1898  0893                     	;# 
  1899  0893                     	;# 
  1900  0893                     	;# 
  1901  0893                     	;# 
  1902  0894                     	;# 
  1903  0894                     	;# 
  1904  0894                     	;# 
  1905  0895                     	;# 
  1906  0895                     	;# 
  1907  0895                     	;# 
  1908  0896                     	;# 
  1909  0896                     	;# 
  1910  0896                     	;# 
  1911  089B                     	;# 
  1912  0911                     	;# 
  1913  0912                     	;# 
  1914  0913                     	;# 
  1915  0914                     	;# 
  1916  0915                     	;# 
  1917  0916                     	;# 
  1918  0918                     	;# 
  1919  0919                     	;# 
  1920  091A                     	;# 
  1921  091B                     	;# 
  1922  091C                     	;# 
  1923  091D                     	;# 
  1924  091E                     	;# 
  1925  091F                     	;# 
  1926  0E0F                     	;# 
  1927  0E10                     	;# 
  1928  0E11                     	;# 
  1929  0E12                     	;# 
  1930  0E13                     	;# 
  1931  0E14                     	;# 
  1932  0E15                     	;# 
  1933  0E16                     	;# 
  1934  0E17                     	;# 
  1935  0E18                     	;# 
  1936  0E19                     	;# 
  1937  0E1A                     	;# 
  1938  0E1B                     	;# 
  1939  0E1C                     	;# 
  1940  0E1D                     	;# 
  1941  0E1E                     	;# 
  1942  0E1F                     	;# 
  1943  0E20                     	;# 
  1944  0E21                     	;# 
  1945  0E22                     	;# 
  1946  0E24                     	;# 
  1947  0E25                     	;# 
  1948  0E28                     	;# 
  1949  0E29                     	;# 
  1950  0E2A                     	;# 
  1951  0E2B                     	;# 
  1952  0E2C                     	;# 
  1953  0E2D                     	;# 
  1954  0E2E                     	;# 
  1955  0E2F                     	;# 
  1956  0E90                     	;# 
  1957  0E91                     	;# 
  1958  0E92                     	;# 
  1959  0E94                     	;# 
  1960  0E95                     	;# 
  1961  0E9C                     	;# 
  1962  0E9D                     	;# 
  1963  0E9E                     	;# 
  1964  0E9F                     	;# 
  1965  0EA0                     	;# 
  1966  0EA1                     	;# 
  1967  0EA2                     	;# 
  1968  0EA3                     	;# 
  1969  0EA4                     	;# 
  1970  0EA5                     	;# 
  1971  0EA6                     	;# 
  1972  0EA7                     	;# 
  1973  0F0F                     	;# 
  1974  0F10                     	;# 
  1975  0F11                     	;# 
  1976  0F12                     	;# 
  1977  0F13                     	;# 
  1978  0F14                     	;# 
  1979  0F15                     	;# 
  1980  0F16                     	;# 
  1981  0F17                     	;# 
  1982  0F18                     	;# 
  1983  0F19                     	;# 
  1984  0F1A                     	;# 
  1985  0F1B                     	;# 
  1986  0F1C                     	;# 
  1987  0F1D                     	;# 
  1988  0F1E                     	;# 
  1989  0F1F                     	;# 
  1990  0F20                     	;# 
  1991  0F21                     	;# 
  1992  0F22                     	;# 
  1993  0F23                     	;# 
  1994  0F24                     	;# 
  1995  0F25                     	;# 
  1996  0F26                     	;# 
  1997  0F27                     	;# 
  1998  0F28                     	;# 
  1999  0F29                     	;# 
  2000  0F2A                     	;# 
  2001  0F2B                     	;# 
  2002  0F2C                     	;# 
  2003  0F2D                     	;# 
  2004  0F2E                     	;# 
  2005  0F2F                     	;# 
  2006  0F30                     	;# 
  2007  0F31                     	;# 
  2008  0F32                     	;# 
  2009  0F33                     	;# 
  2010  0F34                     	;# 
  2011  0F35                     	;# 
  2012  0F36                     	;# 
  2013  0F37                     	;# 
  2014  0FE4                     	;# 
  2015  0FE5                     	;# 
  2016  0FE6                     	;# 
  2017  0FE7                     	;# 
  2018  0FE8                     	;# 
  2019  0FE9                     	;# 
  2020  0FEA                     	;# 
  2021  0FEB                     	;# 
  2022  0FED                     	;# 
  2023  0FEE                     	;# 
  2024  0FEF                     	;# 
  2025  0000                     	;# 
  2026  0001                     	;# 
  2027  0002                     	;# 
  2028  0003                     	;# 
  2029  0004                     	;# 
  2030  0005                     	;# 
  2031  0006                     	;# 
  2032  0007                     	;# 
  2033  0008                     	;# 
  2034  0009                     	;# 
  2035  000A                     	;# 
  2036  000B                     	;# 
  2037  000C                     	;# 
  2038  000D                     	;# 
  2039  000E                     	;# 
  2040  0010                     	;# 
  2041  0011                     	;# 
  2042  0012                     	;# 
  2043  0013                     	;# 
  2044  0014                     	;# 
  2045  0015                     	;# 
  2046  0015                     	;# 
  2047  0016                     	;# 
  2048  0016                     	;# 
  2049  0017                     	;# 
  2050  0018                     	;# 
  2051  0019                     	;# 
  2052  0019                     	;# 
  2053  001A                     	;# 
  2054  001B                     	;# 
  2055  001C                     	;# 
  2056  001D                     	;# 
  2057  001E                     	;# 
  2058  001F                     	;# 
  2059  008C                     	;# 
  2060  008D                     	;# 
  2061  008E                     	;# 
  2062  0090                     	;# 
  2063  0091                     	;# 
  2064  0092                     	;# 
  2065  0093                     	;# 
  2066  0094                     	;# 
  2067  0097                     	;# 
  2068  009B                     	;# 
  2069  009B                     	;# 
  2070  009C                     	;# 
  2071  009D                     	;# 
  2072  009E                     	;# 
  2073  009F                     	;# 
  2074  010C                     	;# 
  2075  010D                     	;# 
  2076  010E                     	;# 
  2077  0111                     	;# 
  2078  0112                     	;# 
  2079  0113                     	;# 
  2080  0114                     	;# 
  2081  0115                     	;# 
  2082  0116                     	;# 
  2083  0117                     	;# 
  2084  0118                     	;# 
  2085  0119                     	;# 
  2086  018C                     	;# 
  2087  018D                     	;# 
  2088  018E                     	;# 
  2089  0199                     	;# 
  2090  0199                     	;# 
  2091  0199                     	;# 
  2092  019A                     	;# 
  2093  019A                     	;# 
  2094  019A                     	;# 
  2095  019B                     	;# 
  2096  019B                     	;# 
  2097  019B                     	;# 
  2098  019B                     	;# 
  2099  019B                     	;# 
  2100  019C                     	;# 
  2101  019C                     	;# 
  2102  019C                     	;# 
  2103  019D                     	;# 
  2104  019D                     	;# 
  2105  019D                     	;# 
  2106  019E                     	;# 
  2107  019E                     	;# 
  2108  019E                     	;# 
  2109  019F                     	;# 
  2110  019F                     	;# 
  2111  019F                     	;# 
  2112  019F                     	;# 
  2113  019F                     	;# 
  2114  020C                     	;# 
  2115  020D                     	;# 
  2116  020E                     	;# 
  2117  0211                     	;# 
  2118  0211                     	;# 
  2119  0212                     	;# 
  2120  0212                     	;# 
  2121  0213                     	;# 
  2122  0213                     	;# 
  2123  0214                     	;# 
  2124  0214                     	;# 
  2125  0215                     	;# 
  2126  0215                     	;# 
  2127  0215                     	;# 
  2128  0215                     	;# 
  2129  0216                     	;# 
  2130  0216                     	;# 
  2131  0217                     	;# 
  2132  0217                     	;# 
  2133  0219                     	;# 
  2134  021A                     	;# 
  2135  021B                     	;# 
  2136  021C                     	;# 
  2137  021D                     	;# 
  2138  021D                     	;# 
  2139  021E                     	;# 
  2140  021F                     	;# 
  2141  028C                     	;# 
  2142  028D                     	;# 
  2143  028E                     	;# 
  2144  0291                     	;# 
  2145  0291                     	;# 
  2146  0292                     	;# 
  2147  0293                     	;# 
  2148  0294                     	;# 
  2149  0295                     	;# 
  2150  0295                     	;# 
  2151  0296                     	;# 
  2152  0297                     	;# 
  2153  0298                     	;# 
  2154  029F                     	;# 
  2155  030C                     	;# 
  2156  030D                     	;# 
  2157  030E                     	;# 
  2158  0311                     	;# 
  2159  0311                     	;# 
  2160  0312                     	;# 
  2161  0313                     	;# 
  2162  0314                     	;# 
  2163  0315                     	;# 
  2164  0315                     	;# 
  2165  0316                     	;# 
  2166  0317                     	;# 
  2167  0318                     	;# 
  2168  038C                     	;# 
  2169  038D                     	;# 
  2170  038E                     	;# 
  2171  0391                     	;# 
  2172  0392                     	;# 
  2173  0393                     	;# 
  2174  0394                     	;# 
  2175  0395                     	;# 
  2176  0396                     	;# 
  2177  0397                     	;# 
  2178  0398                     	;# 
  2179  0399                     	;# 
  2180  039A                     	;# 
  2181  039C                     	;# 
  2182  039D                     	;# 
  2183  039E                     	;# 
  2184  039F                     	;# 
  2185  0411                     	;# 
  2186  0411                     	;# 
  2187  0412                     	;# 
  2188  0413                     	;# 
  2189  0414                     	;# 
  2190  0415                     	;# 
  2191  0416                     	;# 
  2192  0417                     	;# 
  2193  0418                     	;# 
  2194  0418                     	;# 
  2195  0419                     	;# 
  2196  041A                     	;# 
  2197  041B                     	;# 
  2198  041C                     	;# 
  2199  041D                     	;# 
  2200  041E                     	;# 
  2201  041F                     	;# 
  2202  0498                     	;# 
  2203  0498                     	;# 
  2204  0499                     	;# 
  2205  049A                     	;# 
  2206  049B                     	;# 
  2207  049B                     	;# 
  2208  049C                     	;# 
  2209  049D                     	;# 
  2210  049E                     	;# 
  2211  049F                     	;# 
  2212  0617                     	;# 
  2213  0618                     	;# 
  2214  0619                     	;# 
  2215  0619                     	;# 
  2216  061A                     	;# 
  2217  061B                     	;# 
  2218  061C                     	;# 
  2219  061C                     	;# 
  2220  061F                     	;# 
  2221  0691                     	;# 
  2222  0692                     	;# 
  2223  0693                     	;# 
  2224  0694                     	;# 
  2225  0695                     	;# 
  2226  0696                     	;# 
  2227  0697                     	;# 
  2228  0698                     	;# 
  2229  0699                     	;# 
  2230  0711                     	;# 
  2231  0712                     	;# 
  2232  0713                     	;# 
  2233  0714                     	;# 
  2234  0715                     	;# 
  2235  0716                     	;# 
  2236  0717                     	;# 
  2237  0718                     	;# 
  2238  0719                     	;# 
  2239  0891                     	;# 
  2240  0891                     	;# 
  2241  0891                     	;# 
  2242  0891                     	;# 
  2243  0891                     	;# 
  2244  0891                     	;# 
  2245  0892                     	;# 
  2246  0892                     	;# 
  2247  0892                     	;# 
  2248  0893                     	;# 
  2249  0893                     	;# 
  2250  0893                     	;# 
  2251  0893                     	;# 
  2252  0893                     	;# 
  2253  0893                     	;# 
  2254  0894                     	;# 
  2255  0894                     	;# 
  2256  0894                     	;# 
  2257  0895                     	;# 
  2258  0895                     	;# 
  2259  0895                     	;# 
  2260  0896                     	;# 
  2261  0896                     	;# 
  2262  0896                     	;# 
  2263  089B                     	;# 
  2264  0911                     	;# 
  2265  0912                     	;# 
  2266  0913                     	;# 
  2267  0914                     	;# 
  2268  0915                     	;# 
  2269  0916                     	;# 
  2270  0918                     	;# 
  2271  0919                     	;# 
  2272  091A                     	;# 
  2273  091B                     	;# 
  2274  091C                     	;# 
  2275  091D                     	;# 
  2276  091E                     	;# 
  2277  091F                     	;# 
  2278  0E0F                     	;# 
  2279  0E10                     	;# 
  2280  0E11                     	;# 
  2281  0E12                     	;# 
  2282  0E13                     	;# 
  2283  0E14                     	;# 
  2284  0E15                     	;# 
  2285  0E16                     	;# 
  2286  0E17                     	;# 
  2287  0E18                     	;# 
  2288  0E19                     	;# 
  2289  0E1A                     	;# 
  2290  0E1B                     	;# 
  2291  0E1C                     	;# 
  2292  0E1D                     	;# 
  2293  0E1E                     	;# 
  2294  0E1F                     	;# 
  2295  0E20                     	;# 
  2296  0E21                     	;# 
  2297  0E22                     	;# 
  2298  0E24                     	;# 
  2299  0E25                     	;# 
  2300  0E28                     	;# 
  2301  0E29                     	;# 
  2302  0E2A                     	;# 
  2303  0E2B                     	;# 
  2304  0E2C                     	;# 
  2305  0E2D                     	;# 
  2306  0E2E                     	;# 
  2307  0E2F                     	;# 
  2308  0E90                     	;# 
  2309  0E91                     	;# 
  2310  0E92                     	;# 
  2311  0E94                     	;# 
  2312  0E95                     	;# 
  2313  0E9C                     	;# 
  2314  0E9D                     	;# 
  2315  0E9E                     	;# 
  2316  0E9F                     	;# 
  2317  0EA0                     	;# 
  2318  0EA1                     	;# 
  2319  0EA2                     	;# 
  2320  0EA3                     	;# 
  2321  0EA4                     	;# 
  2322  0EA5                     	;# 
  2323  0EA6                     	;# 
  2324  0EA7                     	;# 
  2325  0F0F                     	;# 
  2326  0F10                     	;# 
  2327  0F11                     	;# 
  2328  0F12                     	;# 
  2329  0F13                     	;# 
  2330  0F14                     	;# 
  2331  0F15                     	;# 
  2332  0F16                     	;# 
  2333  0F17                     	;# 
  2334  0F18                     	;# 
  2335  0F19                     	;# 
  2336  0F1A                     	;# 
  2337  0F1B                     	;# 
  2338  0F1C                     	;# 
  2339  0F1D                     	;# 
  2340  0F1E                     	;# 
  2341  0F1F                     	;# 
  2342  0F20                     	;# 
  2343  0F21                     	;# 
  2344  0F22                     	;# 
  2345  0F23                     	;# 
  2346  0F24                     	;# 
  2347  0F25                     	;# 
  2348  0F26                     	;# 
  2349  0F27                     	;# 
  2350  0F28                     	;# 
  2351  0F29                     	;# 
  2352  0F2A                     	;# 
  2353  0F2B                     	;# 
  2354  0F2C                     	;# 
  2355  0F2D                     	;# 
  2356  0F2E                     	;# 
  2357  0F2F                     	;# 
  2358  0F30                     	;# 
  2359  0F31                     	;# 
  2360  0F32                     	;# 
  2361  0F33                     	;# 
  2362  0F34                     	;# 
  2363  0F35                     	;# 
  2364  0F36                     	;# 
  2365  0F37                     	;# 
  2366  0FE4                     	;# 
  2367  0FE5                     	;# 
  2368  0FE6                     	;# 
  2369  0FE7                     	;# 
  2370  0FE8                     	;# 
  2371  0FE9                     	;# 
  2372  0FEA                     	;# 
  2373  0FEB                     	;# 
  2374  0FED                     	;# 
  2375  0FEE                     	;# 
  2376  0FEF                     	;# 
  2377  0000                     	;# 
  2378  0001                     	;# 
  2379  0002                     	;# 
  2380  0003                     	;# 
  2381  0004                     	;# 
  2382  0005                     	;# 
  2383  0006                     	;# 
  2384  0007                     	;# 
  2385  0008                     	;# 
  2386  0009                     	;# 
  2387  000A                     	;# 
  2388  000B                     	;# 
  2389  000C                     	;# 
  2390  000D                     	;# 
  2391  000E                     	;# 
  2392  0010                     	;# 
  2393  0011                     	;# 
  2394  0012                     	;# 
  2395  0013                     	;# 
  2396  0014                     	;# 
  2397  0015                     	;# 
  2398  0015                     	;# 
  2399  0016                     	;# 
  2400  0016                     	;# 
  2401  0017                     	;# 
  2402  0018                     	;# 
  2403  0019                     	;# 
  2404  0019                     	;# 
  2405  001A                     	;# 
  2406  001B                     	;# 
  2407  001C                     	;# 
  2408  001D                     	;# 
  2409  001E                     	;# 
  2410  001F                     	;# 
  2411  008C                     	;# 
  2412  008D                     	;# 
  2413  008E                     	;# 
  2414  0090                     	;# 
  2415  0091                     	;# 
  2416  0092                     	;# 
  2417  0093                     	;# 
  2418  0094                     	;# 
  2419  0097                     	;# 
  2420  009B                     	;# 
  2421  009B                     	;# 
  2422  009C                     	;# 
  2423  009D                     	;# 
  2424  009E                     	;# 
  2425  009F                     	;# 
  2426  010C                     	;# 
  2427  010D                     	;# 
  2428  010E                     	;# 
  2429  0111                     	;# 
  2430  0112                     	;# 
  2431  0113                     	;# 
  2432  0114                     	;# 
  2433  0115                     	;# 
  2434  0116                     	;# 
  2435  0117                     	;# 
  2436  0118                     	;# 
  2437  0119                     	;# 
  2438  018C                     	;# 
  2439  018D                     	;# 
  2440  018E                     	;# 
  2441  0199                     	;# 
  2442  0199                     	;# 
  2443  0199                     	;# 
  2444  019A                     	;# 
  2445  019A                     	;# 
  2446  019A                     	;# 
  2447  019B                     	;# 
  2448  019B                     	;# 
  2449  019B                     	;# 
  2450  019B                     	;# 
  2451  019B                     	;# 
  2452  019C                     	;# 
  2453  019C                     	;# 
  2454  019C                     	;# 
  2455  019D                     	;# 
  2456  019D                     	;# 
  2457  019D                     	;# 
  2458  019E                     	;# 
  2459  019E                     	;# 
  2460  019E                     	;# 
  2461  019F                     	;# 
  2462  019F                     	;# 
  2463  019F                     	;# 
  2464  019F                     	;# 
  2465  019F                     	;# 
  2466  020C                     	;# 
  2467  020D                     	;# 
  2468  020E                     	;# 
  2469  0211                     	;# 
  2470  0211                     	;# 
  2471  0212                     	;# 
  2472  0212                     	;# 
  2473  0213                     	;# 
  2474  0213                     	;# 
  2475  0214                     	;# 
  2476  0214                     	;# 
  2477  0215                     	;# 
  2478  0215                     	;# 
  2479  0215                     	;# 
  2480  0215                     	;# 
  2481  0216                     	;# 
  2482  0216                     	;# 
  2483  0217                     	;# 
  2484  0217                     	;# 
  2485  0219                     	;# 
  2486  021A                     	;# 
  2487  021B                     	;# 
  2488  021C                     	;# 
  2489  021D                     	;# 
  2490  021D                     	;# 
  2491  021E                     	;# 
  2492  021F                     	;# 
  2493  028C                     	;# 
  2494  028D                     	;# 
  2495  028E                     	;# 
  2496  0291                     	;# 
  2497  0291                     	;# 
  2498  0292                     	;# 
  2499  0293                     	;# 
  2500  0294                     	;# 
  2501  0295                     	;# 
  2502  0295                     	;# 
  2503  0296                     	;# 
  2504  0297                     	;# 
  2505  0298                     	;# 
  2506  029F                     	;# 
  2507  030C                     	;# 
  2508  030D                     	;# 
  2509  030E                     	;# 
  2510  0311                     	;# 
  2511  0311                     	;# 
  2512  0312                     	;# 
  2513  0313                     	;# 
  2514  0314                     	;# 
  2515  0315                     	;# 
  2516  0315                     	;# 
  2517  0316                     	;# 
  2518  0317                     	;# 
  2519  0318                     	;# 
  2520  038C                     	;# 
  2521  038D                     	;# 
  2522  038E                     	;# 
  2523  0391                     	;# 
  2524  0392                     	;# 
  2525  0393                     	;# 
  2526  0394                     	;# 
  2527  0395                     	;# 
  2528  0396                     	;# 
  2529  0397                     	;# 
  2530  0398                     	;# 
  2531  0399                     	;# 
  2532  039A                     	;# 
  2533  039C                     	;# 
  2534  039D                     	;# 
  2535  039E                     	;# 
  2536  039F                     	;# 
  2537  0411                     	;# 
  2538  0411                     	;# 
  2539  0412                     	;# 
  2540  0413                     	;# 
  2541  0414                     	;# 
  2542  0415                     	;# 
  2543  0416                     	;# 
  2544  0417                     	;# 
  2545  0418                     	;# 
  2546  0418                     	;# 
  2547  0419                     	;# 
  2548  041A                     	;# 
  2549  041B                     	;# 
  2550  041C                     	;# 
  2551  041D                     	;# 
  2552  041E                     	;# 
  2553  041F                     	;# 
  2554  0498                     	;# 
  2555  0498                     	;# 
  2556  0499                     	;# 
  2557  049A                     	;# 
  2558  049B                     	;# 
  2559  049B                     	;# 
  2560  049C                     	;# 
  2561  049D                     	;# 
  2562  049E                     	;# 
  2563  049F                     	;# 
  2564  0617                     	;# 
  2565  0618                     	;# 
  2566  0619                     	;# 
  2567  0619                     	;# 
  2568  061A                     	;# 
  2569  061B                     	;# 
  2570  061C                     	;# 
  2571  061C                     	;# 
  2572  061F                     	;# 
  2573  0691                     	;# 
  2574  0692                     	;# 
  2575  0693                     	;# 
  2576  0694                     	;# 
  2577  0695                     	;# 
  2578  0696                     	;# 
  2579  0697                     	;# 
  2580  0698                     	;# 
  2581  0699                     	;# 
  2582  0711                     	;# 
  2583  0712                     	;# 
  2584  0713                     	;# 
  2585  0714                     	;# 
  2586  0715                     	;# 
  2587  0716                     	;# 
  2588  0717                     	;# 
  2589  0718                     	;# 
  2590  0719                     	;# 
  2591  0891                     	;# 
  2592  0891                     	;# 
  2593  0891                     	;# 
  2594  0891                     	;# 
  2595  0891                     	;# 
  2596  0891                     	;# 
  2597  0892                     	;# 
  2598  0892                     	;# 
  2599  0892                     	;# 
  2600  0893                     	;# 
  2601  0893                     	;# 
  2602  0893                     	;# 
  2603  0893                     	;# 
  2604  0893                     	;# 
  2605  0893                     	;# 
  2606  0894                     	;# 
  2607  0894                     	;# 
  2608  0894                     	;# 
  2609  0895                     	;# 
  2610  0895                     	;# 
  2611  0895                     	;# 
  2612  0896                     	;# 
  2613  0896                     	;# 
  2614  0896                     	;# 
  2615  089B                     	;# 
  2616  0911                     	;# 
  2617  0912                     	;# 
  2618  0913                     	;# 
  2619  0914                     	;# 
  2620  0915                     	;# 
  2621  0916                     	;# 
  2622  0918                     	;# 
  2623  0919                     	;# 
  2624  091A                     	;# 
  2625  091B                     	;# 
  2626  091C                     	;# 
  2627  091D                     	;# 
  2628  091E                     	;# 
  2629  091F                     	;# 
  2630  0E0F                     	;# 
  2631  0E10                     	;# 
  2632  0E11                     	;# 
  2633  0E12                     	;# 
  2634  0E13                     	;# 
  2635  0E14                     	;# 
  2636  0E15                     	;# 
  2637  0E16                     	;# 
  2638  0E17                     	;# 
  2639  0E18                     	;# 
  2640  0E19                     	;# 
  2641  0E1A                     	;# 
  2642  0E1B                     	;# 
  2643  0E1C                     	;# 
  2644  0E1D                     	;# 
  2645  0E1E                     	;# 
  2646  0E1F                     	;# 
  2647  0E20                     	;# 
  2648  0E21                     	;# 
  2649  0E22                     	;# 
  2650  0E24                     	;# 
  2651  0E25                     	;# 
  2652  0E28                     	;# 
  2653  0E29                     	;# 
  2654  0E2A                     	;# 
  2655  0E2B                     	;# 
  2656  0E2C                     	;# 
  2657  0E2D                     	;# 
  2658  0E2E                     	;# 
  2659  0E2F                     	;# 
  2660  0E90                     	;# 
  2661  0E91                     	;# 
  2662  0E92                     	;# 
  2663  0E94                     	;# 
  2664  0E95                     	;# 
  2665  0E9C                     	;# 
  2666  0E9D                     	;# 
  2667  0E9E                     	;# 
  2668  0E9F                     	;# 
  2669  0EA0                     	;# 
  2670  0EA1                     	;# 
  2671  0EA2                     	;# 
  2672  0EA3                     	;# 
  2673  0EA4                     	;# 
  2674  0EA5                     	;# 
  2675  0EA6                     	;# 
  2676  0EA7                     	;# 
  2677  0F0F                     	;# 
  2678  0F10                     	;# 
  2679  0F11                     	;# 
  2680  0F12                     	;# 
  2681  0F13                     	;# 
  2682  0F14                     	;# 
  2683  0F15                     	;# 
  2684  0F16                     	;# 
  2685  0F17                     	;# 
  2686  0F18                     	;# 
  2687  0F19                     	;# 
  2688  0F1A                     	;# 
  2689  0F1B                     	;# 
  2690  0F1C                     	;# 
  2691  0F1D                     	;# 
  2692  0F1E                     	;# 
  2693  0F1F                     	;# 
  2694  0F20                     	;# 
  2695  0F21                     	;# 
  2696  0F22                     	;# 
  2697  0F23                     	;# 
  2698  0F24                     	;# 
  2699  0F25                     	;# 
  2700  0F26                     	;# 
  2701  0F27                     	;# 
  2702  0F28                     	;# 
  2703  0F29                     	;# 
  2704  0F2A                     	;# 
  2705  0F2B                     	;# 
  2706  0F2C                     	;# 
  2707  0F2D                     	;# 
  2708  0F2E                     	;# 
  2709  0F2F                     	;# 
  2710  0F30                     	;# 
  2711  0F31                     	;# 
  2712  0F32                     	;# 
  2713  0F33                     	;# 
  2714  0F34                     	;# 
  2715  0F35                     	;# 
  2716  0F36                     	;# 
  2717  0F37                     	;# 
  2718  0FE4                     	;# 
  2719  0FE5                     	;# 
  2720  0FE6                     	;# 
  2721  0FE7                     	;# 
  2722  0FE8                     	;# 
  2723  0FE9                     	;# 
  2724  0FEA                     	;# 
  2725  0FEB                     	;# 
  2726  0FED                     	;# 
  2727  0FEE                     	;# 
  2728  0FEF                     	;# 
  2729  0000                     	;# 
  2730  0001                     	;# 
  2731  0002                     	;# 
  2732  0003                     	;# 
  2733  0004                     	;# 
  2734  0005                     	;# 
  2735  0006                     	;# 
  2736  0007                     	;# 
  2737  0008                     	;# 
  2738  0009                     	;# 
  2739  000A                     	;# 
  2740  000B                     	;# 
  2741  000C                     	;# 
  2742  000D                     	;# 
  2743  000E                     	;# 
  2744  0010                     	;# 
  2745  0011                     	;# 
  2746  0012                     	;# 
  2747  0013                     	;# 
  2748  0014                     	;# 
  2749  0015                     	;# 
  2750  0015                     	;# 
  2751  0016                     	;# 
  2752  0016                     	;# 
  2753  0017                     	;# 
  2754  0018                     	;# 
  2755  0019                     	;# 
  2756  0019                     	;# 
  2757  001A                     	;# 
  2758  001B                     	;# 
  2759  001C                     	;# 
  2760  001D                     	;# 
  2761  001E                     	;# 
  2762  001F                     	;# 
  2763  008C                     	;# 
  2764  008D                     	;# 
  2765  008E                     	;# 
  2766  0090                     	;# 
  2767  0091                     	;# 
  2768  0092                     	;# 
  2769  0093                     	;# 
  2770  0094                     	;# 
  2771  0097                     	;# 
  2772  009B                     	;# 
  2773  009B                     	;# 
  2774  009C                     	;# 
  2775  009D                     	;# 
  2776  009E                     	;# 
  2777  009F                     	;# 
  2778  010C                     	;# 
  2779  010D                     	;# 
  2780  010E                     	;# 
  2781  0111                     	;# 
  2782  0112                     	;# 
  2783  0113                     	;# 
  2784  0114                     	;# 
  2785  0115                     	;# 
  2786  0116                     	;# 
  2787  0117                     	;# 
  2788  0118                     	;# 
  2789  0119                     	;# 
  2790  018C                     	;# 
  2791  018D                     	;# 
  2792  018E                     	;# 
  2793  0199                     	;# 
  2794  0199                     	;# 
  2795  0199                     	;# 
  2796  019A                     	;# 
  2797  019A                     	;# 
  2798  019A                     	;# 
  2799  019B                     	;# 
  2800  019B                     	;# 
  2801  019B                     	;# 
  2802  019B                     	;# 
  2803  019B                     	;# 
  2804  019C                     	;# 
  2805  019C                     	;# 
  2806  019C                     	;# 
  2807  019D                     	;# 
  2808  019D                     	;# 
  2809  019D                     	;# 
  2810  019E                     	;# 
  2811  019E                     	;# 
  2812  019E                     	;# 
  2813  019F                     	;# 
  2814  019F                     	;# 
  2815  019F                     	;# 
  2816  019F                     	;# 
  2817  019F                     	;# 
  2818  020C                     	;# 
  2819  020D                     	;# 
  2820  020E                     	;# 
  2821  0211                     	;# 
  2822  0211                     	;# 
  2823  0212                     	;# 
  2824  0212                     	;# 
  2825  0213                     	;# 
  2826  0213                     	;# 
  2827  0214                     	;# 
  2828  0214                     	;# 
  2829  0215                     	;# 
  2830  0215                     	;# 
  2831  0215                     	;# 
  2832  0215                     	;# 
  2833  0216                     	;# 
  2834  0216                     	;# 
  2835  0217                     	;# 
  2836  0217                     	;# 
  2837  0219                     	;# 
  2838  021A                     	;# 
  2839  021B                     	;# 
  2840  021C                     	;# 
  2841  021D                     	;# 
  2842  021D                     	;# 
  2843  021E                     	;# 
  2844  021F                     	;# 
  2845  028C                     	;# 
  2846  028D                     	;# 
  2847  028E                     	;# 
  2848  0291                     	;# 
  2849  0291                     	;# 
  2850  0292                     	;# 
  2851  0293                     	;# 
  2852  0294                     	;# 
  2853  0295                     	;# 
  2854  0295                     	;# 
  2855  0296                     	;# 
  2856  0297                     	;# 
  2857  0298                     	;# 
  2858  029F                     	;# 
  2859  030C                     	;# 
  2860  030D                     	;# 
  2861  030E                     	;# 
  2862  0311                     	;# 
  2863  0311                     	;# 
  2864  0312                     	;# 
  2865  0313                     	;# 
  2866  0314                     	;# 
  2867  0315                     	;# 
  2868  0315                     	;# 
  2869  0316                     	;# 
  2870  0317                     	;# 
  2871  0318                     	;# 
  2872  038C                     	;# 
  2873  038D                     	;# 
  2874  038E                     	;# 
  2875  0391                     	;# 
  2876  0392                     	;# 
  2877  0393                     	;# 
  2878  0394                     	;# 
  2879  0395                     	;# 
  2880  0396                     	;# 
  2881  0397                     	;# 
  2882  0398                     	;# 
  2883  0399                     	;# 
  2884  039A                     	;# 
  2885  039C                     	;# 
  2886  039D                     	;# 
  2887  039E                     	;# 
  2888  039F                     	;# 
  2889  0411                     	;# 
  2890  0411                     	;# 
  2891  0412                     	;# 
  2892  0413                     	;# 
  2893  0414                     	;# 
  2894  0415                     	;# 
  2895  0416                     	;# 
  2896  0417                     	;# 
  2897  0418                     	;# 
  2898  0418                     	;# 
  2899  0419                     	;# 
  2900  041A                     	;# 
  2901  041B                     	;# 
  2902  041C                     	;# 
  2903  041D                     	;# 
  2904  041E                     	;# 
  2905  041F                     	;# 
  2906  0498                     	;# 
  2907  0498                     	;# 
  2908  0499                     	;# 
  2909  049A                     	;# 
  2910  049B                     	;# 
  2911  049B                     	;# 
  2912  049C                     	;# 
  2913  049D                     	;# 
  2914  049E                     	;# 
  2915  049F                     	;# 
  2916  0617                     	;# 
  2917  0618                     	;# 
  2918  0619                     	;# 
  2919  0619                     	;# 
  2920  061A                     	;# 
  2921  061B                     	;# 
  2922  061C                     	;# 
  2923  061C                     	;# 
  2924  061F                     	;# 
  2925  0691                     	;# 
  2926  0692                     	;# 
  2927  0693                     	;# 
  2928  0694                     	;# 
  2929  0695                     	;# 
  2930  0696                     	;# 
  2931  0697                     	;# 
  2932  0698                     	;# 
  2933  0699                     	;# 
  2934  0711                     	;# 
  2935  0712                     	;# 
  2936  0713                     	;# 
  2937  0714                     	;# 
  2938  0715                     	;# 
  2939  0716                     	;# 
  2940  0717                     	;# 
  2941  0718                     	;# 
  2942  0719                     	;# 
  2943  0891                     	;# 
  2944  0891                     	;# 
  2945  0891                     	;# 
  2946  0891                     	;# 
  2947  0891                     	;# 
  2948  0891                     	;# 
  2949  0892                     	;# 
  2950  0892                     	;# 
  2951  0892                     	;# 
  2952  0893                     	;# 
  2953  0893                     	;# 
  2954  0893                     	;# 
  2955  0893                     	;# 
  2956  0893                     	;# 
  2957  0893                     	;# 
  2958  0894                     	;# 
  2959  0894                     	;# 
  2960  0894                     	;# 
  2961  0895                     	;# 
  2962  0895                     	;# 
  2963  0895                     	;# 
  2964  0896                     	;# 
  2965  0896                     	;# 
  2966  0896                     	;# 
  2967  089B                     	;# 
  2968  0911                     	;# 
  2969  0912                     	;# 
  2970  0913                     	;# 
  2971  0914                     	;# 
  2972  0915                     	;# 
  2973  0916                     	;# 
  2974  0918                     	;# 
  2975  0919                     	;# 
  2976  091A                     	;# 
  2977  091B                     	;# 
  2978  091C                     	;# 
  2979  091D                     	;# 
  2980  091E                     	;# 
  2981  091F                     	;# 
  2982  0E0F                     	;# 
  2983  0E10                     	;# 
  2984  0E11                     	;# 
  2985  0E12                     	;# 
  2986  0E13                     	;# 
  2987  0E14                     	;# 
  2988  0E15                     	;# 
  2989  0E16                     	;# 
  2990  0E17                     	;# 
  2991  0E18                     	;# 
  2992  0E19                     	;# 
  2993  0E1A                     	;# 
  2994  0E1B                     	;# 
  2995  0E1C                     	;# 
  2996  0E1D                     	;# 
  2997  0E1E                     	;# 
  2998  0E1F                     	;# 
  2999  0E20                     	;# 
  3000  0E21                     	;# 
  3001  0E22                     	;# 
  3002  0E24                     	;# 
  3003  0E25                     	;# 
  3004  0E28                     	;# 
  3005  0E29                     	;# 
  3006  0E2A                     	;# 
  3007  0E2B                     	;# 
  3008  0E2C                     	;# 
  3009  0E2D                     	;# 
  3010  0E2E                     	;# 
  3011  0E2F                     	;# 
  3012  0E90                     	;# 
  3013  0E91                     	;# 
  3014  0E92                     	;# 
  3015  0E94                     	;# 
  3016  0E95                     	;# 
  3017  0E9C                     	;# 
  3018  0E9D                     	;# 
  3019  0E9E                     	;# 
  3020  0E9F                     	;# 
  3021  0EA0                     	;# 
  3022  0EA1                     	;# 
  3023  0EA2                     	;# 
  3024  0EA3                     	;# 
  3025  0EA4                     	;# 
  3026  0EA5                     	;# 
  3027  0EA6                     	;# 
  3028  0EA7                     	;# 
  3029  0F0F                     	;# 
  3030  0F10                     	;# 
  3031  0F11                     	;# 
  3032  0F12                     	;# 
  3033  0F13                     	;# 
  3034  0F14                     	;# 
  3035  0F15                     	;# 
  3036  0F16                     	;# 
  3037  0F17                     	;# 
  3038  0F18                     	;# 
  3039  0F19                     	;# 
  3040  0F1A                     	;# 
  3041  0F1B                     	;# 
  3042  0F1C                     	;# 
  3043  0F1D                     	;# 
  3044  0F1E                     	;# 
  3045  0F1F                     	;# 
  3046  0F20                     	;# 
  3047  0F21                     	;# 
  3048  0F22                     	;# 
  3049  0F23                     	;# 
  3050  0F24                     	;# 
  3051  0F25                     	;# 
  3052  0F26                     	;# 
  3053  0F27                     	;# 
  3054  0F28                     	;# 
  3055  0F29                     	;# 
  3056  0F2A                     	;# 
  3057  0F2B                     	;# 
  3058  0F2C                     	;# 
  3059  0F2D                     	;# 
  3060  0F2E                     	;# 
  3061  0F2F                     	;# 
  3062  0F30                     	;# 
  3063  0F31                     	;# 
  3064  0F32                     	;# 
  3065  0F33                     	;# 
  3066  0F34                     	;# 
  3067  0F35                     	;# 
  3068  0F36                     	;# 
  3069  0F37                     	;# 
  3070  0FE4                     	;# 
  3071  0FE5                     	;# 
  3072  0FE6                     	;# 
  3073  0FE7                     	;# 
  3074  0FE8                     	;# 
  3075  0FE9                     	;# 
  3076  0FEA                     	;# 
  3077  0FEB                     	;# 
  3078  0FED                     	;# 
  3079  0FEE                     	;# 
  3080  0FEF                     	;# 
  3081  0000                     	;# 
  3082  0001                     	;# 
  3083  0002                     	;# 
  3084  0003                     	;# 
  3085  0004                     	;# 
  3086  0005                     	;# 
  3087  0006                     	;# 
  3088  0007                     	;# 
  3089  0008                     	;# 
  3090  0009                     	;# 
  3091  000A                     	;# 
  3092  000B                     	;# 
  3093  000C                     	;# 
  3094  000D                     	;# 
  3095  000E                     	;# 
  3096  0010                     	;# 
  3097  0011                     	;# 
  3098  0012                     	;# 
  3099  0013                     	;# 
  3100  0014                     	;# 
  3101  0015                     	;# 
  3102  0015                     	;# 
  3103  0016                     	;# 
  3104  0016                     	;# 
  3105  0017                     	;# 
  3106  0018                     	;# 
  3107  0019                     	;# 
  3108  0019                     	;# 
  3109  001A                     	;# 
  3110  001B                     	;# 
  3111  001C                     	;# 
  3112  001D                     	;# 
  3113  001E                     	;# 
  3114  001F                     	;# 
  3115  008C                     	;# 
  3116  008D                     	;# 
  3117  008E                     	;# 
  3118  0090                     	;# 
  3119  0091                     	;# 
  3120  0092                     	;# 
  3121  0093                     	;# 
  3122  0094                     	;# 
  3123  0097                     	;# 
  3124  009B                     	;# 
  3125  009B                     	;# 
  3126  009C                     	;# 
  3127  009D                     	;# 
  3128  009E                     	;# 
  3129  009F                     	;# 
  3130  010C                     	;# 
  3131  010D                     	;# 
  3132  010E                     	;# 
  3133  0111                     	;# 
  3134  0112                     	;# 
  3135  0113                     	;# 
  3136  0114                     	;# 
  3137  0115                     	;# 
  3138  0116                     	;# 
  3139  0117                     	;# 
  3140  0118                     	;# 
  3141  0119                     	;# 
  3142  018C                     	;# 
  3143  018D                     	;# 
  3144  018E                     	;# 
  3145  0199                     	;# 
  3146  0199                     	;# 
  3147  0199                     	;# 
  3148  019A                     	;# 
  3149  019A                     	;# 
  3150  019A                     	;# 
  3151  019B                     	;# 
  3152  019B                     	;# 
  3153  019B                     	;# 
  3154  019B                     	;# 
  3155  019B                     	;# 
  3156  019C                     	;# 
  3157  019C                     	;# 
  3158  019C                     	;# 
  3159  019D                     	;# 
  3160  019D                     	;# 
  3161  019D                     	;# 
  3162  019E                     	;# 
  3163  019E                     	;# 
  3164  019E                     	;# 
  3165  019F                     	;# 
  3166  019F                     	;# 
  3167  019F                     	;# 
  3168  019F                     	;# 
  3169  019F                     	;# 
  3170  020C                     	;# 
  3171  020D                     	;# 
  3172  020E                     	;# 
  3173  0211                     	;# 
  3174  0211                     	;# 
  3175  0212                     	;# 
  3176  0212                     	;# 
  3177  0213                     	;# 
  3178  0213                     	;# 
  3179  0214                     	;# 
  3180  0214                     	;# 
  3181  0215                     	;# 
  3182  0215                     	;# 
  3183  0215                     	;# 
  3184  0215                     	;# 
  3185  0216                     	;# 
  3186  0216                     	;# 
  3187  0217                     	;# 
  3188  0217                     	;# 
  3189  0219                     	;# 
  3190  021A                     	;# 
  3191  021B                     	;# 
  3192  021C                     	;# 
  3193  021D                     	;# 
  3194  021D                     	;# 
  3195  021E                     	;# 
  3196  021F                     	;# 
  3197  028C                     	;# 
  3198  028D                     	;# 
  3199  028E                     	;# 
  3200  0291                     	;# 
  3201  0291                     	;# 
  3202  0292                     	;# 
  3203  0293                     	;# 
  3204  0294                     	;# 
  3205  0295                     	;# 
  3206  0295                     	;# 
  3207  0296                     	;# 
  3208  0297                     	;# 
  3209  0298                     	;# 
  3210  029F                     	;# 
  3211  030C                     	;# 
  3212  030D                     	;# 
  3213  030E                     	;# 
  3214  0311                     	;# 
  3215  0311                     	;# 
  3216  0312                     	;# 
  3217  0313                     	;# 
  3218  0314                     	;# 
  3219  0315                     	;# 
  3220  0315                     	;# 
  3221  0316                     	;# 
  3222  0317                     	;# 
  3223  0318                     	;# 
  3224  038C                     	;# 
  3225  038D                     	;# 
  3226  038E                     	;# 
  3227  0391                     	;# 
  3228  0392                     	;# 
  3229  0393                     	;# 
  3230  0394                     	;# 
  3231  0395                     	;# 
  3232  0396                     	;# 
  3233  0397                     	;# 
  3234  0398                     	;# 
  3235  0399                     	;# 
  3236  039A                     	;# 
  3237  039C                     	;# 
  3238  039D                     	;# 
  3239  039E                     	;# 
  3240  039F                     	;# 
  3241  0411                     	;# 
  3242  0411                     	;# 
  3243  0412                     	;# 
  3244  0413                     	;# 
  3245  0414                     	;# 
  3246  0415                     	;# 
  3247  0416                     	;# 
  3248  0417                     	;# 
  3249  0418                     	;# 
  3250  0418                     	;# 
  3251  0419                     	;# 
  3252  041A                     	;# 
  3253  041B                     	;# 
  3254  041C                     	;# 
  3255  041D                     	;# 
  3256  041E                     	;# 
  3257  041F                     	;# 
  3258  0498                     	;# 
  3259  0498                     	;# 
  3260  0499                     	;# 
  3261  049A                     	;# 
  3262  049B                     	;# 
  3263  049B                     	;# 
  3264  049C                     	;# 
  3265  049D                     	;# 
  3266  049E                     	;# 
  3267  049F                     	;# 
  3268  0617                     	;# 
  3269  0618                     	;# 
  3270  0619                     	;# 
  3271  0619                     	;# 
  3272  061A                     	;# 
  3273  061B                     	;# 
  3274  061C                     	;# 
  3275  061C                     	;# 
  3276  061F                     	;# 
  3277  0691                     	;# 
  3278  0692                     	;# 
  3279  0693                     	;# 
  3280  0694                     	;# 
  3281  0695                     	;# 
  3282  0696                     	;# 
  3283  0697                     	;# 
  3284  0698                     	;# 
  3285  0699                     	;# 
  3286  0711                     	;# 
  3287  0712                     	;# 
  3288  0713                     	;# 
  3289  0714                     	;# 
  3290  0715                     	;# 
  3291  0716                     	;# 
  3292  0717                     	;# 
  3293  0718                     	;# 
  3294  0719                     	;# 
  3295  0891                     	;# 
  3296  0891                     	;# 
  3297  0891                     	;# 
  3298  0891                     	;# 
  3299  0891                     	;# 
  3300  0891                     	;# 
  3301  0892                     	;# 
  3302  0892                     	;# 
  3303  0892                     	;# 
  3304  0893                     	;# 
  3305  0893                     	;# 
  3306  0893                     	;# 
  3307  0893                     	;# 
  3308  0893                     	;# 
  3309  0893                     	;# 
  3310  0894                     	;# 
  3311  0894                     	;# 
  3312  0894                     	;# 
  3313  0895                     	;# 
  3314  0895                     	;# 
  3315  0895                     	;# 
  3316  0896                     	;# 
  3317  0896                     	;# 
  3318  0896                     	;# 
  3319  089B                     	;# 
  3320  0911                     	;# 
  3321  0912                     	;# 
  3322  0913                     	;# 
  3323  0914                     	;# 
  3324  0915                     	;# 
  3325  0916                     	;# 
  3326  0918                     	;# 
  3327  0919                     	;# 
  3328  091A                     	;# 
  3329  091B                     	;# 
  3330  091C                     	;# 
  3331  091D                     	;# 
  3332  091E                     	;# 
  3333  091F                     	;# 
  3334  0E0F                     	;# 
  3335  0E10                     	;# 
  3336  0E11                     	;# 
  3337  0E12                     	;# 
  3338  0E13                     	;# 
  3339  0E14                     	;# 
  3340  0E15                     	;# 
  3341  0E16                     	;# 
  3342  0E17                     	;# 
  3343  0E18                     	;# 
  3344  0E19                     	;# 
  3345  0E1A                     	;# 
  3346  0E1B                     	;# 
  3347  0E1C                     	;# 
  3348  0E1D                     	;# 
  3349  0E1E                     	;# 
  3350  0E1F                     	;# 
  3351  0E20                     	;# 
  3352  0E21                     	;# 
  3353  0E22                     	;# 
  3354  0E24                     	;# 
  3355  0E25                     	;# 
  3356  0E28                     	;# 
  3357  0E29                     	;# 
  3358  0E2A                     	;# 
  3359  0E2B                     	;# 
  3360  0E2C                     	;# 
  3361  0E2D                     	;# 
  3362  0E2E                     	;# 
  3363  0E2F                     	;# 
  3364  0E90                     	;# 
  3365  0E91                     	;# 
  3366  0E92                     	;# 
  3367  0E94                     	;# 
  3368  0E95                     	;# 
  3369  0E9C                     	;# 
  3370  0E9D                     	;# 
  3371  0E9E                     	;# 
  3372  0E9F                     	;# 
  3373  0EA0                     	;# 
  3374  0EA1                     	;# 
  3375  0EA2                     	;# 
  3376  0EA3                     	;# 
  3377  0EA4                     	;# 
  3378  0EA5                     	;# 
  3379  0EA6                     	;# 
  3380  0EA7                     	;# 
  3381  0F0F                     	;# 
  3382  0F10                     	;# 
  3383  0F11                     	;# 
  3384  0F12                     	;# 
  3385  0F13                     	;# 
  3386  0F14                     	;# 
  3387  0F15                     	;# 
  3388  0F16                     	;# 
  3389  0F17                     	;# 
  3390  0F18                     	;# 
  3391  0F19                     	;# 
  3392  0F1A                     	;# 
  3393  0F1B                     	;# 
  3394  0F1C                     	;# 
  3395  0F1D                     	;# 
  3396  0F1E                     	;# 
  3397  0F1F                     	;# 
  3398  0F20                     	;# 
  3399  0F21                     	;# 
  3400  0F22                     	;# 
  3401  0F23                     	;# 
  3402  0F24                     	;# 
  3403  0F25                     	;# 
  3404  0F26                     	;# 
  3405  0F27                     	;# 
  3406  0F28                     	;# 
  3407  0F29                     	;# 
  3408  0F2A                     	;# 
  3409  0F2B                     	;# 
  3410  0F2C                     	;# 
  3411  0F2D                     	;# 
  3412  0F2E                     	;# 
  3413  0F2F                     	;# 
  3414  0F30                     	;# 
  3415  0F31                     	;# 
  3416  0F32                     	;# 
  3417  0F33                     	;# 
  3418  0F34                     	;# 
  3419  0F35                     	;# 
  3420  0F36                     	;# 
  3421  0F37                     	;# 
  3422  0FE4                     	;# 
  3423  0FE5                     	;# 
  3424  0FE6                     	;# 
  3425  0FE7                     	;# 
  3426  0FE8                     	;# 
  3427  0FE9                     	;# 
  3428  0FEA                     	;# 
  3429  0FEB                     	;# 
  3430  0FED                     	;# 
  3431  0FEE                     	;# 
  3432  0FEF                     	;# 
  3433  0000                     	;# 
  3434  0001                     	;# 
  3435  0002                     	;# 
  3436  0003                     	;# 
  3437  0004                     	;# 
  3438  0005                     	;# 
  3439  0006                     	;# 
  3440  0007                     	;# 
  3441  0008                     	;# 
  3442  0009                     	;# 
  3443  000A                     	;# 
  3444  000B                     	;# 
  3445  000C                     	;# 
  3446  000D                     	;# 
  3447  000E                     	;# 
  3448  0010                     	;# 
  3449  0011                     	;# 
  3450  0012                     	;# 
  3451  0013                     	;# 
  3452  0014                     	;# 
  3453  0015                     	;# 
  3454  0015                     	;# 
  3455  0016                     	;# 
  3456  0016                     	;# 
  3457  0017                     	;# 
  3458  0018                     	;# 
  3459  0019                     	;# 
  3460  0019                     	;# 
  3461  001A                     	;# 
  3462  001B                     	;# 
  3463  001C                     	;# 
  3464  001D                     	;# 
  3465  001E                     	;# 
  3466  001F                     	;# 
  3467  008C                     	;# 
  3468  008D                     	;# 
  3469  008E                     	;# 
  3470  0090                     	;# 
  3471  0091                     	;# 
  3472  0092                     	;# 
  3473  0093                     	;# 
  3474  0094                     	;# 
  3475  0097                     	;# 
  3476  009B                     	;# 
  3477  009B                     	;# 
  3478  009C                     	;# 
  3479  009D                     	;# 
  3480  009E                     	;# 
  3481  009F                     	;# 
  3482  010C                     	;# 
  3483  010D                     	;# 
  3484  010E                     	;# 
  3485  0111                     	;# 
  3486  0112                     	;# 
  3487  0113                     	;# 
  3488  0114                     	;# 
  3489  0115                     	;# 
  3490  0116                     	;# 
  3491  0117                     	;# 
  3492  0118                     	;# 
  3493  0119                     	;# 
  3494  018C                     	;# 
  3495  018D                     	;# 
  3496  018E                     	;# 
  3497  0199                     	;# 
  3498  0199                     	;# 
  3499  0199                     	;# 
  3500  019A                     	;# 
  3501  019A                     	;# 
  3502  019A                     	;# 
  3503  019B                     	;# 
  3504  019B                     	;# 
  3505  019B                     	;# 
  3506  019B                     	;# 
  3507  019B                     	;# 
  3508  019C                     	;# 
  3509  019C                     	;# 
  3510  019C                     	;# 
  3511  019D                     	;# 
  3512  019D                     	;# 
  3513  019D                     	;# 
  3514  019E                     	;# 
  3515  019E                     	;# 
  3516  019E                     	;# 
  3517  019F                     	;# 
  3518  019F                     	;# 
  3519  019F                     	;# 
  3520  019F                     	;# 
  3521  019F                     	;# 
  3522  020C                     	;# 
  3523  020D                     	;# 
  3524  020E                     	;# 
  3525  0211                     	;# 
  3526  0211                     	;# 
  3527  0212                     	;# 
  3528  0212                     	;# 
  3529  0213                     	;# 
  3530  0213                     	;# 
  3531  0214                     	;# 
  3532  0214                     	;# 
  3533  0215                     	;# 
  3534  0215                     	;# 
  3535  0215                     	;# 
  3536  0215                     	;# 
  3537  0216                     	;# 
  3538  0216                     	;# 
  3539  0217                     	;# 
  3540  0217                     	;# 
  3541  0219                     	;# 
  3542  021A                     	;# 
  3543  021B                     	;# 
  3544  021C                     	;# 
  3545  021D                     	;# 
  3546  021D                     	;# 
  3547  021E                     	;# 
  3548  021F                     	;# 
  3549  028C                     	;# 
  3550  028D                     	;# 
  3551  028E                     	;# 
  3552  0291                     	;# 
  3553  0291                     	;# 
  3554  0292                     	;# 
  3555  0293                     	;# 
  3556  0294                     	;# 
  3557  0295                     	;# 
  3558  0295                     	;# 
  3559  0296                     	;# 
  3560  0297                     	;# 
  3561  0298                     	;# 
  3562  029F                     	;# 
  3563  030C                     	;# 
  3564  030D                     	;# 
  3565  030E                     	;# 
  3566  0311                     	;# 
  3567  0311                     	;# 
  3568  0312                     	;# 
  3569  0313                     	;# 
  3570  0314                     	;# 
  3571  0315                     	;# 
  3572  0315                     	;# 
  3573  0316                     	;# 
  3574  0317                     	;# 
  3575  0318                     	;# 
  3576  038C                     	;# 
  3577  038D                     	;# 
  3578  038E                     	;# 
  3579  0391                     	;# 
  3580  0392                     	;# 
  3581  0393                     	;# 
  3582  0394                     	;# 
  3583  0395                     	;# 
  3584  0396                     	;# 
  3585  0397                     	;# 
  3586  0398                     	;# 
  3587  0399                     	;# 
  3588  039A                     	;# 
  3589  039C                     	;# 
  3590  039D                     	;# 
  3591  039E                     	;# 
  3592  039F                     	;# 
  3593  0411                     	;# 
  3594  0411                     	;# 
  3595  0412                     	;# 
  3596  0413                     	;# 
  3597  0414                     	;# 
  3598  0415                     	;# 
  3599  0416                     	;# 
  3600  0417                     	;# 
  3601  0418                     	;# 
  3602  0418                     	;# 
  3603  0419                     	;# 
  3604  041A                     	;# 
  3605  041B                     	;# 
  3606  041C                     	;# 
  3607  041D                     	;# 
  3608  041E                     	;# 
  3609  041F                     	;# 
  3610  0498                     	;# 
  3611  0498                     	;# 
  3612  0499                     	;# 
  3613  049A                     	;# 
  3614  049B                     	;# 
  3615  049B                     	;# 
  3616  049C                     	;# 
  3617  049D                     	;# 
  3618  049E                     	;# 
  3619  049F                     	;# 
  3620  0617                     	;# 
  3621  0618                     	;# 
  3622  0619                     	;# 
  3623  0619                     	;# 
  3624  061A                     	;# 
  3625  061B                     	;# 
  3626  061C                     	;# 
  3627  061C                     	;# 
  3628  061F                     	;# 
  3629  0691                     	;# 
  3630  0692                     	;# 
  3631  0693                     	;# 
  3632  0694                     	;# 
  3633  0695                     	;# 
  3634  0696                     	;# 
  3635  0697                     	;# 
  3636  0698                     	;# 
  3637  0699                     	;# 
  3638  0711                     	;# 
  3639  0712                     	;# 
  3640  0713                     	;# 
  3641  0714                     	;# 
  3642  0715                     	;# 
  3643  0716                     	;# 
  3644  0717                     	;# 
  3645  0718                     	;# 
  3646  0719                     	;# 
  3647  0891                     	;# 
  3648  0891                     	;# 
  3649  0891                     	;# 
  3650  0891                     	;# 
  3651  0891                     	;# 
  3652  0891                     	;# 
  3653  0892                     	;# 
  3654  0892                     	;# 
  3655  0892                     	;# 
  3656  0893                     	;# 
  3657  0893                     	;# 
  3658  0893                     	;# 
  3659  0893                     	;# 
  3660  0893                     	;# 
  3661  0893                     	;# 
  3662  0894                     	;# 
  3663  0894                     	;# 
  3664  0894                     	;# 
  3665  0895                     	;# 
  3666  0895                     	;# 
  3667  0895                     	;# 
  3668  0896                     	;# 
  3669  0896                     	;# 
  3670  0896                     	;# 
  3671  089B                     	;# 
  3672  0911                     	;# 
  3673  0912                     	;# 
  3674  0913                     	;# 
  3675  0914                     	;# 
  3676  0915                     	;# 
  3677  0916                     	;# 
  3678  0918                     	;# 
  3679  0919                     	;# 
  3680  091A                     	;# 
  3681  091B                     	;# 
  3682  091C                     	;# 
  3683  091D                     	;# 
  3684  091E                     	;# 
  3685  091F                     	;# 
  3686  0E0F                     	;# 
  3687  0E10                     	;# 
  3688  0E11                     	;# 
  3689  0E12                     	;# 
  3690  0E13                     	;# 
  3691  0E14                     	;# 
  3692  0E15                     	;# 
  3693  0E16                     	;# 
  3694  0E17                     	;# 
  3695  0E18                     	;# 
  3696  0E19                     	;# 
  3697  0E1A                     	;# 
  3698  0E1B                     	;# 
  3699  0E1C                     	;# 
  3700  0E1D                     	;# 
  3701  0E1E                     	;# 
  3702  0E1F                     	;# 
  3703  0E20                     	;# 
  3704  0E21                     	;# 
  3705  0E22                     	;# 
  3706  0E24                     	;# 
  3707  0E25                     	;# 
  3708  0E28                     	;# 
  3709  0E29                     	;# 
  3710  0E2A                     	;# 
  3711  0E2B                     	;# 
  3712  0E2C                     	;# 
  3713  0E2D                     	;# 
  3714  0E2E                     	;# 
  3715  0E2F                     	;# 
  3716  0E90                     	;# 
  3717  0E91                     	;# 
  3718  0E92                     	;# 
  3719  0E94                     	;# 
  3720  0E95                     	;# 
  3721  0E9C                     	;# 
  3722  0E9D                     	;# 
  3723  0E9E                     	;# 
  3724  0E9F                     	;# 
  3725  0EA0                     	;# 
  3726  0EA1                     	;# 
  3727  0EA2                     	;# 
  3728  0EA3                     	;# 
  3729  0EA4                     	;# 
  3730  0EA5                     	;# 
  3731  0EA6                     	;# 
  3732  0EA7                     	;# 
  3733  0F0F                     	;# 
  3734  0F10                     	;# 
  3735  0F11                     	;# 
  3736  0F12                     	;# 
  3737  0F13                     	;# 
  3738  0F14                     	;# 
  3739  0F15                     	;# 
  3740  0F16                     	;# 
  3741  0F17                     	;# 
  3742  0F18                     	;# 
  3743  0F19                     	;# 
  3744  0F1A                     	;# 
  3745  0F1B                     	;# 
  3746  0F1C                     	;# 
  3747  0F1D                     	;# 
  3748  0F1E                     	;# 
  3749  0F1F                     	;# 
  3750  0F20                     	;# 
  3751  0F21                     	;# 
  3752  0F22                     	;# 
  3753  0F23                     	;# 
  3754  0F24                     	;# 
  3755  0F25                     	;# 
  3756  0F26                     	;# 
  3757  0F27                     	;# 
  3758  0F28                     	;# 
  3759  0F29                     	;# 
  3760  0F2A                     	;# 
  3761  0F2B                     	;# 
  3762  0F2C                     	;# 
  3763  0F2D                     	;# 
  3764  0F2E                     	;# 
  3765  0F2F                     	;# 
  3766  0F30                     	;# 
  3767  0F31                     	;# 
  3768  0F32                     	;# 
  3769  0F33                     	;# 
  3770  0F34                     	;# 
  3771  0F35                     	;# 
  3772  0F36                     	;# 
  3773  0F37                     	;# 
  3774  0FE4                     	;# 
  3775  0FE5                     	;# 
  3776  0FE6                     	;# 
  3777  0FE7                     	;# 
  3778  0FE8                     	;# 
  3779  0FE9                     	;# 
  3780  0FEA                     	;# 
  3781  0FEB                     	;# 
  3782  0FED                     	;# 
  3783  0FEE                     	;# 
  3784  0FEF                     	;# 
  3785  0000                     	;# 
  3786  0001                     	;# 
  3787  0002                     	;# 
  3788  0003                     	;# 
  3789  0004                     	;# 
  3790  0005                     	;# 
  3791  0006                     	;# 
  3792  0007                     	;# 
  3793  0008                     	;# 
  3794  0009                     	;# 
  3795  000A                     	;# 
  3796  000B                     	;# 
  3797  000C                     	;# 
  3798  000D                     	;# 
  3799  000E                     	;# 
  3800  0010                     	;# 
  3801  0011                     	;# 
  3802  0012                     	;# 
  3803  0013                     	;# 
  3804  0014                     	;# 
  3805  0015                     	;# 
  3806  0015                     	;# 
  3807  0016                     	;# 
  3808  0016                     	;# 
  3809  0017                     	;# 
  3810  0018                     	;# 
  3811  0019                     	;# 
  3812  0019                     	;# 
  3813  001A                     	;# 
  3814  001B                     	;# 
  3815  001C                     	;# 
  3816  001D                     	;# 
  3817  001E                     	;# 
  3818  001F                     	;# 
  3819  008C                     	;# 
  3820  008D                     	;# 
  3821  008E                     	;# 
  3822  0090                     	;# 
  3823  0091                     	;# 
  3824  0092                     	;# 
  3825  0093                     	;# 
  3826  0094                     	;# 
  3827  0097                     	;# 
  3828  009B                     	;# 
  3829  009B                     	;# 
  3830  009C                     	;# 
  3831  009D                     	;# 
  3832  009E                     	;# 
  3833  009F                     	;# 
  3834  010C                     	;# 
  3835  010D                     	;# 
  3836  010E                     	;# 
  3837  0111                     	;# 
  3838  0112                     	;# 
  3839  0113                     	;# 
  3840  0114                     	;# 
  3841  0115                     	;# 
  3842  0116                     	;# 
  3843  0117                     	;# 
  3844  0118                     	;# 
  3845  0119                     	;# 
  3846  018C                     	;# 
  3847  018D                     	;# 
  3848  018E                     	;# 
  3849  0199                     	;# 
  3850  0199                     	;# 
  3851  0199                     	;# 
  3852  019A                     	;# 
  3853  019A                     	;# 
  3854  019A                     	;# 
  3855  019B                     	;# 
  3856  019B                     	;# 
  3857  019B                     	;# 
  3858  019B                     	;# 
  3859  019B                     	;# 
  3860  019C                     	;# 
  3861  019C                     	;# 
  3862  019C                     	;# 
  3863  019D                     	;# 
  3864  019D                     	;# 
  3865  019D                     	;# 
  3866  019E                     	;# 
  3867  019E                     	;# 
  3868  019E                     	;# 
  3869  019F                     	;# 
  3870  019F                     	;# 
  3871  019F                     	;# 
  3872  019F                     	;# 
  3873  019F                     	;# 
  3874  020C                     	;# 
  3875  020D                     	;# 
  3876  020E                     	;# 
  3877  0211                     	;# 
  3878  0211                     	;# 
  3879  0212                     	;# 
  3880  0212                     	;# 
  3881  0213                     	;# 
  3882  0213                     	;# 
  3883  0214                     	;# 
  3884  0214                     	;# 
  3885  0215                     	;# 
  3886  0215                     	;# 
  3887  0215                     	;# 
  3888  0215                     	;# 
  3889  0216                     	;# 
  3890  0216                     	;# 
  3891  0217                     	;# 
  3892  0217                     	;# 
  3893  0219                     	;# 
  3894  021A                     	;# 
  3895  021B                     	;# 
  3896  021C                     	;# 
  3897  021D                     	;# 
  3898  021D                     	;# 
  3899  021E                     	;# 
  3900  021F                     	;# 
  3901  028C                     	;# 
  3902  028D                     	;# 
  3903  028E                     	;# 
  3904  0291                     	;# 
  3905  0291                     	;# 
  3906  0292                     	;# 
  3907  0293                     	;# 
  3908  0294                     	;# 
  3909  0295                     	;# 
  3910  0295                     	;# 
  3911  0296                     	;# 
  3912  0297                     	;# 
  3913  0298                     	;# 
  3914  029F                     	;# 
  3915  030C                     	;# 
  3916  030D                     	;# 
  3917  030E                     	;# 
  3918  0311                     	;# 
  3919  0311                     	;# 
  3920  0312                     	;# 
  3921  0313                     	;# 
  3922  0314                     	;# 
  3923  0315                     	;# 
  3924  0315                     	;# 
  3925  0316                     	;# 
  3926  0317                     	;# 
  3927  0318                     	;# 
  3928  038C                     	;# 
  3929  038D                     	;# 
  3930  038E                     	;# 
  3931  0391                     	;# 
  3932  0392                     	;# 
  3933  0393                     	;# 
  3934  0394                     	;# 
  3935  0395                     	;# 
  3936  0396                     	;# 
  3937  0397                     	;# 
  3938  0398                     	;# 
  3939  0399                     	;# 
  3940  039A                     	;# 
  3941  039C                     	;# 
  3942  039D                     	;# 
  3943  039E                     	;# 
  3944  039F                     	;# 
  3945  0411                     	;# 
  3946  0411                     	;# 
  3947  0412                     	;# 
  3948  0413                     	;# 
  3949  0414                     	;# 
  3950  0415                     	;# 
  3951  0416                     	;# 
  3952  0417                     	;# 
  3953  0418                     	;# 
  3954  0418                     	;# 
  3955  0419                     	;# 
  3956  041A                     	;# 
  3957  041B                     	;# 
  3958  041C                     	;# 
  3959  041D                     	;# 
  3960  041E                     	;# 
  3961  041F                     	;# 
  3962  0498                     	;# 
  3963  0498                     	;# 
  3964  0499                     	;# 
  3965  049A                     	;# 
  3966  049B                     	;# 
  3967  049B                     	;# 
  3968  049C                     	;# 
  3969  049D                     	;# 
  3970  049E                     	;# 
  3971  049F                     	;# 
  3972  0617                     	;# 
  3973  0618                     	;# 
  3974  0619                     	;# 
  3975  0619                     	;# 
  3976  061A                     	;# 
  3977  061B                     	;# 
  3978  061C                     	;# 
  3979  061C                     	;# 
  3980  061F                     	;# 
  3981  0691                     	;# 
  3982  0692                     	;# 
  3983  0693                     	;# 
  3984  0694                     	;# 
  3985  0695                     	;# 
  3986  0696                     	;# 
  3987  0697                     	;# 
  3988  0698                     	;# 
  3989  0699                     	;# 
  3990  0711                     	;# 
  3991  0712                     	;# 
  3992  0713                     	;# 
  3993  0714                     	;# 
  3994  0715                     	;# 
  3995  0716                     	;# 
  3996  0717                     	;# 
  3997  0718                     	;# 
  3998  0719                     	;# 
  3999  0891                     	;# 
  4000  0891                     	;# 
  4001  0891                     	;# 
  4002  0891                     	;# 
  4003  0891                     	;# 
  4004  0891                     	;# 
  4005  0892                     	;# 
  4006  0892                     	;# 
  4007  0892                     	;# 
  4008  0893                     	;# 
  4009  0893                     	;# 
  4010  0893                     	;# 
  4011  0893                     	;# 
  4012  0893                     	;# 
  4013  0893                     	;# 
  4014  0894                     	;# 
  4015  0894                     	;# 
  4016  0894                     	;# 
  4017  0895                     	;# 
  4018  0895                     	;# 
  4019  0895                     	;# 
  4020  0896                     	;# 
  4021  0896                     	;# 
  4022  0896                     	;# 
  4023  089B                     	;# 
  4024  0911                     	;# 
  4025  0912                     	;# 
  4026  0913                     	;# 
  4027  0914                     	;# 
  4028  0915                     	;# 
  4029  0916                     	;# 
  4030  0918                     	;# 
  4031  0919                     	;# 
  4032  091A                     	;# 
  4033  091B                     	;# 
  4034  091C                     	;# 
  4035  091D                     	;# 
  4036  091E                     	;# 
  4037  091F                     	;# 
  4038  0E0F                     	;# 
  4039  0E10                     	;# 
  4040  0E11                     	;# 
  4041  0E12                     	;# 
  4042  0E13                     	;# 
  4043  0E14                     	;# 
  4044  0E15                     	;# 
  4045  0E16                     	;# 
  4046  0E17                     	;# 
  4047  0E18                     	;# 
  4048  0E19                     	;# 
  4049  0E1A                     	;# 
  4050  0E1B                     	;# 
  4051  0E1C                     	;# 
  4052  0E1D                     	;# 
  4053  0E1E                     	;# 
  4054  0E1F                     	;# 
  4055  0E20                     	;# 
  4056  0E21                     	;# 
  4057  0E22                     	;# 
  4058  0E24                     	;# 
  4059  0E25                     	;# 
  4060  0E28                     	;# 
  4061  0E29                     	;# 
  4062  0E2A                     	;# 
  4063  0E2B                     	;# 
  4064  0E2C                     	;# 
  4065  0E2D                     	;# 
  4066  0E2E                     	;# 
  4067  0E2F                     	;# 
  4068  0E90                     	;# 
  4069  0E91                     	;# 
  4070  0E92                     	;# 
  4071  0E94                     	;# 
  4072  0E95                     	;# 
  4073  0E9C                     	;# 
  4074  0E9D                     	;# 
  4075  0E9E                     	;# 
  4076  0E9F                     	;# 
  4077  0EA0                     	;# 
  4078  0EA1                     	;# 
  4079  0EA2                     	;# 
  4080  0EA3                     	;# 
  4081  0EA4                     	;# 
  4082  0EA5                     	;# 
  4083  0EA6                     	;# 
  4084  0EA7                     	;# 
  4085  0F0F                     	;# 
  4086  0F10                     	;# 
  4087  0F11                     	;# 
  4088  0F12                     	;# 
  4089  0F13                     	;# 
  4090  0F14                     	;# 
  4091  0F15                     	;# 
  4092  0F16                     	;# 
  4093  0F17                     	;# 
  4094  0F18                     	;# 
  4095  0F19                     	;# 
  4096  0F1A                     	;# 
  4097  0F1B                     	;# 
  4098  0F1C                     	;# 
  4099  0F1D                     	;# 
  4100  0F1E                     	;# 
  4101  0F1F                     	;# 
  4102  0F20                     	;# 
  4103  0F21                     	;# 
  4104  0F22                     	;# 
  4105  0F23                     	;# 
  4106  0F24                     	;# 
  4107  0F25                     	;# 
  4108  0F26                     	;# 
  4109  0F27                     	;# 
  4110  0F28                     	;# 
  4111  0F29                     	;# 
  4112  0F2A                     	;# 
  4113  0F2B                     	;# 
  4114  0F2C                     	;# 
  4115  0F2D                     	;# 
  4116  0F2E                     	;# 
  4117  0F2F                     	;# 
  4118  0F30                     	;# 
  4119  0F31                     	;# 
  4120  0F32                     	;# 
  4121  0F33                     	;# 
  4122  0F34                     	;# 
  4123  0F35                     	;# 
  4124  0F36                     	;# 
  4125  0F37                     	;# 
  4126  0FE4                     	;# 
  4127  0FE5                     	;# 
  4128  0FE6                     	;# 
  4129  0FE7                     	;# 
  4130  0FE8                     	;# 
  4131  0FE9                     	;# 
  4132  0FEA                     	;# 
  4133  0FEB                     	;# 
  4134  0FED                     	;# 
  4135  0FEE                     	;# 
  4136  0FEF                     	;# 
  4137  0000                     	;# 
  4138  0001                     	;# 
  4139  0002                     	;# 
  4140  0003                     	;# 
  4141  0004                     	;# 
  4142  0005                     	;# 
  4143  0006                     	;# 
  4144  0007                     	;# 
  4145  0008                     	;# 
  4146  0009                     	;# 
  4147  000A                     	;# 
  4148  000B                     	;# 
  4149  000C                     	;# 
  4150  000D                     	;# 
  4151  000E                     	;# 
  4152  0010                     	;# 
  4153  0011                     	;# 
  4154  0012                     	;# 
  4155  0013                     	;# 
  4156  0014                     	;# 
  4157  0015                     	;# 
  4158  0015                     	;# 
  4159  0016                     	;# 
  4160  0016                     	;# 
  4161  0017                     	;# 
  4162  0018                     	;# 
  4163  0019                     	;# 
  4164  0019                     	;# 
  4165  001A                     	;# 
  4166  001B                     	;# 
  4167  001C                     	;# 
  4168  001D                     	;# 
  4169  001E                     	;# 
  4170  001F                     	;# 
  4171  008C                     	;# 
  4172  008D                     	;# 
  4173  008E                     	;# 
  4174  0090                     	;# 
  4175  0091                     	;# 
  4176  0092                     	;# 
  4177  0093                     	;# 
  4178  0094                     	;# 
  4179  0097                     	;# 
  4180  009B                     	;# 
  4181  009B                     	;# 
  4182  009C                     	;# 
  4183  009D                     	;# 
  4184  009E                     	;# 
  4185  009F                     	;# 
  4186  010C                     	;# 
  4187  010D                     	;# 
  4188  010E                     	;# 
  4189  0111                     	;# 
  4190  0112                     	;# 
  4191  0113                     	;# 
  4192  0114                     	;# 
  4193  0115                     	;# 
  4194  0116                     	;# 
  4195  0117                     	;# 
  4196  0118                     	;# 
  4197  0119                     	;# 
  4198  018C                     	;# 
  4199  018D                     	;# 
  4200  018E                     	;# 
  4201  0199                     	;# 
  4202  0199                     	;# 
  4203  0199                     	;# 
  4204  019A                     	;# 
  4205  019A                     	;# 
  4206  019A                     	;# 
  4207  019B                     	;# 
  4208  019B                     	;# 
  4209  019B                     	;# 
  4210  019B                     	;# 
  4211  019B                     	;# 
  4212  019C                     	;# 
  4213  019C                     	;# 
  4214  019C                     	;# 
  4215  019D                     	;# 
  4216  019D                     	;# 
  4217  019D                     	;# 
  4218  019E                     	;# 
  4219  019E                     	;# 
  4220  019E                     	;# 
  4221  019F                     	;# 
  4222  019F                     	;# 
  4223  019F                     	;# 
  4224  019F                     	;# 
  4225  019F                     	;# 
  4226  020C                     	;# 
  4227  020D                     	;# 
  4228  020E                     	;# 
  4229  0211                     	;# 
  4230  0211                     	;# 
  4231  0212                     	;# 
  4232  0212                     	;# 
  4233  0213                     	;# 
  4234  0213                     	;# 
  4235  0214                     	;# 
  4236  0214                     	;# 
  4237  0215                     	;# 
  4238  0215                     	;# 
  4239  0215                     	;# 
  4240  0215                     	;# 
  4241  0216                     	;# 
  4242  0216                     	;# 
  4243  0217                     	;# 
  4244  0217                     	;# 
  4245  0219                     	;# 
  4246  021A                     	;# 
  4247  021B                     	;# 
  4248  021C                     	;# 
  4249  021D                     	;# 
  4250  021D                     	;# 
  4251  021E                     	;# 
  4252  021F                     	;# 
  4253  028C                     	;# 
  4254  028D                     	;# 
  4255  028E                     	;# 
  4256  0291                     	;# 
  4257  0291                     	;# 
  4258  0292                     	;# 
  4259  0293                     	;# 
  4260  0294                     	;# 
  4261  0295                     	;# 
  4262  0295                     	;# 
  4263  0296                     	;# 
  4264  0297                     	;# 
  4265  0298                     	;# 
  4266  029F                     	;# 
  4267  030C                     	;# 
  4268  030D                     	;# 
  4269  030E                     	;# 
  4270  0311                     	;# 
  4271  0311                     	;# 
  4272  0312                     	;# 
  4273  0313                     	;# 
  4274  0314                     	;# 
  4275  0315                     	;# 
  4276  0315                     	;# 
  4277  0316                     	;# 
  4278  0317                     	;# 
  4279  0318                     	;# 
  4280  038C                     	;# 
  4281  038D                     	;# 
  4282  038E                     	;# 
  4283  0391                     	;# 
  4284  0392                     	;# 
  4285  0393                     	;# 
  4286  0394                     	;# 
  4287  0395                     	;# 
  4288  0396                     	;# 
  4289  0397                     	;# 
  4290  0398                     	;# 
  4291  0399                     	;# 
  4292  039A                     	;# 
  4293  039C                     	;# 
  4294  039D                     	;# 
  4295  039E                     	;# 
  4296  039F                     	;# 
  4297  0411                     	;# 
  4298  0411                     	;# 
  4299  0412                     	;# 
  4300  0413                     	;# 
  4301  0414                     	;# 
  4302  0415                     	;# 
  4303  0416                     	;# 
  4304  0417                     	;# 
  4305  0418                     	;# 
  4306  0418                     	;# 
  4307  0419                     	;# 
  4308  041A                     	;# 
  4309  041B                     	;# 
  4310  041C                     	;# 
  4311  041D                     	;# 
  4312  041E                     	;# 
  4313  041F                     	;# 
  4314  0498                     	;# 
  4315  0498                     	;# 
  4316  0499                     	;# 
  4317  049A                     	;# 
  4318  049B                     	;# 
  4319  049B                     	;# 
  4320  049C                     	;# 
  4321  049D                     	;# 
  4322  049E                     	;# 
  4323  049F                     	;# 
  4324  0617                     	;# 
  4325  0618                     	;# 
  4326  0619                     	;# 
  4327  0619                     	;# 
  4328  061A                     	;# 
  4329  061B                     	;# 
  4330  061C                     	;# 
  4331  061C                     	;# 
  4332  061F                     	;# 
  4333  0691                     	;# 
  4334  0692                     	;# 
  4335  0693                     	;# 
  4336  0694                     	;# 
  4337  0695                     	;# 
  4338  0696                     	;# 
  4339  0697                     	;# 
  4340  0698                     	;# 
  4341  0699                     	;# 
  4342  0711                     	;# 
  4343  0712                     	;# 
  4344  0713                     	;# 
  4345  0714                     	;# 
  4346  0715                     	;# 
  4347  0716                     	;# 
  4348  0717                     	;# 
  4349  0718                     	;# 
  4350  0719                     	;# 
  4351  0891                     	;# 
  4352  0891                     	;# 
  4353  0891                     	;# 
  4354  0891                     	;# 
  4355  0891                     	;# 
  4356  0891                     	;# 
  4357  0892                     	;# 
  4358  0892                     	;# 
  4359  0892                     	;# 
  4360  0893                     	;# 
  4361  0893                     	;# 
  4362  0893                     	;# 
  4363  0893                     	;# 
  4364  0893                     	;# 
  4365  0893                     	;# 
  4366  0894                     	;# 
  4367  0894                     	;# 
  4368  0894                     	;# 
  4369  0895                     	;# 
  4370  0895                     	;# 
  4371  0895                     	;# 
  4372  0896                     	;# 
  4373  0896                     	;# 
  4374  0896                     	;# 
  4375  089B                     	;# 
  4376  0911                     	;# 
  4377  0912                     	;# 
  4378  0913                     	;# 
  4379  0914                     	;# 
  4380  0915                     	;# 
  4381  0916                     	;# 
  4382  0918                     	;# 
  4383  0919                     	;# 
  4384  091A                     	;# 
  4385  091B                     	;# 
  4386  091C                     	;# 
  4387  091D                     	;# 
  4388  091E                     	;# 
  4389  091F                     	;# 
  4390  0E0F                     	;# 
  4391  0E10                     	;# 
  4392  0E11                     	;# 
  4393  0E12                     	;# 
  4394  0E13                     	;# 
  4395  0E14                     	;# 
  4396  0E15                     	;# 
  4397  0E16                     	;# 
  4398  0E17                     	;# 
  4399  0E18                     	;# 
  4400  0E19                     	;# 
  4401  0E1A                     	;# 
  4402  0E1B                     	;# 
  4403  0E1C                     	;# 
  4404  0E1D                     	;# 
  4405  0E1E                     	;# 
  4406  0E1F                     	;# 
  4407  0E20                     	;# 
  4408  0E21                     	;# 
  4409  0E22                     	;# 
  4410  0E24                     	;# 
  4411  0E25                     	;# 
  4412  0E28                     	;# 
  4413  0E29                     	;# 
  4414  0E2A                     	;# 
  4415  0E2B                     	;# 
  4416  0E2C                     	;# 
  4417  0E2D                     	;# 
  4418  0E2E                     	;# 
  4419  0E2F                     	;# 
  4420  0E90                     	;# 
  4421  0E91                     	;# 
  4422  0E92                     	;# 
  4423  0E94                     	;# 
  4424  0E95                     	;# 
  4425  0E9C                     	;# 
  4426  0E9D                     	;# 
  4427  0E9E                     	;# 
  4428  0E9F                     	;# 
  4429  0EA0                     	;# 
  4430  0EA1                     	;# 
  4431  0EA2                     	;# 
  4432  0EA3                     	;# 
  4433  0EA4                     	;# 
  4434  0EA5                     	;# 
  4435  0EA6                     	;# 
  4436  0EA7                     	;# 
  4437  0F0F                     	;# 
  4438  0F10                     	;# 
  4439  0F11                     	;# 
  4440  0F12                     	;# 
  4441  0F13                     	;# 
  4442  0F14                     	;# 
  4443  0F15                     	;# 
  4444  0F16                     	;# 
  4445  0F17                     	;# 
  4446  0F18                     	;# 
  4447  0F19                     	;# 
  4448  0F1A                     	;# 
  4449  0F1B                     	;# 
  4450  0F1C                     	;# 
  4451  0F1D                     	;# 
  4452  0F1E                     	;# 
  4453  0F1F                     	;# 
  4454  0F20                     	;# 
  4455  0F21                     	;# 
  4456  0F22                     	;# 
  4457  0F23                     	;# 
  4458  0F24                     	;# 
  4459  0F25                     	;# 
  4460  0F26                     	;# 
  4461  0F27                     	;# 
  4462  0F28                     	;# 
  4463  0F29                     	;# 
  4464  0F2A                     	;# 
  4465  0F2B                     	;# 
  4466  0F2C                     	;# 
  4467  0F2D                     	;# 
  4468  0F2E                     	;# 
  4469  0F2F                     	;# 
  4470  0F30                     	;# 
  4471  0F31                     	;# 
  4472  0F32                     	;# 
  4473  0F33                     	;# 
  4474  0F34                     	;# 
  4475  0F35                     	;# 
  4476  0F36                     	;# 
  4477  0F37                     	;# 
  4478  0FE4                     	;# 
  4479  0FE5                     	;# 
  4480  0FE6                     	;# 
  4481  0FE7                     	;# 
  4482  0FE8                     	;# 
  4483  0FE9                     	;# 
  4484  0FEA                     	;# 
  4485  0FEB                     	;# 
  4486  0FED                     	;# 
  4487  0FEE                     	;# 
  4488  0FEF                     	;# 
  4489  0000                     	;# 
  4490  0001                     	;# 
  4491  0002                     	;# 
  4492  0003                     	;# 
  4493  0004                     	;# 
  4494  0005                     	;# 
  4495  0006                     	;# 
  4496  0007                     	;# 
  4497  0008                     	;# 
  4498  0009                     	;# 
  4499  000A                     	;# 
  4500  000B                     	;# 
  4501  000C                     	;# 
  4502  000D                     	;# 
  4503  000E                     	;# 
  4504  0010                     	;# 
  4505  0011                     	;# 
  4506  0012                     	;# 
  4507  0013                     	;# 
  4508  0014                     	;# 
  4509  0015                     	;# 
  4510  0015                     	;# 
  4511  0016                     	;# 
  4512  0016                     	;# 
  4513  0017                     	;# 
  4514  0018                     	;# 
  4515  0019                     	;# 
  4516  0019                     	;# 
  4517  001A                     	;# 
  4518  001B                     	;# 
  4519  001C                     	;# 
  4520  001D                     	;# 
  4521  001E                     	;# 
  4522  001F                     	;# 
  4523  008C                     	;# 
  4524  008D                     	;# 
  4525  008E                     	;# 
  4526  0090                     	;# 
  4527  0091                     	;# 
  4528  0092                     	;# 
  4529  0093                     	;# 
  4530  0094                     	;# 
  4531  0097                     	;# 
  4532  009B                     	;# 
  4533  009B                     	;# 
  4534  009C                     	;# 
  4535  009D                     	;# 
  4536  009E                     	;# 
  4537  009F                     	;# 
  4538  010C                     	;# 
  4539  010D                     	;# 
  4540  010E                     	;# 
  4541  0111                     	;# 
  4542  0112                     	;# 
  4543  0113                     	;# 
  4544  0114                     	;# 
  4545  0115                     	;# 
  4546  0116                     	;# 
  4547  0117                     	;# 
  4548  0118                     	;# 
  4549  0119                     	;# 
  4550  018C                     	;# 
  4551  018D                     	;# 
  4552  018E                     	;# 
  4553  0199                     	;# 
  4554  0199                     	;# 
  4555  0199                     	;# 
  4556  019A                     	;# 
  4557  019A                     	;# 
  4558  019A                     	;# 
  4559  019B                     	;# 
  4560  019B                     	;# 
  4561  019B                     	;# 
  4562  019B                     	;# 
  4563  019B                     	;# 
  4564  019C                     	;# 
  4565  019C                     	;# 
  4566  019C                     	;# 
  4567  019D                     	;# 
  4568  019D                     	;# 
  4569  019D                     	;# 
  4570  019E                     	;# 
  4571  019E                     	;# 
  4572  019E                     	;# 
  4573  019F                     	;# 
  4574  019F                     	;# 
  4575  019F                     	;# 
  4576  019F                     	;# 
  4577  019F                     	;# 
  4578  020C                     	;# 
  4579  020D                     	;# 
  4580  020E                     	;# 
  4581  0211                     	;# 
  4582  0211                     	;# 
  4583  0212                     	;# 
  4584  0212                     	;# 
  4585  0213                     	;# 
  4586  0213                     	;# 
  4587  0214                     	;# 
  4588  0214                     	;# 
  4589  0215                     	;# 
  4590  0215                     	;# 
  4591  0215                     	;# 
  4592  0215                     	;# 
  4593  0216                     	;# 
  4594  0216                     	;# 
  4595  0217                     	;# 
  4596  0217                     	;# 
  4597  0219                     	;# 
  4598  021A                     	;# 
  4599  021B                     	;# 
  4600  021C                     	;# 
  4601  021D                     	;# 
  4602  021D                     	;# 
  4603  021E                     	;# 
  4604  021F                     	;# 
  4605  028C                     	;# 
  4606  028D                     	;# 
  4607  028E                     	;# 
  4608  0291                     	;# 
  4609  0291                     	;# 
  4610  0292                     	;# 
  4611  0293                     	;# 
  4612  0294                     	;# 
  4613  0295                     	;# 
  4614  0295                     	;# 
  4615  0296                     	;# 
  4616  0297                     	;# 
  4617  0298                     	;# 
  4618  029F                     	;# 
  4619  030C                     	;# 
  4620  030D                     	;# 
  4621  030E                     	;# 
  4622  0311                     	;# 
  4623  0311                     	;# 
  4624  0312                     	;# 
  4625  0313                     	;# 
  4626  0314                     	;# 
  4627  0315                     	;# 
  4628  0315                     	;# 
  4629  0316                     	;# 
  4630  0317                     	;# 
  4631  0318                     	;# 
  4632  038C                     	;# 
  4633  038D                     	;# 
  4634  038E                     	;# 
  4635  0391                     	;# 
  4636  0392                     	;# 
  4637  0393                     	;# 
  4638  0394                     	;# 
  4639  0395                     	;# 
  4640  0396                     	;# 
  4641  0397                     	;# 
  4642  0398                     	;# 
  4643  0399                     	;# 
  4644  039A                     	;# 
  4645  039C                     	;# 
  4646  039D                     	;# 
  4647  039E                     	;# 
  4648  039F                     	;# 
  4649  0411                     	;# 
  4650  0411                     	;# 
  4651  0412                     	;# 
  4652  0413                     	;# 
  4653  0414                     	;# 
  4654  0415                     	;# 
  4655  0416                     	;# 
  4656  0417                     	;# 
  4657  0418                     	;# 
  4658  0418                     	;# 
  4659  0419                     	;# 
  4660  041A                     	;# 
  4661  041B                     	;# 
  4662  041C                     	;# 
  4663  041D                     	;# 
  4664  041E                     	;# 
  4665  041F                     	;# 
  4666  0498                     	;# 
  4667  0498                     	;# 
  4668  0499                     	;# 
  4669  049A                     	;# 
  4670  049B                     	;# 
  4671  049B                     	;# 
  4672  049C                     	;# 
  4673  049D                     	;# 
  4674  049E                     	;# 
  4675  049F                     	;# 
  4676  0617                     	;# 
  4677  0618                     	;# 
  4678  0619                     	;# 
  4679  0619                     	;# 
  4680  061A                     	;# 
  4681  061B                     	;# 
  4682  061C                     	;# 
  4683  061C                     	;# 
  4684  061F                     	;# 
  4685  0691                     	;# 
  4686  0692                     	;# 
  4687  0693                     	;# 
  4688  0694                     	;# 
  4689  0695                     	;# 
  4690  0696                     	;# 
  4691  0697                     	;# 
  4692  0698                     	;# 
  4693  0699                     	;# 
  4694  0711                     	;# 
  4695  0712                     	;# 
  4696  0713                     	;# 
  4697  0714                     	;# 
  4698  0715                     	;# 
  4699  0716                     	;# 
  4700  0717                     	;# 
  4701  0718                     	;# 
  4702  0719                     	;# 
  4703  0891                     	;# 
  4704  0891                     	;# 
  4705  0891                     	;# 
  4706  0891                     	;# 
  4707  0891                     	;# 
  4708  0891                     	;# 
  4709  0892                     	;# 
  4710  0892                     	;# 
  4711  0892                     	;# 
  4712  0893                     	;# 
  4713  0893                     	;# 
  4714  0893                     	;# 
  4715  0893                     	;# 
  4716  0893                     	;# 
  4717  0893                     	;# 
  4718  0894                     	;# 
  4719  0894                     	;# 
  4720  0894                     	;# 
  4721  0895                     	;# 
  4722  0895                     	;# 
  4723  0895                     	;# 
  4724  0896                     	;# 
  4725  0896                     	;# 
  4726  0896                     	;# 
  4727  089B                     	;# 
  4728  0911                     	;# 
  4729  0912                     	;# 
  4730  0913                     	;# 
  4731  0914                     	;# 
  4732  0915                     	;# 
  4733  0916                     	;# 
  4734  0918                     	;# 
  4735  0919                     	;# 
  4736  091A                     	;# 
  4737  091B                     	;# 
  4738  091C                     	;# 
  4739  091D                     	;# 
  4740  091E                     	;# 
  4741  091F                     	;# 
  4742  0E0F                     	;# 
  4743  0E10                     	;# 
  4744  0E11                     	;# 
  4745  0E12                     	;# 
  4746  0E13                     	;# 
  4747  0E14                     	;# 
  4748  0E15                     	;# 
  4749  0E16                     	;# 
  4750  0E17                     	;# 
  4751  0E18                     	;# 
  4752  0E19                     	;# 
  4753  0E1A                     	;# 
  4754  0E1B                     	;# 
  4755  0E1C                     	;# 
  4756  0E1D                     	;# 
  4757  0E1E                     	;# 
  4758  0E1F                     	;# 
  4759  0E20                     	;# 
  4760  0E21                     	;# 
  4761  0E22                     	;# 
  4762  0E24                     	;# 
  4763  0E25                     	;# 
  4764  0E28                     	;# 
  4765  0E29                     	;# 
  4766  0E2A                     	;# 
  4767  0E2B                     	;# 
  4768  0E2C                     	;# 
  4769  0E2D                     	;# 
  4770  0E2E                     	;# 
  4771  0E2F                     	;# 
  4772  0E90                     	;# 
  4773  0E91                     	;# 
  4774  0E92                     	;# 
  4775  0E94                     	;# 
  4776  0E95                     	;# 
  4777  0E9C                     	;# 
  4778  0E9D                     	;# 
  4779  0E9E                     	;# 
  4780  0E9F                     	;# 
  4781  0EA0                     	;# 
  4782  0EA1                     	;# 
  4783  0EA2                     	;# 
  4784  0EA3                     	;# 
  4785  0EA4                     	;# 
  4786  0EA5                     	;# 
  4787  0EA6                     	;# 
  4788  0EA7                     	;# 
  4789  0F0F                     	;# 
  4790  0F10                     	;# 
  4791  0F11                     	;# 
  4792  0F12                     	;# 
  4793  0F13                     	;# 
  4794  0F14                     	;# 
  4795  0F15                     	;# 
  4796  0F16                     	;# 
  4797  0F17                     	;# 
  4798  0F18                     	;# 
  4799  0F19                     	;# 
  4800  0F1A                     	;# 
  4801  0F1B                     	;# 
  4802  0F1C                     	;# 
  4803  0F1D                     	;# 
  4804  0F1E                     	;# 
  4805  0F1F                     	;# 
  4806  0F20                     	;# 
  4807  0F21                     	;# 
  4808  0F22                     	;# 
  4809  0F23                     	;# 
  4810  0F24                     	;# 
  4811  0F25                     	;# 
  4812  0F26                     	;# 
  4813  0F27                     	;# 
  4814  0F28                     	;# 
  4815  0F29                     	;# 
  4816  0F2A                     	;# 
  4817  0F2B                     	;# 
  4818  0F2C                     	;# 
  4819  0F2D                     	;# 
  4820  0F2E                     	;# 
  4821  0F2F                     	;# 
  4822  0F30                     	;# 
  4823  0F31                     	;# 
  4824  0F32                     	;# 
  4825  0F33                     	;# 
  4826  0F34                     	;# 
  4827  0F35                     	;# 
  4828  0F36                     	;# 
  4829  0F37                     	;# 
  4830  0FE4                     	;# 
  4831  0FE5                     	;# 
  4832  0FE6                     	;# 
  4833  0FE7                     	;# 
  4834  0FE8                     	;# 
  4835  0FE9                     	;# 
  4836  0FEA                     	;# 
  4837  0FEB                     	;# 
  4838  0FED                     	;# 
  4839  0FEE                     	;# 
  4840  0FEF                     	;# 
  4841  0000                     	;# 
  4842  0001                     	;# 
  4843  0002                     	;# 
  4844  0003                     	;# 
  4845  0004                     	;# 
  4846  0005                     	;# 
  4847  0006                     	;# 
  4848  0007                     	;# 
  4849  0008                     	;# 
  4850  0009                     	;# 
  4851  000A                     	;# 
  4852  000B                     	;# 
  4853  000C                     	;# 
  4854  000D                     	;# 
  4855  000E                     	;# 
  4856  0010                     	;# 
  4857  0011                     	;# 
  4858  0012                     	;# 
  4859  0013                     	;# 
  4860  0014                     	;# 
  4861  0015                     	;# 
  4862  0015                     	;# 
  4863  0016                     	;# 
  4864  0016                     	;# 
  4865  0017                     	;# 
  4866  0018                     	;# 
  4867  0019                     	;# 
  4868  0019                     	;# 
  4869  001A                     	;# 
  4870  001B                     	;# 
  4871  001C                     	;# 
  4872  001D                     	;# 
  4873  001E                     	;# 
  4874  001F                     	;# 
  4875  008C                     	;# 
  4876  008D                     	;# 
  4877  008E                     	;# 
  4878  0090                     	;# 
  4879  0091                     	;# 
  4880  0092                     	;# 
  4881  0093                     	;# 
  4882  0094                     	;# 
  4883  0097                     	;# 
  4884  009B                     	;# 
  4885  009B                     	;# 
  4886  009C                     	;# 
  4887  009D                     	;# 
  4888  009E                     	;# 
  4889  009F                     	;# 
  4890  010C                     	;# 
  4891  010D                     	;# 
  4892  010E                     	;# 
  4893  0111                     	;# 
  4894  0112                     	;# 
  4895  0113                     	;# 
  4896  0114                     	;# 
  4897  0115                     	;# 
  4898  0116                     	;# 
  4899  0117                     	;# 
  4900  0118                     	;# 
  4901  0119                     	;# 
  4902  018C                     	;# 
  4903  018D                     	;# 
  4904  018E                     	;# 
  4905  0199                     	;# 
  4906  0199                     	;# 
  4907  0199                     	;# 
  4908  019A                     	;# 
  4909  019A                     	;# 
  4910  019A                     	;# 
  4911  019B                     	;# 
  4912  019B                     	;# 
  4913  019B                     	;# 
  4914  019B                     	;# 
  4915  019B                     	;# 
  4916  019C                     	;# 
  4917  019C                     	;# 
  4918  019C                     	;# 
  4919  019D                     	;# 
  4920  019D                     	;# 
  4921  019D                     	;# 
  4922  019E                     	;# 
  4923  019E                     	;# 
  4924  019E                     	;# 
  4925  019F                     	;# 
  4926  019F                     	;# 
  4927  019F                     	;# 
  4928  019F                     	;# 
  4929  019F                     	;# 
  4930  020C                     	;# 
  4931  020D                     	;# 
  4932  020E                     	;# 
  4933  0211                     	;# 
  4934  0211                     	;# 
  4935  0212                     	;# 
  4936  0212                     	;# 
  4937  0213                     	;# 
  4938  0213                     	;# 
  4939  0214                     	;# 
  4940  0214                     	;# 
  4941  0215                     	;# 
  4942  0215                     	;# 
  4943  0215                     	;# 
  4944  0215                     	;# 
  4945  0216                     	;# 
  4946  0216                     	;# 
  4947  0217                     	;# 
  4948  0217                     	;# 
  4949  0219                     	;# 
  4950  021A                     	;# 
  4951  021B                     	;# 
  4952  021C                     	;# 
  4953  021D                     	;# 
  4954  021D                     	;# 
  4955  021E                     	;# 
  4956  021F                     	;# 
  4957  028C                     	;# 
  4958  028D                     	;# 
  4959  028E                     	;# 
  4960  0291                     	;# 
  4961  0291                     	;# 
  4962  0292                     	;# 
  4963  0293                     	;# 
  4964  0294                     	;# 
  4965  0295                     	;# 
  4966  0295                     	;# 
  4967  0296                     	;# 
  4968  0297                     	;# 
  4969  0298                     	;# 
  4970  029F                     	;# 
  4971  030C                     	;# 
  4972  030D                     	;# 
  4973  030E                     	;# 
  4974  0311                     	;# 
  4975  0311                     	;# 
  4976  0312                     	;# 
  4977  0313                     	;# 
  4978  0314                     	;# 
  4979  0315                     	;# 
  4980  0315                     	;# 
  4981  0316                     	;# 
  4982  0317                     	;# 
  4983  0318                     	;# 
  4984  038C                     	;# 
  4985  038D                     	;# 
  4986  038E                     	;# 
  4987  0391                     	;# 
  4988  0392                     	;# 
  4989  0393                     	;# 
  4990  0394                     	;# 
  4991  0395                     	;# 
  4992  0396                     	;# 
  4993  0397                     	;# 
  4994  0398                     	;# 
  4995  0399                     	;# 
  4996  039A                     	;# 
  4997  039C                     	;# 
  4998  039D                     	;# 
  4999  039E                     	;# 
  5000  039F                     	;# 
  5001  0411                     	;# 
  5002  0411                     	;# 
  5003  0412                     	;# 
  5004  0413                     	;# 
  5005  0414                     	;# 
  5006  0415                     	;# 
  5007  0416                     	;# 
  5008  0417                     	;# 
  5009  0418                     	;# 
  5010  0418                     	;# 
  5011  0419                     	;# 
  5012  041A                     	;# 
  5013  041B                     	;# 
  5014  041C                     	;# 
  5015  041D                     	;# 
  5016  041E                     	;# 
  5017  041F                     	;# 
  5018  0498                     	;# 
  5019  0498                     	;# 
  5020  0499                     	;# 
  5021  049A                     	;# 
  5022  049B                     	;# 
  5023  049B                     	;# 
  5024  049C                     	;# 
  5025  049D                     	;# 
  5026  049E                     	;# 
  5027  049F                     	;# 
  5028  0617                     	;# 
  5029  0618                     	;# 
  5030  0619                     	;# 
  5031  0619                     	;# 
  5032  061A                     	;# 
  5033  061B                     	;# 
  5034  061C                     	;# 
  5035  061C                     	;# 
  5036  061F                     	;# 
  5037  0691                     	;# 
  5038  0692                     	;# 
  5039  0693                     	;# 
  5040  0694                     	;# 
  5041  0695                     	;# 
  5042  0696                     	;# 
  5043  0697                     	;# 
  5044  0698                     	;# 
  5045  0699                     	;# 
  5046  0711                     	;# 
  5047  0712                     	;# 
  5048  0713                     	;# 
  5049  0714                     	;# 
  5050  0715                     	;# 
  5051  0716                     	;# 
  5052  0717                     	;# 
  5053  0718                     	;# 
  5054  0719                     	;# 
  5055  0891                     	;# 
  5056  0891                     	;# 
  5057  0891                     	;# 
  5058  0891                     	;# 
  5059  0891                     	;# 
  5060  0891                     	;# 
  5061  0892                     	;# 
  5062  0892                     	;# 
  5063  0892                     	;# 
  5064  0893                     	;# 
  5065  0893                     	;# 
  5066  0893                     	;# 
  5067  0893                     	;# 
  5068  0893                     	;# 
  5069  0893                     	;# 
  5070  0894                     	;# 
  5071  0894                     	;# 
  5072  0894                     	;# 
  5073  0895                     	;# 
  5074  0895                     	;# 
  5075  0895                     	;# 
  5076  0896                     	;# 
  5077  0896                     	;# 
  5078  0896                     	;# 
  5079  089B                     	;# 
  5080  0911                     	;# 
  5081  0912                     	;# 
  5082  0913                     	;# 
  5083  0914                     	;# 
  5084  0915                     	;# 
  5085  0916                     	;# 
  5086  0918                     	;# 
  5087  0919                     	;# 
  5088  091A                     	;# 
  5089  091B                     	;# 
  5090  091C                     	;# 
  5091  091D                     	;# 
  5092  091E                     	;# 
  5093  091F                     	;# 
  5094  0E0F                     	;# 
  5095  0E10                     	;# 
  5096  0E11                     	;# 
  5097  0E12                     	;# 
  5098  0E13                     	;# 
  5099  0E14                     	;# 
  5100  0E15                     	;# 
  5101  0E16                     	;# 
  5102  0E17                     	;# 
  5103  0E18                     	;# 
  5104  0E19                     	;# 
  5105  0E1A                     	;# 
  5106  0E1B                     	;# 
  5107  0E1C                     	;# 
  5108  0E1D                     	;# 
  5109  0E1E                     	;# 
  5110  0E1F                     	;# 
  5111  0E20                     	;# 
  5112  0E21                     	;# 
  5113  0E22                     	;# 
  5114  0E24                     	;# 
  5115  0E25                     	;# 
  5116  0E28                     	;# 
  5117  0E29                     	;# 
  5118  0E2A                     	;# 
  5119  0E2B                     	;# 
  5120  0E2C                     	;# 
  5121  0E2D                     	;# 
  5122  0E2E                     	;# 
  5123  0E2F                     	;# 
  5124  0E90                     	;# 
  5125  0E91                     	;# 
  5126  0E92                     	;# 
  5127  0E94                     	;# 
  5128  0E95                     	;# 
  5129  0E9C                     	;# 
  5130  0E9D                     	;# 
  5131  0E9E                     	;# 
  5132  0E9F                     	;# 
  5133  0EA0                     	;# 
  5134  0EA1                     	;# 
  5135  0EA2                     	;# 
  5136  0EA3                     	;# 
  5137  0EA4                     	;# 
  5138  0EA5                     	;# 
  5139  0EA6                     	;# 
  5140  0EA7                     	;# 
  5141  0F0F                     	;# 
  5142  0F10                     	;# 
  5143  0F11                     	;# 
  5144  0F12                     	;# 
  5145  0F13                     	;# 
  5146  0F14                     	;# 
  5147  0F15                     	;# 
  5148  0F16                     	;# 
  5149  0F17                     	;# 
  5150  0F18                     	;# 
  5151  0F19                     	;# 
  5152  0F1A                     	;# 
  5153  0F1B                     	;# 
  5154  0F1C                     	;# 
  5155  0F1D                     	;# 
  5156  0F1E                     	;# 
  5157  0F1F                     	;# 
  5158  0F20                     	;# 
  5159  0F21                     	;# 
  5160  0F22                     	;# 
  5161  0F23                     	;# 
  5162  0F24                     	;# 
  5163  0F25                     	;# 
  5164  0F26                     	;# 
  5165  0F27                     	;# 
  5166  0F28                     	;# 
  5167  0F29                     	;# 
  5168  0F2A                     	;# 
  5169  0F2B                     	;# 
  5170  0F2C                     	;# 
  5171  0F2D                     	;# 
  5172  0F2E                     	;# 
  5173  0F2F                     	;# 
  5174  0F30                     	;# 
  5175  0F31                     	;# 
  5176  0F32                     	;# 
  5177  0F33                     	;# 
  5178  0F34                     	;# 
  5179  0F35                     	;# 
  5180  0F36                     	;# 
  5181  0F37                     	;# 
  5182  0FE4                     	;# 
  5183  0FE5                     	;# 
  5184  0FE6                     	;# 
  5185  0FE7                     	;# 
  5186  0FE8                     	;# 
  5187  0FE9                     	;# 
  5188  0FEA                     	;# 
  5189  0FEB                     	;# 
  5190  0FED                     	;# 
  5191  0FEE                     	;# 
  5192  0FEF                     	;# 
  5193  0000                     	;# 
  5194  0001                     	;# 
  5195  0002                     	;# 
  5196  0003                     	;# 
  5197  0004                     	;# 
  5198  0005                     	;# 
  5199  0006                     	;# 
  5200  0007                     	;# 
  5201  0008                     	;# 
  5202  0009                     	;# 
  5203  000A                     	;# 
  5204  000B                     	;# 
  5205  000C                     	;# 
  5206  000D                     	;# 
  5207  000E                     	;# 
  5208  0010                     	;# 
  5209  0011                     	;# 
  5210  0012                     	;# 
  5211  0013                     	;# 
  5212  0014                     	;# 
  5213  0015                     	;# 
  5214  0015                     	;# 
  5215  0016                     	;# 
  5216  0016                     	;# 
  5217  0017                     	;# 
  5218  0018                     	;# 
  5219  0019                     	;# 
  5220  0019                     	;# 
  5221  001A                     	;# 
  5222  001B                     	;# 
  5223  001C                     	;# 
  5224  001D                     	;# 
  5225  001E                     	;# 
  5226  001F                     	;# 
  5227  008C                     	;# 
  5228  008D                     	;# 
  5229  008E                     	;# 
  5230  0090                     	;# 
  5231  0091                     	;# 
  5232  0092                     	;# 
  5233  0093                     	;# 
  5234  0094                     	;# 
  5235  0097                     	;# 
  5236  009B                     	;# 
  5237  009B                     	;# 
  5238  009C                     	;# 
  5239  009D                     	;# 
  5240  009E                     	;# 
  5241  009F                     	;# 
  5242  010C                     	;# 
  5243  010D                     	;# 
  5244  010E                     	;# 
  5245  0111                     	;# 
  5246  0112                     	;# 
  5247  0113                     	;# 
  5248  0114                     	;# 
  5249  0115                     	;# 
  5250  0116                     	;# 
  5251  0117                     	;# 
  5252  0118                     	;# 
  5253  0119                     	;# 
  5254  018C                     	;# 
  5255  018D                     	;# 
  5256  018E                     	;# 
  5257  0197                     	;# 
  5258  0199                     	;# 
  5259  0199                     	;# 
  5260  0199                     	;# 
  5261  019A                     	;# 
  5262  019A                     	;# 
  5263  019A                     	;# 
  5264  019B                     	;# 
  5265  019B                     	;# 
  5266  019B                     	;# 
  5267  019B                     	;# 
  5268  019B                     	;# 
  5269  019C                     	;# 
  5270  019C                     	;# 
  5271  019C                     	;# 
  5272  019D                     	;# 
  5273  019D                     	;# 
  5274  019D                     	;# 
  5275  019E                     	;# 
  5276  019E                     	;# 
  5277  019E                     	;# 
  5278  019F                     	;# 
  5279  019F                     	;# 
  5280  019F                     	;# 
  5281  019F                     	;# 
  5282  019F                     	;# 
  5283  020C                     	;# 
  5284  020D                     	;# 
  5285  020E                     	;# 
  5286  0211                     	;# 
  5287  0211                     	;# 
  5288  0212                     	;# 
  5289  0212                     	;# 
  5290  0213                     	;# 
  5291  0213                     	;# 
  5292  0214                     	;# 
  5293  0214                     	;# 
  5294  0215                     	;# 
  5295  0215                     	;# 
  5296  0215                     	;# 
  5297  0215                     	;# 
  5298  0216                     	;# 
  5299  0216                     	;# 
  5300  0217                     	;# 
  5301  0217                     	;# 
  5302  0219                     	;# 
  5303  021A                     	;# 
  5304  021B                     	;# 
  5305  021C                     	;# 
  5306  021D                     	;# 
  5307  021D                     	;# 
  5308  021E                     	;# 
  5309  021F                     	;# 
  5310  028C                     	;# 
  5311  028D                     	;# 
  5312  028E                     	;# 
  5313  0291                     	;# 
  5314  0291                     	;# 
  5315  0292                     	;# 
  5316  0293                     	;# 
  5317  0294                     	;# 
  5318  0295                     	;# 
  5319  0295                     	;# 
  5320  0296                     	;# 
  5321  0297                     	;# 
  5322  0298                     	;# 
  5323  029F                     	;# 
  5324  030C                     	;# 
  5325  030D                     	;# 
  5326  030E                     	;# 
  5327  0311                     	;# 
  5328  0311                     	;# 
  5329  0312                     	;# 
  5330  0313                     	;# 
  5331  0314                     	;# 
  5332  0315                     	;# 
  5333  0315                     	;# 
  5334  0316                     	;# 
  5335  0317                     	;# 
  5336  0318                     	;# 
  5337  038C                     	;# 
  5338  038D                     	;# 
  5339  038E                     	;# 
  5340  0391                     	;# 
  5341  0392                     	;# 
  5342  0393                     	;# 
  5343  0394                     	;# 
  5344  0395                     	;# 
  5345  0396                     	;# 
  5346  0397                     	;# 
  5347  0398                     	;# 
  5348  0399                     	;# 
  5349  039A                     	;# 
  5350  039C                     	;# 
  5351  039D                     	;# 
  5352  039E                     	;# 
  5353  039F                     	;# 
  5354  0411                     	;# 
  5355  0411                     	;# 
  5356  0412                     	;# 
  5357  0413                     	;# 
  5358  0414                     	;# 
  5359  0415                     	;# 
  5360  0416                     	;# 
  5361  0417                     	;# 
  5362  0418                     	;# 
  5363  0418                     	;# 
  5364  0419                     	;# 
  5365  041A                     	;# 
  5366  041B                     	;# 
  5367  041C                     	;# 
  5368  041D                     	;# 
  5369  041E                     	;# 
  5370  041F                     	;# 
  5371  0498                     	;# 
  5372  0498                     	;# 
  5373  0499                     	;# 
  5374  049A                     	;# 
  5375  049B                     	;# 
  5376  049B                     	;# 
  5377  049C                     	;# 
  5378  049D                     	;# 
  5379  049E                     	;# 
  5380  049F                     	;# 
  5381  0617                     	;# 
  5382  0618                     	;# 
  5383  0619                     	;# 
  5384  0619                     	;# 
  5385  061A                     	;# 
  5386  061B                     	;# 
  5387  061C                     	;# 
  5388  061C                     	;# 
  5389  061F                     	;# 
  5390  0691                     	;# 
  5391  0692                     	;# 
  5392  0693                     	;# 
  5393  0694                     	;# 
  5394  0695                     	;# 
  5395  0696                     	;# 
  5396  0697                     	;# 
  5397  0698                     	;# 
  5398  0699                     	;# 
  5399  0711                     	;# 
  5400  0712                     	;# 
  5401  0713                     	;# 
  5402  0714                     	;# 
  5403  0715                     	;# 
  5404  0716                     	;# 
  5405  0717                     	;# 
  5406  0718                     	;# 
  5407  0719                     	;# 
  5408  0891                     	;# 
  5409  0891                     	;# 
  5410  0891                     	;# 
  5411  0891                     	;# 
  5412  0891                     	;# 
  5413  0891                     	;# 
  5414  0892                     	;# 
  5415  0892                     	;# 
  5416  0892                     	;# 
  5417  0893                     	;# 
  5418  0893                     	;# 
  5419  0893                     	;# 
  5420  0893                     	;# 
  5421  0893                     	;# 
  5422  0893                     	;# 
  5423  0894                     	;# 
  5424  0894                     	;# 
  5425  0894                     	;# 
  5426  0895                     	;# 
  5427  0895                     	;# 
  5428  0895                     	;# 
  5429  0896                     	;# 
  5430  0896                     	;# 
  5431  0896                     	;# 
  5432  089B                     	;# 
  5433  0911                     	;# 
  5434  0912                     	;# 
  5435  0913                     	;# 
  5436  0914                     	;# 
  5437  0915                     	;# 
  5438  0916                     	;# 
  5439  0918                     	;# 
  5440  0919                     	;# 
  5441  091A                     	;# 
  5442  091B                     	;# 
  5443  091C                     	;# 
  5444  091D                     	;# 
  5445  091E                     	;# 
  5446  091F                     	;# 
  5447  0E0F                     	;# 
  5448  0E10                     	;# 
  5449  0E11                     	;# 
  5450  0E12                     	;# 
  5451  0E13                     	;# 
  5452  0E14                     	;# 
  5453  0E15                     	;# 
  5454  0E16                     	;# 
  5455  0E17                     	;# 
  5456  0E18                     	;# 
  5457  0E19                     	;# 
  5458  0E1A                     	;# 
  5459  0E1B                     	;# 
  5460  0E1C                     	;# 
  5461  0E1D                     	;# 
  5462  0E1E                     	;# 
  5463  0E1F                     	;# 
  5464  0E20                     	;# 
  5465  0E21                     	;# 
  5466  0E22                     	;# 
  5467  0E24                     	;# 
  5468  0E25                     	;# 
  5469  0E28                     	;# 
  5470  0E29                     	;# 
  5471  0E2A                     	;# 
  5472  0E2B                     	;# 
  5473  0E2C                     	;# 
  5474  0E2D                     	;# 
  5475  0E2E                     	;# 
  5476  0E2F                     	;# 
  5477  0E90                     	;# 
  5478  0E91                     	;# 
  5479  0E92                     	;# 
  5480  0E94                     	;# 
  5481  0E95                     	;# 
  5482  0E9C                     	;# 
  5483  0E9D                     	;# 
  5484  0E9E                     	;# 
  5485  0E9F                     	;# 
  5486  0EA0                     	;# 
  5487  0EA1                     	;# 
  5488  0EA2                     	;# 
  5489  0EA3                     	;# 
  5490  0EA4                     	;# 
  5491  0EA5                     	;# 
  5492  0EA6                     	;# 
  5493  0EA7                     	;# 
  5494  0F0F                     	;# 
  5495  0F10                     	;# 
  5496  0F11                     	;# 
  5497  0F12                     	;# 
  5498  0F13                     	;# 
  5499  0F14                     	;# 
  5500  0F15                     	;# 
  5501  0F16                     	;# 
  5502  0F17                     	;# 
  5503  0F18                     	;# 
  5504  0F19                     	;# 
  5505  0F1A                     	;# 
  5506  0F1B                     	;# 
  5507  0F1C                     	;# 
  5508  0F1D                     	;# 
  5509  0F1E                     	;# 
  5510  0F1F                     	;# 
  5511  0F20                     	;# 
  5512  0F21                     	;# 
  5513  0F22                     	;# 
  5514  0F23                     	;# 
  5515  0F24                     	;# 
  5516  0F25                     	;# 
  5517  0F26                     	;# 
  5518  0F27                     	;# 
  5519  0F28                     	;# 
  5520  0F29                     	;# 
  5521  0F2A                     	;# 
  5522  0F2B                     	;# 
  5523  0F2C                     	;# 
  5524  0F2D                     	;# 
  5525  0F2E                     	;# 
  5526  0F2F                     	;# 
  5527  0F30                     	;# 
  5528  0F31                     	;# 
  5529  0F32                     	;# 
  5530  0F33                     	;# 
  5531  0F34                     	;# 
  5532  0F35                     	;# 
  5533  0F36                     	;# 
  5534  0F37                     	;# 
  5535  0FE4                     	;# 
  5536  0FE5                     	;# 
  5537  0FE6                     	;# 
  5538  0FE7                     	;# 
  5539  0FE8                     	;# 
  5540  0FE9                     	;# 
  5541  0FEA                     	;# 
  5542  0FEB                     	;# 
  5543  0FED                     	;# 
  5544  0FEE                     	;# 
  5545  0FEF                     	;# 
  5546  0000                     	;# 
  5547  0001                     	;# 
  5548  0002                     	;# 
  5549  0003                     	;# 
  5550  0004                     	;# 
  5551  0005                     	;# 
  5552  0006                     	;# 
  5553  0007                     	;# 
  5554  0008                     	;# 
  5555  0009                     	;# 
  5556  000A                     	;# 
  5557  000B                     	;# 
  5558  000C                     	;# 
  5559  000D                     	;# 
  5560  000E                     	;# 
  5561  0010                     	;# 
  5562  0011                     	;# 
  5563  0012                     	;# 
  5564  0013                     	;# 
  5565  0014                     	;# 
  5566  0015                     	;# 
  5567  0015                     	;# 
  5568  0016                     	;# 
  5569  0016                     	;# 
  5570  0017                     	;# 
  5571  0018                     	;# 
  5572  0019                     	;# 
  5573  0019                     	;# 
  5574  001A                     	;# 
  5575  001B                     	;# 
  5576  001C                     	;# 
  5577  001D                     	;# 
  5578  001E                     	;# 
  5579  001F                     	;# 
  5580  008C                     	;# 
  5581  008D                     	;# 
  5582  008E                     	;# 
  5583  0090                     	;# 
  5584  0091                     	;# 
  5585  0092                     	;# 
  5586  0093                     	;# 
  5587  0094                     	;# 
  5588  0097                     	;# 
  5589  009B                     	;# 
  5590  009B                     	;# 
  5591  009C                     	;# 
  5592  009D                     	;# 
  5593  009E                     	;# 
  5594  009F                     	;# 
  5595  010C                     	;# 
  5596  010D                     	;# 
  5597  010E                     	;# 
  5598  0111                     	;# 
  5599  0112                     	;# 
  5600  0113                     	;# 
  5601  0114                     	;# 
  5602  0115                     	;# 
  5603  0116                     	;# 
  5604  0117                     	;# 
  5605  0118                     	;# 
  5606  0119                     	;# 
  5607  018C                     	;# 
  5608  018D                     	;# 
  5609  018E                     	;# 
  5610  0199                     	;# 
  5611  0199                     	;# 
  5612  0199                     	;# 
  5613  019A                     	;# 
  5614  019A                     	;# 
  5615  019A                     	;# 
  5616  019B                     	;# 
  5617  019B                     	;# 
  5618  019B                     	;# 
  5619  019B                     	;# 
  5620  019B                     	;# 
  5621  019C                     	;# 
  5622  019C                     	;# 
  5623  019C                     	;# 
  5624  019D                     	;# 
  5625  019D                     	;# 
  5626  019D                     	;# 
  5627  019E                     	;# 
  5628  019E                     	;# 
  5629  019E                     	;# 
  5630  019F                     	;# 
  5631  019F                     	;# 
  5632  019F                     	;# 
  5633  019F                     	;# 
  5634  019F                     	;# 
  5635  020C                     	;# 
  5636  020D                     	;# 
  5637  020E                     	;# 
  5638  0211                     	;# 
  5639  0211                     	;# 
  5640  0212                     	;# 
  5641  0212                     	;# 
  5642  0213                     	;# 
  5643  0213                     	;# 
  5644  0214                     	;# 
  5645  0214                     	;# 
  5646  0215                     	;# 
  5647  0215                     	;# 
  5648  0215                     	;# 
  5649  0215                     	;# 
  5650  0216                     	;# 
  5651  0216                     	;# 
  5652  0217                     	;# 
  5653  0217                     	;# 
  5654  0219                     	;# 
  5655  021A                     	;# 
  5656  021B                     	;# 
  5657  021C                     	;# 
  5658  021D                     	;# 
  5659  021D                     	;# 
  5660  021E                     	;# 
  5661  021F                     	;# 
  5662  028C                     	;# 
  5663  028D                     	;# 
  5664  028E                     	;# 
  5665  0291                     	;# 
  5666  0291                     	;# 
  5667  0292                     	;# 
  5668  0293                     	;# 
  5669  0294                     	;# 
  5670  0295                     	;# 
  5671  0295                     	;# 
  5672  0296                     	;# 
  5673  0297                     	;# 
  5674  0298                     	;# 
  5675  029F                     	;# 
  5676  030C                     	;# 
  5677  030D                     	;# 
  5678  030E                     	;# 
  5679  0311                     	;# 
  5680  0311                     	;# 
  5681  0312                     	;# 
  5682  0313                     	;# 
  5683  0314                     	;# 
  5684  0315                     	;# 
  5685  0315                     	;# 
  5686  0316                     	;# 
  5687  0317                     	;# 
  5688  0318                     	;# 
  5689  038C                     	;# 
  5690  038D                     	;# 
  5691  038E                     	;# 
  5692  0391                     	;# 
  5693  0392                     	;# 
  5694  0393                     	;# 
  5695  0394                     	;# 
  5696  0395                     	;# 
  5697  0396                     	;# 
  5698  0397                     	;# 
  5699  0398                     	;# 
  5700  0399                     	;# 
  5701  039A                     	;# 
  5702  039C                     	;# 
  5703  039D                     	;# 
  5704  039E                     	;# 
  5705  039F                     	;# 
  5706  0411                     	;# 
  5707  0411                     	;# 
  5708  0412                     	;# 
  5709  0413                     	;# 
  5710  0414                     	;# 
  5711  0415                     	;# 
  5712  0416                     	;# 
  5713  0417                     	;# 
  5714  0418                     	;# 
  5715  0418                     	;# 
  5716  0419                     	;# 
  5717  041A                     	;# 
  5718  041B                     	;# 
  5719  041C                     	;# 
  5720  041D                     	;# 
  5721  041E                     	;# 
  5722  041F                     	;# 
  5723  0498                     	;# 
  5724  0498                     	;# 
  5725  0499                     	;# 
  5726  049A                     	;# 
  5727  049B                     	;# 
  5728  049B                     	;# 
  5729  049C                     	;# 
  5730  049D                     	;# 
  5731  049E                     	;# 
  5732  049F                     	;# 
  5733  0617                     	;# 
  5734  0618                     	;# 
  5735  0619                     	;# 
  5736  0619                     	;# 
  5737  061A                     	;# 
  5738  061B                     	;# 
  5739  061C                     	;# 
  5740  061C                     	;# 
  5741  061F                     	;# 
  5742  0691                     	;# 
  5743  0692                     	;# 
  5744  0693                     	;# 
  5745  0694                     	;# 
  5746  0695                     	;# 
  5747  0696                     	;# 
  5748  0697                     	;# 
  5749  0698                     	;# 
  5750  0699                     	;# 
  5751  0711                     	;# 
  5752  0712                     	;# 
  5753  0713                     	;# 
  5754  0714                     	;# 
  5755  0715                     	;# 
  5756  0716                     	;# 
  5757  0717                     	;# 
  5758  0718                     	;# 
  5759  0719                     	;# 
  5760  0891                     	;# 
  5761  0891                     	;# 
  5762  0891                     	;# 
  5763  0891                     	;# 
  5764  0891                     	;# 
  5765  0891                     	;# 
  5766  0892                     	;# 
  5767  0892                     	;# 
  5768  0892                     	;# 
  5769  0893                     	;# 
  5770  0893                     	;# 
  5771  0893                     	;# 
  5772  0893                     	;# 
  5773  0893                     	;# 
  5774  0893                     	;# 
  5775  0894                     	;# 
  5776  0894                     	;# 
  5777  0894                     	;# 
  5778  0895                     	;# 
  5779  0895                     	;# 
  5780  0895                     	;# 
  5781  0896                     	;# 
  5782  0896                     	;# 
  5783  0896                     	;# 
  5784  089B                     	;# 
  5785  0911                     	;# 
  5786  0912                     	;# 
  5787  0913                     	;# 
  5788  0914                     	;# 
  5789  0915                     	;# 
  5790  0916                     	;# 
  5791  0918                     	;# 
  5792  0919                     	;# 
  5793  091A                     	;# 
  5794  091B                     	;# 
  5795  091C                     	;# 
  5796  091D                     	;# 
  5797  091E                     	;# 
  5798  091F                     	;# 
  5799  0E0F                     	;# 
  5800  0E10                     	;# 
  5801  0E11                     	;# 
  5802  0E12                     	;# 
  5803  0E13                     	;# 
  5804  0E14                     	;# 
  5805  0E15                     	;# 
  5806  0E16                     	;# 
  5807  0E17                     	;# 
  5808  0E18                     	;# 
  5809  0E19                     	;# 
  5810  0E1A                     	;# 
  5811  0E1B                     	;# 
  5812  0E1C                     	;# 
  5813  0E1D                     	;# 
  5814  0E1E                     	;# 
  5815  0E1F                     	;# 
  5816  0E20                     	;# 
  5817  0E21                     	;# 
  5818  0E22                     	;# 
  5819  0E24                     	;# 
  5820  0E25                     	;# 
  5821  0E28                     	;# 
  5822  0E29                     	;# 
  5823  0E2A                     	;# 
  5824  0E2B                     	;# 
  5825  0E2C                     	;# 
  5826  0E2D                     	;# 
  5827  0E2E                     	;# 
  5828  0E2F                     	;# 
  5829  0E90                     	;# 
  5830  0E91                     	;# 
  5831  0E92                     	;# 
  5832  0E94                     	;# 
  5833  0E95                     	;# 
  5834  0E9C                     	;# 
  5835  0E9D                     	;# 
  5836  0E9E                     	;# 
  5837  0E9F                     	;# 
  5838  0EA0                     	;# 
  5839  0EA1                     	;# 
  5840  0EA2                     	;# 
  5841  0EA3                     	;# 
  5842  0EA4                     	;# 
  5843  0EA5                     	;# 
  5844  0EA6                     	;# 
  5845  0EA7                     	;# 
  5846  0F0F                     	;# 
  5847  0F10                     	;# 
  5848  0F11                     	;# 
  5849  0F12                     	;# 
  5850  0F13                     	;# 
  5851  0F14                     	;# 
  5852  0F15                     	;# 
  5853  0F16                     	;# 
  5854  0F17                     	;# 
  5855  0F18                     	;# 
  5856  0F19                     	;# 
  5857  0F1A                     	;# 
  5858  0F1B                     	;# 
  5859  0F1C                     	;# 
  5860  0F1D                     	;# 
  5861  0F1E                     	;# 
  5862  0F1F                     	;# 
  5863  0F20                     	;# 
  5864  0F21                     	;# 
  5865  0F22                     	;# 
  5866  0F23                     	;# 
  5867  0F24                     	;# 
  5868  0F25                     	;# 
  5869  0F26                     	;# 
  5870  0F27                     	;# 
  5871  0F28                     	;# 
  5872  0F29                     	;# 
  5873  0F2A                     	;# 
  5874  0F2B                     	;# 
  5875  0F2C                     	;# 
  5876  0F2D                     	;# 
  5877  0F2E                     	;# 
  5878  0F2F                     	;# 
  5879  0F30                     	;# 
  5880  0F31                     	;# 
  5881  0F32                     	;# 
  5882  0F33                     	;# 
  5883  0F34                     	;# 
  5884  0F35                     	;# 
  5885  0F36                     	;# 
  5886  0F37                     	;# 
  5887  0FE4                     	;# 
  5888  0FE5                     	;# 
  5889  0FE6                     	;# 
  5890  0FE7                     	;# 
  5891  0FE8                     	;# 
  5892  0FE9                     	;# 
  5893  0FEA                     	;# 
  5894  0FEB                     	;# 
  5895  0FED                     	;# 
  5896  0FEE                     	;# 
  5897  0FEF                     	;# 
  5898  0000                     	;# 
  5899  0001                     	;# 
  5900  0002                     	;# 
  5901  0003                     	;# 
  5902  0004                     	;# 
  5903  0005                     	;# 
  5904  0006                     	;# 
  5905  0007                     	;# 
  5906  0008                     	;# 
  5907  0009                     	;# 
  5908  000A                     	;# 
  5909  000B                     	;# 
  5910  000C                     	;# 
  5911  000D                     	;# 
  5912  000E                     	;# 
  5913  0010                     	;# 
  5914  0011                     	;# 
  5915  0012                     	;# 
  5916  0013                     	;# 
  5917  0014                     	;# 
  5918  0015                     	;# 
  5919  0015                     	;# 
  5920  0016                     	;# 
  5921  0016                     	;# 
  5922  0017                     	;# 
  5923  0018                     	;# 
  5924  0019                     	;# 
  5925  0019                     	;# 
  5926  001A                     	;# 
  5927  001B                     	;# 
  5928  001C                     	;# 
  5929  001D                     	;# 
  5930  001E                     	;# 
  5931  001F                     	;# 
  5932  008C                     	;# 
  5933  008D                     	;# 
  5934  008E                     	;# 
  5935  0090                     	;# 
  5936  0091                     	;# 
  5937  0092                     	;# 
  5938  0093                     	;# 
  5939  0094                     	;# 
  5940  0097                     	;# 
  5941  009B                     	;# 
  5942  009B                     	;# 
  5943  009C                     	;# 
  5944  009D                     	;# 
  5945  009E                     	;# 
  5946  009F                     	;# 
  5947  010C                     	;# 
  5948  010D                     	;# 
  5949  010E                     	;# 
  5950  0111                     	;# 
  5951  0112                     	;# 
  5952  0113                     	;# 
  5953  0114                     	;# 
  5954  0115                     	;# 
  5955  0116                     	;# 
  5956  0117                     	;# 
  5957  0118                     	;# 
  5958  0119                     	;# 
  5959  018C                     	;# 
  5960  018D                     	;# 
  5961  018E                     	;# 
  5962  0199                     	;# 
  5963  0199                     	;# 
  5964  0199                     	;# 
  5965  019A                     	;# 
  5966  019A                     	;# 
  5967  019A                     	;# 
  5968  019B                     	;# 
  5969  019B                     	;# 
  5970  019B                     	;# 
  5971  019B                     	;# 
  5972  019B                     	;# 
  5973  019C                     	;# 
  5974  019C                     	;# 
  5975  019C                     	;# 
  5976  019D                     	;# 
  5977  019D                     	;# 
  5978  019D                     	;# 
  5979  019E                     	;# 
  5980  019E                     	;# 
  5981  019E                     	;# 
  5982  019F                     	;# 
  5983  019F                     	;# 
  5984  019F                     	;# 
  5985  019F                     	;# 
  5986  019F                     	;# 
  5987  020C                     	;# 
  5988  020D                     	;# 
  5989  020E                     	;# 
  5990  0211                     	;# 
  5991  0211                     	;# 
  5992  0212                     	;# 
  5993  0212                     	;# 
  5994  0213                     	;# 
  5995  0213                     	;# 
  5996  0214                     	;# 
  5997  0214                     	;# 
  5998  0215                     	;# 
  5999  0215                     	;# 
  6000  0215                     	;# 
  6001  0215                     	;# 
  6002  0216                     	;# 
  6003  0216                     	;# 
  6004  0217                     	;# 
  6005  0217                     	;# 
  6006  0219                     	;# 
  6007  021A                     	;# 
  6008  021B                     	;# 
  6009  021C                     	;# 
  6010  021D                     	;# 
  6011  021D                     	;# 
  6012  021E                     	;# 
  6013  021F                     	;# 
  6014  028C                     	;# 
  6015  028D                     	;# 
  6016  028E                     	;# 
  6017  0291                     	;# 
  6018  0291                     	;# 
  6019  0292                     	;# 
  6020  0293                     	;# 
  6021  0294                     	;# 
  6022  0295                     	;# 
  6023  0295                     	;# 
  6024  0296                     	;# 
  6025  0297                     	;# 
  6026  0298                     	;# 
  6027  029F                     	;# 
  6028  030C                     	;# 
  6029  030D                     	;# 
  6030  030E                     	;# 
  6031  0311                     	;# 
  6032  0311                     	;# 
  6033  0312                     	;# 
  6034  0313                     	;# 
  6035  0314                     	;# 
  6036  0315                     	;# 
  6037  0315                     	;# 
  6038  0316                     	;# 
  6039  0317                     	;# 
  6040  0318                     	;# 
  6041  038C                     	;# 
  6042  038D                     	;# 
  6043  038E                     	;# 
  6044  0391                     	;# 
  6045  0392                     	;# 
  6046  0393                     	;# 
  6047  0394                     	;# 
  6048  0395                     	;# 
  6049  0396                     	;# 
  6050  0397                     	;# 
  6051  0398                     	;# 
  6052  0399                     	;# 
  6053  039A                     	;# 
  6054  039C                     	;# 
  6055  039D                     	;# 
  6056  039E                     	;# 
  6057  039F                     	;# 
  6058  0411                     	;# 
  6059  0411                     	;# 
  6060  0412                     	;# 
  6061  0413                     	;# 
  6062  0414                     	;# 
  6063  0415                     	;# 
  6064  0416                     	;# 
  6065  0417                     	;# 
  6066  0418                     	;# 
  6067  0418                     	;# 
  6068  0419                     	;# 
  6069  041A                     	;# 
  6070  041B                     	;# 
  6071  041C                     	;# 
  6072  041D                     	;# 
  6073  041E                     	;# 
  6074  041F                     	;# 
  6075  0498                     	;# 
  6076  0498                     	;# 
  6077  0499                     	;# 
  6078  049A                     	;# 
  6079  049B                     	;# 
  6080  049B                     	;# 
  6081  049C                     	;# 
  6082  049D                     	;# 
  6083  049E                     	;# 
  6084  049F                     	;# 
  6085  0617                     	;# 
  6086  0618                     	;# 
  6087  0619                     	;# 
  6088  0619                     	;# 
  6089  061A                     	;# 
  6090  061B                     	;# 
  6091  061C                     	;# 
  6092  061C                     	;# 
  6093  061F                     	;# 
  6094  0691                     	;# 
  6095  0692                     	;# 
  6096  0693                     	;# 
  6097  0694                     	;# 
  6098  0695                     	;# 
  6099  0696                     	;# 
  6100  0697                     	;# 
  6101  0698                     	;# 
  6102  0699                     	;# 
  6103  0711                     	;# 
  6104  0712                     	;# 
  6105  0713                     	;# 
  6106  0714                     	;# 
  6107  0715                     	;# 
  6108  0716                     	;# 
  6109  0717                     	;# 
  6110  0718                     	;# 
  6111  0719                     	;# 
  6112  0891                     	;# 
  6113  0891                     	;# 
  6114  0891                     	;# 
  6115  0891                     	;# 
  6116  0891                     	;# 
  6117  0891                     	;# 
  6118  0892                     	;# 
  6119  0892                     	;# 
  6120  0892                     	;# 
  6121  0893                     	;# 
  6122  0893                     	;# 
  6123  0893                     	;# 
  6124  0893                     	;# 
  6125  0893                     	;# 
  6126  0893                     	;# 
  6127  0894                     	;# 
  6128  0894                     	;# 
  6129  0894                     	;# 
  6130  0895                     	;# 
  6131  0895                     	;# 
  6132  0895                     	;# 
  6133  0896                     	;# 
  6134  0896                     	;# 
  6135  0896                     	;# 
  6136  089B                     	;# 
  6137  0911                     	;# 
  6138  0912                     	;# 
  6139  0913                     	;# 
  6140  0914                     	;# 
  6141  0915                     	;# 
  6142  0916                     	;# 
  6143  0918                     	;# 
  6144  0919                     	;# 
  6145  091A                     	;# 
  6146  091B                     	;# 
  6147  091C                     	;# 
  6148  091D                     	;# 
  6149  091E                     	;# 
  6150  091F                     	;# 
  6151  0E0F                     	;# 
  6152  0E10                     	;# 
  6153  0E11                     	;# 
  6154  0E12                     	;# 
  6155  0E13                     	;# 
  6156  0E14                     	;# 
  6157  0E15                     	;# 
  6158  0E16                     	;# 
  6159  0E17                     	;# 
  6160  0E18                     	;# 
  6161  0E19                     	;# 
  6162  0E1A                     	;# 
  6163  0E1B                     	;# 
  6164  0E1C                     	;# 
  6165  0E1D                     	;# 
  6166  0E1E                     	;# 
  6167  0E1F                     	;# 
  6168  0E20                     	;# 
  6169  0E21                     	;# 
  6170  0E22                     	;# 
  6171  0E24                     	;# 
  6172  0E25                     	;# 
  6173  0E28                     	;# 
  6174  0E29                     	;# 
  6175  0E2A                     	;# 
  6176  0E2B                     	;# 
  6177  0E2C                     	;# 
  6178  0E2D                     	;# 
  6179  0E2E                     	;# 
  6180  0E2F                     	;# 
  6181  0E90                     	;# 
  6182  0E91                     	;# 
  6183  0E92                     	;# 
  6184  0E94                     	;# 
  6185  0E95                     	;# 
  6186  0E9C                     	;# 
  6187  0E9D                     	;# 
  6188  0E9E                     	;# 
  6189  0E9F                     	;# 
  6190  0EA0                     	;# 
  6191  0EA1                     	;# 
  6192  0EA2                     	;# 
  6193  0EA3                     	;# 
  6194  0EA4                     	;# 
  6195  0EA5                     	;# 
  6196  0EA6                     	;# 
  6197  0EA7                     	;# 
  6198  0F0F                     	;# 
  6199  0F10                     	;# 
  6200  0F11                     	;# 
  6201  0F12                     	;# 
  6202  0F13                     	;# 
  6203  0F14                     	;# 
  6204  0F15                     	;# 
  6205  0F16                     	;# 
  6206  0F17                     	;# 
  6207  0F18                     	;# 
  6208  0F19                     	;# 
  6209  0F1A                     	;# 
  6210  0F1B                     	;# 
  6211  0F1C                     	;# 
  6212  0F1D                     	;# 
  6213  0F1E                     	;# 
  6214  0F1F                     	;# 
  6215  0F20                     	;# 
  6216  0F21                     	;# 
  6217  0F22                     	;# 
  6218  0F23                     	;# 
  6219  0F24                     	;# 
  6220  0F25                     	;# 
  6221  0F26                     	;# 
  6222  0F27                     	;# 
  6223  0F28                     	;# 
  6224  0F29                     	;# 
  6225  0F2A                     	;# 
  6226  0F2B                     	;# 
  6227  0F2C                     	;# 
  6228  0F2D                     	;# 
  6229  0F2E                     	;# 
  6230  0F2F                     	;# 
  6231  0F30                     	;# 
  6232  0F31                     	;# 
  6233  0F32                     	;# 
  6234  0F33                     	;# 
  6235  0F34                     	;# 
  6236  0F35                     	;# 
  6237  0F36                     	;# 
  6238  0F37                     	;# 
  6239  0FE4                     	;# 
  6240  0FE5                     	;# 
  6241  0FE6                     	;# 
  6242  0FE7                     	;# 
  6243  0FE8                     	;# 
  6244  0FE9                     	;# 
  6245  0FEA                     	;# 
  6246  0FEB                     	;# 
  6247  0FED                     	;# 
  6248  0FEE                     	;# 
  6249  0FEF                     	;# 
  6250  0000                     	;# 
  6251  0001                     	;# 
  6252  0002                     	;# 
  6253  0003                     	;# 
  6254  0004                     	;# 
  6255  0005                     	;# 
  6256  0006                     	;# 
  6257  0007                     	;# 
  6258  0008                     	;# 
  6259  0009                     	;# 
  6260  000A                     	;# 
  6261  000B                     	;# 
  6262  000C                     	;# 
  6263  000D                     	;# 
  6264  000E                     	;# 
  6265  0010                     	;# 
  6266  0011                     	;# 
  6267  0012                     	;# 
  6268  0013                     	;# 
  6269  0014                     	;# 
  6270  0015                     	;# 
  6271  0015                     	;# 
  6272  0016                     	;# 
  6273  0016                     	;# 
  6274  0017                     	;# 
  6275  0018                     	;# 
  6276  0019                     	;# 
  6277  0019                     	;# 
  6278  001A                     	;# 
  6279  001B                     	;# 
  6280  001C                     	;# 
  6281  001D                     	;# 
  6282  001E                     	;# 
  6283  001F                     	;# 
  6284  008C                     	;# 
  6285  008D                     	;# 
  6286  008E                     	;# 
  6287  0090                     	;# 
  6288  0091                     	;# 
  6289  0092                     	;# 
  6290  0093                     	;# 
  6291  0094                     	;# 
  6292  0097                     	;# 
  6293  009B                     	;# 
  6294  009B                     	;# 
  6295  009C                     	;# 
  6296  009D                     	;# 
  6297  009E                     	;# 
  6298  009F                     	;# 
  6299  010C                     	;# 
  6300  010D                     	;# 
  6301  010E                     	;# 
  6302  0111                     	;# 
  6303  0112                     	;# 
  6304  0113                     	;# 
  6305  0114                     	;# 
  6306  0115                     	;# 
  6307  0116                     	;# 
  6308  0117                     	;# 
  6309  0118                     	;# 
  6310  0119                     	;# 
  6311  018C                     	;# 
  6312  018D                     	;# 
  6313  018E                     	;# 
  6314  0199                     	;# 
  6315  0199                     	;# 
  6316  0199                     	;# 
  6317  019A                     	;# 
  6318  019A                     	;# 
  6319  019A                     	;# 
  6320  019B                     	;# 
  6321  019B                     	;# 
  6322  019B                     	;# 
  6323  019B                     	;# 
  6324  019B                     	;# 
  6325  019C                     	;# 
  6326  019C                     	;# 
  6327  019C                     	;# 
  6328  019D                     	;# 
  6329  019D                     	;# 
  6330  019D                     	;# 
  6331  019E                     	;# 
  6332  019E                     	;# 
  6333  019E                     	;# 
  6334  019F                     	;# 
  6335  019F                     	;# 
  6336  019F                     	;# 
  6337  019F                     	;# 
  6338  019F                     	;# 
  6339  020C                     	;# 
  6340  020D                     	;# 
  6341  020E                     	;# 
  6342  0211                     	;# 
  6343  0211                     	;# 
  6344  0212                     	;# 
  6345  0212                     	;# 
  6346  0213                     	;# 
  6347  0213                     	;# 
  6348  0214                     	;# 
  6349  0214                     	;# 
  6350  0215                     	;# 
  6351  0215                     	;# 
  6352  0215                     	;# 
  6353  0215                     	;# 
  6354  0216                     	;# 
  6355  0216                     	;# 
  6356  0217                     	;# 
  6357  0217                     	;# 
  6358  0219                     	;# 
  6359  021A                     	;# 
  6360  021B                     	;# 
  6361  021C                     	;# 
  6362  021D                     	;# 
  6363  021D                     	;# 
  6364  021E                     	;# 
  6365  021F                     	;# 
  6366  028C                     	;# 
  6367  028D                     	;# 
  6368  028E                     	;# 
  6369  0291                     	;# 
  6370  0291                     	;# 
  6371  0292                     	;# 
  6372  0293                     	;# 
  6373  0294                     	;# 
  6374  0295                     	;# 
  6375  0295                     	;# 
  6376  0296                     	;# 
  6377  0297                     	;# 
  6378  0298                     	;# 
  6379  029F                     	;# 
  6380  030C                     	;# 
  6381  030D                     	;# 
  6382  030E                     	;# 
  6383  0311                     	;# 
  6384  0311                     	;# 
  6385  0312                     	;# 
  6386  0313                     	;# 
  6387  0314                     	;# 
  6388  0315                     	;# 
  6389  0315                     	;# 
  6390  0316                     	;# 
  6391  0317                     	;# 
  6392  0318                     	;# 
  6393  038C                     	;# 
  6394  038D                     	;# 
  6395  038E                     	;# 
  6396  0391                     	;# 
  6397  0392                     	;# 
  6398  0393                     	;# 
  6399  0394                     	;# 
  6400  0395                     	;# 
  6401  0396                     	;# 
  6402  0397                     	;# 
  6403  0398                     	;# 
  6404  0399                     	;# 
  6405  039A                     	;# 
  6406  039C                     	;# 
  6407  039D                     	;# 
  6408  039E                     	;# 
  6409  039F                     	;# 
  6410  0411                     	;# 
  6411  0411                     	;# 
  6412  0412                     	;# 
  6413  0413                     	;# 
  6414  0414                     	;# 
  6415  0415                     	;# 
  6416  0416                     	;# 
  6417  0417                     	;# 
  6418  0418                     	;# 
  6419  0418                     	;# 
  6420  0419                     	;# 
  6421  041A                     	;# 
  6422  041B                     	;# 
  6423  041C                     	;# 
  6424  041D                     	;# 
  6425  041E                     	;# 
  6426  041F                     	;# 
  6427  0498                     	;# 
  6428  0498                     	;# 
  6429  0499                     	;# 
  6430  049A                     	;# 
  6431  049B                     	;# 
  6432  049B                     	;# 
  6433  049C                     	;# 
  6434  049D                     	;# 
  6435  049E                     	;# 
  6436  049F                     	;# 
  6437  0617                     	;# 
  6438  0618                     	;# 
  6439  0619                     	;# 
  6440  0619                     	;# 
  6441  061A                     	;# 
  6442  061B                     	;# 
  6443  061C                     	;# 
  6444  061C                     	;# 
  6445  061F                     	;# 
  6446  0691                     	;# 
  6447  0692                     	;# 
  6448  0693                     	;# 
  6449  0694                     	;# 
  6450  0695                     	;# 
  6451  0696                     	;# 
  6452  0697                     	;# 
  6453  0698                     	;# 
  6454  0699                     	;# 
  6455  0711                     	;# 
  6456  0712                     	;# 
  6457  0713                     	;# 
  6458  0714                     	;# 
  6459  0715                     	;# 
  6460  0716                     	;# 
  6461  0717                     	;# 
  6462  0718                     	;# 
  6463  0719                     	;# 
  6464  0891                     	;# 
  6465  0891                     	;# 
  6466  0891                     	;# 
  6467  0891                     	;# 
  6468  0891                     	;# 
  6469  0891                     	;# 
  6470  0892                     	;# 
  6471  0892                     	;# 
  6472  0892                     	;# 
  6473  0893                     	;# 
  6474  0893                     	;# 
  6475  0893                     	;# 
  6476  0893                     	;# 
  6477  0893                     	;# 
  6478  0893                     	;# 
  6479  0894                     	;# 
  6480  0894                     	;# 
  6481  0894                     	;# 
  6482  0895                     	;# 
  6483  0895                     	;# 
  6484  0895                     	;# 
  6485  0896                     	;# 
  6486  0896                     	;# 
  6487  0896                     	;# 
  6488  089B                     	;# 
  6489  0911                     	;# 
  6490  0912                     	;# 
  6491  0913                     	;# 
  6492  0914                     	;# 
  6493  0915                     	;# 
  6494  0916                     	;# 
  6495  0918                     	;# 
  6496  0919                     	;# 
  6497  091A                     	;# 
  6498  091B                     	;# 
  6499  091C                     	;# 
  6500  091D                     	;# 
  6501  091E                     	;# 
  6502  091F                     	;# 
  6503  0E0F                     	;# 
  6504  0E10                     	;# 
  6505  0E11                     	;# 
  6506  0E12                     	;# 
  6507  0E13                     	;# 
  6508  0E14                     	;# 
  6509  0E15                     	;# 
  6510  0E16                     	;# 
  6511  0E17                     	;# 
  6512  0E18                     	;# 
  6513  0E19                     	;# 
  6514  0E1A                     	;# 
  6515  0E1B                     	;# 
  6516  0E1C                     	;# 
  6517  0E1D                     	;# 
  6518  0E1E                     	;# 
  6519  0E1F                     	;# 
  6520  0E20                     	;# 
  6521  0E21                     	;# 
  6522  0E22                     	;# 
  6523  0E24                     	;# 
  6524  0E25                     	;# 
  6525  0E28                     	;# 
  6526  0E29                     	;# 
  6527  0E2A                     	;# 
  6528  0E2B                     	;# 
  6529  0E2C                     	;# 
  6530  0E2D                     	;# 
  6531  0E2E                     	;# 
  6532  0E2F                     	;# 
  6533  0E90                     	;# 
  6534  0E91                     	;# 
  6535  0E92                     	;# 
  6536  0E94                     	;# 
  6537  0E95                     	;# 
  6538  0E9C                     	;# 
  6539  0E9D                     	;# 
  6540  0E9E                     	;# 
  6541  0E9F                     	;# 
  6542  0EA0                     	;# 
  6543  0EA1                     	;# 
  6544  0EA2                     	;# 
  6545  0EA3                     	;# 
  6546  0EA4                     	;# 
  6547  0EA5                     	;# 
  6548  0EA6                     	;# 
  6549  0EA7                     	;# 
  6550  0F0F                     	;# 
  6551  0F10                     	;# 
  6552  0F11                     	;# 
  6553  0F12                     	;# 
  6554  0F13                     	;# 
  6555  0F14                     	;# 
  6556  0F15                     	;# 
  6557  0F16                     	;# 
  6558  0F17                     	;# 
  6559  0F18                     	;# 
  6560  0F19                     	;# 
  6561  0F1A                     	;# 
  6562  0F1B                     	;# 
  6563  0F1C                     	;# 
  6564  0F1D                     	;# 
  6565  0F1E                     	;# 
  6566  0F1F                     	;# 
  6567  0F20                     	;# 
  6568  0F21                     	;# 
  6569  0F22                     	;# 
  6570  0F23                     	;# 
  6571  0F24                     	;# 
  6572  0F25                     	;# 
  6573  0F26                     	;# 
  6574  0F27                     	;# 
  6575  0F28                     	;# 
  6576  0F29                     	;# 
  6577  0F2A                     	;# 
  6578  0F2B                     	;# 
  6579  0F2C                     	;# 
  6580  0F2D                     	;# 
  6581  0F2E                     	;# 
  6582  0F2F                     	;# 
  6583  0F30                     	;# 
  6584  0F31                     	;# 
  6585  0F32                     	;# 
  6586  0F33                     	;# 
  6587  0F34                     	;# 
  6588  0F35                     	;# 
  6589  0F36                     	;# 
  6590  0F37                     	;# 
  6591  0FE4                     	;# 
  6592  0FE5                     	;# 
  6593  0FE6                     	;# 
  6594  0FE7                     	;# 
  6595  0FE8                     	;# 
  6596  0FE9                     	;# 
  6597  0FEA                     	;# 
  6598  0FEB                     	;# 
  6599  0FED                     	;# 
  6600  0FEE                     	;# 
  6601  0FEF                     	;# 
  6602  0000                     	;# 
  6603  0001                     	;# 
  6604  0002                     	;# 
  6605  0003                     	;# 
  6606  0004                     	;# 
  6607  0005                     	;# 
  6608  0006                     	;# 
  6609  0007                     	;# 
  6610  0008                     	;# 
  6611  0009                     	;# 
  6612  000A                     	;# 
  6613  000B                     	;# 
  6614  000C                     	;# 
  6615  000D                     	;# 
  6616  000E                     	;# 
  6617  0010                     	;# 
  6618  0011                     	;# 
  6619  0012                     	;# 
  6620  0013                     	;# 
  6621  0014                     	;# 
  6622  0015                     	;# 
  6623  0015                     	;# 
  6624  0016                     	;# 
  6625  0016                     	;# 
  6626  0017                     	;# 
  6627  0018                     	;# 
  6628  0019                     	;# 
  6629  0019                     	;# 
  6630  001A                     	;# 
  6631  001B                     	;# 
  6632  001C                     	;# 
  6633  001D                     	;# 
  6634  001E                     	;# 
  6635  001F                     	;# 
  6636  008C                     	;# 
  6637  008D                     	;# 
  6638  008E                     	;# 
  6639  0090                     	;# 
  6640  0091                     	;# 
  6641  0092                     	;# 
  6642  0093                     	;# 
  6643  0094                     	;# 
  6644  0097                     	;# 
  6645  009B                     	;# 
  6646  009B                     	;# 
  6647  009C                     	;# 
  6648  009D                     	;# 
  6649  009E                     	;# 
  6650  009F                     	;# 
  6651  010C                     	;# 
  6652  010D                     	;# 
  6653  010E                     	;# 
  6654  0111                     	;# 
  6655  0112                     	;# 
  6656  0113                     	;# 
  6657  0114                     	;# 
  6658  0115                     	;# 
  6659  0116                     	;# 
  6660  0117                     	;# 
  6661  0118                     	;# 
  6662  0119                     	;# 
  6663  018C                     	;# 
  6664  018D                     	;# 
  6665  018E                     	;# 
  6666  0199                     	;# 
  6667  0199                     	;# 
  6668  0199                     	;# 
  6669  019A                     	;# 
  6670  019A                     	;# 
  6671  019A                     	;# 
  6672  019B                     	;# 
  6673  019B                     	;# 
  6674  019B                     	;# 
  6675  019B                     	;# 
  6676  019B                     	;# 
  6677  019C                     	;# 
  6678  019C                     	;# 
  6679  019C                     	;# 
  6680  019D                     	;# 
  6681  019D                     	;# 
  6682  019D                     	;# 
  6683  019E                     	;# 
  6684  019E                     	;# 
  6685  019E                     	;# 
  6686  019F                     	;# 
  6687  019F                     	;# 
  6688  019F                     	;# 
  6689  019F                     	;# 
  6690  019F                     	;# 
  6691  020C                     	;# 
  6692  020D                     	;# 
  6693  020E                     	;# 
  6694  0211                     	;# 
  6695  0211                     	;# 
  6696  0212                     	;# 
  6697  0212                     	;# 
  6698  0213                     	;# 
  6699  0213                     	;# 
  6700  0214                     	;# 
  6701  0214                     	;# 
  6702  0215                     	;# 
  6703  0215                     	;# 
  6704  0215                     	;# 
  6705  0215                     	;# 
  6706  0216                     	;# 
  6707  0216                     	;# 
  6708  0217                     	;# 
  6709  0217                     	;# 
  6710  0219                     	;# 
  6711  021A                     	;# 
  6712  021B                     	;# 
  6713  021C                     	;# 
  6714  021D                     	;# 
  6715  021D                     	;# 
  6716  021E                     	;# 
  6717  021F                     	;# 
  6718  028C                     	;# 
  6719  028D                     	;# 
  6720  028E                     	;# 
  6721  0291                     	;# 
  6722  0291                     	;# 
  6723  0292                     	;# 
  6724  0293                     	;# 
  6725  0294                     	;# 
  6726  0295                     	;# 
  6727  0295                     	;# 
  6728  0296                     	;# 
  6729  0297                     	;# 
  6730  0298                     	;# 
  6731  029F                     	;# 
  6732  030C                     	;# 
  6733  030D                     	;# 
  6734  030E                     	;# 
  6735  0311                     	;# 
  6736  0311                     	;# 
  6737  0312                     	;# 
  6738  0313                     	;# 
  6739  0314                     	;# 
  6740  0315                     	;# 
  6741  0315                     	;# 
  6742  0316                     	;# 
  6743  0317                     	;# 
  6744  0318                     	;# 
  6745  038C                     	;# 
  6746  038D                     	;# 
  6747  038E                     	;# 
  6748  0391                     	;# 
  6749  0392                     	;# 
  6750  0393                     	;# 
  6751  0394                     	;# 
  6752  0395                     	;# 
  6753  0396                     	;# 
  6754  0397                     	;# 
  6755  0398                     	;# 
  6756  0399                     	;# 
  6757  039A                     	;# 
  6758  039C                     	;# 
  6759  039D                     	;# 
  6760  039E                     	;# 
  6761  039F                     	;# 
  6762  0411                     	;# 
  6763  0411                     	;# 
  6764  0412                     	;# 
  6765  0413                     	;# 
  6766  0414                     	;# 
  6767  0415                     	;# 
  6768  0416                     	;# 
  6769  0417                     	;# 
  6770  0418                     	;# 
  6771  0418                     	;# 
  6772  0419                     	;# 
  6773  041A                     	;# 
  6774  041B                     	;# 
  6775  041C                     	;# 
  6776  041D                     	;# 
  6777  041E                     	;# 
  6778  041F                     	;# 
  6779  0498                     	;# 
  6780  0498                     	;# 
  6781  0499                     	;# 
  6782  049A                     	;# 
  6783  049B                     	;# 
  6784  049B                     	;# 
  6785  049C                     	;# 
  6786  049D                     	;# 
  6787  049E                     	;# 
  6788  049F                     	;# 
  6789  0617                     	;# 
  6790  0618                     	;# 
  6791  0619                     	;# 
  6792  0619                     	;# 
  6793  061A                     	;# 
  6794  061B                     	;# 
  6795  061C                     	;# 
  6796  061C                     	;# 
  6797  061F                     	;# 
  6798  0691                     	;# 
  6799  0692                     	;# 
  6800  0693                     	;# 
  6801  0694                     	;# 
  6802  0695                     	;# 
  6803  0696                     	;# 
  6804  0697                     	;# 
  6805  0698                     	;# 
  6806  0699                     	;# 
  6807  0711                     	;# 
  6808  0712                     	;# 
  6809  0713                     	;# 
  6810  0714                     	;# 
  6811  0715                     	;# 
  6812  0716                     	;# 
  6813  0717                     	;# 
  6814  0718                     	;# 
  6815  0719                     	;# 
  6816  0891                     	;# 
  6817  0891                     	;# 
  6818  0891                     	;# 
  6819  0891                     	;# 
  6820  0891                     	;# 
  6821  0891                     	;# 
  6822  0892                     	;# 
  6823  0892                     	;# 
  6824  0892                     	;# 
  6825  0893                     	;# 
  6826  0893                     	;# 
  6827  0893                     	;# 
  6828  0893                     	;# 
  6829  0893                     	;# 
  6830  0893                     	;# 
  6831  0894                     	;# 
  6832  0894                     	;# 
  6833  0894                     	;# 
  6834  0895                     	;# 
  6835  0895                     	;# 
  6836  0895                     	;# 
  6837  0896                     	;# 
  6838  0896                     	;# 
  6839  0896                     	;# 
  6840  089B                     	;# 
  6841  0911                     	;# 
  6842  0912                     	;# 
  6843  0913                     	;# 
  6844  0914                     	;# 
  6845  0915                     	;# 
  6846  0916                     	;# 
  6847  0918                     	;# 
  6848  0919                     	;# 
  6849  091A                     	;# 
  6850  091B                     	;# 
  6851  091C                     	;# 
  6852  091D                     	;# 
  6853  091E                     	;# 
  6854  091F                     	;# 
  6855  0E0F                     	;# 
  6856  0E10                     	;# 
  6857  0E11                     	;# 
  6858  0E12                     	;# 
  6859  0E13                     	;# 
  6860  0E14                     	;# 
  6861  0E15                     	;# 
  6862  0E16                     	;# 
  6863  0E17                     	;# 
  6864  0E18                     	;# 
  6865  0E19                     	;# 
  6866  0E1A                     	;# 
  6867  0E1B                     	;# 
  6868  0E1C                     	;# 
  6869  0E1D                     	;# 
  6870  0E1E                     	;# 
  6871  0E1F                     	;# 
  6872  0E20                     	;# 
  6873  0E21                     	;# 
  6874  0E22                     	;# 
  6875  0E24                     	;# 
  6876  0E25                     	;# 
  6877  0E28                     	;# 
  6878  0E29                     	;# 
  6879  0E2A                     	;# 
  6880  0E2B                     	;# 
  6881  0E2C                     	;# 
  6882  0E2D                     	;# 
  6883  0E2E                     	;# 
  6884  0E2F                     	;# 
  6885  0E90                     	;# 
  6886  0E91                     	;# 
  6887  0E92                     	;# 
  6888  0E94                     	;# 
  6889  0E95                     	;# 
  6890  0E9C                     	;# 
  6891  0E9D                     	;# 
  6892  0E9E                     	;# 
  6893  0E9F                     	;# 
  6894  0EA0                     	;# 
  6895  0EA1                     	;# 
  6896  0EA2                     	;# 
  6897  0EA3                     	;# 
  6898  0EA4                     	;# 
  6899  0EA5                     	;# 
  6900  0EA6                     	;# 
  6901  0EA7                     	;# 
  6902  0F0F                     	;# 
  6903  0F10                     	;# 
  6904  0F11                     	;# 
  6905  0F12                     	;# 
  6906  0F13                     	;# 
  6907  0F14                     	;# 
  6908  0F15                     	;# 
  6909  0F16                     	;# 
  6910  0F17                     	;# 
  6911  0F18                     	;# 
  6912  0F19                     	;# 
  6913  0F1A                     	;# 
  6914  0F1B                     	;# 
  6915  0F1C                     	;# 
  6916  0F1D                     	;# 
  6917  0F1E                     	;# 
  6918  0F1F                     	;# 
  6919  0F20                     	;# 
  6920  0F21                     	;# 
  6921  0F22                     	;# 
  6922  0F23                     	;# 
  6923  0F24                     	;# 
  6924  0F25                     	;# 
  6925  0F26                     	;# 
  6926  0F27                     	;# 
  6927  0F28                     	;# 
  6928  0F29                     	;# 
  6929  0F2A                     	;# 
  6930  0F2B                     	;# 
  6931  0F2C                     	;# 
  6932  0F2D                     	;# 
  6933  0F2E                     	;# 
  6934  0F2F                     	;# 
  6935  0F30                     	;# 
  6936  0F31                     	;# 
  6937  0F32                     	;# 
  6938  0F33                     	;# 
  6939  0F34                     	;# 
  6940  0F35                     	;# 
  6941  0F36                     	;# 
  6942  0F37                     	;# 
  6943  0FE4                     	;# 
  6944  0FE5                     	;# 
  6945  0FE6                     	;# 
  6946  0FE7                     	;# 
  6947  0FE8                     	;# 
  6948  0FE9                     	;# 
  6949  0FEA                     	;# 
  6950  0FEB                     	;# 
  6951  0FED                     	;# 
  6952  0FEE                     	;# 
  6953  0FEF                     	;# 
  6954  0000                     	;# 
  6955  0001                     	;# 
  6956  0002                     	;# 
  6957  0003                     	;# 
  6958  0004                     	;# 
  6959  0005                     	;# 
  6960  0006                     	;# 
  6961  0007                     	;# 
  6962  0008                     	;# 
  6963  0009                     	;# 
  6964  000A                     	;# 
  6965  000B                     	;# 
  6966  000C                     	;# 
  6967  000D                     	;# 
  6968  000E                     	;# 
  6969  0010                     	;# 
  6970  0011                     	;# 
  6971  0012                     	;# 
  6972  0013                     	;# 
  6973  0014                     	;# 
  6974  0015                     	;# 
  6975  0015                     	;# 
  6976  0016                     	;# 
  6977  0016                     	;# 
  6978  0017                     	;# 
  6979  0018                     	;# 
  6980  0019                     	;# 
  6981  0019                     	;# 
  6982  001A                     	;# 
  6983  001B                     	;# 
  6984  001C                     	;# 
  6985  001D                     	;# 
  6986  001E                     	;# 
  6987  001F                     	;# 
  6988  008C                     	;# 
  6989  008D                     	;# 
  6990  008E                     	;# 
  6991  0090                     	;# 
  6992  0091                     	;# 
  6993  0092                     	;# 
  6994  0093                     	;# 
  6995  0094                     	;# 
  6996  0097                     	;# 
  6997  009B                     	;# 
  6998  009B                     	;# 
  6999  009C                     	;# 
  7000  009D                     	;# 
  7001  009E                     	;# 
  7002  009F                     	;# 
  7003  010C                     	;# 
  7004  010D                     	;# 
  7005  010E                     	;# 
  7006  0111                     	;# 
  7007  0112                     	;# 
  7008  0113                     	;# 
  7009  0114                     	;# 
  7010  0115                     	;# 
  7011  0116                     	;# 
  7012  0117                     	;# 
  7013  0118                     	;# 
  7014  0119                     	;# 
  7015  018C                     	;# 
  7016  018D                     	;# 
  7017  018E                     	;# 
  7018  0199                     	;# 
  7019  0199                     	;# 
  7020  0199                     	;# 
  7021  019A                     	;# 
  7022  019A                     	;# 
  7023  019A                     	;# 
  7024  019B                     	;# 
  7025  019B                     	;# 
  7026  019B                     	;# 
  7027  019B                     	;# 
  7028  019B                     	;# 
  7029  019C                     	;# 
  7030  019C                     	;# 
  7031  019C                     	;# 
  7032  019D                     	;# 
  7033  019D                     	;# 
  7034  019D                     	;# 
  7035  019E                     	;# 
  7036  019E                     	;# 
  7037  019E                     	;# 
  7038  019F                     	;# 
  7039  019F                     	;# 
  7040  019F                     	;# 
  7041  019F                     	;# 
  7042  019F                     	;# 
  7043  020C                     	;# 
  7044  020D                     	;# 
  7045  020E                     	;# 
  7046  0211                     	;# 
  7047  0211                     	;# 
  7048  0212                     	;# 
  7049  0212                     	;# 
  7050  0213                     	;# 
  7051  0213                     	;# 
  7052  0214                     	;# 
  7053  0214                     	;# 
  7054  0215                     	;# 
  7055  0215                     	;# 
  7056  0215                     	;# 
  7057  0215                     	;# 
  7058  0216                     	;# 
  7059  0216                     	;# 
  7060  0217                     	;# 
  7061  0217                     	;# 
  7062  0219                     	;# 
  7063  021A                     	;# 
  7064  021B                     	;# 
  7065  021C                     	;# 
  7066  021D                     	;# 
  7067  021D                     	;# 
  7068  021E                     	;# 
  7069  021F                     	;# 
  7070  028C                     	;# 
  7071  028D                     	;# 
  7072  028E                     	;# 
  7073  0291                     	;# 
  7074  0291                     	;# 
  7075  0292                     	;# 
  7076  0293                     	;# 
  7077  0294                     	;# 
  7078  0295                     	;# 
  7079  0295                     	;# 
  7080  0296                     	;# 
  7081  0297                     	;# 
  7082  0298                     	;# 
  7083  029F                     	;# 
  7084  030C                     	;# 
  7085  030D                     	;# 
  7086  030E                     	;# 
  7087  0311                     	;# 
  7088  0311                     	;# 
  7089  0312                     	;# 
  7090  0313                     	;# 
  7091  0314                     	;# 
  7092  0315                     	;# 
  7093  0315                     	;# 
  7094  0316                     	;# 
  7095  0317                     	;# 
  7096  0318                     	;# 
  7097  038C                     	;# 
  7098  038D                     	;# 
  7099  038E                     	;# 
  7100  0391                     	;# 
  7101  0392                     	;# 
  7102  0393                     	;# 
  7103  0394                     	;# 
  7104  0395                     	;# 
  7105  0396                     	;# 
  7106  0397                     	;# 
  7107  0398                     	;# 
  7108  0399                     	;# 
  7109  039A                     	;# 
  7110  039C                     	;# 
  7111  039D                     	;# 
  7112  039E                     	;# 
  7113  039F                     	;# 
  7114  0411                     	;# 
  7115  0411                     	;# 
  7116  0412                     	;# 
  7117  0413                     	;# 
  7118  0414                     	;# 
  7119  0415                     	;# 
  7120  0416                     	;# 
  7121  0417                     	;# 
  7122  0418                     	;# 
  7123  0418                     	;# 
  7124  0419                     	;# 
  7125  041A                     	;# 
  7126  041B                     	;# 
  7127  041C                     	;# 
  7128  041D                     	;# 
  7129  041E                     	;# 
  7130  041F                     	;# 
  7131  0498                     	;# 
  7132  0498                     	;# 
  7133  0499                     	;# 
  7134  049A                     	;# 
  7135  049B                     	;# 
  7136  049B                     	;# 
  7137  049C                     	;# 
  7138  049D                     	;# 
  7139  049E                     	;# 
  7140  049F                     	;# 
  7141  0617                     	;# 
  7142  0618                     	;# 
  7143  0619                     	;# 
  7144  0619                     	;# 
  7145  061A                     	;# 
  7146  061B                     	;# 
  7147  061C                     	;# 
  7148  061C                     	;# 
  7149  061F                     	;# 
  7150  0691                     	;# 
  7151  0692                     	;# 
  7152  0693                     	;# 
  7153  0694                     	;# 
  7154  0695                     	;# 
  7155  0696                     	;# 
  7156  0697                     	;# 
  7157  0698                     	;# 
  7158  0699                     	;# 
  7159  0711                     	;# 
  7160  0712                     	;# 
  7161  0713                     	;# 
  7162  0714                     	;# 
  7163  0715                     	;# 
  7164  0716                     	;# 
  7165  0717                     	;# 
  7166  0718                     	;# 
  7167  0719                     	;# 
  7168  0891                     	;# 
  7169  0891                     	;# 
  7170  0891                     	;# 
  7171  0891                     	;# 
  7172  0891                     	;# 
  7173  0891                     	;# 
  7174  0892                     	;# 
  7175  0892                     	;# 
  7176  0892                     	;# 
  7177  0893                     	;# 
  7178  0893                     	;# 
  7179  0893                     	;# 
  7180  0893                     	;# 
  7181  0893                     	;# 
  7182  0893                     	;# 
  7183  0894                     	;# 
  7184  0894                     	;# 
  7185  0894                     	;# 
  7186  0895                     	;# 
  7187  0895                     	;# 
  7188  0895                     	;# 
  7189  0896                     	;# 
  7190  0896                     	;# 
  7191  0896                     	;# 
  7192  089B                     	;# 
  7193  0911                     	;# 
  7194  0912                     	;# 
  7195  0913                     	;# 
  7196  0914                     	;# 
  7197  0915                     	;# 
  7198  0916                     	;# 
  7199  0918                     	;# 
  7200  0919                     	;# 
  7201  091A                     	;# 
  7202  091B                     	;# 
  7203  091C                     	;# 
  7204  091D                     	;# 
  7205  091E                     	;# 
  7206  091F                     	;# 
  7207  0E0F                     	;# 
  7208  0E10                     	;# 
  7209  0E11                     	;# 
  7210  0E12                     	;# 
  7211  0E13                     	;# 
  7212  0E14                     	;# 
  7213  0E15                     	;# 
  7214  0E16                     	;# 
  7215  0E17                     	;# 
  7216  0E18                     	;# 
  7217  0E19                     	;# 
  7218  0E1A                     	;# 
  7219  0E1B                     	;# 
  7220  0E1C                     	;# 
  7221  0E1D                     	;# 
  7222  0E1E                     	;# 
  7223  0E1F                     	;# 
  7224  0E20                     	;# 
  7225  0E21                     	;# 
  7226  0E22                     	;# 
  7227  0E24                     	;# 
  7228  0E25                     	;# 
  7229  0E28                     	;# 
  7230  0E29                     	;# 
  7231  0E2A                     	;# 
  7232  0E2B                     	;# 
  7233  0E2C                     	;# 
  7234  0E2D                     	;# 
  7235  0E2E                     	;# 
  7236  0E2F                     	;# 
  7237  0E90                     	;# 
  7238  0E91                     	;# 
  7239  0E92                     	;# 
  7240  0E94                     	;# 
  7241  0E95                     	;# 
  7242  0E9C                     	;# 
  7243  0E9D                     	;# 
  7244  0E9E                     	;# 
  7245  0E9F                     	;# 
  7246  0EA0                     	;# 
  7247  0EA1                     	;# 
  7248  0EA2                     	;# 
  7249  0EA3                     	;# 
  7250  0EA4                     	;# 
  7251  0EA5                     	;# 
  7252  0EA6                     	;# 
  7253  0EA7                     	;# 
  7254  0F0F                     	;# 
  7255  0F10                     	;# 
  7256  0F11                     	;# 
  7257  0F12                     	;# 
  7258  0F13                     	;# 
  7259  0F14                     	;# 
  7260  0F15                     	;# 
  7261  0F16                     	;# 
  7262  0F17                     	;# 
  7263  0F18                     	;# 
  7264  0F19                     	;# 
  7265  0F1A                     	;# 
  7266  0F1B                     	;# 
  7267  0F1C                     	;# 
  7268  0F1D                     	;# 
  7269  0F1E                     	;# 
  7270  0F1F                     	;# 
  7271  0F20                     	;# 
  7272  0F21                     	;# 
  7273  0F22                     	;# 
  7274  0F23                     	;# 
  7275  0F24                     	;# 
  7276  0F25                     	;# 
  7277  0F26                     	;# 
  7278  0F27                     	;# 
  7279  0F28                     	;# 
  7280  0F29                     	;# 
  7281  0F2A                     	;# 
  7282  0F2B                     	;# 
  7283  0F2C                     	;# 
  7284  0F2D                     	;# 
  7285  0F2E                     	;# 
  7286  0F2F                     	;# 
  7287  0F30                     	;# 
  7288  0F31                     	;# 
  7289  0F32                     	;# 
  7290  0F33                     	;# 
  7291  0F34                     	;# 
  7292  0F35                     	;# 
  7293  0F36                     	;# 
  7294  0F37                     	;# 
  7295  0FE4                     	;# 
  7296  0FE5                     	;# 
  7297  0FE6                     	;# 
  7298  0FE7                     	;# 
  7299  0FE8                     	;# 
  7300  0FE9                     	;# 
  7301  0FEA                     	;# 
  7302  0FEB                     	;# 
  7303  0FED                     	;# 
  7304  0FEE                     	;# 
  7305  0FEF                     	;# 
  7306  0000                     	;# 
  7307  0001                     	;# 
  7308  0002                     	;# 
  7309  0003                     	;# 
  7310  0004                     	;# 
  7311  0005                     	;# 
  7312  0006                     	;# 
  7313  0007                     	;# 
  7314  0008                     	;# 
  7315  0009                     	;# 
  7316  000A                     	;# 
  7317  000B                     	;# 
  7318  000C                     	;# 
  7319  000D                     	;# 
  7320  000E                     	;# 
  7321  0010                     	;# 
  7322  0011                     	;# 
  7323  0012                     	;# 
  7324  0013                     	;# 
  7325  0014                     	;# 
  7326  0015                     	;# 
  7327  0015                     	;# 
  7328  0016                     	;# 
  7329  0016                     	;# 
  7330  0017                     	;# 
  7331  0018                     	;# 
  7332  0019                     	;# 
  7333  0019                     	;# 
  7334  001A                     	;# 
  7335  001B                     	;# 
  7336  001C                     	;# 
  7337  001D                     	;# 
  7338  001E                     	;# 
  7339  001F                     	;# 
  7340  008C                     	;# 
  7341  008D                     	;# 
  7342  008E                     	;# 
  7343  0090                     	;# 
  7344  0091                     	;# 
  7345  0092                     	;# 
  7346  0093                     	;# 
  7347  0094                     	;# 
  7348  0097                     	;# 
  7349  009B                     	;# 
  7350  009B                     	;# 
  7351  009C                     	;# 
  7352  009D                     	;# 
  7353  009E                     	;# 
  7354  009F                     	;# 
  7355  010C                     	;# 
  7356  010D                     	;# 
  7357  010E                     	;# 
  7358  0111                     	;# 
  7359  0112                     	;# 
  7360  0113                     	;# 
  7361  0114                     	;# 
  7362  0115                     	;# 
  7363  0116                     	;# 
  7364  0117                     	;# 
  7365  0118                     	;# 
  7366  0119                     	;# 
  7367  018C                     	;# 
  7368  018D                     	;# 
  7369  018E                     	;# 
  7370  0199                     	;# 
  7371  0199                     	;# 
  7372  0199                     	;# 
  7373  019A                     	;# 
  7374  019A                     	;# 
  7375  019A                     	;# 
  7376  019B                     	;# 
  7377  019B                     	;# 
  7378  019B                     	;# 
  7379  019B                     	;# 
  7380  019B                     	;# 
  7381  019C                     	;# 
  7382  019C                     	;# 
  7383  019C                     	;# 
  7384  019D                     	;# 
  7385  019D                     	;# 
  7386  019D                     	;# 
  7387  019E                     	;# 
  7388  019E                     	;# 
  7389  019E                     	;# 
  7390  019F                     	;# 
  7391  019F                     	;# 
  7392  019F                     	;# 
  7393  019F                     	;# 
  7394  019F                     	;# 
  7395  020C                     	;# 
  7396  020D                     	;# 
  7397  020E                     	;# 
  7398  0211                     	;# 
  7399  0211                     	;# 
  7400  0212                     	;# 
  7401  0212                     	;# 
  7402  0213                     	;# 
  7403  0213                     	;# 
  7404  0214                     	;# 
  7405  0214                     	;# 
  7406  0215                     	;# 
  7407  0215                     	;# 
  7408  0215                     	;# 
  7409  0215                     	;# 
  7410  0216                     	;# 
  7411  0216                     	;# 
  7412  0217                     	;# 
  7413  0217                     	;# 
  7414  0219                     	;# 
  7415  021A                     	;# 
  7416  021B                     	;# 
  7417  021C                     	;# 
  7418  021D                     	;# 
  7419  021D                     	;# 
  7420  021E                     	;# 
  7421  021F                     	;# 
  7422  028C                     	;# 
  7423  028D                     	;# 
  7424  028E                     	;# 
  7425  0291                     	;# 
  7426  0291                     	;# 
  7427  0292                     	;# 
  7428  0293                     	;# 
  7429  0294                     	;# 
  7430  0295                     	;# 
  7431  0295                     	;# 
  7432  0296                     	;# 
  7433  0297                     	;# 
  7434  0298                     	;# 
  7435  029F                     	;# 
  7436  030C                     	;# 
  7437  030D                     	;# 
  7438  030E                     	;# 
  7439  0311                     	;# 
  7440  0311                     	;# 
  7441  0312                     	;# 
  7442  0313                     	;# 
  7443  0314                     	;# 
  7444  0315                     	;# 
  7445  0315                     	;# 
  7446  0316                     	;# 
  7447  0317                     	;# 
  7448  0318                     	;# 
  7449  038C                     	;# 
  7450  038D                     	;# 
  7451  038E                     	;# 
  7452  0391                     	;# 
  7453  0392                     	;# 
  7454  0393                     	;# 
  7455  0394                     	;# 
  7456  0395                     	;# 
  7457  0396                     	;# 
  7458  0397                     	;# 
  7459  0398                     	;# 
  7460  0399                     	;# 
  7461  039A                     	;# 
  7462  039C                     	;# 
  7463  039D                     	;# 
  7464  039E                     	;# 
  7465  039F                     	;# 
  7466  0411                     	;# 
  7467  0411                     	;# 
  7468  0412                     	;# 
  7469  0413                     	;# 
  7470  0414                     	;# 
  7471  0415                     	;# 
  7472  0416                     	;# 
  7473  0417                     	;# 
  7474  0418                     	;# 
  7475  0418                     	;# 
  7476  0419                     	;# 
  7477  041A                     	;# 
  7478  041B                     	;# 
  7479  041C                     	;# 
  7480  041D                     	;# 
  7481  041E                     	;# 
  7482  041F                     	;# 
  7483  0498                     	;# 
  7484  0498                     	;# 
  7485  0499                     	;# 
  7486  049A                     	;# 
  7487  049B                     	;# 
  7488  049B                     	;# 
  7489  049C                     	;# 
  7490  049D                     	;# 
  7491  049E                     	;# 
  7492  049F                     	;# 
  7493  0617                     	;# 
  7494  0618                     	;# 
  7495  0619                     	;# 
  7496  0619                     	;# 
  7497  061A                     	;# 
  7498  061B                     	;# 
  7499  061C                     	;# 
  7500  061C                     	;# 
  7501  061F                     	;# 
  7502  0691                     	;# 
  7503  0692                     	;# 
  7504  0693                     	;# 
  7505  0694                     	;# 
  7506  0695                     	;# 
  7507  0696                     	;# 
  7508  0697                     	;# 
  7509  0698                     	;# 
  7510  0699                     	;# 
  7511  0711                     	;# 
  7512  0712                     	;# 
  7513  0713                     	;# 
  7514  0714                     	;# 
  7515  0715                     	;# 
  7516  0716                     	;# 
  7517  0717                     	;# 
  7518  0718                     	;# 
  7519  0719                     	;# 
  7520  0891                     	;# 
  7521  0891                     	;# 
  7522  0891                     	;# 
  7523  0891                     	;# 
  7524  0891                     	;# 
  7525  0891                     	;# 
  7526  0892                     	;# 
  7527  0892                     	;# 
  7528  0892                     	;# 
  7529  0893                     	;# 
  7530  0893                     	;# 
  7531  0893                     	;# 
  7532  0893                     	;# 
  7533  0893                     	;# 
  7534  0893                     	;# 
  7535  0894                     	;# 
  7536  0894                     	;# 
  7537  0894                     	;# 
  7538  0895                     	;# 
  7539  0895                     	;# 
  7540  0895                     	;# 
  7541  0896                     	;# 
  7542  0896                     	;# 
  7543  0896                     	;# 
  7544  089B                     	;# 
  7545  0911                     	;# 
  7546  0912                     	;# 
  7547  0913                     	;# 
  7548  0914                     	;# 
  7549  0915                     	;# 
  7550  0916                     	;# 
  7551  0918                     	;# 
  7552  0919                     	;# 
  7553  091A                     	;# 
  7554  091B                     	;# 
  7555  091C                     	;# 
  7556  091D                     	;# 
  7557  091E                     	;# 
  7558  091F                     	;# 
  7559  0E0F                     	;# 
  7560  0E10                     	;# 
  7561  0E11                     	;# 
  7562  0E12                     	;# 
  7563  0E13                     	;# 
  7564  0E14                     	;# 
  7565  0E15                     	;# 
  7566  0E16                     	;# 
  7567  0E17                     	;# 
  7568  0E18                     	;# 
  7569  0E19                     	;# 
  7570  0E1A                     	;# 
  7571  0E1B                     	;# 
  7572  0E1C                     	;# 
  7573  0E1D                     	;# 
  7574  0E1E                     	;# 
  7575  0E1F                     	;# 
  7576  0E20                     	;# 
  7577  0E21                     	;# 
  7578  0E22                     	;# 
  7579  0E24                     	;# 
  7580  0E25                     	;# 
  7581  0E28                     	;# 
  7582  0E29                     	;# 
  7583  0E2A                     	;# 
  7584  0E2B                     	;# 
  7585  0E2C                     	;# 
  7586  0E2D                     	;# 
  7587  0E2E                     	;# 
  7588  0E2F                     	;# 
  7589  0E90                     	;# 
  7590  0E91                     	;# 
  7591  0E92                     	;# 
  7592  0E94                     	;# 
  7593  0E95                     	;# 
  7594  0E9C                     	;# 
  7595  0E9D                     	;# 
  7596  0E9E                     	;# 
  7597  0E9F                     	;# 
  7598  0EA0                     	;# 
  7599  0EA1                     	;# 
  7600  0EA2                     	;# 
  7601  0EA3                     	;# 
  7602  0EA4                     	;# 
  7603  0EA5                     	;# 
  7604  0EA6                     	;# 
  7605  0EA7                     	;# 
  7606  0F0F                     	;# 
  7607  0F10                     	;# 
  7608  0F11                     	;# 
  7609  0F12                     	;# 
  7610  0F13                     	;# 
  7611  0F14                     	;# 
  7612  0F15                     	;# 
  7613  0F16                     	;# 
  7614  0F17                     	;# 
  7615  0F18                     	;# 
  7616  0F19                     	;# 
  7617  0F1A                     	;# 
  7618  0F1B                     	;# 
  7619  0F1C                     	;# 
  7620  0F1D                     	;# 
  7621  0F1E                     	;# 
  7622  0F1F                     	;# 
  7623  0F20                     	;# 
  7624  0F21                     	;# 
  7625  0F22                     	;# 
  7626  0F23                     	;# 
  7627  0F24                     	;# 
  7628  0F25                     	;# 
  7629  0F26                     	;# 
  7630  0F27                     	;# 
  7631  0F28                     	;# 
  7632  0F29                     	;# 
  7633  0F2A                     	;# 
  7634  0F2B                     	;# 
  7635  0F2C                     	;# 
  7636  0F2D                     	;# 
  7637  0F2E                     	;# 
  7638  0F2F                     	;# 
  7639  0F30                     	;# 
  7640  0F31                     	;# 
  7641  0F32                     	;# 
  7642  0F33                     	;# 
  7643  0F34                     	;# 
  7644  0F35                     	;# 
  7645  0F36                     	;# 
  7646  0F37                     	;# 
  7647  0FE4                     	;# 
  7648  0FE5                     	;# 
  7649  0FE6                     	;# 
  7650  0FE7                     	;# 
  7651  0FE8                     	;# 
  7652  0FE9                     	;# 
  7653  0FEA                     	;# 
  7654  0FEB                     	;# 
  7655  0FED                     	;# 
  7656  0FEE                     	;# 
  7657  0FEF                     	;# 
  7658  0000                     	;# 
  7659  0001                     	;# 
  7660  0002                     	;# 
  7661  0003                     	;# 
  7662  0004                     	;# 
  7663  0005                     	;# 
  7664  0006                     	;# 
  7665  0007                     	;# 
  7666  0008                     	;# 
  7667  0009                     	;# 
  7668  000A                     	;# 
  7669  000B                     	;# 
  7670  000C                     	;# 
  7671  000D                     	;# 
  7672  000E                     	;# 
  7673  0010                     	;# 
  7674  0011                     	;# 
  7675  0012                     	;# 
  7676  0013                     	;# 
  7677  0014                     	;# 
  7678  0015                     	;# 
  7679  0015                     	;# 
  7680  0016                     	;# 
  7681  0016                     	;# 
  7682  0017                     	;# 
  7683  0018                     	;# 
  7684  0019                     	;# 
  7685  0019                     	;# 
  7686  001A                     	;# 
  7687  001B                     	;# 
  7688  001C                     	;# 
  7689  001D                     	;# 
  7690  001E                     	;# 
  7691  001F                     	;# 
  7692  008C                     	;# 
  7693  008D                     	;# 
  7694  008E                     	;# 
  7695  0090                     	;# 
  7696  0091                     	;# 
  7697  0092                     	;# 
  7698  0093                     	;# 
  7699  0094                     	;# 
  7700  0097                     	;# 
  7701  009B                     	;# 
  7702  009B                     	;# 
  7703  009C                     	;# 
  7704  009D                     	;# 
  7705  009E                     	;# 
  7706  009F                     	;# 
  7707  010C                     	;# 
  7708  010D                     	;# 
  7709  010E                     	;# 
  7710  0111                     	;# 
  7711  0112                     	;# 
  7712  0113                     	;# 
  7713  0114                     	;# 
  7714  0115                     	;# 
  7715  0116                     	;# 
  7716  0117                     	;# 
  7717  0118                     	;# 
  7718  0119                     	;# 
  7719  018C                     	;# 
  7720  018D                     	;# 
  7721  018E                     	;# 
  7722  0199                     	;# 
  7723  0199                     	;# 
  7724  0199                     	;# 
  7725  019A                     	;# 
  7726  019A                     	;# 
  7727  019A                     	;# 
  7728  019B                     	;# 
  7729  019B                     	;# 
  7730  019B                     	;# 
  7731  019B                     	;# 
  7732  019B                     	;# 
  7733  019C                     	;# 
  7734  019C                     	;# 
  7735  019C                     	;# 
  7736  019D                     	;# 
  7737  019D                     	;# 
  7738  019D                     	;# 
  7739  019E                     	;# 
  7740  019E                     	;# 
  7741  019E                     	;# 
  7742  019F                     	;# 
  7743  019F                     	;# 
  7744  019F                     	;# 
  7745  019F                     	;# 
  7746  019F                     	;# 
  7747  020C                     	;# 
  7748  020D                     	;# 
  7749  020E                     	;# 
  7750  0211                     	;# 
  7751  0211                     	;# 
  7752  0212                     	;# 
  7753  0212                     	;# 
  7754  0213                     	;# 
  7755  0213                     	;# 
  7756  0214                     	;# 
  7757  0214                     	;# 
  7758  0215                     	;# 
  7759  0215                     	;# 
  7760  0215                     	;# 
  7761  0215                     	;# 
  7762  0216                     	;# 
  7763  0216                     	;# 
  7764  0217                     	;# 
  7765  0217                     	;# 
  7766  0219                     	;# 
  7767  021A                     	;# 
  7768  021B                     	;# 
  7769  021C                     	;# 
  7770  021D                     	;# 
  7771  021D                     	;# 
  7772  021E                     	;# 
  7773  021F                     	;# 
  7774  028C                     	;# 
  7775  028D                     	;# 
  7776  028E                     	;# 
  7777  0291                     	;# 
  7778  0291                     	;# 
  7779  0292                     	;# 
  7780  0293                     	;# 
  7781  0294                     	;# 
  7782  0295                     	;# 
  7783  0295                     	;# 
  7784  0296                     	;# 
  7785  0297                     	;# 
  7786  0298                     	;# 
  7787  029F                     	;# 
  7788  030C                     	;# 
  7789  030D                     	;# 
  7790  030E                     	;# 
  7791  0311                     	;# 
  7792  0311                     	;# 
  7793  0312                     	;# 
  7794  0313                     	;# 
  7795  0314                     	;# 
  7796  0315                     	;# 
  7797  0315                     	;# 
  7798  0316                     	;# 
  7799  0317                     	;# 
  7800  0318                     	;# 
  7801  038C                     	;# 
  7802  038D                     	;# 
  7803  038E                     	;# 
  7804  0391                     	;# 
  7805  0392                     	;# 
  7806  0393                     	;# 
  7807  0394                     	;# 
  7808  0395                     	;# 
  7809  0396                     	;# 
  7810  0397                     	;# 
  7811  0398                     	;# 
  7812  0399                     	;# 
  7813  039A                     	;# 
  7814  039C                     	;# 
  7815  039D                     	;# 
  7816  039E                     	;# 
  7817  039F                     	;# 
  7818  0411                     	;# 
  7819  0411                     	;# 
  7820  0412                     	;# 
  7821  0413                     	;# 
  7822  0414                     	;# 
  7823  0415                     	;# 
  7824  0416                     	;# 
  7825  0417                     	;# 
  7826  0418                     	;# 
  7827  0418                     	;# 
  7828  0419                     	;# 
  7829  041A                     	;# 
  7830  041B                     	;# 
  7831  041C                     	;# 
  7832  041D                     	;# 
  7833  041E                     	;# 
  7834  041F                     	;# 
  7835  0498                     	;# 
  7836  0498                     	;# 
  7837  0499                     	;# 
  7838  049A                     	;# 
  7839  049B                     	;# 
  7840  049B                     	;# 
  7841  049C                     	;# 
  7842  049D                     	;# 
  7843  049E                     	;# 
  7844  049F                     	;# 
  7845  0617                     	;# 
  7846  0618                     	;# 
  7847  0619                     	;# 
  7848  0619                     	;# 
  7849  061A                     	;# 
  7850  061B                     	;# 
  7851  061C                     	;# 
  7852  061C                     	;# 
  7853  061F                     	;# 
  7854  0691                     	;# 
  7855  0692                     	;# 
  7856  0693                     	;# 
  7857  0694                     	;# 
  7858  0695                     	;# 
  7859  0696                     	;# 
  7860  0697                     	;# 
  7861  0698                     	;# 
  7862  0699                     	;# 
  7863  0711                     	;# 
  7864  0712                     	;# 
  7865  0713                     	;# 
  7866  0714                     	;# 
  7867  0715                     	;# 
  7868  0716                     	;# 
  7869  0717                     	;# 
  7870  0718                     	;# 
  7871  0719                     	;# 
  7872  0891                     	;# 
  7873  0891                     	;# 
  7874  0891                     	;# 
  7875  0891                     	;# 
  7876  0891                     	;# 
  7877  0891                     	;# 
  7878  0892                     	;# 
  7879  0892                     	;# 
  7880  0892                     	;# 
  7881  0893                     	;# 
  7882  0893                     	;# 
  7883  0893                     	;# 
  7884  0893                     	;# 
  7885  0893                     	;# 
  7886  0893                     	;# 
  7887  0894                     	;# 
  7888  0894                     	;# 
  7889  0894                     	;# 
  7890  0895                     	;# 
  7891  0895                     	;# 
  7892  0895                     	;# 
  7893  0896                     	;# 
  7894  0896                     	;# 
  7895  0896                     	;# 
  7896  089B                     	;# 
  7897  0911                     	;# 
  7898  0912                     	;# 
  7899  0913                     	;# 
  7900  0914                     	;# 
  7901  0915                     	;# 
  7902  0916                     	;# 
  7903  0918                     	;# 
  7904  0919                     	;# 
  7905  091A                     	;# 
  7906  091B                     	;# 
  7907  091C                     	;# 
  7908  091D                     	;# 
  7909  091E                     	;# 
  7910  091F                     	;# 
  7911  0E0F                     	;# 
  7912  0E10                     	;# 
  7913  0E11                     	;# 
  7914  0E12                     	;# 
  7915  0E13                     	;# 
  7916  0E14                     	;# 
  7917  0E15                     	;# 
  7918  0E16                     	;# 
  7919  0E17                     	;# 
  7920  0E18                     	;# 
  7921  0E19                     	;# 
  7922  0E1A                     	;# 
  7923  0E1B                     	;# 
  7924  0E1C                     	;# 
  7925  0E1D                     	;# 
  7926  0E1E                     	;# 
  7927  0E1F                     	;# 
  7928  0E20                     	;# 
  7929  0E21                     	;# 
  7930  0E22                     	;# 
  7931  0E24                     	;# 
  7932  0E25                     	;# 
  7933  0E28                     	;# 
  7934  0E29                     	;# 
  7935  0E2A                     	;# 
  7936  0E2B                     	;# 
  7937  0E2C                     	;# 
  7938  0E2D                     	;# 
  7939  0E2E                     	;# 
  7940  0E2F                     	;# 
  7941  0E90                     	;# 
  7942  0E91                     	;# 
  7943  0E92                     	;# 
  7944  0E94                     	;# 
  7945  0E95                     	;# 
  7946  0E9C                     	;# 
  7947  0E9D                     	;# 
  7948  0E9E                     	;# 
  7949  0E9F                     	;# 
  7950  0EA0                     	;# 
  7951  0EA1                     	;# 
  7952  0EA2                     	;# 
  7953  0EA3                     	;# 
  7954  0EA4                     	;# 
  7955  0EA5                     	;# 
  7956  0EA6                     	;# 
  7957  0EA7                     	;# 
  7958  0F0F                     	;# 
  7959  0F10                     	;# 
  7960  0F11                     	;# 
  7961  0F12                     	;# 
  7962  0F13                     	;# 
  7963  0F14                     	;# 
  7964  0F15                     	;# 
  7965  0F16                     	;# 
  7966  0F17                     	;# 
  7967  0F18                     	;# 
  7968  0F19                     	;# 
  7969  0F1A                     	;# 
  7970  0F1B                     	;# 
  7971  0F1C                     	;# 
  7972  0F1D                     	;# 
  7973  0F1E                     	;# 
  7974  0F1F                     	;# 
  7975  0F20                     	;# 
  7976  0F21                     	;# 
  7977  0F22                     	;# 
  7978  0F23                     	;# 
  7979  0F24                     	;# 
  7980  0F25                     	;# 
  7981  0F26                     	;# 
  7982  0F27                     	;# 
  7983  0F28                     	;# 
  7984  0F29                     	;# 
  7985  0F2A                     	;# 
  7986  0F2B                     	;# 
  7987  0F2C                     	;# 
  7988  0F2D                     	;# 
  7989  0F2E                     	;# 
  7990  0F2F                     	;# 
  7991  0F30                     	;# 
  7992  0F31                     	;# 
  7993  0F32                     	;# 
  7994  0F33                     	;# 
  7995  0F34                     	;# 
  7996  0F35                     	;# 
  7997  0F36                     	;# 
  7998  0F37                     	;# 
  7999  0FE4                     	;# 
  8000  0FE5                     	;# 
  8001  0FE6                     	;# 
  8002  0FE7                     	;# 
  8003  0FE8                     	;# 
  8004  0FE9                     	;# 
  8005  0FEA                     	;# 
  8006  0FEB                     	;# 
  8007  0FED                     	;# 
  8008  0FEE                     	;# 
  8009  0FEF                     	;# 
  8010  0000                     	;# 
  8011  0001                     	;# 
  8012  0002                     	;# 
  8013  0003                     	;# 
  8014  0004                     	;# 
  8015  0005                     	;# 
  8016  0006                     	;# 
  8017  0007                     	;# 
  8018  0008                     	;# 
  8019  0009                     	;# 
  8020  000A                     	;# 
  8021  000B                     	;# 
  8022  000C                     	;# 
  8023  000D                     	;# 
  8024  000E                     	;# 
  8025  0010                     	;# 
  8026  0011                     	;# 
  8027  0012                     	;# 
  8028  0013                     	;# 
  8029  0014                     	;# 
  8030  0015                     	;# 
  8031  0015                     	;# 
  8032  0016                     	;# 
  8033  0016                     	;# 
  8034  0017                     	;# 
  8035  0018                     	;# 
  8036  0019                     	;# 
  8037  0019                     	;# 
  8038  001A                     	;# 
  8039  001B                     	;# 
  8040  001C                     	;# 
  8041  001D                     	;# 
  8042  001E                     	;# 
  8043  001F                     	;# 
  8044  008C                     	;# 
  8045  008D                     	;# 
  8046  008E                     	;# 
  8047  0090                     	;# 
  8048  0091                     	;# 
  8049  0092                     	;# 
  8050  0093                     	;# 
  8051  0094                     	;# 
  8052  0097                     	;# 
  8053  009B                     	;# 
  8054  009B                     	;# 
  8055  009C                     	;# 
  8056  009D                     	;# 
  8057  009E                     	;# 
  8058  009F                     	;# 
  8059  010C                     	;# 
  8060  010D                     	;# 
  8061  010E                     	;# 
  8062  0111                     	;# 
  8063  0112                     	;# 
  8064  0113                     	;# 
  8065  0114                     	;# 
  8066  0115                     	;# 
  8067  0116                     	;# 
  8068  0117                     	;# 
  8069  0118                     	;# 
  8070  0119                     	;# 
  8071  018C                     	;# 
  8072  018D                     	;# 
  8073  018E                     	;# 
  8074  0199                     	;# 
  8075  0199                     	;# 
  8076  0199                     	;# 
  8077  019A                     	;# 
  8078  019A                     	;# 
  8079  019A                     	;# 
  8080  019B                     	;# 
  8081  019B                     	;# 
  8082  019B                     	;# 
  8083  019B                     	;# 
  8084  019B                     	;# 
  8085  019C                     	;# 
  8086  019C                     	;# 
  8087  019C                     	;# 
  8088  019D                     	;# 
  8089  019D                     	;# 
  8090  019D                     	;# 
  8091  019E                     	;# 
  8092  019E                     	;# 
  8093  019E                     	;# 
  8094  019F                     	;# 
  8095  019F                     	;# 
  8096  019F                     	;# 
  8097  019F                     	;# 
  8098  019F                     	;# 
  8099  020C                     	;# 
  8100  020D                     	;# 
  8101  020E                     	;# 
  8102  0211                     	;# 
  8103  0211                     	;# 
  8104  0212                     	;# 
  8105  0212                     	;# 
  8106  0213                     	;# 
  8107  0213                     	;# 
  8108  0214                     	;# 
  8109  0214                     	;# 
  8110  0215                     	;# 
  8111  0215                     	;# 
  8112  0215                     	;# 
  8113  0215                     	;# 
  8114  0216                     	;# 
  8115  0216                     	;# 
  8116  0217                     	;# 
  8117  0217                     	;# 
  8118  0219                     	;# 
  8119  021A                     	;# 
  8120  021B                     	;# 
  8121  021C                     	;# 
  8122  021D                     	;# 
  8123  021D                     	;# 
  8124  021E                     	;# 
  8125  021F                     	;# 
  8126  028C                     	;# 
  8127  028D                     	;# 
  8128  028E                     	;# 
  8129  0291                     	;# 
  8130  0291                     	;# 
  8131  0292                     	;# 
  8132  0293                     	;# 
  8133  0294                     	;# 
  8134  0295                     	;# 
  8135  0295                     	;# 
  8136  0296                     	;# 
  8137  0297                     	;# 
  8138  0298                     	;# 
  8139  029F                     	;# 
  8140  030C                     	;# 
  8141  030D                     	;# 
  8142  030E                     	;# 
  8143  0311                     	;# 
  8144  0311                     	;# 
  8145  0312                     	;# 
  8146  0313                     	;# 
  8147  0314                     	;# 
  8148  0315                     	;# 
  8149  0315                     	;# 
  8150  0316                     	;# 
  8151  0317                     	;# 
  8152  0318                     	;# 
  8153  038C                     	;# 
  8154  038D                     	;# 
  8155  038E                     	;# 
  8156  0391                     	;# 
  8157  0392                     	;# 
  8158  0393                     	;# 
  8159  0394                     	;# 
  8160  0395                     	;# 
  8161  0396                     	;# 
  8162  0397                     	;# 
  8163  0398                     	;# 
  8164  0399                     	;# 
  8165  039A                     	;# 
  8166  039C                     	;# 
  8167  039D                     	;# 
  8168  039E                     	;# 
  8169  039F                     	;# 
  8170  0411                     	;# 
  8171  0411                     	;# 
  8172  0412                     	;# 
  8173  0413                     	;# 
  8174  0414                     	;# 
  8175  0415                     	;# 
  8176  0416                     	;# 
  8177  0417                     	;# 
  8178  0418                     	;# 
  8179  0418                     	;# 
  8180  0419                     	;# 
  8181  041A                     	;# 
  8182  041B                     	;# 
  8183  041C                     	;# 
  8184  041D                     	;# 
  8185  041E                     	;# 
  8186  041F                     	;# 
  8187  0498                     	;# 
  8188  0498                     	;# 
  8189  0499                     	;# 
  8190  049A                     	;# 
  8191  049B                     	;# 
  8192  049B                     	;# 
  8193  049C                     	;# 
  8194  049D                     	;# 
  8195  049E                     	;# 
  8196  049F                     	;# 
  8197  0617                     	;# 
  8198  0618                     	;# 
  8199  0619                     	;# 
  8200  0619                     	;# 
  8201  061A                     	;# 
  8202  061B                     	;# 
  8203  061C                     	;# 
  8204  061C                     	;# 
  8205  061F                     	;# 
  8206  0691                     	;# 
  8207  0692                     	;# 
  8208  0693                     	;# 
  8209  0694                     	;# 
  8210  0695                     	;# 
  8211  0696                     	;# 
  8212  0697                     	;# 
  8213  0698                     	;# 
  8214  0699                     	;# 
  8215  0711                     	;# 
  8216  0712                     	;# 
  8217  0713                     	;# 
  8218  0714                     	;# 
  8219  0715                     	;# 
  8220  0716                     	;# 
  8221  0717                     	;# 
  8222  0718                     	;# 
  8223  0719                     	;# 
  8224  0891                     	;# 
  8225  0891                     	;# 
  8226  0891                     	;# 
  8227  0891                     	;# 
  8228  0891                     	;# 
  8229  0891                     	;# 
  8230  0892                     	;# 
  8231  0892                     	;# 
  8232  0892                     	;# 
  8233  0893                     	;# 
  8234  0893                     	;# 
  8235  0893                     	;# 
  8236  0893                     	;# 
  8237  0893                     	;# 
  8238  0893                     	;# 
  8239  0894                     	;# 
  8240  0894                     	;# 
  8241  0894                     	;# 
  8242  0895                     	;# 
  8243  0895                     	;# 
  8244  0895                     	;# 
  8245  0896                     	;# 
  8246  0896                     	;# 
  8247  0896                     	;# 
  8248  089B                     	;# 
  8249  0911                     	;# 
  8250  0912                     	;# 
  8251  0913                     	;# 
  8252  0914                     	;# 
  8253  0915                     	;# 
  8254  0916                     	;# 
  8255  0918                     	;# 
  8256  0919                     	;# 
  8257  091A                     	;# 
  8258  091B                     	;# 
  8259  091C                     	;# 
  8260  091D                     	;# 
  8261  091E                     	;# 
  8262  091F                     	;# 
  8263  0E0F                     	;# 
  8264  0E10                     	;# 
  8265  0E11                     	;# 
  8266  0E12                     	;# 
  8267  0E13                     	;# 
  8268  0E14                     	;# 
  8269  0E15                     	;# 
  8270  0E16                     	;# 
  8271  0E17                     	;# 
  8272  0E18                     	;# 
  8273  0E19                     	;# 
  8274  0E1A                     	;# 
  8275  0E1B                     	;# 
  8276  0E1C                     	;# 
  8277  0E1D                     	;# 
  8278  0E1E                     	;# 
  8279  0E1F                     	;# 
  8280  0E20                     	;# 
  8281  0E21                     	;# 
  8282  0E22                     	;# 
  8283  0E24                     	;# 
  8284  0E25                     	;# 
  8285  0E28                     	;# 
  8286  0E29                     	;# 
  8287  0E2A                     	;# 
  8288  0E2B                     	;# 
  8289  0E2C                     	;# 
  8290  0E2D                     	;# 
  8291  0E2E                     	;# 
  8292  0E2F                     	;# 
  8293  0E90                     	;# 
  8294  0E91                     	;# 
  8295  0E92                     	;# 
  8296  0E94                     	;# 
  8297  0E95                     	;# 
  8298  0E9C                     	;# 
  8299  0E9D                     	;# 
  8300  0E9E                     	;# 
  8301  0E9F                     	;# 
  8302  0EA0                     	;# 
  8303  0EA1                     	;# 
  8304  0EA2                     	;# 
  8305  0EA3                     	;# 
  8306  0EA4                     	;# 
  8307  0EA5                     	;# 
  8308  0EA6                     	;# 
  8309  0EA7                     	;# 
  8310  0F0F                     	;# 
  8311  0F10                     	;# 
  8312  0F11                     	;# 
  8313  0F12                     	;# 
  8314  0F13                     	;# 
  8315  0F14                     	;# 
  8316  0F15                     	;# 
  8317  0F16                     	;# 
  8318  0F17                     	;# 
  8319  0F18                     	;# 
  8320  0F19                     	;# 
  8321  0F1A                     	;# 
  8322  0F1B                     	;# 
  8323  0F1C                     	;# 
  8324  0F1D                     	;# 
  8325  0F1E                     	;# 
  8326  0F1F                     	;# 
  8327  0F20                     	;# 
  8328  0F21                     	;# 
  8329  0F22                     	;# 
  8330  0F23                     	;# 
  8331  0F24                     	;# 
  8332  0F25                     	;# 
  8333  0F26                     	;# 
  8334  0F27                     	;# 
  8335  0F28                     	;# 
  8336  0F29                     	;# 
  8337  0F2A                     	;# 
  8338  0F2B                     	;# 
  8339  0F2C                     	;# 
  8340  0F2D                     	;# 
  8341  0F2E                     	;# 
  8342  0F2F                     	;# 
  8343  0F30                     	;# 
  8344  0F31                     	;# 
  8345  0F32                     	;# 
  8346  0F33                     	;# 
  8347  0F34                     	;# 
  8348  0F35                     	;# 
  8349  0F36                     	;# 
  8350  0F37                     	;# 
  8351  0FE4                     	;# 
  8352  0FE5                     	;# 
  8353  0FE6                     	;# 
  8354  0FE7                     	;# 
  8355  0FE8                     	;# 
  8356  0FE9                     	;# 
  8357  0FEA                     	;# 
  8358  0FEB                     	;# 
  8359  0FED                     	;# 
  8360  0FEE                     	;# 
  8361  0FEF                     	;# 
  8362  0000                     	;# 
  8363  0001                     	;# 
  8364  0002                     	;# 
  8365  0003                     	;# 
  8366  0004                     	;# 
  8367  0005                     	;# 
  8368  0006                     	;# 
  8369  0007                     	;# 
  8370  0008                     	;# 
  8371  0009                     	;# 
  8372  000A                     	;# 
  8373  000B                     	;# 
  8374  000C                     	;# 
  8375  000D                     	;# 
  8376  000E                     	;# 
  8377  0010                     	;# 
  8378  0011                     	;# 
  8379  0012                     	;# 
  8380  0013                     	;# 
  8381  0014                     	;# 
  8382  0015                     	;# 
  8383  0015                     	;# 
  8384  0016                     	;# 
  8385  0016                     	;# 
  8386  0017                     	;# 
  8387  0018                     	;# 
  8388  0019                     	;# 
  8389  0019                     	;# 
  8390  001A                     	;# 
  8391  001B                     	;# 
  8392  001C                     	;# 
  8393  001D                     	;# 
  8394  001E                     	;# 
  8395  001F                     	;# 
  8396  008C                     	;# 
  8397  008D                     	;# 
  8398  008E                     	;# 
  8399  0090                     	;# 
  8400  0091                     	;# 
  8401  0092                     	;# 
  8402  0093                     	;# 
  8403  0094                     	;# 
  8404  0097                     	;# 
  8405  009B                     	;# 
  8406  009B                     	;# 
  8407  009C                     	;# 
  8408  009D                     	;# 
  8409  009E                     	;# 
  8410  009F                     	;# 
  8411  010C                     	;# 
  8412  010D                     	;# 
  8413  010E                     	;# 
  8414  0111                     	;# 
  8415  0112                     	;# 
  8416  0113                     	;# 
  8417  0114                     	;# 
  8418  0115                     	;# 
  8419  0116                     	;# 
  8420  0117                     	;# 
  8421  0118                     	;# 
  8422  0119                     	;# 
  8423  018C                     	;# 
  8424  018D                     	;# 
  8425  018E                     	;# 
  8426  0199                     	;# 
  8427  0199                     	;# 
  8428  0199                     	;# 
  8429  019A                     	;# 
  8430  019A                     	;# 
  8431  019A                     	;# 
  8432  019B                     	;# 
  8433  019B                     	;# 
  8434  019B                     	;# 
  8435  019B                     	;# 
  8436  019B                     	;# 
  8437  019C                     	;# 
  8438  019C                     	;# 
  8439  019C                     	;# 
  8440  019D                     	;# 
  8441  019D                     	;# 
  8442  019D                     	;# 
  8443  019E                     	;# 
  8444  019E                     	;# 
  8445  019E                     	;# 
  8446  019F                     	;# 
  8447  019F                     	;# 
  8448  019F                     	;# 
  8449  019F                     	;# 
  8450  019F                     	;# 
  8451  020C                     	;# 
  8452  020D                     	;# 
  8453  020E                     	;# 
  8454  0211                     	;# 
  8455  0211                     	;# 
  8456  0212                     	;# 
  8457  0212                     	;# 
  8458  0213                     	;# 
  8459  0213                     	;# 
  8460  0214                     	;# 
  8461  0214                     	;# 
  8462  0215                     	;# 
  8463  0215                     	;# 
  8464  0215                     	;# 
  8465  0215                     	;# 
  8466  0216                     	;# 
  8467  0216                     	;# 
  8468  0217                     	;# 
  8469  0217                     	;# 
  8470  0219                     	;# 
  8471  021A                     	;# 
  8472  021B                     	;# 
  8473  021C                     	;# 
  8474  021D                     	;# 
  8475  021D                     	;# 
  8476  021E                     	;# 
  8477  021F                     	;# 
  8478  028C                     	;# 
  8479  028D                     	;# 
  8480  028E                     	;# 
  8481  0291                     	;# 
  8482  0291                     	;# 
  8483  0292                     	;# 
  8484  0293                     	;# 
  8485  0294                     	;# 
  8486  0295                     	;# 
  8487  0295                     	;# 
  8488  0296                     	;# 
  8489  0297                     	;# 
  8490  0298                     	;# 
  8491  029F                     	;# 
  8492  030C                     	;# 
  8493  030D                     	;# 
  8494  030E                     	;# 
  8495  0311                     	;# 
  8496  0311                     	;# 
  8497  0312                     	;# 
  8498  0313                     	;# 
  8499  0314                     	;# 
  8500  0315                     	;# 
  8501  0315                     	;# 
  8502  0316                     	;# 
  8503  0317                     	;# 
  8504  0318                     	;# 
  8505  038C                     	;# 
  8506  038D                     	;# 
  8507  038E                     	;# 
  8508  0391                     	;# 
  8509  0392                     	;# 
  8510  0393                     	;# 
  8511  0394                     	;# 
  8512  0395                     	;# 
  8513  0396                     	;# 
  8514  0397                     	;# 
  8515  0398                     	;# 
  8516  0399                     	;# 
  8517  039A                     	;# 
  8518  039C                     	;# 
  8519  039D                     	;# 
  8520  039E                     	;# 
  8521  039F                     	;# 
  8522  0411                     	;# 
  8523  0411                     	;# 
  8524  0412                     	;# 
  8525  0413                     	;# 
  8526  0414                     	;# 
  8527  0415                     	;# 
  8528  0416                     	;# 
  8529  0417                     	;# 
  8530  0418                     	;# 
  8531  0418                     	;# 
  8532  0419                     	;# 
  8533  041A                     	;# 
  8534  041B                     	;# 
  8535  041C                     	;# 
  8536  041D                     	;# 
  8537  041E                     	;# 
  8538  041F                     	;# 
  8539  0498                     	;# 
  8540  0498                     	;# 
  8541  0499                     	;# 
  8542  049A                     	;# 
  8543  049B                     	;# 
  8544  049B                     	;# 
  8545  049C                     	;# 
  8546  049D                     	;# 
  8547  049E                     	;# 
  8548  049F                     	;# 
  8549  0617                     	;# 
  8550  0618                     	;# 
  8551  0619                     	;# 
  8552  0619                     	;# 
  8553  061A                     	;# 
  8554  061B                     	;# 
  8555  061C                     	;# 
  8556  061C                     	;# 
  8557  061F                     	;# 
  8558  0691                     	;# 
  8559  0692                     	;# 
  8560  0693                     	;# 
  8561  0694                     	;# 
  8562  0695                     	;# 
  8563  0696                     	;# 
  8564  0697                     	;# 
  8565  0698                     	;# 
  8566  0699                     	;# 
  8567  0711                     	;# 
  8568  0712                     	;# 
  8569  0713                     	;# 
  8570  0714                     	;# 
  8571  0715                     	;# 
  8572  0716                     	;# 
  8573  0717                     	;# 
  8574  0718                     	;# 
  8575  0719                     	;# 
  8576  0891                     	;# 
  8577  0891                     	;# 
  8578  0891                     	;# 
  8579  0891                     	;# 
  8580  0891                     	;# 
  8581  0891                     	;# 
  8582  0892                     	;# 
  8583  0892                     	;# 
  8584  0892                     	;# 
  8585  0893                     	;# 
  8586  0893                     	;# 
  8587  0893                     	;# 
  8588  0893                     	;# 
  8589  0893                     	;# 
  8590  0893                     	;# 
  8591  0894                     	;# 
  8592  0894                     	;# 
  8593  0894                     	;# 
  8594  0895                     	;# 
  8595  0895                     	;# 
  8596  0895                     	;# 
  8597  0896                     	;# 
  8598  0896                     	;# 
  8599  0896                     	;# 
  8600  089B                     	;# 
  8601  0911                     	;# 
  8602  0912                     	;# 
  8603  0913                     	;# 
  8604  0914                     	;# 
  8605  0915                     	;# 
  8606  0916                     	;# 
  8607  0918                     	;# 
  8608  0919                     	;# 
  8609  091A                     	;# 
  8610  091B                     	;# 
  8611  091C                     	;# 
  8612  091D                     	;# 
  8613  091E                     	;# 
  8614  091F                     	;# 
  8615  0E0F                     	;# 
  8616  0E10                     	;# 
  8617  0E11                     	;# 
  8618  0E12                     	;# 
  8619  0E13                     	;# 
  8620  0E14                     	;# 
  8621  0E15                     	;# 
  8622  0E16                     	;# 
  8623  0E17                     	;# 
  8624  0E18                     	;# 
  8625  0E19                     	;# 
  8626  0E1A                     	;# 
  8627  0E1B                     	;# 
  8628  0E1C                     	;# 
  8629  0E1D                     	;# 
  8630  0E1E                     	;# 
  8631  0E1F                     	;# 
  8632  0E20                     	;# 
  8633  0E21                     	;# 
  8634  0E22                     	;# 
  8635  0E24                     	;# 
  8636  0E25                     	;# 
  8637  0E28                     	;# 
  8638  0E29                     	;# 
  8639  0E2A                     	;# 
  8640  0E2B                     	;# 
  8641  0E2C                     	;# 
  8642  0E2D                     	;# 
  8643  0E2E                     	;# 
  8644  0E2F                     	;# 
  8645  0E90                     	;# 
  8646  0E91                     	;# 
  8647  0E92                     	;# 
  8648  0E94                     	;# 
  8649  0E95                     	;# 
  8650  0E9C                     	;# 
  8651  0E9D                     	;# 
  8652  0E9E                     	;# 
  8653  0E9F                     	;# 
  8654  0EA0                     	;# 
  8655  0EA1                     	;# 
  8656  0EA2                     	;# 
  8657  0EA3                     	;# 
  8658  0EA4                     	;# 
  8659  0EA5                     	;# 
  8660  0EA6                     	;# 
  8661  0EA7                     	;# 
  8662  0F0F                     	;# 
  8663  0F10                     	;# 
  8664  0F11                     	;# 
  8665  0F12                     	;# 
  8666  0F13                     	;# 
  8667  0F14                     	;# 
  8668  0F15                     	;# 
  8669  0F16                     	;# 
  8670  0F17                     	;# 
  8671  0F18                     	;# 
  8672  0F19                     	;# 
  8673  0F1A                     	;# 
  8674  0F1B                     	;# 
  8675  0F1C                     	;# 
  8676  0F1D                     	;# 
  8677  0F1E                     	;# 
  8678  0F1F                     	;# 
  8679  0F20                     	;# 
  8680  0F21                     	;# 
  8681  0F22                     	;# 
  8682  0F23                     	;# 
  8683  0F24                     	;# 
  8684  0F25                     	;# 
  8685  0F26                     	;# 
  8686  0F27                     	;# 
  8687  0F28                     	;# 
  8688  0F29                     	;# 
  8689  0F2A                     	;# 
  8690  0F2B                     	;# 
  8691  0F2C                     	;# 
  8692  0F2D                     	;# 
  8693  0F2E                     	;# 
  8694  0F2F                     	;# 
  8695  0F30                     	;# 
  8696  0F31                     	;# 
  8697  0F32                     	;# 
  8698  0F33                     	;# 
  8699  0F34                     	;# 
  8700  0F35                     	;# 
  8701  0F36                     	;# 
  8702  0F37                     	;# 
  8703  0FE4                     	;# 
  8704  0FE5                     	;# 
  8705  0FE6                     	;# 
  8706  0FE7                     	;# 
  8707  0FE8                     	;# 
  8708  0FE9                     	;# 
  8709  0FEA                     	;# 
  8710  0FEB                     	;# 
  8711  0FED                     	;# 
  8712  0FEE                     	;# 
  8713  0FEF                     	;# 
  8714  0000                     	;# 
  8715  0001                     	;# 
  8716  0002                     	;# 
  8717  0003                     	;# 
  8718  0004                     	;# 
  8719  0005                     	;# 
  8720  0006                     	;# 
  8721  0007                     	;# 
  8722  0008                     	;# 
  8723  0009                     	;# 
  8724  000A                     	;# 
  8725  000B                     	;# 
  8726  000C                     	;# 
  8727  000D                     	;# 
  8728  000E                     	;# 
  8729  0010                     	;# 
  8730  0011                     	;# 
  8731  0012                     	;# 
  8732  0013                     	;# 
  8733  0014                     	;# 
  8734  0015                     	;# 
  8735  0015                     	;# 
  8736  0016                     	;# 
  8737  0016                     	;# 
  8738  0017                     	;# 
  8739  0018                     	;# 
  8740  0019                     	;# 
  8741  0019                     	;# 
  8742  001A                     	;# 
  8743  001B                     	;# 
  8744  001C                     	;# 
  8745  001D                     	;# 
  8746  001E                     	;# 
  8747  001F                     	;# 
  8748  008C                     	;# 
  8749  008D                     	;# 
  8750  008E                     	;# 
  8751  0090                     	;# 
  8752  0091                     	;# 
  8753  0092                     	;# 
  8754  0093                     	;# 
  8755  0094                     	;# 
  8756  0097                     	;# 
  8757  009B                     	;# 
  8758  009B                     	;# 
  8759  009C                     	;# 
  8760  009D                     	;# 
  8761  009E                     	;# 
  8762  009F                     	;# 
  8763  010C                     	;# 
  8764  010D                     	;# 
  8765  010E                     	;# 
  8766  0111                     	;# 
  8767  0112                     	;# 
  8768  0113                     	;# 
  8769  0114                     	;# 
  8770  0115                     	;# 
  8771  0116                     	;# 
  8772  0117                     	;# 
  8773  0118                     	;# 
  8774  0119                     	;# 
  8775  018C                     	;# 
  8776  018D                     	;# 
  8777  018E                     	;# 
  8778  0199                     	;# 
  8779  0199                     	;# 
  8780  0199                     	;# 
  8781  019A                     	;# 
  8782  019A                     	;# 
  8783  019A                     	;# 
  8784  019B                     	;# 
  8785  019B                     	;# 
  8786  019B                     	;# 
  8787  019B                     	;# 
  8788  019B                     	;# 
  8789  019C                     	;# 
  8790  019C                     	;# 
  8791  019C                     	;# 
  8792  019D                     	;# 
  8793  019D                     	;# 
  8794  019D                     	;# 
  8795  019E                     	;# 
  8796  019E                     	;# 
  8797  019E                     	;# 
  8798  019F                     	;# 
  8799  019F                     	;# 
  8800  019F                     	;# 
  8801  019F                     	;# 
  8802  019F                     	;# 
  8803  020C                     	;# 
  8804  020D                     	;# 
  8805  020E                     	;# 
  8806  0211                     	;# 
  8807  0211                     	;# 
  8808  0212                     	;# 
  8809  0212                     	;# 
  8810  0213                     	;# 
  8811  0213                     	;# 
  8812  0214                     	;# 
  8813  0214                     	;# 
  8814  0215                     	;# 
  8815  0215                     	;# 
  8816  0215                     	;# 
  8817  0215                     	;# 
  8818  0216                     	;# 
  8819  0216                     	;# 
  8820  0217                     	;# 
  8821  0217                     	;# 
  8822  0219                     	;# 
  8823  021A                     	;# 
  8824  021B                     	;# 
  8825  021C                     	;# 
  8826  021D                     	;# 
  8827  021D                     	;# 
  8828  021E                     	;# 
  8829  021F                     	;# 
  8830  028C                     	;# 
  8831  028D                     	;# 
  8832  028E                     	;# 
  8833  0291                     	;# 
  8834  0291                     	;# 
  8835  0292                     	;# 
  8836  0293                     	;# 
  8837  0294                     	;# 
  8838  0295                     	;# 
  8839  0295                     	;# 
  8840  0296                     	;# 
  8841  0297                     	;# 
  8842  0298                     	;# 
  8843  029F                     	;# 
  8844  030C                     	;# 
  8845  030D                     	;# 
  8846  030E                     	;# 
  8847  0311                     	;# 
  8848  0311                     	;# 
  8849  0312                     	;# 
  8850  0313                     	;# 
  8851  0314                     	;# 
  8852  0315                     	;# 
  8853  0315                     	;# 
  8854  0316                     	;# 
  8855  0317                     	;# 
  8856  0318                     	;# 
  8857  038C                     	;# 
  8858  038D                     	;# 
  8859  038E                     	;# 
  8860  0391                     	;# 
  8861  0392                     	;# 
  8862  0393                     	;# 
  8863  0394                     	;# 
  8864  0395                     	;# 
  8865  0396                     	;# 
  8866  0397                     	;# 
  8867  0398                     	;# 
  8868  0399                     	;# 
  8869  039A                     	;# 
  8870  039C                     	;# 
  8871  039D                     	;# 
  8872  039E                     	;# 
  8873  039F                     	;# 
  8874  0411                     	;# 
  8875  0411                     	;# 
  8876  0412                     	;# 
  8877  0413                     	;# 
  8878  0414                     	;# 
  8879  0415                     	;# 
  8880  0416                     	;# 
  8881  0417                     	;# 
  8882  0418                     	;# 
  8883  0418                     	;# 
  8884  0419                     	;# 
  8885  041A                     	;# 
  8886  041B                     	;# 
  8887  041C                     	;# 
  8888  041D                     	;# 
  8889  041E                     	;# 
  8890  041F                     	;# 
  8891  0498                     	;# 
  8892  0498                     	;# 
  8893  0499                     	;# 
  8894  049A                     	;# 
  8895  049B                     	;# 
  8896  049B                     	;# 
  8897  049C                     	;# 
  8898  049D                     	;# 
  8899  049E                     	;# 
  8900  049F                     	;# 
  8901  0617                     	;# 
  8902  0618                     	;# 
  8903  0619                     	;# 
  8904  0619                     	;# 
  8905  061A                     	;# 
  8906  061B                     	;# 
  8907  061C                     	;# 
  8908  061C                     	;# 
  8909  061F                     	;# 
  8910  0691                     	;# 
  8911  0692                     	;# 
  8912  0693                     	;# 
  8913  0694                     	;# 
  8914  0695                     	;# 
  8915  0696                     	;# 
  8916  0697                     	;# 
  8917  0698                     	;# 
  8918  0699                     	;# 
  8919  0711                     	;# 
  8920  0712                     	;# 
  8921  0713                     	;# 
  8922  0714                     	;# 
  8923  0715                     	;# 
  8924  0716                     	;# 
  8925  0717                     	;# 
  8926  0718                     	;# 
  8927  0719                     	;# 
  8928  0891                     	;# 
  8929  0891                     	;# 
  8930  0891                     	;# 
  8931  0891                     	;# 
  8932  0891                     	;# 
  8933  0891                     	;# 
  8934  0892                     	;# 
  8935  0892                     	;# 
  8936  0892                     	;# 
  8937  0893                     	;# 
  8938  0893                     	;# 
  8939  0893                     	;# 
  8940  0893                     	;# 
  8941  0893                     	;# 
  8942  0893                     	;# 
  8943  0894                     	;# 
  8944  0894                     	;# 
  8945  0894                     	;# 
  8946  0895                     	;# 
  8947  0895                     	;# 
  8948  0895                     	;# 
  8949  0896                     	;# 
  8950  0896                     	;# 
  8951  0896                     	;# 
  8952  089B                     	;# 
  8953  0911                     	;# 
  8954  0912                     	;# 
  8955  0913                     	;# 
  8956  0914                     	;# 
  8957  0915                     	;# 
  8958  0916                     	;# 
  8959  0918                     	;# 
  8960  0919                     	;# 
  8961  091A                     	;# 
  8962  091B                     	;# 
  8963  091C                     	;# 
  8964  091D                     	;# 
  8965  091E                     	;# 
  8966  091F                     	;# 
  8967  0E0F                     	;# 
  8968  0E10                     	;# 
  8969  0E11                     	;# 
  8970  0E12                     	;# 
  8971  0E13                     	;# 
  8972  0E14                     	;# 
  8973  0E15                     	;# 
  8974  0E16                     	;# 
  8975  0E17                     	;# 
  8976  0E18                     	;# 
  8977  0E19                     	;# 
  8978  0E1A                     	;# 
  8979  0E1B                     	;# 
  8980  0E1C                     	;# 
  8981  0E1D                     	;# 
  8982  0E1E                     	;# 
  8983  0E1F                     	;# 
  8984  0E20                     	;# 
  8985  0E21                     	;# 
  8986  0E22                     	;# 
  8987  0E24                     	;# 
  8988  0E25                     	;# 
  8989  0E28                     	;# 
  8990  0E29                     	;# 
  8991  0E2A                     	;# 
  8992  0E2B                     	;# 
  8993  0E2C                     	;# 
  8994  0E2D                     	;# 
  8995  0E2E                     	;# 
  8996  0E2F                     	;# 
  8997  0E90                     	;# 
  8998  0E91                     	;# 
  8999  0E92                     	;# 
  9000  0E94                     	;# 
  9001  0E95                     	;# 
  9002  0E9C                     	;# 
  9003  0E9D                     	;# 
  9004  0E9E                     	;# 
  9005  0E9F                     	;# 
  9006  0EA0                     	;# 
  9007  0EA1                     	;# 
  9008  0EA2                     	;# 
  9009  0EA3                     	;# 
  9010  0EA4                     	;# 
  9011  0EA5                     	;# 
  9012  0EA6                     	;# 
  9013  0EA7                     	;# 
  9014  0F0F                     	;# 
  9015  0F10                     	;# 
  9016  0F11                     	;# 
  9017  0F12                     	;# 
  9018  0F13                     	;# 
  9019  0F14                     	;# 
  9020  0F15                     	;# 
  9021  0F16                     	;# 
  9022  0F17                     	;# 
  9023  0F18                     	;# 
  9024  0F19                     	;# 
  9025  0F1A                     	;# 
  9026  0F1B                     	;# 
  9027  0F1C                     	;# 
  9028  0F1D                     	;# 
  9029  0F1E                     	;# 
  9030  0F1F                     	;# 
  9031  0F20                     	;# 
  9032  0F21                     	;# 
  9033  0F22                     	;# 
  9034  0F23                     	;# 
  9035  0F24                     	;# 
  9036  0F25                     	;# 
  9037  0F26                     	;# 
  9038  0F27                     	;# 
  9039  0F28                     	;# 
  9040  0F29                     	;# 
  9041  0F2A                     	;# 
  9042  0F2B                     	;# 
  9043  0F2C                     	;# 
  9044  0F2D                     	;# 
  9045  0F2E                     	;# 
  9046  0F2F                     	;# 
  9047  0F30                     	;# 
  9048  0F31                     	;# 
  9049  0F32                     	;# 
  9050  0F33                     	;# 
  9051  0F34                     	;# 
  9052  0F35                     	;# 
  9053  0F36                     	;# 
  9054  0F37                     	;# 
  9055  0FE4                     	;# 
  9056  0FE5                     	;# 
  9057  0FE6                     	;# 
  9058  0FE7                     	;# 
  9059  0FE8                     	;# 
  9060  0FE9                     	;# 
  9061  0FEA                     	;# 
  9062  0FEB                     	;# 
  9063  0FED                     	;# 
  9064  0FEE                     	;# 
  9065  0FEF                     	;_asciiCharTableLookup
  9066                           
  9067 ;; Function _menu_Exit is unused but had its address taken
  9068  0000                     
  9069 ;; Function _flashy_Exit is unused but had its address taken
  9070  0000                     
  9071 ;; Function _locked_Exit is unused but had its address taken
  9072  0000                     
  9073 ;; Function _secret_Exit is unused but had its address taken
  9074  0000                     
  9075 ;; Function _slot_Exit is unused but had its address taken
  9076  0000                     
  9077 ;; Function _matrix_Exit is unused but had its address taken
  9078  0000                     
  9079                           	psect	idataBANK1
  9080  1000                     __pidataBANK1:	
  9081                           
  9082                           ;initializer for marquee_speedy@F14093
  9083  1000  3420               	retlw	32
  9084  1001  3420               	retlw	32
  9085  1002  3420               	retlw	32
  9086  1003  3420               	retlw	32
  9087  1004  3400               	retlw	0
  9088                           
  9089                           ;initializer for _randx
  9090  1005  3401               	retlw	1
  9091  1006  3400               	retlw	0
  9092  1007  3400               	retlw	0
  9093  1008  3400               	retlw	0
  9094                           
  9095                           ;initializer for _Leds_idx
  9096  1009  3401               	retlw	1
  9097  100A  3400               	retlw	0
  9098                           
  9099                           ;initializer for _locked_lock_base_leds
  9100  100B  341F               	retlw	31
  9101  100C  34F8               	retlw	248
  9102                           
  9103                           ;initializer for _FLASHY_TEXT_SECRET_TEST
  9104  100D  3445               	retlw	low (STR_10| (0+32768))
  9105  100E  34BA               	retlw	high (STR_10| (0+32768))
  9106                           
  9107                           	psect	idataBANK2
  9108  0002                     __pidataBANK2:	
  9109                           
  9110                           ;initializer for _FLASHY_TEXT
  9111  0002  34F9               	retlw	low (STR_9| (0+32768))
  9112  0003  34BB               	retlw	high (STR_9| (0+32768))
  9113                           
  9114                           	psect	idataBANK3
  9115  33A9                     __pidataBANK3:	
  9116                           
  9117                           ;initializer for _Shot_Options
  9118  33A9  34D1               	retlw	low (STR_49| (0+32768))
  9119  33AA  34BB               	retlw	high (STR_49| (0+32768))
  9120  33AB  34C7               	retlw	low (STR_50| (0+32768))
  9121  33AC  34BB               	retlw	high (STR_50| (0+32768))
  9122  33AD  34AE               	retlw	low (STR_51| (0+32768))
  9123  33AE  34BB               	retlw	high (STR_51| (0+32768))
  9124  33AF  34D6               	retlw	low (STR_52| (0+32768))
  9125  33B0  34BB               	retlw	high (STR_52| (0+32768))
  9126  33B1  34B3               	retlw	low (STR_53| (0+32768))
  9127  33B2  34BB               	retlw	high (STR_53| (0+32768))
  9128  33B3  34BD               	retlw	low (STR_54| (0+32768))
  9129  33B4  34BB               	retlw	high (STR_54| (0+32768))
  9130  33B5  34C2               	retlw	low (STR_55| (0+32768))
  9131  33B6  34BB               	retlw	high (STR_55| (0+32768))
  9132  33B7  34B8               	retlw	low (STR_56| (0+32768))
  9133  33B8  34BB               	retlw	high (STR_56| (0+32768))
  9134  33B9  34CC               	retlw	low (STR_57| (0+32768))
  9135  33BA  34BB               	retlw	high (STR_57| (0+32768))
  9136                           
  9137                           ;initializer for marquee@F14102
  9138  33BB  3420               	retlw	32
  9139  33BC  3420               	retlw	32
  9140  33BD  3420               	retlw	32
  9141  33BE  3420               	retlw	32
  9142  33BF  3400               	retlw	0
  9143                           
  9144                           	psect	idataBANK4
  9145  2A13                     __pidataBANK4:	
  9146                           
  9147                           ;initializer for _locked_locking_leds
  9148  2A13  3400               	retlw	0
  9149  2A14  3400               	retlw	0
  9150  2A15  3420               	retlw	32
  9151  2A16  3400               	retlw	0
  9152  2A17  3460               	retlw	96
  9153  2A18  3400               	retlw	0
  9154  2A19  34E0               	retlw	224
  9155  2A1A  3400               	retlw	0
  9156  2A1B  34E0               	retlw	224
  9157  2A1C  3401               	retlw	1
  9158  2A1D  34E0               	retlw	224
  9159  2A1E  3403               	retlw	3
  9160                           
  9161                           ;initializer for _menu_option
  9162  2A1F  34FE               	retlw	low (STR_4| (0+32768))
  9163  2A20  34BB               	retlw	high (STR_4| (0+32768))
  9164  2A21  34A3               	retlw	low (STR_5| (0+32768))
  9165  2A22  34BB               	retlw	high (STR_5| (0+32768))
  9166  2A23  34F7               	retlw	low (STR_6| (0+32768))
  9167  2A24  34BA               	retlw	high (STR_6| (0+32768))
  9168  2A25  3466               	retlw	low (STR_7| (0+32768))
  9169  2A26  34BB               	retlw	high (STR_7| (0+32768))
  9170  2A27  349D               	retlw	low (STR_8| (0+32768))
  9171  2A28  34BB               	retlw	high (STR_8| (0+32768))
  9172                           
  9173                           ;initializer for _secret_inputs
  9174  2A29  3401               	retlw	1
  9175  2A2A  3401               	retlw	1
  9176  2A2B  3402               	retlw	2
  9177  2A2C  3402               	retlw	2
  9178  2A2D  3401               	retlw	1
  9179  2A2E  3402               	retlw	2
  9180  2A2F  3401               	retlw	1
  9181  2A30  3402               	retlw	2
  9182  2A31  3404               	retlw	4
  9183  2A32  3408               	retlw	8
  9184  2A33  3400               	retlw	0
  9185  2A34  3400               	retlw	0
  9186  2A35  3400               	retlw	0
  9187  2A36  3400               	retlw	0
  9188  2A37  3400               	retlw	0
  9189  2A38  3400               	retlw	0
  9190  2A39  3400               	retlw	0
  9191  2A3A  3400               	retlw	0
  9192  2A3B  3400               	retlw	0
  9193  2A3C  3400               	retlw	0
  9194  2A3D  3400               	retlw	0
  9195  2A3E  3400               	retlw	0
  9196  2A3F  34C5               	retlw	low (_secret_value| 0)
  9197  2A40  3401               	retlw	1
  9198  2A41  3400               	retlw	0
  9199                           
  9200                           ;initializer for _locked_secret_inputs
  9201  2A42  3402               	retlw	2
  9202  2A43  3408               	retlw	8
  9203  2A44  3401               	retlw	1
  9204  2A45  3401               	retlw	1
  9205  2A46  3400               	retlw	0
  9206  2A47  3400               	retlw	0
  9207  2A48  3400               	retlw	0
  9208  2A49  3400               	retlw	0
  9209  2A4A  3400               	retlw	0
  9210  2A4B  3400               	retlw	0
  9211  2A4C  3400               	retlw	0
  9212  2A4D  3400               	retlw	0
  9213  2A4E  3400               	retlw	0
  9214  2A4F  3400               	retlw	0
  9215  2A50  3400               	retlw	0
  9216  2A51  3400               	retlw	0
  9217  2A52  3400               	retlw	0
  9218  2A53  3400               	retlw	0
  9219  2A54  3400               	retlw	0
  9220  2A55  3400               	retlw	0
  9221  2A56  3400               	retlw	0
  9222  2A57  3400               	retlw	0
  9223  2A58  3469               	retlw	low (_locked_secret_value| (0+256))
  9224  2A59  3401               	retlw	1
  9225  2A5A  3400               	retlw	0
  9226                           
  9227                           	psect	idataBANK5
  9228  34E2                     __pidataBANK5:	
  9229                           
  9230                           ;initializer for _menu_options_leds
  9231  34E2  3400               	retlw	0
  9232  34E3  3402               	retlw	2
  9233  34E4  3400               	retlw	0
  9234  34E5  3401               	retlw	1
  9235  34E6  3480               	retlw	128
  9236  34E7  3400               	retlw	0
  9237  34E8  3440               	retlw	64
  9238  34E9  3400               	retlw	0
  9239  34EA  3420               	retlw	32
  9240  34EB  3400               	retlw	0
  9241                           
  9242                           ;initializer for _matrix_secret_inputs
  9243  34EC  3401               	retlw	1
  9244  34ED  3408               	retlw	8
  9245  34EE  3402               	retlw	2
  9246  34EF  3404               	retlw	4
  9247  34F0  3405               	retlw	5
  9248  34F1  3409               	retlw	9
  9249  34F2  3403               	retlw	3
  9250  34F3  3400               	retlw	0
  9251  34F4  3400               	retlw	0
  9252  34F5  3400               	retlw	0
  9253  34F6  3400               	retlw	0
  9254  34F7  3400               	retlw	0
  9255  34F8  3400               	retlw	0
  9256  34F9  3400               	retlw	0
  9257  34FA  3400               	retlw	0
  9258  34FB  3400               	retlw	0
  9259  34FC  3400               	retlw	0
  9260  34FD  3400               	retlw	0
  9261  34FE  3400               	retlw	0
  9262  34FF  3400               	retlw	0
  9263  3500  3400               	retlw	0
  9264  3501  3400               	retlw	0
  9265  3502  34C5               	retlw	low (_secret_value| 0)
  9266  3503  3401               	retlw	1
  9267  3504  3400               	retlw	0
  9268                           
  9269                           	psect	idataBANK6
  9270  2A5B                     __pidataBANK6:	
  9271                           
  9272                           ;initializer for _Shot_Options_Long
  9273  2A5B  344E               	retlw	low (STR_58| (0+32768))
  9274  2A5C  34BB               	retlw	high (STR_58| (0+32768))
  9275  2A5D  3446               	retlw	low (STR_59| (0+32768))
  9276  2A5E  34BB               	retlw	high (STR_59| (0+32768))
  9277  2A5F  340A               	retlw	low (STR_60| (0+32768))
  9278  2A60  34BB               	retlw	high (STR_60| (0+32768))
  9279  2A61  34E2               	retlw	low (STR_61| (0+32768))
  9280  2A62  34BA               	retlw	high (STR_61| (0+32768))
  9281  2A63  34D7               	retlw	low (STR_62| (0+32768))
  9282  2A64  34BA               	retlw	high (STR_62| (0+32768))
  9283  2A65  343E               	retlw	low (STR_63| (0+32768))
  9284  2A66  34BB               	retlw	high (STR_63| (0+32768))
  9285  2A67  34BF               	retlw	low (STR_64| (0+32768))
  9286  2A68  34BA               	retlw	high (STR_64| (0+32768))
  9287  2A69  3498               	retlw	low (STR_65| (0+32768))
  9288  2A6A  34BA               	retlw	high (STR_65| (0+32768))
  9289  2A6B  3413               	retlw	low (STR_66| (0+32768))
  9290  2A6C  34BB               	retlw	high (STR_66| (0+32768))
  9291                           
  9292                           ;initializer for _Slot_Wheel
  9293  2A6D  3441               	retlw	65
  9294  2A6E  3442               	retlw	66
  9295  2A6F  3443               	retlw	67
  9296  2A70  3444               	retlw	68
  9297  2A71  3445               	retlw	69
  9298  2A72  3446               	retlw	70
  9299  2A73  3447               	retlw	71
  9300  2A74  3448               	retlw	72
  9301  2A75  3449               	retlw	73
  9302  2A76  344A               	retlw	74
  9303  2A77  344B               	retlw	75
  9304  2A78  344C               	retlw	76
  9305  2A79  344D               	retlw	77
  9306  2A7A  344E               	retlw	78
  9307  2A7B  344F               	retlw	79
  9308  2A7C  3450               	retlw	80
  9309  2A7D  3451               	retlw	81
  9310  2A7E  3452               	retlw	82
  9311  2A7F  3453               	retlw	83
  9312  2A80  3454               	retlw	84
  9313  2A81  3455               	retlw	85
  9314  2A82  3456               	retlw	86
  9315  2A83  3457               	retlw	87
  9316  2A84  3458               	retlw	88
  9317  2A85  3459               	retlw	89
  9318  2A86  345A               	retlw	90
  9319  2A87  3430               	retlw	48
  9320  2A88  3431               	retlw	49
  9321  2A89  3432               	retlw	50
  9322  2A8A  3433               	retlw	51
  9323  2A8B  3434               	retlw	52
  9324  2A8C  3435               	retlw	53
  9325  2A8D  3436               	retlw	54
  9326  2A8E  3437               	retlw	55
  9327  2A8F  3438               	retlw	56
  9328  2A90  3439               	retlw	57
  9329  2A91  343C               	retlw	60
  9330  2A92  343E               	retlw	62
  9331  2A93  3421               	retlw	33
  9332  2A94  3424               	retlw	36
  9333  2A95  3425               	retlw	37
  9334  2A96  3426               	retlw	38
  9335  2A97  342D               	retlw	45
  9336  2A98  3423               	retlw	35
  9337  2A99  342A               	retlw	42
  9338  2A9A  342B               	retlw	43
  9339  2A9B  342D               	retlw	45
  9340  2A9C  342E               	retlw	46
  9341  2A9D  3440               	retlw	64
  9342  2A9E  343B               	retlw	59
  9343  2A9F  343A               	retlw	58
  9344  2AA0  3427               	retlw	39
  9345  2AA1  3422               	retlw	34
  9346  2AA2  342F               	retlw	47
  9347  2AA3  345C               	retlw	92
  9348                           
  9349                           	psect	idataBANK7
  9350  2AEE                     __pidataBANK7:	
  9351                           
  9352                           ;initializer for _roundabout_leds_inverse
  9353  2AEE  3480               	retlw	128
  9354  2AEF  3400               	retlw	0
  9355  2AF0  3440               	retlw	64
  9356  2AF1  3400               	retlw	0
  9357  2AF2  3420               	retlw	32
  9358  2AF3  3400               	retlw	0
  9359  2AF4  3410               	retlw	16
  9360  2AF5  3400               	retlw	0
  9361  2AF6  3408               	retlw	8
  9362  2AF7  3400               	retlw	0
  9363  2AF8  3404               	retlw	4
  9364  2AF9  3400               	retlw	0
  9365  2AFA  3402               	retlw	2
  9366  2AFB  3400               	retlw	0
  9367  2AFC  3401               	retlw	1
  9368  2AFD  3400               	retlw	0
  9369  2AFE  3402               	retlw	2
  9370  2AFF  3400               	retlw	0
  9371  2B00  3404               	retlw	4
  9372  2B01  3400               	retlw	0
  9373  2B02  3408               	retlw	8
  9374  2B03  3400               	retlw	0
  9375  2B04  3410               	retlw	16
  9376  2B05  3400               	retlw	0
  9377  2B06  3420               	retlw	32
  9378  2B07  3400               	retlw	0
  9379  2B08  3440               	retlw	64
  9380  2B09  3400               	retlw	0
  9381                           
  9382                           ;initializer for _roundabout_leds
  9383  2B0A  3480               	retlw	128
  9384  2B0B  3400               	retlw	0
  9385  2B0C  3400               	retlw	0
  9386  2B0D  3401               	retlw	1
  9387  2B0E  3400               	retlw	0
  9388  2B0F  3402               	retlw	2
  9389  2B10  3400               	retlw	0
  9390  2B11  3408               	retlw	8
  9391  2B12  3400               	retlw	0
  9392  2B13  3410               	retlw	16
  9393  2B14  3400               	retlw	0
  9394  2B15  3420               	retlw	32
  9395  2B16  3400               	retlw	0
  9396  2B17  3440               	retlw	64
  9397  2B18  3400               	retlw	0
  9398  2B19  3480               	retlw	128
  9399  2B1A  3400               	retlw	0
  9400  2B1B  3440               	retlw	64
  9401  2B1C  3400               	retlw	0
  9402  2B1D  3420               	retlw	32
  9403  2B1E  3400               	retlw	0
  9404  2B1F  3410               	retlw	16
  9405  2B20  3400               	retlw	0
  9406  2B21  3408               	retlw	8
  9407  2B22  3400               	retlw	0
  9408  2B23  3402               	retlw	2
  9409  2B24  3400               	retlw	0
  9410  2B25  3401               	retlw	1
  9411                           
  9412                           ;initializer for _matrix_option
  9413  2B26  348A               	retlw	low (STR_73| (0+32768))
  9414  2B27  34BB               	retlw	high (STR_73| (0+32768))
  9415  2B28  3475               	retlw	low (STR_74| (0+32768))
  9416  2B29  34BB               	retlw	high (STR_74| (0+32768))
  9417  2B2A  3401               	retlw	low (STR_75| (0+32768))
  9418  2B2B  34BB               	retlw	high (STR_75| (0+32768))
  9419  2B2C  347C               	retlw	low (STR_76| (0+32768))
  9420  2B2D  34BB               	retlw	high (STR_76| (0+32768))
  9421  2B2E  34A9               	retlw	low (STR_77| (0+32768))
  9422  2B2F  34BB               	retlw	high (STR_77| (0+32768))
  9423  2B30  34ED               	retlw	low (STR_78| (0+32768))
  9424  2B31  34BA               	retlw	high (STR_78| (0+32768))
  9425  2B32  3491               	retlw	low (STR_79| (0+32768))
  9426  2B33  34BB               	retlw	high (STR_79| (0+32768))
  9427  2B34  342E               	retlw	low (STR_80| (0+32768))
  9428  2B35  34BB               	retlw	high (STR_80| (0+32768))
  9429  2B36  3483               	retlw	low (STR_81| (0+32768))
  9430  2B37  34BB               	retlw	high (STR_81| (0+32768))
  9431  2B38  3436               	retlw	low (STR_82| (0+32768))
  9432  2B39  34BB               	retlw	high (STR_82| (0+32768))
  9433                           
  9434                           	psect	idataBANK8
  9435  3692                     __pidataBANK8:	
  9436                           
  9437                           ;initializer for _curtain_leds_inverse
  9438  3692  3480               	retlw	128
  9439  3693  3400               	retlw	0
  9440  3694  34C0               	retlw	192
  9441  3695  3400               	retlw	0
  9442  3696  34E0               	retlw	224
  9443  3697  3400               	retlw	0
  9444  3698  34F0               	retlw	240
  9445  3699  3400               	retlw	0
  9446  369A  34F8               	retlw	248
  9447  369B  3400               	retlw	0
  9448  369C  34FC               	retlw	252
  9449  369D  3400               	retlw	0
  9450  369E  34FE               	retlw	254
  9451  369F  3400               	retlw	0
  9452  36A0  34FF               	retlw	255
  9453  36A1  3400               	retlw	0
  9454  36A2  34FE               	retlw	254
  9455  36A3  3400               	retlw	0
  9456  36A4  34FC               	retlw	252
  9457  36A5  3400               	retlw	0
  9458  36A6  34F8               	retlw	248
  9459  36A7  3400               	retlw	0
  9460  36A8  34F0               	retlw	240
  9461  36A9  3400               	retlw	0
  9462  36AA  34E0               	retlw	224
  9463  36AB  3400               	retlw	0
  9464  36AC  34C0               	retlw	192
  9465  36AD  3400               	retlw	0
  9466                           
  9467                           ;initializer for _curtain_leds
  9468  36AE  3480               	retlw	128
  9469  36AF  3400               	retlw	0
  9470  36B0  3480               	retlw	128
  9471  36B1  3401               	retlw	1
  9472  36B2  3480               	retlw	128
  9473  36B3  3403               	retlw	3
  9474  36B4  3480               	retlw	128
  9475  36B5  340B               	retlw	11
  9476  36B6  3480               	retlw	128
  9477  36B7  341B               	retlw	27
  9478  36B8  3480               	retlw	128
  9479  36B9  343B               	retlw	59
  9480  36BA  3480               	retlw	128
  9481  36BB  347B               	retlw	123
  9482  36BC  3480               	retlw	128
  9483  36BD  34FB               	retlw	251
  9484  36BE  3480               	retlw	128
  9485  36BF  347B               	retlw	123
  9486  36C0  3480               	retlw	128
  9487  36C1  343B               	retlw	59
  9488  36C2  3480               	retlw	128
  9489  36C3  341B               	retlw	27
  9490  36C4  3480               	retlw	128
  9491  36C5  340B               	retlw	11
  9492  36C6  3480               	retlw	128
  9493  36C7  3403               	retlw	3
  9494  36C8  3480               	retlw	128
  9495  36C9  3401               	retlw	1
  9496                           
  9497                           	psect	idataBANK10
  9498  3703                     __pidataBANK10:	
  9499                           
  9500                           ;initializer for _flashy_option
  9501  3703  34F9               	retlw	low (STR_9| (0+32768))
  9502  3704  34BB               	retlw	high (STR_9| (0+32768))
  9503  3705  3425               	retlw	low (STR_12| (0+32768))
  9504  3706  34BB               	retlw	high (STR_12| (0+32768))
  9505  3707  345E               	retlw	low (STR_13| (0+32768))
  9506  3708  34BB               	retlw	high (STR_13| (0+32768))
  9507  3709  3497               	retlw	low (STR_14| (0+32768))
  9508  370A  34BB               	retlw	high (STR_14| (0+32768))
  9509  370B  3432               	retlw	low (STR_15| (0+32768))
  9510  370C  34BA               	retlw	high (STR_15| (0+32768))
  9511  370D  340A               	retlw	low (STR_16| (0+32768))
  9512  370E  34BA               	retlw	high (STR_16| (0+32768))
  9513  370F  34C3               	retlw	low (STR_17| (0+32768))
  9514  3710  34B9               	retlw	high (STR_17| (0+32768))
  9515  3711  3456               	retlw	low (STR_18| (0+32768))
  9516  3712  34BB               	retlw	high (STR_18| (0+32768))
  9517  3713  34F4               	retlw	low (STR_19| (0+32768))
  9518  3714  34B9               	retlw	high (STR_19| (0+32768))
  9519  3715  3471               	retlw	low (STR_20| (0+32768))
  9520  3716  34B9               	retlw	high (STR_20| (0+32768))
  9521  3717  34B0               	retlw	low (STR_21| (0+32768))
  9522  3718  34B8               	retlw	high (STR_21| (0+32768))
  9523  3719  3419               	retlw	low (STR_22| (0+32768))
  9524  371A  34B9               	retlw	high (STR_22| (0+32768))
  9525  371B  3454               	retlw	low (STR_23| (0+32768))
  9526  371C  34B9               	retlw	high (STR_23| (0+32768))
  9527  371D  34A8               	retlw	low (STR_24| (0+32768))
  9528  371E  34B9               	retlw	high (STR_24| (0+32768))
  9529  371F  3488               	retlw	low (STR_25| (0+32768))
  9530  3720  34B8               	retlw	high (STR_25| (0+32768))
  9531  3721  3457               	retlw	low (STR_26| (0+32768))
  9532  3722  34BA               	retlw	high (STR_26| (0+32768))
  9533  3723  341F               	retlw	low (STR_27| (0+32768))
  9534  3724  34BA               	retlw	high (STR_27| (0+32768))
  9535  3725  3437               	retlw	low (STR_28| (0+32768))
  9536  3726  34B9               	retlw	high (STR_28| (0+32768))
  9537  3727  34CB               	retlw	low (STR_29| (0+32768))
  9538  3728  34BA               	retlw	high (STR_29| (0+32768))
  9539  3729  3489               	retlw	low (STR_30| (0+32768))
  9540  372A  34BA               	retlw	high (STR_30| (0+32768))
  9541  372B  34D4               	retlw	low (STR_31| (0+32768))
  9542  372C  34B8               	retlw	high (STR_31| (0+32768))
  9543  372D  3479               	retlw	low (STR_32| (0+32768))
  9544  372E  34BA               	retlw	high (STR_32| (0+32768))
  9545  372F  34F7               	retlw	low (STR_33| (0+32768))
  9546  3730  34B8               	retlw	high (STR_33| (0+32768))
  9547  3731  340A               	retlw	low (STR_34| (0+32768))
  9548  3732  34A8               	retlw	high (STR_34| (0+32768))
  9549  3733  3468               	retlw	low (STR_35| (0+32768))
  9550  3734  34BA               	retlw	high (STR_35| (0+32768))
  9551  3735  3400               	retlw	low (STR_36| (0+32768))
  9552  3736  34B8               	retlw	high (STR_36| (0+32768))
  9553  3737  34B2               	retlw	low (STR_37| (0+32768))
  9554  3738  34BA               	retlw	high (STR_37| (0+32768))
  9555  3739  345D               	retlw	low (STR_38| (0+32768))
  9556  373A  34B8               	retlw	high (STR_38| (0+32768))
  9557  373B  347D               	retlw	low ((STR_34+115)| (0+32768))
  9558  373C  34A8               	retlw	high ((STR_34+115)| (0+32768))
  9559                           
  9560                           	psect	idataBIGRAM
  9561  186B                     __pidataBIGRAM:	
  9562                           
  9563                           ;initializer for _asciiCharTableLookup
  9564  186B  3400               	retlw	0
  9565  186C  3400               	retlw	0
  9566  186D  3400               	retlw	0
  9567  186E  3420               	retlw	32
  9568  186F  3410               	retlw	16
  9569  1870  3410               	retlw	16
  9570  1871  3420               	retlw	32
  9571  1872  3400               	retlw	0
  9572  1873  3410               	retlw	16
  9573  1874  3410               	retlw	16
  9574  1875  34A5               	retlw	165
  9575  1876  3421               	retlw	33
  9576  1877  34A5               	retlw	165
  9577  1878  3460               	retlw	96
  9578  1879  3410               	retlw	16
  9579  187A  3430               	retlw	48
  9580  187B  3400               	retlw	0
  9581  187C  3412               	retlw	18
  9582  187D  3410               	retlw	16
  9583  187E  3408               	retlw	8
  9584  187F  3420               	retlw	32
  9585  1880  3420               	retlw	32
  9586  1881  3485               	retlw	133
  9587  1882  3445               	retlw	69
  9588  1883  34B1               	retlw	177
  9589  1884  3430               	retlw	48
  9590  1885  3410               	retlw	16
  9591  1886  3410               	retlw	16
  9592  1887  3410               	retlw	16
  9593  1888  3410               	retlw	16
  9594  1889  3410               	retlw	16
  9595  188A  3410               	retlw	16
  9596  188B  3410               	retlw	16
  9597  188C  3410               	retlw	16
  9598  188D  3410               	retlw	16
  9599  188E  3410               	retlw	16
  9600  188F  3410               	retlw	16
  9601  1890  3410               	retlw	16
  9602  1891  3410               	retlw	16
  9603  1892  3410               	retlw	16
  9604  1893  3410               	retlw	16
  9605  1894  3410               	retlw	16
  9606  1895  3410               	retlw	16
  9607  1896  3410               	retlw	16
  9608  1897  3410               	retlw	16
  9609  1898  3410               	retlw	16
  9610  1899  3410               	retlw	16
  9611  189A  3410               	retlw	16
  9612  189B  3410               	retlw	16
  9613  189C  3410               	retlw	16
  9614  189D  3410               	retlw	16
  9615  189E  3410               	retlw	16
  9616  189F  3410               	retlw	16
  9617  18A0  3410               	retlw	16
  9618  18A1  3410               	retlw	16
  9619  18A2  3410               	retlw	16
  9620  18A3  3410               	retlw	16
  9621  18A4  3410               	retlw	16
  9622  18A5  3410               	retlw	16
  9623  18A6  3410               	retlw	16
  9624  18A7  3410               	retlw	16
  9625  18A8  3410               	retlw	16
  9626  18A9  3410               	retlw	16
  9627  18AA  3410               	retlw	16
  9628  18AB  3400               	retlw	0
  9629  18AC  3400               	retlw	0
  9630  18AD  34C0               	retlw	192
  9631  18AE  3440               	retlw	64
  9632  18AF  3400               	retlw	0
  9633  18B0  3444               	retlw	68
  9634  18B1  3410               	retlw	16
  9635  18B2  3410               	retlw	16
  9636  18B3  34B4               	retlw	180
  9637  18B4  3435               	retlw	53
  9638  18B5  3410               	retlw	16
  9639  18B6  3410               	retlw	16
  9640  18B7  3410               	retlw	16
  9641  18B8  3410               	retlw	16
  9642  18B9  3400               	retlw	0
  9643  18BA  3404               	retlw	4
  9644  18BB  3408               	retlw	8
  9645  18BC  3408               	retlw	8
  9646  18BD  3402               	retlw	2
  9647  18BE  3402               	retlw	2
  9648  18BF  341E               	retlw	30
  9649  18C0  341E               	retlw	30
  9650  18C1  3414               	retlw	20
  9651  18C2  3414               	retlw	20
  9652  18C3  3440               	retlw	64
  9653  18C4  3400               	retlw	0
  9654  18C5  3410               	retlw	16
  9655  18C6  3410               	retlw	16
  9656  18C7  3440               	retlw	64
  9657  18C8  3400               	retlw	0
  9658  18C9  3402               	retlw	2
  9659  18CA  3408               	retlw	8
  9660  18CB  34A9               	retlw	169
  9661  18CC  3463               	retlw	99
  9662  18CD  3480               	retlw	128
  9663  18CE  3440               	retlw	64
  9664  18CF  3431               	retlw	49
  9665  18D0  3470               	retlw	112
  9666  18D1  34B0               	retlw	176
  9667  18D2  3460               	retlw	96
  9668  18D3  3490               	retlw	144
  9669  18D4  3451               	retlw	81
  9670  18D5  34B0               	retlw	176
  9671  18D6  3431               	retlw	49
  9672  18D7  34B1               	retlw	177
  9673  18D8  3431               	retlw	49
  9674  18D9  3480               	retlw	128
  9675  18DA  3460               	retlw	96
  9676  18DB  34B1               	retlw	177
  9677  18DC  3471               	retlw	113
  9678  18DD  3490               	retlw	144
  9679  18DE  3471               	retlw	113
  9680  18DF  3410               	retlw	16
  9681  18E0  3410               	retlw	16
  9682  18E1  3410               	retlw	16
  9683  18E2  3410               	retlw	16
  9684  18E3  3408               	retlw	8
  9685  18E4  3408               	retlw	8
  9686  18E5  3430               	retlw	48
  9687  18E6  3410               	retlw	16
  9688  18E7  3402               	retlw	2
  9689  18E8  3402               	retlw	2
  9690  18E9  3414               	retlw	20
  9691  18EA  34E1               	retlw	225
  9692  18EB  34A5               	retlw	165
  9693  18EC  3470               	retlw	112
  9694  18ED  3491               	retlw	145
  9695  18EE  3471               	retlw	113
  9696  18EF  34B1               	retlw	177
  9697  18F0  3411               	retlw	17
  9698  18F1  3421               	retlw	33
  9699  18F2  3421               	retlw	33
  9700  18F3  34B1               	retlw	177
  9701  18F4  3450               	retlw	80
  9702  18F5  3421               	retlw	33
  9703  18F6  3431               	retlw	49
  9704  18F7  3401               	retlw	1
  9705  18F8  3431               	retlw	49
  9706  18F9  34B1               	retlw	177
  9707  18FA  3421               	retlw	33
  9708  18FB  3491               	retlw	145
  9709  18FC  3451               	retlw	81
  9710  18FD  3424               	retlw	36
  9711  18FE  3424               	retlw	36
  9712  18FF  34A1               	retlw	161
  9713  1900  3440               	retlw	64
  9714  1901  3409               	retlw	9
  9715  1902  3419               	retlw	25
  9716  1903  3421               	retlw	33
  9717  1904  3401               	retlw	1
  9718  1905  3481               	retlw	129
  9719  1906  344B               	retlw	75
  9720  1907  3489               	retlw	137
  9721  1908  3443               	retlw	67
  9722  1909  34A1               	retlw	161
  9723  190A  3461               	retlw	97
  9724  190B  3411               	retlw	17
  9725  190C  3471               	retlw	113
  9726  190D  34A9               	retlw	169
  9727  190E  3461               	retlw	97
  9728  190F  3419               	retlw	25
  9729  1910  3471               	retlw	113
  9730  1911  34B0               	retlw	176
  9731  1912  3431               	retlw	49
  9732  1913  3404               	retlw	4
  9733  1914  3424               	retlw	36
  9734  1915  34A1               	retlw	161
  9735  1916  3441               	retlw	65
  9736  1917  3403               	retlw	3
  9737  1918  3409               	retlw	9
  9738  1919  348B               	retlw	139
  9739  191A  3441               	retlw	65
  9740  191B  340A               	retlw	10
  9741  191C  340A               	retlw	10
  9742  191D  3404               	retlw	4
  9743  191E  340A               	retlw	10
  9744  191F  3422               	retlw	34
  9745  1920  3428               	retlw	40
  9746  1921  3421               	retlw	33
  9747  1922  3421               	retlw	33
  9748  1923  3408               	retlw	8
  9749  1924  3402               	retlw	2
  9750  1925  34A0               	retlw	160
  9751  1926  3460               	retlw	96
  9752  1927  340A               	retlw	10
  9753  1928  3400               	retlw	0
  9754  1929  3420               	retlw	32
  9755  192A  3400               	retlw	0
  9756  192B  3410               	retlw	16
  9757  192C  3410               	retlw	16
  9758  192D  3491               	retlw	145
  9759  192E  3471               	retlw	113
  9760  192F  34B1               	retlw	177
  9761  1930  3411               	retlw	17
  9762  1931  3431               	retlw	49
  9763  1932  3410               	retlw	16
  9764  1933  34B1               	retlw	177
  9765  1934  3450               	retlw	80
  9766  1935  3421               	retlw	33
  9767  1936  3431               	retlw	49
  9768  1937  3401               	retlw	1
  9769  1938  3431               	retlw	49
  9770  1939  34B1               	retlw	177
  9771  193A  3421               	retlw	33
  9772  193B  3491               	retlw	145
  9773  193C  3451               	retlw	81
  9774  193D  3424               	retlw	36
  9775  193E  3424               	retlw	36
  9776  193F  34A1               	retlw	161
  9777  1940  3440               	retlw	64
  9778  1941  3409               	retlw	9
  9779  1942  3419               	retlw	25
  9780  1943  3421               	retlw	33
  9781  1944  3401               	retlw	1
  9782  1945  3481               	retlw	129
  9783  1946  344B               	retlw	75
  9784  1947  3489               	retlw	137
  9785  1948  3443               	retlw	67
  9786  1949  34A1               	retlw	161
  9787  194A  3461               	retlw	97
  9788  194B  3411               	retlw	17
  9789  194C  3471               	retlw	113
  9790  194D  34A9               	retlw	169
  9791  194E  3461               	retlw	97
  9792  194F  3419               	retlw	25
  9793  1950  3471               	retlw	113
  9794  1951  34B0               	retlw	176
  9795  1952  3431               	retlw	49
  9796  1953  3404               	retlw	4
  9797  1954  3424               	retlw	36
  9798  1955  34A1               	retlw	161
  9799  1956  3441               	retlw	65
  9800  1957  3403               	retlw	3
  9801  1958  3409               	retlw	9
  9802  1959  348B               	retlw	139
  9803  195A  3441               	retlw	65
  9804  195B  340A               	retlw	10
  9805  195C  340A               	retlw	10
  9806  195D  3404               	retlw	4
  9807  195E  340A               	retlw	10
  9808  195F  3422               	retlw	34
  9809  1960  3428               	retlw	40
  9810  1961  3408               	retlw	8
  9811  1962  3408               	retlw	8
  9812  1963  3404               	retlw	4
  9813  1964  3404               	retlw	4
  9814  1965  3402               	retlw	2
  9815  1966  3402               	retlw	2
  9816  1967  3410               	retlw	16
  9817  1968  3410               	retlw	16
  9818  1969  34FF               	retlw	255
  9819  196A  34FF               	retlw	255
  9820                           
  9821                           	psect	stringtext1
  9822  2000                     __pstringtext1:	
  9823  2000                     _gamma_table_256x1k:	
  9824  2000  3400               	retlw	0
  9825  2001  3400               	retlw	0
  9826  2002  3400               	retlw	0
  9827  2003  3400               	retlw	0
  9828  2004  3400               	retlw	0
  9829  2005  3400               	retlw	0
  9830  2006  3400               	retlw	0
  9831  2007  3400               	retlw	0
  9832  2008  3400               	retlw	0
  9833  2009  3400               	retlw	0
  9834  200A  3400               	retlw	0
  9835  200B  3400               	retlw	0
  9836  200C  3400               	retlw	0
  9837  200D  3400               	retlw	0
  9838  200E  3400               	retlw	0
  9839  200F  3400               	retlw	0
  9840  2010  3400               	retlw	0
  9841  2011  3400               	retlw	0
  9842  2012  3400               	retlw	0
  9843  2013  3400               	retlw	0
  9844  2014  3400               	retlw	0
  9845  2015  3400               	retlw	0
  9846  2016  3400               	retlw	0
  9847  2017  3400               	retlw	0
  9848  2018  3400               	retlw	0
  9849  2019  3400               	retlw	0
  9850  201A  3400               	retlw	0
  9851  201B  3400               	retlw	0
  9852  201C  3400               	retlw	0
  9853  201D  3400               	retlw	0
  9854  201E  3401               	retlw	1
  9855  201F  3400               	retlw	0
  9856  2020  3401               	retlw	1
  9857  2021  3400               	retlw	0
  9858  2022  3401               	retlw	1
  9859  2023  3400               	retlw	0
  9860  2024  3401               	retlw	1
  9861  2025  3400               	retlw	0
  9862  2026  3401               	retlw	1
  9863  2027  3400               	retlw	0
  9864  2028  3401               	retlw	1
  9865  2029  3400               	retlw	0
  9866  202A  3402               	retlw	2
  9867  202B  3400               	retlw	0
  9868  202C  3402               	retlw	2
  9869  202D  3400               	retlw	0
  9870  202E  3402               	retlw	2
  9871  202F  3400               	retlw	0
  9872  2030  3403               	retlw	3
  9873  2031  3400               	retlw	0
  9874  2032  3403               	retlw	3
  9875  2033  3400               	retlw	0
  9876  2034  3403               	retlw	3
  9877  2035  3400               	retlw	0
  9878  2036  3404               	retlw	4
  9879  2037  3400               	retlw	0
  9880  2038  3404               	retlw	4
  9881  2039  3400               	retlw	0
  9882  203A  3404               	retlw	4
  9883  203B  3400               	retlw	0
  9884  203C  3405               	retlw	5
  9885  203D  3400               	retlw	0
  9886  203E  3405               	retlw	5
  9887  203F  3400               	retlw	0
  9888  2040  3406               	retlw	6
  9889  2041  3400               	retlw	0
  9890  2042  3406               	retlw	6
  9891  2043  3400               	retlw	0
  9892  2044  3407               	retlw	7
  9893  2045  3400               	retlw	0
  9894  2046  3407               	retlw	7
  9895  2047  3400               	retlw	0
  9896  2048  3408               	retlw	8
  9897  2049  3400               	retlw	0
  9898  204A  3408               	retlw	8
  9899  204B  3400               	retlw	0
  9900  204C  3409               	retlw	9
  9901  204D  3400               	retlw	0
  9902  204E  3409               	retlw	9
  9903  204F  3400               	retlw	0
  9904  2050  340A               	retlw	10
  9905  2051  3400               	retlw	0
  9906  2052  340B               	retlw	11
  9907  2053  3400               	retlw	0
  9908  2054  340B               	retlw	11
  9909  2055  3400               	retlw	0
  9910  2056  340C               	retlw	12
  9911  2057  3400               	retlw	0
  9912  2058  340D               	retlw	13
  9913  2059  3400               	retlw	0
  9914  205A  340E               	retlw	14
  9915  205B  3400               	retlw	0
  9916  205C  340E               	retlw	14
  9917  205D  3400               	retlw	0
  9918  205E  340F               	retlw	15
  9919  205F  3400               	retlw	0
  9920  2060  3410               	retlw	16
  9921  2061  3400               	retlw	0
  9922  2062  3411               	retlw	17
  9923  2063  3400               	retlw	0
  9924  2064  3412               	retlw	18
  9925  2065  3400               	retlw	0
  9926  2066  3413               	retlw	19
  9927  2067  3400               	retlw	0
  9928  2068  3413               	retlw	19
  9929  2069  3400               	retlw	0
  9930  206A  3414               	retlw	20
  9931  206B  3400               	retlw	0
  9932  206C  3415               	retlw	21
  9933  206D  3400               	retlw	0
  9934  206E  3416               	retlw	22
  9935  206F  3400               	retlw	0
  9936  2070  3417               	retlw	23
  9937  2071  3400               	retlw	0
  9938  2072  3419               	retlw	25
  9939  2073  3400               	retlw	0
  9940  2074  341A               	retlw	26
  9941  2075  3400               	retlw	0
  9942  2076  341B               	retlw	27
  9943  2077  3400               	retlw	0
  9944  2078  341C               	retlw	28
  9945  2079  3400               	retlw	0
  9946  207A  341D               	retlw	29
  9947  207B  3400               	retlw	0
  9948  207C  341E               	retlw	30
  9949  207D  3400               	retlw	0
  9950  207E  3420               	retlw	32
  9951  207F  3400               	retlw	0
  9952  2080  3421               	retlw	33
  9953  2081  3400               	retlw	0
  9954  2082  3422               	retlw	34
  9955  2083  3400               	retlw	0
  9956  2084  3423               	retlw	35
  9957  2085  3400               	retlw	0
  9958  2086  3425               	retlw	37
  9959  2087  3400               	retlw	0
  9960  2088  3426               	retlw	38
  9961  2089  3400               	retlw	0
  9962  208A  3428               	retlw	40
  9963  208B  3400               	retlw	0
  9964  208C  3429               	retlw	41
  9965  208D  3400               	retlw	0
  9966  208E  342A               	retlw	42
  9967  208F  3400               	retlw	0
  9968  2090  342C               	retlw	44
  9969  2091  3400               	retlw	0
  9970  2092  342E               	retlw	46
  9971  2093  3400               	retlw	0
  9972  2094  342F               	retlw	47
  9973  2095  3400               	retlw	0
  9974  2096  3431               	retlw	49
  9975  2097  3400               	retlw	0
  9976  2098  3432               	retlw	50
  9977  2099  3400               	retlw	0
  9978  209A  3434               	retlw	52
  9979  209B  3400               	retlw	0
  9980  209C  3436               	retlw	54
  9981  209D  3400               	retlw	0
  9982  209E  3437               	retlw	55
  9983  209F  3400               	retlw	0
  9984  20A0  3439               	retlw	57
  9985  20A1  3400               	retlw	0
  9986  20A2  343B               	retlw	59
  9987  20A3  3400               	retlw	0
  9988  20A4  343D               	retlw	61
  9989  20A5  3400               	retlw	0
  9990  20A6  343F               	retlw	63
  9991  20A7  3400               	retlw	0
  9992  20A8  3441               	retlw	65
  9993  20A9  3400               	retlw	0
  9994  20AA  3442               	retlw	66
  9995  20AB  3400               	retlw	0
  9996  20AC  3444               	retlw	68
  9997  20AD  3400               	retlw	0
  9998  20AE  3446               	retlw	70
  9999  20AF  3400               	retlw	0
 10000  20B0  3448               	retlw	72
 10001  20B1  3400               	retlw	0
 10002  20B2  344B               	retlw	75
 10003  20B3  3400               	retlw	0
 10004  20B4  344D               	retlw	77
 10005  20B5  3400               	retlw	0
 10006  20B6  344F               	retlw	79
 10007  20B7  3400               	retlw	0
 10008  20B8  3451               	retlw	81
 10009  20B9  3400               	retlw	0
 10010  20BA  3453               	retlw	83
 10011  20BB  3400               	retlw	0
 10012  20BC  3455               	retlw	85
 10013  20BD  3400               	retlw	0
 10014  20BE  3458               	retlw	88
 10015  20BF  3400               	retlw	0
 10016  20C0  345A               	retlw	90
 10017  20C1  3400               	retlw	0
 10018  20C2  345C               	retlw	92
 10019  20C3  3400               	retlw	0
 10020  20C4  345F               	retlw	95
 10021  20C5  3400               	retlw	0
 10022  20C6  3461               	retlw	97
 10023  20C7  3400               	retlw	0
 10024  20C8  3464               	retlw	100
 10025  20C9  3400               	retlw	0
 10026  20CA  3466               	retlw	102
 10027  20CB  3400               	retlw	0
 10028  20CC  3469               	retlw	105
 10029  20CD  3400               	retlw	0
 10030  20CE  346B               	retlw	107
 10031  20CF  3400               	retlw	0
 10032  20D0  346E               	retlw	110
 10033  20D1  3400               	retlw	0
 10034  20D2  3470               	retlw	112
 10035  20D3  3400               	retlw	0
 10036  20D4  3473               	retlw	115
 10037  20D5  3400               	retlw	0
 10038  20D6  3476               	retlw	118
 10039  20D7  3400               	retlw	0
 10040  20D8  3479               	retlw	121
 10041  20D9  3400               	retlw	0
 10042  20DA  347B               	retlw	123
 10043  20DB  3400               	retlw	0
 10044  20DC  347E               	retlw	126
 10045  20DD  3400               	retlw	0
 10046  20DE  3481               	retlw	129
 10047  20DF  3400               	retlw	0
 10048  20E0  3484               	retlw	132
 10049  20E1  3400               	retlw	0
 10050  20E2  3487               	retlw	135
 10051  20E3  3400               	retlw	0
 10052  20E4  348A               	retlw	138
 10053  20E5  3400               	retlw	0
 10054  20E6  348D               	retlw	141
 10055  20E7  3400               	retlw	0
 10056  20E8  3490               	retlw	144
 10057  20E9  3400               	retlw	0
 10058  20EA  3493               	retlw	147
 10059  20EB  3400               	retlw	0
 10060  20EC  3496               	retlw	150
 10061  20ED  3400               	retlw	0
 10062  20EE  349A               	retlw	154
 10063  20EF  3400               	retlw	0
 10064  20F0  349D               	retlw	157
 10065  20F1  3400               	retlw	0
 10066  20F2  34A0               	retlw	160
 10067  20F3  3400               	retlw	0
 10068  20F4  34A3               	retlw	163
 10069  20F5  3400               	retlw	0
 10070  20F6  34A7               	retlw	167
 10071  20F7  3400               	retlw	0
 10072  20F8  34AA               	retlw	170
 10073  20F9  3400               	retlw	0
 10074  20FA  34AE               	retlw	174
 10075  20FB  3400               	retlw	0
 10076  20FC  34B1               	retlw	177
 10077  20FD  3400               	retlw	0
 10078  20FE  34B5               	retlw	181
 10079  20FF  3400               	retlw	0
 10080  2100  34B8               	retlw	184
 10081  2101  3400               	retlw	0
 10082  2102  34BC               	retlw	188
 10083  2103  3400               	retlw	0
 10084  2104  34BF               	retlw	191
 10085  2105  3400               	retlw	0
 10086  2106  34C3               	retlw	195
 10087  2107  3400               	retlw	0
 10088  2108  34C7               	retlw	199
 10089  2109  3400               	retlw	0
 10090  210A  34CA               	retlw	202
 10091  210B  3400               	retlw	0
 10092  210C  34CE               	retlw	206
 10093  210D  3400               	retlw	0
 10094  210E  34D2               	retlw	210
 10095  210F  3400               	retlw	0
 10096  2110  34D6               	retlw	214
 10097  2111  3400               	retlw	0
 10098  2112  34DA               	retlw	218
 10099  2113  3400               	retlw	0
 10100  2114  34DE               	retlw	222
 10101  2115  3400               	retlw	0
 10102  2116  34E2               	retlw	226
 10103  2117  3400               	retlw	0
 10104  2118  34E6               	retlw	230
 10105  2119  3400               	retlw	0
 10106  211A  34EA               	retlw	234
 10107  211B  3400               	retlw	0
 10108  211C  34EE               	retlw	238
 10109  211D  3400               	retlw	0
 10110  211E  34F3               	retlw	243
 10111  211F  3400               	retlw	0
 10112  2120  34F7               	retlw	247
 10113  2121  3400               	retlw	0
 10114  2122  34FB               	retlw	251
 10115  2123  3400               	retlw	0
 10116  2124  34FF               	retlw	255
 10117  2125  3400               	retlw	0
 10118  2126  3404               	retlw	4
 10119  2127  3401               	retlw	1
 10120  2128  3408               	retlw	8
 10121  2129  3401               	retlw	1
 10122  212A  340D               	retlw	13
 10123  212B  3401               	retlw	1
 10124  212C  3411               	retlw	17
 10125  212D  3401               	retlw	1
 10126  212E  3416               	retlw	22
 10127  212F  3401               	retlw	1
 10128  2130  341A               	retlw	26
 10129  2131  3401               	retlw	1
 10130  2132  341F               	retlw	31
 10131  2133  3401               	retlw	1
 10132  2134  3424               	retlw	36
 10133  2135  3401               	retlw	1
 10134  2136  3428               	retlw	40
 10135  2137  3401               	retlw	1
 10136  2138  342D               	retlw	45
 10137  2139  3401               	retlw	1
 10138  213A  3432               	retlw	50
 10139  213B  3401               	retlw	1
 10140  213C  3437               	retlw	55
 10141  213D  3401               	retlw	1
 10142  213E  343C               	retlw	60
 10143  213F  3401               	retlw	1
 10144  2140  3441               	retlw	65
 10145  2141  3401               	retlw	1
 10146  2142  3446               	retlw	70
 10147  2143  3401               	retlw	1
 10148  2144  344B               	retlw	75
 10149  2145  3401               	retlw	1
 10150  2146  3450               	retlw	80
 10151  2147  3401               	retlw	1
 10152  2148  3455               	retlw	85
 10153  2149  3401               	retlw	1
 10154  214A  345A               	retlw	90
 10155  214B  3401               	retlw	1
 10156  214C  345F               	retlw	95
 10157  214D  3401               	retlw	1
 10158  214E  3465               	retlw	101
 10159  214F  3401               	retlw	1
 10160  2150  346A               	retlw	106
 10161  2151  3401               	retlw	1
 10162  2152  346F               	retlw	111
 10163  2153  3401               	retlw	1
 10164  2154  3475               	retlw	117
 10165  2155  3401               	retlw	1
 10166  2156  347A               	retlw	122
 10167  2157  3401               	retlw	1
 10168  2158  3480               	retlw	128
 10169  2159  3401               	retlw	1
 10170  215A  3486               	retlw	134
 10171  215B  3401               	retlw	1
 10172  215C  348B               	retlw	139
 10173  215D  3401               	retlw	1
 10174  215E  3491               	retlw	145
 10175  215F  3401               	retlw	1
 10176  2160  3497               	retlw	151
 10177  2161  3401               	retlw	1
 10178  2162  349C               	retlw	156
 10179  2163  3401               	retlw	1
 10180  2164  34A2               	retlw	162
 10181  2165  3401               	retlw	1
 10182  2166  34A8               	retlw	168
 10183  2167  3401               	retlw	1
 10184  2168  34AE               	retlw	174
 10185  2169  3401               	retlw	1
 10186  216A  34B4               	retlw	180
 10187  216B  3401               	retlw	1
 10188  216C  34BA               	retlw	186
 10189  216D  3401               	retlw	1
 10190  216E  34C0               	retlw	192
 10191  216F  3401               	retlw	1
 10192  2170  34C6               	retlw	198
 10193  2171  3401               	retlw	1
 10194  2172  34CC               	retlw	204
 10195  2173  3401               	retlw	1
 10196  2174  34D2               	retlw	210
 10197  2175  3401               	retlw	1
 10198  2176  34D9               	retlw	217
 10199  2177  3401               	retlw	1
 10200  2178  34DF               	retlw	223
 10201  2179  3401               	retlw	1
 10202  217A  34E5               	retlw	229
 10203  217B  3401               	retlw	1
 10204  217C  34EC               	retlw	236
 10205  217D  3401               	retlw	1
 10206  217E  34F2               	retlw	242
 10207  217F  3401               	retlw	1
 10208  2180  34F9               	retlw	249
 10209  2181  3401               	retlw	1
 10210  2182  34FF               	retlw	255
 10211  2183  3401               	retlw	1
 10212  2184  3406               	retlw	6
 10213  2185  3402               	retlw	2
 10214  2186  340D               	retlw	13
 10215  2187  3402               	retlw	2
 10216  2188  3413               	retlw	19
 10217  2189  3402               	retlw	2
 10218  218A  341A               	retlw	26
 10219  218B  3402               	retlw	2
 10220  218C  3421               	retlw	33
 10221  218D  3402               	retlw	2
 10222  218E  3428               	retlw	40
 10223  218F  3402               	retlw	2
 10224  2190  342F               	retlw	47
 10225  2191  3402               	retlw	2
 10226  2192  3436               	retlw	54
 10227  2193  3402               	retlw	2
 10228  2194  343D               	retlw	61
 10229  2195  3402               	retlw	2
 10230  2196  3444               	retlw	68
 10231  2197  3402               	retlw	2
 10232  2198  344B               	retlw	75
 10233  2199  3402               	retlw	2
 10234  219A  3452               	retlw	82
 10235  219B  3402               	retlw	2
 10236  219C  345A               	retlw	90
 10237  219D  3402               	retlw	2
 10238  219E  3461               	retlw	97
 10239  219F  3402               	retlw	2
 10240  21A0  3468               	retlw	104
 10241  21A1  3402               	retlw	2
 10242  21A2  3470               	retlw	112
 10243  21A3  3402               	retlw	2
 10244  21A4  3477               	retlw	119
 10245  21A5  3402               	retlw	2
 10246  21A6  347F               	retlw	127
 10247  21A7  3402               	retlw	2
 10248  21A8  3486               	retlw	134
 10249  21A9  3402               	retlw	2
 10250  21AA  348E               	retlw	142
 10251  21AB  3402               	retlw	2
 10252  21AC  3495               	retlw	149
 10253  21AD  3402               	retlw	2
 10254  21AE  349D               	retlw	157
 10255  21AF  3402               	retlw	2
 10256  21B0  34A5               	retlw	165
 10257  21B1  3402               	retlw	2
 10258  21B2  34AD               	retlw	173
 10259  21B3  3402               	retlw	2
 10260  21B4  34B5               	retlw	181
 10261  21B5  3402               	retlw	2
 10262  21B6  34BD               	retlw	189
 10263  21B7  3402               	retlw	2
 10264  21B8  34C5               	retlw	197
 10265  21B9  3402               	retlw	2
 10266  21BA  34CD               	retlw	205
 10267  21BB  3402               	retlw	2
 10268  21BC  34D5               	retlw	213
 10269  21BD  3402               	retlw	2
 10270  21BE  34DD               	retlw	221
 10271  21BF  3402               	retlw	2
 10272  21C0  34E5               	retlw	229
 10273  21C1  3402               	retlw	2
 10274  21C2  34ED               	retlw	237
 10275  21C3  3402               	retlw	2
 10276  21C4  34F6               	retlw	246
 10277  21C5  3402               	retlw	2
 10278  21C6  34FE               	retlw	254
 10279  21C7  3402               	retlw	2
 10280  21C8  3406               	retlw	6
 10281  21C9  3403               	retlw	3
 10282  21CA  340F               	retlw	15
 10283  21CB  3403               	retlw	3
 10284  21CC  3418               	retlw	24
 10285  21CD  3403               	retlw	3
 10286  21CE  3420               	retlw	32
 10287  21CF  3403               	retlw	3
 10288  21D0  3429               	retlw	41
 10289  21D1  3403               	retlw	3
 10290  21D2  3431               	retlw	49
 10291  21D3  3403               	retlw	3
 10292  21D4  343A               	retlw	58
 10293  21D5  3403               	retlw	3
 10294  21D6  3443               	retlw	67
 10295  21D7  3403               	retlw	3
 10296  21D8  344C               	retlw	76
 10297  21D9  3403               	retlw	3
 10298  21DA  3455               	retlw	85
 10299  21DB  3403               	retlw	3
 10300  21DC  345E               	retlw	94
 10301  21DD  3403               	retlw	3
 10302  21DE  3467               	retlw	103
 10303  21DF  3403               	retlw	3
 10304  21E0  3470               	retlw	112
 10305  21E1  3403               	retlw	3
 10306  21E2  3479               	retlw	121
 10307  21E3  3403               	retlw	3
 10308  21E4  3482               	retlw	130
 10309  21E5  3403               	retlw	3
 10310  21E6  348C               	retlw	140
 10311  21E7  3403               	retlw	3
 10312  21E8  3495               	retlw	149
 10313  21E9  3403               	retlw	3
 10314  21EA  349E               	retlw	158
 10315  21EB  3403               	retlw	3
 10316  21EC  34A8               	retlw	168
 10317  21ED  3403               	retlw	3
 10318  21EE  34B1               	retlw	177
 10319  21EF  3403               	retlw	3
 10320  21F0  34BB               	retlw	187
 10321  21F1  3403               	retlw	3
 10322  21F2  34C5               	retlw	197
 10323  21F3  3403               	retlw	3
 10324  21F4  34CE               	retlw	206
 10325  21F5  3403               	retlw	3
 10326  21F6  34D8               	retlw	216
 10327  21F7  3403               	retlw	3
 10328  21F8  34E2               	retlw	226
 10329  21F9  3403               	retlw	3
 10330  21FA  34EC               	retlw	236
 10331  21FB  3403               	retlw	3
 10332  21FC  34F6               	retlw	246
 10333  21FD  3403               	retlw	3
 10334  21FE  34FF               	retlw	255
 10335  21FF  3403               	retlw	3
 10336  2200                     __end_of_gamma_table_256x1k:	
 10337                           
 10338                           	psect	stringtext2
 10339  2800                     __pstringtext2:	
 10340  2800                     _dpowers:	
 10341  2800  3401               	retlw	1
 10342  2801  3400               	retlw	0
 10343  2802  340A               	retlw	10
 10344  2803  3400               	retlw	0
 10345  2804  3464               	retlw	100
 10346  2805  3400               	retlw	0
 10347  2806  34E8               	retlw	232
 10348  2807  3403               	retlw	3
 10349  2808  3410               	retlw	16
 10350  2809  3427               	retlw	39
 10351  280A                     __end_of_dpowers:	
 10352  000D                     _PORTBbits	set	13
 10353  000C                     _PORTAbits	set	12
 10354  000E                     _PORTCbits	set	14
 10355  000B                     _INTCONbits	set	11
 10356  0017                     _T0CON0bits	set	23
 10357  0010                     _PIR0bits	set	16
 10358  0015                     _TMR0L	set	21
 10359  0016                     _TMR0H	set	22
 10360  0018                     _T0CON1	set	24
 10361  0017                     _T0CON0	set	23
 10362  0012                     _PIR2bits	set	18
 10363  001F                     _T2CONbits	set	31
 10364  0011                     _PIR1bits	set	17
 10365  001D                     _TMR2	set	29
 10366  001E                     _PR2	set	30
 10367  001F                     _T2CON	set	31
 10368  005F                     _GIE	set	95
 10369  0090                     _PIE0bits	set	144
 10370  008E                     _TRISC	set	142
 10371  008D                     _TRISB	set	141
 10372  008C                     _TRISA	set	140
 10373  0097                     _WDTCON	set	151
 10374  010E                     _LATCbits	set	270
 10375  010D                     _LATBbits	set	269
 10376  010E                     _LATC	set	270
 10377  010D                     _LATB	set	269
 10378  010C                     _LATA	set	268
 10379  018C                     _ANSELA	set	396
 10380  018D                     _ANSELB	set	397
 10381  018E                     _ANSELC	set	398
 10382  020E                     _WPUC	set	526
 10383  020C                     _WPUA	set	524
 10384  020D                     _WPUB	set	525
 10385  0214                     _SSP1STATbits	set	532
 10386  0211                     _SSP1BUF	set	529
 10387  0215                     _SSP1CON1bits	set	533
 10388  0212                     _SSP1ADD	set	530
 10389  0215                     _SSP1CON1	set	533
 10390  0214                     _SSP1STAT	set	532
 10391  0297                     _CCP2CONbits	set	663
 10392  0295                     _CCPR2L	set	661
 10393  0296                     _CCPR2H	set	662
 10394  0297                     _CCP2CON	set	663
 10395  028E                     _ODCONC	set	654
 10396  028D                     _ODCONB	set	653
 10397  028C                     _ODCONA	set	652
 10398  0293                     _CCP1CONbits	set	659
 10399  029F                     _CCPTMRSbits	set	671
 10400  0291                     _CCPR1L	set	657
 10401  0292                     _CCPR1H	set	658
 10402  0293                     _CCP1CON	set	659
 10403  0417                     _T4CONbits	set	1047
 10404  0415                     _TMR4	set	1045
 10405  0416                     _PR4	set	1046
 10406  0417                     _T4CON	set	1047
 10407  061A                     _PWM6DCL	set	1562
 10408  061B                     _PWM6DCH	set	1563
 10409  061C                     _PWM6CON	set	1564
 10410  061F                     _PWMTMRSbits	set	1567
 10411  0617                     _PWM5DCL	set	1559
 10412  0618                     _PWM5DCH	set	1560
 10413  0619                     _PWM5CON	set	1561
 10414  0896                     _NVMCON2	set	2198
 10415  0893                     _NVMDATL	set	2195
 10416  0894                     _NVMDATH	set	2196
 10417  0895                     _NVMCON1bits	set	2197
 10418  0892                     _NVMADRH	set	2194
 10419  0891                     _NVMADRL	set	2193
 10420  091E                     _OSCTUNE	set	2334
 10421  091F                     _OSCFRQ	set	2335
 10422  091D                     _OSCEN	set	2333
 10423  091B                     _OSCCON3	set	2331
 10424  0919                     _OSCCON1	set	2329
 10425  48E0                     _PLLR	set	18656
 10426  0E20                     _SSP1CLKPPSbits	set	3616
 10427  0E21                     _SSP1DATPPSbits	set	3617
 10428  0E0F                     _PPSLOCKbits	set	3599
 10429  0E0F                     _PPSLOCK	set	3599
 10430  0EA2                     _RC2PPSbits	set	3746
 10431  0E9E                     _RB6PPSbits	set	3742
 10432  0EA3                     _RC3PPSbits	set	3747
 10433  0EA0                     _RC0PPSbits	set	3744
 10434  0EA4                     _RC4PPSbits	set	3748
 10435  0EA1                     _RC1PPSbits	set	3745
 10436  280A                     STR_34:	
 10437  280A  3449               	retlw	73	;'I'
 10438  280B  344D               	retlw	77	;'M'
 10439  280C  3420               	retlw	32	;' '
 10440  280D  3441               	retlw	65	;'A'
 10441  280E  3446               	retlw	70	;'F'
 10442  280F  3452               	retlw	82	;'R'
 10443  2810  3441               	retlw	65	;'A'
 10444  2811  3449               	retlw	73	;'I'
 10445  2812  3444               	retlw	68	;'D'
 10446  2813  3420               	retlw	32	;' '
 10447  2814  3449               	retlw	73	;'I'
 10448  2815  3420               	retlw	32	;' '
 10449  2816  3443               	retlw	67	;'C'
 10450  2817  3441               	retlw	65	;'A'
 10451  2818  344E               	retlw	78	;'N'
 10452  2819  3454               	retlw	84	;'T'
 10453  281A  3420               	retlw	32	;' '
 10454  281B  344C               	retlw	76	;'L'
 10455  281C  3445               	retlw	69	;'E'
 10456  281D  3454               	retlw	84	;'T'
 10457  281E  3420               	retlw	32	;' '
 10458  281F  3459               	retlw	89	;'Y'
 10459  2820  344F               	retlw	79	;'O'
 10460  2821  3455               	retlw	85	;'U'
 10461  2822  3420               	retlw	32	;' '
 10462  2823  3444               	retlw	68	;'D'
 10463  2824  344F               	retlw	79	;'O'
 10464  2825  3420               	retlw	32	;' '
 10465  2826  3454               	retlw	84	;'T'
 10466  2827  3448               	retlw	72	;'H'
 10467  2828  3441               	retlw	65	;'A'
 10468  2829  3454               	retlw	84	;'T'
 10469  282A  3420               	retlw	32	;' '
 10470  282B  3444               	retlw	68	;'D'
 10471  282C  3441               	retlw	65	;'A'
 10472  282D  3456               	retlw	86	;'V'
 10473  282E  3445               	retlw	69	;'E'
 10474  282F  342E               	retlw	46	;'.'
 10475  2830  342E               	retlw	46	;'.'
 10476  2831  342E               	retlw	46	;'.'
 10477  2832  3420               	retlw	32	;' '
 10478  2833  3420               	retlw	32	;' '
 10479  2834  3449               	retlw	73	;'I'
 10480  2835  344D               	retlw	77	;'M'
 10481  2836  3420               	retlw	32	;' '
 10482  2837  3448               	retlw	72	;'H'
 10483  2838  3445               	retlw	69	;'E'
 10484  2839  3452               	retlw	82	;'R'
 10485  283A  3445               	retlw	69	;'E'
 10486  283B  3420               	retlw	32	;' '
 10487  283C  3454               	retlw	84	;'T'
 10488  283D  344F               	retlw	79	;'O'
 10489  283E  3420               	retlw	32	;' '
 10490  283F  3443               	retlw	67	;'C'
 10491  2840  3448               	retlw	72	;'H'
 10492  2841  3445               	retlw	69	;'E'
 10493  2842  3457               	retlw	87	;'W'
 10494  2843  3420               	retlw	32	;' '
 10495  2844  3442               	retlw	66	;'B'
 10496  2845  3455               	retlw	85	;'U'
 10497  2846  3442               	retlw	66	;'B'
 10498  2847  3442               	retlw	66	;'B'
 10499  2848  344C               	retlw	76	;'L'
 10500  2849  3445               	retlw	69	;'E'
 10501  284A  3447               	retlw	71	;'G'
 10502  284B  3455               	retlw	85	;'U'
 10503  284C  344D               	retlw	77	;'M'
 10504  284D  3420               	retlw	32	;' '
 10505  284E  3441               	retlw	65	;'A'
 10506  284F  344E               	retlw	78	;'N'
 10507  2850  3444               	retlw	68	;'D'
 10508  2851  3420               	retlw	32	;' '
 10509  2852  344B               	retlw	75	;'K'
 10510  2853  3449               	retlw	73	;'I'
 10511  2854  3443               	retlw	67	;'C'
 10512  2855  344B               	retlw	75	;'K'
 10513  2856  3420               	retlw	32	;' '
 10514  2857  3441               	retlw	65	;'A'
 10515  2858  3453               	retlw	83	;'S'
 10516  2859  3453               	retlw	83	;'S'
 10517  285A  342E               	retlw	46	;'.'
 10518  285B  342E               	retlw	46	;'.'
 10519  285C  342E               	retlw	46	;'.'
 10520  285D  3420               	retlw	32	;' '
 10521  285E  3441               	retlw	65	;'A'
 10522  285F  344E               	retlw	78	;'N'
 10523  2860  3444               	retlw	68	;'D'
 10524  2861  3420               	retlw	32	;' '
 10525  2862  3449               	retlw	73	;'I'
 10526  2863  344D               	retlw	77	;'M'
 10527  2864  3420               	retlw	32	;' '
 10528  2865  3441               	retlw	65	;'A'
 10529  2866  344C               	retlw	76	;'L'
 10530  2867  344C               	retlw	76	;'L'
 10531  2868  3420               	retlw	32	;' '
 10532  2869  344F               	retlw	79	;'O'
 10533  286A  3455               	retlw	85	;'U'
 10534  286B  3454               	retlw	84	;'T'
 10535  286C  3420               	retlw	32	;' '
 10536  286D  344F               	retlw	79	;'O'
 10537  286E  3446               	retlw	70	;'F'
 10538  286F  3420               	retlw	32	;' '
 10539  2870  3442               	retlw	66	;'B'
 10540  2871  3455               	retlw	85	;'U'
 10541  2872  3442               	retlw	66	;'B'
 10542  2873  3442               	retlw	66	;'B'
 10543  2874  344C               	retlw	76	;'L'
 10544  2875  3445               	retlw	69	;'E'
 10545  2876  3447               	retlw	71	;'G'
 10546  2877  3455               	retlw	85	;'U'
 10547  2878  344D               	retlw	77	;'M'
 10548  2879  3420               	retlw	32	;' '
 10549  287A  3420               	retlw	32	;' '
 10550  287B  3420               	retlw	32	;' '
 10551  287C  3420               	retlw	32	;' '
 10552  287D  3420               	retlw	32	;' '
 10553  287E  3420               	retlw	32	;' '
 10554  287F  3420               	retlw	32	;' '
 10555  2880  3420               	retlw	32	;' '
 10556  2881  3400               	retlw	0
 10557                           
 10558                           	psect	stringtext3
 10559  3800                     __pstringtext3:	
 10560  3800                     STR_36:	
 10561  3800  3449               	retlw	73	;'I'
 10562  3801  3420               	retlw	32	;' '
 10563  3802  344C               	retlw	76	;'L'
 10564  3803  344F               	retlw	79	;'O'
 10565  3804  3456               	retlw	86	;'V'
 10566  3805  3445               	retlw	69	;'E'
 10567  3806  3420               	retlw	32	;' '
 10568  3807  3449               	retlw	73	;'I'
 10569  3808  3454               	retlw	84	;'T'
 10570  3809  342E               	retlw	46	;'.'
 10571  380A  3420               	retlw	32	;' '
 10572  380B  3445               	retlw	69	;'E'
 10573  380C  3453               	retlw	83	;'S'
 10574  380D  3450               	retlw	80	;'P'
 10575  380E  3445               	retlw	69	;'E'
 10576  380F  3443               	retlw	67	;'C'
 10577  3810  3449               	retlw	73	;'I'
 10578  3811  3441               	retlw	65	;'A'
 10579  3812  344C               	retlw	76	;'L'
 10580  3813  344C               	retlw	76	;'L'
 10581  3814  3459               	retlw	89	;'Y'
 10582  3815  3420               	retlw	32	;' '
 10583  3816  344C               	retlw	76	;'L'
 10584  3817  3441               	retlw	65	;'A'
 10585  3818  3454               	retlw	84	;'T'
 10586  3819  3445               	retlw	69	;'E'
 10587  381A  3452               	retlw	82	;'R'
 10588  381B  3420               	retlw	32	;' '
 10589  381C  3449               	retlw	73	;'I'
 10590  381D  344E               	retlw	78	;'N'
 10591  381E  3420               	retlw	32	;' '
 10592  381F  3454               	retlw	84	;'T'
 10593  3820  3448               	retlw	72	;'H'
 10594  3821  3445               	retlw	69	;'E'
 10595  3822  3420               	retlw	32	;' '
 10596  3823  3453               	retlw	83	;'S'
 10597  3824  3455               	retlw	85	;'U'
 10598  3825  344D               	retlw	77	;'M'
 10599  3826  344D               	retlw	77	;'M'
 10600  3827  3445               	retlw	69	;'E'
 10601  3828  3452               	retlw	82	;'R'
 10602  3829  3420               	retlw	32	;' '
 10603  382A  3420               	retlw	32	;' '
 10604  382B  3420               	retlw	32	;' '
 10605  382C  3420               	retlw	32	;' '
 10606  382D  3420               	retlw	32	;' '
 10607  382E  3400               	retlw	0
 10608                           
 10609                           	psect	stringtext4
 10610  382F                     __pstringtext4:	
 10611  382F                     STR_83:	
 10612  382F  3459               	retlw	89	;'Y'
 10613  3830  344F               	retlw	79	;'O'
 10614  3831  3455               	retlw	85	;'U'
 10615  3832  3420               	retlw	32	;' '
 10616  3833  3441               	retlw	65	;'A'
 10617  3834  3452               	retlw	82	;'R'
 10618  3835  3445               	retlw	69	;'E'
 10619  3836  3420               	retlw	32	;' '
 10620  3837  3449               	retlw	73	;'I'
 10621  3838  344E               	retlw	78	;'N'
 10622  3839  3420               	retlw	32	;' '
 10623  383A  3454               	retlw	84	;'T'
 10624  383B  344F               	retlw	79	;'O'
 10625  383C  344F               	retlw	79	;'O'
 10626  383D  3420               	retlw	32	;' '
 10627  383E  3444               	retlw	68	;'D'
 10628  383F  3445               	retlw	69	;'E'
 10629  3840  3445               	retlw	69	;'E'
 10630  3841  3450               	retlw	80	;'P'
 10631  3842  3420               	retlw	32	;' '
 10632  3843  3420               	retlw	32	;' '
 10633  3844  3420               	retlw	32	;' '
 10634  3845  3420               	retlw	32	;' '
 10635  3846  3420               	retlw	32	;' '
 10636  3847  3454               	retlw	84	;'T'
 10637  3848  3441               	retlw	65	;'A'
 10638  3849  344B               	retlw	75	;'K'
 10639  384A  3445               	retlw	69	;'E'
 10640  384B  3420               	retlw	32	;' '
 10641  384C  3454               	retlw	84	;'T'
 10642  384D  3448               	retlw	72	;'H'
 10643  384E  3445               	retlw	69	;'E'
 10644  384F  3420               	retlw	32	;' '
 10645  3850  3452               	retlw	82	;'R'
 10646  3851  3445               	retlw	69	;'E'
 10647  3852  3444               	retlw	68	;'D'
 10648  3853  3420               	retlw	32	;' '
 10649  3854  3450               	retlw	80	;'P'
 10650  3855  3449               	retlw	73	;'I'
 10651  3856  344C               	retlw	76	;'L'
 10652  3857  344C               	retlw	76	;'L'
 10653  3858  3420               	retlw	32	;' '
 10654  3859  3420               	retlw	32	;' '
 10655  385A  3420               	retlw	32	;' '
 10656  385B  3420               	retlw	32	;' '
 10657  385C  3400               	retlw	0
 10658                           
 10659                           	psect	stringtext5
 10660  385D                     __pstringtext5:	
 10661  385D                     STR_38:	
 10662  385D  3448               	retlw	72	;'H'
 10663  385E  3454               	retlw	84	;'T'
 10664  385F  3454               	retlw	84	;'T'
 10665  3860  3450               	retlw	80	;'P'
 10666  3861  3453               	retlw	83	;'S'
 10667  3862  343A               	retlw	58	;':'
 10668  3863  342F               	retlw	47	;'/'
 10669  3864  342F               	retlw	47	;'/'
 10670  3865  3447               	retlw	71	;'G'
 10671  3866  3449               	retlw	73	;'I'
 10672  3867  3454               	retlw	84	;'T'
 10673  3868  3448               	retlw	72	;'H'
 10674  3869  3455               	retlw	85	;'U'
 10675  386A  3442               	retlw	66	;'B'
 10676  386B  342E               	retlw	46	;'.'
 10677  386C  3443               	retlw	67	;'C'
 10678  386D  344F               	retlw	79	;'O'
 10679  386E  344D               	retlw	77	;'M'
 10680  386F  342F               	retlw	47	;'/'
 10681  3870  344E               	retlw	78	;'N'
 10682  3871  3455               	retlw	85	;'U'
 10683  3872  344C               	retlw	76	;'L'
 10684  3873  344C               	retlw	76	;'L'
 10685  3874  3449               	retlw	73	;'I'
 10686  3875  3442               	retlw	66	;'B'
 10687  3876  3441               	retlw	65	;'A'
 10688  3877  3444               	retlw	68	;'D'
 10689  3878  3447               	retlw	71	;'G'
 10690  3879  3445               	retlw	69	;'E'
 10691  387A  342F               	retlw	47	;'/'
 10692  387B  3444               	retlw	68	;'D'
 10693  387C  3445               	retlw	69	;'E'
 10694  387D  3446               	retlw	70	;'F'
 10695  387E  3443               	retlw	67	;'C'
 10696  387F  344F               	retlw	79	;'O'
 10697  3880  344E               	retlw	78	;'N'
 10698  3881  3432               	retlw	50	;'2'
 10699  3882  3435               	retlw	53	;'5'
 10700  3883  3420               	retlw	32	;' '
 10701  3884  3420               	retlw	32	;' '
 10702  3885  3420               	retlw	32	;' '
 10703  3886  3420               	retlw	32	;' '
 10704  3887  3400               	retlw	0
 10705                           
 10706                           	psect	stringtext6
 10707  3888                     __pstringtext6:	
 10708  3888                     STR_25:	
 10709  3888  3447               	retlw	71	;'G'
 10710  3889  3455               	retlw	85	;'U'
 10711  388A  3459               	retlw	89	;'Y'
 10712  388B  3453               	retlw	83	;'S'
 10713  388C  3420               	retlw	32	;' '
 10714  388D  3449               	retlw	73	;'I'
 10715  388E  3420               	retlw	32	;' '
 10716  388F  3448               	retlw	72	;'H'
 10717  3890  3441               	retlw	65	;'A'
 10718  3891  3456               	retlw	86	;'V'
 10719  3892  3445               	retlw	69	;'E'
 10720  3893  3420               	retlw	32	;' '
 10721  3894  3441               	retlw	65	;'A'
 10722  3895  3420               	retlw	32	;' '
 10723  3896  3447               	retlw	71	;'G'
 10724  3897  3452               	retlw	82	;'R'
 10725  3898  3445               	retlw	69	;'E'
 10726  3899  3441               	retlw	65	;'A'
 10727  389A  3454               	retlw	84	;'T'
 10728  389B  3420               	retlw	32	;' '
 10729  389C  3449               	retlw	73	;'I'
 10730  389D  3444               	retlw	68	;'D'
 10731  389E  3445               	retlw	69	;'E'
 10732  389F  3441               	retlw	65	;'A'
 10733  38A0  3420               	retlw	32	;' '
 10734  38A1  342D               	retlw	45	;'-'
 10735  38A2  344D               	retlw	77	;'M'
 10736  38A3  3449               	retlw	73	;'I'
 10737  38A4  344B               	retlw	75	;'K'
 10738  38A5  3445               	retlw	69	;'E'
 10739  38A6  3420               	retlw	32	;' '
 10740  38A7  344B               	retlw	75	;'K'
 10741  38A8  342E               	retlw	46	;'.'
 10742  38A9  3420               	retlw	32	;' '
 10743  38AA  3420               	retlw	32	;' '
 10744  38AB  3420               	retlw	32	;' '
 10745  38AC  3420               	retlw	32	;' '
 10746  38AD  3420               	retlw	32	;' '
 10747  38AE  3420               	retlw	32	;' '
 10748  38AF  3400               	retlw	0
 10749                           
 10750                           	psect	stringtext7
 10751  38B0                     __pstringtext7:	
 10752  38B0                     STR_21:	
 10753  38B0  3441               	retlw	65	;'A'
 10754  38B1  344C               	retlw	76	;'L'
 10755  38B2  344C               	retlw	76	;'L'
 10756  38B3  3420               	retlw	32	;' '
 10757  38B4  3459               	retlw	89	;'Y'
 10758  38B5  344F               	retlw	79	;'O'
 10759  38B6  3455               	retlw	85	;'U'
 10760  38B7  3452               	retlw	82	;'R'
 10761  38B8  3420               	retlw	32	;' '
 10762  38B9  3442               	retlw	66	;'B'
 10763  38BA  3441               	retlw	65	;'A'
 10764  38BB  3453               	retlw	83	;'S'
 10765  38BC  3445               	retlw	69	;'E'
 10766  38BD  3420               	retlw	32	;' '
 10767  38BE  3441               	retlw	65	;'A'
 10768  38BF  3452               	retlw	82	;'R'
 10769  38C0  3445               	retlw	69	;'E'
 10770  38C1  3420               	retlw	32	;' '
 10771  38C2  3442               	retlw	66	;'B'
 10772  38C3  3445               	retlw	69	;'E'
 10773  38C4  344C               	retlw	76	;'L'
 10774  38C5  344F               	retlw	79	;'O'
 10775  38C6  344E               	retlw	78	;'N'
 10776  38C7  3447               	retlw	71	;'G'
 10777  38C8  3420               	retlw	32	;' '
 10778  38C9  3454               	retlw	84	;'T'
 10779  38CA  344F               	retlw	79	;'O'
 10780  38CB  3420               	retlw	32	;' '
 10781  38CC  3455               	retlw	85	;'U'
 10782  38CD  3453               	retlw	83	;'S'
 10783  38CE  3420               	retlw	32	;' '
 10784  38CF  3420               	retlw	32	;' '
 10785  38D0  3420               	retlw	32	;' '
 10786  38D1  3420               	retlw	32	;' '
 10787  38D2  3420               	retlw	32	;' '
 10788  38D3  3400               	retlw	0
 10789                           
 10790                           	psect	stringtext8
 10791  38D4                     __pstringtext8:	
 10792  38D4                     STR_31:	
 10793  38D4  3449               	retlw	73	;'I'
 10794  38D5  3454               	retlw	84	;'T'
 10795  38D6  3453               	retlw	83	;'S'
 10796  38D7  3420               	retlw	32	;' '
 10797  38D8  3441               	retlw	65	;'A'
 10798  38D9  3420               	retlw	32	;' '
 10799  38DA  3455               	retlw	85	;'U'
 10800  38DB  344E               	retlw	78	;'N'
 10801  38DC  3449               	retlw	73	;'I'
 10802  38DD  3458               	retlw	88	;'X'
 10803  38DE  3420               	retlw	32	;' '
 10804  38DF  3453               	retlw	83	;'S'
 10805  38E0  3459               	retlw	89	;'Y'
 10806  38E1  3453               	retlw	83	;'S'
 10807  38E2  3454               	retlw	84	;'T'
 10808  38E3  3445               	retlw	69	;'E'
 10809  38E4  344D               	retlw	77	;'M'
 10810  38E5  3420               	retlw	32	;' '
 10811  38E6  3420               	retlw	32	;' '
 10812  38E7  3449               	retlw	73	;'I'
 10813  38E8  3420               	retlw	32	;' '
 10814  38E9  346B               	retlw	107	;'k'
 10815  38EA  346E               	retlw	110	;'n'
 10816  38EB  346F               	retlw	111	;'o'
 10817  38EC  3477               	retlw	119	;'w'
 10818  38ED  3420               	retlw	32	;' '
 10819  38EE  3474               	retlw	116	;'t'
 10820  38EF  3468               	retlw	104	;'h'
 10821  38F0  3469               	retlw	105	;'i'
 10822  38F1  3473               	retlw	115	;'s'
 10823  38F2  3421               	retlw	33	;'!'
 10824  38F3  3420               	retlw	32	;' '
 10825  38F4  3420               	retlw	32	;' '
 10826  38F5  3420               	retlw	32	;' '
 10827  38F6  3400               	retlw	0
 10828                           
 10829                           	psect	stringtext9
 10830  38F7                     __pstringtext9:	
 10831  38F7                     STR_33:	
 10832  38F7  3457               	retlw	87	;'W'
 10833  38F8  344F               	retlw	79	;'O'
 10834  38F9  3455               	retlw	85	;'U'
 10835  38FA  344C               	retlw	76	;'L'
 10836  38FB  3444               	retlw	68	;'D'
 10837  38FC  3420               	retlw	32	;' '
 10838  38FD  3459               	retlw	89	;'Y'
 10839  38FE  344F               	retlw	79	;'O'
 10840  38FF  3455               	retlw	85	;'U'
 10841  3900  3420               	retlw	32	;' '
 10842  3901  344C               	retlw	76	;'L'
 10843  3902  3449               	retlw	73	;'I'
 10844  3903  344B               	retlw	75	;'K'
 10845  3904  3445               	retlw	69	;'E'
 10846  3905  3420               	retlw	32	;' '
 10847  3906  3454               	retlw	84	;'T'
 10848  3907  344F               	retlw	79	;'O'
 10849  3908  3420               	retlw	32	;' '
 10850  3909  3450               	retlw	80	;'P'
 10851  390A  344C               	retlw	76	;'L'
 10852  390B  3441               	retlw	65	;'A'
 10853  390C  3459               	retlw	89	;'Y'
 10854  390D  3420               	retlw	32	;' '
 10855  390E  3441               	retlw	65	;'A'
 10856  390F  3420               	retlw	32	;' '
 10857  3910  3447               	retlw	71	;'G'
 10858  3911  3441               	retlw	65	;'A'
 10859  3912  344D               	retlw	77	;'M'
 10860  3913  3445               	retlw	69	;'E'
 10861  3914  343F               	retlw	63	;'?'
 10862  3915  3420               	retlw	32	;' '
 10863  3916  3420               	retlw	32	;' '
 10864  3917  3420               	retlw	32	;' '
 10865  3918  3400               	retlw	0
 10866                           
 10867                           	psect	stringtext10
 10868  3919                     __pstringtext10:	
 10869  3919                     STR_22:	
 10870  3919  3444               	retlw	68	;'D'
 10871  391A  344F               	retlw	79	;'O'
 10872  391B  3445               	retlw	69	;'E'
 10873  391C  3453               	retlw	83	;'S'
 10874  391D  3420               	retlw	32	;' '
 10875  391E  3444               	retlw	68	;'D'
 10876  391F  3445               	retlw	69	;'E'
 10877  3920  3456               	retlw	86	;'V'
 10878  3921  3441               	retlw	65	;'A'
 10879  3922  344E               	retlw	78	;'N'
 10880  3923  3420               	retlw	32	;' '
 10881  3924  3448               	retlw	72	;'H'
 10882  3925  3441               	retlw	65	;'A'
 10883  3926  3453               	retlw	83	;'S'
 10884  3927  3420               	retlw	32	;' '
 10885  3928  3448               	retlw	72	;'H'
 10886  3929  3449               	retlw	73	;'I'
 10887  392A  3453               	retlw	83	;'S'
 10888  392B  3420               	retlw	32	;' '
 10889  392C  3450               	retlw	80	;'P'
 10890  392D  3448               	retlw	72	;'H'
 10891  392E  344F               	retlw	79	;'O'
 10892  392F  344E               	retlw	78	;'N'
 10893  3930  3445               	retlw	69	;'E'
 10894  3931  343F               	retlw	63	;'?'
 10895  3932  3420               	retlw	32	;' '
 10896  3933  3420               	retlw	32	;' '
 10897  3934  3420               	retlw	32	;' '
 10898  3935  3420               	retlw	32	;' '
 10899  3936  3400               	retlw	0
 10900                           
 10901                           	psect	stringtext11
 10902  3937                     __pstringtext11:	
 10903  3937                     STR_28:	
 10904  3937  344E               	retlw	78	;'N'
 10905  3938  3443               	retlw	67	;'C'
 10906  3939  3420               	retlw	32	;' '
 10907  393A  342D               	retlw	45	;'-'
 10908  393B  3445               	retlw	69	;'E'
 10909  393C  3420               	retlw	32	;' '
 10910  393D  342F               	retlw	47	;'/'
 10911  393E  3442               	retlw	66	;'B'
 10912  393F  3449               	retlw	73	;'I'
 10913  3940  344E               	retlw	78	;'N'
 10914  3941  342F               	retlw	47	;'/'
 10915  3942  3442               	retlw	66	;'B'
 10916  3943  3441               	retlw	65	;'A'
 10917  3944  3453               	retlw	83	;'S'
 10918  3945  3448               	retlw	72	;'H'
 10919  3946  3420               	retlw	32	;' '
 10920  3947  342D               	retlw	45	;'-'
 10921  3948  344C               	retlw	76	;'L'
 10922  3949  3450               	retlw	80	;'P'
 10923  394A  3420               	retlw	32	;' '
 10924  394B  3431               	retlw	49	;'1'
 10925  394C  3433               	retlw	51	;'3'
 10926  394D  3433               	retlw	51	;'3'
 10927  394E  3437               	retlw	55	;'7'
 10928  394F  3420               	retlw	32	;' '
 10929  3950  3420               	retlw	32	;' '
 10930  3951  3420               	retlw	32	;' '
 10931  3952  3420               	retlw	32	;' '
 10932  3953  3400               	retlw	0
 10933                           
 10934                           	psect	stringtext12
 10935  3954                     __pstringtext12:	
 10936  3954                     STR_23:	
 10937  3954  3459               	retlw	89	;'Y'
 10938  3955  344F               	retlw	79	;'O'
 10939  3956  3455               	retlw	85	;'U'
 10940  3957  3420               	retlw	32	;' '
 10941  3958  344A               	retlw	74	;'J'
 10942  3959  3455               	retlw	85	;'U'
 10943  395A  3453               	retlw	83	;'S'
 10944  395B  3454               	retlw	84	;'T'
 10945  395C  3420               	retlw	32	;' '
 10946  395D  3448               	retlw	72	;'H'
 10947  395E  3441               	retlw	65	;'A'
 10948  395F  3456               	retlw	86	;'V'
 10949  3960  3445               	retlw	69	;'E'
 10950  3961  3420               	retlw	32	;' '
 10951  3962  3454               	retlw	84	;'T'
 10952  3963  344F               	retlw	79	;'O'
 10953  3964  3420               	retlw	32	;' '
 10954  3965  3442               	retlw	66	;'B'
 10955  3966  3445               	retlw	69	;'E'
 10956  3967  344C               	retlw	76	;'L'
 10957  3968  3449               	retlw	73	;'I'
 10958  3969  3445               	retlw	69	;'E'
 10959  396A  3456               	retlw	86	;'V'
 10960  396B  3445               	retlw	69	;'E'
 10961  396C  3420               	retlw	32	;' '
 10962  396D  3420               	retlw	32	;' '
 10963  396E  3420               	retlw	32	;' '
 10964  396F  3420               	retlw	32	;' '
 10965  3970  3400               	retlw	0
 10966                           
 10967                           	psect	stringtext13
 10968  3971                     __pstringtext13:	
 10969  3971                     STR_20:	
 10970  3971  3449               	retlw	73	;'I'
 10971  3972  3420               	retlw	32	;' '
 10972  3973  3443               	retlw	67	;'C'
 10973  3974  3441               	retlw	65	;'A'
 10974  3975  344E               	retlw	78	;'N'
 10975  3976  3420               	retlw	32	;' '
 10976  3977  3442               	retlw	66	;'B'
 10977  3978  3452               	retlw	82	;'R'
 10978  3979  3445               	retlw	69	;'E'
 10979  397A  3441               	retlw	65	;'A'
 10980  397B  344B               	retlw	75	;'K'
 10981  397C  3420               	retlw	32	;' '
 10982  397D  3454               	retlw	84	;'T'
 10983  397E  3448               	retlw	72	;'H'
 10984  397F  3441               	retlw	65	;'A'
 10985  3980  3454               	retlw	84	;'T'
 10986  3981  3420               	retlw	32	;' '
 10987  3982  3446               	retlw	70	;'F'
 10988  3983  344F               	retlw	79	;'O'
 10989  3984  3452               	retlw	82	;'R'
 10990  3985  3420               	retlw	32	;' '
 10991  3986  3459               	retlw	89	;'Y'
 10992  3987  344F               	retlw	79	;'O'
 10993  3988  3455               	retlw	85	;'U'
 10994  3989  3420               	retlw	32	;' '
 10995  398A  3420               	retlw	32	;' '
 10996  398B  3420               	retlw	32	;' '
 10997  398C  3400               	retlw	0
 10998                           
 10999                           	psect	stringtext14
 11000  398D                     __pstringtext14:	
 11001  398D                     STR_84:	
 11002  398D  3459               	retlw	89	;'Y'
 11003  398E  344F               	retlw	79	;'O'
 11004  398F  3455               	retlw	85	;'U'
 11005  3990  3420               	retlw	32	;' '
 11006  3991  3453               	retlw	83	;'S'
 11007  3992  3454               	retlw	84	;'T'
 11008  3993  3441               	retlw	65	;'A'
 11009  3994  3459               	retlw	89	;'Y'
 11010  3995  3420               	retlw	32	;' '
 11011  3996  3449               	retlw	73	;'I'
 11012  3997  344E               	retlw	78	;'N'
 11013  3998  3420               	retlw	32	;' '
 11014  3999  3457               	retlw	87	;'W'
 11015  399A  344F               	retlw	79	;'O'
 11016  399B  344E               	retlw	78	;'N'
 11017  399C  3444               	retlw	68	;'D'
 11018  399D  3445               	retlw	69	;'E'
 11019  399E  3452               	retlw	82	;'R'
 11020  399F  344C               	retlw	76	;'L'
 11021  39A0  3441               	retlw	65	;'A'
 11022  39A1  344E               	retlw	78	;'N'
 11023  39A2  3444               	retlw	68	;'D'
 11024  39A3  3420               	retlw	32	;' '
 11025  39A4  3420               	retlw	32	;' '
 11026  39A5  3420               	retlw	32	;' '
 11027  39A6  3420               	retlw	32	;' '
 11028  39A7  3400               	retlw	0
 11029                           
 11030                           	psect	stringtext15
 11031  39A8                     __pstringtext15:	
 11032  39A8                     STR_24:	
 11033  39A8  344E               	retlw	78	;'N'
 11034  39A9  344F               	retlw	79	;'O'
 11035  39AA  3454               	retlw	84	;'T'
 11036  39AB  3448               	retlw	72	;'H'
 11037  39AC  3449               	retlw	73	;'I'
 11038  39AD  344E               	retlw	78	;'N'
 11039  39AE  3447               	retlw	71	;'G'
 11040  39AF  3420               	retlw	32	;' '
 11041  39B0  3454               	retlw	84	;'T'
 11042  39B1  344F               	retlw	79	;'O'
 11043  39B2  3420               	retlw	32	;' '
 11044  39B3  3453               	retlw	83	;'S'
 11045  39B4  3445               	retlw	69	;'E'
 11046  39B5  3445               	retlw	69	;'E'
 11047  39B6  3420               	retlw	32	;' '
 11048  39B7  3448               	retlw	72	;'H'
 11049  39B8  3445               	retlw	69	;'E'
 11050  39B9  3452               	retlw	82	;'R'
 11051  39BA  3445               	retlw	69	;'E'
 11052  39BB  342E               	retlw	46	;'.'
 11053  39BC  342E               	retlw	46	;'.'
 11054  39BD  342E               	retlw	46	;'.'
 11055  39BE  3420               	retlw	32	;' '
 11056  39BF  3420               	retlw	32	;' '
 11057  39C0  3420               	retlw	32	;' '
 11058  39C1  3420               	retlw	32	;' '
 11059  39C2  3400               	retlw	0
 11060                           
 11061                           	psect	stringtext16
 11062  39C3                     __pstringtext16:	
 11063  39C3                     STR_17:	
 11064  39C3  3448               	retlw	72	;'H'
 11065  39C4  3454               	retlw	84	;'T'
 11066  39C5  3454               	retlw	84	;'T'
 11067  39C6  3450               	retlw	80	;'P'
 11068  39C7  3420               	retlw	32	;' '
 11069  39C8  3434               	retlw	52	;'4'
 11070  39C9  3431               	retlw	49	;'1'
 11071  39CA  3438               	retlw	56	;'8'
 11072  39CB  3420               	retlw	32	;' '
 11073  39CC  3449               	retlw	73	;'I'
 11074  39CD  3427               	retlw	39	;'''
 11075  39CE  344D               	retlw	77	;'M'
 11076  39CF  3420               	retlw	32	;' '
 11077  39D0  3441               	retlw	65	;'A'
 11078  39D1  3420               	retlw	32	;' '
 11079  39D2  3454               	retlw	84	;'T'
 11080  39D3  3445               	retlw	69	;'E'
 11081  39D4  3441               	retlw	65	;'A'
 11082  39D5  3450               	retlw	80	;'P'
 11083  39D6  344F               	retlw	79	;'O'
 11084  39D7  3454               	retlw	84	;'T'
 11085  39D8  3420               	retlw	32	;' '
 11086  39D9  3420               	retlw	32	;' '
 11087  39DA  3420               	retlw	32	;' '
 11088  39DB  3420               	retlw	32	;' '
 11089  39DC  3400               	retlw	0
 11090                           
 11091                           	psect	stringtext17
 11092  39DD                     __pstringtext17:	
 11093  39DD                     STR_85:	
 11094  39DD  3454               	retlw	84	;'T'
 11095  39DE  3448               	retlw	72	;'H'
 11096  39DF  3445               	retlw	69	;'E'
 11097  39E0  3420               	retlw	32	;' '
 11098  39E1  3443               	retlw	67	;'C'
 11099  39E2  3448               	retlw	72	;'H'
 11100  39E3  344F               	retlw	79	;'O'
 11101  39E4  3449               	retlw	73	;'I'
 11102  39E5  3443               	retlw	67	;'C'
 11103  39E6  3445               	retlw	69	;'E'
 11104  39E7  3420               	retlw	32	;' '
 11105  39E8  3449               	retlw	73	;'I'
 11106  39E9  3453               	retlw	83	;'S'
 11107  39EA  3420               	retlw	32	;' '
 11108  39EB  3459               	retlw	89	;'Y'
 11109  39EC  344F               	retlw	79	;'O'
 11110  39ED  3455               	retlw	85	;'U'
 11111  39EE  3452               	retlw	82	;'R'
 11112  39EF  3453               	retlw	83	;'S'
 11113  39F0  3420               	retlw	32	;' '
 11114  39F1  3420               	retlw	32	;' '
 11115  39F2  3420               	retlw	32	;' '
 11116  39F3  3400               	retlw	0
 11117                           
 11118                           	psect	stringtext18
 11119  39F4                     __pstringtext18:	
 11120  39F4                     STR_19:	
 11121  39F4  3449               	retlw	73	;'I'
 11122  39F5  3420               	retlw	32	;' '
 11123  39F6  3441               	retlw	65	;'A'
 11124  39F7  344D               	retlw	77	;'M'
 11125  39F8  3420               	retlw	32	;' '
 11126  39F9  344A               	retlw	74	;'J'
 11127  39FA  3455               	retlw	85	;'U'
 11128  39FB  3453               	retlw	83	;'S'
 11129  39FC  3454               	retlw	84	;'T'
 11130  39FD  3420               	retlw	32	;' '
 11131  39FE  3441               	retlw	65	;'A'
 11132  39FF  3420               	retlw	32	;' '
 11133  3A00  3442               	retlw	66	;'B'
 11134  3A01  3441               	retlw	65	;'A'
 11135  3A02  3444               	retlw	68	;'D'
 11136  3A03  3447               	retlw	71	;'G'
 11137  3A04  3445               	retlw	69	;'E'
 11138  3A05  3420               	retlw	32	;' '
 11139  3A06  3420               	retlw	32	;' '
 11140  3A07  3420               	retlw	32	;' '
 11141  3A08  3420               	retlw	32	;' '
 11142  3A09  3400               	retlw	0
 11143                           
 11144                           	psect	stringtext19
 11145  3A0A                     __pstringtext19:	
 11146  3A0A                     STR_16:	
 11147  3A0A  3457               	retlw	87	;'W'
 11148  3A0B  3449               	retlw	73	;'I'
 11149  3A0C  344C               	retlw	76	;'L'
 11150  3A0D  344C               	retlw	76	;'L'
 11151  3A0E  3420               	retlw	32	;' '
 11152  3A0F  3448               	retlw	72	;'H'
 11153  3A10  3441               	retlw	65	;'A'
 11154  3A11  3443               	retlw	67	;'C'
 11155  3A12  344B               	retlw	75	;'K'
 11156  3A13  3420               	retlw	32	;' '
 11157  3A14  3446               	retlw	70	;'F'
 11158  3A15  344F               	retlw	79	;'O'
 11159  3A16  3452               	retlw	82	;'R'
 11160  3A17  3420               	retlw	32	;' '
 11161  3A18  3441               	retlw	65	;'A'
 11162  3A19  342F               	retlw	47	;'/'
 11163  3A1A  3443               	retlw	67	;'C'
 11164  3A1B  3420               	retlw	32	;' '
 11165  3A1C  3420               	retlw	32	;' '
 11166  3A1D  3420               	retlw	32	;' '
 11167  3A1E  3400               	retlw	0
 11168                           
 11169                           	psect	stringtext20
 11170  3A1F                     __pstringtext20:	
 11171  3A1F                     STR_27:	
 11172  3A1F  3442               	retlw	66	;'B'
 11173  3A20  3445               	retlw	69	;'E'
 11174  3A21  344C               	retlw	76	;'L'
 11175  3A22  3449               	retlw	73	;'I'
 11176  3A23  3445               	retlw	69	;'E'
 11177  3A24  3456               	retlw	86	;'V'
 11178  3A25  3445               	retlw	69	;'E'
 11179  3A26  3420               	retlw	32	;' '
 11180  3A27  3454               	retlw	84	;'T'
 11181  3A28  3448               	retlw	72	;'H'
 11182  3A29  3445               	retlw	69	;'E'
 11183  3A2A  3420               	retlw	32	;' '
 11184  3A2B  344C               	retlw	76	;'L'
 11185  3A2C  3449               	retlw	73	;'I'
 11186  3A2D  3445               	retlw	69	;'E'
 11187  3A2E  3420               	retlw	32	;' '
 11188  3A2F  3420               	retlw	32	;' '
 11189  3A30  3420               	retlw	32	;' '
 11190  3A31  3400               	retlw	0
 11191                           
 11192                           	psect	stringtext21
 11193  3A32                     __pstringtext21:	
 11194  3A32                     STR_15:	
 11195  3A32  3448               	retlw	72	;'H'
 11196  3A33  3441               	retlw	65	;'A'
 11197  3A34  3443               	retlw	67	;'C'
 11198  3A35  344B               	retlw	75	;'K'
 11199  3A36  3420               	retlw	32	;' '
 11200  3A37  3454               	retlw	84	;'T'
 11201  3A38  3448               	retlw	72	;'H'
 11202  3A39  3445               	retlw	69	;'E'
 11203  3A3A  3420               	retlw	32	;' '
 11204  3A3B  3450               	retlw	80	;'P'
 11205  3A3C  344C               	retlw	76	;'L'
 11206  3A3D  3441               	retlw	65	;'A'
 11207  3A3E  344E               	retlw	78	;'N'
 11208  3A3F  3445               	retlw	69	;'E'
 11209  3A40  3454               	retlw	84	;'T'
 11210  3A41  3420               	retlw	32	;' '
 11211  3A42  3420               	retlw	32	;' '
 11212  3A43  3420               	retlw	32	;' '
 11213  3A44  3400               	retlw	0
 11214                           
 11215                           	psect	stringtext22
 11216  3A45                     __pstringtext22:	
 11217  3A45                     STR_10:	
 11218  3A45  3405               	retlw	5
 11219  3A46  3407               	retlw	7
 11220  3A47  3407               	retlw	7
 11221  3A48  3408               	retlw	8
 11222  3A49  342D               	retlw	45	;'-'
 11223  3A4A  342D               	retlw	45	;'-'
 11224  3A4B  3420               	retlw	32	;' '
 11225  3A4C  3420               	retlw	32	;' '
 11226  3A4D  342D               	retlw	45	;'-'
 11227  3A4E  342D               	retlw	45	;'-'
 11228  3A4F  3409               	retlw	9
 11229  3A50  3407               	retlw	7
 11230  3A51  3407               	retlw	7
 11231  3A52  3406               	retlw	6
 11232  3A53  3420               	retlw	32	;' '
 11233  3A54  340B               	retlw	11
 11234  3A55  3420               	retlw	32	;' '
 11235  3A56  3400               	retlw	0
 11236                           
 11237                           	psect	stringtext23
 11238  3A57                     __pstringtext23:	
 11239  3A57                     STR_26:	
 11240  3A57  3444               	retlw	68	;'D'
 11241  3A58  3445               	retlw	69	;'E'
 11242  3A59  344E               	retlw	78	;'N'
 11243  3A5A  3459               	retlw	89	;'Y'
 11244  3A5B  3420               	retlw	32	;' '
 11245  3A5C  3441               	retlw	65	;'A'
 11246  3A5D  344E               	retlw	78	;'N'
 11247  3A5E  3459               	retlw	89	;'Y'
 11248  3A5F  3420               	retlw	32	;' '
 11249  3A60  3441               	retlw	65	;'A'
 11250  3A61  344E               	retlw	78	;'N'
 11251  3A62  3459               	retlw	89	;'Y'
 11252  3A63  3420               	retlw	32	;' '
 11253  3A64  3420               	retlw	32	;' '
 11254  3A65  3420               	retlw	32	;' '
 11255  3A66  3420               	retlw	32	;' '
 11256  3A67  3400               	retlw	0
 11257                           
 11258                           	psect	stringtext24
 11259  3A68                     __pstringtext24:	
 11260  3A68                     STR_35:	
 11261  3A68  3442               	retlw	66	;'B'
 11262  3A69  3455               	retlw	85	;'U'
 11263  3A6A  3454               	retlw	84	;'T'
 11264  3A6B  3454               	retlw	84	;'T'
 11265  3A6C  3445               	retlw	69	;'E'
 11266  3A6D  3452               	retlw	82	;'R'
 11267  3A6E  3420               	retlw	32	;' '
 11268  3A6F  3445               	retlw	69	;'E'
 11269  3A70  344D               	retlw	77	;'M'
 11270  3A71  3441               	retlw	65	;'A'
 11271  3A72  3449               	retlw	73	;'I'
 11272  3A73  344C               	retlw	76	;'L'
 11273  3A74  3453               	retlw	83	;'S'
 11274  3A75  3420               	retlw	32	;' '
 11275  3A76  3420               	retlw	32	;' '
 11276  3A77  3420               	retlw	32	;' '
 11277  3A78  3400               	retlw	0
 11278                           
 11279                           	psect	stringtext25
 11280  3A79                     __pstringtext25:	
 11281  3A79                     STR_32:	
 11282  3A79  3454               	retlw	84	;'T'
 11283  3A7A  3452               	retlw	82	;'R'
 11284  3A7B  3455               	retlw	85	;'U'
 11285  3A7C  3453               	retlw	83	;'S'
 11286  3A7D  3454               	retlw	84	;'T'
 11287  3A7E  3420               	retlw	32	;' '
 11288  3A7F  344E               	retlw	78	;'N'
 11289  3A80  344F               	retlw	79	;'O'
 11290  3A81  3420               	retlw	32	;' '
 11291  3A82  344F               	retlw	79	;'O'
 11292  3A83  344E               	retlw	78	;'N'
 11293  3A84  3445               	retlw	69	;'E'
 11294  3A85  3420               	retlw	32	;' '
 11295  3A86  3420               	retlw	32	;' '
 11296  3A87  3420               	retlw	32	;' '
 11297  3A88  3400               	retlw	0
 11298                           
 11299                           	psect	stringtext26
 11300  3A89                     __pstringtext26:	
 11301  3A89                     STR_30:	
 11302  3A89  3448               	retlw	72	;'H'
 11303  3A8A  3449               	retlw	73	;'I'
 11304  3A8B  3453               	retlw	83	;'S'
 11305  3A8C  3454               	retlw	84	;'T'
 11306  3A8D  344F               	retlw	79	;'O'
 11307  3A8E  3452               	retlw	82	;'R'
 11308  3A8F  3459               	retlw	89	;'Y'
 11309  3A90  3420               	retlw	32	;' '
 11310  3A91  342D               	retlw	45	;'-'
 11311  3A92  3443               	retlw	67	;'C'
 11312  3A93  3457               	retlw	87	;'W'
 11313  3A94  3420               	retlw	32	;' '
 11314  3A95  3420               	retlw	32	;' '
 11315  3A96  3420               	retlw	32	;' '
 11316  3A97  3400               	retlw	0
 11317                           
 11318                           	psect	stringtext27
 11319  3A98                     __pstringtext27:	
 11320  3A98                     STR_65:	
 11321  3A98  3446               	retlw	70	;'F'
 11322  3A99  3449               	retlw	73	;'I'
 11323  3A9A  3452               	retlw	82	;'R'
 11324  3A9B  3445               	retlw	69	;'E'
 11325  3A9C  3420               	retlw	32	;' '
 11326  3A9D  3442               	retlw	66	;'B'
 11327  3A9E  3441               	retlw	65	;'A'
 11328  3A9F  344C               	retlw	76	;'L'
 11329  3AA0  344C               	retlw	76	;'L'
 11330  3AA1  3420               	retlw	32	;' '
 11331  3AA2  3420               	retlw	32	;' '
 11332  3AA3  3420               	retlw	32	;' '
 11333  3AA4  3400               	retlw	0
 11334                           
 11335                           	psect	stringtext28
 11336  3AA5                     __pstringtext28:	
 11337  3AA5                     STR_42:	
 11338  3AA5  3455               	retlw	85	;'U'
 11339  3AA6  344E               	retlw	78	;'N'
 11340  3AA7  344C               	retlw	76	;'L'
 11341  3AA8  344F               	retlw	79	;'O'
 11342  3AA9  3443               	retlw	67	;'C'
 11343  3AAA  344B               	retlw	75	;'K'
 11344  3AAB  3449               	retlw	73	;'I'
 11345  3AAC  344E               	retlw	78	;'N'
 11346  3AAD  3447               	retlw	71	;'G'
 11347  3AAE  342E               	retlw	46	;'.'
 11348  3AAF  342E               	retlw	46	;'.'
 11349  3AB0  342E               	retlw	46	;'.'
 11350  3AB1  3400               	retlw	0
 11351                           
 11352                           	psect	stringtext29
 11353  3AB2                     __pstringtext29:	
 11354  3AB2                     STR_37:	
 11355  3AB2  3442               	retlw	66	;'B'
 11356  3AB3  3441               	retlw	65	;'A'
 11357  3AB4  3442               	retlw	66	;'B'
 11358  3AB5  3441               	retlw	65	;'A'
 11359  3AB6  3420               	retlw	32	;' '
 11360  3AB7  3457               	retlw	87	;'W'
 11361  3AB8  3445               	retlw	69	;'E'
 11362  3AB9  3452               	retlw	82	;'R'
 11363  3ABA  344B               	retlw	75	;'K'
 11364  3ABB  3420               	retlw	32	;' '
 11365  3ABC  3420               	retlw	32	;' '
 11366  3ABD  3420               	retlw	32	;' '
 11367  3ABE  3400               	retlw	0
 11368                           
 11369                           	psect	stringtext30
 11370  3ABF                     __pstringtext30:	
 11371  3ABF                     STR_64:	
 11372  3ABF  3452               	retlw	82	;'R'
 11373  3AC0  3445               	retlw	69	;'E'
 11374  3AC1  3444               	retlw	68	;'D'
 11375  3AC2  3420               	retlw	32	;' '
 11376  3AC3  3442               	retlw	66	;'B'
 11377  3AC4  3455               	retlw	85	;'U'
 11378  3AC5  344C               	retlw	76	;'L'
 11379  3AC6  344C               	retlw	76	;'L'
 11380  3AC7  3420               	retlw	32	;' '
 11381  3AC8  3420               	retlw	32	;' '
 11382  3AC9  3420               	retlw	32	;' '
 11383  3ACA  3400               	retlw	0
 11384                           
 11385                           	psect	stringtext31
 11386  3ACB                     __pstringtext31:	
 11387  3ACB                     STR_29:	
 11388  3ACB  3452               	retlw	82	;'R'
 11389  3ACC  344D               	retlw	77	;'M'
 11390  3ACD  3420               	retlw	32	;' '
 11391  3ACE  342D               	retlw	45	;'-'
 11392  3ACF  3452               	retlw	82	;'R'
 11393  3AD0  3446               	retlw	70	;'F'
 11394  3AD1  3420               	retlw	32	;' '
 11395  3AD2  342F               	retlw	47	;'/'
 11396  3AD3  3420               	retlw	32	;' '
 11397  3AD4  3420               	retlw	32	;' '
 11398  3AD5  3420               	retlw	32	;' '
 11399  3AD6  3400               	retlw	0
 11400                           
 11401                           	psect	stringtext32
 11402  3AD7                     __pstringtext32:	
 11403  3AD7                     STR_62:	
 11404  3AD7  3454               	retlw	84	;'T'
 11405  3AD8  3445               	retlw	69	;'E'
 11406  3AD9  3451               	retlw	81	;'Q'
 11407  3ADA  3455               	retlw	85	;'U'
 11408  3ADB  3449               	retlw	73	;'I'
 11409  3ADC  344C               	retlw	76	;'L'
 11410  3ADD  3441               	retlw	65	;'A'
 11411  3ADE  3420               	retlw	32	;' '
 11412  3ADF  3420               	retlw	32	;' '
 11413  3AE0  3420               	retlw	32	;' '
 11414  3AE1  3400               	retlw	0
 11415                           
 11416                           	psect	stringtext33
 11417  3AE2                     __pstringtext33:	
 11418  3AE2                     STR_61:	
 11419  3AE2  3457               	retlw	87	;'W'
 11420  3AE3  3448               	retlw	72	;'H'
 11421  3AE4  3449               	retlw	73	;'I'
 11422  3AE5  3453               	retlw	83	;'S'
 11423  3AE6  344B               	retlw	75	;'K'
 11424  3AE7  3445               	retlw	69	;'E'
 11425  3AE8  3459               	retlw	89	;'Y'
 11426  3AE9  3420               	retlw	32	;' '
 11427  3AEA  3420               	retlw	32	;' '
 11428  3AEB  3420               	retlw	32	;' '
 11429  3AEC  3400               	retlw	0
 11430                           
 11431                           	psect	stringtext34
 11432  3AED                     __pstringtext34:	
 11433  3AED                     STR_78:	
 11434  3AED  3420               	retlw	32	;' '
 11435  3AEE  3420               	retlw	32	;' '
 11436  3AEF  3442               	retlw	66	;'B'
 11437  3AF0  3449               	retlw	73	;'I'
 11438  3AF1  3454               	retlw	84	;'T'
 11439  3AF2  3420               	retlw	32	;' '
 11440  3AF3  344E               	retlw	78	;'N'
 11441  3AF4  3420               	retlw	32	;' '
 11442  3AF5  3420               	retlw	32	;' '
 11443  3AF6  3400               	retlw	0
 11444                           
 11445                           	psect	stringtext35
 11446  3AF7                     __pstringtext35:	
 11447  3AF7                     STR_6:	
 11448  3AF7  3450               	retlw	80	;'P'
 11449  3AF8  3441               	retlw	65	;'A'
 11450  3AF9  3453               	retlw	83	;'S'
 11451  3AFA  3453               	retlw	83	;'S'
 11452  3AFB  3457               	retlw	87	;'W'
 11453  3AFC  344F               	retlw	79	;'O'
 11454  3AFD  3452               	retlw	82	;'R'
 11455  3AFE  3444               	retlw	68	;'D'
 11456  3AFF  3420               	retlw	32	;' '
 11457  3B00  3400               	retlw	0
 11458                           
 11459                           	psect	stringtext36
 11460  3B01                     __pstringtext36:	
 11461  3B01                     STR_75:	
 11462  3B01  3420               	retlw	32	;' '
 11463  3B02  3454               	retlw	84	;'T'
 11464  3B03  3448               	retlw	72	;'H'
 11465  3B04  3445               	retlw	69	;'E'
 11466  3B05  3420               	retlw	32	;' '
 11467  3B06  3457               	retlw	87	;'W'
 11468  3B07  3448               	retlw	72	;'H'
 11469  3B08  3420               	retlw	32	;' '
 11470  3B09  3400               	retlw	0
 11471                           
 11472                           	psect	stringtext37
 11473  3B0A                     __pstringtext37:	
 11474  3B0A                     STR_60:	
 11475  3B0A  3456               	retlw	86	;'V'
 11476  3B0B  344F               	retlw	79	;'O'
 11477  3B0C  3444               	retlw	68	;'D'
 11478  3B0D  344B               	retlw	75	;'K'
 11479  3B0E  3441               	retlw	65	;'A'
 11480  3B0F  3420               	retlw	32	;' '
 11481  3B10  3420               	retlw	32	;' '
 11482  3B11  3420               	retlw	32	;' '
 11483  3B12  3400               	retlw	0
 11484                           
 11485                           	psect	stringtext38
 11486  3B13                     __pstringtext38:	
 11487  3B13                     STR_66:	
 11488  3B13  3457               	retlw	87	;'W'
 11489  3B14  3441               	retlw	65	;'A'
 11490  3B15  3454               	retlw	84	;'T'
 11491  3B16  3445               	retlw	69	;'E'
 11492  3B17  3452               	retlw	82	;'R'
 11493  3B18  3420               	retlw	32	;' '
 11494  3B19  3420               	retlw	32	;' '
 11495  3B1A  3420               	retlw	32	;' '
 11496  3B1B  3400               	retlw	0
 11497                           
 11498                           	psect	stringtext39
 11499  3B1C                     __pstringtext39:	
 11500  3B1C                     STR_67:	
 11501  3B1C  3425               	retlw	37	;'%'
 11502  3B1D  3463               	retlw	99	;'c'
 11503  3B1E  3425               	retlw	37	;'%'
 11504  3B1F  3463               	retlw	99	;'c'
 11505  3B20  3425               	retlw	37	;'%'
 11506  3B21  3463               	retlw	99	;'c'
 11507  3B22  3425               	retlw	37	;'%'
 11508  3B23  3463               	retlw	99	;'c'
 11509  3B24  3400               	retlw	0
 11510                           
 11511                           	psect	stringtext40
 11512  3B25                     __pstringtext40:	
 11513  3B25                     STR_12:	
 11514  3B25  344E               	retlw	78	;'N'
 11515  3B26  3455               	retlw	85	;'U'
 11516  3B27  344C               	retlw	76	;'L'
 11517  3B28  344C               	retlw	76	;'L'
 11518  3B29  3449               	retlw	73	;'I'
 11519  3B2A  3446               	retlw	70	;'F'
 11520  3B2B  3459               	retlw	89	;'Y'
 11521  3B2C  3420               	retlw	32	;' '
 11522  3B2D  3400               	retlw	0
 11523                           
 11524                           	psect	stringtext41
 11525  3B2E                     __pstringtext41:	
 11526  3B2E                     STR_80:	
 11527  3B2E  3450               	retlw	80	;'P'
 11528  3B2F  344F               	retlw	79	;'O'
 11529  3B30  3454               	retlw	84	;'T'
 11530  3B31  3441               	retlw	65	;'A'
 11531  3B32  3454               	retlw	84	;'T'
 11532  3B33  3420               	retlw	32	;' '
 11533  3B34  3420               	retlw	32	;' '
 11534  3B35  3400               	retlw	0
 11535                           
 11536                           	psect	stringtext42
 11537  3B36                     __pstringtext42:	
 11538  3B36                     STR_82:	
 11539  3B36  3420               	retlw	32	;' '
 11540  3B37  3420               	retlw	32	;' '
 11541  3B38  3454               	retlw	84	;'T'
 11542  3B39  3445               	retlw	69	;'E'
 11543  3B3A  3459               	retlw	89	;'Y'
 11544  3B3B  3420               	retlw	32	;' '
 11545  3B3C  3420               	retlw	32	;' '
 11546  3B3D  3400               	retlw	0
 11547                           
 11548                           	psect	stringtext43
 11549  3B3E                     __pstringtext43:	
 11550  3B3E                     STR_63:	
 11551  3B3E  3443               	retlw	67	;'C'
 11552  3B3F  3448               	retlw	72	;'H'
 11553  3B40  3455               	retlw	85	;'U'
 11554  3B41  3447               	retlw	71	;'G'
 11555  3B42  3420               	retlw	32	;' '
 11556  3B43  3420               	retlw	32	;' '
 11557  3B44  3420               	retlw	32	;' '
 11558  3B45  3400               	retlw	0
 11559                           
 11560                           	psect	stringtext44
 11561  3B46                     __pstringtext44:	
 11562  3B46                     STR_59:	
 11563  3B46  3442               	retlw	66	;'B'
 11564  3B47  3445               	retlw	69	;'E'
 11565  3B48  3445               	retlw	69	;'E'
 11566  3B49  3452               	retlw	82	;'R'
 11567  3B4A  3420               	retlw	32	;' '
 11568  3B4B  3420               	retlw	32	;' '
 11569  3B4C  3420               	retlw	32	;' '
 11570  3B4D  3400               	retlw	0
 11571                           
 11572                           	psect	stringtext45
 11573  3B4E                     __pstringtext45:	
 11574  3B4E                     STR_58:	
 11575  3B4E  3453               	retlw	83	;'S'
 11576  3B4F  3448               	retlw	72	;'H'
 11577  3B50  344F               	retlw	79	;'O'
 11578  3B51  3454               	retlw	84	;'T'
 11579  3B52  3420               	retlw	32	;' '
 11580  3B53  3420               	retlw	32	;' '
 11581  3B54  3420               	retlw	32	;' '
 11582  3B55  3400               	retlw	0
 11583                           
 11584                           	psect	stringtext46
 11585  3B56                     __pstringtext46:	
 11586  3B56                     STR_18:	
 11587  3B56  3449               	retlw	73	;'I'
 11588  3B57  3450               	retlw	80	;'P'
 11589  3B58  346F               	retlw	111	;'o'
 11590  3B59  3441               	retlw	65	;'A'
 11591  3B5A  3443               	retlw	67	;'C'
 11592  3B5B  3420               	retlw	32	;' '
 11593  3B5C  3420               	retlw	32	;' '
 11594  3B5D  3400               	retlw	0
 11595                           
 11596                           	psect	stringtext47
 11597  3B5E                     __pstringtext47:	
 11598  3B5E                     STR_13:	
 11599  3B5E  3444               	retlw	68	;'D'
 11600  3B5F  3445               	retlw	69	;'E'
 11601  3B60  3446               	retlw	70	;'F'
 11602  3B61  3443               	retlw	67	;'C'
 11603  3B62  344F               	retlw	79	;'O'
 11604  3B63  344E               	retlw	78	;'N'
 11605  3B64  3420               	retlw	32	;' '
 11606  3B65  3400               	retlw	0
 11607                           
 11608                           	psect	stringtext48
 11609  3B66                     __pstringtext48:	
 11610  3B66                     STR_7:	
 11611  3B66  344D               	retlw	77	;'M'
 11612  3B67  3441               	retlw	65	;'A'
 11613  3B68  3454               	retlw	84	;'T'
 11614  3B69  3452               	retlw	82	;'R'
 11615  3B6A  3449               	retlw	73	;'I'
 11616  3B6B  3458               	retlw	88	;'X'
 11617  3B6C  3420               	retlw	32	;' '
 11618  3B6D  3400               	retlw	0
 11619                           
 11620                           	psect	stringtext49
 11621  3B6E                     __pstringtext49:	
 11622  3B6E                     STR_86:	
 11623  3B6E  3428               	retlw	40	;'('
 11624  3B6F  346E               	retlw	110	;'n'
 11625  3B70  3475               	retlw	117	;'u'
 11626  3B71  346C               	retlw	108	;'l'
 11627  3B72  346C               	retlw	108	;'l'
 11628  3B73  3429               	retlw	41	;')'
 11629  3B74  3400               	retlw	0
 11630                           
 11631                           	psect	stringtext50
 11632  3B75                     __pstringtext50:	
 11633  3B75                     STR_74:	
 11634  3B75  344F               	retlw	79	;'O'
 11635  3B76  3457               	retlw	87	;'W'
 11636  3B77  3420               	retlw	32	;' '
 11637  3B78  3420               	retlw	32	;' '
 11638  3B79  3420               	retlw	32	;' '
 11639  3B7A  3420               	retlw	32	;' '
 11640  3B7B  3400               	retlw	0
 11641                           
 11642                           	psect	stringtext51
 11643  3B7C                     __pstringtext51:	
 11644  3B7C                     STR_76:	
 11645  3B7C  3449               	retlw	73	;'I'
 11646  3B7D  3454               	retlw	84	;'T'
 11647  3B7E  3445               	retlw	69	;'E'
 11648  3B7F  3420               	retlw	32	;' '
 11649  3B80  3420               	retlw	32	;' '
 11650  3B81  3420               	retlw	32	;' '
 11651  3B82  3400               	retlw	0
 11652                           
 11653                           	psect	stringtext52
 11654  3B83                     __pstringtext52:	
 11655  3B83                     STR_81:	
 11656  3B83  3420               	retlw	32	;' '
 11657  3B84  3420               	retlw	32	;' '
 11658  3B85  3445               	retlw	69	;'E'
 11659  3B86  3457               	retlw	87	;'W'
 11660  3B87  3420               	retlw	32	;' '
 11661  3B88  3420               	retlw	32	;' '
 11662  3B89  3400               	retlw	0
 11663                           
 11664                           	psect	stringtext53
 11665  3B8A                     __pstringtext53:	
 11666  3B8A                     STR_73:	
 11667  3B8A  3420               	retlw	32	;' '
 11668  3B8B  3420               	retlw	32	;' '
 11669  3B8C  3446               	retlw	70	;'F'
 11670  3B8D  344F               	retlw	79	;'O'
 11671  3B8E  344C               	retlw	76	;'L'
 11672  3B8F  344C               	retlw	76	;'L'
 11673  3B90  3400               	retlw	0
 11674                           
 11675                           	psect	stringtext54
 11676  3B91                     __pstringtext54:	
 11677  3B91                     STR_79:	
 11678  3B91  3445               	retlw	69	;'E'
 11679  3B92  344F               	retlw	79	;'O'
 11680  3B93  3420               	retlw	32	;' '
 11681  3B94  3420               	retlw	32	;' '
 11682  3B95  3420               	retlw	32	;' '
 11683  3B96  3400               	retlw	0
 11684                           
 11685                           	psect	stringtext55
 11686  3B97                     __pstringtext55:	
 11687  3B97                     STR_14:	
 11688  3B97  3448               	retlw	72	;'H'
 11689  3B98  3441               	retlw	65	;'A'
 11690  3B99  3458               	retlw	88	;'X'
 11691  3B9A  3420               	retlw	32	;' '
 11692  3B9B  3420               	retlw	32	;' '
 11693  3B9C  3400               	retlw	0
 11694                           
 11695                           	psect	stringtext56
 11696  3B9D                     __pstringtext56:	
 11697  3B9D                     STR_8:	
 11698  3B9D  3445               	retlw	69	;'E'
 11699  3B9E  3458               	retlw	88	;'X'
 11700  3B9F  3449               	retlw	73	;'I'
 11701  3BA0  3454               	retlw	84	;'T'
 11702  3BA1  3420               	retlw	32	;' '
 11703  3BA2  3400               	retlw	0
 11704                           
 11705                           	psect	stringtext57
 11706  3BA3                     __pstringtext57:	
 11707  3BA3                     STR_5:	
 11708  3BA3  3453               	retlw	83	;'S'
 11709  3BA4  344C               	retlw	76	;'L'
 11710  3BA5  344F               	retlw	79	;'O'
 11711  3BA6  3454               	retlw	84	;'T'
 11712  3BA7  3420               	retlw	32	;' '
 11713  3BA8  3400               	retlw	0
 11714                           
 11715                           	psect	stringtext58
 11716  3BA9                     __pstringtext58:	
 11717  3BA9                     STR_77:	
 11718  3BA9  3420               	retlw	32	;' '
 11719  3BAA  3452               	retlw	82	;'R'
 11720  3BAB  3441               	retlw	65	;'A'
 11721  3BAC  3442               	retlw	66	;'B'
 11722  3BAD  3400               	retlw	0
 11723                           
 11724                           	psect	stringtext59
 11725  3BAE                     __pstringtext59:	
 11726  3BAE                     STR_51:	
 11727  3BAE  3456               	retlw	86	;'V'
 11728  3BAF  3444               	retlw	68	;'D'
 11729  3BB0  344B               	retlw	75	;'K'
 11730  3BB1  3441               	retlw	65	;'A'
 11731  3BB2  3400               	retlw	0
 11732                           
 11733                           	psect	stringtext60
 11734  3BB3                     __pstringtext60:	
 11735  3BB3                     STR_53:	
 11736  3BB3  3454               	retlw	84	;'T'
 11737  3BB4  3451               	retlw	81	;'Q'
 11738  3BB5  344C               	retlw	76	;'L'
 11739  3BB6  3441               	retlw	65	;'A'
 11740  3BB7  3400               	retlw	0
 11741                           
 11742                           	psect	stringtext61
 11743  3BB8                     __pstringtext61:	
 11744  3BB8                     STR_56:	
 11745  3BB8  3446               	retlw	70	;'F'
 11746  3BB9  3449               	retlw	73	;'I'
 11747  3BBA  3452               	retlw	82	;'R'
 11748  3BBB  3445               	retlw	69	;'E'
 11749  3BBC  3400               	retlw	0
 11750                           
 11751                           	psect	stringtext62
 11752  3BBD                     __pstringtext62:	
 11753  3BBD                     STR_54:	
 11754  3BBD  3443               	retlw	67	;'C'
 11755  3BBE  3448               	retlw	72	;'H'
 11756  3BBF  3455               	retlw	85	;'U'
 11757  3BC0  3447               	retlw	71	;'G'
 11758  3BC1  3400               	retlw	0
 11759                           
 11760                           	psect	stringtext63
 11761  3BC2                     __pstringtext63:	
 11762  3BC2                     STR_55:	
 11763  3BC2  3452               	retlw	82	;'R'
 11764  3BC3  3445               	retlw	69	;'E'
 11765  3BC4  3442               	retlw	66	;'B'
 11766  3BC5  344C               	retlw	76	;'L'
 11767  3BC6  3400               	retlw	0
 11768                           
 11769                           	psect	stringtext64
 11770  3BC7                     __pstringtext64:	
 11771  3BC7                     STR_50:	
 11772  3BC7  3442               	retlw	66	;'B'
 11773  3BC8  3445               	retlw	69	;'E'
 11774  3BC9  3445               	retlw	69	;'E'
 11775  3BCA  3452               	retlw	82	;'R'
 11776  3BCB  3400               	retlw	0
 11777                           
 11778                           	psect	stringtext65
 11779  3BCC                     __pstringtext65:	
 11780  3BCC                     STR_57:	
 11781  3BCC  3457               	retlw	87	;'W'
 11782  3BCD  3441               	retlw	65	;'A'
 11783  3BCE  3454               	retlw	84	;'T'
 11784  3BCF  3452               	retlw	82	;'R'
 11785  3BD0  3400               	retlw	0
 11786                           
 11787                           	psect	stringtext66
 11788  3BD1                     __pstringtext66:	
 11789  3BD1                     STR_49:	
 11790  3BD1  3453               	retlw	83	;'S'
 11791  3BD2  3448               	retlw	72	;'H'
 11792  3BD3  344F               	retlw	79	;'O'
 11793  3BD4  3454               	retlw	84	;'T'
 11794  3BD5  3400               	retlw	0
 11795                           
 11796                           	psect	stringtext67
 11797  3BD6                     __pstringtext67:	
 11798  3BD6                     STR_52:	
 11799  3BD6  3457               	retlw	87	;'W'
 11800  3BD7  3453               	retlw	83	;'S'
 11801  3BD8  344B               	retlw	75	;'K'
 11802  3BD9  3459               	retlw	89	;'Y'
 11803  3BDA  3400               	retlw	0
 11804                           
 11805                           	psect	stringtext68
 11806  3BDB                     __pstringtext68:	
 11807  3BDB                     STR_47:	
 11808  3BDB  344E               	retlw	78	;'N'
 11809  3BDC  3420               	retlw	32	;' '
 11810  3BDD  3420               	retlw	32	;' '
 11811  3BDE  3420               	retlw	32	;' '
 11812  3BDF  3400               	retlw	0
 11813                           
 11814                           	psect	stringtext69
 11815  3BE0                     __pstringtext69:	
 11816  3BE0                     STR_46:	
 11817  3BE0  3420               	retlw	32	;' '
 11818  3BE1  3455               	retlw	85	;'U'
 11819  3BE2  3420               	retlw	32	;' '
 11820  3BE3  3420               	retlw	32	;' '
 11821  3BE4  3400               	retlw	0
 11822                           
 11823                           	psect	stringtext70
 11824  3BE5                     __pstringtext70:	
 11825  3BE5                     STR_45:	
 11826  3BE5  344C               	retlw	76	;'L'
 11827  3BE6  344F               	retlw	79	;'O'
 11828  3BE7  3443               	retlw	67	;'C'
 11829  3BE8  344B               	retlw	75	;'K'
 11830  3BE9  3400               	retlw	0
 11831                           
 11832                           	psect	stringtext71
 11833  3BEA                     __pstringtext71:	
 11834  3BEA                     STR_48:	
 11835  3BEA  3420               	retlw	32	;' '
 11836  3BEB  3420               	retlw	32	;' '
 11837  3BEC  344C               	retlw	76	;'L'
 11838  3BED  344C               	retlw	76	;'L'
 11839  3BEE  3400               	retlw	0
 11840                           
 11841                           	psect	stringtext72
 11842  3BEF                     __pstringtext72:	
 11843  3BEF                     STR_44:	
 11844  3BEF  344F               	retlw	79	;'O'
 11845  3BF0  3450               	retlw	80	;'P'
 11846  3BF1  3445               	retlw	69	;'E'
 11847  3BF2  344E               	retlw	78	;'N'
 11848  3BF3  3400               	retlw	0
 11849                           
 11850                           	psect	stringtext73
 11851  3BF4                     __pstringtext73:	
 11852  3BF4                     STR_40:	
 11853  3BF4  3450               	retlw	80	;'P'
 11854  3BF5  3445               	retlw	69	;'E'
 11855  3BF6  3457               	retlw	87	;'W'
 11856  3BF7  3420               	retlw	32	;' '
 11857  3BF8  3400               	retlw	0
 11858                           
 11859                           	psect	stringtext74
 11860  3BF9                     __pstringtext74:	
 11861  3BF9                     STR_9:	
 11862  3BF9  344E               	retlw	78	;'N'
 11863  3BFA  3455               	retlw	85	;'U'
 11864  3BFB  344C               	retlw	76	;'L'
 11865  3BFC  344C               	retlw	76	;'L'
 11866  3BFD  3400               	retlw	0
 11867                           
 11868                           	psect	stringtext75
 11869  3BFE                     __pstringtext75:	
 11870  3BFE                     STR_4:	
 11871  3BFE  344D               	retlw	77	;'M'
 11872  3BFF  3445               	retlw	69	;'E'
 11873  3C00  344E               	retlw	78	;'N'
 11874  3C01  3455               	retlw	85	;'U'
 11875  3C02  3400               	retlw	0
 11876                           
 11877                           	psect	stringtext76
 11878  3C03                     __pstringtext76:	
 11879  3C03                     STR_2:	
 11880  3C03  3444               	retlw	68	;'D'
 11881  3C04  344F               	retlw	79	;'O'
 11882  3C05  3457               	retlw	87	;'W'
 11883  3C06  344E               	retlw	78	;'N'
 11884  3C07  3400               	retlw	0
 11885                           
 11886                           	psect	stringtext77
 11887  3C08                     __pstringtext77:	
 11888  3C08                     STR_1:	
 11889  3C08  3420               	retlw	32	;' '
 11890  3C09  3420               	retlw	32	;' '
 11891  3C0A  3455               	retlw	85	;'U'
 11892  3C0B  3450               	retlw	80	;'P'
 11893  3C0C  3400               	retlw	0
 11894                           
 11895                           	psect	stringtext78
 11896  3C0D                     __pstringtext78:	
 11897  3C0D                     STR_41:	
 11898  3C0D  3425               	retlw	37	;'%'
 11899  3C0E  3434               	retlw	52	;'4'
 11900  3C0F  3464               	retlw	100	;'d'
 11901  3C10  3400               	retlw	0
 11902                           
 11903                           	psect	stringtext79
 11904  3C11                     __pstringtext79:	
 11905  3C11                     STR_72:	
 11906  3C11  3425               	retlw	37	;'%'
 11907  3C12  3473               	retlw	115	;'s'
 11908  3C13  3400               	retlw	0
 11909                           
 11910                           	psect	stringtext80
 11911  0000                     __pstringtext80:	
 11912  287D                     
 11913                           ; #config settings
 11914  0000                     
 11915                           	psect	cinit
 11916  0018                     start_initialization:	
 11917  0018                     __initialization:		;BIGRAM
 11918                           
 11919                           ; Initialize objects allocated to BIGRAM
 11920  0018  306B               	movlw	low __pidataBIGRAM
 11921  0019  0084               	movwf	4
 11922  001A  3098               	movlw	(high __pidataBIGRAM)| (0+128)
 11923  001B  0085               	movwf	5
 11924  001C  30F0               	movlw	low (0+9968)
 11925  001D  0086               	movwf	6
 11926  001E  3026               	movlw	high (0+9968)
 11927  001F  0087               	movwf	7
 11928  0020  3001               	movlw	1
 11929  0021  00FF               	movwf	btemp+1
 11930  0022  3000               	movlw	0
 11931  0023  31B2  2283  3180   	fcall	init_ram
 11932                           
 11933                           ; Initialize objects allocated to BANK1
 11934  0026  3000               	movlw	low __pidataBANK1
 11935  0027  0084               	movwf	4
 11936  0028  3090               	movlw	(high __pidataBANK1)| (0+128)
 11937  0029  0085               	movwf	5
 11938  002A  30C7               	movlw	low __pdataBANK1
 11939  002B  0086               	movwf	6
 11940  002C  3000               	movlw	high __pdataBANK1
 11941  002D  0087               	movwf	7
 11942  002E  3000               	movlw	0
 11943  002F  00FF               	movwf	btemp+1
 11944  0030  300F               	movlw	15
 11945  0031  31B2  2283  3180   	fcall	init_ram
 11946                           
 11947                           ; Initialize objects allocated to BANK2
 11948  0034  0022               	movlb	2	; select bank2
 11949  0035  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
 11950  0038  00EB               	movwf	__pdataBANK2& (0+127)
 11951  0039  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
 11952  003C  00EC               	movwf	(__pdataBANK2+1)& (0+127)
 11953                           
 11954                           ; Initialize objects allocated to BANK3
 11955  003D  30A9               	movlw	low __pidataBANK3
 11956  003E  0084               	movwf	4
 11957  003F  30B3               	movlw	(high __pidataBANK3)| (0+128)
 11958  0040  0085               	movwf	5
 11959  0041  30D1               	movlw	low __pdataBANK3
 11960  0042  0086               	movwf	6
 11961  0043  3001               	movlw	high __pdataBANK3
 11962  0044  0087               	movwf	7
 11963  0045  3000               	movlw	0
 11964  0046  00FF               	movwf	btemp+1
 11965  0047  3017               	movlw	23
 11966  0048  31B2  2283  3180   	fcall	init_ram
 11967                           
 11968                           ; Initialize objects allocated to BANK4
 11969  004B  3013               	movlw	low __pidataBANK4
 11970  004C  0084               	movwf	4
 11971  004D  30AA               	movlw	(high __pidataBANK4)| (0+128)
 11972  004E  0085               	movwf	5
 11973  004F  3020               	movlw	low __pdataBANK4
 11974  0050  0086               	movwf	6
 11975  0051  3002               	movlw	high __pdataBANK4
 11976  0052  0087               	movwf	7
 11977  0053  3000               	movlw	0
 11978  0054  00FF               	movwf	btemp+1
 11979  0055  3048               	movlw	72
 11980  0056  31B2  2283  3180   	fcall	init_ram
 11981                           
 11982                           ; Initialize objects allocated to BANK5
 11983  0059  30E2               	movlw	low __pidataBANK5
 11984  005A  0084               	movwf	4
 11985  005B  30B4               	movlw	(high __pidataBANK5)| (0+128)
 11986  005C  0085               	movwf	5
 11987  005D  30CA               	movlw	low __pdataBANK5
 11988  005E  0086               	movwf	6
 11989  005F  3002               	movlw	high __pdataBANK5
 11990  0060  0087               	movwf	7
 11991  0061  3000               	movlw	0
 11992  0062  00FF               	movwf	btemp+1
 11993  0063  3023               	movlw	35
 11994  0064  31B2  2283  3180   	fcall	init_ram
 11995                           
 11996                           ; Initialize objects allocated to BANK6
 11997  0067  305B               	movlw	low __pidataBANK6
 11998  0068  0084               	movwf	4
 11999  0069  30AA               	movlw	(high __pidataBANK6)| (0+128)
 12000  006A  0085               	movwf	5
 12001  006B  3020               	movlw	low __pdataBANK6
 12002  006C  0086               	movwf	6
 12003  006D  3003               	movlw	high __pdataBANK6
 12004  006E  0087               	movwf	7
 12005  006F  3000               	movlw	0
 12006  0070  00FF               	movwf	btemp+1
 12007  0071  3049               	movlw	73
 12008  0072  31B2  2283  3180   	fcall	init_ram
 12009                           
 12010                           ; Initialize objects allocated to BANK7
 12011  0075  30EE               	movlw	low __pidataBANK7
 12012  0076  0084               	movwf	4
 12013  0077  30AA               	movlw	(high __pidataBANK7)| (0+128)
 12014  0078  0085               	movwf	5
 12015  0079  30A0               	movlw	low __pdataBANK7
 12016  007A  0086               	movwf	6
 12017  007B  3003               	movlw	high __pdataBANK7
 12018  007C  0087               	movwf	7
 12019  007D  3000               	movlw	0
 12020  007E  00FF               	movwf	btemp+1
 12021  007F  304C               	movlw	76
 12022  0080  31B2  2283  3180   	fcall	init_ram
 12023                           
 12024                           ; Initialize objects allocated to BANK8
 12025  0083  3092               	movlw	low __pidataBANK8
 12026  0084  0084               	movwf	4
 12027  0085  30B6               	movlw	(high __pidataBANK8)| (0+128)
 12028  0086  0085               	movwf	5
 12029  0087  3020               	movlw	low __pdataBANK8
 12030  0088  0086               	movwf	6
 12031  0089  3004               	movlw	high __pdataBANK8
 12032  008A  0087               	movwf	7
 12033  008B  3000               	movlw	0
 12034  008C  00FF               	movwf	btemp+1
 12035  008D  3038               	movlw	56
 12036  008E  31B2  2283  3180   	fcall	init_ram
 12037                           
 12038                           ; Initialize objects allocated to BANK10
 12039  0091  3003               	movlw	low __pidataBANK10
 12040  0092  0084               	movwf	4
 12041  0093  30B7               	movlw	(high __pidataBANK10)| (0+128)
 12042  0094  0085               	movwf	5
 12043  0095  3020               	movlw	low __pdataBANK10
 12044  0096  0086               	movwf	6
 12045  0097  3005               	movlw	high __pdataBANK10
 12046  0098  0087               	movwf	7
 12047  0099  3000               	movlw	0
 12048  009A  00FF               	movwf	btemp+1
 12049  009B  303A               	movlw	58
 12050  009C  31B2  2283  3180   	fcall	init_ram
 12051                           
 12052                           ; Clear objects allocated to COMMON
 12053  009F  01FC               	clrf	__pbssCOMMON& (0+127)
 12054                           
 12055                           ; Clear objects allocated to BANK1
 12056  00A0  30A0               	movlw	low __pbssBANK1
 12057  00A1  0084               	movwf	4
 12058  00A2  3000               	movlw	high __pbssBANK1
 12059  00A3  0085               	movwf	5
 12060  00A4  3027               	movlw	39
 12061  00A5  00FE               	movwf	btemp
 12062  00A6  3000               	movlw	0
 12063  00A7  00FF               	movwf	btemp+1
 12064  00A8  31B2  2277  3180   	fcall	clear_ram0
 12065                           
 12066                           ; Clear objects allocated to BANK2
 12067  00AB  3020               	movlw	low __pbssBANK2
 12068  00AC  0084               	movwf	4
 12069  00AD  3001               	movlw	high __pbssBANK2
 12070  00AE  0085               	movwf	5
 12071  00AF  304B               	movlw	75
 12072  00B0  00FE               	movwf	btemp
 12073  00B1  3000               	movlw	0
 12074  00B2  00FF               	movwf	btemp+1
 12075  00B3  31B2  2277  3180   	fcall	clear_ram0
 12076                           
 12077                           ; Clear objects allocated to BANK3
 12078  00B6  30A0               	movlw	low __pbssBANK3
 12079  00B7  0084               	movwf	4
 12080  00B8  3001               	movlw	high __pbssBANK3
 12081  00B9  0085               	movwf	5
 12082  00BA  3031               	movlw	49
 12083  00BB  00FE               	movwf	btemp
 12084  00BC  3000               	movlw	0
 12085  00BD  00FF               	movwf	btemp+1
 12086  00BE  31B2  2277  3180   	fcall	clear_ram0
 12087                           
 12088                           ; Clear objects allocated to BANK5
 12089  00C1  30A0               	movlw	low __pbssBANK5
 12090  00C2  0084               	movwf	4
 12091  00C3  3002               	movlw	high __pbssBANK5
 12092  00C4  0085               	movwf	5
 12093  00C5  302A               	movlw	42
 12094  00C6  00FE               	movwf	btemp
 12095  00C7  3000               	movlw	0
 12096  00C8  00FF               	movwf	btemp+1
 12097  00C9  31B2  2277  3180   	fcall	clear_ram0
 12098                           
 12099                           ; Clear objects allocated to BANK9
 12100  00CC  30A0               	movlw	low __pbssBANK9
 12101  00CD  0084               	movwf	4
 12102  00CE  3004               	movlw	high __pbssBANK9
 12103  00CF  0085               	movwf	5
 12104  00D0  303D               	movlw	61
 12105  00D1  00FE               	movwf	btemp
 12106  00D2  3000               	movlw	0
 12107  00D3  00FF               	movwf	btemp+1
 12108  00D4  31B2  2277  3180   	fcall	clear_ram0
 12109                           
 12110                           ; Clear objects allocated to BANK11
 12111  00D7  30A0               	movlw	low __pbssBANK11
 12112  00D8  0084               	movwf	4
 12113  00D9  3005               	movlw	high __pbssBANK11
 12114  00DA  0085               	movwf	5
 12115  00DB  3028               	movlw	40
 12116  00DC  00FE               	movwf	btemp
 12117  00DD  3000               	movlw	0
 12118  00DE  00FF               	movwf	btemp+1
 12119  00DF  31B2  2277         	fcall	clear_ram0
 12120  00E1                     end_of_initialization:	
 12121                           ;End of C runtime variable initialization code
 12122                           
 12123  00E1                     __end_of__initialization:	
 12124  00E1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 12125  00E2  0020               	movlb	0
 12126  00E3  3186  2E61         	ljmp	_main	;jump to C main() function
 12127                           
 12128                           	psect	bssCOMMON
 12129  007C                     __pbssCOMMON:	
 12130  007C                     _Shot_Index:	
 12131  007C                     	ds	1
 12132                           
 12133                           	psect	bssBANK1
 12134  00A0                     __pbssBANK1:	
 12135  00A0                     _matrix_leds_idx:	
 12136  00A0                     	ds	2
 12137  00A2                     _locked_leds:	
 12138  00A2                     	ds	2
 12139  00A4                     _locked_locking_leds_idx:	
 12140  00A4                     	ds	2
 12141  00A6                     _flashy_option_size:	
 12142  00A6                     	ds	2
 12143  00A8                     _flashy_option_idx:	
 12144  00A8                     	ds	2
 12145  00AA                     _deaths:	
 12146  00AA                     	ds	2
 12147  00AC                     _flashy_scroll_rate:	
 12148  00AC                     	ds	2
 12149  00AE                     _flashy_sparkle_rate:	
 12150  00AE                     	ds	2
 12151  00B0                     _flashy_leds_state_track:	
 12152  00B0                     	ds	2
 12153  00B2                     _flashy_leds_idx:	
 12154  00B2                     	ds	2
 12155  00B4                     _menu_option_size:	
 12156  00B4                     	ds	2
 12157  00B6                     _menu_option_idx:	
 12158  00B6                     	ds	2
 12159  00B8                     _oddeven:	
 12160  00B8                     	ds	2
 12161  00BA                     _currentTask:	
 12162  00BA                     	ds	2
 12163  00BC                     _slot_taskData:	
 12164  00BC                     	ds	2
 12165  00BE                     _TMR0_InterruptHandler:	
 12166  00BE                     	ds	2
 12167  00C0                     _timer0ReloadVal16bit:	
 12168  00C0                     	ds	2
 12169  00C2                     _matrix_found:	
 12170  00C2                     	ds	1
 12171  00C3                     _pw_found:	
 12172  00C3                     	ds	1
 12173  00C4                     _badge_locked:	
 12174  00C4                     	ds	1
 12175  00C5                     _secret_value:	
 12176  00C5                     	ds	2
 12177                           
 12178                           	psect	dataBANK1
 12179  00C7                     __pdataBANK1:	
 12180  00C7                     marquee_speedy@F14093:	
 12181  00C7                     	ds	5
 12182  00CC                     _randx:	
 12183  00CC                     	ds	4
 12184  00D0                     _Leds_idx:	
 12185  00D0                     	ds	2
 12186  00D2                     _locked_lock_base_leds:	
 12187  00D2                     	ds	2
 12188  00D4                     _FLASHY_TEXT_SECRET_TEST:	
 12189  00D4                     	ds	2
 12190                           
 12191                           	psect	bssBANK2
 12192  0120                     __pbssBANK2:	
 12193  0120                     _matrix_option_size:	
 12194  0120                     	ds	2
 12195  0122                     _matrix_option_idx:	
 12196  0122                     	ds	2
 12197  0124                     _TMR4_InterruptHandler:	
 12198  0124                     	ds	2
 12199  0126                     _TMR2_InterruptHandler:	
 12200  0126                     	ds	2
 12201  0128                     _secret_task:	
 12202  0128                     	ds	13
 12203  0135                     _locked_task:	
 12204  0135                     	ds	13
 12205  0142                     _slot_task:	
 12206  0142                     	ds	13
 12207  014F                     _menu_task:	
 12208  014F                     	ds	13
 12209  015C                     _flashy_task:	
 12210  015C                     	ds	13
 12211  0169                     _locked_secret_value:	
 12212  0169                     	ds	2
 12213                           
 12214                           	psect	dataBANK2
 12215  016B                     __pdataBANK2:	
 12216  016B                     _FLASHY_TEXT:	
 12217  016B                     	ds	2
 12218                           
 12219                           	psect	bssBANK3
 12220  01A0                     __pbssBANK3:	
 12221  01A0                     _schedulerInst:	
 12222  01A0                     	ds	18
 12223  01B2                     _badge_inst:	
 12224  01B2                     	ds	18
 12225  01C4                     _matrix_task:	
 12226  01C4                     	ds	13
 12227                           
 12228                           	psect	dataBANK3
 12229  01D1                     __pdataBANK3:	
 12230  01D1                     _Shot_Options:	
 12231  01D1                     	ds	18
 12232  01E3                     marquee@F14102:	
 12233  01E3                     	ds	5
 12234                           
 12235                           	psect	dataBANK4
 12236  0220                     __pdataBANK4:	
 12237  0220                     _locked_locking_leds:	
 12238  0220                     	ds	12
 12239  022C                     _menu_option:	
 12240  022C                     	ds	10
 12241  0236                     _secret_inputs:	
 12242  0236                     	ds	25
 12243  024F                     _locked_secret_inputs:	
 12244  024F                     	ds	25
 12245                           
 12246                           	psect	bssBANK5
 12247  02A0                     __pbssBANK5:	
 12248  02A0                     _secret_TaskData:	
 12249  02A0                     	ds	14
 12250  02AE                     _locked_TaskData:	
 12251  02AE                     	ds	14
 12252  02BC                     _menu_TaskData:	
 12253  02BC                     	ds	14
 12254                           
 12255                           	psect	dataBANK5
 12256  02CA                     __pdataBANK5:	
 12257  02CA                     _menu_options_leds:	
 12258  02CA                     	ds	10
 12259  02D4                     _matrix_secret_inputs:	
 12260  02D4                     	ds	25
 12261                           
 12262                           	psect	dataBANK6
 12263  0320                     __pdataBANK6:	
 12264  0320                     _Shot_Options_Long:	
 12265  0320                     	ds	18
 12266  0332                     _Slot_Wheel:	
 12267  0332                     	ds	55
 12268                           
 12269                           	psect	dataBANK7
 12270  03A0                     __pdataBANK7:	
 12271  03A0                     _roundabout_leds_inverse:	
 12272  03A0                     	ds	28
 12273  03BC                     _roundabout_leds:	
 12274  03BC                     	ds	28
 12275  03D8                     _matrix_option:	
 12276  03D8                     	ds	20
 12277                           
 12278                           	psect	dataBANK8
 12279  0420                     __pdataBANK8:	
 12280  0420                     _curtain_leds_inverse:	
 12281  0420                     	ds	28
 12282  043C                     _curtain_leds:	
 12283  043C                     	ds	28
 12284                           
 12285                           	psect	bssBANK9
 12286  04A0                     __pbssBANK9:	
 12287  04A0                     _matrix_TaskData:	
 12288  04A0                     	ds	31
 12289  04BF                     _flashy_TaskData:	
 12290  04BF                     	ds	30
 12291                           
 12292                           	psect	dataBANK10
 12293  0520                     __pdataBANK10:	
 12294  0520                     _flashy_option:	
 12295  0520                     	ds	58
 12296                           
 12297                           	psect	bssBANK11
 12298  05A0                     __pbssBANK11:	
 12299  05A0                     _slot_TaskData:	
 12300  05A0                     	ds	40
 12301                           
 12302                           	psect	inittext
 12303  3283                     init_ram:	
 12304  3283  00FE               	movwf	126
 12305  3284                     initloop:	
 12306  3284  0012               	moviw fsr0++
 12307  3285  001E               	movwi fsr1++
 12308  3286  3001               	movlw	1
 12309  3287  02FE               	subwf	126,f
 12310  3288  3000               	movlw	0
 12311  3289  3BFF               	subwfb	127,f
 12312  328A  087F               	movf	127,w
 12313  328B  047E               	iorwf	126,w
 12314  328C  1903               	btfsc	3,2
 12315  328D  3400               	retlw	0
 12316  328E  2A84               	goto	initloop
 12317                           
 12318                           	psect	clrtext
 12319  3277                     clear_ram0:	
 12320                           ;	Called with FSR0 containing the base address, and
 12321                           ;	btemp/btemp+1 has the size to clear
 12322                           
 12323  3277  0064               	clrwdt	;clear the watchdog before getting into this loop
 12324  3278                     clrloop0:	
 12325  3278  0180               	clrf	0	;clear RAM location pointed to by FSR
 12326  3279  3101               	addfsr 0,1
 12327  327A  3001               	movlw	1
 12328  327B  02FE               	subwf	126,f
 12329  327C  3000               	movlw	0
 12330  327D  3BFF               	subwfb	127,f
 12331  327E  087F               	movf	127,w
 12332  327F  047E               	iorwf	126,w
 12333  3280  1903               	btfsc	3,2
 12334  3281  3400               	retlw	0	;all done for this memory range, return
 12335  3282  2A78               	goto	clrloop0	;have we reached the end yet?
 12336                           
 12337                           	psect	cstackBANK1
 12338  00D6                     __pcstackBANK1:	
 12339  00D6                     schedulerExecute@currentSystemTick:	
 12340                           
 12341                           ; 2 bytes @ 0x0
 12342  00D6                     	ds	2
 12343  00D8                     schedulerExecute@taskLastSystemTick:	
 12344                           
 12345                           ; 2 bytes @ 0x2
 12346  00D8                     	ds	2
 12347  00DA                     schedulerExecute@tickDelta:	
 12348                           
 12349                           ; 2 bytes @ 0x4
 12350  00DA                     	ds	2
 12351  00DC                     schedulerExecute@scheduler:	
 12352                           
 12353                           ; 1 bytes @ 0x6
 12354  00DC                     	ds	1
 12355  00DD                     schedulerExecute@k:	
 12356                           
 12357                           ; 1 bytes @ 0x7
 12358  00DD                     	ds	1
 12359                           
 12360                           	psect	cstackCOMMON
 12361  0070                     __pcstackCOMMON:	
 12362  0070                     ?_isdigit:	
 12363  0070                     ?_TMR2_StartTimer:	
 12364                           ; 1 bit 
 12365                           
 12366  0070                     ?_TMR4_StartTimer:	
 12367                           ; 1 bytes @ 0x0
 12368                           
 12369  0070                     ?_PIN_MANAGER_Initialize:	
 12370                           ; 1 bytes @ 0x0
 12371                           
 12372  0070                     ?_OSCILLATOR_Initialize:	
 12373                           ; 1 bytes @ 0x0
 12374                           
 12375  0070                     ?_WDT_Initialize:	
 12376                           ; 1 bytes @ 0x0
 12377                           
 12378  0070                     ?_PWM2_Initialize:	
 12379                           ; 1 bytes @ 0x0
 12380                           
 12381  0070                     ?_TMR0_Initialize:	
 12382                           ; 1 bytes @ 0x0
 12383                           
 12384  0070                     ?_TMR0_DefaultInterruptHandler:	
 12385                           ; 1 bytes @ 0x0
 12386                           
 12387  0070                     ??_TMR0_DefaultInterruptHandler:	
 12388                           ; 1 bytes @ 0x0
 12389                           
 12390  0070                     ?_TMR0_StartTimer:	
 12391                           ; 1 bytes @ 0x0
 12392                           
 12393  0070                     ?_TMR0_CallBack:	
 12394                           ; 1 bytes @ 0x0
 12395                           
 12396  0070                     ??_TMR0_CallBack:	
 12397                           ; 1 bytes @ 0x0
 12398                           
 12399  0070                     ?_nullifyBadge_segDisplayRegister:	
 12400                           ; 1 bytes @ 0x0
 12401                           
 12402  0070                     ?_nullifyBadge_segDisplayErase:	
 12403                           ; 1 bytes @ 0x0
 12404                           
 12405  0070                     ?_nullifyBadge_segDisplayForceUpdate:	
 12406                           ; 1 bytes @ 0x0
 12407                           
 12408  0070                     ?_nullifyBadge_platformInit:	
 12409                           ; 1 bytes @ 0x0
 12410                           
 12411  0070                     ?_displayL2_Initialize:	
 12412                           ; 1 bytes @ 0x0
 12413                           
 12414  0070                     ?_displayL2_ForceUpdate:	
 12415                           ; 1 bytes @ 0x0
 12416                           
 12417  0070                     ?_displayL2_EraseSegDisplay:	
 12418                           ; 1 bytes @ 0x0
 12419                           
 12420  0070                     ?_displayL2_ClrUserLeds:	
 12421                           ; 1 bytes @ 0x0
 12422                           
 12423  0070                     ?_displayL1_Update:	
 12424                           ; 1 bytes @ 0x0
 12425                           
 12426  0070                     ?_SPI1_Initialize:	
 12427                           ; 1 bytes @ 0x0
 12428                           
 12429  0070                     ?_SPI1_Exchange8bit:	
 12430                           ; 1 bytes @ 0x0
 12431                           
 12432  0070                     ?_PWM5_Initialize:	
 12433                           ; 1 bytes @ 0x0
 12434                           
 12435  0070                     ?_PWM6_Initialize:	
 12436                           ; 1 bytes @ 0x0
 12437                           
 12438  0070                     ?_PWM1_Initialize:	
 12439                           ; 1 bytes @ 0x0
 12440                           
 12441  0070                     ?_TMR2_Initialize:	
 12442                           ; 1 bytes @ 0x0
 12443                           
 12444  0070                     ?_TMR4_Initialize:	
 12445                           ; 1 bytes @ 0x0
 12446                           
 12447  0070                     ?_SYSTEM_Initialize:	
 12448                           ; 1 bytes @ 0x0
 12449                           
 12450  0070                     ?_TMR0_ISR:	
 12451                           ; 1 bytes @ 0x0
 12452                           
 12453  0070                     ??_TMR0_ISR:	
 12454                           ; 1 bytes @ 0x0
 12455                           
 12456  0070                     ?_INTERRUPT_InterruptManager:	
 12457                           ; 1 bytes @ 0x0
 12458                           
 12459  0070                     ??_INTERRUPT_InterruptManager:	
 12460                           ; 1 bytes @ 0x0
 12461                           
 12462  0070                     ?_scheduler_TaskRun:	
 12463                           ; 1 bytes @ 0x0
 12464                           
 12465  0070                     ?_scheduler_Init:	
 12466                           ; 1 bytes @ 0x0
 12467                           
 12468  0070                     ?_scheduler_TaskInit:	
 12469                           ; 1 bytes @ 0x0
 12470                           
 12471  0070                     ?_schedulerExecute:	
 12472                           ; 1 bytes @ 0x0
 12473                           
 12474  0070                     ?_led_rand:	
 12475                           ; 1 bytes @ 0x0
 12476                           
 12477  0070                     ?_main:	
 12478                           ; 1 bytes @ 0x0
 12479                           
 12480  0070                     ?_nullifyBadge_userLedsRegister:	
 12481                           ; 1 bytes @ 0x0
 12482                           
 12483  0070                     ?_nullifyBadge_userLedsClr:	
 12484                           ; 1 bytes @ 0x0
 12485                           
 12486  0070                     ?_nullifyBadge_buttonsGet:	
 12487                           ; 1 bytes @ 0x0
 12488                           
 12489  0070                     ?_nullifyBadge_irGet:	
 12490                           ; 1 bytes @ 0x0
 12491                           
 12492  0070                     ?_nullifyBadge_irTxRegister:	
 12493                           ; 1 bytes @ 0x0
 12494                           
 12495  0070                     ?_nullifyBadge_irTxRelease:	
 12496                           ; 1 bytes @ 0x0
 12497                           
 12498  0070                     ?_nullifyBadge_irTxSet:	
 12499                           ; 1 bytes @ 0x0
 12500                           
 12501  0070                     ?_nullifyBadge_irTxClr:	
 12502                           ; 1 bytes @ 0x0
 12503                           
 12504  0070                     ?_displayL1_Initialize:	
 12505                           ; 1 bytes @ 0x0
 12506                           
 12507  0070                     ?_locked_lock_leds:	
 12508                           ; 1 bytes @ 0x0
 12509                           
 12510  0070                     ?_locked_unlock_leds:	
 12511                           ; 2 bytes @ 0x0
 12512                           
 12513                           
 12514                           ; 2 bytes @ 0x0
 12515  0070                     	ds	1
 12516  0071                     ??_TMR2_StartTimer:	
 12517  0071                     ??_TMR4_StartTimer:	
 12518                           ; 1 bytes @ 0x1
 12519                           
 12520  0071                     ??_PIN_MANAGER_Initialize:	
 12521                           ; 1 bytes @ 0x1
 12522                           
 12523  0071                     ??_OSCILLATOR_Initialize:	
 12524                           ; 1 bytes @ 0x1
 12525                           
 12526  0071                     ??_WDT_Initialize:	
 12527                           ; 1 bytes @ 0x1
 12528                           
 12529  0071                     ??_PWM2_Initialize:	
 12530                           ; 1 bytes @ 0x1
 12531                           
 12532  0071                     ?_TMR0_SetInterruptHandler:	
 12533                           ; 1 bytes @ 0x1
 12534                           
 12535  0071                     ??_TMR0_StartTimer:	
 12536                           ; 1 bytes @ 0x1
 12537                           
 12538  0071                     ??_nullifyBadge_segDisplayRegister:	
 12539                           ; 1 bytes @ 0x1
 12540                           
 12541  0071                     ?_secret_clear:	
 12542                           ; 1 bytes @ 0x1
 12543                           
 12544  0071                     ??_isdigit:	
 12545                           ; 1 bytes @ 0x1
 12546                           
 12547  0071                     ??_SPI1_Initialize:	
 12548                           ; 1 bytes @ 0x1
 12549                           
 12550  0071                     ??_SPI1_Exchange8bit:	
 12551                           ; 1 bytes @ 0x1
 12552                           
 12553  0071                     ??_PWM5_Initialize:	
 12554                           ; 1 bytes @ 0x1
 12555                           
 12556  0071                     ?_PWM5_LoadDutyValue:	
 12557                           ; 1 bytes @ 0x1
 12558                           
 12559  0071                     ??_PWM6_Initialize:	
 12560                           ; 1 bytes @ 0x1
 12561                           
 12562  0071                     ?_PWM6_LoadDutyValue:	
 12563                           ; 1 bytes @ 0x1
 12564                           
 12565  0071                     ??_PWM1_Initialize:	
 12566                           ; 1 bytes @ 0x1
 12567                           
 12568  0071                     ?_PWM1_LoadDutyValue:	
 12569                           ; 1 bytes @ 0x1
 12570                           
 12571  0071                     ??_TMR2_Initialize:	
 12572                           ; 1 bytes @ 0x1
 12573                           
 12574  0071                     ??_TMR4_Initialize:	
 12575                           ; 1 bytes @ 0x1
 12576                           
 12577  0071                     ?_PWM2_LoadDutyValue:	
 12578                           ; 1 bytes @ 0x1
 12579                           
 12580  0071                     ??_scheduler_Init:	
 12581                           ; 1 bytes @ 0x1
 12582                           
 12583  0071                     ??_scheduler_TaskInit:	
 12584                           ; 1 bytes @ 0x1
 12585                           
 12586  0071                     ??_nullifyBadge_userLedsRegister:	
 12587                           ; 1 bytes @ 0x1
 12588                           
 12589  0071                     ??_nullifyBadge_buttonsGet:	
 12590                           ; 1 bytes @ 0x1
 12591                           
 12592  0071                     ??_nullifyBadge_irGet:	
 12593                           ; 1 bytes @ 0x1
 12594                           
 12595  0071                     ??_nullifyBadge_irTxRegister:	
 12596                           ; 1 bytes @ 0x1
 12597                           
 12598  0071                     ??_nullifyBadge_irTxRelease:	
 12599                           ; 1 bytes @ 0x1
 12600                           
 12601  0071                     ??_nullifyBadge_irTxSet:	
 12602                           ; 1 bytes @ 0x1
 12603                           
 12604  0071                     ??_nullifyBadge_irTxClr:	
 12605                           ; 1 bytes @ 0x1
 12606                           
 12607  0071                     ?_displayL1_SetUserLed:	
 12608                           ; 1 bytes @ 0x1
 12609                           
 12610  0071                     ??_locked_lock_leds:	
 12611                           ; 1 bytes @ 0x1
 12612                           
 12613  0071                     ??_locked_unlock_leds:	
 12614                           ; 1 bytes @ 0x1
 12615                           
 12616  0071                     ?___bmul:	
 12617                           ; 1 bytes @ 0x1
 12618                           
 12619  0071                     ?_strlen:	
 12620                           ; 1 bytes @ 0x1
 12621                           
 12622  0071                     ?_memset:	
 12623                           ; 2 bytes @ 0x1
 12624                           
 12625  0071                     ?_displayCharReverse:	
 12626                           ; 2 bytes @ 0x1
 12627                           
 12628  0071                     ?_TMR0_Read16bitTimer:	
 12629                           ; 2 bytes @ 0x1
 12630                           
 12631  0071                     ?_locked_get_lock_leds:	
 12632                           ; 2 bytes @ 0x1
 12633                           
 12634  0071                     ?_locked_get_unlock_leds:	
 12635                           ; 2 bytes @ 0x1
 12636                           
 12637  0071                     ?___wmul:	
 12638                           ; 2 bytes @ 0x1
 12639                           
 12640  0071                     ?___lwdiv:	
 12641                           ; 2 bytes @ 0x1
 12642                           
 12643  0071                     ?___lmul:	
 12644                           ; 2 bytes @ 0x1
 12645                           
 12646  0071                     SPI1_Exchange8bit@data:	
 12647                           ; 4 bytes @ 0x1
 12648                           
 12649  0071                     PIN_MANAGER_Initialize@state:	
 12650                           ; 1 bytes @ 0x1
 12651                           
 12652  0071                     scheduler_TaskInit@task:	
 12653                           ; 1 bytes @ 0x1
 12654                           
 12655  0071                     nullifyBadge_segDisplayRegister@badge:	
 12656                           ; 1 bytes @ 0x1
 12657                           
 12658  0071                     nullifyBadge_userLedsRegister@badge:	
 12659                           ; 1 bytes @ 0x1
 12660                           
 12661  0071                     nullifyBadge_irTxRegister@badge:	
 12662                           ; 1 bytes @ 0x1
 12663                           
 12664  0071                     ___bmul@multiplicand:	
 12665                           ; 1 bytes @ 0x1
 12666                           
 12667  0071                     _isdigit$3646:	
 12668                           ; 1 bytes @ 0x1
 12669                           
 12670  0071                     PWM5_LoadDutyValue@dutyValue:	
 12671                           ; 1 bytes @ 0x1
 12672                           
 12673  0071                     PWM6_LoadDutyValue@dutyValue:	
 12674                           ; 2 bytes @ 0x1
 12675                           
 12676  0071                     PWM1_LoadDutyValue@dutyValue:	
 12677                           ; 2 bytes @ 0x1
 12678                           
 12679  0071                     PWM2_LoadDutyValue@dutyValue:	
 12680                           ; 2 bytes @ 0x1
 12681                           
 12682  0071                     TMR0_SetInterruptHandler@InterruptHandler:	
 12683                           ; 2 bytes @ 0x1
 12684                           
 12685  0071                     displayL1_SetUserLed@userLedVect:	
 12686                           ; 2 bytes @ 0x1
 12687                           
 12688  0071                     displayCharReverse@cVal:	
 12689                           ; 2 bytes @ 0x1
 12690                           
 12691  0071                     secret_clear@data:	
 12692                           ; 2 bytes @ 0x1
 12693                           
 12694  0071                     ___wmul@multiplier:	
 12695                           ; 2 bytes @ 0x1
 12696                           
 12697  0071                     ___lwdiv@divisor:	
 12698                           ; 2 bytes @ 0x1
 12699                           
 12700  0071                     memset@p1:	
 12701                           ; 2 bytes @ 0x1
 12702                           
 12703  0071                     strlen@s:	
 12704                           ; 2 bytes @ 0x1
 12705                           
 12706  0071                     ___lmul@multiplier:	
 12707                           ; 2 bytes @ 0x1
 12708                           
 12709                           
 12710                           ; 4 bytes @ 0x1
 12711  0071                     	ds	1
 12712  0072                     ?_SPI1_Exchange8bitBuffer:	
 12713  0072                     ??___bmul:	
 12714                           ; 1 bytes @ 0x2
 12715                           
 12716  0072                     SPI1_Exchange8bitBuffer@bufLen:	
 12717                           ; 1 bytes @ 0x2
 12718                           
 12719  0072                     scheduler_Init@scheduler:	
 12720                           ; 1 bytes @ 0x2
 12721                           
 12722  0072                     nullifyBadge_irTxRelease@badge:	
 12723                           ; 1 bytes @ 0x2
 12724                           
 12725  0072                     isdigit@c:	
 12726                           ; 1 bytes @ 0x2
 12727                           
 12728                           
 12729                           ; 1 bytes @ 0x2
 12730  0072                     	ds	1
 12731  0073                     ??_TMR0_Initialize:	
 12732  0073                     ??_TMR0_SetInterruptHandler:	
 12733                           ; 1 bytes @ 0x3
 12734                           
 12735  0073                     ??_strlen:	
 12736                           ; 1 bytes @ 0x3
 12737                           
 12738  0073                     ??_displayCharReverse:	
 12739                           ; 1 bytes @ 0x3
 12740                           
 12741  0073                     ??_secret_clear:	
 12742                           ; 1 bytes @ 0x3
 12743                           
 12744  0073                     ??_PWM5_LoadDutyValue:	
 12745                           ; 1 bytes @ 0x3
 12746                           
 12747  0073                     ??_PWM6_LoadDutyValue:	
 12748                           ; 1 bytes @ 0x3
 12749                           
 12750  0073                     ??_PWM1_LoadDutyValue:	
 12751                           ; 1 bytes @ 0x3
 12752                           
 12753  0073                     ??_SYSTEM_Initialize:	
 12754                           ; 1 bytes @ 0x3
 12755                           
 12756  0073                     ??_PWM2_LoadDutyValue:	
 12757                           ; 1 bytes @ 0x3
 12758                           
 12759  0073                     ??_TMR0_Read16bitTimer:	
 12760                           ; 1 bytes @ 0x3
 12761                           
 12762  0073                     ??_displayL1_SetUserLed:	
 12763                           ; 1 bytes @ 0x3
 12764                           
 12765  0073                     ??_locked_get_lock_leds:	
 12766                           ; 1 bytes @ 0x3
 12767                           
 12768  0073                     ??_locked_get_unlock_leds:	
 12769                           ; 1 bytes @ 0x3
 12770                           
 12771  0073                     SPI1_Exchange8bitBuffer@dataOut:	
 12772                           ; 1 bytes @ 0x3
 12773                           
 12774  0073                     scheduler_Init@k:	
 12775                           ; 1 bytes @ 0x3
 12776                           
 12777  0073                     nullifyBadge_buttonsGet@retVal:	
 12778                           ; 1 bytes @ 0x3
 12779                           
 12780  0073                     ___bmul@product:	
 12781                           ; 1 bytes @ 0x3
 12782                           
 12783  0073                     locked_lock_leds@size:	
 12784                           ; 1 bytes @ 0x3
 12785                           
 12786  0073                     locked_get_unlock_leds@leds:	
 12787                           ; 2 bytes @ 0x3
 12788                           
 12789  0073                     ___wmul@multiplicand:	
 12790                           ; 2 bytes @ 0x3
 12791                           
 12792  0073                     ___lwdiv@dividend:	
 12793                           ; 2 bytes @ 0x3
 12794                           
 12795  0073                     memset@c:	
 12796                           ; 2 bytes @ 0x3
 12797                           
 12798                           
 12799                           ; 2 bytes @ 0x3
 12800  0073                     	ds	1
 12801  0074                     ??_SPI1_Exchange8bitBuffer:	
 12802  0074                     displayL1_SetUserLed@display:	
 12803                           ; 1 bytes @ 0x4
 12804                           
 12805  0074                     ___bmul@multiplier:	
 12806                           ; 1 bytes @ 0x4
 12807                           
 12808                           
 12809                           ; 1 bytes @ 0x4
 12810  0074                     	ds	1
 12811  0075                     ??___wmul:	
 12812  0075                     ??___lwdiv:	
 12813                           ; 1 bytes @ 0x5
 12814                           
 12815  0075                     locked_get_lock_leds@size:	
 12816                           ; 1 bytes @ 0x5
 12817                           
 12818  0075                     ___wmul@product:	
 12819                           ; 2 bytes @ 0x5
 12820                           
 12821  0075                     memset@n:	
 12822                           ; 2 bytes @ 0x5
 12823                           
 12824  0075                     strlen@cp:	
 12825                           ; 2 bytes @ 0x5
 12826                           
 12827  0075                     ___lmul@multiplicand:	
 12828                           ; 2 bytes @ 0x5
 12829                           
 12830                           
 12831                           ; 4 bytes @ 0x5
 12832  0075                     	ds	1
 12833  0076                     ___lwdiv@counter:	
 12834                           
 12835                           ; 1 bytes @ 0x6
 12836  0076                     	ds	1
 12837  0077                     ??_memset:	
 12838  0077                     ?_locked_secret_check:	
 12839                           ; 1 bytes @ 0x7
 12840                           
 12841  0077                     ?_secret_check:	
 12842                           ; 1 bytes @ 0x7
 12843                           
 12844  0077                     ?_matrix_secret_check:	
 12845                           ; 1 bytes @ 0x7
 12846                           
 12847  0077                     SPI1_Exchange8bitBuffer@dataIn:	
 12848                           ; 1 bytes @ 0x7
 12849                           
 12850  0077                     locked_get_lock_leds@leds:	
 12851                           ; 1 bytes @ 0x7
 12852                           
 12853  0077                     locked_secret_check@data:	
 12854                           ; 2 bytes @ 0x7
 12855                           
 12856  0077                     secret_check@data:	
 12857                           ; 2 bytes @ 0x7
 12858                           
 12859  0077                     matrix_secret_check@data:	
 12860                           ; 2 bytes @ 0x7
 12861                           
 12862  0077                     ___lwdiv@quotient:	
 12863                           ; 2 bytes @ 0x7
 12864                           
 12865  0077                     memset@p:	
 12866                           ; 2 bytes @ 0x7
 12867                           
 12868                           
 12869                           ; 2 bytes @ 0x7
 12870  0077                     	ds	1
 12871  0078                     SPI1_Exchange8bitBuffer@bytesWritten:	
 12872  0078                     displayCharReverse@retValLower:	
 12873                           ; 1 bytes @ 0x8
 12874                           
 12875  0078                     TMR0_Read16bitTimer@readVal:	
 12876                           ; 1 bytes @ 0x8
 12877                           
 12878                           
 12879                           ; 2 bytes @ 0x8
 12880  0078                     	ds	1
 12881  0079                     ??_displayL1_Update:	
 12882  0079                     ??___lmul:	
 12883                           ; 1 bytes @ 0x9
 12884                           
 12885  0079                     ??___almod:	
 12886                           ; 1 bytes @ 0x9
 12887                           
 12888  0079                     ??___lwmod:	
 12889                           ; 1 bytes @ 0x9
 12890                           
 12891  0079                     displayCharReverse@retValUpper:	
 12892                           ; 1 bytes @ 0x9
 12893                           
 12894  0079                     locked_secret_check@buttonPressed:	
 12895                           ; 1 bytes @ 0x9
 12896                           
 12897  0079                     secret_check@buttonPressed:	
 12898                           ; 1 bytes @ 0x9
 12899                           
 12900  0079                     matrix_secret_check@buttonPressed:	
 12901                           ; 1 bytes @ 0x9
 12902                           
 12903                           
 12904                           ; 1 bytes @ 0x9
 12905  0079                     	ds	1
 12906  007A                     TMR0_Read16bitTimer@readValLow:	
 12907  007A                     displayCharReverse@retValUpperRev:	
 12908                           ; 1 bytes @ 0xA
 12909                           
 12910  007A                     ___almod@counter:	
 12911                           ; 1 bytes @ 0xA
 12912                           
 12913  007A                     ___lwmod@counter:	
 12914                           ; 1 bytes @ 0xA
 12915                           
 12916                           
 12917                           ; 1 bytes @ 0xA
 12918  007A                     	ds	1
 12919  007B                     ??_displayL2_ForceUpdate:	
 12920  007B                     ??_displayL2_SetUserLeds:	
 12921                           ; 1 bytes @ 0xB
 12922                           
 12923  007B                     ??_displayL2_ClrUserLeds:	
 12924                           ; 1 bytes @ 0xB
 12925                           
 12926  007B                     ??_displayL1_Initialize:	
 12927                           ; 1 bytes @ 0xB
 12928                           
 12929  007B                     TMR0_Read16bitTimer@readValHigh:	
 12930                           ; 1 bytes @ 0xB
 12931                           
 12932  007B                     displayL1_Initialize@display:	
 12933                           ; 1 bytes @ 0xB
 12934                           
 12935  007B                     displayCharReverse@k:	
 12936                           ; 1 bytes @ 0xB
 12937                           
 12938  007B                     displayL2_ForceUpdate@display:	
 12939                           ; 1 bytes @ 0xB
 12940                           
 12941  007B                     displayL2_SetUserLeds@display:	
 12942                           ; 1 bytes @ 0xB
 12943                           
 12944  007B                     displayL2_ClrUserLeds@display:	
 12945                           ; 1 bytes @ 0xB
 12946                           
 12947  007B                     ___almod@sign:	
 12948                           ; 1 bytes @ 0xB
 12949                           
 12950                           
 12951                           ; 1 bytes @ 0xB
 12952  007B                     	ds	1
 12953  007C                     ??_nullifyBadge_segDisplayErase:	
 12954  007C                     ??_nullifyBadge_segDisplayPutStr:	
 12955                           ; 1 bytes @ 0xC
 12956                           
 12957  007C                     ??_nullifyBadge_segDisplayForceUpdate:	
 12958                           ; 1 bytes @ 0xC
 12959                           
 12960  007C                     ??_nullifyBadge_userLedsSet:	
 12961                           ; 1 bytes @ 0xC
 12962                           
 12963  007C                     ??_nullifyBadge_platformInit:	
 12964                           ; 1 bytes @ 0xC
 12965                           
 12966  007C                     ??_flashy_Init:	
 12967                           ; 1 bytes @ 0xC
 12968                           
 12969  007C                     ??_menu_Init:	
 12970                           ; 1 bytes @ 0xC
 12971                           
 12972  007C                     ??_slot_Init:	
 12973                           ; 1 bytes @ 0xC
 12974                           
 12975  007C                     ??_locked_Init:	
 12976                           ; 1 bytes @ 0xC
 12977                           
 12978  007C                     ??_secret_Init:	
 12979                           ; 1 bytes @ 0xC
 12980                           
 12981  007C                     ??_displayL2_Initialize:	
 12982                           ; 1 bytes @ 0xC
 12983                           
 12984  007C                     ??_displayL2_EraseSegDisplay:	
 12985                           ; 1 bytes @ 0xC
 12986                           
 12987  007C                     ??_menu_clear:	
 12988                           ; 1 bytes @ 0xC
 12989                           
 12990  007C                     ??_menu_display_option:	
 12991                           ; 1 bytes @ 0xC
 12992                           
 12993  007C                     ??_menu_run_option:	
 12994                           ; 1 bytes @ 0xC
 12995                           
 12996  007C                     ??_locked_clear:	
 12997                           ; 1 bytes @ 0xC
 12998                           
 12999  007C                     ??_scheduler_TaskRun:	
 13000                           ; 1 bytes @ 0xC
 13001                           
 13002  007C                     ??_led_circle:	
 13003                           ; 1 bytes @ 0xC
 13004                           
 13005  007C                     ??_let_alternate:	
 13006                           ; 1 bytes @ 0xC
 13007                           
 13008  007C                     ??_nullifyBadge_userLedsClr:	
 13009                           ; 1 bytes @ 0xC
 13010                           
 13011  007C                     ??_flashy_display_option:	
 13012                           ; 1 bytes @ 0xC
 13013                           
 13014                           
 13015                           	psect	cstackBANK0
 13016  0020                     __pcstackBANK0:	
 13017                           ; 1 bytes @ 0xC
 13018                           
 13019  0020                     ?_displayL1_SetSegChar:	
 13020  0020                     ??_locked_secret_check:	
 13021                           ; 1 bytes @ 0x0
 13022                           
 13023  0020                     ??_secret_check:	
 13024                           ; 1 bytes @ 0x0
 13025                           
 13026  0020                     ??_matrix_secret_check:	
 13027                           ; 1 bytes @ 0x0
 13028                           
 13029  0020                     displayL1_SetSegChar@c:	
 13030                           ; 1 bytes @ 0x0
 13031                           
 13032  0020                     ___lmul@product:	
 13033                           ; 1 bytes @ 0x0
 13034                           
 13035  0020                     displayL1_Update@tmpRxBuf:	
 13036                           ; 4 bytes @ 0x0
 13037                           
 13038                           
 13039                           ; 10 bytes @ 0x0
 13040  0020                     	ds	1
 13041  0021                     displayL1_SetSegChar@charPos:	
 13042                           
 13043                           ; 1 bytes @ 0x1
 13044  0021                     	ds	1
 13045  0022                     ??_displayL1_SetSegChar:	
 13046                           
 13047                           ; 1 bytes @ 0x2
 13048  0022                     	ds	1
 13049  0023                     locked_secret_check@size:	
 13050  0023                     secret_check@size:	
 13051                           ; 2 bytes @ 0x3
 13052                           
 13053  0023                     matrix_secret_check@size:	
 13054                           ; 2 bytes @ 0x3
 13055                           
 13056                           
 13057                           ; 2 bytes @ 0x3
 13058  0023                     	ds	1
 13059  0024                     ?_rand:	
 13060                           
 13061                           ; 2 bytes @ 0x4
 13062  0024                     	ds	1
 13063  0025                     locked_secret_check@currents_size:	
 13064  0025                     secret_check@currents_size:	
 13065                           ; 2 bytes @ 0x5
 13066                           
 13067  0025                     matrix_secret_check@currents_size:	
 13068                           ; 2 bytes @ 0x5
 13069                           
 13070                           
 13071                           ; 2 bytes @ 0x5
 13072  0025                     	ds	1
 13073  0026                     ??_rand:	
 13074  0026                     displayL1_SetSegChar@dispDataVectBaseIdx:	
 13075                           ; 1 bytes @ 0x6
 13076                           
 13077                           
 13078                           ; 1 bytes @ 0x6
 13079  0026                     	ds	1
 13080  0027                     displayL1_SetSegChar@display:	
 13081  0027                     locked_secret_check@inputs:	
 13082                           ; 1 bytes @ 0x7
 13083                           
 13084  0027                     secret_check@inputs:	
 13085                           ; 1 bytes @ 0x7
 13086                           
 13087  0027                     matrix_secret_check@inputs:	
 13088                           ; 1 bytes @ 0x7
 13089                           
 13090                           
 13091                           ; 1 bytes @ 0x7
 13092  0027                     	ds	1
 13093  0028                     displayL1_SetSegChar@charData:	
 13094  0028                     locked_secret_check@i:	
 13095                           ; 2 bytes @ 0x8
 13096                           
 13097  0028                     secret_check@i:	
 13098                           ; 2 bytes @ 0x8
 13099                           
 13100  0028                     matrix_secret_check@i:	
 13101                           ; 2 bytes @ 0x8
 13102                           
 13103                           
 13104                           ; 2 bytes @ 0x8
 13105  0028                     	ds	2
 13106  002A                     ?_displayL2_PutChar:	
 13107  002A                     displayL1_Update@display:	
 13108                           ; 1 bytes @ 0xA
 13109                           
 13110  002A                     displayL2_PutChar@c:	
 13111                           ; 1 bytes @ 0xA
 13112                           
 13113                           
 13114                           ; 1 bytes @ 0xA
 13115  002A                     	ds	1
 13116  002B                     ??_displayL2_PutChar:	
 13117  002B                     ?_displayL2_SetUserLeds:	
 13118                           ; 1 bytes @ 0xB
 13119                           
 13120  002B                     ?___lwmod:	
 13121                           ; 1 bytes @ 0xB
 13122                           
 13123  002B                     ?___almod:	
 13124                           ; 2 bytes @ 0xB
 13125                           
 13126  002B                     nullifyBadge_segDisplayForceUpdate@badge:	
 13127                           ; 4 bytes @ 0xB
 13128                           
 13129  002B                     nullifyBadge_userLedsClr@badge:	
 13130                           ; 1 bytes @ 0xB
 13131                           
 13132  002B                     displayL2_Initialize@display:	
 13133                           ; 1 bytes @ 0xB
 13134                           
 13135  002B                     displayL2_SetUserLeds@userLedData:	
 13136                           ; 1 bytes @ 0xB
 13137                           
 13138  002B                     ___lwmod@divisor:	
 13139                           ; 2 bytes @ 0xB
 13140                           
 13141  002B                     ___almod@divisor:	
 13142                           ; 2 bytes @ 0xB
 13143                           
 13144                           
 13145                           ; 4 bytes @ 0xB
 13146  002B                     	ds	1
 13147  002C                     nullifyBadge_platformInit@badge:	
 13148                           
 13149                           ; 1 bytes @ 0xC
 13150  002C                     	ds	1
 13151  002D                     ?_nullifyBadge_userLedsSet:	
 13152  002D                     nullifyBadge_userLedsSet@userLedData:	
 13153                           ; 1 bytes @ 0xD
 13154                           
 13155  002D                     ___lwmod@dividend:	
 13156                           ; 2 bytes @ 0xD
 13157                           
 13158                           
 13159                           ; 2 bytes @ 0xD
 13160  002D                     	ds	1
 13161  002E                     displayL2_PutChar@k:	
 13162                           
 13163                           ; 1 bytes @ 0xE
 13164  002E                     	ds	1
 13165  002F                     ?_slot_Setup:	
 13166  002F                     ?_sprintf:	
 13167                           ; 1 bytes @ 0xF
 13168                           
 13169  002F                     nullifyBadge_userLedsSet@badge:	
 13170                           ; 2 bytes @ 0xF
 13171                           
 13172  002F                     displayL2_PutChar@display:	
 13173                           ; 1 bytes @ 0xF
 13174                           
 13175  002F                     slot_Setup@taskData:	
 13176                           ; 1 bytes @ 0xF
 13177                           
 13178  002F                     sprintf@sp:	
 13179                           ; 2 bytes @ 0xF
 13180                           
 13181  002F                     ___almod@dividend:	
 13182                           ; 2 bytes @ 0xF
 13183                           
 13184                           
 13185                           ; 4 bytes @ 0xF
 13186  002F                     	ds	1
 13187  0030                     ?_displayL2_PutStr:	
 13188  0030                     ?_led_roundabout:	
 13189                           ; 1 bytes @ 0x10
 13190                           
 13191  0030                     ?_led_curtain:	
 13192                           ; 1 bytes @ 0x10
 13193                           
 13194  0030                     ?_led_circle:	
 13195                           ; 1 bytes @ 0x10
 13196                           
 13197  0030                     ?_let_alternate:	
 13198                           ; 1 bytes @ 0x10
 13199                           
 13200  0030                     ?_led_Parody:	
 13201                           ; 1 bytes @ 0x10
 13202                           
 13203  0030                     led_roundabout@counter:	
 13204                           ; 1 bytes @ 0x10
 13205                           
 13206  0030                     led_curtain@counter:	
 13207                           ; 2 bytes @ 0x10
 13208                           
 13209  0030                     led_circle@count:	
 13210                           ; 2 bytes @ 0x10
 13211                           
 13212  0030                     let_alternate@count:	
 13213                           ; 2 bytes @ 0x10
 13214                           
 13215  0030                     led_Parody@count:	
 13216                           ; 2 bytes @ 0x10
 13217                           
 13218  0030                     displayL2_PutStr@str:	
 13219                           ; 2 bytes @ 0x10
 13220                           
 13221                           
 13222                           ; 2 bytes @ 0x10
 13223  0030                     	ds	1
 13224  0031                     ??_slot_Setup:	
 13225  0031                     sprintf@f:	
 13226                           ; 1 bytes @ 0x11
 13227                           
 13228                           
 13229                           ; 2 bytes @ 0x11
 13230  0031                     	ds	1
 13231  0032                     ??_displayL2_PutStr:	
 13232  0032                     ??_led_roundabout:	
 13233                           ; 1 bytes @ 0x12
 13234                           
 13235  0032                     ??_led_curtain:	
 13236                           ; 1 bytes @ 0x12
 13237                           
 13238  0032                     ??_led_Parody:	
 13239                           ; 1 bytes @ 0x12
 13240                           
 13241  0032                     ?_slot_Running_Animation:	
 13242                           ; 1 bytes @ 0x12
 13243                           
 13244  0032                     slot_Running_Animation@taskData:	
 13245                           ; 1 bytes @ 0x12
 13246                           
 13247                           
 13248                           ; 2 bytes @ 0x12
 13249  0032                     	ds	1
 13250  0033                     ??_led_rand:	
 13251                           
 13252                           ; 1 bytes @ 0x13
 13253  0033                     	ds	1
 13254  0034                     ??_slot_Running_Animation:	
 13255  0034                     led_roundabout@leds:	
 13256                           ; 1 bytes @ 0x14
 13257                           
 13258  0034                     led_curtain@leds:	
 13259                           ; 2 bytes @ 0x14
 13260                           
 13261  0034                     led_Parody@leds:	
 13262                           ; 2 bytes @ 0x14
 13263                           
 13264  0034                     slot_Setup@data:	
 13265                           ; 2 bytes @ 0x14
 13266                           
 13267                           
 13268                           ; 2 bytes @ 0x14
 13269  0034                     	ds	1
 13270  0035                     displayL2_PutStr@display:	
 13271                           
 13272                           ; 1 bytes @ 0x15
 13273  0035                     	ds	1
 13274  0036                     displayL2_PutStr@k:	
 13275  0036                     led_roundabout@size:	
 13276                           ; 1 bytes @ 0x16
 13277                           
 13278  0036                     led_curtain@size:	
 13279                           ; 2 bytes @ 0x16
 13280                           
 13281  0036                     led_Parody@size:	
 13282                           ; 2 bytes @ 0x16
 13283                           
 13284  0036                     slot_Running_Animation@data:	
 13285                           ; 2 bytes @ 0x16
 13286                           
 13287                           
 13288                           ; 2 bytes @ 0x16
 13289  0036                     	ds	1
 13290  0037                     ?_nullifyBadge_segDisplayPutStr:	
 13291  0037                     displayL2_EraseSegDisplay@display:	
 13292                           ; 1 bytes @ 0x17
 13293                           
 13294  0037                     nullifyBadge_segDisplayPutStr@str:	
 13295                           ; 1 bytes @ 0x17
 13296                           
 13297                           
 13298                           ; 2 bytes @ 0x17
 13299  0037                     	ds	1
 13300  0038                     nullifyBadge_segDisplayErase@badge:	
 13301                           
 13302                           ; 1 bytes @ 0x18
 13303  0038                     	ds	1
 13304  0039                     ?_flashy_Init:	
 13305  0039                     ?_menu_Init:	
 13306                           ; 1 bytes @ 0x19
 13307                           
 13308  0039                     ?_slot_Init:	
 13309                           ; 1 bytes @ 0x19
 13310                           
 13311  0039                     ?_locked_Init:	
 13312                           ; 1 bytes @ 0x19
 13313                           
 13314  0039                     ?_secret_Init:	
 13315                           ; 1 bytes @ 0x19
 13316                           
 13317  0039                     ?_matrix_Init:	
 13318                           ; 1 bytes @ 0x19
 13319                           
 13320  0039                     ?_menu_clear:	
 13321                           ; 1 bytes @ 0x19
 13322                           
 13323  0039                     ?_locked_clear:	
 13324                           ; 1 bytes @ 0x19
 13325                           
 13326  0039                     nullifyBadge_segDisplayPutStr@badge:	
 13327                           ; 1 bytes @ 0x19
 13328                           
 13329  0039                     menu_Init@taskData:	
 13330                           ; 1 bytes @ 0x19
 13331                           
 13332  0039                     menu_clear@data:	
 13333                           ; 2 bytes @ 0x19
 13334                           
 13335  0039                     flashy_Init@taskData:	
 13336                           ; 2 bytes @ 0x19
 13337                           
 13338  0039                     locked_Init@taskData:	
 13339                           ; 2 bytes @ 0x19
 13340                           
 13341  0039                     locked_clear@data:	
 13342                           ; 2 bytes @ 0x19
 13343                           
 13344  0039                     secret_Init@taskData:	
 13345                           ; 2 bytes @ 0x19
 13346                           
 13347  0039                     slot_Init@taskData:	
 13348                           ; 2 bytes @ 0x19
 13349                           
 13350  0039                     matrix_Init@taskData:	
 13351                           ; 2 bytes @ 0x19
 13352                           
 13353                           
 13354                           ; 2 bytes @ 0x19
 13355  0039                     	ds	1
 13356  003A                     ?_marquee_speedy:	
 13357  003A                     ?_marquee:	
 13358                           ; 1 bytes @ 0x1A
 13359                           
 13360  003A                     marquee_speedy@string:	
 13361                           ; 1 bytes @ 0x1A
 13362                           
 13363  003A                     marquee@string:	
 13364                           ; 2 bytes @ 0x1A
 13365                           
 13366                           
 13367                           ; 2 bytes @ 0x1A
 13368  003A                     	ds	1
 13369  003B                     ??_matrix_Init:	
 13370  003B                     ?_menu_run_option:	
 13371                           ; 1 bytes @ 0x1B
 13372                           
 13373  003B                     ??_sprintf:	
 13374                           ; 1 bytes @ 0x1B
 13375                           
 13376  003B                     led_rand@spark:	
 13377                           ; 1 bytes @ 0x1B
 13378                           
 13379  003B                     menu_Init@data:	
 13380                           ; 2 bytes @ 0x1B
 13381                           
 13382  003B                     menu_run_option@data:	
 13383                           ; 2 bytes @ 0x1B
 13384                           
 13385  003B                     flashy_Init@data:	
 13386                           ; 2 bytes @ 0x1B
 13387                           
 13388  003B                     locked_Init@data:	
 13389                           ; 2 bytes @ 0x1B
 13390                           
 13391  003B                     secret_Init@data:	
 13392                           ; 2 bytes @ 0x1B
 13393                           
 13394  003B                     slot_Init@data:	
 13395                           ; 2 bytes @ 0x1B
 13396                           
 13397                           
 13398                           ; 2 bytes @ 0x1B
 13399  003B                     	ds	1
 13400  003C                     marquee_speedy@count:	
 13401  003C                     marquee@count:	
 13402                           ; 2 bytes @ 0x1C
 13403                           
 13404                           
 13405                           ; 2 bytes @ 0x1C
 13406  003C                     	ds	1
 13407  003D                     ?_slot_Finished_Animation:	
 13408  003D                     slot_Finished_Animation@taskData:	
 13409                           ; 1 bytes @ 0x1D
 13410                           
 13411  003D                     matrix_Init@data:	
 13412                           ; 2 bytes @ 0x1D
 13413                           
 13414                           
 13415                           ; 2 bytes @ 0x1D
 13416  003D                     	ds	1
 13417  003E                     ??_marquee:	
 13418  003E                     marquee_speedy@multiplier:	
 13419                           ; 1 bytes @ 0x1E
 13420                           
 13421                           
 13422                           ; 2 bytes @ 0x1E
 13423  003E                     	ds	1
 13424  003F                     ?_scheduler_TaskAdd:	
 13425  003F                     ??_slot_Finished_Animation:	
 13426                           ; 1 bytes @ 0x1F
 13427                           
 13428  003F                     scheduler_TaskAdd@task:	
 13429                           ; 1 bytes @ 0x1F
 13430                           
 13431  003F                     sprintf@prec:	
 13432                           ; 1 bytes @ 0x1F
 13433                           
 13434  003F                     marquee@display_string:	
 13435                           ; 1 bytes @ 0x1F
 13436                           
 13437                           
 13438                           ; 5 bytes @ 0x1F
 13439  003F                     	ds	1
 13440  0040                     ??_scheduler_TaskAdd:	
 13441  0040                     ??_marquee_speedy:	
 13442                           ; 1 bytes @ 0x20
 13443                           
 13444  0040                     sprintf@flag:	
 13445                           ; 1 bytes @ 0x20
 13446                           
 13447                           
 13448                           ; 1 bytes @ 0x20
 13449  0040                     	ds	1
 13450  0041                     slot_Finished_Animation@data:	
 13451  0041                     sprintf@cp:	
 13452                           ; 2 bytes @ 0x21
 13453                           
 13454  0041                     marquee_speedy@display_string:	
 13455                           ; 2 bytes @ 0x21
 13456                           
 13457                           
 13458                           ; 5 bytes @ 0x21
 13459  0041                     	ds	2
 13460  0043                     sprintf@ap:	
 13461                           
 13462                           ; 1 bytes @ 0x23
 13463  0043                     	ds	1
 13464  0044                     marquee@multiplier:	
 13465  0044                     sprintf@val:	
 13466                           ; 2 bytes @ 0x24
 13467                           
 13468                           
 13469                           ; 2 bytes @ 0x24
 13470  0044                     	ds	2
 13471  0046                     scheduler_TaskAdd@scheduler:	
 13472  0046                     marquee_speedy@i:	
 13473                           ; 1 bytes @ 0x26
 13474                           
 13475  0046                     marquee@i:	
 13476                           ; 2 bytes @ 0x26
 13477                           
 13478  0046                     sprintf@len:	
 13479                           ; 2 bytes @ 0x26
 13480                           
 13481                           
 13482                           ; 2 bytes @ 0x26
 13483  0046                     	ds	1
 13484  0047                     scheduler_TaskAdd@k:	
 13485                           
 13486                           ; 1 bytes @ 0x27
 13487  0047                     	ds	1
 13488  0048                     marquee_speedy@string_length:	
 13489  0048                     marquee@string_length:	
 13490                           ; 2 bytes @ 0x28
 13491                           
 13492  0048                     sprintf@width:	
 13493                           ; 2 bytes @ 0x28
 13494                           
 13495                           
 13496                           ; 2 bytes @ 0x28
 13497  0048                     	ds	2
 13498  004A                     sprintf@c:	
 13499  004A                     marquee_speedy@j:	
 13500                           ; 1 bytes @ 0x2A
 13501                           
 13502  004A                     marquee@j:	
 13503                           ; 2 bytes @ 0x2A
 13504                           
 13505                           
 13506                           ; 2 bytes @ 0x2A
 13507  004A                     	ds	2
 13508  004C                     ?_menu_display_option:	
 13509  004C                     ?_flashy_display_option:	
 13510                           ; 1 bytes @ 0x2C
 13511                           
 13512  004C                     ?_matrix_display_option:	
 13513                           ; 1 bytes @ 0x2C
 13514                           
 13515  004C                     menu_display_option@data:	
 13516                           ; 1 bytes @ 0x2C
 13517                           
 13518  004C                     flashy_display_option@data:	
 13519                           ; 2 bytes @ 0x2C
 13520                           
 13521  004C                     matrix_display_option@data:	
 13522                           ; 2 bytes @ 0x2C
 13523                           
 13524                           
 13525                           ; 2 bytes @ 0x2C
 13526  004C                     	ds	2
 13527  004E                     ??_matrix_display_option:	
 13528  004E                     menu_display_option@size:	
 13529                           ; 1 bytes @ 0x2E
 13530                           
 13531                           
 13532                           ; 2 bytes @ 0x2E
 13533  004E                     	ds	2
 13534  0050                     menu_display_option@led:	
 13535                           
 13536                           ; 2 bytes @ 0x30
 13537  0050                     	ds	2
 13538  0052                     ?_flashy_Main:	
 13539  0052                     ?_menu_Main:	
 13540                           ; 1 bytes @ 0x32
 13541                           
 13542  0052                     ?_slot_Main:	
 13543                           ; 1 bytes @ 0x32
 13544                           
 13545  0052                     ?_locked_Main:	
 13546                           ; 1 bytes @ 0x32
 13547                           
 13548  0052                     ?_secret_Main:	
 13549                           ; 1 bytes @ 0x32
 13550                           
 13551  0052                     ?_matrix_Main:	
 13552                           ; 1 bytes @ 0x32
 13553                           
 13554  0052                     menu_Main@taskData:	
 13555                           ; 1 bytes @ 0x32
 13556                           
 13557  0052                     flashy_Main@taskData:	
 13558                           ; 2 bytes @ 0x32
 13559                           
 13560  0052                     locked_Main@taskData:	
 13561                           ; 2 bytes @ 0x32
 13562                           
 13563  0052                     secret_Main@taskData:	
 13564                           ; 2 bytes @ 0x32
 13565                           
 13566  0052                     slot_Main@taskData:	
 13567                           ; 2 bytes @ 0x32
 13568                           
 13569  0052                     matrix_Main@taskData:	
 13570                           ; 2 bytes @ 0x32
 13571                           
 13572                           
 13573                           ; 2 bytes @ 0x32
 13574  0052                     	ds	2
 13575  0054                     ??_flashy_Main:	
 13576  0054                     ??_menu_Main:	
 13577                           ; 1 bytes @ 0x34
 13578                           
 13579  0054                     ??_slot_Main:	
 13580                           ; 1 bytes @ 0x34
 13581                           
 13582  0054                     ??_locked_Main:	
 13583                           ; 1 bytes @ 0x34
 13584                           
 13585  0054                     ??_secret_Main:	
 13586                           ; 1 bytes @ 0x34
 13587                           
 13588  0054                     ??_matrix_Main:	
 13589                           ; 1 bytes @ 0x34
 13590                           
 13591                           
 13592                           ; 1 bytes @ 0x34
 13593  0054                     	ds	2
 13594  0056                     menu_Main@buttonPressed:	
 13595  0056                     locked_Main@buttonPressed:	
 13596                           ; 1 bytes @ 0x36
 13597                           
 13598  0056                     secret_Main@secret_found:	
 13599                           ; 1 bytes @ 0x36
 13600                           
 13601  0056                     flashy_Main@hit_counter:	
 13602                           ; 1 bytes @ 0x36
 13603                           
 13604                           
 13605                           ; 6 bytes @ 0x36
 13606  0056                     	ds	1
 13607  0057                     secret_Main@buttonPressed:	
 13608  0057                     menu_Main@data:	
 13609                           ; 1 bytes @ 0x37
 13610                           
 13611  0057                     locked_Main@data:	
 13612                           ; 2 bytes @ 0x37
 13613                           
 13614                           
 13615                           ; 2 bytes @ 0x37
 13616  0057                     	ds	1
 13617  0058                     matrix_Main@buttonPressed:	
 13618  0058                     secret_Main@data:	
 13619                           ; 1 bytes @ 0x38
 13620                           
 13621                           
 13622                           ; 2 bytes @ 0x38
 13623  0058                     	ds	1
 13624  0059                     matrix_Main@holdvalue:	
 13625                           
 13626                           ; 1 bytes @ 0x39
 13627  0059                     	ds	1
 13628  005A                     matrix_Main@data:	
 13629                           
 13630                           ; 2 bytes @ 0x3A
 13631  005A                     	ds	2
 13632  005C                     flashy_Main@buttonPressed:	
 13633                           
 13634                           ; 2 bytes @ 0x3C
 13635  005C                     	ds	2
 13636  005E                     flashy_Main@data:	
 13637                           
 13638                           ; 2 bytes @ 0x3E
 13639  005E                     	ds	6
 13640  0064                     slot_Main@buttonPressed:	
 13641                           
 13642                           ; 1 bytes @ 0x44
 13643  0064                     	ds	1
 13644  0065                     slot_Main@data:	
 13645                           
 13646                           ; 2 bytes @ 0x45
 13647  0065                     	ds	2
 13648  0067                     scheduler_TaskRun@task:	
 13649                           
 13650                           ; 1 bytes @ 0x47
 13651  0067                     	ds	1
 13652  0068                     ??_schedulerExecute:	
 13653                           
 13654                           ; 1 bytes @ 0x48
 13655  0068                     	ds	6
 13656  006E                     ??_main:	
 13657                           
 13658                           ; 1 bytes @ 0x4E
 13659  006E                     	ds	1
 13660                           
 13661                           	psect	maintext
 13662  0661                     __pmaintext:	
 13663 ;;
 13664 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
 13665 ;;
 13666 ;; *************** function _main *****************
 13667 ;; Defined at:
 13668 ;;		line 225 in file "main.c"
 13669 ;; Parameters:    Size  Location     Type
 13670 ;;		None
 13671 ;; Auto vars:     Size  Location     Type
 13672 ;;		None
 13673 ;; Return value:  Size  Location     Type
 13674 ;;                  1    wreg      void 
 13675 ;; Registers used:
 13676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13677 ;; Tracked objects:
 13678 ;;		On entry : B1F/0
 13679 ;;		On exit  : 0/0
 13680 ;;		Unchanged: 0/0
 13681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13685 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13686 ;;Total ram usage:        1 bytes
 13687 ;; Hardware stack levels required when called:   15
 13688 ;; This function calls:
 13689 ;;		_nullifyBadge_platformInit
 13690 ;;		_schedulerExecute
 13691 ;;		_scheduler_Init
 13692 ;;		_scheduler_TaskAdd
 13693 ;;		_scheduler_TaskInit
 13694 ;; This function is called by:
 13695 ;;		Startup code after reset
 13696 ;; This function uses a non-reentrant model
 13697 ;;
 13698                           
 13699                           
 13700                           ;psect for function _main
 13701  0661                     _main:	
 13702                           
 13703                           ;main.c: 228: nullifyBadge_platformInit(&badge_inst);
 13704                           
 13705                           ;incstack = 0
 13706                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13707  0661  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13708  0662  31AC  2483  3186   	fcall	_nullifyBadge_platformInit
 13709                           
 13710                           ;main.c: 231: scheduler_Init(&schedulerInst);
 13711  0665  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13712  0666  31B4  240E  3186   	fcall	_scheduler_Init
 13713                           
 13714                           ;main.c: 234: scheduler_TaskInit(&flashy_task);
 13715  0669  305C               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 13716  066A  31B6  26CA  3186   	fcall	_scheduler_TaskInit
 13717                           
 13718                           ;main.c: 235: scheduler_TaskInit(&menu_task);
 13719  066D  304F               	movlw	(low (_menu_task| (0+256)))& (0+255)
 13720  066E  31B6  26CA  3186   	fcall	_scheduler_TaskInit
 13721                           
 13722                           ;main.c: 236: scheduler_TaskInit(&slot_task);
 13723  0671  3042               	movlw	(low (_slot_task| (0+256)))& (0+255)
 13724  0672  31B6  26CA  3186   	fcall	_scheduler_TaskInit
 13725                           
 13726                           ;main.c: 237: scheduler_TaskInit(&locked_task);
 13727  0675  3035               	movlw	(low (_locked_task| (0+256)))& (0+255)
 13728  0676  31B6  26CA  3186   	fcall	_scheduler_TaskInit
 13729                           
 13730                           ;main.c: 238: scheduler_TaskInit(&secret_task);
 13731  0679  3028               	movlw	(low (_secret_task| (0+256)))& (0+255)
 13732  067A  31B6  26CA  3186   	fcall	_scheduler_TaskInit
 13733                           
 13734                           ;main.c: 239: scheduler_TaskInit(&matrix_task);
 13735  067D  30C4               	movlw	(low (_matrix_task| (0+256)))& (0+255)
 13736  067E  31B6  26CA  3186   	fcall	_scheduler_TaskInit
 13737                           
 13738                           ;main.c: 242: flashy_TaskData.badge = &badge_inst;
 13739  0681  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13740  0682  0020               	movlb	0	; select bank0
 13741  0683  00EE               	movwf	??_main
 13742  0684  086E               	movf	??_main,w
 13743  0685  0029               	movlb	9	; select bank9
 13744  0686  00BF               	movwf	_flashy_TaskData^(0+1152)
 13745                           
 13746                           ;main.c: 243: menu_TaskData.badge = &badge_inst;
 13747  0687  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13748  0688  0020               	movlb	0	; select bank0
 13749  0689  00EE               	movwf	??_main
 13750  068A  086E               	movf	??_main,w
 13751  068B  0025               	movlb	5	; select bank5
 13752  068C  00BC               	movwf	_menu_TaskData^(0+640)
 13753                           
 13754                           ;main.c: 244: slot_TaskData.badge = &badge_inst;
 13755  068D  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13756  068E  0020               	movlb	0	; select bank0
 13757  068F  00EE               	movwf	??_main
 13758  0690  086E               	movf	??_main,w
 13759  0691  002B               	movlb	11	; select bank11
 13760  0692  00A0               	movwf	_slot_TaskData^(0+1408)
 13761                           
 13762                           ;main.c: 245: locked_TaskData.badge = &badge_inst;
 13763  0693  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13764  0694  0020               	movlb	0	; select bank0
 13765  0695  00EE               	movwf	??_main
 13766  0696  086E               	movf	??_main,w
 13767  0697  0025               	movlb	5	; select bank5
 13768  0698  00AE               	movwf	_locked_TaskData^(0+640)
 13769                           
 13770                           ;main.c: 246: secret_TaskData.badge = &badge_inst;
 13771  0699  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13772  069A  0020               	movlb	0	; select bank0
 13773  069B  00EE               	movwf	??_main
 13774  069C  086E               	movf	??_main,w
 13775  069D  0025               	movlb	5	; select bank5
 13776  069E  00A0               	movwf	_secret_TaskData^(0+640)
 13777                           
 13778                           ;main.c: 247: matrix_TaskData.badge = &badge_inst;
 13779  069F  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13780  06A0  0020               	movlb	0	; select bank0
 13781  06A1  00EE               	movwf	??_main
 13782  06A2  086E               	movf	??_main,w
 13783  06A3  0029               	movlb	9	; select bank9
 13784  06A4  00A0               	movwf	_matrix_TaskData^(0+1152)
 13785                           
 13786                           ;main.c: 251: badge_locked = 1;
 13787  06A5  0021               	movlb	1	; select bank1
 13788  06A6  01C4               	clrf	_badge_locked^(0+128)
 13789  06A7  0AC4               	incf	_badge_locked^(0+128),f
 13790                           
 13791                           ;main.c: 254: flashy_task.taskData = (void *) &flashy_TaskData;
 13792  06A8  30BF               	movlw	low _flashy_TaskData
 13793  06A9  0022               	movlb	2	; select bank2
 13794  06AA  00DE               	movwf	(low ((_flashy_task| (0+256)+2)))^0
 13795  06AB  3004               	movlw	high _flashy_TaskData
 13796  06AC  00DF               	movwf	((low ((_flashy_task| (0+256)+2))+1))^0
 13797                           
 13798                           ;main.c: 255: flashy_task.taskInitCallback = flashy_Init;
 13799  06AD  3064               	movlw	low _flashy_Init
 13800  06AE  00E0               	movwf	(low ((_flashy_task| (0+256)+4)))^0
 13801  06AF  3007               	movlw	high _flashy_Init
 13802  06B0  00E1               	movwf	((low ((_flashy_task| (0+256)+4)))^0+1)
 13803                           
 13804                           ;main.c: 256: flashy_task.taskExecuteCallback = flashy_Main;
 13805  06B1  3019               	movlw	low _flashy_Main
 13806  06B2  00E4               	movwf	(low ((_flashy_task| (0+256)+8)))^0
 13807  06B3  3008               	movlw	high _flashy_Main
 13808  06B4  00E5               	movwf	((low ((_flashy_task| (0+256)+8)))^0+1)
 13809                           
 13810                           ;main.c: 257: flashy_task.taskExitCallback = flashy_Exit;
 13811  06B5  3000               	movlw	0
 13812  06B6  00E2               	movwf	(low ((_flashy_task| (0+256)+6)))^0
 13813  06B7  3000               	movlw	0
 13814  06B8  00E3               	movwf	((low ((_flashy_task| (0+256)+6)))^0+1)
 13815                           
 13816                           ;main.c: 258: flashy_task.taskInterval = 10;
 13817  06B9  300A               	movlw	10
 13818  06BA  00E6               	movwf	(_flashy_task^(0+256)+10)
 13819  06BB  3000               	movlw	0
 13820  06BC  00E7               	movwf	(_flashy_task^(0+256)+11)
 13821                           
 13822                           ;main.c: 260: menu_task.taskData = (void *) &menu_TaskData;
 13823  06BD  30BC               	movlw	low _menu_TaskData
 13824  06BE  00D1               	movwf	(low ((_menu_task| (0+256)+2)))^0
 13825  06BF  3002               	movlw	high _menu_TaskData
 13826  06C0  00D2               	movwf	((low ((_menu_task| (0+256)+2))+1))^0
 13827                           
 13828                           ;main.c: 261: menu_task.taskInitCallback = menu_Init;
 13829  06C1  30F4               	movlw	low _menu_Init
 13830  06C2  00D3               	movwf	(low ((_menu_task| (0+256)+4)))^0
 13831  06C3  302D               	movlw	high _menu_Init
 13832  06C4  00D4               	movwf	((low ((_menu_task| (0+256)+4)))^0+1)
 13833                           
 13834                           ;main.c: 262: menu_task.taskExecuteCallback = menu_Main;
 13835  06C5  3038               	movlw	low _menu_Main
 13836  06C6  00D7               	movwf	(low ((_menu_task| (0+256)+8)))^0
 13837  06C7  301B               	movlw	high _menu_Main
 13838  06C8  00D8               	movwf	((low ((_menu_task| (0+256)+8)))^0+1)
 13839                           
 13840                           ;main.c: 263: menu_task.taskExitCallback = menu_Exit;
 13841  06C9  3000               	movlw	0
 13842  06CA  00D5               	movwf	(low ((_menu_task| (0+256)+6)))^0
 13843  06CB  3000               	movlw	0
 13844  06CC  00D6               	movwf	((low ((_menu_task| (0+256)+6)))^0+1)
 13845                           
 13846                           ;main.c: 264: menu_task.taskInterval = 10;
 13847  06CD  300A               	movlw	10
 13848  06CE  00D9               	movwf	(_menu_task^(0+256)+10)
 13849  06CF  3000               	movlw	0
 13850  06D0  00DA               	movwf	(_menu_task^(0+256)+11)
 13851                           
 13852                           ;main.c: 266: slot_task.taskData = (void *) &slot_TaskData;
 13853  06D1  30A0               	movlw	low _slot_TaskData
 13854  06D2  00C4               	movwf	(low ((_slot_task| (0+256)+2)))^0
 13855  06D3  3005               	movlw	high _slot_TaskData
 13856  06D4  00C5               	movwf	((low ((_slot_task| (0+256)+2))+1))^0
 13857                           
 13858                           ;main.c: 267: slot_task.taskInitCallback = slot_Init;
 13859  06D5  3056               	movlw	low _slot_Init
 13860  06D6  00C6               	movwf	(low ((_slot_task| (0+256)+4)))^0
 13861  06D7  302E               	movlw	high _slot_Init
 13862  06D8  00C7               	movwf	((low ((_slot_task| (0+256)+4)))^0+1)
 13863                           
 13864                           ;main.c: 268: slot_task.taskExecuteCallback = slot_Main;
 13865  06D9  30E5               	movlw	low _slot_Main
 13866  06DA  00CA               	movwf	(low ((_slot_task| (0+256)+8)))^0
 13867  06DB  3000               	movlw	high _slot_Main
 13868  06DC  00CB               	movwf	((low ((_slot_task| (0+256)+8)))^0+1)
 13869                           
 13870                           ;main.c: 269: slot_task.taskExitCallback = slot_Exit;
 13871  06DD  3000               	movlw	0
 13872  06DE  00C8               	movwf	(low ((_slot_task| (0+256)+6)))^0
 13873  06DF  3000               	movlw	0
 13874  06E0  00C9               	movwf	((low ((_slot_task| (0+256)+6)))^0+1)
 13875                           
 13876                           ;main.c: 270: slot_task.taskInterval = 10;
 13877  06E1  300A               	movlw	10
 13878  06E2  00CC               	movwf	(_slot_task^(0+256)+10)
 13879  06E3  3000               	movlw	0
 13880  06E4  00CD               	movwf	(_slot_task^(0+256)+11)
 13881                           
 13882                           ;main.c: 272: locked_task.taskData = (void *) &locked_TaskData;
 13883  06E5  30AE               	movlw	low _locked_TaskData
 13884  06E6  00B7               	movwf	(low ((_locked_task| (0+256)+2)))^0
 13885  06E7  3002               	movlw	high _locked_TaskData
 13886  06E8  00B8               	movwf	((low ((_locked_task| (0+256)+2))+1))^0
 13887                           
 13888                           ;main.c: 273: locked_task.taskInitCallback = locked_Init;
 13889  06E9  3006               	movlw	low _locked_Init
 13890  06EA  00B9               	movwf	(low ((_locked_task| (0+256)+4)))^0
 13891  06EB  3018               	movlw	high _locked_Init
 13892  06EC  00BA               	movwf	((low ((_locked_task| (0+256)+4)))^0+1)
 13893                           
 13894                           ;main.c: 274: locked_task.taskExecuteCallback = locked_Main;
 13895  06ED  302F               	movlw	low _locked_Main
 13896  06EE  00BD               	movwf	(low ((_locked_task| (0+256)+8)))^0
 13897  06EF  301D               	movlw	high _locked_Main
 13898  06F0  00BE               	movwf	((low ((_locked_task| (0+256)+8)))^0+1)
 13899                           
 13900                           ;main.c: 275: locked_task.taskExitCallback = locked_Exit;
 13901  06F1  3000               	movlw	0
 13902  06F2  00BB               	movwf	(low ((_locked_task| (0+256)+6)))^0
 13903  06F3  3000               	movlw	0
 13904  06F4  00BC               	movwf	((low ((_locked_task| (0+256)+6)))^0+1)
 13905                           
 13906                           ;main.c: 276: locked_task.taskInterval = 10;
 13907  06F5  300A               	movlw	10
 13908  06F6  00BF               	movwf	(_locked_task^(0+256)+10)
 13909  06F7  3000               	movlw	0
 13910  06F8  00C0               	movwf	(_locked_task^(0+256)+11)
 13911                           
 13912                           ;main.c: 278: secret_task.taskData = (void *) &secret_TaskData;
 13913  06F9  30A0               	movlw	low _secret_TaskData
 13914  06FA  00AA               	movwf	(low ((_secret_task| (0+256)+2)))^0
 13915  06FB  3002               	movlw	high _secret_TaskData
 13916  06FC  00AB               	movwf	((low ((_secret_task| (0+256)+2))+1))^0
 13917                           
 13918                           ;main.c: 279: secret_task.taskInitCallback = secret_Init;
 13919  06FD  30D8               	movlw	low _secret_Init
 13920  06FE  00AC               	movwf	(low ((_secret_task| (0+256)+4)))^0
 13921  06FF  302C               	movlw	high _secret_Init
 13922  0700  00AD               	movwf	((low ((_secret_task| (0+256)+4)))^0+1)
 13923                           
 13924                           ;main.c: 280: secret_task.taskExecuteCallback = secret_Main;
 13925  0701  3043               	movlw	low _secret_Main
 13926  0702  00B0               	movwf	(low ((_secret_task| (0+256)+8)))^0
 13927  0703  3026               	movlw	high _secret_Main
 13928  0704  00B1               	movwf	((low ((_secret_task| (0+256)+8)))^0+1)
 13929                           
 13930                           ;main.c: 281: secret_task.taskExitCallback = secret_Exit;
 13931  0705  3000               	movlw	0
 13932  0706  00AE               	movwf	(low ((_secret_task| (0+256)+6)))^0
 13933  0707  3000               	movlw	0
 13934  0708  00AF               	movwf	((low ((_secret_task| (0+256)+6)))^0+1)
 13935                           
 13936                           ;main.c: 282: secret_task.taskInterval = 10;
 13937  0709  300A               	movlw	10
 13938  070A  00B2               	movwf	(_secret_task^(0+256)+10)
 13939  070B  3000               	movlw	0
 13940  070C  00B3               	movwf	(_secret_task^(0+256)+11)
 13941                           
 13942                           ;main.c: 284: matrix_task.taskData = (void *) &matrix_TaskData;
 13943  070D  30A0               	movlw	low _matrix_TaskData
 13944  070E  0023               	movlb	3	; select bank3
 13945  070F  00C6               	movwf	(low ((_matrix_task| (0+256)+2)))^(0+128)
 13946  0710  3004               	movlw	high _matrix_TaskData
 13947  0711  00C7               	movwf	((low ((_matrix_task| (0+256)+2))+1))^(0+128)
 13948                           
 13949                           ;main.c: 285: matrix_task.taskInitCallback = matrix_Init;
 13950  0712  308A               	movlw	low _matrix_Init
 13951  0713  00C8               	movwf	(low ((_matrix_task| (0+256)+4)))^(0+128)
 13952  0714  3023               	movlw	high _matrix_Init
 13953  0715  00C9               	movwf	((low ((_matrix_task| (0+256)+4)))^(0+128)+1)
 13954                           
 13955                           ;main.c: 286: matrix_task.taskExecuteCallback = matrix_Main;
 13956  0716  30CB               	movlw	low _matrix_Main
 13957  0717  00CC               	movwf	(low ((_matrix_task| (0+256)+8)))^(0+128)
 13958  0718  3010               	movlw	high _matrix_Main
 13959  0719  00CD               	movwf	((low ((_matrix_task| (0+256)+8)))^(0+128)+1)
 13960                           
 13961                           ;main.c: 287: matrix_task.taskExitCallback = matrix_Exit;
 13962  071A  3000               	movlw	0
 13963  071B  00CA               	movwf	(low ((_matrix_task| (0+256)+6)))^(0+128)
 13964  071C  3000               	movlw	0
 13965  071D  00CB               	movwf	((low ((_matrix_task| (0+256)+6)))^(0+128)+1)
 13966                           
 13967                           ;main.c: 288: matrix_task.taskInterval = 10;
 13968  071E  300A               	movlw	10
 13969  071F  00CE               	movwf	(_matrix_task^(0+384)+10)
 13970  0720  3000               	movlw	0
 13971  0721  00CF               	movwf	(_matrix_task^(0+384)+11)
 13972                           
 13973                           ;main.c: 291: secret_value = SECRET_VALUE_INIT;
 13974  0722  0021               	movlb	1	; select bank1
 13975  0723  01C5               	clrf	_secret_value^(0+128)
 13976  0724  01C6               	clrf	(_secret_value+1)^(0+128)
 13977                           
 13978                           ;main.c: 294: currentTask = FLASHY_TASK;
 13979  0725  3002               	movlw	2
 13980  0726  00BA               	movwf	_currentTask^(0+128)
 13981  0727  3000               	movlw	0
 13982  0728  00BB               	movwf	(_currentTask^(0+128)+1)
 13983                           
 13984                           ;main.c: 296: scheduler_TaskAdd(&schedulerInst, &flashy_task);
 13985  0729  305C               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 13986  072A  0020               	movlb	0	; select bank0
 13987  072B  00EE               	movwf	??_main
 13988  072C  086E               	movf	??_main,w
 13989  072D  00BF               	movwf	scheduler_TaskAdd@task
 13990  072E  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13991  072F  31A2  228C  3186   	fcall	_scheduler_TaskAdd
 13992                           
 13993                           ;main.c: 297: scheduler_TaskAdd(&schedulerInst, &menu_task);
 13994  0732  304F               	movlw	(low (_menu_task| (0+256)))& (0+255)
 13995  0733  0020               	movlb	0	; select bank0
 13996  0734  00EE               	movwf	??_main
 13997  0735  086E               	movf	??_main,w
 13998  0736  00BF               	movwf	scheduler_TaskAdd@task
 13999  0737  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14000  0738  31A2  228C  3186   	fcall	_scheduler_TaskAdd
 14001                           
 14002                           ;main.c: 298: scheduler_TaskAdd(&schedulerInst, &slot_task);
 14003  073B  3042               	movlw	(low (_slot_task| (0+256)))& (0+255)
 14004  073C  0020               	movlb	0	; select bank0
 14005  073D  00EE               	movwf	??_main
 14006  073E  086E               	movf	??_main,w
 14007  073F  00BF               	movwf	scheduler_TaskAdd@task
 14008  0740  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14009  0741  31A2  228C  3186   	fcall	_scheduler_TaskAdd
 14010                           
 14011                           ;main.c: 299: scheduler_TaskAdd(&schedulerInst, &locked_task);
 14012  0744  3035               	movlw	(low (_locked_task| (0+256)))& (0+255)
 14013  0745  0020               	movlb	0	; select bank0
 14014  0746  00EE               	movwf	??_main
 14015  0747  086E               	movf	??_main,w
 14016  0748  00BF               	movwf	scheduler_TaskAdd@task
 14017  0749  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14018  074A  31A2  228C  3186   	fcall	_scheduler_TaskAdd
 14019                           
 14020                           ;main.c: 300: scheduler_TaskAdd(&schedulerInst, &secret_task);
 14021  074D  3028               	movlw	(low (_secret_task| (0+256)))& (0+255)
 14022  074E  0020               	movlb	0	; select bank0
 14023  074F  00EE               	movwf	??_main
 14024  0750  086E               	movf	??_main,w
 14025  0751  00BF               	movwf	scheduler_TaskAdd@task
 14026  0752  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14027  0753  31A2  228C  3186   	fcall	_scheduler_TaskAdd
 14028                           
 14029                           ;main.c: 301: scheduler_TaskAdd(&schedulerInst, &matrix_task);
 14030  0756  30C4               	movlw	(low (_matrix_task| (0+256)))& (0+255)
 14031  0757  0020               	movlb	0	; select bank0
 14032  0758  00EE               	movwf	??_main
 14033  0759  086E               	movf	??_main,w
 14034  075A  00BF               	movwf	scheduler_TaskAdd@task
 14035  075B  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14036  075C  31A2  228C  3186   	fcall	_scheduler_TaskAdd
 14037  075F                     l10723:	
 14038                           ;main.c: 304: while(1){
 14039                           
 14040                           
 14041                           ;main.c: 305: schedulerExecute(&schedulerInst);
 14042  075F  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14043  0760  31A3  2306  3186   	fcall	_schedulerExecute
 14044  0763  2F5F               	goto	l10723
 14045  0764                     __end_of_main:	
 14046                           
 14047                           	psect	text1
 14048  36CA                     __ptext1:	
 14049 ;; *************** function _scheduler_TaskInit *****************
 14050 ;; Defined at:
 14051 ;;		line 36 in file "cooperative_scheduler.c"
 14052 ;; Parameters:    Size  Location     Type
 14053 ;;  task            1    wreg     PTR struct t_schedulerTa
 14054 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14055 ;;		 -> menu_task(13), flashy_task(13), 
 14056 ;; Auto vars:     Size  Location     Type
 14057 ;;  task            1    1[COMMON] PTR struct t_schedulerTa
 14058 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14059 ;;		 -> menu_task(13), flashy_task(13), 
 14060 ;; Return value:  Size  Location     Type
 14061 ;;                  1    wreg      void 
 14062 ;; Registers used:
 14063 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14064 ;; Tracked objects:
 14065 ;;		On entry : 0/0
 14066 ;;		On exit  : 0/0
 14067 ;;		Unchanged: 0/0
 14068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14070 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14072 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14073 ;;Total ram usage:        1 bytes
 14074 ;; Hardware stack levels used:    1
 14075 ;; Hardware stack levels required when called:    4
 14076 ;; This function calls:
 14077 ;;		Nothing
 14078 ;; This function is called by:
 14079 ;;		_main
 14080 ;; This function uses a non-reentrant model
 14081 ;;
 14082                           
 14083                           
 14084                           ;psect for function _scheduler_TaskInit
 14085  36CA                     _scheduler_TaskInit:	
 14086                           
 14087                           ;incstack = 0
 14088                           ; Regs used in _scheduler_TaskInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 14089                           ;scheduler_TaskInit@task stored from wreg
 14090  36CA  00F1               	movwf	scheduler_TaskInit@task
 14091                           
 14092                           ;cooperative_scheduler.c: 37: task->systemTickLastExecuted = 0;
 14093  36CB  0871               	movf	scheduler_TaskInit@task,w
 14094  36CC  0086               	movwf	6
 14095  36CD  3001               	movlw	1	; select bank2/3
 14096  36CE  0087               	movwf	7
 14097  36CF  3000               	movlw	0
 14098  36D0  3FC0               	movwi [0]fsr1
 14099  36D1  3FC1               	movwi [1]fsr1
 14100                           
 14101                           ;cooperative_scheduler.c: 38: task->taskData = (0);
 14102  36D2  0871               	movf	scheduler_TaskInit@task,w
 14103  36D3  3E02               	addlw	2
 14104  36D4  0086               	movwf	6
 14105  36D5  3001               	movlw	1	; select bank2/3
 14106  36D6  0087               	movwf	7
 14107  36D7  3000               	movlw	0
 14108  36D8  3FC0               	movwi [0]fsr1
 14109  36D9  3FC1               	movwi [1]fsr1
 14110                           
 14111                           ;cooperative_scheduler.c: 39: task->taskInitCallback = (0);
 14112  36DA  0871               	movf	scheduler_TaskInit@task,w
 14113  36DB  3E04               	addlw	4
 14114  36DC  0086               	movwf	6
 14115  36DD  3001               	movlw	1	; select bank2/3
 14116  36DE  0087               	movwf	7
 14117  36DF  3000               	movlw	0
 14118  36E0  3FC0               	movwi [0]fsr1
 14119  36E1  3FC1               	movwi [1]fsr1
 14120                           
 14121                           ;cooperative_scheduler.c: 40: task->taskExitCallback = (0);
 14122  36E2  0871               	movf	scheduler_TaskInit@task,w
 14123  36E3  3E06               	addlw	6
 14124  36E4  0086               	movwf	6
 14125  36E5  3001               	movlw	1	; select bank2/3
 14126  36E6  0087               	movwf	7
 14127  36E7  3000               	movlw	0
 14128  36E8  3FC0               	movwi [0]fsr1
 14129  36E9  3FC1               	movwi [1]fsr1
 14130                           
 14131                           ;cooperative_scheduler.c: 41: task->taskExecuteCallback = (0);
 14132  36EA  0871               	movf	scheduler_TaskInit@task,w
 14133  36EB  3E08               	addlw	8
 14134  36EC  0086               	movwf	6
 14135  36ED  3001               	movlw	1	; select bank2/3
 14136  36EE  0087               	movwf	7
 14137  36EF  3000               	movlw	0
 14138  36F0  3FC0               	movwi [0]fsr1
 14139  36F1  3FC1               	movwi [1]fsr1
 14140                           
 14141                           ;cooperative_scheduler.c: 42: task->taskInterval = 65535;
 14142  36F2  0871               	movf	scheduler_TaskInit@task,w
 14143  36F3  3E0A               	addlw	10
 14144  36F4  0086               	movwf	6
 14145  36F5  3001               	movlw	1	; select bank2/3
 14146  36F6  0087               	movwf	7
 14147  36F7  30FF               	movlw	255
 14148  36F8  3FC0               	movwi [0]fsr1
 14149  36F9  30FF               	movlw	255
 14150  36FA  3FC1               	movwi [1]fsr1
 14151                           
 14152                           ;cooperative_scheduler.c: 43: task->taskId = -1;
 14153  36FB  0871               	movf	scheduler_TaskInit@task,w
 14154  36FC  3E0C               	addlw	12
 14155  36FD  0086               	movwf	6
 14156  36FE  3001               	movlw	1	; select bank2/3
 14157  36FF  0087               	movwf	7
 14158  3700  0181               	clrf	1
 14159  3701  0381               	decf	1,f
 14160  3702  0008               	return
 14161  3703                     __end_of_scheduler_TaskInit:	
 14162                           
 14163                           	psect	text2
 14164  228C                     __ptext2:	
 14165 ;; *************** function _scheduler_TaskAdd *****************
 14166 ;; Defined at:
 14167 ;;		line 46 in file "cooperative_scheduler.c"
 14168 ;; Parameters:    Size  Location     Type
 14169 ;;  scheduler       1    wreg     PTR struct t_scheduler
 14170 ;;		 -> schedulerInst(18), 
 14171 ;;  task            1   31[BANK0 ] PTR struct t_schedulerTa
 14172 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14173 ;;		 -> menu_task(13), flashy_task(13), 
 14174 ;; Auto vars:     Size  Location     Type
 14175 ;;  scheduler       1   38[BANK0 ] PTR struct t_scheduler
 14176 ;;		 -> schedulerInst(18), 
 14177 ;;  k               1   39[BANK0 ] unsigned char 
 14178 ;; Return value:  Size  Location     Type
 14179 ;;                  1    wreg      char 
 14180 ;; Registers used:
 14181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14182 ;; Tracked objects:
 14183 ;;		On entry : 0/0
 14184 ;;		On exit  : 0/0
 14185 ;;		Unchanged: 0/0
 14186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14187 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14188 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14189 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14190 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14191 ;;Total ram usage:        9 bytes
 14192 ;; Hardware stack levels used:    1
 14193 ;; Hardware stack levels required when called:   11
 14194 ;; This function calls:
 14195 ;;		Absolute function
 14196 ;;		_flashy_Init
 14197 ;;		_locked_Init
 14198 ;;		_matrix_Init
 14199 ;;		_menu_Init
 14200 ;;		_secret_Init
 14201 ;;		_slot_Init
 14202 ;; This function is called by:
 14203 ;;		_main
 14204 ;; This function uses a non-reentrant model
 14205 ;;
 14206                           
 14207                           
 14208                           ;psect for function _scheduler_TaskAdd
 14209  228C                     _scheduler_TaskAdd:	
 14210                           
 14211                           ;incstack = 0
 14212                           ; Regs used in _scheduler_TaskAdd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14213                           ;scheduler_TaskAdd@scheduler stored from wreg
 14214  228C  0020               	movlb	0	; select bank0
 14215  228D  00C6               	movwf	scheduler_TaskAdd@scheduler
 14216                           
 14217                           ;cooperative_scheduler.c: 47: u8 k;
 14218                           ;cooperative_scheduler.c: 48: for (k = 0; k < 16; k++) {
 14219  228E  01C7               	clrf	scheduler_TaskAdd@k
 14220  228F  3010               	movlw	16
 14221  2290  0247               	subwf	scheduler_TaskAdd@k,w
 14222  2291  1803               	btfsc	3,0
 14223  2292  2AFE               	goto	l10521
 14224  2293                     l10507:	
 14225                           
 14226                           ;cooperative_scheduler.c: 49: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 14227  2293  0846               	movf	scheduler_TaskAdd@scheduler,w
 14228  2294  3E10               	addlw	16
 14229  2295  0086               	movwf	6
 14230  2296  3001               	movlw	1	; select bank2/3
 14231  2297  0087               	movwf	7
 14232  2298  3F40               	moviw [0]fsr1
 14233  2299  00C0               	movwf	??_scheduler_TaskAdd
 14234  229A  3F41               	moviw [1]fsr1
 14235  229B  00C1               	movwf	??_scheduler_TaskAdd+1
 14236  229C  3001               	movlw	1
 14237  229D  00C2               	movwf	??_scheduler_TaskAdd+2
 14238  229E  3000               	movlw	0
 14239  229F  00C3               	movwf	??_scheduler_TaskAdd+3
 14240  22A0  0A47               	incf	scheduler_TaskAdd@k,w
 14241  22A1  2AA4               	goto	u6514
 14242  22A2                     u6515:	
 14243  22A2  35C2               	lslf	??_scheduler_TaskAdd+2,f
 14244  22A3  0DC3               	rlf	??_scheduler_TaskAdd+3,f
 14245  22A4                     u6514:	
 14246  22A4  0B89               	decfsz	9,f
 14247  22A5  2AA2               	goto	u6515
 14248  22A6  0840               	movf	??_scheduler_TaskAdd,w
 14249  22A7  0542               	andwf	??_scheduler_TaskAdd+2,w
 14250  22A8  00C4               	movwf	??_scheduler_TaskAdd+4
 14251  22A9  0841               	movf	??_scheduler_TaskAdd+1,w
 14252  22AA  0543               	andwf	??_scheduler_TaskAdd+3,w
 14253  22AB  00C5               	movwf	??_scheduler_TaskAdd+5
 14254  22AC  0844               	movf	??_scheduler_TaskAdd+4,w
 14255  22AD  0445               	iorwf	??_scheduler_TaskAdd+5,w
 14256  22AE  1D03               	btfss	3,2
 14257  22AF  2AF6               	goto	l10517
 14258                           
 14259                           ;cooperative_scheduler.c: 50: scheduler->tasks[k] = task;
 14260  22B0  083F               	movf	scheduler_TaskAdd@task,w
 14261  22B1  00C0               	movwf	??_scheduler_TaskAdd
 14262  22B2  0847               	movf	scheduler_TaskAdd@k,w
 14263  22B3  0746               	addwf	scheduler_TaskAdd@scheduler,w
 14264  22B4  00C1               	movwf	??_scheduler_TaskAdd+1
 14265  22B5  0841               	movf	??_scheduler_TaskAdd+1,w
 14266  22B6  0086               	movwf	6
 14267  22B7  3001               	movlw	1	; select bank2/3
 14268  22B8  0087               	movwf	7
 14269  22B9  0840               	movf	??_scheduler_TaskAdd,w
 14270  22BA  0081               	movwf	1
 14271                           
 14272                           ;cooperative_scheduler.c: 51: scheduler->taskEntryVector |= (1 << k);
 14273  22BB  3001               	movlw	1
 14274  22BC  00C0               	movwf	??_scheduler_TaskAdd
 14275  22BD  3000               	movlw	0
 14276  22BE  00C1               	movwf	??_scheduler_TaskAdd+1
 14277  22BF  0A47               	incf	scheduler_TaskAdd@k,w
 14278  22C0  2AC3               	goto	u6534
 14279  22C1                     u6535:	
 14280  22C1  35C0               	lslf	??_scheduler_TaskAdd,f
 14281  22C2  0DC1               	rlf	??_scheduler_TaskAdd+1,f
 14282  22C3                     u6534:	
 14283  22C3  0B89               	decfsz	9,f
 14284  22C4  2AC1               	goto	u6535
 14285  22C5  0846               	movf	scheduler_TaskAdd@scheduler,w
 14286  22C6  3E10               	addlw	16
 14287  22C7  0086               	movwf	6
 14288  22C8  3001               	movlw	1	; select bank2/3
 14289  22C9  0087               	movwf	7
 14290  22CA  0840               	movf	??_scheduler_TaskAdd,w
 14291  22CB  0481               	iorwf	1,f
 14292  22CC  3141               	addfsr 1,1
 14293  22CD  0841               	movf	??_scheduler_TaskAdd+1,w
 14294  22CE  0481               	iorwf	1,f
 14295                           
 14296                           ;cooperative_scheduler.c: 53: if (task->taskInitCallback != (0)) {
 14297  22CF  083F               	movf	scheduler_TaskAdd@task,w
 14298  22D0  3E04               	addlw	4
 14299  22D1  0086               	movwf	6
 14300  22D2  3001               	movlw	1	; select bank2/3
 14301  22D3  0087               	movwf	7
 14302  22D4  0016               	moviw fsr1++
 14303  22D5  0401               	iorwf	1,w
 14304  22D6  1903               	btfsc	3,2
 14305  22D7  2AEB               	goto	l10513
 14306                           
 14307                           ;cooperative_scheduler.c: 54: task->taskInitCallback (task->taskData);
 14308  22D8  083F               	movf	scheduler_TaskAdd@task,w
 14309  22D9  3E02               	addlw	2
 14310  22DA  0086               	movwf	6
 14311  22DB  3001               	movlw	1	; select bank2/3
 14312  22DC  0087               	movwf	7
 14313  22DD  3F40               	moviw [0]fsr1
 14314  22DE  00B9               	movwf	matrix_Init@taskData
 14315  22DF  3F41               	moviw [1]fsr1
 14316  22E0  00BA               	movwf	matrix_Init@taskData+1
 14317  22E1  083F               	movf	scheduler_TaskAdd@task,w
 14318  22E2  3E04               	addlw	4
 14319  22E3  0086               	movwf	6
 14320  22E4  3001               	movlw	1	; select bank2/3
 14321  22E5  0087               	movwf	7
 14322  22E6  3F41               	moviw [1]fsr1
 14323  22E7  008A               	movwf	10
 14324  22E8  3F40               	moviw [0]fsr1
 14325  22E9  000A               	callw
 14326  22EA  31A2               	pagesel	$
 14327  22EB                     l10513:	
 14328                           
 14329                           ;cooperative_scheduler.c: 55: }
 14330                           ;cooperative_scheduler.c: 57: task->taskId = (s8) k;
 14331  22EB  0020               	movlb	0	; select bank0
 14332  22EC  0847               	movf	scheduler_TaskAdd@k,w
 14333  22ED  00C0               	movwf	??_scheduler_TaskAdd
 14334  22EE  083F               	movf	scheduler_TaskAdd@task,w
 14335  22EF  3E0C               	addlw	12
 14336  22F0  0086               	movwf	6
 14337  22F1  3001               	movlw	1	; select bank2/3
 14338  22F2  0087               	movwf	7
 14339  22F3  0840               	movf	??_scheduler_TaskAdd,w
 14340  22F4  0081               	movwf	1
 14341                           
 14342                           ;cooperative_scheduler.c: 58: return k;
 14343                           ;	Return value of _scheduler_TaskAdd is never used
 14344  22F5  0008               	return
 14345  22F6                     l10517:	
 14346  22F6  3001               	movlw	1
 14347  22F7  00C0               	movwf	??_scheduler_TaskAdd
 14348  22F8  0840               	movf	??_scheduler_TaskAdd,w
 14349  22F9  07C7               	addwf	scheduler_TaskAdd@k,f
 14350  22FA  3010               	movlw	16
 14351  22FB  0247               	subwf	scheduler_TaskAdd@k,w
 14352  22FC  1C03               	skipc
 14353  22FD  2A93               	goto	l10507
 14354  22FE                     l10521:	
 14355                           
 14356                           ;cooperative_scheduler.c: 59: }
 14357                           ;cooperative_scheduler.c: 60: }
 14358                           ;cooperative_scheduler.c: 62: task->taskId = -1;
 14359  22FE  083F               	movf	scheduler_TaskAdd@task,w
 14360  22FF  3E0C               	addlw	12
 14361  2300  0086               	movwf	6
 14362  2301  3001               	movlw	1	; select bank2/3
 14363  2302  0087               	movwf	7
 14364  2303  0181               	clrf	1
 14365  2304  0381               	decf	1,f
 14366  2305  0008               	return
 14367  2306                     __end_of_scheduler_TaskAdd:	
 14368                           ;cooperative_scheduler.c: 63: return -1;
 14369                           ;	Return value of _scheduler_TaskAdd is never used
 14370                           
 14371                           
 14372                           	psect	text3
 14373  238A                     __ptext3:	
 14374 ;; *************** function _matrix_Init *****************
 14375 ;; Defined at:
 14376 ;;		line 66 in file "matrix_task.c"
 14377 ;; Parameters:    Size  Location     Type
 14378 ;;  taskData        2   25[BANK0 ] PTR void 
 14379 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14380 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14381 ;; Auto vars:     Size  Location     Type
 14382 ;;  data            2   29[BANK0 ] PTR struct t_matrix_task
 14383 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14384 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14385 ;; Return value:  Size  Location     Type
 14386 ;;                  1    wreg      void 
 14387 ;; Registers used:
 14388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14389 ;; Tracked objects:
 14390 ;;		On entry : 0/0
 14391 ;;		On exit  : 0/0
 14392 ;;		Unchanged: 0/0
 14393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14394 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14396 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14397 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14398 ;;Total ram usage:        6 bytes
 14399 ;; Hardware stack levels used:    1
 14400 ;; Hardware stack levels required when called:   10
 14401 ;; This function calls:
 14402 ;;		_nullifyBadge_segDisplayErase
 14403 ;;		_nullifyBadge_segDisplayRegister
 14404 ;;		_nullifyBadge_userLedsClr
 14405 ;;		_nullifyBadge_userLedsRegister
 14406 ;; This function is called by:
 14407 ;;		_main
 14408 ;;		_scheduler_TaskAdd
 14409 ;; This function uses a non-reentrant model
 14410 ;;
 14411                           
 14412                           
 14413                           ;psect for function _matrix_Init
 14414  238A                     _matrix_Init:	
 14415                           
 14416                           ;matrix_task.c: 67: struct t_matrix_taskData *data = (struct t_matrix_taskData *) taskDa
      +                          ta;
 14417                           
 14418                           ;incstack = 0
 14419                           ; Regs used in _matrix_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14420  238A  0020               	movlb	0	; select bank0
 14421  238B  083A               	movf	matrix_Init@taskData+1,w
 14422  238C  00BE               	movwf	matrix_Init@data+1
 14423  238D  0839               	movf	matrix_Init@taskData,w
 14424  238E  00BD               	movwf	matrix_Init@data
 14425                           
 14426                           ;matrix_task.c: 70: nullifyBadge_userLedsRegister(data->badge);
 14427  238F  083D               	movf	matrix_Init@data,w
 14428  2390  0086               	movwf	6
 14429  2391  083E               	movf	matrix_Init@data+1,w
 14430  2392  0087               	movwf	7
 14431  2393  0801               	movf	1,w
 14432  2394  31B2  22C7  31A3   	fcall	_nullifyBadge_userLedsRegister
 14433                           
 14434                           ;matrix_task.c: 71: nullifyBadge_userLedsClr(data->badge);
 14435  2397  0020               	movlb	0	; select bank0
 14436  2398  083D               	movf	matrix_Init@data,w
 14437  2399  0086               	movwf	6
 14438  239A  083E               	movf	matrix_Init@data+1,w
 14439  239B  0087               	movwf	7
 14440  239C  0801               	movf	1,w
 14441  239D  3187  27FA  31A3   	fcall	_nullifyBadge_userLedsClr
 14442                           
 14443                           ;matrix_task.c: 72: nullifyBadge_segDisplayRegister(data->badge);
 14444  23A0  0020               	movlb	0	; select bank0
 14445  23A1  083D               	movf	matrix_Init@data,w
 14446  23A2  0086               	movwf	6
 14447  23A3  083E               	movf	matrix_Init@data+1,w
 14448  23A4  0087               	movwf	7
 14449  23A5  0801               	movf	1,w
 14450  23A6  31B1  21F0  31A3   	fcall	_nullifyBadge_segDisplayRegister
 14451                           
 14452                           ;matrix_task.c: 73: nullifyBadge_segDisplayErase(data->badge);
 14453  23A9  0020               	movlb	0	; select bank0
 14454  23AA  083D               	movf	matrix_Init@data,w
 14455  23AB  0086               	movwf	6
 14456  23AC  083E               	movf	matrix_Init@data+1,w
 14457  23AD  0087               	movwf	7
 14458  23AE  0801               	movf	1,w
 14459  23AF  3198  2000  31A3   	fcall	_nullifyBadge_segDisplayErase
 14460                           
 14461                           ;matrix_task.c: 74: matrix_found =0;
 14462  23B2  0021               	movlb	1	; select bank1
 14463  23B3  01C2               	clrf	_matrix_found^(0+128)
 14464                           
 14465                           ;matrix_task.c: 76: data->display_state = MATRIX_STATE_DISPLAY;
 14466  23B4  0020               	movlb	0	; select bank0
 14467  23B5  083D               	movf	matrix_Init@data,w
 14468  23B6  3E02               	addlw	2
 14469  23B7  00BB               	movwf	??_matrix_Init
 14470  23B8  3000               	movlw	0
 14471  23B9  3D3E               	addwfc	matrix_Init@data+1,w
 14472  23BA  00BC               	movwf	??_matrix_Init+1
 14473  23BB  083B               	movf	??_matrix_Init,w
 14474  23BC  0086               	movwf	6
 14475  23BD  083C               	movf	??_matrix_Init+1,w
 14476  23BE  0087               	movwf	7
 14477  23BF  300A               	movlw	10
 14478  23C0  0081               	movwf	1
 14479                           
 14480                           ;matrix_task.c: 77: data->martix_state = STILL_IN_MATRIX;
 14481  23C1  083D               	movf	matrix_Init@data,w
 14482  23C2  3E01               	addlw	1
 14483  23C3  00BB               	movwf	??_matrix_Init
 14484  23C4  3000               	movlw	0
 14485  23C5  3D3E               	addwfc	matrix_Init@data+1,w
 14486  23C6  00BC               	movwf	??_matrix_Init+1
 14487  23C7  083B               	movf	??_matrix_Init,w
 14488  23C8  0086               	movwf	6
 14489  23C9  083C               	movf	??_matrix_Init+1,w
 14490  23CA  0087               	movwf	7
 14491  23CB  3001               	movlw	1
 14492  23CC  0081               	movwf	1
 14493                           
 14494                           ;matrix_task.c: 78: matrix_leds_idx =0;
 14495  23CD  0021               	movlb	1	; select bank1
 14496  23CE  01A0               	clrf	_matrix_leds_idx^(0+128)
 14497  23CF  01A1               	clrf	(_matrix_leds_idx+1)^(0+128)
 14498                           
 14499                           ;matrix_task.c: 81: data->holdCountA = 0 ;
 14500  23D0  0020               	movlb	0	; select bank0
 14501  23D1  083D               	movf	matrix_Init@data,w
 14502  23D2  0086               	movwf	6
 14503  23D3  083E               	movf	matrix_Init@data+1,w
 14504  23D4  0087               	movwf	7
 14505  23D5  3149               	addfsr 1,9
 14506  23D6  3000               	movlw	0
 14507  23D7  3FC0               	movwi [0]fsr1
 14508  23D8  3FC1               	movwi [1]fsr1
 14509                           
 14510                           ;matrix_task.c: 82: data->holdCountB = 0 ;
 14511  23D9  083D               	movf	matrix_Init@data,w
 14512  23DA  0086               	movwf	6
 14513  23DB  083E               	movf	matrix_Init@data+1,w
 14514  23DC  0087               	movwf	7
 14515  23DD  314B               	addfsr 1,11
 14516  23DE  3000               	movlw	0
 14517  23DF  3FC0               	movwi [0]fsr1
 14518  23E0  3FC1               	movwi [1]fsr1
 14519                           
 14520                           ;matrix_task.c: 83: data->holdCountX = 0 ;
 14521  23E1  083D               	movf	matrix_Init@data,w
 14522  23E2  0086               	movwf	6
 14523  23E3  083E               	movf	matrix_Init@data+1,w
 14524  23E4  0087               	movwf	7
 14525  23E5  314D               	addfsr 1,13
 14526  23E6  3000               	movlw	0
 14527  23E7  3FC0               	movwi [0]fsr1
 14528  23E8  3FC1               	movwi [1]fsr1
 14529                           
 14530                           ;matrix_task.c: 84: data->holdCountY = 0 ;
 14531  23E9  083D               	movf	matrix_Init@data,w
 14532  23EA  0086               	movwf	6
 14533  23EB  083E               	movf	matrix_Init@data+1,w
 14534  23EC  0087               	movwf	7
 14535  23ED  314F               	addfsr 1,15
 14536  23EE  3000               	movlw	0
 14537  23EF  3FC0               	movwi [0]fsr1
 14538  23F0  3FC1               	movwi [1]fsr1
 14539                           
 14540                           ;matrix_task.c: 85: data->holdCountXY = 0;
 14541  23F1  083D               	movf	matrix_Init@data,w
 14542  23F2  0086               	movwf	6
 14543  23F3  083E               	movf	matrix_Init@data+1,w
 14544  23F4  0087               	movwf	7
 14545  23F5  3151               	addfsr 1,17
 14546  23F6  3000               	movlw	0
 14547  23F7  3FC0               	movwi [0]fsr1
 14548  23F8  3FC1               	movwi [1]fsr1
 14549                           
 14550                           ;matrix_task.c: 86: data->holdCountAY = 0;
 14551  23F9  083D               	movf	matrix_Init@data,w
 14552  23FA  0086               	movwf	6
 14553  23FB  083E               	movf	matrix_Init@data+1,w
 14554  23FC  0087               	movwf	7
 14555  23FD  3153               	addfsr 1,19
 14556  23FE  3000               	movlw	0
 14557  23FF  3FC0               	movwi [0]fsr1
 14558  2400  3FC1               	movwi [1]fsr1
 14559                           
 14560                           ;matrix_task.c: 87: data->holdCountAX = 0;
 14561  2401  083D               	movf	matrix_Init@data,w
 14562  2402  0086               	movwf	6
 14563  2403  083E               	movf	matrix_Init@data+1,w
 14564  2404  0087               	movwf	7
 14565  2405  3155               	addfsr 1,21
 14566  2406  3000               	movlw	0
 14567  2407  3FC0               	movwi [0]fsr1
 14568  2408  3FC1               	movwi [1]fsr1
 14569                           
 14570                           ;matrix_task.c: 88: data->holdCountBX = 0;
 14571  2409  083D               	movf	matrix_Init@data,w
 14572  240A  0086               	movwf	6
 14573  240B  083E               	movf	matrix_Init@data+1,w
 14574  240C  0087               	movwf	7
 14575  240D  3157               	addfsr 1,23
 14576  240E  3000               	movlw	0
 14577  240F  3FC0               	movwi [0]fsr1
 14578  2410  3FC1               	movwi [1]fsr1
 14579                           
 14580                           ;matrix_task.c: 89: data->holdCountBY = 0;
 14581  2411  083D               	movf	matrix_Init@data,w
 14582  2412  0086               	movwf	6
 14583  2413  083E               	movf	matrix_Init@data+1,w
 14584  2414  0087               	movwf	7
 14585  2415  3159               	addfsr 1,25
 14586  2416  3000               	movlw	0
 14587  2417  3FC0               	movwi [0]fsr1
 14588  2418  3FC1               	movwi [1]fsr1
 14589                           
 14590                           ;matrix_task.c: 90: data->holdCountBA = 0;
 14591  2419  083D               	movf	matrix_Init@data,w
 14592  241A  0086               	movwf	6
 14593  241B  083E               	movf	matrix_Init@data+1,w
 14594  241C  0087               	movwf	7
 14595  241D  315B               	addfsr 1,27
 14596  241E  3000               	movlw	0
 14597  241F  3FC0               	movwi [0]fsr1
 14598  2420  3FC1               	movwi [1]fsr1
 14599                           
 14600                           ;matrix_task.c: 91: data->noholdCount = 0;
 14601  2421  083D               	movf	matrix_Init@data,w
 14602  2422  0086               	movwf	6
 14603  2423  083E               	movf	matrix_Init@data+1,w
 14604  2424  0087               	movwf	7
 14605  2425  315D               	addfsr 1,29
 14606  2426  3000               	movlw	0
 14607  2427  3FC0               	movwi [0]fsr1
 14608  2428  3FC1               	movwi [1]fsr1
 14609  2429  0008               	return
 14610  242A                     __end_of_matrix_Init:	
 14611                           
 14612                           	psect	text4
 14613  2CD8                     __ptext4:	
 14614 ;; *************** function _secret_Init *****************
 14615 ;; Defined at:
 14616 ;;		line 51 in file "secret_task.c"
 14617 ;; Parameters:    Size  Location     Type
 14618 ;;  taskData        2   25[BANK0 ] PTR void 
 14619 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14620 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14621 ;; Auto vars:     Size  Location     Type
 14622 ;;  data            2   27[BANK0 ] PTR struct t_secret_task
 14623 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14624 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14625 ;; Return value:  Size  Location     Type
 14626 ;;                  1    wreg      void 
 14627 ;; Registers used:
 14628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14629 ;; Tracked objects:
 14630 ;;		On entry : 0/0
 14631 ;;		On exit  : 0/0
 14632 ;;		Unchanged: 0/0
 14633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14634 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14635 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14637 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14638 ;;Total ram usage:        4 bytes
 14639 ;; Hardware stack levels used:    1
 14640 ;; Hardware stack levels required when called:   10
 14641 ;; This function calls:
 14642 ;;		_nullifyBadge_segDisplayErase
 14643 ;;		_nullifyBadge_segDisplayRegister
 14644 ;;		_nullifyBadge_userLedsClr
 14645 ;;		_nullifyBadge_userLedsRegister
 14646 ;; This function is called by:
 14647 ;;		_main
 14648 ;;		_scheduler_TaskAdd
 14649 ;; This function uses a non-reentrant model
 14650 ;;
 14651                           
 14652                           
 14653                           ;psect for function _secret_Init
 14654  2CD8                     _secret_Init:	
 14655                           
 14656                           ;secret_task.c: 52: struct t_secret_taskData *data = (struct t_secret_taskData *) taskDa
      +                          ta;
 14657                           
 14658                           ;incstack = 0
 14659                           ; Regs used in _secret_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14660  2CD8  0020               	movlb	0	; select bank0
 14661  2CD9  083A               	movf	secret_Init@taskData+1,w
 14662  2CDA  00BC               	movwf	secret_Init@data+1
 14663  2CDB  0839               	movf	secret_Init@taskData,w
 14664  2CDC  00BB               	movwf	secret_Init@data
 14665                           
 14666                           ;secret_task.c: 55: nullifyBadge_userLedsRegister(data->badge);
 14667  2CDD  083B               	movf	secret_Init@data,w
 14668  2CDE  0086               	movwf	6
 14669  2CDF  083C               	movf	secret_Init@data+1,w
 14670  2CE0  0087               	movwf	7
 14671  2CE1  0801               	movf	1,w
 14672  2CE2  31B2  22C7  31AC   	fcall	_nullifyBadge_userLedsRegister
 14673                           
 14674                           ;secret_task.c: 56: nullifyBadge_userLedsClr(data->badge);
 14675  2CE5  0020               	movlb	0	; select bank0
 14676  2CE6  083B               	movf	secret_Init@data,w
 14677  2CE7  0086               	movwf	6
 14678  2CE8  083C               	movf	secret_Init@data+1,w
 14679  2CE9  0087               	movwf	7
 14680  2CEA  0801               	movf	1,w
 14681  2CEB  3187  27FA  31AC   	fcall	_nullifyBadge_userLedsClr
 14682                           
 14683                           ;secret_task.c: 57: nullifyBadge_segDisplayRegister(data->badge);
 14684  2CEE  0020               	movlb	0	; select bank0
 14685  2CEF  083B               	movf	secret_Init@data,w
 14686  2CF0  0086               	movwf	6
 14687  2CF1  083C               	movf	secret_Init@data+1,w
 14688  2CF2  0087               	movwf	7
 14689  2CF3  0801               	movf	1,w
 14690  2CF4  31B1  21F0  31AC   	fcall	_nullifyBadge_segDisplayRegister
 14691                           
 14692                           ;secret_task.c: 58: nullifyBadge_segDisplayErase(data->badge);
 14693  2CF7  0020               	movlb	0	; select bank0
 14694  2CF8  083B               	movf	secret_Init@data,w
 14695  2CF9  0086               	movwf	6
 14696  2CFA  083C               	movf	secret_Init@data+1,w
 14697  2CFB  0087               	movwf	7
 14698  2CFC  0801               	movf	1,w
 14699  2CFD  3198  2000  31AC   	fcall	_nullifyBadge_segDisplayErase
 14700                           
 14701                           ;secret_task.c: 61: data->delayTickCount = 300;
 14702  2D00  0020               	movlb	0	; select bank0
 14703  2D01  083B               	movf	secret_Init@data,w
 14704  2D02  0086               	movwf	6
 14705  2D03  083C               	movf	secret_Init@data+1,w
 14706  2D04  0087               	movwf	7
 14707  2D05  3142               	addfsr 1,2
 14708  2D06  302C               	movlw	44
 14709  2D07  3FC0               	movwi [0]fsr1
 14710  2D08  3001               	movlw	1
 14711  2D09  3FC1               	movwi [1]fsr1
 14712                           
 14713                           ;secret_task.c: 62: data->holdCountA = 0;
 14714  2D0A  083B               	movf	secret_Init@data,w
 14715  2D0B  0086               	movwf	6
 14716  2D0C  083C               	movf	secret_Init@data+1,w
 14717  2D0D  0087               	movwf	7
 14718  2D0E  3144               	addfsr 1,4
 14719  2D0F  3000               	movlw	0
 14720  2D10  3FC0               	movwi [0]fsr1
 14721  2D11  3FC1               	movwi [1]fsr1
 14722                           
 14723                           ;secret_task.c: 63: data->holdCountB = 0;
 14724  2D12  083B               	movf	secret_Init@data,w
 14725  2D13  0086               	movwf	6
 14726  2D14  083C               	movf	secret_Init@data+1,w
 14727  2D15  0087               	movwf	7
 14728  2D16  3146               	addfsr 1,6
 14729  2D17  3000               	movlw	0
 14730  2D18  3FC0               	movwi [0]fsr1
 14731  2D19  3FC1               	movwi [1]fsr1
 14732                           
 14733                           ;secret_task.c: 64: data->holdCountX = 0;
 14734  2D1A  083B               	movf	secret_Init@data,w
 14735  2D1B  0086               	movwf	6
 14736  2D1C  083C               	movf	secret_Init@data+1,w
 14737  2D1D  0087               	movwf	7
 14738  2D1E  3148               	addfsr 1,8
 14739  2D1F  3000               	movlw	0
 14740  2D20  3FC0               	movwi [0]fsr1
 14741  2D21  3FC1               	movwi [1]fsr1
 14742                           
 14743                           ;secret_task.c: 65: data->holdCountY = 0;
 14744  2D22  083B               	movf	secret_Init@data,w
 14745  2D23  0086               	movwf	6
 14746  2D24  083C               	movf	secret_Init@data+1,w
 14747  2D25  0087               	movwf	7
 14748  2D26  314A               	addfsr 1,10
 14749  2D27  3000               	movlw	0
 14750  2D28  3FC0               	movwi [0]fsr1
 14751  2D29  3FC1               	movwi [1]fsr1
 14752                           
 14753                           ;secret_task.c: 66: data->noholdCount = 0;
 14754  2D2A  083B               	movf	secret_Init@data,w
 14755  2D2B  0086               	movwf	6
 14756  2D2C  083C               	movf	secret_Init@data+1,w
 14757  2D2D  0087               	movwf	7
 14758  2D2E  314C               	addfsr 1,12
 14759  2D2F  3000               	movlw	0
 14760  2D30  3FC0               	movwi [0]fsr1
 14761  2D31  3FC1               	movwi [1]fsr1
 14762  2D32  0008               	return
 14763  2D33                     __end_of_secret_Init:	
 14764                           
 14765                           	psect	text5
 14766  1806                     __ptext5:	
 14767 ;; *************** function _locked_Init *****************
 14768 ;; Defined at:
 14769 ;;		line 99 in file "locked_task.c"
 14770 ;; Parameters:    Size  Location     Type
 14771 ;;  taskData        2   25[BANK0 ] PTR void 
 14772 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14773 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14774 ;; Auto vars:     Size  Location     Type
 14775 ;;  data            2   27[BANK0 ] PTR struct t_locked_task
 14776 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14777 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14778 ;; Return value:  Size  Location     Type
 14779 ;;                  1    wreg      void 
 14780 ;; Registers used:
 14781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14782 ;; Tracked objects:
 14783 ;;		On entry : 0/0
 14784 ;;		On exit  : 0/0
 14785 ;;		Unchanged: 0/0
 14786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14787 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14788 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14790 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14791 ;;Total ram usage:        4 bytes
 14792 ;; Hardware stack levels used:    1
 14793 ;; Hardware stack levels required when called:   10
 14794 ;; This function calls:
 14795 ;;		_locked_lock_leds
 14796 ;;		_nullifyBadge_segDisplayErase
 14797 ;;		_nullifyBadge_segDisplayRegister
 14798 ;;		_nullifyBadge_userLedsClr
 14799 ;;		_nullifyBadge_userLedsRegister
 14800 ;; This function is called by:
 14801 ;;		_main
 14802 ;;		_scheduler_TaskAdd
 14803 ;; This function uses a non-reentrant model
 14804 ;;
 14805                           
 14806                           
 14807                           ;psect for function _locked_Init
 14808  1806                     _locked_Init:	
 14809                           
 14810                           ;locked_task.c: 100: struct t_locked_taskData *data = (struct t_locked_taskData *) taskD
      +                          ata;
 14811                           
 14812                           ;incstack = 0
 14813                           ; Regs used in _locked_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14814  1806  0020               	movlb	0	; select bank0
 14815  1807  083A               	movf	locked_Init@taskData+1,w
 14816  1808  00BC               	movwf	locked_Init@data+1
 14817  1809  0839               	movf	locked_Init@taskData,w
 14818  180A  00BB               	movwf	locked_Init@data
 14819                           
 14820                           ;locked_task.c: 103: nullifyBadge_userLedsRegister(data->badge);
 14821  180B  083B               	movf	locked_Init@data,w
 14822  180C  0086               	movwf	6
 14823  180D  083C               	movf	locked_Init@data+1,w
 14824  180E  0087               	movwf	7
 14825  180F  0801               	movf	1,w
 14826  1810  31B2  22C7  3198   	fcall	_nullifyBadge_userLedsRegister
 14827                           
 14828                           ;locked_task.c: 104: nullifyBadge_userLedsClr(data->badge);
 14829  1813  0020               	movlb	0	; select bank0
 14830  1814  083B               	movf	locked_Init@data,w
 14831  1815  0086               	movwf	6
 14832  1816  083C               	movf	locked_Init@data+1,w
 14833  1817  0087               	movwf	7
 14834  1818  0801               	movf	1,w
 14835  1819  3187  27FA  3198   	fcall	_nullifyBadge_userLedsClr
 14836                           
 14837                           ;locked_task.c: 105: nullifyBadge_segDisplayRegister(data->badge);
 14838  181C  0020               	movlb	0	; select bank0
 14839  181D  083B               	movf	locked_Init@data,w
 14840  181E  0086               	movwf	6
 14841  181F  083C               	movf	locked_Init@data+1,w
 14842  1820  0087               	movwf	7
 14843  1821  0801               	movf	1,w
 14844  1822  31B1  21F0  3198   	fcall	_nullifyBadge_segDisplayRegister
 14845                           
 14846                           ;locked_task.c: 106: nullifyBadge_segDisplayErase(data->badge);
 14847  1825  0020               	movlb	0	; select bank0
 14848  1826  083B               	movf	locked_Init@data,w
 14849  1827  0086               	movwf	6
 14850  1828  083C               	movf	locked_Init@data+1,w
 14851  1829  0087               	movwf	7
 14852  182A  0801               	movf	1,w
 14853  182B  3198  2000  3198   	fcall	_nullifyBadge_segDisplayErase
 14854                           
 14855                           ;locked_task.c: 107: pw_found =0;
 14856  182E  0021               	movlb	1	; select bank1
 14857  182F  01C3               	clrf	_pw_found^(0+128)
 14858                           
 14859                           ;locked_task.c: 109: locked_lock_leds();
 14860  1830  31B3  23F3  3198   	fcall	_locked_lock_leds
 14861                           
 14862                           ;locked_task.c: 110: data->state = LOCKED_LOCKED_STATE;
 14863  1833  0020               	movlb	0	; select bank0
 14864  1834  083B               	movf	locked_Init@data,w
 14865  1835  0086               	movwf	6
 14866  1836  083C               	movf	locked_Init@data+1,w
 14867  1837  0087               	movwf	7
 14868  1838  314D               	addfsr 1,13
 14869  1839  0181               	clrf	1
 14870                           
 14871                           ;locked_task.c: 111: data->delayTickCount = 0;
 14872  183A  083B               	movf	locked_Init@data,w
 14873  183B  0086               	movwf	6
 14874  183C  083C               	movf	locked_Init@data+1,w
 14875  183D  0087               	movwf	7
 14876  183E  3141               	addfsr 1,1
 14877  183F  3000               	movlw	0
 14878  1840  3FC0               	movwi [0]fsr1
 14879  1841  3FC1               	movwi [1]fsr1
 14880                           
 14881                           ;locked_task.c: 112: data->holdCountA = 0;
 14882  1842  083B               	movf	locked_Init@data,w
 14883  1843  0086               	movwf	6
 14884  1844  083C               	movf	locked_Init@data+1,w
 14885  1845  0087               	movwf	7
 14886  1846  3143               	addfsr 1,3
 14887  1847  3000               	movlw	0
 14888  1848  3FC0               	movwi [0]fsr1
 14889  1849  3FC1               	movwi [1]fsr1
 14890                           
 14891                           ;locked_task.c: 113: data->holdCountB = 0;
 14892  184A  083B               	movf	locked_Init@data,w
 14893  184B  0086               	movwf	6
 14894  184C  083C               	movf	locked_Init@data+1,w
 14895  184D  0087               	movwf	7
 14896  184E  3145               	addfsr 1,5
 14897  184F  3000               	movlw	0
 14898  1850  3FC0               	movwi [0]fsr1
 14899  1851  3FC1               	movwi [1]fsr1
 14900                           
 14901                           ;locked_task.c: 114: data->holdCountX = 0;
 14902  1852  083B               	movf	locked_Init@data,w
 14903  1853  0086               	movwf	6
 14904  1854  083C               	movf	locked_Init@data+1,w
 14905  1855  0087               	movwf	7
 14906  1856  3147               	addfsr 1,7
 14907  1857  3000               	movlw	0
 14908  1858  3FC0               	movwi [0]fsr1
 14909  1859  3FC1               	movwi [1]fsr1
 14910                           
 14911                           ;locked_task.c: 115: data->holdCountY = 0;
 14912  185A  083B               	movf	locked_Init@data,w
 14913  185B  0086               	movwf	6
 14914  185C  083C               	movf	locked_Init@data+1,w
 14915  185D  0087               	movwf	7
 14916  185E  3149               	addfsr 1,9
 14917  185F  3000               	movlw	0
 14918  1860  3FC0               	movwi [0]fsr1
 14919  1861  3FC1               	movwi [1]fsr1
 14920                           
 14921                           ;locked_task.c: 116: data->noholdCount = 0;
 14922  1862  083B               	movf	locked_Init@data,w
 14923  1863  0086               	movwf	6
 14924  1864  083C               	movf	locked_Init@data+1,w
 14925  1865  0087               	movwf	7
 14926  1866  314B               	addfsr 1,11
 14927  1867  3000               	movlw	0
 14928  1868  3FC0               	movwi [0]fsr1
 14929  1869  3FC1               	movwi [1]fsr1
 14930  186A  0008               	return
 14931  186B                     __end_of_locked_Init:	
 14932                           
 14933                           	psect	text6
 14934  2DF4                     __ptext6:	
 14935 ;; *************** function _menu_Init *****************
 14936 ;; Defined at:
 14937 ;;		line 37 in file "menu_task.c"
 14938 ;; Parameters:    Size  Location     Type
 14939 ;;  taskData        2   25[BANK0 ] PTR void 
 14940 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14941 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14942 ;; Auto vars:     Size  Location     Type
 14943 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 14944 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14945 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14946 ;; Return value:  Size  Location     Type
 14947 ;;                  1    wreg      void 
 14948 ;; Registers used:
 14949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14950 ;; Tracked objects:
 14951 ;;		On entry : 0/0
 14952 ;;		On exit  : 0/0
 14953 ;;		Unchanged: 0/0
 14954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14955 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14956 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14958 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14959 ;;Total ram usage:        4 bytes
 14960 ;; Hardware stack levels used:    1
 14961 ;; Hardware stack levels required when called:   10
 14962 ;; This function calls:
 14963 ;;		_nullifyBadge_segDisplayErase
 14964 ;;		_nullifyBadge_segDisplayRegister
 14965 ;;		_nullifyBadge_userLedsClr
 14966 ;;		_nullifyBadge_userLedsRegister
 14967 ;; This function is called by:
 14968 ;;		_main
 14969 ;;		_scheduler_TaskAdd
 14970 ;; This function uses a non-reentrant model
 14971 ;;
 14972                           
 14973                           
 14974                           ;psect for function _menu_Init
 14975  2DF4                     _menu_Init:	
 14976                           
 14977                           ;menu_task.c: 38: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 14978                           
 14979                           ;incstack = 0
 14980                           ; Regs used in _menu_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14981  2DF4  0020               	movlb	0	; select bank0
 14982  2DF5  083A               	movf	menu_Init@taskData+1,w
 14983  2DF6  00BC               	movwf	menu_Init@data+1
 14984  2DF7  0839               	movf	menu_Init@taskData,w
 14985  2DF8  00BB               	movwf	menu_Init@data
 14986                           
 14987                           ;menu_task.c: 41: nullifyBadge_userLedsRegister(data->badge);
 14988  2DF9  083B               	movf	menu_Init@data,w
 14989  2DFA  0086               	movwf	6
 14990  2DFB  083C               	movf	menu_Init@data+1,w
 14991  2DFC  0087               	movwf	7
 14992  2DFD  0801               	movf	1,w
 14993  2DFE  31B2  22C7  31AD   	fcall	_nullifyBadge_userLedsRegister
 14994                           
 14995                           ;menu_task.c: 42: nullifyBadge_userLedsClr(data->badge);
 14996  2E01  0020               	movlb	0	; select bank0
 14997  2E02  083B               	movf	menu_Init@data,w
 14998  2E03  0086               	movwf	6
 14999  2E04  083C               	movf	menu_Init@data+1,w
 15000  2E05  0087               	movwf	7
 15001  2E06  0801               	movf	1,w
 15002  2E07  3187  27FA  31AD   	fcall	_nullifyBadge_userLedsClr
 15003                           
 15004                           ;menu_task.c: 43: nullifyBadge_segDisplayRegister(data->badge);
 15005  2E0A  0020               	movlb	0	; select bank0
 15006  2E0B  083B               	movf	menu_Init@data,w
 15007  2E0C  0086               	movwf	6
 15008  2E0D  083C               	movf	menu_Init@data+1,w
 15009  2E0E  0087               	movwf	7
 15010  2E0F  0801               	movf	1,w
 15011  2E10  31B1  21F0  31AD   	fcall	_nullifyBadge_segDisplayRegister
 15012                           
 15013                           ;menu_task.c: 44: nullifyBadge_segDisplayErase(data->badge);
 15014  2E13  0020               	movlb	0	; select bank0
 15015  2E14  083B               	movf	menu_Init@data,w
 15016  2E15  0086               	movwf	6
 15017  2E16  083C               	movf	menu_Init@data+1,w
 15018  2E17  0087               	movwf	7
 15019  2E18  0801               	movf	1,w
 15020  2E19  3198  2000  31AD   	fcall	_nullifyBadge_segDisplayErase
 15021                           
 15022                           ;menu_task.c: 47: data->delayTickCount = 50;
 15023  2E1C  0020               	movlb	0	; select bank0
 15024  2E1D  083B               	movf	menu_Init@data,w
 15025  2E1E  0086               	movwf	6
 15026  2E1F  083C               	movf	menu_Init@data+1,w
 15027  2E20  0087               	movwf	7
 15028  2E21  3142               	addfsr 1,2
 15029  2E22  3032               	movlw	50
 15030  2E23  3FC0               	movwi [0]fsr1
 15031  2E24  3000               	movlw	0
 15032  2E25  3FC1               	movwi [1]fsr1
 15033                           
 15034                           ;menu_task.c: 48: data->holdCountA = 0;
 15035  2E26  083B               	movf	menu_Init@data,w
 15036  2E27  0086               	movwf	6
 15037  2E28  083C               	movf	menu_Init@data+1,w
 15038  2E29  0087               	movwf	7
 15039  2E2A  3144               	addfsr 1,4
 15040  2E2B  3000               	movlw	0
 15041  2E2C  3FC0               	movwi [0]fsr1
 15042  2E2D  3FC1               	movwi [1]fsr1
 15043                           
 15044                           ;menu_task.c: 49: data->holdCountB = 0;
 15045  2E2E  083B               	movf	menu_Init@data,w
 15046  2E2F  0086               	movwf	6
 15047  2E30  083C               	movf	menu_Init@data+1,w
 15048  2E31  0087               	movwf	7
 15049  2E32  3146               	addfsr 1,6
 15050  2E33  3000               	movlw	0
 15051  2E34  3FC0               	movwi [0]fsr1
 15052  2E35  3FC1               	movwi [1]fsr1
 15053                           
 15054                           ;menu_task.c: 50: data->holdCountX = 0;
 15055  2E36  083B               	movf	menu_Init@data,w
 15056  2E37  0086               	movwf	6
 15057  2E38  083C               	movf	menu_Init@data+1,w
 15058  2E39  0087               	movwf	7
 15059  2E3A  3148               	addfsr 1,8
 15060  2E3B  3000               	movlw	0
 15061  2E3C  3FC0               	movwi [0]fsr1
 15062  2E3D  3FC1               	movwi [1]fsr1
 15063                           
 15064                           ;menu_task.c: 51: data->holdCountY = 0;
 15065  2E3E  083B               	movf	menu_Init@data,w
 15066  2E3F  0086               	movwf	6
 15067  2E40  083C               	movf	menu_Init@data+1,w
 15068  2E41  0087               	movwf	7
 15069  2E42  314A               	addfsr 1,10
 15070  2E43  3000               	movlw	0
 15071  2E44  3FC0               	movwi [0]fsr1
 15072  2E45  3FC1               	movwi [1]fsr1
 15073                           
 15074                           ;menu_task.c: 52: data->noholdCount = 0;
 15075  2E46  083B               	movf	menu_Init@data,w
 15076  2E47  0086               	movwf	6
 15077  2E48  083C               	movf	menu_Init@data+1,w
 15078  2E49  0087               	movwf	7
 15079  2E4A  314C               	addfsr 1,12
 15080  2E4B  3000               	movlw	0
 15081  2E4C  3FC0               	movwi [0]fsr1
 15082  2E4D  3FC1               	movwi [1]fsr1
 15083                           
 15084                           ;menu_task.c: 54: menu_option_idx = 0;
 15085  2E4E  0021               	movlb	1	; select bank1
 15086  2E4F  01B6               	clrf	_menu_option_idx^(0+128)
 15087  2E50  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 15088                           
 15089                           ;menu_task.c: 56: menu_option_size = sizeof(menu_option)/sizeof(menu_option[0]);
 15090  2E51  3005               	movlw	5
 15091  2E52  00B4               	movwf	_menu_option_size^(0+128)
 15092  2E53  3000               	movlw	0
 15093  2E54  00B5               	movwf	(_menu_option_size^(0+128)+1)
 15094  2E55  0008               	return
 15095  2E56                     __end_of_menu_Init:	
 15096                           
 15097                           	psect	text7
 15098  0764                     __ptext7:	
 15099 ;; *************** function _flashy_Init *****************
 15100 ;; Defined at:
 15101 ;;		line 66 in file "flashy_task.c"
 15102 ;; Parameters:    Size  Location     Type
 15103 ;;  taskData        2   25[BANK0 ] PTR void 
 15104 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15105 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15106 ;; Auto vars:     Size  Location     Type
 15107 ;;  data            2   27[BANK0 ] PTR struct t_flashy_task
 15108 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15109 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15110 ;; Return value:  Size  Location     Type
 15111 ;;                  1    wreg      void 
 15112 ;; Registers used:
 15113 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15114 ;; Tracked objects:
 15115 ;;		On entry : 0/0
 15116 ;;		On exit  : 0/0
 15117 ;;		Unchanged: 0/0
 15118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15119 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15120 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15122 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15123 ;;Total ram usage:        4 bytes
 15124 ;; Hardware stack levels used:    1
 15125 ;; Hardware stack levels required when called:   10
 15126 ;; This function calls:
 15127 ;;		_nullifyBadge_segDisplayErase
 15128 ;;		_nullifyBadge_segDisplayRegister
 15129 ;;		_nullifyBadge_userLedsClr
 15130 ;;		_nullifyBadge_userLedsRegister
 15131 ;; This function is called by:
 15132 ;;		_main
 15133 ;;		_scheduler_TaskAdd
 15134 ;; This function uses a non-reentrant model
 15135 ;;
 15136                           
 15137                           
 15138                           ;psect for function _flashy_Init
 15139  0764                     _flashy_Init:	
 15140                           
 15141                           ;flashy_task.c: 67: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskDa
      +                          ta;
 15142                           
 15143                           ;incstack = 0
 15144                           ; Regs used in _flashy_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15145  0764  0020               	movlb	0	; select bank0
 15146  0765  083A               	movf	flashy_Init@taskData+1,w
 15147  0766  00BC               	movwf	flashy_Init@data+1
 15148  0767  0839               	movf	flashy_Init@taskData,w
 15149  0768  00BB               	movwf	flashy_Init@data
 15150                           
 15151                           ;flashy_task.c: 70: nullifyBadge_userLedsRegister(data->badge);
 15152  0769  083B               	movf	flashy_Init@data,w
 15153  076A  0086               	movwf	6
 15154  076B  083C               	movf	flashy_Init@data+1,w
 15155  076C  0087               	movwf	7
 15156  076D  0801               	movf	1,w
 15157  076E  31B2  22C7  3187   	fcall	_nullifyBadge_userLedsRegister
 15158                           
 15159                           ;flashy_task.c: 71: nullifyBadge_userLedsClr(data->badge);
 15160  0771  0020               	movlb	0	; select bank0
 15161  0772  083B               	movf	flashy_Init@data,w
 15162  0773  0086               	movwf	6
 15163  0774  083C               	movf	flashy_Init@data+1,w
 15164  0775  0087               	movwf	7
 15165  0776  0801               	movf	1,w
 15166  0777  3187  27FA  3187   	fcall	_nullifyBadge_userLedsClr
 15167                           
 15168                           ;flashy_task.c: 72: nullifyBadge_segDisplayRegister(data->badge);
 15169  077A  0020               	movlb	0	; select bank0
 15170  077B  083B               	movf	flashy_Init@data,w
 15171  077C  0086               	movwf	6
 15172  077D  083C               	movf	flashy_Init@data+1,w
 15173  077E  0087               	movwf	7
 15174  077F  0801               	movf	1,w
 15175  0780  31B1  21F0  3187   	fcall	_nullifyBadge_segDisplayRegister
 15176                           
 15177                           ;flashy_task.c: 73: nullifyBadge_segDisplayErase(data->badge);
 15178  0783  0020               	movlb	0	; select bank0
 15179  0784  083B               	movf	flashy_Init@data,w
 15180  0785  0086               	movwf	6
 15181  0786  083C               	movf	flashy_Init@data+1,w
 15182  0787  0087               	movwf	7
 15183  0788  0801               	movf	1,w
 15184  0789  3198  2000  3187   	fcall	_nullifyBadge_segDisplayErase
 15185                           
 15186                           ;flashy_task.c: 79: data->delayTickCount = 35;
 15187  078C  0020               	movlb	0	; select bank0
 15188  078D  083B               	movf	flashy_Init@data,w
 15189  078E  0086               	movwf	6
 15190  078F  083C               	movf	flashy_Init@data+1,w
 15191  0790  0087               	movwf	7
 15192  0791  3141               	addfsr 1,1
 15193  0792  3023               	movlw	35
 15194  0793  3FC0               	movwi [0]fsr1
 15195  0794  3000               	movlw	0
 15196  0795  3FC1               	movwi [1]fsr1
 15197                           
 15198                           ;flashy_task.c: 80: data->displayTickCount = 0;
 15199  0796  083B               	movf	flashy_Init@data,w
 15200  0797  0086               	movwf	6
 15201  0798  083C               	movf	flashy_Init@data+1,w
 15202  0799  0087               	movwf	7
 15203  079A  3144               	addfsr 1,4
 15204  079B  3000               	movlw	0
 15205  079C  3FC0               	movwi [0]fsr1
 15206  079D  3FC1               	movwi [1]fsr1
 15207                           
 15208                           ;flashy_task.c: 83: data->holdCountA = 0;
 15209  079E  083B               	movf	flashy_Init@data,w
 15210  079F  0086               	movwf	6
 15211  07A0  083C               	movf	flashy_Init@data+1,w
 15212  07A1  0087               	movwf	7
 15213  07A2  314A               	addfsr 1,10
 15214  07A3  3000               	movlw	0
 15215  07A4  3FC0               	movwi [0]fsr1
 15216  07A5  3FC1               	movwi [1]fsr1
 15217                           
 15218                           ;flashy_task.c: 84: data->holdCountB = 0;
 15219  07A6  083B               	movf	flashy_Init@data,w
 15220  07A7  0086               	movwf	6
 15221  07A8  083C               	movf	flashy_Init@data+1,w
 15222  07A9  0087               	movwf	7
 15223  07AA  314C               	addfsr 1,12
 15224  07AB  3000               	movlw	0
 15225  07AC  3FC0               	movwi [0]fsr1
 15226  07AD  3FC1               	movwi [1]fsr1
 15227                           
 15228                           ;flashy_task.c: 85: data->holdCountX = 0;
 15229  07AE  083B               	movf	flashy_Init@data,w
 15230  07AF  0086               	movwf	6
 15231  07B0  083C               	movf	flashy_Init@data+1,w
 15232  07B1  0087               	movwf	7
 15233  07B2  314E               	addfsr 1,14
 15234  07B3  3000               	movlw	0
 15235  07B4  3FC0               	movwi [0]fsr1
 15236  07B5  3FC1               	movwi [1]fsr1
 15237                           
 15238                           ;flashy_task.c: 86: data->holdCountY = 0;
 15239  07B6  083B               	movf	flashy_Init@data,w
 15240  07B7  0086               	movwf	6
 15241  07B8  083C               	movf	flashy_Init@data+1,w
 15242  07B9  0087               	movwf	7
 15243  07BA  3150               	addfsr 1,16
 15244  07BB  3000               	movlw	0
 15245  07BC  3FC0               	movwi [0]fsr1
 15246  07BD  3FC1               	movwi [1]fsr1
 15247                           
 15248                           ;flashy_task.c: 87: data->holdCountXY = 0;
 15249  07BE  083B               	movf	flashy_Init@data,w
 15250  07BF  0086               	movwf	6
 15251  07C0  083C               	movf	flashy_Init@data+1,w
 15252  07C1  0087               	movwf	7
 15253  07C2  3152               	addfsr 1,18
 15254  07C3  3000               	movlw	0
 15255  07C4  3FC0               	movwi [0]fsr1
 15256  07C5  3FC1               	movwi [1]fsr1
 15257                           
 15258                           ;flashy_task.c: 88: data->holdCountAY = 0;
 15259  07C6  083B               	movf	flashy_Init@data,w
 15260  07C7  0086               	movwf	6
 15261  07C8  083C               	movf	flashy_Init@data+1,w
 15262  07C9  0087               	movwf	7
 15263  07CA  3154               	addfsr 1,20
 15264  07CB  3000               	movlw	0
 15265  07CC  3FC0               	movwi [0]fsr1
 15266  07CD  3FC1               	movwi [1]fsr1
 15267                           
 15268                           ;flashy_task.c: 89: data->holdCountAX = 0;
 15269  07CE  083B               	movf	flashy_Init@data,w
 15270  07CF  0086               	movwf	6
 15271  07D0  083C               	movf	flashy_Init@data+1,w
 15272  07D1  0087               	movwf	7
 15273  07D2  3156               	addfsr 1,22
 15274  07D3  3000               	movlw	0
 15275  07D4  3FC0               	movwi [0]fsr1
 15276  07D5  3FC1               	movwi [1]fsr1
 15277                           
 15278                           ;flashy_task.c: 90: data->noholdCount = 0;
 15279  07D6  083B               	movf	flashy_Init@data,w
 15280  07D7  0086               	movwf	6
 15281  07D8  083C               	movf	flashy_Init@data+1,w
 15282  07D9  0087               	movwf	7
 15283  07DA  315C               	addfsr 1,28
 15284  07DB  3000               	movlw	0
 15285  07DC  3FC0               	movwi [0]fsr1
 15286  07DD  3FC1               	movwi [1]fsr1
 15287                           
 15288                           ;flashy_task.c: 92: flashy_leds_idx = 0;
 15289  07DE  0021               	movlb	1	; select bank1
 15290  07DF  01B2               	clrf	_flashy_leds_idx^(0+128)
 15291  07E0  01B3               	clrf	(_flashy_leds_idx+1)^(0+128)
 15292                           
 15293                           ;flashy_task.c: 93: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 15294  07E1  0020               	movlb	0	; select bank0
 15295  07E2  083B               	movf	flashy_Init@data,w
 15296  07E3  0086               	movwf	6
 15297  07E4  083C               	movf	flashy_Init@data+1,w
 15298  07E5  0087               	movwf	7
 15299  07E6  3143               	addfsr 1,3
 15300  07E7  0181               	clrf	1
 15301                           
 15302                           ;flashy_task.c: 94: flashy_option_idx = 0;
 15303  07E8  0021               	movlb	1	; select bank1
 15304  07E9  01A8               	clrf	_flashy_option_idx^(0+128)
 15305  07EA  01A9               	clrf	(_flashy_option_idx+1)^(0+128)
 15306                           
 15307                           ;flashy_task.c: 96: flashy_option_size = sizeof(flashy_option)/sizeof(flashy_option[0]);
 15308  07EB  301D               	movlw	29
 15309  07EC  00A6               	movwf	_flashy_option_size^(0+128)
 15310  07ED  3000               	movlw	0
 15311  07EE  00A7               	movwf	(_flashy_option_size^(0+128)+1)
 15312                           
 15313                           ;flashy_task.c: 98: flashy_sparkle_rate =50;
 15314  07EF  3032               	movlw	50
 15315  07F0  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 15316  07F1  3000               	movlw	0
 15317  07F2  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 15318                           
 15319                           ;flashy_task.c: 99: flashy_scroll_rate=50;
 15320  07F3  3032               	movlw	50
 15321  07F4  00AC               	movwf	_flashy_scroll_rate^(0+128)
 15322  07F5  3000               	movlw	0
 15323  07F6  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 15324                           
 15325                           ;flashy_task.c: 100: flashy_leds_state_track =0;
 15326  07F7  01B0               	clrf	_flashy_leds_state_track^(0+128)
 15327  07F8  01B1               	clrf	(_flashy_leds_state_track+1)^(0+128)
 15328  07F9  0008               	return
 15329  07FA                     __end_of_flashy_Init:	
 15330                           
 15331                           	psect	text8
 15332  2E56                     __ptext8:	
 15333 ;; *************** function _slot_Init *****************
 15334 ;; Defined at:
 15335 ;;		line 29 in file "slot_task.c"
 15336 ;; Parameters:    Size  Location     Type
 15337 ;;  taskData        2   25[BANK0 ] PTR void 
 15338 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15339 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15340 ;; Auto vars:     Size  Location     Type
 15341 ;;  data            2   27[BANK0 ] PTR struct t_slot_taskDa
 15342 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15343 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15344 ;; Return value:  Size  Location     Type
 15345 ;;                  1    wreg      void 
 15346 ;; Registers used:
 15347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15348 ;; Tracked objects:
 15349 ;;		On entry : 0/0
 15350 ;;		On exit  : 0/0
 15351 ;;		Unchanged: 0/0
 15352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15353 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15354 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15356 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15357 ;;Total ram usage:        4 bytes
 15358 ;; Hardware stack levels used:    1
 15359 ;; Hardware stack levels required when called:   10
 15360 ;; This function calls:
 15361 ;;		_nullifyBadge_segDisplayErase
 15362 ;;		_nullifyBadge_segDisplayRegister
 15363 ;;		_nullifyBadge_userLedsClr
 15364 ;;		_nullifyBadge_userLedsRegister
 15365 ;;		_slot_Setup
 15366 ;; This function is called by:
 15367 ;;		_main
 15368 ;;		_scheduler_TaskAdd
 15369 ;; This function uses a non-reentrant model
 15370 ;;
 15371                           
 15372                           
 15373                           ;psect for function _slot_Init
 15374  2E56                     _slot_Init:	
 15375                           
 15376                           ;slot_task.c: 30: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 15377                           
 15378                           ;incstack = 0
 15379                           ; Regs used in _slot_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15380  2E56  0020               	movlb	0	; select bank0
 15381  2E57  083A               	movf	slot_Init@taskData+1,w
 15382  2E58  00BC               	movwf	slot_Init@data+1
 15383  2E59  0839               	movf	slot_Init@taskData,w
 15384  2E5A  00BB               	movwf	slot_Init@data
 15385                           
 15386                           ;slot_task.c: 33: nullifyBadge_userLedsRegister(data->badge);
 15387  2E5B  083B               	movf	slot_Init@data,w
 15388  2E5C  0086               	movwf	6
 15389  2E5D  083C               	movf	slot_Init@data+1,w
 15390  2E5E  0087               	movwf	7
 15391  2E5F  0801               	movf	1,w
 15392  2E60  31B2  22C7  31AE   	fcall	_nullifyBadge_userLedsRegister
 15393                           
 15394                           ;slot_task.c: 34: nullifyBadge_userLedsClr(data->badge);
 15395  2E63  0020               	movlb	0	; select bank0
 15396  2E64  083B               	movf	slot_Init@data,w
 15397  2E65  0086               	movwf	6
 15398  2E66  083C               	movf	slot_Init@data+1,w
 15399  2E67  0087               	movwf	7
 15400  2E68  0801               	movf	1,w
 15401  2E69  3187  27FA  31AE   	fcall	_nullifyBadge_userLedsClr
 15402                           
 15403                           ;slot_task.c: 35: nullifyBadge_segDisplayRegister(data->badge);
 15404  2E6C  0020               	movlb	0	; select bank0
 15405  2E6D  083B               	movf	slot_Init@data,w
 15406  2E6E  0086               	movwf	6
 15407  2E6F  083C               	movf	slot_Init@data+1,w
 15408  2E70  0087               	movwf	7
 15409  2E71  0801               	movf	1,w
 15410  2E72  31B1  21F0  31AE   	fcall	_nullifyBadge_segDisplayRegister
 15411                           
 15412                           ;slot_task.c: 36: nullifyBadge_segDisplayErase(data->badge);
 15413  2E75  0020               	movlb	0	; select bank0
 15414  2E76  083B               	movf	slot_Init@data,w
 15415  2E77  0086               	movwf	6
 15416  2E78  083C               	movf	slot_Init@data+1,w
 15417  2E79  0087               	movwf	7
 15418  2E7A  0801               	movf	1,w
 15419  2E7B  3198  2000  31AE   	fcall	_nullifyBadge_segDisplayErase
 15420                           
 15421                           ;slot_task.c: 39: data->displayTickCount = 0;
 15422  2E7E  0020               	movlb	0	; select bank0
 15423  2E7F  083B               	movf	slot_Init@data,w
 15424  2E80  0086               	movwf	6
 15425  2E81  083C               	movf	slot_Init@data+1,w
 15426  2E82  0087               	movwf	7
 15427  2E83  3143               	addfsr 1,3
 15428  2E84  3000               	movlw	0
 15429  2E85  3FC0               	movwi [0]fsr1
 15430  2E86  3FC1               	movwi [1]fsr1
 15431                           
 15432                           ;slot_task.c: 40: data->holdCountA = 0;
 15433  2E87  083B               	movf	slot_Init@data,w
 15434  2E88  0086               	movwf	6
 15435  2E89  083C               	movf	slot_Init@data+1,w
 15436  2E8A  0087               	movwf	7
 15437  2E8B  315F               	addfsr 1,31
 15438  2E8C  3000               	movlw	0
 15439  2E8D  3FC0               	movwi [0]fsr1
 15440  2E8E  3FC1               	movwi [1]fsr1
 15441                           
 15442                           ;slot_task.c: 41: data->holdCountB = 0;
 15443  2E8F  083B               	movf	slot_Init@data,w
 15444  2E90  3E21               	addlw	33
 15445  2E91  0086               	movwf	6
 15446  2E92  3000               	movlw	0
 15447  2E93  3D3C               	addwfc	slot_Init@data+1,w
 15448  2E94  0087               	movwf	7
 15449  2E95  3000               	movlw	0
 15450  2E96  3FC0               	movwi [0]fsr1
 15451  2E97  3FC1               	movwi [1]fsr1
 15452                           
 15453                           ;slot_task.c: 42: data->holdCountX = 0;
 15454  2E98  083B               	movf	slot_Init@data,w
 15455  2E99  3E23               	addlw	35
 15456  2E9A  0086               	movwf	6
 15457  2E9B  3000               	movlw	0
 15458  2E9C  3D3C               	addwfc	slot_Init@data+1,w
 15459  2E9D  0087               	movwf	7
 15460  2E9E  3000               	movlw	0
 15461  2E9F  3FC0               	movwi [0]fsr1
 15462  2EA0  3FC1               	movwi [1]fsr1
 15463                           
 15464                           ;slot_task.c: 43: data->holdCountY = 0;
 15465  2EA1  083B               	movf	slot_Init@data,w
 15466  2EA2  3E25               	addlw	37
 15467  2EA3  0086               	movwf	6
 15468  2EA4  3000               	movlw	0
 15469  2EA5  3D3C               	addwfc	slot_Init@data+1,w
 15470  2EA6  0087               	movwf	7
 15471  2EA7  3000               	movlw	0
 15472  2EA8  3FC0               	movwi [0]fsr1
 15473  2EA9  3FC1               	movwi [1]fsr1
 15474                           
 15475                           ;slot_task.c: 44: data->noholdCount = 0;
 15476  2EAA  083B               	movf	slot_Init@data,w
 15477  2EAB  3E27               	addlw	39
 15478  2EAC  0086               	movwf	6
 15479  2EAD  3000               	movlw	0
 15480  2EAE  3D3C               	addwfc	slot_Init@data+1,w
 15481  2EAF  0087               	movwf	7
 15482  2EB0  3000               	movlw	0
 15483  2EB1  3FC0               	movwi [0]fsr1
 15484  2EB2  3FC1               	movwi [1]fsr1
 15485                           
 15486                           ;slot_task.c: 45: slot_Setup(data);
 15487  2EB3  083C               	movf	slot_Init@data+1,w
 15488  2EB4  00B0               	movwf	slot_Setup@taskData+1
 15489  2EB5  083B               	movf	slot_Init@data,w
 15490  2EB6  00AF               	movwf	slot_Setup@taskData
 15491  2EB7  31AB  23DA         	fcall	_slot_Setup
 15492  2EB9  0008               	return
 15493  2EBA                     __end_of_slot_Init:	
 15494                           
 15495                           	psect	text9
 15496  32C7                     __ptext9:	
 15497 ;; *************** function _nullifyBadge_userLedsRegister *****************
 15498 ;; Defined at:
 15499 ;;		line 133 in file "nullifyBadge.c"
 15500 ;; Parameters:    Size  Location     Type
 15501 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 15502 ;;		 -> badge_inst(18), 
 15503 ;; Auto vars:     Size  Location     Type
 15504 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 15505 ;;		 -> badge_inst(18), 
 15506 ;; Return value:  Size  Location     Type
 15507 ;;                  1    wreg      char 
 15508 ;; Registers used:
 15509 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15510 ;; Tracked objects:
 15511 ;;		On entry : 0/0
 15512 ;;		On exit  : 0/0
 15513 ;;		Unchanged: 0/0
 15514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15518 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15519 ;;Total ram usage:        1 bytes
 15520 ;; Hardware stack levels used:    1
 15521 ;; Hardware stack levels required when called:    4
 15522 ;; This function calls:
 15523 ;;		Nothing
 15524 ;; This function is called by:
 15525 ;;		_menu_Init
 15526 ;;		_flashy_Init
 15527 ;;		_locked_Init
 15528 ;;		_secret_Init
 15529 ;;		_slot_Init
 15530 ;;		_matrix_Init
 15531 ;; This function uses a non-reentrant model
 15532 ;;
 15533                           
 15534                           
 15535                           ;psect for function _nullifyBadge_userLedsRegister
 15536  32C7                     _nullifyBadge_userLedsRegister:	
 15537                           
 15538                           ;incstack = 0
 15539                           ; Regs used in _nullifyBadge_userLedsRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 15540                           ;nullifyBadge_userLedsRegister@badge stored from wreg
 15541  32C7  00F1               	movwf	nullifyBadge_userLedsRegister@badge
 15542                           
 15543                           ;nullifyBadge.c: 134: if (badge->registeredHw & HW_USER_LEDS) {
 15544  32C8  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 15545  32C9  3E11               	addlw	17
 15546  32CA  0086               	movwf	6
 15547  32CB  3001               	movlw	1	; select bank2/3
 15548  32CC  0087               	movwf	7
 15549  32CD  1801               	btfsc	1,0
 15550  32CE  0008               	return
 15551                           
 15552                           ;nullifyBadge.c: 137: else {
 15553                           ;nullifyBadge.c: 138: badge->registeredHw |= (1 << HW_USER_LEDS);
 15554                           
 15555                           ;nullifyBadge.c: 136: }
 15556                           
 15557                           ;nullifyBadge.c: 135: return -1;
 15558                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 15559  32CF  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 15560  32D0  3E11               	addlw	17
 15561  32D1  0086               	movwf	6
 15562  32D2  3001               	movlw	1	; select bank2/3
 15563  32D3  0087               	movwf	7
 15564  32D4  1481               	bsf	1,1
 15565                           
 15566                           ;nullifyBadge.c: 139: return 0;
 15567                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 15568  32D5  0008               	return
 15569  32D6                     __end_of_nullifyBadge_userLedsRegister:	
 15570                           
 15571                           	psect	text10
 15572  31F0                     __ptext10:	
 15573 ;; *************** function _nullifyBadge_segDisplayRegister *****************
 15574 ;; Defined at:
 15575 ;;		line 68 in file "nullifyBadge.c"
 15576 ;; Parameters:    Size  Location     Type
 15577 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 15578 ;;		 -> badge_inst(18), 
 15579 ;; Auto vars:     Size  Location     Type
 15580 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 15581 ;;		 -> badge_inst(18), 
 15582 ;; Return value:  Size  Location     Type
 15583 ;;                  1    wreg      char 
 15584 ;; Registers used:
 15585 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15586 ;; Tracked objects:
 15587 ;;		On entry : 0/0
 15588 ;;		On exit  : 0/0
 15589 ;;		Unchanged: 0/0
 15590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15594 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15595 ;;Total ram usage:        1 bytes
 15596 ;; Hardware stack levels used:    1
 15597 ;; Hardware stack levels required when called:    4
 15598 ;; This function calls:
 15599 ;;		Nothing
 15600 ;; This function is called by:
 15601 ;;		_menu_Init
 15602 ;;		_flashy_Init
 15603 ;;		_locked_Init
 15604 ;;		_secret_Init
 15605 ;;		_slot_Init
 15606 ;;		_matrix_Init
 15607 ;;		_fadeDisplay_Init
 15608 ;; This function uses a non-reentrant model
 15609 ;;
 15610                           
 15611                           
 15612                           ;psect for function _nullifyBadge_segDisplayRegister
 15613  31F0                     _nullifyBadge_segDisplayRegister:	
 15614                           
 15615                           ;incstack = 0
 15616                           ; Regs used in _nullifyBadge_segDisplayRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 15617                           ;nullifyBadge_segDisplayRegister@badge stored from wreg
 15618  31F0  00F1               	movwf	nullifyBadge_segDisplayRegister@badge
 15619                           
 15620                           ;nullifyBadge.c: 72: else {
 15621                           ;nullifyBadge.c: 73: badge->registeredHw |= (1 << HW_SEG_DISPLAY);
 15622                           
 15623                           ;nullifyBadge.c: 71: }
 15624                           
 15625                           ;nullifyBadge.c: 70: return -1;
 15626                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 15627                           
 15628                           ;nullifyBadge.c: 69: if (badge->registeredHw & HW_SEG_DISPLAY) {
 15629  31F1  0871               	movf	nullifyBadge_segDisplayRegister@badge,w
 15630  31F2  3E11               	addlw	17
 15631  31F3  0086               	movwf	6
 15632  31F4  3001               	movlw	1	; select bank2/3
 15633  31F5  0087               	movwf	7
 15634  31F6  1401               	bsf	1,0
 15635                           
 15636                           ;nullifyBadge.c: 74: return 0;
 15637                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 15638  31F7  0008               	return
 15639  31F8                     __end_of_nullifyBadge_segDisplayRegister:	
 15640                           
 15641                           	psect	text11
 15642  340E                     __ptext11:	
 15643 ;; *************** function _scheduler_Init *****************
 15644 ;; Defined at:
 15645 ;;		line 27 in file "cooperative_scheduler.c"
 15646 ;; Parameters:    Size  Location     Type
 15647 ;;  scheduler       1    wreg     PTR struct t_scheduler
 15648 ;;		 -> schedulerInst(18), 
 15649 ;; Auto vars:     Size  Location     Type
 15650 ;;  scheduler       1    2[COMMON] PTR struct t_scheduler
 15651 ;;		 -> schedulerInst(18), 
 15652 ;;  k               1    3[COMMON] unsigned char 
 15653 ;; Return value:  Size  Location     Type
 15654 ;;                  1    wreg      void 
 15655 ;; Registers used:
 15656 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15657 ;; Tracked objects:
 15658 ;;		On entry : 0/0
 15659 ;;		On exit  : 0/0
 15660 ;;		Unchanged: 0/0
 15661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15663 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15664 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15665 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15666 ;;Total ram usage:        3 bytes
 15667 ;; Hardware stack levels used:    1
 15668 ;; Hardware stack levels required when called:    4
 15669 ;; This function calls:
 15670 ;;		Nothing
 15671 ;; This function is called by:
 15672 ;;		_main
 15673 ;; This function uses a non-reentrant model
 15674 ;;
 15675                           
 15676                           
 15677                           ;psect for function _scheduler_Init
 15678  340E                     _scheduler_Init:	
 15679                           
 15680                           ;incstack = 0
 15681                           ; Regs used in _scheduler_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 15682                           ;scheduler_Init@scheduler stored from wreg
 15683  340E  00F2               	movwf	scheduler_Init@scheduler
 15684                           
 15685                           ;cooperative_scheduler.c: 28: scheduler->taskEntryVector = 0x0;
 15686  340F  0872               	movf	scheduler_Init@scheduler,w
 15687  3410  3E10               	addlw	16
 15688  3411  0086               	movwf	6
 15689  3412  3001               	movlw	1	; select bank2/3
 15690  3413  0087               	movwf	7
 15691  3414  3000               	movlw	0
 15692  3415  3FC0               	movwi [0]fsr1
 15693  3416  3FC1               	movwi [1]fsr1
 15694                           
 15695                           ;cooperative_scheduler.c: 29: u8 k;
 15696                           ;cooperative_scheduler.c: 31: for (k = 0; k < 16; k++) {
 15697  3417  01F3               	clrf	scheduler_Init@k
 15698  3418                     L1:	
 15699  3418  3010               	movlw	16
 15700  3419  0273               	subwf	scheduler_Init@k,w
 15701  341A  1803               	btfsc	3,0
 15702  341B  0008               	return
 15703                           
 15704                           ;cooperative_scheduler.c: 32: scheduler->tasks[k] = (0);
 15705  341C  0873               	movf	scheduler_Init@k,w
 15706  341D  0772               	addwf	scheduler_Init@scheduler,w
 15707  341E  00F1               	movwf	??_scheduler_Init
 15708  341F  0871               	movf	??_scheduler_Init,w
 15709  3420  0086               	movwf	6
 15710  3421  3001               	movlw	1	; select bank2/3
 15711  3422  0087               	movwf	7
 15712  3423  0181               	clrf	1
 15713  3424  3001               	movlw	1
 15714  3425  00F1               	movwf	??_scheduler_Init
 15715  3426  0871               	movf	??_scheduler_Init,w
 15716  3427  07F3               	addwf	scheduler_Init@k,f
 15717  3428  2C18               	goto	L1
 15718  3429                     __end_of_scheduler_Init:	
 15719                           
 15720                           	psect	text12
 15721  2306                     __ptext12:	
 15722 ;; *************** function _schedulerExecute *****************
 15723 ;; Defined at:
 15724 ;;		line 77 in file "cooperative_scheduler.c"
 15725 ;; Parameters:    Size  Location     Type
 15726 ;;  scheduler       1    wreg     PTR struct t_scheduler
 15727 ;;		 -> schedulerInst(18), 
 15728 ;; Auto vars:     Size  Location     Type
 15729 ;;  scheduler       1    6[BANK1 ] PTR struct t_scheduler
 15730 ;;		 -> schedulerInst(18), 
 15731 ;;  tickDelta       2    4[BANK1 ] unsigned int 
 15732 ;;  taskLastSyst    2    2[BANK1 ] unsigned int 
 15733 ;;  currentSyste    2    0[BANK1 ] unsigned int 
 15734 ;;  k               1    7[BANK1 ] unsigned char 
 15735 ;; Return value:  Size  Location     Type
 15736 ;;                  1    wreg      void 
 15737 ;; Registers used:
 15738 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15739 ;; Tracked objects:
 15740 ;;		On entry : 0/0
 15741 ;;		On exit  : 0/0
 15742 ;;		Unchanged: 0/0
 15743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15745 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15746 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15747 ;;      Totals:         0       6       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15748 ;;Total ram usage:       14 bytes
 15749 ;; Hardware stack levels used:    1
 15750 ;; Hardware stack levels required when called:   14
 15751 ;; This function calls:
 15752 ;;		_TMR0_Read16bitTimer
 15753 ;;		_scheduler_TaskRun
 15754 ;; This function is called by:
 15755 ;;		_main
 15756 ;; This function uses a non-reentrant model
 15757 ;;
 15758                           
 15759                           
 15760                           ;psect for function _schedulerExecute
 15761  2306                     _schedulerExecute:	
 15762                           
 15763                           ;incstack = 0
 15764                           ; Regs used in _schedulerExecute: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15765                           ;schedulerExecute@scheduler stored from wreg
 15766  2306  0021               	movlb	1	; select bank1
 15767  2307  00DC               	movwf	schedulerExecute@scheduler^(0+128)
 15768                           
 15769                           ;cooperative_scheduler.c: 78: u16 currentSystemTick;
 15770                           ;cooperative_scheduler.c: 79: u16 taskLastSystemTick;
 15771                           ;cooperative_scheduler.c: 80: u16 tickDelta;
 15772                           ;cooperative_scheduler.c: 81: u8 k;
 15773                           ;cooperative_scheduler.c: 83: for (k = 0; k < 16; k++) {
 15774  2308  01DD               	clrf	schedulerExecute@k^(0+128)
 15775  2309                     L2:	
 15776  2309  3010               	movlw	16
 15777  230A  025D               	subwf	schedulerExecute@k^(0+128),w
 15778  230B  1803               	btfsc	3,0
 15779  230C  0008               	return
 15780                           
 15781                           ;cooperative_scheduler.c: 86: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 15782  230D  085C               	movf	schedulerExecute@scheduler^(0+128),w
 15783  230E  3E10               	addlw	16
 15784  230F  0086               	movwf	6
 15785  2310  3001               	movlw	1	; select bank2/3
 15786  2311  0087               	movwf	7
 15787  2312  3F40               	moviw [0]fsr1
 15788  2313  0020               	movlb	0	; select bank0
 15789  2314  00E8               	movwf	??_schedulerExecute
 15790  2315  3F41               	moviw [1]fsr1
 15791  2316  00E9               	movwf	??_schedulerExecute+1
 15792  2317  3001               	movlw	1
 15793  2318  00EA               	movwf	??_schedulerExecute+2
 15794  2319  3000               	movlw	0
 15795  231A  00EB               	movwf	??_schedulerExecute+3
 15796  231B  0021               	movlb	1	; select bank1
 15797  231C  0A5D               	incf	schedulerExecute@k^(0+128),w
 15798  231D  0020               	movlb	0	; select bank0
 15799  231E  2B21               	goto	u6574
 15800  231F                     u6575:	
 15801  231F  35EA               	lslf	??_schedulerExecute+2,f
 15802  2320  0DEB               	rlf	??_schedulerExecute+3,f
 15803  2321                     u6574:	
 15804  2321  0B89               	decfsz	9,f
 15805  2322  2B1F               	goto	u6575
 15806  2323  0868               	movf	??_schedulerExecute,w
 15807  2324  056A               	andwf	??_schedulerExecute+2,w
 15808  2325  00EC               	movwf	??_schedulerExecute+4
 15809  2326  0869               	movf	??_schedulerExecute+1,w
 15810  2327  056B               	andwf	??_schedulerExecute+3,w
 15811  2328  00ED               	movwf	??_schedulerExecute+5
 15812  2329  086C               	movf	??_schedulerExecute+4,w
 15813  232A  046D               	iorwf	??_schedulerExecute+5,w
 15814  232B  1903               	btfsc	3,2
 15815  232C  2B83               	goto	l10545
 15816                           
 15817                           ;cooperative_scheduler.c: 88: }
 15818                           ;cooperative_scheduler.c: 90: currentSystemTick = TMR0_Read16bitTimer();
 15819                           
 15820                           ;cooperative_scheduler.c: 87: continue;
 15821  232D  31B4  2429  31A3   	fcall	_TMR0_Read16bitTimer
 15822  2330  0872               	movf	?_TMR0_Read16bitTimer+1,w
 15823  2331  0021               	movlb	1	; select bank1
 15824  2332  00D7               	movwf	(schedulerExecute@currentSystemTick+1)^(0+128)
 15825  2333  0871               	movf	?_TMR0_Read16bitTimer,w
 15826  2334  00D6               	movwf	schedulerExecute@currentSystemTick^(0+128)
 15827                           
 15828                           ;cooperative_scheduler.c: 91: taskLastSystemTick = scheduler->tasks[k]->systemTickLastEx
      +                          ecuted;
 15829  2335  085D               	movf	schedulerExecute@k^(0+128),w
 15830  2336  075C               	addwf	schedulerExecute@scheduler^(0+128),w
 15831  2337  0020               	movlb	0	; select bank0
 15832  2338  00E8               	movwf	??_schedulerExecute
 15833  2339  0868               	movf	??_schedulerExecute,w
 15834  233A  0086               	movwf	6
 15835  233B  3001               	movlw	1	; select bank2/3
 15836  233C  0087               	movwf	7
 15837  233D  0801               	movf	1,w
 15838  233E  0086               	movwf	6
 15839  233F  3001               	movlw	1	; select bank2/3
 15840  2340  0087               	movwf	7
 15841  2341  3F40               	moviw [0]fsr1
 15842  2342  0021               	movlb	1	; select bank1
 15843  2343  00D8               	movwf	schedulerExecute@taskLastSystemTick^(0+128)
 15844  2344  3F41               	moviw [1]fsr1
 15845  2345  00D9               	movwf	(schedulerExecute@taskLastSystemTick+1)^(0+128)
 15846                           
 15847                           ;cooperative_scheduler.c: 99: tickDelta = currentSystemTick - taskLastSystemTick;
 15848  2346  0958               	comf	schedulerExecute@taskLastSystemTick^(0+128),w
 15849  2347  0020               	movlb	0	; select bank0
 15850  2348  00E8               	movwf	??_schedulerExecute
 15851  2349  0021               	movlb	1	; select bank1
 15852  234A  0959               	comf	(schedulerExecute@taskLastSystemTick+1)^(0+128),w
 15853  234B  0020               	movlb	0	; select bank0
 15854  234C  00E9               	movwf	??_schedulerExecute+1
 15855  234D  0AE8               	incf	??_schedulerExecute,f
 15856  234E  1903               	skipnz
 15857  234F  0AE9               	incf	??_schedulerExecute+1,f
 15858  2350  0021               	movlb	1	; select bank1
 15859  2351  0856               	movf	schedulerExecute@currentSystemTick^(0+128),w
 15860  2352  0020               	movlb	0	; select bank0
 15861  2353  0768               	addwf	??_schedulerExecute,w
 15862  2354  0021               	movlb	1	; select bank1
 15863  2355  00DA               	movwf	schedulerExecute@tickDelta^(0+128)
 15864  2356  0857               	movf	(schedulerExecute@currentSystemTick+1)^(0+128),w
 15865  2357  0020               	movlb	0	; select bank0
 15866  2358  3D69               	addwfc	??_schedulerExecute+1,w
 15867  2359  0021               	movlb	1	; select bank1
 15868  235A  00DB               	movwf	(schedulerExecute@tickDelta+1)^(0+128)
 15869                           
 15870                           ;cooperative_scheduler.c: 103: if (tickDelta >= scheduler->tasks[k]->taskInterval) {
 15871  235B  085D               	movf	schedulerExecute@k^(0+128),w
 15872  235C  075C               	addwf	schedulerExecute@scheduler^(0+128),w
 15873  235D  0020               	movlb	0	; select bank0
 15874  235E  00E8               	movwf	??_schedulerExecute
 15875  235F  0868               	movf	??_schedulerExecute,w
 15876  2360  0086               	movwf	6
 15877  2361  3001               	movlw	1	; select bank2/3
 15878  2362  0087               	movwf	7
 15879  2363  0801               	movf	1,w
 15880  2364  3E0A               	addlw	10
 15881  2365  0086               	movwf	6
 15882  2366  3001               	movlw	1	; select bank2/3
 15883  2367  0087               	movwf	7
 15884  2368  3F40               	moviw [0]fsr1
 15885  2369  00E9               	movwf	??_schedulerExecute+1
 15886  236A  3F41               	moviw [1]fsr1
 15887  236B  00EA               	movwf	??_schedulerExecute+2
 15888  236C  086A               	movf	??_schedulerExecute+2,w
 15889  236D  0021               	movlb	1	; select bank1
 15890  236E  025B               	subwf	(schedulerExecute@tickDelta+1)^(0+128),w
 15891  236F  1D03               	skipz
 15892  2370  2B75               	goto	u6595
 15893  2371  0020               	movlb	0	; select bank0
 15894  2372  0869               	movf	??_schedulerExecute+1,w
 15895  2373  0021               	movlb	1	; select bank1
 15896  2374  025A               	subwf	schedulerExecute@tickDelta^(0+128),w
 15897  2375                     u6595:	
 15898  2375  1C03               	skipc
 15899  2376  2B83               	goto	l10545
 15900                           
 15901                           ;cooperative_scheduler.c: 104: scheduler_TaskRun(scheduler->tasks[k]);
 15902  2377  085D               	movf	schedulerExecute@k^(0+128),w
 15903  2378  075C               	addwf	schedulerExecute@scheduler^(0+128),w
 15904  2379  0020               	movlb	0	; select bank0
 15905  237A  00E8               	movwf	??_schedulerExecute
 15906  237B  0868               	movf	??_schedulerExecute,w
 15907  237C  0086               	movwf	6
 15908  237D  3001               	movlw	1	; select bank2/3
 15909  237E  0087               	movwf	7
 15910  237F  0801               	movf	1,w
 15911  2380  31B4  24C1  31A3   	fcall	_scheduler_TaskRun
 15912  2383                     l10545:	
 15913  2383  3001               	movlw	1
 15914  2384  0020               	movlb	0	; select bank0
 15915  2385  00E8               	movwf	??_schedulerExecute
 15916  2386  0868               	movf	??_schedulerExecute,w
 15917  2387  0021               	movlb	1	; select bank1
 15918  2388  07DD               	addwf	schedulerExecute@k^(0+128),f
 15919  2389  2B09               	goto	L2
 15920  238A                     __end_of_schedulerExecute:	
 15921                           
 15922                           	psect	text13
 15923  34C1                     __ptext13:	
 15924 ;; *************** function _scheduler_TaskRun *****************
 15925 ;; Defined at:
 15926 ;;		line 20 in file "cooperative_scheduler.c"
 15927 ;; Parameters:    Size  Location     Type
 15928 ;;  task            1    wreg     PTR struct t_schedulerTa
 15929 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 15930 ;;		 -> menu_task(13), flashy_task(13), NULL(0), 
 15931 ;; Auto vars:     Size  Location     Type
 15932 ;;  task            1   71[BANK0 ] PTR struct t_schedulerTa
 15933 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 15934 ;;		 -> menu_task(13), flashy_task(13), NULL(0), 
 15935 ;; Return value:  Size  Location     Type
 15936 ;;                  1    wreg      void 
 15937 ;; Registers used:
 15938 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15939 ;; Tracked objects:
 15940 ;;		On entry : 0/0
 15941 ;;		On exit  : 0/0
 15942 ;;		Unchanged: 0/0
 15943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15947 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15948 ;;Total ram usage:        1 bytes
 15949 ;; Hardware stack levels used:    1
 15950 ;; Hardware stack levels required when called:   13
 15951 ;; This function calls:
 15952 ;;		Absolute function
 15953 ;;		_TMR0_Read16bitTimer
 15954 ;;		_flashy_Main
 15955 ;;		_locked_Main
 15956 ;;		_matrix_Main
 15957 ;;		_menu_Main
 15958 ;;		_secret_Main
 15959 ;;		_slot_Main
 15960 ;; This function is called by:
 15961 ;;		_schedulerExecute
 15962 ;; This function uses a non-reentrant model
 15963 ;;
 15964                           
 15965                           
 15966                           ;psect for function _scheduler_TaskRun
 15967  34C1                     _scheduler_TaskRun:	
 15968                           
 15969                           ;incstack = 0
 15970                           ; Regs used in _scheduler_TaskRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15971                           ;scheduler_TaskRun@task stored from wreg
 15972  34C1  0020               	movlb	0	; select bank0
 15973  34C2  00E7               	movwf	scheduler_TaskRun@task
 15974                           
 15975                           ;cooperative_scheduler.c: 21: task->taskExecuteCallback (task->taskData);
 15976  34C3  0867               	movf	scheduler_TaskRun@task,w
 15977  34C4  3E02               	addlw	2
 15978  34C5  0086               	movwf	6
 15979  34C6  3001               	movlw	1	; select bank2/3
 15980  34C7  0087               	movwf	7
 15981  34C8  3F40               	moviw [0]fsr1
 15982  34C9  00D2               	movwf	matrix_Main@taskData
 15983  34CA  3F41               	moviw [1]fsr1
 15984  34CB  00D3               	movwf	matrix_Main@taskData+1
 15985  34CC  0867               	movf	scheduler_TaskRun@task,w
 15986  34CD  3E08               	addlw	8
 15987  34CE  0086               	movwf	6
 15988  34CF  3001               	movlw	1	; select bank2/3
 15989  34D0  0087               	movwf	7
 15990  34D1  3F41               	moviw [1]fsr1
 15991  34D2  008A               	movwf	10
 15992  34D3  3F40               	moviw [0]fsr1
 15993  34D4  000A               	callw
 15994  34D5  31B4               	pagesel	$
 15995                           
 15996                           ;cooperative_scheduler.c: 22: task->systemTickLastExecuted = TMR0_Read16bitTimer();
 15997  34D6  31B4  2429         	fcall	_TMR0_Read16bitTimer
 15998  34D8  0020               	movlb	0	; select bank0
 15999  34D9  0867               	movf	scheduler_TaskRun@task,w
 16000  34DA  0086               	movwf	6
 16001  34DB  3001               	movlw	1	; select bank2/3
 16002  34DC  0087               	movwf	7
 16003  34DD  0871               	movf	?_TMR0_Read16bitTimer,w
 16004  34DE  3FC0               	movwi [0]fsr1
 16005  34DF  0872               	movf	?_TMR0_Read16bitTimer+1,w
 16006  34E0  3FC1               	movwi [1]fsr1
 16007  34E1  0008               	return
 16008  34E2                     __end_of_scheduler_TaskRun:	
 16009                           
 16010                           	psect	text14
 16011  10CB                     __ptext14:	
 16012 ;; *************** function _matrix_Main *****************
 16013 ;; Defined at:
 16014 ;;		line 149 in file "matrix_task.c"
 16015 ;; Parameters:    Size  Location     Type
 16016 ;;  taskData        2   50[BANK0 ] PTR void 
 16017 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 16018 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 16019 ;; Auto vars:     Size  Location     Type
 16020 ;;  data            2   58[BANK0 ] PTR struct t_matrix_task
 16021 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 16022 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 16023 ;;  holdvalue       1   57[BANK0 ] unsigned char 
 16024 ;;  buttonPresse    1   56[BANK0 ] unsigned char 
 16025 ;; Return value:  Size  Location     Type
 16026 ;;                  1    wreg      void 
 16027 ;; Registers used:
 16028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16029 ;; Tracked objects:
 16030 ;;		On entry : 0/0
 16031 ;;		On exit  : 0/0
 16032 ;;		Unchanged: 0/0
 16033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16034 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16035 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16036 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16037 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16038 ;;Total ram usage:       10 bytes
 16039 ;; Hardware stack levels used:    1
 16040 ;; Hardware stack levels required when called:   11
 16041 ;; This function calls:
 16042 ;;		_led_Parody
 16043 ;;		_led_curtain
 16044 ;;		_matrix_display_option
 16045 ;;		_matrix_secret_check
 16046 ;;		_nullifyBadge_buttonsGet
 16047 ;; This function is called by:
 16048 ;;		_main
 16049 ;;		_scheduler_TaskRun
 16050 ;; This function uses a non-reentrant model
 16051 ;;
 16052                           
 16053                           
 16054                           ;psect for function _matrix_Main
 16055  10CB                     _matrix_Main:	
 16056                           
 16057                           ;matrix_task.c: 150: struct t_matrix_taskData *data = (struct t_matrix_taskData *) taskD
      +                          ata ;
 16058                           
 16059                           ;incstack = 0
 16060                           ; Regs used in _matrix_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16061  10CB  0020               	movlb	0	; select bank0
 16062  10CC  0853               	movf	matrix_Main@taskData+1,w
 16063  10CD  00DB               	movwf	matrix_Main@data+1
 16064  10CE  0852               	movf	matrix_Main@taskData,w
 16065  10CF  00DA               	movwf	matrix_Main@data
 16066                           
 16067                           ;matrix_task.c: 151: u8 buttonPressed = 0 ;
 16068  10D0  01D8               	clrf	matrix_Main@buttonPressed
 16069                           
 16070                           ;matrix_task.c: 152: u8 holdvalue = 50;
 16071  10D1  3032               	movlw	50
 16072  10D2  00D4               	movwf	??_matrix_Main
 16073  10D3  0854               	movf	??_matrix_Main,w
 16074  10D4  00D9               	movwf	matrix_Main@holdvalue
 16075                           
 16076                           ;matrix_task.c: 154: if ( currentTask != MATRIX_TASK ){
 16077  10D5  3004               	movlw	4
 16078  10D6  0021               	movlb	1	; select bank1
 16079  10D7  063A               	xorwf	_currentTask^(0+128),w
 16080  10D8  043B               	iorwf	(_currentTask+1)^(0+128),w
 16081  10D9  1903               	btfsc	3,2
 16082  10DA  2901               	goto	l9943
 16083                           
 16084                           ;matrix_task.c: 155: data->holdCountA = 1;
 16085  10DB  0020               	movlb	0	; select bank0
 16086  10DC  085A               	movf	matrix_Main@data,w
 16087  10DD  0086               	movwf	6
 16088  10DE  085B               	movf	matrix_Main@data+1,w
 16089  10DF  0087               	movwf	7
 16090  10E0  3149               	addfsr 1,9
 16091  10E1  3001               	movlw	1
 16092  10E2  3FC0               	movwi [0]fsr1
 16093  10E3  3000               	movlw	0
 16094  10E4  3FC1               	movwi [1]fsr1
 16095                           
 16096                           ;matrix_task.c: 156: data->holdCountB = 1;
 16097  10E5  085A               	movf	matrix_Main@data,w
 16098  10E6  0086               	movwf	6
 16099  10E7  085B               	movf	matrix_Main@data+1,w
 16100  10E8  0087               	movwf	7
 16101  10E9  314B               	addfsr 1,11
 16102  10EA  3001               	movlw	1
 16103  10EB  3FC0               	movwi [0]fsr1
 16104  10EC  3000               	movlw	0
 16105  10ED  3FC1               	movwi [1]fsr1
 16106                           
 16107                           ;matrix_task.c: 157: data->holdCountX = 1;
 16108  10EE  085A               	movf	matrix_Main@data,w
 16109  10EF  0086               	movwf	6
 16110  10F0  085B               	movf	matrix_Main@data+1,w
 16111  10F1  0087               	movwf	7
 16112  10F2  314D               	addfsr 1,13
 16113  10F3  3001               	movlw	1
 16114  10F4  3FC0               	movwi [0]fsr1
 16115  10F5  3000               	movlw	0
 16116  10F6  3FC1               	movwi [1]fsr1
 16117                           
 16118                           ;matrix_task.c: 158: data->holdCountY = 1;
 16119  10F7  085A               	movf	matrix_Main@data,w
 16120  10F8  0086               	movwf	6
 16121  10F9  085B               	movf	matrix_Main@data+1,w
 16122  10FA  0087               	movwf	7
 16123  10FB  314F               	addfsr 1,15
 16124  10FC  3001               	movlw	1
 16125  10FD  3FC0               	movwi [0]fsr1
 16126  10FE  3000               	movlw	0
 16127  10FF  3FC1               	movwi [1]fsr1
 16128                           
 16129                           ;matrix_task.c: 159: return;
 16130  1100  0008               	return
 16131  1101                     l9943:	
 16132                           
 16133                           ;matrix_task.c: 160: }
 16134                           ;matrix_task.c: 164: if (data->martix_state == STILL_IN_MATRIX){
 16135  1101  0020               	movlb	0	; select bank0
 16136  1102  085A               	movf	matrix_Main@data,w
 16137  1103  0086               	movwf	6
 16138  1104  085B               	movf	matrix_Main@data+1,w
 16139  1105  0087               	movwf	7
 16140  1106  3141               	addfsr 1,1
 16141  1107  0301               	decf	1,w
 16142  1108  1D03               	btfss	3,2
 16143  1109  2939               	goto	l9955
 16144                           
 16145                           ;matrix_task.c: 165: if(data->delayTickCount == 0){
 16146  110A  085A               	movf	matrix_Main@data,w
 16147  110B  0086               	movwf	6
 16148  110C  085B               	movf	matrix_Main@data+1,w
 16149  110D  0087               	movwf	7
 16150  110E  3143               	addfsr 1,3
 16151  110F  0016               	moviw fsr1++
 16152  1110  0401               	iorwf	1,w
 16153  1111  1D03               	btfss	3,2
 16154  1112  292E               	goto	l9953
 16155                           
 16156                           ;matrix_task.c: 166: led_Parody(matrix_leds_idx);
 16157  1113  0021               	movlb	1	; select bank1
 16158  1114  0821               	movf	(_matrix_leds_idx+1)^(0+128),w
 16159  1115  0020               	movlb	0	; select bank0
 16160  1116  00B1               	movwf	led_Parody@count+1
 16161  1117  0021               	movlb	1	; select bank1
 16162  1118  0820               	movf	_matrix_leds_idx^(0+128),w
 16163  1119  0020               	movlb	0	; select bank0
 16164  111A  00B0               	movwf	led_Parody@count
 16165  111B  31AE  26BA  3190   	fcall	_led_Parody
 16166                           
 16167                           ;matrix_task.c: 167: matrix_leds_idx += 1;
 16168  111E  3001               	movlw	1
 16169  111F  0021               	movlb	1	; select bank1
 16170  1120  07A0               	addwf	_matrix_leds_idx^(0+128),f
 16171  1121  3000               	movlw	0
 16172  1122  3DA1               	addwfc	(_matrix_leds_idx+1)^(0+128),f
 16173                           
 16174                           ;matrix_task.c: 168: data->delayTickCount = 10;
 16175  1123  0020               	movlb	0	; select bank0
 16176  1124  085A               	movf	matrix_Main@data,w
 16177  1125  0086               	movwf	6
 16178  1126  085B               	movf	matrix_Main@data+1,w
 16179  1127  0087               	movwf	7
 16180  1128  3143               	addfsr 1,3
 16181  1129  300A               	movlw	10
 16182  112A  3FC0               	movwi [0]fsr1
 16183  112B  3000               	movlw	0
 16184  112C  3FC1               	movwi [1]fsr1
 16185                           
 16186                           ;matrix_task.c: 169: }
 16187  112D  2939               	goto	l9955
 16188  112E                     l9953:	
 16189                           
 16190                           ;matrix_task.c: 170: else {
 16191                           ;matrix_task.c: 171: data->delayTickCount -= 1;
 16192  112E  085A               	movf	matrix_Main@data,w
 16193  112F  0086               	movwf	6
 16194  1130  085B               	movf	matrix_Main@data+1,w
 16195  1131  0087               	movwf	7
 16196  1132  3143               	addfsr 1,3
 16197  1133  3001               	movlw	1
 16198  1134  0281               	subwf	1,f
 16199  1135  3141               	addfsr 1,1
 16200  1136  3000               	movlw	0
 16201  1137  3B81               	subwfb	1,f
 16202  1138  317F               	addfsr 1,-1
 16203  1139                     l9955:	
 16204                           
 16205                           ;matrix_task.c: 172: }
 16206                           ;matrix_task.c: 173: }
 16207                           ;matrix_task.c: 177: buttonPressed = nullifyBadge_buttonsGet();
 16208  1139  31B5  25FD  3190   	fcall	_nullifyBadge_buttonsGet
 16209  113C  0020               	movlb	0	; select bank0
 16210  113D  00D4               	movwf	??_matrix_Main
 16211  113E  0854               	movf	??_matrix_Main,w
 16212  113F  00D8               	movwf	matrix_Main@buttonPressed
 16213                           
 16214                           ;matrix_task.c: 180: switch (buttonPressed) {
 16215  1140  2F93               	goto	l10289
 16216  1141                     l9957:	
 16217                           ;matrix_task.c: 181: case 1:
 16218                           
 16219                           
 16220                           ;matrix_task.c: 183: if (data->holdCountA == holdvalue){
 16221  1141  085A               	movf	matrix_Main@data,w
 16222  1142  0086               	movwf	6
 16223  1143  085B               	movf	matrix_Main@data+1,w
 16224  1144  0087               	movwf	7
 16225  1145  3149               	addfsr 1,9
 16226  1146  3F40               	moviw [0]fsr1
 16227  1147  00D4               	movwf	??_matrix_Main
 16228  1148  3F41               	moviw [1]fsr1
 16229  1149  00D5               	movwf	??_matrix_Main+1
 16230  114A  0859               	movf	matrix_Main@holdvalue,w
 16231  114B  00D6               	movwf	??_matrix_Main+2
 16232  114C  01D7               	clrf	??_matrix_Main+3
 16233  114D  0855               	movf	??_matrix_Main+1,w
 16234  114E  0657               	xorwf	??_matrix_Main+3,w
 16235  114F  1D03               	skipz
 16236  1150  2953               	goto	u6365
 16237  1151  0854               	movf	??_matrix_Main,w
 16238  1152  0656               	xorwf	??_matrix_Main+2,w
 16239  1153                     u6365:	
 16240  1153  1D03               	skipz
 16241  1154  296C               	goto	l9963
 16242                           
 16243                           ;matrix_task.c: 184: matrix_found = matrix_secret_check(data, buttonPressed);
 16244  1155  085B               	movf	matrix_Main@data+1,w
 16245  1156  00F8               	movwf	matrix_secret_check@data+1
 16246  1157  085A               	movf	matrix_Main@data,w
 16247  1158  00F7               	movwf	matrix_secret_check@data
 16248  1159  0858               	movf	matrix_Main@buttonPressed,w
 16249  115A  00D4               	movwf	??_matrix_Main
 16250  115B  0854               	movf	??_matrix_Main,w
 16251  115C  00F9               	movwf	matrix_secret_check@buttonPressed
 16252  115D  31A4  24CD  3190   	fcall	_matrix_secret_check
 16253  1160  0020               	movlb	0	; select bank0
 16254  1161  00D5               	movwf	??_matrix_Main+1
 16255  1162  0855               	movf	??_matrix_Main+1,w
 16256  1163  0021               	movlb	1	; select bank1
 16257  1164  00C2               	movwf	_matrix_found^(0+128)
 16258                           
 16259                           ;matrix_task.c: 185: data->display_state = MATRIX_A;
 16260  1165  0020               	movlb	0	; select bank0
 16261  1166  085A               	movf	matrix_Main@data,w
 16262  1167  0086               	movwf	6
 16263  1168  085B               	movf	matrix_Main@data+1,w
 16264  1169  0087               	movwf	7
 16265  116A  3142               	addfsr 1,2
 16266  116B  0181               	clrf	1
 16267  116C                     l9963:	
 16268                           
 16269                           ;matrix_task.c: 186: }
 16270                           ;matrix_task.c: 187: data->holdCountA += 1;
 16271  116C  085A               	movf	matrix_Main@data,w
 16272  116D  0086               	movwf	6
 16273  116E  085B               	movf	matrix_Main@data+1,w
 16274  116F  0087               	movwf	7
 16275  1170  3149               	addfsr 1,9
 16276  1171  3001               	movlw	1
 16277  1172  0781               	addwf	1,f
 16278  1173  3141               	addfsr 1,1
 16279  1174  1803               	skipnc
 16280  1175  0A81               	incf	1,f
 16281                           
 16282                           ;matrix_task.c: 188: data->holdCountB = 0;
 16283  1176  085A               	movf	matrix_Main@data,w
 16284  1177  0086               	movwf	6
 16285  1178  085B               	movf	matrix_Main@data+1,w
 16286  1179  0087               	movwf	7
 16287  117A  314B               	addfsr 1,11
 16288  117B  3000               	movlw	0
 16289  117C  3FC0               	movwi [0]fsr1
 16290  117D  3FC1               	movwi [1]fsr1
 16291                           
 16292                           ;matrix_task.c: 189: data->holdCountX = 0;
 16293  117E  085A               	movf	matrix_Main@data,w
 16294  117F  0086               	movwf	6
 16295  1180  085B               	movf	matrix_Main@data+1,w
 16296  1181  0087               	movwf	7
 16297  1182  314D               	addfsr 1,13
 16298  1183  3000               	movlw	0
 16299  1184  3FC0               	movwi [0]fsr1
 16300  1185  3FC1               	movwi [1]fsr1
 16301                           
 16302                           ;matrix_task.c: 190: data->holdCountY = 0;
 16303  1186  085A               	movf	matrix_Main@data,w
 16304  1187  0086               	movwf	6
 16305  1188  085B               	movf	matrix_Main@data+1,w
 16306  1189  0087               	movwf	7
 16307  118A  314F               	addfsr 1,15
 16308  118B  3000               	movlw	0
 16309  118C  3FC0               	movwi [0]fsr1
 16310  118D  3FC1               	movwi [1]fsr1
 16311                           
 16312                           ;matrix_task.c: 191: data->holdCountXY = 0;
 16313  118E  085A               	movf	matrix_Main@data,w
 16314  118F  0086               	movwf	6
 16315  1190  085B               	movf	matrix_Main@data+1,w
 16316  1191  0087               	movwf	7
 16317  1192  3151               	addfsr 1,17
 16318  1193  3000               	movlw	0
 16319  1194  3FC0               	movwi [0]fsr1
 16320  1195  3FC1               	movwi [1]fsr1
 16321                           
 16322                           ;matrix_task.c: 192: data->holdCountAY = 0;
 16323  1196  085A               	movf	matrix_Main@data,w
 16324  1197  0086               	movwf	6
 16325  1198  085B               	movf	matrix_Main@data+1,w
 16326  1199  0087               	movwf	7
 16327  119A  3153               	addfsr 1,19
 16328  119B  3000               	movlw	0
 16329  119C  3FC0               	movwi [0]fsr1
 16330  119D  3FC1               	movwi [1]fsr1
 16331                           
 16332                           ;matrix_task.c: 193: data->holdCountAX = 0;
 16333  119E  085A               	movf	matrix_Main@data,w
 16334  119F  0086               	movwf	6
 16335  11A0  085B               	movf	matrix_Main@data+1,w
 16336  11A1  0087               	movwf	7
 16337  11A2  3155               	addfsr 1,21
 16338  11A3  3000               	movlw	0
 16339  11A4  3FC0               	movwi [0]fsr1
 16340  11A5  3FC1               	movwi [1]fsr1
 16341                           
 16342                           ;matrix_task.c: 194: data->holdCountBX = 0;
 16343  11A6  085A               	movf	matrix_Main@data,w
 16344  11A7  0086               	movwf	6
 16345  11A8  085B               	movf	matrix_Main@data+1,w
 16346  11A9  0087               	movwf	7
 16347  11AA  3157               	addfsr 1,23
 16348  11AB  3000               	movlw	0
 16349  11AC  3FC0               	movwi [0]fsr1
 16350  11AD  3FC1               	movwi [1]fsr1
 16351                           
 16352                           ;matrix_task.c: 195: data->holdCountBY = 0;
 16353  11AE  085A               	movf	matrix_Main@data,w
 16354  11AF  0086               	movwf	6
 16355  11B0  085B               	movf	matrix_Main@data+1,w
 16356  11B1  0087               	movwf	7
 16357  11B2  3159               	addfsr 1,25
 16358  11B3  3000               	movlw	0
 16359  11B4  3FC0               	movwi [0]fsr1
 16360  11B5  3FC1               	movwi [1]fsr1
 16361                           
 16362                           ;matrix_task.c: 196: data->holdCountBA = 0;
 16363  11B6  085A               	movf	matrix_Main@data,w
 16364  11B7  0086               	movwf	6
 16365  11B8  085B               	movf	matrix_Main@data+1,w
 16366  11B9  0087               	movwf	7
 16367  11BA  315B               	addfsr 1,27
 16368  11BB  3000               	movlw	0
 16369  11BC  3FC0               	movwi [0]fsr1
 16370  11BD  3FC1               	movwi [1]fsr1
 16371                           
 16372                           ;matrix_task.c: 197: data->noholdCount = 0;
 16373  11BE  085A               	movf	matrix_Main@data,w
 16374  11BF  0086               	movwf	6
 16375  11C0  085B               	movf	matrix_Main@data+1,w
 16376  11C1  0087               	movwf	7
 16377  11C2  315D               	addfsr 1,29
 16378  11C3  3000               	movlw	0
 16379  11C4  3FC0               	movwi [0]fsr1
 16380  11C5  3FC1               	movwi [1]fsr1
 16381                           
 16382                           ;matrix_task.c: 198: data->displayTickdown = 300;
 16383  11C6  085A               	movf	matrix_Main@data,w
 16384  11C7  0086               	movwf	6
 16385  11C8  085B               	movf	matrix_Main@data+1,w
 16386  11C9  0087               	movwf	7
 16387  11CA  3147               	addfsr 1,7
 16388  11CB  302C               	movlw	44
 16389  11CC  3FC0               	movwi [0]fsr1
 16390  11CD  3001               	movlw	1
 16391  11CE  3FC1               	movwi [1]fsr1
 16392                           
 16393                           ;matrix_task.c: 199: break;
 16394  11CF  2FB4               	goto	l10291
 16395  11D0                     l9987:	
 16396                           ;matrix_task.c: 200: case 2:
 16397                           
 16398                           
 16399                           ;matrix_task.c: 202: if (data->holdCountB == holdvalue){
 16400  11D0  085A               	movf	matrix_Main@data,w
 16401  11D1  0086               	movwf	6
 16402  11D2  085B               	movf	matrix_Main@data+1,w
 16403  11D3  0087               	movwf	7
 16404  11D4  314B               	addfsr 1,11
 16405  11D5  3F40               	moviw [0]fsr1
 16406  11D6  00D4               	movwf	??_matrix_Main
 16407  11D7  3F41               	moviw [1]fsr1
 16408  11D8  00D5               	movwf	??_matrix_Main+1
 16409  11D9  0859               	movf	matrix_Main@holdvalue,w
 16410  11DA  00D6               	movwf	??_matrix_Main+2
 16411  11DB  01D7               	clrf	??_matrix_Main+3
 16412  11DC  0855               	movf	??_matrix_Main+1,w
 16413  11DD  0657               	xorwf	??_matrix_Main+3,w
 16414  11DE  1D03               	skipz
 16415  11DF  29E2               	goto	u6375
 16416  11E0  0854               	movf	??_matrix_Main,w
 16417  11E1  0656               	xorwf	??_matrix_Main+2,w
 16418  11E2                     u6375:	
 16419  11E2  1D03               	skipz
 16420  11E3  2A01               	goto	l9993
 16421                           
 16422                           ;matrix_task.c: 203: matrix_found = matrix_secret_check(data, buttonPressed);
 16423  11E4  085B               	movf	matrix_Main@data+1,w
 16424  11E5  00F8               	movwf	matrix_secret_check@data+1
 16425  11E6  085A               	movf	matrix_Main@data,w
 16426  11E7  00F7               	movwf	matrix_secret_check@data
 16427  11E8  0858               	movf	matrix_Main@buttonPressed,w
 16428  11E9  00D4               	movwf	??_matrix_Main
 16429  11EA  0854               	movf	??_matrix_Main,w
 16430  11EB  00F9               	movwf	matrix_secret_check@buttonPressed
 16431  11EC  31A4  24CD  3190   	fcall	_matrix_secret_check
 16432  11EF  0020               	movlb	0	; select bank0
 16433  11F0  00D5               	movwf	??_matrix_Main+1
 16434  11F1  0855               	movf	??_matrix_Main+1,w
 16435  11F2  0021               	movlb	1	; select bank1
 16436  11F3  00C2               	movwf	_matrix_found^(0+128)
 16437                           
 16438                           ;matrix_task.c: 204: data->display_state = MATRIX_B;
 16439  11F4  0020               	movlb	0	; select bank0
 16440  11F5  085A               	movf	matrix_Main@data,w
 16441  11F6  3E02               	addlw	2
 16442  11F7  00D4               	movwf	??_matrix_Main
 16443  11F8  3000               	movlw	0
 16444  11F9  3D5B               	addwfc	matrix_Main@data+1,w
 16445  11FA  00D5               	movwf	??_matrix_Main+1
 16446  11FB  0854               	movf	??_matrix_Main,w
 16447  11FC  0086               	movwf	6
 16448  11FD  0855               	movf	??_matrix_Main+1,w
 16449  11FE  0087               	movwf	7
 16450  11FF  3002               	movlw	2
 16451  1200  0081               	movwf	1
 16452  1201                     l9993:	
 16453                           
 16454                           ;matrix_task.c: 205: }
 16455                           ;matrix_task.c: 206: data->holdCountA = 0;
 16456  1201  085A               	movf	matrix_Main@data,w
 16457  1202  0086               	movwf	6
 16458  1203  085B               	movf	matrix_Main@data+1,w
 16459  1204  0087               	movwf	7
 16460  1205  3149               	addfsr 1,9
 16461  1206  3000               	movlw	0
 16462  1207  3FC0               	movwi [0]fsr1
 16463  1208  3FC1               	movwi [1]fsr1
 16464                           
 16465                           ;matrix_task.c: 207: data->holdCountB += 1;
 16466  1209  085A               	movf	matrix_Main@data,w
 16467  120A  0086               	movwf	6
 16468  120B  085B               	movf	matrix_Main@data+1,w
 16469  120C  0087               	movwf	7
 16470  120D  314B               	addfsr 1,11
 16471  120E  3001               	movlw	1
 16472  120F  0781               	addwf	1,f
 16473  1210  3141               	addfsr 1,1
 16474  1211  1803               	skipnc
 16475  1212  0A81               	incf	1,f
 16476                           
 16477                           ;matrix_task.c: 208: data->holdCountX = 0;
 16478  1213  085A               	movf	matrix_Main@data,w
 16479  1214  0086               	movwf	6
 16480  1215  085B               	movf	matrix_Main@data+1,w
 16481  1216  0087               	movwf	7
 16482  1217  314D               	addfsr 1,13
 16483  1218  3000               	movlw	0
 16484  1219  3FC0               	movwi [0]fsr1
 16485  121A  3FC1               	movwi [1]fsr1
 16486                           
 16487                           ;matrix_task.c: 209: data->holdCountY = 0;
 16488  121B  085A               	movf	matrix_Main@data,w
 16489  121C  0086               	movwf	6
 16490  121D  085B               	movf	matrix_Main@data+1,w
 16491  121E  0087               	movwf	7
 16492  121F  314F               	addfsr 1,15
 16493  1220  3000               	movlw	0
 16494  1221  3FC0               	movwi [0]fsr1
 16495  1222  3FC1               	movwi [1]fsr1
 16496                           
 16497                           ;matrix_task.c: 210: data->holdCountXY = 0;
 16498  1223  085A               	movf	matrix_Main@data,w
 16499  1224  0086               	movwf	6
 16500  1225  085B               	movf	matrix_Main@data+1,w
 16501  1226  0087               	movwf	7
 16502  1227  3151               	addfsr 1,17
 16503  1228  3000               	movlw	0
 16504  1229  3FC0               	movwi [0]fsr1
 16505  122A  3FC1               	movwi [1]fsr1
 16506                           
 16507                           ;matrix_task.c: 211: data->holdCountAY = 0;
 16508  122B  085A               	movf	matrix_Main@data,w
 16509  122C  0086               	movwf	6
 16510  122D  085B               	movf	matrix_Main@data+1,w
 16511  122E  0087               	movwf	7
 16512  122F  3153               	addfsr 1,19
 16513  1230  3000               	movlw	0
 16514  1231  3FC0               	movwi [0]fsr1
 16515  1232  3FC1               	movwi [1]fsr1
 16516                           
 16517                           ;matrix_task.c: 212: data->holdCountAX = 0;
 16518  1233  085A               	movf	matrix_Main@data,w
 16519  1234  0086               	movwf	6
 16520  1235  085B               	movf	matrix_Main@data+1,w
 16521  1236  0087               	movwf	7
 16522  1237  3155               	addfsr 1,21
 16523  1238  3000               	movlw	0
 16524  1239  3FC0               	movwi [0]fsr1
 16525  123A  3FC1               	movwi [1]fsr1
 16526                           
 16527                           ;matrix_task.c: 213: data->holdCountBX = 0;
 16528  123B  085A               	movf	matrix_Main@data,w
 16529  123C  0086               	movwf	6
 16530  123D  085B               	movf	matrix_Main@data+1,w
 16531  123E  0087               	movwf	7
 16532  123F  3157               	addfsr 1,23
 16533  1240  3000               	movlw	0
 16534  1241  3FC0               	movwi [0]fsr1
 16535  1242  3FC1               	movwi [1]fsr1
 16536                           
 16537                           ;matrix_task.c: 214: data->holdCountBY = 0;
 16538  1243  085A               	movf	matrix_Main@data,w
 16539  1244  0086               	movwf	6
 16540  1245  085B               	movf	matrix_Main@data+1,w
 16541  1246  0087               	movwf	7
 16542  1247  3159               	addfsr 1,25
 16543  1248  3000               	movlw	0
 16544  1249  3FC0               	movwi [0]fsr1
 16545  124A  3FC1               	movwi [1]fsr1
 16546                           
 16547                           ;matrix_task.c: 215: data->holdCountBA = 0;
 16548  124B  085A               	movf	matrix_Main@data,w
 16549  124C  0086               	movwf	6
 16550  124D  085B               	movf	matrix_Main@data+1,w
 16551  124E  0087               	movwf	7
 16552  124F  315B               	addfsr 1,27
 16553  1250  3000               	movlw	0
 16554  1251  3FC0               	movwi [0]fsr1
 16555  1252  3FC1               	movwi [1]fsr1
 16556                           
 16557                           ;matrix_task.c: 216: data->noholdCount = 0;
 16558  1253  085A               	movf	matrix_Main@data,w
 16559  1254  0086               	movwf	6
 16560  1255  085B               	movf	matrix_Main@data+1,w
 16561  1256  0087               	movwf	7
 16562  1257  315D               	addfsr 1,29
 16563  1258  3000               	movlw	0
 16564  1259  3FC0               	movwi [0]fsr1
 16565  125A  3FC1               	movwi [1]fsr1
 16566                           
 16567                           ;matrix_task.c: 217: data->displayTickdown = 300;
 16568  125B  085A               	movf	matrix_Main@data,w
 16569  125C  0086               	movwf	6
 16570  125D  085B               	movf	matrix_Main@data+1,w
 16571  125E  0087               	movwf	7
 16572  125F  3147               	addfsr 1,7
 16573  1260  302C               	movlw	44
 16574  1261  3FC0               	movwi [0]fsr1
 16575  1262  3001               	movlw	1
 16576  1263  3FC1               	movwi [1]fsr1
 16577                           
 16578                           ;matrix_task.c: 218: break;
 16579  1264  2FB4               	goto	l10291
 16580  1265                     l10017:	
 16581                           ;matrix_task.c: 219: case 4:
 16582                           
 16583                           
 16584                           ;matrix_task.c: 221: if (data->holdCountX == holdvalue){
 16585  1265  085A               	movf	matrix_Main@data,w
 16586  1266  0086               	movwf	6
 16587  1267  085B               	movf	matrix_Main@data+1,w
 16588  1268  0087               	movwf	7
 16589  1269  314D               	addfsr 1,13
 16590  126A  3F40               	moviw [0]fsr1
 16591  126B  00D4               	movwf	??_matrix_Main
 16592  126C  3F41               	moviw [1]fsr1
 16593  126D  00D5               	movwf	??_matrix_Main+1
 16594  126E  0859               	movf	matrix_Main@holdvalue,w
 16595  126F  00D6               	movwf	??_matrix_Main+2
 16596  1270  01D7               	clrf	??_matrix_Main+3
 16597  1271  0855               	movf	??_matrix_Main+1,w
 16598  1272  0657               	xorwf	??_matrix_Main+3,w
 16599  1273  1D03               	skipz
 16600  1274  2A77               	goto	u6385
 16601  1275  0854               	movf	??_matrix_Main,w
 16602  1276  0656               	xorwf	??_matrix_Main+2,w
 16603  1277                     u6385:	
 16604  1277  1D03               	skipz
 16605  1278  2A96               	goto	l10023
 16606                           
 16607                           ;matrix_task.c: 222: matrix_found = matrix_secret_check(data, buttonPressed);
 16608  1279  085B               	movf	matrix_Main@data+1,w
 16609  127A  00F8               	movwf	matrix_secret_check@data+1
 16610  127B  085A               	movf	matrix_Main@data,w
 16611  127C  00F7               	movwf	matrix_secret_check@data
 16612  127D  0858               	movf	matrix_Main@buttonPressed,w
 16613  127E  00D4               	movwf	??_matrix_Main
 16614  127F  0854               	movf	??_matrix_Main,w
 16615  1280  00F9               	movwf	matrix_secret_check@buttonPressed
 16616  1281  31A4  24CD  3190   	fcall	_matrix_secret_check
 16617  1284  0020               	movlb	0	; select bank0
 16618  1285  00D5               	movwf	??_matrix_Main+1
 16619  1286  0855               	movf	??_matrix_Main+1,w
 16620  1287  0021               	movlb	1	; select bank1
 16621  1288  00C2               	movwf	_matrix_found^(0+128)
 16622                           
 16623                           ;matrix_task.c: 223: data->display_state = MATRIX_X;
 16624  1289  0020               	movlb	0	; select bank0
 16625  128A  085A               	movf	matrix_Main@data,w
 16626  128B  3E02               	addlw	2
 16627  128C  00D4               	movwf	??_matrix_Main
 16628  128D  3000               	movlw	0
 16629  128E  3D5B               	addwfc	matrix_Main@data+1,w
 16630  128F  00D5               	movwf	??_matrix_Main+1
 16631  1290  0854               	movf	??_matrix_Main,w
 16632  1291  0086               	movwf	6
 16633  1292  0855               	movf	??_matrix_Main+1,w
 16634  1293  0087               	movwf	7
 16635  1294  3003               	movlw	3
 16636  1295  0081               	movwf	1
 16637  1296                     l10023:	
 16638                           
 16639                           ;matrix_task.c: 224: }
 16640                           ;matrix_task.c: 225: data->holdCountA = 0;
 16641  1296  085A               	movf	matrix_Main@data,w
 16642  1297  0086               	movwf	6
 16643  1298  085B               	movf	matrix_Main@data+1,w
 16644  1299  0087               	movwf	7
 16645  129A  3149               	addfsr 1,9
 16646  129B  3000               	movlw	0
 16647  129C  3FC0               	movwi [0]fsr1
 16648  129D  3FC1               	movwi [1]fsr1
 16649                           
 16650                           ;matrix_task.c: 226: data->holdCountB = 0;
 16651  129E  085A               	movf	matrix_Main@data,w
 16652  129F  0086               	movwf	6
 16653  12A0  085B               	movf	matrix_Main@data+1,w
 16654  12A1  0087               	movwf	7
 16655  12A2  314B               	addfsr 1,11
 16656  12A3  3000               	movlw	0
 16657  12A4  3FC0               	movwi [0]fsr1
 16658  12A5  3FC1               	movwi [1]fsr1
 16659                           
 16660                           ;matrix_task.c: 227: data->holdCountX += 1;
 16661  12A6  085A               	movf	matrix_Main@data,w
 16662  12A7  0086               	movwf	6
 16663  12A8  085B               	movf	matrix_Main@data+1,w
 16664  12A9  0087               	movwf	7
 16665  12AA  314D               	addfsr 1,13
 16666  12AB  3001               	movlw	1
 16667  12AC  0781               	addwf	1,f
 16668  12AD  3141               	addfsr 1,1
 16669  12AE  1803               	skipnc
 16670  12AF  0A81               	incf	1,f
 16671                           
 16672                           ;matrix_task.c: 228: data->holdCountY = 0;
 16673  12B0  085A               	movf	matrix_Main@data,w
 16674  12B1  0086               	movwf	6
 16675  12B2  085B               	movf	matrix_Main@data+1,w
 16676  12B3  0087               	movwf	7
 16677  12B4  314F               	addfsr 1,15
 16678  12B5  3000               	movlw	0
 16679  12B6  3FC0               	movwi [0]fsr1
 16680  12B7  3FC1               	movwi [1]fsr1
 16681                           
 16682                           ;matrix_task.c: 229: data->holdCountXY = 0;
 16683  12B8  085A               	movf	matrix_Main@data,w
 16684  12B9  0086               	movwf	6
 16685  12BA  085B               	movf	matrix_Main@data+1,w
 16686  12BB  0087               	movwf	7
 16687  12BC  3151               	addfsr 1,17
 16688  12BD  3000               	movlw	0
 16689  12BE  3FC0               	movwi [0]fsr1
 16690  12BF  3FC1               	movwi [1]fsr1
 16691                           
 16692                           ;matrix_task.c: 230: data->holdCountAY = 0;
 16693  12C0  085A               	movf	matrix_Main@data,w
 16694  12C1  0086               	movwf	6
 16695  12C2  085B               	movf	matrix_Main@data+1,w
 16696  12C3  0087               	movwf	7
 16697  12C4  3153               	addfsr 1,19
 16698  12C5  3000               	movlw	0
 16699  12C6  3FC0               	movwi [0]fsr1
 16700  12C7  3FC1               	movwi [1]fsr1
 16701                           
 16702                           ;matrix_task.c: 231: data->holdCountAX = 0;
 16703  12C8  085A               	movf	matrix_Main@data,w
 16704  12C9  0086               	movwf	6
 16705  12CA  085B               	movf	matrix_Main@data+1,w
 16706  12CB  0087               	movwf	7
 16707  12CC  3155               	addfsr 1,21
 16708  12CD  3000               	movlw	0
 16709  12CE  3FC0               	movwi [0]fsr1
 16710  12CF  3FC1               	movwi [1]fsr1
 16711                           
 16712                           ;matrix_task.c: 232: data->holdCountBX = 0;
 16713  12D0  085A               	movf	matrix_Main@data,w
 16714  12D1  0086               	movwf	6
 16715  12D2  085B               	movf	matrix_Main@data+1,w
 16716  12D3  0087               	movwf	7
 16717  12D4  3157               	addfsr 1,23
 16718  12D5  3000               	movlw	0
 16719  12D6  3FC0               	movwi [0]fsr1
 16720  12D7  3FC1               	movwi [1]fsr1
 16721                           
 16722                           ;matrix_task.c: 233: data->holdCountBY = 0;
 16723  12D8  085A               	movf	matrix_Main@data,w
 16724  12D9  0086               	movwf	6
 16725  12DA  085B               	movf	matrix_Main@data+1,w
 16726  12DB  0087               	movwf	7
 16727  12DC  3159               	addfsr 1,25
 16728  12DD  3000               	movlw	0
 16729  12DE  3FC0               	movwi [0]fsr1
 16730  12DF  3FC1               	movwi [1]fsr1
 16731                           
 16732                           ;matrix_task.c: 234: data->holdCountBA = 0;
 16733  12E0  085A               	movf	matrix_Main@data,w
 16734  12E1  0086               	movwf	6
 16735  12E2  085B               	movf	matrix_Main@data+1,w
 16736  12E3  0087               	movwf	7
 16737  12E4  315B               	addfsr 1,27
 16738  12E5  3000               	movlw	0
 16739  12E6  3FC0               	movwi [0]fsr1
 16740  12E7  3FC1               	movwi [1]fsr1
 16741                           
 16742                           ;matrix_task.c: 235: data->noholdCount = 0;
 16743  12E8  085A               	movf	matrix_Main@data,w
 16744  12E9  0086               	movwf	6
 16745  12EA  085B               	movf	matrix_Main@data+1,w
 16746  12EB  0087               	movwf	7
 16747  12EC  315D               	addfsr 1,29
 16748  12ED  3000               	movlw	0
 16749  12EE  3FC0               	movwi [0]fsr1
 16750  12EF  3FC1               	movwi [1]fsr1
 16751                           
 16752                           ;matrix_task.c: 236: data->displayTickdown = 300;
 16753  12F0  085A               	movf	matrix_Main@data,w
 16754  12F1  0086               	movwf	6
 16755  12F2  085B               	movf	matrix_Main@data+1,w
 16756  12F3  0087               	movwf	7
 16757  12F4  3147               	addfsr 1,7
 16758  12F5  302C               	movlw	44
 16759  12F6  3FC0               	movwi [0]fsr1
 16760  12F7  3001               	movlw	1
 16761  12F8  3FC1               	movwi [1]fsr1
 16762                           
 16763                           ;matrix_task.c: 237: break;
 16764  12F9  2FB4               	goto	l10291
 16765  12FA                     l10047:	
 16766                           ;matrix_task.c: 238: case 8:
 16767                           
 16768                           
 16769                           ;matrix_task.c: 240: if (data->holdCountY == holdvalue){
 16770  12FA  085A               	movf	matrix_Main@data,w
 16771  12FB  0086               	movwf	6
 16772  12FC  085B               	movf	matrix_Main@data+1,w
 16773  12FD  0087               	movwf	7
 16774  12FE  314F               	addfsr 1,15
 16775  12FF  3F40               	moviw [0]fsr1
 16776  1300  00D4               	movwf	??_matrix_Main
 16777  1301  3F41               	moviw [1]fsr1
 16778  1302  00D5               	movwf	??_matrix_Main+1
 16779  1303  0859               	movf	matrix_Main@holdvalue,w
 16780  1304  00D6               	movwf	??_matrix_Main+2
 16781  1305  01D7               	clrf	??_matrix_Main+3
 16782  1306  0855               	movf	??_matrix_Main+1,w
 16783  1307  0657               	xorwf	??_matrix_Main+3,w
 16784  1308  1D03               	skipz
 16785  1309  2B0C               	goto	u6395
 16786  130A  0854               	movf	??_matrix_Main,w
 16787  130B  0656               	xorwf	??_matrix_Main+2,w
 16788  130C                     u6395:	
 16789  130C  1D03               	skipz
 16790  130D  2B2B               	goto	l10053
 16791                           
 16792                           ;matrix_task.c: 241: matrix_found = matrix_secret_check(data, buttonPressed);
 16793  130E  085B               	movf	matrix_Main@data+1,w
 16794  130F  00F8               	movwf	matrix_secret_check@data+1
 16795  1310  085A               	movf	matrix_Main@data,w
 16796  1311  00F7               	movwf	matrix_secret_check@data
 16797  1312  0858               	movf	matrix_Main@buttonPressed,w
 16798  1313  00D4               	movwf	??_matrix_Main
 16799  1314  0854               	movf	??_matrix_Main,w
 16800  1315  00F9               	movwf	matrix_secret_check@buttonPressed
 16801  1316  31A4  24CD  3190   	fcall	_matrix_secret_check
 16802  1319  0020               	movlb	0	; select bank0
 16803  131A  00D5               	movwf	??_matrix_Main+1
 16804  131B  0855               	movf	??_matrix_Main+1,w
 16805  131C  0021               	movlb	1	; select bank1
 16806  131D  00C2               	movwf	_matrix_found^(0+128)
 16807                           
 16808                           ;matrix_task.c: 242: data->display_state = MATRIX_Y;
 16809  131E  0020               	movlb	0	; select bank0
 16810  131F  085A               	movf	matrix_Main@data,w
 16811  1320  3E02               	addlw	2
 16812  1321  00D4               	movwf	??_matrix_Main
 16813  1322  3000               	movlw	0
 16814  1323  3D5B               	addwfc	matrix_Main@data+1,w
 16815  1324  00D5               	movwf	??_matrix_Main+1
 16816  1325  0854               	movf	??_matrix_Main,w
 16817  1326  0086               	movwf	6
 16818  1327  0855               	movf	??_matrix_Main+1,w
 16819  1328  0087               	movwf	7
 16820  1329  3001               	movlw	1
 16821  132A  0081               	movwf	1
 16822  132B                     l10053:	
 16823                           
 16824                           ;matrix_task.c: 243: }
 16825                           ;matrix_task.c: 245: data->holdCountA = 0;
 16826  132B  085A               	movf	matrix_Main@data,w
 16827  132C  0086               	movwf	6
 16828  132D  085B               	movf	matrix_Main@data+1,w
 16829  132E  0087               	movwf	7
 16830  132F  3149               	addfsr 1,9
 16831  1330  3000               	movlw	0
 16832  1331  3FC0               	movwi [0]fsr1
 16833  1332  3FC1               	movwi [1]fsr1
 16834                           
 16835                           ;matrix_task.c: 246: data->holdCountB = 0;
 16836  1333  085A               	movf	matrix_Main@data,w
 16837  1334  0086               	movwf	6
 16838  1335  085B               	movf	matrix_Main@data+1,w
 16839  1336  0087               	movwf	7
 16840  1337  314B               	addfsr 1,11
 16841  1338  3000               	movlw	0
 16842  1339  3FC0               	movwi [0]fsr1
 16843  133A  3FC1               	movwi [1]fsr1
 16844                           
 16845                           ;matrix_task.c: 247: data->holdCountX = 0;
 16846  133B  085A               	movf	matrix_Main@data,w
 16847  133C  0086               	movwf	6
 16848  133D  085B               	movf	matrix_Main@data+1,w
 16849  133E  0087               	movwf	7
 16850  133F  314D               	addfsr 1,13
 16851  1340  3000               	movlw	0
 16852  1341  3FC0               	movwi [0]fsr1
 16853  1342  3FC1               	movwi [1]fsr1
 16854                           
 16855                           ;matrix_task.c: 248: data->holdCountY += 1;
 16856  1343  085A               	movf	matrix_Main@data,w
 16857  1344  0086               	movwf	6
 16858  1345  085B               	movf	matrix_Main@data+1,w
 16859  1346  0087               	movwf	7
 16860  1347  314F               	addfsr 1,15
 16861  1348  3001               	movlw	1
 16862  1349  0781               	addwf	1,f
 16863  134A  3141               	addfsr 1,1
 16864  134B  1803               	skipnc
 16865  134C  0A81               	incf	1,f
 16866                           
 16867                           ;matrix_task.c: 249: data->holdCountXY = 0;
 16868  134D  085A               	movf	matrix_Main@data,w
 16869  134E  0086               	movwf	6
 16870  134F  085B               	movf	matrix_Main@data+1,w
 16871  1350  0087               	movwf	7
 16872  1351  3151               	addfsr 1,17
 16873  1352  3000               	movlw	0
 16874  1353  3FC0               	movwi [0]fsr1
 16875  1354  3FC1               	movwi [1]fsr1
 16876                           
 16877                           ;matrix_task.c: 250: data->holdCountAY = 0;
 16878  1355  085A               	movf	matrix_Main@data,w
 16879  1356  0086               	movwf	6
 16880  1357  085B               	movf	matrix_Main@data+1,w
 16881  1358  0087               	movwf	7
 16882  1359  3153               	addfsr 1,19
 16883  135A  3000               	movlw	0
 16884  135B  3FC0               	movwi [0]fsr1
 16885  135C  3FC1               	movwi [1]fsr1
 16886                           
 16887                           ;matrix_task.c: 251: data->holdCountAX = 0;
 16888  135D  085A               	movf	matrix_Main@data,w
 16889  135E  0086               	movwf	6
 16890  135F  085B               	movf	matrix_Main@data+1,w
 16891  1360  0087               	movwf	7
 16892  1361  3155               	addfsr 1,21
 16893  1362  3000               	movlw	0
 16894  1363  3FC0               	movwi [0]fsr1
 16895  1364  3FC1               	movwi [1]fsr1
 16896                           
 16897                           ;matrix_task.c: 252: data->holdCountBX = 0;
 16898  1365  085A               	movf	matrix_Main@data,w
 16899  1366  0086               	movwf	6
 16900  1367  085B               	movf	matrix_Main@data+1,w
 16901  1368  0087               	movwf	7
 16902  1369  3157               	addfsr 1,23
 16903  136A  3000               	movlw	0
 16904  136B  3FC0               	movwi [0]fsr1
 16905  136C  3FC1               	movwi [1]fsr1
 16906                           
 16907                           ;matrix_task.c: 253: data->holdCountBY = 0;
 16908  136D  085A               	movf	matrix_Main@data,w
 16909  136E  0086               	movwf	6
 16910  136F  085B               	movf	matrix_Main@data+1,w
 16911  1370  0087               	movwf	7
 16912  1371  3159               	addfsr 1,25
 16913  1372  3000               	movlw	0
 16914  1373  3FC0               	movwi [0]fsr1
 16915  1374  3FC1               	movwi [1]fsr1
 16916                           
 16917                           ;matrix_task.c: 254: data->holdCountBA = 0;
 16918  1375  085A               	movf	matrix_Main@data,w
 16919  1376  0086               	movwf	6
 16920  1377  085B               	movf	matrix_Main@data+1,w
 16921  1378  0087               	movwf	7
 16922  1379  315B               	addfsr 1,27
 16923  137A  3000               	movlw	0
 16924  137B  3FC0               	movwi [0]fsr1
 16925  137C  3FC1               	movwi [1]fsr1
 16926                           
 16927                           ;matrix_task.c: 255: data->noholdCount = 0;
 16928  137D  085A               	movf	matrix_Main@data,w
 16929  137E  0086               	movwf	6
 16930  137F  085B               	movf	matrix_Main@data+1,w
 16931  1380  0087               	movwf	7
 16932  1381  315D               	addfsr 1,29
 16933  1382  3000               	movlw	0
 16934  1383  3FC0               	movwi [0]fsr1
 16935  1384  3FC1               	movwi [1]fsr1
 16936                           
 16937                           ;matrix_task.c: 256: data->displayTickdown = 300;
 16938  1385  085A               	movf	matrix_Main@data,w
 16939  1386  0086               	movwf	6
 16940  1387  085B               	movf	matrix_Main@data+1,w
 16941  1388  0087               	movwf	7
 16942  1389  3147               	addfsr 1,7
 16943  138A  302C               	movlw	44
 16944  138B  3FC0               	movwi [0]fsr1
 16945  138C  3001               	movlw	1
 16946  138D  3FC1               	movwi [1]fsr1
 16947                           
 16948                           ;matrix_task.c: 257: break;
 16949  138E  2FB4               	goto	l10291
 16950  138F                     l10077:	
 16951                           ;matrix_task.c: 258: case 4 | 8:
 16952                           
 16953                           
 16954                           ;matrix_task.c: 260: if (data->holdCountXY == holdvalue){
 16955  138F  085A               	movf	matrix_Main@data,w
 16956  1390  0086               	movwf	6
 16957  1391  085B               	movf	matrix_Main@data+1,w
 16958  1392  0087               	movwf	7
 16959  1393  3151               	addfsr 1,17
 16960  1394  3F40               	moviw [0]fsr1
 16961  1395  00D4               	movwf	??_matrix_Main
 16962  1396  3F41               	moviw [1]fsr1
 16963  1397  00D5               	movwf	??_matrix_Main+1
 16964  1398  0859               	movf	matrix_Main@holdvalue,w
 16965  1399  00D6               	movwf	??_matrix_Main+2
 16966  139A  01D7               	clrf	??_matrix_Main+3
 16967  139B  0855               	movf	??_matrix_Main+1,w
 16968  139C  0657               	xorwf	??_matrix_Main+3,w
 16969  139D  1D03               	skipz
 16970  139E  2BA1               	goto	u6405
 16971  139F  0854               	movf	??_matrix_Main,w
 16972  13A0  0656               	xorwf	??_matrix_Main+2,w
 16973  13A1                     u6405:	
 16974  13A1  1D03               	skipz
 16975  13A2  2BC0               	goto	l10083
 16976                           
 16977                           ;matrix_task.c: 261: matrix_found = matrix_secret_check(data, 4 | 8);
 16978  13A3  085B               	movf	matrix_Main@data+1,w
 16979  13A4  00F8               	movwf	matrix_secret_check@data+1
 16980  13A5  085A               	movf	matrix_Main@data,w
 16981  13A6  00F7               	movwf	matrix_secret_check@data
 16982  13A7  300C               	movlw	12
 16983  13A8  00D4               	movwf	??_matrix_Main
 16984  13A9  0854               	movf	??_matrix_Main,w
 16985  13AA  00F9               	movwf	matrix_secret_check@buttonPressed
 16986  13AB  31A4  24CD  3190   	fcall	_matrix_secret_check
 16987  13AE  0020               	movlb	0	; select bank0
 16988  13AF  00D5               	movwf	??_matrix_Main+1
 16989  13B0  0855               	movf	??_matrix_Main+1,w
 16990  13B1  0021               	movlb	1	; select bank1
 16991  13B2  00C2               	movwf	_matrix_found^(0+128)
 16992                           
 16993                           ;matrix_task.c: 262: data->display_state = MATRIX_XY;
 16994  13B3  0020               	movlb	0	; select bank0
 16995  13B4  085A               	movf	matrix_Main@data,w
 16996  13B5  3E02               	addlw	2
 16997  13B6  00D4               	movwf	??_matrix_Main
 16998  13B7  3000               	movlw	0
 16999  13B8  3D5B               	addwfc	matrix_Main@data+1,w
 17000  13B9  00D5               	movwf	??_matrix_Main+1
 17001  13BA  0854               	movf	??_matrix_Main,w
 17002  13BB  0086               	movwf	6
 17003  13BC  0855               	movf	??_matrix_Main+1,w
 17004  13BD  0087               	movwf	7
 17005  13BE  3008               	movlw	8
 17006  13BF  0081               	movwf	1
 17007  13C0                     l10083:	
 17008                           
 17009                           ;matrix_task.c: 263: }
 17010                           ;matrix_task.c: 264: data->holdCountA = 0;
 17011  13C0  085A               	movf	matrix_Main@data,w
 17012  13C1  0086               	movwf	6
 17013  13C2  085B               	movf	matrix_Main@data+1,w
 17014  13C3  0087               	movwf	7
 17015  13C4  3149               	addfsr 1,9
 17016  13C5  3000               	movlw	0
 17017  13C6  3FC0               	movwi [0]fsr1
 17018  13C7  3FC1               	movwi [1]fsr1
 17019                           
 17020                           ;matrix_task.c: 265: data->holdCountB = 0;
 17021  13C8  085A               	movf	matrix_Main@data,w
 17022  13C9  0086               	movwf	6
 17023  13CA  085B               	movf	matrix_Main@data+1,w
 17024  13CB  0087               	movwf	7
 17025  13CC  314B               	addfsr 1,11
 17026  13CD  3000               	movlw	0
 17027  13CE  3FC0               	movwi [0]fsr1
 17028  13CF  3FC1               	movwi [1]fsr1
 17029                           
 17030                           ;matrix_task.c: 266: data->holdCountX = 0;
 17031  13D0  085A               	movf	matrix_Main@data,w
 17032  13D1  0086               	movwf	6
 17033  13D2  085B               	movf	matrix_Main@data+1,w
 17034  13D3  0087               	movwf	7
 17035  13D4  314D               	addfsr 1,13
 17036  13D5  3000               	movlw	0
 17037  13D6  3FC0               	movwi [0]fsr1
 17038  13D7  3FC1               	movwi [1]fsr1
 17039                           
 17040                           ;matrix_task.c: 267: data->holdCountY = 0;
 17041  13D8  085A               	movf	matrix_Main@data,w
 17042  13D9  0086               	movwf	6
 17043  13DA  085B               	movf	matrix_Main@data+1,w
 17044  13DB  0087               	movwf	7
 17045  13DC  314F               	addfsr 1,15
 17046  13DD  3000               	movlw	0
 17047  13DE  3FC0               	movwi [0]fsr1
 17048  13DF  3FC1               	movwi [1]fsr1
 17049                           
 17050                           ;matrix_task.c: 268: data->holdCountXY += 1;
 17051  13E0  085A               	movf	matrix_Main@data,w
 17052  13E1  0086               	movwf	6
 17053  13E2  085B               	movf	matrix_Main@data+1,w
 17054  13E3  0087               	movwf	7
 17055  13E4  3151               	addfsr 1,17
 17056  13E5  3001               	movlw	1
 17057  13E6  0781               	addwf	1,f
 17058  13E7  3141               	addfsr 1,1
 17059  13E8  1803               	skipnc
 17060  13E9  0A81               	incf	1,f
 17061                           
 17062                           ;matrix_task.c: 269: data->holdCountAY = 0;
 17063  13EA  085A               	movf	matrix_Main@data,w
 17064  13EB  0086               	movwf	6
 17065  13EC  085B               	movf	matrix_Main@data+1,w
 17066  13ED  0087               	movwf	7
 17067  13EE  3153               	addfsr 1,19
 17068  13EF  3000               	movlw	0
 17069  13F0  3FC0               	movwi [0]fsr1
 17070  13F1  3FC1               	movwi [1]fsr1
 17071                           
 17072                           ;matrix_task.c: 270: data->holdCountAX = 0;
 17073  13F2  085A               	movf	matrix_Main@data,w
 17074  13F3  0086               	movwf	6
 17075  13F4  085B               	movf	matrix_Main@data+1,w
 17076  13F5  0087               	movwf	7
 17077  13F6  3155               	addfsr 1,21
 17078  13F7  3000               	movlw	0
 17079  13F8  3FC0               	movwi [0]fsr1
 17080  13F9  3FC1               	movwi [1]fsr1
 17081                           
 17082                           ;matrix_task.c: 271: data->holdCountBX = 0;
 17083  13FA  085A               	movf	matrix_Main@data,w
 17084  13FB  0086               	movwf	6
 17085  13FC  085B               	movf	matrix_Main@data+1,w
 17086  13FD  0087               	movwf	7
 17087  13FE  3157               	addfsr 1,23
 17088  13FF  3000               	movlw	0
 17089  1400  3FC0               	movwi [0]fsr1
 17090  1401  3FC1               	movwi [1]fsr1
 17091                           
 17092                           ;matrix_task.c: 272: data->holdCountBY = 0;
 17093  1402  085A               	movf	matrix_Main@data,w
 17094  1403  0086               	movwf	6
 17095  1404  085B               	movf	matrix_Main@data+1,w
 17096  1405  0087               	movwf	7
 17097  1406  3159               	addfsr 1,25
 17098  1407  3000               	movlw	0
 17099  1408  3FC0               	movwi [0]fsr1
 17100  1409  3FC1               	movwi [1]fsr1
 17101                           
 17102                           ;matrix_task.c: 273: data->holdCountBA = 0;
 17103  140A  085A               	movf	matrix_Main@data,w
 17104  140B  0086               	movwf	6
 17105  140C  085B               	movf	matrix_Main@data+1,w
 17106  140D  0087               	movwf	7
 17107  140E  315B               	addfsr 1,27
 17108  140F  3000               	movlw	0
 17109  1410  3FC0               	movwi [0]fsr1
 17110  1411  3FC1               	movwi [1]fsr1
 17111                           
 17112                           ;matrix_task.c: 274: data->noholdCount = 0;
 17113  1412  085A               	movf	matrix_Main@data,w
 17114  1413  0086               	movwf	6
 17115  1414  085B               	movf	matrix_Main@data+1,w
 17116  1415  0087               	movwf	7
 17117  1416  315D               	addfsr 1,29
 17118  1417  3000               	movlw	0
 17119  1418  3FC0               	movwi [0]fsr1
 17120  1419  3FC1               	movwi [1]fsr1
 17121                           
 17122                           ;matrix_task.c: 275: data->displayTickdown = 300;
 17123  141A  085A               	movf	matrix_Main@data,w
 17124  141B  0086               	movwf	6
 17125  141C  085B               	movf	matrix_Main@data+1,w
 17126  141D  0087               	movwf	7
 17127  141E  3147               	addfsr 1,7
 17128  141F  302C               	movlw	44
 17129  1420  3FC0               	movwi [0]fsr1
 17130  1421  3001               	movlw	1
 17131  1422  3FC1               	movwi [1]fsr1
 17132                           
 17133                           ;matrix_task.c: 276: break;
 17134  1423  2FB4               	goto	l10291
 17135  1424                     l10107:	
 17136                           ;matrix_task.c: 277: case 1 | 8:
 17137                           
 17138                           
 17139                           ;matrix_task.c: 279: if (data->holdCountAY == holdvalue){
 17140  1424  085A               	movf	matrix_Main@data,w
 17141  1425  0086               	movwf	6
 17142  1426  085B               	movf	matrix_Main@data+1,w
 17143  1427  0087               	movwf	7
 17144  1428  3153               	addfsr 1,19
 17145  1429  3F40               	moviw [0]fsr1
 17146  142A  00D4               	movwf	??_matrix_Main
 17147  142B  3F41               	moviw [1]fsr1
 17148  142C  00D5               	movwf	??_matrix_Main+1
 17149  142D  0859               	movf	matrix_Main@holdvalue,w
 17150  142E  00D6               	movwf	??_matrix_Main+2
 17151  142F  01D7               	clrf	??_matrix_Main+3
 17152  1430  0855               	movf	??_matrix_Main+1,w
 17153  1431  0657               	xorwf	??_matrix_Main+3,w
 17154  1432  1D03               	skipz
 17155  1433  2C36               	goto	u6415
 17156  1434  0854               	movf	??_matrix_Main,w
 17157  1435  0656               	xorwf	??_matrix_Main+2,w
 17158  1436                     u6415:	
 17159  1436  1D03               	skipz
 17160  1437  2C55               	goto	l10113
 17161                           
 17162                           ;matrix_task.c: 280: matrix_found = matrix_secret_check(data, 1 | 8);
 17163  1438  085B               	movf	matrix_Main@data+1,w
 17164  1439  00F8               	movwf	matrix_secret_check@data+1
 17165  143A  085A               	movf	matrix_Main@data,w
 17166  143B  00F7               	movwf	matrix_secret_check@data
 17167  143C  3009               	movlw	9
 17168  143D  00D4               	movwf	??_matrix_Main
 17169  143E  0854               	movf	??_matrix_Main,w
 17170  143F  00F9               	movwf	matrix_secret_check@buttonPressed
 17171  1440  31A4  24CD  3190   	fcall	_matrix_secret_check
 17172  1443  0020               	movlb	0	; select bank0
 17173  1444  00D5               	movwf	??_matrix_Main+1
 17174  1445  0855               	movf	??_matrix_Main+1,w
 17175  1446  0021               	movlb	1	; select bank1
 17176  1447  00C2               	movwf	_matrix_found^(0+128)
 17177                           
 17178                           ;matrix_task.c: 281: data->display_state = MATRIX_AY;
 17179  1448  0020               	movlb	0	; select bank0
 17180  1449  085A               	movf	matrix_Main@data,w
 17181  144A  3E02               	addlw	2
 17182  144B  00D4               	movwf	??_matrix_Main
 17183  144C  3000               	movlw	0
 17184  144D  3D5B               	addwfc	matrix_Main@data+1,w
 17185  144E  00D5               	movwf	??_matrix_Main+1
 17186  144F  0854               	movf	??_matrix_Main,w
 17187  1450  0086               	movwf	6
 17188  1451  0855               	movf	??_matrix_Main+1,w
 17189  1452  0087               	movwf	7
 17190  1453  3005               	movlw	5
 17191  1454  0081               	movwf	1
 17192  1455                     l10113:	
 17193                           
 17194                           ;matrix_task.c: 282: }
 17195                           ;matrix_task.c: 283: data->holdCountA = 0;
 17196  1455  085A               	movf	matrix_Main@data,w
 17197  1456  0086               	movwf	6
 17198  1457  085B               	movf	matrix_Main@data+1,w
 17199  1458  0087               	movwf	7
 17200  1459  3149               	addfsr 1,9
 17201  145A  3000               	movlw	0
 17202  145B  3FC0               	movwi [0]fsr1
 17203  145C  3FC1               	movwi [1]fsr1
 17204                           
 17205                           ;matrix_task.c: 284: data->holdCountB = 0;
 17206  145D  085A               	movf	matrix_Main@data,w
 17207  145E  0086               	movwf	6
 17208  145F  085B               	movf	matrix_Main@data+1,w
 17209  1460  0087               	movwf	7
 17210  1461  314B               	addfsr 1,11
 17211  1462  3000               	movlw	0
 17212  1463  3FC0               	movwi [0]fsr1
 17213  1464  3FC1               	movwi [1]fsr1
 17214                           
 17215                           ;matrix_task.c: 285: data->holdCountX = 0;
 17216  1465  085A               	movf	matrix_Main@data,w
 17217  1466  0086               	movwf	6
 17218  1467  085B               	movf	matrix_Main@data+1,w
 17219  1468  0087               	movwf	7
 17220  1469  314D               	addfsr 1,13
 17221  146A  3000               	movlw	0
 17222  146B  3FC0               	movwi [0]fsr1
 17223  146C  3FC1               	movwi [1]fsr1
 17224                           
 17225                           ;matrix_task.c: 286: data->holdCountY = 0;
 17226  146D  085A               	movf	matrix_Main@data,w
 17227  146E  0086               	movwf	6
 17228  146F  085B               	movf	matrix_Main@data+1,w
 17229  1470  0087               	movwf	7
 17230  1471  314F               	addfsr 1,15
 17231  1472  3000               	movlw	0
 17232  1473  3FC0               	movwi [0]fsr1
 17233  1474  3FC1               	movwi [1]fsr1
 17234                           
 17235                           ;matrix_task.c: 287: data->holdCountXY = 0;
 17236  1475  085A               	movf	matrix_Main@data,w
 17237  1476  0086               	movwf	6
 17238  1477  085B               	movf	matrix_Main@data+1,w
 17239  1478  0087               	movwf	7
 17240  1479  3151               	addfsr 1,17
 17241  147A  3000               	movlw	0
 17242  147B  3FC0               	movwi [0]fsr1
 17243  147C  3FC1               	movwi [1]fsr1
 17244                           
 17245                           ;matrix_task.c: 288: data->holdCountAY += 1;
 17246  147D  085A               	movf	matrix_Main@data,w
 17247  147E  0086               	movwf	6
 17248  147F  085B               	movf	matrix_Main@data+1,w
 17249  1480  0087               	movwf	7
 17250  1481  3153               	addfsr 1,19
 17251  1482  3001               	movlw	1
 17252  1483  0781               	addwf	1,f
 17253  1484  3141               	addfsr 1,1
 17254  1485  1803               	skipnc
 17255  1486  0A81               	incf	1,f
 17256                           
 17257                           ;matrix_task.c: 289: data->holdCountAX = 0;
 17258  1487  085A               	movf	matrix_Main@data,w
 17259  1488  0086               	movwf	6
 17260  1489  085B               	movf	matrix_Main@data+1,w
 17261  148A  0087               	movwf	7
 17262  148B  3155               	addfsr 1,21
 17263  148C  3000               	movlw	0
 17264  148D  3FC0               	movwi [0]fsr1
 17265  148E  3FC1               	movwi [1]fsr1
 17266                           
 17267                           ;matrix_task.c: 290: data->holdCountBX = 0;
 17268  148F  085A               	movf	matrix_Main@data,w
 17269  1490  0086               	movwf	6
 17270  1491  085B               	movf	matrix_Main@data+1,w
 17271  1492  0087               	movwf	7
 17272  1493  3157               	addfsr 1,23
 17273  1494  3000               	movlw	0
 17274  1495  3FC0               	movwi [0]fsr1
 17275  1496  3FC1               	movwi [1]fsr1
 17276                           
 17277                           ;matrix_task.c: 291: data->holdCountBY = 0;
 17278  1497  085A               	movf	matrix_Main@data,w
 17279  1498  0086               	movwf	6
 17280  1499  085B               	movf	matrix_Main@data+1,w
 17281  149A  0087               	movwf	7
 17282  149B  3159               	addfsr 1,25
 17283  149C  3000               	movlw	0
 17284  149D  3FC0               	movwi [0]fsr1
 17285  149E  3FC1               	movwi [1]fsr1
 17286                           
 17287                           ;matrix_task.c: 292: data->holdCountBA = 0;
 17288  149F  085A               	movf	matrix_Main@data,w
 17289  14A0  0086               	movwf	6
 17290  14A1  085B               	movf	matrix_Main@data+1,w
 17291  14A2  0087               	movwf	7
 17292  14A3  315B               	addfsr 1,27
 17293  14A4  3000               	movlw	0
 17294  14A5  3FC0               	movwi [0]fsr1
 17295  14A6  3FC1               	movwi [1]fsr1
 17296                           
 17297                           ;matrix_task.c: 293: data->noholdCount = 0;
 17298  14A7  085A               	movf	matrix_Main@data,w
 17299  14A8  0086               	movwf	6
 17300  14A9  085B               	movf	matrix_Main@data+1,w
 17301  14AA  0087               	movwf	7
 17302  14AB  315D               	addfsr 1,29
 17303  14AC  3000               	movlw	0
 17304  14AD  3FC0               	movwi [0]fsr1
 17305  14AE  3FC1               	movwi [1]fsr1
 17306                           
 17307                           ;matrix_task.c: 294: data->displayTickdown = 300;
 17308  14AF  085A               	movf	matrix_Main@data,w
 17309  14B0  0086               	movwf	6
 17310  14B1  085B               	movf	matrix_Main@data+1,w
 17311  14B2  0087               	movwf	7
 17312  14B3  3147               	addfsr 1,7
 17313  14B4  302C               	movlw	44
 17314  14B5  3FC0               	movwi [0]fsr1
 17315  14B6  3001               	movlw	1
 17316  14B7  3FC1               	movwi [1]fsr1
 17317                           
 17318                           ;matrix_task.c: 295: break;
 17319  14B8  2FB4               	goto	l10291
 17320  14B9                     l10137:	
 17321                           ;matrix_task.c: 296: case 1 | 4:
 17322                           
 17323                           
 17324                           ;matrix_task.c: 298: if (data->holdCountAX == holdvalue){
 17325  14B9  085A               	movf	matrix_Main@data,w
 17326  14BA  0086               	movwf	6
 17327  14BB  085B               	movf	matrix_Main@data+1,w
 17328  14BC  0087               	movwf	7
 17329  14BD  3155               	addfsr 1,21
 17330  14BE  3F40               	moviw [0]fsr1
 17331  14BF  00D4               	movwf	??_matrix_Main
 17332  14C0  3F41               	moviw [1]fsr1
 17333  14C1  00D5               	movwf	??_matrix_Main+1
 17334  14C2  0859               	movf	matrix_Main@holdvalue,w
 17335  14C3  00D6               	movwf	??_matrix_Main+2
 17336  14C4  01D7               	clrf	??_matrix_Main+3
 17337  14C5  0855               	movf	??_matrix_Main+1,w
 17338  14C6  0657               	xorwf	??_matrix_Main+3,w
 17339  14C7  1D03               	skipz
 17340  14C8  2CCB               	goto	u6425
 17341  14C9  0854               	movf	??_matrix_Main,w
 17342  14CA  0656               	xorwf	??_matrix_Main+2,w
 17343  14CB                     u6425:	
 17344  14CB  1D03               	skipz
 17345  14CC  2CEA               	goto	l10143
 17346                           
 17347                           ;matrix_task.c: 299: matrix_found = matrix_secret_check(data, 1 | 4);
 17348  14CD  085B               	movf	matrix_Main@data+1,w
 17349  14CE  00F8               	movwf	matrix_secret_check@data+1
 17350  14CF  085A               	movf	matrix_Main@data,w
 17351  14D0  00F7               	movwf	matrix_secret_check@data
 17352  14D1  3005               	movlw	5
 17353  14D2  00D4               	movwf	??_matrix_Main
 17354  14D3  0854               	movf	??_matrix_Main,w
 17355  14D4  00F9               	movwf	matrix_secret_check@buttonPressed
 17356  14D5  31A4  24CD  3190   	fcall	_matrix_secret_check
 17357  14D8  0020               	movlb	0	; select bank0
 17358  14D9  00D5               	movwf	??_matrix_Main+1
 17359  14DA  0855               	movf	??_matrix_Main+1,w
 17360  14DB  0021               	movlb	1	; select bank1
 17361  14DC  00C2               	movwf	_matrix_found^(0+128)
 17362                           
 17363                           ;matrix_task.c: 300: data->display_state = MATRIX_AX;
 17364  14DD  0020               	movlb	0	; select bank0
 17365  14DE  085A               	movf	matrix_Main@data,w
 17366  14DF  3E02               	addlw	2
 17367  14E0  00D4               	movwf	??_matrix_Main
 17368  14E1  3000               	movlw	0
 17369  14E2  3D5B               	addwfc	matrix_Main@data+1,w
 17370  14E3  00D5               	movwf	??_matrix_Main+1
 17371  14E4  0854               	movf	??_matrix_Main,w
 17372  14E5  0086               	movwf	6
 17373  14E6  0855               	movf	??_matrix_Main+1,w
 17374  14E7  0087               	movwf	7
 17375  14E8  3004               	movlw	4
 17376  14E9  0081               	movwf	1
 17377  14EA                     l10143:	
 17378                           
 17379                           ;matrix_task.c: 301: }
 17380                           ;matrix_task.c: 302: data->holdCountA = 0;
 17381  14EA  085A               	movf	matrix_Main@data,w
 17382  14EB  0086               	movwf	6
 17383  14EC  085B               	movf	matrix_Main@data+1,w
 17384  14ED  0087               	movwf	7
 17385  14EE  3149               	addfsr 1,9
 17386  14EF  3000               	movlw	0
 17387  14F0  3FC0               	movwi [0]fsr1
 17388  14F1  3FC1               	movwi [1]fsr1
 17389                           
 17390                           ;matrix_task.c: 303: data->holdCountB = 0;
 17391  14F2  085A               	movf	matrix_Main@data,w
 17392  14F3  0086               	movwf	6
 17393  14F4  085B               	movf	matrix_Main@data+1,w
 17394  14F5  0087               	movwf	7
 17395  14F6  314B               	addfsr 1,11
 17396  14F7  3000               	movlw	0
 17397  14F8  3FC0               	movwi [0]fsr1
 17398  14F9  3FC1               	movwi [1]fsr1
 17399                           
 17400                           ;matrix_task.c: 304: data->holdCountX = 0;
 17401  14FA  085A               	movf	matrix_Main@data,w
 17402  14FB  0086               	movwf	6
 17403  14FC  085B               	movf	matrix_Main@data+1,w
 17404  14FD  0087               	movwf	7
 17405  14FE  314D               	addfsr 1,13
 17406  14FF  3000               	movlw	0
 17407  1500  3FC0               	movwi [0]fsr1
 17408  1501  3FC1               	movwi [1]fsr1
 17409                           
 17410                           ;matrix_task.c: 305: data->holdCountY = 0;
 17411  1502  085A               	movf	matrix_Main@data,w
 17412  1503  0086               	movwf	6
 17413  1504  085B               	movf	matrix_Main@data+1,w
 17414  1505  0087               	movwf	7
 17415  1506  314F               	addfsr 1,15
 17416  1507  3000               	movlw	0
 17417  1508  3FC0               	movwi [0]fsr1
 17418  1509  3FC1               	movwi [1]fsr1
 17419                           
 17420                           ;matrix_task.c: 306: data->holdCountXY = 0;
 17421  150A  085A               	movf	matrix_Main@data,w
 17422  150B  0086               	movwf	6
 17423  150C  085B               	movf	matrix_Main@data+1,w
 17424  150D  0087               	movwf	7
 17425  150E  3151               	addfsr 1,17
 17426  150F  3000               	movlw	0
 17427  1510  3FC0               	movwi [0]fsr1
 17428  1511  3FC1               	movwi [1]fsr1
 17429                           
 17430                           ;matrix_task.c: 307: data->holdCountAY = 0;
 17431  1512  085A               	movf	matrix_Main@data,w
 17432  1513  0086               	movwf	6
 17433  1514  085B               	movf	matrix_Main@data+1,w
 17434  1515  0087               	movwf	7
 17435  1516  3153               	addfsr 1,19
 17436  1517  3000               	movlw	0
 17437  1518  3FC0               	movwi [0]fsr1
 17438  1519  3FC1               	movwi [1]fsr1
 17439                           
 17440                           ;matrix_task.c: 308: data->holdCountAX += 1;
 17441  151A  085A               	movf	matrix_Main@data,w
 17442  151B  0086               	movwf	6
 17443  151C  085B               	movf	matrix_Main@data+1,w
 17444  151D  0087               	movwf	7
 17445  151E  3155               	addfsr 1,21
 17446  151F  3001               	movlw	1
 17447  1520  0781               	addwf	1,f
 17448  1521  3141               	addfsr 1,1
 17449  1522  1803               	skipnc
 17450  1523  0A81               	incf	1,f
 17451                           
 17452                           ;matrix_task.c: 309: data->holdCountBX = 0;
 17453  1524  085A               	movf	matrix_Main@data,w
 17454  1525  0086               	movwf	6
 17455  1526  085B               	movf	matrix_Main@data+1,w
 17456  1527  0087               	movwf	7
 17457  1528  3157               	addfsr 1,23
 17458  1529  3000               	movlw	0
 17459  152A  3FC0               	movwi [0]fsr1
 17460  152B  3FC1               	movwi [1]fsr1
 17461                           
 17462                           ;matrix_task.c: 310: data->holdCountBY = 0;
 17463  152C  085A               	movf	matrix_Main@data,w
 17464  152D  0086               	movwf	6
 17465  152E  085B               	movf	matrix_Main@data+1,w
 17466  152F  0087               	movwf	7
 17467  1530  3159               	addfsr 1,25
 17468  1531  3000               	movlw	0
 17469  1532  3FC0               	movwi [0]fsr1
 17470  1533  3FC1               	movwi [1]fsr1
 17471                           
 17472                           ;matrix_task.c: 311: data->holdCountBA = 0;
 17473  1534  085A               	movf	matrix_Main@data,w
 17474  1535  0086               	movwf	6
 17475  1536  085B               	movf	matrix_Main@data+1,w
 17476  1537  0087               	movwf	7
 17477  1538  315B               	addfsr 1,27
 17478  1539  3000               	movlw	0
 17479  153A  3FC0               	movwi [0]fsr1
 17480  153B  3FC1               	movwi [1]fsr1
 17481                           
 17482                           ;matrix_task.c: 312: data->noholdCount = 0;
 17483  153C  085A               	movf	matrix_Main@data,w
 17484  153D  0086               	movwf	6
 17485  153E  085B               	movf	matrix_Main@data+1,w
 17486  153F  0087               	movwf	7
 17487  1540  315D               	addfsr 1,29
 17488  1541  3000               	movlw	0
 17489  1542  3FC0               	movwi [0]fsr1
 17490  1543  3FC1               	movwi [1]fsr1
 17491                           
 17492                           ;matrix_task.c: 313: data->displayTickdown = 300;
 17493  1544  085A               	movf	matrix_Main@data,w
 17494  1545  0086               	movwf	6
 17495  1546  085B               	movf	matrix_Main@data+1,w
 17496  1547  0087               	movwf	7
 17497  1548  3147               	addfsr 1,7
 17498  1549  302C               	movlw	44
 17499  154A  3FC0               	movwi [0]fsr1
 17500  154B  3001               	movlw	1
 17501  154C  3FC1               	movwi [1]fsr1
 17502                           
 17503                           ;matrix_task.c: 314: break;
 17504  154D  2FB4               	goto	l10291
 17505  154E                     l10167:	
 17506                           ;matrix_task.c: 315: case 2 | 4:
 17507                           
 17508                           
 17509                           ;matrix_task.c: 317: if (data->holdCountBX == holdvalue){
 17510  154E  085A               	movf	matrix_Main@data,w
 17511  154F  0086               	movwf	6
 17512  1550  085B               	movf	matrix_Main@data+1,w
 17513  1551  0087               	movwf	7
 17514  1552  3157               	addfsr 1,23
 17515  1553  3F40               	moviw [0]fsr1
 17516  1554  00D4               	movwf	??_matrix_Main
 17517  1555  3F41               	moviw [1]fsr1
 17518  1556  00D5               	movwf	??_matrix_Main+1
 17519  1557  0859               	movf	matrix_Main@holdvalue,w
 17520  1558  00D6               	movwf	??_matrix_Main+2
 17521  1559  01D7               	clrf	??_matrix_Main+3
 17522  155A  0855               	movf	??_matrix_Main+1,w
 17523  155B  0657               	xorwf	??_matrix_Main+3,w
 17524  155C  1D03               	skipz
 17525  155D  2D60               	goto	u6435
 17526  155E  0854               	movf	??_matrix_Main,w
 17527  155F  0656               	xorwf	??_matrix_Main+2,w
 17528  1560                     u6435:	
 17529  1560  1D03               	skipz
 17530  1561  2D7F               	goto	l10173
 17531                           
 17532                           ;matrix_task.c: 318: matrix_found = matrix_secret_check(data, 2 | 4);
 17533  1562  085B               	movf	matrix_Main@data+1,w
 17534  1563  00F8               	movwf	matrix_secret_check@data+1
 17535  1564  085A               	movf	matrix_Main@data,w
 17536  1565  00F7               	movwf	matrix_secret_check@data
 17537  1566  3006               	movlw	6
 17538  1567  00D4               	movwf	??_matrix_Main
 17539  1568  0854               	movf	??_matrix_Main,w
 17540  1569  00F9               	movwf	matrix_secret_check@buttonPressed
 17541  156A  31A4  24CD  3190   	fcall	_matrix_secret_check
 17542  156D  0020               	movlb	0	; select bank0
 17543  156E  00D5               	movwf	??_matrix_Main+1
 17544  156F  0855               	movf	??_matrix_Main+1,w
 17545  1570  0021               	movlb	1	; select bank1
 17546  1571  00C2               	movwf	_matrix_found^(0+128)
 17547                           
 17548                           ;matrix_task.c: 319: data->display_state = MATRIX_BX;
 17549  1572  0020               	movlb	0	; select bank0
 17550  1573  085A               	movf	matrix_Main@data,w
 17551  1574  3E02               	addlw	2
 17552  1575  00D4               	movwf	??_matrix_Main
 17553  1576  3000               	movlw	0
 17554  1577  3D5B               	addwfc	matrix_Main@data+1,w
 17555  1578  00D5               	movwf	??_matrix_Main+1
 17556  1579  0854               	movf	??_matrix_Main,w
 17557  157A  0086               	movwf	6
 17558  157B  0855               	movf	??_matrix_Main+1,w
 17559  157C  0087               	movwf	7
 17560  157D  3007               	movlw	7
 17561  157E  0081               	movwf	1
 17562  157F                     l10173:	
 17563                           
 17564                           ;matrix_task.c: 320: }
 17565                           ;matrix_task.c: 321: data->holdCountA = 0;
 17566  157F  085A               	movf	matrix_Main@data,w
 17567  1580  0086               	movwf	6
 17568  1581  085B               	movf	matrix_Main@data+1,w
 17569  1582  0087               	movwf	7
 17570  1583  3149               	addfsr 1,9
 17571  1584  3000               	movlw	0
 17572  1585  3FC0               	movwi [0]fsr1
 17573  1586  3FC1               	movwi [1]fsr1
 17574                           
 17575                           ;matrix_task.c: 322: data->holdCountB = 0;
 17576  1587  085A               	movf	matrix_Main@data,w
 17577  1588  0086               	movwf	6
 17578  1589  085B               	movf	matrix_Main@data+1,w
 17579  158A  0087               	movwf	7
 17580  158B  314B               	addfsr 1,11
 17581  158C  3000               	movlw	0
 17582  158D  3FC0               	movwi [0]fsr1
 17583  158E  3FC1               	movwi [1]fsr1
 17584                           
 17585                           ;matrix_task.c: 323: data->holdCountX = 0;
 17586  158F  085A               	movf	matrix_Main@data,w
 17587  1590  0086               	movwf	6
 17588  1591  085B               	movf	matrix_Main@data+1,w
 17589  1592  0087               	movwf	7
 17590  1593  314D               	addfsr 1,13
 17591  1594  3000               	movlw	0
 17592  1595  3FC0               	movwi [0]fsr1
 17593  1596  3FC1               	movwi [1]fsr1
 17594                           
 17595                           ;matrix_task.c: 324: data->holdCountY = 0;
 17596  1597  085A               	movf	matrix_Main@data,w
 17597  1598  0086               	movwf	6
 17598  1599  085B               	movf	matrix_Main@data+1,w
 17599  159A  0087               	movwf	7
 17600  159B  314F               	addfsr 1,15
 17601  159C  3000               	movlw	0
 17602  159D  3FC0               	movwi [0]fsr1
 17603  159E  3FC1               	movwi [1]fsr1
 17604                           
 17605                           ;matrix_task.c: 325: data->holdCountXY = 0;
 17606  159F  085A               	movf	matrix_Main@data,w
 17607  15A0  0086               	movwf	6
 17608  15A1  085B               	movf	matrix_Main@data+1,w
 17609  15A2  0087               	movwf	7
 17610  15A3  3151               	addfsr 1,17
 17611  15A4  3000               	movlw	0
 17612  15A5  3FC0               	movwi [0]fsr1
 17613  15A6  3FC1               	movwi [1]fsr1
 17614                           
 17615                           ;matrix_task.c: 326: data->holdCountAY = 0;
 17616  15A7  085A               	movf	matrix_Main@data,w
 17617  15A8  0086               	movwf	6
 17618  15A9  085B               	movf	matrix_Main@data+1,w
 17619  15AA  0087               	movwf	7
 17620  15AB  3153               	addfsr 1,19
 17621  15AC  3000               	movlw	0
 17622  15AD  3FC0               	movwi [0]fsr1
 17623  15AE  3FC1               	movwi [1]fsr1
 17624                           
 17625                           ;matrix_task.c: 327: data->holdCountAX = 0;
 17626  15AF  085A               	movf	matrix_Main@data,w
 17627  15B0  0086               	movwf	6
 17628  15B1  085B               	movf	matrix_Main@data+1,w
 17629  15B2  0087               	movwf	7
 17630  15B3  3155               	addfsr 1,21
 17631  15B4  3000               	movlw	0
 17632  15B5  3FC0               	movwi [0]fsr1
 17633  15B6  3FC1               	movwi [1]fsr1
 17634                           
 17635                           ;matrix_task.c: 328: data->holdCountBX += 1;
 17636  15B7  085A               	movf	matrix_Main@data,w
 17637  15B8  0086               	movwf	6
 17638  15B9  085B               	movf	matrix_Main@data+1,w
 17639  15BA  0087               	movwf	7
 17640  15BB  3157               	addfsr 1,23
 17641  15BC  3001               	movlw	1
 17642  15BD  0781               	addwf	1,f
 17643  15BE  3141               	addfsr 1,1
 17644  15BF  1803               	skipnc
 17645  15C0  0A81               	incf	1,f
 17646                           
 17647                           ;matrix_task.c: 329: data->holdCountBY = 0;
 17648  15C1  085A               	movf	matrix_Main@data,w
 17649  15C2  0086               	movwf	6
 17650  15C3  085B               	movf	matrix_Main@data+1,w
 17651  15C4  0087               	movwf	7
 17652  15C5  3159               	addfsr 1,25
 17653  15C6  3000               	movlw	0
 17654  15C7  3FC0               	movwi [0]fsr1
 17655  15C8  3FC1               	movwi [1]fsr1
 17656                           
 17657                           ;matrix_task.c: 330: data->holdCountBA = 0;
 17658  15C9  085A               	movf	matrix_Main@data,w
 17659  15CA  0086               	movwf	6
 17660  15CB  085B               	movf	matrix_Main@data+1,w
 17661  15CC  0087               	movwf	7
 17662  15CD  315B               	addfsr 1,27
 17663  15CE  3000               	movlw	0
 17664  15CF  3FC0               	movwi [0]fsr1
 17665  15D0  3FC1               	movwi [1]fsr1
 17666                           
 17667                           ;matrix_task.c: 331: data->noholdCount = 0;
 17668  15D1  085A               	movf	matrix_Main@data,w
 17669  15D2  0086               	movwf	6
 17670  15D3  085B               	movf	matrix_Main@data+1,w
 17671  15D4  0087               	movwf	7
 17672  15D5  315D               	addfsr 1,29
 17673  15D6  3000               	movlw	0
 17674  15D7  3FC0               	movwi [0]fsr1
 17675  15D8  3FC1               	movwi [1]fsr1
 17676                           
 17677                           ;matrix_task.c: 332: data->displayTickdown = 300;
 17678  15D9  085A               	movf	matrix_Main@data,w
 17679  15DA  0086               	movwf	6
 17680  15DB  085B               	movf	matrix_Main@data+1,w
 17681  15DC  0087               	movwf	7
 17682  15DD  3147               	addfsr 1,7
 17683  15DE  302C               	movlw	44
 17684  15DF  3FC0               	movwi [0]fsr1
 17685  15E0  3001               	movlw	1
 17686  15E1  3FC1               	movwi [1]fsr1
 17687                           
 17688                           ;matrix_task.c: 333: break;
 17689  15E2  2FB4               	goto	l10291
 17690  15E3                     l10197:	
 17691                           ;matrix_task.c: 334: case 2 | 8:
 17692                           
 17693                           
 17694                           ;matrix_task.c: 336: if (data->holdCountBY == holdvalue){
 17695  15E3  085A               	movf	matrix_Main@data,w
 17696  15E4  0086               	movwf	6
 17697  15E5  085B               	movf	matrix_Main@data+1,w
 17698  15E6  0087               	movwf	7
 17699  15E7  3159               	addfsr 1,25
 17700  15E8  3F40               	moviw [0]fsr1
 17701  15E9  00D4               	movwf	??_matrix_Main
 17702  15EA  3F41               	moviw [1]fsr1
 17703  15EB  00D5               	movwf	??_matrix_Main+1
 17704  15EC  0859               	movf	matrix_Main@holdvalue,w
 17705  15ED  00D6               	movwf	??_matrix_Main+2
 17706  15EE  01D7               	clrf	??_matrix_Main+3
 17707  15EF  0855               	movf	??_matrix_Main+1,w
 17708  15F0  0657               	xorwf	??_matrix_Main+3,w
 17709  15F1  1D03               	skipz
 17710  15F2  2DF5               	goto	u6445
 17711  15F3  0854               	movf	??_matrix_Main,w
 17712  15F4  0656               	xorwf	??_matrix_Main+2,w
 17713  15F5                     u6445:	
 17714  15F5  1D03               	skipz
 17715  15F6  2E14               	goto	l10203
 17716                           
 17717                           ;matrix_task.c: 337: matrix_found = matrix_secret_check(data, 2 | 8);
 17718  15F7  085B               	movf	matrix_Main@data+1,w
 17719  15F8  00F8               	movwf	matrix_secret_check@data+1
 17720  15F9  085A               	movf	matrix_Main@data,w
 17721  15FA  00F7               	movwf	matrix_secret_check@data
 17722  15FB  300A               	movlw	10
 17723  15FC  00D4               	movwf	??_matrix_Main
 17724  15FD  0854               	movf	??_matrix_Main,w
 17725  15FE  00F9               	movwf	matrix_secret_check@buttonPressed
 17726  15FF  31A4  24CD  3190   	fcall	_matrix_secret_check
 17727  1602  0020               	movlb	0	; select bank0
 17728  1603  00D5               	movwf	??_matrix_Main+1
 17729  1604  0855               	movf	??_matrix_Main+1,w
 17730  1605  0021               	movlb	1	; select bank1
 17731  1606  00C2               	movwf	_matrix_found^(0+128)
 17732                           
 17733                           ;matrix_task.c: 338: data->display_state = MATRIX_BY;
 17734  1607  0020               	movlb	0	; select bank0
 17735  1608  085A               	movf	matrix_Main@data,w
 17736  1609  3E02               	addlw	2
 17737  160A  00D4               	movwf	??_matrix_Main
 17738  160B  3000               	movlw	0
 17739  160C  3D5B               	addwfc	matrix_Main@data+1,w
 17740  160D  00D5               	movwf	??_matrix_Main+1
 17741  160E  0854               	movf	??_matrix_Main,w
 17742  160F  0086               	movwf	6
 17743  1610  0855               	movf	??_matrix_Main+1,w
 17744  1611  0087               	movwf	7
 17745  1612  3009               	movlw	9
 17746  1613  0081               	movwf	1
 17747  1614                     l10203:	
 17748                           
 17749                           ;matrix_task.c: 339: }
 17750                           ;matrix_task.c: 340: data->holdCountA = 0;
 17751  1614  085A               	movf	matrix_Main@data,w
 17752  1615  0086               	movwf	6
 17753  1616  085B               	movf	matrix_Main@data+1,w
 17754  1617  0087               	movwf	7
 17755  1618  3149               	addfsr 1,9
 17756  1619  3000               	movlw	0
 17757  161A  3FC0               	movwi [0]fsr1
 17758  161B  3FC1               	movwi [1]fsr1
 17759                           
 17760                           ;matrix_task.c: 341: data->holdCountB = 0;
 17761  161C  085A               	movf	matrix_Main@data,w
 17762  161D  0086               	movwf	6
 17763  161E  085B               	movf	matrix_Main@data+1,w
 17764  161F  0087               	movwf	7
 17765  1620  314B               	addfsr 1,11
 17766  1621  3000               	movlw	0
 17767  1622  3FC0               	movwi [0]fsr1
 17768  1623  3FC1               	movwi [1]fsr1
 17769                           
 17770                           ;matrix_task.c: 342: data->holdCountX = 0;
 17771  1624  085A               	movf	matrix_Main@data,w
 17772  1625  0086               	movwf	6
 17773  1626  085B               	movf	matrix_Main@data+1,w
 17774  1627  0087               	movwf	7
 17775  1628  314D               	addfsr 1,13
 17776  1629  3000               	movlw	0
 17777  162A  3FC0               	movwi [0]fsr1
 17778  162B  3FC1               	movwi [1]fsr1
 17779                           
 17780                           ;matrix_task.c: 343: data->holdCountY = 0;
 17781  162C  085A               	movf	matrix_Main@data,w
 17782  162D  0086               	movwf	6
 17783  162E  085B               	movf	matrix_Main@data+1,w
 17784  162F  0087               	movwf	7
 17785  1630  314F               	addfsr 1,15
 17786  1631  3000               	movlw	0
 17787  1632  3FC0               	movwi [0]fsr1
 17788  1633  3FC1               	movwi [1]fsr1
 17789                           
 17790                           ;matrix_task.c: 344: data->holdCountXY = 0;
 17791  1634  085A               	movf	matrix_Main@data,w
 17792  1635  0086               	movwf	6
 17793  1636  085B               	movf	matrix_Main@data+1,w
 17794  1637  0087               	movwf	7
 17795  1638  3151               	addfsr 1,17
 17796  1639  3000               	movlw	0
 17797  163A  3FC0               	movwi [0]fsr1
 17798  163B  3FC1               	movwi [1]fsr1
 17799                           
 17800                           ;matrix_task.c: 345: data->holdCountAY = 0;
 17801  163C  085A               	movf	matrix_Main@data,w
 17802  163D  0086               	movwf	6
 17803  163E  085B               	movf	matrix_Main@data+1,w
 17804  163F  0087               	movwf	7
 17805  1640  3153               	addfsr 1,19
 17806  1641  3000               	movlw	0
 17807  1642  3FC0               	movwi [0]fsr1
 17808  1643  3FC1               	movwi [1]fsr1
 17809                           
 17810                           ;matrix_task.c: 346: data->holdCountAX = 0;
 17811  1644  085A               	movf	matrix_Main@data,w
 17812  1645  0086               	movwf	6
 17813  1646  085B               	movf	matrix_Main@data+1,w
 17814  1647  0087               	movwf	7
 17815  1648  3155               	addfsr 1,21
 17816  1649  3000               	movlw	0
 17817  164A  3FC0               	movwi [0]fsr1
 17818  164B  3FC1               	movwi [1]fsr1
 17819                           
 17820                           ;matrix_task.c: 347: data->holdCountBX = 0;
 17821  164C  085A               	movf	matrix_Main@data,w
 17822  164D  0086               	movwf	6
 17823  164E  085B               	movf	matrix_Main@data+1,w
 17824  164F  0087               	movwf	7
 17825  1650  3157               	addfsr 1,23
 17826  1651  3000               	movlw	0
 17827  1652  3FC0               	movwi [0]fsr1
 17828  1653  3FC1               	movwi [1]fsr1
 17829                           
 17830                           ;matrix_task.c: 348: data->holdCountBY += 1;
 17831  1654  085A               	movf	matrix_Main@data,w
 17832  1655  0086               	movwf	6
 17833  1656  085B               	movf	matrix_Main@data+1,w
 17834  1657  0087               	movwf	7
 17835  1658  3159               	addfsr 1,25
 17836  1659  3001               	movlw	1
 17837  165A  0781               	addwf	1,f
 17838  165B  3141               	addfsr 1,1
 17839  165C  1803               	skipnc
 17840  165D  0A81               	incf	1,f
 17841                           
 17842                           ;matrix_task.c: 349: data->holdCountBA = 0;
 17843  165E  085A               	movf	matrix_Main@data,w
 17844  165F  0086               	movwf	6
 17845  1660  085B               	movf	matrix_Main@data+1,w
 17846  1661  0087               	movwf	7
 17847  1662  315B               	addfsr 1,27
 17848  1663  3000               	movlw	0
 17849  1664  3FC0               	movwi [0]fsr1
 17850  1665  3FC1               	movwi [1]fsr1
 17851                           
 17852                           ;matrix_task.c: 350: data->noholdCount = 0;
 17853  1666  085A               	movf	matrix_Main@data,w
 17854  1667  0086               	movwf	6
 17855  1668  085B               	movf	matrix_Main@data+1,w
 17856  1669  0087               	movwf	7
 17857  166A  315D               	addfsr 1,29
 17858  166B  3000               	movlw	0
 17859  166C  3FC0               	movwi [0]fsr1
 17860  166D  3FC1               	movwi [1]fsr1
 17861                           
 17862                           ;matrix_task.c: 351: data->displayTickdown = 300;
 17863  166E  085A               	movf	matrix_Main@data,w
 17864  166F  0086               	movwf	6
 17865  1670  085B               	movf	matrix_Main@data+1,w
 17866  1671  0087               	movwf	7
 17867  1672  3147               	addfsr 1,7
 17868  1673  302C               	movlw	44
 17869  1674  3FC0               	movwi [0]fsr1
 17870  1675  3001               	movlw	1
 17871  1676  3FC1               	movwi [1]fsr1
 17872                           
 17873                           ;matrix_task.c: 353: break;
 17874  1677  2FB4               	goto	l10291
 17875  1678                     l10227:	
 17876                           ;matrix_task.c: 354: case 2 | 1:
 17877                           
 17878                           
 17879                           ;matrix_task.c: 356: if (data->holdCountBA == holdvalue){
 17880  1678  085A               	movf	matrix_Main@data,w
 17881  1679  0086               	movwf	6
 17882  167A  085B               	movf	matrix_Main@data+1,w
 17883  167B  0087               	movwf	7
 17884  167C  315B               	addfsr 1,27
 17885  167D  3F40               	moviw [0]fsr1
 17886  167E  00D4               	movwf	??_matrix_Main
 17887  167F  3F41               	moviw [1]fsr1
 17888  1680  00D5               	movwf	??_matrix_Main+1
 17889  1681  0859               	movf	matrix_Main@holdvalue,w
 17890  1682  00D6               	movwf	??_matrix_Main+2
 17891  1683  01D7               	clrf	??_matrix_Main+3
 17892  1684  0855               	movf	??_matrix_Main+1,w
 17893  1685  0657               	xorwf	??_matrix_Main+3,w
 17894  1686  1D03               	skipz
 17895  1687  2E8A               	goto	u6455
 17896  1688  0854               	movf	??_matrix_Main,w
 17897  1689  0656               	xorwf	??_matrix_Main+2,w
 17898  168A                     u6455:	
 17899  168A  1D03               	skipz
 17900  168B  2EA9               	goto	l10233
 17901                           
 17902                           ;matrix_task.c: 357: matrix_found = matrix_secret_check(data, 2 | 1);
 17903  168C  085B               	movf	matrix_Main@data+1,w
 17904  168D  00F8               	movwf	matrix_secret_check@data+1
 17905  168E  085A               	movf	matrix_Main@data,w
 17906  168F  00F7               	movwf	matrix_secret_check@data
 17907  1690  3003               	movlw	3
 17908  1691  00D4               	movwf	??_matrix_Main
 17909  1692  0854               	movf	??_matrix_Main,w
 17910  1693  00F9               	movwf	matrix_secret_check@buttonPressed
 17911  1694  31A4  24CD  3190   	fcall	_matrix_secret_check
 17912  1697  0020               	movlb	0	; select bank0
 17913  1698  00D5               	movwf	??_matrix_Main+1
 17914  1699  0855               	movf	??_matrix_Main+1,w
 17915  169A  0021               	movlb	1	; select bank1
 17916  169B  00C2               	movwf	_matrix_found^(0+128)
 17917                           
 17918                           ;matrix_task.c: 358: data->display_state = MATRIX_BA;
 17919  169C  0020               	movlb	0	; select bank0
 17920  169D  085A               	movf	matrix_Main@data,w
 17921  169E  3E02               	addlw	2
 17922  169F  00D4               	movwf	??_matrix_Main
 17923  16A0  3000               	movlw	0
 17924  16A1  3D5B               	addwfc	matrix_Main@data+1,w
 17925  16A2  00D5               	movwf	??_matrix_Main+1
 17926  16A3  0854               	movf	??_matrix_Main,w
 17927  16A4  0086               	movwf	6
 17928  16A5  0855               	movf	??_matrix_Main+1,w
 17929  16A6  0087               	movwf	7
 17930  16A7  3006               	movlw	6
 17931  16A8  0081               	movwf	1
 17932  16A9                     l10233:	
 17933                           
 17934                           ;matrix_task.c: 359: }
 17935                           ;matrix_task.c: 360: data->holdCountA = 0;
 17936  16A9  085A               	movf	matrix_Main@data,w
 17937  16AA  0086               	movwf	6
 17938  16AB  085B               	movf	matrix_Main@data+1,w
 17939  16AC  0087               	movwf	7
 17940  16AD  3149               	addfsr 1,9
 17941  16AE  3000               	movlw	0
 17942  16AF  3FC0               	movwi [0]fsr1
 17943  16B0  3FC1               	movwi [1]fsr1
 17944                           
 17945                           ;matrix_task.c: 361: data->holdCountB = 0;
 17946  16B1  085A               	movf	matrix_Main@data,w
 17947  16B2  0086               	movwf	6
 17948  16B3  085B               	movf	matrix_Main@data+1,w
 17949  16B4  0087               	movwf	7
 17950  16B5  314B               	addfsr 1,11
 17951  16B6  3000               	movlw	0
 17952  16B7  3FC0               	movwi [0]fsr1
 17953  16B8  3FC1               	movwi [1]fsr1
 17954                           
 17955                           ;matrix_task.c: 362: data->holdCountX = 0;
 17956  16B9  085A               	movf	matrix_Main@data,w
 17957  16BA  0086               	movwf	6
 17958  16BB  085B               	movf	matrix_Main@data+1,w
 17959  16BC  0087               	movwf	7
 17960  16BD  314D               	addfsr 1,13
 17961  16BE  3000               	movlw	0
 17962  16BF  3FC0               	movwi [0]fsr1
 17963  16C0  3FC1               	movwi [1]fsr1
 17964                           
 17965                           ;matrix_task.c: 363: data->holdCountY = 0;
 17966  16C1  085A               	movf	matrix_Main@data,w
 17967  16C2  0086               	movwf	6
 17968  16C3  085B               	movf	matrix_Main@data+1,w
 17969  16C4  0087               	movwf	7
 17970  16C5  314F               	addfsr 1,15
 17971  16C6  3000               	movlw	0
 17972  16C7  3FC0               	movwi [0]fsr1
 17973  16C8  3FC1               	movwi [1]fsr1
 17974                           
 17975                           ;matrix_task.c: 364: data->holdCountXY = 0;
 17976  16C9  085A               	movf	matrix_Main@data,w
 17977  16CA  0086               	movwf	6
 17978  16CB  085B               	movf	matrix_Main@data+1,w
 17979  16CC  0087               	movwf	7
 17980  16CD  3151               	addfsr 1,17
 17981  16CE  3000               	movlw	0
 17982  16CF  3FC0               	movwi [0]fsr1
 17983  16D0  3FC1               	movwi [1]fsr1
 17984                           
 17985                           ;matrix_task.c: 365: data->holdCountAY = 0;
 17986  16D1  085A               	movf	matrix_Main@data,w
 17987  16D2  0086               	movwf	6
 17988  16D3  085B               	movf	matrix_Main@data+1,w
 17989  16D4  0087               	movwf	7
 17990  16D5  3153               	addfsr 1,19
 17991  16D6  3000               	movlw	0
 17992  16D7  3FC0               	movwi [0]fsr1
 17993  16D8  3FC1               	movwi [1]fsr1
 17994                           
 17995                           ;matrix_task.c: 366: data->holdCountAX = 0;
 17996  16D9  085A               	movf	matrix_Main@data,w
 17997  16DA  0086               	movwf	6
 17998  16DB  085B               	movf	matrix_Main@data+1,w
 17999  16DC  0087               	movwf	7
 18000  16DD  3155               	addfsr 1,21
 18001  16DE  3000               	movlw	0
 18002  16DF  3FC0               	movwi [0]fsr1
 18003  16E0  3FC1               	movwi [1]fsr1
 18004                           
 18005                           ;matrix_task.c: 367: data->holdCountBX = 0;
 18006  16E1  085A               	movf	matrix_Main@data,w
 18007  16E2  0086               	movwf	6
 18008  16E3  085B               	movf	matrix_Main@data+1,w
 18009  16E4  0087               	movwf	7
 18010  16E5  3157               	addfsr 1,23
 18011  16E6  3000               	movlw	0
 18012  16E7  3FC0               	movwi [0]fsr1
 18013  16E8  3FC1               	movwi [1]fsr1
 18014                           
 18015                           ;matrix_task.c: 368: data->holdCountBY = 0;
 18016  16E9  085A               	movf	matrix_Main@data,w
 18017  16EA  0086               	movwf	6
 18018  16EB  085B               	movf	matrix_Main@data+1,w
 18019  16EC  0087               	movwf	7
 18020  16ED  3159               	addfsr 1,25
 18021  16EE  3000               	movlw	0
 18022  16EF  3FC0               	movwi [0]fsr1
 18023  16F0  3FC1               	movwi [1]fsr1
 18024                           
 18025                           ;matrix_task.c: 369: data->holdCountBA += 1;
 18026  16F1  085A               	movf	matrix_Main@data,w
 18027  16F2  0086               	movwf	6
 18028  16F3  085B               	movf	matrix_Main@data+1,w
 18029  16F4  0087               	movwf	7
 18030  16F5  315B               	addfsr 1,27
 18031  16F6  3001               	movlw	1
 18032  16F7  0781               	addwf	1,f
 18033  16F8  3141               	addfsr 1,1
 18034  16F9  1803               	skipnc
 18035  16FA  0A81               	incf	1,f
 18036                           
 18037                           ;matrix_task.c: 370: data->noholdCount = 0;
 18038  16FB  085A               	movf	matrix_Main@data,w
 18039  16FC  0086               	movwf	6
 18040  16FD  085B               	movf	matrix_Main@data+1,w
 18041  16FE  0087               	movwf	7
 18042  16FF  315D               	addfsr 1,29
 18043  1700  3000               	movlw	0
 18044  1701  3FC0               	movwi [0]fsr1
 18045  1702  3FC1               	movwi [1]fsr1
 18046                           
 18047                           ;matrix_task.c: 371: data->displayTickdown = 300;
 18048  1703  085A               	movf	matrix_Main@data,w
 18049  1704  0086               	movwf	6
 18050  1705  085B               	movf	matrix_Main@data+1,w
 18051  1706  0087               	movwf	7
 18052  1707  3147               	addfsr 1,7
 18053  1708  302C               	movlw	44
 18054  1709  3FC0               	movwi [0]fsr1
 18055  170A  3001               	movlw	1
 18056  170B  3FC1               	movwi [1]fsr1
 18057                           
 18058                           ;matrix_task.c: 372: break;
 18059  170C  2FB4               	goto	l10291
 18060  170D                     l10257:	
 18061                           ;matrix_task.c: 373: default:
 18062                           
 18063                           
 18064                           ;matrix_task.c: 374: data->noholdCount += 1;
 18065  170D  085A               	movf	matrix_Main@data,w
 18066  170E  0086               	movwf	6
 18067  170F  085B               	movf	matrix_Main@data+1,w
 18068  1710  0087               	movwf	7
 18069  1711  315D               	addfsr 1,29
 18070  1712  3001               	movlw	1
 18071  1713  0781               	addwf	1,f
 18072  1714  3141               	addfsr 1,1
 18073  1715  1803               	skipnc
 18074  1716  0A81               	incf	1,f
 18075                           
 18076                           ;matrix_task.c: 375: data->holdCountA = 0;
 18077  1717  085A               	movf	matrix_Main@data,w
 18078  1718  0086               	movwf	6
 18079  1719  085B               	movf	matrix_Main@data+1,w
 18080  171A  0087               	movwf	7
 18081  171B  3149               	addfsr 1,9
 18082  171C  3000               	movlw	0
 18083  171D  3FC0               	movwi [0]fsr1
 18084  171E  3FC1               	movwi [1]fsr1
 18085                           
 18086                           ;matrix_task.c: 376: data->holdCountB = 0;
 18087  171F  085A               	movf	matrix_Main@data,w
 18088  1720  0086               	movwf	6
 18089  1721  085B               	movf	matrix_Main@data+1,w
 18090  1722  0087               	movwf	7
 18091  1723  314B               	addfsr 1,11
 18092  1724  3000               	movlw	0
 18093  1725  3FC0               	movwi [0]fsr1
 18094  1726  3FC1               	movwi [1]fsr1
 18095                           
 18096                           ;matrix_task.c: 377: data->holdCountX = 0;
 18097  1727  085A               	movf	matrix_Main@data,w
 18098  1728  0086               	movwf	6
 18099  1729  085B               	movf	matrix_Main@data+1,w
 18100  172A  0087               	movwf	7
 18101  172B  314D               	addfsr 1,13
 18102  172C  3000               	movlw	0
 18103  172D  3FC0               	movwi [0]fsr1
 18104  172E  3FC1               	movwi [1]fsr1
 18105                           
 18106                           ;matrix_task.c: 378: data->holdCountY = 0;
 18107  172F  085A               	movf	matrix_Main@data,w
 18108  1730  0086               	movwf	6
 18109  1731  085B               	movf	matrix_Main@data+1,w
 18110  1732  0087               	movwf	7
 18111  1733  314F               	addfsr 1,15
 18112  1734  3000               	movlw	0
 18113  1735  3FC0               	movwi [0]fsr1
 18114  1736  3FC1               	movwi [1]fsr1
 18115                           
 18116                           ;matrix_task.c: 379: data->holdCountXY = 0;
 18117  1737  085A               	movf	matrix_Main@data,w
 18118  1738  0086               	movwf	6
 18119  1739  085B               	movf	matrix_Main@data+1,w
 18120  173A  0087               	movwf	7
 18121  173B  3151               	addfsr 1,17
 18122  173C  3000               	movlw	0
 18123  173D  3FC0               	movwi [0]fsr1
 18124  173E  3FC1               	movwi [1]fsr1
 18125                           
 18126                           ;matrix_task.c: 380: data->holdCountAY = 0;
 18127  173F  085A               	movf	matrix_Main@data,w
 18128  1740  0086               	movwf	6
 18129  1741  085B               	movf	matrix_Main@data+1,w
 18130  1742  0087               	movwf	7
 18131  1743  3153               	addfsr 1,19
 18132  1744  3000               	movlw	0
 18133  1745  3FC0               	movwi [0]fsr1
 18134  1746  3FC1               	movwi [1]fsr1
 18135                           
 18136                           ;matrix_task.c: 381: data->holdCountAX = 0;
 18137  1747  085A               	movf	matrix_Main@data,w
 18138  1748  0086               	movwf	6
 18139  1749  085B               	movf	matrix_Main@data+1,w
 18140  174A  0087               	movwf	7
 18141  174B  3155               	addfsr 1,21
 18142  174C  3000               	movlw	0
 18143  174D  3FC0               	movwi [0]fsr1
 18144  174E  3FC1               	movwi [1]fsr1
 18145                           
 18146                           ;matrix_task.c: 382: data->holdCountBX = 0;
 18147  174F  085A               	movf	matrix_Main@data,w
 18148  1750  0086               	movwf	6
 18149  1751  085B               	movf	matrix_Main@data+1,w
 18150  1752  0087               	movwf	7
 18151  1753  3157               	addfsr 1,23
 18152  1754  3000               	movlw	0
 18153  1755  3FC0               	movwi [0]fsr1
 18154  1756  3FC1               	movwi [1]fsr1
 18155                           
 18156                           ;matrix_task.c: 383: data->holdCountBY = 0;
 18157  1757  085A               	movf	matrix_Main@data,w
 18158  1758  0086               	movwf	6
 18159  1759  085B               	movf	matrix_Main@data+1,w
 18160  175A  0087               	movwf	7
 18161  175B  3159               	addfsr 1,25
 18162  175C  3000               	movlw	0
 18163  175D  3FC0               	movwi [0]fsr1
 18164  175E  3FC1               	movwi [1]fsr1
 18165                           
 18166                           ;matrix_task.c: 384: data->holdCountBA = 0;
 18167  175F  085A               	movf	matrix_Main@data,w
 18168  1760  0086               	movwf	6
 18169  1761  085B               	movf	matrix_Main@data+1,w
 18170  1762  0087               	movwf	7
 18171  1763  315B               	addfsr 1,27
 18172  1764  3000               	movlw	0
 18173  1765  3FC0               	movwi [0]fsr1
 18174  1766  3FC1               	movwi [1]fsr1
 18175                           
 18176                           ;matrix_task.c: 385: if (matrix_found){
 18177  1767  0021               	movlb	1	; select bank1
 18178  1768  0842               	movf	_matrix_found^(0+128),w
 18179  1769  1903               	btfsc	3,2
 18180  176A  2F7F               	goto	l10285
 18181                           
 18182                           ;matrix_task.c: 386: data->display_state = MATRIX_DONE;
 18183  176B  0020               	movlb	0	; select bank0
 18184  176C  085A               	movf	matrix_Main@data,w
 18185  176D  3E02               	addlw	2
 18186  176E  00D4               	movwf	??_matrix_Main
 18187  176F  3000               	movlw	0
 18188  1770  3D5B               	addwfc	matrix_Main@data+1,w
 18189  1771  00D5               	movwf	??_matrix_Main+1
 18190  1772  0854               	movf	??_matrix_Main,w
 18191  1773  0086               	movwf	6
 18192  1774  0855               	movf	??_matrix_Main+1,w
 18193  1775  0087               	movwf	7
 18194  1776  300B               	movlw	11
 18195  1777  0081               	movwf	1
 18196                           
 18197                           ;matrix_task.c: 387: data->martix_state = MATRIX_SOLVED;
 18198  1778  085A               	movf	matrix_Main@data,w
 18199  1779  0086               	movwf	6
 18200  177A  085B               	movf	matrix_Main@data+1,w
 18201  177B  0087               	movwf	7
 18202  177C  3141               	addfsr 1,1
 18203  177D  0181               	clrf	1
 18204                           
 18205                           ;matrix_task.c: 388: break;
 18206  177E  2FB4               	goto	l10291
 18207  177F                     l10285:	
 18208                           
 18209                           ;matrix_task.c: 389: }
 18210                           ;matrix_task.c: 390: data->displayTickdown -= 1;
 18211  177F  0020               	movlb	0	; select bank0
 18212  1780  085A               	movf	matrix_Main@data,w
 18213  1781  0086               	movwf	6
 18214  1782  085B               	movf	matrix_Main@data+1,w
 18215  1783  0087               	movwf	7
 18216  1784  3147               	addfsr 1,7
 18217  1785  3001               	movlw	1
 18218  1786  0281               	subwf	1,f
 18219  1787  3141               	addfsr 1,1
 18220  1788  3000               	movlw	0
 18221  1789  3B81               	subwfb	1,f
 18222  178A  317F               	addfsr 1,-1
 18223                           
 18224                           ;matrix_task.c: 391: matrix_display_option(data);
 18225  178B  085B               	movf	matrix_Main@data+1,w
 18226  178C  00CD               	movwf	matrix_display_option@data+1
 18227  178D  085A               	movf	matrix_Main@data,w
 18228  178E  00CC               	movwf	matrix_display_option@data
 18229  178F  31A4  242A  3190   	fcall	_matrix_display_option
 18230                           
 18231                           ;matrix_task.c: 392: }
 18232  1792  2FB4               	goto	l10291
 18233  1793                     l10289:	
 18234  1793  0020               	movlb	0	; select bank0
 18235  1794  0858               	movf	matrix_Main@buttonPressed,w
 18236                           
 18237                           ; Switch size 1, requested type "space"
 18238                           ; Number of cases is 10, Range of values is 1 to 12
 18239                           ; switch strategies available:
 18240                           ; Name         Instructions Cycles
 18241                           ; simple_byte           31    16 (average)
 18242                           ; direct_byte           33     9 (fixed)
 18243                           ; jumptable            263     9 (fixed)
 18244                           ;	Chosen strategy is simple_byte
 18245  1795  3A01               	xorlw	1	; case 1
 18246  1796  1903               	skipnz
 18247  1797  2941               	goto	l9957
 18248  1798  3A03               	xorlw	3	; case 2
 18249  1799  1903               	skipnz
 18250  179A  29D0               	goto	l9987
 18251  179B  3A01               	xorlw	1	; case 3
 18252  179C  1903               	skipnz
 18253  179D  2E78               	goto	l10227
 18254  179E  3A07               	xorlw	7	; case 4
 18255  179F  1903               	skipnz
 18256  17A0  2A65               	goto	l10017
 18257  17A1  3A01               	xorlw	1	; case 5
 18258  17A2  1903               	skipnz
 18259  17A3  2CB9               	goto	l10137
 18260  17A4  3A03               	xorlw	3	; case 6
 18261  17A5  1903               	skipnz
 18262  17A6  2D4E               	goto	l10167
 18263  17A7  3A0E               	xorlw	14	; case 8
 18264  17A8  1903               	skipnz
 18265  17A9  2AFA               	goto	l10047
 18266  17AA  3A01               	xorlw	1	; case 9
 18267  17AB  1903               	skipnz
 18268  17AC  2C24               	goto	l10107
 18269  17AD  3A03               	xorlw	3	; case 10
 18270  17AE  1903               	skipnz
 18271  17AF  2DE3               	goto	l10197
 18272  17B0  3A06               	xorlw	6	; case 12
 18273  17B1  1903               	skipnz
 18274  17B2  2B8F               	goto	l10077
 18275  17B3  2F0D               	goto	l10257
 18276  17B4                     l10291:	
 18277                           
 18278                           ;matrix_task.c: 393: if (matrix_found){
 18279  17B4  0021               	movlb	1	; select bank1
 18280  17B5  0842               	movf	_matrix_found^(0+128),w
 18281  17B6  1903               	btfsc	3,2
 18282  17B7  2FCB               	goto	l10297
 18283                           
 18284                           ;matrix_task.c: 394: data->display_state = MATRIX_DONE;
 18285  17B8  0020               	movlb	0	; select bank0
 18286  17B9  085A               	movf	matrix_Main@data,w
 18287  17BA  3E02               	addlw	2
 18288  17BB  00D4               	movwf	??_matrix_Main
 18289  17BC  3000               	movlw	0
 18290  17BD  3D5B               	addwfc	matrix_Main@data+1,w
 18291  17BE  00D5               	movwf	??_matrix_Main+1
 18292  17BF  0854               	movf	??_matrix_Main,w
 18293  17C0  0086               	movwf	6
 18294  17C1  0855               	movf	??_matrix_Main+1,w
 18295  17C2  0087               	movwf	7
 18296  17C3  300B               	movlw	11
 18297  17C4  0081               	movwf	1
 18298                           
 18299                           ;matrix_task.c: 395: data->martix_state = MATRIX_SOLVED;
 18300  17C5  085A               	movf	matrix_Main@data,w
 18301  17C6  0086               	movwf	6
 18302  17C7  085B               	movf	matrix_Main@data+1,w
 18303  17C8  0087               	movwf	7
 18304  17C9  3141               	addfsr 1,1
 18305  17CA  0181               	clrf	1
 18306  17CB                     l10297:	
 18307                           
 18308                           ;matrix_task.c: 396: }
 18309                           ;matrix_task.c: 398: if(data->display_state == MATRIX_DONE){
 18310  17CB  0020               	movlb	0	; select bank0
 18311  17CC  085A               	movf	matrix_Main@data,w
 18312  17CD  0086               	movwf	6
 18313  17CE  085B               	movf	matrix_Main@data+1,w
 18314  17CF  0087               	movwf	7
 18315  17D0  3142               	addfsr 1,2
 18316  17D1  300B               	movlw	11
 18317  17D2  0601               	xorwf	1,w
 18318  17D3  1D03               	btfss	3,2
 18319  17D4  0008               	return
 18320                           
 18321                           ;matrix_task.c: 400: if (data->delayTickCount < 1){
 18322  17D5  085A               	movf	matrix_Main@data,w
 18323  17D6  0086               	movwf	6
 18324  17D7  085B               	movf	matrix_Main@data+1,w
 18325  17D8  0087               	movwf	7
 18326  17D9  3143               	addfsr 1,3
 18327  17DA  0016               	moviw fsr1++
 18328  17DB  0401               	iorwf	1,w
 18329  17DC  1D03               	btfss	3,2
 18330  17DD  2FF4               	goto	l10305
 18331                           
 18332                           ;matrix_task.c: 401: led_curtain(data->noholdCount);
 18333  17DE  085A               	movf	matrix_Main@data,w
 18334  17DF  0086               	movwf	6
 18335  17E0  085B               	movf	matrix_Main@data+1,w
 18336  17E1  0087               	movwf	7
 18337  17E2  315D               	addfsr 1,29
 18338  17E3  3F40               	moviw [0]fsr1
 18339  17E4  00B0               	movwf	led_curtain@counter
 18340  17E5  3F41               	moviw [1]fsr1
 18341  17E6  00B1               	movwf	led_curtain@counter+1
 18342  17E7  31B7  277E         	fcall	_led_curtain
 18343                           
 18344                           ;matrix_task.c: 402: data->delayTickCount = 20;
 18345  17E9  0020               	movlb	0	; select bank0
 18346  17EA  085A               	movf	matrix_Main@data,w
 18347  17EB  0086               	movwf	6
 18348  17EC  085B               	movf	matrix_Main@data+1,w
 18349  17ED  0087               	movwf	7
 18350  17EE  3143               	addfsr 1,3
 18351  17EF  3014               	movlw	20
 18352  17F0  3FC0               	movwi [0]fsr1
 18353  17F1  3000               	movlw	0
 18354  17F2  3FC1               	movwi [1]fsr1
 18355                           
 18356                           ;matrix_task.c: 403: }
 18357  17F3  0008               	return
 18358  17F4                     l10305:	
 18359                           
 18360                           ;matrix_task.c: 404: else {
 18361                           ;matrix_task.c: 405: data->delayTickCount -= 1;
 18362  17F4  085A               	movf	matrix_Main@data,w
 18363  17F5  0086               	movwf	6
 18364  17F6  085B               	movf	matrix_Main@data+1,w
 18365  17F7  0087               	movwf	7
 18366  17F8  3143               	addfsr 1,3
 18367  17F9  3001               	movlw	1
 18368  17FA  0281               	subwf	1,f
 18369  17FB  3141               	addfsr 1,1
 18370  17FC  3000               	movlw	0
 18371  17FD  3B81               	subwfb	1,f
 18372  17FE  317F               	addfsr 1,-1
 18373  17FF  0008               	return
 18374  1800                     __end_of_matrix_Main:	
 18375                           
 18376                           	psect	text15
 18377  2643                     __ptext15:	
 18378 ;; *************** function _secret_Main *****************
 18379 ;; Defined at:
 18380 ;;		line 99 in file "secret_task.c"
 18381 ;; Parameters:    Size  Location     Type
 18382 ;;  taskData        2   50[BANK0 ] PTR void 
 18383 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18384 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18385 ;; Auto vars:     Size  Location     Type
 18386 ;;  data            2   56[BANK0 ] PTR struct t_secret_task
 18387 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18388 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18389 ;;  buttonPresse    1   55[BANK0 ] unsigned char 
 18390 ;;  secret_found    1   54[BANK0 ] unsigned char 
 18391 ;; Return value:  Size  Location     Type
 18392 ;;                  1    wreg      void 
 18393 ;; Registers used:
 18394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18395 ;; Tracked objects:
 18396 ;;		On entry : 0/0
 18397 ;;		On exit  : 0/0
 18398 ;;		Unchanged: 0/0
 18399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18400 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18401 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18402 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18403 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18404 ;;Total ram usage:        8 bytes
 18405 ;; Hardware stack levels used:    1
 18406 ;; Hardware stack levels required when called:    6
 18407 ;; This function calls:
 18408 ;;		_nullifyBadge_buttonsGet
 18409 ;;		_secret_check
 18410 ;;		_secret_clear
 18411 ;; This function is called by:
 18412 ;;		_main
 18413 ;;		_scheduler_TaskRun
 18414 ;; This function uses a non-reentrant model
 18415 ;;
 18416                           
 18417                           
 18418                           ;psect for function _secret_Main
 18419  2643                     _secret_Main:	
 18420                           
 18421                           ;secret_task.c: 100: struct t_secret_taskData *data = (struct t_secret_taskData *) taskD
      +                          ata;
 18422                           
 18423                           ;incstack = 0
 18424                           ; Regs used in _secret_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18425  2643  0020               	movlb	0	; select bank0
 18426  2644  0853               	movf	secret_Main@taskData+1,w
 18427  2645  00D9               	movwf	secret_Main@data+1
 18428  2646  0852               	movf	secret_Main@taskData,w
 18429  2647  00D8               	movwf	secret_Main@data
 18430                           
 18431                           ;secret_task.c: 101: u8 buttonPressed, secret_found = 0;
 18432  2648  01D6               	clrf	secret_Main@secret_found
 18433                           
 18434                           ;secret_task.c: 103: buttonPressed = nullifyBadge_buttonsGet();
 18435  2649  31B5  25FD  31A6   	fcall	_nullifyBadge_buttonsGet
 18436  264C  0020               	movlb	0	; select bank0
 18437  264D  00D4               	movwf	??_secret_Main
 18438  264E  0854               	movf	??_secret_Main,w
 18439  264F  00D7               	movwf	secret_Main@buttonPressed
 18440                           
 18441                           ;secret_task.c: 104: switch (buttonPressed) {
 18442  2650  2FE3               	goto	l9819
 18443  2651                     l9733:	
 18444                           ;secret_task.c: 105: case 0:
 18445                           
 18446                           
 18447                           ;secret_task.c: 107: if (data->delayTickCount == 0){
 18448  2651  0858               	movf	secret_Main@data,w
 18449  2652  0086               	movwf	6
 18450  2653  0859               	movf	secret_Main@data+1,w
 18451  2654  0087               	movwf	7
 18452  2655  3142               	addfsr 1,2
 18453  2656  0016               	moviw fsr1++
 18454  2657  0401               	iorwf	1,w
 18455  2658  1D03               	btfss	3,2
 18456  2659  2E6B               	goto	l9739
 18457                           
 18458                           ;secret_task.c: 108: data->delayTickCount = 300;
 18459  265A  0858               	movf	secret_Main@data,w
 18460  265B  0086               	movwf	6
 18461  265C  0859               	movf	secret_Main@data+1,w
 18462  265D  0087               	movwf	7
 18463  265E  3142               	addfsr 1,2
 18464  265F  302C               	movlw	44
 18465  2660  3FC0               	movwi [0]fsr1
 18466  2661  3001               	movlw	1
 18467  2662  3FC1               	movwi [1]fsr1
 18468                           
 18469                           ;secret_task.c: 109: secret_check(data, 0);
 18470  2663  0859               	movf	secret_Main@data+1,w
 18471  2664  00F8               	movwf	secret_check@data+1
 18472  2665  0858               	movf	secret_Main@data,w
 18473  2666  00F7               	movwf	secret_check@data
 18474  2667  01F9               	clrf	secret_check@buttonPressed
 18475  2668  31A5  2588  31A6   	fcall	_secret_check
 18476  266B                     l9739:	
 18477                           
 18478                           ;secret_task.c: 110: }
 18479                           ;secret_task.c: 111: data->holdCountA = 0;
 18480  266B  0020               	movlb	0	; select bank0
 18481  266C  0858               	movf	secret_Main@data,w
 18482  266D  0086               	movwf	6
 18483  266E  0859               	movf	secret_Main@data+1,w
 18484  266F  0087               	movwf	7
 18485  2670  3144               	addfsr 1,4
 18486  2671  3000               	movlw	0
 18487  2672  3FC0               	movwi [0]fsr1
 18488  2673  3FC1               	movwi [1]fsr1
 18489                           
 18490                           ;secret_task.c: 112: data->holdCountB = 0;
 18491  2674  0858               	movf	secret_Main@data,w
 18492  2675  0086               	movwf	6
 18493  2676  0859               	movf	secret_Main@data+1,w
 18494  2677  0087               	movwf	7
 18495  2678  3146               	addfsr 1,6
 18496  2679  3000               	movlw	0
 18497  267A  3FC0               	movwi [0]fsr1
 18498  267B  3FC1               	movwi [1]fsr1
 18499                           
 18500                           ;secret_task.c: 113: data->holdCountX = 0;
 18501  267C  0858               	movf	secret_Main@data,w
 18502  267D  0086               	movwf	6
 18503  267E  0859               	movf	secret_Main@data+1,w
 18504  267F  0087               	movwf	7
 18505  2680  3148               	addfsr 1,8
 18506  2681  3000               	movlw	0
 18507  2682  3FC0               	movwi [0]fsr1
 18508  2683  3FC1               	movwi [1]fsr1
 18509                           
 18510                           ;secret_task.c: 114: data->holdCountY = 0;
 18511  2684  0858               	movf	secret_Main@data,w
 18512  2685  0086               	movwf	6
 18513  2686  0859               	movf	secret_Main@data+1,w
 18514  2687  0087               	movwf	7
 18515  2688  314A               	addfsr 1,10
 18516  2689  3000               	movlw	0
 18517  268A  3FC0               	movwi [0]fsr1
 18518  268B  3FC1               	movwi [1]fsr1
 18519                           
 18520                           ;secret_task.c: 115: data->noholdCount += 1;
 18521  268C  0858               	movf	secret_Main@data,w
 18522  268D  0086               	movwf	6
 18523  268E  0859               	movf	secret_Main@data+1,w
 18524  268F  0087               	movwf	7
 18525  2690  314C               	addfsr 1,12
 18526  2691  3001               	movlw	1
 18527  2692  0781               	addwf	1,f
 18528  2693  3141               	addfsr 1,1
 18529  2694  1803               	skipnc
 18530  2695  0A81               	incf	1,f
 18531                           
 18532                           ;secret_task.c: 116: data->delayTickCount -= 1;
 18533  2696  0858               	movf	secret_Main@data,w
 18534  2697  0086               	movwf	6
 18535  2698  0859               	movf	secret_Main@data+1,w
 18536  2699  0087               	movwf	7
 18537  269A  3142               	addfsr 1,2
 18538  269B  3001               	movlw	1
 18539  269C  0281               	subwf	1,f
 18540  269D  3141               	addfsr 1,1
 18541  269E  3000               	movlw	0
 18542  269F  3B81               	subwfb	1,f
 18543  26A0  317F               	addfsr 1,-1
 18544                           
 18545                           ;secret_task.c: 117: break;
 18546  26A1  2FF5               	goto	l9821
 18547  26A2                     l9751:	
 18548                           ;secret_task.c: 118: case 1:
 18549                           
 18550                           
 18551                           ;secret_task.c: 120: if (data->holdCountA == 0){
 18552  26A2  0858               	movf	secret_Main@data,w
 18553  26A3  0086               	movwf	6
 18554  26A4  0859               	movf	secret_Main@data+1,w
 18555  26A5  0087               	movwf	7
 18556  26A6  3144               	addfsr 1,4
 18557  26A7  0016               	moviw fsr1++
 18558  26A8  0401               	iorwf	1,w
 18559  26A9  1D03               	btfss	3,2
 18560  26AA  2EBA               	goto	l9755
 18561                           
 18562                           ;secret_task.c: 121: secret_found = secret_check(data, buttonPressed);
 18563  26AB  0859               	movf	secret_Main@data+1,w
 18564  26AC  00F8               	movwf	secret_check@data+1
 18565  26AD  0858               	movf	secret_Main@data,w
 18566  26AE  00F7               	movwf	secret_check@data
 18567  26AF  0857               	movf	secret_Main@buttonPressed,w
 18568  26B0  00D4               	movwf	??_secret_Main
 18569  26B1  0854               	movf	??_secret_Main,w
 18570  26B2  00F9               	movwf	secret_check@buttonPressed
 18571  26B3  31A5  2588  31A6   	fcall	_secret_check
 18572  26B6  0020               	movlb	0	; select bank0
 18573  26B7  00D5               	movwf	??_secret_Main+1
 18574  26B8  0855               	movf	??_secret_Main+1,w
 18575  26B9  00D6               	movwf	secret_Main@secret_found
 18576  26BA                     l9755:	
 18577                           
 18578                           ;secret_task.c: 122: }
 18579                           ;secret_task.c: 123: data->holdCountA += 1;
 18580  26BA  0858               	movf	secret_Main@data,w
 18581  26BB  0086               	movwf	6
 18582  26BC  0859               	movf	secret_Main@data+1,w
 18583  26BD  0087               	movwf	7
 18584  26BE  3144               	addfsr 1,4
 18585  26BF  3001               	movlw	1
 18586  26C0  0781               	addwf	1,f
 18587  26C1  3141               	addfsr 1,1
 18588  26C2  1803               	skipnc
 18589  26C3  0A81               	incf	1,f
 18590                           
 18591                           ;secret_task.c: 124: data->holdCountB = 0;
 18592  26C4  0858               	movf	secret_Main@data,w
 18593  26C5  0086               	movwf	6
 18594  26C6  0859               	movf	secret_Main@data+1,w
 18595  26C7  0087               	movwf	7
 18596  26C8  3146               	addfsr 1,6
 18597  26C9  3000               	movlw	0
 18598  26CA  3FC0               	movwi [0]fsr1
 18599  26CB  3FC1               	movwi [1]fsr1
 18600                           
 18601                           ;secret_task.c: 125: data->holdCountX = 0;
 18602  26CC  0858               	movf	secret_Main@data,w
 18603  26CD  0086               	movwf	6
 18604  26CE  0859               	movf	secret_Main@data+1,w
 18605  26CF  0087               	movwf	7
 18606  26D0  3148               	addfsr 1,8
 18607  26D1  3000               	movlw	0
 18608  26D2  3FC0               	movwi [0]fsr1
 18609  26D3  3FC1               	movwi [1]fsr1
 18610                           
 18611                           ;secret_task.c: 126: data->holdCountY = 0;
 18612  26D4  0858               	movf	secret_Main@data,w
 18613  26D5  0086               	movwf	6
 18614  26D6  0859               	movf	secret_Main@data+1,w
 18615  26D7  0087               	movwf	7
 18616  26D8  314A               	addfsr 1,10
 18617  26D9  3000               	movlw	0
 18618  26DA  3FC0               	movwi [0]fsr1
 18619  26DB  3FC1               	movwi [1]fsr1
 18620                           
 18621                           ;secret_task.c: 127: data->noholdCount = 0;
 18622  26DC  0858               	movf	secret_Main@data,w
 18623  26DD  0086               	movwf	6
 18624  26DE  0859               	movf	secret_Main@data+1,w
 18625  26DF  0087               	movwf	7
 18626  26E0  314C               	addfsr 1,12
 18627  26E1  3000               	movlw	0
 18628  26E2  3FC0               	movwi [0]fsr1
 18629  26E3  3FC1               	movwi [1]fsr1
 18630                           
 18631                           ;secret_task.c: 128: data->delayTickCount = 300;
 18632  26E4  0858               	movf	secret_Main@data,w
 18633  26E5  0086               	movwf	6
 18634  26E6  0859               	movf	secret_Main@data+1,w
 18635  26E7  0087               	movwf	7
 18636  26E8  3142               	addfsr 1,2
 18637  26E9  302C               	movlw	44
 18638  26EA  3FC0               	movwi [0]fsr1
 18639  26EB  3001               	movlw	1
 18640  26EC  3FC1               	movwi [1]fsr1
 18641                           
 18642                           ;secret_task.c: 129: break;
 18643  26ED  2FF5               	goto	l9821
 18644  26EE                     l9767:	
 18645                           ;secret_task.c: 130: case 2:
 18646                           
 18647                           
 18648                           ;secret_task.c: 132: if (data->holdCountB == 0){
 18649  26EE  0858               	movf	secret_Main@data,w
 18650  26EF  0086               	movwf	6
 18651  26F0  0859               	movf	secret_Main@data+1,w
 18652  26F1  0087               	movwf	7
 18653  26F2  3146               	addfsr 1,6
 18654  26F3  0016               	moviw fsr1++
 18655  26F4  0401               	iorwf	1,w
 18656  26F5  1D03               	btfss	3,2
 18657  26F6  2F06               	goto	l9771
 18658                           
 18659                           ;secret_task.c: 133: secret_found = secret_check(data, buttonPressed);
 18660  26F7  0859               	movf	secret_Main@data+1,w
 18661  26F8  00F8               	movwf	secret_check@data+1
 18662  26F9  0858               	movf	secret_Main@data,w
 18663  26FA  00F7               	movwf	secret_check@data
 18664  26FB  0857               	movf	secret_Main@buttonPressed,w
 18665  26FC  00D4               	movwf	??_secret_Main
 18666  26FD  0854               	movf	??_secret_Main,w
 18667  26FE  00F9               	movwf	secret_check@buttonPressed
 18668  26FF  31A5  2588  31A6   	fcall	_secret_check
 18669  2702  0020               	movlb	0	; select bank0
 18670  2703  00D5               	movwf	??_secret_Main+1
 18671  2704  0855               	movf	??_secret_Main+1,w
 18672  2705  00D6               	movwf	secret_Main@secret_found
 18673  2706                     l9771:	
 18674                           
 18675                           ;secret_task.c: 134: }
 18676                           ;secret_task.c: 135: data->holdCountA = 0;
 18677  2706  0858               	movf	secret_Main@data,w
 18678  2707  0086               	movwf	6
 18679  2708  0859               	movf	secret_Main@data+1,w
 18680  2709  0087               	movwf	7
 18681  270A  3144               	addfsr 1,4
 18682  270B  3000               	movlw	0
 18683  270C  3FC0               	movwi [0]fsr1
 18684  270D  3FC1               	movwi [1]fsr1
 18685                           
 18686                           ;secret_task.c: 136: data->holdCountB += 1;
 18687  270E  0858               	movf	secret_Main@data,w
 18688  270F  0086               	movwf	6
 18689  2710  0859               	movf	secret_Main@data+1,w
 18690  2711  0087               	movwf	7
 18691  2712  3146               	addfsr 1,6
 18692  2713  3001               	movlw	1
 18693  2714  0781               	addwf	1,f
 18694  2715  3141               	addfsr 1,1
 18695  2716  1803               	skipnc
 18696  2717  0A81               	incf	1,f
 18697                           
 18698                           ;secret_task.c: 137: data->holdCountX = 0;
 18699  2718  0858               	movf	secret_Main@data,w
 18700  2719  0086               	movwf	6
 18701  271A  0859               	movf	secret_Main@data+1,w
 18702  271B  0087               	movwf	7
 18703  271C  3148               	addfsr 1,8
 18704  271D  3000               	movlw	0
 18705  271E  3FC0               	movwi [0]fsr1
 18706  271F  3FC1               	movwi [1]fsr1
 18707                           
 18708                           ;secret_task.c: 138: data->holdCountY = 0;
 18709  2720  0858               	movf	secret_Main@data,w
 18710  2721  0086               	movwf	6
 18711  2722  0859               	movf	secret_Main@data+1,w
 18712  2723  0087               	movwf	7
 18713  2724  314A               	addfsr 1,10
 18714  2725  3000               	movlw	0
 18715  2726  3FC0               	movwi [0]fsr1
 18716  2727  3FC1               	movwi [1]fsr1
 18717                           
 18718                           ;secret_task.c: 139: data->noholdCount = 0;
 18719  2728  0858               	movf	secret_Main@data,w
 18720  2729  0086               	movwf	6
 18721  272A  0859               	movf	secret_Main@data+1,w
 18722  272B  0087               	movwf	7
 18723  272C  314C               	addfsr 1,12
 18724  272D  3000               	movlw	0
 18725  272E  3FC0               	movwi [0]fsr1
 18726  272F  3FC1               	movwi [1]fsr1
 18727                           
 18728                           ;secret_task.c: 140: data->delayTickCount = 300;
 18729  2730  0858               	movf	secret_Main@data,w
 18730  2731  0086               	movwf	6
 18731  2732  0859               	movf	secret_Main@data+1,w
 18732  2733  0087               	movwf	7
 18733  2734  3142               	addfsr 1,2
 18734  2735  302C               	movlw	44
 18735  2736  3FC0               	movwi [0]fsr1
 18736  2737  3001               	movlw	1
 18737  2738  3FC1               	movwi [1]fsr1
 18738                           
 18739                           ;secret_task.c: 141: break;
 18740  2739  2FF5               	goto	l9821
 18741  273A                     l9783:	
 18742                           ;secret_task.c: 142: case 4:
 18743                           
 18744                           
 18745                           ;secret_task.c: 144: if (data->holdCountX == 0){
 18746  273A  0858               	movf	secret_Main@data,w
 18747  273B  0086               	movwf	6
 18748  273C  0859               	movf	secret_Main@data+1,w
 18749  273D  0087               	movwf	7
 18750  273E  3148               	addfsr 1,8
 18751  273F  0016               	moviw fsr1++
 18752  2740  0401               	iorwf	1,w
 18753  2741  1D03               	btfss	3,2
 18754  2742  2F52               	goto	l9787
 18755                           
 18756                           ;secret_task.c: 145: secret_found = secret_check(data, buttonPressed);
 18757  2743  0859               	movf	secret_Main@data+1,w
 18758  2744  00F8               	movwf	secret_check@data+1
 18759  2745  0858               	movf	secret_Main@data,w
 18760  2746  00F7               	movwf	secret_check@data
 18761  2747  0857               	movf	secret_Main@buttonPressed,w
 18762  2748  00D4               	movwf	??_secret_Main
 18763  2749  0854               	movf	??_secret_Main,w
 18764  274A  00F9               	movwf	secret_check@buttonPressed
 18765  274B  31A5  2588  31A6   	fcall	_secret_check
 18766  274E  0020               	movlb	0	; select bank0
 18767  274F  00D5               	movwf	??_secret_Main+1
 18768  2750  0855               	movf	??_secret_Main+1,w
 18769  2751  00D6               	movwf	secret_Main@secret_found
 18770  2752                     l9787:	
 18771                           
 18772                           ;secret_task.c: 146: }
 18773                           ;secret_task.c: 147: data->holdCountA = 0;
 18774  2752  0858               	movf	secret_Main@data,w
 18775  2753  0086               	movwf	6
 18776  2754  0859               	movf	secret_Main@data+1,w
 18777  2755  0087               	movwf	7
 18778  2756  3144               	addfsr 1,4
 18779  2757  3000               	movlw	0
 18780  2758  3FC0               	movwi [0]fsr1
 18781  2759  3FC1               	movwi [1]fsr1
 18782                           
 18783                           ;secret_task.c: 148: data->holdCountB = 0;
 18784  275A  0858               	movf	secret_Main@data,w
 18785  275B  0086               	movwf	6
 18786  275C  0859               	movf	secret_Main@data+1,w
 18787  275D  0087               	movwf	7
 18788  275E  3146               	addfsr 1,6
 18789  275F  3000               	movlw	0
 18790  2760  3FC0               	movwi [0]fsr1
 18791  2761  3FC1               	movwi [1]fsr1
 18792                           
 18793                           ;secret_task.c: 149: data->holdCountX += 1;
 18794  2762  0858               	movf	secret_Main@data,w
 18795  2763  0086               	movwf	6
 18796  2764  0859               	movf	secret_Main@data+1,w
 18797  2765  0087               	movwf	7
 18798  2766  3148               	addfsr 1,8
 18799  2767  3001               	movlw	1
 18800  2768  0781               	addwf	1,f
 18801  2769  3141               	addfsr 1,1
 18802  276A  1803               	skipnc
 18803  276B  0A81               	incf	1,f
 18804                           
 18805                           ;secret_task.c: 150: data->holdCountY = 0;
 18806  276C  0858               	movf	secret_Main@data,w
 18807  276D  0086               	movwf	6
 18808  276E  0859               	movf	secret_Main@data+1,w
 18809  276F  0087               	movwf	7
 18810  2770  314A               	addfsr 1,10
 18811  2771  3000               	movlw	0
 18812  2772  3FC0               	movwi [0]fsr1
 18813  2773  3FC1               	movwi [1]fsr1
 18814                           
 18815                           ;secret_task.c: 151: data->noholdCount = 0;
 18816  2774  0858               	movf	secret_Main@data,w
 18817  2775  0086               	movwf	6
 18818  2776  0859               	movf	secret_Main@data+1,w
 18819  2777  0087               	movwf	7
 18820  2778  314C               	addfsr 1,12
 18821  2779  3000               	movlw	0
 18822  277A  3FC0               	movwi [0]fsr1
 18823  277B  3FC1               	movwi [1]fsr1
 18824                           
 18825                           ;secret_task.c: 152: data->delayTickCount = 300;
 18826  277C  0858               	movf	secret_Main@data,w
 18827  277D  0086               	movwf	6
 18828  277E  0859               	movf	secret_Main@data+1,w
 18829  277F  0087               	movwf	7
 18830  2780  3142               	addfsr 1,2
 18831  2781  302C               	movlw	44
 18832  2782  3FC0               	movwi [0]fsr1
 18833  2783  3001               	movlw	1
 18834  2784  3FC1               	movwi [1]fsr1
 18835                           
 18836                           ;secret_task.c: 153: break;
 18837  2785  2FF5               	goto	l9821
 18838  2786                     l9799:	
 18839                           ;secret_task.c: 154: case 8:
 18840                           
 18841                           
 18842                           ;secret_task.c: 156: if (data->holdCountY == 0){
 18843  2786  0858               	movf	secret_Main@data,w
 18844  2787  0086               	movwf	6
 18845  2788  0859               	movf	secret_Main@data+1,w
 18846  2789  0087               	movwf	7
 18847  278A  314A               	addfsr 1,10
 18848  278B  0016               	moviw fsr1++
 18849  278C  0401               	iorwf	1,w
 18850  278D  1D03               	btfss	3,2
 18851  278E  2F9E               	goto	l9803
 18852                           
 18853                           ;secret_task.c: 157: secret_found = secret_check(data, buttonPressed);
 18854  278F  0859               	movf	secret_Main@data+1,w
 18855  2790  00F8               	movwf	secret_check@data+1
 18856  2791  0858               	movf	secret_Main@data,w
 18857  2792  00F7               	movwf	secret_check@data
 18858  2793  0857               	movf	secret_Main@buttonPressed,w
 18859  2794  00D4               	movwf	??_secret_Main
 18860  2795  0854               	movf	??_secret_Main,w
 18861  2796  00F9               	movwf	secret_check@buttonPressed
 18862  2797  31A5  2588  31A6   	fcall	_secret_check
 18863  279A  0020               	movlb	0	; select bank0
 18864  279B  00D5               	movwf	??_secret_Main+1
 18865  279C  0855               	movf	??_secret_Main+1,w
 18866  279D  00D6               	movwf	secret_Main@secret_found
 18867  279E                     l9803:	
 18868                           
 18869                           ;secret_task.c: 158: }
 18870                           ;secret_task.c: 159: data->holdCountA = 0;
 18871  279E  0858               	movf	secret_Main@data,w
 18872  279F  0086               	movwf	6
 18873  27A0  0859               	movf	secret_Main@data+1,w
 18874  27A1  0087               	movwf	7
 18875  27A2  3144               	addfsr 1,4
 18876  27A3  3000               	movlw	0
 18877  27A4  3FC0               	movwi [0]fsr1
 18878  27A5  3FC1               	movwi [1]fsr1
 18879                           
 18880                           ;secret_task.c: 160: data->holdCountB = 0;
 18881  27A6  0858               	movf	secret_Main@data,w
 18882  27A7  0086               	movwf	6
 18883  27A8  0859               	movf	secret_Main@data+1,w
 18884  27A9  0087               	movwf	7
 18885  27AA  3146               	addfsr 1,6
 18886  27AB  3000               	movlw	0
 18887  27AC  3FC0               	movwi [0]fsr1
 18888  27AD  3FC1               	movwi [1]fsr1
 18889                           
 18890                           ;secret_task.c: 161: data->holdCountX = 0;
 18891  27AE  0858               	movf	secret_Main@data,w
 18892  27AF  0086               	movwf	6
 18893  27B0  0859               	movf	secret_Main@data+1,w
 18894  27B1  0087               	movwf	7
 18895  27B2  3148               	addfsr 1,8
 18896  27B3  3000               	movlw	0
 18897  27B4  3FC0               	movwi [0]fsr1
 18898  27B5  3FC1               	movwi [1]fsr1
 18899                           
 18900                           ;secret_task.c: 162: data->holdCountY += 1;
 18901  27B6  0858               	movf	secret_Main@data,w
 18902  27B7  0086               	movwf	6
 18903  27B8  0859               	movf	secret_Main@data+1,w
 18904  27B9  0087               	movwf	7
 18905  27BA  314A               	addfsr 1,10
 18906  27BB  3001               	movlw	1
 18907  27BC  0781               	addwf	1,f
 18908  27BD  3141               	addfsr 1,1
 18909  27BE  1803               	skipnc
 18910  27BF  0A81               	incf	1,f
 18911                           
 18912                           ;secret_task.c: 163: data->noholdCount = 0;
 18913  27C0  0858               	movf	secret_Main@data,w
 18914  27C1  0086               	movwf	6
 18915  27C2  0859               	movf	secret_Main@data+1,w
 18916  27C3  0087               	movwf	7
 18917  27C4  314C               	addfsr 1,12
 18918  27C5  3000               	movlw	0
 18919  27C6  3FC0               	movwi [0]fsr1
 18920  27C7  3FC1               	movwi [1]fsr1
 18921                           
 18922                           ;secret_task.c: 164: data->delayTickCount = 300;
 18923  27C8  0858               	movf	secret_Main@data,w
 18924  27C9  0086               	movwf	6
 18925  27CA  0859               	movf	secret_Main@data+1,w
 18926  27CB  0087               	movwf	7
 18927  27CC  3142               	addfsr 1,2
 18928  27CD  302C               	movlw	44
 18929  27CE  3FC0               	movwi [0]fsr1
 18930  27CF  3001               	movlw	1
 18931  27D0  3FC1               	movwi [1]fsr1
 18932                           
 18933                           ;secret_task.c: 165: break;
 18934  27D1  2FF5               	goto	l9821
 18935  27D2                     l9815:	
 18936                           ;secret_task.c: 166: default:
 18937                           
 18938                           
 18939                           ;secret_task.c: 168: secret_check(data, 0);
 18940  27D2  0859               	movf	secret_Main@data+1,w
 18941  27D3  00F8               	movwf	secret_check@data+1
 18942  27D4  0858               	movf	secret_Main@data,w
 18943  27D5  00F7               	movwf	secret_check@data
 18944  27D6  01F9               	clrf	secret_check@buttonPressed
 18945  27D7  31A5  2588  31A6   	fcall	_secret_check
 18946                           
 18947                           ;secret_task.c: 169: secret_clear(data);
 18948  27DA  0020               	movlb	0	; select bank0
 18949  27DB  0859               	movf	secret_Main@data+1,w
 18950  27DC  00F2               	movwf	secret_clear@data+1
 18951  27DD  0858               	movf	secret_Main@data,w
 18952  27DE  00F1               	movwf	secret_clear@data
 18953  27DF  31B6  2660  31A6   	fcall	_secret_clear
 18954                           
 18955                           ;secret_task.c: 170: }
 18956  27E2  2FF5               	goto	l9821
 18957  27E3                     l9819:	
 18958  27E3  0020               	movlb	0	; select bank0
 18959  27E4  0857               	movf	secret_Main@buttonPressed,w
 18960                           
 18961                           ; Switch size 1, requested type "space"
 18962                           ; Number of cases is 5, Range of values is 0 to 8
 18963                           ; switch strategies available:
 18964                           ; Name         Instructions Cycles
 18965                           ; simple_byte           16     9 (average)
 18966                           ; direct_byte           24     6 (fixed)
 18967                           ; jumptable            260     6 (fixed)
 18968                           ;	Chosen strategy is simple_byte
 18969  27E5  3A00               	xorlw	0	; case 0
 18970  27E6  1903               	skipnz
 18971  27E7  2E51               	goto	l9733
 18972  27E8  3A01               	xorlw	1	; case 1
 18973  27E9  1903               	skipnz
 18974  27EA  2EA2               	goto	l9751
 18975  27EB  3A03               	xorlw	3	; case 2
 18976  27EC  1903               	skipnz
 18977  27ED  2EEE               	goto	l9767
 18978  27EE  3A06               	xorlw	6	; case 4
 18979  27EF  1903               	skipnz
 18980  27F0  2F3A               	goto	l9783
 18981  27F1  3A0C               	xorlw	12	; case 8
 18982  27F2  1903               	skipnz
 18983  27F3  2F86               	goto	l9799
 18984  27F4  2FD2               	goto	l9815
 18985  27F5                     l9821:	
 18986                           
 18987                           ;secret_task.c: 173: if (secret_found){
 18988  27F5  0020               	movlb	0	; select bank0
 18989  27F6  0856               	movf	secret_Main@secret_found,w
 18990  27F7  1903               	btfsc	3,2
 18991  27F8  0008               	return
 18992                           
 18993                           ;secret_task.c: 174: secret_clear(data);
 18994  27F9  0859               	movf	secret_Main@data+1,w
 18995  27FA  00F2               	movwf	secret_clear@data+1
 18996  27FB  0858               	movf	secret_Main@data,w
 18997  27FC  00F1               	movwf	secret_clear@data
 18998  27FD  31B6  2660         	fcall	_secret_clear
 18999  27FF  0008               	return
 19000  2800                     __end_of_secret_Main:	
 19001                           
 19002                           	psect	text16
 19003  1D2F                     __ptext16:	
 19004 ;; *************** function _locked_Main *****************
 19005 ;; Defined at:
 19006 ;;		line 150 in file "locked_task.c"
 19007 ;; Parameters:    Size  Location     Type
 19008 ;;  taskData        2   50[BANK0 ] PTR void 
 19009 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19010 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19011 ;; Auto vars:     Size  Location     Type
 19012 ;;  data            2   55[BANK0 ] PTR struct t_locked_task
 19013 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19014 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19015 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 19016 ;; Return value:  Size  Location     Type
 19017 ;;                  1    wreg      void 
 19018 ;; Registers used:
 19019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19020 ;; Tracked objects:
 19021 ;;		On entry : 0/0
 19022 ;;		On exit  : 0/0
 19023 ;;		Unchanged: 0/0
 19024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19025 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19026 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19027 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19028 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19029 ;;Total ram usage:        7 bytes
 19030 ;; Hardware stack levels used:    1
 19031 ;; Hardware stack levels required when called:   11
 19032 ;; This function calls:
 19033 ;;		___lwmod
 19034 ;;		_locked_clear
 19035 ;;		_locked_get_lock_leds
 19036 ;;		_locked_get_unlock_leds
 19037 ;;		_locked_lock_leds
 19038 ;;		_locked_secret_check
 19039 ;;		_locked_unlock_leds
 19040 ;;		_marquee
 19041 ;;		_nullifyBadge_buttonsGet
 19042 ;;		_nullifyBadge_segDisplayForceUpdate
 19043 ;;		_nullifyBadge_segDisplayPutStr
 19044 ;;		_nullifyBadge_userLedsSet
 19045 ;;		_slot_Setup
 19046 ;; This function is called by:
 19047 ;;		_main
 19048 ;;		_scheduler_TaskRun
 19049 ;; This function uses a non-reentrant model
 19050 ;;
 19051                           
 19052                           
 19053                           ;psect for function _locked_Main
 19054  1D2F                     _locked_Main:	
 19055                           
 19056                           ;locked_task.c: 151: struct t_locked_taskData *data = (struct t_locked_taskData *) taskD
      +                          ata;
 19057                           
 19058                           ;incstack = 0
 19059                           ; Regs used in _locked_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19060  1D2F  0020               	movlb	0	; select bank0
 19061  1D30  0853               	movf	locked_Main@taskData+1,w
 19062  1D31  00D8               	movwf	locked_Main@data+1
 19063  1D32  0852               	movf	locked_Main@taskData,w
 19064  1D33  00D7               	movwf	locked_Main@data
 19065                           
 19066                           ;locked_task.c: 152: u8 buttonPressed;
 19067                           ;locked_task.c: 153: pw_found =0;
 19068  1D34  0021               	movlb	1	; select bank1
 19069  1D35  01C3               	clrf	_pw_found^(0+128)
 19070                           
 19071                           ;locked_task.c: 154: if ( currentTask != LOCKED_TASK ){
 19072  1D36  3003               	movlw	3
 19073  1D37  063A               	xorwf	_currentTask^(0+128),w
 19074  1D38  043B               	iorwf	(_currentTask+1)^(0+128),w
 19075  1D39  1903               	btfsc	3,2
 19076  1D3A  2D61               	goto	l9601
 19077                           
 19078                           ;locked_task.c: 155: data->holdCountA = 1;
 19079  1D3B  0020               	movlb	0	; select bank0
 19080  1D3C  0857               	movf	locked_Main@data,w
 19081  1D3D  0086               	movwf	6
 19082  1D3E  0858               	movf	locked_Main@data+1,w
 19083  1D3F  0087               	movwf	7
 19084  1D40  3143               	addfsr 1,3
 19085  1D41  3001               	movlw	1
 19086  1D42  3FC0               	movwi [0]fsr1
 19087  1D43  3000               	movlw	0
 19088  1D44  3FC1               	movwi [1]fsr1
 19089                           
 19090                           ;locked_task.c: 156: data->holdCountB = 1;
 19091  1D45  0857               	movf	locked_Main@data,w
 19092  1D46  0086               	movwf	6
 19093  1D47  0858               	movf	locked_Main@data+1,w
 19094  1D48  0087               	movwf	7
 19095  1D49  3145               	addfsr 1,5
 19096  1D4A  3001               	movlw	1
 19097  1D4B  3FC0               	movwi [0]fsr1
 19098  1D4C  3000               	movlw	0
 19099  1D4D  3FC1               	movwi [1]fsr1
 19100                           
 19101                           ;locked_task.c: 157: data->holdCountX = 1;
 19102  1D4E  0857               	movf	locked_Main@data,w
 19103  1D4F  0086               	movwf	6
 19104  1D50  0858               	movf	locked_Main@data+1,w
 19105  1D51  0087               	movwf	7
 19106  1D52  3147               	addfsr 1,7
 19107  1D53  3001               	movlw	1
 19108  1D54  3FC0               	movwi [0]fsr1
 19109  1D55  3000               	movlw	0
 19110  1D56  3FC1               	movwi [1]fsr1
 19111                           
 19112                           ;locked_task.c: 158: data->holdCountY = 1;
 19113  1D57  0857               	movf	locked_Main@data,w
 19114  1D58  0086               	movwf	6
 19115  1D59  0858               	movf	locked_Main@data+1,w
 19116  1D5A  0087               	movwf	7
 19117  1D5B  3149               	addfsr 1,9
 19118  1D5C  3001               	movlw	1
 19119  1D5D  3FC0               	movwi [0]fsr1
 19120  1D5E  3000               	movlw	0
 19121  1D5F  3FC1               	movwi [1]fsr1
 19122                           
 19123                           ;locked_task.c: 159: return;
 19124  1D60  0008               	return
 19125  1D61                     l9601:	
 19126                           
 19127                           ;locked_task.c: 160: }
 19128                           ;locked_task.c: 165: if(data->noholdCount > 1){
 19129  1D61  0020               	movlb	0	; select bank0
 19130  1D62  0857               	movf	locked_Main@data,w
 19131  1D63  0086               	movwf	6
 19132  1D64  0858               	movf	locked_Main@data+1,w
 19133  1D65  0087               	movwf	7
 19134  1D66  314B               	addfsr 1,11
 19135  1D67  3F40               	moviw [0]fsr1
 19136  1D68  00D4               	movwf	??_locked_Main
 19137  1D69  3F41               	moviw [1]fsr1
 19138  1D6A  00D5               	movwf	??_locked_Main+1
 19139  1D6B  3000               	movlw	0
 19140  1D6C  0255               	subwf	??_locked_Main+1,w
 19141  1D6D  3002               	movlw	2
 19142  1D6E  1903               	skipnz
 19143  1D6F  0254               	subwf	??_locked_Main,w
 19144  1D70  1803               	btfsc	3,0
 19145  1D71  2E5A               	goto	l9649
 19146  1D72  2E6E               	goto	l9651
 19147  1D73                     l9605:	
 19148                           ;locked_task.c: 167: case LOCKED_UNLOCKING_STATE:
 19149                           
 19150                           ;locked_task.c: 166: switch (data->state){
 19151                           
 19152                           
 19153                           ;locked_task.c: 168: badge_locked = 0;
 19154  1D73  0021               	movlb	1	; select bank1
 19155  1D74  01C4               	clrf	_badge_locked^(0+128)
 19156                           
 19157                           ;locked_task.c: 169: slot_Setup(slot_taskData);
 19158  1D75  083D               	movf	(_slot_taskData+1)^(0+128),w
 19159  1D76  0020               	movlb	0	; select bank0
 19160  1D77  00B0               	movwf	slot_Setup@taskData+1
 19161  1D78  0021               	movlb	1	; select bank1
 19162  1D79  083C               	movf	_slot_taskData^(0+128),w
 19163  1D7A  0020               	movlb	0	; select bank0
 19164  1D7B  00AF               	movwf	slot_Setup@taskData
 19165  1D7C  31AB  23DA  319D   	fcall	_slot_Setup
 19166                           
 19167                           ;locked_task.c: 170: marquee("UNLOCKING...", data->delayTickCount);
 19168  1D7F  30A5               	movlw	low (STR_42| (0+32768))
 19169  1D80  0020               	movlb	0	; select bank0
 19170  1D81  00BA               	movwf	marquee@string
 19171  1D82  30BA               	movlw	high (STR_42| (0+32768))
 19172  1D83  00BB               	movwf	marquee@string+1
 19173  1D84  0857               	movf	locked_Main@data,w
 19174  1D85  0086               	movwf	6
 19175  1D86  0858               	movf	locked_Main@data+1,w
 19176  1D87  0087               	movwf	7
 19177  1D88  3141               	addfsr 1,1
 19178  1D89  3F40               	moviw [0]fsr1
 19179  1D8A  00BC               	movwf	marquee@count
 19180  1D8B  3F41               	moviw [1]fsr1
 19181  1D8C  00BD               	movwf	marquee@count+1
 19182  1D8D  31A2  2215  319D   	fcall	_marquee
 19183                           
 19184                           ;locked_task.c: 172: if (data->delayTickCount % 75 == 0){
 19185  1D90  304B               	movlw	75
 19186  1D91  0020               	movlb	0	; select bank0
 19187  1D92  00AB               	movwf	___lwmod@divisor
 19188  1D93  3000               	movlw	0
 19189  1D94  00AC               	movwf	___lwmod@divisor+1
 19190  1D95  0857               	movf	locked_Main@data,w
 19191  1D96  0086               	movwf	6
 19192  1D97  0858               	movf	locked_Main@data+1,w
 19193  1D98  0087               	movwf	7
 19194  1D99  3141               	addfsr 1,1
 19195  1D9A  3F40               	moviw [0]fsr1
 19196  1D9B  00AD               	movwf	___lwmod@dividend
 19197  1D9C  3F41               	moviw [1]fsr1
 19198  1D9D  00AE               	movwf	___lwmod@dividend+1
 19199  1D9E  31B5  25A1  319D   	fcall	___lwmod
 19200  1DA1  0020               	movlb	0	; select bank0
 19201  1DA2  082B               	movf	?___lwmod,w
 19202  1DA3  042C               	iorwf	?___lwmod+1,w
 19203  1DA4  1D03               	btfss	3,2
 19204  1DA5  2DB0               	goto	l9615
 19205                           
 19206                           ;locked_task.c: 173: locked_leds = locked_lock_base_leds | locked_get_unlock_leds();
 19207  1DA6  3188  2000  319D   	fcall	_locked_get_unlock_leds
 19208  1DA9  0021               	movlb	1	; select bank1
 19209  1DAA  0852               	movf	_locked_lock_base_leds^(0+128),w
 19210  1DAB  0471               	iorwf	?_locked_get_unlock_leds,w
 19211  1DAC  00A2               	movwf	_locked_leds^(0+128)
 19212  1DAD  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 19213  1DAE  0472               	iorwf	?_locked_get_unlock_leds+1,w
 19214  1DAF  00A3               	movwf	(_locked_leds+1)^(0+128)
 19215  1DB0                     l9615:	
 19216                           
 19217                           ;locked_task.c: 174: }
 19218                           ;locked_task.c: 177: if (data->delayTickCount == 375){
 19219  1DB0  0020               	movlb	0	; select bank0
 19220  1DB1  0857               	movf	locked_Main@data,w
 19221  1DB2  0086               	movwf	6
 19222  1DB3  0858               	movf	locked_Main@data+1,w
 19223  1DB4  0087               	movwf	7
 19224  1DB5  3141               	addfsr 1,1
 19225  1DB6  0016               	moviw fsr1++
 19226  1DB7  3A77               	xorlw	119
 19227  1DB8  00D4               	movwf	??_locked_Main
 19228  1DB9  0016               	moviw fsr1++
 19229  1DBA  3A01               	xorlw	1
 19230  1DBB  04D4               	iorwf	??_locked_Main,f
 19231  1DBC  1D03               	btfss	3,2
 19232  1DBD  2E20               	goto	l9635
 19233                           
 19234                           ;locked_task.c: 178: data->state = LOCKED_UNLOCKED_STATE;
 19235  1DBE  0857               	movf	locked_Main@data,w
 19236  1DBF  3E0D               	addlw	13
 19237  1DC0  00D4               	movwf	??_locked_Main
 19238  1DC1  3000               	movlw	0
 19239  1DC2  3D58               	addwfc	locked_Main@data+1,w
 19240  1DC3  00D5               	movwf	??_locked_Main+1
 19241  1DC4  0854               	movf	??_locked_Main,w
 19242  1DC5  0086               	movwf	6
 19243  1DC6  0855               	movf	??_locked_Main+1,w
 19244  1DC7  0087               	movwf	7
 19245  1DC8  3002               	movlw	2
 19246  1DC9  0081               	movwf	1
 19247                           
 19248                           ;locked_task.c: 179: data->delayTickCount = 0;
 19249  1DCA  0857               	movf	locked_Main@data,w
 19250  1DCB  0086               	movwf	6
 19251  1DCC  0858               	movf	locked_Main@data+1,w
 19252  1DCD  0087               	movwf	7
 19253  1DCE  3141               	addfsr 1,1
 19254  1DCF  3000               	movlw	0
 19255  1DD0  3FC0               	movwi [0]fsr1
 19256  1DD1  3FC1               	movwi [1]fsr1
 19257  1DD2  2E6E               	goto	l9651
 19258  1DD3                     l9623:	
 19259                           ;locked_task.c: 185: case LOCKED_LOCKING_STATE:
 19260                           
 19261                           ;locked_task.c: 183: }
 19262                           ;locked_task.c: 184: break;
 19263                           
 19264                           ;locked_task.c: 181: else {
 19265                           ;locked_task.c: 182: data->delayTickCount += 1;
 19266                           
 19267                           ;locked_task.c: 180: }
 19268                           
 19269                           
 19270                           ;locked_task.c: 186: marquee("LOCKING...", data->delayTickCount);
 19271  1DD3  30A7               	movlw	low ((STR_42+2)| (0+32768))
 19272  1DD4  00BA               	movwf	marquee@string
 19273  1DD5  30BA               	movlw	high ((STR_42+2)| (0+32768))
 19274  1DD6  00BB               	movwf	marquee@string+1
 19275  1DD7  0857               	movf	locked_Main@data,w
 19276  1DD8  0086               	movwf	6
 19277  1DD9  0858               	movf	locked_Main@data+1,w
 19278  1DDA  0087               	movwf	7
 19279  1DDB  3141               	addfsr 1,1
 19280  1DDC  3F40               	moviw [0]fsr1
 19281  1DDD  00BC               	movwf	marquee@count
 19282  1DDE  3F41               	moviw [1]fsr1
 19283  1DDF  00BD               	movwf	marquee@count+1
 19284  1DE0  31A2  2215  319D   	fcall	_marquee
 19285                           
 19286                           ;locked_task.c: 188: if (data->delayTickCount % 75 == 0){
 19287  1DE3  304B               	movlw	75
 19288  1DE4  0020               	movlb	0	; select bank0
 19289  1DE5  00AB               	movwf	___lwmod@divisor
 19290  1DE6  3000               	movlw	0
 19291  1DE7  00AC               	movwf	___lwmod@divisor+1
 19292  1DE8  0857               	movf	locked_Main@data,w
 19293  1DE9  0086               	movwf	6
 19294  1DEA  0858               	movf	locked_Main@data+1,w
 19295  1DEB  0087               	movwf	7
 19296  1DEC  3141               	addfsr 1,1
 19297  1DED  3F40               	moviw [0]fsr1
 19298  1DEE  00AD               	movwf	___lwmod@dividend
 19299  1DEF  3F41               	moviw [1]fsr1
 19300  1DF0  00AE               	movwf	___lwmod@dividend+1
 19301  1DF1  31B5  25A1  319D   	fcall	___lwmod
 19302  1DF4  0020               	movlb	0	; select bank0
 19303  1DF5  082B               	movf	?___lwmod,w
 19304  1DF6  042C               	iorwf	?___lwmod+1,w
 19305  1DF7  1D03               	btfss	3,2
 19306  1DF8  2E03               	goto	l9629
 19307                           
 19308                           ;locked_task.c: 189: locked_leds = locked_lock_base_leds | locked_get_lock_leds();
 19309  1DF9  31B5  2505  319D   	fcall	_locked_get_lock_leds
 19310  1DFC  0021               	movlb	1	; select bank1
 19311  1DFD  0852               	movf	_locked_lock_base_leds^(0+128),w
 19312  1DFE  0471               	iorwf	?_locked_get_lock_leds,w
 19313  1DFF  00A2               	movwf	_locked_leds^(0+128)
 19314  1E00  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 19315  1E01  0472               	iorwf	?_locked_get_lock_leds+1,w
 19316  1E02  00A3               	movwf	(_locked_leds+1)^(0+128)
 19317  1E03                     l9629:	
 19318                           
 19319                           ;locked_task.c: 190: }
 19320                           ;locked_task.c: 193: if (data->delayTickCount == 375){
 19321  1E03  0020               	movlb	0	; select bank0
 19322  1E04  0857               	movf	locked_Main@data,w
 19323  1E05  0086               	movwf	6
 19324  1E06  0858               	movf	locked_Main@data+1,w
 19325  1E07  0087               	movwf	7
 19326  1E08  3141               	addfsr 1,1
 19327  1E09  0016               	moviw fsr1++
 19328  1E0A  3A77               	xorlw	119
 19329  1E0B  00D4               	movwf	??_locked_Main
 19330  1E0C  0016               	moviw fsr1++
 19331  1E0D  3A01               	xorlw	1
 19332  1E0E  04D4               	iorwf	??_locked_Main,f
 19333  1E0F  1D03               	btfss	3,2
 19334  1E10  2E20               	goto	l9635
 19335                           
 19336                           ;locked_task.c: 194: data->state = LOCKED_LOCKED_STATE;
 19337  1E11  0857               	movf	locked_Main@data,w
 19338  1E12  0086               	movwf	6
 19339  1E13  0858               	movf	locked_Main@data+1,w
 19340  1E14  0087               	movwf	7
 19341  1E15  314D               	addfsr 1,13
 19342  1E16  0181               	clrf	1
 19343                           
 19344                           ;locked_task.c: 195: data->delayTickCount = 0;
 19345  1E17  0857               	movf	locked_Main@data,w
 19346  1E18  0086               	movwf	6
 19347  1E19  0858               	movf	locked_Main@data+1,w
 19348  1E1A  0087               	movwf	7
 19349  1E1B  3141               	addfsr 1,1
 19350  1E1C  3000               	movlw	0
 19351  1E1D  3FC0               	movwi [0]fsr1
 19352  1E1E  3FC1               	movwi [1]fsr1
 19353                           
 19354                           ;locked_task.c: 196: }
 19355  1E1F  2E6E               	goto	l9651
 19356  1E20                     l9635:	
 19357                           
 19358                           ;locked_task.c: 197: else {
 19359                           ;locked_task.c: 198: data->delayTickCount += 1;
 19360  1E20  0857               	movf	locked_Main@data,w
 19361  1E21  0086               	movwf	6
 19362  1E22  0858               	movf	locked_Main@data+1,w
 19363  1E23  0087               	movwf	7
 19364  1E24  3141               	addfsr 1,1
 19365  1E25  3001               	movlw	1
 19366  1E26  0781               	addwf	1,f
 19367  1E27  3141               	addfsr 1,1
 19368  1E28  1803               	skipnc
 19369  1E29  0A81               	incf	1,f
 19370                           
 19371                           ;locked_task.c: 199: }
 19372                           ;locked_task.c: 200: break;
 19373  1E2A  2E6E               	goto	l9651
 19374  1E2B                     l9637:	
 19375                           ;locked_task.c: 201: case LOCKED_UNLOCKED_STATE:
 19376                           
 19377                           
 19378                           ;locked_task.c: 202: badge_locked = 0;
 19379  1E2B  0021               	movlb	1	; select bank1
 19380  1E2C  01C4               	clrf	_badge_locked^(0+128)
 19381                           
 19382                           ;locked_task.c: 204: marquee("OPEN", data->delayTickCount);
 19383  1E2D  30EF               	movlw	low (STR_44| (0+32768))
 19384  1E2E  0020               	movlb	0	; select bank0
 19385  1E2F  00BA               	movwf	marquee@string
 19386  1E30  30BB               	movlw	high (STR_44| (0+32768))
 19387  1E31  00BB               	movwf	marquee@string+1
 19388  1E32  0857               	movf	locked_Main@data,w
 19389  1E33  0086               	movwf	6
 19390  1E34  0858               	movf	locked_Main@data+1,w
 19391  1E35  0087               	movwf	7
 19392  1E36  3141               	addfsr 1,1
 19393  1E37  3F40               	moviw [0]fsr1
 19394  1E38  00BC               	movwf	marquee@count
 19395  1E39  3F41               	moviw [1]fsr1
 19396  1E3A  00BD               	movwf	marquee@count+1
 19397  1E3B  31A2  2215  319D   	fcall	_marquee
 19398                           
 19399                           ;locked_task.c: 205: locked_unlock_leds();
 19400  1E3E  31B3  233E  319D   	fcall	_locked_unlock_leds
 19401                           
 19402                           ;locked_task.c: 206: break;
 19403  1E41  2E6E               	goto	l9651
 19404  1E42                     l1287:	
 19405                           ;locked_task.c: 207: case LOCKED_LOCKED_STATE:
 19406                           
 19407                           
 19408                           ;locked_task.c: 208: badge_locked = 1;
 19409  1E42  0021               	movlb	1	; select bank1
 19410  1E43  01C4               	clrf	_badge_locked^(0+128)
 19411  1E44  0AC4               	incf	_badge_locked^(0+128),f
 19412                           
 19413                           ;locked_task.c: 209: marquee("LOCK", data->delayTickCount);
 19414  1E45  30E5               	movlw	low (STR_45| (0+32768))
 19415  1E46  0020               	movlb	0	; select bank0
 19416  1E47  00BA               	movwf	marquee@string
 19417  1E48  30BB               	movlw	high (STR_45| (0+32768))
 19418  1E49  00BB               	movwf	marquee@string+1
 19419  1E4A  0857               	movf	locked_Main@data,w
 19420  1E4B  0086               	movwf	6
 19421  1E4C  0858               	movf	locked_Main@data+1,w
 19422  1E4D  0087               	movwf	7
 19423  1E4E  3141               	addfsr 1,1
 19424  1E4F  3F40               	moviw [0]fsr1
 19425  1E50  00BC               	movwf	marquee@count
 19426  1E51  3F41               	moviw [1]fsr1
 19427  1E52  00BD               	movwf	marquee@count+1
 19428  1E53  31A2  2215  319D   	fcall	_marquee
 19429                           
 19430                           ;locked_task.c: 211: locked_lock_leds();
 19431  1E56  31B3  23F3  319D   	fcall	_locked_lock_leds
 19432                           
 19433                           ;locked_task.c: 213: }
 19434                           
 19435                           ;locked_task.c: 212: break;
 19436  1E59  2E6E               	goto	l9651
 19437  1E5A                     l9649:	
 19438  1E5A  0020               	movlb	0	; select bank0
 19439  1E5B  0857               	movf	locked_Main@data,w
 19440  1E5C  0086               	movwf	6
 19441  1E5D  0858               	movf	locked_Main@data+1,w
 19442  1E5E  0087               	movwf	7
 19443  1E5F  314D               	addfsr 1,13
 19444  1E60  0801               	movf	1,w
 19445                           
 19446                           ; Switch size 1, requested type "space"
 19447                           ; Number of cases is 4, Range of values is 0 to 3
 19448                           ; switch strategies available:
 19449                           ; Name         Instructions Cycles
 19450                           ; simple_byte           13     7 (average)
 19451                           ; direct_byte           14     6 (fixed)
 19452                           ; jumptable            260     6 (fixed)
 19453                           ;	Chosen strategy is simple_byte
 19454  1E61  3A00               	xorlw	0	; case 0
 19455  1E62  1903               	skipnz
 19456  1E63  2E42               	goto	l1287
 19457  1E64  3A01               	xorlw	1	; case 1
 19458  1E65  1903               	skipnz
 19459  1E66  2DD3               	goto	l9623
 19460  1E67  3A03               	xorlw	3	; case 2
 19461  1E68  1903               	skipnz
 19462  1E69  2E2B               	goto	l9637
 19463  1E6A  3A01               	xorlw	1	; case 3
 19464  1E6B  1903               	skipnz
 19465  1E6C  2D73               	goto	l9605
 19466  1E6D  2E6E               	goto	l9651
 19467  1E6E                     l9651:	
 19468                           
 19469                           ;locked_task.c: 214: }
 19470                           ;locked_task.c: 215: nullifyBadge_userLedsSet(data->badge, locked_leds);
 19471  1E6E  0021               	movlb	1	; select bank1
 19472  1E6F  0823               	movf	(_locked_leds+1)^(0+128),w
 19473  1E70  0020               	movlb	0	; select bank0
 19474  1E71  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 19475  1E72  0021               	movlb	1	; select bank1
 19476  1E73  0822               	movf	_locked_leds^(0+128),w
 19477  1E74  0020               	movlb	0	; select bank0
 19478  1E75  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 19479  1E76  0857               	movf	locked_Main@data,w
 19480  1E77  0086               	movwf	6
 19481  1E78  0858               	movf	locked_Main@data+1,w
 19482  1E79  0087               	movwf	7
 19483  1E7A  0801               	movf	1,w
 19484  1E7B  31B2  22F7  319D   	fcall	_nullifyBadge_userLedsSet
 19485                           
 19486                           ;locked_task.c: 218: buttonPressed = nullifyBadge_buttonsGet();
 19487  1E7E  31B5  25FD  319D   	fcall	_nullifyBadge_buttonsGet
 19488  1E81  0020               	movlb	0	; select bank0
 19489  1E82  00D4               	movwf	??_locked_Main
 19490  1E83  0854               	movf	??_locked_Main,w
 19491  1E84  00D6               	movwf	locked_Main@buttonPressed
 19492                           
 19493                           ;locked_task.c: 219: switch (buttonPressed) {
 19494  1E85  2FCF               	goto	l9717
 19495  1E86                     l9655:	
 19496                           ;locked_task.c: 220: case 4:
 19497                           
 19498                           
 19499                           ;locked_task.c: 221: locked_clear(data);
 19500  1E86  0858               	movf	locked_Main@data+1,w
 19501  1E87  00BA               	movwf	locked_clear@data+1
 19502  1E88  0857               	movf	locked_Main@data,w
 19503  1E89  00B9               	movwf	locked_clear@data
 19504  1E8A  31A8  20B9  319D   	fcall	_locked_clear
 19505                           
 19506                           ;locked_task.c: 222: currentTask = MENU_TASK;
 19507  1E8D  0021               	movlb	1	; select bank1
 19508  1E8E  01BA               	clrf	_currentTask^(0+128)
 19509  1E8F  01BB               	clrf	(_currentTask+1)^(0+128)
 19510                           
 19511                           ;locked_task.c: 223: break;
 19512  1E90  2FDD               	goto	l9719
 19513  1E91                     l9659:	
 19514                           ;locked_task.c: 224: case 8:
 19515                           
 19516                           
 19517                           ;locked_task.c: 225: if (data->holdCountY == 0){
 19518  1E91  0020               	movlb	0	; select bank0
 19519  1E92  0857               	movf	locked_Main@data,w
 19520  1E93  0086               	movwf	6
 19521  1E94  0858               	movf	locked_Main@data+1,w
 19522  1E95  0087               	movwf	7
 19523  1E96  3149               	addfsr 1,9
 19524  1E97  0016               	moviw fsr1++
 19525  1E98  0401               	iorwf	1,w
 19526  1E99  1D03               	btfss	3,2
 19527  1E9A  2EAC               	goto	l9663
 19528                           
 19529                           ;locked_task.c: 227: pw_found = locked_secret_check(data, 8 );
 19530  1E9B  0858               	movf	locked_Main@data+1,w
 19531  1E9C  00F8               	movwf	locked_secret_check@data+1
 19532  1E9D  0857               	movf	locked_Main@data,w
 19533  1E9E  00F7               	movwf	locked_secret_check@data
 19534  1E9F  3008               	movlw	8
 19535  1EA0  00D4               	movwf	??_locked_Main
 19536  1EA1  0854               	movf	??_locked_Main,w
 19537  1EA2  00F9               	movwf	locked_secret_check@buttonPressed
 19538  1EA3  3190  200F  319D   	fcall	_locked_secret_check
 19539  1EA6  0020               	movlb	0	; select bank0
 19540  1EA7  00D5               	movwf	??_locked_Main+1
 19541  1EA8  0855               	movf	??_locked_Main+1,w
 19542  1EA9  0021               	movlb	1	; select bank1
 19543  1EAA  00C3               	movwf	_pw_found^(0+128)
 19544                           
 19545                           ;locked_task.c: 228: }
 19546  1EAB  2EC2               	goto	l9667
 19547  1EAC                     l9663:	
 19548                           
 19549                           ;locked_task.c: 229: else{
 19550                           ;locked_task.c: 230: nullifyBadge_segDisplayPutStr(data->badge, " U  ");
 19551  1EAC  30E0               	movlw	low (STR_46| (0+32768))
 19552  1EAD  0020               	movlb	0	; select bank0
 19553  1EAE  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 19554  1EAF  30BB               	movlw	high (STR_46| (0+32768))
 19555  1EB0  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 19556  1EB1  0857               	movf	locked_Main@data,w
 19557  1EB2  0086               	movwf	6
 19558  1EB3  0858               	movf	locked_Main@data+1,w
 19559  1EB4  0087               	movwf	7
 19560  1EB5  0801               	movf	1,w
 19561  1EB6  31B2  221E  319D   	fcall	_nullifyBadge_segDisplayPutStr
 19562                           
 19563                           ;locked_task.c: 231: nullifyBadge_segDisplayForceUpdate(data->badge);
 19564  1EB9  0020               	movlb	0	; select bank0
 19565  1EBA  0857               	movf	locked_Main@data,w
 19566  1EBB  0086               	movwf	6
 19567  1EBC  0858               	movf	locked_Main@data+1,w
 19568  1EBD  0087               	movwf	7
 19569  1EBE  0801               	movf	1,w
 19570  1EBF  31B1  21E2  319D   	fcall	_nullifyBadge_segDisplayForceUpdate
 19571  1EC2                     l9667:	
 19572                           
 19573                           ;locked_task.c: 232: }
 19574                           ;locked_task.c: 233: data->holdCountA = 0;
 19575  1EC2  0020               	movlb	0	; select bank0
 19576  1EC3  0857               	movf	locked_Main@data,w
 19577  1EC4  0086               	movwf	6
 19578  1EC5  0858               	movf	locked_Main@data+1,w
 19579  1EC6  0087               	movwf	7
 19580  1EC7  3143               	addfsr 1,3
 19581  1EC8  3000               	movlw	0
 19582  1EC9  3FC0               	movwi [0]fsr1
 19583  1ECA  3FC1               	movwi [1]fsr1
 19584                           
 19585                           ;locked_task.c: 234: data->holdCountB = 0;
 19586  1ECB  0857               	movf	locked_Main@data,w
 19587  1ECC  0086               	movwf	6
 19588  1ECD  0858               	movf	locked_Main@data+1,w
 19589  1ECE  0087               	movwf	7
 19590  1ECF  3145               	addfsr 1,5
 19591  1ED0  3000               	movlw	0
 19592  1ED1  3FC0               	movwi [0]fsr1
 19593  1ED2  3FC1               	movwi [1]fsr1
 19594                           
 19595                           ;locked_task.c: 235: data->holdCountX = 0;
 19596  1ED3  0857               	movf	locked_Main@data,w
 19597  1ED4  0086               	movwf	6
 19598  1ED5  0858               	movf	locked_Main@data+1,w
 19599  1ED6  0087               	movwf	7
 19600  1ED7  3147               	addfsr 1,7
 19601  1ED8  3000               	movlw	0
 19602  1ED9  3FC0               	movwi [0]fsr1
 19603  1EDA  3FC1               	movwi [1]fsr1
 19604                           
 19605                           ;locked_task.c: 236: data->holdCountY += 1;
 19606  1EDB  0857               	movf	locked_Main@data,w
 19607  1EDC  0086               	movwf	6
 19608  1EDD  0858               	movf	locked_Main@data+1,w
 19609  1EDE  0087               	movwf	7
 19610  1EDF  3149               	addfsr 1,9
 19611  1EE0  3001               	movlw	1
 19612  1EE1  0781               	addwf	1,f
 19613  1EE2  3141               	addfsr 1,1
 19614  1EE3  1803               	skipnc
 19615  1EE4  0A81               	incf	1,f
 19616                           
 19617                           ;locked_task.c: 237: data->noholdCount = 0;
 19618  1EE5  0857               	movf	locked_Main@data,w
 19619  1EE6  0086               	movwf	6
 19620  1EE7  0858               	movf	locked_Main@data+1,w
 19621  1EE8  0087               	movwf	7
 19622  1EE9  314B               	addfsr 1,11
 19623  1EEA  3000               	movlw	0
 19624  1EEB  3FC0               	movwi [0]fsr1
 19625  1EEC  3FC1               	movwi [1]fsr1
 19626                           
 19627                           ;locked_task.c: 238: break;
 19628  1EED  2FDD               	goto	l9719
 19629  1EEE                     l9677:	
 19630                           ;locked_task.c: 239: case 2:
 19631                           
 19632                           
 19633                           ;locked_task.c: 240: if (data->holdCountB == 0){
 19634  1EEE  0857               	movf	locked_Main@data,w
 19635  1EEF  0086               	movwf	6
 19636  1EF0  0858               	movf	locked_Main@data+1,w
 19637  1EF1  0087               	movwf	7
 19638  1EF2  3145               	addfsr 1,5
 19639  1EF3  0016               	moviw fsr1++
 19640  1EF4  0401               	iorwf	1,w
 19641  1EF5  1D03               	btfss	3,2
 19642  1EF6  2F08               	goto	l9681
 19643                           
 19644                           ;locked_task.c: 241: pw_found = locked_secret_check(data, 2 );
 19645  1EF7  0858               	movf	locked_Main@data+1,w
 19646  1EF8  00F8               	movwf	locked_secret_check@data+1
 19647  1EF9  0857               	movf	locked_Main@data,w
 19648  1EFA  00F7               	movwf	locked_secret_check@data
 19649  1EFB  3002               	movlw	2
 19650  1EFC  00D4               	movwf	??_locked_Main
 19651  1EFD  0854               	movf	??_locked_Main,w
 19652  1EFE  00F9               	movwf	locked_secret_check@buttonPressed
 19653  1EFF  3190  200F  319D   	fcall	_locked_secret_check
 19654  1F02  0020               	movlb	0	; select bank0
 19655  1F03  00D5               	movwf	??_locked_Main+1
 19656  1F04  0855               	movf	??_locked_Main+1,w
 19657  1F05  0021               	movlb	1	; select bank1
 19658  1F06  00C3               	movwf	_pw_found^(0+128)
 19659                           
 19660                           ;locked_task.c: 242: }
 19661  1F07  2F1E               	goto	l9685
 19662  1F08                     l9681:	
 19663                           
 19664                           ;locked_task.c: 243: else{
 19665                           ;locked_task.c: 244: nullifyBadge_segDisplayPutStr(data->badge, "N   ");
 19666  1F08  30DB               	movlw	low (STR_47| (0+32768))
 19667  1F09  0020               	movlb	0	; select bank0
 19668  1F0A  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 19669  1F0B  30BB               	movlw	high (STR_47| (0+32768))
 19670  1F0C  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 19671  1F0D  0857               	movf	locked_Main@data,w
 19672  1F0E  0086               	movwf	6
 19673  1F0F  0858               	movf	locked_Main@data+1,w
 19674  1F10  0087               	movwf	7
 19675  1F11  0801               	movf	1,w
 19676  1F12  31B2  221E  319D   	fcall	_nullifyBadge_segDisplayPutStr
 19677                           
 19678                           ;locked_task.c: 245: nullifyBadge_segDisplayForceUpdate(data->badge);
 19679  1F15  0020               	movlb	0	; select bank0
 19680  1F16  0857               	movf	locked_Main@data,w
 19681  1F17  0086               	movwf	6
 19682  1F18  0858               	movf	locked_Main@data+1,w
 19683  1F19  0087               	movwf	7
 19684  1F1A  0801               	movf	1,w
 19685  1F1B  31B1  21E2  319D   	fcall	_nullifyBadge_segDisplayForceUpdate
 19686  1F1E                     l9685:	
 19687                           
 19688                           ;locked_task.c: 246: }
 19689                           ;locked_task.c: 247: data->holdCountA = 0;
 19690  1F1E  0020               	movlb	0	; select bank0
 19691  1F1F  0857               	movf	locked_Main@data,w
 19692  1F20  0086               	movwf	6
 19693  1F21  0858               	movf	locked_Main@data+1,w
 19694  1F22  0087               	movwf	7
 19695  1F23  3143               	addfsr 1,3
 19696  1F24  3000               	movlw	0
 19697  1F25  3FC0               	movwi [0]fsr1
 19698  1F26  3FC1               	movwi [1]fsr1
 19699                           
 19700                           ;locked_task.c: 248: data->holdCountB += 1;
 19701  1F27  0857               	movf	locked_Main@data,w
 19702  1F28  0086               	movwf	6
 19703  1F29  0858               	movf	locked_Main@data+1,w
 19704  1F2A  0087               	movwf	7
 19705  1F2B  3145               	addfsr 1,5
 19706  1F2C  3001               	movlw	1
 19707  1F2D  0781               	addwf	1,f
 19708  1F2E  3141               	addfsr 1,1
 19709  1F2F  1803               	skipnc
 19710  1F30  0A81               	incf	1,f
 19711                           
 19712                           ;locked_task.c: 249: data->holdCountX = 0;
 19713  1F31  0857               	movf	locked_Main@data,w
 19714  1F32  0086               	movwf	6
 19715  1F33  0858               	movf	locked_Main@data+1,w
 19716  1F34  0087               	movwf	7
 19717  1F35  3147               	addfsr 1,7
 19718  1F36  3000               	movlw	0
 19719  1F37  3FC0               	movwi [0]fsr1
 19720  1F38  3FC1               	movwi [1]fsr1
 19721                           
 19722                           ;locked_task.c: 250: data->holdCountY = 0;
 19723  1F39  0857               	movf	locked_Main@data,w
 19724  1F3A  0086               	movwf	6
 19725  1F3B  0858               	movf	locked_Main@data+1,w
 19726  1F3C  0087               	movwf	7
 19727  1F3D  3149               	addfsr 1,9
 19728  1F3E  3000               	movlw	0
 19729  1F3F  3FC0               	movwi [0]fsr1
 19730  1F40  3FC1               	movwi [1]fsr1
 19731                           
 19732                           ;locked_task.c: 251: data->noholdCount = 0;
 19733  1F41  0857               	movf	locked_Main@data,w
 19734  1F42  0086               	movwf	6
 19735  1F43  0858               	movf	locked_Main@data+1,w
 19736  1F44  0087               	movwf	7
 19737  1F45  314B               	addfsr 1,11
 19738  1F46  3000               	movlw	0
 19739  1F47  3FC0               	movwi [0]fsr1
 19740  1F48  3FC1               	movwi [1]fsr1
 19741                           
 19742                           ;locked_task.c: 252: break;
 19743  1F49  2FDD               	goto	l9719
 19744  1F4A                     l9695:	
 19745                           ;locked_task.c: 253: case 1:
 19746                           
 19747                           
 19748                           ;locked_task.c: 254: if (data->holdCountA == 0){
 19749  1F4A  0857               	movf	locked_Main@data,w
 19750  1F4B  0086               	movwf	6
 19751  1F4C  0858               	movf	locked_Main@data+1,w
 19752  1F4D  0087               	movwf	7
 19753  1F4E  3143               	addfsr 1,3
 19754  1F4F  0016               	moviw fsr1++
 19755  1F50  0401               	iorwf	1,w
 19756  1F51  1D03               	btfss	3,2
 19757  1F52  2F62               	goto	l9699
 19758                           
 19759                           ;locked_task.c: 255: pw_found = locked_secret_check(data, 1 );
 19760  1F53  0858               	movf	locked_Main@data+1,w
 19761  1F54  00F8               	movwf	locked_secret_check@data+1
 19762  1F55  0857               	movf	locked_Main@data,w
 19763  1F56  00F7               	movwf	locked_secret_check@data
 19764  1F57  01F9               	clrf	locked_secret_check@buttonPressed
 19765  1F58  0AF9               	incf	locked_secret_check@buttonPressed,f
 19766  1F59  3190  200F  319D   	fcall	_locked_secret_check
 19767  1F5C  0020               	movlb	0	; select bank0
 19768  1F5D  00D4               	movwf	??_locked_Main
 19769  1F5E  0854               	movf	??_locked_Main,w
 19770  1F5F  0021               	movlb	1	; select bank1
 19771  1F60  00C3               	movwf	_pw_found^(0+128)
 19772                           
 19773                           ;locked_task.c: 256: }
 19774  1F61  2F78               	goto	l9703
 19775  1F62                     l9699:	
 19776                           
 19777                           ;locked_task.c: 257: else{
 19778                           ;locked_task.c: 259: nullifyBadge_segDisplayPutStr(data->badge, "  LL");
 19779  1F62  30EA               	movlw	low (STR_48| (0+32768))
 19780  1F63  0020               	movlb	0	; select bank0
 19781  1F64  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 19782  1F65  30BB               	movlw	high (STR_48| (0+32768))
 19783  1F66  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 19784  1F67  0857               	movf	locked_Main@data,w
 19785  1F68  0086               	movwf	6
 19786  1F69  0858               	movf	locked_Main@data+1,w
 19787  1F6A  0087               	movwf	7
 19788  1F6B  0801               	movf	1,w
 19789  1F6C  31B2  221E  319D   	fcall	_nullifyBadge_segDisplayPutStr
 19790                           
 19791                           ;locked_task.c: 260: nullifyBadge_segDisplayForceUpdate(data->badge);
 19792  1F6F  0020               	movlb	0	; select bank0
 19793  1F70  0857               	movf	locked_Main@data,w
 19794  1F71  0086               	movwf	6
 19795  1F72  0858               	movf	locked_Main@data+1,w
 19796  1F73  0087               	movwf	7
 19797  1F74  0801               	movf	1,w
 19798  1F75  31B1  21E2  319D   	fcall	_nullifyBadge_segDisplayForceUpdate
 19799  1F78                     l9703:	
 19800                           
 19801                           ;locked_task.c: 261: }
 19802                           ;locked_task.c: 262: data->holdCountA += 1;
 19803  1F78  0020               	movlb	0	; select bank0
 19804  1F79  0857               	movf	locked_Main@data,w
 19805  1F7A  0086               	movwf	6
 19806  1F7B  0858               	movf	locked_Main@data+1,w
 19807  1F7C  0087               	movwf	7
 19808  1F7D  3143               	addfsr 1,3
 19809  1F7E  3001               	movlw	1
 19810  1F7F  0781               	addwf	1,f
 19811  1F80  3141               	addfsr 1,1
 19812  1F81  1803               	skipnc
 19813  1F82  0A81               	incf	1,f
 19814                           
 19815                           ;locked_task.c: 263: data->holdCountB = 0;
 19816  1F83  0857               	movf	locked_Main@data,w
 19817  1F84  0086               	movwf	6
 19818  1F85  0858               	movf	locked_Main@data+1,w
 19819  1F86  0087               	movwf	7
 19820  1F87  3145               	addfsr 1,5
 19821  1F88  3000               	movlw	0
 19822  1F89  3FC0               	movwi [0]fsr1
 19823  1F8A  3FC1               	movwi [1]fsr1
 19824                           
 19825                           ;locked_task.c: 264: data->holdCountX = 0;
 19826  1F8B  0857               	movf	locked_Main@data,w
 19827  1F8C  0086               	movwf	6
 19828  1F8D  0858               	movf	locked_Main@data+1,w
 19829  1F8E  0087               	movwf	7
 19830  1F8F  3147               	addfsr 1,7
 19831  1F90  3000               	movlw	0
 19832  1F91  3FC0               	movwi [0]fsr1
 19833  1F92  3FC1               	movwi [1]fsr1
 19834                           
 19835                           ;locked_task.c: 265: data->holdCountY = 0;
 19836  1F93  0857               	movf	locked_Main@data,w
 19837  1F94  0086               	movwf	6
 19838  1F95  0858               	movf	locked_Main@data+1,w
 19839  1F96  0087               	movwf	7
 19840  1F97  3149               	addfsr 1,9
 19841  1F98  3000               	movlw	0
 19842  1F99  3FC0               	movwi [0]fsr1
 19843  1F9A  3FC1               	movwi [1]fsr1
 19844                           
 19845                           ;locked_task.c: 266: data->noholdCount = 0;
 19846  1F9B  0857               	movf	locked_Main@data,w
 19847  1F9C  0086               	movwf	6
 19848  1F9D  0858               	movf	locked_Main@data+1,w
 19849  1F9E  0087               	movwf	7
 19850  1F9F  314B               	addfsr 1,11
 19851  1FA0  3000               	movlw	0
 19852  1FA1  3FC0               	movwi [0]fsr1
 19853  1FA2  3FC1               	movwi [1]fsr1
 19854                           
 19855                           ;locked_task.c: 267: break;
 19856  1FA3  2FDD               	goto	l9719
 19857  1FA4                     l9713:	
 19858                           ;locked_task.c: 268: default:
 19859                           
 19860                           
 19861                           ;locked_task.c: 269: data->holdCountA = 0;
 19862  1FA4  0857               	movf	locked_Main@data,w
 19863  1FA5  0086               	movwf	6
 19864  1FA6  0858               	movf	locked_Main@data+1,w
 19865  1FA7  0087               	movwf	7
 19866  1FA8  3143               	addfsr 1,3
 19867  1FA9  3000               	movlw	0
 19868  1FAA  3FC0               	movwi [0]fsr1
 19869  1FAB  3FC1               	movwi [1]fsr1
 19870                           
 19871                           ;locked_task.c: 270: data->holdCountB = 0;
 19872  1FAC  0857               	movf	locked_Main@data,w
 19873  1FAD  0086               	movwf	6
 19874  1FAE  0858               	movf	locked_Main@data+1,w
 19875  1FAF  0087               	movwf	7
 19876  1FB0  3145               	addfsr 1,5
 19877  1FB1  3000               	movlw	0
 19878  1FB2  3FC0               	movwi [0]fsr1
 19879  1FB3  3FC1               	movwi [1]fsr1
 19880                           
 19881                           ;locked_task.c: 271: data->holdCountX = 0;
 19882  1FB4  0857               	movf	locked_Main@data,w
 19883  1FB5  0086               	movwf	6
 19884  1FB6  0858               	movf	locked_Main@data+1,w
 19885  1FB7  0087               	movwf	7
 19886  1FB8  3147               	addfsr 1,7
 19887  1FB9  3000               	movlw	0
 19888  1FBA  3FC0               	movwi [0]fsr1
 19889  1FBB  3FC1               	movwi [1]fsr1
 19890                           
 19891                           ;locked_task.c: 272: data->holdCountY = 0;
 19892  1FBC  0857               	movf	locked_Main@data,w
 19893  1FBD  0086               	movwf	6
 19894  1FBE  0858               	movf	locked_Main@data+1,w
 19895  1FBF  0087               	movwf	7
 19896  1FC0  3149               	addfsr 1,9
 19897  1FC1  3000               	movlw	0
 19898  1FC2  3FC0               	movwi [0]fsr1
 19899  1FC3  3FC1               	movwi [1]fsr1
 19900                           
 19901                           ;locked_task.c: 273: data->noholdCount += 1;
 19902  1FC4  0857               	movf	locked_Main@data,w
 19903  1FC5  0086               	movwf	6
 19904  1FC6  0858               	movf	locked_Main@data+1,w
 19905  1FC7  0087               	movwf	7
 19906  1FC8  314B               	addfsr 1,11
 19907  1FC9  3001               	movlw	1
 19908  1FCA  0781               	addwf	1,f
 19909  1FCB  3141               	addfsr 1,1
 19910  1FCC  1803               	skipnc
 19911  1FCD  0A81               	incf	1,f
 19912                           
 19913                           ;locked_task.c: 274: }
 19914  1FCE  2FDD               	goto	l9719
 19915  1FCF                     l9717:	
 19916  1FCF  0856               	movf	locked_Main@buttonPressed,w
 19917                           
 19918                           ; Switch size 1, requested type "space"
 19919                           ; Number of cases is 4, Range of values is 1 to 8
 19920                           ; switch strategies available:
 19921                           ; Name         Instructions Cycles
 19922                           ; simple_byte           13     7 (average)
 19923                           ; direct_byte           25     9 (fixed)
 19924                           ; jumptable            263     9 (fixed)
 19925                           ;	Chosen strategy is simple_byte
 19926  1FD0  3A01               	xorlw	1	; case 1
 19927  1FD1  1903               	skipnz
 19928  1FD2  2F4A               	goto	l9695
 19929  1FD3  3A03               	xorlw	3	; case 2
 19930  1FD4  1903               	skipnz
 19931  1FD5  2EEE               	goto	l9677
 19932  1FD6  3A06               	xorlw	6	; case 4
 19933  1FD7  1903               	skipnz
 19934  1FD8  2E86               	goto	l9655
 19935  1FD9  3A0C               	xorlw	12	; case 8
 19936  1FDA  1903               	skipnz
 19937  1FDB  2E91               	goto	l9659
 19938  1FDC  2FA4               	goto	l9713
 19939  1FDD                     l9719:	
 19940                           
 19941                           ;locked_task.c: 275: if(pw_found==1){
 19942  1FDD  0021               	movlb	1	; select bank1
 19943  1FDE  0343               	decf	_pw_found^(0+128),w
 19944  1FDF  1D03               	btfss	3,2
 19945  1FE0  0008               	return
 19946                           
 19947                           ;locked_task.c: 276: if (badge_locked){
 19948  1FE1  0844               	movf	_badge_locked^(0+128),w
 19949  1FE2  1903               	btfsc	3,2
 19950  1FE3  2FF2               	goto	l9725
 19951                           
 19952                           ;locked_task.c: 278: data->state = LOCKED_UNLOCKING_STATE;
 19953  1FE4  0020               	movlb	0	; select bank0
 19954  1FE5  0857               	movf	locked_Main@data,w
 19955  1FE6  3E0D               	addlw	13
 19956  1FE7  00D4               	movwf	??_locked_Main
 19957  1FE8  3000               	movlw	0
 19958  1FE9  3D58               	addwfc	locked_Main@data+1,w
 19959  1FEA  00D5               	movwf	??_locked_Main+1
 19960  1FEB  0854               	movf	??_locked_Main,w
 19961  1FEC  0086               	movwf	6
 19962  1FED  0855               	movf	??_locked_Main+1,w
 19963  1FEE  0087               	movwf	7
 19964  1FEF  3003               	movlw	3
 19965  1FF0  0081               	movwf	1
 19966                           
 19967                           ;locked_task.c: 279: }
 19968  1FF1  0008               	return
 19969  1FF2                     l9725:	
 19970                           
 19971                           ;locked_task.c: 280: else {
 19972                           ;locked_task.c: 282: data->state = LOCKED_LOCKING_STATE;
 19973  1FF2  0020               	movlb	0	; select bank0
 19974  1FF3  0857               	movf	locked_Main@data,w
 19975  1FF4  3E0D               	addlw	13
 19976  1FF5  00D4               	movwf	??_locked_Main
 19977  1FF6  3000               	movlw	0
 19978  1FF7  3D58               	addwfc	locked_Main@data+1,w
 19979  1FF8  00D5               	movwf	??_locked_Main+1
 19980  1FF9  0854               	movf	??_locked_Main,w
 19981  1FFA  0086               	movwf	6
 19982  1FFB  0855               	movf	??_locked_Main+1,w
 19983  1FFC  0087               	movwf	7
 19984  1FFD  3001               	movlw	1
 19985  1FFE  0081               	movwf	1
 19986  1FFF  0008               	return
 19987  2000                     __end_of_locked_Main:	
 19988                           
 19989                           	psect	text17
 19990  1B38                     __ptext17:	
 19991 ;; *************** function _menu_Main *****************
 19992 ;; Defined at:
 19993 ;;		line 59 in file "menu_task.c"
 19994 ;; Parameters:    Size  Location     Type
 19995 ;;  taskData        2   50[BANK0 ] PTR void 
 19996 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19997 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19998 ;; Auto vars:     Size  Location     Type
 19999 ;;  data            2   55[BANK0 ] PTR struct t_menu_taskDa
 20000 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20001 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20002 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 20003 ;; Return value:  Size  Location     Type
 20004 ;;                  1    wreg      void 
 20005 ;; Registers used:
 20006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20007 ;; Tracked objects:
 20008 ;;		On entry : 0/0
 20009 ;;		On exit  : 0/0
 20010 ;;		Unchanged: 0/0
 20011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20012 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20013 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20014 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20015 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20016 ;;Total ram usage:        7 bytes
 20017 ;; Hardware stack levels used:    1
 20018 ;; Hardware stack levels required when called:   12
 20019 ;; This function calls:
 20020 ;;		_menu_clear
 20021 ;;		_menu_display_option
 20022 ;;		_menu_run_option
 20023 ;;		_nullifyBadge_buttonsGet
 20024 ;;		_slot_Setup
 20025 ;; This function is called by:
 20026 ;;		_main
 20027 ;;		_scheduler_TaskRun
 20028 ;; This function uses a non-reentrant model
 20029 ;;
 20030                           
 20031                           
 20032                           ;psect for function _menu_Main
 20033  1B38                     _menu_Main:	
 20034                           
 20035                           ;menu_task.c: 60: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 20036                           
 20037                           ;incstack = 0
 20038                           ; Regs used in _menu_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20039  1B38  0020               	movlb	0	; select bank0
 20040  1B39  0853               	movf	menu_Main@taskData+1,w
 20041  1B3A  00D8               	movwf	menu_Main@data+1
 20042  1B3B  0852               	movf	menu_Main@taskData,w
 20043  1B3C  00D7               	movwf	menu_Main@data
 20044                           
 20045                           ;menu_task.c: 61: u8 buttonPressed;
 20046                           ;menu_task.c: 63: if ( currentTask != MENU_TASK ){
 20047  1B3D  0021               	movlb	1	; select bank1
 20048  1B3E  083A               	movf	_currentTask^(0+128),w
 20049  1B3F  043B               	iorwf	(_currentTask+1)^(0+128),w
 20050  1B40  1903               	btfsc	3,2
 20051  1B41  2BBC               	goto	l9053
 20052                           
 20053                           ;menu_task.c: 65: buttonPressed = nullifyBadge_buttonsGet();
 20054  1B42  31B5  25FD  319B   	fcall	_nullifyBadge_buttonsGet
 20055  1B45  0020               	movlb	0	; select bank0
 20056  1B46  00D4               	movwf	??_menu_Main
 20057  1B47  0854               	movf	??_menu_Main,w
 20058  1B48  00D6               	movwf	menu_Main@buttonPressed
 20059                           
 20060                           ;menu_task.c: 66: switch (buttonPressed) {
 20061  1B49  2BB6               	goto	l9051
 20062  1B4A                     l9029:	
 20063                           ;menu_task.c: 67: case 1 | 2 | 8:
 20064                           
 20065                           
 20066                           ;menu_task.c: 68: currentTask = MENU_TASK;
 20067  1B4A  0021               	movlb	1	; select bank1
 20068  1B4B  01BA               	clrf	_currentTask^(0+128)
 20069  1B4C  01BB               	clrf	(_currentTask+1)^(0+128)
 20070                           
 20071                           ;menu_task.c: 69: menu_clear(data);
 20072  1B4D  0020               	movlb	0	; select bank0
 20073  1B4E  0858               	movf	menu_Main@data+1,w
 20074  1B4F  00BA               	movwf	menu_clear@data+1
 20075  1B50  0857               	movf	menu_Main@data,w
 20076  1B51  00B9               	movwf	menu_clear@data
 20077  1B52  31A9  2184  319B   	fcall	_menu_clear
 20078                           
 20079                           ;menu_task.c: 72: slot_Setup(slot_taskData);
 20080  1B55  0021               	movlb	1	; select bank1
 20081  1B56  083D               	movf	(_slot_taskData+1)^(0+128),w
 20082  1B57  0020               	movlb	0	; select bank0
 20083  1B58  00B0               	movwf	slot_Setup@taskData+1
 20084  1B59  0021               	movlb	1	; select bank1
 20085  1B5A  083C               	movf	_slot_taskData^(0+128),w
 20086  1B5B  0020               	movlb	0	; select bank0
 20087  1B5C  00AF               	movwf	slot_Setup@taskData
 20088  1B5D  31AB  23DA  319B   	fcall	_slot_Setup
 20089                           
 20090                           ;menu_task.c: 75: data->holdCountA = 1;
 20091  1B60  0020               	movlb	0	; select bank0
 20092  1B61  0857               	movf	menu_Main@data,w
 20093  1B62  0086               	movwf	6
 20094  1B63  0858               	movf	menu_Main@data+1,w
 20095  1B64  0087               	movwf	7
 20096  1B65  3144               	addfsr 1,4
 20097  1B66  3001               	movlw	1
 20098  1B67  3FC0               	movwi [0]fsr1
 20099  1B68  3000               	movlw	0
 20100  1B69  3FC1               	movwi [1]fsr1
 20101                           
 20102                           ;menu_task.c: 76: data->holdCountB = 1;
 20103  1B6A  0857               	movf	menu_Main@data,w
 20104  1B6B  0086               	movwf	6
 20105  1B6C  0858               	movf	menu_Main@data+1,w
 20106  1B6D  0087               	movwf	7
 20107  1B6E  3146               	addfsr 1,6
 20108  1B6F  3001               	movlw	1
 20109  1B70  3FC0               	movwi [0]fsr1
 20110  1B71  3000               	movlw	0
 20111  1B72  3FC1               	movwi [1]fsr1
 20112                           
 20113                           ;menu_task.c: 77: data->holdCountX = 1;
 20114  1B73  0857               	movf	menu_Main@data,w
 20115  1B74  0086               	movwf	6
 20116  1B75  0858               	movf	menu_Main@data+1,w
 20117  1B76  0087               	movwf	7
 20118  1B77  3148               	addfsr 1,8
 20119  1B78  3001               	movlw	1
 20120  1B79  3FC0               	movwi [0]fsr1
 20121  1B7A  3000               	movlw	0
 20122  1B7B  3FC1               	movwi [1]fsr1
 20123                           
 20124                           ;menu_task.c: 78: data->holdCountY = 1;
 20125  1B7C  0857               	movf	menu_Main@data,w
 20126  1B7D  0086               	movwf	6
 20127  1B7E  0858               	movf	menu_Main@data+1,w
 20128  1B7F  0087               	movwf	7
 20129  1B80  314A               	addfsr 1,10
 20130  1B81  3001               	movlw	1
 20131  1B82  3FC0               	movwi [0]fsr1
 20132  1B83  3000               	movlw	0
 20133  1B84  3FC1               	movwi [1]fsr1
 20134                           
 20135                           ;menu_task.c: 80: menu_option_idx = 0;
 20136  1B85  0021               	movlb	1	; select bank1
 20137  1B86  01B6               	clrf	_menu_option_idx^(0+128)
 20138  1B87  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 20139                           
 20140                           ;menu_task.c: 81: menu_display_option(data);
 20141  1B88  0020               	movlb	0	; select bank0
 20142  1B89  0858               	movf	menu_Main@data+1,w
 20143  1B8A  00CD               	movwf	menu_display_option@data+1
 20144  1B8B  0857               	movf	menu_Main@data,w
 20145  1B8C  00CC               	movwf	menu_display_option@data
 20146  1B8D  31AD  2592         	fcall	_menu_display_option
 20147                           
 20148                           ;menu_task.c: 82: break;
 20149  1B8F  0008               	return
 20150  1B90                     l9047:	
 20151                           ;menu_task.c: 83: default:
 20152                           
 20153                           
 20154                           ;menu_task.c: 85: data->holdCountA = 1;
 20155  1B90  0020               	movlb	0	; select bank0
 20156  1B91  0857               	movf	menu_Main@data,w
 20157  1B92  0086               	movwf	6
 20158  1B93  0858               	movf	menu_Main@data+1,w
 20159  1B94  0087               	movwf	7
 20160  1B95  3144               	addfsr 1,4
 20161  1B96  3001               	movlw	1
 20162  1B97  3FC0               	movwi [0]fsr1
 20163  1B98  3000               	movlw	0
 20164  1B99  3FC1               	movwi [1]fsr1
 20165                           
 20166                           ;menu_task.c: 86: data->holdCountB = 1;
 20167  1B9A  0857               	movf	menu_Main@data,w
 20168  1B9B  0086               	movwf	6
 20169  1B9C  0858               	movf	menu_Main@data+1,w
 20170  1B9D  0087               	movwf	7
 20171  1B9E  3146               	addfsr 1,6
 20172  1B9F  3001               	movlw	1
 20173  1BA0  3FC0               	movwi [0]fsr1
 20174  1BA1  3000               	movlw	0
 20175  1BA2  3FC1               	movwi [1]fsr1
 20176                           
 20177                           ;menu_task.c: 87: data->holdCountX = 1;
 20178  1BA3  0857               	movf	menu_Main@data,w
 20179  1BA4  0086               	movwf	6
 20180  1BA5  0858               	movf	menu_Main@data+1,w
 20181  1BA6  0087               	movwf	7
 20182  1BA7  3148               	addfsr 1,8
 20183  1BA8  3001               	movlw	1
 20184  1BA9  3FC0               	movwi [0]fsr1
 20185  1BAA  3000               	movlw	0
 20186  1BAB  3FC1               	movwi [1]fsr1
 20187                           
 20188                           ;menu_task.c: 88: data->holdCountY = 1;
 20189  1BAC  0857               	movf	menu_Main@data,w
 20190  1BAD  0086               	movwf	6
 20191  1BAE  0858               	movf	menu_Main@data+1,w
 20192  1BAF  0087               	movwf	7
 20193  1BB0  314A               	addfsr 1,10
 20194  1BB1  3001               	movlw	1
 20195  1BB2  3FC0               	movwi [0]fsr1
 20196  1BB3  3000               	movlw	0
 20197  1BB4  3FC1               	movwi [1]fsr1
 20198                           
 20199                           ;menu_task.c: 90: }
 20200                           
 20201                           ;menu_task.c: 89: break;
 20202  1BB5  0008               	return
 20203  1BB6                     l9051:	
 20204  1BB6  0856               	movf	menu_Main@buttonPressed,w
 20205                           
 20206                           ; Switch size 1, requested type "space"
 20207                           ; Number of cases is 1, Range of values is 11 to 11
 20208                           ; switch strategies available:
 20209                           ; Name         Instructions Cycles
 20210                           ; simple_byte            4     3 (average)
 20211                           ; direct_byte           11     9 (fixed)
 20212                           ; jumptable            263     9 (fixed)
 20213                           ;	Chosen strategy is simple_byte
 20214  1BB7  3A0B               	xorlw	11	; case 11
 20215  1BB8  1903               	skipnz
 20216  1BB9  2B4A               	goto	l9029
 20217  1BBA  2B90               	goto	l9047
 20218                           
 20219                           ;menu_task.c: 91: return;
 20220  1BBB  0008               	return
 20221  1BBC                     l9053:	
 20222                           
 20223                           ;menu_task.c: 92: }
 20224                           ;menu_task.c: 94: buttonPressed = nullifyBadge_buttonsGet();
 20225  1BBC  31B5  25FD  319B   	fcall	_nullifyBadge_buttonsGet
 20226  1BBF  0020               	movlb	0	; select bank0
 20227  1BC0  00D4               	movwf	??_menu_Main
 20228  1BC1  0854               	movf	??_menu_Main,w
 20229  1BC2  00D6               	movwf	menu_Main@buttonPressed
 20230                           
 20231                           ;menu_task.c: 95: switch (buttonPressed) {
 20232  1BC3  2D1D               	goto	l9137
 20233  1BC4                     l9055:	
 20234                           ;menu_task.c: 96: case 1:
 20235                           
 20236                           
 20237                           ;menu_task.c: 98: if (data->holdCountA == 0){
 20238  1BC4  0857               	movf	menu_Main@data,w
 20239  1BC5  0086               	movwf	6
 20240  1BC6  0858               	movf	menu_Main@data+1,w
 20241  1BC7  0087               	movwf	7
 20242  1BC8  3144               	addfsr 1,4
 20243  1BC9  0016               	moviw fsr1++
 20244  1BCA  0401               	iorwf	1,w
 20245  1BCB  1D03               	btfss	3,2
 20246  1BCC  2BDD               	goto	l9063
 20247                           
 20248                           ;menu_task.c: 100: if (menu_option_idx == 0){
 20249  1BCD  0021               	movlb	1	; select bank1
 20250  1BCE  0836               	movf	_menu_option_idx^(0+128),w
 20251  1BCF  0437               	iorwf	(_menu_option_idx+1)^(0+128),w
 20252  1BD0  1D03               	btfss	3,2
 20253  1BD1  2BD9               	goto	l9061
 20254                           
 20255                           ;menu_task.c: 101: menu_option_idx = menu_option_size - 1;
 20256  1BD2  0834               	movf	_menu_option_size^(0+128),w
 20257  1BD3  3EFF               	addlw	255
 20258  1BD4  00B6               	movwf	_menu_option_idx^(0+128)
 20259  1BD5  30FF               	movlw	255
 20260  1BD6  3D35               	addwfc	(_menu_option_size+1)^(0+128),w
 20261  1BD7  00B7               	movwf	(_menu_option_idx+1)^(0+128)
 20262                           
 20263                           ;menu_task.c: 102: }
 20264  1BD8  2BDD               	goto	l9063
 20265  1BD9                     l9061:	
 20266                           
 20267                           ;menu_task.c: 103: else {
 20268                           ;menu_task.c: 104: menu_option_idx -= 1;
 20269  1BD9  3001               	movlw	1
 20270  1BDA  02B6               	subwf	_menu_option_idx^(0+128),f
 20271  1BDB  3000               	movlw	0
 20272  1BDC  3BB7               	subwfb	(_menu_option_idx+1)^(0+128),f
 20273  1BDD                     l9063:	
 20274                           
 20275                           ;menu_task.c: 105: }
 20276                           ;menu_task.c: 106: }
 20277                           ;menu_task.c: 107: menu_display_option(data);
 20278  1BDD  0020               	movlb	0	; select bank0
 20279  1BDE  0858               	movf	menu_Main@data+1,w
 20280  1BDF  00CD               	movwf	menu_display_option@data+1
 20281  1BE0  0857               	movf	menu_Main@data,w
 20282  1BE1  00CC               	movwf	menu_display_option@data
 20283  1BE2  31AD  2592  319B   	fcall	_menu_display_option
 20284                           
 20285                           ;menu_task.c: 108: data->holdCountA += 1;
 20286  1BE5  0020               	movlb	0	; select bank0
 20287  1BE6  0857               	movf	menu_Main@data,w
 20288  1BE7  0086               	movwf	6
 20289  1BE8  0858               	movf	menu_Main@data+1,w
 20290  1BE9  0087               	movwf	7
 20291  1BEA  3144               	addfsr 1,4
 20292  1BEB  3001               	movlw	1
 20293  1BEC  0781               	addwf	1,f
 20294  1BED  3141               	addfsr 1,1
 20295  1BEE  1803               	skipnc
 20296  1BEF  0A81               	incf	1,f
 20297                           
 20298                           ;menu_task.c: 109: data->holdCountB = 0;
 20299  1BF0  0857               	movf	menu_Main@data,w
 20300  1BF1  0086               	movwf	6
 20301  1BF2  0858               	movf	menu_Main@data+1,w
 20302  1BF3  0087               	movwf	7
 20303  1BF4  3146               	addfsr 1,6
 20304  1BF5  3000               	movlw	0
 20305  1BF6  3FC0               	movwi [0]fsr1
 20306  1BF7  3FC1               	movwi [1]fsr1
 20307                           
 20308                           ;menu_task.c: 110: data->holdCountX = 0;
 20309  1BF8  0857               	movf	menu_Main@data,w
 20310  1BF9  0086               	movwf	6
 20311  1BFA  0858               	movf	menu_Main@data+1,w
 20312  1BFB  0087               	movwf	7
 20313  1BFC  3148               	addfsr 1,8
 20314  1BFD  3000               	movlw	0
 20315  1BFE  3FC0               	movwi [0]fsr1
 20316  1BFF  3FC1               	movwi [1]fsr1
 20317                           
 20318                           ;menu_task.c: 111: data->holdCountY = 0;
 20319  1C00  0857               	movf	menu_Main@data,w
 20320  1C01  0086               	movwf	6
 20321  1C02  0858               	movf	menu_Main@data+1,w
 20322  1C03  0087               	movwf	7
 20323  1C04  314A               	addfsr 1,10
 20324  1C05  3000               	movlw	0
 20325  1C06  3FC0               	movwi [0]fsr1
 20326  1C07  3FC1               	movwi [1]fsr1
 20327                           
 20328                           ;menu_task.c: 112: data->noholdCount = 0;
 20329  1C08  0857               	movf	menu_Main@data,w
 20330  1C09  0086               	movwf	6
 20331  1C0A  0858               	movf	menu_Main@data+1,w
 20332  1C0B  0087               	movwf	7
 20333  1C0C  314C               	addfsr 1,12
 20334  1C0D  3000               	movlw	0
 20335  1C0E  3FC0               	movwi [0]fsr1
 20336  1C0F  3FC1               	movwi [1]fsr1
 20337                           
 20338                           ;menu_task.c: 113: break;
 20339  1C10  0008               	return
 20340  1C11                     l9075:	
 20341                           ;menu_task.c: 114: case 2:
 20342                           
 20343                           
 20344                           ;menu_task.c: 116: if (data->holdCountB == 0){
 20345  1C11  0857               	movf	menu_Main@data,w
 20346  1C12  0086               	movwf	6
 20347  1C13  0858               	movf	menu_Main@data+1,w
 20348  1C14  0087               	movwf	7
 20349  1C15  3146               	addfsr 1,6
 20350  1C16  0016               	moviw fsr1++
 20351  1C17  0401               	iorwf	1,w
 20352  1C18  1D03               	btfss	3,2
 20353  1C19  2C39               	goto	l9083
 20354                           
 20355                           ;menu_task.c: 118: if (menu_option_idx == menu_option_size - 1){
 20356  1C1A  0021               	movlb	1	; select bank1
 20357  1C1B  0834               	movf	_menu_option_size^(0+128),w
 20358  1C1C  3EFF               	addlw	255
 20359  1C1D  0020               	movlb	0	; select bank0
 20360  1C1E  00D4               	movwf	??_menu_Main
 20361  1C1F  30FF               	movlw	255
 20362  1C20  0021               	movlb	1	; select bank1
 20363  1C21  3D35               	addwfc	(_menu_option_size+1)^(0+128),w
 20364  1C22  0020               	movlb	0	; select bank0
 20365  1C23  00D5               	movwf	??_menu_Main+1
 20366  1C24  0021               	movlb	1	; select bank1
 20367  1C25  0837               	movf	(_menu_option_idx+1)^(0+128),w
 20368  1C26  0020               	movlb	0	; select bank0
 20369  1C27  0655               	xorwf	??_menu_Main+1,w
 20370  1C28  1D03               	skipz
 20371  1C29  2C2E               	goto	u5675
 20372  1C2A  0021               	movlb	1	; select bank1
 20373  1C2B  0836               	movf	_menu_option_idx^(0+128),w
 20374  1C2C  0020               	movlb	0	; select bank0
 20375  1C2D  0654               	xorwf	??_menu_Main,w
 20376  1C2E                     u5675:	
 20377  1C2E  1D03               	skipz
 20378  1C2F  2C34               	goto	l9081
 20379                           
 20380                           ;menu_task.c: 119: menu_option_idx = 0;
 20381  1C30  0021               	movlb	1	; select bank1
 20382  1C31  01B6               	clrf	_menu_option_idx^(0+128)
 20383  1C32  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 20384                           
 20385                           ;menu_task.c: 120: }
 20386  1C33  2C39               	goto	l9083
 20387  1C34                     l9081:	
 20388                           
 20389                           ;menu_task.c: 121: else {
 20390                           ;menu_task.c: 122: menu_option_idx += 1;
 20391  1C34  3001               	movlw	1
 20392  1C35  0021               	movlb	1	; select bank1
 20393  1C36  07B6               	addwf	_menu_option_idx^(0+128),f
 20394  1C37  3000               	movlw	0
 20395  1C38  3DB7               	addwfc	(_menu_option_idx+1)^(0+128),f
 20396  1C39                     l9083:	
 20397                           
 20398                           ;menu_task.c: 123: }
 20399                           ;menu_task.c: 124: }
 20400                           ;menu_task.c: 125: menu_display_option(data);
 20401  1C39  0020               	movlb	0	; select bank0
 20402  1C3A  0858               	movf	menu_Main@data+1,w
 20403  1C3B  00CD               	movwf	menu_display_option@data+1
 20404  1C3C  0857               	movf	menu_Main@data,w
 20405  1C3D  00CC               	movwf	menu_display_option@data
 20406  1C3E  31AD  2592  319B   	fcall	_menu_display_option
 20407                           
 20408                           ;menu_task.c: 126: data->holdCountA = 0;
 20409  1C41  0020               	movlb	0	; select bank0
 20410  1C42  0857               	movf	menu_Main@data,w
 20411  1C43  0086               	movwf	6
 20412  1C44  0858               	movf	menu_Main@data+1,w
 20413  1C45  0087               	movwf	7
 20414  1C46  3144               	addfsr 1,4
 20415  1C47  3000               	movlw	0
 20416  1C48  3FC0               	movwi [0]fsr1
 20417  1C49  3FC1               	movwi [1]fsr1
 20418                           
 20419                           ;menu_task.c: 127: data->holdCountB += 1;
 20420  1C4A  0857               	movf	menu_Main@data,w
 20421  1C4B  0086               	movwf	6
 20422  1C4C  0858               	movf	menu_Main@data+1,w
 20423  1C4D  0087               	movwf	7
 20424  1C4E  3146               	addfsr 1,6
 20425  1C4F  3001               	movlw	1
 20426  1C50  0781               	addwf	1,f
 20427  1C51  3141               	addfsr 1,1
 20428  1C52  1803               	skipnc
 20429  1C53  0A81               	incf	1,f
 20430                           
 20431                           ;menu_task.c: 128: data->holdCountX = 0;
 20432  1C54  0857               	movf	menu_Main@data,w
 20433  1C55  0086               	movwf	6
 20434  1C56  0858               	movf	menu_Main@data+1,w
 20435  1C57  0087               	movwf	7
 20436  1C58  3148               	addfsr 1,8
 20437  1C59  3000               	movlw	0
 20438  1C5A  3FC0               	movwi [0]fsr1
 20439  1C5B  3FC1               	movwi [1]fsr1
 20440                           
 20441                           ;menu_task.c: 129: data->holdCountY = 0;
 20442  1C5C  0857               	movf	menu_Main@data,w
 20443  1C5D  0086               	movwf	6
 20444  1C5E  0858               	movf	menu_Main@data+1,w
 20445  1C5F  0087               	movwf	7
 20446  1C60  314A               	addfsr 1,10
 20447  1C61  3000               	movlw	0
 20448  1C62  3FC0               	movwi [0]fsr1
 20449  1C63  3FC1               	movwi [1]fsr1
 20450                           
 20451                           ;menu_task.c: 130: data->noholdCount = 0;
 20452  1C64  0857               	movf	menu_Main@data,w
 20453  1C65  0086               	movwf	6
 20454  1C66  0858               	movf	menu_Main@data+1,w
 20455  1C67  0087               	movwf	7
 20456  1C68  314C               	addfsr 1,12
 20457  1C69  3000               	movlw	0
 20458  1C6A  3FC0               	movwi [0]fsr1
 20459  1C6B  3FC1               	movwi [1]fsr1
 20460                           
 20461                           ;menu_task.c: 131: break;
 20462  1C6C  0008               	return
 20463  1C6D                     l9095:	
 20464                           ;menu_task.c: 132: case 4:
 20465                           
 20466                           
 20467                           ;menu_task.c: 133: if (data->holdCountX == 0){
 20468  1C6D  0857               	movf	menu_Main@data,w
 20469  1C6E  0086               	movwf	6
 20470  1C6F  0858               	movf	menu_Main@data+1,w
 20471  1C70  0087               	movwf	7
 20472  1C71  3148               	addfsr 1,8
 20473  1C72  0016               	moviw fsr1++
 20474  1C73  0401               	iorwf	1,w
 20475  1C74  1D03               	btfss	3,2
 20476  1C75  2C82               	goto	l9101
 20477                           
 20478                           ;menu_task.c: 135: menu_clear(data);
 20479  1C76  0858               	movf	menu_Main@data+1,w
 20480  1C77  00BA               	movwf	menu_clear@data+1
 20481  1C78  0857               	movf	menu_Main@data,w
 20482  1C79  00B9               	movwf	menu_clear@data
 20483  1C7A  31A9  2184  319B   	fcall	_menu_clear
 20484                           
 20485                           ;menu_task.c: 136: currentTask = FLASHY_TASK;
 20486  1C7D  3002               	movlw	2
 20487  1C7E  0021               	movlb	1	; select bank1
 20488  1C7F  00BA               	movwf	_currentTask^(0+128)
 20489  1C80  3000               	movlw	0
 20490  1C81  00BB               	movwf	(_currentTask^(0+128)+1)
 20491  1C82                     l9101:	
 20492                           
 20493                           ;menu_task.c: 137: }
 20494                           ;menu_task.c: 138: data->holdCountA = 0;
 20495  1C82  0020               	movlb	0	; select bank0
 20496  1C83  0857               	movf	menu_Main@data,w
 20497  1C84  0086               	movwf	6
 20498  1C85  0858               	movf	menu_Main@data+1,w
 20499  1C86  0087               	movwf	7
 20500  1C87  3144               	addfsr 1,4
 20501  1C88  3000               	movlw	0
 20502  1C89  3FC0               	movwi [0]fsr1
 20503  1C8A  3FC1               	movwi [1]fsr1
 20504                           
 20505                           ;menu_task.c: 139: data->holdCountB = 0;
 20506  1C8B  0857               	movf	menu_Main@data,w
 20507  1C8C  0086               	movwf	6
 20508  1C8D  0858               	movf	menu_Main@data+1,w
 20509  1C8E  0087               	movwf	7
 20510  1C8F  3146               	addfsr 1,6
 20511  1C90  3000               	movlw	0
 20512  1C91  3FC0               	movwi [0]fsr1
 20513  1C92  3FC1               	movwi [1]fsr1
 20514                           
 20515                           ;menu_task.c: 140: data->holdCountX += 1;
 20516  1C93  0857               	movf	menu_Main@data,w
 20517  1C94  0086               	movwf	6
 20518  1C95  0858               	movf	menu_Main@data+1,w
 20519  1C96  0087               	movwf	7
 20520  1C97  3148               	addfsr 1,8
 20521  1C98  3001               	movlw	1
 20522  1C99  0781               	addwf	1,f
 20523  1C9A  3141               	addfsr 1,1
 20524  1C9B  1803               	skipnc
 20525  1C9C  0A81               	incf	1,f
 20526                           
 20527                           ;menu_task.c: 141: data->holdCountY = 0;
 20528  1C9D  0857               	movf	menu_Main@data,w
 20529  1C9E  0086               	movwf	6
 20530  1C9F  0858               	movf	menu_Main@data+1,w
 20531  1CA0  0087               	movwf	7
 20532  1CA1  314A               	addfsr 1,10
 20533  1CA2  3000               	movlw	0
 20534  1CA3  3FC0               	movwi [0]fsr1
 20535  1CA4  3FC1               	movwi [1]fsr1
 20536                           
 20537                           ;menu_task.c: 142: data->noholdCount = 0;
 20538  1CA5  0857               	movf	menu_Main@data,w
 20539  1CA6  0086               	movwf	6
 20540  1CA7  0858               	movf	menu_Main@data+1,w
 20541  1CA8  0087               	movwf	7
 20542  1CA9  314C               	addfsr 1,12
 20543  1CAA  3000               	movlw	0
 20544  1CAB  3FC0               	movwi [0]fsr1
 20545  1CAC  3FC1               	movwi [1]fsr1
 20546                           
 20547                           ;menu_task.c: 143: break;
 20548  1CAD  0008               	return
 20549  1CAE                     l9111:	
 20550                           ;menu_task.c: 144: case 8:
 20551                           
 20552                           
 20553                           ;menu_task.c: 145: if (data->holdCountY == 0){
 20554  1CAE  0857               	movf	menu_Main@data,w
 20555  1CAF  0086               	movwf	6
 20556  1CB0  0858               	movf	menu_Main@data+1,w
 20557  1CB1  0087               	movwf	7
 20558  1CB2  314A               	addfsr 1,10
 20559  1CB3  0016               	moviw fsr1++
 20560  1CB4  0401               	iorwf	1,w
 20561  1CB5  1D03               	btfss	3,2
 20562  1CB6  2CBE               	goto	l9115
 20563                           
 20564                           ;menu_task.c: 146: menu_run_option(data);
 20565  1CB7  0858               	movf	menu_Main@data+1,w
 20566  1CB8  00BC               	movwf	menu_run_option@data+1
 20567  1CB9  0857               	movf	menu_Main@data,w
 20568  1CBA  00BB               	movwf	menu_run_option@data
 20569  1CBB  31AA  22A4  319B   	fcall	_menu_run_option
 20570  1CBE                     l9115:	
 20571                           
 20572                           ;menu_task.c: 147: }
 20573                           ;menu_task.c: 148: data->holdCountA = 0;
 20574  1CBE  0020               	movlb	0	; select bank0
 20575  1CBF  0857               	movf	menu_Main@data,w
 20576  1CC0  0086               	movwf	6
 20577  1CC1  0858               	movf	menu_Main@data+1,w
 20578  1CC2  0087               	movwf	7
 20579  1CC3  3144               	addfsr 1,4
 20580  1CC4  3000               	movlw	0
 20581  1CC5  3FC0               	movwi [0]fsr1
 20582  1CC6  3FC1               	movwi [1]fsr1
 20583                           
 20584                           ;menu_task.c: 149: data->holdCountB = 0;
 20585  1CC7  0857               	movf	menu_Main@data,w
 20586  1CC8  0086               	movwf	6
 20587  1CC9  0858               	movf	menu_Main@data+1,w
 20588  1CCA  0087               	movwf	7
 20589  1CCB  3146               	addfsr 1,6
 20590  1CCC  3000               	movlw	0
 20591  1CCD  3FC0               	movwi [0]fsr1
 20592  1CCE  3FC1               	movwi [1]fsr1
 20593                           
 20594                           ;menu_task.c: 150: data->holdCountX = 0;
 20595  1CCF  0857               	movf	menu_Main@data,w
 20596  1CD0  0086               	movwf	6
 20597  1CD1  0858               	movf	menu_Main@data+1,w
 20598  1CD2  0087               	movwf	7
 20599  1CD3  3148               	addfsr 1,8
 20600  1CD4  3000               	movlw	0
 20601  1CD5  3FC0               	movwi [0]fsr1
 20602  1CD6  3FC1               	movwi [1]fsr1
 20603                           
 20604                           ;menu_task.c: 151: data->holdCountY += 1;
 20605  1CD7  0857               	movf	menu_Main@data,w
 20606  1CD8  0086               	movwf	6
 20607  1CD9  0858               	movf	menu_Main@data+1,w
 20608  1CDA  0087               	movwf	7
 20609  1CDB  314A               	addfsr 1,10
 20610  1CDC  3001               	movlw	1
 20611  1CDD  0781               	addwf	1,f
 20612  1CDE  3141               	addfsr 1,1
 20613  1CDF  1803               	skipnc
 20614  1CE0  0A81               	incf	1,f
 20615                           
 20616                           ;menu_task.c: 152: data->noholdCount = 0;
 20617  1CE1  0857               	movf	menu_Main@data,w
 20618  1CE2  0086               	movwf	6
 20619  1CE3  0858               	movf	menu_Main@data+1,w
 20620  1CE4  0087               	movwf	7
 20621  1CE5  314C               	addfsr 1,12
 20622  1CE6  3000               	movlw	0
 20623  1CE7  3FC0               	movwi [0]fsr1
 20624  1CE8  3FC1               	movwi [1]fsr1
 20625                           
 20626                           ;menu_task.c: 153: break;
 20627  1CE9  0008               	return
 20628  1CEA                     l9125:	
 20629                           ;menu_task.c: 155: default:
 20630                           
 20631                           ;menu_task.c: 154: case 1 | 2 | 8:
 20632                           
 20633                           
 20634                           ;menu_task.c: 156: menu_display_option(data);
 20635  1CEA  0858               	movf	menu_Main@data+1,w
 20636  1CEB  00CD               	movwf	menu_display_option@data+1
 20637  1CEC  0857               	movf	menu_Main@data,w
 20638  1CED  00CC               	movwf	menu_display_option@data
 20639  1CEE  31AD  2592  319B   	fcall	_menu_display_option
 20640                           
 20641                           ;menu_task.c: 157: data->holdCountA = 0;
 20642  1CF1  0020               	movlb	0	; select bank0
 20643  1CF2  0857               	movf	menu_Main@data,w
 20644  1CF3  0086               	movwf	6
 20645  1CF4  0858               	movf	menu_Main@data+1,w
 20646  1CF5  0087               	movwf	7
 20647  1CF6  3144               	addfsr 1,4
 20648  1CF7  3000               	movlw	0
 20649  1CF8  3FC0               	movwi [0]fsr1
 20650  1CF9  3FC1               	movwi [1]fsr1
 20651                           
 20652                           ;menu_task.c: 158: data->holdCountB = 0;
 20653  1CFA  0857               	movf	menu_Main@data,w
 20654  1CFB  0086               	movwf	6
 20655  1CFC  0858               	movf	menu_Main@data+1,w
 20656  1CFD  0087               	movwf	7
 20657  1CFE  3146               	addfsr 1,6
 20658  1CFF  3000               	movlw	0
 20659  1D00  3FC0               	movwi [0]fsr1
 20660  1D01  3FC1               	movwi [1]fsr1
 20661                           
 20662                           ;menu_task.c: 159: data->holdCountX = 0;
 20663  1D02  0857               	movf	menu_Main@data,w
 20664  1D03  0086               	movwf	6
 20665  1D04  0858               	movf	menu_Main@data+1,w
 20666  1D05  0087               	movwf	7
 20667  1D06  3148               	addfsr 1,8
 20668  1D07  3000               	movlw	0
 20669  1D08  3FC0               	movwi [0]fsr1
 20670  1D09  3FC1               	movwi [1]fsr1
 20671                           
 20672                           ;menu_task.c: 160: data->holdCountY = 0;
 20673  1D0A  0857               	movf	menu_Main@data,w
 20674  1D0B  0086               	movwf	6
 20675  1D0C  0858               	movf	menu_Main@data+1,w
 20676  1D0D  0087               	movwf	7
 20677  1D0E  314A               	addfsr 1,10
 20678  1D0F  3000               	movlw	0
 20679  1D10  3FC0               	movwi [0]fsr1
 20680  1D11  3FC1               	movwi [1]fsr1
 20681                           
 20682                           ;menu_task.c: 161: data->noholdCount += 1;
 20683  1D12  0857               	movf	menu_Main@data,w
 20684  1D13  0086               	movwf	6
 20685  1D14  0858               	movf	menu_Main@data+1,w
 20686  1D15  0087               	movwf	7
 20687  1D16  314C               	addfsr 1,12
 20688  1D17  3001               	movlw	1
 20689  1D18  0781               	addwf	1,f
 20690  1D19  3141               	addfsr 1,1
 20691  1D1A  1803               	skipnc
 20692  1D1B  0A81               	incf	1,f
 20693                           
 20694                           ;menu_task.c: 162: }
 20695  1D1C  0008               	return
 20696  1D1D                     l9137:	
 20697  1D1D  0856               	movf	menu_Main@buttonPressed,w
 20698                           
 20699                           ; Switch size 1, requested type "space"
 20700                           ; Number of cases is 5, Range of values is 1 to 11
 20701                           ; switch strategies available:
 20702                           ; Name         Instructions Cycles
 20703                           ; simple_byte           16     9 (average)
 20704                           ; direct_byte           31     9 (fixed)
 20705                           ; jumptable            263     9 (fixed)
 20706                           ;	Chosen strategy is simple_byte
 20707  1D1E  3A01               	xorlw	1	; case 1
 20708  1D1F  1903               	skipnz
 20709  1D20  2BC4               	goto	l9055
 20710  1D21  3A03               	xorlw	3	; case 2
 20711  1D22  1903               	skipnz
 20712  1D23  2C11               	goto	l9075
 20713  1D24  3A06               	xorlw	6	; case 4
 20714  1D25  1903               	skipnz
 20715  1D26  2C6D               	goto	l9095
 20716  1D27  3A0C               	xorlw	12	; case 8
 20717  1D28  1903               	skipnz
 20718  1D29  2CAE               	goto	l9111
 20719  1D2A  3A03               	xorlw	3	; case 11
 20720  1D2B  1903               	skipnz
 20721  1D2C  2CEA               	goto	l9125
 20722  1D2D  2CEA               	goto	l9125
 20723  1D2E  0008               	return
 20724  1D2F                     __end_of_menu_Main:	
 20725                           
 20726                           	psect	text18
 20727  0819                     __ptext18:	
 20728 ;; *************** function _flashy_Main *****************
 20729 ;; Defined at:
 20730 ;;		line 122 in file "flashy_task.c"
 20731 ;; Parameters:    Size  Location     Type
 20732 ;;  taskData        2   50[BANK0 ] PTR void 
 20733 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20734 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20735 ;; Auto vars:     Size  Location     Type
 20736 ;;  hit_counter     6   54[BANK0 ] unsigned char [6]
 20737 ;;  data            2   62[BANK0 ] PTR struct t_flashy_task
 20738 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20739 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20740 ;;  buttonPresse    2   60[BANK0 ] unsigned int 
 20741 ;; Return value:  Size  Location     Type
 20742 ;;                  1    wreg      void 
 20743 ;; Registers used:
 20744 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20745 ;; Tracked objects:
 20746 ;;		On entry : 0/0
 20747 ;;		On exit  : 0/0
 20748 ;;		Unchanged: 0/0
 20749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20750 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20751 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20752 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20753 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20754 ;;Total ram usage:       14 bytes
 20755 ;; Hardware stack levels used:    1
 20756 ;; Hardware stack levels required when called:   11
 20757 ;; This function calls:
 20758 ;;		_flashy_display_option
 20759 ;;		_led_Parody
 20760 ;;		_led_circle
 20761 ;;		_led_curtain
 20762 ;;		_led_rand
 20763 ;;		_led_roundabout
 20764 ;;		_let_alternate
 20765 ;;		_marquee
 20766 ;;		_nullifyBadge_buttonsGet
 20767 ;;		_nullifyBadge_irGet
 20768 ;;		_nullifyBadge_irTxClr
 20769 ;;		_nullifyBadge_irTxRegister
 20770 ;;		_nullifyBadge_irTxRelease
 20771 ;;		_nullifyBadge_irTxSet
 20772 ;;		_nullifyBadge_segDisplayForceUpdate
 20773 ;;		_nullifyBadge_segDisplayPutStr
 20774 ;;		_nullifyBadge_userLedsSet
 20775 ;;		_sprintf
 20776 ;; This function is called by:
 20777 ;;		_main
 20778 ;;		_scheduler_TaskRun
 20779 ;; This function uses a non-reentrant model
 20780 ;;
 20781                           
 20782                           
 20783                           ;psect for function _flashy_Main
 20784  0819                     _flashy_Main:	
 20785                           
 20786                           ;flashy_task.c: 123: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskD
      +                          ata;
 20787                           
 20788                           ;incstack = 0
 20789                           ; Regs used in _flashy_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20790  0819  0020               	movlb	0	; select bank0
 20791  081A  0853               	movf	flashy_Main@taskData+1,w
 20792  081B  00DF               	movwf	flashy_Main@data+1
 20793  081C  0852               	movf	flashy_Main@taskData,w
 20794  081D  00DE               	movwf	flashy_Main@data
 20795                           
 20796                           ;flashy_task.c: 124: u16 buttonPressed;
 20797                           ;flashy_task.c: 125: char hit_counter[6];
 20798                           ;flashy_task.c: 127: if ( currentTask != FLASHY_TASK ){
 20799  081E  3002               	movlw	2
 20800  081F  0021               	movlb	1	; select bank1
 20801  0820  063A               	xorwf	_currentTask^(0+128),w
 20802  0821  043B               	iorwf	(_currentTask+1)^(0+128),w
 20803  0822  1903               	btfsc	3,2
 20804  0823  28C6               	goto	l9175
 20805                           
 20806                           ;flashy_task.c: 128: data->holdCountA = 1;
 20807  0824  0020               	movlb	0	; select bank0
 20808  0825  085E               	movf	flashy_Main@data,w
 20809  0826  0086               	movwf	6
 20810  0827  085F               	movf	flashy_Main@data+1,w
 20811  0828  0087               	movwf	7
 20812  0829  314A               	addfsr 1,10
 20813  082A  3001               	movlw	1
 20814  082B  3FC0               	movwi [0]fsr1
 20815  082C  3000               	movlw	0
 20816  082D  3FC1               	movwi [1]fsr1
 20817                           
 20818                           ;flashy_task.c: 129: data->holdCountB = 1;
 20819  082E  085E               	movf	flashy_Main@data,w
 20820  082F  0086               	movwf	6
 20821  0830  085F               	movf	flashy_Main@data+1,w
 20822  0831  0087               	movwf	7
 20823  0832  314C               	addfsr 1,12
 20824  0833  3001               	movlw	1
 20825  0834  3FC0               	movwi [0]fsr1
 20826  0835  3000               	movlw	0
 20827  0836  3FC1               	movwi [1]fsr1
 20828                           
 20829                           ;flashy_task.c: 130: data->holdCountX = 1;
 20830  0837  085E               	movf	flashy_Main@data,w
 20831  0838  0086               	movwf	6
 20832  0839  085F               	movf	flashy_Main@data+1,w
 20833  083A  0087               	movwf	7
 20834  083B  314E               	addfsr 1,14
 20835  083C  3001               	movlw	1
 20836  083D  3FC0               	movwi [0]fsr1
 20837  083E  3000               	movlw	0
 20838  083F  3FC1               	movwi [1]fsr1
 20839                           
 20840                           ;flashy_task.c: 131: data->holdCountY = 1;
 20841  0840  085E               	movf	flashy_Main@data,w
 20842  0841  0086               	movwf	6
 20843  0842  085F               	movf	flashy_Main@data+1,w
 20844  0843  0087               	movwf	7
 20845  0844  3150               	addfsr 1,16
 20846  0845  3001               	movlw	1
 20847  0846  3FC0               	movwi [0]fsr1
 20848  0847  3000               	movlw	0
 20849  0848  3FC1               	movwi [1]fsr1
 20850                           
 20851                           ;flashy_task.c: 132: data->holdCountXY = 1;
 20852  0849  085E               	movf	flashy_Main@data,w
 20853  084A  0086               	movwf	6
 20854  084B  085F               	movf	flashy_Main@data+1,w
 20855  084C  0087               	movwf	7
 20856  084D  3152               	addfsr 1,18
 20857  084E  3001               	movlw	1
 20858  084F  3FC0               	movwi [0]fsr1
 20859  0850  3000               	movlw	0
 20860  0851  3FC1               	movwi [1]fsr1
 20861                           
 20862                           ;flashy_task.c: 133: data->holdCountAY = 1;
 20863  0852  085E               	movf	flashy_Main@data,w
 20864  0853  0086               	movwf	6
 20865  0854  085F               	movf	flashy_Main@data+1,w
 20866  0855  0087               	movwf	7
 20867  0856  3154               	addfsr 1,20
 20868  0857  3001               	movlw	1
 20869  0858  3FC0               	movwi [0]fsr1
 20870  0859  3000               	movlw	0
 20871  085A  3FC1               	movwi [1]fsr1
 20872                           
 20873                           ;flashy_task.c: 134: data->holdCountAX = 1;
 20874  085B  085E               	movf	flashy_Main@data,w
 20875  085C  0086               	movwf	6
 20876  085D  085F               	movf	flashy_Main@data+1,w
 20877  085E  0087               	movwf	7
 20878  085F  3156               	addfsr 1,22
 20879  0860  3001               	movlw	1
 20880  0861  3FC0               	movwi [0]fsr1
 20881  0862  3000               	movlw	0
 20882  0863  3FC1               	movwi [1]fsr1
 20883                           
 20884                           ;flashy_task.c: 135: return;
 20885  0864  0008               	return
 20886  0865                     l9147:	
 20887                           ;flashy_task.c: 142: case SECRET_VALUE_TEST:
 20888                           
 20889                           ;flashy_task.c: 141: break;
 20890                           
 20891                           ;flashy_task.c: 140: case SECRET_VALUE_INIT:
 20892                           
 20893                           ;flashy_task.c: 136: }
 20894                           ;flashy_task.c: 139: switch (secret_value){
 20895                           
 20896                           
 20897                           ;flashy_task.c: 143: secret_value = SECRET_VALUE_INIT;
 20898  0865  0021               	movlb	1	; select bank1
 20899  0866  01C5               	clrf	_secret_value^(0+128)
 20900  0867  01C6               	clrf	(_secret_value+1)^(0+128)
 20901                           
 20902                           ;flashy_task.c: 144: data->displayTickCount = 0;
 20903  0868  0020               	movlb	0	; select bank0
 20904  0869  085E               	movf	flashy_Main@data,w
 20905  086A  0086               	movwf	6
 20906  086B  085F               	movf	flashy_Main@data+1,w
 20907  086C  0087               	movwf	7
 20908  086D  3144               	addfsr 1,4
 20909  086E  3000               	movlw	0
 20910  086F  3FC0               	movwi [0]fsr1
 20911  0870  3FC1               	movwi [1]fsr1
 20912                           
 20913                           ;flashy_task.c: 145: data->display_state = FLASHY_STATE_DISPLAY_SECRET_TEST;
 20914  0871  085E               	movf	flashy_Main@data,w
 20915  0872  3E06               	addlw	6
 20916  0873  00D4               	movwf	??_flashy_Main
 20917  0874  3000               	movlw	0
 20918  0875  3D5F               	addwfc	flashy_Main@data+1,w
 20919  0876  00D5               	movwf	??_flashy_Main+1
 20920  0877  0854               	movf	??_flashy_Main,w
 20921  0878  0086               	movwf	6
 20922  0879  0855               	movf	??_flashy_Main+1,w
 20923  087A  0087               	movwf	7
 20924  087B  3005               	movlw	5
 20925  087C  0081               	movwf	1
 20926                           
 20927                           ;flashy_task.c: 147: data->holdCountA = 1;
 20928  087D  085E               	movf	flashy_Main@data,w
 20929  087E  0086               	movwf	6
 20930  087F  085F               	movf	flashy_Main@data+1,w
 20931  0880  0087               	movwf	7
 20932  0881  314A               	addfsr 1,10
 20933  0882  3001               	movlw	1
 20934  0883  3FC0               	movwi [0]fsr1
 20935  0884  3000               	movlw	0
 20936  0885  3FC1               	movwi [1]fsr1
 20937                           
 20938                           ;flashy_task.c: 148: data->holdCountB = 1;
 20939  0886  085E               	movf	flashy_Main@data,w
 20940  0887  0086               	movwf	6
 20941  0888  085F               	movf	flashy_Main@data+1,w
 20942  0889  0087               	movwf	7
 20943  088A  314C               	addfsr 1,12
 20944  088B  3001               	movlw	1
 20945  088C  3FC0               	movwi [0]fsr1
 20946  088D  3000               	movlw	0
 20947  088E  3FC1               	movwi [1]fsr1
 20948                           
 20949                           ;flashy_task.c: 149: data->holdCountX = 1;
 20950  088F  085E               	movf	flashy_Main@data,w
 20951  0890  0086               	movwf	6
 20952  0891  085F               	movf	flashy_Main@data+1,w
 20953  0892  0087               	movwf	7
 20954  0893  314E               	addfsr 1,14
 20955  0894  3001               	movlw	1
 20956  0895  3FC0               	movwi [0]fsr1
 20957  0896  3000               	movlw	0
 20958  0897  3FC1               	movwi [1]fsr1
 20959                           
 20960                           ;flashy_task.c: 150: data->holdCountY = 1;
 20961  0898  085E               	movf	flashy_Main@data,w
 20962  0899  0086               	movwf	6
 20963  089A  085F               	movf	flashy_Main@data+1,w
 20964  089B  0087               	movwf	7
 20965  089C  3150               	addfsr 1,16
 20966  089D  3001               	movlw	1
 20967  089E  3FC0               	movwi [0]fsr1
 20968  089F  3000               	movlw	0
 20969  08A0  3FC1               	movwi [1]fsr1
 20970                           
 20971                           ;flashy_task.c: 151: data->holdCountXY = 1;
 20972  08A1  085E               	movf	flashy_Main@data,w
 20973  08A2  0086               	movwf	6
 20974  08A3  085F               	movf	flashy_Main@data+1,w
 20975  08A4  0087               	movwf	7
 20976  08A5  3152               	addfsr 1,18
 20977  08A6  3001               	movlw	1
 20978  08A7  3FC0               	movwi [0]fsr1
 20979  08A8  3000               	movlw	0
 20980  08A9  3FC1               	movwi [1]fsr1
 20981                           
 20982                           ;flashy_task.c: 152: data->holdCountAY = 1;
 20983  08AA  085E               	movf	flashy_Main@data,w
 20984  08AB  0086               	movwf	6
 20985  08AC  085F               	movf	flashy_Main@data+1,w
 20986  08AD  0087               	movwf	7
 20987  08AE  3154               	addfsr 1,20
 20988  08AF  3001               	movlw	1
 20989  08B0  3FC0               	movwi [0]fsr1
 20990  08B1  3000               	movlw	0
 20991  08B2  3FC1               	movwi [1]fsr1
 20992                           
 20993                           ;flashy_task.c: 153: data->holdCountAX = 1;
 20994  08B3  085E               	movf	flashy_Main@data,w
 20995  08B4  0086               	movwf	6
 20996  08B5  085F               	movf	flashy_Main@data+1,w
 20997  08B6  0087               	movwf	7
 20998  08B7  3156               	addfsr 1,22
 20999  08B8  3001               	movlw	1
 21000  08B9  3FC0               	movwi [0]fsr1
 21001  08BA  3000               	movlw	0
 21002  08BB  3FC1               	movwi [1]fsr1
 21003                           
 21004                           ;flashy_task.c: 154: data->noholdCount = 1;
 21005  08BC  085E               	movf	flashy_Main@data,w
 21006  08BD  0086               	movwf	6
 21007  08BE  085F               	movf	flashy_Main@data+1,w
 21008  08BF  0087               	movwf	7
 21009  08C0  315C               	addfsr 1,28
 21010  08C1  3001               	movlw	1
 21011  08C2  3FC0               	movwi [0]fsr1
 21012  08C3  3000               	movlw	0
 21013  08C4  3FC1               	movwi [1]fsr1
 21014                           
 21015                           ;flashy_task.c: 155: return;
 21016  08C5  0008               	return
 21017  08C6                     l9175:	
 21018                           ;flashy_task.c: 157: }
 21019                           
 21020                           ;flashy_task.c: 156: break;
 21021                           
 21022                           
 21023                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21024                           ; Switch size 1, requested type "space"
 21025                           ; Number of cases is 1, Range of values is 0 to 0
 21026                           ; switch strategies available:
 21027                           ; Name         Instructions Cycles
 21028                           ; simple_byte            4     3 (average)
 21029                           ; direct_byte            8     6 (fixed)
 21030                           ; jumptable            260     6 (fixed)
 21031                           ;	Chosen strategy is simple_byte
 21032  08C6  0021               	movlb	1	; select bank1
 21033  08C7  0846               	movf	(_secret_value+1)^(0+128),w
 21034  08C8  3A00               	xorlw	0	; case 0
 21035  08C9  1903               	skipnz
 21036  08CA  28CC               	goto	l10883
 21037  08CB  29C4               	goto	l9245
 21038  08CC                     l10883:	
 21039                           
 21040                           ; Switch size 1, requested type "space"
 21041                           ; Number of cases is 2, Range of values is 0 to 1
 21042                           ; switch strategies available:
 21043                           ; Name         Instructions Cycles
 21044                           ; simple_byte            7     4 (average)
 21045                           ; direct_byte           10     6 (fixed)
 21046                           ; jumptable            260     6 (fixed)
 21047                           ;	Chosen strategy is simple_byte
 21048  08CC  0845               	movf	_secret_value^(0+128),w
 21049  08CD  3A00               	xorlw	0	; case 0
 21050  08CE  1903               	skipnz
 21051  08CF  29C4               	goto	l9245
 21052  08D0  3A01               	xorlw	1	; case 1
 21053  08D1  1903               	skipnz
 21054  08D2  2865               	goto	l9147
 21055  08D3  29C4               	goto	l9245
 21056                           
 21057                           ;flashy_task.c: 160: switch (data->led_state){
 21058  08D4  29C4               	goto	l9245
 21059  08D5                     l9177:	
 21060                           ;flashy_task.c: 161: case FLASHY_STATE_LED_ROUNDABOUT:
 21061                           
 21062                           
 21063                           ;flashy_task.c: 162: if (data->delayTickCount == 0){
 21064  08D5  0020               	movlb	0	; select bank0
 21065  08D6  085E               	movf	flashy_Main@data,w
 21066  08D7  0086               	movwf	6
 21067  08D8  085F               	movf	flashy_Main@data+1,w
 21068  08D9  0087               	movwf	7
 21069  08DA  3141               	addfsr 1,1
 21070  08DB  0016               	moviw fsr1++
 21071  08DC  0401               	iorwf	1,w
 21072  08DD  1D03               	btfss	3,2
 21073  08DE  29B8               	goto	L7
 21074                           
 21075                           ;flashy_task.c: 163: led_roundabout(flashy_leds_idx);
 21076  08DF  0021               	movlb	1	; select bank1
 21077  08E0  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21078  08E1  0020               	movlb	0	; select bank0
 21079  08E2  00B1               	movwf	led_roundabout@counter+1
 21080  08E3  0021               	movlb	1	; select bank1
 21081  08E4  0832               	movf	_flashy_leds_idx^(0+128),w
 21082  08E5  0020               	movlb	0	; select bank0
 21083  08E6  00B0               	movwf	led_roundabout@counter
 21084  08E7  31B7  27BF  3188   	fcall	_led_roundabout
 21085                           
 21086                           ;flashy_task.c: 164: flashy_leds_idx += 1;
 21087  08EA  3001               	movlw	1
 21088  08EB  0021               	movlb	1	; select bank1
 21089  08EC  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21090  08ED  3000               	movlw	0
 21091  08EE  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21092                           
 21093                           ;flashy_task.c: 165: data->delayTickCount = 35;
 21094  08EF  0020               	movlb	0	; select bank0
 21095  08F0  085E               	movf	flashy_Main@data,w
 21096  08F1  0086               	movwf	6
 21097  08F2  085F               	movf	flashy_Main@data+1,w
 21098  08F3  0087               	movwf	7
 21099  08F4  3141               	addfsr 1,1
 21100  08F5  3023               	movlw	35
 21101  08F6  3FC0               	movwi [0]fsr1
 21102  08F7  3000               	movlw	0
 21103  08F8  3FC1               	movwi [1]fsr1
 21104                           
 21105                           ;flashy_task.c: 166: }
 21106  08F9  2A5E               	goto	l9275
 21107  08FA                     l9187:	
 21108                           ;flashy_task.c: 171: case FLASHY_STATE_LED_SHOT:
 21109                           
 21110                           ;flashy_task.c: 169: }
 21111                           ;flashy_task.c: 170: break;
 21112                           
 21113                           ;flashy_task.c: 167: else {
 21114                           ;flashy_task.c: 168: data->delayTickCount -= 1;
 21115                           
 21116                           
 21117                           ;flashy_task.c: 172: if (data->delayTickCount == 0){
 21118  08FA  085E               	movf	flashy_Main@data,w
 21119  08FB  0086               	movwf	6
 21120  08FC  085F               	movf	flashy_Main@data+1,w
 21121  08FD  0087               	movwf	7
 21122  08FE  3141               	addfsr 1,1
 21123  08FF  0016               	moviw fsr1++
 21124  0900  0401               	iorwf	1,w
 21125  0901  1D03               	btfss	3,2
 21126  0902  29B8               	goto	L7
 21127                           
 21128                           ;flashy_task.c: 173: led_curtain(flashy_leds_idx);
 21129  0903  0021               	movlb	1	; select bank1
 21130  0904  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21131  0905  0020               	movlb	0	; select bank0
 21132  0906  00B1               	movwf	led_curtain@counter+1
 21133  0907  0021               	movlb	1	; select bank1
 21134  0908  0832               	movf	_flashy_leds_idx^(0+128),w
 21135  0909  0020               	movlb	0	; select bank0
 21136  090A  00B0               	movwf	led_curtain@counter
 21137  090B  31B7  277E  3188   	fcall	_led_curtain
 21138                           
 21139                           ;flashy_task.c: 174: flashy_leds_idx += 1;
 21140  090E  3001               	movlw	1
 21141  090F  0021               	movlb	1	; select bank1
 21142  0910  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21143  0911  3000               	movlw	0
 21144  0912  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21145                           
 21146                           ;flashy_task.c: 175: data->delayTickCount = 5;
 21147  0913  0020               	movlb	0	; select bank0
 21148  0914  085E               	movf	flashy_Main@data,w
 21149  0915  0086               	movwf	6
 21150  0916  085F               	movf	flashy_Main@data+1,w
 21151  0917  0087               	movwf	7
 21152  0918  3141               	addfsr 1,1
 21153  0919  3005               	movlw	5
 21154  091A  3FC0               	movwi [0]fsr1
 21155  091B  3000               	movlw	0
 21156  091C  3FC1               	movwi [1]fsr1
 21157                           
 21158                           ;flashy_task.c: 176: }
 21159  091D  2A5E               	goto	l9275
 21160  091E                     l9197:	
 21161                           ;flashy_task.c: 181: case FLASHY_STATE_SPARKLE:
 21162                           
 21163                           ;flashy_task.c: 179: }
 21164                           ;flashy_task.c: 180: break;
 21165                           
 21166                           ;flashy_task.c: 177: else {
 21167                           ;flashy_task.c: 178: data->delayTickCount -= 1;
 21168                           
 21169                           
 21170                           ;flashy_task.c: 182: if (data->delayTickCount < 1){
 21171  091E  085E               	movf	flashy_Main@data,w
 21172  091F  0086               	movwf	6
 21173  0920  085F               	movf	flashy_Main@data+1,w
 21174  0921  0087               	movwf	7
 21175  0922  3141               	addfsr 1,1
 21176  0923  0016               	moviw fsr1++
 21177  0924  0401               	iorwf	1,w
 21178  0925  1D03               	btfss	3,2
 21179  0926  29B7               	goto	l9241
 21180                           
 21181                           ;flashy_task.c: 183: led_rand();
 21182  0927  31A9  21CB  3188   	fcall	_led_rand
 21183                           
 21184                           ;flashy_task.c: 184: data->delayTickCount = flashy_sparkle_rate;
 21185  092A  0020               	movlb	0	; select bank0
 21186  092B  085E               	movf	flashy_Main@data,w
 21187  092C  0086               	movwf	6
 21188  092D  085F               	movf	flashy_Main@data+1,w
 21189  092E  0087               	movwf	7
 21190  092F  3141               	addfsr 1,1
 21191  0930  0021               	movlb	1	; select bank1
 21192  0931  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21193  0932  3FC0               	movwi [0]fsr1
 21194  0933  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21195  0934  3FC1               	movwi [1]fsr1
 21196  0935  2A5E               	goto	l9275
 21197  0936                     l9205:	
 21198                           ;flashy_task.c: 190: case FLASHY_STATE_CIRCLE:
 21199                           
 21200                           ;flashy_task.c: 188: }
 21201                           ;flashy_task.c: 189: break;
 21202                           
 21203                           ;flashy_task.c: 186: else {
 21204                           ;flashy_task.c: 187: data->delayTickCount -= 1;
 21205                           
 21206                           ;flashy_task.c: 185: }
 21207                           
 21208                           
 21209                           ;flashy_task.c: 191: if (data->delayTickCount ==0 ){
 21210  0936  085E               	movf	flashy_Main@data,w
 21211  0937  0086               	movwf	6
 21212  0938  085F               	movf	flashy_Main@data+1,w
 21213  0939  0087               	movwf	7
 21214  093A  3141               	addfsr 1,1
 21215  093B  0016               	moviw fsr1++
 21216  093C  0401               	iorwf	1,w
 21217  093D  1D03               	btfss	3,2
 21218  093E  29B7               	goto	l9241
 21219                           
 21220                           ;flashy_task.c: 192: if (flashy_leds_idx == 1024 ){
 21221  093F  3004               	movlw	4
 21222  0940  0021               	movlb	1	; select bank1
 21223  0941  0633               	xorwf	(_flashy_leds_idx+1)^(0+128),w
 21224  0942  0432               	iorwf	_flashy_leds_idx^(0+128),w
 21225  0943  1D03               	btfss	3,2
 21226  0944  2949               	goto	l9211
 21227                           
 21228                           ;flashy_task.c: 193: flashy_leds_idx = flashy_leds_idx << 1;
 21229  0945  3532               	lslf	_flashy_leds_idx^(0+128),w
 21230  0946  00B2               	movwf	_flashy_leds_idx^(0+128)
 21231  0947  0D33               	rlf	(_flashy_leds_idx+1)^(0+128),w
 21232  0948  00B3               	movwf	(_flashy_leds_idx+1)^(0+128)
 21233  0949                     l9211:	
 21234                           
 21235                           ;flashy_task.c: 194: }
 21236                           ;flashy_task.c: 195: led_circle(flashy_leds_idx);
 21237  0949  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21238  094A  0020               	movlb	0	; select bank0
 21239  094B  00B1               	movwf	led_circle@count+1
 21240  094C  0021               	movlb	1	; select bank1
 21241  094D  0832               	movf	_flashy_leds_idx^(0+128),w
 21242  094E  0020               	movlb	0	; select bank0
 21243  094F  00B0               	movwf	led_circle@count
 21244  0950  31B2  2201  3188   	fcall	_led_circle
 21245                           
 21246                           ;flashy_task.c: 196: if (flashy_leds_idx < 1 ){
 21247  0953  0021               	movlb	1	; select bank1
 21248  0954  0832               	movf	_flashy_leds_idx^(0+128),w
 21249  0955  0433               	iorwf	(_flashy_leds_idx+1)^(0+128),w
 21250  0956  1D03               	btfss	3,2
 21251  0957  295D               	goto	l9217
 21252                           
 21253                           ;flashy_task.c: 197: flashy_leds_idx = 1;
 21254  0958  3001               	movlw	1
 21255  0959  00B2               	movwf	_flashy_leds_idx^(0+128)
 21256  095A  3000               	movlw	0
 21257  095B  00B3               	movwf	(_flashy_leds_idx^(0+128)+1)
 21258                           
 21259                           ;flashy_task.c: 198: break;
 21260  095C  2A5E               	goto	l9275
 21261  095D                     l9217:	
 21262                           
 21263                           ;flashy_task.c: 199: }
 21264                           ;flashy_task.c: 200: flashy_leds_idx = flashy_leds_idx << 1;
 21265  095D  3532               	lslf	_flashy_leds_idx^(0+128),w
 21266  095E  00B2               	movwf	_flashy_leds_idx^(0+128)
 21267  095F  0D33               	rlf	(_flashy_leds_idx+1)^(0+128),w
 21268  0960  00B3               	movwf	(_flashy_leds_idx+1)^(0+128)
 21269                           
 21270                           ;flashy_task.c: 202: data->delayTickCount = flashy_sparkle_rate;
 21271  0961  0020               	movlb	0	; select bank0
 21272  0962  085E               	movf	flashy_Main@data,w
 21273  0963  0086               	movwf	6
 21274  0964  085F               	movf	flashy_Main@data+1,w
 21275  0965  0087               	movwf	7
 21276  0966  3141               	addfsr 1,1
 21277  0967  0021               	movlb	1	; select bank1
 21278  0968  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21279  0969  3FC0               	movwi [0]fsr1
 21280  096A  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21281  096B  3FC1               	movwi [1]fsr1
 21282  096C  2A5E               	goto	l9275
 21283  096D                     l9223:	
 21284                           ;flashy_task.c: 208: case FLASHY_STATE_LED_ALT:
 21285                           
 21286                           ;flashy_task.c: 206: }
 21287                           ;flashy_task.c: 207: break;
 21288                           
 21289                           ;flashy_task.c: 204: else {
 21290                           ;flashy_task.c: 205: data->delayTickCount -= 1;
 21291                           
 21292                           ;flashy_task.c: 203: }
 21293                           
 21294                           
 21295                           ;flashy_task.c: 209: if (data->delayTickCount == 0){
 21296  096D  085E               	movf	flashy_Main@data,w
 21297  096E  0086               	movwf	6
 21298  096F  085F               	movf	flashy_Main@data+1,w
 21299  0970  0087               	movwf	7
 21300  0971  3141               	addfsr 1,1
 21301  0972  0016               	moviw fsr1++
 21302  0973  0401               	iorwf	1,w
 21303  0974  1D03               	btfss	3,2
 21304  0975  29B7               	goto	l9241
 21305                           
 21306                           ;flashy_task.c: 210: let_alternate(flashy_leds_idx);
 21307  0976  0021               	movlb	1	; select bank1
 21308  0977  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21309  0978  0020               	movlb	0	; select bank0
 21310  0979  00B1               	movwf	let_alternate@count+1
 21311  097A  0021               	movlb	1	; select bank1
 21312  097B  0832               	movf	_flashy_leds_idx^(0+128),w
 21313  097C  0020               	movlb	0	; select bank0
 21314  097D  00B0               	movwf	let_alternate@count
 21315  097E  31A2  2201  3188   	fcall	_let_alternate
 21316                           
 21317                           ;flashy_task.c: 211: flashy_leds_idx += 1;
 21318  0981  3001               	movlw	1
 21319  0982  0021               	movlb	1	; select bank1
 21320  0983  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21321  0984  3000               	movlw	0
 21322  0985  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21323                           
 21324                           ;flashy_task.c: 212: data->delayTickCount = flashy_sparkle_rate;
 21325  0986  0020               	movlb	0	; select bank0
 21326  0987  085E               	movf	flashy_Main@data,w
 21327  0988  0086               	movwf	6
 21328  0989  085F               	movf	flashy_Main@data+1,w
 21329  098A  0087               	movwf	7
 21330  098B  3141               	addfsr 1,1
 21331  098C  0021               	movlb	1	; select bank1
 21332  098D  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21333  098E  3FC0               	movwi [0]fsr1
 21334  098F  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21335  0990  3FC1               	movwi [1]fsr1
 21336  0991  2A5E               	goto	l9275
 21337  0992                     l9233:	
 21338                           ;flashy_task.c: 218: case FLASHY_STATE_LED_PARODY:
 21339                           
 21340                           ;flashy_task.c: 216: }
 21341                           ;flashy_task.c: 217: break;
 21342                           
 21343                           ;flashy_task.c: 214: else {
 21344                           ;flashy_task.c: 215: data->delayTickCount -= 1;
 21345                           
 21346                           ;flashy_task.c: 213: }
 21347                           
 21348                           
 21349                           ;flashy_task.c: 219: if (data->delayTickCount == 0){
 21350  0992  085E               	movf	flashy_Main@data,w
 21351  0993  0086               	movwf	6
 21352  0994  085F               	movf	flashy_Main@data+1,w
 21353  0995  0087               	movwf	7
 21354  0996  3141               	addfsr 1,1
 21355  0997  0016               	moviw fsr1++
 21356  0998  0401               	iorwf	1,w
 21357  0999  1D03               	btfss	3,2
 21358  099A  29B7               	goto	l9241
 21359                           
 21360                           ;flashy_task.c: 220: led_Parody(flashy_leds_idx);
 21361  099B  0021               	movlb	1	; select bank1
 21362  099C  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21363  099D  0020               	movlb	0	; select bank0
 21364  099E  00B1               	movwf	led_Parody@count+1
 21365  099F  0021               	movlb	1	; select bank1
 21366  09A0  0832               	movf	_flashy_leds_idx^(0+128),w
 21367  09A1  0020               	movlb	0	; select bank0
 21368  09A2  00B0               	movwf	led_Parody@count
 21369  09A3  31AE  26BA  3188   	fcall	_led_Parody
 21370                           
 21371                           ;flashy_task.c: 221: flashy_leds_idx += 1;
 21372  09A6  3001               	movlw	1
 21373  09A7  0021               	movlb	1	; select bank1
 21374  09A8  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21375  09A9  3000               	movlw	0
 21376  09AA  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21377                           
 21378                           ;flashy_task.c: 222: data->delayTickCount = flashy_sparkle_rate;
 21379  09AB  0020               	movlb	0	; select bank0
 21380  09AC  085E               	movf	flashy_Main@data,w
 21381  09AD  0086               	movwf	6
 21382  09AE  085F               	movf	flashy_Main@data+1,w
 21383  09AF  0087               	movwf	7
 21384  09B0  3141               	addfsr 1,1
 21385  09B1  0021               	movlb	1	; select bank1
 21386  09B2  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21387  09B3  3FC0               	movwi [0]fsr1
 21388  09B4  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21389  09B5  3FC1               	movwi [1]fsr1
 21390                           
 21391                           ;flashy_task.c: 223: }
 21392  09B6  2A5E               	goto	l9275
 21393  09B7                     l9241:	
 21394                           
 21395                           ;flashy_task.c: 224: else {
 21396                           ;flashy_task.c: 225: data->delayTickCount -= 1;
 21397  09B7  0020               	movlb	0	; select bank0
 21398  09B8                     L7:	
 21399  09B8  085E               	movf	flashy_Main@data,w
 21400  09B9  0086               	movwf	6
 21401  09BA  085F               	movf	flashy_Main@data+1,w
 21402  09BB  0087               	movwf	7
 21403  09BC  3141               	addfsr 1,1
 21404  09BD  3001               	movlw	1
 21405  09BE  0281               	subwf	1,f
 21406  09BF  3141               	addfsr 1,1
 21407  09C0  3000               	movlw	0
 21408  09C1  3B81               	subwfb	1,f
 21409  09C2  317F               	addfsr 1,-1
 21410                           
 21411                           ;flashy_task.c: 229: }
 21412                           
 21413                           ;flashy_task.c: 226: }
 21414                           ;flashy_task.c: 227: break;
 21415  09C3  2A5E               	goto	l9275
 21416  09C4                     l9245:	
 21417  09C4  0020               	movlb	0	; select bank0
 21418  09C5  085E               	movf	flashy_Main@data,w
 21419  09C6  0086               	movwf	6
 21420  09C7  085F               	movf	flashy_Main@data+1,w
 21421  09C8  0087               	movwf	7
 21422  09C9  3143               	addfsr 1,3
 21423  09CA  0801               	movf	1,w
 21424                           
 21425                           ; Switch size 1, requested type "space"
 21426                           ; Number of cases is 6, Range of values is 0 to 5
 21427                           ; switch strategies available:
 21428                           ; Name         Instructions Cycles
 21429                           ; direct_byte           18     6 (fixed)
 21430                           ; simple_byte           19    10 (average)
 21431                           ; jumptable            260     6 (fixed)
 21432                           ;	Chosen strategy is direct_byte
 21433  09CB  0084               	movwf	4
 21434  09CC  3006               	movlw	6
 21435  09CD  0204               	subwf	4,w
 21436  09CE  1803               	skipnc
 21437  09CF  2A5E               	goto	l9275
 21438  09D0  31B0               	movlp	high S10885
 21439  09D1  3504               	lslf	4,w
 21440  09D2  3E00               	addlw	low S10885
 21441  09D3  0082               	movwf	2
 21442                           
 21443                           ;flashy_task.c: 232: switch (data->display_state){
 21444  09D4  2A5E               	goto	l9275
 21445  09D5                     l9247:	
 21446                           ;flashy_task.c: 233: case FLASHY_STATE_DISPLAY_BLASTER:
 21447                           
 21448                           
 21449                           ;flashy_task.c: 234: nullifyBadge_segDisplayPutStr(data->badge, "PEW ");
 21450  09D5  30F4               	movlw	low (STR_40| (0+32768))
 21451  09D6  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21452  09D7  30BB               	movlw	high (STR_40| (0+32768))
 21453  09D8  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21454  09D9  085E               	movf	flashy_Main@data,w
 21455  09DA  0086               	movwf	6
 21456  09DB  085F               	movf	flashy_Main@data+1,w
 21457  09DC  0087               	movwf	7
 21458  09DD  0801               	movf	1,w
 21459  09DE  31B2  221E  3188   	fcall	_nullifyBadge_segDisplayPutStr
 21460                           
 21461                           ;flashy_task.c: 235: nullifyBadge_segDisplayForceUpdate(data->badge);
 21462  09E1  0020               	movlb	0	; select bank0
 21463  09E2  085E               	movf	flashy_Main@data,w
 21464  09E3  0086               	movwf	6
 21465  09E4  085F               	movf	flashy_Main@data+1,w
 21466  09E5  0087               	movwf	7
 21467  09E6  0801               	movf	1,w
 21468  09E7  31B1  21E2  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 21469  09EA  2A52               	goto	L10
 21470  09EB                     l9253:	
 21471                           ;flashy_task.c: 238: case FLASHY_STATE_DISPLAY_SHOT:
 21472                           
 21473                           ;flashy_task.c: 237: break;
 21474                           
 21475                           ;flashy_task.c: 236: data->displayTickCount += 1;
 21476                           
 21477                           
 21478                           ;flashy_task.c: 239: sprintf((char *)hit_counter, "%4d", deaths);
 21479  09EB  3056               	movlw	low flashy_Main@hit_counter
 21480  09EC  00AF               	movwf	sprintf@sp
 21481  09ED  3000               	movlw	high flashy_Main@hit_counter
 21482  09EE  00B0               	movwf	sprintf@sp+1
 21483  09EF  300D               	movlw	low (STR_41| (0+32768))
 21484  09F0  00B1               	movwf	sprintf@f
 21485  09F1  30BC               	movlw	high (STR_41| (0+32768))
 21486  09F2  00B2               	movwf	sprintf@f+1
 21487  09F3  0021               	movlb	1	; select bank1
 21488  09F4  082B               	movf	(_deaths+1)^(0+128),w
 21489  09F5  0020               	movlb	0	; select bank0
 21490  09F6  00B4               	movwf	?_sprintf+5
 21491  09F7  0021               	movlb	1	; select bank1
 21492  09F8  082A               	movf	_deaths^(0+128),w
 21493  09F9  0020               	movlb	0	; select bank0
 21494  09FA  00B3               	movwf	?_sprintf+4
 21495  09FB  3199  216B  3188   	fcall	_sprintf
 21496                           
 21497                           ;flashy_task.c: 241: nullifyBadge_segDisplayPutStr(data->badge, hit_counter);
 21498  09FE  3056               	movlw	low flashy_Main@hit_counter
 21499  09FF  0020               	movlb	0	; select bank0
 21500  0A00  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21501  0A01  3000               	movlw	high flashy_Main@hit_counter
 21502  0A02  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21503  0A03  085E               	movf	flashy_Main@data,w
 21504  0A04  0086               	movwf	6
 21505  0A05  085F               	movf	flashy_Main@data+1,w
 21506  0A06  0087               	movwf	7
 21507  0A07  0801               	movf	1,w
 21508  0A08  31B2  221E  3188   	fcall	_nullifyBadge_segDisplayPutStr
 21509                           
 21510                           ;flashy_task.c: 242: nullifyBadge_segDisplayForceUpdate(data->badge);
 21511  0A0B  0020               	movlb	0	; select bank0
 21512  0A0C  085E               	movf	flashy_Main@data,w
 21513  0A0D  0086               	movwf	6
 21514  0A0E  085F               	movf	flashy_Main@data+1,w
 21515  0A0F  0087               	movwf	7
 21516  0A10  0801               	movf	1,w
 21517  0A11  31B1  21E2  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 21518                           
 21519                           ;flashy_task.c: 243: if (data->displayTickCount == 150){
 21520  0A14  0020               	movlb	0	; select bank0
 21521  0A15  085E               	movf	flashy_Main@data,w
 21522  0A16  0086               	movwf	6
 21523  0A17  085F               	movf	flashy_Main@data+1,w
 21524  0A18  0087               	movwf	7
 21525  0A19  3144               	addfsr 1,4
 21526  0A1A  0016               	moviw fsr1++
 21527  0A1B  3A96               	xorlw	150
 21528  0A1C  00D4               	movwf	??_flashy_Main
 21529  0A1D  0016               	moviw fsr1++
 21530  0A1E  04D4               	iorwf	??_flashy_Main,f
 21531  0A1F  1D03               	btfss	3,2
 21532  0A20  2A53               	goto	L9
 21533                           
 21534                           ;flashy_task.c: 244: data->displayTickCount = 0;
 21535  0A21  085E               	movf	flashy_Main@data,w
 21536  0A22  0086               	movwf	6
 21537  0A23  085F               	movf	flashy_Main@data+1,w
 21538  0A24  0087               	movwf	7
 21539  0A25  3144               	addfsr 1,4
 21540  0A26  3000               	movlw	0
 21541  0A27  3FC0               	movwi [0]fsr1
 21542  0A28  3FC1               	movwi [1]fsr1
 21543                           
 21544                           ;flashy_task.c: 245: data->display_state = 35;
 21545  0A29  085E               	movf	flashy_Main@data,w
 21546  0A2A  3E06               	addlw	6
 21547  0A2B  00D4               	movwf	??_flashy_Main
 21548  0A2C  3000               	movlw	0
 21549  0A2D  3D5F               	addwfc	flashy_Main@data+1,w
 21550  0A2E  00D5               	movwf	??_flashy_Main+1
 21551  0A2F  0854               	movf	??_flashy_Main,w
 21552  0A30  0086               	movwf	6
 21553  0A31  0855               	movf	??_flashy_Main+1,w
 21554  0A32  0087               	movwf	7
 21555  0A33  3023               	movlw	35
 21556  0A34  0081               	movwf	1
 21557  0A35  2A53               	goto	L9
 21558  0A36                     l9265:	
 21559                           ;flashy_task.c: 249: case FLASHY_STATE_DISPLAY_SECRET_TEST:
 21560                           
 21561                           ;flashy_task.c: 248: break;
 21562                           
 21563                           ;flashy_task.c: 246: }
 21564                           ;flashy_task.c: 247: data->displayTickCount += 1;
 21565                           
 21566                           
 21567                           ;flashy_task.c: 250: marquee(FLASHY_TEXT_SECRET_TEST, data->displayTickCount);
 21568  0A36  0021               	movlb	1	; select bank1
 21569  0A37  0855               	movf	(_FLASHY_TEXT_SECRET_TEST+1)^(0+128),w
 21570  0A38  0020               	movlb	0	; select bank0
 21571  0A39  00BB               	movwf	marquee@string+1
 21572  0A3A  0021               	movlb	1	; select bank1
 21573  0A3B  0854               	movf	_FLASHY_TEXT_SECRET_TEST^(0+128),w
 21574  0A3C  0020               	movlb	0	; select bank0
 21575  0A3D  00BA               	movwf	marquee@string
 21576  0A3E  085E               	movf	flashy_Main@data,w
 21577  0A3F  0086               	movwf	6
 21578  0A40  085F               	movf	flashy_Main@data+1,w
 21579  0A41  0087               	movwf	7
 21580  0A42  3144               	addfsr 1,4
 21581  0A43  3F40               	moviw [0]fsr1
 21582  0A44  00BC               	movwf	marquee@count
 21583  0A45  3F41               	moviw [1]fsr1
 21584  0A46  00BD               	movwf	marquee@count+1
 21585  0A47  31A2  2215  3188   	fcall	_marquee
 21586  0A4A  2A52               	goto	L10
 21587  0A4B                     l9269:	
 21588                           ;flashy_task.c: 255: default:
 21589                           
 21590                           ;flashy_task.c: 253: case FLASHY_STATE_DISPLAY:
 21591                           
 21592                           ;flashy_task.c: 252: break;
 21593                           
 21594                           ;flashy_task.c: 251: data->displayTickCount += 1;
 21595                           
 21596                           
 21597                           ;flashy_task.c: 256: flashy_display_option(data);
 21598  0A4B  085F               	movf	flashy_Main@data+1,w
 21599  0A4C  00CD               	movwf	flashy_display_option@data+1
 21600  0A4D  085E               	movf	flashy_Main@data,w
 21601  0A4E  00CC               	movwf	flashy_display_option@data
 21602  0A4F  31AD  2533  3188   	fcall	_flashy_display_option
 21603  0A52                     L10:	
 21604                           
 21605                           ;flashy_task.c: 257: data->displayTickCount += 1;
 21606  0A52  0020               	movlb	0	; select bank0
 21607  0A53                     L9:	
 21608  0A53  085E               	movf	flashy_Main@data,w
 21609  0A54  0086               	movwf	6
 21610  0A55  085F               	movf	flashy_Main@data+1,w
 21611  0A56  0087               	movwf	7
 21612  0A57  3144               	addfsr 1,4
 21613  0A58  3001               	movlw	1
 21614  0A59  0781               	addwf	1,f
 21615  0A5A  3141               	addfsr 1,1
 21616  0A5B  1803               	skipnc
 21617  0A5C  0A81               	incf	1,f
 21618                           
 21619                           ;flashy_task.c: 259: }
 21620                           
 21621                           ;flashy_task.c: 258: break;
 21622  0A5D  2A72               	goto	l9277
 21623  0A5E                     l9275:	
 21624  0A5E  0020               	movlb	0	; select bank0
 21625  0A5F  085E               	movf	flashy_Main@data,w
 21626  0A60  0086               	movwf	6
 21627  0A61  085F               	movf	flashy_Main@data+1,w
 21628  0A62  0087               	movwf	7
 21629  0A63  3146               	addfsr 1,6
 21630  0A64  0801               	movf	1,w
 21631                           
 21632                           ; Switch size 1, requested type "space"
 21633                           ; Number of cases is 4, Range of values is 0 to 5
 21634                           ; switch strategies available:
 21635                           ; Name         Instructions Cycles
 21636                           ; simple_byte           13     7 (average)
 21637                           ; direct_byte           18     6 (fixed)
 21638                           ; jumptable            260     6 (fixed)
 21639                           ;	Chosen strategy is simple_byte
 21640  0A65  3A00               	xorlw	0	; case 0
 21641  0A66  1903               	skipnz
 21642  0A67  2A4B               	goto	l9269
 21643  0A68  3A02               	xorlw	2	; case 2
 21644  0A69  1903               	skipnz
 21645  0A6A  29D5               	goto	l9247
 21646  0A6B  3A01               	xorlw	1	; case 3
 21647  0A6C  1903               	skipnz
 21648  0A6D  29EB               	goto	l9253
 21649  0A6E  3A06               	xorlw	6	; case 5
 21650  0A6F  1903               	skipnz
 21651  0A70  2A36               	goto	l9265
 21652  0A71  2A4B               	goto	l9269
 21653  0A72                     l9277:	
 21654                           
 21655                           ;flashy_task.c: 262: buttonPressed = nullifyBadge_buttonsGet();
 21656  0A72  31B5  25FD  3188   	fcall	_nullifyBadge_buttonsGet
 21657  0A75  0020               	movlb	0	; select bank0
 21658  0A76  00D4               	movwf	??_flashy_Main
 21659  0A77  01D5               	clrf	??_flashy_Main+1
 21660  0A78  0854               	movf	??_flashy_Main,w
 21661  0A79  00DC               	movwf	flashy_Main@buttonPressed
 21662  0A7A  0855               	movf	??_flashy_Main+1,w
 21663  0A7B  00DD               	movwf	flashy_Main@buttonPressed+1
 21664                           
 21665                           ;flashy_task.c: 263: switch (buttonPressed) {
 21666  0A7C  2F36               	goto	l9537
 21667  0A7D                     l9279:	
 21668                           ;flashy_task.c: 264: case 4 | 8:
 21669                           
 21670                           
 21671                           ;flashy_task.c: 265: if (data->holdCountXY == 0 ){
 21672  0A7D  085E               	movf	flashy_Main@data,w
 21673  0A7E  0086               	movwf	6
 21674  0A7F  085F               	movf	flashy_Main@data+1,w
 21675  0A80  0087               	movwf	7
 21676  0A81  3152               	addfsr 1,18
 21677  0A82  0016               	moviw fsr1++
 21678  0A83  0401               	iorwf	1,w
 21679  0A84  1D03               	btfss	3,2
 21680  0A85  2A8C               	goto	l9283
 21681                           
 21682                           ;flashy_task.c: 267: data->display_state = FLASHY_STATE_DISPLAY;
 21683  0A86  085E               	movf	flashy_Main@data,w
 21684  0A87  0086               	movwf	6
 21685  0A88  085F               	movf	flashy_Main@data+1,w
 21686  0A89  0087               	movwf	7
 21687  0A8A  3146               	addfsr 1,6
 21688  0A8B  0181               	clrf	1
 21689  0A8C                     l9283:	
 21690                           
 21691                           ;flashy_task.c: 268: }
 21692                           ;flashy_task.c: 270: data->holdCountA = 0;
 21693  0A8C  085E               	movf	flashy_Main@data,w
 21694  0A8D  0086               	movwf	6
 21695  0A8E  085F               	movf	flashy_Main@data+1,w
 21696  0A8F  0087               	movwf	7
 21697  0A90  314A               	addfsr 1,10
 21698  0A91  3000               	movlw	0
 21699  0A92  3FC0               	movwi [0]fsr1
 21700  0A93  3FC1               	movwi [1]fsr1
 21701                           
 21702                           ;flashy_task.c: 271: data->holdCountB = 0;
 21703  0A94  085E               	movf	flashy_Main@data,w
 21704  0A95  0086               	movwf	6
 21705  0A96  085F               	movf	flashy_Main@data+1,w
 21706  0A97  0087               	movwf	7
 21707  0A98  314C               	addfsr 1,12
 21708  0A99  3000               	movlw	0
 21709  0A9A  3FC0               	movwi [0]fsr1
 21710  0A9B  3FC1               	movwi [1]fsr1
 21711                           
 21712                           ;flashy_task.c: 272: data->holdCountX = 0;
 21713  0A9C  085E               	movf	flashy_Main@data,w
 21714  0A9D  0086               	movwf	6
 21715  0A9E  085F               	movf	flashy_Main@data+1,w
 21716  0A9F  0087               	movwf	7
 21717  0AA0  314E               	addfsr 1,14
 21718  0AA1  3000               	movlw	0
 21719  0AA2  3FC0               	movwi [0]fsr1
 21720  0AA3  3FC1               	movwi [1]fsr1
 21721                           
 21722                           ;flashy_task.c: 273: data->holdCountY = 0;
 21723  0AA4  085E               	movf	flashy_Main@data,w
 21724  0AA5  0086               	movwf	6
 21725  0AA6  085F               	movf	flashy_Main@data+1,w
 21726  0AA7  0087               	movwf	7
 21727  0AA8  3150               	addfsr 1,16
 21728  0AA9  3000               	movlw	0
 21729  0AAA  3FC0               	movwi [0]fsr1
 21730  0AAB  3FC1               	movwi [1]fsr1
 21731                           
 21732                           ;flashy_task.c: 274: data->holdCountXY += 1;
 21733  0AAC  085E               	movf	flashy_Main@data,w
 21734  0AAD  0086               	movwf	6
 21735  0AAE  085F               	movf	flashy_Main@data+1,w
 21736  0AAF  0087               	movwf	7
 21737  0AB0  3152               	addfsr 1,18
 21738  0AB1  3001               	movlw	1
 21739  0AB2  0781               	addwf	1,f
 21740  0AB3  3141               	addfsr 1,1
 21741  0AB4  1803               	skipnc
 21742  0AB5  0A81               	incf	1,f
 21743                           
 21744                           ;flashy_task.c: 275: data->holdCountAY = 0;
 21745  0AB6  085E               	movf	flashy_Main@data,w
 21746  0AB7  0086               	movwf	6
 21747  0AB8  085F               	movf	flashy_Main@data+1,w
 21748  0AB9  0087               	movwf	7
 21749  0ABA  3154               	addfsr 1,20
 21750  0ABB  3000               	movlw	0
 21751  0ABC  3FC0               	movwi [0]fsr1
 21752  0ABD  3FC1               	movwi [1]fsr1
 21753                           
 21754                           ;flashy_task.c: 276: data->holdCountAX = 0;
 21755  0ABE  085E               	movf	flashy_Main@data,w
 21756  0ABF  0086               	movwf	6
 21757  0AC0  085F               	movf	flashy_Main@data+1,w
 21758  0AC1  0087               	movwf	7
 21759  0AC2  3156               	addfsr 1,22
 21760  0AC3  3000               	movlw	0
 21761  0AC4  3FC0               	movwi [0]fsr1
 21762  0AC5  3FC1               	movwi [1]fsr1
 21763                           
 21764                           ;flashy_task.c: 277: data->holdCountBX = 0;
 21765  0AC6  085E               	movf	flashy_Main@data,w
 21766  0AC7  0086               	movwf	6
 21767  0AC8  085F               	movf	flashy_Main@data+1,w
 21768  0AC9  0087               	movwf	7
 21769  0ACA  3158               	addfsr 1,24
 21770  0ACB  3000               	movlw	0
 21771  0ACC  3FC0               	movwi [0]fsr1
 21772  0ACD  3FC1               	movwi [1]fsr1
 21773                           
 21774                           ;flashy_task.c: 278: data->holdCountBY = 0;
 21775  0ACE  085E               	movf	flashy_Main@data,w
 21776  0ACF  0086               	movwf	6
 21777  0AD0  085F               	movf	flashy_Main@data+1,w
 21778  0AD1  0087               	movwf	7
 21779  0AD2  315A               	addfsr 1,26
 21780  0AD3  3000               	movlw	0
 21781  0AD4  3FC0               	movwi [0]fsr1
 21782  0AD5  3FC1               	movwi [1]fsr1
 21783                           
 21784                           ;flashy_task.c: 279: data->noholdCount = 0;
 21785  0AD6  085E               	movf	flashy_Main@data,w
 21786  0AD7  0086               	movwf	6
 21787  0AD8  085F               	movf	flashy_Main@data+1,w
 21788  0AD9  0087               	movwf	7
 21789  0ADA  315C               	addfsr 1,28
 21790  0ADB  3000               	movlw	0
 21791  0ADC  3FC0               	movwi [0]fsr1
 21792  0ADD  3FC1               	movwi [1]fsr1
 21793                           
 21794                           ;flashy_task.c: 280: break;
 21795  0ADE  2FC9               	goto	l9567
 21796  0ADF                     l9303:	
 21797                           ;flashy_task.c: 281: case 1 | 8:
 21798                           
 21799                           
 21800                           ;flashy_task.c: 282: if ( data->holdCountAY == 0 ){
 21801  0ADF  085E               	movf	flashy_Main@data,w
 21802  0AE0  0086               	movwf	6
 21803  0AE1  085F               	movf	flashy_Main@data+1,w
 21804  0AE2  0087               	movwf	7
 21805  0AE3  3154               	addfsr 1,20
 21806  0AE4  0016               	moviw fsr1++
 21807  0AE5  0401               	iorwf	1,w
 21808  0AE6  1D03               	btfss	3,2
 21809  0AE7  2AF8               	goto	l9309
 21810                           
 21811                           ;flashy_task.c: 283: if (flashy_sparkle_rate > 1000){
 21812  0AE8  3003               	movlw	3
 21813  0AE9  0021               	movlb	1	; select bank1
 21814  0AEA  022F               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 21815  0AEB  30E9               	movlw	233
 21816  0AEC  1903               	skipnz
 21817  0AED  022E               	subwf	_flashy_sparkle_rate^(0+128),w
 21818  0AEE  1C03               	skipc
 21819  0AEF  2AF4               	goto	l1147
 21820                           
 21821                           ;flashy_task.c: 284: flashy_sparkle_rate = 1000;
 21822  0AF0  30E8               	movlw	232
 21823  0AF1  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 21824  0AF2  3003               	movlw	3
 21825  0AF3  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 21826  0AF4                     l1147:	
 21827                           
 21828                           ;flashy_task.c: 285: }
 21829                           ;flashy_task.c: 286: flashy_sparkle_rate += 5;
 21830  0AF4  3005               	movlw	5
 21831  0AF5  07AE               	addwf	_flashy_sparkle_rate^(0+128),f
 21832  0AF6  3000               	movlw	0
 21833  0AF7  3DAF               	addwfc	(_flashy_sparkle_rate+1)^(0+128),f
 21834  0AF8                     l9309:	
 21835                           
 21836                           ;flashy_task.c: 287: }
 21837                           ;flashy_task.c: 289: data->holdCountA = 0;
 21838  0AF8  0020               	movlb	0	; select bank0
 21839  0AF9  085E               	movf	flashy_Main@data,w
 21840  0AFA  0086               	movwf	6
 21841  0AFB  085F               	movf	flashy_Main@data+1,w
 21842  0AFC  0087               	movwf	7
 21843  0AFD  314A               	addfsr 1,10
 21844  0AFE  3000               	movlw	0
 21845  0AFF  3FC0               	movwi [0]fsr1
 21846  0B00  3FC1               	movwi [1]fsr1
 21847                           
 21848                           ;flashy_task.c: 290: data->holdCountB = 0;
 21849  0B01  085E               	movf	flashy_Main@data,w
 21850  0B02  0086               	movwf	6
 21851  0B03  085F               	movf	flashy_Main@data+1,w
 21852  0B04  0087               	movwf	7
 21853  0B05  314C               	addfsr 1,12
 21854  0B06  3000               	movlw	0
 21855  0B07  3FC0               	movwi [0]fsr1
 21856  0B08  3FC1               	movwi [1]fsr1
 21857                           
 21858                           ;flashy_task.c: 291: data->holdCountX = 0;
 21859  0B09  085E               	movf	flashy_Main@data,w
 21860  0B0A  0086               	movwf	6
 21861  0B0B  085F               	movf	flashy_Main@data+1,w
 21862  0B0C  0087               	movwf	7
 21863  0B0D  314E               	addfsr 1,14
 21864  0B0E  3000               	movlw	0
 21865  0B0F  3FC0               	movwi [0]fsr1
 21866  0B10  3FC1               	movwi [1]fsr1
 21867                           
 21868                           ;flashy_task.c: 292: data->holdCountY = 0;
 21869  0B11  085E               	movf	flashy_Main@data,w
 21870  0B12  0086               	movwf	6
 21871  0B13  085F               	movf	flashy_Main@data+1,w
 21872  0B14  0087               	movwf	7
 21873  0B15  3150               	addfsr 1,16
 21874  0B16  3000               	movlw	0
 21875  0B17  3FC0               	movwi [0]fsr1
 21876  0B18  3FC1               	movwi [1]fsr1
 21877                           
 21878                           ;flashy_task.c: 293: data->holdCountXY = 0;
 21879  0B19  085E               	movf	flashy_Main@data,w
 21880  0B1A  0086               	movwf	6
 21881  0B1B  085F               	movf	flashy_Main@data+1,w
 21882  0B1C  0087               	movwf	7
 21883  0B1D  3152               	addfsr 1,18
 21884  0B1E  3000               	movlw	0
 21885  0B1F  3FC0               	movwi [0]fsr1
 21886  0B20  3FC1               	movwi [1]fsr1
 21887                           
 21888                           ;flashy_task.c: 294: data->holdCountAY += 1;
 21889  0B21  085E               	movf	flashy_Main@data,w
 21890  0B22  0086               	movwf	6
 21891  0B23  085F               	movf	flashy_Main@data+1,w
 21892  0B24  0087               	movwf	7
 21893  0B25  3154               	addfsr 1,20
 21894  0B26  3001               	movlw	1
 21895  0B27  0781               	addwf	1,f
 21896  0B28  3141               	addfsr 1,1
 21897  0B29  1803               	skipnc
 21898  0B2A  0A81               	incf	1,f
 21899                           
 21900                           ;flashy_task.c: 295: data->holdCountAX = 0;
 21901  0B2B  085E               	movf	flashy_Main@data,w
 21902  0B2C  0086               	movwf	6
 21903  0B2D  085F               	movf	flashy_Main@data+1,w
 21904  0B2E  0087               	movwf	7
 21905  0B2F  3156               	addfsr 1,22
 21906  0B30  3000               	movlw	0
 21907  0B31  3FC0               	movwi [0]fsr1
 21908  0B32  3FC1               	movwi [1]fsr1
 21909                           
 21910                           ;flashy_task.c: 296: data->holdCountBX = 0;
 21911  0B33  085E               	movf	flashy_Main@data,w
 21912  0B34  0086               	movwf	6
 21913  0B35  085F               	movf	flashy_Main@data+1,w
 21914  0B36  0087               	movwf	7
 21915  0B37  3158               	addfsr 1,24
 21916  0B38  3000               	movlw	0
 21917  0B39  3FC0               	movwi [0]fsr1
 21918  0B3A  3FC1               	movwi [1]fsr1
 21919                           
 21920                           ;flashy_task.c: 297: data->holdCountBY = 0;
 21921  0B3B  085E               	movf	flashy_Main@data,w
 21922  0B3C  0086               	movwf	6
 21923  0B3D  085F               	movf	flashy_Main@data+1,w
 21924  0B3E  0087               	movwf	7
 21925  0B3F  315A               	addfsr 1,26
 21926  0B40  3000               	movlw	0
 21927  0B41  3FC0               	movwi [0]fsr1
 21928  0B42  3FC1               	movwi [1]fsr1
 21929                           
 21930                           ;flashy_task.c: 298: data->noholdCount = 0;
 21931  0B43  085E               	movf	flashy_Main@data,w
 21932  0B44  0086               	movwf	6
 21933  0B45  085F               	movf	flashy_Main@data+1,w
 21934  0B46  0087               	movwf	7
 21935  0B47  315C               	addfsr 1,28
 21936  0B48  3000               	movlw	0
 21937  0B49  3FC0               	movwi [0]fsr1
 21938  0B4A  3FC1               	movwi [1]fsr1
 21939                           
 21940                           ;flashy_task.c: 299: break;
 21941  0B4B  2FC9               	goto	l9567
 21942  0B4C                     l9329:	
 21943                           ;flashy_task.c: 300: case 1 | 4:
 21944                           
 21945                           
 21946                           ;flashy_task.c: 301: if ( data->holdCountAX == 0 ){
 21947  0B4C  085E               	movf	flashy_Main@data,w
 21948  0B4D  0086               	movwf	6
 21949  0B4E  085F               	movf	flashy_Main@data+1,w
 21950  0B4F  0087               	movwf	7
 21951  0B50  3156               	addfsr 1,22
 21952  0B51  0016               	moviw fsr1++
 21953  0B52  0401               	iorwf	1,w
 21954  0B53  1D03               	btfss	3,2
 21955  0B54  2B65               	goto	l9335
 21956                           
 21957                           ;flashy_task.c: 302: if (flashy_sparkle_rate < 5)
 21958  0B55  3000               	movlw	0
 21959  0B56  0021               	movlb	1	; select bank1
 21960  0B57  022F               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 21961  0B58  3005               	movlw	5
 21962  0B59  1903               	skipnz
 21963  0B5A  022E               	subwf	_flashy_sparkle_rate^(0+128),w
 21964  0B5B  1803               	skipnc
 21965  0B5C  2B61               	goto	l1150
 21966                           
 21967                           ;flashy_task.c: 303: flashy_sparkle_rate=5;
 21968  0B5D  3005               	movlw	5
 21969  0B5E  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 21970  0B5F  3000               	movlw	0
 21971  0B60  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 21972  0B61                     l1150:	
 21973                           
 21974                           ;flashy_task.c: 304: flashy_sparkle_rate -= 5;
 21975  0B61  3005               	movlw	5
 21976  0B62  02AE               	subwf	_flashy_sparkle_rate^(0+128),f
 21977  0B63  3000               	movlw	0
 21978  0B64  3BAF               	subwfb	(_flashy_sparkle_rate+1)^(0+128),f
 21979  0B65                     l9335:	
 21980                           
 21981                           ;flashy_task.c: 305: }
 21982                           ;flashy_task.c: 307: data->holdCountA = 0;
 21983  0B65  0020               	movlb	0	; select bank0
 21984  0B66  085E               	movf	flashy_Main@data,w
 21985  0B67  0086               	movwf	6
 21986  0B68  085F               	movf	flashy_Main@data+1,w
 21987  0B69  0087               	movwf	7
 21988  0B6A  314A               	addfsr 1,10
 21989  0B6B  3000               	movlw	0
 21990  0B6C  3FC0               	movwi [0]fsr1
 21991  0B6D  3FC1               	movwi [1]fsr1
 21992                           
 21993                           ;flashy_task.c: 308: data->holdCountB = 0;
 21994  0B6E  085E               	movf	flashy_Main@data,w
 21995  0B6F  0086               	movwf	6
 21996  0B70  085F               	movf	flashy_Main@data+1,w
 21997  0B71  0087               	movwf	7
 21998  0B72  314C               	addfsr 1,12
 21999  0B73  3000               	movlw	0
 22000  0B74  3FC0               	movwi [0]fsr1
 22001  0B75  3FC1               	movwi [1]fsr1
 22002                           
 22003                           ;flashy_task.c: 309: data->holdCountX += 1;
 22004  0B76  085E               	movf	flashy_Main@data,w
 22005  0B77  0086               	movwf	6
 22006  0B78  085F               	movf	flashy_Main@data+1,w
 22007  0B79  0087               	movwf	7
 22008  0B7A  314E               	addfsr 1,14
 22009  0B7B  3001               	movlw	1
 22010  0B7C  0781               	addwf	1,f
 22011  0B7D  3141               	addfsr 1,1
 22012  0B7E  1803               	skipnc
 22013  0B7F  0A81               	incf	1,f
 22014                           
 22015                           ;flashy_task.c: 310: data->holdCountY = 0;
 22016  0B80  085E               	movf	flashy_Main@data,w
 22017  0B81  0086               	movwf	6
 22018  0B82  085F               	movf	flashy_Main@data+1,w
 22019  0B83  0087               	movwf	7
 22020  0B84  3150               	addfsr 1,16
 22021  0B85  3000               	movlw	0
 22022  0B86  3FC0               	movwi [0]fsr1
 22023  0B87  3FC1               	movwi [1]fsr1
 22024                           
 22025                           ;flashy_task.c: 311: data->holdCountXY = 0;
 22026  0B88  085E               	movf	flashy_Main@data,w
 22027  0B89  0086               	movwf	6
 22028  0B8A  085F               	movf	flashy_Main@data+1,w
 22029  0B8B  0087               	movwf	7
 22030  0B8C  3152               	addfsr 1,18
 22031  0B8D  3000               	movlw	0
 22032  0B8E  3FC0               	movwi [0]fsr1
 22033  0B8F  3FC1               	movwi [1]fsr1
 22034                           
 22035                           ;flashy_task.c: 312: data->holdCountAY = 0;
 22036  0B90  085E               	movf	flashy_Main@data,w
 22037  0B91  0086               	movwf	6
 22038  0B92  085F               	movf	flashy_Main@data+1,w
 22039  0B93  0087               	movwf	7
 22040  0B94  3154               	addfsr 1,20
 22041  0B95  3000               	movlw	0
 22042  0B96  3FC0               	movwi [0]fsr1
 22043  0B97  3FC1               	movwi [1]fsr1
 22044                           
 22045                           ;flashy_task.c: 313: data->holdCountAX += 1;
 22046  0B98  085E               	movf	flashy_Main@data,w
 22047  0B99  0086               	movwf	6
 22048  0B9A  085F               	movf	flashy_Main@data+1,w
 22049  0B9B  0087               	movwf	7
 22050  0B9C  3156               	addfsr 1,22
 22051  0B9D  3001               	movlw	1
 22052  0B9E  0781               	addwf	1,f
 22053  0B9F  3141               	addfsr 1,1
 22054  0BA0  1803               	skipnc
 22055  0BA1  0A81               	incf	1,f
 22056                           
 22057                           ;flashy_task.c: 314: data->holdCountBX = 0;
 22058  0BA2  085E               	movf	flashy_Main@data,w
 22059  0BA3  0086               	movwf	6
 22060  0BA4  085F               	movf	flashy_Main@data+1,w
 22061  0BA5  0087               	movwf	7
 22062  0BA6  3158               	addfsr 1,24
 22063  0BA7  3000               	movlw	0
 22064  0BA8  3FC0               	movwi [0]fsr1
 22065  0BA9  3FC1               	movwi [1]fsr1
 22066                           
 22067                           ;flashy_task.c: 315: data->holdCountBY = 0;
 22068  0BAA  085E               	movf	flashy_Main@data,w
 22069  0BAB  0086               	movwf	6
 22070  0BAC  085F               	movf	flashy_Main@data+1,w
 22071  0BAD  0087               	movwf	7
 22072  0BAE  315A               	addfsr 1,26
 22073  0BAF  3000               	movlw	0
 22074  0BB0  3FC0               	movwi [0]fsr1
 22075  0BB1  3FC1               	movwi [1]fsr1
 22076                           
 22077                           ;flashy_task.c: 316: data->noholdCount = 0;
 22078  0BB2  085E               	movf	flashy_Main@data,w
 22079  0BB3  0086               	movwf	6
 22080  0BB4  085F               	movf	flashy_Main@data+1,w
 22081  0BB5  0087               	movwf	7
 22082  0BB6  315C               	addfsr 1,28
 22083  0BB7  3000               	movlw	0
 22084  0BB8  3FC0               	movwi [0]fsr1
 22085  0BB9  3FC1               	movwi [1]fsr1
 22086                           
 22087                           ;flashy_task.c: 317: break;
 22088  0BBA  2FC9               	goto	l9567
 22089  0BBB                     l9355:	
 22090                           ;flashy_task.c: 318: case 2 | 8:
 22091                           
 22092                           
 22093                           ;flashy_task.c: 319: if (data->holdCountBY == 0){
 22094  0BBB  085E               	movf	flashy_Main@data,w
 22095  0BBC  0086               	movwf	6
 22096  0BBD  085F               	movf	flashy_Main@data+1,w
 22097  0BBE  0087               	movwf	7
 22098  0BBF  315A               	addfsr 1,26
 22099  0BC0  0016               	moviw fsr1++
 22100  0BC1  0401               	iorwf	1,w
 22101  0BC2  1D03               	btfss	3,2
 22102  0BC3  2BD8               	goto	l9365
 22103                           
 22104                           ;flashy_task.c: 320: if (flashy_option_idx == 0){
 22105  0BC4  0021               	movlb	1	; select bank1
 22106  0BC5  0828               	movf	_flashy_option_idx^(0+128),w
 22107  0BC6  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 22108  0BC7  1903               	btfsc	3,2
 22109  0BC8  2BD8               	goto	l9365
 22110                           
 22111                           ;flashy_task.c: 323: else {
 22112                           ;flashy_task.c: 324: if (flashy_scroll_rate > 150){
 22113                           
 22114                           ;flashy_task.c: 322: }
 22115  0BC9  3000               	movlw	0
 22116  0BCA  022D               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 22117  0BCB  3097               	movlw	151
 22118  0BCC  1903               	skipnz
 22119  0BCD  022C               	subwf	_flashy_scroll_rate^(0+128),w
 22120  0BCE  1C03               	skipc
 22121  0BCF  2BD4               	goto	l1155
 22122                           
 22123                           ;flashy_task.c: 325: flashy_scroll_rate =150;
 22124  0BD0  3096               	movlw	150
 22125  0BD1  00AC               	movwf	_flashy_scroll_rate^(0+128)
 22126  0BD2  3000               	movlw	0
 22127  0BD3  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 22128  0BD4                     l1155:	
 22129                           
 22130                           ;flashy_task.c: 326: }
 22131                           ;flashy_task.c: 327: flashy_scroll_rate +=2;
 22132  0BD4  3002               	movlw	2
 22133  0BD5  07AC               	addwf	_flashy_scroll_rate^(0+128),f
 22134  0BD6  3000               	movlw	0
 22135  0BD7  3DAD               	addwfc	(_flashy_scroll_rate+1)^(0+128),f
 22136  0BD8                     l9365:	
 22137                           
 22138                           ;flashy_task.c: 328: }
 22139                           ;flashy_task.c: 330: }
 22140                           ;flashy_task.c: 331: data->holdCountA = 0;
 22141  0BD8  0020               	movlb	0	; select bank0
 22142  0BD9  085E               	movf	flashy_Main@data,w
 22143  0BDA  0086               	movwf	6
 22144  0BDB  085F               	movf	flashy_Main@data+1,w
 22145  0BDC  0087               	movwf	7
 22146  0BDD  314A               	addfsr 1,10
 22147  0BDE  3000               	movlw	0
 22148  0BDF  3FC0               	movwi [0]fsr1
 22149  0BE0  3FC1               	movwi [1]fsr1
 22150                           
 22151                           ;flashy_task.c: 332: data->holdCountB += 1;
 22152  0BE1  085E               	movf	flashy_Main@data,w
 22153  0BE2  0086               	movwf	6
 22154  0BE3  085F               	movf	flashy_Main@data+1,w
 22155  0BE4  0087               	movwf	7
 22156  0BE5  314C               	addfsr 1,12
 22157  0BE6  3001               	movlw	1
 22158  0BE7  0781               	addwf	1,f
 22159  0BE8  3141               	addfsr 1,1
 22160  0BE9  1803               	skipnc
 22161  0BEA  0A81               	incf	1,f
 22162                           
 22163                           ;flashy_task.c: 333: data->holdCountX = 0;
 22164  0BEB  085E               	movf	flashy_Main@data,w
 22165  0BEC  0086               	movwf	6
 22166  0BED  085F               	movf	flashy_Main@data+1,w
 22167  0BEE  0087               	movwf	7
 22168  0BEF  314E               	addfsr 1,14
 22169  0BF0  3000               	movlw	0
 22170  0BF1  3FC0               	movwi [0]fsr1
 22171  0BF2  3FC1               	movwi [1]fsr1
 22172                           
 22173                           ;flashy_task.c: 334: data->holdCountY += 1;
 22174  0BF3  085E               	movf	flashy_Main@data,w
 22175  0BF4  0086               	movwf	6
 22176  0BF5  085F               	movf	flashy_Main@data+1,w
 22177  0BF6  0087               	movwf	7
 22178  0BF7  3150               	addfsr 1,16
 22179  0BF8  3001               	movlw	1
 22180  0BF9  0781               	addwf	1,f
 22181  0BFA  3141               	addfsr 1,1
 22182  0BFB  1803               	skipnc
 22183  0BFC  0A81               	incf	1,f
 22184                           
 22185                           ;flashy_task.c: 335: data->holdCountXY = 0;
 22186  0BFD  085E               	movf	flashy_Main@data,w
 22187  0BFE  0086               	movwf	6
 22188  0BFF  085F               	movf	flashy_Main@data+1,w
 22189  0C00  0087               	movwf	7
 22190  0C01  3152               	addfsr 1,18
 22191  0C02  3000               	movlw	0
 22192  0C03  3FC0               	movwi [0]fsr1
 22193  0C04  3FC1               	movwi [1]fsr1
 22194                           
 22195                           ;flashy_task.c: 336: data->holdCountAY = 0;
 22196  0C05  085E               	movf	flashy_Main@data,w
 22197  0C06  0086               	movwf	6
 22198  0C07  085F               	movf	flashy_Main@data+1,w
 22199  0C08  0087               	movwf	7
 22200  0C09  3154               	addfsr 1,20
 22201  0C0A  3000               	movlw	0
 22202  0C0B  3FC0               	movwi [0]fsr1
 22203  0C0C  3FC1               	movwi [1]fsr1
 22204                           
 22205                           ;flashy_task.c: 337: data->holdCountAX = 0;
 22206  0C0D  085E               	movf	flashy_Main@data,w
 22207  0C0E  0086               	movwf	6
 22208  0C0F  085F               	movf	flashy_Main@data+1,w
 22209  0C10  0087               	movwf	7
 22210  0C11  3156               	addfsr 1,22
 22211  0C12  3000               	movlw	0
 22212  0C13  3FC0               	movwi [0]fsr1
 22213  0C14  3FC1               	movwi [1]fsr1
 22214                           
 22215                           ;flashy_task.c: 338: data->holdCountBX = 0;
 22216  0C15  085E               	movf	flashy_Main@data,w
 22217  0C16  0086               	movwf	6
 22218  0C17  085F               	movf	flashy_Main@data+1,w
 22219  0C18  0087               	movwf	7
 22220  0C19  3158               	addfsr 1,24
 22221  0C1A  3000               	movlw	0
 22222  0C1B  3FC0               	movwi [0]fsr1
 22223  0C1C  3FC1               	movwi [1]fsr1
 22224                           
 22225                           ;flashy_task.c: 339: data->holdCountBY += 1;
 22226  0C1D  085E               	movf	flashy_Main@data,w
 22227  0C1E  0086               	movwf	6
 22228  0C1F  085F               	movf	flashy_Main@data+1,w
 22229  0C20  0087               	movwf	7
 22230  0C21  315A               	addfsr 1,26
 22231  0C22  3001               	movlw	1
 22232  0C23  0781               	addwf	1,f
 22233  0C24  3141               	addfsr 1,1
 22234  0C25  1803               	skipnc
 22235  0C26  0A81               	incf	1,f
 22236                           
 22237                           ;flashy_task.c: 340: data->noholdCount = 0;
 22238  0C27  085E               	movf	flashy_Main@data,w
 22239  0C28  0086               	movwf	6
 22240  0C29  085F               	movf	flashy_Main@data+1,w
 22241  0C2A  0087               	movwf	7
 22242  0C2B  315C               	addfsr 1,28
 22243  0C2C  3000               	movlw	0
 22244  0C2D  3FC0               	movwi [0]fsr1
 22245  0C2E  3FC1               	movwi [1]fsr1
 22246                           
 22247                           ;flashy_task.c: 341: break;
 22248  0C2F  2FC9               	goto	l9567
 22249  0C30                     l9385:	
 22250                           ;flashy_task.c: 342: case 2 | 4:
 22251                           
 22252                           
 22253                           ;flashy_task.c: 343: if (data-> holdCountBX == 0){
 22254  0C30  085E               	movf	flashy_Main@data,w
 22255  0C31  0086               	movwf	6
 22256  0C32  085F               	movf	flashy_Main@data+1,w
 22257  0C33  0087               	movwf	7
 22258  0C34  3158               	addfsr 1,24
 22259  0C35  0016               	moviw fsr1++
 22260  0C36  0401               	iorwf	1,w
 22261  0C37  1D03               	btfss	3,2
 22262  0C38  2C4D               	goto	l9395
 22263                           
 22264                           ;flashy_task.c: 344: if (flashy_option_idx == 0){
 22265  0C39  0021               	movlb	1	; select bank1
 22266  0C3A  0828               	movf	_flashy_option_idx^(0+128),w
 22267  0C3B  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 22268  0C3C  1903               	btfsc	3,2
 22269  0C3D  2C4D               	goto	l9395
 22270                           
 22271                           ;flashy_task.c: 347: else {
 22272                           ;flashy_task.c: 348: if (flashy_scroll_rate < 5){
 22273                           
 22274                           ;flashy_task.c: 346: }
 22275  0C3E  3000               	movlw	0
 22276  0C3F  022D               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 22277  0C40  3005               	movlw	5
 22278  0C41  1903               	skipnz
 22279  0C42  022C               	subwf	_flashy_scroll_rate^(0+128),w
 22280  0C43  1803               	skipnc
 22281  0C44  2C49               	goto	l1160
 22282                           
 22283                           ;flashy_task.c: 349: flashy_scroll_rate =5;
 22284  0C45  3005               	movlw	5
 22285  0C46  00AC               	movwf	_flashy_scroll_rate^(0+128)
 22286  0C47  3000               	movlw	0
 22287  0C48  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 22288  0C49                     l1160:	
 22289                           
 22290                           ;flashy_task.c: 350: }
 22291                           ;flashy_task.c: 351: flashy_scroll_rate -=3;
 22292  0C49  3003               	movlw	3
 22293  0C4A  02AC               	subwf	_flashy_scroll_rate^(0+128),f
 22294  0C4B  3000               	movlw	0
 22295  0C4C  3BAD               	subwfb	(_flashy_scroll_rate+1)^(0+128),f
 22296  0C4D                     l9395:	
 22297                           
 22298                           ;flashy_task.c: 352: }
 22299                           ;flashy_task.c: 354: }
 22300                           ;flashy_task.c: 355: data->holdCountA = 0;
 22301  0C4D  0020               	movlb	0	; select bank0
 22302  0C4E  085E               	movf	flashy_Main@data,w
 22303  0C4F  0086               	movwf	6
 22304  0C50  085F               	movf	flashy_Main@data+1,w
 22305  0C51  0087               	movwf	7
 22306  0C52  314A               	addfsr 1,10
 22307  0C53  3000               	movlw	0
 22308  0C54  3FC0               	movwi [0]fsr1
 22309  0C55  3FC1               	movwi [1]fsr1
 22310                           
 22311                           ;flashy_task.c: 356: data->holdCountB += 1;
 22312  0C56  085E               	movf	flashy_Main@data,w
 22313  0C57  0086               	movwf	6
 22314  0C58  085F               	movf	flashy_Main@data+1,w
 22315  0C59  0087               	movwf	7
 22316  0C5A  314C               	addfsr 1,12
 22317  0C5B  3001               	movlw	1
 22318  0C5C  0781               	addwf	1,f
 22319  0C5D  3141               	addfsr 1,1
 22320  0C5E  1803               	skipnc
 22321  0C5F  0A81               	incf	1,f
 22322                           
 22323                           ;flashy_task.c: 357: data->holdCountX += 1;
 22324  0C60  085E               	movf	flashy_Main@data,w
 22325  0C61  0086               	movwf	6
 22326  0C62  085F               	movf	flashy_Main@data+1,w
 22327  0C63  0087               	movwf	7
 22328  0C64  314E               	addfsr 1,14
 22329  0C65  3001               	movlw	1
 22330  0C66  0781               	addwf	1,f
 22331  0C67  3141               	addfsr 1,1
 22332  0C68  1803               	skipnc
 22333  0C69  0A81               	incf	1,f
 22334                           
 22335                           ;flashy_task.c: 358: data->holdCountY = 0;
 22336  0C6A  085E               	movf	flashy_Main@data,w
 22337  0C6B  0086               	movwf	6
 22338  0C6C  085F               	movf	flashy_Main@data+1,w
 22339  0C6D  0087               	movwf	7
 22340  0C6E  3150               	addfsr 1,16
 22341  0C6F  3000               	movlw	0
 22342  0C70  3FC0               	movwi [0]fsr1
 22343  0C71  3FC1               	movwi [1]fsr1
 22344                           
 22345                           ;flashy_task.c: 359: data->holdCountXY = 0;
 22346  0C72  085E               	movf	flashy_Main@data,w
 22347  0C73  0086               	movwf	6
 22348  0C74  085F               	movf	flashy_Main@data+1,w
 22349  0C75  0087               	movwf	7
 22350  0C76  3152               	addfsr 1,18
 22351  0C77  3000               	movlw	0
 22352  0C78  3FC0               	movwi [0]fsr1
 22353  0C79  3FC1               	movwi [1]fsr1
 22354                           
 22355                           ;flashy_task.c: 360: data->holdCountAY = 0;
 22356  0C7A  085E               	movf	flashy_Main@data,w
 22357  0C7B  0086               	movwf	6
 22358  0C7C  085F               	movf	flashy_Main@data+1,w
 22359  0C7D  0087               	movwf	7
 22360  0C7E  3154               	addfsr 1,20
 22361  0C7F  3000               	movlw	0
 22362  0C80  3FC0               	movwi [0]fsr1
 22363  0C81  3FC1               	movwi [1]fsr1
 22364                           
 22365                           ;flashy_task.c: 361: data->holdCountAX = 0;
 22366  0C82  085E               	movf	flashy_Main@data,w
 22367  0C83  0086               	movwf	6
 22368  0C84  085F               	movf	flashy_Main@data+1,w
 22369  0C85  0087               	movwf	7
 22370  0C86  3156               	addfsr 1,22
 22371  0C87  3000               	movlw	0
 22372  0C88  3FC0               	movwi [0]fsr1
 22373  0C89  3FC1               	movwi [1]fsr1
 22374                           
 22375                           ;flashy_task.c: 362: data->holdCountBX += 1;
 22376  0C8A  085E               	movf	flashy_Main@data,w
 22377  0C8B  0086               	movwf	6
 22378  0C8C  085F               	movf	flashy_Main@data+1,w
 22379  0C8D  0087               	movwf	7
 22380  0C8E  3158               	addfsr 1,24
 22381  0C8F  3001               	movlw	1
 22382  0C90  0781               	addwf	1,f
 22383  0C91  3141               	addfsr 1,1
 22384  0C92  1803               	skipnc
 22385  0C93  0A81               	incf	1,f
 22386                           
 22387                           ;flashy_task.c: 363: data->holdCountBY = 0;
 22388  0C94  085E               	movf	flashy_Main@data,w
 22389  0C95  0086               	movwf	6
 22390  0C96  085F               	movf	flashy_Main@data+1,w
 22391  0C97  0087               	movwf	7
 22392  0C98  315A               	addfsr 1,26
 22393  0C99  3000               	movlw	0
 22394  0C9A  3FC0               	movwi [0]fsr1
 22395  0C9B  3FC1               	movwi [1]fsr1
 22396                           
 22397                           ;flashy_task.c: 364: data->noholdCount = 0;
 22398  0C9C  085E               	movf	flashy_Main@data,w
 22399  0C9D  0086               	movwf	6
 22400  0C9E  085F               	movf	flashy_Main@data+1,w
 22401  0C9F  0087               	movwf	7
 22402  0CA0  315C               	addfsr 1,28
 22403  0CA1  3000               	movlw	0
 22404  0CA2  3FC0               	movwi [0]fsr1
 22405  0CA3  3FC1               	movwi [1]fsr1
 22406                           
 22407                           ;flashy_task.c: 365: break;
 22408  0CA4  2FC9               	goto	l9567
 22409  0CA5                     l9415:	
 22410                           ;flashy_task.c: 366: case 8:
 22411                           
 22412                           
 22413                           ;flashy_task.c: 368: if (data->holdCountY == 0 && data->blasterTickCount == 0){
 22414  0CA5  085E               	movf	flashy_Main@data,w
 22415  0CA6  0086               	movwf	6
 22416  0CA7  085F               	movf	flashy_Main@data+1,w
 22417  0CA8  0087               	movwf	7
 22418  0CA9  3150               	addfsr 1,16
 22419  0CAA  0016               	moviw fsr1++
 22420  0CAB  0401               	iorwf	1,w
 22421  0CAC  1D03               	btfss	3,2
 22422  0CAD  2CFB               	goto	l9433
 22423  0CAE  085E               	movf	flashy_Main@data,w
 22424  0CAF  0086               	movwf	6
 22425  0CB0  085F               	movf	flashy_Main@data+1,w
 22426  0CB1  0087               	movwf	7
 22427  0CB2  3147               	addfsr 1,7
 22428  0CB3  0016               	moviw fsr1++
 22429  0CB4  0401               	iorwf	1,w
 22430  0CB5  1D03               	btfss	3,2
 22431  0CB6  2CFB               	goto	l9433
 22432                           
 22433                           ;flashy_task.c: 370: nullifyBadge_userLedsSet(data->badge, 0x0);
 22434  0CB7  3000               	movlw	0
 22435  0CB8  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 22436  0CB9  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 22437  0CBA  085E               	movf	flashy_Main@data,w
 22438  0CBB  0086               	movwf	6
 22439  0CBC  085F               	movf	flashy_Main@data+1,w
 22440  0CBD  0087               	movwf	7
 22441  0CBE  0801               	movf	1,w
 22442  0CBF  31B2  22F7  3188   	fcall	_nullifyBadge_userLedsSet
 22443                           
 22444                           ;flashy_task.c: 372: data->displayTickCount = 0;
 22445  0CC2  0020               	movlb	0	; select bank0
 22446  0CC3  085E               	movf	flashy_Main@data,w
 22447  0CC4  0086               	movwf	6
 22448  0CC5  085F               	movf	flashy_Main@data+1,w
 22449  0CC6  0087               	movwf	7
 22450  0CC7  3144               	addfsr 1,4
 22451  0CC8  3000               	movlw	0
 22452  0CC9  3FC0               	movwi [0]fsr1
 22453  0CCA  3FC1               	movwi [1]fsr1
 22454                           
 22455                           ;flashy_task.c: 373: data->blasterTickCount = 100;
 22456  0CCB  085E               	movf	flashy_Main@data,w
 22457  0CCC  0086               	movwf	6
 22458  0CCD  085F               	movf	flashy_Main@data+1,w
 22459  0CCE  0087               	movwf	7
 22460  0CCF  3147               	addfsr 1,7
 22461  0CD0  3064               	movlw	100
 22462  0CD1  3FC0               	movwi [0]fsr1
 22463  0CD2  3000               	movlw	0
 22464  0CD3  3FC1               	movwi [1]fsr1
 22465                           
 22466                           ;flashy_task.c: 374: data->delayTickCount = 5;
 22467  0CD4  085E               	movf	flashy_Main@data,w
 22468  0CD5  0086               	movwf	6
 22469  0CD6  085F               	movf	flashy_Main@data+1,w
 22470  0CD7  0087               	movwf	7
 22471  0CD8  3141               	addfsr 1,1
 22472  0CD9  3005               	movlw	5
 22473  0CDA  3FC0               	movwi [0]fsr1
 22474  0CDB  3000               	movlw	0
 22475  0CDC  3FC1               	movwi [1]fsr1
 22476                           
 22477                           ;flashy_task.c: 376: data->led_state = FLASHY_STATE_LED_SHOT;
 22478  0CDD  085E               	movf	flashy_Main@data,w
 22479  0CDE  3E03               	addlw	3
 22480  0CDF  00D4               	movwf	??_flashy_Main
 22481  0CE0  3000               	movlw	0
 22482  0CE1  3D5F               	addwfc	flashy_Main@data+1,w
 22483  0CE2  00D5               	movwf	??_flashy_Main+1
 22484  0CE3  0854               	movf	??_flashy_Main,w
 22485  0CE4  0086               	movwf	6
 22486  0CE5  0855               	movf	??_flashy_Main+1,w
 22487  0CE6  0087               	movwf	7
 22488  0CE7  3001               	movlw	1
 22489  0CE8  0081               	movwf	1
 22490                           
 22491                           ;flashy_task.c: 377: data->display_state = FLASHY_STATE_DISPLAY_BLASTER;
 22492  0CE9  085E               	movf	flashy_Main@data,w
 22493  0CEA  3E06               	addlw	6
 22494  0CEB  00D4               	movwf	??_flashy_Main
 22495  0CEC  3000               	movlw	0
 22496  0CED  3D5F               	addwfc	flashy_Main@data+1,w
 22497  0CEE  00D5               	movwf	??_flashy_Main+1
 22498  0CEF  0854               	movf	??_flashy_Main,w
 22499  0CF0  0086               	movwf	6
 22500  0CF1  0855               	movf	??_flashy_Main+1,w
 22501  0CF2  0087               	movwf	7
 22502  0CF3  3002               	movlw	2
 22503  0CF4  0081               	movwf	1
 22504                           
 22505                           ;flashy_task.c: 378: data->blaster_state = FLASHY_BLASTER_SHOOTING_STATE;
 22506  0CF5  085E               	movf	flashy_Main@data,w
 22507  0CF6  0086               	movwf	6
 22508  0CF7  085F               	movf	flashy_Main@data+1,w
 22509  0CF8  0087               	movwf	7
 22510  0CF9  3149               	addfsr 1,9
 22511  0CFA  0181               	clrf	1
 22512  0CFB                     l9433:	
 22513                           
 22514                           ;flashy_task.c: 379: }
 22515                           ;flashy_task.c: 381: data->holdCountA = 0;
 22516  0CFB  085E               	movf	flashy_Main@data,w
 22517  0CFC  0086               	movwf	6
 22518  0CFD  085F               	movf	flashy_Main@data+1,w
 22519  0CFE  0087               	movwf	7
 22520  0CFF  314A               	addfsr 1,10
 22521  0D00  3000               	movlw	0
 22522  0D01  3FC0               	movwi [0]fsr1
 22523  0D02  3FC1               	movwi [1]fsr1
 22524                           
 22525                           ;flashy_task.c: 382: data->holdCountB = 0;
 22526  0D03  085E               	movf	flashy_Main@data,w
 22527  0D04  0086               	movwf	6
 22528  0D05  085F               	movf	flashy_Main@data+1,w
 22529  0D06  0087               	movwf	7
 22530  0D07  314C               	addfsr 1,12
 22531  0D08  3000               	movlw	0
 22532  0D09  3FC0               	movwi [0]fsr1
 22533  0D0A  3FC1               	movwi [1]fsr1
 22534                           
 22535                           ;flashy_task.c: 383: data->holdCountX = 0;
 22536  0D0B  085E               	movf	flashy_Main@data,w
 22537  0D0C  0086               	movwf	6
 22538  0D0D  085F               	movf	flashy_Main@data+1,w
 22539  0D0E  0087               	movwf	7
 22540  0D0F  314E               	addfsr 1,14
 22541  0D10  3000               	movlw	0
 22542  0D11  3FC0               	movwi [0]fsr1
 22543  0D12  3FC1               	movwi [1]fsr1
 22544                           
 22545                           ;flashy_task.c: 384: data->holdCountY += 1;
 22546  0D13  085E               	movf	flashy_Main@data,w
 22547  0D14  0086               	movwf	6
 22548  0D15  085F               	movf	flashy_Main@data+1,w
 22549  0D16  0087               	movwf	7
 22550  0D17  3150               	addfsr 1,16
 22551  0D18  3001               	movlw	1
 22552  0D19  0781               	addwf	1,f
 22553  0D1A  3141               	addfsr 1,1
 22554  0D1B  1803               	skipnc
 22555  0D1C  0A81               	incf	1,f
 22556                           
 22557                           ;flashy_task.c: 385: data->holdCountXY = 0;
 22558  0D1D  085E               	movf	flashy_Main@data,w
 22559  0D1E  0086               	movwf	6
 22560  0D1F  085F               	movf	flashy_Main@data+1,w
 22561  0D20  0087               	movwf	7
 22562  0D21  3152               	addfsr 1,18
 22563  0D22  3000               	movlw	0
 22564  0D23  3FC0               	movwi [0]fsr1
 22565  0D24  3FC1               	movwi [1]fsr1
 22566                           
 22567                           ;flashy_task.c: 386: data->holdCountAY = 0;
 22568  0D25  085E               	movf	flashy_Main@data,w
 22569  0D26  0086               	movwf	6
 22570  0D27  085F               	movf	flashy_Main@data+1,w
 22571  0D28  0087               	movwf	7
 22572  0D29  3154               	addfsr 1,20
 22573  0D2A  3000               	movlw	0
 22574  0D2B  3FC0               	movwi [0]fsr1
 22575  0D2C  3FC1               	movwi [1]fsr1
 22576                           
 22577                           ;flashy_task.c: 387: data->holdCountAX = 0;
 22578  0D2D  085E               	movf	flashy_Main@data,w
 22579  0D2E  0086               	movwf	6
 22580  0D2F  085F               	movf	flashy_Main@data+1,w
 22581  0D30  0087               	movwf	7
 22582  0D31  3156               	addfsr 1,22
 22583  0D32  3000               	movlw	0
 22584  0D33  3FC0               	movwi [0]fsr1
 22585  0D34  3FC1               	movwi [1]fsr1
 22586                           
 22587                           ;flashy_task.c: 388: data->holdCountBX = 0;
 22588  0D35  085E               	movf	flashy_Main@data,w
 22589  0D36  0086               	movwf	6
 22590  0D37  085F               	movf	flashy_Main@data+1,w
 22591  0D38  0087               	movwf	7
 22592  0D39  3158               	addfsr 1,24
 22593  0D3A  3000               	movlw	0
 22594  0D3B  3FC0               	movwi [0]fsr1
 22595  0D3C  3FC1               	movwi [1]fsr1
 22596                           
 22597                           ;flashy_task.c: 389: data->holdCountBY = 0;
 22598  0D3D  085E               	movf	flashy_Main@data,w
 22599  0D3E  0086               	movwf	6
 22600  0D3F  085F               	movf	flashy_Main@data+1,w
 22601  0D40  0087               	movwf	7
 22602  0D41  315A               	addfsr 1,26
 22603  0D42  3000               	movlw	0
 22604  0D43  3FC0               	movwi [0]fsr1
 22605  0D44  3FC1               	movwi [1]fsr1
 22606                           
 22607                           ;flashy_task.c: 390: data->noholdCount = 0;
 22608  0D45  085E               	movf	flashy_Main@data,w
 22609  0D46  0086               	movwf	6
 22610  0D47  085F               	movf	flashy_Main@data+1,w
 22611  0D48  0087               	movwf	7
 22612  0D49  315C               	addfsr 1,28
 22613  0D4A  3000               	movlw	0
 22614  0D4B  3FC0               	movwi [0]fsr1
 22615  0D4C  3FC1               	movwi [1]fsr1
 22616                           
 22617                           ;flashy_task.c: 391: break;
 22618  0D4D  2FC9               	goto	l9567
 22619  0D4E                     l9453:	
 22620                           ;flashy_task.c: 392: case 2:
 22621                           
 22622                           
 22623                           ;flashy_task.c: 394: if (data->holdCountB == 0){
 22624  0D4E  085E               	movf	flashy_Main@data,w
 22625  0D4F  0086               	movwf	6
 22626  0D50  085F               	movf	flashy_Main@data+1,w
 22627  0D51  0087               	movwf	7
 22628  0D52  314C               	addfsr 1,12
 22629  0D53  0016               	moviw fsr1++
 22630  0D54  0401               	iorwf	1,w
 22631  0D55  1D03               	btfss	3,2
 22632  0D56  2D7C               	goto	l9463
 22633                           
 22634                           ;flashy_task.c: 395: data->display_state = FLASHY_STATE_DISPLAY;
 22635  0D57  085E               	movf	flashy_Main@data,w
 22636  0D58  0086               	movwf	6
 22637  0D59  085F               	movf	flashy_Main@data+1,w
 22638  0D5A  0087               	movwf	7
 22639  0D5B  3146               	addfsr 1,6
 22640  0D5C  0181               	clrf	1
 22641                           
 22642                           ;flashy_task.c: 396: if (flashy_option_idx == flashy_option_size - 1){
 22643  0D5D  0021               	movlb	1	; select bank1
 22644  0D5E  0826               	movf	_flashy_option_size^(0+128),w
 22645  0D5F  3EFF               	addlw	255
 22646  0D60  0020               	movlb	0	; select bank0
 22647  0D61  00D4               	movwf	??_flashy_Main
 22648  0D62  30FF               	movlw	255
 22649  0D63  0021               	movlb	1	; select bank1
 22650  0D64  3D27               	addwfc	(_flashy_option_size+1)^(0+128),w
 22651  0D65  0020               	movlb	0	; select bank0
 22652  0D66  00D5               	movwf	??_flashy_Main+1
 22653  0D67  0021               	movlb	1	; select bank1
 22654  0D68  0829               	movf	(_flashy_option_idx+1)^(0+128),w
 22655  0D69  0020               	movlb	0	; select bank0
 22656  0D6A  0655               	xorwf	??_flashy_Main+1,w
 22657  0D6B  1D03               	skipz
 22658  0D6C  2D71               	goto	u5945
 22659  0D6D  0021               	movlb	1	; select bank1
 22660  0D6E  0828               	movf	_flashy_option_idx^(0+128),w
 22661  0D6F  0020               	movlb	0	; select bank0
 22662  0D70  0654               	xorwf	??_flashy_Main,w
 22663  0D71                     u5945:	
 22664  0D71  1D03               	skipz
 22665  0D72  2D77               	goto	l9461
 22666                           
 22667                           ;flashy_task.c: 397: flashy_option_idx = 0;
 22668  0D73  0021               	movlb	1	; select bank1
 22669  0D74  01A8               	clrf	_flashy_option_idx^(0+128)
 22670  0D75  01A9               	clrf	(_flashy_option_idx+1)^(0+128)
 22671                           
 22672                           ;flashy_task.c: 398: }
 22673  0D76  2D7C               	goto	l9463
 22674  0D77                     l9461:	
 22675                           
 22676                           ;flashy_task.c: 399: else {
 22677                           ;flashy_task.c: 400: flashy_option_idx += 1;
 22678  0D77  3001               	movlw	1
 22679  0D78  0021               	movlb	1	; select bank1
 22680  0D79  07A8               	addwf	_flashy_option_idx^(0+128),f
 22681  0D7A  3000               	movlw	0
 22682  0D7B  3DA9               	addwfc	(_flashy_option_idx+1)^(0+128),f
 22683  0D7C                     l9463:	
 22684                           
 22685                           ;flashy_task.c: 401: }
 22686                           ;flashy_task.c: 402: }
 22687                           ;flashy_task.c: 403: data->holdCountA = 0;
 22688  0D7C  0020               	movlb	0	; select bank0
 22689  0D7D  085E               	movf	flashy_Main@data,w
 22690  0D7E  0086               	movwf	6
 22691  0D7F  085F               	movf	flashy_Main@data+1,w
 22692  0D80  0087               	movwf	7
 22693  0D81  314A               	addfsr 1,10
 22694  0D82  3000               	movlw	0
 22695  0D83  3FC0               	movwi [0]fsr1
 22696  0D84  3FC1               	movwi [1]fsr1
 22697                           
 22698                           ;flashy_task.c: 404: data->holdCountB += 1;
 22699  0D85  085E               	movf	flashy_Main@data,w
 22700  0D86  0086               	movwf	6
 22701  0D87  085F               	movf	flashy_Main@data+1,w
 22702  0D88  0087               	movwf	7
 22703  0D89  314C               	addfsr 1,12
 22704  0D8A  3001               	movlw	1
 22705  0D8B  0781               	addwf	1,f
 22706  0D8C  3141               	addfsr 1,1
 22707  0D8D  1803               	skipnc
 22708  0D8E  0A81               	incf	1,f
 22709                           
 22710                           ;flashy_task.c: 405: data->holdCountX = 0;
 22711  0D8F  085E               	movf	flashy_Main@data,w
 22712  0D90  0086               	movwf	6
 22713  0D91  085F               	movf	flashy_Main@data+1,w
 22714  0D92  0087               	movwf	7
 22715  0D93  314E               	addfsr 1,14
 22716  0D94  3000               	movlw	0
 22717  0D95  3FC0               	movwi [0]fsr1
 22718  0D96  3FC1               	movwi [1]fsr1
 22719                           
 22720                           ;flashy_task.c: 406: data->holdCountY = 0;
 22721  0D97  085E               	movf	flashy_Main@data,w
 22722  0D98  0086               	movwf	6
 22723  0D99  085F               	movf	flashy_Main@data+1,w
 22724  0D9A  0087               	movwf	7
 22725  0D9B  3150               	addfsr 1,16
 22726  0D9C  3000               	movlw	0
 22727  0D9D  3FC0               	movwi [0]fsr1
 22728  0D9E  3FC1               	movwi [1]fsr1
 22729                           
 22730                           ;flashy_task.c: 407: data->holdCountXY = 0;
 22731  0D9F  085E               	movf	flashy_Main@data,w
 22732  0DA0  0086               	movwf	6
 22733  0DA1  085F               	movf	flashy_Main@data+1,w
 22734  0DA2  0087               	movwf	7
 22735  0DA3  3152               	addfsr 1,18
 22736  0DA4  3000               	movlw	0
 22737  0DA5  3FC0               	movwi [0]fsr1
 22738  0DA6  3FC1               	movwi [1]fsr1
 22739                           
 22740                           ;flashy_task.c: 408: data->holdCountAY = 0;
 22741  0DA7  085E               	movf	flashy_Main@data,w
 22742  0DA8  0086               	movwf	6
 22743  0DA9  085F               	movf	flashy_Main@data+1,w
 22744  0DAA  0087               	movwf	7
 22745  0DAB  3154               	addfsr 1,20
 22746  0DAC  3000               	movlw	0
 22747  0DAD  3FC0               	movwi [0]fsr1
 22748  0DAE  3FC1               	movwi [1]fsr1
 22749                           
 22750                           ;flashy_task.c: 409: data->holdCountAX = 0;
 22751  0DAF  085E               	movf	flashy_Main@data,w
 22752  0DB0  0086               	movwf	6
 22753  0DB1  085F               	movf	flashy_Main@data+1,w
 22754  0DB2  0087               	movwf	7
 22755  0DB3  3156               	addfsr 1,22
 22756  0DB4  3000               	movlw	0
 22757  0DB5  3FC0               	movwi [0]fsr1
 22758  0DB6  3FC1               	movwi [1]fsr1
 22759                           
 22760                           ;flashy_task.c: 410: data->holdCountBX = 0;
 22761  0DB7  085E               	movf	flashy_Main@data,w
 22762  0DB8  0086               	movwf	6
 22763  0DB9  085F               	movf	flashy_Main@data+1,w
 22764  0DBA  0087               	movwf	7
 22765  0DBB  3158               	addfsr 1,24
 22766  0DBC  3000               	movlw	0
 22767  0DBD  3FC0               	movwi [0]fsr1
 22768  0DBE  3FC1               	movwi [1]fsr1
 22769                           
 22770                           ;flashy_task.c: 411: data->holdCountBY = 0;
 22771  0DBF  085E               	movf	flashy_Main@data,w
 22772  0DC0  0086               	movwf	6
 22773  0DC1  085F               	movf	flashy_Main@data+1,w
 22774  0DC2  0087               	movwf	7
 22775  0DC3  315A               	addfsr 1,26
 22776  0DC4  3000               	movlw	0
 22777  0DC5  3FC0               	movwi [0]fsr1
 22778  0DC6  3FC1               	movwi [1]fsr1
 22779                           
 22780                           ;flashy_task.c: 412: data->noholdCount = 0;
 22781  0DC7  085E               	movf	flashy_Main@data,w
 22782  0DC8  0086               	movwf	6
 22783  0DC9  085F               	movf	flashy_Main@data+1,w
 22784  0DCA  0087               	movwf	7
 22785  0DCB  315C               	addfsr 1,28
 22786  0DCC  3000               	movlw	0
 22787  0DCD  3FC0               	movwi [0]fsr1
 22788  0DCE  3FC1               	movwi [1]fsr1
 22789                           
 22790                           ;flashy_task.c: 413: break;
 22791  0DCF  2FC9               	goto	l9567
 22792  0DD0                     l9483:	
 22793                           ;flashy_task.c: 414: case 1:
 22794                           
 22795                           
 22796                           ;flashy_task.c: 415: if ( data->holdCountA == 0){
 22797  0DD0  085E               	movf	flashy_Main@data,w
 22798  0DD1  0086               	movwf	6
 22799  0DD2  085F               	movf	flashy_Main@data+1,w
 22800  0DD3  0087               	movwf	7
 22801  0DD4  314A               	addfsr 1,10
 22802  0DD5  0016               	moviw fsr1++
 22803  0DD6  0401               	iorwf	1,w
 22804  0DD7  1D03               	btfss	3,2
 22805  0DD8  2E3E               	goto	l9511
 22806                           
 22807                           ;flashy_task.c: 418: if (flashy_leds_state_track > 4){
 22808  0DD9  3000               	movlw	0
 22809  0DDA  0021               	movlb	1	; select bank1
 22810  0DDB  0231               	subwf	(_flashy_leds_state_track+1)^(0+128),w
 22811  0DDC  3005               	movlw	5
 22812  0DDD  1903               	skipnz
 22813  0DDE  0230               	subwf	_flashy_leds_state_track^(0+128),w
 22814  0DDF  1C03               	skipc
 22815  0DE0  2DE3               	goto	l9489
 22816                           
 22817                           ;flashy_task.c: 419: flashy_leds_state_track=0;
 22818  0DE1  01B0               	clrf	_flashy_leds_state_track^(0+128)
 22819  0DE2  01B1               	clrf	(_flashy_leds_state_track+1)^(0+128)
 22820  0DE3                     l9489:	
 22821                           
 22822                           ;flashy_task.c: 420: }
 22823                           ;flashy_task.c: 421: if (flashy_leds_state_track== 0){
 22824  0DE3  0830               	movf	_flashy_leds_state_track^(0+128),w
 22825  0DE4  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22826  0DE5  1D03               	btfss	3,2
 22827  0DE6  2DF4               	goto	l9493
 22828                           
 22829                           ;flashy_task.c: 422: data->led_state = FLASHY_STATE_LED_ALT;
 22830  0DE7  0020               	movlb	0	; select bank0
 22831  0DE8  085E               	movf	flashy_Main@data,w
 22832  0DE9  3E03               	addlw	3
 22833  0DEA  00D4               	movwf	??_flashy_Main
 22834  0DEB  3000               	movlw	0
 22835  0DEC  3D5F               	addwfc	flashy_Main@data+1,w
 22836  0DED  00D5               	movwf	??_flashy_Main+1
 22837  0DEE  0854               	movf	??_flashy_Main,w
 22838  0DEF  0086               	movwf	6
 22839  0DF0  0855               	movf	??_flashy_Main+1,w
 22840  0DF1  0087               	movwf	7
 22841  0DF2  3004               	movlw	4
 22842  0DF3  0081               	movwf	1
 22843  0DF4                     l9493:	
 22844                           
 22845                           ;flashy_task.c: 423: }
 22846                           ;flashy_task.c: 424: if (flashy_leds_state_track ==1){
 22847  0DF4  0021               	movlb	1	; select bank1
 22848  0DF5  0330               	decf	_flashy_leds_state_track^(0+128),w
 22849  0DF6  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22850  0DF7  1D03               	btfss	3,2
 22851  0DF8  2E06               	goto	l9497
 22852                           
 22853                           ;flashy_task.c: 425: data->led_state = FLASHY_STATE_SPARKLE;
 22854  0DF9  0020               	movlb	0	; select bank0
 22855  0DFA  085E               	movf	flashy_Main@data,w
 22856  0DFB  3E03               	addlw	3
 22857  0DFC  00D4               	movwf	??_flashy_Main
 22858  0DFD  3000               	movlw	0
 22859  0DFE  3D5F               	addwfc	flashy_Main@data+1,w
 22860  0DFF  00D5               	movwf	??_flashy_Main+1
 22861  0E00  0854               	movf	??_flashy_Main,w
 22862  0E01  0086               	movwf	6
 22863  0E02  0855               	movf	??_flashy_Main+1,w
 22864  0E03  0087               	movwf	7
 22865  0E04  3002               	movlw	2
 22866  0E05  0081               	movwf	1
 22867  0E06                     l9497:	
 22868                           
 22869                           ;flashy_task.c: 426: }
 22870                           ;flashy_task.c: 427: if (flashy_leds_state_track == 2){
 22871  0E06  3002               	movlw	2
 22872  0E07  0021               	movlb	1	; select bank1
 22873  0E08  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22874  0E09  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22875  0E0A  1D03               	btfss	3,2
 22876  0E0B  2E19               	goto	l9501
 22877                           
 22878                           ;flashy_task.c: 428: data->led_state = FLASHY_STATE_CIRCLE;
 22879  0E0C  0020               	movlb	0	; select bank0
 22880  0E0D  085E               	movf	flashy_Main@data,w
 22881  0E0E  3E03               	addlw	3
 22882  0E0F  00D4               	movwf	??_flashy_Main
 22883  0E10  3000               	movlw	0
 22884  0E11  3D5F               	addwfc	flashy_Main@data+1,w
 22885  0E12  00D5               	movwf	??_flashy_Main+1
 22886  0E13  0854               	movf	??_flashy_Main,w
 22887  0E14  0086               	movwf	6
 22888  0E15  0855               	movf	??_flashy_Main+1,w
 22889  0E16  0087               	movwf	7
 22890  0E17  3003               	movlw	3
 22891  0E18  0081               	movwf	1
 22892  0E19                     l9501:	
 22893                           
 22894                           ;flashy_task.c: 429: }
 22895                           ;flashy_task.c: 430: if (flashy_leds_state_track == 3){
 22896  0E19  3003               	movlw	3
 22897  0E1A  0021               	movlb	1	; select bank1
 22898  0E1B  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22899  0E1C  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22900  0E1D  1D03               	btfss	3,2
 22901  0E1E  2E26               	goto	l9505
 22902                           
 22903                           ;flashy_task.c: 431: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 22904  0E1F  0020               	movlb	0	; select bank0
 22905  0E20  085E               	movf	flashy_Main@data,w
 22906  0E21  0086               	movwf	6
 22907  0E22  085F               	movf	flashy_Main@data+1,w
 22908  0E23  0087               	movwf	7
 22909  0E24  3143               	addfsr 1,3
 22910  0E25  0181               	clrf	1
 22911  0E26                     l9505:	
 22912                           
 22913                           ;flashy_task.c: 432: }
 22914                           ;flashy_task.c: 433: if (flashy_leds_state_track ==4 ){
 22915  0E26  3004               	movlw	4
 22916  0E27  0021               	movlb	1	; select bank1
 22917  0E28  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22918  0E29  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22919  0E2A  1D03               	btfss	3,2
 22920  0E2B  2E39               	goto	l9509
 22921                           
 22922                           ;flashy_task.c: 434: data->led_state = FLASHY_STATE_LED_PARODY;
 22923  0E2C  0020               	movlb	0	; select bank0
 22924  0E2D  085E               	movf	flashy_Main@data,w
 22925  0E2E  3E03               	addlw	3
 22926  0E2F  00D4               	movwf	??_flashy_Main
 22927  0E30  3000               	movlw	0
 22928  0E31  3D5F               	addwfc	flashy_Main@data+1,w
 22929  0E32  00D5               	movwf	??_flashy_Main+1
 22930  0E33  0854               	movf	??_flashy_Main,w
 22931  0E34  0086               	movwf	6
 22932  0E35  0855               	movf	??_flashy_Main+1,w
 22933  0E36  0087               	movwf	7
 22934  0E37  3005               	movlw	5
 22935  0E38  0081               	movwf	1
 22936  0E39                     l9509:	
 22937                           
 22938                           ;flashy_task.c: 435: }
 22939                           ;flashy_task.c: 436: flashy_leds_state_track +=1;
 22940  0E39  3001               	movlw	1
 22941  0E3A  0021               	movlb	1	; select bank1
 22942  0E3B  07B0               	addwf	_flashy_leds_state_track^(0+128),f
 22943  0E3C  3000               	movlw	0
 22944  0E3D  3DB1               	addwfc	(_flashy_leds_state_track+1)^(0+128),f
 22945  0E3E                     l9511:	
 22946                           
 22947                           ;flashy_task.c: 437: }
 22948                           ;flashy_task.c: 439: data->holdCountA += 1;
 22949  0E3E  0020               	movlb	0	; select bank0
 22950  0E3F  085E               	movf	flashy_Main@data,w
 22951  0E40  0086               	movwf	6
 22952  0E41  085F               	movf	flashy_Main@data+1,w
 22953  0E42  0087               	movwf	7
 22954  0E43  314A               	addfsr 1,10
 22955  0E44  3001               	movlw	1
 22956  0E45  0781               	addwf	1,f
 22957  0E46  3141               	addfsr 1,1
 22958  0E47  1803               	skipnc
 22959  0E48  0A81               	incf	1,f
 22960                           
 22961                           ;flashy_task.c: 440: data->holdCountB = 0;
 22962  0E49  085E               	movf	flashy_Main@data,w
 22963  0E4A  0086               	movwf	6
 22964  0E4B  085F               	movf	flashy_Main@data+1,w
 22965  0E4C  0087               	movwf	7
 22966  0E4D  314C               	addfsr 1,12
 22967  0E4E  3000               	movlw	0
 22968  0E4F  3FC0               	movwi [0]fsr1
 22969  0E50  3FC1               	movwi [1]fsr1
 22970                           
 22971                           ;flashy_task.c: 441: data->holdCountX = 0;
 22972  0E51  085E               	movf	flashy_Main@data,w
 22973  0E52  0086               	movwf	6
 22974  0E53  085F               	movf	flashy_Main@data+1,w
 22975  0E54  0087               	movwf	7
 22976  0E55  314E               	addfsr 1,14
 22977  0E56  3000               	movlw	0
 22978  0E57  3FC0               	movwi [0]fsr1
 22979  0E58  3FC1               	movwi [1]fsr1
 22980                           
 22981                           ;flashy_task.c: 442: data->holdCountY = 0;
 22982  0E59  085E               	movf	flashy_Main@data,w
 22983  0E5A  0086               	movwf	6
 22984  0E5B  085F               	movf	flashy_Main@data+1,w
 22985  0E5C  0087               	movwf	7
 22986  0E5D  3150               	addfsr 1,16
 22987  0E5E  3000               	movlw	0
 22988  0E5F  3FC0               	movwi [0]fsr1
 22989  0E60  3FC1               	movwi [1]fsr1
 22990                           
 22991                           ;flashy_task.c: 443: data->holdCountXY = 0;
 22992  0E61  085E               	movf	flashy_Main@data,w
 22993  0E62  0086               	movwf	6
 22994  0E63  085F               	movf	flashy_Main@data+1,w
 22995  0E64  0087               	movwf	7
 22996  0E65  3152               	addfsr 1,18
 22997  0E66  3000               	movlw	0
 22998  0E67  3FC0               	movwi [0]fsr1
 22999  0E68  3FC1               	movwi [1]fsr1
 23000                           
 23001                           ;flashy_task.c: 444: data->holdCountAY = 0;
 23002  0E69  085E               	movf	flashy_Main@data,w
 23003  0E6A  0086               	movwf	6
 23004  0E6B  085F               	movf	flashy_Main@data+1,w
 23005  0E6C  0087               	movwf	7
 23006  0E6D  3154               	addfsr 1,20
 23007  0E6E  3000               	movlw	0
 23008  0E6F  3FC0               	movwi [0]fsr1
 23009  0E70  3FC1               	movwi [1]fsr1
 23010                           
 23011                           ;flashy_task.c: 445: data->holdCountAX = 0;
 23012  0E71  085E               	movf	flashy_Main@data,w
 23013  0E72  0086               	movwf	6
 23014  0E73  085F               	movf	flashy_Main@data+1,w
 23015  0E74  0087               	movwf	7
 23016  0E75  3156               	addfsr 1,22
 23017  0E76  3000               	movlw	0
 23018  0E77  3FC0               	movwi [0]fsr1
 23019  0E78  3FC1               	movwi [1]fsr1
 23020                           
 23021                           ;flashy_task.c: 446: data->holdCountBX = 0;
 23022  0E79  085E               	movf	flashy_Main@data,w
 23023  0E7A  0086               	movwf	6
 23024  0E7B  085F               	movf	flashy_Main@data+1,w
 23025  0E7C  0087               	movwf	7
 23026  0E7D  3158               	addfsr 1,24
 23027  0E7E  3000               	movlw	0
 23028  0E7F  3FC0               	movwi [0]fsr1
 23029  0E80  3FC1               	movwi [1]fsr1
 23030                           
 23031                           ;flashy_task.c: 447: data->holdCountBY = 0;
 23032  0E81  085E               	movf	flashy_Main@data,w
 23033  0E82  0086               	movwf	6
 23034  0E83  085F               	movf	flashy_Main@data+1,w
 23035  0E84  0087               	movwf	7
 23036  0E85  315A               	addfsr 1,26
 23037  0E86  3000               	movlw	0
 23038  0E87  3FC0               	movwi [0]fsr1
 23039  0E88  3FC1               	movwi [1]fsr1
 23040                           
 23041                           ;flashy_task.c: 448: data->noholdCount = 0;
 23042  0E89  085E               	movf	flashy_Main@data,w
 23043  0E8A  0086               	movwf	6
 23044  0E8B  085F               	movf	flashy_Main@data+1,w
 23045  0E8C  0087               	movwf	7
 23046  0E8D  315C               	addfsr 1,28
 23047  0E8E  3000               	movlw	0
 23048  0E8F  3FC0               	movwi [0]fsr1
 23049  0E90  3FC1               	movwi [1]fsr1
 23050                           
 23051                           ;flashy_task.c: 449: break;
 23052  0E91  2FC9               	goto	l9567
 23053  0E92                     l9531:	
 23054                           ;flashy_task.c: 450: case 0:
 23055                           
 23056                           
 23057                           ;flashy_task.c: 452: data->holdCountA = 0;
 23058  0E92  085E               	movf	flashy_Main@data,w
 23059  0E93  0086               	movwf	6
 23060  0E94  085F               	movf	flashy_Main@data+1,w
 23061  0E95  0087               	movwf	7
 23062  0E96  314A               	addfsr 1,10
 23063  0E97  3000               	movlw	0
 23064  0E98  3FC0               	movwi [0]fsr1
 23065  0E99  3FC1               	movwi [1]fsr1
 23066                           
 23067                           ;flashy_task.c: 453: data->holdCountB = 0;
 23068  0E9A  085E               	movf	flashy_Main@data,w
 23069  0E9B  0086               	movwf	6
 23070  0E9C  085F               	movf	flashy_Main@data+1,w
 23071  0E9D  0087               	movwf	7
 23072  0E9E  314C               	addfsr 1,12
 23073  0E9F  3000               	movlw	0
 23074  0EA0  3FC0               	movwi [0]fsr1
 23075  0EA1  3FC1               	movwi [1]fsr1
 23076                           
 23077                           ;flashy_task.c: 454: data->holdCountX = 0;
 23078  0EA2  085E               	movf	flashy_Main@data,w
 23079  0EA3  0086               	movwf	6
 23080  0EA4  085F               	movf	flashy_Main@data+1,w
 23081  0EA5  0087               	movwf	7
 23082  0EA6  314E               	addfsr 1,14
 23083  0EA7  3000               	movlw	0
 23084  0EA8  3FC0               	movwi [0]fsr1
 23085  0EA9  3FC1               	movwi [1]fsr1
 23086                           
 23087                           ;flashy_task.c: 455: data->holdCountY = 0;
 23088  0EAA  085E               	movf	flashy_Main@data,w
 23089  0EAB  0086               	movwf	6
 23090  0EAC  085F               	movf	flashy_Main@data+1,w
 23091  0EAD  0087               	movwf	7
 23092  0EAE  3150               	addfsr 1,16
 23093  0EAF  3000               	movlw	0
 23094  0EB0  3FC0               	movwi [0]fsr1
 23095  0EB1  3FC1               	movwi [1]fsr1
 23096                           
 23097                           ;flashy_task.c: 456: data->holdCountXY = 0;
 23098  0EB2  085E               	movf	flashy_Main@data,w
 23099  0EB3  0086               	movwf	6
 23100  0EB4  085F               	movf	flashy_Main@data+1,w
 23101  0EB5  0087               	movwf	7
 23102  0EB6  3152               	addfsr 1,18
 23103  0EB7  3000               	movlw	0
 23104  0EB8  3FC0               	movwi [0]fsr1
 23105  0EB9  3FC1               	movwi [1]fsr1
 23106                           
 23107                           ;flashy_task.c: 457: data->holdCountAY = 0;
 23108  0EBA  085E               	movf	flashy_Main@data,w
 23109  0EBB  0086               	movwf	6
 23110  0EBC  085F               	movf	flashy_Main@data+1,w
 23111  0EBD  0087               	movwf	7
 23112  0EBE  3154               	addfsr 1,20
 23113  0EBF  3000               	movlw	0
 23114  0EC0  3FC0               	movwi [0]fsr1
 23115  0EC1  3FC1               	movwi [1]fsr1
 23116                           
 23117                           ;flashy_task.c: 458: data->holdCountAX = 0;
 23118  0EC2  085E               	movf	flashy_Main@data,w
 23119  0EC3  0086               	movwf	6
 23120  0EC4  085F               	movf	flashy_Main@data+1,w
 23121  0EC5  0087               	movwf	7
 23122  0EC6  3156               	addfsr 1,22
 23123  0EC7  3000               	movlw	0
 23124  0EC8  3FC0               	movwi [0]fsr1
 23125  0EC9  3FC1               	movwi [1]fsr1
 23126                           
 23127                           ;flashy_task.c: 459: data->holdCountBX = 0;
 23128  0ECA  085E               	movf	flashy_Main@data,w
 23129  0ECB  0086               	movwf	6
 23130  0ECC  085F               	movf	flashy_Main@data+1,w
 23131  0ECD  0087               	movwf	7
 23132  0ECE  3158               	addfsr 1,24
 23133  0ECF  3000               	movlw	0
 23134  0ED0  3FC0               	movwi [0]fsr1
 23135  0ED1  3FC1               	movwi [1]fsr1
 23136                           
 23137                           ;flashy_task.c: 460: data->holdCountBY = 0;
 23138  0ED2  085E               	movf	flashy_Main@data,w
 23139  0ED3  0086               	movwf	6
 23140  0ED4  085F               	movf	flashy_Main@data+1,w
 23141  0ED5  0087               	movwf	7
 23142  0ED6  315A               	addfsr 1,26
 23143  0ED7  3000               	movlw	0
 23144  0ED8  3FC0               	movwi [0]fsr1
 23145  0ED9  3FC1               	movwi [1]fsr1
 23146                           
 23147                           ;flashy_task.c: 461: data->noholdCount += 1;
 23148  0EDA  085E               	movf	flashy_Main@data,w
 23149  0EDB  0086               	movwf	6
 23150  0EDC  085F               	movf	flashy_Main@data+1,w
 23151  0EDD  0087               	movwf	7
 23152  0EDE  315C               	addfsr 1,28
 23153  0EDF  3001               	movlw	1
 23154  0EE0  0781               	addwf	1,f
 23155  0EE1  3141               	addfsr 1,1
 23156  0EE2  1803               	skipnc
 23157  0EE3  0A81               	incf	1,f
 23158                           
 23159                           ;flashy_task.c: 462: break;
 23160  0EE4  2FC9               	goto	l9567
 23161  0EE5                     l9535:	
 23162                           ;flashy_task.c: 463: default:
 23163                           
 23164                           
 23165                           ;flashy_task.c: 464: data->holdCountA = 0;
 23166  0EE5  085E               	movf	flashy_Main@data,w
 23167  0EE6  0086               	movwf	6
 23168  0EE7  085F               	movf	flashy_Main@data+1,w
 23169  0EE8  0087               	movwf	7
 23170  0EE9  314A               	addfsr 1,10
 23171  0EEA  3000               	movlw	0
 23172  0EEB  3FC0               	movwi [0]fsr1
 23173  0EEC  3FC1               	movwi [1]fsr1
 23174                           
 23175                           ;flashy_task.c: 465: data->holdCountB = 0;
 23176  0EED  085E               	movf	flashy_Main@data,w
 23177  0EEE  0086               	movwf	6
 23178  0EEF  085F               	movf	flashy_Main@data+1,w
 23179  0EF0  0087               	movwf	7
 23180  0EF1  314C               	addfsr 1,12
 23181  0EF2  3000               	movlw	0
 23182  0EF3  3FC0               	movwi [0]fsr1
 23183  0EF4  3FC1               	movwi [1]fsr1
 23184                           
 23185                           ;flashy_task.c: 466: data->holdCountX = 0;
 23186  0EF5  085E               	movf	flashy_Main@data,w
 23187  0EF6  0086               	movwf	6
 23188  0EF7  085F               	movf	flashy_Main@data+1,w
 23189  0EF8  0087               	movwf	7
 23190  0EF9  314E               	addfsr 1,14
 23191  0EFA  3000               	movlw	0
 23192  0EFB  3FC0               	movwi [0]fsr1
 23193  0EFC  3FC1               	movwi [1]fsr1
 23194                           
 23195                           ;flashy_task.c: 467: data->holdCountY = 0;
 23196  0EFD  085E               	movf	flashy_Main@data,w
 23197  0EFE  0086               	movwf	6
 23198  0EFF  085F               	movf	flashy_Main@data+1,w
 23199  0F00  0087               	movwf	7
 23200  0F01  3150               	addfsr 1,16
 23201  0F02  3000               	movlw	0
 23202  0F03  3FC0               	movwi [0]fsr1
 23203  0F04  3FC1               	movwi [1]fsr1
 23204                           
 23205                           ;flashy_task.c: 468: data->holdCountXY = 0;
 23206  0F05  085E               	movf	flashy_Main@data,w
 23207  0F06  0086               	movwf	6
 23208  0F07  085F               	movf	flashy_Main@data+1,w
 23209  0F08  0087               	movwf	7
 23210  0F09  3152               	addfsr 1,18
 23211  0F0A  3000               	movlw	0
 23212  0F0B  3FC0               	movwi [0]fsr1
 23213  0F0C  3FC1               	movwi [1]fsr1
 23214                           
 23215                           ;flashy_task.c: 469: data->holdCountAY = 0;
 23216  0F0D  085E               	movf	flashy_Main@data,w
 23217  0F0E  0086               	movwf	6
 23218  0F0F  085F               	movf	flashy_Main@data+1,w
 23219  0F10  0087               	movwf	7
 23220  0F11  3154               	addfsr 1,20
 23221  0F12  3000               	movlw	0
 23222  0F13  3FC0               	movwi [0]fsr1
 23223  0F14  3FC1               	movwi [1]fsr1
 23224                           
 23225                           ;flashy_task.c: 470: data->holdCountAX = 0;
 23226  0F15  085E               	movf	flashy_Main@data,w
 23227  0F16  0086               	movwf	6
 23228  0F17  085F               	movf	flashy_Main@data+1,w
 23229  0F18  0087               	movwf	7
 23230  0F19  3156               	addfsr 1,22
 23231  0F1A  3000               	movlw	0
 23232  0F1B  3FC0               	movwi [0]fsr1
 23233  0F1C  3FC1               	movwi [1]fsr1
 23234                           
 23235                           ;flashy_task.c: 471: data->holdCountBX = 0;
 23236  0F1D  085E               	movf	flashy_Main@data,w
 23237  0F1E  0086               	movwf	6
 23238  0F1F  085F               	movf	flashy_Main@data+1,w
 23239  0F20  0087               	movwf	7
 23240  0F21  3158               	addfsr 1,24
 23241  0F22  3000               	movlw	0
 23242  0F23  3FC0               	movwi [0]fsr1
 23243  0F24  3FC1               	movwi [1]fsr1
 23244                           
 23245                           ;flashy_task.c: 472: data->holdCountBY = 0;
 23246  0F25  085E               	movf	flashy_Main@data,w
 23247  0F26  0086               	movwf	6
 23248  0F27  085F               	movf	flashy_Main@data+1,w
 23249  0F28  0087               	movwf	7
 23250  0F29  315A               	addfsr 1,26
 23251  0F2A  3000               	movlw	0
 23252  0F2B  3FC0               	movwi [0]fsr1
 23253  0F2C  3FC1               	movwi [1]fsr1
 23254                           
 23255                           ;flashy_task.c: 473: data->noholdCount = 0;
 23256  0F2D  085E               	movf	flashy_Main@data,w
 23257  0F2E  0086               	movwf	6
 23258  0F2F  085F               	movf	flashy_Main@data+1,w
 23259  0F30  0087               	movwf	7
 23260  0F31  315C               	addfsr 1,28
 23261  0F32  3000               	movlw	0
 23262  0F33  3FC0               	movwi [0]fsr1
 23263  0F34  3FC1               	movwi [1]fsr1
 23264                           
 23265                           ;flashy_task.c: 474: }
 23266  0F35  2FC9               	goto	l9567
 23267  0F36                     l9537:	
 23268                           
 23269                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23270                           ; Switch size 1, requested type "space"
 23271                           ; Number of cases is 1, Range of values is 0 to 0
 23272                           ; switch strategies available:
 23273                           ; Name         Instructions Cycles
 23274                           ; simple_byte            4     3 (average)
 23275                           ; direct_byte            8     6 (fixed)
 23276                           ; jumptable            260     6 (fixed)
 23277                           ;	Chosen strategy is simple_byte
 23278  0F36  085D               	movf	flashy_Main@buttonPressed+1,w
 23279  0F37  3A00               	xorlw	0	; case 0
 23280  0F38  1903               	skipnz
 23281  0F39  2F3B               	goto	l10887
 23282  0F3A  2EE5               	goto	l9535
 23283  0F3B                     l10887:	
 23284                           
 23285                           ; Switch size 1, requested type "space"
 23286                           ; Number of cases is 9, Range of values is 0 to 12
 23287                           ; switch strategies available:
 23288                           ; Name         Instructions Cycles
 23289                           ; simple_byte           28    15 (average)
 23290                           ; direct_byte           32     6 (fixed)
 23291                           ; jumptable            260     6 (fixed)
 23292                           ;	Chosen strategy is simple_byte
 23293  0F3B  085C               	movf	flashy_Main@buttonPressed,w
 23294  0F3C  3A00               	xorlw	0	; case 0
 23295  0F3D  1903               	skipnz
 23296  0F3E  2E92               	goto	l9531
 23297  0F3F  3A01               	xorlw	1	; case 1
 23298  0F40  1903               	skipnz
 23299  0F41  2DD0               	goto	l9483
 23300  0F42  3A03               	xorlw	3	; case 2
 23301  0F43  1903               	skipnz
 23302  0F44  2D4E               	goto	l9453
 23303  0F45  3A07               	xorlw	7	; case 5
 23304  0F46  1903               	skipnz
 23305  0F47  2B4C               	goto	l9329
 23306  0F48  3A03               	xorlw	3	; case 6
 23307  0F49  1903               	skipnz
 23308  0F4A  2C30               	goto	l9385
 23309  0F4B  3A0E               	xorlw	14	; case 8
 23310  0F4C  1903               	skipnz
 23311  0F4D  2CA5               	goto	l9415
 23312  0F4E  3A01               	xorlw	1	; case 9
 23313  0F4F  1903               	skipnz
 23314  0F50  2ADF               	goto	l9303
 23315  0F51  3A03               	xorlw	3	; case 10
 23316  0F52  1903               	skipnz
 23317  0F53  2BBB               	goto	l9355
 23318  0F54  3A06               	xorlw	6	; case 12
 23319  0F55  1903               	skipnz
 23320  0F56  2A7D               	goto	l9279
 23321  0F57  2EE5               	goto	l9535
 23322                           
 23323                           ;flashy_task.c: 477: switch (data->blaster_state) {
 23324  0F58  2FC9               	goto	l9567
 23325  0F59                     l9539:	
 23326                           ;flashy_task.c: 478: case FLASHY_BLASTER_SHOOTING_STATE:
 23327                           
 23328                           
 23329                           ;flashy_task.c: 480: if (data->blasterTickCount == 100) {
 23330  0F59  085E               	movf	flashy_Main@data,w
 23331  0F5A  0086               	movwf	6
 23332  0F5B  085F               	movf	flashy_Main@data+1,w
 23333  0F5C  0087               	movwf	7
 23334  0F5D  3147               	addfsr 1,7
 23335  0F5E  0016               	moviw fsr1++
 23336  0F5F  3A64               	xorlw	100
 23337  0F60  00D4               	movwf	??_flashy_Main
 23338  0F61  0016               	moviw fsr1++
 23339  0F62  04D4               	iorwf	??_flashy_Main,f
 23340  0F63  1D03               	btfss	3,2
 23341  0F64  2F70               	goto	l9545
 23342                           
 23343                           ;flashy_task.c: 481: nullifyBadge_irTxRegister(data->badge);
 23344  0F65  085E               	movf	flashy_Main@data,w
 23345  0F66  0086               	movwf	6
 23346  0F67  085F               	movf	flashy_Main@data+1,w
 23347  0F68  0087               	movwf	7
 23348  0F69  0801               	movf	1,w
 23349  0F6A  31B2  22B8  3188   	fcall	_nullifyBadge_irTxRegister
 23350                           
 23351                           ;flashy_task.c: 482: nullifyBadge_irTxSet();
 23352  0F6D  31A8  2082  3188   	fcall	_nullifyBadge_irTxSet
 23353  0F70                     l9545:	
 23354                           
 23355                           ;flashy_task.c: 483: }
 23356                           ;flashy_task.c: 484: if (data->blasterTickCount == 100 - 1 ){
 23357  0F70  0020               	movlb	0	; select bank0
 23358  0F71  085E               	movf	flashy_Main@data,w
 23359  0F72  0086               	movwf	6
 23360  0F73  085F               	movf	flashy_Main@data+1,w
 23361  0F74  0087               	movwf	7
 23362  0F75  3147               	addfsr 1,7
 23363  0F76  0016               	moviw fsr1++
 23364  0F77  3A63               	xorlw	99
 23365  0F78  00D4               	movwf	??_flashy_Main
 23366  0F79  0016               	moviw fsr1++
 23367  0F7A  04D4               	iorwf	??_flashy_Main,f
 23368  0F7B  1D03               	btfss	3,2
 23369  0F7C  2F89               	goto	l9551
 23370                           
 23371                           ;flashy_task.c: 485: nullifyBadge_irTxClr();
 23372  0F7D  31B1  21CA  3188   	fcall	_nullifyBadge_irTxClr
 23373                           
 23374                           ;flashy_task.c: 486: nullifyBadge_irTxRelease(data->badge);
 23375  0F80  0020               	movlb	0	; select bank0
 23376  0F81  085E               	movf	flashy_Main@data,w
 23377  0F82  0086               	movwf	6
 23378  0F83  085F               	movf	flashy_Main@data+1,w
 23379  0F84  0087               	movwf	7
 23380  0F85  0801               	movf	1,w
 23381  0F86  31B2  2254  3188   	fcall	_nullifyBadge_irTxRelease
 23382  0F89                     l9551:	
 23383                           
 23384                           ;flashy_task.c: 487: }
 23385                           ;flashy_task.c: 488: if (data->blasterTickCount == 0){
 23386  0F89  0020               	movlb	0	; select bank0
 23387  0F8A  085E               	movf	flashy_Main@data,w
 23388  0F8B  0086               	movwf	6
 23389  0F8C  085F               	movf	flashy_Main@data+1,w
 23390  0F8D  0087               	movwf	7
 23391  0F8E  3147               	addfsr 1,7
 23392  0F8F  0016               	moviw fsr1++
 23393  0F90  0401               	iorwf	1,w
 23394  0F91  1D03               	btfss	3,2
 23395  0F92  2FBD               	goto	l9563
 23396                           
 23397                           ;flashy_task.c: 489: data->displayTickCount = 0;
 23398  0F93  085E               	movf	flashy_Main@data,w
 23399  0F94  0086               	movwf	6
 23400  0F95  085F               	movf	flashy_Main@data+1,w
 23401  0F96  0087               	movwf	7
 23402  0F97  3144               	addfsr 1,4
 23403  0F98  3000               	movlw	0
 23404  0F99  3FC0               	movwi [0]fsr1
 23405  0F9A  3FC1               	movwi [1]fsr1
 23406                           
 23407                           ;flashy_task.c: 490: data->delayTickCount = 5;
 23408  0F9B  085E               	movf	flashy_Main@data,w
 23409  0F9C  0086               	movwf	6
 23410  0F9D  085F               	movf	flashy_Main@data+1,w
 23411  0F9E  0087               	movwf	7
 23412  0F9F  3141               	addfsr 1,1
 23413  0FA0  3005               	movlw	5
 23414  0FA1  3FC0               	movwi [0]fsr1
 23415  0FA2  3000               	movlw	0
 23416  0FA3  3FC1               	movwi [1]fsr1
 23417                           
 23418                           ;flashy_task.c: 492: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 23419  0FA4  085E               	movf	flashy_Main@data,w
 23420  0FA5  0086               	movwf	6
 23421  0FA6  085F               	movf	flashy_Main@data+1,w
 23422  0FA7  0087               	movwf	7
 23423  0FA8  3143               	addfsr 1,3
 23424  0FA9  0181               	clrf	1
 23425                           
 23426                           ;flashy_task.c: 493: data->display_state = FLASHY_STATE_DISPLAY;
 23427  0FAA  085E               	movf	flashy_Main@data,w
 23428  0FAB  0086               	movwf	6
 23429  0FAC  085F               	movf	flashy_Main@data+1,w
 23430  0FAD  0087               	movwf	7
 23431  0FAE  3146               	addfsr 1,6
 23432  0FAF  0181               	clrf	1
 23433                           
 23434                           ;flashy_task.c: 494: data->blaster_state = FLASHY_BLASTER_IDLE_STATE;
 23435  0FB0  085E               	movf	flashy_Main@data,w
 23436  0FB1  3E09               	addlw	9
 23437  0FB2  00D4               	movwf	??_flashy_Main
 23438  0FB3  3000               	movlw	0
 23439  0FB4  3D5F               	addwfc	flashy_Main@data+1,w
 23440  0FB5  00D5               	movwf	??_flashy_Main+1
 23441  0FB6  0854               	movf	??_flashy_Main,w
 23442  0FB7  0086               	movwf	6
 23443  0FB8  0855               	movf	??_flashy_Main+1,w
 23444  0FB9  0087               	movwf	7
 23445  0FBA  3001               	movlw	1
 23446  0FBB  0081               	movwf	1
 23447                           
 23448                           ;flashy_task.c: 495: }
 23449  0FBC  2FD6               	goto	l9569
 23450  0FBD                     l9563:	
 23451                           
 23452                           ;flashy_task.c: 496: else {
 23453                           ;flashy_task.c: 497: data->blasterTickCount -= 1;
 23454  0FBD  085E               	movf	flashy_Main@data,w
 23455  0FBE  0086               	movwf	6
 23456  0FBF  085F               	movf	flashy_Main@data+1,w
 23457  0FC0  0087               	movwf	7
 23458  0FC1  3147               	addfsr 1,7
 23459  0FC2  3001               	movlw	1
 23460  0FC3  0281               	subwf	1,f
 23461  0FC4  3141               	addfsr 1,1
 23462  0FC5  3000               	movlw	0
 23463  0FC6  3B81               	subwfb	1,f
 23464  0FC7  317F               	addfsr 1,-1
 23465                           
 23466                           ;flashy_task.c: 502: }
 23467                           
 23468                           ;flashy_task.c: 501: break;
 23469                           
 23470                           ;flashy_task.c: 500: case FLASHY_BLASTER_IDLE_STATE:
 23471                           
 23472                           ;flashy_task.c: 498: }
 23473                           ;flashy_task.c: 499: break;
 23474  0FC8  2FD6               	goto	l9569
 23475  0FC9                     l9567:	
 23476  0FC9  085E               	movf	flashy_Main@data,w
 23477  0FCA  0086               	movwf	6
 23478  0FCB  085F               	movf	flashy_Main@data+1,w
 23479  0FCC  0087               	movwf	7
 23480  0FCD  3149               	addfsr 1,9
 23481  0FCE  0801               	movf	1,w
 23482                           
 23483                           ; Switch size 1, requested type "space"
 23484                           ; Number of cases is 2, Range of values is 0 to 1
 23485                           ; switch strategies available:
 23486                           ; Name         Instructions Cycles
 23487                           ; simple_byte            7     4 (average)
 23488                           ; direct_byte           10     6 (fixed)
 23489                           ; jumptable            260     6 (fixed)
 23490                           ;	Chosen strategy is simple_byte
 23491  0FCF  3A00               	xorlw	0	; case 0
 23492  0FD0  1903               	skipnz
 23493  0FD1  2F59               	goto	l9539
 23494  0FD2  3A01               	xorlw	1	; case 1
 23495  0FD3  1903               	skipnz
 23496  0FD4  2FD6               	goto	l9569
 23497  0FD5  2FD6               	goto	l9569
 23498  0FD6                     l9569:	
 23499                           
 23500                           ;flashy_task.c: 505: if (nullifyBadge_irGet() && (data->blaster_state != FLASHY_BLASTER_
      +                          SHOOTING_STATE)) {
 23501  0FD6  31B1  21D1  3188   	fcall	_nullifyBadge_irGet
 23502  0FD9  3A00               	xorlw	0
 23503  0FDA  1903               	skipnz
 23504  0FDB  0008               	return
 23505  0FDC  0020               	movlb	0	; select bank0
 23506  0FDD  085E               	movf	flashy_Main@data,w
 23507  0FDE  0086               	movwf	6
 23508  0FDF  085F               	movf	flashy_Main@data+1,w
 23509  0FE0  0087               	movwf	7
 23510  0FE1  3149               	addfsr 1,9
 23511  0FE2  0801               	movf	1,w
 23512  0FE3  1903               	btfsc	3,2
 23513  0FE4  0008               	return
 23514                           
 23515                           ;flashy_task.c: 506: data->displayTickCount = 0;
 23516  0FE5  085E               	movf	flashy_Main@data,w
 23517  0FE6  0086               	movwf	6
 23518  0FE7  085F               	movf	flashy_Main@data+1,w
 23519  0FE8  0087               	movwf	7
 23520  0FE9  3144               	addfsr 1,4
 23521  0FEA  3000               	movlw	0
 23522  0FEB  3FC0               	movwi [0]fsr1
 23523  0FEC  3FC1               	movwi [1]fsr1
 23524                           
 23525                           ;flashy_task.c: 507: deaths += 1;
 23526  0FED  3001               	movlw	1
 23527  0FEE  0021               	movlb	1	; select bank1
 23528  0FEF  07AA               	addwf	_deaths^(0+128),f
 23529  0FF0  3000               	movlw	0
 23530  0FF1  3DAB               	addwfc	(_deaths+1)^(0+128),f
 23531                           
 23532                           ;flashy_task.c: 508: data->display_state = FLASHY_STATE_DISPLAY_SHOT;
 23533  0FF2  0020               	movlb	0	; select bank0
 23534  0FF3  085E               	movf	flashy_Main@data,w
 23535  0FF4  3E06               	addlw	6
 23536  0FF5  00D4               	movwf	??_flashy_Main
 23537  0FF6  3000               	movlw	0
 23538  0FF7  3D5F               	addwfc	flashy_Main@data+1,w
 23539  0FF8  00D5               	movwf	??_flashy_Main+1
 23540  0FF9  0854               	movf	??_flashy_Main,w
 23541  0FFA  0086               	movwf	6
 23542  0FFB  0855               	movf	??_flashy_Main+1,w
 23543  0FFC  0087               	movwf	7
 23544  0FFD  3003               	movlw	3
 23545  0FFE  0081               	movwf	1
 23546  0FFF  0008               	return
 23547  1000                     __end_of_flashy_Main:	
 23548                           
 23549                           	psect	swtext1
 23550  3000                     __pswtext1:	
 23551  3000                     S10885:	
 23552  3000  3188  28D5         	ljmp	l9177
 23553  3002  3188  28FA         	ljmp	l9187
 23554  3004  3189  291E         	ljmp	l9197
 23555  3006  3189  2936         	ljmp	l9205
 23556  3008  3189  296D         	ljmp	l9223
 23557  300A  3189  2992         	ljmp	l9233
 23558                           
 23559                           	psect	text19
 23560  00E5                     __ptext19:	
 23561 ;; *************** function _slot_Main *****************
 23562 ;; Defined at:
 23563 ;;		line 96 in file "slot_task.c"
 23564 ;; Parameters:    Size  Location     Type
 23565 ;;  taskData        2   50[BANK0 ] PTR void 
 23566 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 23567 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 23568 ;; Auto vars:     Size  Location     Type
 23569 ;;  data            2   69[BANK0 ] PTR struct t_slot_taskDa
 23570 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 23571 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 23572 ;;  buttonPresse    1   68[BANK0 ] unsigned char 
 23573 ;; Return value:  Size  Location     Type
 23574 ;;                  1    wreg      void 
 23575 ;; Registers used:
 23576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23577 ;; Tracked objects:
 23578 ;;		On entry : 0/0
 23579 ;;		On exit  : 0/0
 23580 ;;		Unchanged: 0/0
 23581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23582 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23583 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23584 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23585 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23586 ;;Total ram usage:       21 bytes
 23587 ;; Hardware stack levels used:    1
 23588 ;; Hardware stack levels required when called:   11
 23589 ;; This function calls:
 23590 ;;		___lwmod
 23591 ;;		_marquee
 23592 ;;		_marquee_speedy
 23593 ;;		_memset
 23594 ;;		_nullifyBadge_buttonsGet
 23595 ;;		_rand
 23596 ;;		_slot_Finished_Animation
 23597 ;;		_slot_Running_Animation
 23598 ;;		_slot_Setup
 23599 ;;		_sprintf
 23600 ;;		_strlen
 23601 ;; This function is called by:
 23602 ;;		_main
 23603 ;;		_scheduler_TaskRun
 23604 ;; This function uses a non-reentrant model
 23605 ;;
 23606                           
 23607                           
 23608                           ;psect for function _slot_Main
 23609  00E5                     _slot_Main:	
 23610                           
 23611                           ;slot_task.c: 97: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 23612                           
 23613                           ;incstack = 0
 23614                           ; Regs used in _slot_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23615  00E5  0020               	movlb	0	; select bank0
 23616  00E6  0853               	movf	slot_Main@taskData+1,w
 23617  00E7  00E6               	movwf	slot_Main@data+1
 23618  00E8  0852               	movf	slot_Main@taskData,w
 23619  00E9  00E5               	movwf	slot_Main@data
 23620                           
 23621                           ;slot_task.c: 98: u8 buttonPressed;
 23622                           ;slot_task.c: 101: if ( currentTask != SLOT_TASK ){
 23623  00EA  0021               	movlb	1	; select bank1
 23624  00EB  033A               	decf	_currentTask^(0+128),w
 23625  00EC  043B               	iorwf	(_currentTask+1)^(0+128),w
 23626  00ED  1903               	btfsc	3,2
 23627  00EE  291E               	goto	l9835
 23628                           
 23629                           ;slot_task.c: 102: buttonPressed = nullifyBadge_buttonsGet();
 23630  00EF  31B5  25FD  3180   	fcall	_nullifyBadge_buttonsGet
 23631  00F2  0020               	movlb	0	; select bank0
 23632  00F3  00D4               	movwf	??_slot_Main
 23633  00F4  0854               	movf	??_slot_Main,w
 23634  00F5  00E4               	movwf	slot_Main@buttonPressed
 23635                           
 23636                           ;slot_task.c: 106: data->holdCountA = 1;
 23637                           
 23638                           ;slot_task.c: 104: default:
 23639                           
 23640                           ;slot_task.c: 103: switch (buttonPressed) {
 23641  00F6  0865               	movf	slot_Main@data,w
 23642  00F7  0086               	movwf	6
 23643  00F8  0866               	movf	slot_Main@data+1,w
 23644  00F9  0087               	movwf	7
 23645  00FA  315F               	addfsr 1,31
 23646  00FB  3001               	movlw	1
 23647  00FC  3FC0               	movwi [0]fsr1
 23648  00FD  3000               	movlw	0
 23649  00FE  3FC1               	movwi [1]fsr1
 23650                           
 23651                           ;slot_task.c: 107: data->holdCountB = 1;
 23652  00FF  0865               	movf	slot_Main@data,w
 23653  0100  3E21               	addlw	33
 23654  0101  0086               	movwf	6
 23655  0102  3000               	movlw	0
 23656  0103  3D66               	addwfc	slot_Main@data+1,w
 23657  0104  0087               	movwf	7
 23658  0105  3001               	movlw	1
 23659  0106  3FC0               	movwi [0]fsr1
 23660  0107  3000               	movlw	0
 23661  0108  3FC1               	movwi [1]fsr1
 23662                           
 23663                           ;slot_task.c: 108: data->holdCountX = 1;
 23664  0109  0865               	movf	slot_Main@data,w
 23665  010A  3E23               	addlw	35
 23666  010B  0086               	movwf	6
 23667  010C  3000               	movlw	0
 23668  010D  3D66               	addwfc	slot_Main@data+1,w
 23669  010E  0087               	movwf	7
 23670  010F  3001               	movlw	1
 23671  0110  3FC0               	movwi [0]fsr1
 23672  0111  3000               	movlw	0
 23673  0112  3FC1               	movwi [1]fsr1
 23674                           
 23675                           ;slot_task.c: 109: data->holdCountY = 1;
 23676  0113  0865               	movf	slot_Main@data,w
 23677  0114  3E25               	addlw	37
 23678  0115  0086               	movwf	6
 23679  0116  3000               	movlw	0
 23680  0117  3D66               	addwfc	slot_Main@data+1,w
 23681  0118  0087               	movwf	7
 23682  0119  3001               	movlw	1
 23683  011A  3FC0               	movwi [0]fsr1
 23684  011B  3000               	movlw	0
 23685  011C  3FC1               	movwi [1]fsr1
 23686                           
 23687                           ;slot_task.c: 111: }
 23688                           
 23689                           ;slot_task.c: 110: break;
 23690  011D  0008               	return
 23691  011E                     l9835:	
 23692                           ;slot_task.c: 112: return;
 23693                           
 23694                           
 23695                           ;slot_task.c: 113: }
 23696                           ;slot_task.c: 115: buttonPressed = nullifyBadge_buttonsGet();
 23697  011E  31B5  25FD  3180   	fcall	_nullifyBadge_buttonsGet
 23698  0121  0020               	movlb	0	; select bank0
 23699  0122  00D4               	movwf	??_slot_Main
 23700  0123  0854               	movf	??_slot_Main,w
 23701  0124  00E4               	movwf	slot_Main@buttonPressed
 23702                           
 23703                           ;slot_task.c: 119: memset(data->slot_print_buf, 0x00, 20);
 23704                           
 23705                           ;slot_task.c: 117: default:
 23706                           
 23707                           ;slot_task.c: 116: switch (buttonPressed) {
 23708  0125  0865               	movf	slot_Main@data,w
 23709  0126  3E0B               	addlw	11
 23710  0127  00F1               	movwf	memset@p1
 23711  0128  3000               	movlw	0
 23712  0129  3D66               	addwfc	slot_Main@data+1,w
 23713  012A  00F2               	movwf	memset@p1+1
 23714  012B  3000               	movlw	0
 23715  012C  00F3               	movwf	memset@c
 23716  012D  00F4               	movwf	memset@c+1
 23717  012E  3014               	movlw	20
 23718  012F  00F5               	movwf	memset@n
 23719  0130  3000               	movlw	0
 23720  0131  00F6               	movwf	memset@n+1
 23721  0132  31B3  23C0  3180   	fcall	_memset
 23722                           
 23723                           ;slot_task.c: 122: if (data->displayTickCount < 100) {
 23724  0135  0020               	movlb	0	; select bank0
 23725  0136  0865               	movf	slot_Main@data,w
 23726  0137  0086               	movwf	6
 23727  0138  0866               	movf	slot_Main@data+1,w
 23728  0139  0087               	movwf	7
 23729  013A  3143               	addfsr 1,3
 23730  013B  3F40               	moviw [0]fsr1
 23731  013C  00D4               	movwf	??_slot_Main
 23732  013D  3F41               	moviw [1]fsr1
 23733  013E  00D5               	movwf	??_slot_Main+1
 23734  013F  3000               	movlw	0
 23735  0140  0255               	subwf	??_slot_Main+1,w
 23736  0141  3064               	movlw	100
 23737  0142  1903               	skipnz
 23738  0143  0254               	subwf	??_slot_Main,w
 23739  0144  1803               	skipnc
 23740  0145  2A51               	goto	l9855
 23741                           
 23742                           ;slot_task.c: 123: slot_Running_Animation(data);
 23743  0146  0866               	movf	slot_Main@data+1,w
 23744  0147  00B3               	movwf	slot_Running_Animation@taskData+1
 23745  0148  0865               	movf	slot_Main@data,w
 23746  0149  00B2               	movwf	slot_Running_Animation@taskData
 23747  014A  31A9  213E  3180   	fcall	_slot_Running_Animation
 23748                           
 23749                           ;slot_task.c: 124: data->slot_wheel_index[0] = (u8)rand() % strlen(Slot_Wheel);
 23750  014D  3032               	movlw	low _Slot_Wheel
 23751  014E  00F1               	movwf	strlen@s
 23752  014F  3003               	movlw	high _Slot_Wheel
 23753  0150  00F2               	movwf	strlen@s+1
 23754  0151  31B4  2464  3180   	fcall	_strlen
 23755  0154  0872               	movf	?_strlen+1,w
 23756  0155  0020               	movlb	0	; select bank0
 23757  0156  00AC               	movwf	___lwmod@divisor+1
 23758  0157  0871               	movf	?_strlen,w
 23759  0158  00AB               	movwf	___lwmod@divisor
 23760  0159  31A8  20FB  3180   	fcall	_rand
 23761  015C  0020               	movlb	0	; select bank0
 23762  015D  0824               	movf	?_rand,w
 23763  015E  00D4               	movwf	??_slot_Main
 23764  015F  01D5               	clrf	??_slot_Main+1
 23765  0160  0854               	movf	??_slot_Main,w
 23766  0161  00AD               	movwf	___lwmod@dividend
 23767  0162  0855               	movf	??_slot_Main+1,w
 23768  0163  00AE               	movwf	___lwmod@dividend+1
 23769  0164  31B5  25A1  3180   	fcall	___lwmod
 23770  0167  0020               	movlb	0	; select bank0
 23771  0168  082B               	movf	?___lwmod,w
 23772  0169  00D6               	movwf	??_slot_Main+2
 23773  016A  0865               	movf	slot_Main@data,w
 23774  016B  3E07               	addlw	7
 23775  016C  00D7               	movwf	??_slot_Main+3
 23776  016D  3000               	movlw	0
 23777  016E  3D66               	addwfc	slot_Main@data+1,w
 23778  016F  00D8               	movwf	??_slot_Main+4
 23779  0170  0857               	movf	??_slot_Main+3,w
 23780  0171  0086               	movwf	6
 23781  0172  0858               	movf	??_slot_Main+4,w
 23782  0173  0087               	movwf	7
 23783  0174  0856               	movf	??_slot_Main+2,w
 23784  0175  0081               	movwf	1
 23785                           
 23786                           ;slot_task.c: 125: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 23787  0176  3032               	movlw	low _Slot_Wheel
 23788  0177  00F1               	movwf	strlen@s
 23789  0178  3003               	movlw	high _Slot_Wheel
 23790  0179  00F2               	movwf	strlen@s+1
 23791  017A  31B4  2464  3180   	fcall	_strlen
 23792  017D  0872               	movf	?_strlen+1,w
 23793  017E  0020               	movlb	0	; select bank0
 23794  017F  00AC               	movwf	___lwmod@divisor+1
 23795  0180  0871               	movf	?_strlen,w
 23796  0181  00AB               	movwf	___lwmod@divisor
 23797  0182  31A8  20FB  3180   	fcall	_rand
 23798  0185  0020               	movlb	0	; select bank0
 23799  0186  0824               	movf	?_rand,w
 23800  0187  00D4               	movwf	??_slot_Main
 23801  0188  01D5               	clrf	??_slot_Main+1
 23802  0189  0854               	movf	??_slot_Main,w
 23803  018A  00AD               	movwf	___lwmod@dividend
 23804  018B  0855               	movf	??_slot_Main+1,w
 23805  018C  00AE               	movwf	___lwmod@dividend+1
 23806  018D  31B5  25A1  3180   	fcall	___lwmod
 23807  0190  0020               	movlb	0	; select bank0
 23808  0191  082B               	movf	?___lwmod,w
 23809  0192  00D6               	movwf	??_slot_Main+2
 23810  0193  0865               	movf	slot_Main@data,w
 23811  0194  3E08               	addlw	8
 23812  0195  00D7               	movwf	??_slot_Main+3
 23813  0196  3000               	movlw	0
 23814  0197  3D66               	addwfc	slot_Main@data+1,w
 23815  0198  00D8               	movwf	??_slot_Main+4
 23816  0199  0857               	movf	??_slot_Main+3,w
 23817  019A  0086               	movwf	6
 23818  019B  0858               	movf	??_slot_Main+4,w
 23819  019C  0087               	movwf	7
 23820  019D  0856               	movf	??_slot_Main+2,w
 23821  019E  0081               	movwf	1
 23822                           
 23823                           ;slot_task.c: 126: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 23824  019F  3032               	movlw	low _Slot_Wheel
 23825  01A0  00F1               	movwf	strlen@s
 23826  01A1  3003               	movlw	high _Slot_Wheel
 23827  01A2  00F2               	movwf	strlen@s+1
 23828  01A3  31B4  2464  3180   	fcall	_strlen
 23829  01A6  0872               	movf	?_strlen+1,w
 23830  01A7  0020               	movlb	0	; select bank0
 23831  01A8  00AC               	movwf	___lwmod@divisor+1
 23832  01A9  0871               	movf	?_strlen,w
 23833  01AA  00AB               	movwf	___lwmod@divisor
 23834  01AB  31A8  20FB  3180   	fcall	_rand
 23835  01AE  0020               	movlb	0	; select bank0
 23836  01AF  0824               	movf	?_rand,w
 23837  01B0  00D4               	movwf	??_slot_Main
 23838  01B1  01D5               	clrf	??_slot_Main+1
 23839  01B2  0854               	movf	??_slot_Main,w
 23840  01B3  00AD               	movwf	___lwmod@dividend
 23841  01B4  0855               	movf	??_slot_Main+1,w
 23842  01B5  00AE               	movwf	___lwmod@dividend+1
 23843  01B6  31B5  25A1  3180   	fcall	___lwmod
 23844  01B9  0020               	movlb	0	; select bank0
 23845  01BA  082B               	movf	?___lwmod,w
 23846  01BB  00D6               	movwf	??_slot_Main+2
 23847  01BC  0865               	movf	slot_Main@data,w
 23848  01BD  3E09               	addlw	9
 23849  01BE  00D7               	movwf	??_slot_Main+3
 23850  01BF  3000               	movlw	0
 23851  01C0  3D66               	addwfc	slot_Main@data+1,w
 23852  01C1  00D8               	movwf	??_slot_Main+4
 23853  01C2  0857               	movf	??_slot_Main+3,w
 23854  01C3  0086               	movwf	6
 23855  01C4  0858               	movf	??_slot_Main+4,w
 23856  01C5  0087               	movwf	7
 23857  01C6  0856               	movf	??_slot_Main+2,w
 23858  01C7  0081               	movwf	1
 23859                           
 23860                           ;slot_task.c: 127: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23861  01C8  3032               	movlw	low _Slot_Wheel
 23862  01C9  00F1               	movwf	strlen@s
 23863  01CA  3003               	movlw	high _Slot_Wheel
 23864  01CB  00F2               	movwf	strlen@s+1
 23865  01CC  31B4  2464  3180   	fcall	_strlen
 23866  01CF  0872               	movf	?_strlen+1,w
 23867  01D0  0020               	movlb	0	; select bank0
 23868  01D1  00AC               	movwf	___lwmod@divisor+1
 23869  01D2  0871               	movf	?_strlen,w
 23870  01D3  00AB               	movwf	___lwmod@divisor
 23871  01D4  31A8  20FB  3180   	fcall	_rand
 23872  01D7  0020               	movlb	0	; select bank0
 23873  01D8  0824               	movf	?_rand,w
 23874  01D9  00D4               	movwf	??_slot_Main
 23875  01DA  01D5               	clrf	??_slot_Main+1
 23876  01DB  0854               	movf	??_slot_Main,w
 23877  01DC  00AD               	movwf	___lwmod@dividend
 23878  01DD  0855               	movf	??_slot_Main+1,w
 23879  01DE  00AE               	movwf	___lwmod@dividend+1
 23880  01DF  31B5  25A1  3180   	fcall	___lwmod
 23881  01E2  0020               	movlb	0	; select bank0
 23882  01E3  082B               	movf	?___lwmod,w
 23883  01E4  00D6               	movwf	??_slot_Main+2
 23884  01E5  0865               	movf	slot_Main@data,w
 23885  01E6  3E0A               	addlw	10
 23886  01E7  00D7               	movwf	??_slot_Main+3
 23887  01E8  3000               	movlw	0
 23888  01E9  3D66               	addwfc	slot_Main@data+1,w
 23889  01EA  00D8               	movwf	??_slot_Main+4
 23890  01EB  0857               	movf	??_slot_Main+3,w
 23891  01EC  0086               	movwf	6
 23892  01ED  0858               	movf	??_slot_Main+4,w
 23893  01EE  0087               	movwf	7
 23894  01EF  0856               	movf	??_slot_Main+2,w
 23895  01F0  0081               	movwf	1
 23896                           
 23897                           ;slot_task.c: 128: sprintf(data->slot_print_buf, "%c%c%c%c", Slot_Wheel[data->slot_wheel
      +                          _index[0]], Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]]
      +                          , Slot_Wheel[data->slot_wheel_index[3]]);
 23898  01F1  0865               	movf	slot_Main@data,w
 23899  01F2  3E0B               	addlw	11
 23900  01F3  00AF               	movwf	sprintf@sp
 23901  01F4  3000               	movlw	0
 23902  01F5  3D66               	addwfc	slot_Main@data+1,w
 23903  01F6  00B0               	movwf	sprintf@sp+1
 23904  01F7  301C               	movlw	low (STR_67| (0+32768))
 23905  01F8  00B1               	movwf	sprintf@f
 23906  01F9  30BB               	movlw	high (STR_67| (0+32768))
 23907  01FA  00B2               	movwf	sprintf@f+1
 23908  01FB  0865               	movf	slot_Main@data,w
 23909  01FC  0086               	movwf	6
 23910  01FD  0866               	movf	slot_Main@data+1,w
 23911  01FE  0087               	movwf	7
 23912  01FF  3147               	addfsr 1,7
 23913  0200  0801               	movf	1,w
 23914  0201  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23915  0202  0086               	movwf	6
 23916  0203  3003               	movlw	3	; select bank6/7
 23917  0204  0087               	movwf	7
 23918  0205  0801               	movf	1,w
 23919  0206  00D4               	movwf	??_slot_Main
 23920  0207  01D5               	clrf	??_slot_Main+1
 23921  0208  0854               	movf	??_slot_Main,w
 23922  0209  00B3               	movwf	?_sprintf+4
 23923  020A  0855               	movf	??_slot_Main+1,w
 23924  020B  00B4               	movwf	?_sprintf+5
 23925  020C  0865               	movf	slot_Main@data,w
 23926  020D  0086               	movwf	6
 23927  020E  0866               	movf	slot_Main@data+1,w
 23928  020F  0087               	movwf	7
 23929  0210  3148               	addfsr 1,8
 23930  0211  0801               	movf	1,w
 23931  0212  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23932  0213  0086               	movwf	6
 23933  0214  3003               	movlw	3	; select bank6/7
 23934  0215  0087               	movwf	7
 23935  0216  0801               	movf	1,w
 23936  0217  00D6               	movwf	??_slot_Main+2
 23937  0218  01D7               	clrf	??_slot_Main+3
 23938  0219  0856               	movf	??_slot_Main+2,w
 23939  021A  00B5               	movwf	?_sprintf+6
 23940  021B  0857               	movf	??_slot_Main+3,w
 23941  021C  00B6               	movwf	?_sprintf+7
 23942  021D  0865               	movf	slot_Main@data,w
 23943  021E  0086               	movwf	6
 23944  021F  0866               	movf	slot_Main@data+1,w
 23945  0220  0087               	movwf	7
 23946  0221  3149               	addfsr 1,9
 23947  0222  0801               	movf	1,w
 23948  0223  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23949  0224  0086               	movwf	6
 23950  0225  3003               	movlw	3	; select bank6/7
 23951  0226  0087               	movwf	7
 23952  0227  0801               	movf	1,w
 23953  0228  00D8               	movwf	??_slot_Main+4
 23954  0229  01D9               	clrf	??_slot_Main+5
 23955  022A  0858               	movf	??_slot_Main+4,w
 23956  022B  00B7               	movwf	?_sprintf+8
 23957  022C  0859               	movf	??_slot_Main+5,w
 23958  022D  00B8               	movwf	?_sprintf+9
 23959  022E  0865               	movf	slot_Main@data,w
 23960  022F  0086               	movwf	6
 23961  0230  0866               	movf	slot_Main@data+1,w
 23962  0231  0087               	movwf	7
 23963  0232  314A               	addfsr 1,10
 23964  0233  0801               	movf	1,w
 23965  0234  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23966  0235  0086               	movwf	6
 23967  0236  3003               	movlw	3	; select bank6/7
 23968  0237  0087               	movwf	7
 23969  0238  0801               	movf	1,w
 23970  0239  00DA               	movwf	??_slot_Main+6
 23971  023A  01DB               	clrf	??_slot_Main+7
 23972  023B  085A               	movf	??_slot_Main+6,w
 23973  023C  00B9               	movwf	?_sprintf+10
 23974  023D  085B               	movf	??_slot_Main+7,w
 23975  023E  00BA               	movwf	?_sprintf+11
 23976  023F  3199  216B  3180   	fcall	_sprintf
 23977                           
 23978                           ;slot_task.c: 129: marquee(data->slot_print_buf, 1);}
 23979  0242  0020               	movlb	0	; select bank0
 23980  0243  0865               	movf	slot_Main@data,w
 23981  0244  3E0B               	addlw	11
 23982  0245  00BA               	movwf	marquee@string
 23983  0246  3000               	movlw	0
 23984  0247  3D66               	addwfc	slot_Main@data+1,w
 23985  0248  00BB               	movwf	marquee@string+1
 23986  0249  3001               	movlw	1
 23987  024A  00BC               	movwf	marquee@count
 23988  024B  3000               	movlw	0
 23989  024C  00BD               	movwf	marquee@count+1
 23990  024D  31A2  2215  3180   	fcall	_marquee
 23991  0250  2E27               	goto	l9919
 23992  0251                     l9855:	
 23993                           
 23994                           ;slot_task.c: 130: else if (data->displayTickCount < 200) {
 23995  0251  0020               	movlb	0	; select bank0
 23996  0252  0865               	movf	slot_Main@data,w
 23997  0253  0086               	movwf	6
 23998  0254  0866               	movf	slot_Main@data+1,w
 23999  0255  0087               	movwf	7
 24000  0256  3143               	addfsr 1,3
 24001  0257  3F40               	moviw [0]fsr1
 24002  0258  00D4               	movwf	??_slot_Main
 24003  0259  3F41               	moviw [1]fsr1
 24004  025A  00D5               	movwf	??_slot_Main+1
 24005  025B  3000               	movlw	0
 24006  025C  0255               	subwf	??_slot_Main+1,w
 24007  025D  30C8               	movlw	200
 24008  025E  1903               	skipnz
 24009  025F  0254               	subwf	??_slot_Main,w
 24010  0260  1803               	skipnc
 24011  0261  2B47               	goto	l9869
 24012                           
 24013                           ;slot_task.c: 131: slot_Running_Animation(data);
 24014  0262  0866               	movf	slot_Main@data+1,w
 24015  0263  00B3               	movwf	slot_Running_Animation@taskData+1
 24016  0264  0865               	movf	slot_Main@data,w
 24017  0265  00B2               	movwf	slot_Running_Animation@taskData
 24018  0266  31A9  213E  3180   	fcall	_slot_Running_Animation
 24019                           
 24020                           ;slot_task.c: 132: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 24021  0269  3032               	movlw	low _Slot_Wheel
 24022  026A  00F1               	movwf	strlen@s
 24023  026B  3003               	movlw	high _Slot_Wheel
 24024  026C  00F2               	movwf	strlen@s+1
 24025  026D  31B4  2464  3180   	fcall	_strlen
 24026  0270  0872               	movf	?_strlen+1,w
 24027  0271  0020               	movlb	0	; select bank0
 24028  0272  00AC               	movwf	___lwmod@divisor+1
 24029  0273  0871               	movf	?_strlen,w
 24030  0274  00AB               	movwf	___lwmod@divisor
 24031  0275  31A8  20FB  3180   	fcall	_rand
 24032  0278  0020               	movlb	0	; select bank0
 24033  0279  0824               	movf	?_rand,w
 24034  027A  00D4               	movwf	??_slot_Main
 24035  027B  01D5               	clrf	??_slot_Main+1
 24036  027C  0854               	movf	??_slot_Main,w
 24037  027D  00AD               	movwf	___lwmod@dividend
 24038  027E  0855               	movf	??_slot_Main+1,w
 24039  027F  00AE               	movwf	___lwmod@dividend+1
 24040  0280  31B5  25A1  3180   	fcall	___lwmod
 24041  0283  0020               	movlb	0	; select bank0
 24042  0284  082B               	movf	?___lwmod,w
 24043  0285  00D6               	movwf	??_slot_Main+2
 24044  0286  0865               	movf	slot_Main@data,w
 24045  0287  3E08               	addlw	8
 24046  0288  00D7               	movwf	??_slot_Main+3
 24047  0289  3000               	movlw	0
 24048  028A  3D66               	addwfc	slot_Main@data+1,w
 24049  028B  00D8               	movwf	??_slot_Main+4
 24050  028C  0857               	movf	??_slot_Main+3,w
 24051  028D  0086               	movwf	6
 24052  028E  0858               	movf	??_slot_Main+4,w
 24053  028F  0087               	movwf	7
 24054  0290  0856               	movf	??_slot_Main+2,w
 24055  0291  0081               	movwf	1
 24056                           
 24057                           ;slot_task.c: 133: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 24058  0292  3032               	movlw	low _Slot_Wheel
 24059  0293  00F1               	movwf	strlen@s
 24060  0294  3003               	movlw	high _Slot_Wheel
 24061  0295  00F2               	movwf	strlen@s+1
 24062  0296  31B4  2464  3180   	fcall	_strlen
 24063  0299  0872               	movf	?_strlen+1,w
 24064  029A  0020               	movlb	0	; select bank0
 24065  029B  00AC               	movwf	___lwmod@divisor+1
 24066  029C  0871               	movf	?_strlen,w
 24067  029D  00AB               	movwf	___lwmod@divisor
 24068  029E  31A8  20FB  3180   	fcall	_rand
 24069  02A1  0020               	movlb	0	; select bank0
 24070  02A2  0824               	movf	?_rand,w
 24071  02A3  00D4               	movwf	??_slot_Main
 24072  02A4  01D5               	clrf	??_slot_Main+1
 24073  02A5  0854               	movf	??_slot_Main,w
 24074  02A6  00AD               	movwf	___lwmod@dividend
 24075  02A7  0855               	movf	??_slot_Main+1,w
 24076  02A8  00AE               	movwf	___lwmod@dividend+1
 24077  02A9  31B5  25A1  3180   	fcall	___lwmod
 24078  02AC  0020               	movlb	0	; select bank0
 24079  02AD  082B               	movf	?___lwmod,w
 24080  02AE  00D6               	movwf	??_slot_Main+2
 24081  02AF  0865               	movf	slot_Main@data,w
 24082  02B0  3E09               	addlw	9
 24083  02B1  00D7               	movwf	??_slot_Main+3
 24084  02B2  3000               	movlw	0
 24085  02B3  3D66               	addwfc	slot_Main@data+1,w
 24086  02B4  00D8               	movwf	??_slot_Main+4
 24087  02B5  0857               	movf	??_slot_Main+3,w
 24088  02B6  0086               	movwf	6
 24089  02B7  0858               	movf	??_slot_Main+4,w
 24090  02B8  0087               	movwf	7
 24091  02B9  0856               	movf	??_slot_Main+2,w
 24092  02BA  0081               	movwf	1
 24093                           
 24094                           ;slot_task.c: 134: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 24095  02BB  3032               	movlw	low _Slot_Wheel
 24096  02BC  00F1               	movwf	strlen@s
 24097  02BD  3003               	movlw	high _Slot_Wheel
 24098  02BE  00F2               	movwf	strlen@s+1
 24099  02BF  31B4  2464  3180   	fcall	_strlen
 24100  02C2  0872               	movf	?_strlen+1,w
 24101  02C3  0020               	movlb	0	; select bank0
 24102  02C4  00AC               	movwf	___lwmod@divisor+1
 24103  02C5  0871               	movf	?_strlen,w
 24104  02C6  00AB               	movwf	___lwmod@divisor
 24105  02C7  31A8  20FB  3180   	fcall	_rand
 24106  02CA  0020               	movlb	0	; select bank0
 24107  02CB  0824               	movf	?_rand,w
 24108  02CC  00D4               	movwf	??_slot_Main
 24109  02CD  01D5               	clrf	??_slot_Main+1
 24110  02CE  0854               	movf	??_slot_Main,w
 24111  02CF  00AD               	movwf	___lwmod@dividend
 24112  02D0  0855               	movf	??_slot_Main+1,w
 24113  02D1  00AE               	movwf	___lwmod@dividend+1
 24114  02D2  31B5  25A1  3180   	fcall	___lwmod
 24115  02D5  0020               	movlb	0	; select bank0
 24116  02D6  082B               	movf	?___lwmod,w
 24117  02D7  00D6               	movwf	??_slot_Main+2
 24118  02D8  0865               	movf	slot_Main@data,w
 24119  02D9  3E0A               	addlw	10
 24120  02DA  00D7               	movwf	??_slot_Main+3
 24121  02DB  3000               	movlw	0
 24122  02DC  3D66               	addwfc	slot_Main@data+1,w
 24123  02DD  00D8               	movwf	??_slot_Main+4
 24124  02DE  0857               	movf	??_slot_Main+3,w
 24125  02DF  0086               	movwf	6
 24126  02E0  0858               	movf	??_slot_Main+4,w
 24127  02E1  0087               	movwf	7
 24128  02E2  0856               	movf	??_slot_Main+2,w
 24129  02E3  0081               	movwf	1
 24130                           
 24131                           ;slot_task.c: 135: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]], Slot_Whe
      +                          el[data->slot_wheel_index[3]]);
 24132  02E4  0865               	movf	slot_Main@data,w
 24133  02E5  3E0B               	addlw	11
 24134  02E6  00AF               	movwf	sprintf@sp
 24135  02E7  3000               	movlw	0
 24136  02E8  3D66               	addwfc	slot_Main@data+1,w
 24137  02E9  00B0               	movwf	sprintf@sp+1
 24138  02EA  301C               	movlw	low (STR_67| (0+32768))
 24139  02EB  00B1               	movwf	sprintf@f
 24140  02EC  30BB               	movlw	high (STR_67| (0+32768))
 24141  02ED  00B2               	movwf	sprintf@f+1
 24142  02EE  357C               	lslf	_Shot_Index,w
 24143  02EF  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24144  02F0  0086               	movwf	6
 24145  02F1  3001               	movlw	1	; select bank3/4
 24146  02F2  0087               	movwf	7
 24147  02F3  3F40               	moviw [0]fsr1
 24148  02F4  00D4               	movwf	??_slot_Main
 24149  02F5  3F41               	moviw [1]fsr1
 24150  02F6  00D5               	movwf	??_slot_Main+1
 24151  02F7  0854               	movf	??_slot_Main,w
 24152  02F8  0084               	movwf	4
 24153  02F9  0855               	movf	??_slot_Main+1,w
 24154  02FA  0085               	movwf	5
 24155  02FB  0800               	movf	0,w	;code access
 24156  02FC  00D6               	movwf	??_slot_Main+2
 24157  02FD  01D7               	clrf	??_slot_Main+3
 24158  02FE  0856               	movf	??_slot_Main+2,w
 24159  02FF  00B3               	movwf	?_sprintf+4
 24160  0300  0857               	movf	??_slot_Main+3,w
 24161  0301  00B4               	movwf	?_sprintf+5
 24162  0302  0865               	movf	slot_Main@data,w
 24163  0303  0086               	movwf	6
 24164  0304  0866               	movf	slot_Main@data+1,w
 24165  0305  0087               	movwf	7
 24166  0306  3148               	addfsr 1,8
 24167  0307  0801               	movf	1,w
 24168  0308  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24169  0309  0086               	movwf	6
 24170  030A  3003               	movlw	3	; select bank6/7
 24171  030B  0087               	movwf	7
 24172  030C  0801               	movf	1,w
 24173  030D  00D8               	movwf	??_slot_Main+4
 24174  030E  01D9               	clrf	??_slot_Main+5
 24175  030F  0858               	movf	??_slot_Main+4,w
 24176  0310  00B5               	movwf	?_sprintf+6
 24177  0311  0859               	movf	??_slot_Main+5,w
 24178  0312  00B6               	movwf	?_sprintf+7
 24179  0313  0865               	movf	slot_Main@data,w
 24180  0314  0086               	movwf	6
 24181  0315  0866               	movf	slot_Main@data+1,w
 24182  0316  0087               	movwf	7
 24183  0317  3149               	addfsr 1,9
 24184  0318  0801               	movf	1,w
 24185  0319  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24186  031A  0086               	movwf	6
 24187  031B  3003               	movlw	3	; select bank6/7
 24188  031C  0087               	movwf	7
 24189  031D  0801               	movf	1,w
 24190  031E  00DA               	movwf	??_slot_Main+6
 24191  031F  01DB               	clrf	??_slot_Main+7
 24192  0320  085A               	movf	??_slot_Main+6,w
 24193  0321  00B7               	movwf	?_sprintf+8
 24194  0322  085B               	movf	??_slot_Main+7,w
 24195  0323  00B8               	movwf	?_sprintf+9
 24196  0324  0865               	movf	slot_Main@data,w
 24197  0325  0086               	movwf	6
 24198  0326  0866               	movf	slot_Main@data+1,w
 24199  0327  0087               	movwf	7
 24200  0328  314A               	addfsr 1,10
 24201  0329  0801               	movf	1,w
 24202  032A  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24203  032B  0086               	movwf	6
 24204  032C  3003               	movlw	3	; select bank6/7
 24205  032D  0087               	movwf	7
 24206  032E  0801               	movf	1,w
 24207  032F  00DC               	movwf	??_slot_Main+8
 24208  0330  01DD               	clrf	??_slot_Main+9
 24209  0331  085C               	movf	??_slot_Main+8,w
 24210  0332  00B9               	movwf	?_sprintf+10
 24211  0333  085D               	movf	??_slot_Main+9,w
 24212  0334  00BA               	movwf	?_sprintf+11
 24213  0335  3199  216B  3180   	fcall	_sprintf
 24214                           
 24215                           ;slot_task.c: 136: marquee(data->slot_print_buf, 1);}
 24216  0338  0020               	movlb	0	; select bank0
 24217  0339  0865               	movf	slot_Main@data,w
 24218  033A  3E0B               	addlw	11
 24219  033B  00BA               	movwf	marquee@string
 24220  033C  3000               	movlw	0
 24221  033D  3D66               	addwfc	slot_Main@data+1,w
 24222  033E  00BB               	movwf	marquee@string+1
 24223  033F  3001               	movlw	1
 24224  0340  00BC               	movwf	marquee@count
 24225  0341  3000               	movlw	0
 24226  0342  00BD               	movwf	marquee@count+1
 24227  0343  31A2  2215  3180   	fcall	_marquee
 24228  0346  2E27               	goto	l9919
 24229  0347                     l9869:	
 24230                           
 24231                           ;slot_task.c: 137: else if (data->displayTickCount < 300) {
 24232  0347  0020               	movlb	0	; select bank0
 24233  0348  0865               	movf	slot_Main@data,w
 24234  0349  0086               	movwf	6
 24235  034A  0866               	movf	slot_Main@data+1,w
 24236  034B  0087               	movwf	7
 24237  034C  3143               	addfsr 1,3
 24238  034D  3F40               	moviw [0]fsr1
 24239  034E  00D4               	movwf	??_slot_Main
 24240  034F  3F41               	moviw [1]fsr1
 24241  0350  00D5               	movwf	??_slot_Main+1
 24242  0351  3001               	movlw	1
 24243  0352  0255               	subwf	??_slot_Main+1,w
 24244  0353  302C               	movlw	44
 24245  0354  1903               	skipnz
 24246  0355  0254               	subwf	??_slot_Main,w
 24247  0356  1803               	skipnc
 24248  0357  2C1A               	goto	l9881
 24249                           
 24250                           ;slot_task.c: 138: slot_Running_Animation(data);
 24251  0358  0866               	movf	slot_Main@data+1,w
 24252  0359  00B3               	movwf	slot_Running_Animation@taskData+1
 24253  035A  0865               	movf	slot_Main@data,w
 24254  035B  00B2               	movwf	slot_Running_Animation@taskData
 24255  035C  31A9  213E  3180   	fcall	_slot_Running_Animation
 24256                           
 24257                           ;slot_task.c: 139: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 24258  035F  3032               	movlw	low _Slot_Wheel
 24259  0360  00F1               	movwf	strlen@s
 24260  0361  3003               	movlw	high _Slot_Wheel
 24261  0362  00F2               	movwf	strlen@s+1
 24262  0363  31B4  2464  3180   	fcall	_strlen
 24263  0366  0872               	movf	?_strlen+1,w
 24264  0367  0020               	movlb	0	; select bank0
 24265  0368  00AC               	movwf	___lwmod@divisor+1
 24266  0369  0871               	movf	?_strlen,w
 24267  036A  00AB               	movwf	___lwmod@divisor
 24268  036B  31A8  20FB  3180   	fcall	_rand
 24269  036E  0020               	movlb	0	; select bank0
 24270  036F  0824               	movf	?_rand,w
 24271  0370  00D4               	movwf	??_slot_Main
 24272  0371  01D5               	clrf	??_slot_Main+1
 24273  0372  0854               	movf	??_slot_Main,w
 24274  0373  00AD               	movwf	___lwmod@dividend
 24275  0374  0855               	movf	??_slot_Main+1,w
 24276  0375  00AE               	movwf	___lwmod@dividend+1
 24277  0376  31B5  25A1  3180   	fcall	___lwmod
 24278  0379  0020               	movlb	0	; select bank0
 24279  037A  082B               	movf	?___lwmod,w
 24280  037B  00D6               	movwf	??_slot_Main+2
 24281  037C  0865               	movf	slot_Main@data,w
 24282  037D  3E09               	addlw	9
 24283  037E  00D7               	movwf	??_slot_Main+3
 24284  037F  3000               	movlw	0
 24285  0380  3D66               	addwfc	slot_Main@data+1,w
 24286  0381  00D8               	movwf	??_slot_Main+4
 24287  0382  0857               	movf	??_slot_Main+3,w
 24288  0383  0086               	movwf	6
 24289  0384  0858               	movf	??_slot_Main+4,w
 24290  0385  0087               	movwf	7
 24291  0386  0856               	movf	??_slot_Main+2,w
 24292  0387  0081               	movwf	1
 24293                           
 24294                           ;slot_task.c: 140: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 24295  0388  3032               	movlw	low _Slot_Wheel
 24296  0389  00F1               	movwf	strlen@s
 24297  038A  3003               	movlw	high _Slot_Wheel
 24298  038B  00F2               	movwf	strlen@s+1
 24299  038C  31B4  2464  3180   	fcall	_strlen
 24300  038F  0872               	movf	?_strlen+1,w
 24301  0390  0020               	movlb	0	; select bank0
 24302  0391  00AC               	movwf	___lwmod@divisor+1
 24303  0392  0871               	movf	?_strlen,w
 24304  0393  00AB               	movwf	___lwmod@divisor
 24305  0394  31A8  20FB  3180   	fcall	_rand
 24306  0397  0020               	movlb	0	; select bank0
 24307  0398  0824               	movf	?_rand,w
 24308  0399  00D4               	movwf	??_slot_Main
 24309  039A  01D5               	clrf	??_slot_Main+1
 24310  039B  0854               	movf	??_slot_Main,w
 24311  039C  00AD               	movwf	___lwmod@dividend
 24312  039D  0855               	movf	??_slot_Main+1,w
 24313  039E  00AE               	movwf	___lwmod@dividend+1
 24314  039F  31B5  25A1  3180   	fcall	___lwmod
 24315  03A2  0020               	movlb	0	; select bank0
 24316  03A3  082B               	movf	?___lwmod,w
 24317  03A4  00D6               	movwf	??_slot_Main+2
 24318  03A5  0865               	movf	slot_Main@data,w
 24319  03A6  3E0A               	addlw	10
 24320  03A7  00D7               	movwf	??_slot_Main+3
 24321  03A8  3000               	movlw	0
 24322  03A9  3D66               	addwfc	slot_Main@data+1,w
 24323  03AA  00D8               	movwf	??_slot_Main+4
 24324  03AB  0857               	movf	??_slot_Main+3,w
 24325  03AC  0086               	movwf	6
 24326  03AD  0858               	movf	??_slot_Main+4,w
 24327  03AE  0087               	movwf	7
 24328  03AF  0856               	movf	??_slot_Main+2,w
 24329  03B0  0081               	movwf	1
 24330                           
 24331                           ;slot_task.c: 141: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Slot_Wheel[data->slot_wheel_index[2]], Slot_Wheel[data->s
      +                          lot_wheel_index[3]]);
 24332  03B1  0865               	movf	slot_Main@data,w
 24333  03B2  3E0B               	addlw	11
 24334  03B3  00AF               	movwf	sprintf@sp
 24335  03B4  3000               	movlw	0
 24336  03B5  3D66               	addwfc	slot_Main@data+1,w
 24337  03B6  00B0               	movwf	sprintf@sp+1
 24338  03B7  301C               	movlw	low (STR_67| (0+32768))
 24339  03B8  00B1               	movwf	sprintf@f
 24340  03B9  30BB               	movlw	high (STR_67| (0+32768))
 24341  03BA  00B2               	movwf	sprintf@f+1
 24342  03BB  357C               	lslf	_Shot_Index,w
 24343  03BC  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24344  03BD  0086               	movwf	6
 24345  03BE  3001               	movlw	1	; select bank3/4
 24346  03BF  0087               	movwf	7
 24347  03C0  3F40               	moviw [0]fsr1
 24348  03C1  00D4               	movwf	??_slot_Main
 24349  03C2  3F41               	moviw [1]fsr1
 24350  03C3  00D5               	movwf	??_slot_Main+1
 24351  03C4  0854               	movf	??_slot_Main,w
 24352  03C5  0084               	movwf	4
 24353  03C6  0855               	movf	??_slot_Main+1,w
 24354  03C7  0085               	movwf	5
 24355  03C8  0800               	movf	0,w	;code access
 24356  03C9  00D6               	movwf	??_slot_Main+2
 24357  03CA  01D7               	clrf	??_slot_Main+3
 24358  03CB  0856               	movf	??_slot_Main+2,w
 24359  03CC  00B3               	movwf	?_sprintf+4
 24360  03CD  0857               	movf	??_slot_Main+3,w
 24361  03CE  00B4               	movwf	?_sprintf+5
 24362  03CF  357C               	lslf	_Shot_Index,w
 24363  03D0  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24364  03D1  0086               	movwf	6
 24365  03D2  3001               	movlw	1	; select bank3/4
 24366  03D3  0087               	movwf	7
 24367  03D4  3F40               	moviw [0]fsr1
 24368  03D5  00D8               	movwf	??_slot_Main+4
 24369  03D6  3F41               	moviw [1]fsr1
 24370  03D7  00D9               	movwf	??_slot_Main+5
 24371  03D8  3001               	movlw	1
 24372  03D9  0758               	addwf	??_slot_Main+4,w
 24373  03DA  0084               	movwf	4
 24374  03DB  0859               	movf	??_slot_Main+5,w
 24375  03DC  1803               	skipnc
 24376  03DD  0A59               	incf	??_slot_Main+5,w
 24377  03DE  0085               	movwf	5
 24378  03DF  0800               	movf	0,w	;code access
 24379  03E0  00DA               	movwf	??_slot_Main+6
 24380  03E1  01DB               	clrf	??_slot_Main+7
 24381  03E2  085A               	movf	??_slot_Main+6,w
 24382  03E3  00B5               	movwf	?_sprintf+6
 24383  03E4  085B               	movf	??_slot_Main+7,w
 24384  03E5  00B6               	movwf	?_sprintf+7
 24385  03E6  0865               	movf	slot_Main@data,w
 24386  03E7  0086               	movwf	6
 24387  03E8  0866               	movf	slot_Main@data+1,w
 24388  03E9  0087               	movwf	7
 24389  03EA  3149               	addfsr 1,9
 24390  03EB  0801               	movf	1,w
 24391  03EC  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24392  03ED  0086               	movwf	6
 24393  03EE  3003               	movlw	3	; select bank6/7
 24394  03EF  0087               	movwf	7
 24395  03F0  0801               	movf	1,w
 24396  03F1  00DC               	movwf	??_slot_Main+8
 24397  03F2  01DD               	clrf	??_slot_Main+9
 24398  03F3  085C               	movf	??_slot_Main+8,w
 24399  03F4  00B7               	movwf	?_sprintf+8
 24400  03F5  085D               	movf	??_slot_Main+9,w
 24401  03F6  00B8               	movwf	?_sprintf+9
 24402  03F7  0865               	movf	slot_Main@data,w
 24403  03F8  0086               	movwf	6
 24404  03F9  0866               	movf	slot_Main@data+1,w
 24405  03FA  0087               	movwf	7
 24406  03FB  314A               	addfsr 1,10
 24407  03FC  0801               	movf	1,w
 24408  03FD  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24409  03FE  0086               	movwf	6
 24410  03FF  3003               	movlw	3	; select bank6/7
 24411  0400  0087               	movwf	7
 24412  0401  0801               	movf	1,w
 24413  0402  00DE               	movwf	??_slot_Main+10
 24414  0403  01DF               	clrf	??_slot_Main+11
 24415  0404  085E               	movf	??_slot_Main+10,w
 24416  0405  00B9               	movwf	?_sprintf+10
 24417  0406  085F               	movf	??_slot_Main+11,w
 24418  0407  00BA               	movwf	?_sprintf+11
 24419  0408  3199  216B  3180   	fcall	_sprintf
 24420                           
 24421                           ;slot_task.c: 142: marquee(data->slot_print_buf, 1);}
 24422  040B  0020               	movlb	0	; select bank0
 24423  040C  0865               	movf	slot_Main@data,w
 24424  040D  3E0B               	addlw	11
 24425  040E  00BA               	movwf	marquee@string
 24426  040F  3000               	movlw	0
 24427  0410  3D66               	addwfc	slot_Main@data+1,w
 24428  0411  00BB               	movwf	marquee@string+1
 24429  0412  3001               	movlw	1
 24430  0413  00BC               	movwf	marquee@count
 24431  0414  3000               	movlw	0
 24432  0415  00BD               	movwf	marquee@count+1
 24433  0416  31A2  2215  3180   	fcall	_marquee
 24434  0419  2E27               	goto	l9919
 24435  041A                     l9881:	
 24436                           
 24437                           ;slot_task.c: 143: else if (data->displayTickCount < 400) {
 24438  041A  0020               	movlb	0	; select bank0
 24439  041B  0865               	movf	slot_Main@data,w
 24440  041C  0086               	movwf	6
 24441  041D  0866               	movf	slot_Main@data+1,w
 24442  041E  0087               	movwf	7
 24443  041F  3143               	addfsr 1,3
 24444  0420  3F40               	moviw [0]fsr1
 24445  0421  00D4               	movwf	??_slot_Main
 24446  0422  3F41               	moviw [1]fsr1
 24447  0423  00D5               	movwf	??_slot_Main+1
 24448  0424  3001               	movlw	1
 24449  0425  0255               	subwf	??_slot_Main+1,w
 24450  0426  3090               	movlw	144
 24451  0427  1903               	skipnz
 24452  0428  0254               	subwf	??_slot_Main,w
 24453  0429  1803               	skipnc
 24454  042A  2CCA               	goto	l9891
 24455                           
 24456                           ;slot_task.c: 144: slot_Running_Animation(data);
 24457  042B  0866               	movf	slot_Main@data+1,w
 24458  042C  00B3               	movwf	slot_Running_Animation@taskData+1
 24459  042D  0865               	movf	slot_Main@data,w
 24460  042E  00B2               	movwf	slot_Running_Animation@taskData
 24461  042F  31A9  213E  3180   	fcall	_slot_Running_Animation
 24462                           
 24463                           ;slot_task.c: 145: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 24464  0432  3032               	movlw	low _Slot_Wheel
 24465  0433  00F1               	movwf	strlen@s
 24466  0434  3003               	movlw	high _Slot_Wheel
 24467  0435  00F2               	movwf	strlen@s+1
 24468  0436  31B4  2464  3180   	fcall	_strlen
 24469  0439  0872               	movf	?_strlen+1,w
 24470  043A  0020               	movlb	0	; select bank0
 24471  043B  00AC               	movwf	___lwmod@divisor+1
 24472  043C  0871               	movf	?_strlen,w
 24473  043D  00AB               	movwf	___lwmod@divisor
 24474  043E  31A8  20FB  3180   	fcall	_rand
 24475  0441  0020               	movlb	0	; select bank0
 24476  0442  0824               	movf	?_rand,w
 24477  0443  00D4               	movwf	??_slot_Main
 24478  0444  01D5               	clrf	??_slot_Main+1
 24479  0445  0854               	movf	??_slot_Main,w
 24480  0446  00AD               	movwf	___lwmod@dividend
 24481  0447  0855               	movf	??_slot_Main+1,w
 24482  0448  00AE               	movwf	___lwmod@dividend+1
 24483  0449  31B5  25A1  3180   	fcall	___lwmod
 24484  044C  0020               	movlb	0	; select bank0
 24485  044D  082B               	movf	?___lwmod,w
 24486  044E  00D6               	movwf	??_slot_Main+2
 24487  044F  0865               	movf	slot_Main@data,w
 24488  0450  3E0A               	addlw	10
 24489  0451  00D7               	movwf	??_slot_Main+3
 24490  0452  3000               	movlw	0
 24491  0453  3D66               	addwfc	slot_Main@data+1,w
 24492  0454  00D8               	movwf	??_slot_Main+4
 24493  0455  0857               	movf	??_slot_Main+3,w
 24494  0456  0086               	movwf	6
 24495  0457  0858               	movf	??_slot_Main+4,w
 24496  0458  0087               	movwf	7
 24497  0459  0856               	movf	??_slot_Main+2,w
 24498  045A  0081               	movwf	1
 24499                           
 24500                           ;slot_task.c: 146: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Slot_Wheel[data->slot_wheel_
      +                          index[3]]);
 24501  045B  0865               	movf	slot_Main@data,w
 24502  045C  3E0B               	addlw	11
 24503  045D  00AF               	movwf	sprintf@sp
 24504  045E  3000               	movlw	0
 24505  045F  3D66               	addwfc	slot_Main@data+1,w
 24506  0460  00B0               	movwf	sprintf@sp+1
 24507  0461  301C               	movlw	low (STR_67| (0+32768))
 24508  0462  00B1               	movwf	sprintf@f
 24509  0463  30BB               	movlw	high (STR_67| (0+32768))
 24510  0464  00B2               	movwf	sprintf@f+1
 24511  0465  357C               	lslf	_Shot_Index,w
 24512  0466  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24513  0467  0086               	movwf	6
 24514  0468  3001               	movlw	1	; select bank3/4
 24515  0469  0087               	movwf	7
 24516  046A  3F40               	moviw [0]fsr1
 24517  046B  00D4               	movwf	??_slot_Main
 24518  046C  3F41               	moviw [1]fsr1
 24519  046D  00D5               	movwf	??_slot_Main+1
 24520  046E  0854               	movf	??_slot_Main,w
 24521  046F  0084               	movwf	4
 24522  0470  0855               	movf	??_slot_Main+1,w
 24523  0471  0085               	movwf	5
 24524  0472  0800               	movf	0,w	;code access
 24525  0473  00D6               	movwf	??_slot_Main+2
 24526  0474  01D7               	clrf	??_slot_Main+3
 24527  0475  0856               	movf	??_slot_Main+2,w
 24528  0476  00B3               	movwf	?_sprintf+4
 24529  0477  0857               	movf	??_slot_Main+3,w
 24530  0478  00B4               	movwf	?_sprintf+5
 24531  0479  357C               	lslf	_Shot_Index,w
 24532  047A  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24533  047B  0086               	movwf	6
 24534  047C  3001               	movlw	1	; select bank3/4
 24535  047D  0087               	movwf	7
 24536  047E  3F40               	moviw [0]fsr1
 24537  047F  00D8               	movwf	??_slot_Main+4
 24538  0480  3F41               	moviw [1]fsr1
 24539  0481  00D9               	movwf	??_slot_Main+5
 24540  0482  3001               	movlw	1
 24541  0483  0758               	addwf	??_slot_Main+4,w
 24542  0484  0084               	movwf	4
 24543  0485  0859               	movf	??_slot_Main+5,w
 24544  0486  1803               	skipnc
 24545  0487  0A59               	incf	??_slot_Main+5,w
 24546  0488  0085               	movwf	5
 24547  0489  0800               	movf	0,w	;code access
 24548  048A  00DA               	movwf	??_slot_Main+6
 24549  048B  01DB               	clrf	??_slot_Main+7
 24550  048C  085A               	movf	??_slot_Main+6,w
 24551  048D  00B5               	movwf	?_sprintf+6
 24552  048E  085B               	movf	??_slot_Main+7,w
 24553  048F  00B6               	movwf	?_sprintf+7
 24554  0490  357C               	lslf	_Shot_Index,w
 24555  0491  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24556  0492  0086               	movwf	6
 24557  0493  3001               	movlw	1	; select bank3/4
 24558  0494  0087               	movwf	7
 24559  0495  3F40               	moviw [0]fsr1
 24560  0496  00DC               	movwf	??_slot_Main+8
 24561  0497  3F41               	moviw [1]fsr1
 24562  0498  00DD               	movwf	??_slot_Main+9
 24563  0499  3002               	movlw	2
 24564  049A  075C               	addwf	??_slot_Main+8,w
 24565  049B  0084               	movwf	4
 24566  049C  085D               	movf	??_slot_Main+9,w
 24567  049D  1803               	skipnc
 24568  049E  0A5D               	incf	??_slot_Main+9,w
 24569  049F  0085               	movwf	5
 24570  04A0  0800               	movf	0,w	;code access
 24571  04A1  00DE               	movwf	??_slot_Main+10
 24572  04A2  01DF               	clrf	??_slot_Main+11
 24573  04A3  085E               	movf	??_slot_Main+10,w
 24574  04A4  00B7               	movwf	?_sprintf+8
 24575  04A5  085F               	movf	??_slot_Main+11,w
 24576  04A6  00B8               	movwf	?_sprintf+9
 24577  04A7  0865               	movf	slot_Main@data,w
 24578  04A8  0086               	movwf	6
 24579  04A9  0866               	movf	slot_Main@data+1,w
 24580  04AA  0087               	movwf	7
 24581  04AB  314A               	addfsr 1,10
 24582  04AC  0801               	movf	1,w
 24583  04AD  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24584  04AE  0086               	movwf	6
 24585  04AF  3003               	movlw	3	; select bank6/7
 24586  04B0  0087               	movwf	7
 24587  04B1  0801               	movf	1,w
 24588  04B2  00E0               	movwf	??_slot_Main+12
 24589  04B3  01E1               	clrf	??_slot_Main+13
 24590  04B4  0860               	movf	??_slot_Main+12,w
 24591  04B5  00B9               	movwf	?_sprintf+10
 24592  04B6  0861               	movf	??_slot_Main+13,w
 24593  04B7  00BA               	movwf	?_sprintf+11
 24594  04B8  3199  216B  3180   	fcall	_sprintf
 24595                           
 24596                           ;slot_task.c: 148: marquee(data->slot_print_buf, 1);}
 24597  04BB  0020               	movlb	0	; select bank0
 24598  04BC  0865               	movf	slot_Main@data,w
 24599  04BD  3E0B               	addlw	11
 24600  04BE  00BA               	movwf	marquee@string
 24601  04BF  3000               	movlw	0
 24602  04C0  3D66               	addwfc	slot_Main@data+1,w
 24603  04C1  00BB               	movwf	marquee@string+1
 24604  04C2  3001               	movlw	1
 24605  04C3  00BC               	movwf	marquee@count
 24606  04C4  3000               	movlw	0
 24607  04C5  00BD               	movwf	marquee@count+1
 24608  04C6  31A2  2215  3180   	fcall	_marquee
 24609  04C9  2E27               	goto	l9919
 24610  04CA                     l9891:	
 24611                           
 24612                           ;slot_task.c: 149: else if (data->displayTickCount < 500) {
 24613  04CA  0020               	movlb	0	; select bank0
 24614  04CB  0865               	movf	slot_Main@data,w
 24615  04CC  0086               	movwf	6
 24616  04CD  0866               	movf	slot_Main@data+1,w
 24617  04CE  0087               	movwf	7
 24618  04CF  3143               	addfsr 1,3
 24619  04D0  3F40               	moviw [0]fsr1
 24620  04D1  00D4               	movwf	??_slot_Main
 24621  04D2  3F41               	moviw [1]fsr1
 24622  04D3  00D5               	movwf	??_slot_Main+1
 24623  04D4  3001               	movlw	1
 24624  04D5  0255               	subwf	??_slot_Main+1,w
 24625  04D6  30F4               	movlw	244
 24626  04D7  1903               	skipnz
 24627  04D8  0254               	subwf	??_slot_Main,w
 24628  04D9  1803               	skipnc
 24629  04DA  2D83               	goto	l9899
 24630                           
 24631                           ;slot_task.c: 150: slot_Finished_Animation(data);
 24632  04DB  0866               	movf	slot_Main@data+1,w
 24633  04DC  00BE               	movwf	slot_Finished_Animation@taskData+1
 24634  04DD  0865               	movf	slot_Main@data,w
 24635  04DE  00BD               	movwf	slot_Finished_Animation@taskData
 24636  04DF  31B5  2550  3180   	fcall	_slot_Finished_Animation
 24637                           
 24638                           ;slot_task.c: 151: if ( data->displayTickCount % 50 <= 25 ) {
 24639  04E2  3032               	movlw	50
 24640  04E3  0020               	movlb	0	; select bank0
 24641  04E4  00AB               	movwf	___lwmod@divisor
 24642  04E5  3000               	movlw	0
 24643  04E6  00AC               	movwf	___lwmod@divisor+1
 24644  04E7  0865               	movf	slot_Main@data,w
 24645  04E8  0086               	movwf	6
 24646  04E9  0866               	movf	slot_Main@data+1,w
 24647  04EA  0087               	movwf	7
 24648  04EB  3143               	addfsr 1,3
 24649  04EC  3F40               	moviw [0]fsr1
 24650  04ED  00AD               	movwf	___lwmod@dividend
 24651  04EE  3F41               	moviw [1]fsr1
 24652  04EF  00AE               	movwf	___lwmod@dividend+1
 24653  04F0  31B5  25A1  3180   	fcall	___lwmod
 24654  04F3  3000               	movlw	0
 24655  04F4  0020               	movlb	0	; select bank0
 24656  04F5  022C               	subwf	?___lwmod+1,w
 24657  04F6  301A               	movlw	26
 24658  04F7  1903               	skipnz
 24659  04F8  022B               	subwf	?___lwmod,w
 24660  04F9  1803               	skipnc
 24661  04FA  2D0D               	goto	l9897
 24662                           
 24663                           ;slot_task.c: 152: memset(data->slot_print_buf, 0x20, 4);
 24664  04FB  0865               	movf	slot_Main@data,w
 24665  04FC  3E0B               	addlw	11
 24666  04FD  00F1               	movwf	memset@p1
 24667  04FE  3000               	movlw	0
 24668  04FF  3D66               	addwfc	slot_Main@data+1,w
 24669  0500  00F2               	movwf	memset@p1+1
 24670  0501  3020               	movlw	32
 24671  0502  00F3               	movwf	memset@c
 24672  0503  3000               	movlw	0
 24673  0504  00F4               	movwf	memset@c+1
 24674  0505  3004               	movlw	4
 24675  0506  00F5               	movwf	memset@n
 24676  0507  3000               	movlw	0
 24677  0508  00F6               	movwf	memset@n+1
 24678  0509  31B3  23C0  3180   	fcall	_memset
 24679                           
 24680                           ;slot_task.c: 153: }
 24681  050C  2D74               	goto	l1462
 24682  050D                     l9897:	
 24683                           
 24684                           ;slot_task.c: 154: else {
 24685                           ;slot_task.c: 155: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Shot_Options[Shot_Index][3])
      +                          ;
 24686  050D  0020               	movlb	0	; select bank0
 24687  050E  0865               	movf	slot_Main@data,w
 24688  050F  3E0B               	addlw	11
 24689  0510  00AF               	movwf	sprintf@sp
 24690  0511  3000               	movlw	0
 24691  0512  3D66               	addwfc	slot_Main@data+1,w
 24692  0513  00B0               	movwf	sprintf@sp+1
 24693  0514  301C               	movlw	low (STR_67| (0+32768))
 24694  0515  00B1               	movwf	sprintf@f
 24695  0516  30BB               	movlw	high (STR_67| (0+32768))
 24696  0517  00B2               	movwf	sprintf@f+1
 24697  0518  357C               	lslf	_Shot_Index,w
 24698  0519  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24699  051A  0086               	movwf	6
 24700  051B  3001               	movlw	1	; select bank3/4
 24701  051C  0087               	movwf	7
 24702  051D  3F40               	moviw [0]fsr1
 24703  051E  00D4               	movwf	??_slot_Main
 24704  051F  3F41               	moviw [1]fsr1
 24705  0520  00D5               	movwf	??_slot_Main+1
 24706  0521  0854               	movf	??_slot_Main,w
 24707  0522  0084               	movwf	4
 24708  0523  0855               	movf	??_slot_Main+1,w
 24709  0524  0085               	movwf	5
 24710  0525  0800               	movf	0,w	;code access
 24711  0526  00D6               	movwf	??_slot_Main+2
 24712  0527  01D7               	clrf	??_slot_Main+3
 24713  0528  0856               	movf	??_slot_Main+2,w
 24714  0529  00B3               	movwf	?_sprintf+4
 24715  052A  0857               	movf	??_slot_Main+3,w
 24716  052B  00B4               	movwf	?_sprintf+5
 24717  052C  357C               	lslf	_Shot_Index,w
 24718  052D  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24719  052E  0086               	movwf	6
 24720  052F  3001               	movlw	1	; select bank3/4
 24721  0530  0087               	movwf	7
 24722  0531  3F40               	moviw [0]fsr1
 24723  0532  00D8               	movwf	??_slot_Main+4
 24724  0533  3F41               	moviw [1]fsr1
 24725  0534  00D9               	movwf	??_slot_Main+5
 24726  0535  3001               	movlw	1
 24727  0536  0758               	addwf	??_slot_Main+4,w
 24728  0537  0084               	movwf	4
 24729  0538  0859               	movf	??_slot_Main+5,w
 24730  0539  1803               	skipnc
 24731  053A  0A59               	incf	??_slot_Main+5,w
 24732  053B  0085               	movwf	5
 24733  053C  0800               	movf	0,w	;code access
 24734  053D  00DA               	movwf	??_slot_Main+6
 24735  053E  01DB               	clrf	??_slot_Main+7
 24736  053F  085A               	movf	??_slot_Main+6,w
 24737  0540  00B5               	movwf	?_sprintf+6
 24738  0541  085B               	movf	??_slot_Main+7,w
 24739  0542  00B6               	movwf	?_sprintf+7
 24740  0543  357C               	lslf	_Shot_Index,w
 24741  0544  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24742  0545  0086               	movwf	6
 24743  0546  3001               	movlw	1	; select bank3/4
 24744  0547  0087               	movwf	7
 24745  0548  3F40               	moviw [0]fsr1
 24746  0549  00DC               	movwf	??_slot_Main+8
 24747  054A  3F41               	moviw [1]fsr1
 24748  054B  00DD               	movwf	??_slot_Main+9
 24749  054C  3002               	movlw	2
 24750  054D  075C               	addwf	??_slot_Main+8,w
 24751  054E  0084               	movwf	4
 24752  054F  085D               	movf	??_slot_Main+9,w
 24753  0550  1803               	skipnc
 24754  0551  0A5D               	incf	??_slot_Main+9,w
 24755  0552  0085               	movwf	5
 24756  0553  0800               	movf	0,w	;code access
 24757  0554  00DE               	movwf	??_slot_Main+10
 24758  0555  01DF               	clrf	??_slot_Main+11
 24759  0556  085E               	movf	??_slot_Main+10,w
 24760  0557  00B7               	movwf	?_sprintf+8
 24761  0558  085F               	movf	??_slot_Main+11,w
 24762  0559  00B8               	movwf	?_sprintf+9
 24763  055A  357C               	lslf	_Shot_Index,w
 24764  055B  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24765  055C  0086               	movwf	6
 24766  055D  3001               	movlw	1	; select bank3/4
 24767  055E  0087               	movwf	7
 24768  055F  3F40               	moviw [0]fsr1
 24769  0560  00E0               	movwf	??_slot_Main+12
 24770  0561  3F41               	moviw [1]fsr1
 24771  0562  00E1               	movwf	??_slot_Main+13
 24772  0563  3003               	movlw	3
 24773  0564  0760               	addwf	??_slot_Main+12,w
 24774  0565  0084               	movwf	4
 24775  0566  0861               	movf	??_slot_Main+13,w
 24776  0567  1803               	skipnc
 24777  0568  0A61               	incf	??_slot_Main+13,w
 24778  0569  0085               	movwf	5
 24779  056A  0800               	movf	0,w	;code access
 24780  056B  00E2               	movwf	??_slot_Main+14
 24781  056C  01E3               	clrf	??_slot_Main+15
 24782  056D  0862               	movf	??_slot_Main+14,w
 24783  056E  00B9               	movwf	?_sprintf+10
 24784  056F  0863               	movf	??_slot_Main+15,w
 24785  0570  00BA               	movwf	?_sprintf+11
 24786  0571  3199  216B  3180   	fcall	_sprintf
 24787  0574                     l1462:	
 24788                           
 24789                           ;slot_task.c: 156: }
 24790                           ;slot_task.c: 157: marquee(data->slot_print_buf, 1);
 24791  0574  0020               	movlb	0	; select bank0
 24792  0575  0865               	movf	slot_Main@data,w
 24793  0576  3E0B               	addlw	11
 24794  0577  00BA               	movwf	marquee@string
 24795  0578  3000               	movlw	0
 24796  0579  3D66               	addwfc	slot_Main@data+1,w
 24797  057A  00BB               	movwf	marquee@string+1
 24798  057B  3001               	movlw	1
 24799  057C  00BC               	movwf	marquee@count
 24800  057D  3000               	movlw	0
 24801  057E  00BD               	movwf	marquee@count+1
 24802  057F  31A2  2215  3180   	fcall	_marquee
 24803                           
 24804                           ;slot_task.c: 158: }
 24805  0582  2E27               	goto	l9919
 24806  0583                     l9899:	
 24807                           
 24808                           ;slot_task.c: 159: else {
 24809                           ;slot_task.c: 160: slot_Finished_Animation(data);
 24810  0583  0020               	movlb	0	; select bank0
 24811  0584  0866               	movf	slot_Main@data+1,w
 24812  0585  00BE               	movwf	slot_Finished_Animation@taskData+1
 24813  0586  0865               	movf	slot_Main@data,w
 24814  0587  00BD               	movwf	slot_Finished_Animation@taskData
 24815  0588  31B5  2550  3180   	fcall	_slot_Finished_Animation
 24816                           
 24817                           ;slot_task.c: 161: if ( data->displayTickCount % 50 <= 25 ) {
 24818  058B  3032               	movlw	50
 24819  058C  0020               	movlb	0	; select bank0
 24820  058D  00AB               	movwf	___lwmod@divisor
 24821  058E  3000               	movlw	0
 24822  058F  00AC               	movwf	___lwmod@divisor+1
 24823  0590  0865               	movf	slot_Main@data,w
 24824  0591  0086               	movwf	6
 24825  0592  0866               	movf	slot_Main@data+1,w
 24826  0593  0087               	movwf	7
 24827  0594  3143               	addfsr 1,3
 24828  0595  3F40               	moviw [0]fsr1
 24829  0596  00AD               	movwf	___lwmod@dividend
 24830  0597  3F41               	moviw [1]fsr1
 24831  0598  00AE               	movwf	___lwmod@dividend+1
 24832  0599  31B5  25A1  3180   	fcall	___lwmod
 24833  059C  3000               	movlw	0
 24834  059D  0020               	movlb	0	; select bank0
 24835  059E  022C               	subwf	?___lwmod+1,w
 24836  059F  301A               	movlw	26
 24837  05A0  1903               	skipnz
 24838  05A1  022B               	subwf	?___lwmod,w
 24839  05A2  1803               	skipnc
 24840  05A3  2DB6               	goto	l9903
 24841                           
 24842                           ;slot_task.c: 162: memset(data->slot_print_buf, 0x20, 4);
 24843  05A4  0865               	movf	slot_Main@data,w
 24844  05A5  3E0B               	addlw	11
 24845  05A6  00F1               	movwf	memset@p1
 24846  05A7  3000               	movlw	0
 24847  05A8  3D66               	addwfc	slot_Main@data+1,w
 24848  05A9  00F2               	movwf	memset@p1+1
 24849  05AA  3020               	movlw	32
 24850  05AB  00F3               	movwf	memset@c
 24851  05AC  3000               	movlw	0
 24852  05AD  00F4               	movwf	memset@c+1
 24853  05AE  3004               	movlw	4
 24854  05AF  00F5               	movwf	memset@n
 24855  05B0  3000               	movlw	0
 24856  05B1  00F6               	movwf	memset@n+1
 24857  05B2  31B3  23C0  3180   	fcall	_memset
 24858                           
 24859                           ;slot_task.c: 163: }
 24860  05B5  2DCD               	goto	l1465
 24861  05B6                     l9903:	
 24862                           
 24863                           ;slot_task.c: 164: else {
 24864                           ;slot_task.c: 165: sprintf(data->slot_print_buf, "%s", Shot_Options_Long[Shot_Index]);
 24865  05B6  0020               	movlb	0	; select bank0
 24866  05B7  0865               	movf	slot_Main@data,w
 24867  05B8  3E0B               	addlw	11
 24868  05B9  00AF               	movwf	sprintf@sp
 24869  05BA  3000               	movlw	0
 24870  05BB  3D66               	addwfc	slot_Main@data+1,w
 24871  05BC  00B0               	movwf	sprintf@sp+1
 24872  05BD  3011               	movlw	low (STR_72| (0+32768))
 24873  05BE  00B1               	movwf	sprintf@f
 24874  05BF  30BC               	movlw	high (STR_72| (0+32768))
 24875  05C0  00B2               	movwf	sprintf@f+1
 24876  05C1  357C               	lslf	_Shot_Index,w
 24877  05C2  3E20               	addlw	(low (_Shot_Options_Long| (0+768)))& (0+255)
 24878  05C3  0086               	movwf	6
 24879  05C4  3003               	movlw	3	; select bank6/7
 24880  05C5  0087               	movwf	7
 24881  05C6  3F40               	moviw [0]fsr1
 24882  05C7  00B3               	movwf	low ((?_sprintf| 0+4))
 24883  05C8  3F41               	moviw [1]fsr1
 24884  05C9  00B4               	movwf	(low ((?_sprintf| 0+4))+1)
 24885  05CA  3199  216B  3180   	fcall	_sprintf
 24886  05CD                     l1465:	
 24887                           
 24888                           ;slot_task.c: 166: }
 24889                           ;slot_task.c: 168: marquee_speedy(data->slot_print_buf, data->displayTickCount, 20);
 24890  05CD  0020               	movlb	0	; select bank0
 24891  05CE  0865               	movf	slot_Main@data,w
 24892  05CF  3E0B               	addlw	11
 24893  05D0  00BA               	movwf	marquee_speedy@string
 24894  05D1  3000               	movlw	0
 24895  05D2  3D66               	addwfc	slot_Main@data+1,w
 24896  05D3  00BB               	movwf	marquee_speedy@string+1
 24897  05D4  0865               	movf	slot_Main@data,w
 24898  05D5  0086               	movwf	6
 24899  05D6  0866               	movf	slot_Main@data+1,w
 24900  05D7  0087               	movwf	7
 24901  05D8  3143               	addfsr 1,3
 24902  05D9  3F40               	moviw [0]fsr1
 24903  05DA  00BC               	movwf	marquee_speedy@count
 24904  05DB  3F41               	moviw [1]fsr1
 24905  05DC  00BD               	movwf	marquee_speedy@count+1
 24906  05DD  3014               	movlw	20
 24907  05DE  00BE               	movwf	marquee_speedy@multiplier
 24908  05DF  3000               	movlw	0
 24909  05E0  00BF               	movwf	marquee_speedy@multiplier+1
 24910  05E1  31AF  278D  3180   	fcall	_marquee_speedy
 24911                           
 24912                           ;slot_task.c: 169: if (data->displayTickCount == 500 + (50 * 10)) {
 24913  05E4  0020               	movlb	0	; select bank0
 24914  05E5  0865               	movf	slot_Main@data,w
 24915  05E6  0086               	movwf	6
 24916  05E7  0866               	movf	slot_Main@data+1,w
 24917  05E8  0087               	movwf	7
 24918  05E9  3143               	addfsr 1,3
 24919  05EA  0016               	moviw fsr1++
 24920  05EB  3AE8               	xorlw	232
 24921  05EC  00D4               	movwf	??_slot_Main
 24922  05ED  0016               	moviw fsr1++
 24923  05EE  3A03               	xorlw	3
 24924  05EF  04D4               	iorwf	??_slot_Main,f
 24925  05F0  1D03               	btfss	3,2
 24926  05F1  2E27               	goto	l9919
 24927                           
 24928                           ;slot_task.c: 170: currentTask = MENU_TASK;
 24929  05F2  0021               	movlb	1	; select bank1
 24930  05F3  01BA               	clrf	_currentTask^(0+128)
 24931  05F4  01BB               	clrf	(_currentTask+1)^(0+128)
 24932                           
 24933                           ;slot_task.c: 173: slot_Setup(slot_taskData);
 24934  05F5  083D               	movf	(_slot_taskData+1)^(0+128),w
 24935  05F6  0020               	movlb	0	; select bank0
 24936  05F7  00B0               	movwf	slot_Setup@taskData+1
 24937  05F8  0021               	movlb	1	; select bank1
 24938  05F9  083C               	movf	_slot_taskData^(0+128),w
 24939  05FA  0020               	movlb	0	; select bank0
 24940  05FB  00AF               	movwf	slot_Setup@taskData
 24941  05FC  31AB  23DA         	fcall	_slot_Setup
 24942                           
 24943                           ;slot_task.c: 176: data->holdCountA = 1;
 24944  05FE  0020               	movlb	0	; select bank0
 24945  05FF  0865               	movf	slot_Main@data,w
 24946  0600  0086               	movwf	6
 24947  0601  0866               	movf	slot_Main@data+1,w
 24948  0602  0087               	movwf	7
 24949  0603  315F               	addfsr 1,31
 24950  0604  3001               	movlw	1
 24951  0605  3FC0               	movwi [0]fsr1
 24952  0606  3000               	movlw	0
 24953  0607  3FC1               	movwi [1]fsr1
 24954                           
 24955                           ;slot_task.c: 177: data->holdCountB = 1;
 24956  0608  0865               	movf	slot_Main@data,w
 24957  0609  3E21               	addlw	33
 24958  060A  0086               	movwf	6
 24959  060B  3000               	movlw	0
 24960  060C  3D66               	addwfc	slot_Main@data+1,w
 24961  060D  0087               	movwf	7
 24962  060E  3001               	movlw	1
 24963  060F  3FC0               	movwi [0]fsr1
 24964  0610  3000               	movlw	0
 24965  0611  3FC1               	movwi [1]fsr1
 24966                           
 24967                           ;slot_task.c: 178: data->holdCountX = 1;
 24968  0612  0865               	movf	slot_Main@data,w
 24969  0613  3E23               	addlw	35
 24970  0614  0086               	movwf	6
 24971  0615  3000               	movlw	0
 24972  0616  3D66               	addwfc	slot_Main@data+1,w
 24973  0617  0087               	movwf	7
 24974  0618  3001               	movlw	1
 24975  0619  3FC0               	movwi [0]fsr1
 24976  061A  3000               	movlw	0
 24977  061B  3FC1               	movwi [1]fsr1
 24978                           
 24979                           ;slot_task.c: 179: data->holdCountY = 1;
 24980  061C  0865               	movf	slot_Main@data,w
 24981  061D  3E25               	addlw	37
 24982  061E  0086               	movwf	6
 24983  061F  3000               	movlw	0
 24984  0620  3D66               	addwfc	slot_Main@data+1,w
 24985  0621  0087               	movwf	7
 24986  0622  3001               	movlw	1
 24987  0623  3FC0               	movwi [0]fsr1
 24988  0624  3000               	movlw	0
 24989  0625  3FC1               	movwi [1]fsr1
 24990                           
 24991                           ;slot_task.c: 180: break;
 24992  0626  0008               	return
 24993  0627                     l9919:	
 24994                           
 24995                           ;slot_task.c: 181: }
 24996                           ;slot_task.c: 182: }
 24997                           ;slot_task.c: 184: data->displayTickCount += 1;
 24998  0627  0020               	movlb	0	; select bank0
 24999  0628  0865               	movf	slot_Main@data,w
 25000  0629  0086               	movwf	6
 25001  062A  0866               	movf	slot_Main@data+1,w
 25002  062B  0087               	movwf	7
 25003  062C  3143               	addfsr 1,3
 25004  062D  3001               	movlw	1
 25005  062E  0781               	addwf	1,f
 25006  062F  3141               	addfsr 1,1
 25007  0630  1803               	skipnc
 25008  0631  0A81               	incf	1,f
 25009                           
 25010                           ;slot_task.c: 185: data->holdCountA = 0;
 25011  0632  0865               	movf	slot_Main@data,w
 25012  0633  0086               	movwf	6
 25013  0634  0866               	movf	slot_Main@data+1,w
 25014  0635  0087               	movwf	7
 25015  0636  315F               	addfsr 1,31
 25016  0637  3000               	movlw	0
 25017  0638  3FC0               	movwi [0]fsr1
 25018  0639  3FC1               	movwi [1]fsr1
 25019                           
 25020                           ;slot_task.c: 186: data->holdCountB = 0;
 25021  063A  0865               	movf	slot_Main@data,w
 25022  063B  3E21               	addlw	33
 25023  063C  0086               	movwf	6
 25024  063D  3000               	movlw	0
 25025  063E  3D66               	addwfc	slot_Main@data+1,w
 25026  063F  0087               	movwf	7
 25027  0640  3000               	movlw	0
 25028  0641  3FC0               	movwi [0]fsr1
 25029  0642  3FC1               	movwi [1]fsr1
 25030                           
 25031                           ;slot_task.c: 187: data->holdCountX = 0;
 25032  0643  0865               	movf	slot_Main@data,w
 25033  0644  3E23               	addlw	35
 25034  0645  0086               	movwf	6
 25035  0646  3000               	movlw	0
 25036  0647  3D66               	addwfc	slot_Main@data+1,w
 25037  0648  0087               	movwf	7
 25038  0649  3000               	movlw	0
 25039  064A  3FC0               	movwi [0]fsr1
 25040  064B  3FC1               	movwi [1]fsr1
 25041                           
 25042                           ;slot_task.c: 188: data->holdCountY = 0;
 25043  064C  0865               	movf	slot_Main@data,w
 25044  064D  3E25               	addlw	37
 25045  064E  0086               	movwf	6
 25046  064F  3000               	movlw	0
 25047  0650  3D66               	addwfc	slot_Main@data+1,w
 25048  0651  0087               	movwf	7
 25049  0652  3000               	movlw	0
 25050  0653  3FC0               	movwi [0]fsr1
 25051  0654  3FC1               	movwi [1]fsr1
 25052                           
 25053                           ;slot_task.c: 189: data->noholdCount += 1;
 25054  0655  0865               	movf	slot_Main@data,w
 25055  0656  3E27               	addlw	39
 25056  0657  0086               	movwf	6
 25057  0658  3000               	movlw	0
 25058  0659  3D66               	addwfc	slot_Main@data+1,w
 25059  065A  0087               	movwf	7
 25060  065B  3001               	movlw	1
 25061  065C  0781               	addwf	1,f
 25062  065D  3141               	addfsr 1,1
 25063  065E  1803               	skipnc
 25064  065F  0A81               	incf	1,f
 25065                           
 25066                           ;slot_task.c: 190: }
 25067  0660  0008               	return
 25068  0661                     __end_of_slot_Main:	
 25069                           
 25070                           	psect	text20
 25071  293E                     __ptext20:	
 25072 ;; *************** function _slot_Running_Animation *****************
 25073 ;; Defined at:
 25074 ;;		line 64 in file "slot_task.c"
 25075 ;; Parameters:    Size  Location     Type
 25076 ;;  taskData        2   18[BANK0 ] PTR void 
 25077 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25078 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25079 ;; Auto vars:     Size  Location     Type
 25080 ;;  data            2   22[BANK0 ] PTR struct t_slot_taskDa
 25081 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25082 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25083 ;; Return value:  Size  Location     Type
 25084 ;;                  1    wreg      void 
 25085 ;; Registers used:
 25086 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25087 ;; Tracked objects:
 25088 ;;		On entry : 0/0
 25089 ;;		On exit  : 0/0
 25090 ;;		Unchanged: 0/0
 25091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25092 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25093 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25094 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25095 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25096 ;;Total ram usage:        6 bytes
 25097 ;; Hardware stack levels used:    1
 25098 ;; Hardware stack levels required when called:   10
 25099 ;; This function calls:
 25100 ;;		_led_circle
 25101 ;; This function is called by:
 25102 ;;		_slot_Main
 25103 ;; This function uses a non-reentrant model
 25104 ;;
 25105                           
 25106                           
 25107                           ;psect for function _slot_Running_Animation
 25108  293E                     _slot_Running_Animation:	
 25109                           
 25110                           ;slot_task.c: 65: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 25111                           
 25112                           ;incstack = 0
 25113                           ; Regs used in _slot_Running_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 25114  293E  0020               	movlb	0	; select bank0
 25115  293F  0833               	movf	slot_Running_Animation@taskData+1,w
 25116  2940  00B7               	movwf	slot_Running_Animation@data+1
 25117  2941  0832               	movf	slot_Running_Animation@taskData,w
 25118  2942  00B6               	movwf	slot_Running_Animation@data
 25119                           
 25120                           ;slot_task.c: 66: if (data->delayTickCount ==0 ){
 25121  2943  0836               	movf	slot_Running_Animation@data,w
 25122  2944  0086               	movwf	6
 25123  2945  0837               	movf	slot_Running_Animation@data+1,w
 25124  2946  0087               	movwf	7
 25125  2947  3145               	addfsr 1,5
 25126  2948  0016               	moviw fsr1++
 25127  2949  0401               	iorwf	1,w
 25128  294A  1D03               	btfss	3,2
 25129  294B  2978               	goto	l8943
 25130                           
 25131                           ;slot_task.c: 67: if (Leds_idx == 1024 ){
 25132  294C  3004               	movlw	4
 25133  294D  0021               	movlb	1	; select bank1
 25134  294E  0651               	xorwf	(_Leds_idx+1)^(0+128),w
 25135  294F  0450               	iorwf	_Leds_idx^(0+128),w
 25136  2950  1D03               	btfss	3,2
 25137  2951  2956               	goto	l8935
 25138                           
 25139                           ;slot_task.c: 68: Leds_idx = Leds_idx << 1;
 25140  2952  3550               	lslf	_Leds_idx^(0+128),w
 25141  2953  00D0               	movwf	_Leds_idx^(0+128)
 25142  2954  0D51               	rlf	(_Leds_idx+1)^(0+128),w
 25143  2955  00D1               	movwf	(_Leds_idx+1)^(0+128)
 25144  2956                     l8935:	
 25145                           
 25146                           ;slot_task.c: 69: }
 25147                           ;slot_task.c: 70: led_circle(Leds_idx);
 25148  2956  0851               	movf	(_Leds_idx+1)^(0+128),w
 25149  2957  0020               	movlb	0	; select bank0
 25150  2958  00B1               	movwf	led_circle@count+1
 25151  2959  0021               	movlb	1	; select bank1
 25152  295A  0850               	movf	_Leds_idx^(0+128),w
 25153  295B  0020               	movlb	0	; select bank0
 25154  295C  00B0               	movwf	led_circle@count
 25155  295D  31B2  2201  31A9   	fcall	_led_circle
 25156                           
 25157                           ;slot_task.c: 71: if (Leds_idx < 1 ){
 25158  2960  0021               	movlb	1	; select bank1
 25159  2961  0850               	movf	_Leds_idx^(0+128),w
 25160  2962  0451               	iorwf	(_Leds_idx+1)^(0+128),w
 25161  2963  1D03               	btfss	3,2
 25162  2964  2969               	goto	l1435
 25163                           
 25164                           ;slot_task.c: 72: Leds_idx = 1;
 25165  2965  3001               	movlw	1
 25166  2966  00D0               	movwf	_Leds_idx^(0+128)
 25167  2967  3000               	movlw	0
 25168  2968  00D1               	movwf	(_Leds_idx^(0+128)+1)
 25169  2969                     l1435:	
 25170                           
 25171                           ;slot_task.c: 73: }
 25172                           ;slot_task.c: 74: Leds_idx = Leds_idx << 1;
 25173  2969  3550               	lslf	_Leds_idx^(0+128),w
 25174  296A  00D0               	movwf	_Leds_idx^(0+128)
 25175  296B  0D51               	rlf	(_Leds_idx+1)^(0+128),w
 25176  296C  00D1               	movwf	(_Leds_idx+1)^(0+128)
 25177                           
 25178                           ;slot_task.c: 76: data->delayTickCount = 10;
 25179  296D  0020               	movlb	0	; select bank0
 25180  296E  0836               	movf	slot_Running_Animation@data,w
 25181  296F  0086               	movwf	6
 25182  2970  0837               	movf	slot_Running_Animation@data+1,w
 25183  2971  0087               	movwf	7
 25184  2972  3145               	addfsr 1,5
 25185  2973  300A               	movlw	10
 25186  2974  3FC0               	movwi [0]fsr1
 25187  2975  3000               	movlw	0
 25188  2976  3FC1               	movwi [1]fsr1
 25189                           
 25190                           ;slot_task.c: 77: }
 25191  2977  0008               	return
 25192  2978                     l8943:	
 25193                           
 25194                           ;slot_task.c: 78: else {
 25195                           ;slot_task.c: 79: data->delayTickCount -= 1;
 25196  2978  0836               	movf	slot_Running_Animation@data,w
 25197  2979  0086               	movwf	6
 25198  297A  0837               	movf	slot_Running_Animation@data+1,w
 25199  297B  0087               	movwf	7
 25200  297C  3145               	addfsr 1,5
 25201  297D  3001               	movlw	1
 25202  297E  0281               	subwf	1,f
 25203  297F  3141               	addfsr 1,1
 25204  2980  3000               	movlw	0
 25205  2981  3B81               	subwfb	1,f
 25206  2982  317F               	addfsr 1,-1
 25207  2983  0008               	return
 25208  2984                     __end_of_slot_Running_Animation:	
 25209                           
 25210                           	psect	text21
 25211  3550                     __ptext21:	
 25212 ;; *************** function _slot_Finished_Animation *****************
 25213 ;; Defined at:
 25214 ;;		line 84 in file "slot_task.c"
 25215 ;; Parameters:    Size  Location     Type
 25216 ;;  taskData        2   29[BANK0 ] PTR void 
 25217 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25218 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25219 ;; Auto vars:     Size  Location     Type
 25220 ;;  data            2   33[BANK0 ] PTR struct t_slot_taskDa
 25221 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25222 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25223 ;; Return value:  Size  Location     Type
 25224 ;;                  1    wreg      void 
 25225 ;; Registers used:
 25226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25227 ;; Tracked objects:
 25228 ;;		On entry : 0/0
 25229 ;;		On exit  : 0/0
 25230 ;;		Unchanged: 0/0
 25231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25232 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25233 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25235 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25236 ;;Total ram usage:        6 bytes
 25237 ;; Hardware stack levels used:    1
 25238 ;; Hardware stack levels required when called:   10
 25239 ;; This function calls:
 25240 ;;		_led_rand
 25241 ;; This function is called by:
 25242 ;;		_slot_Main
 25243 ;; This function uses a non-reentrant model
 25244 ;;
 25245                           
 25246                           
 25247                           ;psect for function _slot_Finished_Animation
 25248  3550                     _slot_Finished_Animation:	
 25249                           
 25250                           ;slot_task.c: 85: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 25251                           
 25252                           ;incstack = 0
 25253                           ; Regs used in _slot_Finished_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 25254  3550  0020               	movlb	0	; select bank0
 25255  3551  083E               	movf	slot_Finished_Animation@taskData+1,w
 25256  3552  00C2               	movwf	slot_Finished_Animation@data+1
 25257  3553  083D               	movf	slot_Finished_Animation@taskData,w
 25258  3554  00C1               	movwf	slot_Finished_Animation@data
 25259                           
 25260                           ;slot_task.c: 86: if (data->delayTickCount < 1){
 25261  3555  0841               	movf	slot_Finished_Animation@data,w
 25262  3556  0086               	movwf	6
 25263  3557  0842               	movf	slot_Finished_Animation@data+1,w
 25264  3558  0087               	movwf	7
 25265  3559  3145               	addfsr 1,5
 25266  355A  0016               	moviw fsr1++
 25267  355B  0401               	iorwf	1,w
 25268  355C  1D03               	btfss	3,2
 25269  355D  2D6B               	goto	l8953
 25270                           
 25271                           ;slot_task.c: 87: led_rand();
 25272  355E  31A9  21CB         	fcall	_led_rand
 25273                           
 25274                           ;slot_task.c: 88: data->delayTickCount = 10;
 25275  3560  0020               	movlb	0	; select bank0
 25276  3561  0841               	movf	slot_Finished_Animation@data,w
 25277  3562  0086               	movwf	6
 25278  3563  0842               	movf	slot_Finished_Animation@data+1,w
 25279  3564  0087               	movwf	7
 25280  3565  3145               	addfsr 1,5
 25281  3566  300A               	movlw	10
 25282  3567  3FC0               	movwi [0]fsr1
 25283  3568  3000               	movlw	0
 25284  3569  3FC1               	movwi [1]fsr1
 25285                           
 25286                           ;slot_task.c: 89: }
 25287  356A  0008               	return
 25288  356B                     l8953:	
 25289                           
 25290                           ;slot_task.c: 90: else {
 25291                           ;slot_task.c: 91: data->delayTickCount -= 1;
 25292  356B  0841               	movf	slot_Finished_Animation@data,w
 25293  356C  0086               	movwf	6
 25294  356D  0842               	movf	slot_Finished_Animation@data+1,w
 25295  356E  0087               	movwf	7
 25296  356F  3145               	addfsr 1,5
 25297  3570  3001               	movlw	1
 25298  3571  0281               	subwf	1,f
 25299  3572  3141               	addfsr 1,1
 25300  3573  3000               	movlw	0
 25301  3574  3B81               	subwfb	1,f
 25302  3575  317F               	addfsr 1,-1
 25303  3576  0008               	return
 25304  3577                     __end_of_slot_Finished_Animation:	
 25305                           
 25306                           	psect	text22
 25307  3660                     __ptext22:	
 25308 ;; *************** function _secret_clear *****************
 25309 ;; Defined at:
 25310 ;;		line 178 in file "secret_task.c"
 25311 ;; Parameters:    Size  Location     Type
 25312 ;;  data            2    1[COMMON] PTR struct t_secret_task
 25313 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25314 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25315 ;; Auto vars:     Size  Location     Type
 25316 ;;		None
 25317 ;; Return value:  Size  Location     Type
 25318 ;;                  1    wreg      void 
 25319 ;; Registers used:
 25320 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 25321 ;; Tracked objects:
 25322 ;;		On entry : 0/0
 25323 ;;		On exit  : 0/0
 25324 ;;		Unchanged: 0/0
 25325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25329 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25330 ;;Total ram usage:        2 bytes
 25331 ;; Hardware stack levels used:    1
 25332 ;; Hardware stack levels required when called:    4
 25333 ;; This function calls:
 25334 ;;		Nothing
 25335 ;; This function is called by:
 25336 ;;		_secret_Main
 25337 ;; This function uses a non-reentrant model
 25338 ;;
 25339                           
 25340                           
 25341                           ;psect for function _secret_clear
 25342  3660                     _secret_clear:	
 25343                           
 25344                           ;secret_task.c: 180: data->delayTickCount = 300;
 25345                           
 25346                           ;incstack = 0
 25347                           ; Regs used in _secret_clear: [wreg+fsr1l+fsr1h+status,2+status,0]
 25348  3660  0871               	movf	secret_clear@data,w
 25349  3661  0086               	movwf	6
 25350  3662  0872               	movf	secret_clear@data+1,w
 25351  3663  0087               	movwf	7
 25352  3664  3142               	addfsr 1,2
 25353  3665  302C               	movlw	44
 25354  3666  3FC0               	movwi [0]fsr1
 25355  3667  3001               	movlw	1
 25356  3668  3FC1               	movwi [1]fsr1
 25357                           
 25358                           ;secret_task.c: 181: data->holdCountA = 0;
 25359  3669  0871               	movf	secret_clear@data,w
 25360  366A  0086               	movwf	6
 25361  366B  0872               	movf	secret_clear@data+1,w
 25362  366C  0087               	movwf	7
 25363  366D  3144               	addfsr 1,4
 25364  366E  3000               	movlw	0
 25365  366F  3FC0               	movwi [0]fsr1
 25366  3670  3FC1               	movwi [1]fsr1
 25367                           
 25368                           ;secret_task.c: 182: data->holdCountB = 0;
 25369  3671  0871               	movf	secret_clear@data,w
 25370  3672  0086               	movwf	6
 25371  3673  0872               	movf	secret_clear@data+1,w
 25372  3674  0087               	movwf	7
 25373  3675  3146               	addfsr 1,6
 25374  3676  3000               	movlw	0
 25375  3677  3FC0               	movwi [0]fsr1
 25376  3678  3FC1               	movwi [1]fsr1
 25377                           
 25378                           ;secret_task.c: 183: data->holdCountX = 0;
 25379  3679  0871               	movf	secret_clear@data,w
 25380  367A  0086               	movwf	6
 25381  367B  0872               	movf	secret_clear@data+1,w
 25382  367C  0087               	movwf	7
 25383  367D  3148               	addfsr 1,8
 25384  367E  3000               	movlw	0
 25385  367F  3FC0               	movwi [0]fsr1
 25386  3680  3FC1               	movwi [1]fsr1
 25387                           
 25388                           ;secret_task.c: 184: data->holdCountY = 0;
 25389  3681  0871               	movf	secret_clear@data,w
 25390  3682  0086               	movwf	6
 25391  3683  0872               	movf	secret_clear@data+1,w
 25392  3684  0087               	movwf	7
 25393  3685  314A               	addfsr 1,10
 25394  3686  3000               	movlw	0
 25395  3687  3FC0               	movwi [0]fsr1
 25396  3688  3FC1               	movwi [1]fsr1
 25397                           
 25398                           ;secret_task.c: 185: data->noholdCount = 0;
 25399  3689  0871               	movf	secret_clear@data,w
 25400  368A  0086               	movwf	6
 25401  368B  0872               	movf	secret_clear@data+1,w
 25402  368C  0087               	movwf	7
 25403  368D  314C               	addfsr 1,12
 25404  368E  3000               	movlw	0
 25405  368F  3FC0               	movwi [0]fsr1
 25406  3690  3FC1               	movwi [1]fsr1
 25407  3691  0008               	return
 25408  3692                     __end_of_secret_clear:	
 25409                           
 25410                           	psect	text23
 25411  2588                     __ptext23:	
 25412 ;; *************** function _secret_check *****************
 25413 ;; Defined at:
 25414 ;;		line 69 in file "secret_task.c"
 25415 ;; Parameters:    Size  Location     Type
 25416 ;;  data            2    7[COMMON] PTR struct t_secret_task
 25417 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25418 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25419 ;;  buttonPresse    1    9[COMMON] unsigned char 
 25420 ;; Auto vars:     Size  Location     Type
 25421 ;;  i               2    8[BANK0 ] unsigned int 
 25422 ;;  hit_counter     6    0        unsigned char [6]
 25423 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 25424 ;;  size            2    3[BANK0 ] unsigned int 
 25425 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 25426 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), 
 25427 ;; Return value:  Size  Location     Type
 25428 ;;                  1    wreg      unsigned char 
 25429 ;; Registers used:
 25430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25431 ;; Tracked objects:
 25432 ;;		On entry : 0/0
 25433 ;;		On exit  : 0/0
 25434 ;;		Unchanged: 0/0
 25435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25436 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25437 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25438 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25439 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25440 ;;Total ram usage:       13 bytes
 25441 ;; Hardware stack levels used:    1
 25442 ;; Hardware stack levels required when called:    5
 25443 ;; This function calls:
 25444 ;;		___bmul
 25445 ;;		_strlen
 25446 ;; This function is called by:
 25447 ;;		_secret_Main
 25448 ;; This function uses a non-reentrant model
 25449 ;;
 25450                           
 25451                           
 25452                           ;psect for function _secret_check
 25453  2588                     _secret_check:	
 25454                           
 25455                           ;secret_task.c: 70: u8 *inputs;
 25456                           ;secret_task.c: 71: u16 size = sizeof(secret_inputs) / sizeof(secret_inputs[0]);
 25457                           
 25458                           ;incstack = 0
 25459                           ; Regs used in _secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25460  2588  3001               	movlw	1
 25461  2589  0020               	movlb	0	; select bank0
 25462  258A  00A3               	movwf	secret_check@size
 25463  258B  3000               	movlw	0
 25464  258C  00A4               	movwf	secret_check@size+1
 25465                           
 25466                           ;secret_task.c: 72: u16 currents_size;
 25467                           ;secret_task.c: 73: char hit_counter[6];
 25468                           ;secret_task.c: 75: for (u16 i = 0; i < size; i++){
 25469  258D  01A8               	clrf	secret_check@i
 25470  258E  01A9               	clrf	secret_check@i+1
 25471  258F                     l8909:	
 25472  258F  0824               	movf	secret_check@size+1,w
 25473  2590  0229               	subwf	secret_check@i+1,w
 25474  2591  1D03               	skipz
 25475  2592  2D95               	goto	u5505
 25476  2593  0823               	movf	secret_check@size,w
 25477  2594  0228               	subwf	secret_check@i,w
 25478  2595                     u5505:	
 25479  2595  1803               	btfsc	3,0
 25480  2596  2E41               	goto	l8911
 25481                           
 25482                           ;secret_task.c: 76: inputs = secret_inputs[i].inputs;
 25483  2597  3019               	movlw	25
 25484  2598  00A0               	movwf	??_secret_check
 25485  2599  0820               	movf	??_secret_check,w
 25486  259A  00F1               	movwf	___bmul@multiplicand
 25487  259B  0828               	movf	secret_check@i,w
 25488  259C  31B3  2308  31A5   	fcall	___bmul
 25489  259F  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25490  25A0  0020               	movlb	0	; select bank0
 25491  25A1  00A1               	movwf	??_secret_check+1
 25492  25A2  0821               	movf	??_secret_check+1,w
 25493  25A3  00A7               	movwf	secret_check@inputs
 25494                           
 25495                           ;secret_task.c: 78: if (buttonPressed == inputs[secret_inputs[i].idx]){
 25496  25A4  3019               	movlw	25
 25497  25A5  00A0               	movwf	??_secret_check
 25498  25A6  0820               	movf	??_secret_check,w
 25499  25A7  00F1               	movwf	___bmul@multiplicand
 25500  25A8  0828               	movf	secret_check@i,w
 25501  25A9  31B3  2308  31A5   	fcall	___bmul
 25502  25AC  3E14               	addlw	20
 25503  25AD  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25504  25AE  0086               	movwf	6
 25505  25AF  3002               	movlw	2	; select bank4/5
 25506  25B0  0087               	movwf	7
 25507  25B1  0801               	movf	1,w
 25508  25B2  0020               	movlb	0	; select bank0
 25509  25B3  0727               	addwf	secret_check@inputs,w
 25510  25B4  00A1               	movwf	??_secret_check+1
 25511  25B5  0821               	movf	??_secret_check+1,w
 25512  25B6  0086               	movwf	6
 25513  25B7  3002               	movlw	2	; select bank4/5
 25514  25B8  0087               	movwf	7
 25515  25B9  0801               	movf	1,w
 25516  25BA  0679               	xorwf	secret_check@buttonPressed,w
 25517  25BB  1D03               	skipz
 25518  25BC  2E2A               	goto	l8905
 25519                           
 25520                           ;secret_task.c: 79: currents_size = strlen((const char *)inputs);
 25521  25BD  0827               	movf	secret_check@inputs,w
 25522  25BE  00F1               	movwf	strlen@s
 25523  25BF  3002               	movlw	2
 25524  25C0  00F2               	movwf	strlen@s+1
 25525  25C1  31B4  2464  31A5   	fcall	_strlen
 25526  25C4  0872               	movf	?_strlen+1,w
 25527  25C5  0020               	movlb	0	; select bank0
 25528  25C6  00A6               	movwf	secret_check@currents_size+1
 25529  25C7  0871               	movf	?_strlen,w
 25530  25C8  00A5               	movwf	secret_check@currents_size
 25531                           
 25532                           ;secret_task.c: 80: secret_inputs[i].idx++;
 25533  25C9  3019               	movlw	25
 25534  25CA  00A0               	movwf	??_secret_check
 25535  25CB  0820               	movf	??_secret_check,w
 25536  25CC  00F1               	movwf	___bmul@multiplicand
 25537  25CD  0828               	movf	secret_check@i,w
 25538  25CE  31B3  2308  31A5   	fcall	___bmul
 25539  25D1  3E14               	addlw	20
 25540  25D2  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25541  25D3  0086               	movwf	6
 25542  25D4  3002               	movlw	2	; select bank4/5
 25543  25D5  0087               	movwf	7
 25544  25D6  3001               	movlw	1
 25545  25D7  0781               	addwf	1,f
 25546  25D8  3141               	addfsr 1,1
 25547  25D9  1803               	skipnc
 25548  25DA  0A81               	incf	1,f
 25549                           
 25550                           ;secret_task.c: 82: if (secret_inputs[i].idx == currents_size) {
 25551  25DB  3019               	movlw	25
 25552  25DC  0020               	movlb	0	; select bank0
 25553  25DD  00A0               	movwf	??_secret_check
 25554  25DE  0820               	movf	??_secret_check,w
 25555  25DF  00F1               	movwf	___bmul@multiplicand
 25556  25E0  0828               	movf	secret_check@i,w
 25557  25E1  31B3  2308  31A5   	fcall	___bmul
 25558  25E4  3E14               	addlw	20
 25559  25E5  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25560  25E6  0086               	movwf	6
 25561  25E7  3002               	movlw	2	; select bank4/5
 25562  25E8  0087               	movwf	7
 25563  25E9  3F40               	moviw [0]fsr1
 25564  25EA  0020               	movlb	0	; select bank0
 25565  25EB  00A1               	movwf	??_secret_check+1
 25566  25EC  3F41               	moviw [1]fsr1
 25567  25ED  00A2               	movwf	??_secret_check+2
 25568  25EE  0826               	movf	secret_check@currents_size+1,w
 25569  25EF  0622               	xorwf	??_secret_check+2,w
 25570  25F0  1D03               	skipz
 25571  25F1  2DF4               	goto	u5495
 25572  25F2  0825               	movf	secret_check@currents_size,w
 25573  25F3  0621               	xorwf	??_secret_check+1,w
 25574  25F4                     u5495:	
 25575  25F4  1D03               	skipz
 25576  25F5  2E3B               	goto	l8907
 25577                           
 25578                           ;secret_task.c: 84: secret_inputs[i].idx = 0;
 25579  25F6  3019               	movlw	25
 25580  25F7  00A0               	movwf	??_secret_check
 25581  25F8  0820               	movf	??_secret_check,w
 25582  25F9  00F1               	movwf	___bmul@multiplicand
 25583  25FA  0828               	movf	secret_check@i,w
 25584  25FB  31B3  2308  31A5   	fcall	___bmul
 25585  25FE  3E14               	addlw	20
 25586  25FF  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25587  2600  0086               	movwf	6
 25588  2601  3002               	movlw	2	; select bank4/5
 25589  2602  0087               	movwf	7
 25590  2603  3000               	movlw	0
 25591  2604  3FC0               	movwi [0]fsr1
 25592  2605  3FC1               	movwi [1]fsr1
 25593                           
 25594                           ;secret_task.c: 87: *(secret_inputs[i].variable) = (u16) secret_inputs[i].value;
 25595  2606  3019               	movlw	25
 25596  2607  0020               	movlb	0	; select bank0
 25597  2608  00A0               	movwf	??_secret_check
 25598  2609  0820               	movf	??_secret_check,w
 25599  260A  00F1               	movwf	___bmul@multiplicand
 25600  260B  0828               	movf	secret_check@i,w
 25601  260C  31B3  2308  31A5   	fcall	___bmul
 25602  260F  3E17               	addlw	23
 25603  2610  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25604  2611  0086               	movwf	6
 25605  2612  3002               	movlw	2	; select bank4/5
 25606  2613  0087               	movwf	7
 25607  2614  3019               	movlw	25
 25608  2615  0020               	movlb	0	; select bank0
 25609  2616  00A1               	movwf	??_secret_check+1
 25610  2617  0821               	movf	??_secret_check+1,w
 25611  2618  00F1               	movwf	___bmul@multiplicand
 25612  2619  0828               	movf	secret_check@i,w
 25613  261A  31B3  2308         	fcall	___bmul
 25614  261C  3E16               	addlw	22
 25615  261D  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25616  261E  0084               	movwf	4
 25617  261F  3002               	movlw	2	; select bank4/5
 25618  2620  0085               	movwf	5
 25619  2621  0800               	movf	0,w
 25620  2622  0084               	movwf	4
 25621  2623  0185               	clrf	5
 25622  2624  3F40               	moviw [0]fsr1
 25623  2625  3F80               	movwi [0]fsr0
 25624  2626  3F41               	moviw [1]fsr1
 25625  2627  3F81               	movwi [1]fsr0
 25626                           
 25627                           ;secret_task.c: 89: return 1;
 25628  2628  3001               	movlw	1
 25629  2629  0008               	return
 25630  262A                     l8905:	
 25631                           ;secret_task.c: 90: }
 25632                           ;secret_task.c: 91: } else {
 25633                           
 25634                           
 25635                           ;secret_task.c: 93: secret_inputs[i].idx = 0;
 25636  262A  3019               	movlw	25
 25637  262B  0020               	movlb	0	; select bank0
 25638  262C  00A0               	movwf	??_secret_check
 25639  262D  0820               	movf	??_secret_check,w
 25640  262E  00F1               	movwf	___bmul@multiplicand
 25641  262F  0828               	movf	secret_check@i,w
 25642  2630  31B3  2308  31A5   	fcall	___bmul
 25643  2633  3E14               	addlw	20
 25644  2634  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25645  2635  0086               	movwf	6
 25646  2636  3002               	movlw	2	; select bank4/5
 25647  2637  0087               	movwf	7
 25648  2638  3000               	movlw	0
 25649  2639  3FC0               	movwi [0]fsr1
 25650  263A  3FC1               	movwi [1]fsr1
 25651  263B                     l8907:	
 25652  263B  3001               	movlw	1
 25653  263C  0020               	movlb	0	; select bank0
 25654  263D  07A8               	addwf	secret_check@i,f
 25655  263E  3000               	movlw	0
 25656  263F  3DA9               	addwfc	secret_check@i+1,f
 25657  2640  2D8F               	goto	l8909
 25658  2641                     l8911:	
 25659                           
 25660                           ;secret_task.c: 94: }
 25661                           ;secret_task.c: 95: }
 25662                           ;secret_task.c: 96: return 0;
 25663  2641  3000               	movlw	0
 25664  2642  0008               	return
 25665  2643                     __end_of_secret_check:	
 25666                           
 25667                           	psect	text24
 25668  2AA4                     __ptext24:	
 25669 ;; *************** function _menu_run_option *****************
 25670 ;; Defined at:
 25671 ;;		line 185 in file "menu_task.c"
 25672 ;; Parameters:    Size  Location     Type
 25673 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 25674 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25675 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25676 ;; Auto vars:     Size  Location     Type
 25677 ;;		None
 25678 ;; Return value:  Size  Location     Type
 25679 ;;                  1    wreg      void 
 25680 ;; Registers used:
 25681 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25682 ;; Tracked objects:
 25683 ;;		On entry : 0/0
 25684 ;;		On exit  : 0/0
 25685 ;;		Unchanged: 0/0
 25686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25687 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25690 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25691 ;;Total ram usage:        2 bytes
 25692 ;; Hardware stack levels used:    1
 25693 ;; Hardware stack levels required when called:   11
 25694 ;; This function calls:
 25695 ;;		_menu_clear
 25696 ;; This function is called by:
 25697 ;;		_menu_Main
 25698 ;; This function uses a non-reentrant model
 25699 ;;
 25700                           
 25701                           
 25702                           ;psect for function _menu_run_option
 25703  2AA4                     _menu_run_option:	
 25704                           
 25705                           ;menu_task.c: 186: switch (menu_option_idx){
 25706                           
 25707                           ;incstack = 0
 25708                           ; Regs used in _menu_run_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25709  2AA4  2AD9               	goto	l8665
 25710  2AA5                     l8647:	
 25711                           ;menu_task.c: 187: case 1:
 25712                           
 25713                           
 25714                           ;menu_task.c: 188: menu_clear(data);
 25715  2AA5  0020               	movlb	0	; select bank0
 25716  2AA6  083C               	movf	menu_run_option@data+1,w
 25717  2AA7  00BA               	movwf	menu_clear@data+1
 25718  2AA8  083B               	movf	menu_run_option@data,w
 25719  2AA9  00B9               	movwf	menu_clear@data
 25720  2AAA  31A9  2184         	fcall	_menu_clear
 25721                           
 25722                           ;menu_task.c: 189: currentTask = SLOT_TASK;
 25723  2AAC  3001               	movlw	1
 25724  2AAD  0021               	movlb	1	; select bank1
 25725  2AAE  00BA               	movwf	_currentTask^(0+128)
 25726  2AAF  3000               	movlw	0
 25727  2AB0  00BB               	movwf	(_currentTask^(0+128)+1)
 25728                           
 25729                           ;menu_task.c: 190: break;
 25730  2AB1  0008               	return
 25731  2AB2                     l8651:	
 25732                           ;menu_task.c: 191: case 2:
 25733                           
 25734                           
 25735                           ;menu_task.c: 192: menu_clear(data);
 25736  2AB2  0020               	movlb	0	; select bank0
 25737  2AB3  083C               	movf	menu_run_option@data+1,w
 25738  2AB4  00BA               	movwf	menu_clear@data+1
 25739  2AB5  083B               	movf	menu_run_option@data,w
 25740  2AB6  00B9               	movwf	menu_clear@data
 25741  2AB7  31A9  2184         	fcall	_menu_clear
 25742                           
 25743                           ;menu_task.c: 193: currentTask = LOCKED_TASK;
 25744  2AB9  3003               	movlw	3
 25745  2ABA  0021               	movlb	1	; select bank1
 25746  2ABB  00BA               	movwf	_currentTask^(0+128)
 25747  2ABC  3000               	movlw	0
 25748  2ABD  00BB               	movwf	(_currentTask^(0+128)+1)
 25749                           
 25750                           ;menu_task.c: 194: break;
 25751  2ABE  0008               	return
 25752  2ABF                     l8655:	
 25753                           ;menu_task.c: 195: case 4:
 25754                           
 25755                           
 25756                           ;menu_task.c: 196: menu_clear(data);
 25757  2ABF  0020               	movlb	0	; select bank0
 25758  2AC0  083C               	movf	menu_run_option@data+1,w
 25759  2AC1  00BA               	movwf	menu_clear@data+1
 25760  2AC2  083B               	movf	menu_run_option@data,w
 25761  2AC3  00B9               	movwf	menu_clear@data
 25762  2AC4  31A9  2184         	fcall	_menu_clear
 25763                           
 25764                           ;menu_task.c: 197: currentTask = FLASHY_TASK;
 25765  2AC6  3002               	movlw	2
 25766  2AC7  0021               	movlb	1	; select bank1
 25767  2AC8  00BA               	movwf	_currentTask^(0+128)
 25768  2AC9  3000               	movlw	0
 25769  2ACA  00BB               	movwf	(_currentTask^(0+128)+1)
 25770                           
 25771                           ;menu_task.c: 198: break;
 25772  2ACB  0008               	return
 25773  2ACC                     l8659:	
 25774                           ;menu_task.c: 199: case 3:
 25775                           
 25776                           
 25777                           ;menu_task.c: 200: menu_clear(data);
 25778  2ACC  0020               	movlb	0	; select bank0
 25779  2ACD  083C               	movf	menu_run_option@data+1,w
 25780  2ACE  00BA               	movwf	menu_clear@data+1
 25781  2ACF  083B               	movf	menu_run_option@data,w
 25782  2AD0  00B9               	movwf	menu_clear@data
 25783  2AD1  31A9  2184         	fcall	_menu_clear
 25784                           
 25785                           ;menu_task.c: 201: currentTask = MATRIX_TASK;
 25786  2AD3  3004               	movlw	4
 25787  2AD4  0021               	movlb	1	; select bank1
 25788  2AD5  00BA               	movwf	_currentTask^(0+128)
 25789  2AD6  3000               	movlw	0
 25790  2AD7  00BB               	movwf	(_currentTask^(0+128)+1)
 25791                           
 25792                           ;menu_task.c: 203: }
 25793                           
 25794                           ;menu_task.c: 202: break;
 25795  2AD8  0008               	return
 25796  2AD9                     l8665:	
 25797                           
 25798                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 25799                           ; Switch size 1, requested type "space"
 25800                           ; Number of cases is 1, Range of values is 0 to 0
 25801                           ; switch strategies available:
 25802                           ; Name         Instructions Cycles
 25803                           ; simple_byte            4     3 (average)
 25804                           ; direct_byte            8     6 (fixed)
 25805                           ; jumptable            260     6 (fixed)
 25806                           ;	Chosen strategy is simple_byte
 25807  2AD9  0021               	movlb	1	; select bank1
 25808  2ADA  0837               	movf	(_menu_option_idx+1)^(0+128),w
 25809  2ADB  3A00               	xorlw	0	; case 0
 25810  2ADC  1903               	skipnz
 25811  2ADD  2ADF               	goto	l10889
 25812  2ADE  2AED               	goto	l1010
 25813  2ADF                     l10889:	
 25814                           
 25815                           ; Switch size 1, requested type "space"
 25816                           ; Number of cases is 4, Range of values is 1 to 4
 25817                           ; switch strategies available:
 25818                           ; Name         Instructions Cycles
 25819                           ; simple_byte           13     7 (average)
 25820                           ; direct_byte           17     9 (fixed)
 25821                           ; jumptable            263     9 (fixed)
 25822                           ;	Chosen strategy is simple_byte
 25823  2ADF  0836               	movf	_menu_option_idx^(0+128),w
 25824  2AE0  3A01               	xorlw	1	; case 1
 25825  2AE1  1903               	skipnz
 25826  2AE2  2AA5               	goto	l8647
 25827  2AE3  3A03               	xorlw	3	; case 2
 25828  2AE4  1903               	skipnz
 25829  2AE5  2AB2               	goto	l8651
 25830  2AE6  3A01               	xorlw	1	; case 3
 25831  2AE7  1903               	skipnz
 25832  2AE8  2ACC               	goto	l8659
 25833  2AE9  3A07               	xorlw	7	; case 4
 25834  2AEA  1903               	skipnz
 25835  2AEB  2ABF               	goto	l8655
 25836  2AEC  2AED               	goto	l1010
 25837  2AED                     l1010:	
 25838  2AED  0008               	return
 25839  2AEE                     __end_of_menu_run_option:	
 25840                           
 25841                           	psect	text25
 25842  2984                     __ptext25:	
 25843 ;; *************** function _menu_clear *****************
 25844 ;; Defined at:
 25845 ;;		line 206 in file "menu_task.c"
 25846 ;; Parameters:    Size  Location     Type
 25847 ;;  data            2   25[BANK0 ] PTR struct t_menu_taskDa
 25848 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25849 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25850 ;; Auto vars:     Size  Location     Type
 25851 ;;		None
 25852 ;; Return value:  Size  Location     Type
 25853 ;;                  1    wreg      void 
 25854 ;; Registers used:
 25855 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25856 ;; Tracked objects:
 25857 ;;		On entry : 0/0
 25858 ;;		On exit  : 0/0
 25859 ;;		Unchanged: 0/0
 25860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25861 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25864 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25865 ;;Total ram usage:        2 bytes
 25866 ;; Hardware stack levels used:    1
 25867 ;; Hardware stack levels required when called:   10
 25868 ;; This function calls:
 25869 ;;		_nullifyBadge_segDisplayErase
 25870 ;;		_nullifyBadge_userLedsClr
 25871 ;; This function is called by:
 25872 ;;		_menu_Main
 25873 ;;		_menu_run_option
 25874 ;; This function uses a non-reentrant model
 25875 ;;
 25876                           
 25877                           
 25878                           ;psect for function _menu_clear
 25879  2984                     _menu_clear:	
 25880                           
 25881                           ;menu_task.c: 208: data->delayTickCount = 50;
 25882                           
 25883                           ;incstack = 0
 25884                           ; Regs used in _menu_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25885  2984  0020               	movlb	0	; select bank0
 25886  2985  0839               	movf	menu_clear@data,w
 25887  2986  0086               	movwf	6
 25888  2987  083A               	movf	menu_clear@data+1,w
 25889  2988  0087               	movwf	7
 25890  2989  3142               	addfsr 1,2
 25891  298A  3032               	movlw	50
 25892  298B  3FC0               	movwi [0]fsr1
 25893  298C  3000               	movlw	0
 25894  298D  3FC1               	movwi [1]fsr1
 25895                           
 25896                           ;menu_task.c: 209: data->holdCountA = 0;
 25897  298E  0839               	movf	menu_clear@data,w
 25898  298F  0086               	movwf	6
 25899  2990  083A               	movf	menu_clear@data+1,w
 25900  2991  0087               	movwf	7
 25901  2992  3144               	addfsr 1,4
 25902  2993  3000               	movlw	0
 25903  2994  3FC0               	movwi [0]fsr1
 25904  2995  3FC1               	movwi [1]fsr1
 25905                           
 25906                           ;menu_task.c: 210: data->holdCountB = 0;
 25907  2996  0839               	movf	menu_clear@data,w
 25908  2997  0086               	movwf	6
 25909  2998  083A               	movf	menu_clear@data+1,w
 25910  2999  0087               	movwf	7
 25911  299A  3146               	addfsr 1,6
 25912  299B  3000               	movlw	0
 25913  299C  3FC0               	movwi [0]fsr1
 25914  299D  3FC1               	movwi [1]fsr1
 25915                           
 25916                           ;menu_task.c: 211: data->holdCountX = 0;
 25917  299E  0839               	movf	menu_clear@data,w
 25918  299F  0086               	movwf	6
 25919  29A0  083A               	movf	menu_clear@data+1,w
 25920  29A1  0087               	movwf	7
 25921  29A2  3148               	addfsr 1,8
 25922  29A3  3000               	movlw	0
 25923  29A4  3FC0               	movwi [0]fsr1
 25924  29A5  3FC1               	movwi [1]fsr1
 25925                           
 25926                           ;menu_task.c: 212: data->holdCountY = 0;
 25927  29A6  0839               	movf	menu_clear@data,w
 25928  29A7  0086               	movwf	6
 25929  29A8  083A               	movf	menu_clear@data+1,w
 25930  29A9  0087               	movwf	7
 25931  29AA  314A               	addfsr 1,10
 25932  29AB  3000               	movlw	0
 25933  29AC  3FC0               	movwi [0]fsr1
 25934  29AD  3FC1               	movwi [1]fsr1
 25935                           
 25936                           ;menu_task.c: 213: data->noholdCount = 0;
 25937  29AE  0839               	movf	menu_clear@data,w
 25938  29AF  0086               	movwf	6
 25939  29B0  083A               	movf	menu_clear@data+1,w
 25940  29B1  0087               	movwf	7
 25941  29B2  314C               	addfsr 1,12
 25942  29B3  3000               	movlw	0
 25943  29B4  3FC0               	movwi [0]fsr1
 25944  29B5  3FC1               	movwi [1]fsr1
 25945                           
 25946                           ;menu_task.c: 215: menu_option_idx = 0;
 25947  29B6  0021               	movlb	1	; select bank1
 25948  29B7  01B6               	clrf	_menu_option_idx^(0+128)
 25949  29B8  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 25950                           
 25951                           ;menu_task.c: 218: nullifyBadge_userLedsClr(data->badge);
 25952  29B9  0020               	movlb	0	; select bank0
 25953  29BA  0839               	movf	menu_clear@data,w
 25954  29BB  0086               	movwf	6
 25955  29BC  083A               	movf	menu_clear@data+1,w
 25956  29BD  0087               	movwf	7
 25957  29BE  0801               	movf	1,w
 25958  29BF  3187  27FA  31A9   	fcall	_nullifyBadge_userLedsClr
 25959                           
 25960                           ;menu_task.c: 219: nullifyBadge_segDisplayErase(data->badge);
 25961  29C2  0020               	movlb	0	; select bank0
 25962  29C3  0839               	movf	menu_clear@data,w
 25963  29C4  0086               	movwf	6
 25964  29C5  083A               	movf	menu_clear@data+1,w
 25965  29C6  0087               	movwf	7
 25966  29C7  0801               	movf	1,w
 25967  29C8  3198  2000         	fcall	_nullifyBadge_segDisplayErase
 25968  29CA  0008               	return
 25969  29CB                     __end_of_menu_clear:	
 25970                           
 25971                           	psect	text26
 25972  2D92                     __ptext26:	
 25973 ;; *************** function _menu_display_option *****************
 25974 ;; Defined at:
 25975 ;;		line 166 in file "menu_task.c"
 25976 ;; Parameters:    Size  Location     Type
 25977 ;;  data            2   44[BANK0 ] PTR struct t_menu_taskDa
 25978 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25979 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25980 ;; Auto vars:     Size  Location     Type
 25981 ;;  led             2   48[BANK0 ] unsigned int 
 25982 ;;  size            2   46[BANK0 ] unsigned int 
 25983 ;; Return value:  Size  Location     Type
 25984 ;;                  1    wreg      void 
 25985 ;; Registers used:
 25986 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25987 ;; Tracked objects:
 25988 ;;		On entry : 0/0
 25989 ;;		On exit  : 0/0
 25990 ;;		Unchanged: 0/0
 25991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25992 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25993 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25995 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25996 ;;Total ram usage:        6 bytes
 25997 ;; Hardware stack levels used:    1
 25998 ;; Hardware stack levels required when called:   10
 25999 ;; This function calls:
 26000 ;;		___lwmod
 26001 ;;		_marquee
 26002 ;;		_nullifyBadge_segDisplayForceUpdate
 26003 ;;		_nullifyBadge_segDisplayPutStr
 26004 ;;		_nullifyBadge_userLedsSet
 26005 ;; This function is called by:
 26006 ;;		_menu_Main
 26007 ;; This function uses a non-reentrant model
 26008 ;;
 26009                           
 26010                           
 26011                           ;psect for function _menu_display_option
 26012  2D92                     _menu_display_option:	
 26013                           
 26014                           ;menu_task.c: 167: u16 size = sizeof(menu_options_leds)/sizeof(menu_options_leds[0]);
 26015                           
 26016                           ;incstack = 0
 26017                           ; Regs used in _menu_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26018  2D92  3005               	movlw	5
 26019  2D93  0020               	movlb	0	; select bank0
 26020  2D94  00CE               	movwf	menu_display_option@size
 26021  2D95  3000               	movlw	0
 26022  2D96  00CF               	movwf	menu_display_option@size+1
 26023                           
 26024                           ;menu_task.c: 168: u16 led = menu_options_leds[menu_option_idx % size];
 26025  2D97  084F               	movf	menu_display_option@size+1,w
 26026  2D98  00AC               	movwf	___lwmod@divisor+1
 26027  2D99  084E               	movf	menu_display_option@size,w
 26028  2D9A  00AB               	movwf	___lwmod@divisor
 26029  2D9B  0021               	movlb	1	; select bank1
 26030  2D9C  0837               	movf	(_menu_option_idx+1)^(0+128),w
 26031  2D9D  0020               	movlb	0	; select bank0
 26032  2D9E  00AE               	movwf	___lwmod@dividend+1
 26033  2D9F  0021               	movlb	1	; select bank1
 26034  2DA0  0836               	movf	_menu_option_idx^(0+128),w
 26035  2DA1  0020               	movlb	0	; select bank0
 26036  2DA2  00AD               	movwf	___lwmod@dividend
 26037  2DA3  31B5  25A1  31AD   	fcall	___lwmod
 26038  2DA6  0020               	movlb	0	; select bank0
 26039  2DA7  082B               	movf	?___lwmod,w
 26040  2DA8  0709               	addwf	9,w
 26041  2DA9  3ECA               	addlw	(low (_menu_options_leds| (0+512)))& (0+255)
 26042  2DAA  0086               	movwf	6
 26043  2DAB  3002               	movlw	2	; select bank5/6
 26044  2DAC  0087               	movwf	7
 26045  2DAD  3F40               	moviw [0]fsr1
 26046  2DAE  00D0               	movwf	menu_display_option@led
 26047  2DAF  3F41               	moviw [1]fsr1
 26048  2DB0  00D1               	movwf	menu_display_option@led+1
 26049                           
 26050                           ;menu_task.c: 174: nullifyBadge_userLedsSet(data->badge, led);
 26051  2DB1  0851               	movf	menu_display_option@led+1,w
 26052  2DB2  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 26053  2DB3  0850               	movf	menu_display_option@led,w
 26054  2DB4  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 26055  2DB5  084C               	movf	menu_display_option@data,w
 26056  2DB6  0086               	movwf	6
 26057  2DB7  084D               	movf	menu_display_option@data+1,w
 26058  2DB8  0087               	movwf	7
 26059  2DB9  0801               	movf	1,w
 26060  2DBA  31B2  22F7  31AD   	fcall	_nullifyBadge_userLedsSet
 26061                           
 26062                           ;menu_task.c: 176: if (menu_option_idx == 0){
 26063  2DBD  0021               	movlb	1	; select bank1
 26064  2DBE  0836               	movf	_menu_option_idx^(0+128),w
 26065  2DBF  0437               	iorwf	(_menu_option_idx+1)^(0+128),w
 26066  2DC0  1D03               	btfss	3,2
 26067  2DC1  2DDD               	goto	l8643
 26068                           
 26069                           ;menu_task.c: 177: nullifyBadge_segDisplayPutStr(data->badge, menu_option[menu_option_id
      +                          x]);
 26070  2DC2  3536               	lslf	_menu_option_idx^(0+128),w
 26071  2DC3  3E2C               	addlw	(low (_menu_option| (0+512)))& (0+255)
 26072  2DC4  0086               	movwf	6
 26073  2DC5  3002               	movlw	2	; select bank4/5
 26074  2DC6  0087               	movwf	7
 26075  2DC7  3F40               	moviw [0]fsr1
 26076  2DC8  0020               	movlb	0	; select bank0
 26077  2DC9  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 26078  2DCA  3F41               	moviw [1]fsr1
 26079  2DCB  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 26080  2DCC  084C               	movf	menu_display_option@data,w
 26081  2DCD  0086               	movwf	6
 26082  2DCE  084D               	movf	menu_display_option@data+1,w
 26083  2DCF  0087               	movwf	7
 26084  2DD0  0801               	movf	1,w
 26085  2DD1  31B2  221E  31AD   	fcall	_nullifyBadge_segDisplayPutStr
 26086                           
 26087                           ;menu_task.c: 178: nullifyBadge_segDisplayForceUpdate(data->badge);
 26088  2DD4  0020               	movlb	0	; select bank0
 26089  2DD5  084C               	movf	menu_display_option@data,w
 26090  2DD6  0086               	movwf	6
 26091  2DD7  084D               	movf	menu_display_option@data+1,w
 26092  2DD8  0087               	movwf	7
 26093  2DD9  0801               	movf	1,w
 26094  2DDA  31B1  21E2         	fcall	_nullifyBadge_segDisplayForceUpdate
 26095                           
 26096                           ;menu_task.c: 179: }
 26097  2DDC  0008               	return
 26098  2DDD                     l8643:	
 26099                           
 26100                           ;menu_task.c: 180: else {
 26101                           ;menu_task.c: 181: marquee(menu_option[menu_option_idx], data->noholdCount);
 26102  2DDD  0021               	movlb	1	; select bank1
 26103  2DDE  3536               	lslf	_menu_option_idx^(0+128),w
 26104  2DDF  3E2C               	addlw	(low (_menu_option| (0+512)))& (0+255)
 26105  2DE0  0086               	movwf	6
 26106  2DE1  3002               	movlw	2	; select bank4/5
 26107  2DE2  0087               	movwf	7
 26108  2DE3  3F40               	moviw [0]fsr1
 26109  2DE4  0020               	movlb	0	; select bank0
 26110  2DE5  00BA               	movwf	marquee@string
 26111  2DE6  3F41               	moviw [1]fsr1
 26112  2DE7  00BB               	movwf	marquee@string+1
 26113  2DE8  084C               	movf	menu_display_option@data,w
 26114  2DE9  0086               	movwf	6
 26115  2DEA  084D               	movf	menu_display_option@data+1,w
 26116  2DEB  0087               	movwf	7
 26117  2DEC  314C               	addfsr 1,12
 26118  2DED  3F40               	moviw [0]fsr1
 26119  2DEE  00BC               	movwf	marquee@count
 26120  2DEF  3F41               	moviw [1]fsr1
 26121  2DF0  00BD               	movwf	marquee@count+1
 26122  2DF1  31A2  2215         	fcall	_marquee
 26123  2DF3  0008               	return
 26124  2DF4                     __end_of_menu_display_option:	
 26125                           
 26126                           	psect	text27
 26127  24CD                     __ptext27:	
 26128 ;; *************** function _matrix_secret_check *****************
 26129 ;; Defined at:
 26130 ;;		line 94 in file "matrix_task.c"
 26131 ;; Parameters:    Size  Location     Type
 26132 ;;  data            2    7[COMMON] PTR struct t_matrix_task
 26133 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26134 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26135 ;;  buttonPresse    1    9[COMMON] unsigned char 
 26136 ;; Auto vars:     Size  Location     Type
 26137 ;;  i               2    8[BANK0 ] unsigned int 
 26138 ;;  hit_counter     6    0        unsigned char [6]
 26139 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 26140 ;;  size            2    3[BANK0 ] unsigned int 
 26141 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 26142 ;;		 -> matrix_secret_inputs.inputs(20), matrix_secret_inputs(25), 
 26143 ;; Return value:  Size  Location     Type
 26144 ;;                  1    wreg      unsigned char 
 26145 ;; Registers used:
 26146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26147 ;; Tracked objects:
 26148 ;;		On entry : 0/0
 26149 ;;		On exit  : 0/0
 26150 ;;		Unchanged: 0/0
 26151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26152 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26153 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26154 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26155 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26156 ;;Total ram usage:       13 bytes
 26157 ;; Hardware stack levels used:    1
 26158 ;; Hardware stack levels required when called:    5
 26159 ;; This function calls:
 26160 ;;		___bmul
 26161 ;;		_strlen
 26162 ;; This function is called by:
 26163 ;;		_matrix_Main
 26164 ;; This function uses a non-reentrant model
 26165 ;;
 26166                           
 26167                           
 26168                           ;psect for function _matrix_secret_check
 26169  24CD                     _matrix_secret_check:	
 26170                           
 26171                           ;matrix_task.c: 95: u8 *inputs;
 26172                           ;matrix_task.c: 96: u16 size = sizeof(matrix_secret_inputs) / sizeof(matrix_secret_input
      +                          s[0]);
 26173                           
 26174                           ;incstack = 0
 26175                           ; Regs used in _matrix_secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26176  24CD  3001               	movlw	1
 26177  24CE  0020               	movlb	0	; select bank0
 26178  24CF  00A3               	movwf	matrix_secret_check@size
 26179  24D0  3000               	movlw	0
 26180  24D1  00A4               	movwf	matrix_secret_check@size+1
 26181                           
 26182                           ;matrix_task.c: 97: u16 currents_size;
 26183                           ;matrix_task.c: 98: char hit_counter[6];
 26184                           ;matrix_task.c: 100: for (u16 i = 0; i < size; i++){
 26185  24D2  01A8               	clrf	matrix_secret_check@i
 26186  24D3  01A9               	clrf	matrix_secret_check@i+1
 26187  24D4                     l8981:	
 26188  24D4  0824               	movf	matrix_secret_check@size+1,w
 26189  24D5  0229               	subwf	matrix_secret_check@i+1,w
 26190  24D6  1D03               	skipz
 26191  24D7  2CDA               	goto	u5575
 26192  24D8  0823               	movf	matrix_secret_check@size,w
 26193  24D9  0228               	subwf	matrix_secret_check@i,w
 26194  24DA                     u5575:	
 26195  24DA  1803               	btfsc	3,0
 26196  24DB  2D86               	goto	l8983
 26197                           
 26198                           ;matrix_task.c: 101: inputs = matrix_secret_inputs[i].inputs;
 26199  24DC  3019               	movlw	25
 26200  24DD  00A0               	movwf	??_matrix_secret_check
 26201  24DE  0820               	movf	??_matrix_secret_check,w
 26202  24DF  00F1               	movwf	___bmul@multiplicand
 26203  24E0  0828               	movf	matrix_secret_check@i,w
 26204  24E1  31B3  2308  31A4   	fcall	___bmul
 26205  24E4  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26206  24E5  0020               	movlb	0	; select bank0
 26207  24E6  00A1               	movwf	??_matrix_secret_check+1
 26208  24E7  0821               	movf	??_matrix_secret_check+1,w
 26209  24E8  00A7               	movwf	matrix_secret_check@inputs
 26210                           
 26211                           ;matrix_task.c: 103: if (buttonPressed == inputs[matrix_secret_inputs[i].idx]){
 26212  24E9  3019               	movlw	25
 26213  24EA  00A0               	movwf	??_matrix_secret_check
 26214  24EB  0820               	movf	??_matrix_secret_check,w
 26215  24EC  00F1               	movwf	___bmul@multiplicand
 26216  24ED  0828               	movf	matrix_secret_check@i,w
 26217  24EE  31B3  2308  31A4   	fcall	___bmul
 26218  24F1  3E14               	addlw	20
 26219  24F2  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26220  24F3  0086               	movwf	6
 26221  24F4  3002               	movlw	2	; select bank5/6
 26222  24F5  0087               	movwf	7
 26223  24F6  0801               	movf	1,w
 26224  24F7  0020               	movlb	0	; select bank0
 26225  24F8  0727               	addwf	matrix_secret_check@inputs,w
 26226  24F9  00A1               	movwf	??_matrix_secret_check+1
 26227  24FA  0821               	movf	??_matrix_secret_check+1,w
 26228  24FB  0086               	movwf	6
 26229  24FC  3002               	movlw	2	; select bank4/5
 26230  24FD  0087               	movwf	7
 26231  24FE  0801               	movf	1,w
 26232  24FF  0679               	xorwf	matrix_secret_check@buttonPressed,w
 26233  2500  1D03               	skipz
 26234  2501  2D6F               	goto	l8977
 26235                           
 26236                           ;matrix_task.c: 104: currents_size = strlen((const char *)inputs);
 26237  2502  0827               	movf	matrix_secret_check@inputs,w
 26238  2503  00F1               	movwf	strlen@s
 26239  2504  3002               	movlw	2
 26240  2505  00F2               	movwf	strlen@s+1
 26241  2506  31B4  2464  31A4   	fcall	_strlen
 26242  2509  0872               	movf	?_strlen+1,w
 26243  250A  0020               	movlb	0	; select bank0
 26244  250B  00A6               	movwf	matrix_secret_check@currents_size+1
 26245  250C  0871               	movf	?_strlen,w
 26246  250D  00A5               	movwf	matrix_secret_check@currents_size
 26247                           
 26248                           ;matrix_task.c: 105: matrix_secret_inputs[i].idx++;
 26249  250E  3019               	movlw	25
 26250  250F  00A0               	movwf	??_matrix_secret_check
 26251  2510  0820               	movf	??_matrix_secret_check,w
 26252  2511  00F1               	movwf	___bmul@multiplicand
 26253  2512  0828               	movf	matrix_secret_check@i,w
 26254  2513  31B3  2308  31A4   	fcall	___bmul
 26255  2516  3E14               	addlw	20
 26256  2517  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26257  2518  0086               	movwf	6
 26258  2519  3002               	movlw	2	; select bank5/6
 26259  251A  0087               	movwf	7
 26260  251B  3001               	movlw	1
 26261  251C  0781               	addwf	1,f
 26262  251D  3141               	addfsr 1,1
 26263  251E  1803               	skipnc
 26264  251F  0A81               	incf	1,f
 26265                           
 26266                           ;matrix_task.c: 107: if (matrix_secret_inputs[i].idx == currents_size) {
 26267  2520  3019               	movlw	25
 26268  2521  0020               	movlb	0	; select bank0
 26269  2522  00A0               	movwf	??_matrix_secret_check
 26270  2523  0820               	movf	??_matrix_secret_check,w
 26271  2524  00F1               	movwf	___bmul@multiplicand
 26272  2525  0828               	movf	matrix_secret_check@i,w
 26273  2526  31B3  2308  31A4   	fcall	___bmul
 26274  2529  3E14               	addlw	20
 26275  252A  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26276  252B  0086               	movwf	6
 26277  252C  3002               	movlw	2	; select bank5/6
 26278  252D  0087               	movwf	7
 26279  252E  3F40               	moviw [0]fsr1
 26280  252F  0020               	movlb	0	; select bank0
 26281  2530  00A1               	movwf	??_matrix_secret_check+1
 26282  2531  3F41               	moviw [1]fsr1
 26283  2532  00A2               	movwf	??_matrix_secret_check+2
 26284  2533  0826               	movf	matrix_secret_check@currents_size+1,w
 26285  2534  0622               	xorwf	??_matrix_secret_check+2,w
 26286  2535  1D03               	skipz
 26287  2536  2D39               	goto	u5565
 26288  2537  0825               	movf	matrix_secret_check@currents_size,w
 26289  2538  0621               	xorwf	??_matrix_secret_check+1,w
 26290  2539                     u5565:	
 26291  2539  1D03               	skipz
 26292  253A  2D80               	goto	l8979
 26293                           
 26294                           ;matrix_task.c: 109: matrix_secret_inputs[i].idx = 0;
 26295  253B  3019               	movlw	25
 26296  253C  00A0               	movwf	??_matrix_secret_check
 26297  253D  0820               	movf	??_matrix_secret_check,w
 26298  253E  00F1               	movwf	___bmul@multiplicand
 26299  253F  0828               	movf	matrix_secret_check@i,w
 26300  2540  31B3  2308  31A4   	fcall	___bmul
 26301  2543  3E14               	addlw	20
 26302  2544  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26303  2545  0086               	movwf	6
 26304  2546  3002               	movlw	2	; select bank5/6
 26305  2547  0087               	movwf	7
 26306  2548  3000               	movlw	0
 26307  2549  3FC0               	movwi [0]fsr1
 26308  254A  3FC1               	movwi [1]fsr1
 26309                           
 26310                           ;matrix_task.c: 112: *(matrix_secret_inputs[i].variable) = (u16) matrix_secret_inputs[i]
      +                          .value;
 26311  254B  3019               	movlw	25
 26312  254C  0020               	movlb	0	; select bank0
 26313  254D  00A0               	movwf	??_matrix_secret_check
 26314  254E  0820               	movf	??_matrix_secret_check,w
 26315  254F  00F1               	movwf	___bmul@multiplicand
 26316  2550  0828               	movf	matrix_secret_check@i,w
 26317  2551  31B3  2308  31A4   	fcall	___bmul
 26318  2554  3E17               	addlw	23
 26319  2555  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26320  2556  0086               	movwf	6
 26321  2557  3002               	movlw	2	; select bank5/6
 26322  2558  0087               	movwf	7
 26323  2559  3019               	movlw	25
 26324  255A  0020               	movlb	0	; select bank0
 26325  255B  00A1               	movwf	??_matrix_secret_check+1
 26326  255C  0821               	movf	??_matrix_secret_check+1,w
 26327  255D  00F1               	movwf	___bmul@multiplicand
 26328  255E  0828               	movf	matrix_secret_check@i,w
 26329  255F  31B3  2308         	fcall	___bmul
 26330  2561  3E16               	addlw	22
 26331  2562  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26332  2563  0084               	movwf	4
 26333  2564  3002               	movlw	2	; select bank5/6
 26334  2565  0085               	movwf	5
 26335  2566  0800               	movf	0,w
 26336  2567  0084               	movwf	4
 26337  2568  0185               	clrf	5
 26338  2569  3F40               	moviw [0]fsr1
 26339  256A  3F80               	movwi [0]fsr0
 26340  256B  3F41               	moviw [1]fsr1
 26341  256C  3F81               	movwi [1]fsr0
 26342                           
 26343                           ;matrix_task.c: 114: return 1;
 26344  256D  3001               	movlw	1
 26345  256E  0008               	return
 26346  256F                     l8977:	
 26347                           ;matrix_task.c: 115: }
 26348                           ;matrix_task.c: 116: } else {
 26349                           
 26350                           
 26351                           ;matrix_task.c: 118: matrix_secret_inputs[i].idx = 0;
 26352  256F  3019               	movlw	25
 26353  2570  0020               	movlb	0	; select bank0
 26354  2571  00A0               	movwf	??_matrix_secret_check
 26355  2572  0820               	movf	??_matrix_secret_check,w
 26356  2573  00F1               	movwf	___bmul@multiplicand
 26357  2574  0828               	movf	matrix_secret_check@i,w
 26358  2575  31B3  2308  31A4   	fcall	___bmul
 26359  2578  3E14               	addlw	20
 26360  2579  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26361  257A  0086               	movwf	6
 26362  257B  3002               	movlw	2	; select bank5/6
 26363  257C  0087               	movwf	7
 26364  257D  3000               	movlw	0
 26365  257E  3FC0               	movwi [0]fsr1
 26366  257F  3FC1               	movwi [1]fsr1
 26367  2580                     l8979:	
 26368  2580  3001               	movlw	1
 26369  2581  0020               	movlb	0	; select bank0
 26370  2582  07A8               	addwf	matrix_secret_check@i,f
 26371  2583  3000               	movlw	0
 26372  2584  3DA9               	addwfc	matrix_secret_check@i+1,f
 26373  2585  2CD4               	goto	l8981
 26374  2586                     l8983:	
 26375                           
 26376                           ;matrix_task.c: 119: }
 26377                           ;matrix_task.c: 120: }
 26378                           ;matrix_task.c: 121: return 0;
 26379  2586  3000               	movlw	0
 26380  2587  0008               	return
 26381  2588                     __end_of_matrix_secret_check:	
 26382                           
 26383                           	psect	text28
 26384  242A                     __ptext28:	
 26385 ;; *************** function _matrix_display_option *****************
 26386 ;; Defined at:
 26387 ;;		line 124 in file "matrix_task.c"
 26388 ;; Parameters:    Size  Location     Type
 26389 ;;  data            2   44[BANK0 ] PTR struct t_matrix_task
 26390 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26391 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26392 ;; Auto vars:     Size  Location     Type
 26393 ;;		None
 26394 ;; Return value:  Size  Location     Type
 26395 ;;                  1    wreg      void 
 26396 ;; Registers used:
 26397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26398 ;; Tracked objects:
 26399 ;;		On entry : 0/0
 26400 ;;		On exit  : 0/0
 26401 ;;		Unchanged: 0/0
 26402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26403 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26405 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26406 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26407 ;;Total ram usage:        4 bytes
 26408 ;; Hardware stack levels used:    1
 26409 ;; Hardware stack levels required when called:   10
 26410 ;; This function calls:
 26411 ;;		_marquee_speedy
 26412 ;; This function is called by:
 26413 ;;		_matrix_Main
 26414 ;; This function uses a non-reentrant model
 26415 ;;
 26416                           
 26417                           
 26418                           ;psect for function _matrix_display_option
 26419  242A                     _matrix_display_option:	
 26420                           
 26421                           ;matrix_task.c: 126: if(badge_locked ==1){
 26422                           
 26423                           ;incstack = 0
 26424                           ; Regs used in _matrix_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26425  242A  0021               	movlb	1	; select bank1
 26426  242B  0344               	decf	_badge_locked^(0+128),w
 26427  242C  1D03               	btfss	3,2
 26428  242D  2C5C               	goto	l8997
 26429                           
 26430                           ;matrix_task.c: 127: marquee_speedy("YOU ARE IN TOO DEEP     TAKE THE RED PILL    ", dat
      +                          a->noholdCount, 40);
 26431  242E  302F               	movlw	low (STR_83| (0+32768))
 26432  242F  0020               	movlb	0	; select bank0
 26433  2430  00BA               	movwf	marquee_speedy@string
 26434  2431  30B8               	movlw	high (STR_83| (0+32768))
 26435  2432  00BB               	movwf	marquee_speedy@string+1
 26436  2433  084C               	movf	matrix_display_option@data,w
 26437  2434  0086               	movwf	6
 26438  2435  084D               	movf	matrix_display_option@data+1,w
 26439  2436  0087               	movwf	7
 26440  2437  315D               	addfsr 1,29
 26441  2438  3F40               	moviw [0]fsr1
 26442  2439  00BC               	movwf	marquee_speedy@count
 26443  243A  3F41               	moviw [1]fsr1
 26444  243B  00BD               	movwf	marquee_speedy@count+1
 26445  243C  3028               	movlw	40
 26446  243D  00BE               	movwf	marquee_speedy@multiplier
 26447  243E  3000               	movlw	0
 26448  243F  00BF               	movwf	marquee_speedy@multiplier+1
 26449  2440  31AF  278D         	fcall	_marquee_speedy
 26450                           
 26451                           ;matrix_task.c: 128: data->display_state = MATRIX_STATE_DISPLAY;
 26452  2442  0020               	movlb	0	; select bank0
 26453  2443  084C               	movf	matrix_display_option@data,w
 26454  2444  3E02               	addlw	2
 26455  2445  00CE               	movwf	??_matrix_display_option
 26456  2446  3000               	movlw	0
 26457  2447  3D4D               	addwfc	matrix_display_option@data+1,w
 26458  2448  00CF               	movwf	??_matrix_display_option+1
 26459  2449  084E               	movf	??_matrix_display_option,w
 26460  244A  0086               	movwf	6
 26461  244B  084F               	movf	??_matrix_display_option+1,w
 26462  244C  0087               	movwf	7
 26463  244D  300A               	movlw	10
 26464  244E  0081               	movwf	1
 26465                           
 26466                           ;matrix_task.c: 129: data->martix_state = STILL_IN_MATRIX;
 26467  244F  084C               	movf	matrix_display_option@data,w
 26468  2450  3E01               	addlw	1
 26469  2451  00CE               	movwf	??_matrix_display_option
 26470  2452  3000               	movlw	0
 26471  2453  3D4D               	addwfc	matrix_display_option@data+1,w
 26472  2454  00CF               	movwf	??_matrix_display_option+1
 26473  2455  084E               	movf	??_matrix_display_option,w
 26474  2456  0086               	movwf	6
 26475  2457  084F               	movf	??_matrix_display_option+1,w
 26476  2458  0087               	movwf	7
 26477  2459  3001               	movlw	1
 26478  245A  0081               	movwf	1
 26479                           
 26480                           ;matrix_task.c: 130: return;
 26481  245B  0008               	return
 26482  245C                     l8997:	
 26483                           
 26484                           ;matrix_task.c: 131: }
 26485                           ;matrix_task.c: 133: if (data->display_state == MATRIX_DONE){
 26486  245C  0020               	movlb	0	; select bank0
 26487  245D  084C               	movf	matrix_display_option@data,w
 26488  245E  0086               	movwf	6
 26489  245F  084D               	movf	matrix_display_option@data+1,w
 26490  2460  0087               	movwf	7
 26491  2461  3142               	addfsr 1,2
 26492  2462  300B               	movlw	11
 26493  2463  0601               	xorwf	1,w
 26494  2464  1D03               	btfss	3,2
 26495  2465  2C75               	goto	l9001
 26496                           
 26497                           ;matrix_task.c: 134: marquee_speedy("YOU STAY IN WONDERLAND    ", data->noholdCount, 15)
      +                          ;
 26498  2466  308D               	movlw	low (STR_84| (0+32768))
 26499  2467  00BA               	movwf	marquee_speedy@string
 26500  2468  30B9               	movlw	high (STR_84| (0+32768))
 26501  2469  00BB               	movwf	marquee_speedy@string+1
 26502  246A  084C               	movf	matrix_display_option@data,w
 26503  246B  0086               	movwf	6
 26504  246C  084D               	movf	matrix_display_option@data+1,w
 26505  246D  0087               	movwf	7
 26506  246E  315D               	addfsr 1,29
 26507  246F  3F40               	moviw [0]fsr1
 26508  2470  00BC               	movwf	marquee_speedy@count
 26509  2471  3F41               	moviw [1]fsr1
 26510  2472  00BD               	movwf	marquee_speedy@count+1
 26511  2473  300F               	movlw	15
 26512  2474  2CA7               	goto	L12
 26513  2475                     l9001:	
 26514                           ;matrix_task.c: 135: }
 26515                           
 26516                           
 26517                           ;matrix_task.c: 136: else if (data->display_state != MATRIX_STATE_DISPLAY ){
 26518  2475  0020               	movlb	0	; select bank0
 26519  2476  084C               	movf	matrix_display_option@data,w
 26520  2477  0086               	movwf	6
 26521  2478  084D               	movf	matrix_display_option@data+1,w
 26522  2479  0087               	movwf	7
 26523  247A  3142               	addfsr 1,2
 26524  247B  300A               	movlw	10
 26525  247C  0601               	xorwf	1,w
 26526  247D  1903               	btfsc	3,2
 26527  247E  2C98               	goto	l9005
 26528                           
 26529                           ;matrix_task.c: 138: marquee_speedy(matrix_option[data->display_state], data->noholdCoun
      +                          t, 20);
 26530  247F  084C               	movf	matrix_display_option@data,w
 26531  2480  0086               	movwf	6
 26532  2481  084D               	movf	matrix_display_option@data+1,w
 26533  2482  0087               	movwf	7
 26534  2483  3142               	addfsr 1,2
 26535  2484  3501               	lslf	1,w
 26536  2485  3ED8               	addlw	(low (_matrix_option| (0+768)))& (0+255)
 26537  2486  0086               	movwf	6
 26538  2487  3003               	movlw	3	; select bank7/8
 26539  2488  0087               	movwf	7
 26540  2489  3F40               	moviw [0]fsr1
 26541  248A  00BA               	movwf	marquee_speedy@string
 26542  248B  3F41               	moviw [1]fsr1
 26543  248C  00BB               	movwf	marquee_speedy@string+1
 26544  248D  084C               	movf	matrix_display_option@data,w
 26545  248E  0086               	movwf	6
 26546  248F  084D               	movf	matrix_display_option@data+1,w
 26547  2490  0087               	movwf	7
 26548  2491  315D               	addfsr 1,29
 26549  2492  3F40               	moviw [0]fsr1
 26550  2493  00BC               	movwf	marquee_speedy@count
 26551  2494  3F41               	moviw [1]fsr1
 26552  2495  00BD               	movwf	marquee_speedy@count+1
 26553  2496  3014               	movlw	20
 26554  2497  2CA7               	goto	L12
 26555  2498                     l9005:	
 26556                           ;matrix_task.c: 139: }
 26557                           
 26558                           
 26559                           ;matrix_task.c: 140: else{
 26560                           ;matrix_task.c: 141: marquee_speedy("THE CHOICE IS YOURS   ", data->noholdCount, 30);
 26561  2498  30DD               	movlw	low (STR_85| (0+32768))
 26562  2499  0020               	movlb	0	; select bank0
 26563  249A  00BA               	movwf	marquee_speedy@string
 26564  249B  30B9               	movlw	high (STR_85| (0+32768))
 26565  249C  00BB               	movwf	marquee_speedy@string+1
 26566  249D  084C               	movf	matrix_display_option@data,w
 26567  249E  0086               	movwf	6
 26568  249F  084D               	movf	matrix_display_option@data+1,w
 26569  24A0  0087               	movwf	7
 26570  24A1  315D               	addfsr 1,29
 26571  24A2  3F40               	moviw [0]fsr1
 26572  24A3  00BC               	movwf	marquee_speedy@count
 26573  24A4  3F41               	moviw [1]fsr1
 26574  24A5  00BD               	movwf	marquee_speedy@count+1
 26575  24A6  301E               	movlw	30
 26576  24A7                     L12:	
 26577  24A7  00BE               	movwf	marquee_speedy@multiplier
 26578  24A8  3000               	movlw	0
 26579  24A9  00BF               	movwf	marquee_speedy@multiplier+1
 26580  24AA  31AF  278D  31A4   	fcall	_marquee_speedy
 26581                           
 26582                           ;matrix_task.c: 142: }
 26583                           ;matrix_task.c: 144: if (data -> displayTickdown == 0 && data->display_state != MATRIX_D
      +                          ONE ){
 26584  24AD  0020               	movlb	0	; select bank0
 26585  24AE  084C               	movf	matrix_display_option@data,w
 26586  24AF  0086               	movwf	6
 26587  24B0  084D               	movf	matrix_display_option@data+1,w
 26588  24B1  0087               	movwf	7
 26589  24B2  3147               	addfsr 1,7
 26590  24B3  0016               	moviw fsr1++
 26591  24B4  0401               	iorwf	1,w
 26592  24B5  1D03               	btfss	3,2
 26593  24B6  0008               	return
 26594  24B7  084C               	movf	matrix_display_option@data,w
 26595  24B8  0086               	movwf	6
 26596  24B9  084D               	movf	matrix_display_option@data+1,w
 26597  24BA  0087               	movwf	7
 26598  24BB  3142               	addfsr 1,2
 26599  24BC  300B               	movlw	11
 26600  24BD  0601               	xorwf	1,w
 26601  24BE  1903               	btfsc	3,2
 26602  24BF  0008               	return
 26603                           
 26604                           ;matrix_task.c: 145: data->display_state = MATRIX_STATE_DISPLAY;
 26605  24C0  084C               	movf	matrix_display_option@data,w
 26606  24C1  3E02               	addlw	2
 26607  24C2  00CE               	movwf	??_matrix_display_option
 26608  24C3  3000               	movlw	0
 26609  24C4  3D4D               	addwfc	matrix_display_option@data+1,w
 26610  24C5  00CF               	movwf	??_matrix_display_option+1
 26611  24C6  084E               	movf	??_matrix_display_option,w
 26612  24C7  0086               	movwf	6
 26613  24C8  084F               	movf	??_matrix_display_option+1,w
 26614  24C9  0087               	movwf	7
 26615  24CA  300A               	movlw	10
 26616  24CB  0081               	movwf	1
 26617  24CC  0008               	return
 26618  24CD                     __end_of_matrix_display_option:	
 26619                           
 26620                           	psect	text29
 26621  2BDA                     __ptext29:	
 26622 ;; *************** function _slot_Setup *****************
 26623 ;; Defined at:
 26624 ;;		line 48 in file "slot_task.c"
 26625 ;; Parameters:    Size  Location     Type
 26626 ;;  taskData        2   15[BANK0 ] PTR void 
 26627 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26628 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26629 ;; Auto vars:     Size  Location     Type
 26630 ;;  data            2   20[BANK0 ] PTR struct t_slot_taskDa
 26631 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26632 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26633 ;; Return value:  Size  Location     Type
 26634 ;;                  1    wreg      void 
 26635 ;; Registers used:
 26636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26637 ;; Tracked objects:
 26638 ;;		On entry : 0/0
 26639 ;;		On exit  : 0/0
 26640 ;;		Unchanged: 0/0
 26641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26642 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26643 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26644 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26645 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26646 ;;Total ram usage:        7 bytes
 26647 ;; Hardware stack levels used:    1
 26648 ;; Hardware stack levels required when called:    6
 26649 ;; This function calls:
 26650 ;;		___lwmod
 26651 ;;		_memset
 26652 ;;		_rand
 26653 ;; This function is called by:
 26654 ;;		_menu_Main
 26655 ;;		_locked_Main
 26656 ;;		_slot_Init
 26657 ;;		_slot_Main
 26658 ;; This function uses a non-reentrant model
 26659 ;;
 26660                           
 26661                           
 26662                           ;psect for function _slot_Setup
 26663  2BDA                     _slot_Setup:	
 26664                           
 26665                           ;slot_task.c: 49: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 26666                           
 26667                           ;incstack = 0
 26668                           ; Regs used in _slot_Setup: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 26669  2BDA  0020               	movlb	0	; select bank0
 26670  2BDB  0830               	movf	slot_Setup@taskData+1,w
 26671  2BDC  00B5               	movwf	slot_Setup@data+1
 26672  2BDD  082F               	movf	slot_Setup@taskData,w
 26673  2BDE  00B4               	movwf	slot_Setup@data
 26674                           
 26675                           ;slot_task.c: 50: slot_taskData = data;
 26676  2BDF  0835               	movf	slot_Setup@data+1,w
 26677  2BE0  0021               	movlb	1	; select bank1
 26678  2BE1  00BD               	movwf	(_slot_taskData+1)^(0+128)
 26679  2BE2  0020               	movlb	0	; select bank0
 26680  2BE3  0834               	movf	slot_Setup@data,w
 26681  2BE4  0021               	movlb	1	; select bank1
 26682  2BE5  00BC               	movwf	_slot_taskData^(0+128)
 26683                           
 26684                           ;slot_task.c: 51: data->displayTickCount = 0;
 26685  2BE6  0020               	movlb	0	; select bank0
 26686  2BE7  0834               	movf	slot_Setup@data,w
 26687  2BE8  0086               	movwf	6
 26688  2BE9  0835               	movf	slot_Setup@data+1,w
 26689  2BEA  0087               	movwf	7
 26690  2BEB  3143               	addfsr 1,3
 26691  2BEC  3000               	movlw	0
 26692  2BED  3FC0               	movwi [0]fsr1
 26693  2BEE  3FC1               	movwi [1]fsr1
 26694                           
 26695                           ;slot_task.c: 52: data->delayTickCount = 0;
 26696  2BEF  0834               	movf	slot_Setup@data,w
 26697  2BF0  0086               	movwf	6
 26698  2BF1  0835               	movf	slot_Setup@data+1,w
 26699  2BF2  0087               	movwf	7
 26700  2BF3  3145               	addfsr 1,5
 26701  2BF4  3000               	movlw	0
 26702  2BF5  3FC0               	movwi [0]fsr1
 26703  2BF6  3FC1               	movwi [1]fsr1
 26704                           
 26705                           ;slot_task.c: 53: memset(data->slot_print_buf, 0x00, 20);
 26706  2BF7  0834               	movf	slot_Setup@data,w
 26707  2BF8  3E0B               	addlw	11
 26708  2BF9  00F1               	movwf	memset@p1
 26709  2BFA  3000               	movlw	0
 26710  2BFB  3D35               	addwfc	slot_Setup@data+1,w
 26711  2BFC  00F2               	movwf	memset@p1+1
 26712  2BFD  3000               	movlw	0
 26713  2BFE  00F3               	movwf	memset@c
 26714  2BFF  00F4               	movwf	memset@c+1
 26715  2C00  3014               	movlw	20
 26716  2C01  00F5               	movwf	memset@n
 26717  2C02  3000               	movlw	0
 26718  2C03  00F6               	movwf	memset@n+1
 26719  2C04  31B3  23C0  31AB   	fcall	_memset
 26720                           
 26721                           ;slot_task.c: 54: if (!badge_locked) {
 26722  2C07  0021               	movlb	1	; select bank1
 26723  2C08  0844               	movf	_badge_locked^(0+128),w
 26724  2C09  1D03               	btfss	3,2
 26725  2C0A  2C23               	goto	l8629
 26726                           
 26727                           ;slot_task.c: 55: Shot_Index = (u8)rand() % (sizeof(Shot_Options)/sizeof(Shot_Options[0]
      +                          ));
 26728  2C0B  3009               	movlw	9
 26729  2C0C  0020               	movlb	0	; select bank0
 26730  2C0D  00AB               	movwf	___lwmod@divisor
 26731  2C0E  3000               	movlw	0
 26732  2C0F  00AC               	movwf	___lwmod@divisor+1
 26733  2C10  31A8  20FB  31AB   	fcall	_rand
 26734  2C13  0020               	movlb	0	; select bank0
 26735  2C14  0824               	movf	?_rand,w
 26736  2C15  00B1               	movwf	??_slot_Setup
 26737  2C16  01B2               	clrf	??_slot_Setup+1
 26738  2C17  0831               	movf	??_slot_Setup,w
 26739  2C18  00AD               	movwf	___lwmod@dividend
 26740  2C19  0832               	movf	??_slot_Setup+1,w
 26741  2C1A  00AE               	movwf	___lwmod@dividend+1
 26742  2C1B  31B5  25A1  31AB   	fcall	___lwmod
 26743  2C1E  0020               	movlb	0	; select bank0
 26744  2C1F  082B               	movf	?___lwmod,w
 26745  2C20  00B3               	movwf	??_slot_Setup+2
 26746  2C21  0833               	movf	??_slot_Setup+2,w
 26747  2C22  2C27               	goto	L13
 26748  2C23                     l8629:	
 26749                           ;slot_task.c: 56: }
 26750                           
 26751                           
 26752                           ;slot_task.c: 57: else {
 26753                           ;slot_task.c: 58: Shot_Index = ((sizeof(Shot_Options)/sizeof(Shot_Options[0]))-1);
 26754  2C23  3008               	movlw	8
 26755  2C24  0020               	movlb	0	; select bank0
 26756  2C25  00B1               	movwf	??_slot_Setup
 26757  2C26  0831               	movf	??_slot_Setup,w
 26758  2C27                     L13:	
 26759  2C27  00FC               	movwf	_Shot_Index
 26760                           
 26761                           ;slot_task.c: 59: }
 26762                           ;slot_task.c: 61: Leds_idx = 1;
 26763  2C28  3001               	movlw	1
 26764  2C29  0021               	movlb	1	; select bank1
 26765  2C2A  00D0               	movwf	_Leds_idx^(0+128)
 26766  2C2B  3000               	movlw	0
 26767  2C2C  00D1               	movwf	(_Leds_idx^(0+128)+1)
 26768  2C2D  0008               	return
 26769  2C2E                     __end_of_slot_Setup:	
 26770                           
 26771                           	psect	text30
 26772  333E                     __ptext30:	
 26773 ;; *************** function _locked_unlock_leds *****************
 26774 ;; Defined at:
 26775 ;;		line 71 in file "locked_task.c"
 26776 ;; Parameters:    Size  Location     Type
 26777 ;;		None
 26778 ;; Auto vars:     Size  Location     Type
 26779 ;;		None
 26780 ;; Return value:  Size  Location     Type
 26781 ;;                  2  1249[None  ] unsigned int 
 26782 ;; Registers used:
 26783 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26784 ;; Tracked objects:
 26785 ;;		On entry : 0/0
 26786 ;;		On exit  : 0/0
 26787 ;;		Unchanged: 0/0
 26788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26791 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26792 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26793 ;;Total ram usage:        2 bytes
 26794 ;; Hardware stack levels used:    1
 26795 ;; Hardware stack levels required when called:    4
 26796 ;; This function calls:
 26797 ;;		Nothing
 26798 ;; This function is called by:
 26799 ;;		_locked_Main
 26800 ;; This function uses a non-reentrant model
 26801 ;;
 26802                           
 26803                           
 26804                           ;psect for function _locked_unlock_leds
 26805  333E                     _locked_unlock_leds:	
 26806                           
 26807                           ;locked_task.c: 72: locked_locking_leds_idx = 0;
 26808                           
 26809                           ;incstack = 0
 26810                           ; Regs used in _locked_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 26811  333E  0021               	movlb	1	; select bank1
 26812  333F  01A4               	clrf	_locked_locking_leds_idx^(0+128)
 26813  3340  01A5               	clrf	(_locked_locking_leds_idx+1)^(0+128)
 26814                           
 26815                           ;locked_task.c: 73: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 26816  3341  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 26817  3342  3E20               	addlw	(low (_locked_locking_leds| (0+512)))& (0+255)
 26818  3343  0086               	movwf	6
 26819  3344  3002               	movlw	2	; select bank4/5
 26820  3345  0087               	movwf	7
 26821  3346  3F40               	moviw [0]fsr1
 26822  3347  00F1               	movwf	??_locked_unlock_leds
 26823  3348  3F41               	moviw [1]fsr1
 26824  3349  00F2               	movwf	??_locked_unlock_leds+1
 26825  334A  0852               	movf	_locked_lock_base_leds^(0+128),w
 26826  334B  0471               	iorwf	??_locked_unlock_leds,w
 26827  334C  00A2               	movwf	_locked_leds^(0+128)
 26828  334D  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 26829  334E  0472               	iorwf	??_locked_unlock_leds+1,w
 26830  334F  00A3               	movwf	(_locked_leds+1)^(0+128)
 26831  3350  0008               	return
 26832  3351                     __end_of_locked_unlock_leds:	
 26833                           ;locked_task.c: 74: return locked_leds;
 26834                           ;	Return value of _locked_unlock_leds is never used
 26835                           
 26836                           
 26837                           	psect	text31
 26838  100F                     __ptext31:	
 26839 ;; *************** function _locked_secret_check *****************
 26840 ;; Defined at:
 26841 ;;		line 119 in file "locked_task.c"
 26842 ;; Parameters:    Size  Location     Type
 26843 ;;  data            2    7[COMMON] PTR struct t_locked_task
 26844 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26845 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26846 ;;  buttonPresse    1    9[COMMON] unsigned char 
 26847 ;; Auto vars:     Size  Location     Type
 26848 ;;  i               2    8[BANK0 ] unsigned int 
 26849 ;;  hit_counter     6    0        unsigned char [6]
 26850 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 26851 ;;  size            2    3[BANK0 ] unsigned int 
 26852 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 26853 ;;		 -> locked_secret_inputs.inputs(20), locked_secret_inputs(25), 
 26854 ;; Return value:  Size  Location     Type
 26855 ;;                  1    wreg      unsigned char 
 26856 ;; Registers used:
 26857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26858 ;; Tracked objects:
 26859 ;;		On entry : 0/0
 26860 ;;		On exit  : 0/0
 26861 ;;		Unchanged: 0/0
 26862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26863 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26864 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26865 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26866 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26867 ;;Total ram usage:       13 bytes
 26868 ;; Hardware stack levels used:    1
 26869 ;; Hardware stack levels required when called:    5
 26870 ;; This function calls:
 26871 ;;		___bmul
 26872 ;;		_strlen
 26873 ;; This function is called by:
 26874 ;;		_locked_Main
 26875 ;; This function uses a non-reentrant model
 26876 ;;
 26877                           
 26878                           
 26879                           ;psect for function _locked_secret_check
 26880  100F                     _locked_secret_check:	
 26881                           
 26882                           ;locked_task.c: 120: u8 *inputs;
 26883                           ;locked_task.c: 121: u16 size = sizeof(locked_secret_inputs) / sizeof(locked_secret_inpu
      +                          ts[0]);
 26884                           
 26885                           ;incstack = 0
 26886                           ; Regs used in _locked_secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26887  100F  3001               	movlw	1
 26888  1010  0020               	movlb	0	; select bank0
 26889  1011  00A3               	movwf	locked_secret_check@size
 26890  1012  3000               	movlw	0
 26891  1013  00A4               	movwf	locked_secret_check@size+1
 26892                           
 26893                           ;locked_task.c: 122: u16 currents_size;
 26894                           ;locked_task.c: 123: char hit_counter[6];
 26895                           ;locked_task.c: 125: for (u16 i = 0; i < size; i++){
 26896  1014  01A8               	clrf	locked_secret_check@i
 26897  1015  01A9               	clrf	locked_secret_check@i+1
 26898  1016                     l8871:	
 26899  1016  0824               	movf	locked_secret_check@size+1,w
 26900  1017  0229               	subwf	locked_secret_check@i+1,w
 26901  1018  1D03               	skipz
 26902  1019  281C               	goto	u5475
 26903  101A  0823               	movf	locked_secret_check@size,w
 26904  101B  0228               	subwf	locked_secret_check@i,w
 26905  101C                     u5475:	
 26906  101C  1803               	btfsc	3,0
 26907  101D  28C9               	goto	l8873
 26908                           
 26909                           ;locked_task.c: 126: inputs = locked_secret_inputs[i].inputs;
 26910  101E  3019               	movlw	25
 26911  101F  00A0               	movwf	??_locked_secret_check
 26912  1020  0820               	movf	??_locked_secret_check,w
 26913  1021  00F1               	movwf	___bmul@multiplicand
 26914  1022  0828               	movf	locked_secret_check@i,w
 26915  1023  31B3  2308  3190   	fcall	___bmul
 26916  1026  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26917  1027  0020               	movlb	0	; select bank0
 26918  1028  00A1               	movwf	??_locked_secret_check+1
 26919  1029  0821               	movf	??_locked_secret_check+1,w
 26920  102A  00A7               	movwf	locked_secret_check@inputs
 26921                           
 26922                           ;locked_task.c: 128: if (buttonPressed == inputs[locked_secret_inputs[i].idx]){
 26923  102B  3019               	movlw	25
 26924  102C  00A0               	movwf	??_locked_secret_check
 26925  102D  0820               	movf	??_locked_secret_check,w
 26926  102E  00F1               	movwf	___bmul@multiplicand
 26927  102F  0828               	movf	locked_secret_check@i,w
 26928  1030  31B3  2308  3190   	fcall	___bmul
 26929  1033  3E14               	addlw	20
 26930  1034  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26931  1035  0086               	movwf	6
 26932  1036  3002               	movlw	2	; select bank4/5
 26933  1037  0087               	movwf	7
 26934  1038  0801               	movf	1,w
 26935  1039  0020               	movlb	0	; select bank0
 26936  103A  0727               	addwf	locked_secret_check@inputs,w
 26937  103B  00A1               	movwf	??_locked_secret_check+1
 26938  103C  0821               	movf	??_locked_secret_check+1,w
 26939  103D  0086               	movwf	6
 26940  103E  3002               	movlw	2	; select bank4/5
 26941  103F  0087               	movwf	7
 26942  1040  0801               	movf	1,w
 26943  1041  0679               	xorwf	locked_secret_check@buttonPressed,w
 26944  1042  1D03               	skipz
 26945  1043  28B2               	goto	l8867
 26946                           
 26947                           ;locked_task.c: 129: currents_size = strlen((const char *)inputs);
 26948  1044  0827               	movf	locked_secret_check@inputs,w
 26949  1045  00F1               	movwf	strlen@s
 26950  1046  3002               	movlw	2
 26951  1047  00F2               	movwf	strlen@s+1
 26952  1048  31B4  2464  3190   	fcall	_strlen
 26953  104B  0872               	movf	?_strlen+1,w
 26954  104C  0020               	movlb	0	; select bank0
 26955  104D  00A6               	movwf	locked_secret_check@currents_size+1
 26956  104E  0871               	movf	?_strlen,w
 26957  104F  00A5               	movwf	locked_secret_check@currents_size
 26958                           
 26959                           ;locked_task.c: 130: locked_secret_inputs[i].idx++;
 26960  1050  3019               	movlw	25
 26961  1051  00A0               	movwf	??_locked_secret_check
 26962  1052  0820               	movf	??_locked_secret_check,w
 26963  1053  00F1               	movwf	___bmul@multiplicand
 26964  1054  0828               	movf	locked_secret_check@i,w
 26965  1055  31B3  2308  3190   	fcall	___bmul
 26966  1058  3E14               	addlw	20
 26967  1059  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26968  105A  0086               	movwf	6
 26969  105B  3002               	movlw	2	; select bank4/5
 26970  105C  0087               	movwf	7
 26971  105D  3001               	movlw	1
 26972  105E  0781               	addwf	1,f
 26973  105F  3141               	addfsr 1,1
 26974  1060  1803               	skipnc
 26975  1061  0A81               	incf	1,f
 26976                           
 26977                           ;locked_task.c: 132: if (locked_secret_inputs[i].idx == currents_size) {
 26978  1062  3019               	movlw	25
 26979  1063  0020               	movlb	0	; select bank0
 26980  1064  00A0               	movwf	??_locked_secret_check
 26981  1065  0820               	movf	??_locked_secret_check,w
 26982  1066  00F1               	movwf	___bmul@multiplicand
 26983  1067  0828               	movf	locked_secret_check@i,w
 26984  1068  31B3  2308  3190   	fcall	___bmul
 26985  106B  3E14               	addlw	20
 26986  106C  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26987  106D  0086               	movwf	6
 26988  106E  3002               	movlw	2	; select bank4/5
 26989  106F  0087               	movwf	7
 26990  1070  3F40               	moviw [0]fsr1
 26991  1071  0020               	movlb	0	; select bank0
 26992  1072  00A1               	movwf	??_locked_secret_check+1
 26993  1073  3F41               	moviw [1]fsr1
 26994  1074  00A2               	movwf	??_locked_secret_check+2
 26995  1075  0826               	movf	locked_secret_check@currents_size+1,w
 26996  1076  0622               	xorwf	??_locked_secret_check+2,w
 26997  1077  1D03               	skipz
 26998  1078  287B               	goto	u5465
 26999  1079  0825               	movf	locked_secret_check@currents_size,w
 27000  107A  0621               	xorwf	??_locked_secret_check+1,w
 27001  107B                     u5465:	
 27002  107B  1D03               	skipz
 27003  107C  28C3               	goto	l8869
 27004                           
 27005                           ;locked_task.c: 134: locked_secret_inputs[i].idx = 0;
 27006  107D  3019               	movlw	25
 27007  107E  00A0               	movwf	??_locked_secret_check
 27008  107F  0820               	movf	??_locked_secret_check,w
 27009  1080  00F1               	movwf	___bmul@multiplicand
 27010  1081  0828               	movf	locked_secret_check@i,w
 27011  1082  31B3  2308  3190   	fcall	___bmul
 27012  1085  3E14               	addlw	20
 27013  1086  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 27014  1087  0086               	movwf	6
 27015  1088  3002               	movlw	2	; select bank4/5
 27016  1089  0087               	movwf	7
 27017  108A  3000               	movlw	0
 27018  108B  3FC0               	movwi [0]fsr1
 27019  108C  3FC1               	movwi [1]fsr1
 27020                           
 27021                           ;locked_task.c: 137: *(locked_secret_inputs[i].variable) = (u16) locked_secret_inputs[i]
      +                          .value;
 27022  108D  3019               	movlw	25
 27023  108E  0020               	movlb	0	; select bank0
 27024  108F  00A0               	movwf	??_locked_secret_check
 27025  1090  0820               	movf	??_locked_secret_check,w
 27026  1091  00F1               	movwf	___bmul@multiplicand
 27027  1092  0828               	movf	locked_secret_check@i,w
 27028  1093  31B3  2308  3190   	fcall	___bmul
 27029  1096  3E17               	addlw	23
 27030  1097  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 27031  1098  0086               	movwf	6
 27032  1099  3002               	movlw	2	; select bank4/5
 27033  109A  0087               	movwf	7
 27034  109B  3019               	movlw	25
 27035  109C  0020               	movlb	0	; select bank0
 27036  109D  00A1               	movwf	??_locked_secret_check+1
 27037  109E  0821               	movf	??_locked_secret_check+1,w
 27038  109F  00F1               	movwf	___bmul@multiplicand
 27039  10A0  0828               	movf	locked_secret_check@i,w
 27040  10A1  31B3  2308         	fcall	___bmul
 27041  10A3  3E16               	addlw	22
 27042  10A4  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 27043  10A5  0084               	movwf	4
 27044  10A6  3002               	movlw	2	; select bank4/5
 27045  10A7  0085               	movwf	5
 27046  10A8  0800               	movf	0,w
 27047  10A9  0084               	movwf	4
 27048  10AA  3001               	movlw	1	; select bank2/3
 27049  10AB  0085               	movwf	5
 27050  10AC  3F40               	moviw [0]fsr1
 27051  10AD  3F80               	movwi [0]fsr0
 27052  10AE  3F41               	moviw [1]fsr1
 27053  10AF  3F81               	movwi [1]fsr0
 27054                           
 27055                           ;locked_task.c: 139: return 1;
 27056  10B0  3001               	movlw	1
 27057  10B1  0008               	return
 27058  10B2                     l8867:	
 27059                           ;locked_task.c: 140: }
 27060                           ;locked_task.c: 141: } else {
 27061                           
 27062                           
 27063                           ;locked_task.c: 143: locked_secret_inputs[i].idx = 0;
 27064  10B2  3019               	movlw	25
 27065  10B3  0020               	movlb	0	; select bank0
 27066  10B4  00A0               	movwf	??_locked_secret_check
 27067  10B5  0820               	movf	??_locked_secret_check,w
 27068  10B6  00F1               	movwf	___bmul@multiplicand
 27069  10B7  0828               	movf	locked_secret_check@i,w
 27070  10B8  31B3  2308  3190   	fcall	___bmul
 27071  10BB  3E14               	addlw	20
 27072  10BC  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 27073  10BD  0086               	movwf	6
 27074  10BE  3002               	movlw	2	; select bank4/5
 27075  10BF  0087               	movwf	7
 27076  10C0  3000               	movlw	0
 27077  10C1  3FC0               	movwi [0]fsr1
 27078  10C2  3FC1               	movwi [1]fsr1
 27079  10C3                     l8869:	
 27080  10C3  3001               	movlw	1
 27081  10C4  0020               	movlb	0	; select bank0
 27082  10C5  07A8               	addwf	locked_secret_check@i,f
 27083  10C6  3000               	movlw	0
 27084  10C7  3DA9               	addwfc	locked_secret_check@i+1,f
 27085  10C8  2816               	goto	l8871
 27086  10C9                     l8873:	
 27087                           
 27088                           ;locked_task.c: 144: }
 27089                           ;locked_task.c: 145: }
 27090                           ;locked_task.c: 146: return 0;
 27091  10C9  3000               	movlw	0
 27092  10CA  0008               	return
 27093  10CB                     __end_of_locked_secret_check:	
 27094                           
 27095                           	psect	text32
 27096  3308                     __ptext32:	
 27097 ;; *************** function ___bmul *****************
 27098 ;; Defined at:
 27099 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul8.c"
 27100 ;; Parameters:    Size  Location     Type
 27101 ;;  multiplier      1    wreg     unsigned char 
 27102 ;;  multiplicand    1    1[COMMON] unsigned char 
 27103 ;; Auto vars:     Size  Location     Type
 27104 ;;  multiplier      1    4[COMMON] unsigned char 
 27105 ;;  product         1    3[COMMON] unsigned char 
 27106 ;; Return value:  Size  Location     Type
 27107 ;;                  1    wreg      unsigned char 
 27108 ;; Registers used:
 27109 ;;		wreg, status,2, status,0
 27110 ;; Tracked objects:
 27111 ;;		On entry : 0/0
 27112 ;;		On exit  : 0/0
 27113 ;;		Unchanged: 0/0
 27114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27115 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27116 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27117 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27118 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27119 ;;Total ram usage:        4 bytes
 27120 ;; Hardware stack levels used:    1
 27121 ;; Hardware stack levels required when called:    4
 27122 ;; This function calls:
 27123 ;;		Nothing
 27124 ;; This function is called by:
 27125 ;;		_matrix_secret_check
 27126 ;;		_secret_check
 27127 ;;		_locked_secret_check
 27128 ;; This function uses a non-reentrant model
 27129 ;;
 27130                           
 27131                           
 27132                           ;psect for function ___bmul
 27133  3308                     ___bmul:	
 27134                           
 27135                           ;incstack = 0
 27136                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 27137                           ;___bmul@multiplier stored from wreg
 27138  3308  00F4               	movwf	___bmul@multiplier
 27139  3309  01F3               	clrf	___bmul@product
 27140  330A                     l8545:	
 27141  330A  1C74               	btfss	___bmul@multiplier,0
 27142  330B  2B10               	goto	l8549
 27143  330C  0871               	movf	___bmul@multiplicand,w
 27144  330D  00F2               	movwf	??___bmul
 27145  330E  0872               	movf	??___bmul,w
 27146  330F  07F3               	addwf	___bmul@product,f
 27147  3310                     l8549:	
 27148  3310  1003               	clrc
 27149  3311  0DF1               	rlf	___bmul@multiplicand,f
 27150  3312  1003               	clrc
 27151  3313  0CF4               	rrf	___bmul@multiplier,f
 27152  3314  0874               	movf	___bmul@multiplier,w
 27153  3315  1D03               	btfss	3,2
 27154  3316  2B0A               	goto	l8545
 27155  3317  0873               	movf	___bmul@product,w
 27156  3318  0008               	return
 27157  3319                     __end_of___bmul:	
 27158                           
 27159                           	psect	text33
 27160  33F3                     __ptext33:	
 27161 ;; *************** function _locked_lock_leds *****************
 27162 ;; Defined at:
 27163 ;;		line 63 in file "locked_task.c"
 27164 ;; Parameters:    Size  Location     Type
 27165 ;;		None
 27166 ;; Auto vars:     Size  Location     Type
 27167 ;;  size            2    3[COMMON] unsigned int 
 27168 ;; Return value:  Size  Location     Type
 27169 ;;                  2  1246[None  ] unsigned int 
 27170 ;; Registers used:
 27171 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27172 ;; Tracked objects:
 27173 ;;		On entry : 0/0
 27174 ;;		On exit  : 0/0
 27175 ;;		Unchanged: 0/0
 27176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27178 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27179 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27180 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27181 ;;Total ram usage:        4 bytes
 27182 ;; Hardware stack levels used:    1
 27183 ;; Hardware stack levels required when called:    4
 27184 ;; This function calls:
 27185 ;;		Nothing
 27186 ;; This function is called by:
 27187 ;;		_locked_Init
 27188 ;;		_locked_Main
 27189 ;; This function uses a non-reentrant model
 27190 ;;
 27191                           
 27192                           
 27193                           ;psect for function _locked_lock_leds
 27194  33F3                     _locked_lock_leds:	
 27195                           
 27196                           ;locked_task.c: 64: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 27197                           
 27198                           ;incstack = 0
 27199                           ; Regs used in _locked_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 27200  33F3  3006               	movlw	6
 27201  33F4  00F3               	movwf	locked_lock_leds@size
 27202  33F5  3000               	movlw	0
 27203  33F6  00F4               	movwf	locked_lock_leds@size+1
 27204                           
 27205                           ;locked_task.c: 65: locked_locking_leds_idx = size - 1;
 27206  33F7  0873               	movf	locked_lock_leds@size,w
 27207  33F8  3EFF               	addlw	255
 27208  33F9  0021               	movlb	1	; select bank1
 27209  33FA  00A4               	movwf	_locked_locking_leds_idx^(0+128)
 27210  33FB  30FF               	movlw	255
 27211  33FC  3D74               	addwfc	locked_lock_leds@size+1,w
 27212  33FD  00A5               	movwf	(_locked_locking_leds_idx+1)^(0+128)
 27213                           
 27214                           ;locked_task.c: 66: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 27215  33FE  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 27216  33FF  3E20               	addlw	(low (_locked_locking_leds| (0+512)))& (0+255)
 27217  3400  0086               	movwf	6
 27218  3401  3002               	movlw	2	; select bank4/5
 27219  3402  0087               	movwf	7
 27220  3403  3F40               	moviw [0]fsr1
 27221  3404  00F1               	movwf	??_locked_lock_leds
 27222  3405  3F41               	moviw [1]fsr1
 27223  3406  00F2               	movwf	??_locked_lock_leds+1
 27224  3407  0852               	movf	_locked_lock_base_leds^(0+128),w
 27225  3408  0471               	iorwf	??_locked_lock_leds,w
 27226  3409  00A2               	movwf	_locked_leds^(0+128)
 27227  340A  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 27228  340B  0472               	iorwf	??_locked_lock_leds+1,w
 27229  340C  00A3               	movwf	(_locked_leds+1)^(0+128)
 27230  340D  0008               	return
 27231  340E                     __end_of_locked_lock_leds:	
 27232                           ;locked_task.c: 67: return locked_leds;
 27233                           ;	Return value of _locked_lock_leds is never used
 27234                           
 27235                           
 27236                           	psect	text34
 27237  0800                     __ptext34:	
 27238 ;; *************** function _locked_get_unlock_leds *****************
 27239 ;; Defined at:
 27240 ;;		line 88 in file "locked_task.c"
 27241 ;; Parameters:    Size  Location     Type
 27242 ;;		None
 27243 ;; Auto vars:     Size  Location     Type
 27244 ;;  leds            2    3[COMMON] unsigned int 
 27245 ;; Return value:  Size  Location     Type
 27246 ;;                  2    1[COMMON] unsigned int 
 27247 ;; Registers used:
 27248 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27249 ;; Tracked objects:
 27250 ;;		On entry : 0/0
 27251 ;;		On exit  : 0/0
 27252 ;;		Unchanged: 0/0
 27253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27254 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27255 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27257 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27258 ;;Total ram usage:        4 bytes
 27259 ;; Hardware stack levels used:    1
 27260 ;; Hardware stack levels required when called:    4
 27261 ;; This function calls:
 27262 ;;		Nothing
 27263 ;; This function is called by:
 27264 ;;		_locked_Main
 27265 ;; This function uses a non-reentrant model
 27266 ;;
 27267                           
 27268                           
 27269                           ;psect for function _locked_get_unlock_leds
 27270  0800                     _locked_get_unlock_leds:	
 27271                           
 27272                           ;locked_task.c: 89: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 27273                           
 27274                           ;incstack = 0
 27275                           ; Regs used in _locked_get_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 27276  0800  0021               	movlb	1	; select bank1
 27277  0801  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 27278  0802  3E20               	addlw	(low (_locked_locking_leds| (0+512)))& (0+255)
 27279  0803  0086               	movwf	6
 27280  0804  3002               	movlw	2	; select bank4/5
 27281  0805  0087               	movwf	7
 27282  0806  3F40               	moviw [0]fsr1
 27283  0807  00F3               	movwf	locked_get_unlock_leds@leds
 27284  0808  3F41               	moviw [1]fsr1
 27285  0809  00F4               	movwf	locked_get_unlock_leds@leds+1
 27286                           
 27287                           ;locked_task.c: 92: if (locked_locking_leds_idx > 0){
 27288  080A  0824               	movf	_locked_locking_leds_idx^(0+128),w
 27289  080B  0425               	iorwf	(_locked_locking_leds_idx+1)^(0+128),w
 27290  080C  1903               	btfsc	3,2
 27291  080D  2812               	goto	l1257
 27292                           
 27293                           ;locked_task.c: 93: locked_locking_leds_idx -= 1;
 27294  080E  3001               	movlw	1
 27295  080F  02A4               	subwf	_locked_locking_leds_idx^(0+128),f
 27296  0810  3000               	movlw	0
 27297  0811  3BA5               	subwfb	(_locked_locking_leds_idx+1)^(0+128),f
 27298  0812                     l1257:	
 27299                           
 27300                           ;locked_task.c: 94: }
 27301                           ;locked_task.c: 95: return locked_lock_base_leds | leds;
 27302  0812  0873               	movf	locked_get_unlock_leds@leds,w
 27303  0813  0452               	iorwf	_locked_lock_base_leds^(0+128),w
 27304  0814  00F1               	movwf	?_locked_get_unlock_leds
 27305  0815  0874               	movf	locked_get_unlock_leds@leds+1,w
 27306  0816  0453               	iorwf	(_locked_lock_base_leds+1)^(0+128),w
 27307  0817  00F2               	movwf	?_locked_get_unlock_leds+1
 27308  0818  0008               	return
 27309  0819                     __end_of_locked_get_unlock_leds:	
 27310                           
 27311                           	psect	text35
 27312  3505                     __ptext35:	
 27313 ;; *************** function _locked_get_lock_leds *****************
 27314 ;; Defined at:
 27315 ;;		line 77 in file "locked_task.c"
 27316 ;; Parameters:    Size  Location     Type
 27317 ;;		None
 27318 ;; Auto vars:     Size  Location     Type
 27319 ;;  leds            2    7[COMMON] unsigned int 
 27320 ;;  size            2    5[COMMON] unsigned int 
 27321 ;; Return value:  Size  Location     Type
 27322 ;;                  2    1[COMMON] unsigned int 
 27323 ;; Registers used:
 27324 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27325 ;; Tracked objects:
 27326 ;;		On entry : 0/0
 27327 ;;		On exit  : 0/0
 27328 ;;		Unchanged: 0/0
 27329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27330 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27331 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27332 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27333 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27334 ;;Total ram usage:        8 bytes
 27335 ;; Hardware stack levels used:    1
 27336 ;; Hardware stack levels required when called:    4
 27337 ;; This function calls:
 27338 ;;		Nothing
 27339 ;; This function is called by:
 27340 ;;		_locked_Main
 27341 ;; This function uses a non-reentrant model
 27342 ;;
 27343                           
 27344                           
 27345                           ;psect for function _locked_get_lock_leds
 27346  3505                     _locked_get_lock_leds:	
 27347                           
 27348                           ;locked_task.c: 78: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 27349                           
 27350                           ;incstack = 0
 27351                           ; Regs used in _locked_get_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 27352  3505  3006               	movlw	6
 27353  3506  00F5               	movwf	locked_get_lock_leds@size
 27354  3507  3000               	movlw	0
 27355  3508  00F6               	movwf	locked_get_lock_leds@size+1
 27356                           
 27357                           ;locked_task.c: 79: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 27358  3509  0021               	movlb	1	; select bank1
 27359  350A  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 27360  350B  3E20               	addlw	(low (_locked_locking_leds| (0+512)))& (0+255)
 27361  350C  0086               	movwf	6
 27362  350D  3002               	movlw	2	; select bank4/5
 27363  350E  0087               	movwf	7
 27364  350F  3F40               	moviw [0]fsr1
 27365  3510  00F7               	movwf	locked_get_lock_leds@leds
 27366  3511  3F41               	moviw [1]fsr1
 27367  3512  00F8               	movwf	locked_get_lock_leds@leds+1
 27368                           
 27369                           ;locked_task.c: 82: if (locked_locking_leds_idx < size - 1){
 27370  3513  0875               	movf	locked_get_lock_leds@size,w
 27371  3514  3EFF               	addlw	255
 27372  3515  00F3               	movwf	??_locked_get_lock_leds
 27373  3516  30FF               	movlw	255
 27374  3517  3D76               	addwfc	locked_get_lock_leds@size+1,w
 27375  3518  00F4               	movwf	??_locked_get_lock_leds+1
 27376  3519  0874               	movf	??_locked_get_lock_leds+1,w
 27377  351A  0225               	subwf	(_locked_locking_leds_idx+1)^(0+128),w
 27378  351B  1D03               	skipz
 27379  351C  2D1F               	goto	u5435
 27380  351D  0873               	movf	??_locked_get_lock_leds,w
 27381  351E  0224               	subwf	_locked_locking_leds_idx^(0+128),w
 27382  351F                     u5435:	
 27383  351F  1803               	skipnc
 27384  3520  2D25               	goto	l1253
 27385                           
 27386                           ;locked_task.c: 83: locked_locking_leds_idx += 1;
 27387  3521  3001               	movlw	1
 27388  3522  07A4               	addwf	_locked_locking_leds_idx^(0+128),f
 27389  3523  3000               	movlw	0
 27390  3524  3DA5               	addwfc	(_locked_locking_leds_idx+1)^(0+128),f
 27391  3525                     l1253:	
 27392                           
 27393                           ;locked_task.c: 84: }
 27394                           ;locked_task.c: 85: return leds;
 27395  3525  0878               	movf	locked_get_lock_leds@leds+1,w
 27396  3526  00F2               	movwf	?_locked_get_lock_leds+1
 27397  3527  0877               	movf	locked_get_lock_leds@leds,w
 27398  3528  00F1               	movwf	?_locked_get_lock_leds
 27399  3529  0008               	return
 27400  352A                     __end_of_locked_get_lock_leds:	
 27401                           
 27402                           	psect	text36
 27403  28B9                     __ptext36:	
 27404 ;; *************** function _locked_clear *****************
 27405 ;; Defined at:
 27406 ;;		line 287 in file "locked_task.c"
 27407 ;; Parameters:    Size  Location     Type
 27408 ;;  data            2   25[BANK0 ] PTR struct t_locked_task
 27409 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 27410 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 27411 ;; Auto vars:     Size  Location     Type
 27412 ;;		None
 27413 ;; Return value:  Size  Location     Type
 27414 ;;                  1    wreg      void 
 27415 ;; Registers used:
 27416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27417 ;; Tracked objects:
 27418 ;;		On entry : 0/0
 27419 ;;		On exit  : 0/0
 27420 ;;		Unchanged: 0/0
 27421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27422 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27425 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27426 ;;Total ram usage:        2 bytes
 27427 ;; Hardware stack levels used:    1
 27428 ;; Hardware stack levels required when called:   10
 27429 ;; This function calls:
 27430 ;;		_nullifyBadge_segDisplayErase
 27431 ;;		_nullifyBadge_userLedsClr
 27432 ;; This function is called by:
 27433 ;;		_locked_Main
 27434 ;; This function uses a non-reentrant model
 27435 ;;
 27436                           
 27437                           
 27438                           ;psect for function _locked_clear
 27439  28B9                     _locked_clear:	
 27440                           
 27441                           ;locked_task.c: 289: data->delayTickCount = 0;
 27442                           
 27443                           ;incstack = 0
 27444                           ; Regs used in _locked_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27445  28B9  0020               	movlb	0	; select bank0
 27446  28BA  0839               	movf	locked_clear@data,w
 27447  28BB  0086               	movwf	6
 27448  28BC  083A               	movf	locked_clear@data+1,w
 27449  28BD  0087               	movwf	7
 27450  28BE  3141               	addfsr 1,1
 27451  28BF  3000               	movlw	0
 27452  28C0  3FC0               	movwi [0]fsr1
 27453  28C1  3FC1               	movwi [1]fsr1
 27454                           
 27455                           ;locked_task.c: 290: data->holdCountA = 0;
 27456  28C2  0839               	movf	locked_clear@data,w
 27457  28C3  0086               	movwf	6
 27458  28C4  083A               	movf	locked_clear@data+1,w
 27459  28C5  0087               	movwf	7
 27460  28C6  3143               	addfsr 1,3
 27461  28C7  3000               	movlw	0
 27462  28C8  3FC0               	movwi [0]fsr1
 27463  28C9  3FC1               	movwi [1]fsr1
 27464                           
 27465                           ;locked_task.c: 291: data->holdCountB = 0;
 27466  28CA  0839               	movf	locked_clear@data,w
 27467  28CB  0086               	movwf	6
 27468  28CC  083A               	movf	locked_clear@data+1,w
 27469  28CD  0087               	movwf	7
 27470  28CE  3145               	addfsr 1,5
 27471  28CF  3000               	movlw	0
 27472  28D0  3FC0               	movwi [0]fsr1
 27473  28D1  3FC1               	movwi [1]fsr1
 27474                           
 27475                           ;locked_task.c: 292: data->holdCountX = 0;
 27476  28D2  0839               	movf	locked_clear@data,w
 27477  28D3  0086               	movwf	6
 27478  28D4  083A               	movf	locked_clear@data+1,w
 27479  28D5  0087               	movwf	7
 27480  28D6  3147               	addfsr 1,7
 27481  28D7  3000               	movlw	0
 27482  28D8  3FC0               	movwi [0]fsr1
 27483  28D9  3FC1               	movwi [1]fsr1
 27484                           
 27485                           ;locked_task.c: 293: data->holdCountY = 0;
 27486  28DA  0839               	movf	locked_clear@data,w
 27487  28DB  0086               	movwf	6
 27488  28DC  083A               	movf	locked_clear@data+1,w
 27489  28DD  0087               	movwf	7
 27490  28DE  3149               	addfsr 1,9
 27491  28DF  3000               	movlw	0
 27492  28E0  3FC0               	movwi [0]fsr1
 27493  28E1  3FC1               	movwi [1]fsr1
 27494                           
 27495                           ;locked_task.c: 294: data->noholdCount = 0;
 27496  28E2  0839               	movf	locked_clear@data,w
 27497  28E3  0086               	movwf	6
 27498  28E4  083A               	movf	locked_clear@data+1,w
 27499  28E5  0087               	movwf	7
 27500  28E6  314B               	addfsr 1,11
 27501  28E7  3000               	movlw	0
 27502  28E8  3FC0               	movwi [0]fsr1
 27503  28E9  3FC1               	movwi [1]fsr1
 27504                           
 27505                           ;locked_task.c: 297: nullifyBadge_userLedsClr(data->badge);
 27506  28EA  0839               	movf	locked_clear@data,w
 27507  28EB  0086               	movwf	6
 27508  28EC  083A               	movf	locked_clear@data+1,w
 27509  28ED  0087               	movwf	7
 27510  28EE  0801               	movf	1,w
 27511  28EF  3187  27FA  31A8   	fcall	_nullifyBadge_userLedsClr
 27512                           
 27513                           ;locked_task.c: 298: nullifyBadge_segDisplayErase(data->badge);
 27514  28F2  0020               	movlb	0	; select bank0
 27515  28F3  0839               	movf	locked_clear@data,w
 27516  28F4  0086               	movwf	6
 27517  28F5  083A               	movf	locked_clear@data+1,w
 27518  28F6  0087               	movwf	7
 27519  28F7  0801               	movf	1,w
 27520  28F8  3198  2000         	fcall	_nullifyBadge_segDisplayErase
 27521  28FA  0008               	return
 27522  28FB                     __end_of_locked_clear:	
 27523                           
 27524                           	psect	text37
 27525  07FA                     __ptext37:	
 27526 ;; *************** function _nullifyBadge_userLedsClr *****************
 27527 ;; Defined at:
 27528 ;;		line 177 in file "nullifyBadge.c"
 27529 ;; Parameters:    Size  Location     Type
 27530 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 27531 ;;		 -> badge_inst(18), 
 27532 ;; Auto vars:     Size  Location     Type
 27533 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 27534 ;;		 -> badge_inst(18), 
 27535 ;; Return value:  Size  Location     Type
 27536 ;;                  1    wreg      void 
 27537 ;; Registers used:
 27538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27539 ;; Tracked objects:
 27540 ;;		On entry : 0/0
 27541 ;;		On exit  : 0/0
 27542 ;;		Unchanged: 0/0
 27543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27547 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27548 ;;Total ram usage:        1 bytes
 27549 ;; Hardware stack levels used:    1
 27550 ;; Hardware stack levels required when called:    8
 27551 ;; This function calls:
 27552 ;;		_displayL2_ClrUserLeds
 27553 ;; This function is called by:
 27554 ;;		_menu_Init
 27555 ;;		_menu_clear
 27556 ;;		_menu_Exit
 27557 ;;		_flashy_Init
 27558 ;;		_flashy_Exit
 27559 ;;		_locked_Init
 27560 ;;		_locked_clear
 27561 ;;		_locked_Exit
 27562 ;;		_secret_Init
 27563 ;;		_secret_Exit
 27564 ;;		_slot_Init
 27565 ;;		_slot_Exit
 27566 ;;		_matrix_Init
 27567 ;;		_matrix_Exit
 27568 ;; This function uses a non-reentrant model
 27569 ;;
 27570                           
 27571                           
 27572                           ;psect for function _nullifyBadge_userLedsClr
 27573  07FA                     _nullifyBadge_userLedsClr:	
 27574                           
 27575                           ;incstack = 0
 27576                           ; Regs used in _nullifyBadge_userLedsClr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 27577                           ;nullifyBadge_userLedsClr@badge stored from wreg
 27578  07FA  0020               	movlb	0	; select bank0
 27579  07FB  00AB               	movwf	nullifyBadge_userLedsClr@badge
 27580                           
 27581                           ;nullifyBadge.c: 178: displayL2_ClrUserLeds(&badge->display);
 27582  07FC  082B               	movf	nullifyBadge_userLedsClr@badge,w
 27583  07FD  31B2  22AA         	fcall	_displayL2_ClrUserLeds
 27584  07FF  0008               	return
 27585  0800                     __end_of_nullifyBadge_userLedsClr:	
 27586                           
 27587                           	psect	text38
 27588  32AA                     __ptext38:	
 27589 ;; *************** function _displayL2_ClrUserLeds *****************
 27590 ;; Defined at:
 27591 ;;		line 94 in file "nullifyBadge_displayL2.c"
 27592 ;; Parameters:    Size  Location     Type
 27593 ;;  display         1    wreg     PTR struct t_nullifyDisp
 27594 ;;		 -> badge_inst(18), 
 27595 ;; Auto vars:     Size  Location     Type
 27596 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 27597 ;;		 -> badge_inst(18), 
 27598 ;; Return value:  Size  Location     Type
 27599 ;;                  1    wreg      void 
 27600 ;; Registers used:
 27601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27602 ;; Tracked objects:
 27603 ;;		On entry : 0/0
 27604 ;;		On exit  : 0/0
 27605 ;;		Unchanged: 0/0
 27606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27608 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27610 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27611 ;;Total ram usage:        1 bytes
 27612 ;; Hardware stack levels used:    1
 27613 ;; Hardware stack levels required when called:    7
 27614 ;; This function calls:
 27615 ;;		_displayL1_SetUserLed
 27616 ;;		_displayL1_Update
 27617 ;; This function is called by:
 27618 ;;		_nullifyBadge_userLedsClr
 27619 ;; This function uses a non-reentrant model
 27620 ;;
 27621                           
 27622                           
 27623                           ;psect for function _displayL2_ClrUserLeds
 27624  32AA                     _displayL2_ClrUserLeds:	
 27625                           
 27626                           ;incstack = 0
 27627                           ; Regs used in _displayL2_ClrUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 27628                           ;displayL2_ClrUserLeds@display stored from wreg
 27629  32AA  00FB               	movwf	displayL2_ClrUserLeds@display
 27630                           
 27631                           ;nullifyBadge_displayL2.c: 95: displayL1_SetUserLed(&display->display_l1, 0);
 27632  32AB  3000               	movlw	0
 27633  32AC  00F1               	movwf	displayL1_SetUserLed@userLedVect
 27634  32AD  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 27635  32AE  087B               	movf	displayL2_ClrUserLeds@display,w
 27636  32AF  3E07               	addlw	7
 27637  32B0  31B3  2319  31B2   	fcall	_displayL1_SetUserLed
 27638                           
 27639                           ;nullifyBadge_displayL2.c: 96: displayL1_Update(&display->display_l1);
 27640  32B3  087B               	movf	displayL2_ClrUserLeds@display,w
 27641  32B4  3E07               	addlw	7
 27642  32B5  31B2  22E6         	fcall	_displayL1_Update
 27643  32B7  0008               	return
 27644  32B8                     __end_of_displayL2_ClrUserLeds:	
 27645                           
 27646                           	psect	text39
 27647  1800                     __ptext39:	
 27648 ;; *************** function _nullifyBadge_segDisplayErase *****************
 27649 ;; Defined at:
 27650 ;;		line 123 in file "nullifyBadge.c"
 27651 ;; Parameters:    Size  Location     Type
 27652 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 27653 ;;		 -> badge_inst(18), 
 27654 ;; Auto vars:     Size  Location     Type
 27655 ;;  badge           1   24[BANK0 ] PTR struct t_nullifyBadg
 27656 ;;		 -> badge_inst(18), 
 27657 ;; Return value:  Size  Location     Type
 27658 ;;                  1    wreg      void 
 27659 ;; Registers used:
 27660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27661 ;; Tracked objects:
 27662 ;;		On entry : 0/0
 27663 ;;		On exit  : 0/0
 27664 ;;		Unchanged: 0/0
 27665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27667 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27669 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27670 ;;Total ram usage:        1 bytes
 27671 ;; Hardware stack levels used:    1
 27672 ;; Hardware stack levels required when called:    9
 27673 ;; This function calls:
 27674 ;;		_displayL2_EraseSegDisplay
 27675 ;; This function is called by:
 27676 ;;		_menu_Init
 27677 ;;		_menu_clear
 27678 ;;		_menu_Exit
 27679 ;;		_flashy_Init
 27680 ;;		_flashy_Exit
 27681 ;;		_locked_Init
 27682 ;;		_locked_clear
 27683 ;;		_locked_Exit
 27684 ;;		_secret_Init
 27685 ;;		_secret_Exit
 27686 ;;		_slot_Init
 27687 ;;		_slot_Exit
 27688 ;;		_matrix_Init
 27689 ;;		_matrix_Exit
 27690 ;;		_fadeDisplay_Init
 27691 ;;		_fadeDisplay_Exit
 27692 ;; This function uses a non-reentrant model
 27693 ;;
 27694                           
 27695                           
 27696                           ;psect for function _nullifyBadge_segDisplayErase
 27697  1800                     _nullifyBadge_segDisplayErase:	
 27698                           
 27699                           ;incstack = 0
 27700                           ; Regs used in _nullifyBadge_segDisplayErase: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 27701                           ;nullifyBadge_segDisplayErase@badge stored from wreg
 27702  1800  0020               	movlb	0	; select bank0
 27703  1801  00B8               	movwf	nullifyBadge_segDisplayErase@badge
 27704                           
 27705                           ;nullifyBadge.c: 124: displayL2_EraseSegDisplay(&badge->display);
 27706  1802  0838               	movf	nullifyBadge_segDisplayErase@badge,w
 27707  1803  31B2  22D6         	fcall	_displayL2_EraseSegDisplay
 27708  1805  0008               	return
 27709  1806                     __end_of_nullifyBadge_segDisplayErase:	
 27710                           
 27711                           	psect	text40
 27712  32D6                     __ptext40:	
 27713 ;; *************** function _displayL2_EraseSegDisplay *****************
 27714 ;; Defined at:
 27715 ;;		line 83 in file "nullifyBadge_displayL2.c"
 27716 ;; Parameters:    Size  Location     Type
 27717 ;;  display         1    wreg     PTR struct t_nullifyDisp
 27718 ;;		 -> badge_inst(18), 
 27719 ;; Auto vars:     Size  Location     Type
 27720 ;;  display         1   23[BANK0 ] PTR struct t_nullifyDisp
 27721 ;;		 -> badge_inst(18), 
 27722 ;; Return value:  Size  Location     Type
 27723 ;;                  1    wreg      void 
 27724 ;; Registers used:
 27725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27726 ;; Tracked objects:
 27727 ;;		On entry : 0/0
 27728 ;;		On exit  : 0/0
 27729 ;;		Unchanged: 0/0
 27730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27734 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27735 ;;Total ram usage:        1 bytes
 27736 ;; Hardware stack levels used:    1
 27737 ;; Hardware stack levels required when called:    8
 27738 ;; This function calls:
 27739 ;;		_displayL1_Update
 27740 ;;		_displayL2_PutStr
 27741 ;; This function is called by:
 27742 ;;		_nullifyBadge_segDisplayErase
 27743 ;; This function uses a non-reentrant model
 27744 ;;
 27745                           
 27746                           
 27747                           ;psect for function _displayL2_EraseSegDisplay
 27748  32D6                     _displayL2_EraseSegDisplay:	
 27749                           
 27750                           ;incstack = 0
 27751                           ; Regs used in _displayL2_EraseSegDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27752                           ;displayL2_EraseSegDisplay@display stored from wreg
 27753  32D6  0020               	movlb	0	; select bank0
 27754  32D7  00B7               	movwf	displayL2_EraseSegDisplay@display
 27755                           
 27756                           ;nullifyBadge_displayL2.c: 84: displayL2_PutStr(display, "    ");
 27757  32D8  307D               	movlw	low ((STR_34+115)| (0+32768))
 27758  32D9  00B0               	movwf	displayL2_PutStr@str
 27759  32DA  30A8               	movlw	high ((STR_34+115)| (0+32768))
 27760  32DB  00B1               	movwf	displayL2_PutStr@str+1
 27761  32DC  0837               	movf	displayL2_EraseSegDisplay@display,w
 27762  32DD  31B5  2577  31B2   	fcall	_displayL2_PutStr
 27763                           
 27764                           ;nullifyBadge_displayL2.c: 85: displayL1_Update(&display->display_l1);
 27765  32E0  0020               	movlb	0	; select bank0
 27766  32E1  0837               	movf	displayL2_EraseSegDisplay@display,w
 27767  32E2  3E07               	addlw	7
 27768  32E3  31B2  22E6         	fcall	_displayL1_Update
 27769  32E5  0008               	return
 27770  32E6                     __end_of_displayL2_EraseSegDisplay:	
 27771                           
 27772                           	psect	text41
 27773  196B                     __ptext41:	
 27774 ;; *************** function _sprintf *****************
 27775 ;; Defined at:
 27776 ;;		line 492 in file "/Applications/microchip/xc8/v1.42/sources/common/doprnt.c"
 27777 ;; Parameters:    Size  Location     Type
 27778 ;;  sp              2   15[BANK0 ] PTR unsigned char 
 27779 ;;		 -> flashy_Main@hit_counter(6), matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), 
 27780 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 27781 ;;  f               2   17[BANK0 ] PTR const unsigned char 
 27782 ;;		 -> STR_72(3), STR_71(9), STR_70(9), STR_69(9), 
 27783 ;;		 -> STR_68(9), STR_67(9), STR_41(4), 
 27784 ;; Auto vars:     Size  Location     Type
 27785 ;;  tmpval          4    0        struct .
 27786 ;;  width           2   40[BANK0 ] int 
 27787 ;;  len             2   38[BANK0 ] unsigned int 
 27788 ;;  val             2   36[BANK0 ] unsigned int 
 27789 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
 27790 ;;		 -> STR_86(7), sprintf@c(1), STR_66(9), STR_65(13), 
 27791 ;;		 -> STR_64(12), STR_63(8), STR_62(11), STR_61(11), 
 27792 ;;		 -> STR_60(9), STR_59(8), STR_58(8), 
 27793 ;;  c               1   42[BANK0 ] char 
 27794 ;;  ap              1   35[BANK0 ] PTR void [1]
 27795 ;;		 -> ?_sprintf(2), 
 27796 ;;  flag            1   32[BANK0 ] unsigned char 
 27797 ;;  prec            1   31[BANK0 ] char 
 27798 ;; Return value:  Size  Location     Type
 27799 ;;                  2   15[BANK0 ] int 
 27800 ;; Registers used:
 27801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27802 ;; Tracked objects:
 27803 ;;		On entry : 0/0
 27804 ;;		On exit  : 0/0
 27805 ;;		Unchanged: 0/0
 27806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27807 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27808 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27809 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27810 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27811 ;;Total ram usage:       28 bytes
 27812 ;; Hardware stack levels used:    1
 27813 ;; Hardware stack levels required when called:    5
 27814 ;; This function calls:
 27815 ;;		___lwdiv
 27816 ;;		___lwmod
 27817 ;;		___wmul
 27818 ;;		_isdigit
 27819 ;; This function is called by:
 27820 ;;		_flashy_Main
 27821 ;;		_slot_Main
 27822 ;; This function uses a non-reentrant model
 27823 ;;
 27824                           
 27825                           
 27826                           ;psect for function _sprintf
 27827  196B                     _sprintf:	
 27828                           
 27829                           ;doprnt.c: 494: va_list ap;
 27830                           ;doprnt.c: 499: signed char c;
 27831                           ;doprnt.c: 501: int width;
 27832                           ;doprnt.c: 506: signed char prec;
 27833                           ;doprnt.c: 508: unsigned char flag;
 27834                           ;doprnt.c: 523: union {
 27835                           ;doprnt.c: 524: unsigned long vd;
 27836                           ;doprnt.c: 525: double integ;
 27837                           ;doprnt.c: 526: } tmpval;
 27838                           ;doprnt.c: 528: unsigned int val;
 27839                           ;doprnt.c: 529: unsigned len;
 27840                           ;doprnt.c: 530: const char * cp;
 27841                           ;doprnt.c: 533: *ap = __va_start();
 27842                           
 27843                           ;incstack = 0
 27844                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27845  196B  3033               	movlw	(low ((?_sprintf| 0+4)))& (0+255)
 27846  196C  0020               	movlb	0	; select bank0
 27847  196D  00BB               	movwf	??_sprintf
 27848  196E  083B               	movf	??_sprintf,w
 27849  196F  00C3               	movwf	sprintf@ap
 27850  1970                     l8807:	
 27851                           ;doprnt.c: 536: while(c = *f++) {
 27852                           
 27853  1970  0832               	movf	sprintf@f+1,w
 27854  1971  00BC               	movwf	??_sprintf+1
 27855  1972  0831               	movf	sprintf@f,w
 27856  1973  00BB               	movwf	??_sprintf
 27857  1974  0AB1               	incf	sprintf@f,f
 27858  1975  1903               	skipnz
 27859  1976  0AB2               	incf	sprintf@f+1,f
 27860  1977  083B               	movf	??_sprintf,w
 27861  1978  0084               	movwf	4
 27862  1979  083C               	movf	??_sprintf+1,w
 27863  197A  0085               	movwf	5
 27864  197B  0800               	movf	0,w	;code access
 27865  197C  00BD               	movwf	??_sprintf+2
 27866  197D  083D               	movf	??_sprintf+2,w
 27867  197E  00CA               	movwf	sprintf@c
 27868  197F  084A               	movf	sprintf@c,w
 27869  1980  1903               	btfsc	3,2
 27870  1981  2B31               	goto	l8809
 27871                           
 27872                           ;doprnt.c: 538: if(c != '%')
 27873  1982  3025               	movlw	37
 27874  1983  064A               	xorwf	sprintf@c,w
 27875  1984  1903               	btfsc	3,2
 27876  1985  2991               	goto	l8691
 27877                           
 27878                           ;doprnt.c: 540: {
 27879                           ;doprnt.c: 541: ((*sp++ = (c)));
 27880  1986  082F               	movf	sprintf@sp,w
 27881  1987  0086               	movwf	6
 27882  1988  0830               	movf	sprintf@sp+1,w
 27883  1989  0087               	movwf	7
 27884  198A  084A               	movf	sprintf@c,w
 27885  198B  0081               	movwf	1
 27886  198C  3001               	movlw	1
 27887  198D  07AF               	addwf	sprintf@sp,f
 27888  198E  3000               	movlw	0
 27889  198F  3DB0               	addwfc	sprintf@sp+1,f
 27890                           
 27891                           ;doprnt.c: 542: continue;
 27892  1990  2970               	goto	l8807
 27893  1991                     l8691:	
 27894                           
 27895                           ;doprnt.c: 543: }
 27896                           ;doprnt.c: 546: width = 0;
 27897  1991  01C8               	clrf	sprintf@width
 27898  1992  01C9               	clrf	sprintf@width+1
 27899                           
 27900                           ;doprnt.c: 548: flag = 0;
 27901  1993  01C0               	clrf	sprintf@flag
 27902                           
 27903                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 27904  1994  0831               	movf	sprintf@f,w
 27905  1995  0084               	movwf	4
 27906  1996  0832               	movf	sprintf@f+1,w
 27907  1997  0085               	movwf	5
 27908  1998  0800               	movf	0,w	;code access
 27909  1999  31B2  229C  3199   	fcall	_isdigit
 27910  199C  1C03               	btfss	3,0
 27911  199D  2A4A               	goto	l8749
 27912                           
 27913                           ;doprnt.c: 598: width = 0;
 27914  199E  0020               	movlb	0	; select bank0
 27915  199F  01C8               	clrf	sprintf@width
 27916  19A0  01C9               	clrf	sprintf@width+1
 27917  19A1                     l8697:	
 27918                           ;doprnt.c: 599: do {
 27919                           
 27920                           
 27921                           ;doprnt.c: 600: width *= 10;
 27922  19A1  300A               	movlw	10
 27923  19A2  00F1               	movwf	___wmul@multiplier
 27924  19A3  3000               	movlw	0
 27925  19A4  00F2               	movwf	___wmul@multiplier+1
 27926  19A5  0020               	movlb	0	; select bank0
 27927  19A6  0849               	movf	sprintf@width+1,w
 27928  19A7  00F4               	movwf	___wmul@multiplicand+1
 27929  19A8  0848               	movf	sprintf@width,w
 27930  19A9  00F3               	movwf	___wmul@multiplicand
 27931  19AA  31B3  23D8  3199   	fcall	___wmul
 27932  19AD  0872               	movf	?___wmul+1,w
 27933  19AE  0020               	movlb	0	; select bank0
 27934  19AF  00C9               	movwf	sprintf@width+1
 27935  19B0  0871               	movf	?___wmul,w
 27936  19B1  00C8               	movwf	sprintf@width
 27937                           
 27938                           ;doprnt.c: 601: width += *f++ - '0';
 27939  19B2  0831               	movf	sprintf@f,w
 27940  19B3  0084               	movwf	4
 27941  19B4  0832               	movf	sprintf@f+1,w
 27942  19B5  0085               	movwf	5
 27943  19B6  0800               	movf	0,w	;code access
 27944  19B7  3ED0               	addlw	208
 27945  19B8  00BB               	movwf	??_sprintf
 27946  19B9  30FF               	movlw	255
 27947  19BA  1803               	skipnc
 27948  19BB  3000               	movlw	0
 27949  19BC  00BC               	movwf	??_sprintf+1
 27950  19BD  083B               	movf	??_sprintf,w
 27951  19BE  07C8               	addwf	sprintf@width,f
 27952  19BF  083C               	movf	??_sprintf+1,w
 27953  19C0  3DC9               	addwfc	sprintf@width+1,f
 27954  19C1  3001               	movlw	1
 27955  19C2  07B1               	addwf	sprintf@f,f
 27956  19C3  3000               	movlw	0
 27957  19C4  3DB2               	addwfc	sprintf@f+1,f
 27958                           
 27959                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 27960  19C5  0831               	movf	sprintf@f,w
 27961  19C6  0084               	movwf	4
 27962  19C7  0832               	movf	sprintf@f+1,w
 27963  19C8  0085               	movwf	5
 27964  19C9  0800               	movf	0,w	;code access
 27965  19CA  31B2  229C  3199   	fcall	_isdigit
 27966  19CD  1C03               	btfss	3,0
 27967  19CE  2A4A               	goto	l8749
 27968  19CF  29A1               	goto	l8697
 27969  19D0                     l8705:	
 27970                           ;doprnt.c: 728: case 's':
 27971                           
 27972                           ;doprnt.c: 698: case 'i':
 27973                           ;doprnt.c: 699: break;
 27974                           
 27975                           ;doprnt.c: 697: case 'd':
 27976                           
 27977                           ;doprnt.c: 638: goto alldone;
 27978                           
 27979                           ;doprnt.c: 637: case 0:
 27980                           
 27981                           ;doprnt.c: 608: }
 27982                           ;doprnt.c: 635: switch(c = *f++) {
 27983                           
 27984                           
 27985                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 27986  19D0  0020               	movlb	0	; select bank0
 27987  19D1  0843               	movf	sprintf@ap,w
 27988  19D2  0086               	movwf	6
 27989  19D3  0187               	clrf	7
 27990  19D4  3F40               	moviw [0]fsr1
 27991  19D5  00C1               	movwf	sprintf@cp
 27992  19D6  3F41               	moviw [1]fsr1
 27993  19D7  00C2               	movwf	sprintf@cp+1
 27994  19D8  3002               	movlw	2
 27995  19D9  00BB               	movwf	??_sprintf
 27996  19DA  083B               	movf	??_sprintf,w
 27997  19DB  07C3               	addwf	sprintf@ap,f
 27998                           
 27999                           ;doprnt.c: 740: if(!cp)
 28000  19DC  0841               	movf	sprintf@cp,w
 28001  19DD  0442               	iorwf	sprintf@cp+1,w
 28002  19DE  1D03               	btfss	3,2
 28003  19DF  29E4               	goto	l8713
 28004                           
 28005                           ;doprnt.c: 741: cp = "(null)";
 28006  19E0  306E               	movlw	low (STR_86| (0+32768))
 28007  19E1  00C1               	movwf	sprintf@cp
 28008  19E2  30BB               	movlw	high (STR_86| (0+32768))
 28009  19E3  00C2               	movwf	sprintf@cp+1
 28010  19E4                     l8713:	
 28011                           
 28012                           ;doprnt.c: 745: len = 0;
 28013  19E4  01C6               	clrf	sprintf@len
 28014  19E5  01C7               	clrf	sprintf@len+1
 28015  19E6                     l8717:	
 28016                           ;doprnt.c: 746: while(cp[len])
 28017                           
 28018  19E6  0841               	movf	sprintf@cp,w
 28019  19E7  0746               	addwf	sprintf@len,w
 28020  19E8  0084               	movwf	4
 28021  19E9  0842               	movf	sprintf@cp+1,w
 28022  19EA  3D47               	addwfc	sprintf@len+1,w
 28023  19EB  0085               	movwf	5
 28024  19EC  0012               	moviw fsr0++
 28025  19ED  1903               	btfsc	3,2
 28026  19EE  29F4               	goto	l8719
 28027                           
 28028                           ;doprnt.c: 747: len++;
 28029  19EF  3001               	movlw	1
 28030  19F0  07C6               	addwf	sprintf@len,f
 28031  19F1  3000               	movlw	0
 28032  19F2  3DC7               	addwfc	sprintf@len+1,f
 28033  19F3  29E6               	goto	l8717
 28034  19F4                     l8719:	
 28035                           ;doprnt.c: 750: dostring:
 28036                           
 28037                           
 28038                           ;doprnt.c: 757: if(width > len)
 28039  19F4  0849               	movf	sprintf@width+1,w
 28040  19F5  0247               	subwf	sprintf@len+1,w
 28041  19F6  1D03               	skipz
 28042  19F7  29FA               	goto	u5285
 28043  19F8  0848               	movf	sprintf@width,w
 28044  19F9  0246               	subwf	sprintf@len,w
 28045  19FA                     u5285:	
 28046  19FA  1803               	skipnc
 28047  19FB  2A01               	goto	l8723
 28048                           
 28049                           ;doprnt.c: 758: width -= len;
 28050  19FC  0846               	movf	sprintf@len,w
 28051  19FD  02C8               	subwf	sprintf@width,f
 28052  19FE  0847               	movf	sprintf@len+1,w
 28053  19FF  3BC9               	subwfb	sprintf@width+1,f
 28054  1A00  2A03               	goto	l8729
 28055  1A01                     l8723:	
 28056                           
 28057                           ;doprnt.c: 759: else
 28058                           ;doprnt.c: 760: width = 0;
 28059  1A01  01C8               	clrf	sprintf@width
 28060  1A02  01C9               	clrf	sprintf@width+1
 28061  1A03                     l8729:	
 28062                           ;doprnt.c: 764: while(width--)
 28063                           
 28064  1A03  30FF               	movlw	255
 28065  1A04  07C8               	addwf	sprintf@width,f
 28066  1A05  30FF               	movlw	255
 28067  1A06  3DC9               	addwfc	sprintf@width+1,f
 28068  1A07  0A48               	incf	sprintf@width,w
 28069  1A08  1903               	btfsc	3,2
 28070  1A09  0A49               	incf	sprintf@width+1,w
 28071  1A0A  1903               	btfsc	3,2
 28072  1A0B  2A2B               	goto	l8737
 28073                           
 28074                           ;doprnt.c: 765: ((*sp++ = (' ')));
 28075  1A0C  082F               	movf	sprintf@sp,w
 28076  1A0D  0086               	movwf	6
 28077  1A0E  0830               	movf	sprintf@sp+1,w
 28078  1A0F  0087               	movwf	7
 28079  1A10  3020               	movlw	32
 28080  1A11  0081               	movwf	1
 28081  1A12  3001               	movlw	1
 28082  1A13  07AF               	addwf	sprintf@sp,f
 28083  1A14  3000               	movlw	0
 28084  1A15  3DB0               	addwfc	sprintf@sp+1,f
 28085  1A16  2A03               	goto	l8729
 28086  1A17                     l8731:	
 28087                           ;doprnt.c: 767: while(len--)
 28088                           
 28089                           
 28090                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 28091  1A17  0841               	movf	sprintf@cp,w
 28092  1A18  0084               	movwf	4
 28093  1A19  0842               	movf	sprintf@cp+1,w
 28094  1A1A  0085               	movwf	5
 28095  1A1B  0800               	movf	0,w	;code access
 28096  1A1C  00BB               	movwf	??_sprintf
 28097  1A1D  082F               	movf	sprintf@sp,w
 28098  1A1E  0086               	movwf	6
 28099  1A1F  0830               	movf	sprintf@sp+1,w
 28100  1A20  0087               	movwf	7
 28101  1A21  083B               	movf	??_sprintf,w
 28102  1A22  0081               	movwf	1
 28103  1A23  3001               	movlw	1
 28104  1A24  07C1               	addwf	sprintf@cp,f
 28105  1A25  3000               	movlw	0
 28106  1A26  3DC2               	addwfc	sprintf@cp+1,f
 28107  1A27  3001               	movlw	1
 28108  1A28  07AF               	addwf	sprintf@sp,f
 28109  1A29  3000               	movlw	0
 28110  1A2A  3DB0               	addwfc	sprintf@sp+1,f
 28111  1A2B                     l8737:	
 28112  1A2B  3001               	movlw	1
 28113  1A2C  02C6               	subwf	sprintf@len,f
 28114  1A2D  3000               	movlw	0
 28115  1A2E  3BC7               	subwfb	sprintf@len+1,f
 28116  1A2F  0A46               	incf	sprintf@len,w
 28117  1A30  1D03               	skipz
 28118  1A31  2A17               	goto	l8731
 28119  1A32  0A47               	incf	sprintf@len+1,w
 28120  1A33  1903               	btfsc	3,2
 28121  1A34  2970               	goto	l8807
 28122  1A35  2A17               	goto	l8731
 28123  1A36                     l8739:	
 28124                           ;doprnt.c: 784: case 'c':
 28125                           
 28126                           ;doprnt.c: 774: continue;
 28127                           
 28128                           
 28129                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 28130  1A36  0843               	movf	sprintf@ap,w
 28131  1A37  0086               	movwf	6
 28132  1A38  0187               	clrf	7
 28133  1A39  0801               	movf	1,w
 28134  1A3A  00BB               	movwf	??_sprintf
 28135  1A3B  083B               	movf	??_sprintf,w
 28136  1A3C  00CA               	movwf	sprintf@c
 28137  1A3D  3002               	movlw	2
 28138  1A3E  00BB               	movwf	??_sprintf
 28139  1A3F  083B               	movf	??_sprintf,w
 28140  1A40  07C3               	addwf	sprintf@ap,f
 28141  1A41                     l8743:	
 28142                           ;doprnt.c: 802: default:
 28143                           
 28144                           
 28145                           ;doprnt.c: 805: cp = (char *)&c;
 28146  1A41  304A               	movlw	low sprintf@c
 28147  1A42  00C1               	movwf	sprintf@cp
 28148  1A43  3000               	movlw	high sprintf@c
 28149  1A44  00C2               	movwf	sprintf@cp+1
 28150                           
 28151                           ;doprnt.c: 806: len = 1;
 28152  1A45  3001               	movlw	1
 28153  1A46  00C6               	movwf	sprintf@len
 28154  1A47  3000               	movlw	0
 28155  1A48  00C7               	movwf	sprintf@len+1
 28156                           
 28157                           ;doprnt.c: 807: goto dostring;
 28158  1A49  29F4               	goto	l8719
 28159  1A4A                     l8749:	
 28160                           ;doprnt.c: 822: }
 28161                           
 28162  1A4A  0020               	movlb	0	; select bank0
 28163  1A4B  0832               	movf	sprintf@f+1,w
 28164  1A4C  00BC               	movwf	??_sprintf+1
 28165  1A4D  0831               	movf	sprintf@f,w
 28166  1A4E  00BB               	movwf	??_sprintf
 28167  1A4F  0AB1               	incf	sprintf@f,f
 28168  1A50  1903               	skipnz
 28169  1A51  0AB2               	incf	sprintf@f+1,f
 28170  1A52  083B               	movf	??_sprintf,w
 28171  1A53  0084               	movwf	4
 28172  1A54  083C               	movf	??_sprintf+1,w
 28173  1A55  0085               	movwf	5
 28174  1A56  0800               	movf	0,w	;code access
 28175  1A57  00CA               	movwf	sprintf@c
 28176                           
 28177                           ; Switch size 1, requested type "space"
 28178                           ; Number of cases is 5, Range of values is 0 to 115
 28179                           ; switch strategies available:
 28180                           ; Name         Instructions Cycles
 28181                           ; simple_byte           16     9 (average)
 28182                           ; direct_byte          238     6 (fixed)
 28183                           ; jumptable            260     6 (fixed)
 28184                           ;	Chosen strategy is simple_byte
 28185  1A58  3A00               	xorlw	0	; case 0
 28186  1A59  1903               	skipnz
 28187  1A5A  2B31               	goto	l8809
 28188  1A5B  3A63               	xorlw	99	; case 99
 28189  1A5C  1903               	skipnz
 28190  1A5D  2A36               	goto	l8739
 28191  1A5E  3A07               	xorlw	7	; case 100
 28192  1A5F  1903               	skipnz
 28193  1A60  2A68               	goto	l8751
 28194  1A61  3A0D               	xorlw	13	; case 105
 28195  1A62  1903               	skipnz
 28196  1A63  2A68               	goto	l8751
 28197  1A64  3A1A               	xorlw	26	; case 115
 28198  1A65  1903               	skipnz
 28199  1A66  29D0               	goto	l8705
 28200  1A67  2A41               	goto	l8743
 28201  1A68                     l8751:	
 28202                           
 28203                           ;doprnt.c: 1253: {
 28204                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 28205  1A68  0020               	movlb	0	; select bank0
 28206  1A69  0843               	movf	sprintf@ap,w
 28207  1A6A  0086               	movwf	6
 28208  1A6B  0187               	clrf	7
 28209  1A6C  3F40               	moviw [0]fsr1
 28210  1A6D  00C4               	movwf	sprintf@val
 28211  1A6E  3F41               	moviw [1]fsr1
 28212  1A6F  00C5               	movwf	sprintf@val+1
 28213  1A70  3002               	movlw	2
 28214  1A71  00BB               	movwf	??_sprintf
 28215  1A72  083B               	movf	??_sprintf,w
 28216  1A73  07C3               	addwf	sprintf@ap,f
 28217                           
 28218                           ;doprnt.c: 1261: if((int)val < 0) {
 28219  1A74  1FC5               	btfss	sprintf@val+1,7
 28220  1A75  2A7F               	goto	l8761
 28221                           
 28222                           ;doprnt.c: 1262: flag |= 0x03;
 28223  1A76  3003               	movlw	3
 28224  1A77  00BB               	movwf	??_sprintf
 28225  1A78  083B               	movf	??_sprintf,w
 28226  1A79  04C0               	iorwf	sprintf@flag,f
 28227                           
 28228                           ;doprnt.c: 1263: val = -val;
 28229  1A7A  09C4               	comf	sprintf@val,f
 28230  1A7B  09C5               	comf	sprintf@val+1,f
 28231  1A7C  0AC4               	incf	sprintf@val,f
 28232  1A7D  1903               	skipnz
 28233  1A7E  0AC5               	incf	sprintf@val+1,f
 28234  1A7F                     l8761:	
 28235                           
 28236                           ;doprnt.c: 1264: }
 28237                           ;doprnt.c: 1266: }
 28238                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 28239  1A7F  01CA               	clrf	sprintf@c
 28240  1A80  0ACA               	incf	sprintf@c,f
 28241  1A81  3005               	movlw	5
 28242  1A82  064A               	xorwf	sprintf@c,w
 28243  1A83  1903               	btfsc	3,2
 28244  1A84  2AA4               	goto	l8773
 28245  1A85                     l8767:	
 28246                           
 28247                           ;doprnt.c: 1306: if(val < dpowers[c])
 28248  1A85  084A               	movf	sprintf@c,w
 28249  1A86  00BB               	movwf	??_sprintf
 28250  1A87  01BC               	clrf	??_sprintf+1
 28251  1A88  35BB               	lslf	??_sprintf,f
 28252  1A89  0DBC               	rlf	??_sprintf+1,f
 28253  1A8A  3000               	movlw	low (_dpowers| (0+32768))
 28254  1A8B  073B               	addwf	??_sprintf,w
 28255  1A8C  0084               	movwf	4
 28256  1A8D  30A8               	movlw	high (_dpowers| (0+32768))
 28257  1A8E  3D3C               	addwfc	??_sprintf+1,w
 28258  1A8F  0085               	movwf	5
 28259  1A90  3F00               	moviw [0]fsr0
 28260  1A91  00BD               	movwf	??_sprintf+2
 28261  1A92  3F01               	moviw [1]fsr0
 28262  1A93  00BE               	movwf	??_sprintf+3
 28263  1A94  083E               	movf	??_sprintf+3,w
 28264  1A95  0245               	subwf	sprintf@val+1,w
 28265  1A96  1D03               	skipz
 28266  1A97  2A9A               	goto	u5335
 28267  1A98  083D               	movf	??_sprintf+2,w
 28268  1A99  0244               	subwf	sprintf@val,w
 28269  1A9A                     u5335:	
 28270  1A9A  1C03               	btfss	3,0
 28271  1A9B  2AA4               	goto	l8773
 28272                           
 28273                           ;doprnt.c: 1307: break;
 28274  1A9C  3001               	movlw	1
 28275  1A9D  00BB               	movwf	??_sprintf
 28276  1A9E  083B               	movf	??_sprintf,w
 28277  1A9F  07CA               	addwf	sprintf@c,f
 28278  1AA0  3005               	movlw	5
 28279  1AA1  064A               	xorwf	sprintf@c,w
 28280  1AA2  1D03               	btfss	3,2
 28281  1AA3  2A85               	goto	l8767
 28282  1AA4                     l8773:	
 28283                           
 28284                           ;doprnt.c: 1345: if(width && flag & 0x03)
 28285  1AA4  0848               	movf	sprintf@width,w
 28286  1AA5  0449               	iorwf	sprintf@width+1,w
 28287  1AA6  1903               	btfsc	3,2
 28288  1AA7  2AB0               	goto	l1619
 28289  1AA8  0840               	movf	sprintf@flag,w
 28290  1AA9  3903               	andlw	3
 28291  1AAA  1903               	btfsc	3,2
 28292  1AAB  2AB0               	goto	l1619
 28293                           
 28294                           ;doprnt.c: 1346: width--;
 28295  1AAC  30FF               	movlw	255
 28296  1AAD  07C8               	addwf	sprintf@width,f
 28297  1AAE  30FF               	movlw	255
 28298  1AAF  3DC9               	addwfc	sprintf@width+1,f
 28299  1AB0                     l1619:	
 28300                           
 28301                           ;doprnt.c: 1381: if(width > c)
 28302  1AB0  084A               	movf	sprintf@c,w
 28303  1AB1  00BB               	movwf	??_sprintf
 28304  1AB2  01BC               	clrf	??_sprintf+1
 28305  1AB3  1BBB               	btfsc	??_sprintf,7
 28306  1AB4  03BC               	decf	??_sprintf+1,f
 28307  1AB5  083C               	movf	??_sprintf+1,w
 28308  1AB6  3A80               	xorlw	128
 28309  1AB7  00BD               	movwf	??_sprintf+2
 28310  1AB8  0849               	movf	sprintf@width+1,w
 28311  1AB9  3A80               	xorlw	128
 28312  1ABA  023D               	subwf	??_sprintf+2,w
 28313  1ABB  1D03               	skipz
 28314  1ABC  2ABF               	goto	u5375
 28315  1ABD  0848               	movf	sprintf@width,w
 28316  1ABE  023B               	subwf	??_sprintf,w
 28317  1ABF                     u5375:	
 28318  1ABF  1803               	skipnc
 28319  1AC0  2ACC               	goto	l8781
 28320                           
 28321                           ;doprnt.c: 1382: width -= c;
 28322  1AC1  0020               	movlb	0	; select bank0
 28323  1AC2  084A               	movf	sprintf@c,w
 28324  1AC3  00BB               	movwf	??_sprintf
 28325  1AC4  01BC               	clrf	??_sprintf+1
 28326  1AC5  1BBB               	btfsc	??_sprintf,7
 28327  1AC6  03BC               	decf	??_sprintf+1,f
 28328  1AC7  083B               	movf	??_sprintf,w
 28329  1AC8  02C8               	subwf	sprintf@width,f
 28330  1AC9  083C               	movf	??_sprintf+1,w
 28331  1ACA  3BC9               	subwfb	sprintf@width+1,f
 28332  1ACB  2ACF               	goto	l8783
 28333  1ACC                     l8781:	
 28334                           
 28335                           ;doprnt.c: 1383: else
 28336                           ;doprnt.c: 1384: width = 0;
 28337  1ACC  0020               	movlb	0	; select bank0
 28338  1ACD  01C8               	clrf	sprintf@width
 28339  1ACE  01C9               	clrf	sprintf@width+1
 28340  1ACF                     l8783:	
 28341                           
 28342                           ;doprnt.c: 1422: {
 28343                           ;doprnt.c: 1424: if(width
 28344                           ;doprnt.c: 1428: )
 28345  1ACF  0848               	movf	sprintf@width,w
 28346  1AD0  0449               	iorwf	sprintf@width+1,w
 28347  1AD1  1903               	btfsc	3,2
 28348  1AD2  2AE5               	goto	l8791
 28349  1AD3                     l8785:	
 28350                           ;doprnt.c: 1429: do
 28351                           
 28352                           
 28353                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 28354  1AD3  082F               	movf	sprintf@sp,w
 28355  1AD4  0086               	movwf	6
 28356  1AD5  0830               	movf	sprintf@sp+1,w
 28357  1AD6  0087               	movwf	7
 28358  1AD7  3020               	movlw	32
 28359  1AD8  0081               	movwf	1
 28360  1AD9  3001               	movlw	1
 28361  1ADA  07AF               	addwf	sprintf@sp,f
 28362  1ADB  3000               	movlw	0
 28363  1ADC  3DB0               	addwfc	sprintf@sp+1,f
 28364                           
 28365                           ;doprnt.c: 1431: while(--width);
 28366  1ADD  30FF               	movlw	255
 28367  1ADE  07C8               	addwf	sprintf@width,f
 28368  1ADF  30FF               	movlw	255
 28369  1AE0  3DC9               	addwfc	sprintf@width+1,f
 28370  1AE1  0848               	movf	sprintf@width,w
 28371  1AE2  0449               	iorwf	sprintf@width+1,w
 28372  1AE3  1D03               	btfss	3,2
 28373  1AE4  2AD3               	goto	l8785
 28374  1AE5                     l8791:	
 28375                           
 28376                           ;doprnt.c: 1438: if(flag & 0x03)
 28377  1AE5  0840               	movf	sprintf@flag,w
 28378  1AE6  3903               	andlw	3
 28379  1AE7  1903               	btfsc	3,2
 28380  1AE8  2AF3               	goto	l8797
 28381                           
 28382                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 28383  1AE9  082F               	movf	sprintf@sp,w
 28384  1AEA  0086               	movwf	6
 28385  1AEB  0830               	movf	sprintf@sp+1,w
 28386  1AEC  0087               	movwf	7
 28387  1AED  302D               	movlw	45
 28388  1AEE  0081               	movwf	1
 28389  1AEF  3001               	movlw	1
 28390  1AF0  07AF               	addwf	sprintf@sp,f
 28391  1AF1  3000               	movlw	0
 28392  1AF2  3DB0               	addwfc	sprintf@sp+1,f
 28393  1AF3                     l8797:	
 28394                           
 28395                           ;doprnt.c: 1469: }
 28396                           ;doprnt.c: 1472: prec = c;
 28397  1AF3  084A               	movf	sprintf@c,w
 28398  1AF4  00BB               	movwf	??_sprintf
 28399  1AF5  083B               	movf	??_sprintf,w
 28400  1AF6  00BF               	movwf	sprintf@prec
 28401  1AF7                     l8805:	
 28402                           ;doprnt.c: 1474: while(prec--) {
 28403                           
 28404  1AF7  30FF               	movlw	255
 28405  1AF8  00BB               	movwf	??_sprintf
 28406  1AF9  083B               	movf	??_sprintf,w
 28407  1AFA  07BF               	addwf	sprintf@prec,f
 28408  1AFB  0A3F               	incf	sprintf@prec,w
 28409  1AFC  1903               	btfsc	3,2
 28410  1AFD  2970               	goto	l8807
 28411                           
 28412                           ;doprnt.c: 1478: {
 28413                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 28414  1AFE  300A               	movlw	10
 28415  1AFF  00AB               	movwf	___lwmod@divisor
 28416  1B00  3000               	movlw	0
 28417  1B01  00AC               	movwf	___lwmod@divisor+1
 28418  1B02  083F               	movf	sprintf@prec,w
 28419  1B03  00BB               	movwf	??_sprintf
 28420  1B04  01BC               	clrf	??_sprintf+1
 28421  1B05  35BB               	lslf	??_sprintf,f
 28422  1B06  0DBC               	rlf	??_sprintf+1,f
 28423  1B07  3000               	movlw	low (_dpowers| (0+32768))
 28424  1B08  073B               	addwf	??_sprintf,w
 28425  1B09  0084               	movwf	4
 28426  1B0A  30A8               	movlw	high (_dpowers| (0+32768))
 28427  1B0B  3D3C               	addwfc	??_sprintf+1,w
 28428  1B0C  0085               	movwf	5
 28429  1B0D  3F00               	moviw [0]fsr0
 28430  1B0E  00F1               	movwf	___lwdiv@divisor
 28431  1B0F  3F01               	moviw [1]fsr0
 28432  1B10  00F2               	movwf	___lwdiv@divisor+1
 28433  1B11  0845               	movf	sprintf@val+1,w
 28434  1B12  00F4               	movwf	___lwdiv@dividend+1
 28435  1B13  0844               	movf	sprintf@val,w
 28436  1B14  00F3               	movwf	___lwdiv@dividend
 28437  1B15  31A8  2085  3199   	fcall	___lwdiv
 28438  1B18  0872               	movf	?___lwdiv+1,w
 28439  1B19  0020               	movlb	0	; select bank0
 28440  1B1A  00AE               	movwf	___lwmod@dividend+1
 28441  1B1B  0871               	movf	?___lwdiv,w
 28442  1B1C  00AD               	movwf	___lwmod@dividend
 28443  1B1D  31B5  25A1  3199   	fcall	___lwmod
 28444  1B20  0020               	movlb	0	; select bank0
 28445  1B21  082B               	movf	?___lwmod,w
 28446  1B22  3E30               	addlw	48
 28447  1B23  00BD               	movwf	??_sprintf+2
 28448  1B24  083D               	movf	??_sprintf+2,w
 28449  1B25  00CA               	movwf	sprintf@c
 28450                           
 28451                           ;doprnt.c: 1523: }
 28452                           ;doprnt.c: 1524: ((*sp++ = (c)));
 28453  1B26  082F               	movf	sprintf@sp,w
 28454  1B27  0086               	movwf	6
 28455  1B28  0830               	movf	sprintf@sp+1,w
 28456  1B29  0087               	movwf	7
 28457  1B2A  084A               	movf	sprintf@c,w
 28458  1B2B  0081               	movwf	1
 28459  1B2C  3001               	movlw	1
 28460  1B2D  07AF               	addwf	sprintf@sp,f
 28461  1B2E  3000               	movlw	0
 28462  1B2F  3DB0               	addwfc	sprintf@sp+1,f
 28463  1B30  2AF7               	goto	l8805
 28464  1B31                     l8809:	
 28465                           ;doprnt.c: 1525: }
 28466                           ;doprnt.c: 1533: }
 28467                           ;doprnt.c: 1535: alldone:
 28468                           
 28469                           
 28470                           ;doprnt.c: 1538: *sp = 0;
 28471  1B31  0020               	movlb	0	; select bank0
 28472  1B32  082F               	movf	sprintf@sp,w
 28473  1B33  0086               	movwf	6
 28474  1B34  0830               	movf	sprintf@sp+1,w
 28475  1B35  0087               	movwf	7
 28476  1B36  0181               	clrf	1
 28477  1B37  0008               	return
 28478  1B38                     __end_of_sprintf:	
 28479                           ;doprnt.c: 1540: return 0;
 28480                           ;	Return value of _sprintf is never used
 28481                           
 28482                           
 28483                           	psect	text42
 28484  329C                     __ptext42:	
 28485 ;; *************** function _isdigit *****************
 28486 ;; Defined at:
 28487 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/isdigit.c"
 28488 ;; Parameters:    Size  Location     Type
 28489 ;;  c               1    wreg     unsigned char 
 28490 ;; Auto vars:     Size  Location     Type
 28491 ;;  c               1    2[COMMON] unsigned char 
 28492 ;; Return value:  Size  Location     Type
 28493 ;;		None               void
 28494 ;; Registers used:
 28495 ;;		wreg, status,2, status,0
 28496 ;; Tracked objects:
 28497 ;;		On entry : 0/0
 28498 ;;		On exit  : 0/0
 28499 ;;		Unchanged: 0/0
 28500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28504 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28505 ;;Total ram usage:        2 bytes
 28506 ;; Hardware stack levels used:    1
 28507 ;; Hardware stack levels required when called:    4
 28508 ;; This function calls:
 28509 ;;		Nothing
 28510 ;; This function is called by:
 28511 ;;		_sprintf
 28512 ;; This function uses a non-reentrant model
 28513 ;;
 28514                           
 28515                           
 28516                           ;psect for function _isdigit
 28517  329C                     _isdigit:	
 28518                           
 28519                           ;incstack = 0
 28520                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 28521                           ;isdigit@c stored from wreg
 28522  329C  00F2               	movwf	isdigit@c
 28523  329D  01F1               	clrf	_isdigit$3646
 28524  329E  303A               	movlw	58
 28525  329F  0272               	subwf	isdigit@c,w
 28526  32A0  1803               	skipnc
 28527  32A1  2AA8               	goto	l8525
 28528  32A2  3030               	movlw	48
 28529  32A3  0272               	subwf	isdigit@c,w
 28530  32A4  1C03               	skipc
 28531  32A5  2AA8               	goto	l8525
 28532  32A6  01F1               	clrf	_isdigit$3646
 28533  32A7  0AF1               	incf	_isdigit$3646,f
 28534  32A8                     l8525:	
 28535  32A8  0C71               	rrf	_isdigit$3646,w
 28536  32A9  0008               	return
 28537  32AA                     __end_of_isdigit:	
 28538                           
 28539                           	psect	text43
 28540  33D8                     __ptext43:	
 28541 ;; *************** function ___wmul *****************
 28542 ;; Defined at:
 28543 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
 28544 ;; Parameters:    Size  Location     Type
 28545 ;;  multiplier      2    1[COMMON] unsigned int 
 28546 ;;  multiplicand    2    3[COMMON] unsigned int 
 28547 ;; Auto vars:     Size  Location     Type
 28548 ;;  product         2    5[COMMON] unsigned int 
 28549 ;; Return value:  Size  Location     Type
 28550 ;;                  2    1[COMMON] unsigned int 
 28551 ;; Registers used:
 28552 ;;		wreg, status,2, status,0
 28553 ;; Tracked objects:
 28554 ;;		On entry : 0/0
 28555 ;;		On exit  : 0/0
 28556 ;;		Unchanged: 0/0
 28557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28558 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28559 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28561 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28562 ;;Total ram usage:        6 bytes
 28563 ;; Hardware stack levels used:    1
 28564 ;; Hardware stack levels required when called:    4
 28565 ;; This function calls:
 28566 ;;		Nothing
 28567 ;; This function is called by:
 28568 ;;		_locked_secret_check
 28569 ;;		_secret_check
 28570 ;;		_matrix_secret_check
 28571 ;;		_sprintf
 28572 ;; This function uses a non-reentrant model
 28573 ;;
 28574                           
 28575                           
 28576                           ;psect for function ___wmul
 28577  33D8                     ___wmul:	
 28578                           
 28579                           ;incstack = 0
 28580                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 28581  33D8  01F5               	clrf	___wmul@product
 28582  33D9  01F6               	clrf	___wmul@product+1
 28583  33DA                     l8531:	
 28584  33DA  1C71               	btfss	___wmul@multiplier,0
 28585  33DB  2BE0               	goto	l1712
 28586  33DC  0873               	movf	___wmul@multiplicand,w
 28587  33DD  07F5               	addwf	___wmul@product,f
 28588  33DE  0874               	movf	___wmul@multiplicand+1,w
 28589  33DF  3DF6               	addwfc	___wmul@product+1,f
 28590  33E0                     l1712:	
 28591  33E0  3001               	movlw	1
 28592  33E1                     u5085:	
 28593  33E1  35F3               	lslf	___wmul@multiplicand,f
 28594  33E2  0DF4               	rlf	___wmul@multiplicand+1,f
 28595  33E3  0B89               	decfsz	9,f
 28596  33E4  2BE1               	goto	u5085
 28597  33E5  3001               	movlw	1
 28598  33E6                     u5095:	
 28599  33E6  36F2               	lsrf	___wmul@multiplier+1,f
 28600  33E7  0CF1               	rrf	___wmul@multiplier,f
 28601  33E8  0B89               	decfsz	9,f
 28602  33E9  2BE6               	goto	u5095
 28603  33EA  0871               	movf	___wmul@multiplier,w
 28604  33EB  0472               	iorwf	___wmul@multiplier+1,w
 28605  33EC  1D03               	btfss	3,2
 28606  33ED  2BDA               	goto	l8531
 28607  33EE  0876               	movf	___wmul@product+1,w
 28608  33EF  00F2               	movwf	?___wmul+1
 28609  33F0  0875               	movf	___wmul@product,w
 28610  33F1  00F1               	movwf	?___wmul
 28611  33F2  0008               	return
 28612  33F3                     __end_of___wmul:	
 28613                           
 28614                           	psect	text44
 28615  2882                     __ptext44:	
 28616 ;; *************** function _nullifyBadge_irTxSet *****************
 28617 ;; Defined at:
 28618 ;;		line 264 in file "nullifyBadge.c"
 28619 ;; Parameters:    Size  Location     Type
 28620 ;;		None
 28621 ;; Auto vars:     Size  Location     Type
 28622 ;;		None
 28623 ;; Return value:  Size  Location     Type
 28624 ;;                  1    wreg      void 
 28625 ;; Registers used:
 28626 ;;		None
 28627 ;; Tracked objects:
 28628 ;;		On entry : 0/0
 28629 ;;		On exit  : 0/0
 28630 ;;		Unchanged: 0/0
 28631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28636 ;;Total ram usage:        0 bytes
 28637 ;; Hardware stack levels used:    1
 28638 ;; Hardware stack levels required when called:    4
 28639 ;; This function calls:
 28640 ;;		Nothing
 28641 ;; This function is called by:
 28642 ;;		_flashy_Main
 28643 ;; This function uses a non-reentrant model
 28644 ;;
 28645                           
 28646                           
 28647                           ;psect for function _nullifyBadge_irTxSet
 28648  2882                     _nullifyBadge_irTxSet:	
 28649                           
 28650                           ;incstack = 0
 28651                           ; Regs used in _nullifyBadge_irTxSet: []
 28652                           ;nullifyBadge.c: 266: do { LATBbits.LATB7 = 0; } while(0);
 28653  2882  0022               	movlb	2	; select bank2
 28654  2883  138D               	bcf	13,7	;volatile
 28655  2884  0008               	return
 28656  2885                     __end_of_nullifyBadge_irTxSet:	
 28657                           
 28658                           	psect	text45
 28659  3254                     __ptext45:	
 28660 ;; *************** function _nullifyBadge_irTxRelease *****************
 28661 ;; Defined at:
 28662 ;;		line 254 in file "nullifyBadge.c"
 28663 ;; Parameters:    Size  Location     Type
 28664 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 28665 ;;		 -> badge_inst(18), 
 28666 ;; Auto vars:     Size  Location     Type
 28667 ;;  badge           1    2[COMMON] PTR struct t_nullifyBadg
 28668 ;;		 -> badge_inst(18), 
 28669 ;; Return value:  Size  Location     Type
 28670 ;;                  1    wreg      void 
 28671 ;; Registers used:
 28672 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28673 ;; Tracked objects:
 28674 ;;		On entry : 0/0
 28675 ;;		On exit  : 0/0
 28676 ;;		Unchanged: 0/0
 28677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28679 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28680 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28681 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28682 ;;Total ram usage:        2 bytes
 28683 ;; Hardware stack levels used:    1
 28684 ;; Hardware stack levels required when called:    4
 28685 ;; This function calls:
 28686 ;;		Nothing
 28687 ;; This function is called by:
 28688 ;;		_flashy_Main
 28689 ;; This function uses a non-reentrant model
 28690 ;;
 28691                           
 28692                           
 28693                           ;psect for function _nullifyBadge_irTxRelease
 28694  3254                     _nullifyBadge_irTxRelease:	
 28695                           
 28696                           ;incstack = 0
 28697                           ; Regs used in _nullifyBadge_irTxRelease: [wreg+fsr1l+fsr1h+status,2+status,0]
 28698                           ;nullifyBadge_irTxRelease@badge stored from wreg
 28699  3254  00F2               	movwf	nullifyBadge_irTxRelease@badge
 28700                           
 28701                           ;nullifyBadge.c: 255: badge->registeredHw &= ~(1 << HW_IR_TX);
 28702  3255  30FB               	movlw	251
 28703  3256  00F1               	movwf	??_nullifyBadge_irTxRelease
 28704  3257  0872               	movf	nullifyBadge_irTxRelease@badge,w
 28705  3258  3E11               	addlw	17
 28706  3259  0086               	movwf	6
 28707  325A  3001               	movlw	1	; select bank2/3
 28708  325B  0087               	movwf	7
 28709  325C  0871               	movf	??_nullifyBadge_irTxRelease,w
 28710  325D  0581               	andwf	1,f
 28711  325E  0008               	return
 28712  325F                     __end_of_nullifyBadge_irTxRelease:	
 28713                           
 28714                           	psect	text46
 28715  32B8                     __ptext46:	
 28716 ;; *************** function _nullifyBadge_irTxRegister *****************
 28717 ;; Defined at:
 28718 ;;		line 242 in file "nullifyBadge.c"
 28719 ;; Parameters:    Size  Location     Type
 28720 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 28721 ;;		 -> badge_inst(18), 
 28722 ;; Auto vars:     Size  Location     Type
 28723 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 28724 ;;		 -> badge_inst(18), 
 28725 ;; Return value:  Size  Location     Type
 28726 ;;                  1    wreg      char 
 28727 ;; Registers used:
 28728 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28729 ;; Tracked objects:
 28730 ;;		On entry : 0/0
 28731 ;;		On exit  : 0/0
 28732 ;;		Unchanged: 0/0
 28733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28735 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28737 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28738 ;;Total ram usage:        1 bytes
 28739 ;; Hardware stack levels used:    1
 28740 ;; Hardware stack levels required when called:    4
 28741 ;; This function calls:
 28742 ;;		Nothing
 28743 ;; This function is called by:
 28744 ;;		_flashy_Main
 28745 ;; This function uses a non-reentrant model
 28746 ;;
 28747                           
 28748                           
 28749                           ;psect for function _nullifyBadge_irTxRegister
 28750  32B8                     _nullifyBadge_irTxRegister:	
 28751                           
 28752                           ;incstack = 0
 28753                           ; Regs used in _nullifyBadge_irTxRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 28754                           ;nullifyBadge_irTxRegister@badge stored from wreg
 28755  32B8  00F1               	movwf	nullifyBadge_irTxRegister@badge
 28756                           
 28757                           ;nullifyBadge.c: 243: if (badge->registeredHw & HW_IR_TX) {
 28758  32B9  0871               	movf	nullifyBadge_irTxRegister@badge,w
 28759  32BA  3E11               	addlw	17
 28760  32BB  0086               	movwf	6
 28761  32BC  3001               	movlw	1	; select bank2/3
 28762  32BD  0087               	movwf	7
 28763  32BE  1881               	btfsc	1,1
 28764  32BF  0008               	return
 28765                           
 28766                           ;nullifyBadge.c: 246: else {
 28767                           ;nullifyBadge.c: 247: badge->registeredHw |= (1 << HW_IR_TX);
 28768                           
 28769                           ;nullifyBadge.c: 245: }
 28770                           
 28771                           ;nullifyBadge.c: 244: return -1;
 28772                           ;	Return value of _nullifyBadge_irTxRegister is never used
 28773  32C0  0871               	movf	nullifyBadge_irTxRegister@badge,w
 28774  32C1  3E11               	addlw	17
 28775  32C2  0086               	movwf	6
 28776  32C3  3001               	movlw	1	; select bank2/3
 28777  32C4  0087               	movwf	7
 28778  32C5  1501               	bsf	1,2
 28779                           
 28780                           ;nullifyBadge.c: 248: return 0;
 28781                           ;	Return value of _nullifyBadge_irTxRegister is never used
 28782  32C6  0008               	return
 28783  32C7                     __end_of_nullifyBadge_irTxRegister:	
 28784                           
 28785                           	psect	text47
 28786  31CA                     __ptext47:	
 28787 ;; *************** function _nullifyBadge_irTxClr *****************
 28788 ;; Defined at:
 28789 ;;		line 270 in file "nullifyBadge.c"
 28790 ;; Parameters:    Size  Location     Type
 28791 ;;		None
 28792 ;; Auto vars:     Size  Location     Type
 28793 ;;		None
 28794 ;; Return value:  Size  Location     Type
 28795 ;;                  1    wreg      void 
 28796 ;; Registers used:
 28797 ;;		None
 28798 ;; Tracked objects:
 28799 ;;		On entry : 0/0
 28800 ;;		On exit  : 0/0
 28801 ;;		Unchanged: 0/0
 28802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28807 ;;Total ram usage:        0 bytes
 28808 ;; Hardware stack levels used:    1
 28809 ;; Hardware stack levels required when called:    4
 28810 ;; This function calls:
 28811 ;;		Nothing
 28812 ;; This function is called by:
 28813 ;;		_flashy_Main
 28814 ;; This function uses a non-reentrant model
 28815 ;;
 28816                           
 28817                           
 28818                           ;psect for function _nullifyBadge_irTxClr
 28819  31CA                     _nullifyBadge_irTxClr:	
 28820                           
 28821                           ;incstack = 0
 28822                           ; Regs used in _nullifyBadge_irTxClr: []
 28823                           ;nullifyBadge.c: 272: do { LATBbits.LATB7 = 1; } while(0);
 28824  31CA  0022               	movlb	2	; select bank2
 28825  31CB  178D               	bsf	13,7	;volatile
 28826  31CC  0008               	return
 28827  31CD                     __end_of_nullifyBadge_irTxClr:	
 28828                           
 28829                           	psect	text48
 28830  31D1                     __ptext48:	
 28831 ;; *************** function _nullifyBadge_irGet *****************
 28832 ;; Defined at:
 28833 ;;		line 232 in file "nullifyBadge.c"
 28834 ;; Parameters:    Size  Location     Type
 28835 ;;		None
 28836 ;; Auto vars:     Size  Location     Type
 28837 ;;		None
 28838 ;; Return value:  Size  Location     Type
 28839 ;;                  1    wreg      unsigned char 
 28840 ;; Registers used:
 28841 ;;		wreg, status,2, status,0
 28842 ;; Tracked objects:
 28843 ;;		On entry : 0/0
 28844 ;;		On exit  : 0/0
 28845 ;;		Unchanged: 0/0
 28846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28851 ;;Total ram usage:        0 bytes
 28852 ;; Hardware stack levels used:    1
 28853 ;; Hardware stack levels required when called:    4
 28854 ;; This function calls:
 28855 ;;		Nothing
 28856 ;; This function is called by:
 28857 ;;		_flashy_Main
 28858 ;; This function uses a non-reentrant model
 28859 ;;
 28860                           
 28861                           
 28862                           ;psect for function _nullifyBadge_irGet
 28863  31D1                     _nullifyBadge_irGet:	
 28864                           
 28865                           ;nullifyBadge.c: 233: return PORTBbits.RB5;
 28866                           
 28867                           ;incstack = 0
 28868                           ; Regs used in _nullifyBadge_irGet: [wreg+status,2+status,0]
 28869  31D1  0020               	movlb	0	; select bank0
 28870  31D2  0E0D               	swapf	13,w	;volatile
 28871  31D3  0C89               	rrf	9,f
 28872  31D4  3901               	andlw	1
 28873  31D5  0008               	return
 28874  31D6                     __end_of_nullifyBadge_irGet:	
 28875                           
 28876                           	psect	text49
 28877  35FD                     __ptext49:	
 28878 ;; *************** function _nullifyBadge_buttonsGet *****************
 28879 ;; Defined at:
 28880 ;;		line 187 in file "nullifyBadge.c"
 28881 ;; Parameters:    Size  Location     Type
 28882 ;;		None
 28883 ;; Auto vars:     Size  Location     Type
 28884 ;;  retVal          1    3[COMMON] unsigned char 
 28885 ;; Return value:  Size  Location     Type
 28886 ;;                  1    wreg      unsigned char 
 28887 ;; Registers used:
 28888 ;;		wreg, status,2, status,0
 28889 ;; Tracked objects:
 28890 ;;		On entry : 0/0
 28891 ;;		On exit  : 0/0
 28892 ;;		Unchanged: 0/0
 28893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28895 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28896 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28897 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28898 ;;Total ram usage:        3 bytes
 28899 ;; Hardware stack levels used:    1
 28900 ;; Hardware stack levels required when called:    4
 28901 ;; This function calls:
 28902 ;;		Nothing
 28903 ;; This function is called by:
 28904 ;;		_menu_Main
 28905 ;;		_flashy_Main
 28906 ;;		_locked_Main
 28907 ;;		_secret_Main
 28908 ;;		_slot_Main
 28909 ;;		_matrix_Main
 28910 ;; This function uses a non-reentrant model
 28911 ;;
 28912                           
 28913                           
 28914                           ;psect for function _nullifyBadge_buttonsGet
 28915  35FD                     _nullifyBadge_buttonsGet:	
 28916                           
 28917                           ;nullifyBadge.c: 188: u8 retVal = 0x0F;
 28918                           
 28919                           ;incstack = 0
 28920                           ; Regs used in _nullifyBadge_buttonsGet: [wreg+status,2+status,0]
 28921  35FD  300F               	movlw	15
 28922  35FE  00F1               	movwf	??_nullifyBadge_buttonsGet
 28923  35FF  0871               	movf	??_nullifyBadge_buttonsGet,w
 28924  3600  00F3               	movwf	nullifyBadge_buttonsGet@retVal
 28925                           
 28926                           ;nullifyBadge.c: 190: retVal &= ~(PORTCbits.RC5 << 0);
 28927  3601  0020               	movlb	0	; select bank0
 28928  3602  0E0E               	swapf	14,w	;volatile
 28929  3603  0C89               	rrf	9,f
 28930  3604  3901               	andlw	1
 28931  3605  3AFF               	xorlw	255
 28932  3606  00F1               	movwf	??_nullifyBadge_buttonsGet
 28933  3607  0871               	movf	??_nullifyBadge_buttonsGet,w
 28934  3608  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28935                           
 28936                           ;nullifyBadge.c: 191: retVal &= ~(PORTAbits.RA2 << 1);
 28937  3609  0C0C               	rrf	12,w	;volatile
 28938  360A  0C89               	rrf	9,f
 28939  360B  3901               	andlw	1
 28940  360C  0709               	addwf	9,w
 28941  360D  3AFF               	xorlw	255
 28942  360E  00F1               	movwf	??_nullifyBadge_buttonsGet
 28943  360F  0871               	movf	??_nullifyBadge_buttonsGet,w
 28944  3610  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28945                           
 28946                           ;nullifyBadge.c: 192: retVal &= ~(PORTAbits.RA4 << 2);
 28947  3611  0E0C               	swapf	12,w	;volatile
 28948  3612  3901               	andlw	1
 28949  3613  00F1               	movwf	??_nullifyBadge_buttonsGet
 28950  3614  3001               	movlw	1
 28951  3615                     u5165:	
 28952  3615  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 28953  3616  3EFF               	addlw	-1
 28954  3617  1D03               	skipz
 28955  3618  2E15               	goto	u5165
 28956  3619  3571               	lslf	??_nullifyBadge_buttonsGet,w
 28957  361A  3AFF               	xorlw	255
 28958  361B  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 28959  361C  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 28960  361D  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28961                           
 28962                           ;nullifyBadge.c: 193: retVal &= ~(PORTAbits.RA5 << 3);
 28963  361E  0E0C               	swapf	12,w	;volatile
 28964  361F  0C89               	rrf	9,f
 28965  3620  3901               	andlw	1
 28966  3621  00F1               	movwf	??_nullifyBadge_buttonsGet
 28967  3622  3002               	movlw	2
 28968  3623                     u5175:	
 28969  3623  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 28970  3624  3EFF               	addlw	-1
 28971  3625  1D03               	skipz
 28972  3626  2E23               	goto	u5175
 28973  3627  3571               	lslf	??_nullifyBadge_buttonsGet,w
 28974  3628  3AFF               	xorlw	255
 28975  3629  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 28976  362A  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 28977  362B  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28978                           
 28979                           ;nullifyBadge.c: 195: return retVal;
 28980  362C  0873               	movf	nullifyBadge_buttonsGet@retVal,w
 28981  362D  0008               	return
 28982  362E                     __end_of_nullifyBadge_buttonsGet:	
 28983                           
 28984                           	psect	text50
 28985  2201                     __ptext50:	
 28986 ;; *************** function _let_alternate *****************
 28987 ;; Defined at:
 28988 ;;		line 194 in file "main.c"
 28989 ;; Parameters:    Size  Location     Type
 28990 ;;  count           2   16[BANK0 ] unsigned int 
 28991 ;; Auto vars:     Size  Location     Type
 28992 ;;		None
 28993 ;; Return value:  Size  Location     Type
 28994 ;;                  1    wreg      void 
 28995 ;; Registers used:
 28996 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28997 ;; Tracked objects:
 28998 ;;		On entry : 0/0
 28999 ;;		On exit  : 0/0
 29000 ;;		Unchanged: 0/0
 29001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29002 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29005 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29006 ;;Total ram usage:        2 bytes
 29007 ;; Hardware stack levels used:    1
 29008 ;; Hardware stack levels required when called:    9
 29009 ;; This function calls:
 29010 ;;		_nullifyBadge_userLedsSet
 29011 ;; This function is called by:
 29012 ;;		_flashy_Main
 29013 ;; This function uses a non-reentrant model
 29014 ;;
 29015                           
 29016                           
 29017                           ;psect for function _let_alternate
 29018  2201                     _let_alternate:	
 29019                           
 29020                           ;main.c: 195: if(count %2 == 1){
 29021                           
 29022                           ;incstack = 0
 29023                           ; Regs used in _let_alternate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29024  2201  0020               	movlb	0	; select bank0
 29025  2202  1C30               	btfss	let_alternate@count,0
 29026  2203  2A0C               	goto	l8573
 29027                           
 29028                           ;main.c: 196: nullifyBadge_userLedsSet(&badge_inst,43349);
 29029  2204  3055               	movlw	85
 29030  2205  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29031  2206  30A9               	movlw	169
 29032  2207  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29033  2208  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29034  2209  31B2  22F7         	fcall	_nullifyBadge_userLedsSet
 29035                           
 29036                           ;main.c: 197: }
 29037  220B  0008               	return
 29038  220C                     l8573:	
 29039                           
 29040                           ;main.c: 198: else{
 29041                           ;main.c: 199: nullifyBadge_userLedsSet(&badge_inst,21162);
 29042  220C  30AA               	movlw	170
 29043  220D  0020               	movlb	0	; select bank0
 29044  220E  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29045  220F  3052               	movlw	82
 29046  2210  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29047  2211  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29048  2212  31B2  22F7         	fcall	_nullifyBadge_userLedsSet
 29049  2214  0008               	return
 29050  2215                     __end_of_let_alternate:	
 29051                           
 29052                           	psect	text51
 29053  37BF                     __ptext51:	
 29054 ;; *************** function _led_roundabout *****************
 29055 ;; Defined at:
 29056 ;;		line 159 in file "main.c"
 29057 ;; Parameters:    Size  Location     Type
 29058 ;;  counter         2   16[BANK0 ] unsigned int 
 29059 ;; Auto vars:     Size  Location     Type
 29060 ;;  size            2   22[BANK0 ] unsigned int 
 29061 ;;  leds            2   20[BANK0 ] unsigned int 
 29062 ;; Return value:  Size  Location     Type
 29063 ;;                  1    wreg      void 
 29064 ;; Registers used:
 29065 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29066 ;; Tracked objects:
 29067 ;;		On entry : 0/0
 29068 ;;		On exit  : 0/0
 29069 ;;		Unchanged: 0/0
 29070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29071 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29072 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29073 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29074 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29075 ;;Total ram usage:        8 bytes
 29076 ;; Hardware stack levels used:    1
 29077 ;; Hardware stack levels required when called:    9
 29078 ;; This function calls:
 29079 ;;		___lwmod
 29080 ;;		_nullifyBadge_userLedsSet
 29081 ;; This function is called by:
 29082 ;;		_flashy_Main
 29083 ;; This function uses a non-reentrant model
 29084 ;;
 29085                           
 29086                           
 29087                           ;psect for function _led_roundabout
 29088  37BF                     _led_roundabout:	
 29089                           
 29090                           ;main.c: 160: u16 size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 29091                           
 29092                           ;incstack = 0
 29093                           ; Regs used in _led_roundabout: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29094  37BF  300E               	movlw	14
 29095  37C0  0020               	movlb	0	; select bank0
 29096  37C1  00B6               	movwf	led_roundabout@size
 29097  37C2  3000               	movlw	0
 29098  37C3  00B7               	movwf	led_roundabout@size+1
 29099                           
 29100                           ;main.c: 161: u16 leds = roundabout_leds[counter % size];
 29101  37C4  0837               	movf	led_roundabout@size+1,w
 29102  37C5  00AC               	movwf	___lwmod@divisor+1
 29103  37C6  0836               	movf	led_roundabout@size,w
 29104  37C7  00AB               	movwf	___lwmod@divisor
 29105  37C8  0831               	movf	led_roundabout@counter+1,w
 29106  37C9  00AE               	movwf	___lwmod@dividend+1
 29107  37CA  0830               	movf	led_roundabout@counter,w
 29108  37CB  00AD               	movwf	___lwmod@dividend
 29109  37CC  31B5  25A1  31B7   	fcall	___lwmod
 29110  37CF  0020               	movlb	0	; select bank0
 29111  37D0  082B               	movf	?___lwmod,w
 29112  37D1  0709               	addwf	9,w
 29113  37D2  3EBC               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 29114  37D3  0086               	movwf	6
 29115  37D4  3003               	movlw	3	; select bank7/8
 29116  37D5  0087               	movwf	7
 29117  37D6  3F40               	moviw [0]fsr1
 29118  37D7  00B4               	movwf	led_roundabout@leds
 29119  37D8  3F41               	moviw [1]fsr1
 29120  37D9  00B5               	movwf	led_roundabout@leds+1
 29121                           
 29122                           ;main.c: 163: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 29123  37DA  300E               	movlw	14
 29124  37DB  00B6               	movwf	led_roundabout@size
 29125  37DC  3000               	movlw	0
 29126  37DD  00B7               	movwf	led_roundabout@size+1
 29127                           
 29128                           ;main.c: 164: leds |= roundabout_leds_inverse[counter % size];
 29129  37DE  0837               	movf	led_roundabout@size+1,w
 29130  37DF  00AC               	movwf	___lwmod@divisor+1
 29131  37E0  0836               	movf	led_roundabout@size,w
 29132  37E1  00AB               	movwf	___lwmod@divisor
 29133  37E2  0831               	movf	led_roundabout@counter+1,w
 29134  37E3  00AE               	movwf	___lwmod@dividend+1
 29135  37E4  0830               	movf	led_roundabout@counter,w
 29136  37E5  00AD               	movwf	___lwmod@dividend
 29137  37E6  31B5  25A1  31B7   	fcall	___lwmod
 29138  37E9  0020               	movlb	0	; select bank0
 29139  37EA  082B               	movf	?___lwmod,w
 29140  37EB  0709               	addwf	9,w
 29141  37EC  3EA0               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 29142  37ED  0086               	movwf	6
 29143  37EE  3003               	movlw	3	; select bank7/8
 29144  37EF  0087               	movwf	7
 29145  37F0  3F40               	moviw [0]fsr1
 29146  37F1  00B2               	movwf	??_led_roundabout
 29147  37F2  3F41               	moviw [1]fsr1
 29148  37F3  00B3               	movwf	??_led_roundabout+1
 29149  37F4  0832               	movf	??_led_roundabout,w
 29150  37F5  04B4               	iorwf	led_roundabout@leds,f
 29151  37F6  0833               	movf	??_led_roundabout+1,w
 29152  37F7  04B5               	iorwf	led_roundabout@leds+1,f
 29153                           
 29154                           ;main.c: 166: nullifyBadge_userLedsSet(&badge_inst, leds);
 29155  37F8  0835               	movf	led_roundabout@leds+1,w
 29156  37F9  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29157  37FA  0834               	movf	led_roundabout@leds,w
 29158  37FB  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29159  37FC  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29160  37FD  31B2  22F7         	fcall	_nullifyBadge_userLedsSet
 29161  37FF  0008               	return
 29162  3800                     __end_of_led_roundabout:	
 29163                           
 29164                           	psect	text52
 29165  29CB                     __ptext52:	
 29166 ;; *************** function _led_rand *****************
 29167 ;; Defined at:
 29168 ;;		line 179 in file "main.c"
 29169 ;; Parameters:    Size  Location     Type
 29170 ;;		None
 29171 ;; Auto vars:     Size  Location     Type
 29172 ;;  spark           2   27[BANK0 ] unsigned int 
 29173 ;; Return value:  Size  Location     Type
 29174 ;;                  1    wreg      void 
 29175 ;; Registers used:
 29176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29177 ;; Tracked objects:
 29178 ;;		On entry : 0/0
 29179 ;;		On exit  : 0/0
 29180 ;;		Unchanged: 0/0
 29181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29183 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29184 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29185 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29186 ;;Total ram usage:       10 bytes
 29187 ;; Hardware stack levels used:    1
 29188 ;; Hardware stack levels required when called:    9
 29189 ;; This function calls:
 29190 ;;		___almod
 29191 ;;		_nullifyBadge_userLedsSet
 29192 ;;		_rand
 29193 ;; This function is called by:
 29194 ;;		_flashy_Main
 29195 ;;		_slot_Finished_Animation
 29196 ;; This function uses a non-reentrant model
 29197 ;;
 29198                           
 29199                           
 29200                           ;psect for function _led_rand
 29201  29CB                     _led_rand:	
 29202                           
 29203                           ;main.c: 181: u16 spark = rand() % 65535;
 29204                           
 29205                           ;incstack = 0
 29206                           ; Regs used in _led_rand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29207  29CB  3000               	movlw	0
 29208  29CC  0020               	movlb	0	; select bank0
 29209  29CD  00AE               	movwf	___almod@divisor+3
 29210  29CE  3000               	movlw	0
 29211  29CF  00AD               	movwf	___almod@divisor+2
 29212  29D0  30FF               	movlw	255
 29213  29D1  00AC               	movwf	___almod@divisor+1
 29214  29D2  30FF               	movlw	255
 29215  29D3  00AB               	movwf	___almod@divisor
 29216  29D4  31A8  20FB  31A9   	fcall	_rand
 29217  29D7  0020               	movlb	0	; select bank0
 29218  29D8  0824               	movf	?_rand,w
 29219  29D9  00AF               	movwf	___almod@dividend
 29220  29DA  0825               	movf	?_rand+1,w
 29221  29DB  00B0               	movwf	___almod@dividend+1
 29222  29DC  0D89               	rlf	9,f
 29223  29DD  3B89               	subwfb	9,f
 29224  29DE  0989               	comf	9,f
 29225  29DF  00B1               	movwf	___almod@dividend+2
 29226  29E0  00B2               	movwf	___almod@dividend+3
 29227  29E1  31AF  271F  31A9   	fcall	___almod
 29228  29E4  0020               	movlb	0	; select bank0
 29229  29E5  082C               	movf	?___almod+1,w
 29230  29E6  00BC               	movwf	led_rand@spark+1
 29231  29E7  082B               	movf	?___almod,w
 29232  29E8  00BB               	movwf	led_rand@spark
 29233                           
 29234                           ;main.c: 182: if ( (spark | 64511) == 65535 ){
 29235  29E9  30FF               	movlw	255
 29236  29EA  00B3               	movwf	??_led_rand
 29237  29EB  30FB               	movlw	251
 29238  29EC  00B4               	movwf	??_led_rand+1
 29239  29ED  3000               	movlw	0
 29240  29EE  00B5               	movwf	??_led_rand+2
 29241  29EF  3000               	movlw	0
 29242  29F0  00B6               	movwf	??_led_rand+3
 29243  29F1  083B               	movf	led_rand@spark,w
 29244  29F2  00B7               	movwf	??_led_rand+4
 29245  29F3  083C               	movf	led_rand@spark+1,w
 29246  29F4  00B8               	movwf	??_led_rand+5
 29247  29F5  01B9               	clrf	??_led_rand+6
 29248  29F6  01BA               	clrf	??_led_rand+7
 29249  29F7  0837               	movf	??_led_rand+4,w
 29250  29F8  04B3               	iorwf	??_led_rand,f
 29251  29F9  0838               	movf	??_led_rand+5,w
 29252  29FA  04B4               	iorwf	??_led_rand+1,f
 29253  29FB  0839               	movf	??_led_rand+6,w
 29254  29FC  04B5               	iorwf	??_led_rand+2,f
 29255  29FD  083A               	movf	??_led_rand+7,w
 29256  29FE  04B6               	iorwf	??_led_rand+3,f
 29257  29FF  0A33               	incf	??_led_rand,w
 29258  2A00  1D03               	skipz
 29259  2A01  2A0B               	goto	l8487
 29260  2A02  0A34               	incf	??_led_rand+1,w
 29261  2A03  0435               	iorwf	??_led_rand+2,w
 29262  2A04  0436               	iorwf	??_led_rand+3,w
 29263  2A05  1D03               	btfss	3,2
 29264  2A06  2A0B               	goto	l8487
 29265                           
 29266                           ;main.c: 183: spark ^= 1024 ;
 29267  2A07  3000               	movlw	0
 29268  2A08  06BB               	xorwf	led_rand@spark,f
 29269  2A09  3004               	movlw	4
 29270  2A0A  06BC               	xorwf	led_rand@spark+1,f
 29271  2A0B                     l8487:	
 29272                           
 29273                           ;main.c: 184: }
 29274                           ;main.c: 185: nullifyBadge_userLedsSet(&badge_inst,spark);
 29275  2A0B  083C               	movf	led_rand@spark+1,w
 29276  2A0C  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29277  2A0D  083B               	movf	led_rand@spark,w
 29278  2A0E  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29279  2A0F  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29280  2A10  31B2  22F7         	fcall	_nullifyBadge_userLedsSet
 29281  2A12  0008               	return
 29282  2A13                     __end_of_led_rand:	
 29283                           
 29284                           	psect	text53
 29285  28FB                     __ptext53:	
 29286 ;; *************** function _rand *****************
 29287 ;; Defined at:
 29288 ;;		line 12 in file "/Applications/microchip/xc8/v1.42/sources/common/rand.c"
 29289 ;; Parameters:    Size  Location     Type
 29290 ;;		None
 29291 ;; Auto vars:     Size  Location     Type
 29292 ;;		None
 29293 ;; Return value:  Size  Location     Type
 29294 ;;                  2    4[BANK0 ] int 
 29295 ;; Registers used:
 29296 ;;		wreg, status,2, status,0, pclath, cstack
 29297 ;; Tracked objects:
 29298 ;;		On entry : 0/0
 29299 ;;		On exit  : 0/0
 29300 ;;		Unchanged: 0/0
 29301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29302 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29304 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29305 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29306 ;;Total ram usage:        7 bytes
 29307 ;; Hardware stack levels used:    1
 29308 ;; Hardware stack levels required when called:    5
 29309 ;; This function calls:
 29310 ;;		___lmul
 29311 ;; This function is called by:
 29312 ;;		_led_rand
 29313 ;;		_slot_Setup
 29314 ;;		_slot_Main
 29315 ;; This function uses a non-reentrant model
 29316 ;;
 29317                           
 29318                           
 29319                           ;psect for function _rand
 29320  28FB                     _rand:	
 29321                           
 29322                           ;incstack = 0
 29323                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 29324  28FB  0021               	movlb	1	; select bank1
 29325  28FC  084F               	movf	(_randx+3)^(0+128),w
 29326  28FD  00F4               	movwf	___lmul@multiplier+3
 29327  28FE  084E               	movf	(_randx+2)^(0+128),w
 29328  28FF  00F3               	movwf	___lmul@multiplier+2
 29329  2900  084D               	movf	(_randx+1)^(0+128),w
 29330  2901  00F2               	movwf	___lmul@multiplier+1
 29331  2902  084C               	movf	_randx^(0+128),w
 29332  2903  00F1               	movwf	___lmul@multiplier
 29333  2904  3041               	movlw	65
 29334  2905  00F8               	movwf	___lmul@multiplicand+3
 29335  2906  30C6               	movlw	198
 29336  2907  00F7               	movwf	___lmul@multiplicand+2
 29337  2908  304E               	movlw	78
 29338  2909  00F6               	movwf	___lmul@multiplicand+1
 29339  290A  306D               	movlw	109
 29340  290B  00F5               	movwf	___lmul@multiplicand
 29341  290C  31B6  262E  31A8   	fcall	___lmul
 29342  290F  0874               	movf	?___lmul+3,w
 29343  2910  0021               	movlb	1	; select bank1
 29344  2911  00CF               	movwf	(_randx+3)^(0+128)
 29345  2912  0873               	movf	?___lmul+2,w
 29346  2913  00CE               	movwf	(_randx+2)^(0+128)
 29347  2914  0872               	movf	?___lmul+1,w
 29348  2915  00CD               	movwf	(_randx+1)^(0+128)
 29349  2916  0871               	movf	?___lmul,w
 29350  2917  00CC               	movwf	_randx^(0+128)
 29351  2918  3039               	movlw	57
 29352  2919  07CC               	addwf	_randx^(0+128),f
 29353  291A  3030               	movlw	48
 29354  291B  3DCD               	addwfc	(_randx+1)^(0+128),f
 29355  291C  3000               	movlw	0
 29356  291D  3DCE               	addwfc	(_randx+2)^(0+128),f
 29357  291E  3000               	movlw	0
 29358  291F  3DCF               	addwfc	(_randx+3)^(0+128),f
 29359  2920  084C               	movf	_randx^(0+128),w
 29360  2921  0020               	movlb	0	; select bank0
 29361  2922  00A6               	movwf	??_rand
 29362  2923  0021               	movlb	1	; select bank1
 29363  2924  084D               	movf	(_randx+1)^(0+128),w
 29364  2925  0020               	movlb	0	; select bank0
 29365  2926  00A7               	movwf	??_rand+1
 29366  2927  0021               	movlb	1	; select bank1
 29367  2928  084E               	movf	(_randx+2)^(0+128),w
 29368  2929  0020               	movlb	0	; select bank0
 29369  292A  00A8               	movwf	??_rand+2
 29370  292B  0021               	movlb	1	; select bank1
 29371  292C  084F               	movf	(_randx+3)^(0+128),w
 29372  292D  0020               	movlb	0	; select bank0
 29373  292E  00A9               	movwf	??_rand+3
 29374  292F  3010               	movlw	16
 29375  2930  00AA               	movwf	??_rand+4
 29376  2931                     u4745:	
 29377  2931  37A9               	asrf	??_rand+3,f
 29378  2932  0CA8               	rrf	??_rand+2,f
 29379  2933  0CA7               	rrf	??_rand+1,f
 29380  2934  0CA6               	rrf	??_rand,f
 29381  2935  0BAA               	decfsz	??_rand+4,f
 29382  2936  2931               	goto	u4745
 29383  2937  30FF               	movlw	255
 29384  2938  0526               	andwf	??_rand,w
 29385  2939  00A4               	movwf	?_rand
 29386  293A  307F               	movlw	127
 29387  293B  0527               	andwf	??_rand+1,w
 29388  293C  00A5               	movwf	?_rand+1
 29389  293D  0008               	return
 29390  293E                     __end_of_rand:	
 29391                           
 29392                           	psect	text54
 29393  362E                     __ptext54:	
 29394 ;; *************** function ___lmul *****************
 29395 ;; Defined at:
 29396 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul32.c"
 29397 ;; Parameters:    Size  Location     Type
 29398 ;;  multiplier      4    1[COMMON] unsigned long 
 29399 ;;  multiplicand    4    5[COMMON] unsigned long 
 29400 ;; Auto vars:     Size  Location     Type
 29401 ;;  product         4    0[BANK0 ] unsigned long 
 29402 ;; Return value:  Size  Location     Type
 29403 ;;                  4    1[COMMON] unsigned long 
 29404 ;; Registers used:
 29405 ;;		wreg, status,2, status,0
 29406 ;; Tracked objects:
 29407 ;;		On entry : 0/0
 29408 ;;		On exit  : 0/0
 29409 ;;		Unchanged: 0/0
 29410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29411 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29412 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29414 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29415 ;;Total ram usage:       12 bytes
 29416 ;; Hardware stack levels used:    1
 29417 ;; Hardware stack levels required when called:    4
 29418 ;; This function calls:
 29419 ;;		Nothing
 29420 ;; This function is called by:
 29421 ;;		_rand
 29422 ;; This function uses a non-reentrant model
 29423 ;;
 29424                           
 29425                           
 29426                           ;psect for function ___lmul
 29427  362E                     ___lmul:	
 29428                           
 29429                           ;incstack = 0
 29430                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 29431  362E  3000               	movlw	0
 29432  362F  0020               	movlb	0	; select bank0
 29433  3630  00A3               	movwf	___lmul@product+3
 29434  3631  3000               	movlw	0
 29435  3632  00A2               	movwf	___lmul@product+2
 29436  3633  3000               	movlw	0
 29437  3634  00A1               	movwf	___lmul@product+1
 29438  3635  3000               	movlw	0
 29439  3636  00A0               	movwf	___lmul@product
 29440  3637                     l8311:	
 29441  3637  1C71               	btfss	___lmul@multiplier,0
 29442  3638  2E42               	goto	l8315
 29443  3639  0875               	movf	___lmul@multiplicand,w
 29444  363A  0020               	movlb	0	; select bank0
 29445  363B  07A0               	addwf	___lmul@product,f
 29446  363C  0876               	movf	___lmul@multiplicand+1,w
 29447  363D  3DA1               	addwfc	___lmul@product+1,f
 29448  363E  0877               	movf	___lmul@multiplicand+2,w
 29449  363F  3DA2               	addwfc	___lmul@product+2,f
 29450  3640  0878               	movf	___lmul@multiplicand+3,w
 29451  3641  3DA3               	addwfc	___lmul@product+3,f
 29452  3642                     l8315:	
 29453  3642  3001               	movlw	1
 29454  3643                     u4695:	
 29455  3643  35F5               	lslf	___lmul@multiplicand,f
 29456  3644  0DF6               	rlf	___lmul@multiplicand+1,f
 29457  3645  0DF7               	rlf	___lmul@multiplicand+2,f
 29458  3646  0DF8               	rlf	___lmul@multiplicand+3,f
 29459  3647  0B89               	decfsz	9,f
 29460  3648  2E43               	goto	u4695
 29461  3649  3001               	movlw	1
 29462  364A                     u4705:	
 29463  364A  36F4               	lsrf	___lmul@multiplier+3,f
 29464  364B  0CF3               	rrf	___lmul@multiplier+2,f
 29465  364C  0CF2               	rrf	___lmul@multiplier+1,f
 29466  364D  0CF1               	rrf	___lmul@multiplier,f
 29467  364E  0B89               	decfsz	9,f
 29468  364F  2E4A               	goto	u4705
 29469  3650  0874               	movf	___lmul@multiplier+3,w
 29470  3651  0473               	iorwf	___lmul@multiplier+2,w
 29471  3652  0472               	iorwf	___lmul@multiplier+1,w
 29472  3653  0471               	iorwf	___lmul@multiplier,w
 29473  3654  1D03               	skipz
 29474  3655  2E37               	goto	l8311
 29475  3656  0020               	movlb	0	; select bank0
 29476  3657  0823               	movf	___lmul@product+3,w
 29477  3658  00F4               	movwf	?___lmul+3
 29478  3659  0822               	movf	___lmul@product+2,w
 29479  365A  00F3               	movwf	?___lmul+2
 29480  365B  0821               	movf	___lmul@product+1,w
 29481  365C  00F2               	movwf	?___lmul+1
 29482  365D  0820               	movf	___lmul@product,w
 29483  365E  00F1               	movwf	?___lmul
 29484  365F  0008               	return
 29485  3660                     __end_of___lmul:	
 29486                           
 29487                           	psect	text55
 29488  2F1F                     __ptext55:	
 29489 ;; *************** function ___almod *****************
 29490 ;; Defined at:
 29491 ;;		line 5 in file "/Applications/microchip/xc8/v1.42/sources/common/almod.c"
 29492 ;; Parameters:    Size  Location     Type
 29493 ;;  divisor         4   11[BANK0 ] long 
 29494 ;;  dividend        4   15[BANK0 ] long 
 29495 ;; Auto vars:     Size  Location     Type
 29496 ;;  sign            1   11[COMMON] unsigned char 
 29497 ;;  counter         1   10[COMMON] unsigned char 
 29498 ;; Return value:  Size  Location     Type
 29499 ;;                  4   11[BANK0 ] long 
 29500 ;; Registers used:
 29501 ;;		wreg, status,2, status,0
 29502 ;; Tracked objects:
 29503 ;;		On entry : 0/0
 29504 ;;		On exit  : 0/0
 29505 ;;		Unchanged: 0/0
 29506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29507 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29509 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29510 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29511 ;;Total ram usage:       11 bytes
 29512 ;; Hardware stack levels used:    1
 29513 ;; Hardware stack levels required when called:    4
 29514 ;; This function calls:
 29515 ;;		Nothing
 29516 ;; This function is called by:
 29517 ;;		_led_rand
 29518 ;; This function uses a non-reentrant model
 29519 ;;
 29520                           
 29521                           
 29522                           ;psect for function ___almod
 29523  2F1F                     ___almod:	
 29524                           
 29525                           ;incstack = 0
 29526                           ; Regs used in ___almod: [wreg+status,2+status,0]
 29527  2F1F  01FB               	clrf	___almod@sign
 29528  2F20  0020               	movlb	0	; select bank0
 29529  2F21  1FB2               	btfss	___almod@dividend+3,7
 29530  2F22  2F30               	goto	l1780
 29531  2F23  09AF               	comf	___almod@dividend,f
 29532  2F24  09B0               	comf	___almod@dividend+1,f
 29533  2F25  09B1               	comf	___almod@dividend+2,f
 29534  2F26  09B2               	comf	___almod@dividend+3,f
 29535  2F27  0AAF               	incf	___almod@dividend,f
 29536  2F28  1903               	skipnz
 29537  2F29  0AB0               	incf	___almod@dividend+1,f
 29538  2F2A  1903               	skipnz
 29539  2F2B  0AB1               	incf	___almod@dividend+2,f
 29540  2F2C  1903               	skipnz
 29541  2F2D  0AB2               	incf	___almod@dividend+3,f
 29542  2F2E  01FB               	clrf	___almod@sign
 29543  2F2F  0AFB               	incf	___almod@sign,f
 29544  2F30                     l1780:	
 29545  2F30  1FAE               	btfss	___almod@divisor+3,7
 29546  2F31  2F3D               	goto	l8363
 29547  2F32  09AB               	comf	___almod@divisor,f
 29548  2F33  09AC               	comf	___almod@divisor+1,f
 29549  2F34  09AD               	comf	___almod@divisor+2,f
 29550  2F35  09AE               	comf	___almod@divisor+3,f
 29551  2F36  0AAB               	incf	___almod@divisor,f
 29552  2F37  1903               	skipnz
 29553  2F38  0AAC               	incf	___almod@divisor+1,f
 29554  2F39  1903               	skipnz
 29555  2F3A  0AAD               	incf	___almod@divisor+2,f
 29556  2F3B  1903               	skipnz
 29557  2F3C  0AAE               	incf	___almod@divisor+3,f
 29558  2F3D                     l8363:	
 29559  2F3D  082E               	movf	___almod@divisor+3,w
 29560  2F3E  042D               	iorwf	___almod@divisor+2,w
 29561  2F3F  042C               	iorwf	___almod@divisor+1,w
 29562  2F40  042B               	iorwf	___almod@divisor,w
 29563  2F41  1903               	skipnz
 29564  2F42  2F76               	goto	l8379
 29565  2F43  01FA               	clrf	___almod@counter
 29566  2F44  0AFA               	incf	___almod@counter,f
 29567  2F45                     l8369:	
 29568  2F45  1BAE               	btfsc	___almod@divisor+3,7
 29569  2F46  2F53               	goto	l8371
 29570  2F47  3001               	movlw	1
 29571  2F48                     u4785:	
 29572  2F48  35AB               	lslf	___almod@divisor,f
 29573  2F49  0DAC               	rlf	___almod@divisor+1,f
 29574  2F4A  0DAD               	rlf	___almod@divisor+2,f
 29575  2F4B  0DAE               	rlf	___almod@divisor+3,f
 29576  2F4C  0B89               	decfsz	9,f
 29577  2F4D  2F48               	goto	u4785
 29578  2F4E  3001               	movlw	1
 29579  2F4F  00F9               	movwf	??___almod
 29580  2F50  0879               	movf	??___almod,w
 29581  2F51  07FA               	addwf	___almod@counter,f
 29582  2F52  2F45               	goto	l8369
 29583  2F53                     l8371:	
 29584  2F53  082E               	movf	___almod@divisor+3,w
 29585  2F54  0232               	subwf	___almod@dividend+3,w
 29586  2F55  1D03               	skipz
 29587  2F56  2F61               	goto	u4805
 29588  2F57  082D               	movf	___almod@divisor+2,w
 29589  2F58  0231               	subwf	___almod@dividend+2,w
 29590  2F59  1D03               	skipz
 29591  2F5A  2F61               	goto	u4805
 29592  2F5B  082C               	movf	___almod@divisor+1,w
 29593  2F5C  0230               	subwf	___almod@dividend+1,w
 29594  2F5D  1D03               	skipz
 29595  2F5E  2F61               	goto	u4805
 29596  2F5F  082B               	movf	___almod@divisor,w
 29597  2F60  022F               	subwf	___almod@dividend,w
 29598  2F61                     u4805:	
 29599  2F61  1C03               	skipc
 29600  2F62  2F6B               	goto	l8375
 29601  2F63  082B               	movf	___almod@divisor,w
 29602  2F64  02AF               	subwf	___almod@dividend,f
 29603  2F65  082C               	movf	___almod@divisor+1,w
 29604  2F66  3BB0               	subwfb	___almod@dividend+1,f
 29605  2F67  082D               	movf	___almod@divisor+2,w
 29606  2F68  3BB1               	subwfb	___almod@dividend+2,f
 29607  2F69  082E               	movf	___almod@divisor+3,w
 29608  2F6A  3BB2               	subwfb	___almod@dividend+3,f
 29609  2F6B                     l8375:	
 29610  2F6B  3001               	movlw	1
 29611  2F6C                     u4815:	
 29612  2F6C  36AE               	lsrf	___almod@divisor+3,f
 29613  2F6D  0CAD               	rrf	___almod@divisor+2,f
 29614  2F6E  0CAC               	rrf	___almod@divisor+1,f
 29615  2F6F  0CAB               	rrf	___almod@divisor,f
 29616  2F70  0B89               	decfsz	9,f
 29617  2F71  2F6C               	goto	u4815
 29618  2F72  3001               	movlw	1
 29619  2F73  02FA               	subwf	___almod@counter,f
 29620  2F74  1D03               	btfss	3,2
 29621  2F75  2F53               	goto	l8371
 29622  2F76                     l8379:	
 29623  2F76  087B               	movf	___almod@sign,w
 29624  2F77  1903               	btfsc	3,2
 29625  2F78  2F84               	goto	l8383
 29626  2F79  09AF               	comf	___almod@dividend,f
 29627  2F7A  09B0               	comf	___almod@dividend+1,f
 29628  2F7B  09B1               	comf	___almod@dividend+2,f
 29629  2F7C  09B2               	comf	___almod@dividend+3,f
 29630  2F7D  0AAF               	incf	___almod@dividend,f
 29631  2F7E  1903               	skipnz
 29632  2F7F  0AB0               	incf	___almod@dividend+1,f
 29633  2F80  1903               	skipnz
 29634  2F81  0AB1               	incf	___almod@dividend+2,f
 29635  2F82  1903               	skipnz
 29636  2F83  0AB2               	incf	___almod@dividend+3,f
 29637  2F84                     l8383:	
 29638  2F84  0832               	movf	___almod@dividend+3,w
 29639  2F85  00AE               	movwf	?___almod+3
 29640  2F86  0831               	movf	___almod@dividend+2,w
 29641  2F87  00AD               	movwf	?___almod+2
 29642  2F88  0830               	movf	___almod@dividend+1,w
 29643  2F89  00AC               	movwf	?___almod+1
 29644  2F8A  082F               	movf	___almod@dividend,w
 29645  2F8B  00AB               	movwf	?___almod
 29646  2F8C  0008               	return
 29647  2F8D                     __end_of___almod:	
 29648                           
 29649                           	psect	text56
 29650  377E                     __ptext56:	
 29651 ;; *************** function _led_curtain *****************
 29652 ;; Defined at:
 29653 ;;		line 169 in file "main.c"
 29654 ;; Parameters:    Size  Location     Type
 29655 ;;  counter         2   16[BANK0 ] unsigned int 
 29656 ;; Auto vars:     Size  Location     Type
 29657 ;;  size            2   22[BANK0 ] unsigned int 
 29658 ;;  leds            2   20[BANK0 ] unsigned int 
 29659 ;; Return value:  Size  Location     Type
 29660 ;;                  1    wreg      void 
 29661 ;; Registers used:
 29662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29663 ;; Tracked objects:
 29664 ;;		On entry : 0/0
 29665 ;;		On exit  : 0/0
 29666 ;;		Unchanged: 0/0
 29667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29668 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29669 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29671 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29672 ;;Total ram usage:        8 bytes
 29673 ;; Hardware stack levels used:    1
 29674 ;; Hardware stack levels required when called:    9
 29675 ;; This function calls:
 29676 ;;		___lwmod
 29677 ;;		_nullifyBadge_userLedsSet
 29678 ;; This function is called by:
 29679 ;;		_flashy_Main
 29680 ;;		_matrix_Main
 29681 ;; This function uses a non-reentrant model
 29682 ;;
 29683                           
 29684                           
 29685                           ;psect for function _led_curtain
 29686  377E                     _led_curtain:	
 29687                           
 29688                           ;main.c: 170: u16 size = sizeof(curtain_leds) / sizeof(curtain_leds[0]);
 29689                           
 29690                           ;incstack = 0
 29691                           ; Regs used in _led_curtain: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29692  377E  300E               	movlw	14
 29693  377F  0020               	movlb	0	; select bank0
 29694  3780  00B6               	movwf	led_curtain@size
 29695  3781  3000               	movlw	0
 29696  3782  00B7               	movwf	led_curtain@size+1
 29697                           
 29698                           ;main.c: 171: u16 leds = curtain_leds[counter % size];
 29699  3783  0837               	movf	led_curtain@size+1,w
 29700  3784  00AC               	movwf	___lwmod@divisor+1
 29701  3785  0836               	movf	led_curtain@size,w
 29702  3786  00AB               	movwf	___lwmod@divisor
 29703  3787  0831               	movf	led_curtain@counter+1,w
 29704  3788  00AE               	movwf	___lwmod@dividend+1
 29705  3789  0830               	movf	led_curtain@counter,w
 29706  378A  00AD               	movwf	___lwmod@dividend
 29707  378B  31B5  25A1  31B7   	fcall	___lwmod
 29708  378E  0020               	movlb	0	; select bank0
 29709  378F  082B               	movf	?___lwmod,w
 29710  3790  0709               	addwf	9,w
 29711  3791  3E3C               	addlw	(low (_curtain_leds| (0+1024)))& (0+255)
 29712  3792  0086               	movwf	6
 29713  3793  3004               	movlw	4	; select bank8/9
 29714  3794  0087               	movwf	7
 29715  3795  3F40               	moviw [0]fsr1
 29716  3796  00B4               	movwf	led_curtain@leds
 29717  3797  3F41               	moviw [1]fsr1
 29718  3798  00B5               	movwf	led_curtain@leds+1
 29719                           
 29720                           ;main.c: 173: size = sizeof(curtain_leds_inverse) / sizeof(curtain_leds_inverse[0]);
 29721  3799  300E               	movlw	14
 29722  379A  00B6               	movwf	led_curtain@size
 29723  379B  3000               	movlw	0
 29724  379C  00B7               	movwf	led_curtain@size+1
 29725                           
 29726                           ;main.c: 174: leds |= curtain_leds_inverse[counter % size];
 29727  379D  0837               	movf	led_curtain@size+1,w
 29728  379E  00AC               	movwf	___lwmod@divisor+1
 29729  379F  0836               	movf	led_curtain@size,w
 29730  37A0  00AB               	movwf	___lwmod@divisor
 29731  37A1  0831               	movf	led_curtain@counter+1,w
 29732  37A2  00AE               	movwf	___lwmod@dividend+1
 29733  37A3  0830               	movf	led_curtain@counter,w
 29734  37A4  00AD               	movwf	___lwmod@dividend
 29735  37A5  31B5  25A1  31B7   	fcall	___lwmod
 29736  37A8  0020               	movlb	0	; select bank0
 29737  37A9  082B               	movf	?___lwmod,w
 29738  37AA  0709               	addwf	9,w
 29739  37AB  3E20               	addlw	(low (_curtain_leds_inverse| (0+1024)))& (0+255)
 29740  37AC  0086               	movwf	6
 29741  37AD  3004               	movlw	4	; select bank8/9
 29742  37AE  0087               	movwf	7
 29743  37AF  3F40               	moviw [0]fsr1
 29744  37B0  00B2               	movwf	??_led_curtain
 29745  37B1  3F41               	moviw [1]fsr1
 29746  37B2  00B3               	movwf	??_led_curtain+1
 29747  37B3  0832               	movf	??_led_curtain,w
 29748  37B4  04B4               	iorwf	led_curtain@leds,f
 29749  37B5  0833               	movf	??_led_curtain+1,w
 29750  37B6  04B5               	iorwf	led_curtain@leds+1,f
 29751                           
 29752                           ;main.c: 176: nullifyBadge_userLedsSet(&badge_inst, leds);
 29753  37B7  0835               	movf	led_curtain@leds+1,w
 29754  37B8  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29755  37B9  0834               	movf	led_curtain@leds,w
 29756  37BA  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29757  37BB  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29758  37BC  31B2  22F7         	fcall	_nullifyBadge_userLedsSet
 29759  37BE  0008               	return
 29760  37BF                     __end_of_led_curtain:	
 29761                           
 29762                           	psect	text57
 29763  3201                     __ptext57:	
 29764 ;; *************** function _led_circle *****************
 29765 ;; Defined at:
 29766 ;;		line 188 in file "main.c"
 29767 ;; Parameters:    Size  Location     Type
 29768 ;;  count           2   16[BANK0 ] unsigned int 
 29769 ;; Auto vars:     Size  Location     Type
 29770 ;;		None
 29771 ;; Return value:  Size  Location     Type
 29772 ;;                  1    wreg      void 
 29773 ;; Registers used:
 29774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29775 ;; Tracked objects:
 29776 ;;		On entry : 0/0
 29777 ;;		On exit  : 0/0
 29778 ;;		Unchanged: 0/0
 29779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29780 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29783 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29784 ;;Total ram usage:        2 bytes
 29785 ;; Hardware stack levels used:    1
 29786 ;; Hardware stack levels required when called:    9
 29787 ;; This function calls:
 29788 ;;		_nullifyBadge_userLedsSet
 29789 ;; This function is called by:
 29790 ;;		_flashy_Main
 29791 ;;		_slot_Running_Animation
 29792 ;; This function uses a non-reentrant model
 29793 ;;
 29794                           
 29795                           
 29796                           ;psect for function _led_circle
 29797  3201                     _led_circle:	
 29798                           
 29799                           ;main.c: 190: nullifyBadge_userLedsSet(&badge_inst,count);
 29800                           
 29801                           ;incstack = 0
 29802                           ; Regs used in _led_circle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29803  3201  0020               	movlb	0	; select bank0
 29804  3202  0831               	movf	led_circle@count+1,w
 29805  3203  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29806  3204  0830               	movf	led_circle@count,w
 29807  3205  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29808  3206  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29809  3207  31B2  22F7         	fcall	_nullifyBadge_userLedsSet
 29810  3209  0008               	return
 29811  320A                     __end_of_led_circle:	
 29812                           
 29813                           	psect	text58
 29814  2EBA                     __ptext58:	
 29815 ;; *************** function _led_Parody *****************
 29816 ;; Defined at:
 29817 ;;		line 203 in file "main.c"
 29818 ;; Parameters:    Size  Location     Type
 29819 ;;  count           2   16[BANK0 ] unsigned int 
 29820 ;; Auto vars:     Size  Location     Type
 29821 ;;  size            2   22[BANK0 ] unsigned int 
 29822 ;;  leds            2   20[BANK0 ] unsigned int 
 29823 ;; Return value:  Size  Location     Type
 29824 ;;                  1    wreg      void 
 29825 ;; Registers used:
 29826 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29827 ;; Tracked objects:
 29828 ;;		On entry : 0/0
 29829 ;;		On exit  : 0/0
 29830 ;;		Unchanged: 0/0
 29831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29832 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29833 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29834 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29835 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29836 ;;Total ram usage:        8 bytes
 29837 ;; Hardware stack levels used:    1
 29838 ;; Hardware stack levels required when called:    9
 29839 ;; This function calls:
 29840 ;;		___lwmod
 29841 ;;		_nullifyBadge_userLedsSet
 29842 ;; This function is called by:
 29843 ;;		_flashy_Main
 29844 ;;		_matrix_Main
 29845 ;; This function uses a non-reentrant model
 29846 ;;
 29847                           
 29848                           
 29849                           ;psect for function _led_Parody
 29850  2EBA                     _led_Parody:	
 29851                           
 29852                           ;main.c: 204: u16 size;
 29853                           ;main.c: 205: u16 leds;
 29854                           ;main.c: 207: if (count % 30 == 0){
 29855                           
 29856                           ;incstack = 0
 29857                           ; Regs used in _led_Parody: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29858  2EBA  301E               	movlw	30
 29859  2EBB  0020               	movlb	0	; select bank0
 29860  2EBC  00AB               	movwf	___lwmod@divisor
 29861  2EBD  3000               	movlw	0
 29862  2EBE  00AC               	movwf	___lwmod@divisor+1
 29863  2EBF  0831               	movf	led_Parody@count+1,w
 29864  2EC0  00AE               	movwf	___lwmod@dividend+1
 29865  2EC1  0830               	movf	led_Parody@count,w
 29866  2EC2  00AD               	movwf	___lwmod@dividend
 29867  2EC3  31B5  25A1  31AE   	fcall	___lwmod
 29868  2EC6  0020               	movlb	0	; select bank0
 29869  2EC7  082B               	movf	?___lwmod,w
 29870  2EC8  042C               	iorwf	?___lwmod+1,w
 29871  2EC9  1D03               	btfss	3,2
 29872  2ECA  2ED0               	goto	l625
 29873                           
 29874                           ;main.c: 208: oddeven ^= 1 ;
 29875  2ECB  3001               	movlw	1
 29876  2ECC  0021               	movlb	1	; select bank1
 29877  2ECD  06B8               	xorwf	_oddeven^(0+128),f
 29878  2ECE  3000               	movlw	0
 29879  2ECF  06B9               	xorwf	(_oddeven+1)^(0+128),f
 29880  2ED0                     l625:	
 29881                           
 29882                           ;main.c: 209: }
 29883                           ;main.c: 211: if(count %2 == oddeven){
 29884  2ED0  3001               	movlw	1
 29885  2ED1  0020               	movlb	0	; select bank0
 29886  2ED2  0530               	andwf	led_Parody@count,w
 29887  2ED3  00B2               	movwf	??_led_Parody
 29888  2ED4  3000               	movlw	0
 29889  2ED5  0531               	andwf	led_Parody@count+1,w
 29890  2ED6  00B3               	movwf	??_led_Parody+1
 29891  2ED7  0021               	movlb	1	; select bank1
 29892  2ED8  0839               	movf	(_oddeven+1)^(0+128),w
 29893  2ED9  0020               	movlb	0	; select bank0
 29894  2EDA  0633               	xorwf	??_led_Parody+1,w
 29895  2EDB  1D03               	skipz
 29896  2EDC  2EE1               	goto	u5155
 29897  2EDD  0021               	movlb	1	; select bank1
 29898  2EDE  0838               	movf	_oddeven^(0+128),w
 29899  2EDF  0020               	movlb	0	; select bank0
 29900  2EE0  0632               	xorwf	??_led_Parody,w
 29901  2EE1                     u5155:	
 29902  2EE1  1D03               	skipz
 29903  2EE2  2EFD               	goto	l8583
 29904                           
 29905                           ;main.c: 213: size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 29906  2EE3  300E               	movlw	14
 29907  2EE4  00B6               	movwf	led_Parody@size
 29908  2EE5  3000               	movlw	0
 29909  2EE6  00B7               	movwf	led_Parody@size+1
 29910                           
 29911                           ;main.c: 214: leds = roundabout_leds[count % size];
 29912  2EE7  0837               	movf	led_Parody@size+1,w
 29913  2EE8  00AC               	movwf	___lwmod@divisor+1
 29914  2EE9  0836               	movf	led_Parody@size,w
 29915  2EEA  00AB               	movwf	___lwmod@divisor
 29916  2EEB  0831               	movf	led_Parody@count+1,w
 29917  2EEC  00AE               	movwf	___lwmod@dividend+1
 29918  2EED  0830               	movf	led_Parody@count,w
 29919  2EEE  00AD               	movwf	___lwmod@dividend
 29920  2EEF  31B5  25A1  31AE   	fcall	___lwmod
 29921  2EF2  0020               	movlb	0	; select bank0
 29922  2EF3  082B               	movf	?___lwmod,w
 29923  2EF4  0709               	addwf	9,w
 29924  2EF5  3EBC               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 29925  2EF6  0086               	movwf	6
 29926  2EF7  3003               	movlw	3	; select bank7/8
 29927  2EF8  0087               	movwf	7
 29928  2EF9  3F40               	moviw [0]fsr1
 29929  2EFA  00B4               	movwf	led_Parody@leds
 29930  2EFB  3F41               	moviw [1]fsr1
 29931  2EFC  2F16               	goto	L14
 29932  2EFD                     l8583:	
 29933                           ;main.c: 215: }
 29934                           
 29935                           
 29936                           ;main.c: 216: else{
 29937                           ;main.c: 217: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 29938  2EFD  300E               	movlw	14
 29939  2EFE  00B6               	movwf	led_Parody@size
 29940  2EFF  3000               	movlw	0
 29941  2F00  00B7               	movwf	led_Parody@size+1
 29942                           
 29943                           ;main.c: 218: leds = roundabout_leds_inverse[count % size];
 29944  2F01  0837               	movf	led_Parody@size+1,w
 29945  2F02  00AC               	movwf	___lwmod@divisor+1
 29946  2F03  0836               	movf	led_Parody@size,w
 29947  2F04  00AB               	movwf	___lwmod@divisor
 29948  2F05  0831               	movf	led_Parody@count+1,w
 29949  2F06  00AE               	movwf	___lwmod@dividend+1
 29950  2F07  0830               	movf	led_Parody@count,w
 29951  2F08  00AD               	movwf	___lwmod@dividend
 29952  2F09  31B5  25A1  31AE   	fcall	___lwmod
 29953  2F0C  0020               	movlb	0	; select bank0
 29954  2F0D  082B               	movf	?___lwmod,w
 29955  2F0E  0709               	addwf	9,w
 29956  2F0F  3EA0               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 29957  2F10  0086               	movwf	6
 29958  2F11  3003               	movlw	3	; select bank7/8
 29959  2F12  0087               	movwf	7
 29960  2F13  3F40               	moviw [0]fsr1
 29961  2F14  00B4               	movwf	led_Parody@leds
 29962  2F15  3F41               	moviw [1]fsr1
 29963  2F16                     L14:	
 29964  2F16  00B5               	movwf	led_Parody@leds+1
 29965                           
 29966                           ;main.c: 219: }
 29967                           ;main.c: 220: nullifyBadge_userLedsSet(&badge_inst, leds);
 29968  2F17  0835               	movf	led_Parody@leds+1,w
 29969  2F18  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29970  2F19  0834               	movf	led_Parody@leds,w
 29971  2F1A  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29972  2F1B  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29973  2F1C  31B2  22F7         	fcall	_nullifyBadge_userLedsSet
 29974  2F1E  0008               	return
 29975  2F1F                     __end_of_led_Parody:	
 29976                           
 29977                           	psect	text59
 29978  32F7                     __ptext59:	
 29979 ;; *************** function _nullifyBadge_userLedsSet *****************
 29980 ;; Defined at:
 29981 ;;		line 164 in file "nullifyBadge.c"
 29982 ;; Parameters:    Size  Location     Type
 29983 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 29984 ;;		 -> badge_inst(18), 
 29985 ;;  userLedData     2   13[BANK0 ] unsigned int 
 29986 ;; Auto vars:     Size  Location     Type
 29987 ;;  badge           1   15[BANK0 ] PTR struct t_nullifyBadg
 29988 ;;		 -> badge_inst(18), 
 29989 ;; Return value:  Size  Location     Type
 29990 ;;                  1    wreg      void 
 29991 ;; Registers used:
 29992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29993 ;; Tracked objects:
 29994 ;;		On entry : 0/0
 29995 ;;		On exit  : 0/0
 29996 ;;		Unchanged: 0/0
 29997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29998 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30001 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30002 ;;Total ram usage:        3 bytes
 30003 ;; Hardware stack levels used:    1
 30004 ;; Hardware stack levels required when called:    8
 30005 ;; This function calls:
 30006 ;;		_displayL2_SetUserLeds
 30007 ;; This function is called by:
 30008 ;;		_led_roundabout
 30009 ;;		_led_curtain
 30010 ;;		_led_rand
 30011 ;;		_led_circle
 30012 ;;		_let_alternate
 30013 ;;		_led_Parody
 30014 ;;		_menu_display_option
 30015 ;;		_flashy_Main
 30016 ;;		_locked_Main
 30017 ;; This function uses a non-reentrant model
 30018 ;;
 30019                           
 30020                           
 30021                           ;psect for function _nullifyBadge_userLedsSet
 30022  32F7                     _nullifyBadge_userLedsSet:	
 30023                           
 30024                           ;incstack = 0
 30025                           ; Regs used in _nullifyBadge_userLedsSet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 30026                           ;nullifyBadge_userLedsSet@badge stored from wreg
 30027  32F7  0020               	movlb	0	; select bank0
 30028  32F8  00AF               	movwf	nullifyBadge_userLedsSet@badge
 30029                           
 30030                           ;nullifyBadge.c: 165: if (badge_locked) {
 30031  32F9  0021               	movlb	1	; select bank1
 30032  32FA  0844               	movf	_badge_locked^(0+128),w
 30033  32FB  1903               	btfsc	3,2
 30034  32FC  2AFF               	goto	l8343
 30035                           
 30036                           ;nullifyBadge.c: 166: userLedData |= 1024;
 30037  32FD  0020               	movlb	0	; select bank0
 30038  32FE  152E               	bsf	nullifyBadge_userLedsSet@userLedData+1,2
 30039  32FF                     l8343:	
 30040                           
 30041                           ;nullifyBadge.c: 167: }
 30042                           ;nullifyBadge.c: 168: displayL2_SetUserLeds(&badge->display, userLedData);
 30043  32FF  0020               	movlb	0	; select bank0
 30044  3300  082E               	movf	nullifyBadge_userLedsSet@userLedData+1,w
 30045  3301  00AC               	movwf	displayL2_SetUserLeds@userLedData+1
 30046  3302  082D               	movf	nullifyBadge_userLedsSet@userLedData,w
 30047  3303  00AB               	movwf	displayL2_SetUserLeds@userLedData
 30048  3304  082F               	movf	nullifyBadge_userLedsSet@badge,w
 30049  3305  31B4  2482         	fcall	_displayL2_SetUserLeds
 30050  3307  0008               	return
 30051  3308                     __end_of_nullifyBadge_userLedsSet:	
 30052                           
 30053                           	psect	text60
 30054  3482                     __ptext60:	
 30055 ;; *************** function _displayL2_SetUserLeds *****************
 30056 ;; Defined at:
 30057 ;;		line 88 in file "nullifyBadge_displayL2.c"
 30058 ;; Parameters:    Size  Location     Type
 30059 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30060 ;;		 -> badge_inst(18), 
 30061 ;;  userLedData     2   11[BANK0 ] unsigned int 
 30062 ;; Auto vars:     Size  Location     Type
 30063 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 30064 ;;		 -> badge_inst(18), 
 30065 ;; Return value:  Size  Location     Type
 30066 ;;                  1    wreg      void 
 30067 ;; Registers used:
 30068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30069 ;; Tracked objects:
 30070 ;;		On entry : 0/0
 30071 ;;		On exit  : 0/0
 30072 ;;		Unchanged: 0/0
 30073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30074 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30075 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30077 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30078 ;;Total ram usage:        3 bytes
 30079 ;; Hardware stack levels used:    1
 30080 ;; Hardware stack levels required when called:    7
 30081 ;; This function calls:
 30082 ;;		_displayL1_SetUserLed
 30083 ;;		_displayL1_Update
 30084 ;; This function is called by:
 30085 ;;		_nullifyBadge_userLedsSet
 30086 ;;		_nullifyBadge_userLedsSetForce
 30087 ;; This function uses a non-reentrant model
 30088 ;;
 30089                           
 30090                           
 30091                           ;psect for function _displayL2_SetUserLeds
 30092  3482                     _displayL2_SetUserLeds:	
 30093                           
 30094                           ;incstack = 0
 30095                           ; Regs used in _displayL2_SetUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 30096                           ;displayL2_SetUserLeds@display stored from wreg
 30097  3482  00FB               	movwf	displayL2_SetUserLeds@display
 30098                           
 30099                           ;nullifyBadge_displayL2.c: 89: display->ledVect = userLedData;
 30100  3483  087B               	movf	displayL2_SetUserLeds@display,w
 30101  3484  3E05               	addlw	5
 30102  3485  0086               	movwf	6
 30103  3486  3001               	movlw	1	; select bank2/3
 30104  3487  0087               	movwf	7
 30105  3488  0020               	movlb	0	; select bank0
 30106  3489  082B               	movf	displayL2_SetUserLeds@userLedData,w
 30107  348A  3FC0               	movwi [0]fsr1
 30108  348B  082C               	movf	displayL2_SetUserLeds@userLedData+1,w
 30109  348C  3FC1               	movwi [1]fsr1
 30110                           
 30111                           ;nullifyBadge_displayL2.c: 90: displayL1_SetUserLed(&display->display_l1, display->ledVe
      +                          ct);
 30112  348D  087B               	movf	displayL2_SetUserLeds@display,w
 30113  348E  3E05               	addlw	5
 30114  348F  0086               	movwf	6
 30115  3490  3001               	movlw	1	; select bank2/3
 30116  3491  0087               	movwf	7
 30117  3492  3F40               	moviw [0]fsr1
 30118  3493  00F1               	movwf	displayL1_SetUserLed@userLedVect
 30119  3494  3F41               	moviw [1]fsr1
 30120  3495  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 30121  3496  087B               	movf	displayL2_SetUserLeds@display,w
 30122  3497  3E07               	addlw	7
 30123  3498  31B3  2319  31B4   	fcall	_displayL1_SetUserLed
 30124                           
 30125                           ;nullifyBadge_displayL2.c: 91: displayL1_Update(&display->display_l1);
 30126  349B  087B               	movf	displayL2_SetUserLeds@display,w
 30127  349C  3E07               	addlw	7
 30128  349D  31B2  22E6         	fcall	_displayL1_Update
 30129  349F  0008               	return
 30130  34A0                     __end_of_displayL2_SetUserLeds:	
 30131                           
 30132                           	psect	text61
 30133  3319                     __ptext61:	
 30134 ;; *************** function _displayL1_SetUserLed *****************
 30135 ;; Defined at:
 30136 ;;		line 71 in file "nullifyBadge_displayL1.c"
 30137 ;; Parameters:    Size  Location     Type
 30138 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30139 ;;		 -> badge_inst(18), 
 30140 ;;  userLedVect     2    1[COMMON] unsigned int 
 30141 ;; Auto vars:     Size  Location     Type
 30142 ;;  display         1    4[COMMON] PTR struct t_nullifyDisp
 30143 ;;		 -> badge_inst(18), 
 30144 ;; Return value:  Size  Location     Type
 30145 ;;                  1    wreg      void 
 30146 ;; Registers used:
 30147 ;;		wreg, fsr1l, fsr1h, status,2
 30148 ;; Tracked objects:
 30149 ;;		On entry : 0/0
 30150 ;;		On exit  : 0/0
 30151 ;;		Unchanged: 0/0
 30152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30153 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30154 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30155 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30156 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30157 ;;Total ram usage:        4 bytes
 30158 ;; Hardware stack levels used:    1
 30159 ;; Hardware stack levels required when called:    4
 30160 ;; This function calls:
 30161 ;;		Nothing
 30162 ;; This function is called by:
 30163 ;;		_displayL2_SetUserLeds
 30164 ;;		_displayL2_ClrUserLeds
 30165 ;; This function uses a non-reentrant model
 30166 ;;
 30167                           
 30168                           
 30169                           ;psect for function _displayL1_SetUserLed
 30170  3319                     _displayL1_SetUserLed:	
 30171                           
 30172                           ;incstack = 0
 30173                           ; Regs used in _displayL1_SetUserLed: [wreg+fsr1l+fsr1h+status,2]
 30174                           ;displayL1_SetUserLed@display stored from wreg
 30175  3319  00F4               	movwf	displayL1_SetUserLed@display
 30176                           
 30177                           ;nullifyBadge_displayL1.c: 73: display->displayVect[0] = (u8) (userLedVect >> 8);
 30178  331A  0872               	movf	displayL1_SetUserLed@userLedVect+1,w
 30179  331B  00F3               	movwf	??_displayL1_SetUserLed
 30180  331C  0874               	movf	displayL1_SetUserLed@display,w
 30181  331D  0086               	movwf	6
 30182  331E  3001               	movlw	1	; select bank2/3
 30183  331F  0087               	movwf	7
 30184  3320  0873               	movf	??_displayL1_SetUserLed,w
 30185  3321  0081               	movwf	1
 30186                           
 30187                           ;nullifyBadge_displayL1.c: 74: display->displayVect[1] = (u8) (userLedVect & 0xFF);
 30188  3322  0871               	movf	displayL1_SetUserLed@userLedVect,w
 30189  3323  00F3               	movwf	??_displayL1_SetUserLed
 30190  3324  0A74               	incf	displayL1_SetUserLed@display,w
 30191  3325  0086               	movwf	6
 30192  3326  3001               	movlw	1	; select bank2/3
 30193  3327  0087               	movwf	7
 30194  3328  0873               	movf	??_displayL1_SetUserLed,w
 30195  3329  0081               	movwf	1
 30196  332A  0008               	return
 30197  332B                     __end_of_displayL1_SetUserLed:	
 30198                           
 30199                           	psect	text62
 30200  2D33                     __ptext62:	
 30201 ;; *************** function _flashy_display_option *****************
 30202 ;; Defined at:
 30203 ;;		line 105 in file "flashy_task.c"
 30204 ;; Parameters:    Size  Location     Type
 30205 ;;  data            2   44[BANK0 ] PTR struct t_flashy_task
 30206 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 30207 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 30208 ;; Auto vars:     Size  Location     Type
 30209 ;;		None
 30210 ;; Return value:  Size  Location     Type
 30211 ;;                  1    wreg      void 
 30212 ;; Registers used:
 30213 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30214 ;; Tracked objects:
 30215 ;;		On entry : 0/0
 30216 ;;		On exit  : 0/0
 30217 ;;		Unchanged: 0/0
 30218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30219 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30223 ;;Total ram usage:        2 bytes
 30224 ;; Hardware stack levels used:    1
 30225 ;; Hardware stack levels required when called:   10
 30226 ;; This function calls:
 30227 ;;		_marquee
 30228 ;;		_marquee_speedy
 30229 ;;		_nullifyBadge_segDisplayForceUpdate
 30230 ;;		_nullifyBadge_segDisplayPutStr
 30231 ;; This function is called by:
 30232 ;;		_flashy_Main
 30233 ;; This function uses a non-reentrant model
 30234 ;;
 30235                           
 30236                           
 30237                           ;psect for function _flashy_display_option
 30238  2D33                     _flashy_display_option:	
 30239                           
 30240                           ;flashy_task.c: 106: if (flashy_option_idx == 0){
 30241                           
 30242                           ;incstack = 0
 30243                           ; Regs used in _flashy_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30244  2D33  0021               	movlb	1	; select bank1
 30245  2D34  0828               	movf	_flashy_option_idx^(0+128),w
 30246  2D35  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 30247  2D36  1D03               	btfss	3,2
 30248  2D37  2D53               	goto	l8677
 30249                           
 30250                           ;flashy_task.c: 107: nullifyBadge_segDisplayPutStr(data->badge, flashy_option[flashy_opt
      +                          ion_idx]);
 30251  2D38  3528               	lslf	_flashy_option_idx^(0+128),w
 30252  2D39  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 30253  2D3A  0086               	movwf	6
 30254  2D3B  3005               	movlw	5	; select bank10/11
 30255  2D3C  0087               	movwf	7
 30256  2D3D  3F40               	moviw [0]fsr1
 30257  2D3E  0020               	movlb	0	; select bank0
 30258  2D3F  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30259  2D40  3F41               	moviw [1]fsr1
 30260  2D41  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30261  2D42  084C               	movf	flashy_display_option@data,w
 30262  2D43  0086               	movwf	6
 30263  2D44  084D               	movf	flashy_display_option@data+1,w
 30264  2D45  0087               	movwf	7
 30265  2D46  0801               	movf	1,w
 30266  2D47  31B2  221E  31AD   	fcall	_nullifyBadge_segDisplayPutStr
 30267                           
 30268                           ;flashy_task.c: 108: nullifyBadge_segDisplayForceUpdate(data->badge);
 30269  2D4A  0020               	movlb	0	; select bank0
 30270  2D4B  084C               	movf	flashy_display_option@data,w
 30271  2D4C  0086               	movwf	6
 30272  2D4D  084D               	movf	flashy_display_option@data+1,w
 30273  2D4E  0087               	movwf	7
 30274  2D4F  0801               	movf	1,w
 30275  2D50  31B1  21E2         	fcall	_nullifyBadge_segDisplayForceUpdate
 30276                           
 30277                           ;flashy_task.c: 109: }
 30278  2D52  0008               	return
 30279  2D53                     l8677:	
 30280                           
 30281                           ;flashy_task.c: 110: else {
 30282                           ;flashy_task.c: 111: if (data->display_state==FLASHY_STATE_DISPLAY ){
 30283  2D53  0020               	movlb	0	; select bank0
 30284  2D54  084C               	movf	flashy_display_option@data,w
 30285  2D55  0086               	movwf	6
 30286  2D56  084D               	movf	flashy_display_option@data+1,w
 30287  2D57  0087               	movwf	7
 30288  2D58  3146               	addfsr 1,6
 30289  2D59  0801               	movf	1,w
 30290  2D5A  1D03               	btfss	3,2
 30291  2D5B  2D7B               	goto	l8681
 30292                           
 30293                           ;flashy_task.c: 113: marquee_speedy(flashy_option[flashy_option_idx], data->noholdCount,
      +                           flashy_scroll_rate);
 30294  2D5C  0021               	movlb	1	; select bank1
 30295  2D5D  3528               	lslf	_flashy_option_idx^(0+128),w
 30296  2D5E  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 30297  2D5F  0086               	movwf	6
 30298  2D60  3005               	movlw	5	; select bank10/11
 30299  2D61  0087               	movwf	7
 30300  2D62  3F40               	moviw [0]fsr1
 30301  2D63  0020               	movlb	0	; select bank0
 30302  2D64  00BA               	movwf	marquee_speedy@string
 30303  2D65  3F41               	moviw [1]fsr1
 30304  2D66  00BB               	movwf	marquee_speedy@string+1
 30305  2D67  084C               	movf	flashy_display_option@data,w
 30306  2D68  0086               	movwf	6
 30307  2D69  084D               	movf	flashy_display_option@data+1,w
 30308  2D6A  0087               	movwf	7
 30309  2D6B  315C               	addfsr 1,28
 30310  2D6C  3F40               	moviw [0]fsr1
 30311  2D6D  00BC               	movwf	marquee_speedy@count
 30312  2D6E  3F41               	moviw [1]fsr1
 30313  2D6F  00BD               	movwf	marquee_speedy@count+1
 30314  2D70  0021               	movlb	1	; select bank1
 30315  2D71  082D               	movf	(_flashy_scroll_rate+1)^(0+128),w
 30316  2D72  0020               	movlb	0	; select bank0
 30317  2D73  00BF               	movwf	marquee_speedy@multiplier+1
 30318  2D74  0021               	movlb	1	; select bank1
 30319  2D75  082C               	movf	_flashy_scroll_rate^(0+128),w
 30320  2D76  0020               	movlb	0	; select bank0
 30321  2D77  00BE               	movwf	marquee_speedy@multiplier
 30322  2D78  31AF  278D         	fcall	_marquee_speedy
 30323                           
 30324                           ;flashy_task.c: 114: }
 30325  2D7A  0008               	return
 30326  2D7B                     l8681:	
 30327                           
 30328                           ;flashy_task.c: 115: else{
 30329                           ;flashy_task.c: 116: marquee(flashy_option[flashy_option_idx], data->noholdCount);
 30330  2D7B  0021               	movlb	1	; select bank1
 30331  2D7C  3528               	lslf	_flashy_option_idx^(0+128),w
 30332  2D7D  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 30333  2D7E  0086               	movwf	6
 30334  2D7F  3005               	movlw	5	; select bank10/11
 30335  2D80  0087               	movwf	7
 30336  2D81  3F40               	moviw [0]fsr1
 30337  2D82  0020               	movlb	0	; select bank0
 30338  2D83  00BA               	movwf	marquee@string
 30339  2D84  3F41               	moviw [1]fsr1
 30340  2D85  00BB               	movwf	marquee@string+1
 30341  2D86  084C               	movf	flashy_display_option@data,w
 30342  2D87  0086               	movwf	6
 30343  2D88  084D               	movf	flashy_display_option@data+1,w
 30344  2D89  0087               	movwf	7
 30345  2D8A  315C               	addfsr 1,28
 30346  2D8B  3F40               	moviw [0]fsr1
 30347  2D8C  00BC               	movwf	marquee@count
 30348  2D8D  3F41               	moviw [1]fsr1
 30349  2D8E  00BD               	movwf	marquee@count+1
 30350  2D8F  31A2  2215         	fcall	_marquee
 30351  2D91  0008               	return
 30352  2D92                     __end_of_flashy_display_option:	
 30353                           
 30354                           	psect	text63
 30355  2F8D                     __ptext63:	
 30356 ;; *************** function _marquee_speedy *****************
 30357 ;; Defined at:
 30358 ;;		line 133 in file "main.c"
 30359 ;; Parameters:    Size  Location     Type
 30360 ;;  string          2   26[BANK0 ] PTR unsigned char 
 30361 ;;		 -> STR_85(23), STR_84(27), STR_83(46), STR_82(8), 
 30362 ;;		 -> STR_81(7), STR_80(8), STR_79(6), STR_78(10), 
 30363 ;;		 -> STR_77(5), STR_76(7), STR_75(9), STR_74(7), 
 30364 ;;		 -> STR_73(7), STR_39(5), STR_38(43), STR_37(13), 
 30365 ;;		 -> STR_36(47), STR_35(17), STR_34(120), STR_33(34), 
 30366 ;;		 -> STR_32(16), STR_31(35), STR_30(15), STR_29(12), 
 30367 ;;		 -> STR_28(29), STR_27(19), STR_26(17), STR_25(40), 
 30368 ;;		 -> STR_24(27), STR_23(29), STR_22(30), STR_21(36), 
 30369 ;;		 -> STR_20(28), STR_19(22), STR_18(8), STR_17(26), 
 30370 ;;		 -> STR_16(21), STR_15(19), STR_14(6), STR_13(8), 
 30371 ;;		 -> STR_12(9), STR_11(5), matrix_TaskData(31), secret_TaskData(14), 
 30372 ;;		 -> locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), 
 30373 ;;		 -> NULL(0), 
 30374 ;;  count           2   28[BANK0 ] unsigned int 
 30375 ;;  multiplier      2   30[BANK0 ] unsigned int 
 30376 ;; Auto vars:     Size  Location     Type
 30377 ;;  j               2   42[BANK0 ] unsigned int 
 30378 ;;  display_stri    5   33[BANK0 ] unsigned char [5]
 30379 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 30380 ;;  i               2   38[BANK0 ] unsigned int 
 30381 ;; Return value:  Size  Location     Type
 30382 ;;                  1    wreg      void 
 30383 ;; Registers used:
 30384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30385 ;; Tracked objects:
 30386 ;;		On entry : 0/0
 30387 ;;		On exit  : 0/0
 30388 ;;		Unchanged: 0/0
 30389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30390 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30391 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30393 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30394 ;;Total ram usage:       18 bytes
 30395 ;; Hardware stack levels used:    1
 30396 ;; Hardware stack levels required when called:    9
 30397 ;; This function calls:
 30398 ;;		___lwdiv
 30399 ;;		___lwmod
 30400 ;;		_nullifyBadge_segDisplayForceUpdate
 30401 ;;		_nullifyBadge_segDisplayPutStr
 30402 ;;		_strlen
 30403 ;; This function is called by:
 30404 ;;		_flashy_display_option
 30405 ;;		_slot_Main
 30406 ;;		_matrix_display_option
 30407 ;; This function uses a non-reentrant model
 30408 ;;
 30409                           
 30410                           
 30411                           ;psect for function _marquee_speedy
 30412  2F8D                     _marquee_speedy:	
 30413                           
 30414                           ;main.c: 134: u16 string_length = strlen((const char *) string);
 30415                           
 30416                           ;incstack = 0
 30417                           ; Regs used in _marquee_speedy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30418  2F8D  0020               	movlb	0	; select bank0
 30419  2F8E  083B               	movf	marquee_speedy@string+1,w
 30420  2F8F  00F2               	movwf	strlen@s+1
 30421  2F90  083A               	movf	marquee_speedy@string,w
 30422  2F91  00F1               	movwf	strlen@s
 30423  2F92  31B4  2464  31AF   	fcall	_strlen
 30424  2F95  0872               	movf	?_strlen+1,w
 30425  2F96  0020               	movlb	0	; select bank0
 30426  2F97  00C9               	movwf	marquee_speedy@string_length+1
 30427  2F98  0871               	movf	?_strlen,w
 30428  2F99  00C8               	movwf	marquee_speedy@string_length
 30429                           
 30430                           ;main.c: 135: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 30431  2F9A  30C7               	movlw	low marquee_speedy@F14093
 30432  2F9B  0086               	movwf	6
 30433  2F9C  3000               	movlw	high marquee_speedy@F14093
 30434  2F9D  0087               	movwf	7
 30435  2F9E  3041               	movlw	low marquee_speedy@display_string
 30436  2F9F  0084               	movwf	4
 30437  2FA0  3000               	movlw	high marquee_speedy@display_string
 30438  2FA1  0085               	movwf	5
 30439  2FA2  3005               	movlw	5
 30440  2FA3  00C0               	movwf	??_marquee_speedy
 30441  2FA4                     u4970:	
 30442  2FA4  0016               	moviw fsr1++
 30443  2FA5  001A               	movwi fsr0++
 30444  2FA6  0BC0               	decfsz	??_marquee_speedy,f
 30445  2FA7  2FA4               	goto	u4970
 30446                           
 30447                           ;main.c: 136: u16 i = (count / multiplier) % string_length;
 30448  2FA8  0849               	movf	marquee_speedy@string_length+1,w
 30449  2FA9  00AC               	movwf	___lwmod@divisor+1
 30450  2FAA  0848               	movf	marquee_speedy@string_length,w
 30451  2FAB  00AB               	movwf	___lwmod@divisor
 30452  2FAC  083F               	movf	marquee_speedy@multiplier+1,w
 30453  2FAD  00F2               	movwf	___lwdiv@divisor+1
 30454  2FAE  083E               	movf	marquee_speedy@multiplier,w
 30455  2FAF  00F1               	movwf	___lwdiv@divisor
 30456  2FB0  083D               	movf	marquee_speedy@count+1,w
 30457  2FB1  00F4               	movwf	___lwdiv@dividend+1
 30458  2FB2  083C               	movf	marquee_speedy@count,w
 30459  2FB3  00F3               	movwf	___lwdiv@dividend
 30460  2FB4  31A8  2085  31AF   	fcall	___lwdiv
 30461  2FB7  0872               	movf	?___lwdiv+1,w
 30462  2FB8  0020               	movlb	0	; select bank0
 30463  2FB9  00AE               	movwf	___lwmod@dividend+1
 30464  2FBA  0871               	movf	?___lwdiv,w
 30465  2FBB  00AD               	movwf	___lwmod@dividend
 30466  2FBC  31B5  25A1  31AF   	fcall	___lwmod
 30467  2FBF  0020               	movlb	0	; select bank0
 30468  2FC0  082C               	movf	?___lwmod+1,w
 30469  2FC1  00C7               	movwf	marquee_speedy@i+1
 30470  2FC2  082B               	movf	?___lwmod,w
 30471  2FC3  00C6               	movwf	marquee_speedy@i
 30472                           
 30473                           ;main.c: 138: for (u16 j=0; j < 4; j++){
 30474  2FC4  01CA               	clrf	marquee_speedy@j
 30475  2FC5  01CB               	clrf	marquee_speedy@j+1
 30476  2FC6  3000               	movlw	0
 30477  2FC7  024B               	subwf	marquee_speedy@j+1,w
 30478  2FC8  3004               	movlw	4
 30479  2FC9  1903               	skipnz
 30480  2FCA  024A               	subwf	marquee_speedy@j,w
 30481  2FCB  1803               	btfsc	3,0
 30482  2FCC  2FF4               	goto	l8453
 30483  2FCD                     l8447:	
 30484                           
 30485                           ;main.c: 139: display_string[j] = string[(i + j) % string_length];
 30486  2FCD  0849               	movf	marquee_speedy@string_length+1,w
 30487  2FCE  00AC               	movwf	___lwmod@divisor+1
 30488  2FCF  0848               	movf	marquee_speedy@string_length,w
 30489  2FD0  00AB               	movwf	___lwmod@divisor
 30490  2FD1  084A               	movf	marquee_speedy@j,w
 30491  2FD2  0746               	addwf	marquee_speedy@i,w
 30492  2FD3  00AD               	movwf	___lwmod@dividend
 30493  2FD4  084B               	movf	marquee_speedy@j+1,w
 30494  2FD5  3D47               	addwfc	marquee_speedy@i+1,w
 30495  2FD6  00AE               	movwf	___lwmod@dividend+1
 30496  2FD7  31B5  25A1  31AF   	fcall	___lwmod
 30497  2FDA  0020               	movlb	0	; select bank0
 30498  2FDB  083A               	movf	marquee_speedy@string,w
 30499  2FDC  072B               	addwf	?___lwmod,w
 30500  2FDD  0084               	movwf	4
 30501  2FDE  083B               	movf	marquee_speedy@string+1,w
 30502  2FDF  3D2C               	addwfc	?___lwmod+1,w
 30503  2FE0  0085               	movwf	5
 30504  2FE1  0800               	movf	0,w	;code access
 30505  2FE2  00C0               	movwf	??_marquee_speedy
 30506  2FE3  084A               	movf	marquee_speedy@j,w
 30507  2FE4  3E41               	addlw	(low (marquee_speedy@display_string| 0))& (0+255)
 30508  2FE5  0086               	movwf	6
 30509  2FE6  0187               	clrf	7
 30510  2FE7  0840               	movf	??_marquee_speedy,w
 30511  2FE8  0081               	movwf	1
 30512  2FE9  3001               	movlw	1
 30513  2FEA  07CA               	addwf	marquee_speedy@j,f
 30514  2FEB  3000               	movlw	0
 30515  2FEC  3DCB               	addwfc	marquee_speedy@j+1,f
 30516  2FED  3000               	movlw	0
 30517  2FEE  024B               	subwf	marquee_speedy@j+1,w
 30518  2FEF  3004               	movlw	4
 30519  2FF0  1903               	skipnz
 30520  2FF1  024A               	subwf	marquee_speedy@j,w
 30521  2FF2  1C03               	skipc
 30522  2FF3  2FCD               	goto	l8447
 30523  2FF4                     l8453:	
 30524                           
 30525                           ;main.c: 140: }
 30526                           ;main.c: 141: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 30527  2FF4  3041               	movlw	low marquee_speedy@display_string
 30528  2FF5  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30529  2FF6  3000               	movlw	high marquee_speedy@display_string
 30530  2FF7  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30531  2FF8  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30532  2FF9  31B2  221E  31AF   	fcall	_nullifyBadge_segDisplayPutStr
 30533                           
 30534                           ;main.c: 142: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 30535  2FFC  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30536  2FFD  31B1  21E2         	fcall	_nullifyBadge_segDisplayForceUpdate
 30537  2FFF  0008               	return
 30538  3000                     __end_of_marquee_speedy:	
 30539                           
 30540                           	psect	text64
 30541  2215                     __ptext64:	
 30542 ;; *************** function _marquee *****************
 30543 ;; Defined at:
 30544 ;;		line 146 in file "main.c"
 30545 ;; Parameters:    Size  Location     Type
 30546 ;;  string          2   26[BANK0 ] PTR unsigned char 
 30547 ;;		 -> STR_45(5), STR_44(5), STR_43(11), STR_42(13), 
 30548 ;;		 -> STR_39(5), STR_38(43), STR_37(13), STR_36(47), 
 30549 ;;		 -> STR_35(17), STR_34(120), STR_33(34), STR_32(16), 
 30550 ;;		 -> STR_31(35), STR_30(15), STR_29(12), STR_28(29), 
 30551 ;;		 -> STR_27(19), STR_26(17), STR_25(40), STR_24(27), 
 30552 ;;		 -> STR_23(29), STR_22(30), STR_21(36), STR_20(28), 
 30553 ;;		 -> STR_19(22), STR_18(8), STR_17(26), STR_16(21), 
 30554 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 30555 ;;		 -> STR_11(5), STR_10(18), STR_8(6), STR_7(8), 
 30556 ;;		 -> STR_6(10), STR_5(6), STR_4(5), matrix_TaskData(31), 
 30557 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 30558 ;;		 -> flashy_TaskData(30), NULL(0), 
 30559 ;;  count           2   28[BANK0 ] unsigned int 
 30560 ;; Auto vars:     Size  Location     Type
 30561 ;;  j               2   42[BANK0 ] unsigned int 
 30562 ;;  display_stri    5   31[BANK0 ] unsigned char [5]
 30563 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 30564 ;;  i               2   38[BANK0 ] unsigned int 
 30565 ;;  multiplier      2   36[BANK0 ] unsigned int 
 30566 ;; Return value:  Size  Location     Type
 30567 ;;                  1    wreg      void 
 30568 ;; Registers used:
 30569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30570 ;; Tracked objects:
 30571 ;;		On entry : 0/0
 30572 ;;		On exit  : 0/0
 30573 ;;		Unchanged: 0/0
 30574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30575 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30576 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30578 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30579 ;;Total ram usage:       18 bytes
 30580 ;; Hardware stack levels used:    1
 30581 ;; Hardware stack levels required when called:    9
 30582 ;; This function calls:
 30583 ;;		___lwdiv
 30584 ;;		___lwmod
 30585 ;;		_nullifyBadge_segDisplayForceUpdate
 30586 ;;		_nullifyBadge_segDisplayPutStr
 30587 ;;		_strlen
 30588 ;; This function is called by:
 30589 ;;		_menu_display_option
 30590 ;;		_flashy_display_option
 30591 ;;		_flashy_Main
 30592 ;;		_locked_Main
 30593 ;;		_slot_Main
 30594 ;; This function uses a non-reentrant model
 30595 ;;
 30596                           
 30597                           
 30598                           ;psect for function _marquee
 30599  2215                     _marquee:	
 30600                           
 30601                           ;main.c: 147: u16 multiplier = 50;
 30602                           
 30603                           ;incstack = 0
 30604                           ; Regs used in _marquee: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30605  2215  3032               	movlw	50
 30606  2216  0020               	movlb	0	; select bank0
 30607  2217  00C4               	movwf	marquee@multiplier
 30608  2218  3000               	movlw	0
 30609  2219  00C5               	movwf	marquee@multiplier+1
 30610                           
 30611                           ;main.c: 148: u16 string_length = strlen((const char *) string);
 30612  221A  083B               	movf	marquee@string+1,w
 30613  221B  00F2               	movwf	strlen@s+1
 30614  221C  083A               	movf	marquee@string,w
 30615  221D  00F1               	movwf	strlen@s
 30616  221E  31B4  2464  31A2   	fcall	_strlen
 30617  2221  0872               	movf	?_strlen+1,w
 30618  2222  0020               	movlb	0	; select bank0
 30619  2223  00C9               	movwf	marquee@string_length+1
 30620  2224  0871               	movf	?_strlen,w
 30621  2225  00C8               	movwf	marquee@string_length
 30622                           
 30623                           ;main.c: 149: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 30624  2226  30E3               	movlw	low marquee@F14102
 30625  2227  0086               	movwf	6
 30626  2228  3001               	movlw	high marquee@F14102
 30627  2229  0087               	movwf	7
 30628  222A  303F               	movlw	low marquee@display_string
 30629  222B  0084               	movwf	4
 30630  222C  3000               	movlw	high marquee@display_string
 30631  222D  0085               	movwf	5
 30632  222E  3005               	movlw	5
 30633  222F  00BE               	movwf	??_marquee
 30634  2230                     u5000:	
 30635  2230  0016               	moviw fsr1++
 30636  2231  001A               	movwi fsr0++
 30637  2232  0BBE               	decfsz	??_marquee,f
 30638  2233  2A30               	goto	u5000
 30639                           
 30640                           ;main.c: 150: u16 i = (count / multiplier) % string_length;
 30641  2234  0849               	movf	marquee@string_length+1,w
 30642  2235  00AC               	movwf	___lwmod@divisor+1
 30643  2236  0848               	movf	marquee@string_length,w
 30644  2237  00AB               	movwf	___lwmod@divisor
 30645  2238  0845               	movf	marquee@multiplier+1,w
 30646  2239  00F2               	movwf	___lwdiv@divisor+1
 30647  223A  0844               	movf	marquee@multiplier,w
 30648  223B  00F1               	movwf	___lwdiv@divisor
 30649  223C  083D               	movf	marquee@count+1,w
 30650  223D  00F4               	movwf	___lwdiv@dividend+1
 30651  223E  083C               	movf	marquee@count,w
 30652  223F  00F3               	movwf	___lwdiv@dividend
 30653  2240  31A8  2085  31A2   	fcall	___lwdiv
 30654  2243  0872               	movf	?___lwdiv+1,w
 30655  2244  0020               	movlb	0	; select bank0
 30656  2245  00AE               	movwf	___lwmod@dividend+1
 30657  2246  0871               	movf	?___lwdiv,w
 30658  2247  00AD               	movwf	___lwmod@dividend
 30659  2248  31B5  25A1  31A2   	fcall	___lwmod
 30660  224B  0020               	movlb	0	; select bank0
 30661  224C  082C               	movf	?___lwmod+1,w
 30662  224D  00C7               	movwf	marquee@i+1
 30663  224E  082B               	movf	?___lwmod,w
 30664  224F  00C6               	movwf	marquee@i
 30665                           
 30666                           ;main.c: 152: for (u16 j=0; j < 4; j++){
 30667  2250  01CA               	clrf	marquee@j
 30668  2251  01CB               	clrf	marquee@j+1
 30669  2252  3000               	movlw	0
 30670  2253  024B               	subwf	marquee@j+1,w
 30671  2254  3004               	movlw	4
 30672  2255  1903               	skipnz
 30673  2256  024A               	subwf	marquee@j,w
 30674  2257  1803               	btfsc	3,0
 30675  2258  2A80               	goto	l8477
 30676  2259                     l8471:	
 30677                           
 30678                           ;main.c: 153: display_string[j] = string[(i + j) % string_length];
 30679  2259  0849               	movf	marquee@string_length+1,w
 30680  225A  00AC               	movwf	___lwmod@divisor+1
 30681  225B  0848               	movf	marquee@string_length,w
 30682  225C  00AB               	movwf	___lwmod@divisor
 30683  225D  084A               	movf	marquee@j,w
 30684  225E  0746               	addwf	marquee@i,w
 30685  225F  00AD               	movwf	___lwmod@dividend
 30686  2260  084B               	movf	marquee@j+1,w
 30687  2261  3D47               	addwfc	marquee@i+1,w
 30688  2262  00AE               	movwf	___lwmod@dividend+1
 30689  2263  31B5  25A1  31A2   	fcall	___lwmod
 30690  2266  0020               	movlb	0	; select bank0
 30691  2267  083A               	movf	marquee@string,w
 30692  2268  072B               	addwf	?___lwmod,w
 30693  2269  0084               	movwf	4
 30694  226A  083B               	movf	marquee@string+1,w
 30695  226B  3D2C               	addwfc	?___lwmod+1,w
 30696  226C  0085               	movwf	5
 30697  226D  0800               	movf	0,w	;code access
 30698  226E  00BE               	movwf	??_marquee
 30699  226F  084A               	movf	marquee@j,w
 30700  2270  3E3F               	addlw	(low (marquee@display_string| 0))& (0+255)
 30701  2271  0086               	movwf	6
 30702  2272  0187               	clrf	7
 30703  2273  083E               	movf	??_marquee,w
 30704  2274  0081               	movwf	1
 30705  2275  3001               	movlw	1
 30706  2276  07CA               	addwf	marquee@j,f
 30707  2277  3000               	movlw	0
 30708  2278  3DCB               	addwfc	marquee@j+1,f
 30709  2279  3000               	movlw	0
 30710  227A  024B               	subwf	marquee@j+1,w
 30711  227B  3004               	movlw	4
 30712  227C  1903               	skipnz
 30713  227D  024A               	subwf	marquee@j,w
 30714  227E  1C03               	skipc
 30715  227F  2A59               	goto	l8471
 30716  2280                     l8477:	
 30717                           
 30718                           ;main.c: 154: }
 30719                           ;main.c: 155: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 30720  2280  303F               	movlw	low marquee@display_string
 30721  2281  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30722  2282  3000               	movlw	high marquee@display_string
 30723  2283  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30724  2284  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30725  2285  31B2  221E  31A2   	fcall	_nullifyBadge_segDisplayPutStr
 30726                           
 30727                           ;main.c: 156: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 30728  2288  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30729  2289  31B1  21E2         	fcall	_nullifyBadge_segDisplayForceUpdate
 30730  228B  0008               	return
 30731  228C                     __end_of_marquee:	
 30732                           
 30733                           	psect	text65
 30734  3464                     __ptext65:	
 30735 ;; *************** function _strlen *****************
 30736 ;; Defined at:
 30737 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/strlen.c"
 30738 ;; Parameters:    Size  Location     Type
 30739 ;;  s               2    1[COMMON] PTR const unsigned char 
 30740 ;;		 -> STR_85(23), STR_84(27), STR_83(46), matrix_secret_inputs.inputs(20), 
 30741 ;;		 -> matrix_secret_inputs(25), STR_82(8), STR_81(7), STR_80(8), 
 30742 ;;		 -> STR_79(6), STR_78(10), STR_77(5), STR_76(7), 
 30743 ;;		 -> STR_75(9), STR_74(7), STR_73(7), Slot_Wheel(55), 
 30744 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), STR_45(5), STR_44(5), 
 30745 ;;		 -> STR_43(11), STR_42(13), locked_secret_inputs.inputs(20), locked_secret_inputs(25), 
 30746 ;;		 -> STR_39(5), STR_38(43), STR_37(13), STR_36(47), 
 30747 ;;		 -> STR_35(17), STR_34(120), STR_33(34), STR_32(16), 
 30748 ;;		 -> STR_31(35), STR_30(15), STR_29(12), STR_28(29), 
 30749 ;;		 -> STR_27(19), STR_26(17), STR_25(40), STR_24(27), 
 30750 ;;		 -> STR_23(29), STR_22(30), STR_21(36), STR_20(28), 
 30751 ;;		 -> STR_19(22), STR_18(8), STR_17(26), STR_16(21), 
 30752 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 30753 ;;		 -> STR_11(5), STR_10(18), STR_8(6), STR_7(8), 
 30754 ;;		 -> STR_6(10), STR_5(6), STR_4(5), matrix_TaskData(31), 
 30755 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 30756 ;;		 -> flashy_TaskData(30), NULL(0), 
 30757 ;; Auto vars:     Size  Location     Type
 30758 ;;  cp              2    5[COMMON] PTR const unsigned char 
 30759 ;;		 -> STR_85(23), STR_84(27), STR_83(46), matrix_secret_inputs.inputs(20), 
 30760 ;;		 -> matrix_secret_inputs(25), STR_82(8), STR_81(7), STR_80(8), 
 30761 ;;		 -> STR_79(6), STR_78(10), STR_77(5), STR_76(7), 
 30762 ;;		 -> STR_75(9), STR_74(7), STR_73(7), Slot_Wheel(55), 
 30763 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), STR_45(5), STR_44(5), 
 30764 ;;		 -> STR_43(11), STR_42(13), locked_secret_inputs.inputs(20), locked_secret_inputs(25), 
 30765 ;;		 -> STR_39(5), STR_38(43), STR_37(13), STR_36(47), 
 30766 ;;		 -> STR_35(17), STR_34(120), STR_33(34), STR_32(16), 
 30767 ;;		 -> STR_31(35), STR_30(15), STR_29(12), STR_28(29), 
 30768 ;;		 -> STR_27(19), STR_26(17), STR_25(40), STR_24(27), 
 30769 ;;		 -> STR_23(29), STR_22(30), STR_21(36), STR_20(28), 
 30770 ;;		 -> STR_19(22), STR_18(8), STR_17(26), STR_16(21), 
 30771 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 30772 ;;		 -> STR_11(5), STR_10(18), STR_8(6), STR_7(8), 
 30773 ;;		 -> STR_6(10), STR_5(6), STR_4(5), matrix_TaskData(31), 
 30774 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 30775 ;;		 -> flashy_TaskData(30), NULL(0), 
 30776 ;; Return value:  Size  Location     Type
 30777 ;;                  2    1[COMMON] unsigned int 
 30778 ;; Registers used:
 30779 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 30780 ;; Tracked objects:
 30781 ;;		On entry : 0/0
 30782 ;;		On exit  : 0/0
 30783 ;;		Unchanged: 0/0
 30784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30786 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30787 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30788 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30789 ;;Total ram usage:        6 bytes
 30790 ;; Hardware stack levels used:    1
 30791 ;; Hardware stack levels required when called:    4
 30792 ;; This function calls:
 30793 ;;		Nothing
 30794 ;; This function is called by:
 30795 ;;		_marquee_speedy
 30796 ;;		_marquee
 30797 ;;		_locked_secret_check
 30798 ;;		_secret_check
 30799 ;;		_slot_Main
 30800 ;;		_matrix_secret_check
 30801 ;; This function uses a non-reentrant model
 30802 ;;
 30803                           
 30804                           
 30805                           ;psect for function _strlen
 30806  3464                     _strlen:	
 30807                           
 30808                           ;incstack = 0
 30809                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 30810  3464  0872               	movf	strlen@s+1,w
 30811  3465  00F6               	movwf	strlen@cp+1
 30812  3466  0871               	movf	strlen@s,w
 30813  3467  00F5               	movwf	strlen@cp
 30814  3468                     l8329:	
 30815  3468  0875               	movf	strlen@cp,w
 30816  3469  0084               	movwf	4
 30817  346A  0876               	movf	strlen@cp+1,w
 30818  346B  0085               	movwf	5
 30819  346C  0012               	moviw fsr0++
 30820  346D  1903               	btfsc	3,2
 30821  346E  2C74               	goto	l8331
 30822  346F  3001               	movlw	1
 30823  3470  07F5               	addwf	strlen@cp,f
 30824  3471  3000               	movlw	0
 30825  3472  3DF6               	addwfc	strlen@cp+1,f
 30826  3473  2C68               	goto	l8329
 30827  3474                     l8331:	
 30828  3474  0971               	comf	strlen@s,w
 30829  3475  00F3               	movwf	??_strlen
 30830  3476  0972               	comf	strlen@s+1,w
 30831  3477  00F4               	movwf	??_strlen+1
 30832  3478  0AF3               	incf	??_strlen,f
 30833  3479  1903               	skipnz
 30834  347A  0AF4               	incf	??_strlen+1,f
 30835  347B  0875               	movf	strlen@cp,w
 30836  347C  0773               	addwf	??_strlen,w
 30837  347D  00F1               	movwf	?_strlen
 30838  347E  0876               	movf	strlen@cp+1,w
 30839  347F  3D74               	addwfc	??_strlen+1,w
 30840  3480  00F2               	movwf	?_strlen+1
 30841  3481  0008               	return
 30842  3482                     __end_of_strlen:	
 30843                           
 30844                           	psect	text66
 30845  321E                     __ptext66:	
 30846 ;; *************** function _nullifyBadge_segDisplayPutStr *****************
 30847 ;; Defined at:
 30848 ;;		line 113 in file "nullifyBadge.c"
 30849 ;; Parameters:    Size  Location     Type
 30850 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 30851 ;;		 -> badge_inst(18), 
 30852 ;;  str             2   23[BANK0 ] PTR unsigned char 
 30853 ;;		 -> STR_48(5), STR_47(5), STR_46(5), flashy_Main@hit_counter(6), 
 30854 ;;		 -> STR_40(5), STR_39(5), STR_38(43), STR_37(13), 
 30855 ;;		 -> STR_36(47), STR_35(17), STR_34(120), STR_33(34), 
 30856 ;;		 -> STR_32(16), STR_31(35), STR_30(15), STR_29(12), 
 30857 ;;		 -> STR_28(29), STR_27(19), STR_26(17), STR_25(40), 
 30858 ;;		 -> STR_24(27), STR_23(29), STR_22(30), STR_21(36), 
 30859 ;;		 -> STR_20(28), STR_19(22), STR_18(8), STR_17(26), 
 30860 ;;		 -> STR_16(21), STR_15(19), STR_14(6), STR_13(8), 
 30861 ;;		 -> STR_12(9), STR_11(5), STR_8(6), STR_7(8), 
 30862 ;;		 -> STR_6(10), STR_5(6), STR_4(5), marquee@display_string(5), 
 30863 ;;		 -> marquee_speedy@display_string(5), 
 30864 ;; Auto vars:     Size  Location     Type
 30865 ;;  badge           1   25[BANK0 ] PTR struct t_nullifyBadg
 30866 ;;		 -> badge_inst(18), 
 30867 ;; Return value:  Size  Location     Type
 30868 ;;                  1    wreg      void 
 30869 ;; Registers used:
 30870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30871 ;; Tracked objects:
 30872 ;;		On entry : 0/0
 30873 ;;		On exit  : 0/0
 30874 ;;		Unchanged: 0/0
 30875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30876 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30877 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30879 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30880 ;;Total ram usage:        3 bytes
 30881 ;; Hardware stack levels used:    1
 30882 ;; Hardware stack levels required when called:    8
 30883 ;; This function calls:
 30884 ;;		_displayL2_PutStr
 30885 ;; This function is called by:
 30886 ;;		_marquee_speedy
 30887 ;;		_marquee
 30888 ;;		_menu_display_option
 30889 ;;		_flashy_display_option
 30890 ;;		_flashy_Main
 30891 ;;		_locked_Main
 30892 ;; This function uses a non-reentrant model
 30893 ;;
 30894                           
 30895                           
 30896                           ;psect for function _nullifyBadge_segDisplayPutStr
 30897  321E                     _nullifyBadge_segDisplayPutStr:	
 30898                           
 30899                           ;incstack = 0
 30900                           ; Regs used in _nullifyBadge_segDisplayPutStr: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 30901                           ;nullifyBadge_segDisplayPutStr@badge stored from wreg
 30902  321E  0020               	movlb	0	; select bank0
 30903  321F  00B9               	movwf	nullifyBadge_segDisplayPutStr@badge
 30904                           
 30905                           ;nullifyBadge.c: 114: displayL2_PutStr(&badge->display, str);
 30906  3220  0838               	movf	nullifyBadge_segDisplayPutStr@str+1,w
 30907  3221  00B1               	movwf	displayL2_PutStr@str+1
 30908  3222  0837               	movf	nullifyBadge_segDisplayPutStr@str,w
 30909  3223  00B0               	movwf	displayL2_PutStr@str
 30910  3224  0839               	movf	nullifyBadge_segDisplayPutStr@badge,w
 30911  3225  31B5  2577         	fcall	_displayL2_PutStr
 30912  3227  0008               	return
 30913  3228                     __end_of_nullifyBadge_segDisplayPutStr:	
 30914                           
 30915                           	psect	text67
 30916  3577                     __ptext67:	
 30917 ;; *************** function _displayL2_PutStr *****************
 30918 ;; Defined at:
 30919 ;;		line 55 in file "nullifyBadge_displayL2.c"
 30920 ;; Parameters:    Size  Location     Type
 30921 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30922 ;;		 -> badge_inst(18), 
 30923 ;;  str             2   16[BANK0 ] PTR unsigned char 
 30924 ;;		 -> STR_48(5), STR_47(5), STR_46(5), flashy_Main@hit_counter(6), 
 30925 ;;		 -> STR_40(5), STR_39(5), STR_38(43), STR_37(13), 
 30926 ;;		 -> STR_36(47), STR_35(17), STR_34(120), STR_33(34), 
 30927 ;;		 -> STR_32(16), STR_31(35), STR_30(15), STR_29(12), 
 30928 ;;		 -> STR_28(29), STR_27(19), STR_26(17), STR_25(40), 
 30929 ;;		 -> STR_24(27), STR_23(29), STR_22(30), STR_21(36), 
 30930 ;;		 -> STR_20(28), STR_19(22), STR_18(8), STR_17(26), 
 30931 ;;		 -> STR_16(21), STR_15(19), STR_14(6), STR_13(8), 
 30932 ;;		 -> STR_12(9), STR_11(5), STR_8(6), STR_7(8), 
 30933 ;;		 -> STR_6(10), STR_5(6), STR_4(5), STR_3(5), 
 30934 ;;		 -> marquee@display_string(5), marquee_speedy@display_string(5), 
 30935 ;; Auto vars:     Size  Location     Type
 30936 ;;  display         1   21[BANK0 ] PTR struct t_nullifyDisp
 30937 ;;		 -> badge_inst(18), 
 30938 ;;  k               1   22[BANK0 ] unsigned char 
 30939 ;; Return value:  Size  Location     Type
 30940 ;;                  1    wreg      void 
 30941 ;; Registers used:
 30942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30943 ;; Tracked objects:
 30944 ;;		On entry : 0/0
 30945 ;;		On exit  : 0/0
 30946 ;;		Unchanged: 0/0
 30947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30948 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30949 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30950 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30951 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30952 ;;Total ram usage:        7 bytes
 30953 ;; Hardware stack levels used:    1
 30954 ;; Hardware stack levels required when called:    7
 30955 ;; This function calls:
 30956 ;;		_displayL2_PutChar
 30957 ;; This function is called by:
 30958 ;;		_nullifyBadge_segDisplayPutStr
 30959 ;;		_displayL2_EraseSegDisplay
 30960 ;; This function uses a non-reentrant model
 30961 ;;
 30962                           
 30963                           
 30964                           ;psect for function _displayL2_PutStr
 30965  3577                     _displayL2_PutStr:	
 30966                           
 30967                           ;incstack = 0
 30968                           ; Regs used in _displayL2_PutStr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30969                           ;displayL2_PutStr@display stored from wreg
 30970  3577  0020               	movlb	0	; select bank0
 30971  3578  00B5               	movwf	displayL2_PutStr@display
 30972                           
 30973                           ;nullifyBadge_displayL2.c: 57: u8 k = 0;
 30974  3579  01B6               	clrf	displayL2_PutStr@k
 30975  357A                     l8283:	
 30976                           ;nullifyBadge_displayL2.c: 59: while (str[k] != '\0') {
 30977                           
 30978  357A  0831               	movf	displayL2_PutStr@str+1,w
 30979  357B  00B3               	movwf	??_displayL2_PutStr+1
 30980  357C  0830               	movf	displayL2_PutStr@str,w
 30981  357D  00B2               	movwf	??_displayL2_PutStr
 30982  357E  0836               	movf	displayL2_PutStr@k,w
 30983  357F  0732               	addwf	??_displayL2_PutStr,w
 30984  3580  0084               	movwf	4
 30985  3581  0833               	movf	??_displayL2_PutStr+1,w
 30986  3582  1803               	skipnc
 30987  3583  0A33               	incf	??_displayL2_PutStr+1,w
 30988  3584  0085               	movwf	5
 30989  3585  0012               	moviw fsr0++
 30990  3586  1903               	btfsc	3,2
 30991  3587  0008               	return
 30992                           
 30993                           ;nullifyBadge_displayL2.c: 60: displayL2_PutChar(display, str[k]);
 30994  3588  0831               	movf	displayL2_PutStr@str+1,w
 30995  3589  00B3               	movwf	??_displayL2_PutStr+1
 30996  358A  0830               	movf	displayL2_PutStr@str,w
 30997  358B  00B2               	movwf	??_displayL2_PutStr
 30998  358C  0836               	movf	displayL2_PutStr@k,w
 30999  358D  0732               	addwf	??_displayL2_PutStr,w
 31000  358E  0084               	movwf	4
 31001  358F  0833               	movf	??_displayL2_PutStr+1,w
 31002  3590  1803               	skipnc
 31003  3591  0A33               	incf	??_displayL2_PutStr+1,w
 31004  3592  0085               	movwf	5
 31005  3593  0800               	movf	0,w	;code access
 31006  3594  00B4               	movwf	??_displayL2_PutStr+2
 31007  3595  0834               	movf	??_displayL2_PutStr+2,w
 31008  3596  00AA               	movwf	displayL2_PutChar@c
 31009  3597  0835               	movf	displayL2_PutStr@display,w
 31010  3598  31AB  2388  31B5   	fcall	_displayL2_PutChar
 31011                           
 31012                           ;nullifyBadge_displayL2.c: 61: k++;
 31013  359B  3001               	movlw	1
 31014  359C  0020               	movlb	0	; select bank0
 31015  359D  00B2               	movwf	??_displayL2_PutStr
 31016  359E  0832               	movf	??_displayL2_PutStr,w
 31017  359F  07B6               	addwf	displayL2_PutStr@k,f
 31018  35A0  2D7A               	goto	l8283
 31019  35A1                     __end_of_displayL2_PutStr:	
 31020                           
 31021                           	psect	text68
 31022  2B88                     __ptext68:	
 31023 ;; *************** function _displayL2_PutChar *****************
 31024 ;; Defined at:
 31025 ;;		line 38 in file "nullifyBadge_displayL2.c"
 31026 ;; Parameters:    Size  Location     Type
 31027 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31028 ;;		 -> badge_inst(18), 
 31029 ;;  c               1   10[BANK0 ] unsigned char 
 31030 ;; Auto vars:     Size  Location     Type
 31031 ;;  display         1   15[BANK0 ] PTR struct t_nullifyDisp
 31032 ;;		 -> badge_inst(18), 
 31033 ;;  k               1   14[BANK0 ] unsigned char 
 31034 ;; Return value:  Size  Location     Type
 31035 ;;                  1    wreg      void 
 31036 ;; Registers used:
 31037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31038 ;; Tracked objects:
 31039 ;;		On entry : 0/0
 31040 ;;		On exit  : 0/0
 31041 ;;		Unchanged: 0/0
 31042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31043 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31044 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31045 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31046 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31047 ;;Total ram usage:        6 bytes
 31048 ;; Hardware stack levels used:    1
 31049 ;; Hardware stack levels required when called:    6
 31050 ;; This function calls:
 31051 ;;		_displayL1_SetSegChar
 31052 ;; This function is called by:
 31053 ;;		_displayL2_PutStr
 31054 ;;		_nullifyBadge_segDisplayPutChar
 31055 ;; This function uses a non-reentrant model
 31056 ;;
 31057                           
 31058                           
 31059                           ;psect for function _displayL2_PutChar
 31060  2B88                     _displayL2_PutChar:	
 31061                           
 31062                           ;incstack = 0
 31063                           ; Regs used in _displayL2_PutChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31064                           ;displayL2_PutChar@display stored from wreg
 31065  2B88  0020               	movlb	0	; select bank0
 31066  2B89  00AF               	movwf	displayL2_PutChar@display
 31067                           
 31068                           ;nullifyBadge_displayL2.c: 40: display->charVect[0] = display->charVect[1];
 31069  2B8A  0A2F               	incf	displayL2_PutChar@display,w
 31070  2B8B  0086               	movwf	6
 31071  2B8C  3001               	movlw	1	; select bank2/3
 31072  2B8D  0087               	movwf	7
 31073  2B8E  0801               	movf	1,w
 31074  2B8F  00AB               	movwf	??_displayL2_PutChar
 31075  2B90  082F               	movf	displayL2_PutChar@display,w
 31076  2B91  0086               	movwf	6
 31077  2B92  3001               	movlw	1	; select bank2/3
 31078  2B93  0087               	movwf	7
 31079  2B94  082B               	movf	??_displayL2_PutChar,w
 31080  2B95  0081               	movwf	1
 31081                           
 31082                           ;nullifyBadge_displayL2.c: 41: display->charVect[1] = display->charVect[2];
 31083  2B96  082F               	movf	displayL2_PutChar@display,w
 31084  2B97  3E02               	addlw	2
 31085  2B98  0086               	movwf	6
 31086  2B99  3001               	movlw	1	; select bank2/3
 31087  2B9A  0087               	movwf	7
 31088  2B9B  0801               	movf	1,w
 31089  2B9C  00AB               	movwf	??_displayL2_PutChar
 31090  2B9D  0A2F               	incf	displayL2_PutChar@display,w
 31091  2B9E  0086               	movwf	6
 31092  2B9F  3001               	movlw	1	; select bank2/3
 31093  2BA0  0087               	movwf	7
 31094  2BA1  082B               	movf	??_displayL2_PutChar,w
 31095  2BA2  0081               	movwf	1
 31096                           
 31097                           ;nullifyBadge_displayL2.c: 42: display->charVect[2] = display->charVect[3];
 31098  2BA3  082F               	movf	displayL2_PutChar@display,w
 31099  2BA4  3E03               	addlw	3
 31100  2BA5  0086               	movwf	6
 31101  2BA6  3001               	movlw	1	; select bank2/3
 31102  2BA7  0087               	movwf	7
 31103  2BA8  0801               	movf	1,w
 31104  2BA9  00AB               	movwf	??_displayL2_PutChar
 31105  2BAA  082F               	movf	displayL2_PutChar@display,w
 31106  2BAB  3E02               	addlw	2
 31107  2BAC  0086               	movwf	6
 31108  2BAD  3001               	movlw	1	; select bank2/3
 31109  2BAE  0087               	movwf	7
 31110  2BAF  082B               	movf	??_displayL2_PutChar,w
 31111  2BB0  0081               	movwf	1
 31112                           
 31113                           ;nullifyBadge_displayL2.c: 45: display->charVect[3] = c;
 31114  2BB1  082A               	movf	displayL2_PutChar@c,w
 31115  2BB2  00AB               	movwf	??_displayL2_PutChar
 31116  2BB3  082F               	movf	displayL2_PutChar@display,w
 31117  2BB4  3E03               	addlw	3
 31118  2BB5  0086               	movwf	6
 31119  2BB6  3001               	movlw	1	; select bank2/3
 31120  2BB7  0087               	movwf	7
 31121  2BB8  082B               	movf	??_displayL2_PutChar,w
 31122  2BB9  0081               	movwf	1
 31123                           
 31124                           ;nullifyBadge_displayL2.c: 48: u8 k = 0;
 31125  2BBA  01AE               	clrf	displayL2_PutChar@k
 31126                           
 31127                           ;nullifyBadge_displayL2.c: 49: for (k = 0; k < 4; k++) {
 31128  2BBB  01AE               	clrf	displayL2_PutChar@k
 31129  2BBC                     L15:	
 31130  2BBC  3004               	movlw	4
 31131  2BBD  022E               	subwf	displayL2_PutChar@k,w
 31132  2BBE  1803               	btfsc	3,0
 31133  2BBF  0008               	return
 31134                           
 31135                           ;nullifyBadge_displayL2.c: 50: displayL1_SetSegChar(&display->display_l1, display->charV
      +                          ect[k], k);
 31136  2BC0  082E               	movf	displayL2_PutChar@k,w
 31137  2BC1  072F               	addwf	displayL2_PutChar@display,w
 31138  2BC2  00AB               	movwf	??_displayL2_PutChar
 31139  2BC3  082B               	movf	??_displayL2_PutChar,w
 31140  2BC4  0086               	movwf	6
 31141  2BC5  3001               	movlw	1	; select bank2/3
 31142  2BC6  0087               	movwf	7
 31143  2BC7  0801               	movf	1,w
 31144  2BC8  00AC               	movwf	??_displayL2_PutChar+1
 31145  2BC9  082C               	movf	??_displayL2_PutChar+1,w
 31146  2BCA  00A0               	movwf	displayL1_SetSegChar@c
 31147  2BCB  082E               	movf	displayL2_PutChar@k,w
 31148  2BCC  00AD               	movwf	??_displayL2_PutChar+2
 31149  2BCD  082D               	movf	??_displayL2_PutChar+2,w
 31150  2BCE  00A1               	movwf	displayL1_SetSegChar@charPos
 31151  2BCF  082F               	movf	displayL2_PutChar@display,w
 31152  2BD0  3E07               	addlw	7
 31153  2BD1  31B7  273D  31AB   	fcall	_displayL1_SetSegChar
 31154  2BD4  3001               	movlw	1
 31155  2BD5  0020               	movlb	0	; select bank0
 31156  2BD6  00AB               	movwf	??_displayL2_PutChar
 31157  2BD7  082B               	movf	??_displayL2_PutChar,w
 31158  2BD8  07AE               	addwf	displayL2_PutChar@k,f
 31159  2BD9  2BBC               	goto	L15
 31160  2BDA                     __end_of_displayL2_PutChar:	
 31161                           
 31162                           	psect	text69
 31163  373D                     __ptext69:	
 31164 ;; *************** function _displayL1_SetSegChar *****************
 31165 ;; Defined at:
 31166 ;;		line 18 in file "nullifyBadge_displayL1.c"
 31167 ;; Parameters:    Size  Location     Type
 31168 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31169 ;;		 -> badge_inst(18), 
 31170 ;;  c               1    0[BANK0 ] unsigned char 
 31171 ;;  charPos         1    1[BANK0 ] unsigned char 
 31172 ;; Auto vars:     Size  Location     Type
 31173 ;;  display         1    7[BANK0 ] PTR struct t_nullifyDisp
 31174 ;;		 -> badge_inst(18), 
 31175 ;;  charData        2    8[BANK0 ] unsigned int 
 31176 ;;  dispDataVect    1    6[BANK0 ] unsigned char 
 31177 ;; Return value:  Size  Location     Type
 31178 ;;                  1    wreg      void 
 31179 ;; Registers used:
 31180 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31181 ;; Tracked objects:
 31182 ;;		On entry : 0/0
 31183 ;;		On exit  : 0/0
 31184 ;;		Unchanged: 0/0
 31185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31186 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31187 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31188 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31189 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31190 ;;Total ram usage:       10 bytes
 31191 ;; Hardware stack levels used:    1
 31192 ;; Hardware stack levels required when called:    5
 31193 ;; This function calls:
 31194 ;;		_displayCharReverse
 31195 ;; This function is called by:
 31196 ;;		_displayL2_PutChar
 31197 ;;		_nullifyBadge_segDisplayPutCharPos
 31198 ;;		_displayL2_PrintChar
 31199 ;; This function uses a non-reentrant model
 31200 ;;
 31201                           
 31202                           
 31203                           ;psect for function _displayL1_SetSegChar
 31204  373D                     _displayL1_SetSegChar:	
 31205                           
 31206                           ;incstack = 0
 31207                           ; Regs used in _displayL1_SetSegChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31208                           ;displayL1_SetSegChar@display stored from wreg
 31209  373D  0020               	movlb	0	; select bank0
 31210  373E  00A7               	movwf	displayL1_SetSegChar@display
 31211                           
 31212                           ;nullifyBadge_displayL1.c: 23: u16 charData = asciiCharTableLookup[(u8) c];
 31213  373F  0820               	movf	displayL1_SetSegChar@c,w
 31214  3740  00A2               	movwf	??_displayL1_SetSegChar
 31215  3741  01A3               	clrf	??_displayL1_SetSegChar+1
 31216  3742  35A2               	lslf	??_displayL1_SetSegChar,f
 31217  3743  0DA3               	rlf	??_displayL1_SetSegChar+1,f
 31218  3744  30F0               	movlw	240
 31219  3745  00A4               	movwf	??_displayL1_SetSegChar+2
 31220  3746  3026               	movlw	38
 31221  3747  00A5               	movwf	??_displayL1_SetSegChar+3
 31222  3748  0822               	movf	??_displayL1_SetSegChar,w
 31223  3749  0724               	addwf	??_displayL1_SetSegChar+2,w
 31224  374A  0086               	movwf	6
 31225  374B  0823               	movf	??_displayL1_SetSegChar+1,w
 31226  374C  3D25               	addwfc	??_displayL1_SetSegChar+3,w
 31227  374D  0087               	movwf	7
 31228  374E  3F40               	moviw [0]fsr1
 31229  374F  00A8               	movwf	displayL1_SetSegChar@charData
 31230  3750  3F41               	moviw [1]fsr1
 31231  3751  00A9               	movwf	displayL1_SetSegChar@charData+1
 31232                           
 31233                           ;nullifyBadge_displayL1.c: 29: if (charPos & 0x1) {
 31234  3752  1C21               	btfss	displayL1_SetSegChar@charPos,0
 31235  3753  2F5F               	goto	l8221
 31236                           
 31237                           ;nullifyBadge_displayL1.c: 30: charData = displayCharReverse(charData);
 31238  3754  0829               	movf	displayL1_SetSegChar@charData+1,w
 31239  3755  00F2               	movwf	displayCharReverse@cVal+1
 31240  3756  0828               	movf	displayL1_SetSegChar@charData,w
 31241  3757  00F1               	movwf	displayCharReverse@cVal
 31242  3758  31B5  25CE         	fcall	_displayCharReverse
 31243  375A  0872               	movf	?_displayCharReverse+1,w
 31244  375B  0020               	movlb	0	; select bank0
 31245  375C  00A9               	movwf	displayL1_SetSegChar@charData+1
 31246  375D  0871               	movf	?_displayCharReverse,w
 31247  375E  00A8               	movwf	displayL1_SetSegChar@charData
 31248  375F                     l8221:	
 31249                           
 31250                           ;nullifyBadge_displayL1.c: 31: }
 31251                           ;nullifyBadge_displayL1.c: 61: u8 dispDataVectBaseIdx = 8 - ( charPos << 1 );
 31252  375F  3521               	lslf	displayL1_SetSegChar@charPos,w
 31253  3760  3AFF               	xorlw	255
 31254  3761  3E01               	addlw	1
 31255  3762  3E08               	addlw	8
 31256  3763  00A2               	movwf	??_displayL1_SetSegChar
 31257  3764  0822               	movf	??_displayL1_SetSegChar,w
 31258  3765  00A6               	movwf	displayL1_SetSegChar@dispDataVectBaseIdx
 31259                           
 31260                           ;nullifyBadge_displayL1.c: 64: display->displayVect[dispDataVectBaseIdx] = (u8) (charDat
      +                          a >> 8);
 31261  3766  0829               	movf	displayL1_SetSegChar@charData+1,w
 31262  3767  00A2               	movwf	??_displayL1_SetSegChar
 31263  3768  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 31264  3769  0727               	addwf	displayL1_SetSegChar@display,w
 31265  376A  00A3               	movwf	??_displayL1_SetSegChar+1
 31266  376B  0823               	movf	??_displayL1_SetSegChar+1,w
 31267  376C  0086               	movwf	6
 31268  376D  3001               	movlw	1	; select bank2/3
 31269  376E  0087               	movwf	7
 31270  376F  0822               	movf	??_displayL1_SetSegChar,w
 31271  3770  0081               	movwf	1
 31272                           
 31273                           ;nullifyBadge_displayL1.c: 67: display->displayVect[dispDataVectBaseIdx+1] = (u8) (charD
      +                          ata & 0xFF);
 31274  3771  0828               	movf	displayL1_SetSegChar@charData,w
 31275  3772  00A2               	movwf	??_displayL1_SetSegChar
 31276  3773  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 31277  3774  3E01               	addlw	1
 31278  3775  0727               	addwf	displayL1_SetSegChar@display,w
 31279  3776  00A3               	movwf	??_displayL1_SetSegChar+1
 31280  3777  0823               	movf	??_displayL1_SetSegChar+1,w
 31281  3778  0086               	movwf	6
 31282  3779  3001               	movlw	1	; select bank2/3
 31283  377A  0087               	movwf	7
 31284  377B  0822               	movf	??_displayL1_SetSegChar,w
 31285  377C  0081               	movwf	1
 31286  377D  0008               	return
 31287  377E                     __end_of_displayL1_SetSegChar:	
 31288                           
 31289                           	psect	text70
 31290  35CE                     __ptext70:	
 31291 ;; *************** function _displayCharReverse *****************
 31292 ;; Defined at:
 31293 ;;		line 105 in file "nullifyBadge_displayL1.c"
 31294 ;; Parameters:    Size  Location     Type
 31295 ;;  cVal            2    1[COMMON] unsigned int 
 31296 ;; Auto vars:     Size  Location     Type
 31297 ;;  k               1   11[COMMON] unsigned char 
 31298 ;;  retValUpperR    1   10[COMMON] unsigned char 
 31299 ;;  retValUpper     1    9[COMMON] unsigned char 
 31300 ;;  retValLower     1    8[COMMON] unsigned char 
 31301 ;; Return value:  Size  Location     Type
 31302 ;;                  2    1[COMMON] unsigned int 
 31303 ;; Registers used:
 31304 ;;		wreg, status,2, status,0
 31305 ;; Tracked objects:
 31306 ;;		On entry : 0/0
 31307 ;;		On exit  : 0/0
 31308 ;;		Unchanged: 0/0
 31309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31310 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31311 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31312 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31313 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31314 ;;Total ram usage:       11 bytes
 31315 ;; Hardware stack levels used:    1
 31316 ;; Hardware stack levels required when called:    4
 31317 ;; This function calls:
 31318 ;;		Nothing
 31319 ;; This function is called by:
 31320 ;;		_displayL1_SetSegChar
 31321 ;; This function uses a non-reentrant model
 31322 ;;
 31323                           
 31324                           
 31325                           ;psect for function _displayCharReverse
 31326  35CE                     _displayCharReverse:	
 31327                           
 31328                           ;nullifyBadge_displayL1.c: 106: u8 retValUpper, retValLower, retValUpperRev;
 31329                           ;nullifyBadge_displayL1.c: 108: u8 k;
 31330                           ;nullifyBadge_displayL1.c: 111: retValUpper = cVal >> 8;
 31331                           
 31332                           ;incstack = 0
 31333                           ; Regs used in _displayCharReverse: [wreg+status,2+status,0]
 31334  35CE  0872               	movf	displayCharReverse@cVal+1,w
 31335  35CF  00F3               	movwf	??_displayCharReverse
 31336  35D0  0873               	movf	??_displayCharReverse,w
 31337  35D1  00F9               	movwf	displayCharReverse@retValUpper
 31338                           
 31339                           ;nullifyBadge_displayL1.c: 112: retValLower = cVal & 0xFF;
 31340  35D2  0871               	movf	displayCharReverse@cVal,w
 31341  35D3  00F3               	movwf	??_displayCharReverse
 31342  35D4  0873               	movf	??_displayCharReverse,w
 31343  35D5  00F8               	movwf	displayCharReverse@retValLower
 31344                           
 31345                           ;nullifyBadge_displayL1.c: 115: retValUpperRev = 0;
 31346  35D6  01FA               	clrf	displayCharReverse@retValUpperRev
 31347                           
 31348                           ;nullifyBadge_displayL1.c: 117: for (k = 0; k < 7; k++) {
 31349  35D7  01FB               	clrf	displayCharReverse@k
 31350  35D8  3007               	movlw	7
 31351  35D9  027B               	subwf	displayCharReverse@k,w
 31352  35DA  1803               	btfsc	3,0
 31353  35DB  2DED               	goto	l8203
 31354  35DC                     l8195:	
 31355                           
 31356                           ;nullifyBadge_displayL1.c: 118: retValUpperRev |= (retValUpper & 0x1);
 31357  35DC  0879               	movf	displayCharReverse@retValUpper,w
 31358  35DD  3901               	andlw	1
 31359  35DE  00F3               	movwf	??_displayCharReverse
 31360  35DF  0873               	movf	??_displayCharReverse,w
 31361  35E0  04FA               	iorwf	displayCharReverse@retValUpperRev,f
 31362                           
 31363                           ;nullifyBadge_displayL1.c: 119: retValUpper >>= 1;
 31364  35E1  1003               	clrc
 31365  35E2  0CF9               	rrf	displayCharReverse@retValUpper,f
 31366                           
 31367                           ;nullifyBadge_displayL1.c: 120: retValUpperRev <<= 1;
 31368  35E3  1003               	clrc
 31369  35E4  0DFA               	rlf	displayCharReverse@retValUpperRev,f
 31370  35E5  3001               	movlw	1
 31371  35E6  00F3               	movwf	??_displayCharReverse
 31372  35E7  0873               	movf	??_displayCharReverse,w
 31373  35E8  07FB               	addwf	displayCharReverse@k,f
 31374  35E9  3007               	movlw	7
 31375  35EA  027B               	subwf	displayCharReverse@k,w
 31376  35EB  1C03               	skipc
 31377  35EC  2DDC               	goto	l8195
 31378  35ED                     l8203:	
 31379                           
 31380                           ;nullifyBadge_displayL1.c: 121: }
 31381                           ;nullifyBadge_displayL1.c: 123: return (retValLower << 8) | (retValUpperRev);
 31382  35ED  087A               	movf	displayCharReverse@retValUpperRev,w
 31383  35EE  00F3               	movwf	??_displayCharReverse
 31384  35EF  01F4               	clrf	??_displayCharReverse+1
 31385  35F0  0878               	movf	displayCharReverse@retValLower,w
 31386  35F1  00F5               	movwf	??_displayCharReverse+2
 31387  35F2  01F6               	clrf	??_displayCharReverse+3
 31388  35F3  0875               	movf	??_displayCharReverse+2,w
 31389  35F4  00F6               	movwf	??_displayCharReverse+3
 31390  35F5  01F5               	clrf	??_displayCharReverse+2
 31391  35F6  0873               	movf	??_displayCharReverse,w
 31392  35F7  0475               	iorwf	??_displayCharReverse+2,w
 31393  35F8  00F1               	movwf	?_displayCharReverse
 31394  35F9  0874               	movf	??_displayCharReverse+1,w
 31395  35FA  0476               	iorwf	??_displayCharReverse+3,w
 31396  35FB  00F2               	movwf	?_displayCharReverse+1
 31397  35FC  0008               	return
 31398  35FD                     __end_of_displayCharReverse:	
 31399                           
 31400                           	psect	text71
 31401  31E2                     __ptext71:	
 31402 ;; *************** function _nullifyBadge_segDisplayForceUpdate *****************
 31403 ;; Defined at:
 31404 ;;		line 108 in file "nullifyBadge.c"
 31405 ;; Parameters:    Size  Location     Type
 31406 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 31407 ;;		 -> badge_inst(18), 
 31408 ;; Auto vars:     Size  Location     Type
 31409 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 31410 ;;		 -> badge_inst(18), 
 31411 ;; Return value:  Size  Location     Type
 31412 ;;                  1    wreg      void 
 31413 ;; Registers used:
 31414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31415 ;; Tracked objects:
 31416 ;;		On entry : 0/0
 31417 ;;		On exit  : 0/0
 31418 ;;		Unchanged: 0/0
 31419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31423 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31424 ;;Total ram usage:        1 bytes
 31425 ;; Hardware stack levels used:    1
 31426 ;; Hardware stack levels required when called:    8
 31427 ;; This function calls:
 31428 ;;		_displayL2_ForceUpdate
 31429 ;; This function is called by:
 31430 ;;		_marquee_speedy
 31431 ;;		_marquee
 31432 ;;		_menu_display_option
 31433 ;;		_flashy_display_option
 31434 ;;		_flashy_Main
 31435 ;;		_locked_Main
 31436 ;; This function uses a non-reentrant model
 31437 ;;
 31438                           
 31439                           
 31440                           ;psect for function _nullifyBadge_segDisplayForceUpdate
 31441  31E2                     _nullifyBadge_segDisplayForceUpdate:	
 31442                           
 31443                           ;incstack = 0
 31444                           ; Regs used in _nullifyBadge_segDisplayForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+
      +                          pclath+cstack]
 31445                           ;nullifyBadge_segDisplayForceUpdate@badge stored from wreg
 31446  31E2  0020               	movlb	0	; select bank0
 31447  31E3  00AB               	movwf	nullifyBadge_segDisplayForceUpdate@badge
 31448                           
 31449                           ;nullifyBadge.c: 109: displayL2_ForceUpdate(&badge->display);
 31450  31E4  082B               	movf	nullifyBadge_segDisplayForceUpdate@badge,w
 31451  31E5  31B1  21DC         	fcall	_displayL2_ForceUpdate
 31452  31E7  0008               	return
 31453  31E8                     __end_of_nullifyBadge_segDisplayForceUpdate:	
 31454                           
 31455                           	psect	text72
 31456  31DC                     __ptext72:	
 31457 ;; *************** function _displayL2_ForceUpdate *****************
 31458 ;; Defined at:
 31459 ;;		line 79 in file "nullifyBadge_displayL2.c"
 31460 ;; Parameters:    Size  Location     Type
 31461 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31462 ;;		 -> badge_inst(18), 
 31463 ;; Auto vars:     Size  Location     Type
 31464 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 31465 ;;		 -> badge_inst(18), 
 31466 ;; Return value:  Size  Location     Type
 31467 ;;                  1    wreg      void 
 31468 ;; Registers used:
 31469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31470 ;; Tracked objects:
 31471 ;;		On entry : 0/0
 31472 ;;		On exit  : 0/0
 31473 ;;		Unchanged: 0/0
 31474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31476 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31478 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31479 ;;Total ram usage:        1 bytes
 31480 ;; Hardware stack levels used:    1
 31481 ;; Hardware stack levels required when called:    7
 31482 ;; This function calls:
 31483 ;;		_displayL1_Update
 31484 ;; This function is called by:
 31485 ;;		_nullifyBadge_segDisplayForceUpdate
 31486 ;; This function uses a non-reentrant model
 31487 ;;
 31488                           
 31489                           
 31490                           ;psect for function _displayL2_ForceUpdate
 31491  31DC                     _displayL2_ForceUpdate:	
 31492                           
 31493                           ;incstack = 0
 31494                           ; Regs used in _displayL2_ForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 31495                           ;displayL2_ForceUpdate@display stored from wreg
 31496  31DC  00FB               	movwf	displayL2_ForceUpdate@display
 31497                           
 31498                           ;nullifyBadge_displayL2.c: 80: displayL1_Update(&display->display_l1);
 31499  31DD  087B               	movf	displayL2_ForceUpdate@display,w
 31500  31DE  3E07               	addlw	7
 31501  31DF  31B2  22E6         	fcall	_displayL1_Update
 31502  31E1  0008               	return
 31503  31E2                     __end_of_displayL2_ForceUpdate:	
 31504                           
 31505                           	psect	text73
 31506  35A1                     __ptext73:	
 31507 ;; *************** function ___lwmod *****************
 31508 ;; Defined at:
 31509 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwmod.c"
 31510 ;; Parameters:    Size  Location     Type
 31511 ;;  divisor         2   11[BANK0 ] unsigned int 
 31512 ;;  dividend        2   13[BANK0 ] unsigned int 
 31513 ;; Auto vars:     Size  Location     Type
 31514 ;;  counter         1   10[COMMON] unsigned char 
 31515 ;; Return value:  Size  Location     Type
 31516 ;;                  2   11[BANK0 ] unsigned int 
 31517 ;; Registers used:
 31518 ;;		wreg, status,2, status,0
 31519 ;; Tracked objects:
 31520 ;;		On entry : 0/0
 31521 ;;		On exit  : 0/0
 31522 ;;		Unchanged: 0/0
 31523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31524 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31526 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31527 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31528 ;;Total ram usage:        6 bytes
 31529 ;; Hardware stack levels used:    1
 31530 ;; Hardware stack levels required when called:    4
 31531 ;; This function calls:
 31532 ;;		Nothing
 31533 ;; This function is called by:
 31534 ;;		_marquee_speedy
 31535 ;;		_marquee
 31536 ;;		_led_roundabout
 31537 ;;		_led_curtain
 31538 ;;		_led_Parody
 31539 ;;		_menu_display_option
 31540 ;;		_locked_Main
 31541 ;;		_slot_Setup
 31542 ;;		_slot_Main
 31543 ;;		_sprintf
 31544 ;; This function uses a non-reentrant model
 31545 ;;
 31546                           
 31547                           
 31548                           ;psect for function ___lwmod
 31549  35A1                     ___lwmod:	
 31550                           
 31551                           ;incstack = 0
 31552                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 31553  35A1  0020               	movlb	0	; select bank0
 31554  35A2  082B               	movf	___lwmod@divisor,w
 31555  35A3  042C               	iorwf	___lwmod@divisor+1,w
 31556  35A4  1903               	btfsc	3,2
 31557  35A5  2DC9               	goto	l8431
 31558  35A6  01FA               	clrf	___lwmod@counter
 31559  35A7  0AFA               	incf	___lwmod@counter,f
 31560  35A8                     l8421:	
 31561  35A8  1BAC               	btfsc	___lwmod@divisor+1,7
 31562  35A9  2DB4               	goto	l8423
 31563  35AA  3001               	movlw	1
 31564  35AB                     u4925:	
 31565  35AB  35AB               	lslf	___lwmod@divisor,f
 31566  35AC  0DAC               	rlf	___lwmod@divisor+1,f
 31567  35AD  0B89               	decfsz	9,f
 31568  35AE  2DAB               	goto	u4925
 31569  35AF  3001               	movlw	1
 31570  35B0  00F9               	movwf	??___lwmod
 31571  35B1  0879               	movf	??___lwmod,w
 31572  35B2  07FA               	addwf	___lwmod@counter,f
 31573  35B3  2DA8               	goto	l8421
 31574  35B4                     l8423:	
 31575  35B4  082C               	movf	___lwmod@divisor+1,w
 31576  35B5  022E               	subwf	___lwmod@dividend+1,w
 31577  35B6  1D03               	skipz
 31578  35B7  2DBA               	goto	u4945
 31579  35B8  082B               	movf	___lwmod@divisor,w
 31580  35B9  022D               	subwf	___lwmod@dividend,w
 31581  35BA                     u4945:	
 31582  35BA  1C03               	skipc
 31583  35BB  2DC0               	goto	l8427
 31584  35BC  082B               	movf	___lwmod@divisor,w
 31585  35BD  02AD               	subwf	___lwmod@dividend,f
 31586  35BE  082C               	movf	___lwmod@divisor+1,w
 31587  35BF  3BAE               	subwfb	___lwmod@dividend+1,f
 31588  35C0                     l8427:	
 31589  35C0  3001               	movlw	1
 31590  35C1                     u4955:	
 31591  35C1  36AC               	lsrf	___lwmod@divisor+1,f
 31592  35C2  0CAB               	rrf	___lwmod@divisor,f
 31593  35C3  0B89               	decfsz	9,f
 31594  35C4  2DC1               	goto	u4955
 31595  35C5  3001               	movlw	1
 31596  35C6  02FA               	subwf	___lwmod@counter,f
 31597  35C7  1D03               	btfss	3,2
 31598  35C8  2DB4               	goto	l8423
 31599  35C9                     l8431:	
 31600  35C9  082E               	movf	___lwmod@dividend+1,w
 31601  35CA  00AC               	movwf	?___lwmod+1
 31602  35CB  082D               	movf	___lwmod@dividend,w
 31603  35CC  00AB               	movwf	?___lwmod
 31604  35CD  0008               	return
 31605  35CE                     __end_of___lwmod:	
 31606                           
 31607                           	psect	text74
 31608  2885                     __ptext74:	
 31609 ;; *************** function ___lwdiv *****************
 31610 ;; Defined at:
 31611 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwdiv.c"
 31612 ;; Parameters:    Size  Location     Type
 31613 ;;  divisor         2    1[COMMON] unsigned int 
 31614 ;;  dividend        2    3[COMMON] unsigned int 
 31615 ;; Auto vars:     Size  Location     Type
 31616 ;;  quotient        2    7[COMMON] unsigned int 
 31617 ;;  counter         1    6[COMMON] unsigned char 
 31618 ;; Return value:  Size  Location     Type
 31619 ;;                  2    1[COMMON] unsigned int 
 31620 ;; Registers used:
 31621 ;;		wreg, status,2, status,0
 31622 ;; Tracked objects:
 31623 ;;		On entry : 0/0
 31624 ;;		On exit  : 0/0
 31625 ;;		Unchanged: 0/0
 31626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31627 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31628 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31629 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31630 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31631 ;;Total ram usage:        8 bytes
 31632 ;; Hardware stack levels used:    1
 31633 ;; Hardware stack levels required when called:    4
 31634 ;; This function calls:
 31635 ;;		Nothing
 31636 ;; This function is called by:
 31637 ;;		_marquee_speedy
 31638 ;;		_marquee
 31639 ;;		_sprintf
 31640 ;; This function uses a non-reentrant model
 31641 ;;
 31642                           
 31643                           
 31644                           ;psect for function ___lwdiv
 31645  2885                     ___lwdiv:	
 31646                           
 31647                           ;incstack = 0
 31648                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 31649  2885  01F7               	clrf	___lwdiv@quotient
 31650  2886  01F8               	clrf	___lwdiv@quotient+1
 31651  2887  0871               	movf	___lwdiv@divisor,w
 31652  2888  0472               	iorwf	___lwdiv@divisor+1,w
 31653  2889  1903               	btfsc	3,2
 31654  288A  28B4               	goto	l8409
 31655  288B  01F6               	clrf	___lwdiv@counter
 31656  288C  0AF6               	incf	___lwdiv@counter,f
 31657  288D                     l8397:	
 31658  288D  1BF2               	btfsc	___lwdiv@divisor+1,7
 31659  288E  2899               	goto	l8399
 31660  288F  3001               	movlw	1
 31661  2890                     u4855:	
 31662  2890  35F1               	lslf	___lwdiv@divisor,f
 31663  2891  0DF2               	rlf	___lwdiv@divisor+1,f
 31664  2892  0B89               	decfsz	9,f
 31665  2893  2890               	goto	u4855
 31666  2894  3001               	movlw	1
 31667  2895  00F5               	movwf	??___lwdiv
 31668  2896  0875               	movf	??___lwdiv,w
 31669  2897  07F6               	addwf	___lwdiv@counter,f
 31670  2898  288D               	goto	l8397
 31671  2899                     l8399:	
 31672  2899  3001               	movlw	1
 31673  289A                     u4875:	
 31674  289A  35F7               	lslf	___lwdiv@quotient,f
 31675  289B  0DF8               	rlf	___lwdiv@quotient+1,f
 31676  289C  0B89               	decfsz	9,f
 31677  289D  289A               	goto	u4875
 31678  289E  0872               	movf	___lwdiv@divisor+1,w
 31679  289F  0274               	subwf	___lwdiv@dividend+1,w
 31680  28A0  1D03               	skipz
 31681  28A1  28A4               	goto	u4885
 31682  28A2  0871               	movf	___lwdiv@divisor,w
 31683  28A3  0273               	subwf	___lwdiv@dividend,w
 31684  28A4                     u4885:	
 31685  28A4  1C03               	skipc
 31686  28A5  28AB               	goto	l8405
 31687  28A6  0871               	movf	___lwdiv@divisor,w
 31688  28A7  02F3               	subwf	___lwdiv@dividend,f
 31689  28A8  0872               	movf	___lwdiv@divisor+1,w
 31690  28A9  3BF4               	subwfb	___lwdiv@dividend+1,f
 31691  28AA  1477               	bsf	___lwdiv@quotient,0
 31692  28AB                     l8405:	
 31693  28AB  3001               	movlw	1
 31694  28AC                     u4895:	
 31695  28AC  36F2               	lsrf	___lwdiv@divisor+1,f
 31696  28AD  0CF1               	rrf	___lwdiv@divisor,f
 31697  28AE  0B89               	decfsz	9,f
 31698  28AF  28AC               	goto	u4895
 31699  28B0  3001               	movlw	1
 31700  28B1  02F6               	subwf	___lwdiv@counter,f
 31701  28B2  1D03               	btfss	3,2
 31702  28B3  2899               	goto	l8399
 31703  28B4                     l8409:	
 31704  28B4  0878               	movf	___lwdiv@quotient+1,w
 31705  28B5  00F2               	movwf	?___lwdiv+1
 31706  28B6  0877               	movf	___lwdiv@quotient,w
 31707  28B7  00F1               	movwf	?___lwdiv
 31708  28B8  0008               	return
 31709  28B9                     __end_of___lwdiv:	
 31710                           
 31711                           	psect	text75
 31712  3429                     __ptext75:	
 31713 ;; *************** function _TMR0_Read16bitTimer *****************
 31714 ;; Defined at:
 31715 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 31716 ;; Parameters:    Size  Location     Type
 31717 ;;		None
 31718 ;; Auto vars:     Size  Location     Type
 31719 ;;  readVal         2    8[COMMON] unsigned int 
 31720 ;;  readValHigh     1   11[COMMON] unsigned char 
 31721 ;;  readValLow      1   10[COMMON] unsigned char 
 31722 ;; Return value:  Size  Location     Type
 31723 ;;                  2    1[COMMON] unsigned int 
 31724 ;; Registers used:
 31725 ;;		wreg, status,2, status,0
 31726 ;; Tracked objects:
 31727 ;;		On entry : 0/0
 31728 ;;		On exit  : 0/0
 31729 ;;		Unchanged: 0/0
 31730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31731 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31732 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31733 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31734 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31735 ;;Total ram usage:       11 bytes
 31736 ;; Hardware stack levels used:    1
 31737 ;; Hardware stack levels required when called:    4
 31738 ;; This function calls:
 31739 ;;		Nothing
 31740 ;; This function is called by:
 31741 ;;		_scheduler_TaskRun
 31742 ;;		_schedulerExecute
 31743 ;; This function uses a non-reentrant model
 31744 ;;
 31745                           
 31746                           
 31747                           ;psect for function _TMR0_Read16bitTimer
 31748  3429                     _TMR0_Read16bitTimer:	
 31749                           
 31750                           ;tmr0.c: 111: uint16_t readVal;
 31751                           ;tmr0.c: 112: uint8_t readValLow;
 31752                           ;tmr0.c: 113: uint8_t readValHigh;
 31753                           ;tmr0.c: 115: readValLow = TMR0L;
 31754                           
 31755                           ;incstack = 0
 31756                           ; Regs used in _TMR0_Read16bitTimer: [wreg+status,2+status,0]
 31757  3429  0020               	movlb	0	; select bank0
 31758  342A  0815               	movf	21,w	;volatile
 31759  342B  00F3               	movwf	??_TMR0_Read16bitTimer
 31760  342C  0873               	movf	??_TMR0_Read16bitTimer,w
 31761  342D  00FA               	movwf	TMR0_Read16bitTimer@readValLow
 31762                           
 31763                           ;tmr0.c: 116: readValHigh = TMR0H;
 31764  342E  0816               	movf	22,w	;volatile
 31765  342F  00F3               	movwf	??_TMR0_Read16bitTimer
 31766  3430  0873               	movf	??_TMR0_Read16bitTimer,w
 31767  3431  00FB               	movwf	TMR0_Read16bitTimer@readValHigh
 31768                           
 31769                           ;tmr0.c: 117: readVal = ((uint16_t)readValHigh << 8) + readValLow;
 31770  3432  087A               	movf	TMR0_Read16bitTimer@readValLow,w
 31771  3433  00F3               	movwf	??_TMR0_Read16bitTimer
 31772  3434  01F4               	clrf	??_TMR0_Read16bitTimer+1
 31773  3435  087B               	movf	TMR0_Read16bitTimer@readValHigh,w
 31774  3436  00F5               	movwf	??_TMR0_Read16bitTimer+2
 31775  3437  01F6               	clrf	??_TMR0_Read16bitTimer+3
 31776  3438  0875               	movf	??_TMR0_Read16bitTimer+2,w
 31777  3439  00F6               	movwf	??_TMR0_Read16bitTimer+3
 31778  343A  01F5               	clrf	??_TMR0_Read16bitTimer+2
 31779  343B  0873               	movf	??_TMR0_Read16bitTimer,w
 31780  343C  0775               	addwf	??_TMR0_Read16bitTimer+2,w
 31781  343D  00F8               	movwf	TMR0_Read16bitTimer@readVal
 31782  343E  0874               	movf	??_TMR0_Read16bitTimer+1,w
 31783  343F  3D76               	addwfc	??_TMR0_Read16bitTimer+3,w
 31784  3440  00F9               	movwf	TMR0_Read16bitTimer@readVal+1
 31785                           
 31786                           ;tmr0.c: 119: return readVal;
 31787  3441  0879               	movf	TMR0_Read16bitTimer@readVal+1,w
 31788  3442  00F2               	movwf	?_TMR0_Read16bitTimer+1
 31789  3443  0878               	movf	TMR0_Read16bitTimer@readVal,w
 31790  3444  00F1               	movwf	?_TMR0_Read16bitTimer
 31791  3445  0008               	return
 31792  3446                     __end_of_TMR0_Read16bitTimer:	
 31793                           
 31794                           	psect	text76
 31795  2C83                     __ptext76:	
 31796 ;; *************** function _nullifyBadge_platformInit *****************
 31797 ;; Defined at:
 31798 ;;		line 13 in file "nullifyBadge.c"
 31799 ;; Parameters:    Size  Location     Type
 31800 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 31801 ;;		 -> badge_inst(18), 
 31802 ;; Auto vars:     Size  Location     Type
 31803 ;;  badge           1   12[BANK0 ] PTR struct t_nullifyBadg
 31804 ;;		 -> badge_inst(18), 
 31805 ;; Return value:  Size  Location     Type
 31806 ;;                  1    wreg      void 
 31807 ;; Registers used:
 31808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31809 ;; Tracked objects:
 31810 ;;		On entry : 0/0
 31811 ;;		On exit  : 0/0
 31812 ;;		Unchanged: 0/0
 31813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31815 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31817 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31818 ;;Total ram usage:        1 bytes
 31819 ;; Hardware stack levels used:    1
 31820 ;; Hardware stack levels required when called:    9
 31821 ;; This function calls:
 31822 ;;		_OSCILLATOR_Initialize
 31823 ;;		_PIN_MANAGER_Initialize
 31824 ;;		_PWM1_Initialize
 31825 ;;		_PWM1_LoadDutyValue
 31826 ;;		_PWM2_Initialize
 31827 ;;		_PWM2_LoadDutyValue
 31828 ;;		_PWM5_Initialize
 31829 ;;		_PWM5_LoadDutyValue
 31830 ;;		_PWM6_Initialize
 31831 ;;		_PWM6_LoadDutyValue
 31832 ;;		_SPI1_Initialize
 31833 ;;		_SYSTEM_Initialize
 31834 ;;		_TMR0_Initialize
 31835 ;;		_TMR2_Initialize
 31836 ;;		_TMR4_Initialize
 31837 ;;		_displayL2_Initialize
 31838 ;; This function is called by:
 31839 ;;		_main
 31840 ;; This function uses a non-reentrant model
 31841 ;;
 31842                           
 31843                           
 31844                           ;psect for function _nullifyBadge_platformInit
 31845  2C83                     _nullifyBadge_platformInit:	
 31846                           
 31847                           ;incstack = 0
 31848                           ; Regs used in _nullifyBadge_platformInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 31849                           ;nullifyBadge_platformInit@badge stored from wreg
 31850  2C83  0020               	movlb	0	; select bank0
 31851  2C84  00AC               	movwf	nullifyBadge_platformInit@badge
 31852                           
 31853                           ;nullifyBadge.c: 15: SYSTEM_Initialize();
 31854  2C85  31B4  24A0  31AC   	fcall	_SYSTEM_Initialize
 31855                           
 31856                           ;nullifyBadge.c: 16: OSCILLATOR_Initialize();
 31857  2C88  31B2  220A  31AC   	fcall	_OSCILLATOR_Initialize
 31858                           
 31859                           ;nullifyBadge.c: 19: TMR0_Initialize();
 31860  2C8B  31B4  2446  31AC   	fcall	_TMR0_Initialize
 31861                           
 31862                           ;nullifyBadge.c: 20: TMR2_Initialize();
 31863  2C8E  31B2  2214  31AC   	fcall	_TMR2_Initialize
 31864                           
 31865                           ;nullifyBadge.c: 21: TMR4_Initialize();
 31866  2C91  31B2  2249  31AC   	fcall	_TMR4_Initialize
 31867                           
 31868                           ;nullifyBadge.c: 23: PIN_MANAGER_Initialize();
 31869  2C94  31AC  242E  31AC   	fcall	_PIN_MANAGER_Initialize
 31870                           
 31871                           ;nullifyBadge.c: 24: PWM1_Initialize();
 31872  2C97  31B2  2233  31AC   	fcall	_PWM1_Initialize
 31873                           
 31874                           ;nullifyBadge.c: 26: PWM2_Initialize();
 31875  2C9A  31B2  223E  31AC   	fcall	_PWM2_Initialize
 31876                           
 31877                           ;nullifyBadge.c: 27: PWM5_Initialize();
 31878  2C9D  31B2  225F  31AC   	fcall	_PWM5_Initialize
 31879                           
 31880                           ;nullifyBadge.c: 28: PWM6_Initialize();
 31881  2CA0  31B2  226B  31AC   	fcall	_PWM6_Initialize
 31882                           
 31883                           ;nullifyBadge.c: 29: SPI1_Initialize();
 31884  2CA3  31B1  21E8  31AC   	fcall	_SPI1_Initialize
 31885                           
 31886                           ;nullifyBadge.c: 32: PWM1_LoadDutyValue(128);
 31887  2CA6  3080               	movlw	128
 31888  2CA7  00F1               	movwf	PWM1_LoadDutyValue@dutyValue
 31889  2CA8  3000               	movlw	0
 31890  2CA9  00F2               	movwf	PWM1_LoadDutyValue@dutyValue+1
 31891  2CAA  31B3  2351  31AC   	fcall	_PWM1_LoadDutyValue
 31892                           
 31893                           ;nullifyBadge.c: 44: do { LATBbits.LATB7 = 1; } while(0);
 31894  2CAD  0022               	movlb	2	; select bank2
 31895  2CAE  178D               	bsf	13,7	;volatile
 31896                           
 31897                           ;nullifyBadge.c: 45: PWM2_LoadDutyValue(192);
 31898  2CAF  30C0               	movlw	192
 31899  2CB0  00F1               	movwf	PWM2_LoadDutyValue@dutyValue
 31900  2CB1  3000               	movlw	0
 31901  2CB2  00F2               	movwf	PWM2_LoadDutyValue@dutyValue+1
 31902  2CB3  31B3  2367  31AC   	fcall	_PWM2_LoadDutyValue
 31903                           
 31904                           ;nullifyBadge.c: 50: PWM5_LoadDutyValue(gamma_table_256x1k[128]);
 31905  2CB6  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 31906  2CB7  0084               	movwf	4
 31907  2CB8  30A1               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 31908  2CB9  0085               	movwf	5
 31909  2CBA  3F00               	moviw [0]fsr0
 31910  2CBB  00F1               	movwf	PWM5_LoadDutyValue@dutyValue
 31911  2CBC  3F01               	moviw [1]fsr0
 31912  2CBD  00F2               	movwf	PWM5_LoadDutyValue@dutyValue+1
 31913  2CBE  31B3  237D  31AC   	fcall	_PWM5_LoadDutyValue
 31914                           
 31915                           ;nullifyBadge.c: 51: PWM6_LoadDutyValue(gamma_table_256x1k[128]);
 31916  2CC1  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 31917  2CC2  0084               	movwf	4
 31918  2CC3  30A1               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 31919  2CC4  0085               	movwf	5
 31920  2CC5  3F00               	moviw [0]fsr0
 31921  2CC6  00F1               	movwf	PWM6_LoadDutyValue@dutyValue
 31922  2CC7  3F01               	moviw [1]fsr0
 31923  2CC8  00F2               	movwf	PWM6_LoadDutyValue@dutyValue+1
 31924  2CC9  31B3  2393  31AC   	fcall	_PWM6_LoadDutyValue
 31925                           
 31926                           ;nullifyBadge.c: 54: displayL2_Initialize(&badge->display);
 31927  2CCC  0020               	movlb	0	; select bank0
 31928  2CCD  082C               	movf	nullifyBadge_platformInit@badge,w
 31929  2CCE  31B5  252A         	fcall	_displayL2_Initialize
 31930                           
 31931                           ;nullifyBadge.c: 57: badge->registeredHw = 0x0;
 31932  2CD0  0020               	movlb	0	; select bank0
 31933  2CD1  082C               	movf	nullifyBadge_platformInit@badge,w
 31934  2CD2  3E11               	addlw	17
 31935  2CD3  0086               	movwf	6
 31936  2CD4  3001               	movlw	1	; select bank2/3
 31937  2CD5  0087               	movwf	7
 31938  2CD6  0181               	clrf	1
 31939  2CD7  0008               	return
 31940  2CD8                     __end_of_nullifyBadge_platformInit:	
 31941                           
 31942                           	psect	text77
 31943  352A                     __ptext77:	
 31944 ;; *************** function _displayL2_Initialize *****************
 31945 ;; Defined at:
 31946 ;;		line 12 in file "nullifyBadge_displayL2.c"
 31947 ;; Parameters:    Size  Location     Type
 31948 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31949 ;;		 -> badge_inst(18), 
 31950 ;; Auto vars:     Size  Location     Type
 31951 ;;  display         1   11[BANK0 ] PTR struct t_nullifyDisp
 31952 ;;		 -> badge_inst(18), 
 31953 ;; Return value:  Size  Location     Type
 31954 ;;                  1    wreg      void 
 31955 ;; Registers used:
 31956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31957 ;; Tracked objects:
 31958 ;;		On entry : 0/0
 31959 ;;		On exit  : 0/0
 31960 ;;		Unchanged: 0/0
 31961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31963 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31965 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31966 ;;Total ram usage:        1 bytes
 31967 ;; Hardware stack levels used:    1
 31968 ;; Hardware stack levels required when called:    8
 31969 ;; This function calls:
 31970 ;;		_displayL1_Initialize
 31971 ;;		_memset
 31972 ;; This function is called by:
 31973 ;;		_nullifyBadge_platformInit
 31974 ;; This function uses a non-reentrant model
 31975 ;;
 31976                           
 31977                           
 31978                           ;psect for function _displayL2_Initialize
 31979  352A                     _displayL2_Initialize:	
 31980                           
 31981                           ;incstack = 0
 31982                           ; Regs used in _displayL2_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31983                           ;displayL2_Initialize@display stored from wreg
 31984  352A  0020               	movlb	0	; select bank0
 31985  352B  00AB               	movwf	displayL2_Initialize@display
 31986                           
 31987                           ;nullifyBadge_displayL2.c: 13: displayL1_Initialize(&display->display_l1);
 31988  352C  082B               	movf	displayL2_Initialize@display,w
 31989  352D  3E07               	addlw	7
 31990  352E  31B3  232B  31B5   	fcall	_displayL1_Initialize
 31991                           
 31992                           ;nullifyBadge_displayL2.c: 14: memset(display->charVect, ' ', sizeof(display->charVect))
      +                          ;
 31993  3531  0020               	movlb	0	; select bank0
 31994  3532  082B               	movf	displayL2_Initialize@display,w
 31995  3533  00F1               	movwf	memset@p1
 31996  3534  3001               	movlw	1
 31997  3535  00F2               	movwf	memset@p1+1
 31998  3536  3020               	movlw	32
 31999  3537  00F3               	movwf	memset@c
 32000  3538  3000               	movlw	0
 32001  3539  00F4               	movwf	memset@c+1
 32002  353A  3004               	movlw	4
 32003  353B  00F5               	movwf	memset@n
 32004  353C  3000               	movlw	0
 32005  353D  00F6               	movwf	memset@n+1
 32006  353E  31B3  23C0         	fcall	_memset
 32007                           
 32008                           ;nullifyBadge_displayL2.c: 15: display->dpVect = 0;
 32009  3540  0020               	movlb	0	; select bank0
 32010  3541  082B               	movf	displayL2_Initialize@display,w
 32011  3542  3E04               	addlw	4
 32012  3543  0086               	movwf	6
 32013  3544  3001               	movlw	1	; select bank2/3
 32014  3545  0087               	movwf	7
 32015  3546  0181               	clrf	1
 32016                           
 32017                           ;nullifyBadge_displayL2.c: 16: display->ledVect = 0;
 32018  3547  082B               	movf	displayL2_Initialize@display,w
 32019  3548  3E05               	addlw	5
 32020  3549  0086               	movwf	6
 32021  354A  3001               	movlw	1	; select bank2/3
 32022  354B  0087               	movwf	7
 32023  354C  3000               	movlw	0
 32024  354D  3FC0               	movwi [0]fsr1
 32025  354E  3FC1               	movwi [1]fsr1
 32026  354F  0008               	return
 32027  3550                     __end_of_displayL2_Initialize:	
 32028                           
 32029                           	psect	text78
 32030  332B                     __ptext78:	
 32031 ;; *************** function _displayL1_Initialize *****************
 32032 ;; Defined at:
 32033 ;;		line 13 in file "nullifyBadge_displayL1.c"
 32034 ;; Parameters:    Size  Location     Type
 32035 ;;  display         1    wreg     PTR struct t_nullifyDisp
 32036 ;;		 -> badge_inst(18), 
 32037 ;; Auto vars:     Size  Location     Type
 32038 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 32039 ;;		 -> badge_inst(18), 
 32040 ;; Return value:  Size  Location     Type
 32041 ;;                  1    wreg      void 
 32042 ;; Registers used:
 32043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32044 ;; Tracked objects:
 32045 ;;		On entry : 0/0
 32046 ;;		On exit  : 0/0
 32047 ;;		Unchanged: 0/0
 32048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32050 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32052 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32053 ;;Total ram usage:        1 bytes
 32054 ;; Hardware stack levels used:    1
 32055 ;; Hardware stack levels required when called:    7
 32056 ;; This function calls:
 32057 ;;		_displayL1_Update
 32058 ;;		_memset
 32059 ;; This function is called by:
 32060 ;;		_displayL2_Initialize
 32061 ;; This function uses a non-reentrant model
 32062 ;;
 32063                           
 32064                           
 32065                           ;psect for function _displayL1_Initialize
 32066  332B                     _displayL1_Initialize:	
 32067                           
 32068                           ;incstack = 0
 32069                           ; Regs used in _displayL1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 32070                           ;displayL1_Initialize@display stored from wreg
 32071  332B  00FB               	movwf	displayL1_Initialize@display
 32072                           
 32073                           ;nullifyBadge_displayL1.c: 14: memset(display->displayVect, 0, sizeof(struct t_nullifyDi
      +                          splay_l1));
 32074  332C  087B               	movf	displayL1_Initialize@display,w
 32075  332D  00F1               	movwf	memset@p1
 32076  332E  3001               	movlw	1
 32077  332F  00F2               	movwf	memset@p1+1
 32078  3330  3000               	movlw	0
 32079  3331  00F3               	movwf	memset@c
 32080  3332  00F4               	movwf	memset@c+1
 32081  3333  300A               	movlw	10
 32082  3334  00F5               	movwf	memset@n
 32083  3335  3000               	movlw	0
 32084  3336  00F6               	movwf	memset@n+1
 32085  3337  31B3  23C0  31B3   	fcall	_memset
 32086                           
 32087                           ;nullifyBadge_displayL1.c: 15: displayL1_Update(display);
 32088  333A  087B               	movf	displayL1_Initialize@display,w
 32089  333B  31B2  22E6         	fcall	_displayL1_Update
 32090  333D  0008               	return
 32091  333E                     __end_of_displayL1_Initialize:	
 32092                           
 32093                           	psect	text79
 32094  33C0                     __ptext79:	
 32095 ;; *************** function _memset *****************
 32096 ;; Defined at:
 32097 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/memset.c"
 32098 ;; Parameters:    Size  Location     Type
 32099 ;;  p1              2    1[COMMON] PTR void 
 32100 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 32101 ;;		 -> menu_TaskData(14), flashy_TaskData(30), badge_inst(18), NULL(0), 
 32102 ;;  c               2    3[COMMON] int 
 32103 ;;  n               2    5[COMMON] unsigned int 
 32104 ;; Auto vars:     Size  Location     Type
 32105 ;;  p               2    7[COMMON] PTR unsigned char 
 32106 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 32107 ;;		 -> menu_TaskData(14), flashy_TaskData(30), badge_inst(18), NULL(0), 
 32108 ;; Return value:  Size  Location     Type
 32109 ;;                  2    1[COMMON] PTR void 
 32110 ;; Registers used:
 32111 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 32112 ;; Tracked objects:
 32113 ;;		On entry : 0/0
 32114 ;;		On exit  : 0/0
 32115 ;;		Unchanged: 0/0
 32116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32117 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32118 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32120 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32121 ;;Total ram usage:        8 bytes
 32122 ;; Hardware stack levels used:    1
 32123 ;; Hardware stack levels required when called:    4
 32124 ;; This function calls:
 32125 ;;		Nothing
 32126 ;; This function is called by:
 32127 ;;		_displayL1_Initialize
 32128 ;;		_displayL2_Initialize
 32129 ;;		_slot_Setup
 32130 ;;		_slot_Main
 32131 ;; This function uses a non-reentrant model
 32132 ;;
 32133                           
 32134                           
 32135                           ;psect for function _memset
 32136  33C0                     _memset:	
 32137                           
 32138                           ;incstack = 0
 32139                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 32140  33C0  0872               	movf	memset@p1+1,w
 32141  33C1  00F8               	movwf	memset@p+1
 32142  33C2  0871               	movf	memset@p1,w
 32143  33C3  00F7               	movwf	memset@p
 32144  33C4                     l8497:	
 32145  33C4  3001               	movlw	1
 32146  33C5  02F5               	subwf	memset@n,f
 32147  33C6  3000               	movlw	0
 32148  33C7  3BF6               	subwfb	memset@n+1,f
 32149  33C8  0A75               	incf	memset@n,w
 32150  33C9  1903               	btfsc	3,2
 32151  33CA  0A76               	incf	memset@n+1,w
 32152  33CB  1903               	btfsc	3,2
 32153  33CC  0008               	return
 32154  33CD  0877               	movf	memset@p,w
 32155  33CE  0086               	movwf	6
 32156  33CF  0878               	movf	memset@p+1,w
 32157  33D0  0087               	movwf	7
 32158  33D1  0873               	movf	memset@c,w
 32159  33D2  0081               	movwf	1
 32160  33D3  3001               	movlw	1
 32161  33D4  07F7               	addwf	memset@p,f
 32162  33D5  3000               	movlw	0
 32163  33D6  3DF8               	addwfc	memset@p+1,f
 32164  33D7  2BC4               	goto	l8497
 32165  33D8                     __end_of_memset:	
 32166                           ;	Return value of _memset is never used
 32167                           
 32168                           
 32169                           	psect	text80
 32170  32E6                     __ptext80:	
 32171 ;; *************** function _displayL1_Update *****************
 32172 ;; Defined at:
 32173 ;;		line 97 in file "nullifyBadge_displayL1.c"
 32174 ;; Parameters:    Size  Location     Type
 32175 ;;  display         1    wreg     PTR struct t_nullifyDisp
 32176 ;;		 -> badge_inst(18), 
 32177 ;; Auto vars:     Size  Location     Type
 32178 ;;  display         1   10[BANK0 ] PTR struct t_nullifyDisp
 32179 ;;		 -> badge_inst(18), 
 32180 ;;  tmpRxBuf       10    0[BANK0 ] unsigned char [10]
 32181 ;; Return value:  Size  Location     Type
 32182 ;;                  1    wreg      void 
 32183 ;; Registers used:
 32184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32185 ;; Tracked objects:
 32186 ;;		On entry : 0/0
 32187 ;;		On exit  : 0/0
 32188 ;;		Unchanged: 0/0
 32189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32191 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32192 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32193 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32194 ;;Total ram usage:       13 bytes
 32195 ;; Hardware stack levels used:    1
 32196 ;; Hardware stack levels required when called:    6
 32197 ;; This function calls:
 32198 ;;		_SPI1_Exchange8bitBuffer
 32199 ;; This function is called by:
 32200 ;;		_displayL1_Initialize
 32201 ;;		_displayL2_ForceUpdate
 32202 ;;		_displayL2_EraseSegDisplay
 32203 ;;		_displayL2_SetUserLeds
 32204 ;;		_displayL2_ClrUserLeds
 32205 ;;		_displayL2_PrintChar
 32206 ;;		_displayL2_PrintStr
 32207 ;; This function uses a non-reentrant model
 32208 ;;
 32209                           
 32210                           
 32211                           ;psect for function _displayL1_Update
 32212  32E6                     _displayL1_Update:	
 32213                           
 32214                           ;incstack = 0
 32215                           ; Regs used in _displayL1_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 32216                           ;displayL1_Update@display stored from wreg
 32217  32E6  0020               	movlb	0	; select bank0
 32218  32E7  00AA               	movwf	displayL1_Update@display
 32219                           
 32220                           ;nullifyBadge_displayL1.c: 98: u8 tmpRxBuf[10];
 32221                           ;nullifyBadge_displayL1.c: 100: SPI1_Exchange8bitBuffer(display->displayVect, 10, tmpRxB
      +                          uf);
 32222  32E8  300A               	movlw	10
 32223  32E9  00F9               	movwf	??_displayL1_Update
 32224  32EA  0879               	movf	??_displayL1_Update,w
 32225  32EB  00F2               	movwf	SPI1_Exchange8bitBuffer@bufLen
 32226  32EC  3020               	movlw	(low (displayL1_Update@tmpRxBuf| 0))& (0+255)
 32227  32ED  00FA               	movwf	??_displayL1_Update+1
 32228  32EE  087A               	movf	??_displayL1_Update+1,w
 32229  32EF  00F3               	movwf	SPI1_Exchange8bitBuffer@dataOut
 32230  32F0  082A               	movf	displayL1_Update@display,w
 32231  32F1  31AB  233A         	fcall	_SPI1_Exchange8bitBuffer
 32232                           
 32233                           ;nullifyBadge_displayL1.c: 101: do { LATCbits.LATC7 = 1; } while(0);
 32234  32F3  0022               	movlb	2	; select bank2
 32235  32F4  178E               	bsf	14,7	;volatile
 32236                           
 32237                           ;nullifyBadge_displayL1.c: 102: do { LATCbits.LATC7 = 0; } while(0);
 32238  32F5  138E               	bcf	14,7	;volatile
 32239  32F6  0008               	return
 32240  32F7                     __end_of_displayL1_Update:	
 32241                           
 32242                           	psect	text81
 32243  2B3A                     __ptext81:	
 32244 ;; *************** function _SPI1_Exchange8bitBuffer *****************
 32245 ;; Defined at:
 32246 ;;		line 91 in file "mcc_generated_files/spi1.c"
 32247 ;; Parameters:    Size  Location     Type
 32248 ;;  dataIn          1    wreg     PTR unsigned char 
 32249 ;;		 -> badge_inst(18), 
 32250 ;;  bufLen          1    2[COMMON] unsigned char 
 32251 ;;  dataOut         1    3[COMMON] PTR unsigned char 
 32252 ;;		 -> displayL1_Update@tmpRxBuf(10), 
 32253 ;; Auto vars:     Size  Location     Type
 32254 ;;  dataIn          1    7[COMMON] PTR unsigned char 
 32255 ;;		 -> badge_inst(18), 
 32256 ;;  bytesWritten    1    8[COMMON] unsigned char 
 32257 ;; Return value:  Size  Location     Type
 32258 ;;                  1    wreg      unsigned char 
 32259 ;; Registers used:
 32260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32261 ;; Tracked objects:
 32262 ;;		On entry : 0/0
 32263 ;;		On exit  : 0/0
 32264 ;;		Unchanged: 0/0
 32265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32266 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32267 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32268 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32269 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32270 ;;Total ram usage:        7 bytes
 32271 ;; Hardware stack levels used:    1
 32272 ;; Hardware stack levels required when called:    5
 32273 ;; This function calls:
 32274 ;;		_SPI1_Exchange8bit
 32275 ;; This function is called by:
 32276 ;;		_displayL1_Update
 32277 ;; This function uses a non-reentrant model
 32278 ;;
 32279                           
 32280                           
 32281                           ;psect for function _SPI1_Exchange8bitBuffer
 32282  2B3A                     _SPI1_Exchange8bitBuffer:	
 32283                           
 32284                           ;incstack = 0
 32285                           ; Regs used in _SPI1_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 32286                           ;SPI1_Exchange8bitBuffer@dataIn stored from wreg
 32287  2B3A  00F7               	movwf	SPI1_Exchange8bitBuffer@dataIn
 32288                           
 32289                           ;spi1.c: 93: uint8_t bytesWritten = 0;
 32290  2B3B  01F8               	clrf	SPI1_Exchange8bitBuffer@bytesWritten
 32291                           
 32292                           ;spi1.c: 95: if(bufLen != 0)
 32293  2B3C  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 32294  2B3D  1903               	btfsc	3,2
 32295  2B3E  0008               	return
 32296                           
 32297                           ;spi1.c: 96: {
 32298                           ;spi1.c: 97: if(dataIn != (0))
 32299  2B3F  0877               	movf	SPI1_Exchange8bitBuffer@dataIn,w
 32300  2B40  1D03               	btfss	3,2
 32301  2B41  2B6A               	goto	l8243
 32302  2B42  2B6F               	goto	l8245
 32303  2B43                     l8235:	
 32304                           ;spi1.c: 98: {
 32305                           ;spi1.c: 99: while(bytesWritten < bufLen)
 32306                           
 32307                           
 32308                           ;spi1.c: 100: {
 32309                           ;spi1.c: 101: if(dataOut == (0))
 32310  2B43  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 32311  2B44  1D03               	btfss	3,2
 32312  2B45  2B52               	goto	l8239
 32313                           
 32314                           ;spi1.c: 102: {
 32315                           ;spi1.c: 103: SPI1_Exchange8bit(dataIn[bytesWritten]);
 32316  2B46  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32317  2B47  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 32318  2B48  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32319  2B49  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32320  2B4A  0086               	movwf	6
 32321  2B4B  3001               	movlw	1	; select bank2/3
 32322  2B4C  0087               	movwf	7
 32323  2B4D  0801               	movf	1,w
 32324  2B4E  31B1  21F8  31AB   	fcall	_SPI1_Exchange8bit
 32325                           
 32326                           ;spi1.c: 104: }
 32327  2B51  2B66               	goto	l8241
 32328  2B52                     l8239:	
 32329                           
 32330                           ;spi1.c: 105: else
 32331                           ;spi1.c: 106: {
 32332                           ;spi1.c: 107: dataOut[bytesWritten] = SPI1_Exchange8bit(dataIn[bytesWritten]);
 32333  2B52  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32334  2B53  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 32335  2B54  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32336  2B55  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32337  2B56  0086               	movwf	6
 32338  2B57  3001               	movlw	1	; select bank2/3
 32339  2B58  0087               	movwf	7
 32340  2B59  0801               	movf	1,w
 32341  2B5A  31B1  21F8  31AB   	fcall	_SPI1_Exchange8bit
 32342  2B5D  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 32343  2B5E  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32344  2B5F  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 32345  2B60  00F6               	movwf	??_SPI1_Exchange8bitBuffer+2
 32346  2B61  0876               	movf	??_SPI1_Exchange8bitBuffer+2,w
 32347  2B62  0086               	movwf	6
 32348  2B63  0187               	clrf	7
 32349  2B64  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 32350  2B65  0081               	movwf	1
 32351  2B66                     l8241:	
 32352                           
 32353                           ;spi1.c: 108: }
 32354                           ;spi1.c: 110: bytesWritten++;
 32355  2B66  3001               	movlw	1
 32356  2B67  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32357  2B68  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32358  2B69  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 32359  2B6A                     l8243:	
 32360  2B6A  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 32361  2B6B  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32362  2B6C  1803               	btfsc	3,0
 32363  2B6D  0008               	return
 32364  2B6E  2B43               	goto	l8235
 32365  2B6F                     l8245:	
 32366                           ;spi1.c: 111: }
 32367                           ;spi1.c: 112: }
 32368                           
 32369                           
 32370                           ;spi1.c: 113: else
 32371                           ;spi1.c: 114: {
 32372                           ;spi1.c: 115: if(dataOut != (0))
 32373  2B6F  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 32374  2B70  1903               	btfsc	3,2
 32375  2B71  0008               	return
 32376  2B72                     l8253:	
 32377  2B72  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 32378  2B73  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32379  2B74  1803               	btfsc	3,0
 32380  2B75  0008               	return
 32381                           
 32382                           ;spi1.c: 118: {
 32383                           ;spi1.c: 119: dataOut[bytesWritten] = SPI1_Exchange8bit(0x0);
 32384                           
 32385                           ;spi1.c: 116: {
 32386                           ;spi1.c: 117: while(bytesWritten < bufLen )
 32387  2B76  3000               	movlw	0
 32388  2B77  31B1  21F8  31AB   	fcall	_SPI1_Exchange8bit
 32389  2B7A  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32390  2B7B  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32391  2B7C  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 32392  2B7D  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 32393  2B7E  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 32394  2B7F  0086               	movwf	6
 32395  2B80  0187               	clrf	7
 32396  2B81  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32397  2B82  0081               	movwf	1
 32398                           
 32399                           ;spi1.c: 121: bytesWritten++;
 32400  2B83  3001               	movlw	1
 32401  2B84  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32402  2B85  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32403  2B86  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 32404  2B87  2B72               	goto	l8253
 32405  2B88                     __end_of_SPI1_Exchange8bitBuffer:	
 32406                           ;spi1.c: 122: }
 32407                           ;spi1.c: 123: }
 32408                           ;spi1.c: 124: }
 32409                           ;spi1.c: 125: }
 32410                           ;spi1.c: 127: return bytesWritten;
 32411                           ;	Return value of _SPI1_Exchange8bitBuffer is never used
 32412                           
 32413                           
 32414                           	psect	text82
 32415  31F8                     __ptext82:	
 32416 ;; *************** function _SPI1_Exchange8bit *****************
 32417 ;; Defined at:
 32418 ;;		line 77 in file "mcc_generated_files/spi1.c"
 32419 ;; Parameters:    Size  Location     Type
 32420 ;;  data            1    wreg     unsigned char 
 32421 ;; Auto vars:     Size  Location     Type
 32422 ;;  data            1    1[COMMON] unsigned char 
 32423 ;; Return value:  Size  Location     Type
 32424 ;;                  1    wreg      unsigned char 
 32425 ;; Registers used:
 32426 ;;		wreg
 32427 ;; Tracked objects:
 32428 ;;		On entry : 0/0
 32429 ;;		On exit  : 0/0
 32430 ;;		Unchanged: 0/0
 32431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32433 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32435 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32436 ;;Total ram usage:        1 bytes
 32437 ;; Hardware stack levels used:    1
 32438 ;; Hardware stack levels required when called:    4
 32439 ;; This function calls:
 32440 ;;		Nothing
 32441 ;; This function is called by:
 32442 ;;		_SPI1_Exchange8bitBuffer
 32443 ;; This function uses a non-reentrant model
 32444 ;;
 32445                           
 32446                           
 32447                           ;psect for function _SPI1_Exchange8bit
 32448  31F8                     _SPI1_Exchange8bit:	
 32449                           
 32450                           ;incstack = 0
 32451                           ; Regs used in _SPI1_Exchange8bit: [wreg]
 32452                           ;SPI1_Exchange8bit@data stored from wreg
 32453  31F8  00F1               	movwf	SPI1_Exchange8bit@data
 32454                           
 32455                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
 32456  31F9  0024               	movlb	4	; select bank4
 32457  31FA  1395               	bcf	21,7	;volatile
 32458                           
 32459                           ;spi1.c: 82: SSP1BUF = data;
 32460  31FB  0871               	movf	SPI1_Exchange8bit@data,w
 32461  31FC  0091               	movwf	17	;volatile
 32462  31FD                     l18:	
 32463                           ;spi1.c: 85: {
 32464                           
 32465                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
 32466                           
 32467  31FD  1C14               	btfss	20,0	;volatile
 32468  31FE  29FD               	goto	l18
 32469                           
 32470                           ;spi1.c: 86: }
 32471                           ;spi1.c: 88: return (SSP1BUF);
 32472  31FF  0811               	movf	17,w	;volatile
 32473  3200  0008               	return
 32474  3201                     __end_of_SPI1_Exchange8bit:	
 32475                           
 32476                           	psect	text83
 32477  34A0                     __ptext83:	
 32478 ;; *************** function _SYSTEM_Initialize *****************
 32479 ;; Defined at:
 32480 ;;		line 76 in file "mcc_generated_files/mcc.c"
 32481 ;; Parameters:    Size  Location     Type
 32482 ;;		None
 32483 ;; Auto vars:     Size  Location     Type
 32484 ;;		None
 32485 ;; Return value:  Size  Location     Type
 32486 ;;                  1    wreg      void 
 32487 ;; Registers used:
 32488 ;;		wreg, status,2, status,0, pclath, cstack
 32489 ;; Tracked objects:
 32490 ;;		On entry : 0/0
 32491 ;;		On exit  : 0/0
 32492 ;;		Unchanged: 0/0
 32493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32498 ;;Total ram usage:        0 bytes
 32499 ;; Hardware stack levels used:    1
 32500 ;; Hardware stack levels required when called:    6
 32501 ;; This function calls:
 32502 ;;		_OSCILLATOR_Initialize
 32503 ;;		_PIN_MANAGER_Initialize
 32504 ;;		_PWM1_Initialize
 32505 ;;		_PWM2_Initialize
 32506 ;;		_PWM5_Initialize
 32507 ;;		_PWM6_Initialize
 32508 ;;		_SPI1_Initialize
 32509 ;;		_TMR0_Initialize
 32510 ;;		_TMR2_Initialize
 32511 ;;		_TMR4_Initialize
 32512 ;;		_WDT_Initialize
 32513 ;; This function is called by:
 32514 ;;		_nullifyBadge_platformInit
 32515 ;; This function uses a non-reentrant model
 32516 ;;
 32517                           
 32518                           
 32519                           ;psect for function _SYSTEM_Initialize
 32520  34A0                     _SYSTEM_Initialize:	
 32521                           
 32522                           ;mcc.c: 79: PIN_MANAGER_Initialize();
 32523                           
 32524                           ;incstack = 0
 32525                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32526  34A0  31AC  242E  31B4   	fcall	_PIN_MANAGER_Initialize
 32527                           
 32528                           ;mcc.c: 80: OSCILLATOR_Initialize();
 32529  34A3  31B2  220A  31B4   	fcall	_OSCILLATOR_Initialize
 32530                           
 32531                           ;mcc.c: 81: WDT_Initialize();
 32532  34A6  31B1  21CD  31B4   	fcall	_WDT_Initialize
 32533                           
 32534                           ;mcc.c: 82: SPI1_Initialize();
 32535  34A9  31B1  21E8  31B4   	fcall	_SPI1_Initialize
 32536                           
 32537                           ;mcc.c: 83: PWM6_Initialize();
 32538  34AC  31B2  226B  31B4   	fcall	_PWM6_Initialize
 32539                           
 32540                           ;mcc.c: 84: PWM1_Initialize();
 32541  34AF  31B2  2233  31B4   	fcall	_PWM1_Initialize
 32542                           
 32543                           ;mcc.c: 85: PWM2_Initialize();
 32544  34B2  31B2  223E  31B4   	fcall	_PWM2_Initialize
 32545                           
 32546                           ;mcc.c: 86: TMR4_Initialize();
 32547  34B5  31B2  2249  31B4   	fcall	_TMR4_Initialize
 32548                           
 32549                           ;mcc.c: 87: TMR2_Initialize();
 32550  34B8  31B2  2214  31B4   	fcall	_TMR2_Initialize
 32551                           
 32552                           ;mcc.c: 88: PWM5_Initialize();
 32553  34BB  31B2  225F  31B4   	fcall	_PWM5_Initialize
 32554                           
 32555                           ;mcc.c: 89: TMR0_Initialize();
 32556  34BE  31B4  2446         	fcall	_TMR0_Initialize
 32557  34C0  0008               	return
 32558  34C1                     __end_of_SYSTEM_Initialize:	
 32559                           
 32560                           	psect	text84
 32561  31CD                     __ptext84:	
 32562 ;; *************** function _WDT_Initialize *****************
 32563 ;; Defined at:
 32564 ;;		line 110 in file "mcc_generated_files/mcc.c"
 32565 ;; Parameters:    Size  Location     Type
 32566 ;;		None
 32567 ;; Auto vars:     Size  Location     Type
 32568 ;;		None
 32569 ;; Return value:  Size  Location     Type
 32570 ;;                  1    wreg      void 
 32571 ;; Registers used:
 32572 ;;		wreg
 32573 ;; Tracked objects:
 32574 ;;		On entry : 0/0
 32575 ;;		On exit  : 0/0
 32576 ;;		Unchanged: 0/0
 32577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32582 ;;Total ram usage:        0 bytes
 32583 ;; Hardware stack levels used:    1
 32584 ;; Hardware stack levels required when called:    4
 32585 ;; This function calls:
 32586 ;;		Nothing
 32587 ;; This function is called by:
 32588 ;;		_SYSTEM_Initialize
 32589 ;; This function uses a non-reentrant model
 32590 ;;
 32591                           
 32592                           
 32593                           ;psect for function _WDT_Initialize
 32594  31CD                     _WDT_Initialize:	
 32595                           
 32596                           ;mcc.c: 113: WDTCON = 0x16;
 32597                           
 32598                           ;incstack = 0
 32599                           ; Regs used in _WDT_Initialize: [wreg]
 32600  31CD  3016               	movlw	22
 32601  31CE  0021               	movlb	1	; select bank1
 32602  31CF  0097               	movwf	23	;volatile
 32603  31D0  0008               	return
 32604  31D1                     __end_of_WDT_Initialize:	
 32605                           
 32606                           	psect	text85
 32607  3249                     __ptext85:	
 32608 ;; *************** function _TMR4_Initialize *****************
 32609 ;; Defined at:
 32610 ;;		line 63 in file "mcc_generated_files/tmr4.c"
 32611 ;; Parameters:    Size  Location     Type
 32612 ;;		None
 32613 ;; Auto vars:     Size  Location     Type
 32614 ;;		None
 32615 ;; Return value:  Size  Location     Type
 32616 ;;                  1    wreg      void 
 32617 ;; Registers used:
 32618 ;;		wreg, status,2, status,0, pclath, cstack
 32619 ;; Tracked objects:
 32620 ;;		On entry : 0/0
 32621 ;;		On exit  : 0/0
 32622 ;;		Unchanged: 0/0
 32623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32628 ;;Total ram usage:        0 bytes
 32629 ;; Hardware stack levels used:    1
 32630 ;; Hardware stack levels required when called:    5
 32631 ;; This function calls:
 32632 ;;		_TMR4_StartTimer
 32633 ;; This function is called by:
 32634 ;;		_SYSTEM_Initialize
 32635 ;;		_nullifyBadge_platformInit
 32636 ;; This function uses a non-reentrant model
 32637 ;;
 32638                           
 32639                           
 32640                           ;psect for function _TMR4_Initialize
 32641  3249                     _TMR4_Initialize:	
 32642                           
 32643                           ;tmr4.c: 68: T4CON = 0x7B;
 32644                           
 32645                           ;incstack = 0
 32646                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32647  3249  307B               	movlw	123
 32648  324A  0028               	movlb	8	; select bank8
 32649  324B  0097               	movwf	23	;volatile
 32650                           
 32651                           ;tmr4.c: 71: PR4 = 0xFF;
 32652  324C  30FF               	movlw	255
 32653  324D  0096               	movwf	22	;volatile
 32654                           
 32655                           ;tmr4.c: 74: TMR4 = 0x00;
 32656  324E  0195               	clrf	21	;volatile
 32657                           
 32658                           ;tmr4.c: 77: PIR2bits.TMR4IF = 0;
 32659  324F  0020               	movlb	0	; select bank0
 32660  3250  1092               	bcf	18,1	;volatile
 32661                           
 32662                           ;tmr4.c: 80: TMR4_StartTimer();
 32663  3251  31B1  21C7         	fcall	_TMR4_StartTimer
 32664  3253  0008               	return
 32665  3254                     __end_of_TMR4_Initialize:	
 32666                           
 32667                           	psect	text86
 32668  31C7                     __ptext86:	
 32669 ;; *************** function _TMR4_StartTimer *****************
 32670 ;; Defined at:
 32671 ;;		line 83 in file "mcc_generated_files/tmr4.c"
 32672 ;; Parameters:    Size  Location     Type
 32673 ;;		None
 32674 ;; Auto vars:     Size  Location     Type
 32675 ;;		None
 32676 ;; Return value:  Size  Location     Type
 32677 ;;                  1    wreg      void 
 32678 ;; Registers used:
 32679 ;;		None
 32680 ;; Tracked objects:
 32681 ;;		On entry : 0/0
 32682 ;;		On exit  : 0/0
 32683 ;;		Unchanged: 0/0
 32684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32689 ;;Total ram usage:        0 bytes
 32690 ;; Hardware stack levels used:    1
 32691 ;; Hardware stack levels required when called:    4
 32692 ;; This function calls:
 32693 ;;		Nothing
 32694 ;; This function is called by:
 32695 ;;		_TMR4_Initialize
 32696 ;; This function uses a non-reentrant model
 32697 ;;
 32698                           
 32699                           
 32700                           ;psect for function _TMR4_StartTimer
 32701  31C7                     _TMR4_StartTimer:	
 32702                           
 32703                           ;tmr4.c: 86: T4CONbits.TMR4ON = 1;
 32704                           
 32705                           ;incstack = 0
 32706                           ; Regs used in _TMR4_StartTimer: []
 32707  31C7  0028               	movlb	8	; select bank8
 32708  31C8  1517               	bsf	23,2	;volatile
 32709  31C9  0008               	return
 32710  31CA                     __end_of_TMR4_StartTimer:	
 32711                           
 32712                           	psect	text87
 32713  3214                     __ptext87:	
 32714 ;; *************** function _TMR2_Initialize *****************
 32715 ;; Defined at:
 32716 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 32717 ;; Parameters:    Size  Location     Type
 32718 ;;		None
 32719 ;; Auto vars:     Size  Location     Type
 32720 ;;		None
 32721 ;; Return value:  Size  Location     Type
 32722 ;;                  1    wreg      void 
 32723 ;; Registers used:
 32724 ;;		wreg, status,2, status,0, pclath, cstack
 32725 ;; Tracked objects:
 32726 ;;		On entry : 0/0
 32727 ;;		On exit  : 0/0
 32728 ;;		Unchanged: 0/0
 32729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32734 ;;Total ram usage:        0 bytes
 32735 ;; Hardware stack levels used:    1
 32736 ;; Hardware stack levels required when called:    5
 32737 ;; This function calls:
 32738 ;;		_TMR2_StartTimer
 32739 ;; This function is called by:
 32740 ;;		_SYSTEM_Initialize
 32741 ;;		_nullifyBadge_platformInit
 32742 ;; This function uses a non-reentrant model
 32743 ;;
 32744                           
 32745                           
 32746                           ;psect for function _TMR2_Initialize
 32747  3214                     _TMR2_Initialize:	
 32748                           
 32749                           ;tmr2.c: 68: T2CON = 0x01;
 32750                           
 32751                           ;incstack = 0
 32752                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32753  3214  3001               	movlw	1
 32754  3215  0020               	movlb	0	; select bank0
 32755  3216  009F               	movwf	31	;volatile
 32756                           
 32757                           ;tmr2.c: 71: PR2 = 0x4A;
 32758  3217  304A               	movlw	74
 32759  3218  009E               	movwf	30	;volatile
 32760                           
 32761                           ;tmr2.c: 74: TMR2 = 0x00;
 32762  3219  019D               	clrf	29	;volatile
 32763                           
 32764                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 32765  321A  1091               	bcf	17,1	;volatile
 32766                           
 32767                           ;tmr2.c: 80: TMR2_StartTimer();
 32768  321B  31B1  21C4         	fcall	_TMR2_StartTimer
 32769  321D  0008               	return
 32770  321E                     __end_of_TMR2_Initialize:	
 32771                           
 32772                           	psect	text88
 32773  31C4                     __ptext88:	
 32774 ;; *************** function _TMR2_StartTimer *****************
 32775 ;; Defined at:
 32776 ;;		line 83 in file "mcc_generated_files/tmr2.c"
 32777 ;; Parameters:    Size  Location     Type
 32778 ;;		None
 32779 ;; Auto vars:     Size  Location     Type
 32780 ;;		None
 32781 ;; Return value:  Size  Location     Type
 32782 ;;                  1    wreg      void 
 32783 ;; Registers used:
 32784 ;;		None
 32785 ;; Tracked objects:
 32786 ;;		On entry : 0/0
 32787 ;;		On exit  : 0/0
 32788 ;;		Unchanged: 0/0
 32789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32794 ;;Total ram usage:        0 bytes
 32795 ;; Hardware stack levels used:    1
 32796 ;; Hardware stack levels required when called:    4
 32797 ;; This function calls:
 32798 ;;		Nothing
 32799 ;; This function is called by:
 32800 ;;		_TMR2_Initialize
 32801 ;; This function uses a non-reentrant model
 32802 ;;
 32803                           
 32804                           
 32805                           ;psect for function _TMR2_StartTimer
 32806  31C4                     _TMR2_StartTimer:	
 32807                           
 32808                           ;tmr2.c: 86: T2CONbits.TMR2ON = 1;
 32809                           
 32810                           ;incstack = 0
 32811                           ; Regs used in _TMR2_StartTimer: []
 32812  31C4  0020               	movlb	0	; select bank0
 32813  31C5  151F               	bsf	31,2	;volatile
 32814  31C6  0008               	return
 32815  31C7                     __end_of_TMR2_StartTimer:	
 32816                           
 32817                           	psect	text89
 32818  3446                     __ptext89:	
 32819 ;; *************** function _TMR0_Initialize *****************
 32820 ;; Defined at:
 32821 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 32822 ;; Parameters:    Size  Location     Type
 32823 ;;		None
 32824 ;; Auto vars:     Size  Location     Type
 32825 ;;		None
 32826 ;; Return value:  Size  Location     Type
 32827 ;;                  1    wreg      void 
 32828 ;; Registers used:
 32829 ;;		wreg, status,2, status,0, pclath, cstack
 32830 ;; Tracked objects:
 32831 ;;		On entry : 0/0
 32832 ;;		On exit  : 0/0
 32833 ;;		Unchanged: 0/0
 32834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32839 ;;Total ram usage:        0 bytes
 32840 ;; Hardware stack levels used:    1
 32841 ;; Hardware stack levels required when called:    5
 32842 ;; This function calls:
 32843 ;;		_TMR0_SetInterruptHandler
 32844 ;;		_TMR0_StartTimer
 32845 ;; This function is called by:
 32846 ;;		_SYSTEM_Initialize
 32847 ;;		_nullifyBadge_platformInit
 32848 ;; This function uses a non-reentrant model
 32849 ;;
 32850                           
 32851                           
 32852                           ;psect for function _TMR0_Initialize
 32853  3446                     _TMR0_Initialize:	
 32854                           
 32855                           ;tmr0.c: 70: T0CON0 = 0x10;
 32856                           
 32857                           ;incstack = 0
 32858                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32859  3446  3010               	movlw	16
 32860  3447  0020               	movlb	0	; select bank0
 32861  3448  0097               	movwf	23	;volatile
 32862                           
 32863                           ;tmr0.c: 73: T0CON1 = 0x4D;
 32864  3449  304D               	movlw	77
 32865  344A  0098               	movwf	24	;volatile
 32866                           
 32867                           ;tmr0.c: 76: TMR0H = 0xFF;
 32868  344B  30FF               	movlw	255
 32869  344C  0096               	movwf	22	;volatile
 32870                           
 32871                           ;tmr0.c: 79: TMR0L = 0xFF;
 32872  344D  30FF               	movlw	255
 32873  344E  0095               	movwf	21	;volatile
 32874                           
 32875                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 32876  344F  0816               	movf	22,w	;volatile
 32877  3450  0021               	movlb	1	; select bank1
 32878  3451  00C1               	movwf	(_timer0ReloadVal16bit+1)^(0+128)	;volatile
 32879  3452  0020               	movlb	0	; select bank0
 32880  3453  0815               	movf	21,w	;volatile
 32881  3454  0021               	movlb	1	; select bank1
 32882  3455  00C0               	movwf	_timer0ReloadVal16bit^(0+128)	;volatile
 32883                           
 32884                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
 32885  3456  0020               	movlb	0	; select bank0
 32886  3457  1290               	bcf	16,5	;volatile
 32887                           
 32888                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
 32889  3458  0021               	movlb	1	; select bank1
 32890  3459  1690               	bsf	16,5	;volatile
 32891                           
 32892                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 32893  345A  3000               	movlw	low _TMR0_DefaultInterruptHandler
 32894  345B  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 32895  345C  3022               	movlw	high _TMR0_DefaultInterruptHandler
 32896  345D  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 32897  345E  31B1  21D6  31B4   	fcall	_TMR0_SetInterruptHandler
 32898                           
 32899                           ;tmr0.c: 94: TMR0_StartTimer();
 32900  3461  31B1  21C1         	fcall	_TMR0_StartTimer
 32901  3463  0008               	return
 32902  3464                     __end_of_TMR0_Initialize:	
 32903                           
 32904                           	psect	text90
 32905  31C1                     __ptext90:	
 32906 ;; *************** function _TMR0_StartTimer *****************
 32907 ;; Defined at:
 32908 ;;		line 97 in file "mcc_generated_files/tmr0.c"
 32909 ;; Parameters:    Size  Location     Type
 32910 ;;		None
 32911 ;; Auto vars:     Size  Location     Type
 32912 ;;		None
 32913 ;; Return value:  Size  Location     Type
 32914 ;;                  1    wreg      void 
 32915 ;; Registers used:
 32916 ;;		None
 32917 ;; Tracked objects:
 32918 ;;		On entry : 0/0
 32919 ;;		On exit  : 0/0
 32920 ;;		Unchanged: 0/0
 32921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32926 ;;Total ram usage:        0 bytes
 32927 ;; Hardware stack levels used:    1
 32928 ;; Hardware stack levels required when called:    4
 32929 ;; This function calls:
 32930 ;;		Nothing
 32931 ;; This function is called by:
 32932 ;;		_TMR0_Initialize
 32933 ;; This function uses a non-reentrant model
 32934 ;;
 32935                           
 32936                           
 32937                           ;psect for function _TMR0_StartTimer
 32938  31C1                     _TMR0_StartTimer:	
 32939                           
 32940                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
 32941                           
 32942                           ;incstack = 0
 32943                           ; Regs used in _TMR0_StartTimer: []
 32944  31C1  0020               	movlb	0	; select bank0
 32945  31C2  1797               	bsf	23,7	;volatile
 32946  31C3  0008               	return
 32947  31C4                     __end_of_TMR0_StartTimer:	
 32948                           
 32949                           	psect	text91
 32950  31D6                     __ptext91:	
 32951 ;; *************** function _TMR0_SetInterruptHandler *****************
 32952 ;; Defined at:
 32953 ;;		line 161 in file "mcc_generated_files/tmr0.c"
 32954 ;; Parameters:    Size  Location     Type
 32955 ;;  InterruptHan    2    1[COMMON] PTR void 
 32956 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 32957 ;; Auto vars:     Size  Location     Type
 32958 ;;		None
 32959 ;; Return value:  Size  Location     Type
 32960 ;;                  1    wreg      void 
 32961 ;; Registers used:
 32962 ;;		wreg
 32963 ;; Tracked objects:
 32964 ;;		On entry : 0/0
 32965 ;;		On exit  : 0/0
 32966 ;;		Unchanged: 0/0
 32967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32968 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32971 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32972 ;;Total ram usage:        2 bytes
 32973 ;; Hardware stack levels used:    1
 32974 ;; Hardware stack levels required when called:    4
 32975 ;; This function calls:
 32976 ;;		Nothing
 32977 ;; This function is called by:
 32978 ;;		_TMR0_Initialize
 32979 ;; This function uses a non-reentrant model
 32980 ;;
 32981                           
 32982                           
 32983                           ;psect for function _TMR0_SetInterruptHandler
 32984  31D6                     _TMR0_SetInterruptHandler:	
 32985                           
 32986                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
 32987                           
 32988                           ;incstack = 0
 32989                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 32990  31D6  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 32991  31D7  0021               	movlb	1	; select bank1
 32992  31D8  00BF               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 32993  31D9  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 32994  31DA  00BE               	movwf	_TMR0_InterruptHandler^(0+128)
 32995  31DB  0008               	return
 32996  31DC                     __end_of_TMR0_SetInterruptHandler:	
 32997                           
 32998                           	psect	text92
 32999  31E8                     __ptext92:	
 33000 ;; *************** function _SPI1_Initialize *****************
 33001 ;; Defined at:
 33002 ;;		line 63 in file "mcc_generated_files/spi1.c"
 33003 ;; Parameters:    Size  Location     Type
 33004 ;;		None
 33005 ;; Auto vars:     Size  Location     Type
 33006 ;;		None
 33007 ;; Return value:  Size  Location     Type
 33008 ;;                  1    wreg      void 
 33009 ;; Registers used:
 33010 ;;		wreg
 33011 ;; Tracked objects:
 33012 ;;		On entry : 0/0
 33013 ;;		On exit  : 0/0
 33014 ;;		Unchanged: 0/0
 33015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33020 ;;Total ram usage:        0 bytes
 33021 ;; Hardware stack levels used:    1
 33022 ;; Hardware stack levels required when called:    4
 33023 ;; This function calls:
 33024 ;;		Nothing
 33025 ;; This function is called by:
 33026 ;;		_SYSTEM_Initialize
 33027 ;;		_nullifyBadge_platformInit
 33028 ;; This function uses a non-reentrant model
 33029 ;;
 33030                           
 33031                           
 33032                           ;psect for function _SPI1_Initialize
 33033  31E8                     _SPI1_Initialize:	
 33034                           
 33035                           ;spi1.c: 68: SSP1STAT = 0x40;
 33036                           
 33037                           ;incstack = 0
 33038                           ; Regs used in _SPI1_Initialize: [wreg]
 33039  31E8  3040               	movlw	64
 33040  31E9  0024               	movlb	4	; select bank4
 33041  31EA  0094               	movwf	20	;volatile
 33042                           
 33043                           ;spi1.c: 71: SSP1CON1 = 0x22;
 33044  31EB  3022               	movlw	34
 33045  31EC  0095               	movwf	21	;volatile
 33046                           
 33047                           ;spi1.c: 74: SSP1ADD = 0x01;
 33048  31ED  3001               	movlw	1
 33049  31EE  0092               	movwf	18	;volatile
 33050  31EF  0008               	return
 33051  31F0                     __end_of_SPI1_Initialize:	
 33052                           
 33053                           	psect	text93
 33054  326B                     __ptext93:	
 33055 ;; *************** function _PWM6_Initialize *****************
 33056 ;; Defined at:
 33057 ;;		line 57 in file "mcc_generated_files/pwm6.c"
 33058 ;; Parameters:    Size  Location     Type
 33059 ;;		None
 33060 ;; Auto vars:     Size  Location     Type
 33061 ;;		None
 33062 ;; Return value:  Size  Location     Type
 33063 ;;                  1    wreg      void 
 33064 ;; Registers used:
 33065 ;;		wreg, status,2, status,0
 33066 ;; Tracked objects:
 33067 ;;		On entry : 0/0
 33068 ;;		On exit  : 0/0
 33069 ;;		Unchanged: 0/0
 33070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33075 ;;Total ram usage:        0 bytes
 33076 ;; Hardware stack levels used:    1
 33077 ;; Hardware stack levels required when called:    4
 33078 ;; This function calls:
 33079 ;;		Nothing
 33080 ;; This function is called by:
 33081 ;;		_SYSTEM_Initialize
 33082 ;;		_nullifyBadge_platformInit
 33083 ;; This function uses a non-reentrant model
 33084 ;;
 33085                           
 33086                           
 33087                           ;psect for function _PWM6_Initialize
 33088  326B                     _PWM6_Initialize:	
 33089                           
 33090                           ;pwm6.c: 61: PWM6CON = 0x90;
 33091                           
 33092                           ;incstack = 0
 33093                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 33094  326B  3090               	movlw	144
 33095  326C  002C               	movlb	12	; select bank12
 33096  326D  009C               	movwf	28	;volatile
 33097                           
 33098                           ;pwm6.c: 64: PWM6DCH = 0x7F;
 33099  326E  307F               	movlw	127
 33100  326F  009B               	movwf	27	;volatile
 33101                           
 33102                           ;pwm6.c: 67: PWM6DCL = 0xC0;
 33103  3270  30C0               	movlw	192
 33104  3271  009A               	movwf	26	;volatile
 33105                           
 33106                           ;pwm6.c: 71: PWMTMRSbits.P6TSEL = 0x2;
 33107  3272  081F               	movf	31,w	;volatile
 33108  3273  39F3               	andlw	-13
 33109  3274  3808               	iorlw	8
 33110  3275  009F               	movwf	31	;volatile
 33111  3276  0008               	return
 33112  3277                     __end_of_PWM6_Initialize:	
 33113                           
 33114                           	psect	text94
 33115  325F                     __ptext94:	
 33116 ;; *************** function _PWM5_Initialize *****************
 33117 ;; Defined at:
 33118 ;;		line 57 in file "mcc_generated_files/pwm5.c"
 33119 ;; Parameters:    Size  Location     Type
 33120 ;;		None
 33121 ;; Auto vars:     Size  Location     Type
 33122 ;;		None
 33123 ;; Return value:  Size  Location     Type
 33124 ;;                  1    wreg      void 
 33125 ;; Registers used:
 33126 ;;		wreg, status,2, status,0
 33127 ;; Tracked objects:
 33128 ;;		On entry : 0/0
 33129 ;;		On exit  : 0/0
 33130 ;;		Unchanged: 0/0
 33131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33136 ;;Total ram usage:        0 bytes
 33137 ;; Hardware stack levels used:    1
 33138 ;; Hardware stack levels required when called:    4
 33139 ;; This function calls:
 33140 ;;		Nothing
 33141 ;; This function is called by:
 33142 ;;		_SYSTEM_Initialize
 33143 ;;		_nullifyBadge_platformInit
 33144 ;; This function uses a non-reentrant model
 33145 ;;
 33146                           
 33147                           
 33148                           ;psect for function _PWM5_Initialize
 33149  325F                     _PWM5_Initialize:	
 33150                           
 33151                           ;pwm5.c: 61: PWM5CON = 0x90;
 33152                           
 33153                           ;incstack = 0
 33154                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
 33155  325F  3090               	movlw	144
 33156  3260  002C               	movlb	12	; select bank12
 33157  3261  0099               	movwf	25	;volatile
 33158                           
 33159                           ;pwm5.c: 64: PWM5DCH = 0x7F;
 33160  3262  307F               	movlw	127
 33161  3263  0098               	movwf	24	;volatile
 33162                           
 33163                           ;pwm5.c: 67: PWM5DCL = 0xC0;
 33164  3264  30C0               	movlw	192
 33165  3265  0097               	movwf	23	;volatile
 33166                           
 33167                           ;pwm5.c: 71: PWMTMRSbits.P5TSEL = 0x2;
 33168  3266  081F               	movf	31,w	;volatile
 33169  3267  39FC               	andlw	-4
 33170  3268  3802               	iorlw	2
 33171  3269  009F               	movwf	31	;volatile
 33172  326A  0008               	return
 33173  326B                     __end_of_PWM5_Initialize:	
 33174                           
 33175                           	psect	text95
 33176  323E                     __ptext95:	
 33177 ;; *************** function _PWM2_Initialize *****************
 33178 ;; Defined at:
 33179 ;;		line 63 in file "mcc_generated_files/pwm2.c"
 33180 ;; Parameters:    Size  Location     Type
 33181 ;;		None
 33182 ;; Auto vars:     Size  Location     Type
 33183 ;;		None
 33184 ;; Return value:  Size  Location     Type
 33185 ;;                  1    wreg      void 
 33186 ;; Registers used:
 33187 ;;		wreg, status,2, status,0
 33188 ;; Tracked objects:
 33189 ;;		On entry : 0/0
 33190 ;;		On exit  : 0/0
 33191 ;;		Unchanged: 0/0
 33192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33197 ;;Total ram usage:        0 bytes
 33198 ;; Hardware stack levels used:    1
 33199 ;; Hardware stack levels required when called:    4
 33200 ;; This function calls:
 33201 ;;		Nothing
 33202 ;; This function is called by:
 33203 ;;		_SYSTEM_Initialize
 33204 ;;		_nullifyBadge_platformInit
 33205 ;; This function uses a non-reentrant model
 33206 ;;
 33207                           
 33208                           
 33209                           ;psect for function _PWM2_Initialize
 33210  323E                     _PWM2_Initialize:	
 33211                           
 33212                           ;pwm2.c: 68: CCP2CON = 0x8F;
 33213                           
 33214                           ;incstack = 0
 33215                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
 33216  323E  308F               	movlw	143
 33217  323F  0025               	movlb	5	; select bank5
 33218  3240  0097               	movwf	23	;volatile
 33219                           
 33220                           ;pwm2.c: 71: CCPR2H = 0x00;
 33221  3241  0196               	clrf	22	;volatile
 33222                           
 33223                           ;pwm2.c: 74: CCPR2L = 0xE0;
 33224  3242  30E0               	movlw	224
 33225  3243  0095               	movwf	21	;volatile
 33226                           
 33227                           ;pwm2.c: 77: CCPTMRSbits.C2TSEL = 0x1;
 33228  3244  081F               	movf	31,w	;volatile
 33229  3245  39F3               	andlw	-13
 33230  3246  3804               	iorlw	4
 33231  3247  009F               	movwf	31	;volatile
 33232  3248  0008               	return
 33233  3249                     __end_of_PWM2_Initialize:	
 33234                           
 33235                           	psect	text96
 33236  3233                     __ptext96:	
 33237 ;; *************** function _PWM1_Initialize *****************
 33238 ;; Defined at:
 33239 ;;		line 63 in file "mcc_generated_files/pwm1.c"
 33240 ;; Parameters:    Size  Location     Type
 33241 ;;		None
 33242 ;; Auto vars:     Size  Location     Type
 33243 ;;		None
 33244 ;; Return value:  Size  Location     Type
 33245 ;;                  1    wreg      void 
 33246 ;; Registers used:
 33247 ;;		wreg, status,2, status,0
 33248 ;; Tracked objects:
 33249 ;;		On entry : 0/0
 33250 ;;		On exit  : 0/0
 33251 ;;		Unchanged: 0/0
 33252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33257 ;;Total ram usage:        0 bytes
 33258 ;; Hardware stack levels used:    1
 33259 ;; Hardware stack levels required when called:    4
 33260 ;; This function calls:
 33261 ;;		Nothing
 33262 ;; This function is called by:
 33263 ;;		_SYSTEM_Initialize
 33264 ;;		_nullifyBadge_platformInit
 33265 ;; This function uses a non-reentrant model
 33266 ;;
 33267                           
 33268                           
 33269                           ;psect for function _PWM1_Initialize
 33270  3233                     _PWM1_Initialize:	
 33271                           
 33272                           ;pwm1.c: 68: CCP1CON = 0x8F;
 33273                           
 33274                           ;incstack = 0
 33275                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 33276  3233  308F               	movlw	143
 33277  3234  0025               	movlb	5	; select bank5
 33278  3235  0093               	movwf	19	;volatile
 33279                           
 33280                           ;pwm1.c: 71: CCPR1H = 0x00;
 33281  3236  0192               	clrf	18	;volatile
 33282                           
 33283                           ;pwm1.c: 74: CCPR1L = 0x95;
 33284  3237  3095               	movlw	149
 33285  3238  0091               	movwf	17	;volatile
 33286                           
 33287                           ;pwm1.c: 77: CCPTMRSbits.C1TSEL = 0x1;
 33288  3239  081F               	movf	31,w	;volatile
 33289  323A  39FC               	andlw	-4
 33290  323B  3801               	iorlw	1
 33291  323C  009F               	movwf	31	;volatile
 33292  323D  0008               	return
 33293  323E                     __end_of_PWM1_Initialize:	
 33294                           
 33295                           	psect	text97
 33296  2C2E                     __ptext97:	
 33297 ;; *************** function _PIN_MANAGER_Initialize *****************
 33298 ;; Defined at:
 33299 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 33300 ;; Parameters:    Size  Location     Type
 33301 ;;		None
 33302 ;; Auto vars:     Size  Location     Type
 33303 ;;  state           1    1[COMMON] unsigned char 
 33304 ;; Return value:  Size  Location     Type
 33305 ;;                  1    wreg      void 
 33306 ;; Registers used:
 33307 ;;		wreg, status,2, status,0
 33308 ;; Tracked objects:
 33309 ;;		On entry : 0/0
 33310 ;;		On exit  : 0/0
 33311 ;;		Unchanged: 0/0
 33312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33314 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33317 ;;Total ram usage:        1 bytes
 33318 ;; Hardware stack levels used:    1
 33319 ;; Hardware stack levels required when called:    4
 33320 ;; This function calls:
 33321 ;;		Nothing
 33322 ;; This function is called by:
 33323 ;;		_SYSTEM_Initialize
 33324 ;;		_nullifyBadge_platformInit
 33325 ;; This function uses a non-reentrant model
 33326 ;;
 33327                           
 33328                           
 33329                           ;psect for function _PIN_MANAGER_Initialize
 33330  2C2E                     _PIN_MANAGER_Initialize:	
 33331                           
 33332                           ;pin_manager.c: 56: LATA = 0x00;
 33333                           
 33334                           ;incstack = 0
 33335                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 33336  2C2E  0022               	movlb	2	; select bank2
 33337  2C2F  018C               	clrf	12	;volatile
 33338                           
 33339                           ;pin_manager.c: 57: LATB = 0x80;
 33340  2C30  3080               	movlw	128
 33341  2C31  008D               	movwf	13	;volatile
 33342                           
 33343                           ;pin_manager.c: 58: LATC = 0x1A;
 33344  2C32  301A               	movlw	26
 33345  2C33  008E               	movwf	14	;volatile
 33346                           
 33347                           ;pin_manager.c: 63: TRISA = 0x37;
 33348  2C34  3037               	movlw	55
 33349  2C35  0021               	movlb	1	; select bank1
 33350  2C36  008C               	movwf	12	;volatile
 33351                           
 33352                           ;pin_manager.c: 64: TRISB = 0x30;
 33353  2C37  3030               	movlw	48
 33354  2C38  008D               	movwf	13	;volatile
 33355                           
 33356                           ;pin_manager.c: 65: TRISC = 0x60;
 33357  2C39  3060               	movlw	96
 33358  2C3A  008E               	movwf	14	;volatile
 33359                           
 33360                           ;pin_manager.c: 70: ANSELC = 0x40;
 33361  2C3B  3040               	movlw	64
 33362  2C3C  0023               	movlb	3	; select bank3
 33363  2C3D  008E               	movwf	14	;volatile
 33364                           
 33365                           ;pin_manager.c: 71: ANSELB = 0x00;
 33366  2C3E  018D               	clrf	13	;volatile
 33367                           
 33368                           ;pin_manager.c: 72: ANSELA = 0x03;
 33369  2C3F  3003               	movlw	3
 33370  2C40  008C               	movwf	12	;volatile
 33371                           
 33372                           ;pin_manager.c: 77: WPUB = 0x00;
 33373  2C41  0024               	movlb	4	; select bank4
 33374  2C42  018D               	clrf	13	;volatile
 33375                           
 33376                           ;pin_manager.c: 78: WPUA = 0x00;
 33377  2C43  018C               	clrf	12	;volatile
 33378                           
 33379                           ;pin_manager.c: 79: WPUC = 0x00;
 33380  2C44  018E               	clrf	14	;volatile
 33381                           
 33382                           ;pin_manager.c: 84: ODCONA = 0x00;
 33383  2C45  0025               	movlb	5	; select bank5
 33384  2C46  018C               	clrf	12	;volatile
 33385                           
 33386                           ;pin_manager.c: 85: ODCONB = 0x00;
 33387  2C47  018D               	clrf	13	;volatile
 33388                           
 33389                           ;pin_manager.c: 86: ODCONC = 0x00;
 33390  2C48  018E               	clrf	14	;volatile
 33391                           
 33392                           ;pin_manager.c: 93: bool state = GIE;
 33393  2C49  3000               	movlw	0
 33394  2C4A  1B8B               	btfsc	11,7	;volatile
 33395  2C4B  3001               	movlw	1
 33396  2C4C  00F1               	movwf	PIN_MANAGER_Initialize@state
 33397                           
 33398                           ;pin_manager.c: 94: GIE = 0;
 33399  2C4D  138B               	bcf	11,7	;volatile
 33400                           
 33401                           ;pin_manager.c: 95: PPSLOCK = 0x55;
 33402  2C4E  3055               	movlw	85
 33403  2C4F  003C               	movlb	28	; select bank28
 33404  2C50  008F               	movwf	15	;volatile
 33405                           
 33406                           ;pin_manager.c: 96: PPSLOCK = 0xAA;
 33407  2C51  30AA               	movlw	170
 33408  2C52  008F               	movwf	15	;volatile
 33409                           
 33410                           ;pin_manager.c: 97: PPSLOCKbits.PPSLOCKED = 0x00;
 33411  2C53  100F               	bcf	15,0	;volatile
 33412                           
 33413                           ;pin_manager.c: 99: RC1PPSbits.RC1PPS = 0x0D;
 33414  2C54  003D               	movlb	29	; select bank29
 33415  2C55  0821               	movf	33,w	;volatile
 33416  2C56  39E0               	andlw	-32
 33417  2C57  380D               	iorlw	13
 33418  2C58  00A1               	movwf	33	;volatile
 33419                           
 33420                           ;pin_manager.c: 100: SSP1DATPPSbits.SSP1DATPPS = 0x0C;
 33421  2C59  003C               	movlb	28	; select bank28
 33422  2C5A  0821               	movf	33,w	;volatile
 33423  2C5B  39E0               	andlw	-32
 33424  2C5C  380C               	iorlw	12
 33425  2C5D  00A1               	movwf	33	;volatile
 33426                           
 33427                           ;pin_manager.c: 101: SSP1CLKPPSbits.SSP1CLKPPS = 0x0E;
 33428  2C5E  0820               	movf	32,w	;volatile
 33429  2C5F  39E0               	andlw	-32
 33430  2C60  380E               	iorlw	14
 33431  2C61  00A0               	movwf	32	;volatile
 33432                           
 33433                           ;pin_manager.c: 102: RC4PPSbits.RC4PPS = 0x02;
 33434  2C62  003D               	movlb	29	; select bank29
 33435  2C63  0824               	movf	36,w	;volatile
 33436  2C64  39E0               	andlw	-32
 33437  2C65  3802               	iorlw	2
 33438  2C66  00A4               	movwf	36	;volatile
 33439                           
 33440                           ;pin_manager.c: 103: RC0PPSbits.RC0PPS = 0x0C;
 33441  2C67  0820               	movf	32,w	;volatile
 33442  2C68  39E0               	andlw	-32
 33443  2C69  380C               	iorlw	12
 33444  2C6A  00A0               	movwf	32	;volatile
 33445                           
 33446                           ;pin_manager.c: 104: RC3PPSbits.RC3PPS = 0x03;
 33447  2C6B  0823               	movf	35,w	;volatile
 33448  2C6C  39E0               	andlw	-32
 33449  2C6D  3803               	iorlw	3
 33450  2C6E  00A3               	movwf	35	;volatile
 33451                           
 33452                           ;pin_manager.c: 105: RB6PPSbits.RB6PPS = 0x18;
 33453  2C6F  081E               	movf	30,w	;volatile
 33454  2C70  39E0               	andlw	-32
 33455  2C71  3818               	iorlw	24
 33456  2C72  009E               	movwf	30	;volatile
 33457                           
 33458                           ;pin_manager.c: 106: RC2PPSbits.RC2PPS = 0x19;
 33459  2C73  0822               	movf	34,w	;volatile
 33460  2C74  39E0               	andlw	-32
 33461  2C75  3819               	iorlw	25
 33462  2C76  00A2               	movwf	34	;volatile
 33463                           
 33464                           ;pin_manager.c: 108: PPSLOCK = 0x55;
 33465  2C77  3055               	movlw	85
 33466  2C78  003C               	movlb	28	; select bank28
 33467  2C79  008F               	movwf	15	;volatile
 33468                           
 33469                           ;pin_manager.c: 109: PPSLOCK = 0xAA;
 33470  2C7A  30AA               	movlw	170
 33471  2C7B  008F               	movwf	15	;volatile
 33472                           
 33473                           ;pin_manager.c: 110: PPSLOCKbits.PPSLOCKED = 0x01;
 33474  2C7C  140F               	bsf	15,0	;volatile
 33475                           
 33476                           ;pin_manager.c: 112: GIE = state;
 33477  2C7D  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 33478  2C7E  2C81               	goto	u3390
 33479  2C7F  178B               	bsf	11,7	;volatile
 33480  2C80  0008               	return
 33481  2C81                     u3390:	
 33482  2C81  138B               	bcf	11,7	;volatile
 33483  2C82  0008               	return
 33484  2C83                     __end_of_PIN_MANAGER_Initialize:	
 33485                           
 33486                           	psect	text98
 33487  320A                     __ptext98:	
 33488 ;; *************** function _OSCILLATOR_Initialize *****************
 33489 ;; Defined at:
 33490 ;;		line 92 in file "mcc_generated_files/mcc.c"
 33491 ;; Parameters:    Size  Location     Type
 33492 ;;		None
 33493 ;; Auto vars:     Size  Location     Type
 33494 ;;		None
 33495 ;; Return value:  Size  Location     Type
 33496 ;;                  1    wreg      void 
 33497 ;; Registers used:
 33498 ;;		wreg, status,2
 33499 ;; Tracked objects:
 33500 ;;		On entry : 0/0
 33501 ;;		On exit  : 0/0
 33502 ;;		Unchanged: 0/0
 33503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33508 ;;Total ram usage:        0 bytes
 33509 ;; Hardware stack levels used:    1
 33510 ;; Hardware stack levels required when called:    4
 33511 ;; This function calls:
 33512 ;;		Nothing
 33513 ;; This function is called by:
 33514 ;;		_SYSTEM_Initialize
 33515 ;;		_nullifyBadge_platformInit
 33516 ;; This function uses a non-reentrant model
 33517 ;;
 33518                           
 33519                           
 33520                           ;psect for function _OSCILLATOR_Initialize
 33521  320A                     _OSCILLATOR_Initialize:	
 33522                           
 33523                           ;mcc.c: 95: OSCCON1 = 0x00;
 33524                           
 33525                           ;incstack = 0
 33526                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 33527  320A  0032               	movlb	18	; select bank18
 33528  320B  0199               	clrf	25	;volatile
 33529                           
 33530                           ;mcc.c: 97: OSCCON3 = 0x00;
 33531  320C  019B               	clrf	27	;volatile
 33532                           
 33533                           ;mcc.c: 99: OSCEN = 0x00;
 33534  320D  019D               	clrf	29	;volatile
 33535                           
 33536                           ;mcc.c: 101: OSCFRQ = 0x06;
 33537  320E  3006               	movlw	6
 33538  320F  009F               	movwf	31	;volatile
 33539                           
 33540                           ;mcc.c: 103: OSCTUNE = 0x00;
 33541  3210  019E               	clrf	30	;volatile
 33542  3211                     l208:	
 33543                           ;mcc.c: 106: {
 33544                           
 33545                           ;mcc.c: 105: while(PLLR == 0)
 33546                           
 33547  3211  181C               	btfsc	28,0	;volatile
 33548  3212  0008               	return
 33549  3213  2A11               	goto	l208
 33550  3214                     __end_of_OSCILLATOR_Initialize:	
 33551                           
 33552                           	psect	text99
 33553  3393                     __ptext99:	
 33554 ;; *************** function _PWM6_LoadDutyValue *****************
 33555 ;; Defined at:
 33556 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 33557 ;; Parameters:    Size  Location     Type
 33558 ;;  dutyValue       2    1[COMMON] unsigned int 
 33559 ;; Auto vars:     Size  Location     Type
 33560 ;;		None
 33561 ;; Return value:  Size  Location     Type
 33562 ;;                  1    wreg      void 
 33563 ;; Registers used:
 33564 ;;		wreg, status,2, status,0
 33565 ;; Tracked objects:
 33566 ;;		On entry : 0/0
 33567 ;;		On exit  : 0/0
 33568 ;;		Unchanged: 0/0
 33569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33570 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33572 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33573 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33574 ;;Total ram usage:        4 bytes
 33575 ;; Hardware stack levels used:    1
 33576 ;; Hardware stack levels required when called:    4
 33577 ;; This function calls:
 33578 ;;		Nothing
 33579 ;; This function is called by:
 33580 ;;		_nullifyBadge_platformInit
 33581 ;;		_nullifyBadge_userLedsSetBrightness
 33582 ;; This function uses a non-reentrant model
 33583 ;;
 33584                           
 33585                           
 33586                           ;psect for function _PWM6_LoadDutyValue
 33587  3393                     _PWM6_LoadDutyValue:	
 33588                           
 33589                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 33590                           
 33591                           ;incstack = 0
 33592                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 33593  3393  0872               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 33594  3394  00F4               	movwf	??_PWM6_LoadDutyValue+1
 33595  3395  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 33596  3396  00F3               	movwf	??_PWM6_LoadDutyValue
 33597  3397  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 33598  3398  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 33599  3399  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 33600  339A  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 33601  339B  0873               	movf	??_PWM6_LoadDutyValue,w
 33602  339C  002C               	movlb	12	; select bank12
 33603  339D  009B               	movwf	27	;volatile
 33604                           
 33605                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 33606  339E  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 33607  339F  3903               	andlw	3
 33608  33A0  00F3               	movwf	??_PWM6_LoadDutyValue
 33609  33A1  3005               	movlw	5
 33610  33A2                     u4315:	
 33611  33A2  35F3               	lslf	??_PWM6_LoadDutyValue,f
 33612  33A3  3EFF               	addlw	-1
 33613  33A4  1D03               	skipz
 33614  33A5  2BA2               	goto	u4315
 33615  33A6  3573               	lslf	??_PWM6_LoadDutyValue,w
 33616  33A7  009A               	movwf	26	;volatile
 33617  33A8  0008               	return
 33618  33A9                     __end_of_PWM6_LoadDutyValue:	
 33619                           
 33620                           	psect	text100
 33621  337D                     __ptext100:	
 33622 ;; *************** function _PWM5_LoadDutyValue *****************
 33623 ;; Defined at:
 33624 ;;		line 74 in file "mcc_generated_files/pwm5.c"
 33625 ;; Parameters:    Size  Location     Type
 33626 ;;  dutyValue       2    1[COMMON] unsigned int 
 33627 ;; Auto vars:     Size  Location     Type
 33628 ;;		None
 33629 ;; Return value:  Size  Location     Type
 33630 ;;                  1    wreg      void 
 33631 ;; Registers used:
 33632 ;;		wreg, status,2, status,0
 33633 ;; Tracked objects:
 33634 ;;		On entry : 0/0
 33635 ;;		On exit  : 0/0
 33636 ;;		Unchanged: 0/0
 33637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33638 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33640 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33641 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33642 ;;Total ram usage:        4 bytes
 33643 ;; Hardware stack levels used:    1
 33644 ;; Hardware stack levels required when called:    4
 33645 ;; This function calls:
 33646 ;;		Nothing
 33647 ;; This function is called by:
 33648 ;;		_nullifyBadge_platformInit
 33649 ;;		_fadeDisplay_Init
 33650 ;;		_nullifyBadge_segDisplaySetBrightness
 33651 ;; This function uses a non-reentrant model
 33652 ;;
 33653                           
 33654                           
 33655                           ;psect for function _PWM5_LoadDutyValue
 33656  337D                     _PWM5_LoadDutyValue:	
 33657                           
 33658                           ;pwm5.c: 77: PWM5DCH = (dutyValue & 0x03FC)>>2;
 33659                           
 33660                           ;incstack = 0
 33661                           ; Regs used in _PWM5_LoadDutyValue: [wreg+status,2+status,0]
 33662  337D  0872               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 33663  337E  00F4               	movwf	??_PWM5_LoadDutyValue+1
 33664  337F  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 33665  3380  00F3               	movwf	??_PWM5_LoadDutyValue
 33666  3381  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 33667  3382  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 33668  3383  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 33669  3384  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 33670  3385  0873               	movf	??_PWM5_LoadDutyValue,w
 33671  3386  002C               	movlb	12	; select bank12
 33672  3387  0098               	movwf	24	;volatile
 33673                           
 33674                           ;pwm5.c: 80: PWM5DCL = (dutyValue & 0x0003)<<6;
 33675  3388  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 33676  3389  3903               	andlw	3
 33677  338A  00F3               	movwf	??_PWM5_LoadDutyValue
 33678  338B  3005               	movlw	5
 33679  338C                     u4305:	
 33680  338C  35F3               	lslf	??_PWM5_LoadDutyValue,f
 33681  338D  3EFF               	addlw	-1
 33682  338E  1D03               	skipz
 33683  338F  2B8C               	goto	u4305
 33684  3390  3573               	lslf	??_PWM5_LoadDutyValue,w
 33685  3391  0097               	movwf	23	;volatile
 33686  3392  0008               	return
 33687  3393                     __end_of_PWM5_LoadDutyValue:	
 33688                           
 33689                           	psect	text101
 33690  3367                     __ptext101:	
 33691 ;; *************** function _PWM2_LoadDutyValue *****************
 33692 ;; Defined at:
 33693 ;;		line 80 in file "mcc_generated_files/pwm2.c"
 33694 ;; Parameters:    Size  Location     Type
 33695 ;;  dutyValue       2    1[COMMON] unsigned int 
 33696 ;; Auto vars:     Size  Location     Type
 33697 ;;		None
 33698 ;; Return value:  Size  Location     Type
 33699 ;;                  1    wreg      void 
 33700 ;; Registers used:
 33701 ;;		wreg, status,2
 33702 ;; Tracked objects:
 33703 ;;		On entry : 0/0
 33704 ;;		On exit  : 0/0
 33705 ;;		Unchanged: 0/0
 33706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33707 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33710 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33711 ;;Total ram usage:        2 bytes
 33712 ;; Hardware stack levels used:    1
 33713 ;; Hardware stack levels required when called:    4
 33714 ;; This function calls:
 33715 ;;		Nothing
 33716 ;; This function is called by:
 33717 ;;		_nullifyBadge_platformInit
 33718 ;; This function uses a non-reentrant model
 33719 ;;
 33720                           
 33721                           
 33722                           ;psect for function _PWM2_LoadDutyValue
 33723  3367                     _PWM2_LoadDutyValue:	
 33724                           
 33725                           ;pwm2.c: 82: dutyValue &= 0x03FF;
 33726                           
 33727                           ;incstack = 0
 33728                           ; Regs used in _PWM2_LoadDutyValue: [wreg+status,2]
 33729  3367  30FF               	movlw	255
 33730  3368  05F1               	andwf	PWM2_LoadDutyValue@dutyValue,f
 33731  3369  3003               	movlw	3
 33732  336A  05F2               	andwf	PWM2_LoadDutyValue@dutyValue+1,f
 33733                           
 33734                           ;pwm2.c: 85: if(CCP2CONbits.CCP2FMT)
 33735  336B  0025               	movlb	5	; select bank5
 33736  336C  1E17               	btfss	23,4	;volatile
 33737  336D  2B78               	goto	l7549
 33738                           
 33739                           ;pwm2.c: 86: {
 33740                           ;pwm2.c: 87: dutyValue <<= 6;
 33741  336E  3006               	movlw	6
 33742  336F                     u4355:	
 33743  336F  35F1               	lslf	PWM2_LoadDutyValue@dutyValue,f
 33744  3370  0DF2               	rlf	PWM2_LoadDutyValue@dutyValue+1,f
 33745  3371  0B89               	decfsz	9,f
 33746  3372  2B6F               	goto	u4355
 33747                           
 33748                           ;pwm2.c: 88: CCPR2H = dutyValue >> 8;
 33749  3373  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 33750  3374  0096               	movwf	22	;volatile
 33751                           
 33752                           ;pwm2.c: 89: CCPR2L = dutyValue;
 33753  3375  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 33754  3376  0095               	movwf	21	;volatile
 33755                           
 33756                           ;pwm2.c: 90: }
 33757  3377  0008               	return
 33758  3378                     l7549:	
 33759                           
 33760                           ;pwm2.c: 91: else
 33761                           ;pwm2.c: 92: {
 33762                           ;pwm2.c: 93: CCPR2H = dutyValue >> 8;
 33763  3378  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 33764  3379  0096               	movwf	22	;volatile
 33765                           
 33766                           ;pwm2.c: 94: CCPR2L = dutyValue;
 33767  337A  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 33768  337B  0095               	movwf	21	;volatile
 33769  337C  0008               	return
 33770  337D                     __end_of_PWM2_LoadDutyValue:	
 33771                           
 33772                           	psect	text102
 33773  3351                     __ptext102:	
 33774 ;; *************** function _PWM1_LoadDutyValue *****************
 33775 ;; Defined at:
 33776 ;;		line 80 in file "mcc_generated_files/pwm1.c"
 33777 ;; Parameters:    Size  Location     Type
 33778 ;;  dutyValue       2    1[COMMON] unsigned int 
 33779 ;; Auto vars:     Size  Location     Type
 33780 ;;		None
 33781 ;; Return value:  Size  Location     Type
 33782 ;;                  1    wreg      void 
 33783 ;; Registers used:
 33784 ;;		wreg, status,2
 33785 ;; Tracked objects:
 33786 ;;		On entry : 0/0
 33787 ;;		On exit  : 0/0
 33788 ;;		Unchanged: 0/0
 33789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33790 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33793 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33794 ;;Total ram usage:        2 bytes
 33795 ;; Hardware stack levels used:    1
 33796 ;; Hardware stack levels required when called:    4
 33797 ;; This function calls:
 33798 ;;		Nothing
 33799 ;; This function is called by:
 33800 ;;		_nullifyBadge_platformInit
 33801 ;; This function uses a non-reentrant model
 33802 ;;
 33803                           
 33804                           
 33805                           ;psect for function _PWM1_LoadDutyValue
 33806  3351                     _PWM1_LoadDutyValue:	
 33807                           
 33808                           ;pwm1.c: 82: dutyValue &= 0x03FF;
 33809                           
 33810                           ;incstack = 0
 33811                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2]
 33812  3351  30FF               	movlw	255
 33813  3352  05F1               	andwf	PWM1_LoadDutyValue@dutyValue,f
 33814  3353  3003               	movlw	3
 33815  3354  05F2               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
 33816                           
 33817                           ;pwm1.c: 85: if(CCP1CONbits.CCP1FMT)
 33818  3355  0025               	movlb	5	; select bank5
 33819  3356  1E13               	btfss	19,4	;volatile
 33820  3357  2B62               	goto	l7533
 33821                           
 33822                           ;pwm1.c: 86: {
 33823                           ;pwm1.c: 87: dutyValue <<= 6;
 33824  3358  3006               	movlw	6
 33825  3359                     u4335:	
 33826  3359  35F1               	lslf	PWM1_LoadDutyValue@dutyValue,f
 33827  335A  0DF2               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
 33828  335B  0B89               	decfsz	9,f
 33829  335C  2B59               	goto	u4335
 33830                           
 33831                           ;pwm1.c: 88: CCPR1H = dutyValue >> 8;
 33832  335D  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 33833  335E  0092               	movwf	18	;volatile
 33834                           
 33835                           ;pwm1.c: 89: CCPR1L = dutyValue;
 33836  335F  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 33837  3360  0091               	movwf	17	;volatile
 33838                           
 33839                           ;pwm1.c: 90: }
 33840  3361  0008               	return
 33841  3362                     l7533:	
 33842                           
 33843                           ;pwm1.c: 91: else
 33844                           ;pwm1.c: 92: {
 33845                           ;pwm1.c: 93: CCPR1H = dutyValue >> 8;
 33846  3362  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 33847  3363  0092               	movwf	18	;volatile
 33848                           
 33849                           ;pwm1.c: 94: CCPR1L = dutyValue;
 33850  3364  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 33851  3365  0091               	movwf	17	;volatile
 33852  3366  0008               	return
 33853  3367                     __end_of_PWM1_LoadDutyValue:	
 33854                           
 33855                           	psect	intentry
 33856  0004                     __pintentry:	
 33857 ;; *************** function _INTERRUPT_InterruptManager *****************
 33858 ;; Defined at:
 33859 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 33860 ;; Parameters:    Size  Location     Type
 33861 ;;		None
 33862 ;; Auto vars:     Size  Location     Type
 33863 ;;		None
 33864 ;; Return value:  Size  Location     Type
 33865 ;;                  1    wreg      void 
 33866 ;; Registers used:
 33867 ;;		wreg, status,2, status,0, pclath, cstack
 33868 ;; Tracked objects:
 33869 ;;		On entry : 0/0
 33870 ;;		On exit  : 0/0
 33871 ;;		Unchanged: 0/0
 33872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33876 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33877 ;;Total ram usage:        1 bytes
 33878 ;; Hardware stack levels used:    1
 33879 ;; Hardware stack levels required when called:    3
 33880 ;; This function calls:
 33881 ;;		_TMR0_ISR
 33882 ;; This function is called by:
 33883 ;;		Interrupt level 1
 33884 ;; This function uses a non-reentrant model
 33885 ;;
 33886                           
 33887  0004                     _INTERRUPT_InterruptManager:	
 33888                           
 33889                           ;incstack = 0
 33890  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 33891                           
 33892                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 33893  0005  3180               	pagesel	$
 33894  0006  0020               	movlb	0	; select bank0
 33895  0007  087F               	movf	127,w
 33896  0008  00F0               	movwf	??_INTERRUPT_InterruptManager
 33897                           
 33898                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 33899  0009  0021               	movlb	1	; select bank1
 33900  000A  1E90               	btfss	16,5	;volatile
 33901  000B  2811               	goto	i1l363
 33902  000C  0020               	movlb	0	; select bank0
 33903  000D  1E90               	btfss	16,5	;volatile
 33904  000E  2811               	goto	i1l363
 33905                           
 33906                           ;interrupt_manager.c: 55: {
 33907                           ;interrupt_manager.c: 56: TMR0_ISR();
 33908  000F  31B2  228F         	fcall	_TMR0_ISR
 33909  0011                     i1l363:	
 33910                           ;interrupt_manager.c: 58: else
 33911                           ;interrupt_manager.c: 59: {
 33912                           
 33913                           ;interrupt_manager.c: 57: }
 33914                           
 33915  0011  0870               	movf	??_INTERRUPT_InterruptManager,w
 33916  0012  0020               	movlb	0	; select bank0
 33917  0013  00FF               	movwf	127
 33918  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 33919  0015  0009               	retfie
 33920  0016                     __end_of_INTERRUPT_InterruptManager:	
 33921                           
 33922                           	psect	text104
 33923  328F                     __ptext104:	
 33924 ;; *************** function _TMR0_ISR *****************
 33925 ;; Defined at:
 33926 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 33927 ;; Parameters:    Size  Location     Type
 33928 ;;		None
 33929 ;; Auto vars:     Size  Location     Type
 33930 ;;		None
 33931 ;; Return value:  Size  Location     Type
 33932 ;;                  1    wreg      void 
 33933 ;; Registers used:
 33934 ;;		wreg, status,2, status,0, pclath, cstack
 33935 ;; Tracked objects:
 33936 ;;		On entry : 0/0
 33937 ;;		On exit  : 0/0
 33938 ;;		Unchanged: 0/0
 33939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33944 ;;Total ram usage:        0 bytes
 33945 ;; Hardware stack levels used:    1
 33946 ;; Hardware stack levels required when called:    2
 33947 ;; This function calls:
 33948 ;;		_TMR0_CallBack
 33949 ;; This function is called by:
 33950 ;;		_INTERRUPT_InterruptManager
 33951 ;; This function uses a non-reentrant model
 33952 ;;
 33953                           
 33954                           
 33955                           ;psect for function _TMR0_ISR
 33956  328F                     _TMR0_ISR:	
 33957                           
 33958                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
 33959                           
 33960                           ;incstack = 0
 33961                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 33962  328F  0020               	movlb	0	; select bank0
 33963  3290  1290               	bcf	16,5	;volatile
 33964                           
 33965                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
 33966  3291  0021               	movlb	1	; select bank1
 33967  3292  0841               	movf	(_timer0ReloadVal16bit+1)^(0+128),w	;volatile
 33968  3293  0020               	movlb	0	; select bank0
 33969  3294  0096               	movwf	22	;volatile
 33970                           
 33971                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
 33972  3295  0021               	movlb	1	; select bank1
 33973  3296  0840               	movf	_timer0ReloadVal16bit^(0+128),w	;volatile
 33974  3297  0020               	movlb	0	; select bank0
 33975  3298  0095               	movwf	21	;volatile
 33976                           
 33977                           ;tmr0.c: 146: TMR0_CallBack();
 33978  3299  31B2  2228         	fcall	_TMR0_CallBack
 33979  329B  0008               	return
 33980  329C                     __end_of_TMR0_ISR:	
 33981                           
 33982                           	psect	text105
 33983  3228                     __ptext105:	
 33984 ;; *************** function _TMR0_CallBack *****************
 33985 ;; Defined at:
 33986 ;;		line 151 in file "mcc_generated_files/tmr0.c"
 33987 ;; Parameters:    Size  Location     Type
 33988 ;;		None
 33989 ;; Auto vars:     Size  Location     Type
 33990 ;;		None
 33991 ;; Return value:  Size  Location     Type
 33992 ;;                  1    wreg      void 
 33993 ;; Registers used:
 33994 ;;		wreg, status,2, status,0, pclath, cstack
 33995 ;; Tracked objects:
 33996 ;;		On entry : 0/0
 33997 ;;		On exit  : 0/0
 33998 ;;		Unchanged: 0/0
 33999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 34000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 34001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 34002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 34003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 34004 ;;Total ram usage:        0 bytes
 34005 ;; Hardware stack levels used:    1
 34006 ;; Hardware stack levels required when called:    1
 34007 ;; This function calls:
 34008 ;;		Absolute function
 34009 ;;		_TMR0_DefaultInterruptHandler
 34010 ;; This function is called by:
 34011 ;;		_TMR0_ISR
 34012 ;; This function uses a non-reentrant model
 34013 ;;
 34014                           
 34015                           
 34016                           ;psect for function _TMR0_CallBack
 34017  3228                     _TMR0_CallBack:	
 34018                           
 34019                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
 34020                           
 34021                           ;incstack = 0
 34022                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 34023  3228  0021               	movlb	1	; select bank1
 34024  3229  083E               	movf	_TMR0_InterruptHandler^(0+128),w
 34025  322A  043F               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 34026  322B  1903               	btfsc	3,2
 34027  322C  0008               	return
 34028                           
 34029                           ;tmr0.c: 156: {
 34030                           ;tmr0.c: 157: TMR0_InterruptHandler();
 34031  322D  083F               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 34032  322E  008A               	movwf	10
 34033  322F  083E               	movf	_TMR0_InterruptHandler^(0+128),w
 34034  3230  000A               	callw
 34035  3231  31B2               	pagesel	$
 34036  3232  0008               	return
 34037  3233                     __end_of_TMR0_CallBack:	
 34038                           
 34039                           	psect	text106
 34040  2200                     __ptext106:	
 34041 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 34042 ;; Defined at:
 34043 ;;		line 165 in file "mcc_generated_files/tmr0.c"
 34044 ;; Parameters:    Size  Location     Type
 34045 ;;		None
 34046 ;; Auto vars:     Size  Location     Type
 34047 ;;		None
 34048 ;; Return value:  Size  Location     Type
 34049 ;;                  1    wreg      void 
 34050 ;; Registers used:
 34051 ;;		None
 34052 ;; Tracked objects:
 34053 ;;		On entry : 0/0
 34054 ;;		On exit  : 0/0
 34055 ;;		Unchanged: 0/0
 34056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 34057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 34058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 34059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 34060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 34061 ;;Total ram usage:        0 bytes
 34062 ;; Hardware stack levels used:    1
 34063 ;; This function calls:
 34064 ;;		Nothing
 34065 ;; This function is called by:
 34066 ;;		_TMR0_Initialize
 34067 ;;		_TMR0_CallBack
 34068 ;; This function uses a non-reentrant model
 34069 ;;
 34070                           
 34071                           
 34072                           ;psect for function _TMR0_DefaultInterruptHandler
 34073  2200                     _TMR0_DefaultInterruptHandler:	
 34074                           
 34075                           ;incstack = 0
 34076                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 34077  2200  0008               	return
 34078  2201                     __end_of_TMR0_DefaultInterruptHandler:	
 34079  007E                     btemp	set	126	;btemp
 34080  007E                     int$flags	set	126
 34081  007E                     wtemp0	set	126


Data Sizes:
    Strings     1164
    Constant    522
    Data        666
    BSS         307
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     79      79
    BANK1            80      8      62
    BANK2            80      0      77
    BANK3            80      0      72
    BANK4            80      0      72
    BANK5            80      0      77
    BANK6            80      0      73
    BANK7            80      0      76
    BANK8            80      0      56
    BANK9            80      0      61
    BANK10           80      0      58
    BANK11           80      0      40
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           16      0       0
    BANK23            0      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    menu_run_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    schedulerInst.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    schedulerInst.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    schedulerInst.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    schedulerInst.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerExecute$4110	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    matrix_secret_check@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_check@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_secret_check@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$3$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$2$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$4$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_85(CODE[23]), STR_84(CODE[27]), STR_83(CODE[46]), matrix_secret_inputs.inputs(BANK5[20]), 
		 -> matrix_secret_inputs(BANK5[25]), STR_82(CODE[8]), STR_81(CODE[7]), STR_80(CODE[8]), 
		 -> STR_79(CODE[6]), STR_78(CODE[10]), STR_77(CODE[5]), STR_76(CODE[7]), 
		 -> STR_75(CODE[9]), STR_74(CODE[7]), STR_73(CODE[7]), Slot_Wheel(BANK6[55]), 
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_45(CODE[5]), STR_44(CODE[5]), 
		 -> STR_43(CODE[11]), STR_42(CODE[13]), locked_secret_inputs.inputs(BANK4[20]), locked_secret_inputs(BANK4[25]), 
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), 
		 -> secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), 
		 -> flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_85(CODE[23]), STR_84(CODE[27]), STR_83(CODE[46]), matrix_secret_inputs.inputs(BANK5[20]), 
		 -> matrix_secret_inputs(BANK5[25]), STR_82(CODE[8]), STR_81(CODE[7]), STR_80(CODE[8]), 
		 -> STR_79(CODE[6]), STR_78(CODE[10]), STR_77(CODE[5]), STR_76(CODE[7]), 
		 -> STR_75(CODE[9]), STR_74(CODE[7]), STR_73(CODE[7]), Slot_Wheel(BANK6[55]), 
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_45(CODE[5]), STR_44(CODE[5]), 
		 -> STR_43(CODE[11]), STR_42(CODE[13]), locked_secret_inputs.inputs(BANK4[20]), locked_secret_inputs(BANK4[25]), 
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), 
		 -> secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), 
		 -> flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_86(CODE[7]), sprintf@c(BANK0[1]), STR_66(CODE[9]), STR_65(CODE[13]), 
		 -> STR_64(CODE[12]), STR_63(CODE[8]), STR_62(CODE[11]), STR_61(CODE[11]), 
		 -> STR_60(CODE[9]), STR_59(CODE[8]), STR_58(CODE[8]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_72(CODE[3]), STR_71(CODE[9]), STR_70(CODE[9]), STR_69(CODE[9]), 
		 -> STR_68(CODE[9]), STR_67(CODE[9]), STR_41(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 41
		 -> flashy_Main@hit_counter(BANK0[6]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), 
		 -> slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    matrix_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_Main@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_display_option@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> matrix_secret_inputs.inputs(BANK5[20]), matrix_secret_inputs(BANK5[25]), 

    matrix_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_Init@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S3174matrix_secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    matrix_secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    matrix_option	PTR unsigned char [10] size(2) Largest target is 10
		 -> STR_82(CODE[8]), STR_81(CODE[7]), STR_80(CODE[8]), STR_79(CODE[6]), 
		 -> STR_78(CODE[10]), STR_77(CODE[5]), STR_76(CODE[7]), STR_75(CODE[9]), 
		 -> STR_74(CODE[7]), STR_73(CODE[7]), 

    slot_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Main@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Finished_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Running_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Running_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Running_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Setup@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Setup@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Setup@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2374t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Init@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    Shot_Options_Long	PTR unsigned char [9] size(2) Largest target is 13
		 -> STR_66(CODE[9]), STR_65(CODE[13]), STR_64(CODE[12]), STR_63(CODE[8]), 
		 -> STR_62(CODE[11]), STR_61(CODE[11]), STR_60(CODE[9]), STR_59(CODE[8]), 
		 -> STR_58(CODE[8]), 

    Shot_Options	PTR unsigned char [9] size(2) Largest target is 5
		 -> STR_57(CODE[5]), STR_56(CODE[5]), STR_55(CODE[5]), STR_54(CODE[5]), 
		 -> STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), STR_50(CODE[5]), 
		 -> STR_49(CODE[5]), 

    secret_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Main@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), 

    secret_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Init@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2883secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    locked_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Main@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> locked_secret_inputs.inputs(BANK4[20]), locked_secret_inputs(BANK4[25]), 

    locked_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Init@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2734locked_secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> locked_secret_value(BANK2[2]), 

    locked_secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> locked_secret_value(BANK2[2]), 

    flashy_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Main@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_display_option@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Init@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_option	PTR unsigned char [29] size(2) Largest target is 120
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), 

    FLASHY_TEXT_SECRET_TEST	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_10(CODE[18]), 

    FLASHY_TEXT	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_9(CODE[5]), 

    menu_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_run_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_display_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_taskData	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Init@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_option	PTR unsigned char [5] size(2) Largest target is 10
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), 
		 -> STR_4(CODE[5]), 

    displayL2_ClrUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_SetUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_EraseSegDisplay@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_ForceUpdate@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutStr@str	PTR unsigned char  size(2) Largest target is 120
		 -> STR_48(CODE[5]), STR_47(CODE[5]), STR_46(CODE[5]), flashy_Main@hit_counter(BANK0[6]), 
		 -> STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), 
		 -> STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), 
		 -> STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), 
		 -> STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), 
		 -> STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), 
		 -> STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), 
		 -> STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), 
		 -> STR_12(CODE[9]), STR_11(CODE[5]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    displayL2_PutStr@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutChar@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_Initialize@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_Update@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetUserLed@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetSegChar@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    sp__memset	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    displayL1_Initialize@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRelease@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsClr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsSet@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayErase@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayPutStr@str	PTR unsigned char  size(2) Largest target is 120
		 -> STR_48(CODE[5]), STR_47(CODE[5]), STR_46(CODE[5]), flashy_Main@hit_counter(BANK0[6]), 
		 -> STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), 
		 -> STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), 
		 -> STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), 
		 -> STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), 
		 -> STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), 
		 -> STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), 
		 -> STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), 
		 -> STR_12(CODE[9]), STR_11(CODE[5]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), marquee@display_string(BANK0[5]), 
		 -> marquee_speedy@display_string(BANK0[5]), 

    nullifyBadge_segDisplayPutStr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayForceUpdate@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_platformInit@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    marquee@string	PTR unsigned char  size(2) Largest target is 120
		 -> STR_45(CODE[5]), STR_44(CODE[5]), STR_43(CODE[11]), STR_42(CODE[13]), 
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), 
		 -> secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), 
		 -> flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    marquee_speedy@string	PTR unsigned char  size(2) Largest target is 120
		 -> STR_85(CODE[23]), STR_84(CODE[27]), STR_83(CODE[46]), STR_82(CODE[8]), 
		 -> STR_81(CODE[7]), STR_80(CODE[8]), STR_79(CODE[6]), STR_78(CODE[10]), 
		 -> STR_77(CODE[5]), STR_76(CODE[7]), STR_75(CODE[9]), STR_74(CODE[7]), 
		 -> STR_73(CODE[7]), STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), 
		 -> STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), 
		 -> STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), 
		 -> STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), 
		 -> STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), 
		 -> STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), 
		 -> STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), 
		 -> STR_12(CODE[9]), STR_11(CODE[5]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), 
		 -> locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), 
		 -> NULL(NULL[0]), 

    schedulerInst.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    S1198t_matrix_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1173t_secret_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1164t_locked_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1067t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1136t_menu_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1118t_flashy_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    matrix_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    matrix_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    matrix_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    secret_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    secret_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    secret_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    locked_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    locked_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    locked_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    slot_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    slot_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    slot_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    menu_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    menu_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    menu_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    flashy_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    flashy_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    flashy_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    fadeDisplay_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    S1013t_fadeDisplay_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    schedulerExecute@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerExecute@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    schedulerExecute@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskRemove@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskRemove@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskRemove@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskRemove@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRemove@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), 

    scheduler_TaskAdd@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskInit@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskInit@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskInit@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskInit@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskInit@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), 

    S923t_scheduler$tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    S902t_schedulerTask$taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskRun@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    S902t_schedulerTask$taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskRun@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    S902t_schedulerTask$taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskRun@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    S902t_schedulerTask$taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    SPI1_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 10
		 -> displayL1_Update@tmpRxBuf(BANK0[10]), 

    SPI1_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 


Critical Paths under _main in COMMON

    _schedulerExecute->_TMR0_Read16bitTimer
    _scheduler_TaskRun->_TMR0_Read16bitTimer
    _secret_check->_strlen
    _matrix_secret_check->_strlen
    _slot_Setup->___lwmod
    _locked_secret_check->_strlen
    _nullifyBadge_userLedsClr->_displayL2_ClrUserLeds
    _displayL2_ClrUserLeds->_displayL1_Update
    _sprintf->___lwmod
    _led_rand->___almod
    _rand->___lmul
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _displayL1_SetSegChar->_displayCharReverse
    _nullifyBadge_segDisplayForceUpdate->_displayL2_ForceUpdate
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->___lwdiv
    _displayL2_Initialize->_displayL1_Initialize
    _displayL1_Initialize->_displayL1_Update
    _displayL1_Update->_SPI1_Exchange8bitBuffer
    _SPI1_Exchange8bitBuffer->_SPI1_Exchange8bit
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_schedulerExecute
    _scheduler_TaskAdd->_matrix_Init
    _slot_Init->_nullifyBadge_segDisplayErase
    _secret_Init->_nullifyBadge_segDisplayErase
    _menu_Init->_nullifyBadge_segDisplayErase
    _matrix_Init->_nullifyBadge_segDisplayErase
    _locked_Init->_nullifyBadge_segDisplayErase
    _flashy_Init->_nullifyBadge_segDisplayErase
    _schedulerExecute->_scheduler_TaskRun
    _scheduler_TaskRun->_slot_Main
    _slot_Running_Animation->_led_circle
    _slot_Finished_Animation->_led_rand
    _menu_Main->_menu_display_option
    _menu_run_option->_menu_clear
    _menu_clear->_nullifyBadge_segDisplayErase
    _menu_display_option->_marquee
    _matrix_display_option->_marquee_speedy
    _slot_Setup->___lwmod
    _locked_clear->_nullifyBadge_segDisplayErase
    _displayL2_ClrUserLeds->_displayL1_Update
    _nullifyBadge_segDisplayErase->_displayL2_EraseSegDisplay
    _displayL2_EraseSegDisplay->_displayL2_PutStr
    _sprintf->___lwmod
    _let_alternate->_nullifyBadge_userLedsSet
    _led_roundabout->_nullifyBadge_userLedsSet
    _led_rand->___almod
    _rand->___lmul
    ___almod->_rand
    _led_curtain->_nullifyBadge_userLedsSet
    _led_circle->_nullifyBadge_userLedsSet
    _led_Parody->_nullifyBadge_userLedsSet
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _flashy_display_option->_marquee
    _flashy_display_option->_marquee_speedy
    _marquee_speedy->_nullifyBadge_segDisplayPutStr
    _marquee->_nullifyBadge_segDisplayPutStr
    _nullifyBadge_segDisplayPutStr->_displayL2_PutStr
    _displayL2_PutStr->_displayL2_PutChar
    _displayL2_PutChar->_displayL1_SetSegChar
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->_rand
    _nullifyBadge_platformInit->_displayL2_Initialize
    _displayL1_Initialize->_displayL1_Update

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_schedulerExecute

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  399826
                                             78 BANK0      1     1      0
          _nullifyBadge_platformInit
                   _schedulerExecute
                     _scheduler_Init
                  _scheduler_TaskAdd
                 _scheduler_TaskInit
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskInit                                   1     1      0     352
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskAdd                                    9     8      1   51944
                                             31 BANK0      9     8      1
                   Absolute function *
                        _flashy_Init *
                        _locked_Init *
                        _matrix_Init *
                          _menu_Init *
                        _secret_Init *
                          _slot_Init *
 ---------------------------------------------------------------------------------
 (2) _slot_Init                                            4     2      2   14563
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (2) _secret_Init                                          4     2      2    7129
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _menu_Init                                            4     2      2    7129
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _matrix_Init                                          6     4      2    7411
                                             25 BANK0      6     4      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _locked_Init                                          4     2      2    7194
                                             25 BANK0      4     2      2
                   _locked_lock_leds
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _flashy_Init                                          4     2      2    7284
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsRegister                        1     1      0     242
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayRegister                      1     1      0     253
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_Init                                       3     3      0     145
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _schedulerExecute                                    14    14      0  341988
                                             72 BANK0      6     6      0
                                              0 BANK1      8     8      0
                _TMR0_Read16bitTimer
                  _scheduler_TaskRun
 ---------------------------------------------------------------------------------
 (2) _scheduler_TaskRun                                    1     1      0  341432
                                             71 BANK0      1     1      0
                   Absolute function *
                _TMR0_Read16bitTimer
                        _flashy_Main *
                        _locked_Main *
                        _matrix_Main *
                          _menu_Main *
                        _secret_Main *
                          _slot_Main *
 ---------------------------------------------------------------------------------
 (3) _slot_Main                                           21    19      2   73336
                                             50 BANK0     21    19      2
                            ___lwmod
                            _marquee
                     _marquee_speedy
                             _memset
            _nullifyBadge_buttonsGet
                               _rand
            _slot_Finished_Animation
             _slot_Running_Animation
                         _slot_Setup
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _slot_Running_Animation                               6     4      2    3731
                                             18 BANK0      6     4      2
                         _led_circle
 ---------------------------------------------------------------------------------
 (4) _slot_Finished_Animation                              6     4      2    4417
                                             29 BANK0      6     4      2
                           _led_rand
 ---------------------------------------------------------------------------------
 (3) _secret_Main                                          8     6      2    4833
                                             50 BANK0      8     6      2
            _nullifyBadge_buttonsGet
                       _secret_check
                       _secret_clear
 ---------------------------------------------------------------------------------
 (4) _secret_clear                                         2     0      2     286
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (4) _secret_check                                        19    16      3    2899
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _menu_Main                                            7     5      2   52406
                                             50 BANK0      7     5      2
                         _menu_clear
                _menu_display_option
                    _menu_run_option
            _nullifyBadge_buttonsGet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (4) _menu_run_option                                      2     0      2    7012
                                             27 BANK0      2     0      2
                         _menu_clear
 ---------------------------------------------------------------------------------
 (5) _menu_clear                                           2     0      2    6838
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (4) _menu_display_option                                  6     4      2   29641
                                             44 BANK0      6     4      2
                            ___lwmod
                            _marquee
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (3) _matrix_Main                                         10     8      2   42934
                                             50 BANK0     10     8      2
                         _led_Parody
                        _led_curtain
              _matrix_display_option
                _matrix_secret_check
            _nullifyBadge_buttonsGet
 ---------------------------------------------------------------------------------
 (4) _matrix_secret_check                                 19    16      3    3495
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _matrix_display_option                                4     2      2   15554
                                             44 BANK0      4     2      2
                     _marquee_speedy
 ---------------------------------------------------------------------------------
 (3) _locked_Main                                          7     5      2   47678
                                             50 BANK0      7     5      2
                            ___lwmod
                       _locked_clear
               _locked_get_lock_leds
             _locked_get_unlock_leds
                   _locked_lock_leds
                _locked_secret_check
                 _locked_unlock_leds
                            _marquee
            _nullifyBadge_buttonsGet
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (3) _slot_Setup                                           7     5      2    7403
                                             15 BANK0      7     5      2
                            ___lwmod
                             _memset
                               _rand
 ---------------------------------------------------------------------------------
 (4) _locked_unlock_leds                                   2     2      0       0
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _locked_secret_check                                 19    16      3    2452
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1      76
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _locked_lock_leds                                     4     4      0      34
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _locked_get_unlock_leds                               4     2      2      34
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _locked_get_lock_leds                                 8     6      2      68
                                              1 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (4) _locked_clear                                         2     0      2    6588
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsClr                             1     1      0    2094
                                             11 BANK0      1     1      0
              _displayL2_ClrUserLeds
 ---------------------------------------------------------------------------------
 (4) _displayL2_ClrUserLeds                                1     1      0    1559
                                             11 COMMON     1     1      0
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayErase                         1     1      0    4196
                                             24 BANK0      1     1      0
          _displayL2_EraseSegDisplay
 ---------------------------------------------------------------------------------
 (4) _displayL2_EraseSegDisplay                            1     1      0    3589
                                             23 BANK0      1     1      0
                   _displayL1_Update
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (3) _flashy_Main                                         14    12      2  120014
                                             50 BANK0     14    12      2
              _flashy_display_option
                         _led_Parody
                         _led_circle
                        _led_curtain
                           _led_rand
                     _led_roundabout
                      _let_alternate
                            _marquee
            _nullifyBadge_buttonsGet
                 _nullifyBadge_irGet
               _nullifyBadge_irTxClr
          _nullifyBadge_irTxRegister
           _nullifyBadge_irTxRelease
               _nullifyBadge_irTxSet
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             32    20     12   16383
                                             15 BANK0     28    16     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    7304
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxSet                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRelease                             2     2      0      67
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRegister                            1     1      0      98
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxClr                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irGet                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_buttonsGet                              3     3      0      46
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _let_alternate                                        2     0      2    3314
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_roundabout                                       8     6      2    8722
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_rand                                            10    10      0    4190
                                             19 BANK0     10    10      0
                            ___almod
           _nullifyBadge_userLedsSet
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 7     5      2     316
                                              4 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     316
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) ___almod                                             11     3      8     613
                                              9 COMMON     3     3      0
                                             11 BANK0      8     0      8
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) _led_curtain                                          8     6      2    8812
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_circle                                           2     0      2    3404
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_Parody                                           8     6      2    8874
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (6) _nullifyBadge_userLedsSet                             3     1      2    3193
                                             13 BANK0      3     1      2
              _displayL2_SetUserLeds
 ---------------------------------------------------------------------------------
 (7) _displayL2_SetUserLeds                                3     1      2    1868
                                             11 COMMON     1     1      0
                                             11 BANK0      2     0      2
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (5) _displayL1_SetUserLed                                 4     2      2     376
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _flashy_display_option                                2     0      2   36121
                                             44 BANK0      2     0      2
                            _marquee
                     _marquee_speedy
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
 ---------------------------------------------------------------------------------
 (4) _marquee_speedy                                      18    12      6   15132
                                             26 BANK0     18    12      6
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _marquee                                             18    14      4   15675
                                             26 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2    1480
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayPutStr                        3     1      2    3602
                                             23 BANK0      3     1      2
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (5) _displayL2_PutStr                                     7     5      2    2406
                                             16 BANK0      7     5      2
                  _displayL2_PutChar
 ---------------------------------------------------------------------------------
 (6) _displayL2_PutChar                                    6     5      1    1993
                                             10 BANK0      6     5      1
               _displayL1_SetSegChar
 ---------------------------------------------------------------------------------
 (7) _displayL1_SetSegChar                                10     8      2    1298
                                              0 BANK0     10     8      2
                 _displayCharReverse
 ---------------------------------------------------------------------------------
 (8) _displayCharReverse                                  11     9      2     331
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayForceUpdate                   1     1      0    1507
                                             11 BANK0      1     1      0
              _displayL2_ForceUpdate
 ---------------------------------------------------------------------------------
 (6) _displayL2_ForceUpdate                                1     1      0    1152
                                             11 COMMON     1     1      0
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4    5272
                                              9 COMMON     2     2      0
                                             11 BANK0      4     0      4
                            ___lwdiv (ARG)
                               _rand (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4    1221
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _TMR0_Read16bitTimer                                 11     9      2     102
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (1) _nullifyBadge_platformInit                            1     1      0    5397
                                             12 BANK0      1     1      0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                 _PWM1_LoadDutyValue
                    _PWM2_Initialize
                 _PWM2_LoadDutyValue
                    _PWM5_Initialize
                 _PWM5_LoadDutyValue
                    _PWM6_Initialize
                 _PWM6_LoadDutyValue
                    _SPI1_Initialize
                  _SYSTEM_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
               _displayL2_Initialize
 ---------------------------------------------------------------------------------
 (2) _displayL2_Initialize                                 1     1      0    4257
                                             11 BANK0      1     1      0
               _displayL1_Initialize
                             _memset
 ---------------------------------------------------------------------------------
 (3) _displayL1_Initialize                                 1     1      0    2640
                                             11 COMMON     1     1      0
                   _displayL1_Update
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    1457
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (5) _displayL1_Update                                    13    13      0    1085
                                              9 COMMON     2     2      0
                                              0 BANK0     11    11      0
            _SPI1_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bitBuffer                              7     5      2     759
                                              2 COMMON     7     5      2
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     121
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM5_Initialize
                    _PWM6_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      98
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM6_LoadDutyValue                                   4     2      2     196
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM5_LoadDutyValue                                   4     2      2     272
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_LoadDutyValue                                   2     0      2     166
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM1_LoadDutyValue                                   2     0      2     166
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          1     1      0       0
                                              0 COMMON     1     1      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (13) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (14) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _nullifyBadge_platformInit
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM1_LoadDutyValue
     _PWM2_Initialize
     _PWM2_LoadDutyValue
     _PWM5_Initialize
     _PWM5_LoadDutyValue
     _PWM6_Initialize
     _PWM6_LoadDutyValue
     _SPI1_Initialize
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _PWM1_Initialize
       _PWM2_Initialize
       _PWM5_Initialize
       _PWM6_Initialize
       _SPI1_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
         _TMR0_StartTimer
       _TMR2_Initialize
         _TMR2_StartTimer
       _TMR4_Initialize
         _TMR4_StartTimer
       _WDT_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
     _TMR4_Initialize
       _TMR4_StartTimer
     _displayL2_Initialize
       _displayL1_Initialize
         _displayL1_Update
           _SPI1_Exchange8bitBuffer
             _SPI1_Exchange8bit
         _memset
       _memset
   _schedulerExecute
     _TMR0_Read16bitTimer
     _scheduler_TaskRun
       Absolute function(Fake) *
       _TMR0_Read16bitTimer *
       _flashy_Main *
         _flashy_display_option
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_circle
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_rand
           ___almod
             _rand (ARG)
               ___lmul
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _rand
             ___lmul
         _led_roundabout
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _let_alternate
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_irGet
         _nullifyBadge_irTxClr
         _nullifyBadge_irTxRegister
         _nullifyBadge_irTxRelease
         _nullifyBadge_irTxSet
         _nullifyBadge_segDisplayForceUpdate
           _displayL2_ForceUpdate
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _nullifyBadge_segDisplayPutStr
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
       _locked_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _locked_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _locked_get_lock_leds
         _locked_get_unlock_leds
         _locked_lock_leds
         _locked_secret_check
           ___bmul
           _strlen
         _locked_unlock_leds
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_segDisplayForceUpdate
           _displayL2_ForceUpdate
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _nullifyBadge_segDisplayPutStr
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _matrix_Main *
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _matrix_display_option
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
         _matrix_secret_check
           ___bmul
           _strlen
         _nullifyBadge_buttonsGet
       _menu_Main *
         _menu_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_display_option
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_run_option
           _menu_clear
             _nullifyBadge_segDisplayErase
               _displayL2_EraseSegDisplay
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
                 _displayL2_PutStr
                   _displayL2_PutChar
                     _displayL1_SetSegChar
                       _displayCharReverse
             _nullifyBadge_userLedsClr
               _displayL2_ClrUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _nullifyBadge_buttonsGet
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _secret_Main *
         _nullifyBadge_buttonsGet
         _secret_check
           ___bmul
           _strlen
         _secret_clear
       _slot_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _marquee_speedy
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _memset
         _nullifyBadge_buttonsGet
         _rand
           ___lmul
         _slot_Finished_Animation
           _led_rand
             ___almod
               _rand (ARG)
                 ___lmul
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _rand
               ___lmul
         _slot_Running_Animation
           _led_circle
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
         _strlen
   _scheduler_Init
   _scheduler_TaskAdd
     Absolute function(Fake) *
     _flashy_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _locked_Init *
       _locked_lock_leds
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _matrix_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _menu_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _secret_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _slot_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
       _slot_Setup
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _memset
         _rand
           ___lmul
   _scheduler_TaskInit

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.2%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      48      11       90.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      48      13       90.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     330      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      4D      16       96.2%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      49      18       91.2%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      4C      20       95.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      38      22       70.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      3D      24       76.2%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      3A      26       72.5%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     330      28        0.0%
BANK11              50      0      28      29       50.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              10      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23               0      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24               0      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25               0      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Jul 26 15:28:58 2017

                          _SPI1_Exchange8bit 31F8                                            pc 0002  
           __size_of_slot_Finished_Animation 0027                               ___bmul@product 0073  
                 __end_of_gamma_table_256x1k 2200                           ?_SPI1_Exchange8bit 0070  
                                __CFG_CP$OFF 0000                                           l18 31FD  
                      _displayL2_ClrUserLeds 32AA                          ___wmul@multiplicand 0073  
                   marquee_speedy@multiplier 003E                                 ?_led_curtain 0030  
              nullifyBadge_buttonsGet@retVal 0073                  __size_of_PWM6_LoadDutyValue 0016  
                                __CFG_LVP$ON 0000                   ??_nullifyBadge_userLedsClr 007C  
                 ??_nullifyBadge_userLedsSet 007C                                          l208 3211  
                                        l625 2ED0                                          _GIE 005F  
                             led_Parody@leds 0034              ??_nullifyBadge_segDisplayPutStr 007C  
                                        _PR2 001E                                          _PR4 0416  
                               __CFG_CPD$OFF 0000                               _scheduler_Init 340E  
                             led_Parody@size 0036                          ??_SPI1_Exchange8bit 0071  
                   ??_slot_Running_Animation 0034                           _locked_unlock_leds 333E  
                marquee_speedy@string_length 0048                              _TMR2_Initialize 3214  
             SPI1_Exchange8bitBuffer@dataOut 0073                     displayL1_Update@tmpRxBuf 0020  
                                        wreg 0009                                _slot_taskData 00BC  
               marquee_speedy@display_string 0041                  displayL1_Initialize@display 007B  
        nullifyBadge_userLedsSet@userLedData 002D                              led_curtain@leds 0034  
                    secret_Main@secret_found 0056                              led_curtain@size 0036  
                       _displayL1_Initialize 332B                  slot_Finished_Animation@data 0041  
                                       l1010 2AED                                         l1150 0B61  
                                       l1160 0C49                                         l1155 0BD4  
                                       l1147 0AF4                                         l1253 3525  
                                       l1257 0812                                         l1435 2969  
                                       l1462 0574                                         l1287 1E42  
                                       l1712 33E0                                         l1465 05CD  
                                       l1619 1AB0                                         l1780 2F30  
                                       l9001 2475                                         l8203 35ED  
                                       l8221 375F                                         l9005 2498  
                                       l9101 1C82                                         l8311 3637  
                                       l9111 1CAE                                         l8241 2B66  
                                       l8235 2B43                                         l8243 2B6A  
                                       l8331 3474                                         l8315 3642  
                                       l9211 0949                                         l9115 1CBE  
                                       l9051 1BB6                                         l7533 3362  
                                       l8253 2B72                                         l8245 2B6F  
                                       l8405 28AB                                         l8421 35A8  
                                       l9205 0936                                         l9125 1CEA  
                                       l9061 1BD9                                         l9029 1B4A  
                                       l9053 1BBC                                         l8239 2B52  
                                       l8423 35B4                                         l8431 35C9  
                                       l8343 32FF                                         l9303 0ADF  
                                       l9223 096D                                         l9063 1BDD  
                                       l9055 1BC4                                         l9047 1B90  
                                       l8409 28B4                                         l8329 3468  
                                       l9241 09B7                                         l9233 0992  
                                       l9217 095D                                         l9081 1C34  
                                       l9137 1D1D                                         l8427 35C0  
                                       l8195 35DC                                         l8283 357A  
                                       l8371 2F53                                         l8363 2F3D  
                                       l8531 33DA                                         l9147 0865  
                                       l9083 1C39                                         l9075 1C11  
                                       l7549 3378                                         l8453 2FF4  
                                       l8525 32A8                                         l9501 0E19  
                                       l9309 0AF8                                         l9253 09EB  
                                       l9245 09C4                                         l8471 2259  
                                       l8447 2FCD                                         l8383 2F84  
                                       l8375 2F6B                                         l9511 0E3E  
                                       l9415 0CA5                                         l9335 0B65  
                                       l9247 09D5                                         l9175 08C6  
                                       l9095 1C6D                                         l8369 2F45  
                                       l8713 19E4                                         l8705 19D0  
                                       l8545 330A                                         l9505 0E26  
                                       l9433 0CFB                                         l9329 0B4C  
                                       l9265 0A36                                         l9177 08D5  
                                       l9601 1D61                                         l8379 2F76  
                                       l8731 1A17                                         l8723 1A01  
                                       l8643 2DDD                                         l8651 2AB2  
                                       l9531 0E92                                         l9355 0BBB  
                                       l9283 0A8C                                         l9187 08FA  
                                       l9275 0A5E                                         l8397 288D  
                                       l8477 2280                                         l8573 220C  
                                       l8805 1AF7                                         l8717 19E6  
                                       l8549 3310                                         l8629 2C23  
                                       l9509 0E39                                         l9461 0D77  
                                       l9453 0D4E                                         l9365 0BD8  
                                       l9269 0A4B                                         l9277 0A72  
                                       l9197 091E                                         l9605 1D73  
                                       l8399 2899                                         l8583 2EFD  
                                       l8487 2A0B                                         l8743 1A41  
                                       l8719 19F4                                         l8751 1A68  
                                       l8807 1970                                         l8655 2ABF  
                                       l8647 2AA5                                         l8911 2641  
                                       l9551 0F89                                         l9535 0EE5  
                                       l9463 0D7C                                         l9279 0A7D  
                                       l9703 1F78                                         l9623 1DD3  
                                       l9615 1DB0                                         l8497 33C4  
                                       l8681 2D7B                                         l8761 1A7F  
                                       l8737 1A2B                                         l8729 1A03  
                                       l8809 1B31                                         l8665 2AD9  
                                       l8905 262A                                         l9545 0F70  
                                       l9385 0C30                                         l9537 0F36  
                                       l9713 1FA4                                         l8739 1A36  
                                       l8691 1991                                         l8659 2ACC  
                                       l8907 263B                                         l9563 0FBD  
                                       l9539 0F59                                         l9483 0DD0  
                                       l9395 0C4D                                         l9635 1E20  
                                       l9651 1E6E                                         l9803 279E  
                                       l8677 2D53                                         l8781 1ACC  
                                       l8773 1AA4                                         l8749 1A4A  
                                       l8909 258F                                         l9493 0DF4  
                                       l9725 1FF2                                         l9717 1FCF  
                                       l9637 1E2B                                         l9629 1E03  
                                       l9821 27F5                                         l9733 2651  
                                       l8791 1AE5                                         l8783 1ACF  
                                       l8767 1A85                                         l8871 1016  
                                       l8935 2956                                         l8943 2978  
                                       l9903 05B6                                         l9567 0FC9  
                                       l9663 1EAC                                         l9719 1FDD  
                                       l9655 1E86                                         l9815 27D2  
                                       l9751 26A2                                         l8785 1AD3  
                                       l8697 19A1                                         l8873 10C9  
                                       l8953 356B                                         l9569 0FD6  
                                       l9497 0E06                                         l9489 0DE3  
                                       l9681 1F08                                         l9649 1E5A  
                                       l8867 10B2                                         l9835 011E  
                                       l9667 1EC2                                         l9659 1E91  
                                       l9771 2706                                         l9755 26BA  
                                       l9739 266B                                         l9819 27E3  
                                       l8797 1AF3                                         l8869 10C3  
                                       l8981 24D4                                         l9685 1F1E  
                                       l9677 1EEE                                         l8983 2586  
                                       l9919 0627                                         l9855 0251  
                                       l9695 1F4A                                         l9783 273A  
                                       l9767 26EE                                         l9943 1101  
                                       STR_1 3C08                                         STR_2 3C03  
                                       l8977 256F                                         l9881 041A  
                                       l9953 112E                          ?_locked_unlock_leds 0070  
                                       STR_3 287D                                         STR_4 3BFE  
                                       l8979 2580                                         l9891 04CA  
                                       l9699 1F62                                         l9787 2752  
                                       l9963 116C                                         l9955 1139  
                                       STR_5 3BA3                                         STR_6 3AF7  
                                       l8997 245C                                         l9869 0347  
                                       l9957 1141                                         STR_7 3B66  
                                       STR_8 3B9D                                         l9799 2786  
                                       STR_9 3BF9                                         l9897 050D  
                                       l9993 1201                                         l9899 0583  
                                       l9987 11D0                      __end_of_PWM1_Initialize 323E  
                                       _LATA 010C                                         _LATB 010D  
                                       _LATC 010E                                         u5000 2230  
                                       u4305 338C                                         u4315 33A2  
                                       u3390 2C81                                         u4335 3359  
                                       u4355 336F                                         u5155 2EE1  
                            led_Parody@count 0030                                         u5165 3615  
                                       u5085 33E1                                         u5175 3623  
                                       u5095 33E6                                         u5335 1A9A  
                                       u4705 364A                                         u5505 2595  
                                       u5435 351F                                         u4805 2F61  
                                       u5285 19FA                                         u6405 13A1  
                                       u4815 2F6C                                         u5375 1ABF  
                                       u6415 1436                                         u4745 2931  
                                       u5465 107B                                         u6425 14CB  
                                       u6514 22A4                                         u5475 101C  
                                       u6435 1560                                         u6515 22A2  
                                       u4925 35AB                                         u5565 2539  
                                       u6445 15F5                                         u6365 1153  
                                       u6534 22C3                                         u4855 2890  
                                       u4695 3643                                         u5575 24DA  
                                       u5495 25F4                                         u6455 168A  
                                       u6375 11E2                                         u6535 22C1  
                                       u4945 35BA                                         u4785 2F48  
                                       u6385 1277                                         u4970 2FA4  
                                       u4875 289A                                         u4955 35C1  
                                       u5675 1C2E                                         u6395 130C  
                                       u4885 28A4                                         u6574 2321  
                                       u4895 28AC                                         u6575 231F  
                                       u5945 0D71                                         u6595 2375  
                                       _PLLR 48E0                                         _TMR2 001D  
                                       _TMR4 0415                                         _WPUA 020C  
                                       _WPUB 020D                                         _WPUC 020E  
                               __CFG_WRT$OFF 0000                                __CFG_FCMEN$ON 0000  
                     ?_matrix_display_option 004C                                         _main 0661  
                                       _rand 28FB                              _TMR0_StartTimer 31C1  
                                       fsr0h 0005                                         fsr1h 0007  
                                       indf0 0000                                         fsr0l 0004  
                                       indf1 0001                                         fsr1l 0006  
                                       btemp 007E                                __CFG_BOREN$ON 0000  
                           ??_marquee_speedy 0040                                __CFG_BORV$LOW 0000  
                                       start 0016                    __end_of_SPI1_Exchange8bit 3201  
                        _menu_display_option 2D92                              _PWM5_Initialize 325F  
                        matrix_Main@taskData 0052                          locked_Main@taskData 0052  
               displayL2_ClrUserLeds@display 007B                      displayL2_PutStr@display 0035  
                              __CFG_CSWEN$ON 0000                            ___bmul@multiplier 0074  
                              __CFG_MCLRE$ON 0000                         _displayL1_SetSegChar 373D  
                 __end_of_PWM5_LoadDutyValue 3393                                        S10885 3000  
                        menu_run_option@data 003B                         _displayL2_Initialize 352A  
                       ??_locked_unlock_leds 0071                      __end_of_PWM2_Initialize 3249  
                    __end_of_TMR0_Initialize 3464               ??_TMR0_DefaultInterruptHandler 0070  
             __size_of_OSCILLATOR_Initialize 000A                       __end_of_scheduler_Init 3429  
                       _displayL1_SetUserLed 3319                        marquee@display_string 003F  
              __end_of_OSCILLATOR_Initialize 3214                                        l10023 1296  
                                      l10113 1455                                        l10017 1265  
                                      l10203 1614                                        l10107 1424  
                                      l10053 132B                                        l10143 14EA  
                                      l10047 12FA                                        l10305 17F4  
                                      l10233 16A9                                        l10137 14B9  
                                      l10227 1678                                        l10083 13C0  
                                      l10173 157F                                        l10077 138F  
                                      l10167 154E                                        l10257 170D  
                                      l10513 22EB                                        l10521 22FE  
                                      l10291 17B4                                        l10507 2293  
                                      l10285 177F                                        l10197 15E3  
                                      l10517 22F6                                        l10297 17CB  
                                      l10289 1793                                        l10545 2383  
                                      l10723 075F                                        l10883 08CC  
                    ?_locked_get_unlock_leds 0071                                        l10887 0F3B  
                                      l10889 2ADF                      _locked_locking_leds_idx 00A4  
                            __end_of___almod 2F8D                                        ?_main 0070  
                                      ?_rand 0024                                        STR_10 3A45  
                                      STR_11 3BF9                                        STR_20 3971  
                                      STR_12 3B25                                        STR_21 38B0  
                                      STR_13 3B5E                                        STR_30 3A89  
                                      STR_22 3919                                        STR_14 3B97  
                                      STR_31 38D4                                        STR_23 3954  
                                      STR_15 3A32                                        STR_40 3BF4  
                                      STR_32 3A79                                        STR_24 39A8  
                                      STR_16 3A0A                                        STR_41 3C0D  
                                      STR_33 38F7                                        STR_25 3888  
                                      STR_17 39C3                                __CFG_WDTE$OFF 0000  
                                      STR_42 3AA5                                        STR_34 280A  
                                      STR_26 3A57                                        STR_18 3B56  
                                      STR_50 3BC7                                        STR_43 3AA7  
                                      STR_35 3A68                                        STR_27 3A1F  
                                      STR_19 39F4                                        STR_51 3BAE  
                                      STR_44 3BEF                                        STR_36 3800  
                                      STR_28 3937                                        STR_60 3B0A  
                                      STR_52 3BD6                                        STR_45 3BE5  
                                      STR_37 3AB2                                        STR_29 3ACB  
                                      STR_61 3AE2                                        STR_53 3BB3  
                                      STR_70 3B1C                                        STR_46 3BE0  
                                      STR_38 385D                                        STR_62 3AD7  
                                      STR_54 3BBD                                        STR_71 3B1C  
                                      STR_47 3BDB                                        STR_39 287D  
                                      STR_63 3B3E                                        STR_55 3BC2  
                                      STR_72 3C11                                        STR_48 3BEA  
                                      STR_80 3B2E                                        STR_64 3ABF  
                                      STR_56 3BB8                                        STR_81 3B83  
                                      STR_73 3B8A                                        STR_65 3A98  
                                      STR_57 3BCC                                        STR_49 3BD1  
                                      STR_82 3B36                                        STR_74 3B75  
                                      STR_66 3B13                                        STR_58 3B4E  
                                      STR_67 3B1C                                        STR_83 382F  
                                      STR_75 3B01                                        STR_59 3B46  
                                      STR_68 3B1C                                        STR_84 398D  
                                      STR_76 3B7C                                        STR_69 3B1C  
                                      STR_85 39DD                                        STR_77 3BA9  
                                      STR_86 3B6E                                        STR_78 3AED  
                                      STR_79 3B91                             _schedulerExecute 2306  
                                      _T2CON 001F                      _flashy_leds_state_track 00B0  
                                      _T4CON 0417                               __CFG_DEBUG$OFF 0000  
                            __end_of___lwdiv 28B9                              __end_of___lwmod 35CE  
                                      i1l363 0011                                        _OSCEN 091D  
                                      _TMR0H 0016                                        _TMR0L 0015  
                             _led_roundabout 37BF                         ?_menu_display_option 004C  
             nullifyBadge_irTxRegister@badge 0071                   __end_of_scheduler_TaskInit 3703  
                                      _TRISA 008C                                        _TRISB 008D  
                                      _TRISC 008E             __size_of_nullifyBadge_buttonsGet 0031  
          __size_of_TMR0_SetInterruptHandler 0006                              _TMR4_Initialize 3249  
                            _PWM6_Initialize 326B                          ___lmul@multiplicand 0075  
                  ?_TMR0_SetInterruptHandler 0071                        _displayL2_ForceUpdate 31DC  
                     ??_locked_get_lock_leds 0073                             __end_of_TMR0_ISR 329C  
                               _badge_locked 00C4                                 ?_matrix_Main 0052  
                               ?_locked_Main 0052                                 ?_matrix_Init 0039  
                               ?_locked_Init 0039                        ?_displayL1_Initialize 0070  
                            __end_of_dpowers 280A                      _SPI1_Exchange8bitBuffer 2B3A  
                             _WDT_Initialize 31CD                              __end_of_isdigit 32AA  
                            __end_of_marquee 228C                                        _randx 00CC  
                       matrix_Main@holdvalue 0059                                        pclath 000A  
         __size_of_nullifyBadge_platformInit 0055                                        status 0003  
                                      wtemp0 007E                              __end_of_sprintf 1B38  
                            _TMR2_StartTimer 31C4            __size_of_nullifyBadge_irTxRelease 000B  
                           _menu_option_size 00B4                    ?_nullifyBadge_irTxRelease 0070  
                   __size_of_SPI1_Initialize 0008                       menu_Main@buttonPressed 0056  
               displayL1_SetSegChar@charData 0028                        ?_displayL1_SetSegChar 0020  
                            __initialization 0018                            ?_displayL1_Update 0070  
                               __end_of_main 0764                                 __end_of_rand 293E  
                      ?_displayL2_Initialize 0070                            ?_displayL2_PutStr 0030  
                     __size_of_let_alternate 0014                       ?_displayL2_ClrUserLeds 0070  
             __end_of_locked_get_unlock_leds 0819                           ??_displayL1_Update 0079  
                    __end_of_TMR2_Initialize 321E                        ?_displayL1_SetUserLed 0071  
                ?_INTERRUPT_InterruptManager 0070                           ??_displayL2_PutStr 0032  
           displayCharReverse@retValUpperRev 007A                              ?_scheduler_Init 0070  
                     __end_of_led_roundabout 3800                                       ??_main 006E  
                                     ??_rand 0026                                slot_Main@data 0065  
                       _nullifyBadge_irTxClr 31CA                        ??_menu_display_option 007C  
                       _nullifyBadge_irTxSet 2882                                 ?_secret_Main 0052  
                               ?_secret_Init 0039              __size_of_slot_Running_Animation 0046  
                     __end_of_WDT_Initialize 31D1                                slot_Init@data 003B  
      __end_of_nullifyBadge_segDisplayPutStr 3228       __size_of_nullifyBadge_segDisplayPutStr 000A  
              _nullifyBadge_segDisplayPutStr 321E                      __end_of_TMR0_StartTimer 31C4  
                            scheduler_Init@k 0073               nullifyBadge_platformInit@badge 002C  
                                     _CCPR1H 0292                                       _CCPR2H 0296  
                                     _CCPR1L 0291                                       _CCPR2L 0295  
                                     _ANSELA 018C                                       _ANSELB 018D  
                                     _ANSELC 018E                                       _T0CON0 0017  
                                     _T0CON1 0018                             ?_PWM1_Initialize 0070  
                                     _ODCONA 028C                                       _ODCONB 028D  
                                     _ODCONC 028E                      __end_of_PWM5_Initialize 326B  
                __end_of_TMR0_Read16bitTimer 3446                                       _OSCFRQ 091F  
                                     _WDTCON 0097                    matrix_secret_check@inputs 0027  
                  locked_secret_check@inputs 0027                              _TMR4_StartTimer 31C7  
                      SPI1_Exchange8bit@data 0071                            _scheduler_TaskAdd 228C  
                   __size_of_menu_run_option 004A                     __end_of_locked_lock_leds 340E  
          __end_of_nullifyBadge_platformInit 2CD8                   __size_of_SPI1_Exchange8bit 0009  
                          _scheduler_TaskRun 34C1                               __CFG_PWRTE$OFF 0000  
                __end_of_locked_secret_check 10CB                  __end_of_matrix_secret_check 2588  
                         ?_scheduler_TaskAdd 003F                           ?_scheduler_TaskRun 0070  
                    _slot_Finished_Animation 3550                                       ___bmul 3308  
                           __end_of_led_rand 2A13                                       ___lmul 362E  
                                  ??___almod 0079                     locked_get_lock_leds@leds 0077  
                                 _Shot_Index 007C                                       ___wmul 33D8  
                             __CFG_STVREN$ON 0000                     locked_get_lock_leds@size 0075  
                                     _deaths 00AA                         __size_of_flashy_Main 07E7  
                       __size_of_flashy_Init 0096                                    ??___lwdiv 0075  
                                  ??___lwmod 0079                        _flashy_display_option 2D33  
                           ?_TMR0_Initialize 0070                             ?_PWM2_Initialize 0070  
                              ?_locked_clear 0039                                       _memset 33C0  
                    __end_of_PWM6_Initialize 3277                      __end_of_TMR4_Initialize 3254  
                        ??_scheduler_TaskAdd 0040             nullifyBadge_segDisplayPutStr@str 0037  
           __end_of_nullifyBadge_userLedsClr 0800             __end_of_nullifyBadge_userLedsSet 3308  
                        ??_scheduler_TaskRun 007C                              ?_led_roundabout 0030  
                      ?_nullifyBadge_irTxClr 0070                                 __pdataBANK10 0520  
                      ?_nullifyBadge_irTxSet 0070                                       _strlen 3464  
                               __pdataBIGRAM 26F0                         __size_of_led_curtain 0041  
                                 _Slot_Wheel 0332                       ?_displayL2_ForceUpdate 0070  
                                  ??_isdigit 0071                                    ??_marquee 003E  
                  ??_SPI1_Exchange8bitBuffer 0074                              ?_WDT_Initialize 0070  
                     ??_displayL1_Initialize 007B                        _displayL2_SetUserLeds 3482  
              TMR0_Read16bitTimer@readValLow 007A                        __end_of_TMR0_CallBack 3233  
                              _let_alternate 2201                      __end_of_TMR2_StartTimer 31C7  
   TMR0_SetInterruptHandler@InterruptHandler 0071                                    ??_sprintf 003B  
                 ?_displayL2_EraseSegDisplay 0070                   __end_of_nullifyBadge_irGet 31D6  
                       locked_lock_leds@size 0073                            _SYSTEM_Initialize 34A0  
           displayL2_EraseSegDisplay@display 0037                   ?_nullifyBadge_irTxRegister 0070  
                          _menu_options_leds 02CA                    __end_of_scheduler_TaskAdd 2306  
                    __end_of__initialization 00E1                    secret_check@buttonPressed 0079  
                  __end_of_scheduler_TaskRun 34E2                       menu_display_option@led 0050  
                    _roundabout_leds_inverse 03A0                           ?_SYSTEM_Initialize 0070  
                 __end_of_PWM2_LoadDutyValue 337D                       _slot_Running_Animation 293E  
                     ??_displayL1_SetSegChar 0022                  PWM1_LoadDutyValue@dutyValue 0071  
                  secret_check@currents_size 0025                          ___bmul@multiplicand 0071  
                              led_rand@spark 003B                       ??_displayL2_Initialize 007C  
                          _displayL2_PutChar 2B88                               __pcstackCOMMON 0070  
                displayL1_SetSegChar@charPos 0021                  __size_of_displayCharReverse 002F  
                               __pidataBANK1 1000                                 __pidataBANK2 0002  
                               __pidataBANK3 33A9                                 __pidataBANK4 2A13  
                               __pidataBANK5 34E2                                 __pidataBANK6 2A5B  
                               __pidataBANK7 2AEE                                 __pidataBANK8 3692  
                        ??_SYSTEM_Initialize 0073                                    ?_TMR0_ISR 0070  
                     ??_displayL1_SetUserLed 0073                           ?_displayL2_PutChar 002A  
                                 _badge_inst 01B2                               ??_locked_clear 007C  
                          ??_SPI1_Initialize 0071                  displayL1_SetSegChar@display 0027  
                         _PWM1_LoadDutyValue 3351                        scheduler_TaskAdd@task 003F  
                           ?_TMR2_Initialize 0070                          matrix_Init@taskData 0039  
                        locked_Init@taskData 0039                          _flashy_sparkle_rate 00AE  
       __end_of_nullifyBadge_segDisplayErase 1806        __size_of_nullifyBadge_segDisplayErase 0006  
               _nullifyBadge_segDisplayErase 1800                      _nullifyBadge_buttonsGet 35FD  
                        ??_displayL2_PutChar 002B                          ?_PWM1_LoadDutyValue 0071  
                             ?_let_alternate 0030                           _gamma_table_256x1k 2000  
                           ?_TMR0_StartTimer 0070                      ??_matrix_display_option 004E  
                    __end_of_TMR4_StartTimer 31CA                    __end_of_SYSTEM_Initialize 34C1  
                         led_curtain@counter 0030                                 sprintf@width 0048  
                              _menu_TaskData 02BC                                   __pbssBANK1 00A0  
                                 __pbssBANK2 0120                                   __pbssBANK3 01A0  
                                 __pbssBANK5 02A0                                   __pbssBANK9 04A0  
                       __size_of_locked_Main 02D1                         __size_of_matrix_Main 0735  
                       __size_of_locked_Init 0065                         __size_of_matrix_Init 00A0  
                        secret_Main@taskData 0052                             ?_PWM5_Initialize 0070  
             ?_nullifyBadge_segDisplayPutStr 0037                            _flashy_option_idx 00A8  
                   __end_of_schedulerExecute 238A                        _TMR4_InterruptHandler 0124  
         nullifyBadge_userLedsRegister@badge 0071                           __size_of_menu_Main 01F7  
                         __size_of_menu_Init 0062                    __end_of_displayL2_PutChar 2BDA  
                  ??_slot_Finished_Animation 003F                                ?_secret_check 0077  
                       ??_PWM1_LoadDutyValue 0073                                ?_secret_clear 0071  
                             _SSP1DATPPSbits 0E21                              _secret_TaskData 02A0  
                                 __pmaintext 0661                                      ?___bmul 0071  
           __end_of_TMR0_SetInterruptHandler 31DC                                      ?___lmul 0071  
                     ?_flashy_display_option 004C                                      ?___wmul 0071  
                      scheduler_TaskRun@task 0067                                   ??_TMR0_ISR 0070  
                            __CFG_PPS1WAY$ON 0000                   __end_of_PWM6_LoadDutyValue 33A9  
                                 __pintentry 0004                            ??_menu_run_option 007C  
                                    _CCP1CON 0293                                      _CCP2CON 0297  
                                    ?_memset 0071                               ___lmul@product 0020  
                     ??_nullifyBadge_irTxClr 0071                             ?_TMR4_Initialize 0070  
                           ?_PWM6_Initialize 0070                       ??_nullifyBadge_irTxSet 0071  
                             _SSP1CLKPPSbits 0E20                          __CFG_RSTOSC$HFINT32 0000  
                                    ?_strlen 0071                                   _led_Parody 2EBA  
              ?_nullifyBadge_segDisplayErase 0070                       ?_displayL2_SetUserLeds 002B  
                         _PWM5_LoadDutyValue 337D                                      _OSCCON1 0919  
                   displayL2_PutChar@display 002F                                      _OSCCON3 091B  
                         __size_of_slot_Main 057C                           __size_of_slot_Init 0064  
                                    _NVMADRH 0892                    matrix_display_option@data 004C  
                                    _NVMADRL 0891                                      _NVMDATH 0894  
                                    _OSCTUNE 091E                                      _NVMDATL 0893  
                                    _NVMCON2 0896                                      _PWM5DCH 0618  
                                    _PWM5DCL 0617                                      _PWM6DCH 061B  
                                    _PWM6DCL 061A                                      _PWM5CON 0619  
                                    _PWM6CON 061C                                      _SSP1ADD 0212  
                       __size_of_secret_Main 01BD                                      _PPSLOCK 0E0F  
                                    _SSP1BUF 0211                                   _led_circle 3201  
                       __size_of_secret_Init 005B                             ?_TMR2_StartTimer 0070  
                              _matrix_option 03D8                                    ?_led_rand 0070  
                        ?_PWM5_LoadDutyValue 0071                      _FLASHY_TEXT_SECRET_TEST 00D4  
                   flashy_Main@buttonPressed 005C                   __size_of_scheduler_TaskAdd 007A  
          __size_of_nullifyBadge_userLedsClr 0006                   __size_of_scheduler_TaskRun 0021  
          __size_of_nullifyBadge_userLedsSet 0011                           _scheduler_TaskInit 36CA  
                  ?_nullifyBadge_userLedsClr 0070                    ?_nullifyBadge_userLedsSet 002D  
                             ??_secret_check 0020                               ??_secret_clear 0073  
                    ??_displayL2_ClrUserLeds 007B                 displayL2_SetUserLeds@display 007B  
                           ??_scheduler_Init 0071                          ?_scheduler_TaskInit 0070  
                            __size_of___bmul 0011                                      ___almod 2F1F  
                            __size_of___lmul 0032                              __size_of___wmul 001B  
            ??_nullifyBadge_userLedsRegister 0071                                      ___lwdiv 2885  
                         scheduler_TaskAdd@k 0047                                      ___lwmod 35A1  
                       ??_PWM5_LoadDutyValue 0073                  __size_of_locked_unlock_leds 0013  
                  ??_nullifyBadge_buttonsGet 0071                              _roundabout_leds 03BC  
                    scheduler_Init@scheduler 0072                              __size_of_memset 0018  
                      displayL1_SetSegChar@c 0020                              _matrix_TaskData 04A0  
                            _locked_TaskData 02AE                                   _menu_clear 2984  
                                    __ptext1 36CA                                      __ptext2 228C  
                                    __ptext3 238A                                      __ptext4 2CD8  
                                    __ptext5 1806                                      __ptext6 2DF4  
                                    __ptext7 0764                                      __ptext8 2E56  
                                    __ptext9 32C7                              __size_of_strlen 001E  
            __end_of_slot_Finished_Animation 3577                                      _dpowers 2800  
                             slot_Setup@data 0034                        _OSCILLATOR_Initialize 320A  
                                    _oddeven 00B8                                    _T2CONbits 001F  
                          __end_of_menu_Main 1D2F                            __end_of_menu_Init 2E56  
                                    _isdigit 329C                              ??_let_alternate 007C  
                                    _marquee 2215                                    _T4CONbits 0417  
                   ??_PIN_MANAGER_Initialize 0071      nullifyBadge_segDisplayForceUpdate@badge 002B  
                  __size_of_displayL1_Update 0011                         ??_scheduler_TaskInit 0071  
                  __size_of_displayL2_PutStr 002A                   __size_of_SYSTEM_Initialize 0021  
                                    _sprintf 196B                                      clrloop0 3278  
                           ?_TMR4_StartTimer 0070                __size_of_locked_get_lock_leds 0025  
                        displayL2_PutStr@str 0030                                   ??_led_rand 0033  
                       end_of_initialization 00E1                         __end_of_locked_clear 28FB  
                                    init_ram 3283                                      memset@c 0073  
                                    memset@n 0075                                      memset@p 0077  
                              secret_check@i 0028                                      initloop 3284  
                               marquee@count 003C                   __size_of_displayL2_PutChar 0052  
                          ?_locked_lock_leds 0070                            __end_of_slot_Main 0661  
                          __end_of_slot_Init 2EBA                             ??_led_roundabout 0032  
                         ??_locked_lock_leds 0071                              _matrix_leds_idx 00A0  
             TMR0_Read16bitTimer@readValHigh 007B                  __end_of_menu_display_option 2DF4  
                     slot_Main@buttonPressed 0064                                      strlen@s 0071  
                    ??_displayL2_ForceUpdate 007B                      __size_of_marquee_speedy 0073  
                         secret_check@inputs 0027                             ??_WDT_Initialize 0071  
                   _TMR0_SetInterruptHandler 31D6                                    _PORTAbits 000C  
                                  _PORTBbits 000D                                    _PORTCbits 000E  
              nullifyBadge_userLedsClr@badge 002B                                  ?_led_Parody 0030  
                                 _slot_Setup 2BDA                      displayL1_Update@display 002A  
                                ?_led_circle 0030                      menu_display_option@data 004C  
             ??_nullifyBadge_segDisplayErase 007C                      menu_display_option@size 004E  
                           __CFG_FEXTOSC$OFF 0000                  ??_displayL2_EraseSegDisplay 007C  
            __end_of_nullifyBadge_buttonsGet 362E                                _schedulerInst 01A0  
                   _nullifyBadge_irTxRelease 3254                      ?_slot_Running_Animation 0032  
                ??_nullifyBadge_irTxRegister 0071                                  _CCP1CONbits 0293  
                            _SPI1_Initialize 31E8                                  _CCP2CONbits 0297  
                          slot_Main@taskData 0052                                ??_flashy_Main 0054  
                              ??_flashy_Init 007C                   ?_nullifyBadge_platformInit 0070  
               __size_of_TMR0_Read16bitTimer 001D                     __size_of_PWM1_Initialize 000B  
                        secret_Init@taskData 0039                         _timer0ReloadVal16bit 00C0  
                         _nullifyBadge_irGet 31D1                              flashy_Main@data 005E  
                              __pidataBANK10 3703                               __end_of___bmul 3319  
              nullifyBadge_userLedsSet@badge 002F                               __end_of___lmul 3660  
                              __pidataBIGRAM 186B                                ??_led_curtain 0032  
                             __end_of___wmul 33F3              slot_Finished_Animation@taskData 003D  
                     flashy_Main@hit_counter 0056                            __size_of_TMR0_ISR 000D  
                         _PWM2_LoadDutyValue 3367                 __size_of_locked_secret_check 00BC  
               __size_of_matrix_secret_check 00BB                                  ?_menu_clear 0039  
                     ?_OSCILLATOR_Initialize 0070                               __end_of_memset 33D8  
                        ?_nullifyBadge_irGet 0070                              flashy_Init@data 003B  
      __end_of_nullifyBadge_userLedsRegister 32D6       __size_of_nullifyBadge_userLedsRegister 000F  
              _nullifyBadge_userLedsRegister 32C7                         __end_of_secret_check 2643  
                            _menu_option_idx 00B6                         __end_of_secret_clear 3692  
                             __end_of_strlen 3482                          start_initialization 0018  
                   __size_of_PWM2_Initialize 000B                     __size_of_TMR0_Initialize 001E  
                        ?_PWM2_LoadDutyValue 0071              __size_of_PIN_MANAGER_Initialize 0055  
                       marquee_speedy@F14093 00C7                __size_of_displayL1_Initialize 0013  
             __end_of_slot_Running_Animation 2984                         _matrix_secret_inputs 02D4  
                       _locked_secret_inputs 024F               __size_of_matrix_display_option 00A3  
              __end_of_matrix_display_option 24CD                         ??_nullifyBadge_irGet 0071  
                            _menu_run_option 2AA4                            ?_schedulerExecute 0070  
                    ??_flashy_display_option 007C                   __end_of_displayCharReverse 35FD  
                   ??_locked_get_unlock_leds 0073                          __size_of_led_Parody 0065  
                         led_roundabout@leds 0034                             __CFG_LPBOREN$OFF 0000  
                         led_roundabout@size 0036                           _flashy_scroll_rate 00AC  
                       ??_PWM2_LoadDutyValue 0073                                _secret_inputs 0236  
                         ??_schedulerExecute 0068                    flashy_display_option@data 004C  
              __size_of_displayL1_SetSegChar 0041                                     ??___bmul 0072  
                PWM2_LoadDutyValue@dutyValue 0071                                     ??___lmul 0079  
                 slot_Running_Animation@data 0036                                     ??___wmul 0075  
                  _displayL2_EraseSegDisplay 32D6                                  _CCPTMRSbits 029F  
                        __size_of_led_circle 0009                __size_of_displayL2_Initialize 0026  
                     __size_of_TMR0_CallBack 000B                                  __pdataBANK1 00C7  
                                __pdataBANK2 016B                                  __pdataBANK3 01D1  
                                __pdataBANK4 0220                                  __pdataBANK5 02CA  
                                __pdataBANK6 0320                                  __pdataBANK7 03A0  
                                __pdataBANK8 0420                                     ??_memset 0077  
                  _nullifyBadge_irTxRegister 32B8                __size_of_displayL1_SetUserLed 0012  
                        __end_of_flashy_Main 1000                          __end_of_flashy_Init 07FA  
                   ?_SPI1_Exchange8bitBuffer 0072                      ??_displayL2_SetUserLeds 007B  
                           secret_check@data 0077                                     ??_strlen 0073  
                           secret_check@size 0023                                  __pbssBANK11 05A0  
                  schedulerExecute@scheduler 00DC           nullifyBadge_segDisplayPutStr@badge 0039  
                PWM5_LoadDutyValue@dutyValue 0071                         marquee_speedy@string 003A  
                                __pbssCOMMON 007C                                  ?_slot_Setup 002F  
                  schedulerExecute@tickDelta 00DA                                    ___latbits 0003  
                        __end_of_led_curtain 37BF                                __pcstackBANK0 0020  
                              __pcstackBANK1 00D6                        __size_of_locked_clear 0042  
                           _displayL1_Update 32E6                           _PWM6_LoadDutyValue 3393  
                   __size_of_TMR2_Initialize 000A                                ??_matrix_Main 0054  
                              ??_locked_Main 0054                             _displayL2_PutStr 3577  
                              ??_matrix_Init 003B                                ??_locked_Init 007C  
                     scheduler_TaskInit@task 0071                             secret_clear@data 0071  
                    __end_of_SPI1_Initialize 31F0                                 _isdigit$3646 0071  
                       _asciiCharTableLookup 26F0                        _locked_lock_base_leds 00D2  
                         _flashy_option_size 00A6             matrix_secret_check@buttonPressed 0079  
           locked_secret_check@buttonPressed 0079                      matrix_secret_check@data 0077  
                    locked_secret_check@data 0077                                 _curtain_leds 043C  
                        ?_PWM6_LoadDutyValue 0071                      matrix_secret_check@size 0023  
                    locked_secret_check@size 0023             displayL2_SetUserLeds@userLedData 002B  
                                sprintf@flag 0040                            __size_of_led_rand 0048  
                                sprintf@prec 003F             matrix_secret_check@currents_size 0025  
           locked_secret_check@currents_size 0025                          __size_of_menu_clear 0047  
                      _TMR0_InterruptHandler 00BE                     __size_of_TMR0_StartTimer 0003  
                __size_of_PWM1_LoadDutyValue 0016                             ___lwdiv@dividend 0073  
                     _PIN_MANAGER_Initialize 2C2E                                  _FLASHY_TEXT 016B  
                   __size_of_PWM5_Initialize 000C                            menu_Main@taskData 0052  
             __size_of_displayL2_ClrUserLeds 000E                __end_of_displayL2_ClrUserLeds 32B8  
                displayL1_SetUserLed@display 0074                                     ?___almod 002B  
                                  __ptext100 337D                                    __ptext101 3367  
                                  __ptext102 3351                                    __ptext104 328F  
                                  __ptext105 3228                                    __ptext106 2200  
                          schedulerExecute@k 00DD                                     ?___lwdiv 0071  
                                   ?___lwmod 002B                               _marquee_speedy 2F8D  
                       ??_PWM6_LoadDutyValue 0073                                 _locked_clear 28B9  
                          ??_PWM1_Initialize 0071                 ??_INTERRUPT_InterruptManager 0070  
                           ___almod@dividend 002F                                 _matrix_found 00C2  
                          marquee@multiplier 0044                                    __pswtext1 3000  
                     displayCharReverse@cVal 0071                __size_of_nullifyBadge_irTxClr 0003  
              __size_of_nullifyBadge_irTxSet 0003                                ??_secret_Main 0054  
                              ??_secret_Init 007C                          _locked_locking_leds 0220  
                                   ?_isdigit 0070                                     ?_marquee 003A  
                   __size_of_PWM6_Initialize 000C                     __size_of_TMR4_Initialize 000B  
             ?_nullifyBadge_userLedsRegister 0070                  displayL2_Initialize@display 002B  
                    __end_of_menu_run_option 2AEE                             ___lwdiv@quotient 0077  
                            secret_Main@data 0058                                    _menu_Main 1B38  
                       matrix_secret_check@i 0028                         locked_secret_check@i 0028  
                                  _menu_Init 2DF4                nullifyBadge_irTxRelease@badge 0072  
                                  _menu_Exit 0000                                     ?_sprintf 002F  
                        flashy_Main@taskData 0052                                _TMR0_CallBack 3228  
                         displayL2_PutChar@c 002A                           displayL2_PutChar@k 002E  
                                  _menu_task 014F      displayL1_SetSegChar@dispDataVectBaseIdx 0026  
                   ?_slot_Finished_Animation 003D                            ??_TMR0_Initialize 0073  
                          ??_PWM2_Initialize 0071                              secret_Init@data 003B  
              SPI1_Exchange8bitBuffer@dataIn 0077                               ___wmul@product 0075  
                        __end_of_locked_Main 2000                          __end_of_matrix_Main 1800  
                        __end_of_locked_Init 186B                          __end_of_matrix_Init 242A  
                                   _LATBbits 010D                                     _LATCbits 010E  
              SPI1_Exchange8bitBuffer@bufLen 0072                                    clear_ram0 3277  
                                   _PIE0bits 0090                     __size_of_TMR2_StartTimer 0003  
        __size_of_INTERRUPT_InterruptManager 0012                   ??_TMR0_SetInterruptHandler 0073  
            __size_of_locked_get_unlock_leds 0019                                     _PIR0bits 0010  
                                   _PIR1bits 0011                                     _PIR2bits 0012  
                                _flashy_Main 0819                                  _flashy_Init 0764  
                                _flashy_Exit 0000                          __size_of_slot_Setup 0054  
                 TMR0_Read16bitTimer@readVal 0078                   __end_of_locked_unlock_leds 3351  
                 scheduler_TaskAdd@scheduler 0046              __end_of_SPI1_Exchange8bitBuffer 2B88  
               __end_of_locked_get_lock_leds 352A                       __end_of_marquee_speedy 3000  
                                _flashy_task 015C                                     _SSP1CON1 0215  
                                   _TMR0_ISR 328F                                     _SSP1STAT 0214  
                          slot_Init@taskData 0039                  __size_of_PWM5_LoadDutyValue 0016  
                      __size_of_secret_check 00BB                                    _slot_Main 00E5  
                      __size_of_secret_clear 0032                                    _slot_Init 2E56  
                                  _slot_Exit 0000                                  _led_curtain 377E  
            displayL1_SetUserLed@userLedVect 0071                              _flashy_TaskData 04BF  
                                  _slot_task 0142            schedulerExecute@currentSystemTick 00D6  
                          ___wmul@multiplier 0071               __size_of_displayL2_ForceUpdate 0006  
              __end_of_displayL2_ForceUpdate 31E2                            _Shot_Options_Long 0320  
                               ??_led_Parody 0032                   ??_nullifyBadge_irTxRelease 0071  
                  __size_of_locked_lock_leds 001B            nullifyBadge_segDisplayErase@badge 0038  
                   matrix_Main@buttonPressed 0058                     locked_Main@buttonPressed 0056  
                        _TMR0_Read16bitTimer 3429                        __end_of_let_alternate 2215  
                               ??_led_circle 007C                              led_circle@count 0030  
                __size_of_scheduler_TaskInit 0039                               ?_TMR0_CallBack 0070  
                                 ?_menu_Main 0052                                   ?_menu_Init 0039  
                           ?_SPI1_Initialize 0070                     _nullifyBadge_userLedsClr 07FA  
                          ___lmul@multiplier 0071                        led_roundabout@counter 0030  
                   _nullifyBadge_userLedsSet 32F7                          __end_of_secret_Main 2800  
                        __end_of_secret_Init 2D33                                     _Leds_idx 00D0  
                        _locked_secret_check 100F                          _matrix_secret_check 24CD  
                          ??_TMR2_Initialize 0071                          _locked_secret_value 0169  
                   secret_Main@buttonPressed 0057                   locked_get_unlock_leds@leds 0073  
                   __size_of_TMR4_StartTimer 0003                                 _secret_check 2588  
                               _secret_clear 3660                         ?_TMR0_Read16bitTimer 0071  
                         __end_of_led_Parody 2F1F                              marquee_speedy@i 0046  
                            marquee_speedy@j 004A                  ??_nullifyBadge_platformInit 007C  
                   ?_nullifyBadge_buttonsGet 0070                                 _secret_value 00C5  
                            _flashy_leds_idx 00B2   __end_of_nullifyBadge_segDisplayForceUpdate 31E8  
__size_of_nullifyBadge_segDisplayForceUpdate 0006         ??_nullifyBadge_segDisplayForceUpdate 007C  
        ?_nullifyBadge_segDisplayForceUpdate 0070           _nullifyBadge_segDisplayForceUpdate 31E2  
                            ?_marquee_speedy 003A                      ??_OSCILLATOR_Initialize 0071  
                        marquee_speedy@count 003C                            ??_TMR0_StartTimer 0071  
                           __size_of___almod 006E                           __end_of_led_circle 320A  
                                 ?_slot_Main 0052                                   ?_slot_Init 0039  
                           __size_of___lwdiv 0034                             __size_of___lwmod 002D  
                       ?_matrix_secret_check 0077                         ?_locked_secret_check 0077  
                               ??_menu_clear 007C                            ??_PWM5_Initialize 0071  
                    __size_of_scheduler_Init 001B                                   sprintf@len 0046  
                                _currentTask 00BA                                   sprintf@val 0044  
               __size_of_menu_display_option 0062           __size_of_displayL2_EraseSegDisplay 0010  
                                 _T0CON0bits 0017                       _locked_get_unlock_leds 0800  
                           __size_of_isdigit 000E                             __size_of_marquee 0077  
                            ___lwdiv@divisor 0071                              ___lwdiv@counter 0076  
                               _Shot_Options 01D1                          displayCharReverse@k 007B  
         __size_of_nullifyBadge_irTxRegister 000F                                     __ptext10 31F0  
                                   __ptext11 340E                                     __ptext20 293E  
                                   __ptext12 2306                                     __ptext21 3550  
                                   __ptext13 34C1                                     __ptext30 333E  
                                   __ptext22 3660                                     __ptext14 10CB  
                                   __ptext31 100F                                     __ptext23 2588  
                                   __ptext15 2643                                     __ptext40 32D6  
                                   __ptext32 3308                                     __ptext24 2AA4  
                                   __ptext16 1D2F                                     __ptext41 196B  
                                   __ptext33 33F3                                     __ptext25 2984  
                                   __ptext17 1B38                                     __ptext50 2201  
                                   __ptext42 329C                                     __ptext34 0800  
                                   __ptext26 2D92                                     __ptext18 0819  
                                   __ptext51 37BF                                     __ptext43 33D8  
                                   __ptext35 3505                                     __ptext27 24CD  
                                   __ptext19 00E5                                     __ptext60 3482  
                                   __ptext52 29CB                                     __ptext44 2882  
                                   __ptext36 28B9                                     __ptext28 242A  
                                   __ptext61 3319                                     __ptext53 28FB  
                                   __ptext45 3254                                     __ptext37 07FA  
                                   __ptext29 2BDA                                     __ptext70 35CE  
                                   __ptext62 2D33                                     __ptext54 362E  
                                   __ptext46 32B8                                     __ptext38 32AA  
                                   __ptext71 31E2                                     __ptext63 2F8D  
                                   __ptext55 2F1F                                     __ptext47 31CA  
                                   __ptext39 1800                                     __ptext80 32E6  
                                   __ptext72 31DC                                     __ptext64 2215  
                                   __ptext56 377E                                     __ptext48 31D1  
                                   __ptext81 2B3A                                     __ptext73 35A1  
                                   __ptext65 3464                                     __ptext57 3201  
                                   __ptext49 35FD                                     __ptext90 31C1  
                                   __ptext82 31F8                                     __ptext74 2885  
                                   __ptext66 321E                                     __ptext58 2EBA  
                                   __ptext91 31D6                                     __ptext83 34A0  
                                   __ptext75 3429                                     __ptext67 3577  
                                   __ptext59 32F7                                     __ptext92 31E8  
                                   __ptext84 31CD                                     __ptext76 2C83  
                                   __ptext68 2B88                                     __ptext93 326B  
                                   __ptext85 3249                                     __ptext77 352A  
                                   __ptext69 373D                                     __ptext94 325F  
                                   __ptext86 31C7                                     __ptext78 332B  
                                   __ptext95 323E                                     __ptext87 3214  
                                   __ptext79 33C0                                     __ptext96 3233  
                                   __ptext88 31C4                                     __ptext97 2C2E  
                                   __ptext89 3446                                     __ptext98 320A  
                                   __ptext99 3393                                  _matrix_Main 10CB  
                                _locked_Main 1D2F                                  _matrix_Init 238A  
                                _locked_Init 1806                           slot_Setup@taskData 002F  
                                _matrix_Exit 0000                                  _locked_Exit 0000  
                               _SSP1CON1bits 0215                             ?_menu_run_option 003B  
                                _locked_leds 00A2                                  _matrix_task 01C4  
                                _locked_task 0135                              ___almod@divisor 002B  
                                   _led_rand 29CB                             __size_of_sprintf 01CD  
                            ___almod@counter 007A               slot_Running_Animation@taskData 0032  
                                _menu_option 022C      __end_of_nullifyBadge_segDisplayRegister 31F8  
   __size_of_nullifyBadge_segDisplayRegister 0008            ??_nullifyBadge_segDisplayRegister 0071  
           ?_nullifyBadge_segDisplayRegister 0070              _nullifyBadge_segDisplayRegister 31F0  
                       marquee@string_length 0048                                menu_Main@data 0057  
                          ??_TMR4_Initialize 0071                            ??_PWM6_Initialize 0071  
                              __size_of_main 0103                                __size_of_rand 0043  
       __end_of_TMR0_DefaultInterruptHandler 2201        __size_of_TMR0_DefaultInterruptHandler 0001  
               _TMR0_DefaultInterruptHandler 2200                           __end_of_menu_clear 29CB  
                          displayL2_PutStr@k 0036                        ??_TMR0_Read16bitTimer 0073  
                                 _RC0PPSbits 0EA0                                marquee@F14102 01E3  
                                 _RC1PPSbits 0EA1                                menu_Init@data 003B  
                   __end_of_displayL1_Update 32F7                           let_alternate@count 0030  
                                 _RC2PPSbits 0EA2               __size_of_flashy_display_option 005F  
                   __end_of_displayL2_PutStr 35A1                __end_of_flashy_display_option 2D92  
                                 _RC3PPSbits 0EA3                 __end_of_displayL1_Initialize 333E  
                       _curtain_leds_inverse 0420                                     _pw_found 00C3  
                                 _RC4PPSbits 0EA4                                   _RB6PPSbits 0E9E  
                                   int$flags 007E                 displayL2_ForceUpdate@display 007B  
                            matrix_Main@data 005A                              locked_Main@data 0057  
                          ??_TMR2_StartTimer 0071           __end_of_INTERRUPT_InterruptManager 0016  
                 _INTERRUPT_InterruptManager 0004                        ??_matrix_secret_check 0020  
                      ??_locked_secret_check 0020                                 _SSP1STATbits 0214  
       nullifyBadge_segDisplayRegister@badge 0071                  PIN_MANAGER_Initialize@state 0071  
         schedulerExecute@taskLastSystemTick 00D8                           _displayCharReverse 35CE  
                          menu_Init@taskData 0039                    __size_of_schedulerExecute 0084  
             __size_of_displayL2_SetUserLeds 001E                              matrix_Init@data 003D  
                            locked_Init@data 003B                __end_of_displayL2_SetUserLeds 34A0  
              displayCharReverse@retValLower 0078                displayCharReverse@retValUpper 0079  
                                 _INTCONbits 000B                                  _secret_Main 2643  
                    __size_of_led_roundabout 0041                                  _secret_Init 2CD8  
                               ??_slot_Setup 0031                                  _secret_Exit 0000  
                            ??_TMR0_CallBack 0070                                  _NVMCON1bits 0895  
                  _nullifyBadge_platformInit 2C83                 __end_of_displayL1_SetSegChar 377E  
                                _secret_task 0128                               __pstringtext10 3919  
                             __pstringtext11 3937                               __pstringtext20 3A1F  
                             __pstringtext12 3954                               __pstringtext21 3A32  
                             __pstringtext13 3971                               __pstringtext30 3ABF  
                             __pstringtext22 3A45                               __pstringtext14 398D  
                             __pstringtext31 3ACB                               __pstringtext23 3A57  
                             __pstringtext15 39A8                               __pstringtext40 3B25  
                             __pstringtext32 3AD7                               __pstringtext24 3A68  
                             __pstringtext16 39C3                               __pstringtext41 3B2E  
                             __pstringtext33 3AE2                               __pstringtext25 3A79  
                             __pstringtext17 39DD                               __pstringtext50 3B75  
                             __pstringtext42 3B36                               __pstringtext34 3AED  
                             __pstringtext26 3A89                               __pstringtext18 39F4  
                             __pstringtext51 3B7C                               __pstringtext43 3B3E  
                             __pstringtext35 3AF7                               __pstringtext27 3A98  
                             __pstringtext19 3A0A                               __pstringtext60 3BB3  
                             __pstringtext52 3B83                               __pstringtext44 3B46  
                             __pstringtext36 3B01                               __pstringtext28 3AA5  
                             __pstringtext61 3BB8                               __pstringtext53 3B8A  
                             __pstringtext45 3B4E                               __pstringtext37 3B0A  
                             __pstringtext29 3AB2                               __pstringtext70 3BE5  
                             __pstringtext62 3BBD                               __pstringtext54 3B91  
                             __pstringtext46 3B56                               __pstringtext38 3B13  
                             __pstringtext71 3BEA                               __pstringtext63 3BC2  
                             __pstringtext55 3B97                               __pstringtext47 3B5E  
                             __pstringtext39 3B1C                               __pstringtext80 0000  
                             __pstringtext72 3BEF                               __pstringtext64 3BC7  
                             __pstringtext56 3B9D                               __pstringtext48 3B66  
                             __pstringtext73 3BF4                               __pstringtext65 3BCC  
                             __pstringtext57 3BA3                               __pstringtext49 3B6E  
                             __pstringtext74 3BF9                               __pstringtext66 3BD1  
                             __pstringtext58 3BA9                               __pstringtext75 3BFE  
                             __pstringtext67 3BD6                               __pstringtext59 3BAE  
                             __pstringtext76 3C03                               __pstringtext68 3BDB  
                             __pstringtext77 3C08                               __pstringtext69 3BE0  
                             __pstringtext78 3C0D                               __pstringtext79 3C11  
          __end_of_displayL2_EraseSegDisplay 32E6                                     isdigit@c 0072  
                                   marquee@i 0046                                     marquee@j 004A  
                                   memset@p1 0071                 __end_of_displayL2_Initialize 3550  
                        ?_displayCharReverse 0071                                  ??_menu_Main 0054  
                                ??_menu_Init 007C                      __size_of_WDT_Initialize 0004  
                       _locked_get_lock_leds 3505            __end_of_nullifyBadge_irTxRegister 32C7  
           __size_of_SPI1_Exchange8bitBuffer 004E                 __end_of_displayL1_SetUserLed 332B  
                                   intlevel1 0000                                    sprintf@ap 0043  
                                  sprintf@cp 0041                                    sprintf@sp 002F  
                           ___lwmod@dividend 002D                      ?_PIN_MANAGER_Initialize 0070  
                              marquee@string 003A                  __size_of_nullifyBadge_irGet 0005  
                          __CFG_CLKOUTEN$OFF 0000                        _matrix_display_option 242A  
        SPI1_Exchange8bitBuffer@bytesWritten 0078                                  _PPSLOCKbits 0E0F  
                            _PWM1_Initialize 3233                          flashy_Init@taskData 0039  
                             menu_clear@data 0039                ?_TMR0_DefaultInterruptHandler 0070  
                __size_of_PWM2_LoadDutyValue 0016                         ??_displayCharReverse 0073  
                         __end_of_slot_Setup 2C2E                            ??_TMR4_StartTimer 0071  
                                ??_slot_Main 0054                                  ??_slot_Init 007C  
                              __pstringtext1 2000                                __pstringtext2 2800  
                              __pstringtext3 3800                                __pstringtext4 382F  
                              __pstringtext5 385D                                __pstringtext6 3888  
                              __pstringtext7 38B0                                __pstringtext8 38D4  
                              __pstringtext9 38F7             __end_of_nullifyBadge_irTxRelease 325F  
                                   sprintf@c 004A                                     sprintf@f 0031  
                              _flashy_option 0520                             _locked_lock_leds 33F3  
                            ___lwmod@divisor 002B                              _TMR0_Initialize 3446  
                            _PWM2_Initialize 323E                                     strlen@cp 0075  
                              _slot_TaskData 05A0                              ___lwmod@counter 007A  
                PWM6_LoadDutyValue@dutyValue 0071                        ?_locked_get_lock_leds 0071  
             __end_of_PIN_MANAGER_Initialize 2C83                           _matrix_option_size 0120  
                           locked_clear@data 0039                                 ___almod@sign 007B  
                                _PWMTMRSbits 061F                 __end_of_nullifyBadge_irTxClr 31CD  
               __end_of_nullifyBadge_irTxSet 2885                   __end_of_PWM1_LoadDutyValue 3367  
                          _matrix_option_idx 0122                        _TMR2_InterruptHandler 0126  
                               ?_flashy_Main 0052                                 ?_flashy_Init 0039  
