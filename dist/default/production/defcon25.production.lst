

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Jul 26 08:15:59 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16LF18346
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBANK10,global,class=CODE,delta=2
    13                           	psect	idataBIGRAM,global,class=CODE,delta=2
    14                           	psect	stringtext1,global,class=STRCODE,delta=2
    15                           	psect	stringtext2,global,class=STRCODE,delta=2
    16                           	psect	stringtext3,global,class=STRCODE,delta=2
    17                           	psect	stringtext4,global,class=STRCODE,delta=2
    18                           	psect	stringtext5,global,class=STRCODE,delta=2
    19                           	psect	stringtext6,global,class=STRCODE,delta=2
    20                           	psect	stringtext7,global,class=STRCODE,delta=2
    21                           	psect	stringtext8,global,class=STRCODE,delta=2
    22                           	psect	stringtext9,global,class=STRCODE,delta=2
    23                           	psect	stringtext10,global,class=STRCODE,delta=2
    24                           	psect	stringtext11,global,class=STRCODE,delta=2
    25                           	psect	stringtext12,global,class=STRCODE,delta=2
    26                           	psect	stringtext13,global,class=STRCODE,delta=2
    27                           	psect	stringtext14,global,class=STRCODE,delta=2
    28                           	psect	stringtext15,global,class=STRCODE,delta=2
    29                           	psect	stringtext16,global,class=STRCODE,delta=2
    30                           	psect	stringtext17,global,class=STRCODE,delta=2
    31                           	psect	stringtext18,global,class=STRCODE,delta=2
    32                           	psect	stringtext19,global,class=STRCODE,delta=2
    33                           	psect	stringtext20,global,class=STRCODE,delta=2
    34                           	psect	stringtext21,global,class=STRCODE,delta=2
    35                           	psect	stringtext22,global,class=STRCODE,delta=2
    36                           	psect	stringtext23,global,class=STRCODE,delta=2
    37                           	psect	stringtext24,global,class=STRCODE,delta=2
    38                           	psect	stringtext25,global,class=STRCODE,delta=2
    39                           	psect	stringtext26,global,class=STRCODE,delta=2
    40                           	psect	stringtext27,global,class=STRCODE,delta=2
    41                           	psect	stringtext28,global,class=STRCODE,delta=2
    42                           	psect	stringtext29,global,class=STRCODE,delta=2
    43                           	psect	stringtext30,global,class=STRCODE,delta=2
    44                           	psect	stringtext31,global,class=STRCODE,delta=2
    45                           	psect	stringtext32,global,class=STRCODE,delta=2
    46                           	psect	stringtext33,global,class=STRCODE,delta=2
    47                           	psect	stringtext34,global,class=STRCODE,delta=2
    48                           	psect	stringtext35,global,class=STRCODE,delta=2
    49                           	psect	stringtext36,global,class=STRCODE,delta=2
    50                           	psect	stringtext37,global,class=STRCODE,delta=2
    51                           	psect	stringtext38,global,class=STRCODE,delta=2
    52                           	psect	stringtext39,global,class=STRCODE,delta=2
    53                           	psect	stringtext40,global,class=STRCODE,delta=2
    54                           	psect	stringtext41,global,class=STRCODE,delta=2
    55                           	psect	stringtext42,global,class=STRCODE,delta=2
    56                           	psect	stringtext43,global,class=STRCODE,delta=2
    57                           	psect	stringtext44,global,class=STRCODE,delta=2
    58                           	psect	stringtext45,global,class=STRCODE,delta=2
    59                           	psect	stringtext46,global,class=STRCODE,delta=2
    60                           	psect	stringtext47,global,class=STRCODE,delta=2
    61                           	psect	stringtext48,global,class=STRCODE,delta=2
    62                           	psect	stringtext49,global,class=STRCODE,delta=2
    63                           	psect	stringtext50,global,class=STRCODE,delta=2
    64                           	psect	stringtext51,global,class=STRCODE,delta=2
    65                           	psect	stringtext52,global,class=STRCODE,delta=2
    66                           	psect	stringtext53,global,class=STRCODE,delta=2
    67                           	psect	stringtext54,global,class=STRCODE,delta=2
    68                           	psect	stringtext55,global,class=STRCODE,delta=2
    69                           	psect	stringtext56,global,class=STRCODE,delta=2
    70                           	psect	stringtext57,global,class=STRCODE,delta=2
    71                           	psect	stringtext58,global,class=STRCODE,delta=2
    72                           	psect	stringtext59,global,class=STRCODE,delta=2
    73                           	psect	stringtext60,global,class=STRCODE,delta=2
    74                           	psect	stringtext61,global,class=STRCODE,delta=2
    75                           	psect	stringtext62,global,class=STRCODE,delta=2
    76                           	psect	stringtext63,global,class=STRCODE,delta=2
    77                           	psect	stringtext64,global,class=STRCODE,delta=2
    78                           	psect	stringtext65,global,class=STRCODE,delta=2
    79                           	psect	stringtext66,global,class=STRCODE,delta=2
    80                           	psect	stringtext67,global,class=STRCODE,delta=2
    81                           	psect	stringtext68,global,class=STRCODE,delta=2
    82                           	psect	stringtext69,global,class=STRCODE,delta=2
    83                           	psect	stringtext70,global,class=STRCODE,delta=2
    84                           	psect	stringtext71,global,class=STRCODE,delta=2
    85                           	psect	stringtext72,global,class=STRCODE,delta=2
    86                           	psect	stringtext73,global,class=STRCODE,delta=2
    87                           	psect	stringtext74,global,class=STRCODE,delta=2
    88                           	psect	stringtext75,global,class=STRCODE,delta=2
    89                           	psect	stringtext76,global,class=STRCODE,delta=2
    90                           	psect	stringtext77,global,class=STRCODE,delta=2
    91                           	psect	cinit,global,class=CODE,merge=1,delta=2
    92                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    93                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    94                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    95                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    96                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    97                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    98                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    99                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
   100                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
   101                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
   102                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
   103                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
   104                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
   105                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
   106                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
   107                           	psect	bssBANK11,global,class=BANK11,space=1,delta=1
   108                           	psect	inittext,global,class=CODE,delta=2
   109                           	psect	clrtext,global,class=CODE,delta=2
   110                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
   111                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
   112                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   113                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   114                           	psect	text1,local,class=CODE,merge=1,delta=2
   115                           	psect	text2,local,class=CODE,merge=1,delta=2
   116                           	psect	text3,local,class=CODE,merge=1,delta=2
   117                           	psect	text4,local,class=CODE,merge=1,delta=2
   118                           	psect	text5,local,class=CODE,merge=1,delta=2
   119                           	psect	text6,local,class=CODE,merge=1,delta=2
   120                           	psect	text7,local,class=CODE,merge=1,delta=2
   121                           	psect	text8,local,class=CODE,merge=1,delta=2
   122                           	psect	text9,local,class=CODE,merge=1,delta=2
   123                           	psect	text10,local,class=CODE,merge=1,delta=2
   124                           	psect	text11,local,class=CODE,merge=1,delta=2
   125                           	psect	text12,local,class=CODE,merge=1,delta=2
   126                           	psect	text13,local,class=CODE,merge=1,delta=2
   127                           	psect	text14,local,class=CODE,merge=1,delta=2
   128                           	psect	text15,local,class=CODE,merge=1,delta=2
   129                           	psect	text16,local,class=CODE,merge=1,delta=2
   130                           	psect	text17,local,class=CODE,merge=1,delta=2
   131                           	psect	text18,local,class=CODE,merge=1,delta=2
   132                           	psect	swtext1,local,class=CONST,delta=2
   133                           	psect	text19,local,class=CODE,merge=1,delta=2
   134                           	psect	text20,local,class=CODE,merge=1,delta=2
   135                           	psect	text21,local,class=CODE,merge=1,delta=2
   136                           	psect	text22,local,class=CODE,merge=1,delta=2
   137                           	psect	text23,local,class=CODE,merge=1,delta=2
   138                           	psect	text24,local,class=CODE,merge=1,delta=2
   139                           	psect	text25,local,class=CODE,merge=1,delta=2
   140                           	psect	text26,local,class=CODE,merge=1,delta=2
   141                           	psect	text27,local,class=CODE,merge=1,delta=2
   142                           	psect	text28,local,class=CODE,merge=1,delta=2
   143                           	psect	text29,local,class=CODE,merge=1,delta=2
   144                           	psect	text30,local,class=CODE,merge=1,delta=2
   145                           	psect	text31,local,class=CODE,merge=1,delta=2
   146                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
   147                           	psect	text33,local,class=CODE,merge=1,delta=2
   148                           	psect	text34,local,class=CODE,merge=1,delta=2
   149                           	psect	text35,local,class=CODE,merge=1,delta=2
   150                           	psect	text36,local,class=CODE,merge=1,delta=2
   151                           	psect	text37,local,class=CODE,merge=1,delta=2
   152                           	psect	text38,local,class=CODE,merge=1,delta=2
   153                           	psect	text39,local,class=CODE,merge=1,delta=2
   154                           	psect	text40,local,class=CODE,merge=1,delta=2
   155                           	psect	text41,local,class=CODE,merge=1,delta=2
   156                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
   157                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
   158                           	psect	text44,local,class=CODE,merge=1,delta=2
   159                           	psect	text45,local,class=CODE,merge=1,delta=2
   160                           	psect	text46,local,class=CODE,merge=1,delta=2
   161                           	psect	text47,local,class=CODE,merge=1,delta=2
   162                           	psect	text48,local,class=CODE,merge=1,delta=2
   163                           	psect	text49,local,class=CODE,merge=1,delta=2
   164                           	psect	text50,local,class=CODE,merge=1,delta=2
   165                           	psect	text51,local,class=CODE,merge=1,delta=2
   166                           	psect	text52,local,class=CODE,merge=1,delta=2
   167                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
   168                           	psect	text54,local,class=CODE,merge=1,delta=2,group=2
   169                           	psect	text55,local,class=CODE,merge=1,delta=2,group=2
   170                           	psect	text56,local,class=CODE,merge=1,delta=2
   171                           	psect	text57,local,class=CODE,merge=1,delta=2
   172                           	psect	text58,local,class=CODE,merge=1,delta=2
   173                           	psect	text59,local,class=CODE,merge=1,delta=2
   174                           	psect	text60,local,class=CODE,merge=1,delta=2
   175                           	psect	text61,local,class=CODE,merge=1,delta=2
   176                           	psect	text62,local,class=CODE,merge=1,delta=2
   177                           	psect	text63,local,class=CODE,merge=1,delta=2
   178                           	psect	text64,local,class=CODE,merge=1,delta=2
   179                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
   180                           	psect	text66,local,class=CODE,merge=1,delta=2
   181                           	psect	text67,local,class=CODE,merge=1,delta=2
   182                           	psect	text68,local,class=CODE,merge=1,delta=2
   183                           	psect	text69,local,class=CODE,merge=1,delta=2
   184                           	psect	text70,local,class=CODE,merge=1,delta=2
   185                           	psect	text71,local,class=CODE,merge=1,delta=2
   186                           	psect	text72,local,class=CODE,merge=1,delta=2
   187                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   188                           	psect	text74,local,class=CODE,merge=1,delta=2,group=2
   189                           	psect	text75,local,class=CODE,merge=1,delta=2
   190                           	psect	text76,local,class=CODE,merge=1,delta=2
   191                           	psect	text77,local,class=CODE,merge=1,delta=2
   192                           	psect	text78,local,class=CODE,merge=1,delta=2
   193                           	psect	text79,local,class=CODE,merge=1,delta=2,group=2
   194                           	psect	text80,local,class=CODE,merge=1,delta=2
   195                           	psect	text81,local,class=CODE,merge=1,delta=2
   196                           	psect	text82,local,class=CODE,merge=1,delta=2
   197                           	psect	text83,local,class=CODE,merge=1,delta=2
   198                           	psect	text84,local,class=CODE,merge=1,delta=2
   199                           	psect	text85,local,class=CODE,merge=1,delta=2
   200                           	psect	text86,local,class=CODE,merge=1,delta=2
   201                           	psect	text87,local,class=CODE,merge=1,delta=2
   202                           	psect	text88,local,class=CODE,merge=1,delta=2
   203                           	psect	text89,local,class=CODE,merge=1,delta=2
   204                           	psect	text90,local,class=CODE,merge=1,delta=2
   205                           	psect	text91,local,class=CODE,merge=1,delta=2
   206                           	psect	text92,local,class=CODE,merge=1,delta=2
   207                           	psect	text93,local,class=CODE,merge=1,delta=2
   208                           	psect	text94,local,class=CODE,merge=1,delta=2
   209                           	psect	text95,local,class=CODE,merge=1,delta=2
   210                           	psect	text96,local,class=CODE,merge=1,delta=2
   211                           	psect	text97,local,class=CODE,merge=1,delta=2
   212                           	psect	text98,local,class=CODE,merge=1,delta=2
   213                           	psect	text99,local,class=CODE,merge=1,delta=2
   214                           	psect	text100,local,class=CODE,merge=1,delta=2
   215                           	psect	text101,local,class=CODE,merge=1,delta=2
   216                           	psect	text102,local,class=CODE,merge=1,delta=2
   217                           	psect	intentry,global,class=CODE,delta=2
   218                           	psect	text104,local,class=CODE,merge=1,delta=2
   219                           	psect	text105,local,class=CODE,merge=1,delta=2
   220                           	psect	text106,local,class=CODE,merge=1,delta=2
   221                           	dabs	1,0xCA0,32
   222                           	dabs	1,0xC20,80
   223                           	dabs	1,0xBA0,80
   224                           	dabs	1,0xB30,64
   225                           	dabs	1,0x26F0,0,_asciiCharTableLookup
   226                           	dabs	1,0x7E,2
   227  0000                     
   228                           ; Version 1.42
   229                           ; Generated 13/04/2017 GMT
   230                           ; 
   231                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   232                           ; All rights reserved.
   233                           ; 
   234                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   235                           ; 
   236                           ; Redistribution and use in source and binary forms, with or without modification, are
   237                           ; permitted provided that the following conditions are met:
   238                           ; 
   239                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   240                           ;        conditions and the following disclaimer.
   241                           ; 
   242                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   243                           ;        of conditions and the following disclaimer in the documentation and/or other
   244                           ;        materials provided with the distribution.
   245                           ; 
   246                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   247                           ;        software without specific prior written permission.
   248                           ; 
   249                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   250                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   251                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   252                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   253                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   254                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   255                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   256                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   257                           ; 
   258                           ; 
   259                           ; Code-generator required, PIC16LF18346 Definitions
   260                           ; 
   261                           ; SFR Addresses
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000D                     	;# 
   276  000E                     	;# 
   277  0010                     	;# 
   278  0011                     	;# 
   279  0012                     	;# 
   280  0013                     	;# 
   281  0014                     	;# 
   282  0015                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001C                     	;# 
   293  001D                     	;# 
   294  001E                     	;# 
   295  001F                     	;# 
   296  008C                     	;# 
   297  008D                     	;# 
   298  008E                     	;# 
   299  0090                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0093                     	;# 
   303  0094                     	;# 
   304  0097                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  009F                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  0111                     	;# 
   315  0112                     	;# 
   316  0113                     	;# 
   317  0114                     	;# 
   318  0115                     	;# 
   319  0116                     	;# 
   320  0117                     	;# 
   321  0118                     	;# 
   322  0119                     	;# 
   323  018C                     	;# 
   324  018D                     	;# 
   325  018E                     	;# 
   326  0199                     	;# 
   327  0199                     	;# 
   328  0199                     	;# 
   329  019A                     	;# 
   330  019A                     	;# 
   331  019A                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019C                     	;# 
   340  019D                     	;# 
   341  019D                     	;# 
   342  019D                     	;# 
   343  019E                     	;# 
   344  019E                     	;# 
   345  019E                     	;# 
   346  019F                     	;# 
   347  019F                     	;# 
   348  019F                     	;# 
   349  019F                     	;# 
   350  019F                     	;# 
   351  020C                     	;# 
   352  020D                     	;# 
   353  020E                     	;# 
   354  0211                     	;# 
   355  0211                     	;# 
   356  0212                     	;# 
   357  0212                     	;# 
   358  0213                     	;# 
   359  0213                     	;# 
   360  0214                     	;# 
   361  0214                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0216                     	;# 
   367  0216                     	;# 
   368  0217                     	;# 
   369  0217                     	;# 
   370  0219                     	;# 
   371  021A                     	;# 
   372  021B                     	;# 
   373  021C                     	;# 
   374  021D                     	;# 
   375  021D                     	;# 
   376  021E                     	;# 
   377  021F                     	;# 
   378  028C                     	;# 
   379  028D                     	;# 
   380  028E                     	;# 
   381  0291                     	;# 
   382  0291                     	;# 
   383  0292                     	;# 
   384  0293                     	;# 
   385  0294                     	;# 
   386  0295                     	;# 
   387  0295                     	;# 
   388  0296                     	;# 
   389  0297                     	;# 
   390  0298                     	;# 
   391  029F                     	;# 
   392  030C                     	;# 
   393  030D                     	;# 
   394  030E                     	;# 
   395  0311                     	;# 
   396  0311                     	;# 
   397  0312                     	;# 
   398  0313                     	;# 
   399  0314                     	;# 
   400  0315                     	;# 
   401  0315                     	;# 
   402  0316                     	;# 
   403  0317                     	;# 
   404  0318                     	;# 
   405  038C                     	;# 
   406  038D                     	;# 
   407  038E                     	;# 
   408  0391                     	;# 
   409  0392                     	;# 
   410  0393                     	;# 
   411  0394                     	;# 
   412  0395                     	;# 
   413  0396                     	;# 
   414  0397                     	;# 
   415  0398                     	;# 
   416  0399                     	;# 
   417  039A                     	;# 
   418  039C                     	;# 
   419  039D                     	;# 
   420  039E                     	;# 
   421  039F                     	;# 
   422  0411                     	;# 
   423  0411                     	;# 
   424  0412                     	;# 
   425  0413                     	;# 
   426  0414                     	;# 
   427  0415                     	;# 
   428  0416                     	;# 
   429  0417                     	;# 
   430  0418                     	;# 
   431  0418                     	;# 
   432  0419                     	;# 
   433  041A                     	;# 
   434  041B                     	;# 
   435  041C                     	;# 
   436  041D                     	;# 
   437  041E                     	;# 
   438  041F                     	;# 
   439  0498                     	;# 
   440  0498                     	;# 
   441  0499                     	;# 
   442  049A                     	;# 
   443  049B                     	;# 
   444  049B                     	;# 
   445  049C                     	;# 
   446  049D                     	;# 
   447  049E                     	;# 
   448  049F                     	;# 
   449  0617                     	;# 
   450  0618                     	;# 
   451  0619                     	;# 
   452  0619                     	;# 
   453  061A                     	;# 
   454  061B                     	;# 
   455  061C                     	;# 
   456  061C                     	;# 
   457  061F                     	;# 
   458  0691                     	;# 
   459  0692                     	;# 
   460  0693                     	;# 
   461  0694                     	;# 
   462  0695                     	;# 
   463  0696                     	;# 
   464  0697                     	;# 
   465  0698                     	;# 
   466  0699                     	;# 
   467  0711                     	;# 
   468  0712                     	;# 
   469  0713                     	;# 
   470  0714                     	;# 
   471  0715                     	;# 
   472  0716                     	;# 
   473  0717                     	;# 
   474  0718                     	;# 
   475  0719                     	;# 
   476  0891                     	;# 
   477  0891                     	;# 
   478  0891                     	;# 
   479  0891                     	;# 
   480  0891                     	;# 
   481  0891                     	;# 
   482  0892                     	;# 
   483  0892                     	;# 
   484  0892                     	;# 
   485  0893                     	;# 
   486  0893                     	;# 
   487  0893                     	;# 
   488  0893                     	;# 
   489  0893                     	;# 
   490  0893                     	;# 
   491  0894                     	;# 
   492  0894                     	;# 
   493  0894                     	;# 
   494  0895                     	;# 
   495  0895                     	;# 
   496  0895                     	;# 
   497  0896                     	;# 
   498  0896                     	;# 
   499  0896                     	;# 
   500  089B                     	;# 
   501  0911                     	;# 
   502  0912                     	;# 
   503  0913                     	;# 
   504  0914                     	;# 
   505  0915                     	;# 
   506  0916                     	;# 
   507  0918                     	;# 
   508  0919                     	;# 
   509  091A                     	;# 
   510  091B                     	;# 
   511  091C                     	;# 
   512  091D                     	;# 
   513  091E                     	;# 
   514  091F                     	;# 
   515  0E0F                     	;# 
   516  0E10                     	;# 
   517  0E11                     	;# 
   518  0E12                     	;# 
   519  0E13                     	;# 
   520  0E14                     	;# 
   521  0E15                     	;# 
   522  0E16                     	;# 
   523  0E17                     	;# 
   524  0E18                     	;# 
   525  0E19                     	;# 
   526  0E1A                     	;# 
   527  0E1B                     	;# 
   528  0E1C                     	;# 
   529  0E1D                     	;# 
   530  0E1E                     	;# 
   531  0E1F                     	;# 
   532  0E20                     	;# 
   533  0E21                     	;# 
   534  0E22                     	;# 
   535  0E24                     	;# 
   536  0E25                     	;# 
   537  0E28                     	;# 
   538  0E29                     	;# 
   539  0E2A                     	;# 
   540  0E2B                     	;# 
   541  0E2C                     	;# 
   542  0E2D                     	;# 
   543  0E2E                     	;# 
   544  0E2F                     	;# 
   545  0E90                     	;# 
   546  0E91                     	;# 
   547  0E92                     	;# 
   548  0E94                     	;# 
   549  0E95                     	;# 
   550  0E9C                     	;# 
   551  0E9D                     	;# 
   552  0E9E                     	;# 
   553  0E9F                     	;# 
   554  0EA0                     	;# 
   555  0EA1                     	;# 
   556  0EA2                     	;# 
   557  0EA3                     	;# 
   558  0EA4                     	;# 
   559  0EA5                     	;# 
   560  0EA6                     	;# 
   561  0EA7                     	;# 
   562  0F0F                     	;# 
   563  0F10                     	;# 
   564  0F11                     	;# 
   565  0F12                     	;# 
   566  0F13                     	;# 
   567  0F14                     	;# 
   568  0F15                     	;# 
   569  0F16                     	;# 
   570  0F17                     	;# 
   571  0F18                     	;# 
   572  0F19                     	;# 
   573  0F1A                     	;# 
   574  0F1B                     	;# 
   575  0F1C                     	;# 
   576  0F1D                     	;# 
   577  0F1E                     	;# 
   578  0F1F                     	;# 
   579  0F20                     	;# 
   580  0F21                     	;# 
   581  0F22                     	;# 
   582  0F23                     	;# 
   583  0F24                     	;# 
   584  0F25                     	;# 
   585  0F26                     	;# 
   586  0F27                     	;# 
   587  0F28                     	;# 
   588  0F29                     	;# 
   589  0F2A                     	;# 
   590  0F2B                     	;# 
   591  0F2C                     	;# 
   592  0F2D                     	;# 
   593  0F2E                     	;# 
   594  0F2F                     	;# 
   595  0F30                     	;# 
   596  0F31                     	;# 
   597  0F32                     	;# 
   598  0F33                     	;# 
   599  0F34                     	;# 
   600  0F35                     	;# 
   601  0F36                     	;# 
   602  0F37                     	;# 
   603  0FE4                     	;# 
   604  0FE5                     	;# 
   605  0FE6                     	;# 
   606  0FE7                     	;# 
   607  0FE8                     	;# 
   608  0FE9                     	;# 
   609  0FEA                     	;# 
   610  0FEB                     	;# 
   611  0FED                     	;# 
   612  0FEE                     	;# 
   613  0FEF                     	;# 
   614  0000                     	;# 
   615  0001                     	;# 
   616  0002                     	;# 
   617  0003                     	;# 
   618  0004                     	;# 
   619  0005                     	;# 
   620  0006                     	;# 
   621  0007                     	;# 
   622  0008                     	;# 
   623  0009                     	;# 
   624  000A                     	;# 
   625  000B                     	;# 
   626  000C                     	;# 
   627  000D                     	;# 
   628  000E                     	;# 
   629  0010                     	;# 
   630  0011                     	;# 
   631  0012                     	;# 
   632  0013                     	;# 
   633  0014                     	;# 
   634  0015                     	;# 
   635  0015                     	;# 
   636  0016                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  0019                     	;# 
   642  001A                     	;# 
   643  001B                     	;# 
   644  001C                     	;# 
   645  001D                     	;# 
   646  001E                     	;# 
   647  001F                     	;# 
   648  008C                     	;# 
   649  008D                     	;# 
   650  008E                     	;# 
   651  0090                     	;# 
   652  0091                     	;# 
   653  0092                     	;# 
   654  0093                     	;# 
   655  0094                     	;# 
   656  0097                     	;# 
   657  009B                     	;# 
   658  009B                     	;# 
   659  009C                     	;# 
   660  009D                     	;# 
   661  009E                     	;# 
   662  009F                     	;# 
   663  010C                     	;# 
   664  010D                     	;# 
   665  010E                     	;# 
   666  0111                     	;# 
   667  0112                     	;# 
   668  0113                     	;# 
   669  0114                     	;# 
   670  0115                     	;# 
   671  0116                     	;# 
   672  0117                     	;# 
   673  0118                     	;# 
   674  0119                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  018E                     	;# 
   678  0199                     	;# 
   679  0199                     	;# 
   680  0199                     	;# 
   681  019A                     	;# 
   682  019A                     	;# 
   683  019A                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019B                     	;# 
   688  019B                     	;# 
   689  019C                     	;# 
   690  019C                     	;# 
   691  019C                     	;# 
   692  019D                     	;# 
   693  019D                     	;# 
   694  019D                     	;# 
   695  019E                     	;# 
   696  019E                     	;# 
   697  019E                     	;# 
   698  019F                     	;# 
   699  019F                     	;# 
   700  019F                     	;# 
   701  019F                     	;# 
   702  019F                     	;# 
   703  020C                     	;# 
   704  020D                     	;# 
   705  020E                     	;# 
   706  0211                     	;# 
   707  0211                     	;# 
   708  0212                     	;# 
   709  0212                     	;# 
   710  0213                     	;# 
   711  0213                     	;# 
   712  0214                     	;# 
   713  0214                     	;# 
   714  0215                     	;# 
   715  0215                     	;# 
   716  0215                     	;# 
   717  0215                     	;# 
   718  0216                     	;# 
   719  0216                     	;# 
   720  0217                     	;# 
   721  0217                     	;# 
   722  0219                     	;# 
   723  021A                     	;# 
   724  021B                     	;# 
   725  021C                     	;# 
   726  021D                     	;# 
   727  021D                     	;# 
   728  021E                     	;# 
   729  021F                     	;# 
   730  028C                     	;# 
   731  028D                     	;# 
   732  028E                     	;# 
   733  0291                     	;# 
   734  0291                     	;# 
   735  0292                     	;# 
   736  0293                     	;# 
   737  0294                     	;# 
   738  0295                     	;# 
   739  0295                     	;# 
   740  0296                     	;# 
   741  0297                     	;# 
   742  0298                     	;# 
   743  029F                     	;# 
   744  030C                     	;# 
   745  030D                     	;# 
   746  030E                     	;# 
   747  0311                     	;# 
   748  0311                     	;# 
   749  0312                     	;# 
   750  0313                     	;# 
   751  0314                     	;# 
   752  0315                     	;# 
   753  0315                     	;# 
   754  0316                     	;# 
   755  0317                     	;# 
   756  0318                     	;# 
   757  038C                     	;# 
   758  038D                     	;# 
   759  038E                     	;# 
   760  0391                     	;# 
   761  0392                     	;# 
   762  0393                     	;# 
   763  0394                     	;# 
   764  0395                     	;# 
   765  0396                     	;# 
   766  0397                     	;# 
   767  0398                     	;# 
   768  0399                     	;# 
   769  039A                     	;# 
   770  039C                     	;# 
   771  039D                     	;# 
   772  039E                     	;# 
   773  039F                     	;# 
   774  0411                     	;# 
   775  0411                     	;# 
   776  0412                     	;# 
   777  0413                     	;# 
   778  0414                     	;# 
   779  0415                     	;# 
   780  0416                     	;# 
   781  0417                     	;# 
   782  0418                     	;# 
   783  0418                     	;# 
   784  0419                     	;# 
   785  041A                     	;# 
   786  041B                     	;# 
   787  041C                     	;# 
   788  041D                     	;# 
   789  041E                     	;# 
   790  041F                     	;# 
   791  0498                     	;# 
   792  0498                     	;# 
   793  0499                     	;# 
   794  049A                     	;# 
   795  049B                     	;# 
   796  049B                     	;# 
   797  049C                     	;# 
   798  049D                     	;# 
   799  049E                     	;# 
   800  049F                     	;# 
   801  0617                     	;# 
   802  0618                     	;# 
   803  0619                     	;# 
   804  0619                     	;# 
   805  061A                     	;# 
   806  061B                     	;# 
   807  061C                     	;# 
   808  061C                     	;# 
   809  061F                     	;# 
   810  0691                     	;# 
   811  0692                     	;# 
   812  0693                     	;# 
   813  0694                     	;# 
   814  0695                     	;# 
   815  0696                     	;# 
   816  0697                     	;# 
   817  0698                     	;# 
   818  0699                     	;# 
   819  0711                     	;# 
   820  0712                     	;# 
   821  0713                     	;# 
   822  0714                     	;# 
   823  0715                     	;# 
   824  0716                     	;# 
   825  0717                     	;# 
   826  0718                     	;# 
   827  0719                     	;# 
   828  0891                     	;# 
   829  0891                     	;# 
   830  0891                     	;# 
   831  0891                     	;# 
   832  0891                     	;# 
   833  0891                     	;# 
   834  0892                     	;# 
   835  0892                     	;# 
   836  0892                     	;# 
   837  0893                     	;# 
   838  0893                     	;# 
   839  0893                     	;# 
   840  0893                     	;# 
   841  0893                     	;# 
   842  0893                     	;# 
   843  0894                     	;# 
   844  0894                     	;# 
   845  0894                     	;# 
   846  0895                     	;# 
   847  0895                     	;# 
   848  0895                     	;# 
   849  0896                     	;# 
   850  0896                     	;# 
   851  0896                     	;# 
   852  089B                     	;# 
   853  0911                     	;# 
   854  0912                     	;# 
   855  0913                     	;# 
   856  0914                     	;# 
   857  0915                     	;# 
   858  0916                     	;# 
   859  0918                     	;# 
   860  0919                     	;# 
   861  091A                     	;# 
   862  091B                     	;# 
   863  091C                     	;# 
   864  091D                     	;# 
   865  091E                     	;# 
   866  091F                     	;# 
   867  0E0F                     	;# 
   868  0E10                     	;# 
   869  0E11                     	;# 
   870  0E12                     	;# 
   871  0E13                     	;# 
   872  0E14                     	;# 
   873  0E15                     	;# 
   874  0E16                     	;# 
   875  0E17                     	;# 
   876  0E18                     	;# 
   877  0E19                     	;# 
   878  0E1A                     	;# 
   879  0E1B                     	;# 
   880  0E1C                     	;# 
   881  0E1D                     	;# 
   882  0E1E                     	;# 
   883  0E1F                     	;# 
   884  0E20                     	;# 
   885  0E21                     	;# 
   886  0E22                     	;# 
   887  0E24                     	;# 
   888  0E25                     	;# 
   889  0E28                     	;# 
   890  0E29                     	;# 
   891  0E2A                     	;# 
   892  0E2B                     	;# 
   893  0E2C                     	;# 
   894  0E2D                     	;# 
   895  0E2E                     	;# 
   896  0E2F                     	;# 
   897  0E90                     	;# 
   898  0E91                     	;# 
   899  0E92                     	;# 
   900  0E94                     	;# 
   901  0E95                     	;# 
   902  0E9C                     	;# 
   903  0E9D                     	;# 
   904  0E9E                     	;# 
   905  0E9F                     	;# 
   906  0EA0                     	;# 
   907  0EA1                     	;# 
   908  0EA2                     	;# 
   909  0EA3                     	;# 
   910  0EA4                     	;# 
   911  0EA5                     	;# 
   912  0EA6                     	;# 
   913  0EA7                     	;# 
   914  0F0F                     	;# 
   915  0F10                     	;# 
   916  0F11                     	;# 
   917  0F12                     	;# 
   918  0F13                     	;# 
   919  0F14                     	;# 
   920  0F15                     	;# 
   921  0F16                     	;# 
   922  0F17                     	;# 
   923  0F18                     	;# 
   924  0F19                     	;# 
   925  0F1A                     	;# 
   926  0F1B                     	;# 
   927  0F1C                     	;# 
   928  0F1D                     	;# 
   929  0F1E                     	;# 
   930  0F1F                     	;# 
   931  0F20                     	;# 
   932  0F21                     	;# 
   933  0F22                     	;# 
   934  0F23                     	;# 
   935  0F24                     	;# 
   936  0F25                     	;# 
   937  0F26                     	;# 
   938  0F27                     	;# 
   939  0F28                     	;# 
   940  0F29                     	;# 
   941  0F2A                     	;# 
   942  0F2B                     	;# 
   943  0F2C                     	;# 
   944  0F2D                     	;# 
   945  0F2E                     	;# 
   946  0F2F                     	;# 
   947  0F30                     	;# 
   948  0F31                     	;# 
   949  0F32                     	;# 
   950  0F33                     	;# 
   951  0F34                     	;# 
   952  0F35                     	;# 
   953  0F36                     	;# 
   954  0F37                     	;# 
   955  0FE4                     	;# 
   956  0FE5                     	;# 
   957  0FE6                     	;# 
   958  0FE7                     	;# 
   959  0FE8                     	;# 
   960  0FE9                     	;# 
   961  0FEA                     	;# 
   962  0FEB                     	;# 
   963  0FED                     	;# 
   964  0FEE                     	;# 
   965  0FEF                     	;# 
   966  0000                     	;# 
   967  0001                     	;# 
   968  0002                     	;# 
   969  0003                     	;# 
   970  0004                     	;# 
   971  0005                     	;# 
   972  0006                     	;# 
   973  0007                     	;# 
   974  0008                     	;# 
   975  0009                     	;# 
   976  000A                     	;# 
   977  000B                     	;# 
   978  000C                     	;# 
   979  000D                     	;# 
   980  000E                     	;# 
   981  0010                     	;# 
   982  0011                     	;# 
   983  0012                     	;# 
   984  0013                     	;# 
   985  0014                     	;# 
   986  0015                     	;# 
   987  0015                     	;# 
   988  0016                     	;# 
   989  0016                     	;# 
   990  0017                     	;# 
   991  0018                     	;# 
   992  0019                     	;# 
   993  0019                     	;# 
   994  001A                     	;# 
   995  001B                     	;# 
   996  001C                     	;# 
   997  001D                     	;# 
   998  001E                     	;# 
   999  001F                     	;# 
  1000  008C                     	;# 
  1001  008D                     	;# 
  1002  008E                     	;# 
  1003  0090                     	;# 
  1004  0091                     	;# 
  1005  0092                     	;# 
  1006  0093                     	;# 
  1007  0094                     	;# 
  1008  0097                     	;# 
  1009  009B                     	;# 
  1010  009B                     	;# 
  1011  009C                     	;# 
  1012  009D                     	;# 
  1013  009E                     	;# 
  1014  009F                     	;# 
  1015  010C                     	;# 
  1016  010D                     	;# 
  1017  010E                     	;# 
  1018  0111                     	;# 
  1019  0112                     	;# 
  1020  0113                     	;# 
  1021  0114                     	;# 
  1022  0115                     	;# 
  1023  0116                     	;# 
  1024  0117                     	;# 
  1025  0118                     	;# 
  1026  0119                     	;# 
  1027  018C                     	;# 
  1028  018D                     	;# 
  1029  018E                     	;# 
  1030  0199                     	;# 
  1031  0199                     	;# 
  1032  0199                     	;# 
  1033  019A                     	;# 
  1034  019A                     	;# 
  1035  019A                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019B                     	;# 
  1041  019C                     	;# 
  1042  019C                     	;# 
  1043  019C                     	;# 
  1044  019D                     	;# 
  1045  019D                     	;# 
  1046  019D                     	;# 
  1047  019E                     	;# 
  1048  019E                     	;# 
  1049  019E                     	;# 
  1050  019F                     	;# 
  1051  019F                     	;# 
  1052  019F                     	;# 
  1053  019F                     	;# 
  1054  019F                     	;# 
  1055  020C                     	;# 
  1056  020D                     	;# 
  1057  020E                     	;# 
  1058  0211                     	;# 
  1059  0211                     	;# 
  1060  0212                     	;# 
  1061  0212                     	;# 
  1062  0213                     	;# 
  1063  0213                     	;# 
  1064  0214                     	;# 
  1065  0214                     	;# 
  1066  0215                     	;# 
  1067  0215                     	;# 
  1068  0215                     	;# 
  1069  0215                     	;# 
  1070  0216                     	;# 
  1071  0216                     	;# 
  1072  0217                     	;# 
  1073  0217                     	;# 
  1074  0219                     	;# 
  1075  021A                     	;# 
  1076  021B                     	;# 
  1077  021C                     	;# 
  1078  021D                     	;# 
  1079  021D                     	;# 
  1080  021E                     	;# 
  1081  021F                     	;# 
  1082  028C                     	;# 
  1083  028D                     	;# 
  1084  028E                     	;# 
  1085  0291                     	;# 
  1086  0291                     	;# 
  1087  0292                     	;# 
  1088  0293                     	;# 
  1089  0294                     	;# 
  1090  0295                     	;# 
  1091  0295                     	;# 
  1092  0296                     	;# 
  1093  0297                     	;# 
  1094  0298                     	;# 
  1095  029F                     	;# 
  1096  030C                     	;# 
  1097  030D                     	;# 
  1098  030E                     	;# 
  1099  0311                     	;# 
  1100  0311                     	;# 
  1101  0312                     	;# 
  1102  0313                     	;# 
  1103  0314                     	;# 
  1104  0315                     	;# 
  1105  0315                     	;# 
  1106  0316                     	;# 
  1107  0317                     	;# 
  1108  0318                     	;# 
  1109  038C                     	;# 
  1110  038D                     	;# 
  1111  038E                     	;# 
  1112  0391                     	;# 
  1113  0392                     	;# 
  1114  0393                     	;# 
  1115  0394                     	;# 
  1116  0395                     	;# 
  1117  0396                     	;# 
  1118  0397                     	;# 
  1119  0398                     	;# 
  1120  0399                     	;# 
  1121  039A                     	;# 
  1122  039C                     	;# 
  1123  039D                     	;# 
  1124  039E                     	;# 
  1125  039F                     	;# 
  1126  0411                     	;# 
  1127  0411                     	;# 
  1128  0412                     	;# 
  1129  0413                     	;# 
  1130  0414                     	;# 
  1131  0415                     	;# 
  1132  0416                     	;# 
  1133  0417                     	;# 
  1134  0418                     	;# 
  1135  0418                     	;# 
  1136  0419                     	;# 
  1137  041A                     	;# 
  1138  041B                     	;# 
  1139  041C                     	;# 
  1140  041D                     	;# 
  1141  041E                     	;# 
  1142  041F                     	;# 
  1143  0498                     	;# 
  1144  0498                     	;# 
  1145  0499                     	;# 
  1146  049A                     	;# 
  1147  049B                     	;# 
  1148  049B                     	;# 
  1149  049C                     	;# 
  1150  049D                     	;# 
  1151  049E                     	;# 
  1152  049F                     	;# 
  1153  0617                     	;# 
  1154  0618                     	;# 
  1155  0619                     	;# 
  1156  0619                     	;# 
  1157  061A                     	;# 
  1158  061B                     	;# 
  1159  061C                     	;# 
  1160  061C                     	;# 
  1161  061F                     	;# 
  1162  0691                     	;# 
  1163  0692                     	;# 
  1164  0693                     	;# 
  1165  0694                     	;# 
  1166  0695                     	;# 
  1167  0696                     	;# 
  1168  0697                     	;# 
  1169  0698                     	;# 
  1170  0699                     	;# 
  1171  0711                     	;# 
  1172  0712                     	;# 
  1173  0713                     	;# 
  1174  0714                     	;# 
  1175  0715                     	;# 
  1176  0716                     	;# 
  1177  0717                     	;# 
  1178  0718                     	;# 
  1179  0719                     	;# 
  1180  0891                     	;# 
  1181  0891                     	;# 
  1182  0891                     	;# 
  1183  0891                     	;# 
  1184  0891                     	;# 
  1185  0891                     	;# 
  1186  0892                     	;# 
  1187  0892                     	;# 
  1188  0892                     	;# 
  1189  0893                     	;# 
  1190  0893                     	;# 
  1191  0893                     	;# 
  1192  0893                     	;# 
  1193  0893                     	;# 
  1194  0893                     	;# 
  1195  0894                     	;# 
  1196  0894                     	;# 
  1197  0894                     	;# 
  1198  0895                     	;# 
  1199  0895                     	;# 
  1200  0895                     	;# 
  1201  0896                     	;# 
  1202  0896                     	;# 
  1203  0896                     	;# 
  1204  089B                     	;# 
  1205  0911                     	;# 
  1206  0912                     	;# 
  1207  0913                     	;# 
  1208  0914                     	;# 
  1209  0915                     	;# 
  1210  0916                     	;# 
  1211  0918                     	;# 
  1212  0919                     	;# 
  1213  091A                     	;# 
  1214  091B                     	;# 
  1215  091C                     	;# 
  1216  091D                     	;# 
  1217  091E                     	;# 
  1218  091F                     	;# 
  1219  0E0F                     	;# 
  1220  0E10                     	;# 
  1221  0E11                     	;# 
  1222  0E12                     	;# 
  1223  0E13                     	;# 
  1224  0E14                     	;# 
  1225  0E15                     	;# 
  1226  0E16                     	;# 
  1227  0E17                     	;# 
  1228  0E18                     	;# 
  1229  0E19                     	;# 
  1230  0E1A                     	;# 
  1231  0E1B                     	;# 
  1232  0E1C                     	;# 
  1233  0E1D                     	;# 
  1234  0E1E                     	;# 
  1235  0E1F                     	;# 
  1236  0E20                     	;# 
  1237  0E21                     	;# 
  1238  0E22                     	;# 
  1239  0E24                     	;# 
  1240  0E25                     	;# 
  1241  0E28                     	;# 
  1242  0E29                     	;# 
  1243  0E2A                     	;# 
  1244  0E2B                     	;# 
  1245  0E2C                     	;# 
  1246  0E2D                     	;# 
  1247  0E2E                     	;# 
  1248  0E2F                     	;# 
  1249  0E90                     	;# 
  1250  0E91                     	;# 
  1251  0E92                     	;# 
  1252  0E94                     	;# 
  1253  0E95                     	;# 
  1254  0E9C                     	;# 
  1255  0E9D                     	;# 
  1256  0E9E                     	;# 
  1257  0E9F                     	;# 
  1258  0EA0                     	;# 
  1259  0EA1                     	;# 
  1260  0EA2                     	;# 
  1261  0EA3                     	;# 
  1262  0EA4                     	;# 
  1263  0EA5                     	;# 
  1264  0EA6                     	;# 
  1265  0EA7                     	;# 
  1266  0F0F                     	;# 
  1267  0F10                     	;# 
  1268  0F11                     	;# 
  1269  0F12                     	;# 
  1270  0F13                     	;# 
  1271  0F14                     	;# 
  1272  0F15                     	;# 
  1273  0F16                     	;# 
  1274  0F17                     	;# 
  1275  0F18                     	;# 
  1276  0F19                     	;# 
  1277  0F1A                     	;# 
  1278  0F1B                     	;# 
  1279  0F1C                     	;# 
  1280  0F1D                     	;# 
  1281  0F1E                     	;# 
  1282  0F1F                     	;# 
  1283  0F20                     	;# 
  1284  0F21                     	;# 
  1285  0F22                     	;# 
  1286  0F23                     	;# 
  1287  0F24                     	;# 
  1288  0F25                     	;# 
  1289  0F26                     	;# 
  1290  0F27                     	;# 
  1291  0F28                     	;# 
  1292  0F29                     	;# 
  1293  0F2A                     	;# 
  1294  0F2B                     	;# 
  1295  0F2C                     	;# 
  1296  0F2D                     	;# 
  1297  0F2E                     	;# 
  1298  0F2F                     	;# 
  1299  0F30                     	;# 
  1300  0F31                     	;# 
  1301  0F32                     	;# 
  1302  0F33                     	;# 
  1303  0F34                     	;# 
  1304  0F35                     	;# 
  1305  0F36                     	;# 
  1306  0F37                     	;# 
  1307  0FE4                     	;# 
  1308  0FE5                     	;# 
  1309  0FE6                     	;# 
  1310  0FE7                     	;# 
  1311  0FE8                     	;# 
  1312  0FE9                     	;# 
  1313  0FEA                     	;# 
  1314  0FEB                     	;# 
  1315  0FED                     	;# 
  1316  0FEE                     	;# 
  1317  0FEF                     	;# 
  1318  0000                     	;# 
  1319  0001                     	;# 
  1320  0002                     	;# 
  1321  0003                     	;# 
  1322  0004                     	;# 
  1323  0005                     	;# 
  1324  0006                     	;# 
  1325  0007                     	;# 
  1326  0008                     	;# 
  1327  0009                     	;# 
  1328  000A                     	;# 
  1329  000B                     	;# 
  1330  000C                     	;# 
  1331  000D                     	;# 
  1332  000E                     	;# 
  1333  0010                     	;# 
  1334  0011                     	;# 
  1335  0012                     	;# 
  1336  0013                     	;# 
  1337  0014                     	;# 
  1338  0015                     	;# 
  1339  0015                     	;# 
  1340  0016                     	;# 
  1341  0016                     	;# 
  1342  0017                     	;# 
  1343  0018                     	;# 
  1344  0019                     	;# 
  1345  0019                     	;# 
  1346  001A                     	;# 
  1347  001B                     	;# 
  1348  001C                     	;# 
  1349  001D                     	;# 
  1350  001E                     	;# 
  1351  001F                     	;# 
  1352  008C                     	;# 
  1353  008D                     	;# 
  1354  008E                     	;# 
  1355  0090                     	;# 
  1356  0091                     	;# 
  1357  0092                     	;# 
  1358  0093                     	;# 
  1359  0094                     	;# 
  1360  0097                     	;# 
  1361  009B                     	;# 
  1362  009B                     	;# 
  1363  009C                     	;# 
  1364  009D                     	;# 
  1365  009E                     	;# 
  1366  009F                     	;# 
  1367  010C                     	;# 
  1368  010D                     	;# 
  1369  010E                     	;# 
  1370  0111                     	;# 
  1371  0112                     	;# 
  1372  0113                     	;# 
  1373  0114                     	;# 
  1374  0115                     	;# 
  1375  0116                     	;# 
  1376  0117                     	;# 
  1377  0118                     	;# 
  1378  0119                     	;# 
  1379  018C                     	;# 
  1380  018D                     	;# 
  1381  018E                     	;# 
  1382  0199                     	;# 
  1383  0199                     	;# 
  1384  0199                     	;# 
  1385  019A                     	;# 
  1386  019A                     	;# 
  1387  019A                     	;# 
  1388  019B                     	;# 
  1389  019B                     	;# 
  1390  019B                     	;# 
  1391  019B                     	;# 
  1392  019B                     	;# 
  1393  019C                     	;# 
  1394  019C                     	;# 
  1395  019C                     	;# 
  1396  019D                     	;# 
  1397  019D                     	;# 
  1398  019D                     	;# 
  1399  019E                     	;# 
  1400  019E                     	;# 
  1401  019E                     	;# 
  1402  019F                     	;# 
  1403  019F                     	;# 
  1404  019F                     	;# 
  1405  019F                     	;# 
  1406  019F                     	;# 
  1407  020C                     	;# 
  1408  020D                     	;# 
  1409  020E                     	;# 
  1410  0211                     	;# 
  1411  0211                     	;# 
  1412  0212                     	;# 
  1413  0212                     	;# 
  1414  0213                     	;# 
  1415  0213                     	;# 
  1416  0214                     	;# 
  1417  0214                     	;# 
  1418  0215                     	;# 
  1419  0215                     	;# 
  1420  0215                     	;# 
  1421  0215                     	;# 
  1422  0216                     	;# 
  1423  0216                     	;# 
  1424  0217                     	;# 
  1425  0217                     	;# 
  1426  0219                     	;# 
  1427  021A                     	;# 
  1428  021B                     	;# 
  1429  021C                     	;# 
  1430  021D                     	;# 
  1431  021D                     	;# 
  1432  021E                     	;# 
  1433  021F                     	;# 
  1434  028C                     	;# 
  1435  028D                     	;# 
  1436  028E                     	;# 
  1437  0291                     	;# 
  1438  0291                     	;# 
  1439  0292                     	;# 
  1440  0293                     	;# 
  1441  0294                     	;# 
  1442  0295                     	;# 
  1443  0295                     	;# 
  1444  0296                     	;# 
  1445  0297                     	;# 
  1446  0298                     	;# 
  1447  029F                     	;# 
  1448  030C                     	;# 
  1449  030D                     	;# 
  1450  030E                     	;# 
  1451  0311                     	;# 
  1452  0311                     	;# 
  1453  0312                     	;# 
  1454  0313                     	;# 
  1455  0314                     	;# 
  1456  0315                     	;# 
  1457  0315                     	;# 
  1458  0316                     	;# 
  1459  0317                     	;# 
  1460  0318                     	;# 
  1461  038C                     	;# 
  1462  038D                     	;# 
  1463  038E                     	;# 
  1464  0391                     	;# 
  1465  0392                     	;# 
  1466  0393                     	;# 
  1467  0394                     	;# 
  1468  0395                     	;# 
  1469  0396                     	;# 
  1470  0397                     	;# 
  1471  0398                     	;# 
  1472  0399                     	;# 
  1473  039A                     	;# 
  1474  039C                     	;# 
  1475  039D                     	;# 
  1476  039E                     	;# 
  1477  039F                     	;# 
  1478  0411                     	;# 
  1479  0411                     	;# 
  1480  0412                     	;# 
  1481  0413                     	;# 
  1482  0414                     	;# 
  1483  0415                     	;# 
  1484  0416                     	;# 
  1485  0417                     	;# 
  1486  0418                     	;# 
  1487  0418                     	;# 
  1488  0419                     	;# 
  1489  041A                     	;# 
  1490  041B                     	;# 
  1491  041C                     	;# 
  1492  041D                     	;# 
  1493  041E                     	;# 
  1494  041F                     	;# 
  1495  0498                     	;# 
  1496  0498                     	;# 
  1497  0499                     	;# 
  1498  049A                     	;# 
  1499  049B                     	;# 
  1500  049B                     	;# 
  1501  049C                     	;# 
  1502  049D                     	;# 
  1503  049E                     	;# 
  1504  049F                     	;# 
  1505  0617                     	;# 
  1506  0618                     	;# 
  1507  0619                     	;# 
  1508  0619                     	;# 
  1509  061A                     	;# 
  1510  061B                     	;# 
  1511  061C                     	;# 
  1512  061C                     	;# 
  1513  061F                     	;# 
  1514  0691                     	;# 
  1515  0692                     	;# 
  1516  0693                     	;# 
  1517  0694                     	;# 
  1518  0695                     	;# 
  1519  0696                     	;# 
  1520  0697                     	;# 
  1521  0698                     	;# 
  1522  0699                     	;# 
  1523  0711                     	;# 
  1524  0712                     	;# 
  1525  0713                     	;# 
  1526  0714                     	;# 
  1527  0715                     	;# 
  1528  0716                     	;# 
  1529  0717                     	;# 
  1530  0718                     	;# 
  1531  0719                     	;# 
  1532  0891                     	;# 
  1533  0891                     	;# 
  1534  0891                     	;# 
  1535  0891                     	;# 
  1536  0891                     	;# 
  1537  0891                     	;# 
  1538  0892                     	;# 
  1539  0892                     	;# 
  1540  0892                     	;# 
  1541  0893                     	;# 
  1542  0893                     	;# 
  1543  0893                     	;# 
  1544  0893                     	;# 
  1545  0893                     	;# 
  1546  0893                     	;# 
  1547  0894                     	;# 
  1548  0894                     	;# 
  1549  0894                     	;# 
  1550  0895                     	;# 
  1551  0895                     	;# 
  1552  0895                     	;# 
  1553  0896                     	;# 
  1554  0896                     	;# 
  1555  0896                     	;# 
  1556  089B                     	;# 
  1557  0911                     	;# 
  1558  0912                     	;# 
  1559  0913                     	;# 
  1560  0914                     	;# 
  1561  0915                     	;# 
  1562  0916                     	;# 
  1563  0918                     	;# 
  1564  0919                     	;# 
  1565  091A                     	;# 
  1566  091B                     	;# 
  1567  091C                     	;# 
  1568  091D                     	;# 
  1569  091E                     	;# 
  1570  091F                     	;# 
  1571  0E0F                     	;# 
  1572  0E10                     	;# 
  1573  0E11                     	;# 
  1574  0E12                     	;# 
  1575  0E13                     	;# 
  1576  0E14                     	;# 
  1577  0E15                     	;# 
  1578  0E16                     	;# 
  1579  0E17                     	;# 
  1580  0E18                     	;# 
  1581  0E19                     	;# 
  1582  0E1A                     	;# 
  1583  0E1B                     	;# 
  1584  0E1C                     	;# 
  1585  0E1D                     	;# 
  1586  0E1E                     	;# 
  1587  0E1F                     	;# 
  1588  0E20                     	;# 
  1589  0E21                     	;# 
  1590  0E22                     	;# 
  1591  0E24                     	;# 
  1592  0E25                     	;# 
  1593  0E28                     	;# 
  1594  0E29                     	;# 
  1595  0E2A                     	;# 
  1596  0E2B                     	;# 
  1597  0E2C                     	;# 
  1598  0E2D                     	;# 
  1599  0E2E                     	;# 
  1600  0E2F                     	;# 
  1601  0E90                     	;# 
  1602  0E91                     	;# 
  1603  0E92                     	;# 
  1604  0E94                     	;# 
  1605  0E95                     	;# 
  1606  0E9C                     	;# 
  1607  0E9D                     	;# 
  1608  0E9E                     	;# 
  1609  0E9F                     	;# 
  1610  0EA0                     	;# 
  1611  0EA1                     	;# 
  1612  0EA2                     	;# 
  1613  0EA3                     	;# 
  1614  0EA4                     	;# 
  1615  0EA5                     	;# 
  1616  0EA6                     	;# 
  1617  0EA7                     	;# 
  1618  0F0F                     	;# 
  1619  0F10                     	;# 
  1620  0F11                     	;# 
  1621  0F12                     	;# 
  1622  0F13                     	;# 
  1623  0F14                     	;# 
  1624  0F15                     	;# 
  1625  0F16                     	;# 
  1626  0F17                     	;# 
  1627  0F18                     	;# 
  1628  0F19                     	;# 
  1629  0F1A                     	;# 
  1630  0F1B                     	;# 
  1631  0F1C                     	;# 
  1632  0F1D                     	;# 
  1633  0F1E                     	;# 
  1634  0F1F                     	;# 
  1635  0F20                     	;# 
  1636  0F21                     	;# 
  1637  0F22                     	;# 
  1638  0F23                     	;# 
  1639  0F24                     	;# 
  1640  0F25                     	;# 
  1641  0F26                     	;# 
  1642  0F27                     	;# 
  1643  0F28                     	;# 
  1644  0F29                     	;# 
  1645  0F2A                     	;# 
  1646  0F2B                     	;# 
  1647  0F2C                     	;# 
  1648  0F2D                     	;# 
  1649  0F2E                     	;# 
  1650  0F2F                     	;# 
  1651  0F30                     	;# 
  1652  0F31                     	;# 
  1653  0F32                     	;# 
  1654  0F33                     	;# 
  1655  0F34                     	;# 
  1656  0F35                     	;# 
  1657  0F36                     	;# 
  1658  0F37                     	;# 
  1659  0FE4                     	;# 
  1660  0FE5                     	;# 
  1661  0FE6                     	;# 
  1662  0FE7                     	;# 
  1663  0FE8                     	;# 
  1664  0FE9                     	;# 
  1665  0FEA                     	;# 
  1666  0FEB                     	;# 
  1667  0FED                     	;# 
  1668  0FEE                     	;# 
  1669  0FEF                     	;# 
  1670  0000                     	;# 
  1671  0001                     	;# 
  1672  0002                     	;# 
  1673  0003                     	;# 
  1674  0004                     	;# 
  1675  0005                     	;# 
  1676  0006                     	;# 
  1677  0007                     	;# 
  1678  0008                     	;# 
  1679  0009                     	;# 
  1680  000A                     	;# 
  1681  000B                     	;# 
  1682  000C                     	;# 
  1683  000D                     	;# 
  1684  000E                     	;# 
  1685  0010                     	;# 
  1686  0011                     	;# 
  1687  0012                     	;# 
  1688  0013                     	;# 
  1689  0014                     	;# 
  1690  0015                     	;# 
  1691  0015                     	;# 
  1692  0016                     	;# 
  1693  0016                     	;# 
  1694  0017                     	;# 
  1695  0018                     	;# 
  1696  0019                     	;# 
  1697  0019                     	;# 
  1698  001A                     	;# 
  1699  001B                     	;# 
  1700  001C                     	;# 
  1701  001D                     	;# 
  1702  001E                     	;# 
  1703  001F                     	;# 
  1704  008C                     	;# 
  1705  008D                     	;# 
  1706  008E                     	;# 
  1707  0090                     	;# 
  1708  0091                     	;# 
  1709  0092                     	;# 
  1710  0093                     	;# 
  1711  0094                     	;# 
  1712  0097                     	;# 
  1713  009B                     	;# 
  1714  009B                     	;# 
  1715  009C                     	;# 
  1716  009D                     	;# 
  1717  009E                     	;# 
  1718  009F                     	;# 
  1719  010C                     	;# 
  1720  010D                     	;# 
  1721  010E                     	;# 
  1722  0111                     	;# 
  1723  0112                     	;# 
  1724  0113                     	;# 
  1725  0114                     	;# 
  1726  0115                     	;# 
  1727  0116                     	;# 
  1728  0117                     	;# 
  1729  0118                     	;# 
  1730  0119                     	;# 
  1731  018C                     	;# 
  1732  018D                     	;# 
  1733  018E                     	;# 
  1734  0199                     	;# 
  1735  0199                     	;# 
  1736  0199                     	;# 
  1737  019A                     	;# 
  1738  019A                     	;# 
  1739  019A                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019B                     	;# 
  1745  019C                     	;# 
  1746  019C                     	;# 
  1747  019C                     	;# 
  1748  019D                     	;# 
  1749  019D                     	;# 
  1750  019D                     	;# 
  1751  019E                     	;# 
  1752  019E                     	;# 
  1753  019E                     	;# 
  1754  019F                     	;# 
  1755  019F                     	;# 
  1756  019F                     	;# 
  1757  019F                     	;# 
  1758  019F                     	;# 
  1759  020C                     	;# 
  1760  020D                     	;# 
  1761  020E                     	;# 
  1762  0211                     	;# 
  1763  0211                     	;# 
  1764  0212                     	;# 
  1765  0212                     	;# 
  1766  0213                     	;# 
  1767  0213                     	;# 
  1768  0214                     	;# 
  1769  0214                     	;# 
  1770  0215                     	;# 
  1771  0215                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0216                     	;# 
  1775  0216                     	;# 
  1776  0217                     	;# 
  1777  0217                     	;# 
  1778  0219                     	;# 
  1779  021A                     	;# 
  1780  021B                     	;# 
  1781  021C                     	;# 
  1782  021D                     	;# 
  1783  021D                     	;# 
  1784  021E                     	;# 
  1785  021F                     	;# 
  1786  028C                     	;# 
  1787  028D                     	;# 
  1788  028E                     	;# 
  1789  0291                     	;# 
  1790  0291                     	;# 
  1791  0292                     	;# 
  1792  0293                     	;# 
  1793  0294                     	;# 
  1794  0295                     	;# 
  1795  0295                     	;# 
  1796  0296                     	;# 
  1797  0297                     	;# 
  1798  0298                     	;# 
  1799  029F                     	;# 
  1800  030C                     	;# 
  1801  030D                     	;# 
  1802  030E                     	;# 
  1803  0311                     	;# 
  1804  0311                     	;# 
  1805  0312                     	;# 
  1806  0313                     	;# 
  1807  0314                     	;# 
  1808  0315                     	;# 
  1809  0315                     	;# 
  1810  0316                     	;# 
  1811  0317                     	;# 
  1812  0318                     	;# 
  1813  038C                     	;# 
  1814  038D                     	;# 
  1815  038E                     	;# 
  1816  0391                     	;# 
  1817  0392                     	;# 
  1818  0393                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0397                     	;# 
  1823  0398                     	;# 
  1824  0399                     	;# 
  1825  039A                     	;# 
  1826  039C                     	;# 
  1827  039D                     	;# 
  1828  039E                     	;# 
  1829  039F                     	;# 
  1830  0411                     	;# 
  1831  0411                     	;# 
  1832  0412                     	;# 
  1833  0413                     	;# 
  1834  0414                     	;# 
  1835  0415                     	;# 
  1836  0416                     	;# 
  1837  0417                     	;# 
  1838  0418                     	;# 
  1839  0418                     	;# 
  1840  0419                     	;# 
  1841  041A                     	;# 
  1842  041B                     	;# 
  1843  041C                     	;# 
  1844  041D                     	;# 
  1845  041E                     	;# 
  1846  041F                     	;# 
  1847  0498                     	;# 
  1848  0498                     	;# 
  1849  0499                     	;# 
  1850  049A                     	;# 
  1851  049B                     	;# 
  1852  049B                     	;# 
  1853  049C                     	;# 
  1854  049D                     	;# 
  1855  049E                     	;# 
  1856  049F                     	;# 
  1857  0617                     	;# 
  1858  0618                     	;# 
  1859  0619                     	;# 
  1860  0619                     	;# 
  1861  061A                     	;# 
  1862  061B                     	;# 
  1863  061C                     	;# 
  1864  061C                     	;# 
  1865  061F                     	;# 
  1866  0691                     	;# 
  1867  0692                     	;# 
  1868  0693                     	;# 
  1869  0694                     	;# 
  1870  0695                     	;# 
  1871  0696                     	;# 
  1872  0697                     	;# 
  1873  0698                     	;# 
  1874  0699                     	;# 
  1875  0711                     	;# 
  1876  0712                     	;# 
  1877  0713                     	;# 
  1878  0714                     	;# 
  1879  0715                     	;# 
  1880  0716                     	;# 
  1881  0717                     	;# 
  1882  0718                     	;# 
  1883  0719                     	;# 
  1884  0891                     	;# 
  1885  0891                     	;# 
  1886  0891                     	;# 
  1887  0891                     	;# 
  1888  0891                     	;# 
  1889  0891                     	;# 
  1890  0892                     	;# 
  1891  0892                     	;# 
  1892  0892                     	;# 
  1893  0893                     	;# 
  1894  0893                     	;# 
  1895  0893                     	;# 
  1896  0893                     	;# 
  1897  0893                     	;# 
  1898  0893                     	;# 
  1899  0894                     	;# 
  1900  0894                     	;# 
  1901  0894                     	;# 
  1902  0895                     	;# 
  1903  0895                     	;# 
  1904  0895                     	;# 
  1905  0896                     	;# 
  1906  0896                     	;# 
  1907  0896                     	;# 
  1908  089B                     	;# 
  1909  0911                     	;# 
  1910  0912                     	;# 
  1911  0913                     	;# 
  1912  0914                     	;# 
  1913  0915                     	;# 
  1914  0916                     	;# 
  1915  0918                     	;# 
  1916  0919                     	;# 
  1917  091A                     	;# 
  1918  091B                     	;# 
  1919  091C                     	;# 
  1920  091D                     	;# 
  1921  091E                     	;# 
  1922  091F                     	;# 
  1923  0E0F                     	;# 
  1924  0E10                     	;# 
  1925  0E11                     	;# 
  1926  0E12                     	;# 
  1927  0E13                     	;# 
  1928  0E14                     	;# 
  1929  0E15                     	;# 
  1930  0E16                     	;# 
  1931  0E17                     	;# 
  1932  0E18                     	;# 
  1933  0E19                     	;# 
  1934  0E1A                     	;# 
  1935  0E1B                     	;# 
  1936  0E1C                     	;# 
  1937  0E1D                     	;# 
  1938  0E1E                     	;# 
  1939  0E1F                     	;# 
  1940  0E20                     	;# 
  1941  0E21                     	;# 
  1942  0E22                     	;# 
  1943  0E24                     	;# 
  1944  0E25                     	;# 
  1945  0E28                     	;# 
  1946  0E29                     	;# 
  1947  0E2A                     	;# 
  1948  0E2B                     	;# 
  1949  0E2C                     	;# 
  1950  0E2D                     	;# 
  1951  0E2E                     	;# 
  1952  0E2F                     	;# 
  1953  0E90                     	;# 
  1954  0E91                     	;# 
  1955  0E92                     	;# 
  1956  0E94                     	;# 
  1957  0E95                     	;# 
  1958  0E9C                     	;# 
  1959  0E9D                     	;# 
  1960  0E9E                     	;# 
  1961  0E9F                     	;# 
  1962  0EA0                     	;# 
  1963  0EA1                     	;# 
  1964  0EA2                     	;# 
  1965  0EA3                     	;# 
  1966  0EA4                     	;# 
  1967  0EA5                     	;# 
  1968  0EA6                     	;# 
  1969  0EA7                     	;# 
  1970  0F0F                     	;# 
  1971  0F10                     	;# 
  1972  0F11                     	;# 
  1973  0F12                     	;# 
  1974  0F13                     	;# 
  1975  0F14                     	;# 
  1976  0F15                     	;# 
  1977  0F16                     	;# 
  1978  0F17                     	;# 
  1979  0F18                     	;# 
  1980  0F19                     	;# 
  1981  0F1A                     	;# 
  1982  0F1B                     	;# 
  1983  0F1C                     	;# 
  1984  0F1D                     	;# 
  1985  0F1E                     	;# 
  1986  0F1F                     	;# 
  1987  0F20                     	;# 
  1988  0F21                     	;# 
  1989  0F22                     	;# 
  1990  0F23                     	;# 
  1991  0F24                     	;# 
  1992  0F25                     	;# 
  1993  0F26                     	;# 
  1994  0F27                     	;# 
  1995  0F28                     	;# 
  1996  0F29                     	;# 
  1997  0F2A                     	;# 
  1998  0F2B                     	;# 
  1999  0F2C                     	;# 
  2000  0F2D                     	;# 
  2001  0F2E                     	;# 
  2002  0F2F                     	;# 
  2003  0F30                     	;# 
  2004  0F31                     	;# 
  2005  0F32                     	;# 
  2006  0F33                     	;# 
  2007  0F34                     	;# 
  2008  0F35                     	;# 
  2009  0F36                     	;# 
  2010  0F37                     	;# 
  2011  0FE4                     	;# 
  2012  0FE5                     	;# 
  2013  0FE6                     	;# 
  2014  0FE7                     	;# 
  2015  0FE8                     	;# 
  2016  0FE9                     	;# 
  2017  0FEA                     	;# 
  2018  0FEB                     	;# 
  2019  0FED                     	;# 
  2020  0FEE                     	;# 
  2021  0FEF                     	;# 
  2022  0000                     	;# 
  2023  0001                     	;# 
  2024  0002                     	;# 
  2025  0003                     	;# 
  2026  0004                     	;# 
  2027  0005                     	;# 
  2028  0006                     	;# 
  2029  0007                     	;# 
  2030  0008                     	;# 
  2031  0009                     	;# 
  2032  000A                     	;# 
  2033  000B                     	;# 
  2034  000C                     	;# 
  2035  000D                     	;# 
  2036  000E                     	;# 
  2037  0010                     	;# 
  2038  0011                     	;# 
  2039  0012                     	;# 
  2040  0013                     	;# 
  2041  0014                     	;# 
  2042  0015                     	;# 
  2043  0015                     	;# 
  2044  0016                     	;# 
  2045  0016                     	;# 
  2046  0017                     	;# 
  2047  0018                     	;# 
  2048  0019                     	;# 
  2049  0019                     	;# 
  2050  001A                     	;# 
  2051  001B                     	;# 
  2052  001C                     	;# 
  2053  001D                     	;# 
  2054  001E                     	;# 
  2055  001F                     	;# 
  2056  008C                     	;# 
  2057  008D                     	;# 
  2058  008E                     	;# 
  2059  0090                     	;# 
  2060  0091                     	;# 
  2061  0092                     	;# 
  2062  0093                     	;# 
  2063  0094                     	;# 
  2064  0097                     	;# 
  2065  009B                     	;# 
  2066  009B                     	;# 
  2067  009C                     	;# 
  2068  009D                     	;# 
  2069  009E                     	;# 
  2070  009F                     	;# 
  2071  010C                     	;# 
  2072  010D                     	;# 
  2073  010E                     	;# 
  2074  0111                     	;# 
  2075  0112                     	;# 
  2076  0113                     	;# 
  2077  0114                     	;# 
  2078  0115                     	;# 
  2079  0116                     	;# 
  2080  0117                     	;# 
  2081  0118                     	;# 
  2082  0119                     	;# 
  2083  018C                     	;# 
  2084  018D                     	;# 
  2085  018E                     	;# 
  2086  0199                     	;# 
  2087  0199                     	;# 
  2088  0199                     	;# 
  2089  019A                     	;# 
  2090  019A                     	;# 
  2091  019A                     	;# 
  2092  019B                     	;# 
  2093  019B                     	;# 
  2094  019B                     	;# 
  2095  019B                     	;# 
  2096  019B                     	;# 
  2097  019C                     	;# 
  2098  019C                     	;# 
  2099  019C                     	;# 
  2100  019D                     	;# 
  2101  019D                     	;# 
  2102  019D                     	;# 
  2103  019E                     	;# 
  2104  019E                     	;# 
  2105  019E                     	;# 
  2106  019F                     	;# 
  2107  019F                     	;# 
  2108  019F                     	;# 
  2109  019F                     	;# 
  2110  019F                     	;# 
  2111  020C                     	;# 
  2112  020D                     	;# 
  2113  020E                     	;# 
  2114  0211                     	;# 
  2115  0211                     	;# 
  2116  0212                     	;# 
  2117  0212                     	;# 
  2118  0213                     	;# 
  2119  0213                     	;# 
  2120  0214                     	;# 
  2121  0214                     	;# 
  2122  0215                     	;# 
  2123  0215                     	;# 
  2124  0215                     	;# 
  2125  0215                     	;# 
  2126  0216                     	;# 
  2127  0216                     	;# 
  2128  0217                     	;# 
  2129  0217                     	;# 
  2130  0219                     	;# 
  2131  021A                     	;# 
  2132  021B                     	;# 
  2133  021C                     	;# 
  2134  021D                     	;# 
  2135  021D                     	;# 
  2136  021E                     	;# 
  2137  021F                     	;# 
  2138  028C                     	;# 
  2139  028D                     	;# 
  2140  028E                     	;# 
  2141  0291                     	;# 
  2142  0291                     	;# 
  2143  0292                     	;# 
  2144  0293                     	;# 
  2145  0294                     	;# 
  2146  0295                     	;# 
  2147  0295                     	;# 
  2148  0296                     	;# 
  2149  0297                     	;# 
  2150  0298                     	;# 
  2151  029F                     	;# 
  2152  030C                     	;# 
  2153  030D                     	;# 
  2154  030E                     	;# 
  2155  0311                     	;# 
  2156  0311                     	;# 
  2157  0312                     	;# 
  2158  0313                     	;# 
  2159  0314                     	;# 
  2160  0315                     	;# 
  2161  0315                     	;# 
  2162  0316                     	;# 
  2163  0317                     	;# 
  2164  0318                     	;# 
  2165  038C                     	;# 
  2166  038D                     	;# 
  2167  038E                     	;# 
  2168  0391                     	;# 
  2169  0392                     	;# 
  2170  0393                     	;# 
  2171  0394                     	;# 
  2172  0395                     	;# 
  2173  0396                     	;# 
  2174  0397                     	;# 
  2175  0398                     	;# 
  2176  0399                     	;# 
  2177  039A                     	;# 
  2178  039C                     	;# 
  2179  039D                     	;# 
  2180  039E                     	;# 
  2181  039F                     	;# 
  2182  0411                     	;# 
  2183  0411                     	;# 
  2184  0412                     	;# 
  2185  0413                     	;# 
  2186  0414                     	;# 
  2187  0415                     	;# 
  2188  0416                     	;# 
  2189  0417                     	;# 
  2190  0418                     	;# 
  2191  0418                     	;# 
  2192  0419                     	;# 
  2193  041A                     	;# 
  2194  041B                     	;# 
  2195  041C                     	;# 
  2196  041D                     	;# 
  2197  041E                     	;# 
  2198  041F                     	;# 
  2199  0498                     	;# 
  2200  0498                     	;# 
  2201  0499                     	;# 
  2202  049A                     	;# 
  2203  049B                     	;# 
  2204  049B                     	;# 
  2205  049C                     	;# 
  2206  049D                     	;# 
  2207  049E                     	;# 
  2208  049F                     	;# 
  2209  0617                     	;# 
  2210  0618                     	;# 
  2211  0619                     	;# 
  2212  0619                     	;# 
  2213  061A                     	;# 
  2214  061B                     	;# 
  2215  061C                     	;# 
  2216  061C                     	;# 
  2217  061F                     	;# 
  2218  0691                     	;# 
  2219  0692                     	;# 
  2220  0693                     	;# 
  2221  0694                     	;# 
  2222  0695                     	;# 
  2223  0696                     	;# 
  2224  0697                     	;# 
  2225  0698                     	;# 
  2226  0699                     	;# 
  2227  0711                     	;# 
  2228  0712                     	;# 
  2229  0713                     	;# 
  2230  0714                     	;# 
  2231  0715                     	;# 
  2232  0716                     	;# 
  2233  0717                     	;# 
  2234  0718                     	;# 
  2235  0719                     	;# 
  2236  0891                     	;# 
  2237  0891                     	;# 
  2238  0891                     	;# 
  2239  0891                     	;# 
  2240  0891                     	;# 
  2241  0891                     	;# 
  2242  0892                     	;# 
  2243  0892                     	;# 
  2244  0892                     	;# 
  2245  0893                     	;# 
  2246  0893                     	;# 
  2247  0893                     	;# 
  2248  0893                     	;# 
  2249  0893                     	;# 
  2250  0893                     	;# 
  2251  0894                     	;# 
  2252  0894                     	;# 
  2253  0894                     	;# 
  2254  0895                     	;# 
  2255  0895                     	;# 
  2256  0895                     	;# 
  2257  0896                     	;# 
  2258  0896                     	;# 
  2259  0896                     	;# 
  2260  089B                     	;# 
  2261  0911                     	;# 
  2262  0912                     	;# 
  2263  0913                     	;# 
  2264  0914                     	;# 
  2265  0915                     	;# 
  2266  0916                     	;# 
  2267  0918                     	;# 
  2268  0919                     	;# 
  2269  091A                     	;# 
  2270  091B                     	;# 
  2271  091C                     	;# 
  2272  091D                     	;# 
  2273  091E                     	;# 
  2274  091F                     	;# 
  2275  0E0F                     	;# 
  2276  0E10                     	;# 
  2277  0E11                     	;# 
  2278  0E12                     	;# 
  2279  0E13                     	;# 
  2280  0E14                     	;# 
  2281  0E15                     	;# 
  2282  0E16                     	;# 
  2283  0E17                     	;# 
  2284  0E18                     	;# 
  2285  0E19                     	;# 
  2286  0E1A                     	;# 
  2287  0E1B                     	;# 
  2288  0E1C                     	;# 
  2289  0E1D                     	;# 
  2290  0E1E                     	;# 
  2291  0E1F                     	;# 
  2292  0E20                     	;# 
  2293  0E21                     	;# 
  2294  0E22                     	;# 
  2295  0E24                     	;# 
  2296  0E25                     	;# 
  2297  0E28                     	;# 
  2298  0E29                     	;# 
  2299  0E2A                     	;# 
  2300  0E2B                     	;# 
  2301  0E2C                     	;# 
  2302  0E2D                     	;# 
  2303  0E2E                     	;# 
  2304  0E2F                     	;# 
  2305  0E90                     	;# 
  2306  0E91                     	;# 
  2307  0E92                     	;# 
  2308  0E94                     	;# 
  2309  0E95                     	;# 
  2310  0E9C                     	;# 
  2311  0E9D                     	;# 
  2312  0E9E                     	;# 
  2313  0E9F                     	;# 
  2314  0EA0                     	;# 
  2315  0EA1                     	;# 
  2316  0EA2                     	;# 
  2317  0EA3                     	;# 
  2318  0EA4                     	;# 
  2319  0EA5                     	;# 
  2320  0EA6                     	;# 
  2321  0EA7                     	;# 
  2322  0F0F                     	;# 
  2323  0F10                     	;# 
  2324  0F11                     	;# 
  2325  0F12                     	;# 
  2326  0F13                     	;# 
  2327  0F14                     	;# 
  2328  0F15                     	;# 
  2329  0F16                     	;# 
  2330  0F17                     	;# 
  2331  0F18                     	;# 
  2332  0F19                     	;# 
  2333  0F1A                     	;# 
  2334  0F1B                     	;# 
  2335  0F1C                     	;# 
  2336  0F1D                     	;# 
  2337  0F1E                     	;# 
  2338  0F1F                     	;# 
  2339  0F20                     	;# 
  2340  0F21                     	;# 
  2341  0F22                     	;# 
  2342  0F23                     	;# 
  2343  0F24                     	;# 
  2344  0F25                     	;# 
  2345  0F26                     	;# 
  2346  0F27                     	;# 
  2347  0F28                     	;# 
  2348  0F29                     	;# 
  2349  0F2A                     	;# 
  2350  0F2B                     	;# 
  2351  0F2C                     	;# 
  2352  0F2D                     	;# 
  2353  0F2E                     	;# 
  2354  0F2F                     	;# 
  2355  0F30                     	;# 
  2356  0F31                     	;# 
  2357  0F32                     	;# 
  2358  0F33                     	;# 
  2359  0F34                     	;# 
  2360  0F35                     	;# 
  2361  0F36                     	;# 
  2362  0F37                     	;# 
  2363  0FE4                     	;# 
  2364  0FE5                     	;# 
  2365  0FE6                     	;# 
  2366  0FE7                     	;# 
  2367  0FE8                     	;# 
  2368  0FE9                     	;# 
  2369  0FEA                     	;# 
  2370  0FEB                     	;# 
  2371  0FED                     	;# 
  2372  0FEE                     	;# 
  2373  0FEF                     	;# 
  2374  0000                     	;# 
  2375  0001                     	;# 
  2376  0002                     	;# 
  2377  0003                     	;# 
  2378  0004                     	;# 
  2379  0005                     	;# 
  2380  0006                     	;# 
  2381  0007                     	;# 
  2382  0008                     	;# 
  2383  0009                     	;# 
  2384  000A                     	;# 
  2385  000B                     	;# 
  2386  000C                     	;# 
  2387  000D                     	;# 
  2388  000E                     	;# 
  2389  0010                     	;# 
  2390  0011                     	;# 
  2391  0012                     	;# 
  2392  0013                     	;# 
  2393  0014                     	;# 
  2394  0015                     	;# 
  2395  0015                     	;# 
  2396  0016                     	;# 
  2397  0016                     	;# 
  2398  0017                     	;# 
  2399  0018                     	;# 
  2400  0019                     	;# 
  2401  0019                     	;# 
  2402  001A                     	;# 
  2403  001B                     	;# 
  2404  001C                     	;# 
  2405  001D                     	;# 
  2406  001E                     	;# 
  2407  001F                     	;# 
  2408  008C                     	;# 
  2409  008D                     	;# 
  2410  008E                     	;# 
  2411  0090                     	;# 
  2412  0091                     	;# 
  2413  0092                     	;# 
  2414  0093                     	;# 
  2415  0094                     	;# 
  2416  0097                     	;# 
  2417  009B                     	;# 
  2418  009B                     	;# 
  2419  009C                     	;# 
  2420  009D                     	;# 
  2421  009E                     	;# 
  2422  009F                     	;# 
  2423  010C                     	;# 
  2424  010D                     	;# 
  2425  010E                     	;# 
  2426  0111                     	;# 
  2427  0112                     	;# 
  2428  0113                     	;# 
  2429  0114                     	;# 
  2430  0115                     	;# 
  2431  0116                     	;# 
  2432  0117                     	;# 
  2433  0118                     	;# 
  2434  0119                     	;# 
  2435  018C                     	;# 
  2436  018D                     	;# 
  2437  018E                     	;# 
  2438  0199                     	;# 
  2439  0199                     	;# 
  2440  0199                     	;# 
  2441  019A                     	;# 
  2442  019A                     	;# 
  2443  019A                     	;# 
  2444  019B                     	;# 
  2445  019B                     	;# 
  2446  019B                     	;# 
  2447  019B                     	;# 
  2448  019B                     	;# 
  2449  019C                     	;# 
  2450  019C                     	;# 
  2451  019C                     	;# 
  2452  019D                     	;# 
  2453  019D                     	;# 
  2454  019D                     	;# 
  2455  019E                     	;# 
  2456  019E                     	;# 
  2457  019E                     	;# 
  2458  019F                     	;# 
  2459  019F                     	;# 
  2460  019F                     	;# 
  2461  019F                     	;# 
  2462  019F                     	;# 
  2463  020C                     	;# 
  2464  020D                     	;# 
  2465  020E                     	;# 
  2466  0211                     	;# 
  2467  0211                     	;# 
  2468  0212                     	;# 
  2469  0212                     	;# 
  2470  0213                     	;# 
  2471  0213                     	;# 
  2472  0214                     	;# 
  2473  0214                     	;# 
  2474  0215                     	;# 
  2475  0215                     	;# 
  2476  0215                     	;# 
  2477  0215                     	;# 
  2478  0216                     	;# 
  2479  0216                     	;# 
  2480  0217                     	;# 
  2481  0217                     	;# 
  2482  0219                     	;# 
  2483  021A                     	;# 
  2484  021B                     	;# 
  2485  021C                     	;# 
  2486  021D                     	;# 
  2487  021D                     	;# 
  2488  021E                     	;# 
  2489  021F                     	;# 
  2490  028C                     	;# 
  2491  028D                     	;# 
  2492  028E                     	;# 
  2493  0291                     	;# 
  2494  0291                     	;# 
  2495  0292                     	;# 
  2496  0293                     	;# 
  2497  0294                     	;# 
  2498  0295                     	;# 
  2499  0295                     	;# 
  2500  0296                     	;# 
  2501  0297                     	;# 
  2502  0298                     	;# 
  2503  029F                     	;# 
  2504  030C                     	;# 
  2505  030D                     	;# 
  2506  030E                     	;# 
  2507  0311                     	;# 
  2508  0311                     	;# 
  2509  0312                     	;# 
  2510  0313                     	;# 
  2511  0314                     	;# 
  2512  0315                     	;# 
  2513  0315                     	;# 
  2514  0316                     	;# 
  2515  0317                     	;# 
  2516  0318                     	;# 
  2517  038C                     	;# 
  2518  038D                     	;# 
  2519  038E                     	;# 
  2520  0391                     	;# 
  2521  0392                     	;# 
  2522  0393                     	;# 
  2523  0394                     	;# 
  2524  0395                     	;# 
  2525  0396                     	;# 
  2526  0397                     	;# 
  2527  0398                     	;# 
  2528  0399                     	;# 
  2529  039A                     	;# 
  2530  039C                     	;# 
  2531  039D                     	;# 
  2532  039E                     	;# 
  2533  039F                     	;# 
  2534  0411                     	;# 
  2535  0411                     	;# 
  2536  0412                     	;# 
  2537  0413                     	;# 
  2538  0414                     	;# 
  2539  0415                     	;# 
  2540  0416                     	;# 
  2541  0417                     	;# 
  2542  0418                     	;# 
  2543  0418                     	;# 
  2544  0419                     	;# 
  2545  041A                     	;# 
  2546  041B                     	;# 
  2547  041C                     	;# 
  2548  041D                     	;# 
  2549  041E                     	;# 
  2550  041F                     	;# 
  2551  0498                     	;# 
  2552  0498                     	;# 
  2553  0499                     	;# 
  2554  049A                     	;# 
  2555  049B                     	;# 
  2556  049B                     	;# 
  2557  049C                     	;# 
  2558  049D                     	;# 
  2559  049E                     	;# 
  2560  049F                     	;# 
  2561  0617                     	;# 
  2562  0618                     	;# 
  2563  0619                     	;# 
  2564  0619                     	;# 
  2565  061A                     	;# 
  2566  061B                     	;# 
  2567  061C                     	;# 
  2568  061C                     	;# 
  2569  061F                     	;# 
  2570  0691                     	;# 
  2571  0692                     	;# 
  2572  0693                     	;# 
  2573  0694                     	;# 
  2574  0695                     	;# 
  2575  0696                     	;# 
  2576  0697                     	;# 
  2577  0698                     	;# 
  2578  0699                     	;# 
  2579  0711                     	;# 
  2580  0712                     	;# 
  2581  0713                     	;# 
  2582  0714                     	;# 
  2583  0715                     	;# 
  2584  0716                     	;# 
  2585  0717                     	;# 
  2586  0718                     	;# 
  2587  0719                     	;# 
  2588  0891                     	;# 
  2589  0891                     	;# 
  2590  0891                     	;# 
  2591  0891                     	;# 
  2592  0891                     	;# 
  2593  0891                     	;# 
  2594  0892                     	;# 
  2595  0892                     	;# 
  2596  0892                     	;# 
  2597  0893                     	;# 
  2598  0893                     	;# 
  2599  0893                     	;# 
  2600  0893                     	;# 
  2601  0893                     	;# 
  2602  0893                     	;# 
  2603  0894                     	;# 
  2604  0894                     	;# 
  2605  0894                     	;# 
  2606  0895                     	;# 
  2607  0895                     	;# 
  2608  0895                     	;# 
  2609  0896                     	;# 
  2610  0896                     	;# 
  2611  0896                     	;# 
  2612  089B                     	;# 
  2613  0911                     	;# 
  2614  0912                     	;# 
  2615  0913                     	;# 
  2616  0914                     	;# 
  2617  0915                     	;# 
  2618  0916                     	;# 
  2619  0918                     	;# 
  2620  0919                     	;# 
  2621  091A                     	;# 
  2622  091B                     	;# 
  2623  091C                     	;# 
  2624  091D                     	;# 
  2625  091E                     	;# 
  2626  091F                     	;# 
  2627  0E0F                     	;# 
  2628  0E10                     	;# 
  2629  0E11                     	;# 
  2630  0E12                     	;# 
  2631  0E13                     	;# 
  2632  0E14                     	;# 
  2633  0E15                     	;# 
  2634  0E16                     	;# 
  2635  0E17                     	;# 
  2636  0E18                     	;# 
  2637  0E19                     	;# 
  2638  0E1A                     	;# 
  2639  0E1B                     	;# 
  2640  0E1C                     	;# 
  2641  0E1D                     	;# 
  2642  0E1E                     	;# 
  2643  0E1F                     	;# 
  2644  0E20                     	;# 
  2645  0E21                     	;# 
  2646  0E22                     	;# 
  2647  0E24                     	;# 
  2648  0E25                     	;# 
  2649  0E28                     	;# 
  2650  0E29                     	;# 
  2651  0E2A                     	;# 
  2652  0E2B                     	;# 
  2653  0E2C                     	;# 
  2654  0E2D                     	;# 
  2655  0E2E                     	;# 
  2656  0E2F                     	;# 
  2657  0E90                     	;# 
  2658  0E91                     	;# 
  2659  0E92                     	;# 
  2660  0E94                     	;# 
  2661  0E95                     	;# 
  2662  0E9C                     	;# 
  2663  0E9D                     	;# 
  2664  0E9E                     	;# 
  2665  0E9F                     	;# 
  2666  0EA0                     	;# 
  2667  0EA1                     	;# 
  2668  0EA2                     	;# 
  2669  0EA3                     	;# 
  2670  0EA4                     	;# 
  2671  0EA5                     	;# 
  2672  0EA6                     	;# 
  2673  0EA7                     	;# 
  2674  0F0F                     	;# 
  2675  0F10                     	;# 
  2676  0F11                     	;# 
  2677  0F12                     	;# 
  2678  0F13                     	;# 
  2679  0F14                     	;# 
  2680  0F15                     	;# 
  2681  0F16                     	;# 
  2682  0F17                     	;# 
  2683  0F18                     	;# 
  2684  0F19                     	;# 
  2685  0F1A                     	;# 
  2686  0F1B                     	;# 
  2687  0F1C                     	;# 
  2688  0F1D                     	;# 
  2689  0F1E                     	;# 
  2690  0F1F                     	;# 
  2691  0F20                     	;# 
  2692  0F21                     	;# 
  2693  0F22                     	;# 
  2694  0F23                     	;# 
  2695  0F24                     	;# 
  2696  0F25                     	;# 
  2697  0F26                     	;# 
  2698  0F27                     	;# 
  2699  0F28                     	;# 
  2700  0F29                     	;# 
  2701  0F2A                     	;# 
  2702  0F2B                     	;# 
  2703  0F2C                     	;# 
  2704  0F2D                     	;# 
  2705  0F2E                     	;# 
  2706  0F2F                     	;# 
  2707  0F30                     	;# 
  2708  0F31                     	;# 
  2709  0F32                     	;# 
  2710  0F33                     	;# 
  2711  0F34                     	;# 
  2712  0F35                     	;# 
  2713  0F36                     	;# 
  2714  0F37                     	;# 
  2715  0FE4                     	;# 
  2716  0FE5                     	;# 
  2717  0FE6                     	;# 
  2718  0FE7                     	;# 
  2719  0FE8                     	;# 
  2720  0FE9                     	;# 
  2721  0FEA                     	;# 
  2722  0FEB                     	;# 
  2723  0FED                     	;# 
  2724  0FEE                     	;# 
  2725  0FEF                     	;# 
  2726  0000                     	;# 
  2727  0001                     	;# 
  2728  0002                     	;# 
  2729  0003                     	;# 
  2730  0004                     	;# 
  2731  0005                     	;# 
  2732  0006                     	;# 
  2733  0007                     	;# 
  2734  0008                     	;# 
  2735  0009                     	;# 
  2736  000A                     	;# 
  2737  000B                     	;# 
  2738  000C                     	;# 
  2739  000D                     	;# 
  2740  000E                     	;# 
  2741  0010                     	;# 
  2742  0011                     	;# 
  2743  0012                     	;# 
  2744  0013                     	;# 
  2745  0014                     	;# 
  2746  0015                     	;# 
  2747  0015                     	;# 
  2748  0016                     	;# 
  2749  0016                     	;# 
  2750  0017                     	;# 
  2751  0018                     	;# 
  2752  0019                     	;# 
  2753  0019                     	;# 
  2754  001A                     	;# 
  2755  001B                     	;# 
  2756  001C                     	;# 
  2757  001D                     	;# 
  2758  001E                     	;# 
  2759  001F                     	;# 
  2760  008C                     	;# 
  2761  008D                     	;# 
  2762  008E                     	;# 
  2763  0090                     	;# 
  2764  0091                     	;# 
  2765  0092                     	;# 
  2766  0093                     	;# 
  2767  0094                     	;# 
  2768  0097                     	;# 
  2769  009B                     	;# 
  2770  009B                     	;# 
  2771  009C                     	;# 
  2772  009D                     	;# 
  2773  009E                     	;# 
  2774  009F                     	;# 
  2775  010C                     	;# 
  2776  010D                     	;# 
  2777  010E                     	;# 
  2778  0111                     	;# 
  2779  0112                     	;# 
  2780  0113                     	;# 
  2781  0114                     	;# 
  2782  0115                     	;# 
  2783  0116                     	;# 
  2784  0117                     	;# 
  2785  0118                     	;# 
  2786  0119                     	;# 
  2787  018C                     	;# 
  2788  018D                     	;# 
  2789  018E                     	;# 
  2790  0199                     	;# 
  2791  0199                     	;# 
  2792  0199                     	;# 
  2793  019A                     	;# 
  2794  019A                     	;# 
  2795  019A                     	;# 
  2796  019B                     	;# 
  2797  019B                     	;# 
  2798  019B                     	;# 
  2799  019B                     	;# 
  2800  019B                     	;# 
  2801  019C                     	;# 
  2802  019C                     	;# 
  2803  019C                     	;# 
  2804  019D                     	;# 
  2805  019D                     	;# 
  2806  019D                     	;# 
  2807  019E                     	;# 
  2808  019E                     	;# 
  2809  019E                     	;# 
  2810  019F                     	;# 
  2811  019F                     	;# 
  2812  019F                     	;# 
  2813  019F                     	;# 
  2814  019F                     	;# 
  2815  020C                     	;# 
  2816  020D                     	;# 
  2817  020E                     	;# 
  2818  0211                     	;# 
  2819  0211                     	;# 
  2820  0212                     	;# 
  2821  0212                     	;# 
  2822  0213                     	;# 
  2823  0213                     	;# 
  2824  0214                     	;# 
  2825  0214                     	;# 
  2826  0215                     	;# 
  2827  0215                     	;# 
  2828  0215                     	;# 
  2829  0215                     	;# 
  2830  0216                     	;# 
  2831  0216                     	;# 
  2832  0217                     	;# 
  2833  0217                     	;# 
  2834  0219                     	;# 
  2835  021A                     	;# 
  2836  021B                     	;# 
  2837  021C                     	;# 
  2838  021D                     	;# 
  2839  021D                     	;# 
  2840  021E                     	;# 
  2841  021F                     	;# 
  2842  028C                     	;# 
  2843  028D                     	;# 
  2844  028E                     	;# 
  2845  0291                     	;# 
  2846  0291                     	;# 
  2847  0292                     	;# 
  2848  0293                     	;# 
  2849  0294                     	;# 
  2850  0295                     	;# 
  2851  0295                     	;# 
  2852  0296                     	;# 
  2853  0297                     	;# 
  2854  0298                     	;# 
  2855  029F                     	;# 
  2856  030C                     	;# 
  2857  030D                     	;# 
  2858  030E                     	;# 
  2859  0311                     	;# 
  2860  0311                     	;# 
  2861  0312                     	;# 
  2862  0313                     	;# 
  2863  0314                     	;# 
  2864  0315                     	;# 
  2865  0315                     	;# 
  2866  0316                     	;# 
  2867  0317                     	;# 
  2868  0318                     	;# 
  2869  038C                     	;# 
  2870  038D                     	;# 
  2871  038E                     	;# 
  2872  0391                     	;# 
  2873  0392                     	;# 
  2874  0393                     	;# 
  2875  0394                     	;# 
  2876  0395                     	;# 
  2877  0396                     	;# 
  2878  0397                     	;# 
  2879  0398                     	;# 
  2880  0399                     	;# 
  2881  039A                     	;# 
  2882  039C                     	;# 
  2883  039D                     	;# 
  2884  039E                     	;# 
  2885  039F                     	;# 
  2886  0411                     	;# 
  2887  0411                     	;# 
  2888  0412                     	;# 
  2889  0413                     	;# 
  2890  0414                     	;# 
  2891  0415                     	;# 
  2892  0416                     	;# 
  2893  0417                     	;# 
  2894  0418                     	;# 
  2895  0418                     	;# 
  2896  0419                     	;# 
  2897  041A                     	;# 
  2898  041B                     	;# 
  2899  041C                     	;# 
  2900  041D                     	;# 
  2901  041E                     	;# 
  2902  041F                     	;# 
  2903  0498                     	;# 
  2904  0498                     	;# 
  2905  0499                     	;# 
  2906  049A                     	;# 
  2907  049B                     	;# 
  2908  049B                     	;# 
  2909  049C                     	;# 
  2910  049D                     	;# 
  2911  049E                     	;# 
  2912  049F                     	;# 
  2913  0617                     	;# 
  2914  0618                     	;# 
  2915  0619                     	;# 
  2916  0619                     	;# 
  2917  061A                     	;# 
  2918  061B                     	;# 
  2919  061C                     	;# 
  2920  061C                     	;# 
  2921  061F                     	;# 
  2922  0691                     	;# 
  2923  0692                     	;# 
  2924  0693                     	;# 
  2925  0694                     	;# 
  2926  0695                     	;# 
  2927  0696                     	;# 
  2928  0697                     	;# 
  2929  0698                     	;# 
  2930  0699                     	;# 
  2931  0711                     	;# 
  2932  0712                     	;# 
  2933  0713                     	;# 
  2934  0714                     	;# 
  2935  0715                     	;# 
  2936  0716                     	;# 
  2937  0717                     	;# 
  2938  0718                     	;# 
  2939  0719                     	;# 
  2940  0891                     	;# 
  2941  0891                     	;# 
  2942  0891                     	;# 
  2943  0891                     	;# 
  2944  0891                     	;# 
  2945  0891                     	;# 
  2946  0892                     	;# 
  2947  0892                     	;# 
  2948  0892                     	;# 
  2949  0893                     	;# 
  2950  0893                     	;# 
  2951  0893                     	;# 
  2952  0893                     	;# 
  2953  0893                     	;# 
  2954  0893                     	;# 
  2955  0894                     	;# 
  2956  0894                     	;# 
  2957  0894                     	;# 
  2958  0895                     	;# 
  2959  0895                     	;# 
  2960  0895                     	;# 
  2961  0896                     	;# 
  2962  0896                     	;# 
  2963  0896                     	;# 
  2964  089B                     	;# 
  2965  0911                     	;# 
  2966  0912                     	;# 
  2967  0913                     	;# 
  2968  0914                     	;# 
  2969  0915                     	;# 
  2970  0916                     	;# 
  2971  0918                     	;# 
  2972  0919                     	;# 
  2973  091A                     	;# 
  2974  091B                     	;# 
  2975  091C                     	;# 
  2976  091D                     	;# 
  2977  091E                     	;# 
  2978  091F                     	;# 
  2979  0E0F                     	;# 
  2980  0E10                     	;# 
  2981  0E11                     	;# 
  2982  0E12                     	;# 
  2983  0E13                     	;# 
  2984  0E14                     	;# 
  2985  0E15                     	;# 
  2986  0E16                     	;# 
  2987  0E17                     	;# 
  2988  0E18                     	;# 
  2989  0E19                     	;# 
  2990  0E1A                     	;# 
  2991  0E1B                     	;# 
  2992  0E1C                     	;# 
  2993  0E1D                     	;# 
  2994  0E1E                     	;# 
  2995  0E1F                     	;# 
  2996  0E20                     	;# 
  2997  0E21                     	;# 
  2998  0E22                     	;# 
  2999  0E24                     	;# 
  3000  0E25                     	;# 
  3001  0E28                     	;# 
  3002  0E29                     	;# 
  3003  0E2A                     	;# 
  3004  0E2B                     	;# 
  3005  0E2C                     	;# 
  3006  0E2D                     	;# 
  3007  0E2E                     	;# 
  3008  0E2F                     	;# 
  3009  0E90                     	;# 
  3010  0E91                     	;# 
  3011  0E92                     	;# 
  3012  0E94                     	;# 
  3013  0E95                     	;# 
  3014  0E9C                     	;# 
  3015  0E9D                     	;# 
  3016  0E9E                     	;# 
  3017  0E9F                     	;# 
  3018  0EA0                     	;# 
  3019  0EA1                     	;# 
  3020  0EA2                     	;# 
  3021  0EA3                     	;# 
  3022  0EA4                     	;# 
  3023  0EA5                     	;# 
  3024  0EA6                     	;# 
  3025  0EA7                     	;# 
  3026  0F0F                     	;# 
  3027  0F10                     	;# 
  3028  0F11                     	;# 
  3029  0F12                     	;# 
  3030  0F13                     	;# 
  3031  0F14                     	;# 
  3032  0F15                     	;# 
  3033  0F16                     	;# 
  3034  0F17                     	;# 
  3035  0F18                     	;# 
  3036  0F19                     	;# 
  3037  0F1A                     	;# 
  3038  0F1B                     	;# 
  3039  0F1C                     	;# 
  3040  0F1D                     	;# 
  3041  0F1E                     	;# 
  3042  0F1F                     	;# 
  3043  0F20                     	;# 
  3044  0F21                     	;# 
  3045  0F22                     	;# 
  3046  0F23                     	;# 
  3047  0F24                     	;# 
  3048  0F25                     	;# 
  3049  0F26                     	;# 
  3050  0F27                     	;# 
  3051  0F28                     	;# 
  3052  0F29                     	;# 
  3053  0F2A                     	;# 
  3054  0F2B                     	;# 
  3055  0F2C                     	;# 
  3056  0F2D                     	;# 
  3057  0F2E                     	;# 
  3058  0F2F                     	;# 
  3059  0F30                     	;# 
  3060  0F31                     	;# 
  3061  0F32                     	;# 
  3062  0F33                     	;# 
  3063  0F34                     	;# 
  3064  0F35                     	;# 
  3065  0F36                     	;# 
  3066  0F37                     	;# 
  3067  0FE4                     	;# 
  3068  0FE5                     	;# 
  3069  0FE6                     	;# 
  3070  0FE7                     	;# 
  3071  0FE8                     	;# 
  3072  0FE9                     	;# 
  3073  0FEA                     	;# 
  3074  0FEB                     	;# 
  3075  0FED                     	;# 
  3076  0FEE                     	;# 
  3077  0FEF                     	;# 
  3078  0000                     	;# 
  3079  0001                     	;# 
  3080  0002                     	;# 
  3081  0003                     	;# 
  3082  0004                     	;# 
  3083  0005                     	;# 
  3084  0006                     	;# 
  3085  0007                     	;# 
  3086  0008                     	;# 
  3087  0009                     	;# 
  3088  000A                     	;# 
  3089  000B                     	;# 
  3090  000C                     	;# 
  3091  000D                     	;# 
  3092  000E                     	;# 
  3093  0010                     	;# 
  3094  0011                     	;# 
  3095  0012                     	;# 
  3096  0013                     	;# 
  3097  0014                     	;# 
  3098  0015                     	;# 
  3099  0015                     	;# 
  3100  0016                     	;# 
  3101  0016                     	;# 
  3102  0017                     	;# 
  3103  0018                     	;# 
  3104  0019                     	;# 
  3105  0019                     	;# 
  3106  001A                     	;# 
  3107  001B                     	;# 
  3108  001C                     	;# 
  3109  001D                     	;# 
  3110  001E                     	;# 
  3111  001F                     	;# 
  3112  008C                     	;# 
  3113  008D                     	;# 
  3114  008E                     	;# 
  3115  0090                     	;# 
  3116  0091                     	;# 
  3117  0092                     	;# 
  3118  0093                     	;# 
  3119  0094                     	;# 
  3120  0097                     	;# 
  3121  009B                     	;# 
  3122  009B                     	;# 
  3123  009C                     	;# 
  3124  009D                     	;# 
  3125  009E                     	;# 
  3126  009F                     	;# 
  3127  010C                     	;# 
  3128  010D                     	;# 
  3129  010E                     	;# 
  3130  0111                     	;# 
  3131  0112                     	;# 
  3132  0113                     	;# 
  3133  0114                     	;# 
  3134  0115                     	;# 
  3135  0116                     	;# 
  3136  0117                     	;# 
  3137  0118                     	;# 
  3138  0119                     	;# 
  3139  018C                     	;# 
  3140  018D                     	;# 
  3141  018E                     	;# 
  3142  0199                     	;# 
  3143  0199                     	;# 
  3144  0199                     	;# 
  3145  019A                     	;# 
  3146  019A                     	;# 
  3147  019A                     	;# 
  3148  019B                     	;# 
  3149  019B                     	;# 
  3150  019B                     	;# 
  3151  019B                     	;# 
  3152  019B                     	;# 
  3153  019C                     	;# 
  3154  019C                     	;# 
  3155  019C                     	;# 
  3156  019D                     	;# 
  3157  019D                     	;# 
  3158  019D                     	;# 
  3159  019E                     	;# 
  3160  019E                     	;# 
  3161  019E                     	;# 
  3162  019F                     	;# 
  3163  019F                     	;# 
  3164  019F                     	;# 
  3165  019F                     	;# 
  3166  019F                     	;# 
  3167  020C                     	;# 
  3168  020D                     	;# 
  3169  020E                     	;# 
  3170  0211                     	;# 
  3171  0211                     	;# 
  3172  0212                     	;# 
  3173  0212                     	;# 
  3174  0213                     	;# 
  3175  0213                     	;# 
  3176  0214                     	;# 
  3177  0214                     	;# 
  3178  0215                     	;# 
  3179  0215                     	;# 
  3180  0215                     	;# 
  3181  0215                     	;# 
  3182  0216                     	;# 
  3183  0216                     	;# 
  3184  0217                     	;# 
  3185  0217                     	;# 
  3186  0219                     	;# 
  3187  021A                     	;# 
  3188  021B                     	;# 
  3189  021C                     	;# 
  3190  021D                     	;# 
  3191  021D                     	;# 
  3192  021E                     	;# 
  3193  021F                     	;# 
  3194  028C                     	;# 
  3195  028D                     	;# 
  3196  028E                     	;# 
  3197  0291                     	;# 
  3198  0291                     	;# 
  3199  0292                     	;# 
  3200  0293                     	;# 
  3201  0294                     	;# 
  3202  0295                     	;# 
  3203  0295                     	;# 
  3204  0296                     	;# 
  3205  0297                     	;# 
  3206  0298                     	;# 
  3207  029F                     	;# 
  3208  030C                     	;# 
  3209  030D                     	;# 
  3210  030E                     	;# 
  3211  0311                     	;# 
  3212  0311                     	;# 
  3213  0312                     	;# 
  3214  0313                     	;# 
  3215  0314                     	;# 
  3216  0315                     	;# 
  3217  0315                     	;# 
  3218  0316                     	;# 
  3219  0317                     	;# 
  3220  0318                     	;# 
  3221  038C                     	;# 
  3222  038D                     	;# 
  3223  038E                     	;# 
  3224  0391                     	;# 
  3225  0392                     	;# 
  3226  0393                     	;# 
  3227  0394                     	;# 
  3228  0395                     	;# 
  3229  0396                     	;# 
  3230  0397                     	;# 
  3231  0398                     	;# 
  3232  0399                     	;# 
  3233  039A                     	;# 
  3234  039C                     	;# 
  3235  039D                     	;# 
  3236  039E                     	;# 
  3237  039F                     	;# 
  3238  0411                     	;# 
  3239  0411                     	;# 
  3240  0412                     	;# 
  3241  0413                     	;# 
  3242  0414                     	;# 
  3243  0415                     	;# 
  3244  0416                     	;# 
  3245  0417                     	;# 
  3246  0418                     	;# 
  3247  0418                     	;# 
  3248  0419                     	;# 
  3249  041A                     	;# 
  3250  041B                     	;# 
  3251  041C                     	;# 
  3252  041D                     	;# 
  3253  041E                     	;# 
  3254  041F                     	;# 
  3255  0498                     	;# 
  3256  0498                     	;# 
  3257  0499                     	;# 
  3258  049A                     	;# 
  3259  049B                     	;# 
  3260  049B                     	;# 
  3261  049C                     	;# 
  3262  049D                     	;# 
  3263  049E                     	;# 
  3264  049F                     	;# 
  3265  0617                     	;# 
  3266  0618                     	;# 
  3267  0619                     	;# 
  3268  0619                     	;# 
  3269  061A                     	;# 
  3270  061B                     	;# 
  3271  061C                     	;# 
  3272  061C                     	;# 
  3273  061F                     	;# 
  3274  0691                     	;# 
  3275  0692                     	;# 
  3276  0693                     	;# 
  3277  0694                     	;# 
  3278  0695                     	;# 
  3279  0696                     	;# 
  3280  0697                     	;# 
  3281  0698                     	;# 
  3282  0699                     	;# 
  3283  0711                     	;# 
  3284  0712                     	;# 
  3285  0713                     	;# 
  3286  0714                     	;# 
  3287  0715                     	;# 
  3288  0716                     	;# 
  3289  0717                     	;# 
  3290  0718                     	;# 
  3291  0719                     	;# 
  3292  0891                     	;# 
  3293  0891                     	;# 
  3294  0891                     	;# 
  3295  0891                     	;# 
  3296  0891                     	;# 
  3297  0891                     	;# 
  3298  0892                     	;# 
  3299  0892                     	;# 
  3300  0892                     	;# 
  3301  0893                     	;# 
  3302  0893                     	;# 
  3303  0893                     	;# 
  3304  0893                     	;# 
  3305  0893                     	;# 
  3306  0893                     	;# 
  3307  0894                     	;# 
  3308  0894                     	;# 
  3309  0894                     	;# 
  3310  0895                     	;# 
  3311  0895                     	;# 
  3312  0895                     	;# 
  3313  0896                     	;# 
  3314  0896                     	;# 
  3315  0896                     	;# 
  3316  089B                     	;# 
  3317  0911                     	;# 
  3318  0912                     	;# 
  3319  0913                     	;# 
  3320  0914                     	;# 
  3321  0915                     	;# 
  3322  0916                     	;# 
  3323  0918                     	;# 
  3324  0919                     	;# 
  3325  091A                     	;# 
  3326  091B                     	;# 
  3327  091C                     	;# 
  3328  091D                     	;# 
  3329  091E                     	;# 
  3330  091F                     	;# 
  3331  0E0F                     	;# 
  3332  0E10                     	;# 
  3333  0E11                     	;# 
  3334  0E12                     	;# 
  3335  0E13                     	;# 
  3336  0E14                     	;# 
  3337  0E15                     	;# 
  3338  0E16                     	;# 
  3339  0E17                     	;# 
  3340  0E18                     	;# 
  3341  0E19                     	;# 
  3342  0E1A                     	;# 
  3343  0E1B                     	;# 
  3344  0E1C                     	;# 
  3345  0E1D                     	;# 
  3346  0E1E                     	;# 
  3347  0E1F                     	;# 
  3348  0E20                     	;# 
  3349  0E21                     	;# 
  3350  0E22                     	;# 
  3351  0E24                     	;# 
  3352  0E25                     	;# 
  3353  0E28                     	;# 
  3354  0E29                     	;# 
  3355  0E2A                     	;# 
  3356  0E2B                     	;# 
  3357  0E2C                     	;# 
  3358  0E2D                     	;# 
  3359  0E2E                     	;# 
  3360  0E2F                     	;# 
  3361  0E90                     	;# 
  3362  0E91                     	;# 
  3363  0E92                     	;# 
  3364  0E94                     	;# 
  3365  0E95                     	;# 
  3366  0E9C                     	;# 
  3367  0E9D                     	;# 
  3368  0E9E                     	;# 
  3369  0E9F                     	;# 
  3370  0EA0                     	;# 
  3371  0EA1                     	;# 
  3372  0EA2                     	;# 
  3373  0EA3                     	;# 
  3374  0EA4                     	;# 
  3375  0EA5                     	;# 
  3376  0EA6                     	;# 
  3377  0EA7                     	;# 
  3378  0F0F                     	;# 
  3379  0F10                     	;# 
  3380  0F11                     	;# 
  3381  0F12                     	;# 
  3382  0F13                     	;# 
  3383  0F14                     	;# 
  3384  0F15                     	;# 
  3385  0F16                     	;# 
  3386  0F17                     	;# 
  3387  0F18                     	;# 
  3388  0F19                     	;# 
  3389  0F1A                     	;# 
  3390  0F1B                     	;# 
  3391  0F1C                     	;# 
  3392  0F1D                     	;# 
  3393  0F1E                     	;# 
  3394  0F1F                     	;# 
  3395  0F20                     	;# 
  3396  0F21                     	;# 
  3397  0F22                     	;# 
  3398  0F23                     	;# 
  3399  0F24                     	;# 
  3400  0F25                     	;# 
  3401  0F26                     	;# 
  3402  0F27                     	;# 
  3403  0F28                     	;# 
  3404  0F29                     	;# 
  3405  0F2A                     	;# 
  3406  0F2B                     	;# 
  3407  0F2C                     	;# 
  3408  0F2D                     	;# 
  3409  0F2E                     	;# 
  3410  0F2F                     	;# 
  3411  0F30                     	;# 
  3412  0F31                     	;# 
  3413  0F32                     	;# 
  3414  0F33                     	;# 
  3415  0F34                     	;# 
  3416  0F35                     	;# 
  3417  0F36                     	;# 
  3418  0F37                     	;# 
  3419  0FE4                     	;# 
  3420  0FE5                     	;# 
  3421  0FE6                     	;# 
  3422  0FE7                     	;# 
  3423  0FE8                     	;# 
  3424  0FE9                     	;# 
  3425  0FEA                     	;# 
  3426  0FEB                     	;# 
  3427  0FED                     	;# 
  3428  0FEE                     	;# 
  3429  0FEF                     	;# 
  3430  0000                     	;# 
  3431  0001                     	;# 
  3432  0002                     	;# 
  3433  0003                     	;# 
  3434  0004                     	;# 
  3435  0005                     	;# 
  3436  0006                     	;# 
  3437  0007                     	;# 
  3438  0008                     	;# 
  3439  0009                     	;# 
  3440  000A                     	;# 
  3441  000B                     	;# 
  3442  000C                     	;# 
  3443  000D                     	;# 
  3444  000E                     	;# 
  3445  0010                     	;# 
  3446  0011                     	;# 
  3447  0012                     	;# 
  3448  0013                     	;# 
  3449  0014                     	;# 
  3450  0015                     	;# 
  3451  0015                     	;# 
  3452  0016                     	;# 
  3453  0016                     	;# 
  3454  0017                     	;# 
  3455  0018                     	;# 
  3456  0019                     	;# 
  3457  0019                     	;# 
  3458  001A                     	;# 
  3459  001B                     	;# 
  3460  001C                     	;# 
  3461  001D                     	;# 
  3462  001E                     	;# 
  3463  001F                     	;# 
  3464  008C                     	;# 
  3465  008D                     	;# 
  3466  008E                     	;# 
  3467  0090                     	;# 
  3468  0091                     	;# 
  3469  0092                     	;# 
  3470  0093                     	;# 
  3471  0094                     	;# 
  3472  0097                     	;# 
  3473  009B                     	;# 
  3474  009B                     	;# 
  3475  009C                     	;# 
  3476  009D                     	;# 
  3477  009E                     	;# 
  3478  009F                     	;# 
  3479  010C                     	;# 
  3480  010D                     	;# 
  3481  010E                     	;# 
  3482  0111                     	;# 
  3483  0112                     	;# 
  3484  0113                     	;# 
  3485  0114                     	;# 
  3486  0115                     	;# 
  3487  0116                     	;# 
  3488  0117                     	;# 
  3489  0118                     	;# 
  3490  0119                     	;# 
  3491  018C                     	;# 
  3492  018D                     	;# 
  3493  018E                     	;# 
  3494  0199                     	;# 
  3495  0199                     	;# 
  3496  0199                     	;# 
  3497  019A                     	;# 
  3498  019A                     	;# 
  3499  019A                     	;# 
  3500  019B                     	;# 
  3501  019B                     	;# 
  3502  019B                     	;# 
  3503  019B                     	;# 
  3504  019B                     	;# 
  3505  019C                     	;# 
  3506  019C                     	;# 
  3507  019C                     	;# 
  3508  019D                     	;# 
  3509  019D                     	;# 
  3510  019D                     	;# 
  3511  019E                     	;# 
  3512  019E                     	;# 
  3513  019E                     	;# 
  3514  019F                     	;# 
  3515  019F                     	;# 
  3516  019F                     	;# 
  3517  019F                     	;# 
  3518  019F                     	;# 
  3519  020C                     	;# 
  3520  020D                     	;# 
  3521  020E                     	;# 
  3522  0211                     	;# 
  3523  0211                     	;# 
  3524  0212                     	;# 
  3525  0212                     	;# 
  3526  0213                     	;# 
  3527  0213                     	;# 
  3528  0214                     	;# 
  3529  0214                     	;# 
  3530  0215                     	;# 
  3531  0215                     	;# 
  3532  0215                     	;# 
  3533  0215                     	;# 
  3534  0216                     	;# 
  3535  0216                     	;# 
  3536  0217                     	;# 
  3537  0217                     	;# 
  3538  0219                     	;# 
  3539  021A                     	;# 
  3540  021B                     	;# 
  3541  021C                     	;# 
  3542  021D                     	;# 
  3543  021D                     	;# 
  3544  021E                     	;# 
  3545  021F                     	;# 
  3546  028C                     	;# 
  3547  028D                     	;# 
  3548  028E                     	;# 
  3549  0291                     	;# 
  3550  0291                     	;# 
  3551  0292                     	;# 
  3552  0293                     	;# 
  3553  0294                     	;# 
  3554  0295                     	;# 
  3555  0295                     	;# 
  3556  0296                     	;# 
  3557  0297                     	;# 
  3558  0298                     	;# 
  3559  029F                     	;# 
  3560  030C                     	;# 
  3561  030D                     	;# 
  3562  030E                     	;# 
  3563  0311                     	;# 
  3564  0311                     	;# 
  3565  0312                     	;# 
  3566  0313                     	;# 
  3567  0314                     	;# 
  3568  0315                     	;# 
  3569  0315                     	;# 
  3570  0316                     	;# 
  3571  0317                     	;# 
  3572  0318                     	;# 
  3573  038C                     	;# 
  3574  038D                     	;# 
  3575  038E                     	;# 
  3576  0391                     	;# 
  3577  0392                     	;# 
  3578  0393                     	;# 
  3579  0394                     	;# 
  3580  0395                     	;# 
  3581  0396                     	;# 
  3582  0397                     	;# 
  3583  0398                     	;# 
  3584  0399                     	;# 
  3585  039A                     	;# 
  3586  039C                     	;# 
  3587  039D                     	;# 
  3588  039E                     	;# 
  3589  039F                     	;# 
  3590  0411                     	;# 
  3591  0411                     	;# 
  3592  0412                     	;# 
  3593  0413                     	;# 
  3594  0414                     	;# 
  3595  0415                     	;# 
  3596  0416                     	;# 
  3597  0417                     	;# 
  3598  0418                     	;# 
  3599  0418                     	;# 
  3600  0419                     	;# 
  3601  041A                     	;# 
  3602  041B                     	;# 
  3603  041C                     	;# 
  3604  041D                     	;# 
  3605  041E                     	;# 
  3606  041F                     	;# 
  3607  0498                     	;# 
  3608  0498                     	;# 
  3609  0499                     	;# 
  3610  049A                     	;# 
  3611  049B                     	;# 
  3612  049B                     	;# 
  3613  049C                     	;# 
  3614  049D                     	;# 
  3615  049E                     	;# 
  3616  049F                     	;# 
  3617  0617                     	;# 
  3618  0618                     	;# 
  3619  0619                     	;# 
  3620  0619                     	;# 
  3621  061A                     	;# 
  3622  061B                     	;# 
  3623  061C                     	;# 
  3624  061C                     	;# 
  3625  061F                     	;# 
  3626  0691                     	;# 
  3627  0692                     	;# 
  3628  0693                     	;# 
  3629  0694                     	;# 
  3630  0695                     	;# 
  3631  0696                     	;# 
  3632  0697                     	;# 
  3633  0698                     	;# 
  3634  0699                     	;# 
  3635  0711                     	;# 
  3636  0712                     	;# 
  3637  0713                     	;# 
  3638  0714                     	;# 
  3639  0715                     	;# 
  3640  0716                     	;# 
  3641  0717                     	;# 
  3642  0718                     	;# 
  3643  0719                     	;# 
  3644  0891                     	;# 
  3645  0891                     	;# 
  3646  0891                     	;# 
  3647  0891                     	;# 
  3648  0891                     	;# 
  3649  0891                     	;# 
  3650  0892                     	;# 
  3651  0892                     	;# 
  3652  0892                     	;# 
  3653  0893                     	;# 
  3654  0893                     	;# 
  3655  0893                     	;# 
  3656  0893                     	;# 
  3657  0893                     	;# 
  3658  0893                     	;# 
  3659  0894                     	;# 
  3660  0894                     	;# 
  3661  0894                     	;# 
  3662  0895                     	;# 
  3663  0895                     	;# 
  3664  0895                     	;# 
  3665  0896                     	;# 
  3666  0896                     	;# 
  3667  0896                     	;# 
  3668  089B                     	;# 
  3669  0911                     	;# 
  3670  0912                     	;# 
  3671  0913                     	;# 
  3672  0914                     	;# 
  3673  0915                     	;# 
  3674  0916                     	;# 
  3675  0918                     	;# 
  3676  0919                     	;# 
  3677  091A                     	;# 
  3678  091B                     	;# 
  3679  091C                     	;# 
  3680  091D                     	;# 
  3681  091E                     	;# 
  3682  091F                     	;# 
  3683  0E0F                     	;# 
  3684  0E10                     	;# 
  3685  0E11                     	;# 
  3686  0E12                     	;# 
  3687  0E13                     	;# 
  3688  0E14                     	;# 
  3689  0E15                     	;# 
  3690  0E16                     	;# 
  3691  0E17                     	;# 
  3692  0E18                     	;# 
  3693  0E19                     	;# 
  3694  0E1A                     	;# 
  3695  0E1B                     	;# 
  3696  0E1C                     	;# 
  3697  0E1D                     	;# 
  3698  0E1E                     	;# 
  3699  0E1F                     	;# 
  3700  0E20                     	;# 
  3701  0E21                     	;# 
  3702  0E22                     	;# 
  3703  0E24                     	;# 
  3704  0E25                     	;# 
  3705  0E28                     	;# 
  3706  0E29                     	;# 
  3707  0E2A                     	;# 
  3708  0E2B                     	;# 
  3709  0E2C                     	;# 
  3710  0E2D                     	;# 
  3711  0E2E                     	;# 
  3712  0E2F                     	;# 
  3713  0E90                     	;# 
  3714  0E91                     	;# 
  3715  0E92                     	;# 
  3716  0E94                     	;# 
  3717  0E95                     	;# 
  3718  0E9C                     	;# 
  3719  0E9D                     	;# 
  3720  0E9E                     	;# 
  3721  0E9F                     	;# 
  3722  0EA0                     	;# 
  3723  0EA1                     	;# 
  3724  0EA2                     	;# 
  3725  0EA3                     	;# 
  3726  0EA4                     	;# 
  3727  0EA5                     	;# 
  3728  0EA6                     	;# 
  3729  0EA7                     	;# 
  3730  0F0F                     	;# 
  3731  0F10                     	;# 
  3732  0F11                     	;# 
  3733  0F12                     	;# 
  3734  0F13                     	;# 
  3735  0F14                     	;# 
  3736  0F15                     	;# 
  3737  0F16                     	;# 
  3738  0F17                     	;# 
  3739  0F18                     	;# 
  3740  0F19                     	;# 
  3741  0F1A                     	;# 
  3742  0F1B                     	;# 
  3743  0F1C                     	;# 
  3744  0F1D                     	;# 
  3745  0F1E                     	;# 
  3746  0F1F                     	;# 
  3747  0F20                     	;# 
  3748  0F21                     	;# 
  3749  0F22                     	;# 
  3750  0F23                     	;# 
  3751  0F24                     	;# 
  3752  0F25                     	;# 
  3753  0F26                     	;# 
  3754  0F27                     	;# 
  3755  0F28                     	;# 
  3756  0F29                     	;# 
  3757  0F2A                     	;# 
  3758  0F2B                     	;# 
  3759  0F2C                     	;# 
  3760  0F2D                     	;# 
  3761  0F2E                     	;# 
  3762  0F2F                     	;# 
  3763  0F30                     	;# 
  3764  0F31                     	;# 
  3765  0F32                     	;# 
  3766  0F33                     	;# 
  3767  0F34                     	;# 
  3768  0F35                     	;# 
  3769  0F36                     	;# 
  3770  0F37                     	;# 
  3771  0FE4                     	;# 
  3772  0FE5                     	;# 
  3773  0FE6                     	;# 
  3774  0FE7                     	;# 
  3775  0FE8                     	;# 
  3776  0FE9                     	;# 
  3777  0FEA                     	;# 
  3778  0FEB                     	;# 
  3779  0FED                     	;# 
  3780  0FEE                     	;# 
  3781  0FEF                     	;# 
  3782  0000                     	;# 
  3783  0001                     	;# 
  3784  0002                     	;# 
  3785  0003                     	;# 
  3786  0004                     	;# 
  3787  0005                     	;# 
  3788  0006                     	;# 
  3789  0007                     	;# 
  3790  0008                     	;# 
  3791  0009                     	;# 
  3792  000A                     	;# 
  3793  000B                     	;# 
  3794  000C                     	;# 
  3795  000D                     	;# 
  3796  000E                     	;# 
  3797  0010                     	;# 
  3798  0011                     	;# 
  3799  0012                     	;# 
  3800  0013                     	;# 
  3801  0014                     	;# 
  3802  0015                     	;# 
  3803  0015                     	;# 
  3804  0016                     	;# 
  3805  0016                     	;# 
  3806  0017                     	;# 
  3807  0018                     	;# 
  3808  0019                     	;# 
  3809  0019                     	;# 
  3810  001A                     	;# 
  3811  001B                     	;# 
  3812  001C                     	;# 
  3813  001D                     	;# 
  3814  001E                     	;# 
  3815  001F                     	;# 
  3816  008C                     	;# 
  3817  008D                     	;# 
  3818  008E                     	;# 
  3819  0090                     	;# 
  3820  0091                     	;# 
  3821  0092                     	;# 
  3822  0093                     	;# 
  3823  0094                     	;# 
  3824  0097                     	;# 
  3825  009B                     	;# 
  3826  009B                     	;# 
  3827  009C                     	;# 
  3828  009D                     	;# 
  3829  009E                     	;# 
  3830  009F                     	;# 
  3831  010C                     	;# 
  3832  010D                     	;# 
  3833  010E                     	;# 
  3834  0111                     	;# 
  3835  0112                     	;# 
  3836  0113                     	;# 
  3837  0114                     	;# 
  3838  0115                     	;# 
  3839  0116                     	;# 
  3840  0117                     	;# 
  3841  0118                     	;# 
  3842  0119                     	;# 
  3843  018C                     	;# 
  3844  018D                     	;# 
  3845  018E                     	;# 
  3846  0199                     	;# 
  3847  0199                     	;# 
  3848  0199                     	;# 
  3849  019A                     	;# 
  3850  019A                     	;# 
  3851  019A                     	;# 
  3852  019B                     	;# 
  3853  019B                     	;# 
  3854  019B                     	;# 
  3855  019B                     	;# 
  3856  019B                     	;# 
  3857  019C                     	;# 
  3858  019C                     	;# 
  3859  019C                     	;# 
  3860  019D                     	;# 
  3861  019D                     	;# 
  3862  019D                     	;# 
  3863  019E                     	;# 
  3864  019E                     	;# 
  3865  019E                     	;# 
  3866  019F                     	;# 
  3867  019F                     	;# 
  3868  019F                     	;# 
  3869  019F                     	;# 
  3870  019F                     	;# 
  3871  020C                     	;# 
  3872  020D                     	;# 
  3873  020E                     	;# 
  3874  0211                     	;# 
  3875  0211                     	;# 
  3876  0212                     	;# 
  3877  0212                     	;# 
  3878  0213                     	;# 
  3879  0213                     	;# 
  3880  0214                     	;# 
  3881  0214                     	;# 
  3882  0215                     	;# 
  3883  0215                     	;# 
  3884  0215                     	;# 
  3885  0215                     	;# 
  3886  0216                     	;# 
  3887  0216                     	;# 
  3888  0217                     	;# 
  3889  0217                     	;# 
  3890  0219                     	;# 
  3891  021A                     	;# 
  3892  021B                     	;# 
  3893  021C                     	;# 
  3894  021D                     	;# 
  3895  021D                     	;# 
  3896  021E                     	;# 
  3897  021F                     	;# 
  3898  028C                     	;# 
  3899  028D                     	;# 
  3900  028E                     	;# 
  3901  0291                     	;# 
  3902  0291                     	;# 
  3903  0292                     	;# 
  3904  0293                     	;# 
  3905  0294                     	;# 
  3906  0295                     	;# 
  3907  0295                     	;# 
  3908  0296                     	;# 
  3909  0297                     	;# 
  3910  0298                     	;# 
  3911  029F                     	;# 
  3912  030C                     	;# 
  3913  030D                     	;# 
  3914  030E                     	;# 
  3915  0311                     	;# 
  3916  0311                     	;# 
  3917  0312                     	;# 
  3918  0313                     	;# 
  3919  0314                     	;# 
  3920  0315                     	;# 
  3921  0315                     	;# 
  3922  0316                     	;# 
  3923  0317                     	;# 
  3924  0318                     	;# 
  3925  038C                     	;# 
  3926  038D                     	;# 
  3927  038E                     	;# 
  3928  0391                     	;# 
  3929  0392                     	;# 
  3930  0393                     	;# 
  3931  0394                     	;# 
  3932  0395                     	;# 
  3933  0396                     	;# 
  3934  0397                     	;# 
  3935  0398                     	;# 
  3936  0399                     	;# 
  3937  039A                     	;# 
  3938  039C                     	;# 
  3939  039D                     	;# 
  3940  039E                     	;# 
  3941  039F                     	;# 
  3942  0411                     	;# 
  3943  0411                     	;# 
  3944  0412                     	;# 
  3945  0413                     	;# 
  3946  0414                     	;# 
  3947  0415                     	;# 
  3948  0416                     	;# 
  3949  0417                     	;# 
  3950  0418                     	;# 
  3951  0418                     	;# 
  3952  0419                     	;# 
  3953  041A                     	;# 
  3954  041B                     	;# 
  3955  041C                     	;# 
  3956  041D                     	;# 
  3957  041E                     	;# 
  3958  041F                     	;# 
  3959  0498                     	;# 
  3960  0498                     	;# 
  3961  0499                     	;# 
  3962  049A                     	;# 
  3963  049B                     	;# 
  3964  049B                     	;# 
  3965  049C                     	;# 
  3966  049D                     	;# 
  3967  049E                     	;# 
  3968  049F                     	;# 
  3969  0617                     	;# 
  3970  0618                     	;# 
  3971  0619                     	;# 
  3972  0619                     	;# 
  3973  061A                     	;# 
  3974  061B                     	;# 
  3975  061C                     	;# 
  3976  061C                     	;# 
  3977  061F                     	;# 
  3978  0691                     	;# 
  3979  0692                     	;# 
  3980  0693                     	;# 
  3981  0694                     	;# 
  3982  0695                     	;# 
  3983  0696                     	;# 
  3984  0697                     	;# 
  3985  0698                     	;# 
  3986  0699                     	;# 
  3987  0711                     	;# 
  3988  0712                     	;# 
  3989  0713                     	;# 
  3990  0714                     	;# 
  3991  0715                     	;# 
  3992  0716                     	;# 
  3993  0717                     	;# 
  3994  0718                     	;# 
  3995  0719                     	;# 
  3996  0891                     	;# 
  3997  0891                     	;# 
  3998  0891                     	;# 
  3999  0891                     	;# 
  4000  0891                     	;# 
  4001  0891                     	;# 
  4002  0892                     	;# 
  4003  0892                     	;# 
  4004  0892                     	;# 
  4005  0893                     	;# 
  4006  0893                     	;# 
  4007  0893                     	;# 
  4008  0893                     	;# 
  4009  0893                     	;# 
  4010  0893                     	;# 
  4011  0894                     	;# 
  4012  0894                     	;# 
  4013  0894                     	;# 
  4014  0895                     	;# 
  4015  0895                     	;# 
  4016  0895                     	;# 
  4017  0896                     	;# 
  4018  0896                     	;# 
  4019  0896                     	;# 
  4020  089B                     	;# 
  4021  0911                     	;# 
  4022  0912                     	;# 
  4023  0913                     	;# 
  4024  0914                     	;# 
  4025  0915                     	;# 
  4026  0916                     	;# 
  4027  0918                     	;# 
  4028  0919                     	;# 
  4029  091A                     	;# 
  4030  091B                     	;# 
  4031  091C                     	;# 
  4032  091D                     	;# 
  4033  091E                     	;# 
  4034  091F                     	;# 
  4035  0E0F                     	;# 
  4036  0E10                     	;# 
  4037  0E11                     	;# 
  4038  0E12                     	;# 
  4039  0E13                     	;# 
  4040  0E14                     	;# 
  4041  0E15                     	;# 
  4042  0E16                     	;# 
  4043  0E17                     	;# 
  4044  0E18                     	;# 
  4045  0E19                     	;# 
  4046  0E1A                     	;# 
  4047  0E1B                     	;# 
  4048  0E1C                     	;# 
  4049  0E1D                     	;# 
  4050  0E1E                     	;# 
  4051  0E1F                     	;# 
  4052  0E20                     	;# 
  4053  0E21                     	;# 
  4054  0E22                     	;# 
  4055  0E24                     	;# 
  4056  0E25                     	;# 
  4057  0E28                     	;# 
  4058  0E29                     	;# 
  4059  0E2A                     	;# 
  4060  0E2B                     	;# 
  4061  0E2C                     	;# 
  4062  0E2D                     	;# 
  4063  0E2E                     	;# 
  4064  0E2F                     	;# 
  4065  0E90                     	;# 
  4066  0E91                     	;# 
  4067  0E92                     	;# 
  4068  0E94                     	;# 
  4069  0E95                     	;# 
  4070  0E9C                     	;# 
  4071  0E9D                     	;# 
  4072  0E9E                     	;# 
  4073  0E9F                     	;# 
  4074  0EA0                     	;# 
  4075  0EA1                     	;# 
  4076  0EA2                     	;# 
  4077  0EA3                     	;# 
  4078  0EA4                     	;# 
  4079  0EA5                     	;# 
  4080  0EA6                     	;# 
  4081  0EA7                     	;# 
  4082  0F0F                     	;# 
  4083  0F10                     	;# 
  4084  0F11                     	;# 
  4085  0F12                     	;# 
  4086  0F13                     	;# 
  4087  0F14                     	;# 
  4088  0F15                     	;# 
  4089  0F16                     	;# 
  4090  0F17                     	;# 
  4091  0F18                     	;# 
  4092  0F19                     	;# 
  4093  0F1A                     	;# 
  4094  0F1B                     	;# 
  4095  0F1C                     	;# 
  4096  0F1D                     	;# 
  4097  0F1E                     	;# 
  4098  0F1F                     	;# 
  4099  0F20                     	;# 
  4100  0F21                     	;# 
  4101  0F22                     	;# 
  4102  0F23                     	;# 
  4103  0F24                     	;# 
  4104  0F25                     	;# 
  4105  0F26                     	;# 
  4106  0F27                     	;# 
  4107  0F28                     	;# 
  4108  0F29                     	;# 
  4109  0F2A                     	;# 
  4110  0F2B                     	;# 
  4111  0F2C                     	;# 
  4112  0F2D                     	;# 
  4113  0F2E                     	;# 
  4114  0F2F                     	;# 
  4115  0F30                     	;# 
  4116  0F31                     	;# 
  4117  0F32                     	;# 
  4118  0F33                     	;# 
  4119  0F34                     	;# 
  4120  0F35                     	;# 
  4121  0F36                     	;# 
  4122  0F37                     	;# 
  4123  0FE4                     	;# 
  4124  0FE5                     	;# 
  4125  0FE6                     	;# 
  4126  0FE7                     	;# 
  4127  0FE8                     	;# 
  4128  0FE9                     	;# 
  4129  0FEA                     	;# 
  4130  0FEB                     	;# 
  4131  0FED                     	;# 
  4132  0FEE                     	;# 
  4133  0FEF                     	;# 
  4134  0000                     	;# 
  4135  0001                     	;# 
  4136  0002                     	;# 
  4137  0003                     	;# 
  4138  0004                     	;# 
  4139  0005                     	;# 
  4140  0006                     	;# 
  4141  0007                     	;# 
  4142  0008                     	;# 
  4143  0009                     	;# 
  4144  000A                     	;# 
  4145  000B                     	;# 
  4146  000C                     	;# 
  4147  000D                     	;# 
  4148  000E                     	;# 
  4149  0010                     	;# 
  4150  0011                     	;# 
  4151  0012                     	;# 
  4152  0013                     	;# 
  4153  0014                     	;# 
  4154  0015                     	;# 
  4155  0015                     	;# 
  4156  0016                     	;# 
  4157  0016                     	;# 
  4158  0017                     	;# 
  4159  0018                     	;# 
  4160  0019                     	;# 
  4161  0019                     	;# 
  4162  001A                     	;# 
  4163  001B                     	;# 
  4164  001C                     	;# 
  4165  001D                     	;# 
  4166  001E                     	;# 
  4167  001F                     	;# 
  4168  008C                     	;# 
  4169  008D                     	;# 
  4170  008E                     	;# 
  4171  0090                     	;# 
  4172  0091                     	;# 
  4173  0092                     	;# 
  4174  0093                     	;# 
  4175  0094                     	;# 
  4176  0097                     	;# 
  4177  009B                     	;# 
  4178  009B                     	;# 
  4179  009C                     	;# 
  4180  009D                     	;# 
  4181  009E                     	;# 
  4182  009F                     	;# 
  4183  010C                     	;# 
  4184  010D                     	;# 
  4185  010E                     	;# 
  4186  0111                     	;# 
  4187  0112                     	;# 
  4188  0113                     	;# 
  4189  0114                     	;# 
  4190  0115                     	;# 
  4191  0116                     	;# 
  4192  0117                     	;# 
  4193  0118                     	;# 
  4194  0119                     	;# 
  4195  018C                     	;# 
  4196  018D                     	;# 
  4197  018E                     	;# 
  4198  0199                     	;# 
  4199  0199                     	;# 
  4200  0199                     	;# 
  4201  019A                     	;# 
  4202  019A                     	;# 
  4203  019A                     	;# 
  4204  019B                     	;# 
  4205  019B                     	;# 
  4206  019B                     	;# 
  4207  019B                     	;# 
  4208  019B                     	;# 
  4209  019C                     	;# 
  4210  019C                     	;# 
  4211  019C                     	;# 
  4212  019D                     	;# 
  4213  019D                     	;# 
  4214  019D                     	;# 
  4215  019E                     	;# 
  4216  019E                     	;# 
  4217  019E                     	;# 
  4218  019F                     	;# 
  4219  019F                     	;# 
  4220  019F                     	;# 
  4221  019F                     	;# 
  4222  019F                     	;# 
  4223  020C                     	;# 
  4224  020D                     	;# 
  4225  020E                     	;# 
  4226  0211                     	;# 
  4227  0211                     	;# 
  4228  0212                     	;# 
  4229  0212                     	;# 
  4230  0213                     	;# 
  4231  0213                     	;# 
  4232  0214                     	;# 
  4233  0214                     	;# 
  4234  0215                     	;# 
  4235  0215                     	;# 
  4236  0215                     	;# 
  4237  0215                     	;# 
  4238  0216                     	;# 
  4239  0216                     	;# 
  4240  0217                     	;# 
  4241  0217                     	;# 
  4242  0219                     	;# 
  4243  021A                     	;# 
  4244  021B                     	;# 
  4245  021C                     	;# 
  4246  021D                     	;# 
  4247  021D                     	;# 
  4248  021E                     	;# 
  4249  021F                     	;# 
  4250  028C                     	;# 
  4251  028D                     	;# 
  4252  028E                     	;# 
  4253  0291                     	;# 
  4254  0291                     	;# 
  4255  0292                     	;# 
  4256  0293                     	;# 
  4257  0294                     	;# 
  4258  0295                     	;# 
  4259  0295                     	;# 
  4260  0296                     	;# 
  4261  0297                     	;# 
  4262  0298                     	;# 
  4263  029F                     	;# 
  4264  030C                     	;# 
  4265  030D                     	;# 
  4266  030E                     	;# 
  4267  0311                     	;# 
  4268  0311                     	;# 
  4269  0312                     	;# 
  4270  0313                     	;# 
  4271  0314                     	;# 
  4272  0315                     	;# 
  4273  0315                     	;# 
  4274  0316                     	;# 
  4275  0317                     	;# 
  4276  0318                     	;# 
  4277  038C                     	;# 
  4278  038D                     	;# 
  4279  038E                     	;# 
  4280  0391                     	;# 
  4281  0392                     	;# 
  4282  0393                     	;# 
  4283  0394                     	;# 
  4284  0395                     	;# 
  4285  0396                     	;# 
  4286  0397                     	;# 
  4287  0398                     	;# 
  4288  0399                     	;# 
  4289  039A                     	;# 
  4290  039C                     	;# 
  4291  039D                     	;# 
  4292  039E                     	;# 
  4293  039F                     	;# 
  4294  0411                     	;# 
  4295  0411                     	;# 
  4296  0412                     	;# 
  4297  0413                     	;# 
  4298  0414                     	;# 
  4299  0415                     	;# 
  4300  0416                     	;# 
  4301  0417                     	;# 
  4302  0418                     	;# 
  4303  0418                     	;# 
  4304  0419                     	;# 
  4305  041A                     	;# 
  4306  041B                     	;# 
  4307  041C                     	;# 
  4308  041D                     	;# 
  4309  041E                     	;# 
  4310  041F                     	;# 
  4311  0498                     	;# 
  4312  0498                     	;# 
  4313  0499                     	;# 
  4314  049A                     	;# 
  4315  049B                     	;# 
  4316  049B                     	;# 
  4317  049C                     	;# 
  4318  049D                     	;# 
  4319  049E                     	;# 
  4320  049F                     	;# 
  4321  0617                     	;# 
  4322  0618                     	;# 
  4323  0619                     	;# 
  4324  0619                     	;# 
  4325  061A                     	;# 
  4326  061B                     	;# 
  4327  061C                     	;# 
  4328  061C                     	;# 
  4329  061F                     	;# 
  4330  0691                     	;# 
  4331  0692                     	;# 
  4332  0693                     	;# 
  4333  0694                     	;# 
  4334  0695                     	;# 
  4335  0696                     	;# 
  4336  0697                     	;# 
  4337  0698                     	;# 
  4338  0699                     	;# 
  4339  0711                     	;# 
  4340  0712                     	;# 
  4341  0713                     	;# 
  4342  0714                     	;# 
  4343  0715                     	;# 
  4344  0716                     	;# 
  4345  0717                     	;# 
  4346  0718                     	;# 
  4347  0719                     	;# 
  4348  0891                     	;# 
  4349  0891                     	;# 
  4350  0891                     	;# 
  4351  0891                     	;# 
  4352  0891                     	;# 
  4353  0891                     	;# 
  4354  0892                     	;# 
  4355  0892                     	;# 
  4356  0892                     	;# 
  4357  0893                     	;# 
  4358  0893                     	;# 
  4359  0893                     	;# 
  4360  0893                     	;# 
  4361  0893                     	;# 
  4362  0893                     	;# 
  4363  0894                     	;# 
  4364  0894                     	;# 
  4365  0894                     	;# 
  4366  0895                     	;# 
  4367  0895                     	;# 
  4368  0895                     	;# 
  4369  0896                     	;# 
  4370  0896                     	;# 
  4371  0896                     	;# 
  4372  089B                     	;# 
  4373  0911                     	;# 
  4374  0912                     	;# 
  4375  0913                     	;# 
  4376  0914                     	;# 
  4377  0915                     	;# 
  4378  0916                     	;# 
  4379  0918                     	;# 
  4380  0919                     	;# 
  4381  091A                     	;# 
  4382  091B                     	;# 
  4383  091C                     	;# 
  4384  091D                     	;# 
  4385  091E                     	;# 
  4386  091F                     	;# 
  4387  0E0F                     	;# 
  4388  0E10                     	;# 
  4389  0E11                     	;# 
  4390  0E12                     	;# 
  4391  0E13                     	;# 
  4392  0E14                     	;# 
  4393  0E15                     	;# 
  4394  0E16                     	;# 
  4395  0E17                     	;# 
  4396  0E18                     	;# 
  4397  0E19                     	;# 
  4398  0E1A                     	;# 
  4399  0E1B                     	;# 
  4400  0E1C                     	;# 
  4401  0E1D                     	;# 
  4402  0E1E                     	;# 
  4403  0E1F                     	;# 
  4404  0E20                     	;# 
  4405  0E21                     	;# 
  4406  0E22                     	;# 
  4407  0E24                     	;# 
  4408  0E25                     	;# 
  4409  0E28                     	;# 
  4410  0E29                     	;# 
  4411  0E2A                     	;# 
  4412  0E2B                     	;# 
  4413  0E2C                     	;# 
  4414  0E2D                     	;# 
  4415  0E2E                     	;# 
  4416  0E2F                     	;# 
  4417  0E90                     	;# 
  4418  0E91                     	;# 
  4419  0E92                     	;# 
  4420  0E94                     	;# 
  4421  0E95                     	;# 
  4422  0E9C                     	;# 
  4423  0E9D                     	;# 
  4424  0E9E                     	;# 
  4425  0E9F                     	;# 
  4426  0EA0                     	;# 
  4427  0EA1                     	;# 
  4428  0EA2                     	;# 
  4429  0EA3                     	;# 
  4430  0EA4                     	;# 
  4431  0EA5                     	;# 
  4432  0EA6                     	;# 
  4433  0EA7                     	;# 
  4434  0F0F                     	;# 
  4435  0F10                     	;# 
  4436  0F11                     	;# 
  4437  0F12                     	;# 
  4438  0F13                     	;# 
  4439  0F14                     	;# 
  4440  0F15                     	;# 
  4441  0F16                     	;# 
  4442  0F17                     	;# 
  4443  0F18                     	;# 
  4444  0F19                     	;# 
  4445  0F1A                     	;# 
  4446  0F1B                     	;# 
  4447  0F1C                     	;# 
  4448  0F1D                     	;# 
  4449  0F1E                     	;# 
  4450  0F1F                     	;# 
  4451  0F20                     	;# 
  4452  0F21                     	;# 
  4453  0F22                     	;# 
  4454  0F23                     	;# 
  4455  0F24                     	;# 
  4456  0F25                     	;# 
  4457  0F26                     	;# 
  4458  0F27                     	;# 
  4459  0F28                     	;# 
  4460  0F29                     	;# 
  4461  0F2A                     	;# 
  4462  0F2B                     	;# 
  4463  0F2C                     	;# 
  4464  0F2D                     	;# 
  4465  0F2E                     	;# 
  4466  0F2F                     	;# 
  4467  0F30                     	;# 
  4468  0F31                     	;# 
  4469  0F32                     	;# 
  4470  0F33                     	;# 
  4471  0F34                     	;# 
  4472  0F35                     	;# 
  4473  0F36                     	;# 
  4474  0F37                     	;# 
  4475  0FE4                     	;# 
  4476  0FE5                     	;# 
  4477  0FE6                     	;# 
  4478  0FE7                     	;# 
  4479  0FE8                     	;# 
  4480  0FE9                     	;# 
  4481  0FEA                     	;# 
  4482  0FEB                     	;# 
  4483  0FED                     	;# 
  4484  0FEE                     	;# 
  4485  0FEF                     	;# 
  4486  0000                     	;# 
  4487  0001                     	;# 
  4488  0002                     	;# 
  4489  0003                     	;# 
  4490  0004                     	;# 
  4491  0005                     	;# 
  4492  0006                     	;# 
  4493  0007                     	;# 
  4494  0008                     	;# 
  4495  0009                     	;# 
  4496  000A                     	;# 
  4497  000B                     	;# 
  4498  000C                     	;# 
  4499  000D                     	;# 
  4500  000E                     	;# 
  4501  0010                     	;# 
  4502  0011                     	;# 
  4503  0012                     	;# 
  4504  0013                     	;# 
  4505  0014                     	;# 
  4506  0015                     	;# 
  4507  0015                     	;# 
  4508  0016                     	;# 
  4509  0016                     	;# 
  4510  0017                     	;# 
  4511  0018                     	;# 
  4512  0019                     	;# 
  4513  0019                     	;# 
  4514  001A                     	;# 
  4515  001B                     	;# 
  4516  001C                     	;# 
  4517  001D                     	;# 
  4518  001E                     	;# 
  4519  001F                     	;# 
  4520  008C                     	;# 
  4521  008D                     	;# 
  4522  008E                     	;# 
  4523  0090                     	;# 
  4524  0091                     	;# 
  4525  0092                     	;# 
  4526  0093                     	;# 
  4527  0094                     	;# 
  4528  0097                     	;# 
  4529  009B                     	;# 
  4530  009B                     	;# 
  4531  009C                     	;# 
  4532  009D                     	;# 
  4533  009E                     	;# 
  4534  009F                     	;# 
  4535  010C                     	;# 
  4536  010D                     	;# 
  4537  010E                     	;# 
  4538  0111                     	;# 
  4539  0112                     	;# 
  4540  0113                     	;# 
  4541  0114                     	;# 
  4542  0115                     	;# 
  4543  0116                     	;# 
  4544  0117                     	;# 
  4545  0118                     	;# 
  4546  0119                     	;# 
  4547  018C                     	;# 
  4548  018D                     	;# 
  4549  018E                     	;# 
  4550  0199                     	;# 
  4551  0199                     	;# 
  4552  0199                     	;# 
  4553  019A                     	;# 
  4554  019A                     	;# 
  4555  019A                     	;# 
  4556  019B                     	;# 
  4557  019B                     	;# 
  4558  019B                     	;# 
  4559  019B                     	;# 
  4560  019B                     	;# 
  4561  019C                     	;# 
  4562  019C                     	;# 
  4563  019C                     	;# 
  4564  019D                     	;# 
  4565  019D                     	;# 
  4566  019D                     	;# 
  4567  019E                     	;# 
  4568  019E                     	;# 
  4569  019E                     	;# 
  4570  019F                     	;# 
  4571  019F                     	;# 
  4572  019F                     	;# 
  4573  019F                     	;# 
  4574  019F                     	;# 
  4575  020C                     	;# 
  4576  020D                     	;# 
  4577  020E                     	;# 
  4578  0211                     	;# 
  4579  0211                     	;# 
  4580  0212                     	;# 
  4581  0212                     	;# 
  4582  0213                     	;# 
  4583  0213                     	;# 
  4584  0214                     	;# 
  4585  0214                     	;# 
  4586  0215                     	;# 
  4587  0215                     	;# 
  4588  0215                     	;# 
  4589  0215                     	;# 
  4590  0216                     	;# 
  4591  0216                     	;# 
  4592  0217                     	;# 
  4593  0217                     	;# 
  4594  0219                     	;# 
  4595  021A                     	;# 
  4596  021B                     	;# 
  4597  021C                     	;# 
  4598  021D                     	;# 
  4599  021D                     	;# 
  4600  021E                     	;# 
  4601  021F                     	;# 
  4602  028C                     	;# 
  4603  028D                     	;# 
  4604  028E                     	;# 
  4605  0291                     	;# 
  4606  0291                     	;# 
  4607  0292                     	;# 
  4608  0293                     	;# 
  4609  0294                     	;# 
  4610  0295                     	;# 
  4611  0295                     	;# 
  4612  0296                     	;# 
  4613  0297                     	;# 
  4614  0298                     	;# 
  4615  029F                     	;# 
  4616  030C                     	;# 
  4617  030D                     	;# 
  4618  030E                     	;# 
  4619  0311                     	;# 
  4620  0311                     	;# 
  4621  0312                     	;# 
  4622  0313                     	;# 
  4623  0314                     	;# 
  4624  0315                     	;# 
  4625  0315                     	;# 
  4626  0316                     	;# 
  4627  0317                     	;# 
  4628  0318                     	;# 
  4629  038C                     	;# 
  4630  038D                     	;# 
  4631  038E                     	;# 
  4632  0391                     	;# 
  4633  0392                     	;# 
  4634  0393                     	;# 
  4635  0394                     	;# 
  4636  0395                     	;# 
  4637  0396                     	;# 
  4638  0397                     	;# 
  4639  0398                     	;# 
  4640  0399                     	;# 
  4641  039A                     	;# 
  4642  039C                     	;# 
  4643  039D                     	;# 
  4644  039E                     	;# 
  4645  039F                     	;# 
  4646  0411                     	;# 
  4647  0411                     	;# 
  4648  0412                     	;# 
  4649  0413                     	;# 
  4650  0414                     	;# 
  4651  0415                     	;# 
  4652  0416                     	;# 
  4653  0417                     	;# 
  4654  0418                     	;# 
  4655  0418                     	;# 
  4656  0419                     	;# 
  4657  041A                     	;# 
  4658  041B                     	;# 
  4659  041C                     	;# 
  4660  041D                     	;# 
  4661  041E                     	;# 
  4662  041F                     	;# 
  4663  0498                     	;# 
  4664  0498                     	;# 
  4665  0499                     	;# 
  4666  049A                     	;# 
  4667  049B                     	;# 
  4668  049B                     	;# 
  4669  049C                     	;# 
  4670  049D                     	;# 
  4671  049E                     	;# 
  4672  049F                     	;# 
  4673  0617                     	;# 
  4674  0618                     	;# 
  4675  0619                     	;# 
  4676  0619                     	;# 
  4677  061A                     	;# 
  4678  061B                     	;# 
  4679  061C                     	;# 
  4680  061C                     	;# 
  4681  061F                     	;# 
  4682  0691                     	;# 
  4683  0692                     	;# 
  4684  0693                     	;# 
  4685  0694                     	;# 
  4686  0695                     	;# 
  4687  0696                     	;# 
  4688  0697                     	;# 
  4689  0698                     	;# 
  4690  0699                     	;# 
  4691  0711                     	;# 
  4692  0712                     	;# 
  4693  0713                     	;# 
  4694  0714                     	;# 
  4695  0715                     	;# 
  4696  0716                     	;# 
  4697  0717                     	;# 
  4698  0718                     	;# 
  4699  0719                     	;# 
  4700  0891                     	;# 
  4701  0891                     	;# 
  4702  0891                     	;# 
  4703  0891                     	;# 
  4704  0891                     	;# 
  4705  0891                     	;# 
  4706  0892                     	;# 
  4707  0892                     	;# 
  4708  0892                     	;# 
  4709  0893                     	;# 
  4710  0893                     	;# 
  4711  0893                     	;# 
  4712  0893                     	;# 
  4713  0893                     	;# 
  4714  0893                     	;# 
  4715  0894                     	;# 
  4716  0894                     	;# 
  4717  0894                     	;# 
  4718  0895                     	;# 
  4719  0895                     	;# 
  4720  0895                     	;# 
  4721  0896                     	;# 
  4722  0896                     	;# 
  4723  0896                     	;# 
  4724  089B                     	;# 
  4725  0911                     	;# 
  4726  0912                     	;# 
  4727  0913                     	;# 
  4728  0914                     	;# 
  4729  0915                     	;# 
  4730  0916                     	;# 
  4731  0918                     	;# 
  4732  0919                     	;# 
  4733  091A                     	;# 
  4734  091B                     	;# 
  4735  091C                     	;# 
  4736  091D                     	;# 
  4737  091E                     	;# 
  4738  091F                     	;# 
  4739  0E0F                     	;# 
  4740  0E10                     	;# 
  4741  0E11                     	;# 
  4742  0E12                     	;# 
  4743  0E13                     	;# 
  4744  0E14                     	;# 
  4745  0E15                     	;# 
  4746  0E16                     	;# 
  4747  0E17                     	;# 
  4748  0E18                     	;# 
  4749  0E19                     	;# 
  4750  0E1A                     	;# 
  4751  0E1B                     	;# 
  4752  0E1C                     	;# 
  4753  0E1D                     	;# 
  4754  0E1E                     	;# 
  4755  0E1F                     	;# 
  4756  0E20                     	;# 
  4757  0E21                     	;# 
  4758  0E22                     	;# 
  4759  0E24                     	;# 
  4760  0E25                     	;# 
  4761  0E28                     	;# 
  4762  0E29                     	;# 
  4763  0E2A                     	;# 
  4764  0E2B                     	;# 
  4765  0E2C                     	;# 
  4766  0E2D                     	;# 
  4767  0E2E                     	;# 
  4768  0E2F                     	;# 
  4769  0E90                     	;# 
  4770  0E91                     	;# 
  4771  0E92                     	;# 
  4772  0E94                     	;# 
  4773  0E95                     	;# 
  4774  0E9C                     	;# 
  4775  0E9D                     	;# 
  4776  0E9E                     	;# 
  4777  0E9F                     	;# 
  4778  0EA0                     	;# 
  4779  0EA1                     	;# 
  4780  0EA2                     	;# 
  4781  0EA3                     	;# 
  4782  0EA4                     	;# 
  4783  0EA5                     	;# 
  4784  0EA6                     	;# 
  4785  0EA7                     	;# 
  4786  0F0F                     	;# 
  4787  0F10                     	;# 
  4788  0F11                     	;# 
  4789  0F12                     	;# 
  4790  0F13                     	;# 
  4791  0F14                     	;# 
  4792  0F15                     	;# 
  4793  0F16                     	;# 
  4794  0F17                     	;# 
  4795  0F18                     	;# 
  4796  0F19                     	;# 
  4797  0F1A                     	;# 
  4798  0F1B                     	;# 
  4799  0F1C                     	;# 
  4800  0F1D                     	;# 
  4801  0F1E                     	;# 
  4802  0F1F                     	;# 
  4803  0F20                     	;# 
  4804  0F21                     	;# 
  4805  0F22                     	;# 
  4806  0F23                     	;# 
  4807  0F24                     	;# 
  4808  0F25                     	;# 
  4809  0F26                     	;# 
  4810  0F27                     	;# 
  4811  0F28                     	;# 
  4812  0F29                     	;# 
  4813  0F2A                     	;# 
  4814  0F2B                     	;# 
  4815  0F2C                     	;# 
  4816  0F2D                     	;# 
  4817  0F2E                     	;# 
  4818  0F2F                     	;# 
  4819  0F30                     	;# 
  4820  0F31                     	;# 
  4821  0F32                     	;# 
  4822  0F33                     	;# 
  4823  0F34                     	;# 
  4824  0F35                     	;# 
  4825  0F36                     	;# 
  4826  0F37                     	;# 
  4827  0FE4                     	;# 
  4828  0FE5                     	;# 
  4829  0FE6                     	;# 
  4830  0FE7                     	;# 
  4831  0FE8                     	;# 
  4832  0FE9                     	;# 
  4833  0FEA                     	;# 
  4834  0FEB                     	;# 
  4835  0FED                     	;# 
  4836  0FEE                     	;# 
  4837  0FEF                     	;# 
  4838  0000                     	;# 
  4839  0001                     	;# 
  4840  0002                     	;# 
  4841  0003                     	;# 
  4842  0004                     	;# 
  4843  0005                     	;# 
  4844  0006                     	;# 
  4845  0007                     	;# 
  4846  0008                     	;# 
  4847  0009                     	;# 
  4848  000A                     	;# 
  4849  000B                     	;# 
  4850  000C                     	;# 
  4851  000D                     	;# 
  4852  000E                     	;# 
  4853  0010                     	;# 
  4854  0011                     	;# 
  4855  0012                     	;# 
  4856  0013                     	;# 
  4857  0014                     	;# 
  4858  0015                     	;# 
  4859  0015                     	;# 
  4860  0016                     	;# 
  4861  0016                     	;# 
  4862  0017                     	;# 
  4863  0018                     	;# 
  4864  0019                     	;# 
  4865  0019                     	;# 
  4866  001A                     	;# 
  4867  001B                     	;# 
  4868  001C                     	;# 
  4869  001D                     	;# 
  4870  001E                     	;# 
  4871  001F                     	;# 
  4872  008C                     	;# 
  4873  008D                     	;# 
  4874  008E                     	;# 
  4875  0090                     	;# 
  4876  0091                     	;# 
  4877  0092                     	;# 
  4878  0093                     	;# 
  4879  0094                     	;# 
  4880  0097                     	;# 
  4881  009B                     	;# 
  4882  009B                     	;# 
  4883  009C                     	;# 
  4884  009D                     	;# 
  4885  009E                     	;# 
  4886  009F                     	;# 
  4887  010C                     	;# 
  4888  010D                     	;# 
  4889  010E                     	;# 
  4890  0111                     	;# 
  4891  0112                     	;# 
  4892  0113                     	;# 
  4893  0114                     	;# 
  4894  0115                     	;# 
  4895  0116                     	;# 
  4896  0117                     	;# 
  4897  0118                     	;# 
  4898  0119                     	;# 
  4899  018C                     	;# 
  4900  018D                     	;# 
  4901  018E                     	;# 
  4902  0199                     	;# 
  4903  0199                     	;# 
  4904  0199                     	;# 
  4905  019A                     	;# 
  4906  019A                     	;# 
  4907  019A                     	;# 
  4908  019B                     	;# 
  4909  019B                     	;# 
  4910  019B                     	;# 
  4911  019B                     	;# 
  4912  019B                     	;# 
  4913  019C                     	;# 
  4914  019C                     	;# 
  4915  019C                     	;# 
  4916  019D                     	;# 
  4917  019D                     	;# 
  4918  019D                     	;# 
  4919  019E                     	;# 
  4920  019E                     	;# 
  4921  019E                     	;# 
  4922  019F                     	;# 
  4923  019F                     	;# 
  4924  019F                     	;# 
  4925  019F                     	;# 
  4926  019F                     	;# 
  4927  020C                     	;# 
  4928  020D                     	;# 
  4929  020E                     	;# 
  4930  0211                     	;# 
  4931  0211                     	;# 
  4932  0212                     	;# 
  4933  0212                     	;# 
  4934  0213                     	;# 
  4935  0213                     	;# 
  4936  0214                     	;# 
  4937  0214                     	;# 
  4938  0215                     	;# 
  4939  0215                     	;# 
  4940  0215                     	;# 
  4941  0215                     	;# 
  4942  0216                     	;# 
  4943  0216                     	;# 
  4944  0217                     	;# 
  4945  0217                     	;# 
  4946  0219                     	;# 
  4947  021A                     	;# 
  4948  021B                     	;# 
  4949  021C                     	;# 
  4950  021D                     	;# 
  4951  021D                     	;# 
  4952  021E                     	;# 
  4953  021F                     	;# 
  4954  028C                     	;# 
  4955  028D                     	;# 
  4956  028E                     	;# 
  4957  0291                     	;# 
  4958  0291                     	;# 
  4959  0292                     	;# 
  4960  0293                     	;# 
  4961  0294                     	;# 
  4962  0295                     	;# 
  4963  0295                     	;# 
  4964  0296                     	;# 
  4965  0297                     	;# 
  4966  0298                     	;# 
  4967  029F                     	;# 
  4968  030C                     	;# 
  4969  030D                     	;# 
  4970  030E                     	;# 
  4971  0311                     	;# 
  4972  0311                     	;# 
  4973  0312                     	;# 
  4974  0313                     	;# 
  4975  0314                     	;# 
  4976  0315                     	;# 
  4977  0315                     	;# 
  4978  0316                     	;# 
  4979  0317                     	;# 
  4980  0318                     	;# 
  4981  038C                     	;# 
  4982  038D                     	;# 
  4983  038E                     	;# 
  4984  0391                     	;# 
  4985  0392                     	;# 
  4986  0393                     	;# 
  4987  0394                     	;# 
  4988  0395                     	;# 
  4989  0396                     	;# 
  4990  0397                     	;# 
  4991  0398                     	;# 
  4992  0399                     	;# 
  4993  039A                     	;# 
  4994  039C                     	;# 
  4995  039D                     	;# 
  4996  039E                     	;# 
  4997  039F                     	;# 
  4998  0411                     	;# 
  4999  0411                     	;# 
  5000  0412                     	;# 
  5001  0413                     	;# 
  5002  0414                     	;# 
  5003  0415                     	;# 
  5004  0416                     	;# 
  5005  0417                     	;# 
  5006  0418                     	;# 
  5007  0418                     	;# 
  5008  0419                     	;# 
  5009  041A                     	;# 
  5010  041B                     	;# 
  5011  041C                     	;# 
  5012  041D                     	;# 
  5013  041E                     	;# 
  5014  041F                     	;# 
  5015  0498                     	;# 
  5016  0498                     	;# 
  5017  0499                     	;# 
  5018  049A                     	;# 
  5019  049B                     	;# 
  5020  049B                     	;# 
  5021  049C                     	;# 
  5022  049D                     	;# 
  5023  049E                     	;# 
  5024  049F                     	;# 
  5025  0617                     	;# 
  5026  0618                     	;# 
  5027  0619                     	;# 
  5028  0619                     	;# 
  5029  061A                     	;# 
  5030  061B                     	;# 
  5031  061C                     	;# 
  5032  061C                     	;# 
  5033  061F                     	;# 
  5034  0691                     	;# 
  5035  0692                     	;# 
  5036  0693                     	;# 
  5037  0694                     	;# 
  5038  0695                     	;# 
  5039  0696                     	;# 
  5040  0697                     	;# 
  5041  0698                     	;# 
  5042  0699                     	;# 
  5043  0711                     	;# 
  5044  0712                     	;# 
  5045  0713                     	;# 
  5046  0714                     	;# 
  5047  0715                     	;# 
  5048  0716                     	;# 
  5049  0717                     	;# 
  5050  0718                     	;# 
  5051  0719                     	;# 
  5052  0891                     	;# 
  5053  0891                     	;# 
  5054  0891                     	;# 
  5055  0891                     	;# 
  5056  0891                     	;# 
  5057  0891                     	;# 
  5058  0892                     	;# 
  5059  0892                     	;# 
  5060  0892                     	;# 
  5061  0893                     	;# 
  5062  0893                     	;# 
  5063  0893                     	;# 
  5064  0893                     	;# 
  5065  0893                     	;# 
  5066  0893                     	;# 
  5067  0894                     	;# 
  5068  0894                     	;# 
  5069  0894                     	;# 
  5070  0895                     	;# 
  5071  0895                     	;# 
  5072  0895                     	;# 
  5073  0896                     	;# 
  5074  0896                     	;# 
  5075  0896                     	;# 
  5076  089B                     	;# 
  5077  0911                     	;# 
  5078  0912                     	;# 
  5079  0913                     	;# 
  5080  0914                     	;# 
  5081  0915                     	;# 
  5082  0916                     	;# 
  5083  0918                     	;# 
  5084  0919                     	;# 
  5085  091A                     	;# 
  5086  091B                     	;# 
  5087  091C                     	;# 
  5088  091D                     	;# 
  5089  091E                     	;# 
  5090  091F                     	;# 
  5091  0E0F                     	;# 
  5092  0E10                     	;# 
  5093  0E11                     	;# 
  5094  0E12                     	;# 
  5095  0E13                     	;# 
  5096  0E14                     	;# 
  5097  0E15                     	;# 
  5098  0E16                     	;# 
  5099  0E17                     	;# 
  5100  0E18                     	;# 
  5101  0E19                     	;# 
  5102  0E1A                     	;# 
  5103  0E1B                     	;# 
  5104  0E1C                     	;# 
  5105  0E1D                     	;# 
  5106  0E1E                     	;# 
  5107  0E1F                     	;# 
  5108  0E20                     	;# 
  5109  0E21                     	;# 
  5110  0E22                     	;# 
  5111  0E24                     	;# 
  5112  0E25                     	;# 
  5113  0E28                     	;# 
  5114  0E29                     	;# 
  5115  0E2A                     	;# 
  5116  0E2B                     	;# 
  5117  0E2C                     	;# 
  5118  0E2D                     	;# 
  5119  0E2E                     	;# 
  5120  0E2F                     	;# 
  5121  0E90                     	;# 
  5122  0E91                     	;# 
  5123  0E92                     	;# 
  5124  0E94                     	;# 
  5125  0E95                     	;# 
  5126  0E9C                     	;# 
  5127  0E9D                     	;# 
  5128  0E9E                     	;# 
  5129  0E9F                     	;# 
  5130  0EA0                     	;# 
  5131  0EA1                     	;# 
  5132  0EA2                     	;# 
  5133  0EA3                     	;# 
  5134  0EA4                     	;# 
  5135  0EA5                     	;# 
  5136  0EA6                     	;# 
  5137  0EA7                     	;# 
  5138  0F0F                     	;# 
  5139  0F10                     	;# 
  5140  0F11                     	;# 
  5141  0F12                     	;# 
  5142  0F13                     	;# 
  5143  0F14                     	;# 
  5144  0F15                     	;# 
  5145  0F16                     	;# 
  5146  0F17                     	;# 
  5147  0F18                     	;# 
  5148  0F19                     	;# 
  5149  0F1A                     	;# 
  5150  0F1B                     	;# 
  5151  0F1C                     	;# 
  5152  0F1D                     	;# 
  5153  0F1E                     	;# 
  5154  0F1F                     	;# 
  5155  0F20                     	;# 
  5156  0F21                     	;# 
  5157  0F22                     	;# 
  5158  0F23                     	;# 
  5159  0F24                     	;# 
  5160  0F25                     	;# 
  5161  0F26                     	;# 
  5162  0F27                     	;# 
  5163  0F28                     	;# 
  5164  0F29                     	;# 
  5165  0F2A                     	;# 
  5166  0F2B                     	;# 
  5167  0F2C                     	;# 
  5168  0F2D                     	;# 
  5169  0F2E                     	;# 
  5170  0F2F                     	;# 
  5171  0F30                     	;# 
  5172  0F31                     	;# 
  5173  0F32                     	;# 
  5174  0F33                     	;# 
  5175  0F34                     	;# 
  5176  0F35                     	;# 
  5177  0F36                     	;# 
  5178  0F37                     	;# 
  5179  0FE4                     	;# 
  5180  0FE5                     	;# 
  5181  0FE6                     	;# 
  5182  0FE7                     	;# 
  5183  0FE8                     	;# 
  5184  0FE9                     	;# 
  5185  0FEA                     	;# 
  5186  0FEB                     	;# 
  5187  0FED                     	;# 
  5188  0FEE                     	;# 
  5189  0FEF                     	;# 
  5190  0000                     	;# 
  5191  0001                     	;# 
  5192  0002                     	;# 
  5193  0003                     	;# 
  5194  0004                     	;# 
  5195  0005                     	;# 
  5196  0006                     	;# 
  5197  0007                     	;# 
  5198  0008                     	;# 
  5199  0009                     	;# 
  5200  000A                     	;# 
  5201  000B                     	;# 
  5202  000C                     	;# 
  5203  000D                     	;# 
  5204  000E                     	;# 
  5205  0010                     	;# 
  5206  0011                     	;# 
  5207  0012                     	;# 
  5208  0013                     	;# 
  5209  0014                     	;# 
  5210  0015                     	;# 
  5211  0015                     	;# 
  5212  0016                     	;# 
  5213  0016                     	;# 
  5214  0017                     	;# 
  5215  0018                     	;# 
  5216  0019                     	;# 
  5217  0019                     	;# 
  5218  001A                     	;# 
  5219  001B                     	;# 
  5220  001C                     	;# 
  5221  001D                     	;# 
  5222  001E                     	;# 
  5223  001F                     	;# 
  5224  008C                     	;# 
  5225  008D                     	;# 
  5226  008E                     	;# 
  5227  0090                     	;# 
  5228  0091                     	;# 
  5229  0092                     	;# 
  5230  0093                     	;# 
  5231  0094                     	;# 
  5232  0097                     	;# 
  5233  009B                     	;# 
  5234  009B                     	;# 
  5235  009C                     	;# 
  5236  009D                     	;# 
  5237  009E                     	;# 
  5238  009F                     	;# 
  5239  010C                     	;# 
  5240  010D                     	;# 
  5241  010E                     	;# 
  5242  0111                     	;# 
  5243  0112                     	;# 
  5244  0113                     	;# 
  5245  0114                     	;# 
  5246  0115                     	;# 
  5247  0116                     	;# 
  5248  0117                     	;# 
  5249  0118                     	;# 
  5250  0119                     	;# 
  5251  018C                     	;# 
  5252  018D                     	;# 
  5253  018E                     	;# 
  5254  0197                     	;# 
  5255  0199                     	;# 
  5256  0199                     	;# 
  5257  0199                     	;# 
  5258  019A                     	;# 
  5259  019A                     	;# 
  5260  019A                     	;# 
  5261  019B                     	;# 
  5262  019B                     	;# 
  5263  019B                     	;# 
  5264  019B                     	;# 
  5265  019B                     	;# 
  5266  019C                     	;# 
  5267  019C                     	;# 
  5268  019C                     	;# 
  5269  019D                     	;# 
  5270  019D                     	;# 
  5271  019D                     	;# 
  5272  019E                     	;# 
  5273  019E                     	;# 
  5274  019E                     	;# 
  5275  019F                     	;# 
  5276  019F                     	;# 
  5277  019F                     	;# 
  5278  019F                     	;# 
  5279  019F                     	;# 
  5280  020C                     	;# 
  5281  020D                     	;# 
  5282  020E                     	;# 
  5283  0211                     	;# 
  5284  0211                     	;# 
  5285  0212                     	;# 
  5286  0212                     	;# 
  5287  0213                     	;# 
  5288  0213                     	;# 
  5289  0214                     	;# 
  5290  0214                     	;# 
  5291  0215                     	;# 
  5292  0215                     	;# 
  5293  0215                     	;# 
  5294  0215                     	;# 
  5295  0216                     	;# 
  5296  0216                     	;# 
  5297  0217                     	;# 
  5298  0217                     	;# 
  5299  0219                     	;# 
  5300  021A                     	;# 
  5301  021B                     	;# 
  5302  021C                     	;# 
  5303  021D                     	;# 
  5304  021D                     	;# 
  5305  021E                     	;# 
  5306  021F                     	;# 
  5307  028C                     	;# 
  5308  028D                     	;# 
  5309  028E                     	;# 
  5310  0291                     	;# 
  5311  0291                     	;# 
  5312  0292                     	;# 
  5313  0293                     	;# 
  5314  0294                     	;# 
  5315  0295                     	;# 
  5316  0295                     	;# 
  5317  0296                     	;# 
  5318  0297                     	;# 
  5319  0298                     	;# 
  5320  029F                     	;# 
  5321  030C                     	;# 
  5322  030D                     	;# 
  5323  030E                     	;# 
  5324  0311                     	;# 
  5325  0311                     	;# 
  5326  0312                     	;# 
  5327  0313                     	;# 
  5328  0314                     	;# 
  5329  0315                     	;# 
  5330  0315                     	;# 
  5331  0316                     	;# 
  5332  0317                     	;# 
  5333  0318                     	;# 
  5334  038C                     	;# 
  5335  038D                     	;# 
  5336  038E                     	;# 
  5337  0391                     	;# 
  5338  0392                     	;# 
  5339  0393                     	;# 
  5340  0394                     	;# 
  5341  0395                     	;# 
  5342  0396                     	;# 
  5343  0397                     	;# 
  5344  0398                     	;# 
  5345  0399                     	;# 
  5346  039A                     	;# 
  5347  039C                     	;# 
  5348  039D                     	;# 
  5349  039E                     	;# 
  5350  039F                     	;# 
  5351  0411                     	;# 
  5352  0411                     	;# 
  5353  0412                     	;# 
  5354  0413                     	;# 
  5355  0414                     	;# 
  5356  0415                     	;# 
  5357  0416                     	;# 
  5358  0417                     	;# 
  5359  0418                     	;# 
  5360  0418                     	;# 
  5361  0419                     	;# 
  5362  041A                     	;# 
  5363  041B                     	;# 
  5364  041C                     	;# 
  5365  041D                     	;# 
  5366  041E                     	;# 
  5367  041F                     	;# 
  5368  0498                     	;# 
  5369  0498                     	;# 
  5370  0499                     	;# 
  5371  049A                     	;# 
  5372  049B                     	;# 
  5373  049B                     	;# 
  5374  049C                     	;# 
  5375  049D                     	;# 
  5376  049E                     	;# 
  5377  049F                     	;# 
  5378  0617                     	;# 
  5379  0618                     	;# 
  5380  0619                     	;# 
  5381  0619                     	;# 
  5382  061A                     	;# 
  5383  061B                     	;# 
  5384  061C                     	;# 
  5385  061C                     	;# 
  5386  061F                     	;# 
  5387  0691                     	;# 
  5388  0692                     	;# 
  5389  0693                     	;# 
  5390  0694                     	;# 
  5391  0695                     	;# 
  5392  0696                     	;# 
  5393  0697                     	;# 
  5394  0698                     	;# 
  5395  0699                     	;# 
  5396  0711                     	;# 
  5397  0712                     	;# 
  5398  0713                     	;# 
  5399  0714                     	;# 
  5400  0715                     	;# 
  5401  0716                     	;# 
  5402  0717                     	;# 
  5403  0718                     	;# 
  5404  0719                     	;# 
  5405  0891                     	;# 
  5406  0891                     	;# 
  5407  0891                     	;# 
  5408  0891                     	;# 
  5409  0891                     	;# 
  5410  0891                     	;# 
  5411  0892                     	;# 
  5412  0892                     	;# 
  5413  0892                     	;# 
  5414  0893                     	;# 
  5415  0893                     	;# 
  5416  0893                     	;# 
  5417  0893                     	;# 
  5418  0893                     	;# 
  5419  0893                     	;# 
  5420  0894                     	;# 
  5421  0894                     	;# 
  5422  0894                     	;# 
  5423  0895                     	;# 
  5424  0895                     	;# 
  5425  0895                     	;# 
  5426  0896                     	;# 
  5427  0896                     	;# 
  5428  0896                     	;# 
  5429  089B                     	;# 
  5430  0911                     	;# 
  5431  0912                     	;# 
  5432  0913                     	;# 
  5433  0914                     	;# 
  5434  0915                     	;# 
  5435  0916                     	;# 
  5436  0918                     	;# 
  5437  0919                     	;# 
  5438  091A                     	;# 
  5439  091B                     	;# 
  5440  091C                     	;# 
  5441  091D                     	;# 
  5442  091E                     	;# 
  5443  091F                     	;# 
  5444  0E0F                     	;# 
  5445  0E10                     	;# 
  5446  0E11                     	;# 
  5447  0E12                     	;# 
  5448  0E13                     	;# 
  5449  0E14                     	;# 
  5450  0E15                     	;# 
  5451  0E16                     	;# 
  5452  0E17                     	;# 
  5453  0E18                     	;# 
  5454  0E19                     	;# 
  5455  0E1A                     	;# 
  5456  0E1B                     	;# 
  5457  0E1C                     	;# 
  5458  0E1D                     	;# 
  5459  0E1E                     	;# 
  5460  0E1F                     	;# 
  5461  0E20                     	;# 
  5462  0E21                     	;# 
  5463  0E22                     	;# 
  5464  0E24                     	;# 
  5465  0E25                     	;# 
  5466  0E28                     	;# 
  5467  0E29                     	;# 
  5468  0E2A                     	;# 
  5469  0E2B                     	;# 
  5470  0E2C                     	;# 
  5471  0E2D                     	;# 
  5472  0E2E                     	;# 
  5473  0E2F                     	;# 
  5474  0E90                     	;# 
  5475  0E91                     	;# 
  5476  0E92                     	;# 
  5477  0E94                     	;# 
  5478  0E95                     	;# 
  5479  0E9C                     	;# 
  5480  0E9D                     	;# 
  5481  0E9E                     	;# 
  5482  0E9F                     	;# 
  5483  0EA0                     	;# 
  5484  0EA1                     	;# 
  5485  0EA2                     	;# 
  5486  0EA3                     	;# 
  5487  0EA4                     	;# 
  5488  0EA5                     	;# 
  5489  0EA6                     	;# 
  5490  0EA7                     	;# 
  5491  0F0F                     	;# 
  5492  0F10                     	;# 
  5493  0F11                     	;# 
  5494  0F12                     	;# 
  5495  0F13                     	;# 
  5496  0F14                     	;# 
  5497  0F15                     	;# 
  5498  0F16                     	;# 
  5499  0F17                     	;# 
  5500  0F18                     	;# 
  5501  0F19                     	;# 
  5502  0F1A                     	;# 
  5503  0F1B                     	;# 
  5504  0F1C                     	;# 
  5505  0F1D                     	;# 
  5506  0F1E                     	;# 
  5507  0F1F                     	;# 
  5508  0F20                     	;# 
  5509  0F21                     	;# 
  5510  0F22                     	;# 
  5511  0F23                     	;# 
  5512  0F24                     	;# 
  5513  0F25                     	;# 
  5514  0F26                     	;# 
  5515  0F27                     	;# 
  5516  0F28                     	;# 
  5517  0F29                     	;# 
  5518  0F2A                     	;# 
  5519  0F2B                     	;# 
  5520  0F2C                     	;# 
  5521  0F2D                     	;# 
  5522  0F2E                     	;# 
  5523  0F2F                     	;# 
  5524  0F30                     	;# 
  5525  0F31                     	;# 
  5526  0F32                     	;# 
  5527  0F33                     	;# 
  5528  0F34                     	;# 
  5529  0F35                     	;# 
  5530  0F36                     	;# 
  5531  0F37                     	;# 
  5532  0FE4                     	;# 
  5533  0FE5                     	;# 
  5534  0FE6                     	;# 
  5535  0FE7                     	;# 
  5536  0FE8                     	;# 
  5537  0FE9                     	;# 
  5538  0FEA                     	;# 
  5539  0FEB                     	;# 
  5540  0FED                     	;# 
  5541  0FEE                     	;# 
  5542  0FEF                     	;# 
  5543  0000                     	;# 
  5544  0001                     	;# 
  5545  0002                     	;# 
  5546  0003                     	;# 
  5547  0004                     	;# 
  5548  0005                     	;# 
  5549  0006                     	;# 
  5550  0007                     	;# 
  5551  0008                     	;# 
  5552  0009                     	;# 
  5553  000A                     	;# 
  5554  000B                     	;# 
  5555  000C                     	;# 
  5556  000D                     	;# 
  5557  000E                     	;# 
  5558  0010                     	;# 
  5559  0011                     	;# 
  5560  0012                     	;# 
  5561  0013                     	;# 
  5562  0014                     	;# 
  5563  0015                     	;# 
  5564  0015                     	;# 
  5565  0016                     	;# 
  5566  0016                     	;# 
  5567  0017                     	;# 
  5568  0018                     	;# 
  5569  0019                     	;# 
  5570  0019                     	;# 
  5571  001A                     	;# 
  5572  001B                     	;# 
  5573  001C                     	;# 
  5574  001D                     	;# 
  5575  001E                     	;# 
  5576  001F                     	;# 
  5577  008C                     	;# 
  5578  008D                     	;# 
  5579  008E                     	;# 
  5580  0090                     	;# 
  5581  0091                     	;# 
  5582  0092                     	;# 
  5583  0093                     	;# 
  5584  0094                     	;# 
  5585  0097                     	;# 
  5586  009B                     	;# 
  5587  009B                     	;# 
  5588  009C                     	;# 
  5589  009D                     	;# 
  5590  009E                     	;# 
  5591  009F                     	;# 
  5592  010C                     	;# 
  5593  010D                     	;# 
  5594  010E                     	;# 
  5595  0111                     	;# 
  5596  0112                     	;# 
  5597  0113                     	;# 
  5598  0114                     	;# 
  5599  0115                     	;# 
  5600  0116                     	;# 
  5601  0117                     	;# 
  5602  0118                     	;# 
  5603  0119                     	;# 
  5604  018C                     	;# 
  5605  018D                     	;# 
  5606  018E                     	;# 
  5607  0199                     	;# 
  5608  0199                     	;# 
  5609  0199                     	;# 
  5610  019A                     	;# 
  5611  019A                     	;# 
  5612  019A                     	;# 
  5613  019B                     	;# 
  5614  019B                     	;# 
  5615  019B                     	;# 
  5616  019B                     	;# 
  5617  019B                     	;# 
  5618  019C                     	;# 
  5619  019C                     	;# 
  5620  019C                     	;# 
  5621  019D                     	;# 
  5622  019D                     	;# 
  5623  019D                     	;# 
  5624  019E                     	;# 
  5625  019E                     	;# 
  5626  019E                     	;# 
  5627  019F                     	;# 
  5628  019F                     	;# 
  5629  019F                     	;# 
  5630  019F                     	;# 
  5631  019F                     	;# 
  5632  020C                     	;# 
  5633  020D                     	;# 
  5634  020E                     	;# 
  5635  0211                     	;# 
  5636  0211                     	;# 
  5637  0212                     	;# 
  5638  0212                     	;# 
  5639  0213                     	;# 
  5640  0213                     	;# 
  5641  0214                     	;# 
  5642  0214                     	;# 
  5643  0215                     	;# 
  5644  0215                     	;# 
  5645  0215                     	;# 
  5646  0215                     	;# 
  5647  0216                     	;# 
  5648  0216                     	;# 
  5649  0217                     	;# 
  5650  0217                     	;# 
  5651  0219                     	;# 
  5652  021A                     	;# 
  5653  021B                     	;# 
  5654  021C                     	;# 
  5655  021D                     	;# 
  5656  021D                     	;# 
  5657  021E                     	;# 
  5658  021F                     	;# 
  5659  028C                     	;# 
  5660  028D                     	;# 
  5661  028E                     	;# 
  5662  0291                     	;# 
  5663  0291                     	;# 
  5664  0292                     	;# 
  5665  0293                     	;# 
  5666  0294                     	;# 
  5667  0295                     	;# 
  5668  0295                     	;# 
  5669  0296                     	;# 
  5670  0297                     	;# 
  5671  0298                     	;# 
  5672  029F                     	;# 
  5673  030C                     	;# 
  5674  030D                     	;# 
  5675  030E                     	;# 
  5676  0311                     	;# 
  5677  0311                     	;# 
  5678  0312                     	;# 
  5679  0313                     	;# 
  5680  0314                     	;# 
  5681  0315                     	;# 
  5682  0315                     	;# 
  5683  0316                     	;# 
  5684  0317                     	;# 
  5685  0318                     	;# 
  5686  038C                     	;# 
  5687  038D                     	;# 
  5688  038E                     	;# 
  5689  0391                     	;# 
  5690  0392                     	;# 
  5691  0393                     	;# 
  5692  0394                     	;# 
  5693  0395                     	;# 
  5694  0396                     	;# 
  5695  0397                     	;# 
  5696  0398                     	;# 
  5697  0399                     	;# 
  5698  039A                     	;# 
  5699  039C                     	;# 
  5700  039D                     	;# 
  5701  039E                     	;# 
  5702  039F                     	;# 
  5703  0411                     	;# 
  5704  0411                     	;# 
  5705  0412                     	;# 
  5706  0413                     	;# 
  5707  0414                     	;# 
  5708  0415                     	;# 
  5709  0416                     	;# 
  5710  0417                     	;# 
  5711  0418                     	;# 
  5712  0418                     	;# 
  5713  0419                     	;# 
  5714  041A                     	;# 
  5715  041B                     	;# 
  5716  041C                     	;# 
  5717  041D                     	;# 
  5718  041E                     	;# 
  5719  041F                     	;# 
  5720  0498                     	;# 
  5721  0498                     	;# 
  5722  0499                     	;# 
  5723  049A                     	;# 
  5724  049B                     	;# 
  5725  049B                     	;# 
  5726  049C                     	;# 
  5727  049D                     	;# 
  5728  049E                     	;# 
  5729  049F                     	;# 
  5730  0617                     	;# 
  5731  0618                     	;# 
  5732  0619                     	;# 
  5733  0619                     	;# 
  5734  061A                     	;# 
  5735  061B                     	;# 
  5736  061C                     	;# 
  5737  061C                     	;# 
  5738  061F                     	;# 
  5739  0691                     	;# 
  5740  0692                     	;# 
  5741  0693                     	;# 
  5742  0694                     	;# 
  5743  0695                     	;# 
  5744  0696                     	;# 
  5745  0697                     	;# 
  5746  0698                     	;# 
  5747  0699                     	;# 
  5748  0711                     	;# 
  5749  0712                     	;# 
  5750  0713                     	;# 
  5751  0714                     	;# 
  5752  0715                     	;# 
  5753  0716                     	;# 
  5754  0717                     	;# 
  5755  0718                     	;# 
  5756  0719                     	;# 
  5757  0891                     	;# 
  5758  0891                     	;# 
  5759  0891                     	;# 
  5760  0891                     	;# 
  5761  0891                     	;# 
  5762  0891                     	;# 
  5763  0892                     	;# 
  5764  0892                     	;# 
  5765  0892                     	;# 
  5766  0893                     	;# 
  5767  0893                     	;# 
  5768  0893                     	;# 
  5769  0893                     	;# 
  5770  0893                     	;# 
  5771  0893                     	;# 
  5772  0894                     	;# 
  5773  0894                     	;# 
  5774  0894                     	;# 
  5775  0895                     	;# 
  5776  0895                     	;# 
  5777  0895                     	;# 
  5778  0896                     	;# 
  5779  0896                     	;# 
  5780  0896                     	;# 
  5781  089B                     	;# 
  5782  0911                     	;# 
  5783  0912                     	;# 
  5784  0913                     	;# 
  5785  0914                     	;# 
  5786  0915                     	;# 
  5787  0916                     	;# 
  5788  0918                     	;# 
  5789  0919                     	;# 
  5790  091A                     	;# 
  5791  091B                     	;# 
  5792  091C                     	;# 
  5793  091D                     	;# 
  5794  091E                     	;# 
  5795  091F                     	;# 
  5796  0E0F                     	;# 
  5797  0E10                     	;# 
  5798  0E11                     	;# 
  5799  0E12                     	;# 
  5800  0E13                     	;# 
  5801  0E14                     	;# 
  5802  0E15                     	;# 
  5803  0E16                     	;# 
  5804  0E17                     	;# 
  5805  0E18                     	;# 
  5806  0E19                     	;# 
  5807  0E1A                     	;# 
  5808  0E1B                     	;# 
  5809  0E1C                     	;# 
  5810  0E1D                     	;# 
  5811  0E1E                     	;# 
  5812  0E1F                     	;# 
  5813  0E20                     	;# 
  5814  0E21                     	;# 
  5815  0E22                     	;# 
  5816  0E24                     	;# 
  5817  0E25                     	;# 
  5818  0E28                     	;# 
  5819  0E29                     	;# 
  5820  0E2A                     	;# 
  5821  0E2B                     	;# 
  5822  0E2C                     	;# 
  5823  0E2D                     	;# 
  5824  0E2E                     	;# 
  5825  0E2F                     	;# 
  5826  0E90                     	;# 
  5827  0E91                     	;# 
  5828  0E92                     	;# 
  5829  0E94                     	;# 
  5830  0E95                     	;# 
  5831  0E9C                     	;# 
  5832  0E9D                     	;# 
  5833  0E9E                     	;# 
  5834  0E9F                     	;# 
  5835  0EA0                     	;# 
  5836  0EA1                     	;# 
  5837  0EA2                     	;# 
  5838  0EA3                     	;# 
  5839  0EA4                     	;# 
  5840  0EA5                     	;# 
  5841  0EA6                     	;# 
  5842  0EA7                     	;# 
  5843  0F0F                     	;# 
  5844  0F10                     	;# 
  5845  0F11                     	;# 
  5846  0F12                     	;# 
  5847  0F13                     	;# 
  5848  0F14                     	;# 
  5849  0F15                     	;# 
  5850  0F16                     	;# 
  5851  0F17                     	;# 
  5852  0F18                     	;# 
  5853  0F19                     	;# 
  5854  0F1A                     	;# 
  5855  0F1B                     	;# 
  5856  0F1C                     	;# 
  5857  0F1D                     	;# 
  5858  0F1E                     	;# 
  5859  0F1F                     	;# 
  5860  0F20                     	;# 
  5861  0F21                     	;# 
  5862  0F22                     	;# 
  5863  0F23                     	;# 
  5864  0F24                     	;# 
  5865  0F25                     	;# 
  5866  0F26                     	;# 
  5867  0F27                     	;# 
  5868  0F28                     	;# 
  5869  0F29                     	;# 
  5870  0F2A                     	;# 
  5871  0F2B                     	;# 
  5872  0F2C                     	;# 
  5873  0F2D                     	;# 
  5874  0F2E                     	;# 
  5875  0F2F                     	;# 
  5876  0F30                     	;# 
  5877  0F31                     	;# 
  5878  0F32                     	;# 
  5879  0F33                     	;# 
  5880  0F34                     	;# 
  5881  0F35                     	;# 
  5882  0F36                     	;# 
  5883  0F37                     	;# 
  5884  0FE4                     	;# 
  5885  0FE5                     	;# 
  5886  0FE6                     	;# 
  5887  0FE7                     	;# 
  5888  0FE8                     	;# 
  5889  0FE9                     	;# 
  5890  0FEA                     	;# 
  5891  0FEB                     	;# 
  5892  0FED                     	;# 
  5893  0FEE                     	;# 
  5894  0FEF                     	;# 
  5895  0000                     	;# 
  5896  0001                     	;# 
  5897  0002                     	;# 
  5898  0003                     	;# 
  5899  0004                     	;# 
  5900  0005                     	;# 
  5901  0006                     	;# 
  5902  0007                     	;# 
  5903  0008                     	;# 
  5904  0009                     	;# 
  5905  000A                     	;# 
  5906  000B                     	;# 
  5907  000C                     	;# 
  5908  000D                     	;# 
  5909  000E                     	;# 
  5910  0010                     	;# 
  5911  0011                     	;# 
  5912  0012                     	;# 
  5913  0013                     	;# 
  5914  0014                     	;# 
  5915  0015                     	;# 
  5916  0015                     	;# 
  5917  0016                     	;# 
  5918  0016                     	;# 
  5919  0017                     	;# 
  5920  0018                     	;# 
  5921  0019                     	;# 
  5922  0019                     	;# 
  5923  001A                     	;# 
  5924  001B                     	;# 
  5925  001C                     	;# 
  5926  001D                     	;# 
  5927  001E                     	;# 
  5928  001F                     	;# 
  5929  008C                     	;# 
  5930  008D                     	;# 
  5931  008E                     	;# 
  5932  0090                     	;# 
  5933  0091                     	;# 
  5934  0092                     	;# 
  5935  0093                     	;# 
  5936  0094                     	;# 
  5937  0097                     	;# 
  5938  009B                     	;# 
  5939  009B                     	;# 
  5940  009C                     	;# 
  5941  009D                     	;# 
  5942  009E                     	;# 
  5943  009F                     	;# 
  5944  010C                     	;# 
  5945  010D                     	;# 
  5946  010E                     	;# 
  5947  0111                     	;# 
  5948  0112                     	;# 
  5949  0113                     	;# 
  5950  0114                     	;# 
  5951  0115                     	;# 
  5952  0116                     	;# 
  5953  0117                     	;# 
  5954  0118                     	;# 
  5955  0119                     	;# 
  5956  018C                     	;# 
  5957  018D                     	;# 
  5958  018E                     	;# 
  5959  0199                     	;# 
  5960  0199                     	;# 
  5961  0199                     	;# 
  5962  019A                     	;# 
  5963  019A                     	;# 
  5964  019A                     	;# 
  5965  019B                     	;# 
  5966  019B                     	;# 
  5967  019B                     	;# 
  5968  019B                     	;# 
  5969  019B                     	;# 
  5970  019C                     	;# 
  5971  019C                     	;# 
  5972  019C                     	;# 
  5973  019D                     	;# 
  5974  019D                     	;# 
  5975  019D                     	;# 
  5976  019E                     	;# 
  5977  019E                     	;# 
  5978  019E                     	;# 
  5979  019F                     	;# 
  5980  019F                     	;# 
  5981  019F                     	;# 
  5982  019F                     	;# 
  5983  019F                     	;# 
  5984  020C                     	;# 
  5985  020D                     	;# 
  5986  020E                     	;# 
  5987  0211                     	;# 
  5988  0211                     	;# 
  5989  0212                     	;# 
  5990  0212                     	;# 
  5991  0213                     	;# 
  5992  0213                     	;# 
  5993  0214                     	;# 
  5994  0214                     	;# 
  5995  0215                     	;# 
  5996  0215                     	;# 
  5997  0215                     	;# 
  5998  0215                     	;# 
  5999  0216                     	;# 
  6000  0216                     	;# 
  6001  0217                     	;# 
  6002  0217                     	;# 
  6003  0219                     	;# 
  6004  021A                     	;# 
  6005  021B                     	;# 
  6006  021C                     	;# 
  6007  021D                     	;# 
  6008  021D                     	;# 
  6009  021E                     	;# 
  6010  021F                     	;# 
  6011  028C                     	;# 
  6012  028D                     	;# 
  6013  028E                     	;# 
  6014  0291                     	;# 
  6015  0291                     	;# 
  6016  0292                     	;# 
  6017  0293                     	;# 
  6018  0294                     	;# 
  6019  0295                     	;# 
  6020  0295                     	;# 
  6021  0296                     	;# 
  6022  0297                     	;# 
  6023  0298                     	;# 
  6024  029F                     	;# 
  6025  030C                     	;# 
  6026  030D                     	;# 
  6027  030E                     	;# 
  6028  0311                     	;# 
  6029  0311                     	;# 
  6030  0312                     	;# 
  6031  0313                     	;# 
  6032  0314                     	;# 
  6033  0315                     	;# 
  6034  0315                     	;# 
  6035  0316                     	;# 
  6036  0317                     	;# 
  6037  0318                     	;# 
  6038  038C                     	;# 
  6039  038D                     	;# 
  6040  038E                     	;# 
  6041  0391                     	;# 
  6042  0392                     	;# 
  6043  0393                     	;# 
  6044  0394                     	;# 
  6045  0395                     	;# 
  6046  0396                     	;# 
  6047  0397                     	;# 
  6048  0398                     	;# 
  6049  0399                     	;# 
  6050  039A                     	;# 
  6051  039C                     	;# 
  6052  039D                     	;# 
  6053  039E                     	;# 
  6054  039F                     	;# 
  6055  0411                     	;# 
  6056  0411                     	;# 
  6057  0412                     	;# 
  6058  0413                     	;# 
  6059  0414                     	;# 
  6060  0415                     	;# 
  6061  0416                     	;# 
  6062  0417                     	;# 
  6063  0418                     	;# 
  6064  0418                     	;# 
  6065  0419                     	;# 
  6066  041A                     	;# 
  6067  041B                     	;# 
  6068  041C                     	;# 
  6069  041D                     	;# 
  6070  041E                     	;# 
  6071  041F                     	;# 
  6072  0498                     	;# 
  6073  0498                     	;# 
  6074  0499                     	;# 
  6075  049A                     	;# 
  6076  049B                     	;# 
  6077  049B                     	;# 
  6078  049C                     	;# 
  6079  049D                     	;# 
  6080  049E                     	;# 
  6081  049F                     	;# 
  6082  0617                     	;# 
  6083  0618                     	;# 
  6084  0619                     	;# 
  6085  0619                     	;# 
  6086  061A                     	;# 
  6087  061B                     	;# 
  6088  061C                     	;# 
  6089  061C                     	;# 
  6090  061F                     	;# 
  6091  0691                     	;# 
  6092  0692                     	;# 
  6093  0693                     	;# 
  6094  0694                     	;# 
  6095  0695                     	;# 
  6096  0696                     	;# 
  6097  0697                     	;# 
  6098  0698                     	;# 
  6099  0699                     	;# 
  6100  0711                     	;# 
  6101  0712                     	;# 
  6102  0713                     	;# 
  6103  0714                     	;# 
  6104  0715                     	;# 
  6105  0716                     	;# 
  6106  0717                     	;# 
  6107  0718                     	;# 
  6108  0719                     	;# 
  6109  0891                     	;# 
  6110  0891                     	;# 
  6111  0891                     	;# 
  6112  0891                     	;# 
  6113  0891                     	;# 
  6114  0891                     	;# 
  6115  0892                     	;# 
  6116  0892                     	;# 
  6117  0892                     	;# 
  6118  0893                     	;# 
  6119  0893                     	;# 
  6120  0893                     	;# 
  6121  0893                     	;# 
  6122  0893                     	;# 
  6123  0893                     	;# 
  6124  0894                     	;# 
  6125  0894                     	;# 
  6126  0894                     	;# 
  6127  0895                     	;# 
  6128  0895                     	;# 
  6129  0895                     	;# 
  6130  0896                     	;# 
  6131  0896                     	;# 
  6132  0896                     	;# 
  6133  089B                     	;# 
  6134  0911                     	;# 
  6135  0912                     	;# 
  6136  0913                     	;# 
  6137  0914                     	;# 
  6138  0915                     	;# 
  6139  0916                     	;# 
  6140  0918                     	;# 
  6141  0919                     	;# 
  6142  091A                     	;# 
  6143  091B                     	;# 
  6144  091C                     	;# 
  6145  091D                     	;# 
  6146  091E                     	;# 
  6147  091F                     	;# 
  6148  0E0F                     	;# 
  6149  0E10                     	;# 
  6150  0E11                     	;# 
  6151  0E12                     	;# 
  6152  0E13                     	;# 
  6153  0E14                     	;# 
  6154  0E15                     	;# 
  6155  0E16                     	;# 
  6156  0E17                     	;# 
  6157  0E18                     	;# 
  6158  0E19                     	;# 
  6159  0E1A                     	;# 
  6160  0E1B                     	;# 
  6161  0E1C                     	;# 
  6162  0E1D                     	;# 
  6163  0E1E                     	;# 
  6164  0E1F                     	;# 
  6165  0E20                     	;# 
  6166  0E21                     	;# 
  6167  0E22                     	;# 
  6168  0E24                     	;# 
  6169  0E25                     	;# 
  6170  0E28                     	;# 
  6171  0E29                     	;# 
  6172  0E2A                     	;# 
  6173  0E2B                     	;# 
  6174  0E2C                     	;# 
  6175  0E2D                     	;# 
  6176  0E2E                     	;# 
  6177  0E2F                     	;# 
  6178  0E90                     	;# 
  6179  0E91                     	;# 
  6180  0E92                     	;# 
  6181  0E94                     	;# 
  6182  0E95                     	;# 
  6183  0E9C                     	;# 
  6184  0E9D                     	;# 
  6185  0E9E                     	;# 
  6186  0E9F                     	;# 
  6187  0EA0                     	;# 
  6188  0EA1                     	;# 
  6189  0EA2                     	;# 
  6190  0EA3                     	;# 
  6191  0EA4                     	;# 
  6192  0EA5                     	;# 
  6193  0EA6                     	;# 
  6194  0EA7                     	;# 
  6195  0F0F                     	;# 
  6196  0F10                     	;# 
  6197  0F11                     	;# 
  6198  0F12                     	;# 
  6199  0F13                     	;# 
  6200  0F14                     	;# 
  6201  0F15                     	;# 
  6202  0F16                     	;# 
  6203  0F17                     	;# 
  6204  0F18                     	;# 
  6205  0F19                     	;# 
  6206  0F1A                     	;# 
  6207  0F1B                     	;# 
  6208  0F1C                     	;# 
  6209  0F1D                     	;# 
  6210  0F1E                     	;# 
  6211  0F1F                     	;# 
  6212  0F20                     	;# 
  6213  0F21                     	;# 
  6214  0F22                     	;# 
  6215  0F23                     	;# 
  6216  0F24                     	;# 
  6217  0F25                     	;# 
  6218  0F26                     	;# 
  6219  0F27                     	;# 
  6220  0F28                     	;# 
  6221  0F29                     	;# 
  6222  0F2A                     	;# 
  6223  0F2B                     	;# 
  6224  0F2C                     	;# 
  6225  0F2D                     	;# 
  6226  0F2E                     	;# 
  6227  0F2F                     	;# 
  6228  0F30                     	;# 
  6229  0F31                     	;# 
  6230  0F32                     	;# 
  6231  0F33                     	;# 
  6232  0F34                     	;# 
  6233  0F35                     	;# 
  6234  0F36                     	;# 
  6235  0F37                     	;# 
  6236  0FE4                     	;# 
  6237  0FE5                     	;# 
  6238  0FE6                     	;# 
  6239  0FE7                     	;# 
  6240  0FE8                     	;# 
  6241  0FE9                     	;# 
  6242  0FEA                     	;# 
  6243  0FEB                     	;# 
  6244  0FED                     	;# 
  6245  0FEE                     	;# 
  6246  0FEF                     	;# 
  6247  0000                     	;# 
  6248  0001                     	;# 
  6249  0002                     	;# 
  6250  0003                     	;# 
  6251  0004                     	;# 
  6252  0005                     	;# 
  6253  0006                     	;# 
  6254  0007                     	;# 
  6255  0008                     	;# 
  6256  0009                     	;# 
  6257  000A                     	;# 
  6258  000B                     	;# 
  6259  000C                     	;# 
  6260  000D                     	;# 
  6261  000E                     	;# 
  6262  0010                     	;# 
  6263  0011                     	;# 
  6264  0012                     	;# 
  6265  0013                     	;# 
  6266  0014                     	;# 
  6267  0015                     	;# 
  6268  0015                     	;# 
  6269  0016                     	;# 
  6270  0016                     	;# 
  6271  0017                     	;# 
  6272  0018                     	;# 
  6273  0019                     	;# 
  6274  0019                     	;# 
  6275  001A                     	;# 
  6276  001B                     	;# 
  6277  001C                     	;# 
  6278  001D                     	;# 
  6279  001E                     	;# 
  6280  001F                     	;# 
  6281  008C                     	;# 
  6282  008D                     	;# 
  6283  008E                     	;# 
  6284  0090                     	;# 
  6285  0091                     	;# 
  6286  0092                     	;# 
  6287  0093                     	;# 
  6288  0094                     	;# 
  6289  0097                     	;# 
  6290  009B                     	;# 
  6291  009B                     	;# 
  6292  009C                     	;# 
  6293  009D                     	;# 
  6294  009E                     	;# 
  6295  009F                     	;# 
  6296  010C                     	;# 
  6297  010D                     	;# 
  6298  010E                     	;# 
  6299  0111                     	;# 
  6300  0112                     	;# 
  6301  0113                     	;# 
  6302  0114                     	;# 
  6303  0115                     	;# 
  6304  0116                     	;# 
  6305  0117                     	;# 
  6306  0118                     	;# 
  6307  0119                     	;# 
  6308  018C                     	;# 
  6309  018D                     	;# 
  6310  018E                     	;# 
  6311  0199                     	;# 
  6312  0199                     	;# 
  6313  0199                     	;# 
  6314  019A                     	;# 
  6315  019A                     	;# 
  6316  019A                     	;# 
  6317  019B                     	;# 
  6318  019B                     	;# 
  6319  019B                     	;# 
  6320  019B                     	;# 
  6321  019B                     	;# 
  6322  019C                     	;# 
  6323  019C                     	;# 
  6324  019C                     	;# 
  6325  019D                     	;# 
  6326  019D                     	;# 
  6327  019D                     	;# 
  6328  019E                     	;# 
  6329  019E                     	;# 
  6330  019E                     	;# 
  6331  019F                     	;# 
  6332  019F                     	;# 
  6333  019F                     	;# 
  6334  019F                     	;# 
  6335  019F                     	;# 
  6336  020C                     	;# 
  6337  020D                     	;# 
  6338  020E                     	;# 
  6339  0211                     	;# 
  6340  0211                     	;# 
  6341  0212                     	;# 
  6342  0212                     	;# 
  6343  0213                     	;# 
  6344  0213                     	;# 
  6345  0214                     	;# 
  6346  0214                     	;# 
  6347  0215                     	;# 
  6348  0215                     	;# 
  6349  0215                     	;# 
  6350  0215                     	;# 
  6351  0216                     	;# 
  6352  0216                     	;# 
  6353  0217                     	;# 
  6354  0217                     	;# 
  6355  0219                     	;# 
  6356  021A                     	;# 
  6357  021B                     	;# 
  6358  021C                     	;# 
  6359  021D                     	;# 
  6360  021D                     	;# 
  6361  021E                     	;# 
  6362  021F                     	;# 
  6363  028C                     	;# 
  6364  028D                     	;# 
  6365  028E                     	;# 
  6366  0291                     	;# 
  6367  0291                     	;# 
  6368  0292                     	;# 
  6369  0293                     	;# 
  6370  0294                     	;# 
  6371  0295                     	;# 
  6372  0295                     	;# 
  6373  0296                     	;# 
  6374  0297                     	;# 
  6375  0298                     	;# 
  6376  029F                     	;# 
  6377  030C                     	;# 
  6378  030D                     	;# 
  6379  030E                     	;# 
  6380  0311                     	;# 
  6381  0311                     	;# 
  6382  0312                     	;# 
  6383  0313                     	;# 
  6384  0314                     	;# 
  6385  0315                     	;# 
  6386  0315                     	;# 
  6387  0316                     	;# 
  6388  0317                     	;# 
  6389  0318                     	;# 
  6390  038C                     	;# 
  6391  038D                     	;# 
  6392  038E                     	;# 
  6393  0391                     	;# 
  6394  0392                     	;# 
  6395  0393                     	;# 
  6396  0394                     	;# 
  6397  0395                     	;# 
  6398  0396                     	;# 
  6399  0397                     	;# 
  6400  0398                     	;# 
  6401  0399                     	;# 
  6402  039A                     	;# 
  6403  039C                     	;# 
  6404  039D                     	;# 
  6405  039E                     	;# 
  6406  039F                     	;# 
  6407  0411                     	;# 
  6408  0411                     	;# 
  6409  0412                     	;# 
  6410  0413                     	;# 
  6411  0414                     	;# 
  6412  0415                     	;# 
  6413  0416                     	;# 
  6414  0417                     	;# 
  6415  0418                     	;# 
  6416  0418                     	;# 
  6417  0419                     	;# 
  6418  041A                     	;# 
  6419  041B                     	;# 
  6420  041C                     	;# 
  6421  041D                     	;# 
  6422  041E                     	;# 
  6423  041F                     	;# 
  6424  0498                     	;# 
  6425  0498                     	;# 
  6426  0499                     	;# 
  6427  049A                     	;# 
  6428  049B                     	;# 
  6429  049B                     	;# 
  6430  049C                     	;# 
  6431  049D                     	;# 
  6432  049E                     	;# 
  6433  049F                     	;# 
  6434  0617                     	;# 
  6435  0618                     	;# 
  6436  0619                     	;# 
  6437  0619                     	;# 
  6438  061A                     	;# 
  6439  061B                     	;# 
  6440  061C                     	;# 
  6441  061C                     	;# 
  6442  061F                     	;# 
  6443  0691                     	;# 
  6444  0692                     	;# 
  6445  0693                     	;# 
  6446  0694                     	;# 
  6447  0695                     	;# 
  6448  0696                     	;# 
  6449  0697                     	;# 
  6450  0698                     	;# 
  6451  0699                     	;# 
  6452  0711                     	;# 
  6453  0712                     	;# 
  6454  0713                     	;# 
  6455  0714                     	;# 
  6456  0715                     	;# 
  6457  0716                     	;# 
  6458  0717                     	;# 
  6459  0718                     	;# 
  6460  0719                     	;# 
  6461  0891                     	;# 
  6462  0891                     	;# 
  6463  0891                     	;# 
  6464  0891                     	;# 
  6465  0891                     	;# 
  6466  0891                     	;# 
  6467  0892                     	;# 
  6468  0892                     	;# 
  6469  0892                     	;# 
  6470  0893                     	;# 
  6471  0893                     	;# 
  6472  0893                     	;# 
  6473  0893                     	;# 
  6474  0893                     	;# 
  6475  0893                     	;# 
  6476  0894                     	;# 
  6477  0894                     	;# 
  6478  0894                     	;# 
  6479  0895                     	;# 
  6480  0895                     	;# 
  6481  0895                     	;# 
  6482  0896                     	;# 
  6483  0896                     	;# 
  6484  0896                     	;# 
  6485  089B                     	;# 
  6486  0911                     	;# 
  6487  0912                     	;# 
  6488  0913                     	;# 
  6489  0914                     	;# 
  6490  0915                     	;# 
  6491  0916                     	;# 
  6492  0918                     	;# 
  6493  0919                     	;# 
  6494  091A                     	;# 
  6495  091B                     	;# 
  6496  091C                     	;# 
  6497  091D                     	;# 
  6498  091E                     	;# 
  6499  091F                     	;# 
  6500  0E0F                     	;# 
  6501  0E10                     	;# 
  6502  0E11                     	;# 
  6503  0E12                     	;# 
  6504  0E13                     	;# 
  6505  0E14                     	;# 
  6506  0E15                     	;# 
  6507  0E16                     	;# 
  6508  0E17                     	;# 
  6509  0E18                     	;# 
  6510  0E19                     	;# 
  6511  0E1A                     	;# 
  6512  0E1B                     	;# 
  6513  0E1C                     	;# 
  6514  0E1D                     	;# 
  6515  0E1E                     	;# 
  6516  0E1F                     	;# 
  6517  0E20                     	;# 
  6518  0E21                     	;# 
  6519  0E22                     	;# 
  6520  0E24                     	;# 
  6521  0E25                     	;# 
  6522  0E28                     	;# 
  6523  0E29                     	;# 
  6524  0E2A                     	;# 
  6525  0E2B                     	;# 
  6526  0E2C                     	;# 
  6527  0E2D                     	;# 
  6528  0E2E                     	;# 
  6529  0E2F                     	;# 
  6530  0E90                     	;# 
  6531  0E91                     	;# 
  6532  0E92                     	;# 
  6533  0E94                     	;# 
  6534  0E95                     	;# 
  6535  0E9C                     	;# 
  6536  0E9D                     	;# 
  6537  0E9E                     	;# 
  6538  0E9F                     	;# 
  6539  0EA0                     	;# 
  6540  0EA1                     	;# 
  6541  0EA2                     	;# 
  6542  0EA3                     	;# 
  6543  0EA4                     	;# 
  6544  0EA5                     	;# 
  6545  0EA6                     	;# 
  6546  0EA7                     	;# 
  6547  0F0F                     	;# 
  6548  0F10                     	;# 
  6549  0F11                     	;# 
  6550  0F12                     	;# 
  6551  0F13                     	;# 
  6552  0F14                     	;# 
  6553  0F15                     	;# 
  6554  0F16                     	;# 
  6555  0F17                     	;# 
  6556  0F18                     	;# 
  6557  0F19                     	;# 
  6558  0F1A                     	;# 
  6559  0F1B                     	;# 
  6560  0F1C                     	;# 
  6561  0F1D                     	;# 
  6562  0F1E                     	;# 
  6563  0F1F                     	;# 
  6564  0F20                     	;# 
  6565  0F21                     	;# 
  6566  0F22                     	;# 
  6567  0F23                     	;# 
  6568  0F24                     	;# 
  6569  0F25                     	;# 
  6570  0F26                     	;# 
  6571  0F27                     	;# 
  6572  0F28                     	;# 
  6573  0F29                     	;# 
  6574  0F2A                     	;# 
  6575  0F2B                     	;# 
  6576  0F2C                     	;# 
  6577  0F2D                     	;# 
  6578  0F2E                     	;# 
  6579  0F2F                     	;# 
  6580  0F30                     	;# 
  6581  0F31                     	;# 
  6582  0F32                     	;# 
  6583  0F33                     	;# 
  6584  0F34                     	;# 
  6585  0F35                     	;# 
  6586  0F36                     	;# 
  6587  0F37                     	;# 
  6588  0FE4                     	;# 
  6589  0FE5                     	;# 
  6590  0FE6                     	;# 
  6591  0FE7                     	;# 
  6592  0FE8                     	;# 
  6593  0FE9                     	;# 
  6594  0FEA                     	;# 
  6595  0FEB                     	;# 
  6596  0FED                     	;# 
  6597  0FEE                     	;# 
  6598  0FEF                     	;# 
  6599  0000                     	;# 
  6600  0001                     	;# 
  6601  0002                     	;# 
  6602  0003                     	;# 
  6603  0004                     	;# 
  6604  0005                     	;# 
  6605  0006                     	;# 
  6606  0007                     	;# 
  6607  0008                     	;# 
  6608  0009                     	;# 
  6609  000A                     	;# 
  6610  000B                     	;# 
  6611  000C                     	;# 
  6612  000D                     	;# 
  6613  000E                     	;# 
  6614  0010                     	;# 
  6615  0011                     	;# 
  6616  0012                     	;# 
  6617  0013                     	;# 
  6618  0014                     	;# 
  6619  0015                     	;# 
  6620  0015                     	;# 
  6621  0016                     	;# 
  6622  0016                     	;# 
  6623  0017                     	;# 
  6624  0018                     	;# 
  6625  0019                     	;# 
  6626  0019                     	;# 
  6627  001A                     	;# 
  6628  001B                     	;# 
  6629  001C                     	;# 
  6630  001D                     	;# 
  6631  001E                     	;# 
  6632  001F                     	;# 
  6633  008C                     	;# 
  6634  008D                     	;# 
  6635  008E                     	;# 
  6636  0090                     	;# 
  6637  0091                     	;# 
  6638  0092                     	;# 
  6639  0093                     	;# 
  6640  0094                     	;# 
  6641  0097                     	;# 
  6642  009B                     	;# 
  6643  009B                     	;# 
  6644  009C                     	;# 
  6645  009D                     	;# 
  6646  009E                     	;# 
  6647  009F                     	;# 
  6648  010C                     	;# 
  6649  010D                     	;# 
  6650  010E                     	;# 
  6651  0111                     	;# 
  6652  0112                     	;# 
  6653  0113                     	;# 
  6654  0114                     	;# 
  6655  0115                     	;# 
  6656  0116                     	;# 
  6657  0117                     	;# 
  6658  0118                     	;# 
  6659  0119                     	;# 
  6660  018C                     	;# 
  6661  018D                     	;# 
  6662  018E                     	;# 
  6663  0199                     	;# 
  6664  0199                     	;# 
  6665  0199                     	;# 
  6666  019A                     	;# 
  6667  019A                     	;# 
  6668  019A                     	;# 
  6669  019B                     	;# 
  6670  019B                     	;# 
  6671  019B                     	;# 
  6672  019B                     	;# 
  6673  019B                     	;# 
  6674  019C                     	;# 
  6675  019C                     	;# 
  6676  019C                     	;# 
  6677  019D                     	;# 
  6678  019D                     	;# 
  6679  019D                     	;# 
  6680  019E                     	;# 
  6681  019E                     	;# 
  6682  019E                     	;# 
  6683  019F                     	;# 
  6684  019F                     	;# 
  6685  019F                     	;# 
  6686  019F                     	;# 
  6687  019F                     	;# 
  6688  020C                     	;# 
  6689  020D                     	;# 
  6690  020E                     	;# 
  6691  0211                     	;# 
  6692  0211                     	;# 
  6693  0212                     	;# 
  6694  0212                     	;# 
  6695  0213                     	;# 
  6696  0213                     	;# 
  6697  0214                     	;# 
  6698  0214                     	;# 
  6699  0215                     	;# 
  6700  0215                     	;# 
  6701  0215                     	;# 
  6702  0215                     	;# 
  6703  0216                     	;# 
  6704  0216                     	;# 
  6705  0217                     	;# 
  6706  0217                     	;# 
  6707  0219                     	;# 
  6708  021A                     	;# 
  6709  021B                     	;# 
  6710  021C                     	;# 
  6711  021D                     	;# 
  6712  021D                     	;# 
  6713  021E                     	;# 
  6714  021F                     	;# 
  6715  028C                     	;# 
  6716  028D                     	;# 
  6717  028E                     	;# 
  6718  0291                     	;# 
  6719  0291                     	;# 
  6720  0292                     	;# 
  6721  0293                     	;# 
  6722  0294                     	;# 
  6723  0295                     	;# 
  6724  0295                     	;# 
  6725  0296                     	;# 
  6726  0297                     	;# 
  6727  0298                     	;# 
  6728  029F                     	;# 
  6729  030C                     	;# 
  6730  030D                     	;# 
  6731  030E                     	;# 
  6732  0311                     	;# 
  6733  0311                     	;# 
  6734  0312                     	;# 
  6735  0313                     	;# 
  6736  0314                     	;# 
  6737  0315                     	;# 
  6738  0315                     	;# 
  6739  0316                     	;# 
  6740  0317                     	;# 
  6741  0318                     	;# 
  6742  038C                     	;# 
  6743  038D                     	;# 
  6744  038E                     	;# 
  6745  0391                     	;# 
  6746  0392                     	;# 
  6747  0393                     	;# 
  6748  0394                     	;# 
  6749  0395                     	;# 
  6750  0396                     	;# 
  6751  0397                     	;# 
  6752  0398                     	;# 
  6753  0399                     	;# 
  6754  039A                     	;# 
  6755  039C                     	;# 
  6756  039D                     	;# 
  6757  039E                     	;# 
  6758  039F                     	;# 
  6759  0411                     	;# 
  6760  0411                     	;# 
  6761  0412                     	;# 
  6762  0413                     	;# 
  6763  0414                     	;# 
  6764  0415                     	;# 
  6765  0416                     	;# 
  6766  0417                     	;# 
  6767  0418                     	;# 
  6768  0418                     	;# 
  6769  0419                     	;# 
  6770  041A                     	;# 
  6771  041B                     	;# 
  6772  041C                     	;# 
  6773  041D                     	;# 
  6774  041E                     	;# 
  6775  041F                     	;# 
  6776  0498                     	;# 
  6777  0498                     	;# 
  6778  0499                     	;# 
  6779  049A                     	;# 
  6780  049B                     	;# 
  6781  049B                     	;# 
  6782  049C                     	;# 
  6783  049D                     	;# 
  6784  049E                     	;# 
  6785  049F                     	;# 
  6786  0617                     	;# 
  6787  0618                     	;# 
  6788  0619                     	;# 
  6789  0619                     	;# 
  6790  061A                     	;# 
  6791  061B                     	;# 
  6792  061C                     	;# 
  6793  061C                     	;# 
  6794  061F                     	;# 
  6795  0691                     	;# 
  6796  0692                     	;# 
  6797  0693                     	;# 
  6798  0694                     	;# 
  6799  0695                     	;# 
  6800  0696                     	;# 
  6801  0697                     	;# 
  6802  0698                     	;# 
  6803  0699                     	;# 
  6804  0711                     	;# 
  6805  0712                     	;# 
  6806  0713                     	;# 
  6807  0714                     	;# 
  6808  0715                     	;# 
  6809  0716                     	;# 
  6810  0717                     	;# 
  6811  0718                     	;# 
  6812  0719                     	;# 
  6813  0891                     	;# 
  6814  0891                     	;# 
  6815  0891                     	;# 
  6816  0891                     	;# 
  6817  0891                     	;# 
  6818  0891                     	;# 
  6819  0892                     	;# 
  6820  0892                     	;# 
  6821  0892                     	;# 
  6822  0893                     	;# 
  6823  0893                     	;# 
  6824  0893                     	;# 
  6825  0893                     	;# 
  6826  0893                     	;# 
  6827  0893                     	;# 
  6828  0894                     	;# 
  6829  0894                     	;# 
  6830  0894                     	;# 
  6831  0895                     	;# 
  6832  0895                     	;# 
  6833  0895                     	;# 
  6834  0896                     	;# 
  6835  0896                     	;# 
  6836  0896                     	;# 
  6837  089B                     	;# 
  6838  0911                     	;# 
  6839  0912                     	;# 
  6840  0913                     	;# 
  6841  0914                     	;# 
  6842  0915                     	;# 
  6843  0916                     	;# 
  6844  0918                     	;# 
  6845  0919                     	;# 
  6846  091A                     	;# 
  6847  091B                     	;# 
  6848  091C                     	;# 
  6849  091D                     	;# 
  6850  091E                     	;# 
  6851  091F                     	;# 
  6852  0E0F                     	;# 
  6853  0E10                     	;# 
  6854  0E11                     	;# 
  6855  0E12                     	;# 
  6856  0E13                     	;# 
  6857  0E14                     	;# 
  6858  0E15                     	;# 
  6859  0E16                     	;# 
  6860  0E17                     	;# 
  6861  0E18                     	;# 
  6862  0E19                     	;# 
  6863  0E1A                     	;# 
  6864  0E1B                     	;# 
  6865  0E1C                     	;# 
  6866  0E1D                     	;# 
  6867  0E1E                     	;# 
  6868  0E1F                     	;# 
  6869  0E20                     	;# 
  6870  0E21                     	;# 
  6871  0E22                     	;# 
  6872  0E24                     	;# 
  6873  0E25                     	;# 
  6874  0E28                     	;# 
  6875  0E29                     	;# 
  6876  0E2A                     	;# 
  6877  0E2B                     	;# 
  6878  0E2C                     	;# 
  6879  0E2D                     	;# 
  6880  0E2E                     	;# 
  6881  0E2F                     	;# 
  6882  0E90                     	;# 
  6883  0E91                     	;# 
  6884  0E92                     	;# 
  6885  0E94                     	;# 
  6886  0E95                     	;# 
  6887  0E9C                     	;# 
  6888  0E9D                     	;# 
  6889  0E9E                     	;# 
  6890  0E9F                     	;# 
  6891  0EA0                     	;# 
  6892  0EA1                     	;# 
  6893  0EA2                     	;# 
  6894  0EA3                     	;# 
  6895  0EA4                     	;# 
  6896  0EA5                     	;# 
  6897  0EA6                     	;# 
  6898  0EA7                     	;# 
  6899  0F0F                     	;# 
  6900  0F10                     	;# 
  6901  0F11                     	;# 
  6902  0F12                     	;# 
  6903  0F13                     	;# 
  6904  0F14                     	;# 
  6905  0F15                     	;# 
  6906  0F16                     	;# 
  6907  0F17                     	;# 
  6908  0F18                     	;# 
  6909  0F19                     	;# 
  6910  0F1A                     	;# 
  6911  0F1B                     	;# 
  6912  0F1C                     	;# 
  6913  0F1D                     	;# 
  6914  0F1E                     	;# 
  6915  0F1F                     	;# 
  6916  0F20                     	;# 
  6917  0F21                     	;# 
  6918  0F22                     	;# 
  6919  0F23                     	;# 
  6920  0F24                     	;# 
  6921  0F25                     	;# 
  6922  0F26                     	;# 
  6923  0F27                     	;# 
  6924  0F28                     	;# 
  6925  0F29                     	;# 
  6926  0F2A                     	;# 
  6927  0F2B                     	;# 
  6928  0F2C                     	;# 
  6929  0F2D                     	;# 
  6930  0F2E                     	;# 
  6931  0F2F                     	;# 
  6932  0F30                     	;# 
  6933  0F31                     	;# 
  6934  0F32                     	;# 
  6935  0F33                     	;# 
  6936  0F34                     	;# 
  6937  0F35                     	;# 
  6938  0F36                     	;# 
  6939  0F37                     	;# 
  6940  0FE4                     	;# 
  6941  0FE5                     	;# 
  6942  0FE6                     	;# 
  6943  0FE7                     	;# 
  6944  0FE8                     	;# 
  6945  0FE9                     	;# 
  6946  0FEA                     	;# 
  6947  0FEB                     	;# 
  6948  0FED                     	;# 
  6949  0FEE                     	;# 
  6950  0FEF                     	;# 
  6951  0000                     	;# 
  6952  0001                     	;# 
  6953  0002                     	;# 
  6954  0003                     	;# 
  6955  0004                     	;# 
  6956  0005                     	;# 
  6957  0006                     	;# 
  6958  0007                     	;# 
  6959  0008                     	;# 
  6960  0009                     	;# 
  6961  000A                     	;# 
  6962  000B                     	;# 
  6963  000C                     	;# 
  6964  000D                     	;# 
  6965  000E                     	;# 
  6966  0010                     	;# 
  6967  0011                     	;# 
  6968  0012                     	;# 
  6969  0013                     	;# 
  6970  0014                     	;# 
  6971  0015                     	;# 
  6972  0015                     	;# 
  6973  0016                     	;# 
  6974  0016                     	;# 
  6975  0017                     	;# 
  6976  0018                     	;# 
  6977  0019                     	;# 
  6978  0019                     	;# 
  6979  001A                     	;# 
  6980  001B                     	;# 
  6981  001C                     	;# 
  6982  001D                     	;# 
  6983  001E                     	;# 
  6984  001F                     	;# 
  6985  008C                     	;# 
  6986  008D                     	;# 
  6987  008E                     	;# 
  6988  0090                     	;# 
  6989  0091                     	;# 
  6990  0092                     	;# 
  6991  0093                     	;# 
  6992  0094                     	;# 
  6993  0097                     	;# 
  6994  009B                     	;# 
  6995  009B                     	;# 
  6996  009C                     	;# 
  6997  009D                     	;# 
  6998  009E                     	;# 
  6999  009F                     	;# 
  7000  010C                     	;# 
  7001  010D                     	;# 
  7002  010E                     	;# 
  7003  0111                     	;# 
  7004  0112                     	;# 
  7005  0113                     	;# 
  7006  0114                     	;# 
  7007  0115                     	;# 
  7008  0116                     	;# 
  7009  0117                     	;# 
  7010  0118                     	;# 
  7011  0119                     	;# 
  7012  018C                     	;# 
  7013  018D                     	;# 
  7014  018E                     	;# 
  7015  0199                     	;# 
  7016  0199                     	;# 
  7017  0199                     	;# 
  7018  019A                     	;# 
  7019  019A                     	;# 
  7020  019A                     	;# 
  7021  019B                     	;# 
  7022  019B                     	;# 
  7023  019B                     	;# 
  7024  019B                     	;# 
  7025  019B                     	;# 
  7026  019C                     	;# 
  7027  019C                     	;# 
  7028  019C                     	;# 
  7029  019D                     	;# 
  7030  019D                     	;# 
  7031  019D                     	;# 
  7032  019E                     	;# 
  7033  019E                     	;# 
  7034  019E                     	;# 
  7035  019F                     	;# 
  7036  019F                     	;# 
  7037  019F                     	;# 
  7038  019F                     	;# 
  7039  019F                     	;# 
  7040  020C                     	;# 
  7041  020D                     	;# 
  7042  020E                     	;# 
  7043  0211                     	;# 
  7044  0211                     	;# 
  7045  0212                     	;# 
  7046  0212                     	;# 
  7047  0213                     	;# 
  7048  0213                     	;# 
  7049  0214                     	;# 
  7050  0214                     	;# 
  7051  0215                     	;# 
  7052  0215                     	;# 
  7053  0215                     	;# 
  7054  0215                     	;# 
  7055  0216                     	;# 
  7056  0216                     	;# 
  7057  0217                     	;# 
  7058  0217                     	;# 
  7059  0219                     	;# 
  7060  021A                     	;# 
  7061  021B                     	;# 
  7062  021C                     	;# 
  7063  021D                     	;# 
  7064  021D                     	;# 
  7065  021E                     	;# 
  7066  021F                     	;# 
  7067  028C                     	;# 
  7068  028D                     	;# 
  7069  028E                     	;# 
  7070  0291                     	;# 
  7071  0291                     	;# 
  7072  0292                     	;# 
  7073  0293                     	;# 
  7074  0294                     	;# 
  7075  0295                     	;# 
  7076  0295                     	;# 
  7077  0296                     	;# 
  7078  0297                     	;# 
  7079  0298                     	;# 
  7080  029F                     	;# 
  7081  030C                     	;# 
  7082  030D                     	;# 
  7083  030E                     	;# 
  7084  0311                     	;# 
  7085  0311                     	;# 
  7086  0312                     	;# 
  7087  0313                     	;# 
  7088  0314                     	;# 
  7089  0315                     	;# 
  7090  0315                     	;# 
  7091  0316                     	;# 
  7092  0317                     	;# 
  7093  0318                     	;# 
  7094  038C                     	;# 
  7095  038D                     	;# 
  7096  038E                     	;# 
  7097  0391                     	;# 
  7098  0392                     	;# 
  7099  0393                     	;# 
  7100  0394                     	;# 
  7101  0395                     	;# 
  7102  0396                     	;# 
  7103  0397                     	;# 
  7104  0398                     	;# 
  7105  0399                     	;# 
  7106  039A                     	;# 
  7107  039C                     	;# 
  7108  039D                     	;# 
  7109  039E                     	;# 
  7110  039F                     	;# 
  7111  0411                     	;# 
  7112  0411                     	;# 
  7113  0412                     	;# 
  7114  0413                     	;# 
  7115  0414                     	;# 
  7116  0415                     	;# 
  7117  0416                     	;# 
  7118  0417                     	;# 
  7119  0418                     	;# 
  7120  0418                     	;# 
  7121  0419                     	;# 
  7122  041A                     	;# 
  7123  041B                     	;# 
  7124  041C                     	;# 
  7125  041D                     	;# 
  7126  041E                     	;# 
  7127  041F                     	;# 
  7128  0498                     	;# 
  7129  0498                     	;# 
  7130  0499                     	;# 
  7131  049A                     	;# 
  7132  049B                     	;# 
  7133  049B                     	;# 
  7134  049C                     	;# 
  7135  049D                     	;# 
  7136  049E                     	;# 
  7137  049F                     	;# 
  7138  0617                     	;# 
  7139  0618                     	;# 
  7140  0619                     	;# 
  7141  0619                     	;# 
  7142  061A                     	;# 
  7143  061B                     	;# 
  7144  061C                     	;# 
  7145  061C                     	;# 
  7146  061F                     	;# 
  7147  0691                     	;# 
  7148  0692                     	;# 
  7149  0693                     	;# 
  7150  0694                     	;# 
  7151  0695                     	;# 
  7152  0696                     	;# 
  7153  0697                     	;# 
  7154  0698                     	;# 
  7155  0699                     	;# 
  7156  0711                     	;# 
  7157  0712                     	;# 
  7158  0713                     	;# 
  7159  0714                     	;# 
  7160  0715                     	;# 
  7161  0716                     	;# 
  7162  0717                     	;# 
  7163  0718                     	;# 
  7164  0719                     	;# 
  7165  0891                     	;# 
  7166  0891                     	;# 
  7167  0891                     	;# 
  7168  0891                     	;# 
  7169  0891                     	;# 
  7170  0891                     	;# 
  7171  0892                     	;# 
  7172  0892                     	;# 
  7173  0892                     	;# 
  7174  0893                     	;# 
  7175  0893                     	;# 
  7176  0893                     	;# 
  7177  0893                     	;# 
  7178  0893                     	;# 
  7179  0893                     	;# 
  7180  0894                     	;# 
  7181  0894                     	;# 
  7182  0894                     	;# 
  7183  0895                     	;# 
  7184  0895                     	;# 
  7185  0895                     	;# 
  7186  0896                     	;# 
  7187  0896                     	;# 
  7188  0896                     	;# 
  7189  089B                     	;# 
  7190  0911                     	;# 
  7191  0912                     	;# 
  7192  0913                     	;# 
  7193  0914                     	;# 
  7194  0915                     	;# 
  7195  0916                     	;# 
  7196  0918                     	;# 
  7197  0919                     	;# 
  7198  091A                     	;# 
  7199  091B                     	;# 
  7200  091C                     	;# 
  7201  091D                     	;# 
  7202  091E                     	;# 
  7203  091F                     	;# 
  7204  0E0F                     	;# 
  7205  0E10                     	;# 
  7206  0E11                     	;# 
  7207  0E12                     	;# 
  7208  0E13                     	;# 
  7209  0E14                     	;# 
  7210  0E15                     	;# 
  7211  0E16                     	;# 
  7212  0E17                     	;# 
  7213  0E18                     	;# 
  7214  0E19                     	;# 
  7215  0E1A                     	;# 
  7216  0E1B                     	;# 
  7217  0E1C                     	;# 
  7218  0E1D                     	;# 
  7219  0E1E                     	;# 
  7220  0E1F                     	;# 
  7221  0E20                     	;# 
  7222  0E21                     	;# 
  7223  0E22                     	;# 
  7224  0E24                     	;# 
  7225  0E25                     	;# 
  7226  0E28                     	;# 
  7227  0E29                     	;# 
  7228  0E2A                     	;# 
  7229  0E2B                     	;# 
  7230  0E2C                     	;# 
  7231  0E2D                     	;# 
  7232  0E2E                     	;# 
  7233  0E2F                     	;# 
  7234  0E90                     	;# 
  7235  0E91                     	;# 
  7236  0E92                     	;# 
  7237  0E94                     	;# 
  7238  0E95                     	;# 
  7239  0E9C                     	;# 
  7240  0E9D                     	;# 
  7241  0E9E                     	;# 
  7242  0E9F                     	;# 
  7243  0EA0                     	;# 
  7244  0EA1                     	;# 
  7245  0EA2                     	;# 
  7246  0EA3                     	;# 
  7247  0EA4                     	;# 
  7248  0EA5                     	;# 
  7249  0EA6                     	;# 
  7250  0EA7                     	;# 
  7251  0F0F                     	;# 
  7252  0F10                     	;# 
  7253  0F11                     	;# 
  7254  0F12                     	;# 
  7255  0F13                     	;# 
  7256  0F14                     	;# 
  7257  0F15                     	;# 
  7258  0F16                     	;# 
  7259  0F17                     	;# 
  7260  0F18                     	;# 
  7261  0F19                     	;# 
  7262  0F1A                     	;# 
  7263  0F1B                     	;# 
  7264  0F1C                     	;# 
  7265  0F1D                     	;# 
  7266  0F1E                     	;# 
  7267  0F1F                     	;# 
  7268  0F20                     	;# 
  7269  0F21                     	;# 
  7270  0F22                     	;# 
  7271  0F23                     	;# 
  7272  0F24                     	;# 
  7273  0F25                     	;# 
  7274  0F26                     	;# 
  7275  0F27                     	;# 
  7276  0F28                     	;# 
  7277  0F29                     	;# 
  7278  0F2A                     	;# 
  7279  0F2B                     	;# 
  7280  0F2C                     	;# 
  7281  0F2D                     	;# 
  7282  0F2E                     	;# 
  7283  0F2F                     	;# 
  7284  0F30                     	;# 
  7285  0F31                     	;# 
  7286  0F32                     	;# 
  7287  0F33                     	;# 
  7288  0F34                     	;# 
  7289  0F35                     	;# 
  7290  0F36                     	;# 
  7291  0F37                     	;# 
  7292  0FE4                     	;# 
  7293  0FE5                     	;# 
  7294  0FE6                     	;# 
  7295  0FE7                     	;# 
  7296  0FE8                     	;# 
  7297  0FE9                     	;# 
  7298  0FEA                     	;# 
  7299  0FEB                     	;# 
  7300  0FED                     	;# 
  7301  0FEE                     	;# 
  7302  0FEF                     	;# 
  7303  0000                     	;# 
  7304  0001                     	;# 
  7305  0002                     	;# 
  7306  0003                     	;# 
  7307  0004                     	;# 
  7308  0005                     	;# 
  7309  0006                     	;# 
  7310  0007                     	;# 
  7311  0008                     	;# 
  7312  0009                     	;# 
  7313  000A                     	;# 
  7314  000B                     	;# 
  7315  000C                     	;# 
  7316  000D                     	;# 
  7317  000E                     	;# 
  7318  0010                     	;# 
  7319  0011                     	;# 
  7320  0012                     	;# 
  7321  0013                     	;# 
  7322  0014                     	;# 
  7323  0015                     	;# 
  7324  0015                     	;# 
  7325  0016                     	;# 
  7326  0016                     	;# 
  7327  0017                     	;# 
  7328  0018                     	;# 
  7329  0019                     	;# 
  7330  0019                     	;# 
  7331  001A                     	;# 
  7332  001B                     	;# 
  7333  001C                     	;# 
  7334  001D                     	;# 
  7335  001E                     	;# 
  7336  001F                     	;# 
  7337  008C                     	;# 
  7338  008D                     	;# 
  7339  008E                     	;# 
  7340  0090                     	;# 
  7341  0091                     	;# 
  7342  0092                     	;# 
  7343  0093                     	;# 
  7344  0094                     	;# 
  7345  0097                     	;# 
  7346  009B                     	;# 
  7347  009B                     	;# 
  7348  009C                     	;# 
  7349  009D                     	;# 
  7350  009E                     	;# 
  7351  009F                     	;# 
  7352  010C                     	;# 
  7353  010D                     	;# 
  7354  010E                     	;# 
  7355  0111                     	;# 
  7356  0112                     	;# 
  7357  0113                     	;# 
  7358  0114                     	;# 
  7359  0115                     	;# 
  7360  0116                     	;# 
  7361  0117                     	;# 
  7362  0118                     	;# 
  7363  0119                     	;# 
  7364  018C                     	;# 
  7365  018D                     	;# 
  7366  018E                     	;# 
  7367  0199                     	;# 
  7368  0199                     	;# 
  7369  0199                     	;# 
  7370  019A                     	;# 
  7371  019A                     	;# 
  7372  019A                     	;# 
  7373  019B                     	;# 
  7374  019B                     	;# 
  7375  019B                     	;# 
  7376  019B                     	;# 
  7377  019B                     	;# 
  7378  019C                     	;# 
  7379  019C                     	;# 
  7380  019C                     	;# 
  7381  019D                     	;# 
  7382  019D                     	;# 
  7383  019D                     	;# 
  7384  019E                     	;# 
  7385  019E                     	;# 
  7386  019E                     	;# 
  7387  019F                     	;# 
  7388  019F                     	;# 
  7389  019F                     	;# 
  7390  019F                     	;# 
  7391  019F                     	;# 
  7392  020C                     	;# 
  7393  020D                     	;# 
  7394  020E                     	;# 
  7395  0211                     	;# 
  7396  0211                     	;# 
  7397  0212                     	;# 
  7398  0212                     	;# 
  7399  0213                     	;# 
  7400  0213                     	;# 
  7401  0214                     	;# 
  7402  0214                     	;# 
  7403  0215                     	;# 
  7404  0215                     	;# 
  7405  0215                     	;# 
  7406  0215                     	;# 
  7407  0216                     	;# 
  7408  0216                     	;# 
  7409  0217                     	;# 
  7410  0217                     	;# 
  7411  0219                     	;# 
  7412  021A                     	;# 
  7413  021B                     	;# 
  7414  021C                     	;# 
  7415  021D                     	;# 
  7416  021D                     	;# 
  7417  021E                     	;# 
  7418  021F                     	;# 
  7419  028C                     	;# 
  7420  028D                     	;# 
  7421  028E                     	;# 
  7422  0291                     	;# 
  7423  0291                     	;# 
  7424  0292                     	;# 
  7425  0293                     	;# 
  7426  0294                     	;# 
  7427  0295                     	;# 
  7428  0295                     	;# 
  7429  0296                     	;# 
  7430  0297                     	;# 
  7431  0298                     	;# 
  7432  029F                     	;# 
  7433  030C                     	;# 
  7434  030D                     	;# 
  7435  030E                     	;# 
  7436  0311                     	;# 
  7437  0311                     	;# 
  7438  0312                     	;# 
  7439  0313                     	;# 
  7440  0314                     	;# 
  7441  0315                     	;# 
  7442  0315                     	;# 
  7443  0316                     	;# 
  7444  0317                     	;# 
  7445  0318                     	;# 
  7446  038C                     	;# 
  7447  038D                     	;# 
  7448  038E                     	;# 
  7449  0391                     	;# 
  7450  0392                     	;# 
  7451  0393                     	;# 
  7452  0394                     	;# 
  7453  0395                     	;# 
  7454  0396                     	;# 
  7455  0397                     	;# 
  7456  0398                     	;# 
  7457  0399                     	;# 
  7458  039A                     	;# 
  7459  039C                     	;# 
  7460  039D                     	;# 
  7461  039E                     	;# 
  7462  039F                     	;# 
  7463  0411                     	;# 
  7464  0411                     	;# 
  7465  0412                     	;# 
  7466  0413                     	;# 
  7467  0414                     	;# 
  7468  0415                     	;# 
  7469  0416                     	;# 
  7470  0417                     	;# 
  7471  0418                     	;# 
  7472  0418                     	;# 
  7473  0419                     	;# 
  7474  041A                     	;# 
  7475  041B                     	;# 
  7476  041C                     	;# 
  7477  041D                     	;# 
  7478  041E                     	;# 
  7479  041F                     	;# 
  7480  0498                     	;# 
  7481  0498                     	;# 
  7482  0499                     	;# 
  7483  049A                     	;# 
  7484  049B                     	;# 
  7485  049B                     	;# 
  7486  049C                     	;# 
  7487  049D                     	;# 
  7488  049E                     	;# 
  7489  049F                     	;# 
  7490  0617                     	;# 
  7491  0618                     	;# 
  7492  0619                     	;# 
  7493  0619                     	;# 
  7494  061A                     	;# 
  7495  061B                     	;# 
  7496  061C                     	;# 
  7497  061C                     	;# 
  7498  061F                     	;# 
  7499  0691                     	;# 
  7500  0692                     	;# 
  7501  0693                     	;# 
  7502  0694                     	;# 
  7503  0695                     	;# 
  7504  0696                     	;# 
  7505  0697                     	;# 
  7506  0698                     	;# 
  7507  0699                     	;# 
  7508  0711                     	;# 
  7509  0712                     	;# 
  7510  0713                     	;# 
  7511  0714                     	;# 
  7512  0715                     	;# 
  7513  0716                     	;# 
  7514  0717                     	;# 
  7515  0718                     	;# 
  7516  0719                     	;# 
  7517  0891                     	;# 
  7518  0891                     	;# 
  7519  0891                     	;# 
  7520  0891                     	;# 
  7521  0891                     	;# 
  7522  0891                     	;# 
  7523  0892                     	;# 
  7524  0892                     	;# 
  7525  0892                     	;# 
  7526  0893                     	;# 
  7527  0893                     	;# 
  7528  0893                     	;# 
  7529  0893                     	;# 
  7530  0893                     	;# 
  7531  0893                     	;# 
  7532  0894                     	;# 
  7533  0894                     	;# 
  7534  0894                     	;# 
  7535  0895                     	;# 
  7536  0895                     	;# 
  7537  0895                     	;# 
  7538  0896                     	;# 
  7539  0896                     	;# 
  7540  0896                     	;# 
  7541  089B                     	;# 
  7542  0911                     	;# 
  7543  0912                     	;# 
  7544  0913                     	;# 
  7545  0914                     	;# 
  7546  0915                     	;# 
  7547  0916                     	;# 
  7548  0918                     	;# 
  7549  0919                     	;# 
  7550  091A                     	;# 
  7551  091B                     	;# 
  7552  091C                     	;# 
  7553  091D                     	;# 
  7554  091E                     	;# 
  7555  091F                     	;# 
  7556  0E0F                     	;# 
  7557  0E10                     	;# 
  7558  0E11                     	;# 
  7559  0E12                     	;# 
  7560  0E13                     	;# 
  7561  0E14                     	;# 
  7562  0E15                     	;# 
  7563  0E16                     	;# 
  7564  0E17                     	;# 
  7565  0E18                     	;# 
  7566  0E19                     	;# 
  7567  0E1A                     	;# 
  7568  0E1B                     	;# 
  7569  0E1C                     	;# 
  7570  0E1D                     	;# 
  7571  0E1E                     	;# 
  7572  0E1F                     	;# 
  7573  0E20                     	;# 
  7574  0E21                     	;# 
  7575  0E22                     	;# 
  7576  0E24                     	;# 
  7577  0E25                     	;# 
  7578  0E28                     	;# 
  7579  0E29                     	;# 
  7580  0E2A                     	;# 
  7581  0E2B                     	;# 
  7582  0E2C                     	;# 
  7583  0E2D                     	;# 
  7584  0E2E                     	;# 
  7585  0E2F                     	;# 
  7586  0E90                     	;# 
  7587  0E91                     	;# 
  7588  0E92                     	;# 
  7589  0E94                     	;# 
  7590  0E95                     	;# 
  7591  0E9C                     	;# 
  7592  0E9D                     	;# 
  7593  0E9E                     	;# 
  7594  0E9F                     	;# 
  7595  0EA0                     	;# 
  7596  0EA1                     	;# 
  7597  0EA2                     	;# 
  7598  0EA3                     	;# 
  7599  0EA4                     	;# 
  7600  0EA5                     	;# 
  7601  0EA6                     	;# 
  7602  0EA7                     	;# 
  7603  0F0F                     	;# 
  7604  0F10                     	;# 
  7605  0F11                     	;# 
  7606  0F12                     	;# 
  7607  0F13                     	;# 
  7608  0F14                     	;# 
  7609  0F15                     	;# 
  7610  0F16                     	;# 
  7611  0F17                     	;# 
  7612  0F18                     	;# 
  7613  0F19                     	;# 
  7614  0F1A                     	;# 
  7615  0F1B                     	;# 
  7616  0F1C                     	;# 
  7617  0F1D                     	;# 
  7618  0F1E                     	;# 
  7619  0F1F                     	;# 
  7620  0F20                     	;# 
  7621  0F21                     	;# 
  7622  0F22                     	;# 
  7623  0F23                     	;# 
  7624  0F24                     	;# 
  7625  0F25                     	;# 
  7626  0F26                     	;# 
  7627  0F27                     	;# 
  7628  0F28                     	;# 
  7629  0F29                     	;# 
  7630  0F2A                     	;# 
  7631  0F2B                     	;# 
  7632  0F2C                     	;# 
  7633  0F2D                     	;# 
  7634  0F2E                     	;# 
  7635  0F2F                     	;# 
  7636  0F30                     	;# 
  7637  0F31                     	;# 
  7638  0F32                     	;# 
  7639  0F33                     	;# 
  7640  0F34                     	;# 
  7641  0F35                     	;# 
  7642  0F36                     	;# 
  7643  0F37                     	;# 
  7644  0FE4                     	;# 
  7645  0FE5                     	;# 
  7646  0FE6                     	;# 
  7647  0FE7                     	;# 
  7648  0FE8                     	;# 
  7649  0FE9                     	;# 
  7650  0FEA                     	;# 
  7651  0FEB                     	;# 
  7652  0FED                     	;# 
  7653  0FEE                     	;# 
  7654  0FEF                     	;# 
  7655  0000                     	;# 
  7656  0001                     	;# 
  7657  0002                     	;# 
  7658  0003                     	;# 
  7659  0004                     	;# 
  7660  0005                     	;# 
  7661  0006                     	;# 
  7662  0007                     	;# 
  7663  0008                     	;# 
  7664  0009                     	;# 
  7665  000A                     	;# 
  7666  000B                     	;# 
  7667  000C                     	;# 
  7668  000D                     	;# 
  7669  000E                     	;# 
  7670  0010                     	;# 
  7671  0011                     	;# 
  7672  0012                     	;# 
  7673  0013                     	;# 
  7674  0014                     	;# 
  7675  0015                     	;# 
  7676  0015                     	;# 
  7677  0016                     	;# 
  7678  0016                     	;# 
  7679  0017                     	;# 
  7680  0018                     	;# 
  7681  0019                     	;# 
  7682  0019                     	;# 
  7683  001A                     	;# 
  7684  001B                     	;# 
  7685  001C                     	;# 
  7686  001D                     	;# 
  7687  001E                     	;# 
  7688  001F                     	;# 
  7689  008C                     	;# 
  7690  008D                     	;# 
  7691  008E                     	;# 
  7692  0090                     	;# 
  7693  0091                     	;# 
  7694  0092                     	;# 
  7695  0093                     	;# 
  7696  0094                     	;# 
  7697  0097                     	;# 
  7698  009B                     	;# 
  7699  009B                     	;# 
  7700  009C                     	;# 
  7701  009D                     	;# 
  7702  009E                     	;# 
  7703  009F                     	;# 
  7704  010C                     	;# 
  7705  010D                     	;# 
  7706  010E                     	;# 
  7707  0111                     	;# 
  7708  0112                     	;# 
  7709  0113                     	;# 
  7710  0114                     	;# 
  7711  0115                     	;# 
  7712  0116                     	;# 
  7713  0117                     	;# 
  7714  0118                     	;# 
  7715  0119                     	;# 
  7716  018C                     	;# 
  7717  018D                     	;# 
  7718  018E                     	;# 
  7719  0199                     	;# 
  7720  0199                     	;# 
  7721  0199                     	;# 
  7722  019A                     	;# 
  7723  019A                     	;# 
  7724  019A                     	;# 
  7725  019B                     	;# 
  7726  019B                     	;# 
  7727  019B                     	;# 
  7728  019B                     	;# 
  7729  019B                     	;# 
  7730  019C                     	;# 
  7731  019C                     	;# 
  7732  019C                     	;# 
  7733  019D                     	;# 
  7734  019D                     	;# 
  7735  019D                     	;# 
  7736  019E                     	;# 
  7737  019E                     	;# 
  7738  019E                     	;# 
  7739  019F                     	;# 
  7740  019F                     	;# 
  7741  019F                     	;# 
  7742  019F                     	;# 
  7743  019F                     	;# 
  7744  020C                     	;# 
  7745  020D                     	;# 
  7746  020E                     	;# 
  7747  0211                     	;# 
  7748  0211                     	;# 
  7749  0212                     	;# 
  7750  0212                     	;# 
  7751  0213                     	;# 
  7752  0213                     	;# 
  7753  0214                     	;# 
  7754  0214                     	;# 
  7755  0215                     	;# 
  7756  0215                     	;# 
  7757  0215                     	;# 
  7758  0215                     	;# 
  7759  0216                     	;# 
  7760  0216                     	;# 
  7761  0217                     	;# 
  7762  0217                     	;# 
  7763  0219                     	;# 
  7764  021A                     	;# 
  7765  021B                     	;# 
  7766  021C                     	;# 
  7767  021D                     	;# 
  7768  021D                     	;# 
  7769  021E                     	;# 
  7770  021F                     	;# 
  7771  028C                     	;# 
  7772  028D                     	;# 
  7773  028E                     	;# 
  7774  0291                     	;# 
  7775  0291                     	;# 
  7776  0292                     	;# 
  7777  0293                     	;# 
  7778  0294                     	;# 
  7779  0295                     	;# 
  7780  0295                     	;# 
  7781  0296                     	;# 
  7782  0297                     	;# 
  7783  0298                     	;# 
  7784  029F                     	;# 
  7785  030C                     	;# 
  7786  030D                     	;# 
  7787  030E                     	;# 
  7788  0311                     	;# 
  7789  0311                     	;# 
  7790  0312                     	;# 
  7791  0313                     	;# 
  7792  0314                     	;# 
  7793  0315                     	;# 
  7794  0315                     	;# 
  7795  0316                     	;# 
  7796  0317                     	;# 
  7797  0318                     	;# 
  7798  038C                     	;# 
  7799  038D                     	;# 
  7800  038E                     	;# 
  7801  0391                     	;# 
  7802  0392                     	;# 
  7803  0393                     	;# 
  7804  0394                     	;# 
  7805  0395                     	;# 
  7806  0396                     	;# 
  7807  0397                     	;# 
  7808  0398                     	;# 
  7809  0399                     	;# 
  7810  039A                     	;# 
  7811  039C                     	;# 
  7812  039D                     	;# 
  7813  039E                     	;# 
  7814  039F                     	;# 
  7815  0411                     	;# 
  7816  0411                     	;# 
  7817  0412                     	;# 
  7818  0413                     	;# 
  7819  0414                     	;# 
  7820  0415                     	;# 
  7821  0416                     	;# 
  7822  0417                     	;# 
  7823  0418                     	;# 
  7824  0418                     	;# 
  7825  0419                     	;# 
  7826  041A                     	;# 
  7827  041B                     	;# 
  7828  041C                     	;# 
  7829  041D                     	;# 
  7830  041E                     	;# 
  7831  041F                     	;# 
  7832  0498                     	;# 
  7833  0498                     	;# 
  7834  0499                     	;# 
  7835  049A                     	;# 
  7836  049B                     	;# 
  7837  049B                     	;# 
  7838  049C                     	;# 
  7839  049D                     	;# 
  7840  049E                     	;# 
  7841  049F                     	;# 
  7842  0617                     	;# 
  7843  0618                     	;# 
  7844  0619                     	;# 
  7845  0619                     	;# 
  7846  061A                     	;# 
  7847  061B                     	;# 
  7848  061C                     	;# 
  7849  061C                     	;# 
  7850  061F                     	;# 
  7851  0691                     	;# 
  7852  0692                     	;# 
  7853  0693                     	;# 
  7854  0694                     	;# 
  7855  0695                     	;# 
  7856  0696                     	;# 
  7857  0697                     	;# 
  7858  0698                     	;# 
  7859  0699                     	;# 
  7860  0711                     	;# 
  7861  0712                     	;# 
  7862  0713                     	;# 
  7863  0714                     	;# 
  7864  0715                     	;# 
  7865  0716                     	;# 
  7866  0717                     	;# 
  7867  0718                     	;# 
  7868  0719                     	;# 
  7869  0891                     	;# 
  7870  0891                     	;# 
  7871  0891                     	;# 
  7872  0891                     	;# 
  7873  0891                     	;# 
  7874  0891                     	;# 
  7875  0892                     	;# 
  7876  0892                     	;# 
  7877  0892                     	;# 
  7878  0893                     	;# 
  7879  0893                     	;# 
  7880  0893                     	;# 
  7881  0893                     	;# 
  7882  0893                     	;# 
  7883  0893                     	;# 
  7884  0894                     	;# 
  7885  0894                     	;# 
  7886  0894                     	;# 
  7887  0895                     	;# 
  7888  0895                     	;# 
  7889  0895                     	;# 
  7890  0896                     	;# 
  7891  0896                     	;# 
  7892  0896                     	;# 
  7893  089B                     	;# 
  7894  0911                     	;# 
  7895  0912                     	;# 
  7896  0913                     	;# 
  7897  0914                     	;# 
  7898  0915                     	;# 
  7899  0916                     	;# 
  7900  0918                     	;# 
  7901  0919                     	;# 
  7902  091A                     	;# 
  7903  091B                     	;# 
  7904  091C                     	;# 
  7905  091D                     	;# 
  7906  091E                     	;# 
  7907  091F                     	;# 
  7908  0E0F                     	;# 
  7909  0E10                     	;# 
  7910  0E11                     	;# 
  7911  0E12                     	;# 
  7912  0E13                     	;# 
  7913  0E14                     	;# 
  7914  0E15                     	;# 
  7915  0E16                     	;# 
  7916  0E17                     	;# 
  7917  0E18                     	;# 
  7918  0E19                     	;# 
  7919  0E1A                     	;# 
  7920  0E1B                     	;# 
  7921  0E1C                     	;# 
  7922  0E1D                     	;# 
  7923  0E1E                     	;# 
  7924  0E1F                     	;# 
  7925  0E20                     	;# 
  7926  0E21                     	;# 
  7927  0E22                     	;# 
  7928  0E24                     	;# 
  7929  0E25                     	;# 
  7930  0E28                     	;# 
  7931  0E29                     	;# 
  7932  0E2A                     	;# 
  7933  0E2B                     	;# 
  7934  0E2C                     	;# 
  7935  0E2D                     	;# 
  7936  0E2E                     	;# 
  7937  0E2F                     	;# 
  7938  0E90                     	;# 
  7939  0E91                     	;# 
  7940  0E92                     	;# 
  7941  0E94                     	;# 
  7942  0E95                     	;# 
  7943  0E9C                     	;# 
  7944  0E9D                     	;# 
  7945  0E9E                     	;# 
  7946  0E9F                     	;# 
  7947  0EA0                     	;# 
  7948  0EA1                     	;# 
  7949  0EA2                     	;# 
  7950  0EA3                     	;# 
  7951  0EA4                     	;# 
  7952  0EA5                     	;# 
  7953  0EA6                     	;# 
  7954  0EA7                     	;# 
  7955  0F0F                     	;# 
  7956  0F10                     	;# 
  7957  0F11                     	;# 
  7958  0F12                     	;# 
  7959  0F13                     	;# 
  7960  0F14                     	;# 
  7961  0F15                     	;# 
  7962  0F16                     	;# 
  7963  0F17                     	;# 
  7964  0F18                     	;# 
  7965  0F19                     	;# 
  7966  0F1A                     	;# 
  7967  0F1B                     	;# 
  7968  0F1C                     	;# 
  7969  0F1D                     	;# 
  7970  0F1E                     	;# 
  7971  0F1F                     	;# 
  7972  0F20                     	;# 
  7973  0F21                     	;# 
  7974  0F22                     	;# 
  7975  0F23                     	;# 
  7976  0F24                     	;# 
  7977  0F25                     	;# 
  7978  0F26                     	;# 
  7979  0F27                     	;# 
  7980  0F28                     	;# 
  7981  0F29                     	;# 
  7982  0F2A                     	;# 
  7983  0F2B                     	;# 
  7984  0F2C                     	;# 
  7985  0F2D                     	;# 
  7986  0F2E                     	;# 
  7987  0F2F                     	;# 
  7988  0F30                     	;# 
  7989  0F31                     	;# 
  7990  0F32                     	;# 
  7991  0F33                     	;# 
  7992  0F34                     	;# 
  7993  0F35                     	;# 
  7994  0F36                     	;# 
  7995  0F37                     	;# 
  7996  0FE4                     	;# 
  7997  0FE5                     	;# 
  7998  0FE6                     	;# 
  7999  0FE7                     	;# 
  8000  0FE8                     	;# 
  8001  0FE9                     	;# 
  8002  0FEA                     	;# 
  8003  0FEB                     	;# 
  8004  0FED                     	;# 
  8005  0FEE                     	;# 
  8006  0FEF                     	;# 
  8007  0000                     	;# 
  8008  0001                     	;# 
  8009  0002                     	;# 
  8010  0003                     	;# 
  8011  0004                     	;# 
  8012  0005                     	;# 
  8013  0006                     	;# 
  8014  0007                     	;# 
  8015  0008                     	;# 
  8016  0009                     	;# 
  8017  000A                     	;# 
  8018  000B                     	;# 
  8019  000C                     	;# 
  8020  000D                     	;# 
  8021  000E                     	;# 
  8022  0010                     	;# 
  8023  0011                     	;# 
  8024  0012                     	;# 
  8025  0013                     	;# 
  8026  0014                     	;# 
  8027  0015                     	;# 
  8028  0015                     	;# 
  8029  0016                     	;# 
  8030  0016                     	;# 
  8031  0017                     	;# 
  8032  0018                     	;# 
  8033  0019                     	;# 
  8034  0019                     	;# 
  8035  001A                     	;# 
  8036  001B                     	;# 
  8037  001C                     	;# 
  8038  001D                     	;# 
  8039  001E                     	;# 
  8040  001F                     	;# 
  8041  008C                     	;# 
  8042  008D                     	;# 
  8043  008E                     	;# 
  8044  0090                     	;# 
  8045  0091                     	;# 
  8046  0092                     	;# 
  8047  0093                     	;# 
  8048  0094                     	;# 
  8049  0097                     	;# 
  8050  009B                     	;# 
  8051  009B                     	;# 
  8052  009C                     	;# 
  8053  009D                     	;# 
  8054  009E                     	;# 
  8055  009F                     	;# 
  8056  010C                     	;# 
  8057  010D                     	;# 
  8058  010E                     	;# 
  8059  0111                     	;# 
  8060  0112                     	;# 
  8061  0113                     	;# 
  8062  0114                     	;# 
  8063  0115                     	;# 
  8064  0116                     	;# 
  8065  0117                     	;# 
  8066  0118                     	;# 
  8067  0119                     	;# 
  8068  018C                     	;# 
  8069  018D                     	;# 
  8070  018E                     	;# 
  8071  0199                     	;# 
  8072  0199                     	;# 
  8073  0199                     	;# 
  8074  019A                     	;# 
  8075  019A                     	;# 
  8076  019A                     	;# 
  8077  019B                     	;# 
  8078  019B                     	;# 
  8079  019B                     	;# 
  8080  019B                     	;# 
  8081  019B                     	;# 
  8082  019C                     	;# 
  8083  019C                     	;# 
  8084  019C                     	;# 
  8085  019D                     	;# 
  8086  019D                     	;# 
  8087  019D                     	;# 
  8088  019E                     	;# 
  8089  019E                     	;# 
  8090  019E                     	;# 
  8091  019F                     	;# 
  8092  019F                     	;# 
  8093  019F                     	;# 
  8094  019F                     	;# 
  8095  019F                     	;# 
  8096  020C                     	;# 
  8097  020D                     	;# 
  8098  020E                     	;# 
  8099  0211                     	;# 
  8100  0211                     	;# 
  8101  0212                     	;# 
  8102  0212                     	;# 
  8103  0213                     	;# 
  8104  0213                     	;# 
  8105  0214                     	;# 
  8106  0214                     	;# 
  8107  0215                     	;# 
  8108  0215                     	;# 
  8109  0215                     	;# 
  8110  0215                     	;# 
  8111  0216                     	;# 
  8112  0216                     	;# 
  8113  0217                     	;# 
  8114  0217                     	;# 
  8115  0219                     	;# 
  8116  021A                     	;# 
  8117  021B                     	;# 
  8118  021C                     	;# 
  8119  021D                     	;# 
  8120  021D                     	;# 
  8121  021E                     	;# 
  8122  021F                     	;# 
  8123  028C                     	;# 
  8124  028D                     	;# 
  8125  028E                     	;# 
  8126  0291                     	;# 
  8127  0291                     	;# 
  8128  0292                     	;# 
  8129  0293                     	;# 
  8130  0294                     	;# 
  8131  0295                     	;# 
  8132  0295                     	;# 
  8133  0296                     	;# 
  8134  0297                     	;# 
  8135  0298                     	;# 
  8136  029F                     	;# 
  8137  030C                     	;# 
  8138  030D                     	;# 
  8139  030E                     	;# 
  8140  0311                     	;# 
  8141  0311                     	;# 
  8142  0312                     	;# 
  8143  0313                     	;# 
  8144  0314                     	;# 
  8145  0315                     	;# 
  8146  0315                     	;# 
  8147  0316                     	;# 
  8148  0317                     	;# 
  8149  0318                     	;# 
  8150  038C                     	;# 
  8151  038D                     	;# 
  8152  038E                     	;# 
  8153  0391                     	;# 
  8154  0392                     	;# 
  8155  0393                     	;# 
  8156  0394                     	;# 
  8157  0395                     	;# 
  8158  0396                     	;# 
  8159  0397                     	;# 
  8160  0398                     	;# 
  8161  0399                     	;# 
  8162  039A                     	;# 
  8163  039C                     	;# 
  8164  039D                     	;# 
  8165  039E                     	;# 
  8166  039F                     	;# 
  8167  0411                     	;# 
  8168  0411                     	;# 
  8169  0412                     	;# 
  8170  0413                     	;# 
  8171  0414                     	;# 
  8172  0415                     	;# 
  8173  0416                     	;# 
  8174  0417                     	;# 
  8175  0418                     	;# 
  8176  0418                     	;# 
  8177  0419                     	;# 
  8178  041A                     	;# 
  8179  041B                     	;# 
  8180  041C                     	;# 
  8181  041D                     	;# 
  8182  041E                     	;# 
  8183  041F                     	;# 
  8184  0498                     	;# 
  8185  0498                     	;# 
  8186  0499                     	;# 
  8187  049A                     	;# 
  8188  049B                     	;# 
  8189  049B                     	;# 
  8190  049C                     	;# 
  8191  049D                     	;# 
  8192  049E                     	;# 
  8193  049F                     	;# 
  8194  0617                     	;# 
  8195  0618                     	;# 
  8196  0619                     	;# 
  8197  0619                     	;# 
  8198  061A                     	;# 
  8199  061B                     	;# 
  8200  061C                     	;# 
  8201  061C                     	;# 
  8202  061F                     	;# 
  8203  0691                     	;# 
  8204  0692                     	;# 
  8205  0693                     	;# 
  8206  0694                     	;# 
  8207  0695                     	;# 
  8208  0696                     	;# 
  8209  0697                     	;# 
  8210  0698                     	;# 
  8211  0699                     	;# 
  8212  0711                     	;# 
  8213  0712                     	;# 
  8214  0713                     	;# 
  8215  0714                     	;# 
  8216  0715                     	;# 
  8217  0716                     	;# 
  8218  0717                     	;# 
  8219  0718                     	;# 
  8220  0719                     	;# 
  8221  0891                     	;# 
  8222  0891                     	;# 
  8223  0891                     	;# 
  8224  0891                     	;# 
  8225  0891                     	;# 
  8226  0891                     	;# 
  8227  0892                     	;# 
  8228  0892                     	;# 
  8229  0892                     	;# 
  8230  0893                     	;# 
  8231  0893                     	;# 
  8232  0893                     	;# 
  8233  0893                     	;# 
  8234  0893                     	;# 
  8235  0893                     	;# 
  8236  0894                     	;# 
  8237  0894                     	;# 
  8238  0894                     	;# 
  8239  0895                     	;# 
  8240  0895                     	;# 
  8241  0895                     	;# 
  8242  0896                     	;# 
  8243  0896                     	;# 
  8244  0896                     	;# 
  8245  089B                     	;# 
  8246  0911                     	;# 
  8247  0912                     	;# 
  8248  0913                     	;# 
  8249  0914                     	;# 
  8250  0915                     	;# 
  8251  0916                     	;# 
  8252  0918                     	;# 
  8253  0919                     	;# 
  8254  091A                     	;# 
  8255  091B                     	;# 
  8256  091C                     	;# 
  8257  091D                     	;# 
  8258  091E                     	;# 
  8259  091F                     	;# 
  8260  0E0F                     	;# 
  8261  0E10                     	;# 
  8262  0E11                     	;# 
  8263  0E12                     	;# 
  8264  0E13                     	;# 
  8265  0E14                     	;# 
  8266  0E15                     	;# 
  8267  0E16                     	;# 
  8268  0E17                     	;# 
  8269  0E18                     	;# 
  8270  0E19                     	;# 
  8271  0E1A                     	;# 
  8272  0E1B                     	;# 
  8273  0E1C                     	;# 
  8274  0E1D                     	;# 
  8275  0E1E                     	;# 
  8276  0E1F                     	;# 
  8277  0E20                     	;# 
  8278  0E21                     	;# 
  8279  0E22                     	;# 
  8280  0E24                     	;# 
  8281  0E25                     	;# 
  8282  0E28                     	;# 
  8283  0E29                     	;# 
  8284  0E2A                     	;# 
  8285  0E2B                     	;# 
  8286  0E2C                     	;# 
  8287  0E2D                     	;# 
  8288  0E2E                     	;# 
  8289  0E2F                     	;# 
  8290  0E90                     	;# 
  8291  0E91                     	;# 
  8292  0E92                     	;# 
  8293  0E94                     	;# 
  8294  0E95                     	;# 
  8295  0E9C                     	;# 
  8296  0E9D                     	;# 
  8297  0E9E                     	;# 
  8298  0E9F                     	;# 
  8299  0EA0                     	;# 
  8300  0EA1                     	;# 
  8301  0EA2                     	;# 
  8302  0EA3                     	;# 
  8303  0EA4                     	;# 
  8304  0EA5                     	;# 
  8305  0EA6                     	;# 
  8306  0EA7                     	;# 
  8307  0F0F                     	;# 
  8308  0F10                     	;# 
  8309  0F11                     	;# 
  8310  0F12                     	;# 
  8311  0F13                     	;# 
  8312  0F14                     	;# 
  8313  0F15                     	;# 
  8314  0F16                     	;# 
  8315  0F17                     	;# 
  8316  0F18                     	;# 
  8317  0F19                     	;# 
  8318  0F1A                     	;# 
  8319  0F1B                     	;# 
  8320  0F1C                     	;# 
  8321  0F1D                     	;# 
  8322  0F1E                     	;# 
  8323  0F1F                     	;# 
  8324  0F20                     	;# 
  8325  0F21                     	;# 
  8326  0F22                     	;# 
  8327  0F23                     	;# 
  8328  0F24                     	;# 
  8329  0F25                     	;# 
  8330  0F26                     	;# 
  8331  0F27                     	;# 
  8332  0F28                     	;# 
  8333  0F29                     	;# 
  8334  0F2A                     	;# 
  8335  0F2B                     	;# 
  8336  0F2C                     	;# 
  8337  0F2D                     	;# 
  8338  0F2E                     	;# 
  8339  0F2F                     	;# 
  8340  0F30                     	;# 
  8341  0F31                     	;# 
  8342  0F32                     	;# 
  8343  0F33                     	;# 
  8344  0F34                     	;# 
  8345  0F35                     	;# 
  8346  0F36                     	;# 
  8347  0F37                     	;# 
  8348  0FE4                     	;# 
  8349  0FE5                     	;# 
  8350  0FE6                     	;# 
  8351  0FE7                     	;# 
  8352  0FE8                     	;# 
  8353  0FE9                     	;# 
  8354  0FEA                     	;# 
  8355  0FEB                     	;# 
  8356  0FED                     	;# 
  8357  0FEE                     	;# 
  8358  0FEF                     	;# 
  8359  0000                     	;# 
  8360  0001                     	;# 
  8361  0002                     	;# 
  8362  0003                     	;# 
  8363  0004                     	;# 
  8364  0005                     	;# 
  8365  0006                     	;# 
  8366  0007                     	;# 
  8367  0008                     	;# 
  8368  0009                     	;# 
  8369  000A                     	;# 
  8370  000B                     	;# 
  8371  000C                     	;# 
  8372  000D                     	;# 
  8373  000E                     	;# 
  8374  0010                     	;# 
  8375  0011                     	;# 
  8376  0012                     	;# 
  8377  0013                     	;# 
  8378  0014                     	;# 
  8379  0015                     	;# 
  8380  0015                     	;# 
  8381  0016                     	;# 
  8382  0016                     	;# 
  8383  0017                     	;# 
  8384  0018                     	;# 
  8385  0019                     	;# 
  8386  0019                     	;# 
  8387  001A                     	;# 
  8388  001B                     	;# 
  8389  001C                     	;# 
  8390  001D                     	;# 
  8391  001E                     	;# 
  8392  001F                     	;# 
  8393  008C                     	;# 
  8394  008D                     	;# 
  8395  008E                     	;# 
  8396  0090                     	;# 
  8397  0091                     	;# 
  8398  0092                     	;# 
  8399  0093                     	;# 
  8400  0094                     	;# 
  8401  0097                     	;# 
  8402  009B                     	;# 
  8403  009B                     	;# 
  8404  009C                     	;# 
  8405  009D                     	;# 
  8406  009E                     	;# 
  8407  009F                     	;# 
  8408  010C                     	;# 
  8409  010D                     	;# 
  8410  010E                     	;# 
  8411  0111                     	;# 
  8412  0112                     	;# 
  8413  0113                     	;# 
  8414  0114                     	;# 
  8415  0115                     	;# 
  8416  0116                     	;# 
  8417  0117                     	;# 
  8418  0118                     	;# 
  8419  0119                     	;# 
  8420  018C                     	;# 
  8421  018D                     	;# 
  8422  018E                     	;# 
  8423  0199                     	;# 
  8424  0199                     	;# 
  8425  0199                     	;# 
  8426  019A                     	;# 
  8427  019A                     	;# 
  8428  019A                     	;# 
  8429  019B                     	;# 
  8430  019B                     	;# 
  8431  019B                     	;# 
  8432  019B                     	;# 
  8433  019B                     	;# 
  8434  019C                     	;# 
  8435  019C                     	;# 
  8436  019C                     	;# 
  8437  019D                     	;# 
  8438  019D                     	;# 
  8439  019D                     	;# 
  8440  019E                     	;# 
  8441  019E                     	;# 
  8442  019E                     	;# 
  8443  019F                     	;# 
  8444  019F                     	;# 
  8445  019F                     	;# 
  8446  019F                     	;# 
  8447  019F                     	;# 
  8448  020C                     	;# 
  8449  020D                     	;# 
  8450  020E                     	;# 
  8451  0211                     	;# 
  8452  0211                     	;# 
  8453  0212                     	;# 
  8454  0212                     	;# 
  8455  0213                     	;# 
  8456  0213                     	;# 
  8457  0214                     	;# 
  8458  0214                     	;# 
  8459  0215                     	;# 
  8460  0215                     	;# 
  8461  0215                     	;# 
  8462  0215                     	;# 
  8463  0216                     	;# 
  8464  0216                     	;# 
  8465  0217                     	;# 
  8466  0217                     	;# 
  8467  0219                     	;# 
  8468  021A                     	;# 
  8469  021B                     	;# 
  8470  021C                     	;# 
  8471  021D                     	;# 
  8472  021D                     	;# 
  8473  021E                     	;# 
  8474  021F                     	;# 
  8475  028C                     	;# 
  8476  028D                     	;# 
  8477  028E                     	;# 
  8478  0291                     	;# 
  8479  0291                     	;# 
  8480  0292                     	;# 
  8481  0293                     	;# 
  8482  0294                     	;# 
  8483  0295                     	;# 
  8484  0295                     	;# 
  8485  0296                     	;# 
  8486  0297                     	;# 
  8487  0298                     	;# 
  8488  029F                     	;# 
  8489  030C                     	;# 
  8490  030D                     	;# 
  8491  030E                     	;# 
  8492  0311                     	;# 
  8493  0311                     	;# 
  8494  0312                     	;# 
  8495  0313                     	;# 
  8496  0314                     	;# 
  8497  0315                     	;# 
  8498  0315                     	;# 
  8499  0316                     	;# 
  8500  0317                     	;# 
  8501  0318                     	;# 
  8502  038C                     	;# 
  8503  038D                     	;# 
  8504  038E                     	;# 
  8505  0391                     	;# 
  8506  0392                     	;# 
  8507  0393                     	;# 
  8508  0394                     	;# 
  8509  0395                     	;# 
  8510  0396                     	;# 
  8511  0397                     	;# 
  8512  0398                     	;# 
  8513  0399                     	;# 
  8514  039A                     	;# 
  8515  039C                     	;# 
  8516  039D                     	;# 
  8517  039E                     	;# 
  8518  039F                     	;# 
  8519  0411                     	;# 
  8520  0411                     	;# 
  8521  0412                     	;# 
  8522  0413                     	;# 
  8523  0414                     	;# 
  8524  0415                     	;# 
  8525  0416                     	;# 
  8526  0417                     	;# 
  8527  0418                     	;# 
  8528  0418                     	;# 
  8529  0419                     	;# 
  8530  041A                     	;# 
  8531  041B                     	;# 
  8532  041C                     	;# 
  8533  041D                     	;# 
  8534  041E                     	;# 
  8535  041F                     	;# 
  8536  0498                     	;# 
  8537  0498                     	;# 
  8538  0499                     	;# 
  8539  049A                     	;# 
  8540  049B                     	;# 
  8541  049B                     	;# 
  8542  049C                     	;# 
  8543  049D                     	;# 
  8544  049E                     	;# 
  8545  049F                     	;# 
  8546  0617                     	;# 
  8547  0618                     	;# 
  8548  0619                     	;# 
  8549  0619                     	;# 
  8550  061A                     	;# 
  8551  061B                     	;# 
  8552  061C                     	;# 
  8553  061C                     	;# 
  8554  061F                     	;# 
  8555  0691                     	;# 
  8556  0692                     	;# 
  8557  0693                     	;# 
  8558  0694                     	;# 
  8559  0695                     	;# 
  8560  0696                     	;# 
  8561  0697                     	;# 
  8562  0698                     	;# 
  8563  0699                     	;# 
  8564  0711                     	;# 
  8565  0712                     	;# 
  8566  0713                     	;# 
  8567  0714                     	;# 
  8568  0715                     	;# 
  8569  0716                     	;# 
  8570  0717                     	;# 
  8571  0718                     	;# 
  8572  0719                     	;# 
  8573  0891                     	;# 
  8574  0891                     	;# 
  8575  0891                     	;# 
  8576  0891                     	;# 
  8577  0891                     	;# 
  8578  0891                     	;# 
  8579  0892                     	;# 
  8580  0892                     	;# 
  8581  0892                     	;# 
  8582  0893                     	;# 
  8583  0893                     	;# 
  8584  0893                     	;# 
  8585  0893                     	;# 
  8586  0893                     	;# 
  8587  0893                     	;# 
  8588  0894                     	;# 
  8589  0894                     	;# 
  8590  0894                     	;# 
  8591  0895                     	;# 
  8592  0895                     	;# 
  8593  0895                     	;# 
  8594  0896                     	;# 
  8595  0896                     	;# 
  8596  0896                     	;# 
  8597  089B                     	;# 
  8598  0911                     	;# 
  8599  0912                     	;# 
  8600  0913                     	;# 
  8601  0914                     	;# 
  8602  0915                     	;# 
  8603  0916                     	;# 
  8604  0918                     	;# 
  8605  0919                     	;# 
  8606  091A                     	;# 
  8607  091B                     	;# 
  8608  091C                     	;# 
  8609  091D                     	;# 
  8610  091E                     	;# 
  8611  091F                     	;# 
  8612  0E0F                     	;# 
  8613  0E10                     	;# 
  8614  0E11                     	;# 
  8615  0E12                     	;# 
  8616  0E13                     	;# 
  8617  0E14                     	;# 
  8618  0E15                     	;# 
  8619  0E16                     	;# 
  8620  0E17                     	;# 
  8621  0E18                     	;# 
  8622  0E19                     	;# 
  8623  0E1A                     	;# 
  8624  0E1B                     	;# 
  8625  0E1C                     	;# 
  8626  0E1D                     	;# 
  8627  0E1E                     	;# 
  8628  0E1F                     	;# 
  8629  0E20                     	;# 
  8630  0E21                     	;# 
  8631  0E22                     	;# 
  8632  0E24                     	;# 
  8633  0E25                     	;# 
  8634  0E28                     	;# 
  8635  0E29                     	;# 
  8636  0E2A                     	;# 
  8637  0E2B                     	;# 
  8638  0E2C                     	;# 
  8639  0E2D                     	;# 
  8640  0E2E                     	;# 
  8641  0E2F                     	;# 
  8642  0E90                     	;# 
  8643  0E91                     	;# 
  8644  0E92                     	;# 
  8645  0E94                     	;# 
  8646  0E95                     	;# 
  8647  0E9C                     	;# 
  8648  0E9D                     	;# 
  8649  0E9E                     	;# 
  8650  0E9F                     	;# 
  8651  0EA0                     	;# 
  8652  0EA1                     	;# 
  8653  0EA2                     	;# 
  8654  0EA3                     	;# 
  8655  0EA4                     	;# 
  8656  0EA5                     	;# 
  8657  0EA6                     	;# 
  8658  0EA7                     	;# 
  8659  0F0F                     	;# 
  8660  0F10                     	;# 
  8661  0F11                     	;# 
  8662  0F12                     	;# 
  8663  0F13                     	;# 
  8664  0F14                     	;# 
  8665  0F15                     	;# 
  8666  0F16                     	;# 
  8667  0F17                     	;# 
  8668  0F18                     	;# 
  8669  0F19                     	;# 
  8670  0F1A                     	;# 
  8671  0F1B                     	;# 
  8672  0F1C                     	;# 
  8673  0F1D                     	;# 
  8674  0F1E                     	;# 
  8675  0F1F                     	;# 
  8676  0F20                     	;# 
  8677  0F21                     	;# 
  8678  0F22                     	;# 
  8679  0F23                     	;# 
  8680  0F24                     	;# 
  8681  0F25                     	;# 
  8682  0F26                     	;# 
  8683  0F27                     	;# 
  8684  0F28                     	;# 
  8685  0F29                     	;# 
  8686  0F2A                     	;# 
  8687  0F2B                     	;# 
  8688  0F2C                     	;# 
  8689  0F2D                     	;# 
  8690  0F2E                     	;# 
  8691  0F2F                     	;# 
  8692  0F30                     	;# 
  8693  0F31                     	;# 
  8694  0F32                     	;# 
  8695  0F33                     	;# 
  8696  0F34                     	;# 
  8697  0F35                     	;# 
  8698  0F36                     	;# 
  8699  0F37                     	;# 
  8700  0FE4                     	;# 
  8701  0FE5                     	;# 
  8702  0FE6                     	;# 
  8703  0FE7                     	;# 
  8704  0FE8                     	;# 
  8705  0FE9                     	;# 
  8706  0FEA                     	;# 
  8707  0FEB                     	;# 
  8708  0FED                     	;# 
  8709  0FEE                     	;# 
  8710  0FEF                     	;# 
  8711  0000                     	;# 
  8712  0001                     	;# 
  8713  0002                     	;# 
  8714  0003                     	;# 
  8715  0004                     	;# 
  8716  0005                     	;# 
  8717  0006                     	;# 
  8718  0007                     	;# 
  8719  0008                     	;# 
  8720  0009                     	;# 
  8721  000A                     	;# 
  8722  000B                     	;# 
  8723  000C                     	;# 
  8724  000D                     	;# 
  8725  000E                     	;# 
  8726  0010                     	;# 
  8727  0011                     	;# 
  8728  0012                     	;# 
  8729  0013                     	;# 
  8730  0014                     	;# 
  8731  0015                     	;# 
  8732  0015                     	;# 
  8733  0016                     	;# 
  8734  0016                     	;# 
  8735  0017                     	;# 
  8736  0018                     	;# 
  8737  0019                     	;# 
  8738  0019                     	;# 
  8739  001A                     	;# 
  8740  001B                     	;# 
  8741  001C                     	;# 
  8742  001D                     	;# 
  8743  001E                     	;# 
  8744  001F                     	;# 
  8745  008C                     	;# 
  8746  008D                     	;# 
  8747  008E                     	;# 
  8748  0090                     	;# 
  8749  0091                     	;# 
  8750  0092                     	;# 
  8751  0093                     	;# 
  8752  0094                     	;# 
  8753  0097                     	;# 
  8754  009B                     	;# 
  8755  009B                     	;# 
  8756  009C                     	;# 
  8757  009D                     	;# 
  8758  009E                     	;# 
  8759  009F                     	;# 
  8760  010C                     	;# 
  8761  010D                     	;# 
  8762  010E                     	;# 
  8763  0111                     	;# 
  8764  0112                     	;# 
  8765  0113                     	;# 
  8766  0114                     	;# 
  8767  0115                     	;# 
  8768  0116                     	;# 
  8769  0117                     	;# 
  8770  0118                     	;# 
  8771  0119                     	;# 
  8772  018C                     	;# 
  8773  018D                     	;# 
  8774  018E                     	;# 
  8775  0199                     	;# 
  8776  0199                     	;# 
  8777  0199                     	;# 
  8778  019A                     	;# 
  8779  019A                     	;# 
  8780  019A                     	;# 
  8781  019B                     	;# 
  8782  019B                     	;# 
  8783  019B                     	;# 
  8784  019B                     	;# 
  8785  019B                     	;# 
  8786  019C                     	;# 
  8787  019C                     	;# 
  8788  019C                     	;# 
  8789  019D                     	;# 
  8790  019D                     	;# 
  8791  019D                     	;# 
  8792  019E                     	;# 
  8793  019E                     	;# 
  8794  019E                     	;# 
  8795  019F                     	;# 
  8796  019F                     	;# 
  8797  019F                     	;# 
  8798  019F                     	;# 
  8799  019F                     	;# 
  8800  020C                     	;# 
  8801  020D                     	;# 
  8802  020E                     	;# 
  8803  0211                     	;# 
  8804  0211                     	;# 
  8805  0212                     	;# 
  8806  0212                     	;# 
  8807  0213                     	;# 
  8808  0213                     	;# 
  8809  0214                     	;# 
  8810  0214                     	;# 
  8811  0215                     	;# 
  8812  0215                     	;# 
  8813  0215                     	;# 
  8814  0215                     	;# 
  8815  0216                     	;# 
  8816  0216                     	;# 
  8817  0217                     	;# 
  8818  0217                     	;# 
  8819  0219                     	;# 
  8820  021A                     	;# 
  8821  021B                     	;# 
  8822  021C                     	;# 
  8823  021D                     	;# 
  8824  021D                     	;# 
  8825  021E                     	;# 
  8826  021F                     	;# 
  8827  028C                     	;# 
  8828  028D                     	;# 
  8829  028E                     	;# 
  8830  0291                     	;# 
  8831  0291                     	;# 
  8832  0292                     	;# 
  8833  0293                     	;# 
  8834  0294                     	;# 
  8835  0295                     	;# 
  8836  0295                     	;# 
  8837  0296                     	;# 
  8838  0297                     	;# 
  8839  0298                     	;# 
  8840  029F                     	;# 
  8841  030C                     	;# 
  8842  030D                     	;# 
  8843  030E                     	;# 
  8844  0311                     	;# 
  8845  0311                     	;# 
  8846  0312                     	;# 
  8847  0313                     	;# 
  8848  0314                     	;# 
  8849  0315                     	;# 
  8850  0315                     	;# 
  8851  0316                     	;# 
  8852  0317                     	;# 
  8853  0318                     	;# 
  8854  038C                     	;# 
  8855  038D                     	;# 
  8856  038E                     	;# 
  8857  0391                     	;# 
  8858  0392                     	;# 
  8859  0393                     	;# 
  8860  0394                     	;# 
  8861  0395                     	;# 
  8862  0396                     	;# 
  8863  0397                     	;# 
  8864  0398                     	;# 
  8865  0399                     	;# 
  8866  039A                     	;# 
  8867  039C                     	;# 
  8868  039D                     	;# 
  8869  039E                     	;# 
  8870  039F                     	;# 
  8871  0411                     	;# 
  8872  0411                     	;# 
  8873  0412                     	;# 
  8874  0413                     	;# 
  8875  0414                     	;# 
  8876  0415                     	;# 
  8877  0416                     	;# 
  8878  0417                     	;# 
  8879  0418                     	;# 
  8880  0418                     	;# 
  8881  0419                     	;# 
  8882  041A                     	;# 
  8883  041B                     	;# 
  8884  041C                     	;# 
  8885  041D                     	;# 
  8886  041E                     	;# 
  8887  041F                     	;# 
  8888  0498                     	;# 
  8889  0498                     	;# 
  8890  0499                     	;# 
  8891  049A                     	;# 
  8892  049B                     	;# 
  8893  049B                     	;# 
  8894  049C                     	;# 
  8895  049D                     	;# 
  8896  049E                     	;# 
  8897  049F                     	;# 
  8898  0617                     	;# 
  8899  0618                     	;# 
  8900  0619                     	;# 
  8901  0619                     	;# 
  8902  061A                     	;# 
  8903  061B                     	;# 
  8904  061C                     	;# 
  8905  061C                     	;# 
  8906  061F                     	;# 
  8907  0691                     	;# 
  8908  0692                     	;# 
  8909  0693                     	;# 
  8910  0694                     	;# 
  8911  0695                     	;# 
  8912  0696                     	;# 
  8913  0697                     	;# 
  8914  0698                     	;# 
  8915  0699                     	;# 
  8916  0711                     	;# 
  8917  0712                     	;# 
  8918  0713                     	;# 
  8919  0714                     	;# 
  8920  0715                     	;# 
  8921  0716                     	;# 
  8922  0717                     	;# 
  8923  0718                     	;# 
  8924  0719                     	;# 
  8925  0891                     	;# 
  8926  0891                     	;# 
  8927  0891                     	;# 
  8928  0891                     	;# 
  8929  0891                     	;# 
  8930  0891                     	;# 
  8931  0892                     	;# 
  8932  0892                     	;# 
  8933  0892                     	;# 
  8934  0893                     	;# 
  8935  0893                     	;# 
  8936  0893                     	;# 
  8937  0893                     	;# 
  8938  0893                     	;# 
  8939  0893                     	;# 
  8940  0894                     	;# 
  8941  0894                     	;# 
  8942  0894                     	;# 
  8943  0895                     	;# 
  8944  0895                     	;# 
  8945  0895                     	;# 
  8946  0896                     	;# 
  8947  0896                     	;# 
  8948  0896                     	;# 
  8949  089B                     	;# 
  8950  0911                     	;# 
  8951  0912                     	;# 
  8952  0913                     	;# 
  8953  0914                     	;# 
  8954  0915                     	;# 
  8955  0916                     	;# 
  8956  0918                     	;# 
  8957  0919                     	;# 
  8958  091A                     	;# 
  8959  091B                     	;# 
  8960  091C                     	;# 
  8961  091D                     	;# 
  8962  091E                     	;# 
  8963  091F                     	;# 
  8964  0E0F                     	;# 
  8965  0E10                     	;# 
  8966  0E11                     	;# 
  8967  0E12                     	;# 
  8968  0E13                     	;# 
  8969  0E14                     	;# 
  8970  0E15                     	;# 
  8971  0E16                     	;# 
  8972  0E17                     	;# 
  8973  0E18                     	;# 
  8974  0E19                     	;# 
  8975  0E1A                     	;# 
  8976  0E1B                     	;# 
  8977  0E1C                     	;# 
  8978  0E1D                     	;# 
  8979  0E1E                     	;# 
  8980  0E1F                     	;# 
  8981  0E20                     	;# 
  8982  0E21                     	;# 
  8983  0E22                     	;# 
  8984  0E24                     	;# 
  8985  0E25                     	;# 
  8986  0E28                     	;# 
  8987  0E29                     	;# 
  8988  0E2A                     	;# 
  8989  0E2B                     	;# 
  8990  0E2C                     	;# 
  8991  0E2D                     	;# 
  8992  0E2E                     	;# 
  8993  0E2F                     	;# 
  8994  0E90                     	;# 
  8995  0E91                     	;# 
  8996  0E92                     	;# 
  8997  0E94                     	;# 
  8998  0E95                     	;# 
  8999  0E9C                     	;# 
  9000  0E9D                     	;# 
  9001  0E9E                     	;# 
  9002  0E9F                     	;# 
  9003  0EA0                     	;# 
  9004  0EA1                     	;# 
  9005  0EA2                     	;# 
  9006  0EA3                     	;# 
  9007  0EA4                     	;# 
  9008  0EA5                     	;# 
  9009  0EA6                     	;# 
  9010  0EA7                     	;# 
  9011  0F0F                     	;# 
  9012  0F10                     	;# 
  9013  0F11                     	;# 
  9014  0F12                     	;# 
  9015  0F13                     	;# 
  9016  0F14                     	;# 
  9017  0F15                     	;# 
  9018  0F16                     	;# 
  9019  0F17                     	;# 
  9020  0F18                     	;# 
  9021  0F19                     	;# 
  9022  0F1A                     	;# 
  9023  0F1B                     	;# 
  9024  0F1C                     	;# 
  9025  0F1D                     	;# 
  9026  0F1E                     	;# 
  9027  0F1F                     	;# 
  9028  0F20                     	;# 
  9029  0F21                     	;# 
  9030  0F22                     	;# 
  9031  0F23                     	;# 
  9032  0F24                     	;# 
  9033  0F25                     	;# 
  9034  0F26                     	;# 
  9035  0F27                     	;# 
  9036  0F28                     	;# 
  9037  0F29                     	;# 
  9038  0F2A                     	;# 
  9039  0F2B                     	;# 
  9040  0F2C                     	;# 
  9041  0F2D                     	;# 
  9042  0F2E                     	;# 
  9043  0F2F                     	;# 
  9044  0F30                     	;# 
  9045  0F31                     	;# 
  9046  0F32                     	;# 
  9047  0F33                     	;# 
  9048  0F34                     	;# 
  9049  0F35                     	;# 
  9050  0F36                     	;# 
  9051  0F37                     	;# 
  9052  0FE4                     	;# 
  9053  0FE5                     	;# 
  9054  0FE6                     	;# 
  9055  0FE7                     	;# 
  9056  0FE8                     	;# 
  9057  0FE9                     	;# 
  9058  0FEA                     	;# 
  9059  0FEB                     	;# 
  9060  0FED                     	;# 
  9061  0FEE                     	;# 
  9062  0FEF                     	;_asciiCharTableLookup
  9063                           
  9064 ;; Function _menu_Exit is unused but had its address taken
  9065  0000                     
  9066 ;; Function _flashy_Exit is unused but had its address taken
  9067  0000                     
  9068 ;; Function _locked_Exit is unused but had its address taken
  9069  0000                     
  9070 ;; Function _secret_Exit is unused but had its address taken
  9071  0000                     
  9072 ;; Function _slot_Exit is unused but had its address taken
  9073  0000                     
  9074 ;; Function _matrix_Exit is unused but had its address taken
  9075  0000                     
  9076                           	psect	idataBANK1
  9077  1000                     __pidataBANK1:	
  9078                           
  9079                           ;initializer for marquee_speedy@F14090
  9080  1000  3420               	retlw	32
  9081  1001  3420               	retlw	32
  9082  1002  3420               	retlw	32
  9083  1003  3420               	retlw	32
  9084  1004  3400               	retlw	0
  9085                           
  9086                           ;initializer for _randx
  9087  1005  3401               	retlw	1
  9088  1006  3400               	retlw	0
  9089  1007  3400               	retlw	0
  9090  1008  3400               	retlw	0
  9091                           
  9092                           ;initializer for _Leds_idx
  9093  1009  3401               	retlw	1
  9094  100A  3400               	retlw	0
  9095                           
  9096                           ;initializer for _locked_lock_base_leds
  9097  100B  341F               	retlw	31
  9098  100C  34F8               	retlw	248
  9099                           
  9100                           ;initializer for _FLASHY_TEXT_SECRET_TEST
  9101  100D  3445               	retlw	low (STR_10| (0+32768))
  9102  100E  34BA               	retlw	high (STR_10| (0+32768))
  9103                           
  9104                           	psect	idataBANK2
  9105  0002                     __pidataBANK2:	
  9106                           
  9107                           ;initializer for _FLASHY_TEXT
  9108  0002  34EA               	retlw	low (STR_9| (0+32768))
  9109  0003  34BB               	retlw	high (STR_9| (0+32768))
  9110                           
  9111                           	psect	idataBANK3
  9112  3418                     __pidataBANK3:	
  9113                           
  9114                           ;initializer for _Shot_Options
  9115  3418  34D1               	retlw	low (STR_46| (0+32768))
  9116  3419  34BB               	retlw	high (STR_46| (0+32768))
  9117  341A  34C7               	retlw	low (STR_47| (0+32768))
  9118  341B  34BB               	retlw	high (STR_47| (0+32768))
  9119  341C  34AE               	retlw	low (STR_48| (0+32768))
  9120  341D  34BB               	retlw	high (STR_48| (0+32768))
  9121  341E  34D6               	retlw	low (STR_49| (0+32768))
  9122  341F  34BB               	retlw	high (STR_49| (0+32768))
  9123  3420  34B3               	retlw	low (STR_50| (0+32768))
  9124  3421  34BB               	retlw	high (STR_50| (0+32768))
  9125  3422  34BD               	retlw	low (STR_51| (0+32768))
  9126  3423  34BB               	retlw	high (STR_51| (0+32768))
  9127  3424  34C2               	retlw	low (STR_52| (0+32768))
  9128  3425  34BB               	retlw	high (STR_52| (0+32768))
  9129  3426  34B8               	retlw	low (STR_53| (0+32768))
  9130  3427  34BB               	retlw	high (STR_53| (0+32768))
  9131  3428  34CC               	retlw	low (STR_54| (0+32768))
  9132  3429  34BB               	retlw	high (STR_54| (0+32768))
  9133                           
  9134                           ;initializer for marquee@F14099
  9135  342A  3420               	retlw	32
  9136  342B  3420               	retlw	32
  9137  342C  3420               	retlw	32
  9138  342D  3420               	retlw	32
  9139  342E  3400               	retlw	0
  9140                           
  9141                           	psect	idataBANK4
  9142  2A80                     __pidataBANK4:	
  9143                           
  9144                           ;initializer for _locked_locking_leds
  9145  2A80  3400               	retlw	0
  9146  2A81  3400               	retlw	0
  9147  2A82  3420               	retlw	32
  9148  2A83  3400               	retlw	0
  9149  2A84  3460               	retlw	96
  9150  2A85  3400               	retlw	0
  9151  2A86  34E0               	retlw	224
  9152  2A87  3400               	retlw	0
  9153  2A88  34E0               	retlw	224
  9154  2A89  3401               	retlw	1
  9155  2A8A  34E0               	retlw	224
  9156  2A8B  3403               	retlw	3
  9157                           
  9158                           ;initializer for _menu_option
  9159  2A8C  34EF               	retlw	low (STR_4| (0+32768))
  9160  2A8D  34BB               	retlw	high (STR_4| (0+32768))
  9161  2A8E  34A3               	retlw	low (STR_5| (0+32768))
  9162  2A8F  34BB               	retlw	high (STR_5| (0+32768))
  9163  2A90  34F7               	retlw	low (STR_6| (0+32768))
  9164  2A91  34BA               	retlw	high (STR_6| (0+32768))
  9165  2A92  3466               	retlw	low (STR_7| (0+32768))
  9166  2A93  34BB               	retlw	high (STR_7| (0+32768))
  9167  2A94  349D               	retlw	low (STR_8| (0+32768))
  9168  2A95  34BB               	retlw	high (STR_8| (0+32768))
  9169                           
  9170                           ;initializer for _secret_inputs
  9171  2A96  3401               	retlw	1
  9172  2A97  3401               	retlw	1
  9173  2A98  3402               	retlw	2
  9174  2A99  3402               	retlw	2
  9175  2A9A  3401               	retlw	1
  9176  2A9B  3402               	retlw	2
  9177  2A9C  3401               	retlw	1
  9178  2A9D  3402               	retlw	2
  9179  2A9E  3404               	retlw	4
  9180  2A9F  3408               	retlw	8
  9181  2AA0  3400               	retlw	0
  9182  2AA1  3400               	retlw	0
  9183  2AA2  3400               	retlw	0
  9184  2AA3  3400               	retlw	0
  9185  2AA4  3400               	retlw	0
  9186  2AA5  3400               	retlw	0
  9187  2AA6  3400               	retlw	0
  9188  2AA7  3400               	retlw	0
  9189  2AA8  3400               	retlw	0
  9190  2AA9  3400               	retlw	0
  9191  2AAA  3400               	retlw	0
  9192  2AAB  3400               	retlw	0
  9193  2AAC  34C5               	retlw	low (_secret_value| 0)
  9194  2AAD  3401               	retlw	1
  9195  2AAE  3400               	retlw	0
  9196                           
  9197                           ;initializer for _locked_secret_inputs
  9198  2AAF  3408               	retlw	8
  9199  2AB0  3402               	retlw	2
  9200  2AB1  3408               	retlw	8
  9201  2AB2  3401               	retlw	1
  9202  2AB3  3400               	retlw	0
  9203  2AB4  3400               	retlw	0
  9204  2AB5  3400               	retlw	0
  9205  2AB6  3400               	retlw	0
  9206  2AB7  3400               	retlw	0
  9207  2AB8  3400               	retlw	0
  9208  2AB9  3400               	retlw	0
  9209  2ABA  3400               	retlw	0
  9210  2ABB  3400               	retlw	0
  9211  2ABC  3400               	retlw	0
  9212  2ABD  3400               	retlw	0
  9213  2ABE  3400               	retlw	0
  9214  2ABF  3400               	retlw	0
  9215  2AC0  3400               	retlw	0
  9216  2AC1  3400               	retlw	0
  9217  2AC2  3400               	retlw	0
  9218  2AC3  3400               	retlw	0
  9219  2AC4  3400               	retlw	0
  9220  2AC5  3469               	retlw	low (_locked_secret_value| (0+256))
  9221  2AC6  3401               	retlw	1
  9222  2AC7  3400               	retlw	0
  9223                           
  9224                           	psect	idataBANK5
  9225  3530                     __pidataBANK5:	
  9226                           
  9227                           ;initializer for _menu_options_leds
  9228  3530  3400               	retlw	0
  9229  3531  3402               	retlw	2
  9230  3532  3400               	retlw	0
  9231  3533  3401               	retlw	1
  9232  3534  3480               	retlw	128
  9233  3535  3400               	retlw	0
  9234  3536  3440               	retlw	64
  9235  3537  3400               	retlw	0
  9236  3538  3420               	retlw	32
  9237  3539  3400               	retlw	0
  9238                           
  9239                           ;initializer for _matrix_secret_inputs
  9240  353A  3401               	retlw	1
  9241  353B  3408               	retlw	8
  9242  353C  3402               	retlw	2
  9243  353D  3404               	retlw	4
  9244  353E  3405               	retlw	5
  9245  353F  3409               	retlw	9
  9246  3540  3403               	retlw	3
  9247  3541  3400               	retlw	0
  9248  3542  3400               	retlw	0
  9249  3543  3400               	retlw	0
  9250  3544  3400               	retlw	0
  9251  3545  3400               	retlw	0
  9252  3546  3400               	retlw	0
  9253  3547  3400               	retlw	0
  9254  3548  3400               	retlw	0
  9255  3549  3400               	retlw	0
  9256  354A  3400               	retlw	0
  9257  354B  3400               	retlw	0
  9258  354C  3400               	retlw	0
  9259  354D  3400               	retlw	0
  9260  354E  3400               	retlw	0
  9261  354F  3400               	retlw	0
  9262  3550  34C5               	retlw	low (_secret_value| 0)
  9263  3551  3401               	retlw	1
  9264  3552  3400               	retlw	0
  9265                           
  9266                           	psect	idataBANK6
  9267  2AC8                     __pidataBANK6:	
  9268                           
  9269                           ;initializer for _Shot_Options_Long
  9270  2AC8  344E               	retlw	low (STR_55| (0+32768))
  9271  2AC9  34BB               	retlw	high (STR_55| (0+32768))
  9272  2ACA  3446               	retlw	low (STR_56| (0+32768))
  9273  2ACB  34BB               	retlw	high (STR_56| (0+32768))
  9274  2ACC  340A               	retlw	low (STR_57| (0+32768))
  9275  2ACD  34BB               	retlw	high (STR_57| (0+32768))
  9276  2ACE  34E2               	retlw	low (STR_58| (0+32768))
  9277  2ACF  34BA               	retlw	high (STR_58| (0+32768))
  9278  2AD0  34D7               	retlw	low (STR_59| (0+32768))
  9279  2AD1  34BA               	retlw	high (STR_59| (0+32768))
  9280  2AD2  343E               	retlw	low (STR_60| (0+32768))
  9281  2AD3  34BB               	retlw	high (STR_60| (0+32768))
  9282  2AD4  34BF               	retlw	low (STR_61| (0+32768))
  9283  2AD5  34BA               	retlw	high (STR_61| (0+32768))
  9284  2AD6  3498               	retlw	low (STR_62| (0+32768))
  9285  2AD7  34BA               	retlw	high (STR_62| (0+32768))
  9286  2AD8  3413               	retlw	low (STR_63| (0+32768))
  9287  2AD9  34BB               	retlw	high (STR_63| (0+32768))
  9288                           
  9289                           ;initializer for _Slot_Wheel
  9290  2ADA  3441               	retlw	65
  9291  2ADB  3442               	retlw	66
  9292  2ADC  3443               	retlw	67
  9293  2ADD  3444               	retlw	68
  9294  2ADE  3445               	retlw	69
  9295  2ADF  3446               	retlw	70
  9296  2AE0  3447               	retlw	71
  9297  2AE1  3448               	retlw	72
  9298  2AE2  3449               	retlw	73
  9299  2AE3  344A               	retlw	74
  9300  2AE4  344B               	retlw	75
  9301  2AE5  344C               	retlw	76
  9302  2AE6  344D               	retlw	77
  9303  2AE7  344E               	retlw	78
  9304  2AE8  344F               	retlw	79
  9305  2AE9  3450               	retlw	80
  9306  2AEA  3451               	retlw	81
  9307  2AEB  3452               	retlw	82
  9308  2AEC  3453               	retlw	83
  9309  2AED  3454               	retlw	84
  9310  2AEE  3455               	retlw	85
  9311  2AEF  3456               	retlw	86
  9312  2AF0  3457               	retlw	87
  9313  2AF1  3458               	retlw	88
  9314  2AF2  3459               	retlw	89
  9315  2AF3  345A               	retlw	90
  9316  2AF4  3430               	retlw	48
  9317  2AF5  3431               	retlw	49
  9318  2AF6  3432               	retlw	50
  9319  2AF7  3433               	retlw	51
  9320  2AF8  3434               	retlw	52
  9321  2AF9  3435               	retlw	53
  9322  2AFA  3436               	retlw	54
  9323  2AFB  3437               	retlw	55
  9324  2AFC  3438               	retlw	56
  9325  2AFD  3439               	retlw	57
  9326  2AFE  343C               	retlw	60
  9327  2AFF  343E               	retlw	62
  9328  2B00  3421               	retlw	33
  9329  2B01  3424               	retlw	36
  9330  2B02  3425               	retlw	37
  9331  2B03  3426               	retlw	38
  9332  2B04  342D               	retlw	45
  9333  2B05  3423               	retlw	35
  9334  2B06  342A               	retlw	42
  9335  2B07  342B               	retlw	43
  9336  2B08  342D               	retlw	45
  9337  2B09  342E               	retlw	46
  9338  2B0A  3440               	retlw	64
  9339  2B0B  343B               	retlw	59
  9340  2B0C  343A               	retlw	58
  9341  2B0D  3427               	retlw	39
  9342  2B0E  3422               	retlw	34
  9343  2B0F  342F               	retlw	47
  9344  2B10  345C               	retlw	92
  9345                           
  9346                           	psect	idataBANK7
  9347  2B5B                     __pidataBANK7:	
  9348                           
  9349                           ;initializer for _roundabout_leds_inverse
  9350  2B5B  3480               	retlw	128
  9351  2B5C  3400               	retlw	0
  9352  2B5D  3440               	retlw	64
  9353  2B5E  3400               	retlw	0
  9354  2B5F  3420               	retlw	32
  9355  2B60  3400               	retlw	0
  9356  2B61  3410               	retlw	16
  9357  2B62  3400               	retlw	0
  9358  2B63  3408               	retlw	8
  9359  2B64  3400               	retlw	0
  9360  2B65  3404               	retlw	4
  9361  2B66  3400               	retlw	0
  9362  2B67  3402               	retlw	2
  9363  2B68  3400               	retlw	0
  9364  2B69  3401               	retlw	1
  9365  2B6A  3400               	retlw	0
  9366  2B6B  3402               	retlw	2
  9367  2B6C  3400               	retlw	0
  9368  2B6D  3404               	retlw	4
  9369  2B6E  3400               	retlw	0
  9370  2B6F  3408               	retlw	8
  9371  2B70  3400               	retlw	0
  9372  2B71  3410               	retlw	16
  9373  2B72  3400               	retlw	0
  9374  2B73  3420               	retlw	32
  9375  2B74  3400               	retlw	0
  9376  2B75  3440               	retlw	64
  9377  2B76  3400               	retlw	0
  9378                           
  9379                           ;initializer for _roundabout_leds
  9380  2B77  3480               	retlw	128
  9381  2B78  3400               	retlw	0
  9382  2B79  3400               	retlw	0
  9383  2B7A  3401               	retlw	1
  9384  2B7B  3400               	retlw	0
  9385  2B7C  3402               	retlw	2
  9386  2B7D  3400               	retlw	0
  9387  2B7E  3408               	retlw	8
  9388  2B7F  3400               	retlw	0
  9389  2B80  3410               	retlw	16
  9390  2B81  3400               	retlw	0
  9391  2B82  3420               	retlw	32
  9392  2B83  3400               	retlw	0
  9393  2B84  3440               	retlw	64
  9394  2B85  3400               	retlw	0
  9395  2B86  3480               	retlw	128
  9396  2B87  3400               	retlw	0
  9397  2B88  3440               	retlw	64
  9398  2B89  3400               	retlw	0
  9399  2B8A  3420               	retlw	32
  9400  2B8B  3400               	retlw	0
  9401  2B8C  3410               	retlw	16
  9402  2B8D  3400               	retlw	0
  9403  2B8E  3408               	retlw	8
  9404  2B8F  3400               	retlw	0
  9405  2B90  3402               	retlw	2
  9406  2B91  3400               	retlw	0
  9407  2B92  3401               	retlw	1
  9408                           
  9409                           ;initializer for _matrix_option
  9410  2B93  348A               	retlw	low (STR_70| (0+32768))
  9411  2B94  34BB               	retlw	high (STR_70| (0+32768))
  9412  2B95  3475               	retlw	low (STR_71| (0+32768))
  9413  2B96  34BB               	retlw	high (STR_71| (0+32768))
  9414  2B97  3401               	retlw	low (STR_72| (0+32768))
  9415  2B98  34BB               	retlw	high (STR_72| (0+32768))
  9416  2B99  347C               	retlw	low (STR_73| (0+32768))
  9417  2B9A  34BB               	retlw	high (STR_73| (0+32768))
  9418  2B9B  34A9               	retlw	low (STR_74| (0+32768))
  9419  2B9C  34BB               	retlw	high (STR_74| (0+32768))
  9420  2B9D  34ED               	retlw	low (STR_75| (0+32768))
  9421  2B9E  34BA               	retlw	high (STR_75| (0+32768))
  9422  2B9F  3491               	retlw	low (STR_76| (0+32768))
  9423  2BA0  34BB               	retlw	high (STR_76| (0+32768))
  9424  2BA1  342E               	retlw	low (STR_77| (0+32768))
  9425  2BA2  34BB               	retlw	high (STR_77| (0+32768))
  9426  2BA3  3483               	retlw	low (STR_78| (0+32768))
  9427  2BA4  34BB               	retlw	high (STR_78| (0+32768))
  9428  2BA5  3436               	retlw	low (STR_79| (0+32768))
  9429  2BA6  34BB               	retlw	high (STR_79| (0+32768))
  9430                           
  9431                           	psect	idataBANK8
  9432  3714                     __pidataBANK8:	
  9433                           
  9434                           ;initializer for _curtain_leds_inverse
  9435  3714  3480               	retlw	128
  9436  3715  3400               	retlw	0
  9437  3716  34C0               	retlw	192
  9438  3717  3400               	retlw	0
  9439  3718  34E0               	retlw	224
  9440  3719  3400               	retlw	0
  9441  371A  34F0               	retlw	240
  9442  371B  3400               	retlw	0
  9443  371C  34F8               	retlw	248
  9444  371D  3400               	retlw	0
  9445  371E  34FC               	retlw	252
  9446  371F  3400               	retlw	0
  9447  3720  34FE               	retlw	254
  9448  3721  3400               	retlw	0
  9449  3722  34FF               	retlw	255
  9450  3723  3400               	retlw	0
  9451  3724  34FE               	retlw	254
  9452  3725  3400               	retlw	0
  9453  3726  34FC               	retlw	252
  9454  3727  3400               	retlw	0
  9455  3728  34F8               	retlw	248
  9456  3729  3400               	retlw	0
  9457  372A  34F0               	retlw	240
  9458  372B  3400               	retlw	0
  9459  372C  34E0               	retlw	224
  9460  372D  3400               	retlw	0
  9461  372E  34C0               	retlw	192
  9462  372F  3400               	retlw	0
  9463                           
  9464                           ;initializer for _curtain_leds
  9465  3730  3480               	retlw	128
  9466  3731  3400               	retlw	0
  9467  3732  3480               	retlw	128
  9468  3733  3401               	retlw	1
  9469  3734  3480               	retlw	128
  9470  3735  3403               	retlw	3
  9471  3736  3480               	retlw	128
  9472  3737  340B               	retlw	11
  9473  3738  3480               	retlw	128
  9474  3739  341B               	retlw	27
  9475  373A  3480               	retlw	128
  9476  373B  343B               	retlw	59
  9477  373C  3480               	retlw	128
  9478  373D  347B               	retlw	123
  9479  373E  3480               	retlw	128
  9480  373F  34FB               	retlw	251
  9481  3740  3480               	retlw	128
  9482  3741  347B               	retlw	123
  9483  3742  3480               	retlw	128
  9484  3743  343B               	retlw	59
  9485  3744  3480               	retlw	128
  9486  3745  341B               	retlw	27
  9487  3746  3480               	retlw	128
  9488  3747  340B               	retlw	11
  9489  3748  3480               	retlw	128
  9490  3749  3403               	retlw	3
  9491  374A  3480               	retlw	128
  9492  374B  3401               	retlw	1
  9493                           
  9494                           	psect	idataBANK10
  9495  3785                     __pidataBANK10:	
  9496                           
  9497                           ;initializer for _flashy_option
  9498  3785  34EA               	retlw	low (STR_9| (0+32768))
  9499  3786  34BB               	retlw	high (STR_9| (0+32768))
  9500  3787  3425               	retlw	low (STR_12| (0+32768))
  9501  3788  34BB               	retlw	high (STR_12| (0+32768))
  9502  3789  345E               	retlw	low (STR_13| (0+32768))
  9503  378A  34BB               	retlw	high (STR_13| (0+32768))
  9504  378B  3497               	retlw	low (STR_14| (0+32768))
  9505  378C  34BB               	retlw	high (STR_14| (0+32768))
  9506  378D  3432               	retlw	low (STR_15| (0+32768))
  9507  378E  34BA               	retlw	high (STR_15| (0+32768))
  9508  378F  340A               	retlw	low (STR_16| (0+32768))
  9509  3790  34BA               	retlw	high (STR_16| (0+32768))
  9510  3791  34C3               	retlw	low (STR_17| (0+32768))
  9511  3792  34B9               	retlw	high (STR_17| (0+32768))
  9512  3793  3456               	retlw	low (STR_18| (0+32768))
  9513  3794  34BB               	retlw	high (STR_18| (0+32768))
  9514  3795  34F4               	retlw	low (STR_19| (0+32768))
  9515  3796  34B9               	retlw	high (STR_19| (0+32768))
  9516  3797  3471               	retlw	low (STR_20| (0+32768))
  9517  3798  34B9               	retlw	high (STR_20| (0+32768))
  9518  3799  34B0               	retlw	low (STR_21| (0+32768))
  9519  379A  34B8               	retlw	high (STR_21| (0+32768))
  9520  379B  3419               	retlw	low (STR_22| (0+32768))
  9521  379C  34B9               	retlw	high (STR_22| (0+32768))
  9522  379D  3454               	retlw	low (STR_23| (0+32768))
  9523  379E  34B9               	retlw	high (STR_23| (0+32768))
  9524  379F  34A8               	retlw	low (STR_24| (0+32768))
  9525  37A0  34B9               	retlw	high (STR_24| (0+32768))
  9526  37A1  3488               	retlw	low (STR_25| (0+32768))
  9527  37A2  34B8               	retlw	high (STR_25| (0+32768))
  9528  37A3  3457               	retlw	low (STR_26| (0+32768))
  9529  37A4  34BA               	retlw	high (STR_26| (0+32768))
  9530  37A5  341F               	retlw	low (STR_27| (0+32768))
  9531  37A6  34BA               	retlw	high (STR_27| (0+32768))
  9532  37A7  3437               	retlw	low (STR_28| (0+32768))
  9533  37A8  34B9               	retlw	high (STR_28| (0+32768))
  9534  37A9  34CB               	retlw	low (STR_29| (0+32768))
  9535  37AA  34BA               	retlw	high (STR_29| (0+32768))
  9536  37AB  3489               	retlw	low (STR_30| (0+32768))
  9537  37AC  34BA               	retlw	high (STR_30| (0+32768))
  9538  37AD  34D4               	retlw	low (STR_31| (0+32768))
  9539  37AE  34B8               	retlw	high (STR_31| (0+32768))
  9540  37AF  3479               	retlw	low (STR_32| (0+32768))
  9541  37B0  34BA               	retlw	high (STR_32| (0+32768))
  9542  37B1  34F7               	retlw	low (STR_33| (0+32768))
  9543  37B2  34B8               	retlw	high (STR_33| (0+32768))
  9544  37B3  340A               	retlw	low (STR_34| (0+32768))
  9545  37B4  34A8               	retlw	high (STR_34| (0+32768))
  9546  37B5  3468               	retlw	low (STR_35| (0+32768))
  9547  37B6  34BA               	retlw	high (STR_35| (0+32768))
  9548  37B7  3400               	retlw	low (STR_36| (0+32768))
  9549  37B8  34B8               	retlw	high (STR_36| (0+32768))
  9550  37B9  34B2               	retlw	low (STR_37| (0+32768))
  9551  37BA  34BA               	retlw	high (STR_37| (0+32768))
  9552  37BB  345D               	retlw	low (STR_38| (0+32768))
  9553  37BC  34B8               	retlw	high (STR_38| (0+32768))
  9554  37BD  347D               	retlw	low ((STR_34+115)| (0+32768))
  9555  37BE  34A8               	retlw	high ((STR_34+115)| (0+32768))
  9556                           
  9557                           	psect	idataBIGRAM
  9558  2700                     __pidataBIGRAM:	
  9559                           
  9560                           ;initializer for _asciiCharTableLookup
  9561  2700  3400               	retlw	0
  9562  2701  3400               	retlw	0
  9563  2702  3400               	retlw	0
  9564  2703  3420               	retlw	32
  9565  2704  3410               	retlw	16
  9566  2705  3410               	retlw	16
  9567  2706  3420               	retlw	32
  9568  2707  3400               	retlw	0
  9569  2708  3410               	retlw	16
  9570  2709  3410               	retlw	16
  9571  270A  34A5               	retlw	165
  9572  270B  3421               	retlw	33
  9573  270C  34A5               	retlw	165
  9574  270D  3460               	retlw	96
  9575  270E  3410               	retlw	16
  9576  270F  3430               	retlw	48
  9577  2710  3400               	retlw	0
  9578  2711  3412               	retlw	18
  9579  2712  3410               	retlw	16
  9580  2713  3408               	retlw	8
  9581  2714  3420               	retlw	32
  9582  2715  3420               	retlw	32
  9583  2716  3485               	retlw	133
  9584  2717  3445               	retlw	69
  9585  2718  34B1               	retlw	177
  9586  2719  3430               	retlw	48
  9587  271A  3410               	retlw	16
  9588  271B  3410               	retlw	16
  9589  271C  3410               	retlw	16
  9590  271D  3410               	retlw	16
  9591  271E  3410               	retlw	16
  9592  271F  3410               	retlw	16
  9593  2720  3410               	retlw	16
  9594  2721  3410               	retlw	16
  9595  2722  3410               	retlw	16
  9596  2723  3410               	retlw	16
  9597  2724  3410               	retlw	16
  9598  2725  3410               	retlw	16
  9599  2726  3410               	retlw	16
  9600  2727  3410               	retlw	16
  9601  2728  3410               	retlw	16
  9602  2729  3410               	retlw	16
  9603  272A  3410               	retlw	16
  9604  272B  3410               	retlw	16
  9605  272C  3410               	retlw	16
  9606  272D  3410               	retlw	16
  9607  272E  3410               	retlw	16
  9608  272F  3410               	retlw	16
  9609  2730  3410               	retlw	16
  9610  2731  3410               	retlw	16
  9611  2732  3410               	retlw	16
  9612  2733  3410               	retlw	16
  9613  2734  3410               	retlw	16
  9614  2735  3410               	retlw	16
  9615  2736  3410               	retlw	16
  9616  2737  3410               	retlw	16
  9617  2738  3410               	retlw	16
  9618  2739  3410               	retlw	16
  9619  273A  3410               	retlw	16
  9620  273B  3410               	retlw	16
  9621  273C  3410               	retlw	16
  9622  273D  3410               	retlw	16
  9623  273E  3410               	retlw	16
  9624  273F  3410               	retlw	16
  9625  2740  3400               	retlw	0
  9626  2741  3400               	retlw	0
  9627  2742  34C0               	retlw	192
  9628  2743  3440               	retlw	64
  9629  2744  3400               	retlw	0
  9630  2745  3444               	retlw	68
  9631  2746  3410               	retlw	16
  9632  2747  3410               	retlw	16
  9633  2748  34B4               	retlw	180
  9634  2749  3435               	retlw	53
  9635  274A  3410               	retlw	16
  9636  274B  3410               	retlw	16
  9637  274C  3410               	retlw	16
  9638  274D  3410               	retlw	16
  9639  274E  3400               	retlw	0
  9640  274F  3404               	retlw	4
  9641  2750  3408               	retlw	8
  9642  2751  3408               	retlw	8
  9643  2752  3402               	retlw	2
  9644  2753  3402               	retlw	2
  9645  2754  341E               	retlw	30
  9646  2755  341E               	retlw	30
  9647  2756  3414               	retlw	20
  9648  2757  3414               	retlw	20
  9649  2758  3440               	retlw	64
  9650  2759  3400               	retlw	0
  9651  275A  3410               	retlw	16
  9652  275B  3410               	retlw	16
  9653  275C  3440               	retlw	64
  9654  275D  3400               	retlw	0
  9655  275E  3402               	retlw	2
  9656  275F  3408               	retlw	8
  9657  2760  34A9               	retlw	169
  9658  2761  3463               	retlw	99
  9659  2762  3480               	retlw	128
  9660  2763  3440               	retlw	64
  9661  2764  3431               	retlw	49
  9662  2765  3470               	retlw	112
  9663  2766  34B0               	retlw	176
  9664  2767  3460               	retlw	96
  9665  2768  3490               	retlw	144
  9666  2769  3451               	retlw	81
  9667  276A  34B0               	retlw	176
  9668  276B  3431               	retlw	49
  9669  276C  34B1               	retlw	177
  9670  276D  3431               	retlw	49
  9671  276E  3480               	retlw	128
  9672  276F  3460               	retlw	96
  9673  2770  34B1               	retlw	177
  9674  2771  3471               	retlw	113
  9675  2772  3490               	retlw	144
  9676  2773  3471               	retlw	113
  9677  2774  3410               	retlw	16
  9678  2775  3410               	retlw	16
  9679  2776  3410               	retlw	16
  9680  2777  3410               	retlw	16
  9681  2778  3408               	retlw	8
  9682  2779  3408               	retlw	8
  9683  277A  3430               	retlw	48
  9684  277B  3410               	retlw	16
  9685  277C  3402               	retlw	2
  9686  277D  3402               	retlw	2
  9687  277E  3414               	retlw	20
  9688  277F  34E1               	retlw	225
  9689  2780  34A5               	retlw	165
  9690  2781  3470               	retlw	112
  9691  2782  3491               	retlw	145
  9692  2783  3471               	retlw	113
  9693  2784  34B1               	retlw	177
  9694  2785  3411               	retlw	17
  9695  2786  3421               	retlw	33
  9696  2787  3421               	retlw	33
  9697  2788  34B1               	retlw	177
  9698  2789  3450               	retlw	80
  9699  278A  3421               	retlw	33
  9700  278B  3431               	retlw	49
  9701  278C  3401               	retlw	1
  9702  278D  3431               	retlw	49
  9703  278E  34B1               	retlw	177
  9704  278F  3421               	retlw	33
  9705  2790  3491               	retlw	145
  9706  2791  3451               	retlw	81
  9707  2792  3424               	retlw	36
  9708  2793  3424               	retlw	36
  9709  2794  34A1               	retlw	161
  9710  2795  3440               	retlw	64
  9711  2796  3409               	retlw	9
  9712  2797  3419               	retlw	25
  9713  2798  3421               	retlw	33
  9714  2799  3401               	retlw	1
  9715  279A  3481               	retlw	129
  9716  279B  344B               	retlw	75
  9717  279C  3489               	retlw	137
  9718  279D  3443               	retlw	67
  9719  279E  34A1               	retlw	161
  9720  279F  3461               	retlw	97
  9721  27A0  3411               	retlw	17
  9722  27A1  3471               	retlw	113
  9723  27A2  34A9               	retlw	169
  9724  27A3  3461               	retlw	97
  9725  27A4  3419               	retlw	25
  9726  27A5  3471               	retlw	113
  9727  27A6  34B0               	retlw	176
  9728  27A7  3431               	retlw	49
  9729  27A8  3404               	retlw	4
  9730  27A9  3424               	retlw	36
  9731  27AA  34A1               	retlw	161
  9732  27AB  3441               	retlw	65
  9733  27AC  3403               	retlw	3
  9734  27AD  3409               	retlw	9
  9735  27AE  348B               	retlw	139
  9736  27AF  3441               	retlw	65
  9737  27B0  340A               	retlw	10
  9738  27B1  340A               	retlw	10
  9739  27B2  3404               	retlw	4
  9740  27B3  340A               	retlw	10
  9741  27B4  3422               	retlw	34
  9742  27B5  3428               	retlw	40
  9743  27B6  3421               	retlw	33
  9744  27B7  3421               	retlw	33
  9745  27B8  3408               	retlw	8
  9746  27B9  3402               	retlw	2
  9747  27BA  340A               	retlw	10
  9748  27BB  3400               	retlw	0
  9749  27BC  3420               	retlw	32
  9750  27BD  3400               	retlw	0
  9751  27BE  3410               	retlw	16
  9752  27BF  3410               	retlw	16
  9753  27C0  3491               	retlw	145
  9754  27C1  3471               	retlw	113
  9755  27C2  34B1               	retlw	177
  9756  27C3  3411               	retlw	17
  9757  27C4  3431               	retlw	49
  9758  27C5  3410               	retlw	16
  9759  27C6  34B1               	retlw	177
  9760  27C7  3450               	retlw	80
  9761  27C8  3421               	retlw	33
  9762  27C9  3431               	retlw	49
  9763  27CA  3401               	retlw	1
  9764  27CB  3431               	retlw	49
  9765  27CC  34B1               	retlw	177
  9766  27CD  3421               	retlw	33
  9767  27CE  3491               	retlw	145
  9768  27CF  3451               	retlw	81
  9769  27D0  3424               	retlw	36
  9770  27D1  3424               	retlw	36
  9771  27D2  34A1               	retlw	161
  9772  27D3  3440               	retlw	64
  9773  27D4  3409               	retlw	9
  9774  27D5  3419               	retlw	25
  9775  27D6  3421               	retlw	33
  9776  27D7  3401               	retlw	1
  9777  27D8  3481               	retlw	129
  9778  27D9  344B               	retlw	75
  9779  27DA  3489               	retlw	137
  9780  27DB  3443               	retlw	67
  9781  27DC  34A1               	retlw	161
  9782  27DD  3461               	retlw	97
  9783  27DE  3411               	retlw	17
  9784  27DF  3471               	retlw	113
  9785  27E0  34A9               	retlw	169
  9786  27E1  3461               	retlw	97
  9787  27E2  3419               	retlw	25
  9788  27E3  3471               	retlw	113
  9789  27E4  34B0               	retlw	176
  9790  27E5  3431               	retlw	49
  9791  27E6  3404               	retlw	4
  9792  27E7  3424               	retlw	36
  9793  27E8  34A1               	retlw	161
  9794  27E9  3441               	retlw	65
  9795  27EA  3403               	retlw	3
  9796  27EB  3409               	retlw	9
  9797  27EC  348B               	retlw	139
  9798  27ED  3441               	retlw	65
  9799  27EE  340A               	retlw	10
  9800  27EF  340A               	retlw	10
  9801  27F0  3404               	retlw	4
  9802  27F1  340A               	retlw	10
  9803  27F2  3422               	retlw	34
  9804  27F3  3428               	retlw	40
  9805  27F4  3408               	retlw	8
  9806  27F5  3408               	retlw	8
  9807  27F6  3404               	retlw	4
  9808  27F7  3404               	retlw	4
  9809  27F8  3402               	retlw	2
  9810  27F9  3402               	retlw	2
  9811  27FA  3410               	retlw	16
  9812  27FB  3410               	retlw	16
  9813  27FC  34FF               	retlw	255
  9814  27FD  34FF               	retlw	255
  9815  27FE  3400               	retlw	0
  9816  27FF  3400               	retlw	0
  9817                           
  9818                           	psect	stringtext1
  9819  2000                     __pstringtext1:	
  9820  2000                     _gamma_table_256x1k:	
  9821  2000  3400               	retlw	0
  9822  2001  3400               	retlw	0
  9823  2002  3400               	retlw	0
  9824  2003  3400               	retlw	0
  9825  2004  3400               	retlw	0
  9826  2005  3400               	retlw	0
  9827  2006  3400               	retlw	0
  9828  2007  3400               	retlw	0
  9829  2008  3400               	retlw	0
  9830  2009  3400               	retlw	0
  9831  200A  3400               	retlw	0
  9832  200B  3400               	retlw	0
  9833  200C  3400               	retlw	0
  9834  200D  3400               	retlw	0
  9835  200E  3400               	retlw	0
  9836  200F  3400               	retlw	0
  9837  2010  3400               	retlw	0
  9838  2011  3400               	retlw	0
  9839  2012  3400               	retlw	0
  9840  2013  3400               	retlw	0
  9841  2014  3400               	retlw	0
  9842  2015  3400               	retlw	0
  9843  2016  3400               	retlw	0
  9844  2017  3400               	retlw	0
  9845  2018  3400               	retlw	0
  9846  2019  3400               	retlw	0
  9847  201A  3400               	retlw	0
  9848  201B  3400               	retlw	0
  9849  201C  3400               	retlw	0
  9850  201D  3400               	retlw	0
  9851  201E  3401               	retlw	1
  9852  201F  3400               	retlw	0
  9853  2020  3401               	retlw	1
  9854  2021  3400               	retlw	0
  9855  2022  3401               	retlw	1
  9856  2023  3400               	retlw	0
  9857  2024  3401               	retlw	1
  9858  2025  3400               	retlw	0
  9859  2026  3401               	retlw	1
  9860  2027  3400               	retlw	0
  9861  2028  3401               	retlw	1
  9862  2029  3400               	retlw	0
  9863  202A  3402               	retlw	2
  9864  202B  3400               	retlw	0
  9865  202C  3402               	retlw	2
  9866  202D  3400               	retlw	0
  9867  202E  3402               	retlw	2
  9868  202F  3400               	retlw	0
  9869  2030  3403               	retlw	3
  9870  2031  3400               	retlw	0
  9871  2032  3403               	retlw	3
  9872  2033  3400               	retlw	0
  9873  2034  3403               	retlw	3
  9874  2035  3400               	retlw	0
  9875  2036  3404               	retlw	4
  9876  2037  3400               	retlw	0
  9877  2038  3404               	retlw	4
  9878  2039  3400               	retlw	0
  9879  203A  3404               	retlw	4
  9880  203B  3400               	retlw	0
  9881  203C  3405               	retlw	5
  9882  203D  3400               	retlw	0
  9883  203E  3405               	retlw	5
  9884  203F  3400               	retlw	0
  9885  2040  3406               	retlw	6
  9886  2041  3400               	retlw	0
  9887  2042  3406               	retlw	6
  9888  2043  3400               	retlw	0
  9889  2044  3407               	retlw	7
  9890  2045  3400               	retlw	0
  9891  2046  3407               	retlw	7
  9892  2047  3400               	retlw	0
  9893  2048  3408               	retlw	8
  9894  2049  3400               	retlw	0
  9895  204A  3408               	retlw	8
  9896  204B  3400               	retlw	0
  9897  204C  3409               	retlw	9
  9898  204D  3400               	retlw	0
  9899  204E  3409               	retlw	9
  9900  204F  3400               	retlw	0
  9901  2050  340A               	retlw	10
  9902  2051  3400               	retlw	0
  9903  2052  340B               	retlw	11
  9904  2053  3400               	retlw	0
  9905  2054  340B               	retlw	11
  9906  2055  3400               	retlw	0
  9907  2056  340C               	retlw	12
  9908  2057  3400               	retlw	0
  9909  2058  340D               	retlw	13
  9910  2059  3400               	retlw	0
  9911  205A  340E               	retlw	14
  9912  205B  3400               	retlw	0
  9913  205C  340E               	retlw	14
  9914  205D  3400               	retlw	0
  9915  205E  340F               	retlw	15
  9916  205F  3400               	retlw	0
  9917  2060  3410               	retlw	16
  9918  2061  3400               	retlw	0
  9919  2062  3411               	retlw	17
  9920  2063  3400               	retlw	0
  9921  2064  3412               	retlw	18
  9922  2065  3400               	retlw	0
  9923  2066  3413               	retlw	19
  9924  2067  3400               	retlw	0
  9925  2068  3413               	retlw	19
  9926  2069  3400               	retlw	0
  9927  206A  3414               	retlw	20
  9928  206B  3400               	retlw	0
  9929  206C  3415               	retlw	21
  9930  206D  3400               	retlw	0
  9931  206E  3416               	retlw	22
  9932  206F  3400               	retlw	0
  9933  2070  3417               	retlw	23
  9934  2071  3400               	retlw	0
  9935  2072  3419               	retlw	25
  9936  2073  3400               	retlw	0
  9937  2074  341A               	retlw	26
  9938  2075  3400               	retlw	0
  9939  2076  341B               	retlw	27
  9940  2077  3400               	retlw	0
  9941  2078  341C               	retlw	28
  9942  2079  3400               	retlw	0
  9943  207A  341D               	retlw	29
  9944  207B  3400               	retlw	0
  9945  207C  341E               	retlw	30
  9946  207D  3400               	retlw	0
  9947  207E  3420               	retlw	32
  9948  207F  3400               	retlw	0
  9949  2080  3421               	retlw	33
  9950  2081  3400               	retlw	0
  9951  2082  3422               	retlw	34
  9952  2083  3400               	retlw	0
  9953  2084  3423               	retlw	35
  9954  2085  3400               	retlw	0
  9955  2086  3425               	retlw	37
  9956  2087  3400               	retlw	0
  9957  2088  3426               	retlw	38
  9958  2089  3400               	retlw	0
  9959  208A  3428               	retlw	40
  9960  208B  3400               	retlw	0
  9961  208C  3429               	retlw	41
  9962  208D  3400               	retlw	0
  9963  208E  342A               	retlw	42
  9964  208F  3400               	retlw	0
  9965  2090  342C               	retlw	44
  9966  2091  3400               	retlw	0
  9967  2092  342E               	retlw	46
  9968  2093  3400               	retlw	0
  9969  2094  342F               	retlw	47
  9970  2095  3400               	retlw	0
  9971  2096  3431               	retlw	49
  9972  2097  3400               	retlw	0
  9973  2098  3432               	retlw	50
  9974  2099  3400               	retlw	0
  9975  209A  3434               	retlw	52
  9976  209B  3400               	retlw	0
  9977  209C  3436               	retlw	54
  9978  209D  3400               	retlw	0
  9979  209E  3437               	retlw	55
  9980  209F  3400               	retlw	0
  9981  20A0  3439               	retlw	57
  9982  20A1  3400               	retlw	0
  9983  20A2  343B               	retlw	59
  9984  20A3  3400               	retlw	0
  9985  20A4  343D               	retlw	61
  9986  20A5  3400               	retlw	0
  9987  20A6  343F               	retlw	63
  9988  20A7  3400               	retlw	0
  9989  20A8  3441               	retlw	65
  9990  20A9  3400               	retlw	0
  9991  20AA  3442               	retlw	66
  9992  20AB  3400               	retlw	0
  9993  20AC  3444               	retlw	68
  9994  20AD  3400               	retlw	0
  9995  20AE  3446               	retlw	70
  9996  20AF  3400               	retlw	0
  9997  20B0  3448               	retlw	72
  9998  20B1  3400               	retlw	0
  9999  20B2  344B               	retlw	75
 10000  20B3  3400               	retlw	0
 10001  20B4  344D               	retlw	77
 10002  20B5  3400               	retlw	0
 10003  20B6  344F               	retlw	79
 10004  20B7  3400               	retlw	0
 10005  20B8  3451               	retlw	81
 10006  20B9  3400               	retlw	0
 10007  20BA  3453               	retlw	83
 10008  20BB  3400               	retlw	0
 10009  20BC  3455               	retlw	85
 10010  20BD  3400               	retlw	0
 10011  20BE  3458               	retlw	88
 10012  20BF  3400               	retlw	0
 10013  20C0  345A               	retlw	90
 10014  20C1  3400               	retlw	0
 10015  20C2  345C               	retlw	92
 10016  20C3  3400               	retlw	0
 10017  20C4  345F               	retlw	95
 10018  20C5  3400               	retlw	0
 10019  20C6  3461               	retlw	97
 10020  20C7  3400               	retlw	0
 10021  20C8  3464               	retlw	100
 10022  20C9  3400               	retlw	0
 10023  20CA  3466               	retlw	102
 10024  20CB  3400               	retlw	0
 10025  20CC  3469               	retlw	105
 10026  20CD  3400               	retlw	0
 10027  20CE  346B               	retlw	107
 10028  20CF  3400               	retlw	0
 10029  20D0  346E               	retlw	110
 10030  20D1  3400               	retlw	0
 10031  20D2  3470               	retlw	112
 10032  20D3  3400               	retlw	0
 10033  20D4  3473               	retlw	115
 10034  20D5  3400               	retlw	0
 10035  20D6  3476               	retlw	118
 10036  20D7  3400               	retlw	0
 10037  20D8  3479               	retlw	121
 10038  20D9  3400               	retlw	0
 10039  20DA  347B               	retlw	123
 10040  20DB  3400               	retlw	0
 10041  20DC  347E               	retlw	126
 10042  20DD  3400               	retlw	0
 10043  20DE  3481               	retlw	129
 10044  20DF  3400               	retlw	0
 10045  20E0  3484               	retlw	132
 10046  20E1  3400               	retlw	0
 10047  20E2  3487               	retlw	135
 10048  20E3  3400               	retlw	0
 10049  20E4  348A               	retlw	138
 10050  20E5  3400               	retlw	0
 10051  20E6  348D               	retlw	141
 10052  20E7  3400               	retlw	0
 10053  20E8  3490               	retlw	144
 10054  20E9  3400               	retlw	0
 10055  20EA  3493               	retlw	147
 10056  20EB  3400               	retlw	0
 10057  20EC  3496               	retlw	150
 10058  20ED  3400               	retlw	0
 10059  20EE  349A               	retlw	154
 10060  20EF  3400               	retlw	0
 10061  20F0  349D               	retlw	157
 10062  20F1  3400               	retlw	0
 10063  20F2  34A0               	retlw	160
 10064  20F3  3400               	retlw	0
 10065  20F4  34A3               	retlw	163
 10066  20F5  3400               	retlw	0
 10067  20F6  34A7               	retlw	167
 10068  20F7  3400               	retlw	0
 10069  20F8  34AA               	retlw	170
 10070  20F9  3400               	retlw	0
 10071  20FA  34AE               	retlw	174
 10072  20FB  3400               	retlw	0
 10073  20FC  34B1               	retlw	177
 10074  20FD  3400               	retlw	0
 10075  20FE  34B5               	retlw	181
 10076  20FF  3400               	retlw	0
 10077  2100  34B8               	retlw	184
 10078  2101  3400               	retlw	0
 10079  2102  34BC               	retlw	188
 10080  2103  3400               	retlw	0
 10081  2104  34BF               	retlw	191
 10082  2105  3400               	retlw	0
 10083  2106  34C3               	retlw	195
 10084  2107  3400               	retlw	0
 10085  2108  34C7               	retlw	199
 10086  2109  3400               	retlw	0
 10087  210A  34CA               	retlw	202
 10088  210B  3400               	retlw	0
 10089  210C  34CE               	retlw	206
 10090  210D  3400               	retlw	0
 10091  210E  34D2               	retlw	210
 10092  210F  3400               	retlw	0
 10093  2110  34D6               	retlw	214
 10094  2111  3400               	retlw	0
 10095  2112  34DA               	retlw	218
 10096  2113  3400               	retlw	0
 10097  2114  34DE               	retlw	222
 10098  2115  3400               	retlw	0
 10099  2116  34E2               	retlw	226
 10100  2117  3400               	retlw	0
 10101  2118  34E6               	retlw	230
 10102  2119  3400               	retlw	0
 10103  211A  34EA               	retlw	234
 10104  211B  3400               	retlw	0
 10105  211C  34EE               	retlw	238
 10106  211D  3400               	retlw	0
 10107  211E  34F3               	retlw	243
 10108  211F  3400               	retlw	0
 10109  2120  34F7               	retlw	247
 10110  2121  3400               	retlw	0
 10111  2122  34FB               	retlw	251
 10112  2123  3400               	retlw	0
 10113  2124  34FF               	retlw	255
 10114  2125  3400               	retlw	0
 10115  2126  3404               	retlw	4
 10116  2127  3401               	retlw	1
 10117  2128  3408               	retlw	8
 10118  2129  3401               	retlw	1
 10119  212A  340D               	retlw	13
 10120  212B  3401               	retlw	1
 10121  212C  3411               	retlw	17
 10122  212D  3401               	retlw	1
 10123  212E  3416               	retlw	22
 10124  212F  3401               	retlw	1
 10125  2130  341A               	retlw	26
 10126  2131  3401               	retlw	1
 10127  2132  341F               	retlw	31
 10128  2133  3401               	retlw	1
 10129  2134  3424               	retlw	36
 10130  2135  3401               	retlw	1
 10131  2136  3428               	retlw	40
 10132  2137  3401               	retlw	1
 10133  2138  342D               	retlw	45
 10134  2139  3401               	retlw	1
 10135  213A  3432               	retlw	50
 10136  213B  3401               	retlw	1
 10137  213C  3437               	retlw	55
 10138  213D  3401               	retlw	1
 10139  213E  343C               	retlw	60
 10140  213F  3401               	retlw	1
 10141  2140  3441               	retlw	65
 10142  2141  3401               	retlw	1
 10143  2142  3446               	retlw	70
 10144  2143  3401               	retlw	1
 10145  2144  344B               	retlw	75
 10146  2145  3401               	retlw	1
 10147  2146  3450               	retlw	80
 10148  2147  3401               	retlw	1
 10149  2148  3455               	retlw	85
 10150  2149  3401               	retlw	1
 10151  214A  345A               	retlw	90
 10152  214B  3401               	retlw	1
 10153  214C  345F               	retlw	95
 10154  214D  3401               	retlw	1
 10155  214E  3465               	retlw	101
 10156  214F  3401               	retlw	1
 10157  2150  346A               	retlw	106
 10158  2151  3401               	retlw	1
 10159  2152  346F               	retlw	111
 10160  2153  3401               	retlw	1
 10161  2154  3475               	retlw	117
 10162  2155  3401               	retlw	1
 10163  2156  347A               	retlw	122
 10164  2157  3401               	retlw	1
 10165  2158  3480               	retlw	128
 10166  2159  3401               	retlw	1
 10167  215A  3486               	retlw	134
 10168  215B  3401               	retlw	1
 10169  215C  348B               	retlw	139
 10170  215D  3401               	retlw	1
 10171  215E  3491               	retlw	145
 10172  215F  3401               	retlw	1
 10173  2160  3497               	retlw	151
 10174  2161  3401               	retlw	1
 10175  2162  349C               	retlw	156
 10176  2163  3401               	retlw	1
 10177  2164  34A2               	retlw	162
 10178  2165  3401               	retlw	1
 10179  2166  34A8               	retlw	168
 10180  2167  3401               	retlw	1
 10181  2168  34AE               	retlw	174
 10182  2169  3401               	retlw	1
 10183  216A  34B4               	retlw	180
 10184  216B  3401               	retlw	1
 10185  216C  34BA               	retlw	186
 10186  216D  3401               	retlw	1
 10187  216E  34C0               	retlw	192
 10188  216F  3401               	retlw	1
 10189  2170  34C6               	retlw	198
 10190  2171  3401               	retlw	1
 10191  2172  34CC               	retlw	204
 10192  2173  3401               	retlw	1
 10193  2174  34D2               	retlw	210
 10194  2175  3401               	retlw	1
 10195  2176  34D9               	retlw	217
 10196  2177  3401               	retlw	1
 10197  2178  34DF               	retlw	223
 10198  2179  3401               	retlw	1
 10199  217A  34E5               	retlw	229
 10200  217B  3401               	retlw	1
 10201  217C  34EC               	retlw	236
 10202  217D  3401               	retlw	1
 10203  217E  34F2               	retlw	242
 10204  217F  3401               	retlw	1
 10205  2180  34F9               	retlw	249
 10206  2181  3401               	retlw	1
 10207  2182  34FF               	retlw	255
 10208  2183  3401               	retlw	1
 10209  2184  3406               	retlw	6
 10210  2185  3402               	retlw	2
 10211  2186  340D               	retlw	13
 10212  2187  3402               	retlw	2
 10213  2188  3413               	retlw	19
 10214  2189  3402               	retlw	2
 10215  218A  341A               	retlw	26
 10216  218B  3402               	retlw	2
 10217  218C  3421               	retlw	33
 10218  218D  3402               	retlw	2
 10219  218E  3428               	retlw	40
 10220  218F  3402               	retlw	2
 10221  2190  342F               	retlw	47
 10222  2191  3402               	retlw	2
 10223  2192  3436               	retlw	54
 10224  2193  3402               	retlw	2
 10225  2194  343D               	retlw	61
 10226  2195  3402               	retlw	2
 10227  2196  3444               	retlw	68
 10228  2197  3402               	retlw	2
 10229  2198  344B               	retlw	75
 10230  2199  3402               	retlw	2
 10231  219A  3452               	retlw	82
 10232  219B  3402               	retlw	2
 10233  219C  345A               	retlw	90
 10234  219D  3402               	retlw	2
 10235  219E  3461               	retlw	97
 10236  219F  3402               	retlw	2
 10237  21A0  3468               	retlw	104
 10238  21A1  3402               	retlw	2
 10239  21A2  3470               	retlw	112
 10240  21A3  3402               	retlw	2
 10241  21A4  3477               	retlw	119
 10242  21A5  3402               	retlw	2
 10243  21A6  347F               	retlw	127
 10244  21A7  3402               	retlw	2
 10245  21A8  3486               	retlw	134
 10246  21A9  3402               	retlw	2
 10247  21AA  348E               	retlw	142
 10248  21AB  3402               	retlw	2
 10249  21AC  3495               	retlw	149
 10250  21AD  3402               	retlw	2
 10251  21AE  349D               	retlw	157
 10252  21AF  3402               	retlw	2
 10253  21B0  34A5               	retlw	165
 10254  21B1  3402               	retlw	2
 10255  21B2  34AD               	retlw	173
 10256  21B3  3402               	retlw	2
 10257  21B4  34B5               	retlw	181
 10258  21B5  3402               	retlw	2
 10259  21B6  34BD               	retlw	189
 10260  21B7  3402               	retlw	2
 10261  21B8  34C5               	retlw	197
 10262  21B9  3402               	retlw	2
 10263  21BA  34CD               	retlw	205
 10264  21BB  3402               	retlw	2
 10265  21BC  34D5               	retlw	213
 10266  21BD  3402               	retlw	2
 10267  21BE  34DD               	retlw	221
 10268  21BF  3402               	retlw	2
 10269  21C0  34E5               	retlw	229
 10270  21C1  3402               	retlw	2
 10271  21C2  34ED               	retlw	237
 10272  21C3  3402               	retlw	2
 10273  21C4  34F6               	retlw	246
 10274  21C5  3402               	retlw	2
 10275  21C6  34FE               	retlw	254
 10276  21C7  3402               	retlw	2
 10277  21C8  3406               	retlw	6
 10278  21C9  3403               	retlw	3
 10279  21CA  340F               	retlw	15
 10280  21CB  3403               	retlw	3
 10281  21CC  3418               	retlw	24
 10282  21CD  3403               	retlw	3
 10283  21CE  3420               	retlw	32
 10284  21CF  3403               	retlw	3
 10285  21D0  3429               	retlw	41
 10286  21D1  3403               	retlw	3
 10287  21D2  3431               	retlw	49
 10288  21D3  3403               	retlw	3
 10289  21D4  343A               	retlw	58
 10290  21D5  3403               	retlw	3
 10291  21D6  3443               	retlw	67
 10292  21D7  3403               	retlw	3
 10293  21D8  344C               	retlw	76
 10294  21D9  3403               	retlw	3
 10295  21DA  3455               	retlw	85
 10296  21DB  3403               	retlw	3
 10297  21DC  345E               	retlw	94
 10298  21DD  3403               	retlw	3
 10299  21DE  3467               	retlw	103
 10300  21DF  3403               	retlw	3
 10301  21E0  3470               	retlw	112
 10302  21E1  3403               	retlw	3
 10303  21E2  3479               	retlw	121
 10304  21E3  3403               	retlw	3
 10305  21E4  3482               	retlw	130
 10306  21E5  3403               	retlw	3
 10307  21E6  348C               	retlw	140
 10308  21E7  3403               	retlw	3
 10309  21E8  3495               	retlw	149
 10310  21E9  3403               	retlw	3
 10311  21EA  349E               	retlw	158
 10312  21EB  3403               	retlw	3
 10313  21EC  34A8               	retlw	168
 10314  21ED  3403               	retlw	3
 10315  21EE  34B1               	retlw	177
 10316  21EF  3403               	retlw	3
 10317  21F0  34BB               	retlw	187
 10318  21F1  3403               	retlw	3
 10319  21F2  34C5               	retlw	197
 10320  21F3  3403               	retlw	3
 10321  21F4  34CE               	retlw	206
 10322  21F5  3403               	retlw	3
 10323  21F6  34D8               	retlw	216
 10324  21F7  3403               	retlw	3
 10325  21F8  34E2               	retlw	226
 10326  21F9  3403               	retlw	3
 10327  21FA  34EC               	retlw	236
 10328  21FB  3403               	retlw	3
 10329  21FC  34F6               	retlw	246
 10330  21FD  3403               	retlw	3
 10331  21FE  34FF               	retlw	255
 10332  21FF  3403               	retlw	3
 10333  2200                     __end_of_gamma_table_256x1k:	
 10334                           
 10335                           	psect	stringtext2
 10336  2800                     __pstringtext2:	
 10337  2800                     _dpowers:	
 10338  2800  3401               	retlw	1
 10339  2801  3400               	retlw	0
 10340  2802  340A               	retlw	10
 10341  2803  3400               	retlw	0
 10342  2804  3464               	retlw	100
 10343  2805  3400               	retlw	0
 10344  2806  34E8               	retlw	232
 10345  2807  3403               	retlw	3
 10346  2808  3410               	retlw	16
 10347  2809  3427               	retlw	39
 10348  280A                     __end_of_dpowers:	
 10349  000D                     _PORTBbits	set	13
 10350  000C                     _PORTAbits	set	12
 10351  000E                     _PORTCbits	set	14
 10352  000B                     _INTCONbits	set	11
 10353  0017                     _T0CON0bits	set	23
 10354  0010                     _PIR0bits	set	16
 10355  0015                     _TMR0L	set	21
 10356  0016                     _TMR0H	set	22
 10357  0018                     _T0CON1	set	24
 10358  0017                     _T0CON0	set	23
 10359  0012                     _PIR2bits	set	18
 10360  001F                     _T2CONbits	set	31
 10361  0011                     _PIR1bits	set	17
 10362  001D                     _TMR2	set	29
 10363  001E                     _PR2	set	30
 10364  001F                     _T2CON	set	31
 10365  005F                     _GIE	set	95
 10366  0090                     _PIE0bits	set	144
 10367  008E                     _TRISC	set	142
 10368  008D                     _TRISB	set	141
 10369  008C                     _TRISA	set	140
 10370  0097                     _WDTCON	set	151
 10371  010E                     _LATCbits	set	270
 10372  010D                     _LATBbits	set	269
 10373  010E                     _LATC	set	270
 10374  010D                     _LATB	set	269
 10375  010C                     _LATA	set	268
 10376  018C                     _ANSELA	set	396
 10377  018D                     _ANSELB	set	397
 10378  018E                     _ANSELC	set	398
 10379  020E                     _WPUC	set	526
 10380  020C                     _WPUA	set	524
 10381  020D                     _WPUB	set	525
 10382  0214                     _SSP1STATbits	set	532
 10383  0211                     _SSP1BUF	set	529
 10384  0215                     _SSP1CON1bits	set	533
 10385  0212                     _SSP1ADD	set	530
 10386  0215                     _SSP1CON1	set	533
 10387  0214                     _SSP1STAT	set	532
 10388  0297                     _CCP2CONbits	set	663
 10389  0295                     _CCPR2L	set	661
 10390  0296                     _CCPR2H	set	662
 10391  0297                     _CCP2CON	set	663
 10392  028E                     _ODCONC	set	654
 10393  028D                     _ODCONB	set	653
 10394  028C                     _ODCONA	set	652
 10395  0293                     _CCP1CONbits	set	659
 10396  029F                     _CCPTMRSbits	set	671
 10397  0291                     _CCPR1L	set	657
 10398  0292                     _CCPR1H	set	658
 10399  0293                     _CCP1CON	set	659
 10400  0417                     _T4CONbits	set	1047
 10401  0415                     _TMR4	set	1045
 10402  0416                     _PR4	set	1046
 10403  0417                     _T4CON	set	1047
 10404  061A                     _PWM6DCL	set	1562
 10405  061B                     _PWM6DCH	set	1563
 10406  061C                     _PWM6CON	set	1564
 10407  061F                     _PWMTMRSbits	set	1567
 10408  0617                     _PWM5DCL	set	1559
 10409  0618                     _PWM5DCH	set	1560
 10410  0619                     _PWM5CON	set	1561
 10411  0896                     _NVMCON2	set	2198
 10412  0893                     _NVMDATL	set	2195
 10413  0894                     _NVMDATH	set	2196
 10414  0895                     _NVMCON1bits	set	2197
 10415  0892                     _NVMADRH	set	2194
 10416  0891                     _NVMADRL	set	2193
 10417  091E                     _OSCTUNE	set	2334
 10418  091F                     _OSCFRQ	set	2335
 10419  091D                     _OSCEN	set	2333
 10420  091B                     _OSCCON3	set	2331
 10421  0919                     _OSCCON1	set	2329
 10422  48E0                     _PLLR	set	18656
 10423  0E20                     _SSP1CLKPPSbits	set	3616
 10424  0E21                     _SSP1DATPPSbits	set	3617
 10425  0E0F                     _PPSLOCKbits	set	3599
 10426  0E0F                     _PPSLOCK	set	3599
 10427  0EA2                     _RC2PPSbits	set	3746
 10428  0E9E                     _RB6PPSbits	set	3742
 10429  0EA3                     _RC3PPSbits	set	3747
 10430  0EA0                     _RC0PPSbits	set	3744
 10431  0EA4                     _RC4PPSbits	set	3748
 10432  0EA1                     _RC1PPSbits	set	3745
 10433  280A                     STR_34:	
 10434  280A  3449               	retlw	73	;'I'
 10435  280B  344D               	retlw	77	;'M'
 10436  280C  3420               	retlw	32	;' '
 10437  280D  3441               	retlw	65	;'A'
 10438  280E  3446               	retlw	70	;'F'
 10439  280F  3452               	retlw	82	;'R'
 10440  2810  3441               	retlw	65	;'A'
 10441  2811  3449               	retlw	73	;'I'
 10442  2812  3444               	retlw	68	;'D'
 10443  2813  3420               	retlw	32	;' '
 10444  2814  3449               	retlw	73	;'I'
 10445  2815  3420               	retlw	32	;' '
 10446  2816  3443               	retlw	67	;'C'
 10447  2817  3441               	retlw	65	;'A'
 10448  2818  344E               	retlw	78	;'N'
 10449  2819  3454               	retlw	84	;'T'
 10450  281A  3420               	retlw	32	;' '
 10451  281B  344C               	retlw	76	;'L'
 10452  281C  3445               	retlw	69	;'E'
 10453  281D  3454               	retlw	84	;'T'
 10454  281E  3420               	retlw	32	;' '
 10455  281F  3459               	retlw	89	;'Y'
 10456  2820  344F               	retlw	79	;'O'
 10457  2821  3455               	retlw	85	;'U'
 10458  2822  3420               	retlw	32	;' '
 10459  2823  3444               	retlw	68	;'D'
 10460  2824  344F               	retlw	79	;'O'
 10461  2825  3420               	retlw	32	;' '
 10462  2826  3454               	retlw	84	;'T'
 10463  2827  3448               	retlw	72	;'H'
 10464  2828  3441               	retlw	65	;'A'
 10465  2829  3454               	retlw	84	;'T'
 10466  282A  3420               	retlw	32	;' '
 10467  282B  3444               	retlw	68	;'D'
 10468  282C  3441               	retlw	65	;'A'
 10469  282D  3456               	retlw	86	;'V'
 10470  282E  3445               	retlw	69	;'E'
 10471  282F  342E               	retlw	46	;'.'
 10472  2830  342E               	retlw	46	;'.'
 10473  2831  342E               	retlw	46	;'.'
 10474  2832  3420               	retlw	32	;' '
 10475  2833  3420               	retlw	32	;' '
 10476  2834  3449               	retlw	73	;'I'
 10477  2835  344D               	retlw	77	;'M'
 10478  2836  3420               	retlw	32	;' '
 10479  2837  3448               	retlw	72	;'H'
 10480  2838  3445               	retlw	69	;'E'
 10481  2839  3452               	retlw	82	;'R'
 10482  283A  3445               	retlw	69	;'E'
 10483  283B  3420               	retlw	32	;' '
 10484  283C  3454               	retlw	84	;'T'
 10485  283D  344F               	retlw	79	;'O'
 10486  283E  3420               	retlw	32	;' '
 10487  283F  3443               	retlw	67	;'C'
 10488  2840  3448               	retlw	72	;'H'
 10489  2841  3445               	retlw	69	;'E'
 10490  2842  3457               	retlw	87	;'W'
 10491  2843  3420               	retlw	32	;' '
 10492  2844  3442               	retlw	66	;'B'
 10493  2845  3455               	retlw	85	;'U'
 10494  2846  3442               	retlw	66	;'B'
 10495  2847  3442               	retlw	66	;'B'
 10496  2848  344C               	retlw	76	;'L'
 10497  2849  3445               	retlw	69	;'E'
 10498  284A  3447               	retlw	71	;'G'
 10499  284B  3455               	retlw	85	;'U'
 10500  284C  344D               	retlw	77	;'M'
 10501  284D  3420               	retlw	32	;' '
 10502  284E  3441               	retlw	65	;'A'
 10503  284F  344E               	retlw	78	;'N'
 10504  2850  3444               	retlw	68	;'D'
 10505  2851  3420               	retlw	32	;' '
 10506  2852  344B               	retlw	75	;'K'
 10507  2853  3449               	retlw	73	;'I'
 10508  2854  3443               	retlw	67	;'C'
 10509  2855  344B               	retlw	75	;'K'
 10510  2856  3420               	retlw	32	;' '
 10511  2857  3441               	retlw	65	;'A'
 10512  2858  3453               	retlw	83	;'S'
 10513  2859  3453               	retlw	83	;'S'
 10514  285A  342E               	retlw	46	;'.'
 10515  285B  342E               	retlw	46	;'.'
 10516  285C  342E               	retlw	46	;'.'
 10517  285D  3420               	retlw	32	;' '
 10518  285E  3441               	retlw	65	;'A'
 10519  285F  344E               	retlw	78	;'N'
 10520  2860  3444               	retlw	68	;'D'
 10521  2861  3420               	retlw	32	;' '
 10522  2862  3449               	retlw	73	;'I'
 10523  2863  344D               	retlw	77	;'M'
 10524  2864  3420               	retlw	32	;' '
 10525  2865  3441               	retlw	65	;'A'
 10526  2866  344C               	retlw	76	;'L'
 10527  2867  344C               	retlw	76	;'L'
 10528  2868  3420               	retlw	32	;' '
 10529  2869  344F               	retlw	79	;'O'
 10530  286A  3455               	retlw	85	;'U'
 10531  286B  3454               	retlw	84	;'T'
 10532  286C  3420               	retlw	32	;' '
 10533  286D  344F               	retlw	79	;'O'
 10534  286E  3446               	retlw	70	;'F'
 10535  286F  3420               	retlw	32	;' '
 10536  2870  3442               	retlw	66	;'B'
 10537  2871  3455               	retlw	85	;'U'
 10538  2872  3442               	retlw	66	;'B'
 10539  2873  3442               	retlw	66	;'B'
 10540  2874  344C               	retlw	76	;'L'
 10541  2875  3445               	retlw	69	;'E'
 10542  2876  3447               	retlw	71	;'G'
 10543  2877  3455               	retlw	85	;'U'
 10544  2878  344D               	retlw	77	;'M'
 10545  2879  3420               	retlw	32	;' '
 10546  287A  3420               	retlw	32	;' '
 10547  287B  3420               	retlw	32	;' '
 10548  287C  3420               	retlw	32	;' '
 10549  287D  3420               	retlw	32	;' '
 10550  287E  3420               	retlw	32	;' '
 10551  287F  3420               	retlw	32	;' '
 10552  2880  3420               	retlw	32	;' '
 10553  2881  3400               	retlw	0
 10554                           
 10555                           	psect	stringtext3
 10556  3800                     __pstringtext3:	
 10557  3800                     STR_36:	
 10558  3800  3449               	retlw	73	;'I'
 10559  3801  3420               	retlw	32	;' '
 10560  3802  344C               	retlw	76	;'L'
 10561  3803  344F               	retlw	79	;'O'
 10562  3804  3456               	retlw	86	;'V'
 10563  3805  3445               	retlw	69	;'E'
 10564  3806  3420               	retlw	32	;' '
 10565  3807  3449               	retlw	73	;'I'
 10566  3808  3454               	retlw	84	;'T'
 10567  3809  342E               	retlw	46	;'.'
 10568  380A  3420               	retlw	32	;' '
 10569  380B  3445               	retlw	69	;'E'
 10570  380C  3453               	retlw	83	;'S'
 10571  380D  3450               	retlw	80	;'P'
 10572  380E  3445               	retlw	69	;'E'
 10573  380F  3443               	retlw	67	;'C'
 10574  3810  3449               	retlw	73	;'I'
 10575  3811  3441               	retlw	65	;'A'
 10576  3812  344C               	retlw	76	;'L'
 10577  3813  344C               	retlw	76	;'L'
 10578  3814  3459               	retlw	89	;'Y'
 10579  3815  3420               	retlw	32	;' '
 10580  3816  344C               	retlw	76	;'L'
 10581  3817  3441               	retlw	65	;'A'
 10582  3818  3454               	retlw	84	;'T'
 10583  3819  3445               	retlw	69	;'E'
 10584  381A  3452               	retlw	82	;'R'
 10585  381B  3420               	retlw	32	;' '
 10586  381C  3449               	retlw	73	;'I'
 10587  381D  344E               	retlw	78	;'N'
 10588  381E  3420               	retlw	32	;' '
 10589  381F  3454               	retlw	84	;'T'
 10590  3820  3448               	retlw	72	;'H'
 10591  3821  3445               	retlw	69	;'E'
 10592  3822  3420               	retlw	32	;' '
 10593  3823  3453               	retlw	83	;'S'
 10594  3824  3455               	retlw	85	;'U'
 10595  3825  344D               	retlw	77	;'M'
 10596  3826  344D               	retlw	77	;'M'
 10597  3827  3445               	retlw	69	;'E'
 10598  3828  3452               	retlw	82	;'R'
 10599  3829  3420               	retlw	32	;' '
 10600  382A  3420               	retlw	32	;' '
 10601  382B  3420               	retlw	32	;' '
 10602  382C  3420               	retlw	32	;' '
 10603  382D  3420               	retlw	32	;' '
 10604  382E  3400               	retlw	0
 10605                           
 10606                           	psect	stringtext4
 10607  382F                     __pstringtext4:	
 10608  382F                     STR_80:	
 10609  382F  3459               	retlw	89	;'Y'
 10610  3830  344F               	retlw	79	;'O'
 10611  3831  3455               	retlw	85	;'U'
 10612  3832  3420               	retlw	32	;' '
 10613  3833  3441               	retlw	65	;'A'
 10614  3834  3452               	retlw	82	;'R'
 10615  3835  3445               	retlw	69	;'E'
 10616  3836  3420               	retlw	32	;' '
 10617  3837  3449               	retlw	73	;'I'
 10618  3838  344E               	retlw	78	;'N'
 10619  3839  3420               	retlw	32	;' '
 10620  383A  3454               	retlw	84	;'T'
 10621  383B  344F               	retlw	79	;'O'
 10622  383C  344F               	retlw	79	;'O'
 10623  383D  3420               	retlw	32	;' '
 10624  383E  3444               	retlw	68	;'D'
 10625  383F  3445               	retlw	69	;'E'
 10626  3840  3445               	retlw	69	;'E'
 10627  3841  3450               	retlw	80	;'P'
 10628  3842  3420               	retlw	32	;' '
 10629  3843  3420               	retlw	32	;' '
 10630  3844  3420               	retlw	32	;' '
 10631  3845  3420               	retlw	32	;' '
 10632  3846  3420               	retlw	32	;' '
 10633  3847  3454               	retlw	84	;'T'
 10634  3848  3441               	retlw	65	;'A'
 10635  3849  344B               	retlw	75	;'K'
 10636  384A  3445               	retlw	69	;'E'
 10637  384B  3420               	retlw	32	;' '
 10638  384C  3454               	retlw	84	;'T'
 10639  384D  3448               	retlw	72	;'H'
 10640  384E  3445               	retlw	69	;'E'
 10641  384F  3420               	retlw	32	;' '
 10642  3850  3452               	retlw	82	;'R'
 10643  3851  3445               	retlw	69	;'E'
 10644  3852  3444               	retlw	68	;'D'
 10645  3853  3420               	retlw	32	;' '
 10646  3854  3450               	retlw	80	;'P'
 10647  3855  3449               	retlw	73	;'I'
 10648  3856  344C               	retlw	76	;'L'
 10649  3857  344C               	retlw	76	;'L'
 10650  3858  3420               	retlw	32	;' '
 10651  3859  3420               	retlw	32	;' '
 10652  385A  3420               	retlw	32	;' '
 10653  385B  3420               	retlw	32	;' '
 10654  385C  3400               	retlw	0
 10655                           
 10656                           	psect	stringtext5
 10657  385D                     __pstringtext5:	
 10658  385D                     STR_38:	
 10659  385D  3448               	retlw	72	;'H'
 10660  385E  3454               	retlw	84	;'T'
 10661  385F  3454               	retlw	84	;'T'
 10662  3860  3450               	retlw	80	;'P'
 10663  3861  3453               	retlw	83	;'S'
 10664  3862  343A               	retlw	58	;':'
 10665  3863  342F               	retlw	47	;'/'
 10666  3864  342F               	retlw	47	;'/'
 10667  3865  3447               	retlw	71	;'G'
 10668  3866  3449               	retlw	73	;'I'
 10669  3867  3454               	retlw	84	;'T'
 10670  3868  3448               	retlw	72	;'H'
 10671  3869  3455               	retlw	85	;'U'
 10672  386A  3442               	retlw	66	;'B'
 10673  386B  342E               	retlw	46	;'.'
 10674  386C  3443               	retlw	67	;'C'
 10675  386D  344F               	retlw	79	;'O'
 10676  386E  344D               	retlw	77	;'M'
 10677  386F  342F               	retlw	47	;'/'
 10678  3870  344E               	retlw	78	;'N'
 10679  3871  3455               	retlw	85	;'U'
 10680  3872  344C               	retlw	76	;'L'
 10681  3873  344C               	retlw	76	;'L'
 10682  3874  3449               	retlw	73	;'I'
 10683  3875  3442               	retlw	66	;'B'
 10684  3876  3441               	retlw	65	;'A'
 10685  3877  3444               	retlw	68	;'D'
 10686  3878  3447               	retlw	71	;'G'
 10687  3879  3445               	retlw	69	;'E'
 10688  387A  342F               	retlw	47	;'/'
 10689  387B  3444               	retlw	68	;'D'
 10690  387C  3445               	retlw	69	;'E'
 10691  387D  3446               	retlw	70	;'F'
 10692  387E  3443               	retlw	67	;'C'
 10693  387F  344F               	retlw	79	;'O'
 10694  3880  344E               	retlw	78	;'N'
 10695  3881  3432               	retlw	50	;'2'
 10696  3882  3435               	retlw	53	;'5'
 10697  3883  3420               	retlw	32	;' '
 10698  3884  3420               	retlw	32	;' '
 10699  3885  3420               	retlw	32	;' '
 10700  3886  3420               	retlw	32	;' '
 10701  3887  3400               	retlw	0
 10702                           
 10703                           	psect	stringtext6
 10704  3888                     __pstringtext6:	
 10705  3888                     STR_25:	
 10706  3888  3447               	retlw	71	;'G'
 10707  3889  3455               	retlw	85	;'U'
 10708  388A  3459               	retlw	89	;'Y'
 10709  388B  3453               	retlw	83	;'S'
 10710  388C  3420               	retlw	32	;' '
 10711  388D  3449               	retlw	73	;'I'
 10712  388E  3420               	retlw	32	;' '
 10713  388F  3448               	retlw	72	;'H'
 10714  3890  3441               	retlw	65	;'A'
 10715  3891  3456               	retlw	86	;'V'
 10716  3892  3445               	retlw	69	;'E'
 10717  3893  3420               	retlw	32	;' '
 10718  3894  3441               	retlw	65	;'A'
 10719  3895  3420               	retlw	32	;' '
 10720  3896  3447               	retlw	71	;'G'
 10721  3897  3452               	retlw	82	;'R'
 10722  3898  3445               	retlw	69	;'E'
 10723  3899  3441               	retlw	65	;'A'
 10724  389A  3454               	retlw	84	;'T'
 10725  389B  3420               	retlw	32	;' '
 10726  389C  3449               	retlw	73	;'I'
 10727  389D  3444               	retlw	68	;'D'
 10728  389E  3445               	retlw	69	;'E'
 10729  389F  3441               	retlw	65	;'A'
 10730  38A0  3420               	retlw	32	;' '
 10731  38A1  342D               	retlw	45	;'-'
 10732  38A2  344D               	retlw	77	;'M'
 10733  38A3  3449               	retlw	73	;'I'
 10734  38A4  344B               	retlw	75	;'K'
 10735  38A5  3445               	retlw	69	;'E'
 10736  38A6  3420               	retlw	32	;' '
 10737  38A7  344B               	retlw	75	;'K'
 10738  38A8  342E               	retlw	46	;'.'
 10739  38A9  3420               	retlw	32	;' '
 10740  38AA  3420               	retlw	32	;' '
 10741  38AB  3420               	retlw	32	;' '
 10742  38AC  3420               	retlw	32	;' '
 10743  38AD  3420               	retlw	32	;' '
 10744  38AE  3420               	retlw	32	;' '
 10745  38AF  3400               	retlw	0
 10746                           
 10747                           	psect	stringtext7
 10748  38B0                     __pstringtext7:	
 10749  38B0                     STR_21:	
 10750  38B0  3441               	retlw	65	;'A'
 10751  38B1  344C               	retlw	76	;'L'
 10752  38B2  344C               	retlw	76	;'L'
 10753  38B3  3420               	retlw	32	;' '
 10754  38B4  3459               	retlw	89	;'Y'
 10755  38B5  344F               	retlw	79	;'O'
 10756  38B6  3455               	retlw	85	;'U'
 10757  38B7  3452               	retlw	82	;'R'
 10758  38B8  3420               	retlw	32	;' '
 10759  38B9  3442               	retlw	66	;'B'
 10760  38BA  3441               	retlw	65	;'A'
 10761  38BB  3453               	retlw	83	;'S'
 10762  38BC  3445               	retlw	69	;'E'
 10763  38BD  3420               	retlw	32	;' '
 10764  38BE  3441               	retlw	65	;'A'
 10765  38BF  3452               	retlw	82	;'R'
 10766  38C0  3445               	retlw	69	;'E'
 10767  38C1  3420               	retlw	32	;' '
 10768  38C2  3442               	retlw	66	;'B'
 10769  38C3  3445               	retlw	69	;'E'
 10770  38C4  344C               	retlw	76	;'L'
 10771  38C5  344F               	retlw	79	;'O'
 10772  38C6  344E               	retlw	78	;'N'
 10773  38C7  3447               	retlw	71	;'G'
 10774  38C8  3420               	retlw	32	;' '
 10775  38C9  3454               	retlw	84	;'T'
 10776  38CA  344F               	retlw	79	;'O'
 10777  38CB  3420               	retlw	32	;' '
 10778  38CC  3455               	retlw	85	;'U'
 10779  38CD  3453               	retlw	83	;'S'
 10780  38CE  3420               	retlw	32	;' '
 10781  38CF  3420               	retlw	32	;' '
 10782  38D0  3420               	retlw	32	;' '
 10783  38D1  3420               	retlw	32	;' '
 10784  38D2  3420               	retlw	32	;' '
 10785  38D3  3400               	retlw	0
 10786                           
 10787                           	psect	stringtext8
 10788  38D4                     __pstringtext8:	
 10789  38D4                     STR_31:	
 10790  38D4  3449               	retlw	73	;'I'
 10791  38D5  3454               	retlw	84	;'T'
 10792  38D6  3453               	retlw	83	;'S'
 10793  38D7  3420               	retlw	32	;' '
 10794  38D8  3441               	retlw	65	;'A'
 10795  38D9  3420               	retlw	32	;' '
 10796  38DA  3455               	retlw	85	;'U'
 10797  38DB  344E               	retlw	78	;'N'
 10798  38DC  3449               	retlw	73	;'I'
 10799  38DD  3458               	retlw	88	;'X'
 10800  38DE  3420               	retlw	32	;' '
 10801  38DF  3453               	retlw	83	;'S'
 10802  38E0  3459               	retlw	89	;'Y'
 10803  38E1  3453               	retlw	83	;'S'
 10804  38E2  3454               	retlw	84	;'T'
 10805  38E3  3445               	retlw	69	;'E'
 10806  38E4  344D               	retlw	77	;'M'
 10807  38E5  3420               	retlw	32	;' '
 10808  38E6  3420               	retlw	32	;' '
 10809  38E7  3449               	retlw	73	;'I'
 10810  38E8  3420               	retlw	32	;' '
 10811  38E9  346B               	retlw	107	;'k'
 10812  38EA  346E               	retlw	110	;'n'
 10813  38EB  346F               	retlw	111	;'o'
 10814  38EC  3477               	retlw	119	;'w'
 10815  38ED  3420               	retlw	32	;' '
 10816  38EE  3474               	retlw	116	;'t'
 10817  38EF  3468               	retlw	104	;'h'
 10818  38F0  3469               	retlw	105	;'i'
 10819  38F1  3473               	retlw	115	;'s'
 10820  38F2  3421               	retlw	33	;'!'
 10821  38F3  3420               	retlw	32	;' '
 10822  38F4  3420               	retlw	32	;' '
 10823  38F5  3420               	retlw	32	;' '
 10824  38F6  3400               	retlw	0
 10825                           
 10826                           	psect	stringtext9
 10827  38F7                     __pstringtext9:	
 10828  38F7                     STR_33:	
 10829  38F7  3457               	retlw	87	;'W'
 10830  38F8  344F               	retlw	79	;'O'
 10831  38F9  3455               	retlw	85	;'U'
 10832  38FA  344C               	retlw	76	;'L'
 10833  38FB  3444               	retlw	68	;'D'
 10834  38FC  3420               	retlw	32	;' '
 10835  38FD  3459               	retlw	89	;'Y'
 10836  38FE  344F               	retlw	79	;'O'
 10837  38FF  3455               	retlw	85	;'U'
 10838  3900  3420               	retlw	32	;' '
 10839  3901  344C               	retlw	76	;'L'
 10840  3902  3449               	retlw	73	;'I'
 10841  3903  344B               	retlw	75	;'K'
 10842  3904  3445               	retlw	69	;'E'
 10843  3905  3420               	retlw	32	;' '
 10844  3906  3454               	retlw	84	;'T'
 10845  3907  344F               	retlw	79	;'O'
 10846  3908  3420               	retlw	32	;' '
 10847  3909  3450               	retlw	80	;'P'
 10848  390A  344C               	retlw	76	;'L'
 10849  390B  3441               	retlw	65	;'A'
 10850  390C  3459               	retlw	89	;'Y'
 10851  390D  3420               	retlw	32	;' '
 10852  390E  3441               	retlw	65	;'A'
 10853  390F  3420               	retlw	32	;' '
 10854  3910  3447               	retlw	71	;'G'
 10855  3911  3441               	retlw	65	;'A'
 10856  3912  344D               	retlw	77	;'M'
 10857  3913  3445               	retlw	69	;'E'
 10858  3914  343F               	retlw	63	;'?'
 10859  3915  3420               	retlw	32	;' '
 10860  3916  3420               	retlw	32	;' '
 10861  3917  3420               	retlw	32	;' '
 10862  3918  3400               	retlw	0
 10863                           
 10864                           	psect	stringtext10
 10865  3919                     __pstringtext10:	
 10866  3919                     STR_22:	
 10867  3919  3444               	retlw	68	;'D'
 10868  391A  344F               	retlw	79	;'O'
 10869  391B  3445               	retlw	69	;'E'
 10870  391C  3453               	retlw	83	;'S'
 10871  391D  3420               	retlw	32	;' '
 10872  391E  3444               	retlw	68	;'D'
 10873  391F  3445               	retlw	69	;'E'
 10874  3920  3456               	retlw	86	;'V'
 10875  3921  3441               	retlw	65	;'A'
 10876  3922  344E               	retlw	78	;'N'
 10877  3923  3420               	retlw	32	;' '
 10878  3924  3448               	retlw	72	;'H'
 10879  3925  3441               	retlw	65	;'A'
 10880  3926  3453               	retlw	83	;'S'
 10881  3927  3420               	retlw	32	;' '
 10882  3928  3448               	retlw	72	;'H'
 10883  3929  3449               	retlw	73	;'I'
 10884  392A  3453               	retlw	83	;'S'
 10885  392B  3420               	retlw	32	;' '
 10886  392C  3450               	retlw	80	;'P'
 10887  392D  3448               	retlw	72	;'H'
 10888  392E  344F               	retlw	79	;'O'
 10889  392F  344E               	retlw	78	;'N'
 10890  3930  3445               	retlw	69	;'E'
 10891  3931  343F               	retlw	63	;'?'
 10892  3932  3420               	retlw	32	;' '
 10893  3933  3420               	retlw	32	;' '
 10894  3934  3420               	retlw	32	;' '
 10895  3935  3420               	retlw	32	;' '
 10896  3936  3400               	retlw	0
 10897                           
 10898                           	psect	stringtext11
 10899  3937                     __pstringtext11:	
 10900  3937                     STR_28:	
 10901  3937  344E               	retlw	78	;'N'
 10902  3938  3443               	retlw	67	;'C'
 10903  3939  3420               	retlw	32	;' '
 10904  393A  342D               	retlw	45	;'-'
 10905  393B  3445               	retlw	69	;'E'
 10906  393C  3420               	retlw	32	;' '
 10907  393D  342F               	retlw	47	;'/'
 10908  393E  3442               	retlw	66	;'B'
 10909  393F  3449               	retlw	73	;'I'
 10910  3940  344E               	retlw	78	;'N'
 10911  3941  342F               	retlw	47	;'/'
 10912  3942  3442               	retlw	66	;'B'
 10913  3943  3441               	retlw	65	;'A'
 10914  3944  3453               	retlw	83	;'S'
 10915  3945  3448               	retlw	72	;'H'
 10916  3946  3420               	retlw	32	;' '
 10917  3947  342D               	retlw	45	;'-'
 10918  3948  344C               	retlw	76	;'L'
 10919  3949  3450               	retlw	80	;'P'
 10920  394A  3420               	retlw	32	;' '
 10921  394B  3431               	retlw	49	;'1'
 10922  394C  3433               	retlw	51	;'3'
 10923  394D  3433               	retlw	51	;'3'
 10924  394E  3437               	retlw	55	;'7'
 10925  394F  3420               	retlw	32	;' '
 10926  3950  3420               	retlw	32	;' '
 10927  3951  3420               	retlw	32	;' '
 10928  3952  3420               	retlw	32	;' '
 10929  3953  3400               	retlw	0
 10930                           
 10931                           	psect	stringtext12
 10932  3954                     __pstringtext12:	
 10933  3954                     STR_23:	
 10934  3954  3459               	retlw	89	;'Y'
 10935  3955  344F               	retlw	79	;'O'
 10936  3956  3455               	retlw	85	;'U'
 10937  3957  3420               	retlw	32	;' '
 10938  3958  344A               	retlw	74	;'J'
 10939  3959  3455               	retlw	85	;'U'
 10940  395A  3453               	retlw	83	;'S'
 10941  395B  3454               	retlw	84	;'T'
 10942  395C  3420               	retlw	32	;' '
 10943  395D  3448               	retlw	72	;'H'
 10944  395E  3441               	retlw	65	;'A'
 10945  395F  3456               	retlw	86	;'V'
 10946  3960  3445               	retlw	69	;'E'
 10947  3961  3420               	retlw	32	;' '
 10948  3962  3454               	retlw	84	;'T'
 10949  3963  344F               	retlw	79	;'O'
 10950  3964  3420               	retlw	32	;' '
 10951  3965  3442               	retlw	66	;'B'
 10952  3966  3445               	retlw	69	;'E'
 10953  3967  344C               	retlw	76	;'L'
 10954  3968  3449               	retlw	73	;'I'
 10955  3969  3445               	retlw	69	;'E'
 10956  396A  3456               	retlw	86	;'V'
 10957  396B  3445               	retlw	69	;'E'
 10958  396C  3420               	retlw	32	;' '
 10959  396D  3420               	retlw	32	;' '
 10960  396E  3420               	retlw	32	;' '
 10961  396F  3420               	retlw	32	;' '
 10962  3970  3400               	retlw	0
 10963                           
 10964                           	psect	stringtext13
 10965  3971                     __pstringtext13:	
 10966  3971                     STR_20:	
 10967  3971  3449               	retlw	73	;'I'
 10968  3972  3420               	retlw	32	;' '
 10969  3973  3443               	retlw	67	;'C'
 10970  3974  3441               	retlw	65	;'A'
 10971  3975  344E               	retlw	78	;'N'
 10972  3976  3420               	retlw	32	;' '
 10973  3977  3442               	retlw	66	;'B'
 10974  3978  3452               	retlw	82	;'R'
 10975  3979  3445               	retlw	69	;'E'
 10976  397A  3441               	retlw	65	;'A'
 10977  397B  344B               	retlw	75	;'K'
 10978  397C  3420               	retlw	32	;' '
 10979  397D  3454               	retlw	84	;'T'
 10980  397E  3448               	retlw	72	;'H'
 10981  397F  3441               	retlw	65	;'A'
 10982  3980  3454               	retlw	84	;'T'
 10983  3981  3420               	retlw	32	;' '
 10984  3982  3446               	retlw	70	;'F'
 10985  3983  344F               	retlw	79	;'O'
 10986  3984  3452               	retlw	82	;'R'
 10987  3985  3420               	retlw	32	;' '
 10988  3986  3459               	retlw	89	;'Y'
 10989  3987  344F               	retlw	79	;'O'
 10990  3988  3455               	retlw	85	;'U'
 10991  3989  3420               	retlw	32	;' '
 10992  398A  3420               	retlw	32	;' '
 10993  398B  3420               	retlw	32	;' '
 10994  398C  3400               	retlw	0
 10995                           
 10996                           	psect	stringtext14
 10997  398D                     __pstringtext14:	
 10998  398D                     STR_81:	
 10999  398D  3459               	retlw	89	;'Y'
 11000  398E  344F               	retlw	79	;'O'
 11001  398F  3455               	retlw	85	;'U'
 11002  3990  3420               	retlw	32	;' '
 11003  3991  3453               	retlw	83	;'S'
 11004  3992  3454               	retlw	84	;'T'
 11005  3993  3441               	retlw	65	;'A'
 11006  3994  3459               	retlw	89	;'Y'
 11007  3995  3420               	retlw	32	;' '
 11008  3996  3449               	retlw	73	;'I'
 11009  3997  344E               	retlw	78	;'N'
 11010  3998  3420               	retlw	32	;' '
 11011  3999  3457               	retlw	87	;'W'
 11012  399A  344F               	retlw	79	;'O'
 11013  399B  344E               	retlw	78	;'N'
 11014  399C  3444               	retlw	68	;'D'
 11015  399D  3445               	retlw	69	;'E'
 11016  399E  3452               	retlw	82	;'R'
 11017  399F  344C               	retlw	76	;'L'
 11018  39A0  3441               	retlw	65	;'A'
 11019  39A1  344E               	retlw	78	;'N'
 11020  39A2  3444               	retlw	68	;'D'
 11021  39A3  3420               	retlw	32	;' '
 11022  39A4  3420               	retlw	32	;' '
 11023  39A5  3420               	retlw	32	;' '
 11024  39A6  3420               	retlw	32	;' '
 11025  39A7  3400               	retlw	0
 11026                           
 11027                           	psect	stringtext15
 11028  39A8                     __pstringtext15:	
 11029  39A8                     STR_24:	
 11030  39A8  344E               	retlw	78	;'N'
 11031  39A9  344F               	retlw	79	;'O'
 11032  39AA  3454               	retlw	84	;'T'
 11033  39AB  3448               	retlw	72	;'H'
 11034  39AC  3449               	retlw	73	;'I'
 11035  39AD  344E               	retlw	78	;'N'
 11036  39AE  3447               	retlw	71	;'G'
 11037  39AF  3420               	retlw	32	;' '
 11038  39B0  3454               	retlw	84	;'T'
 11039  39B1  344F               	retlw	79	;'O'
 11040  39B2  3420               	retlw	32	;' '
 11041  39B3  3453               	retlw	83	;'S'
 11042  39B4  3445               	retlw	69	;'E'
 11043  39B5  3445               	retlw	69	;'E'
 11044  39B6  3420               	retlw	32	;' '
 11045  39B7  3448               	retlw	72	;'H'
 11046  39B8  3445               	retlw	69	;'E'
 11047  39B9  3452               	retlw	82	;'R'
 11048  39BA  3445               	retlw	69	;'E'
 11049  39BB  342E               	retlw	46	;'.'
 11050  39BC  342E               	retlw	46	;'.'
 11051  39BD  342E               	retlw	46	;'.'
 11052  39BE  3420               	retlw	32	;' '
 11053  39BF  3420               	retlw	32	;' '
 11054  39C0  3420               	retlw	32	;' '
 11055  39C1  3420               	retlw	32	;' '
 11056  39C2  3400               	retlw	0
 11057                           
 11058                           	psect	stringtext16
 11059  39C3                     __pstringtext16:	
 11060  39C3                     STR_17:	
 11061  39C3  3448               	retlw	72	;'H'
 11062  39C4  3454               	retlw	84	;'T'
 11063  39C5  3454               	retlw	84	;'T'
 11064  39C6  3450               	retlw	80	;'P'
 11065  39C7  3420               	retlw	32	;' '
 11066  39C8  3434               	retlw	52	;'4'
 11067  39C9  3431               	retlw	49	;'1'
 11068  39CA  3438               	retlw	56	;'8'
 11069  39CB  3420               	retlw	32	;' '
 11070  39CC  3449               	retlw	73	;'I'
 11071  39CD  3427               	retlw	39	;'''
 11072  39CE  344D               	retlw	77	;'M'
 11073  39CF  3420               	retlw	32	;' '
 11074  39D0  3441               	retlw	65	;'A'
 11075  39D1  3420               	retlw	32	;' '
 11076  39D2  3454               	retlw	84	;'T'
 11077  39D3  3445               	retlw	69	;'E'
 11078  39D4  3441               	retlw	65	;'A'
 11079  39D5  3450               	retlw	80	;'P'
 11080  39D6  344F               	retlw	79	;'O'
 11081  39D7  3454               	retlw	84	;'T'
 11082  39D8  3420               	retlw	32	;' '
 11083  39D9  3420               	retlw	32	;' '
 11084  39DA  3420               	retlw	32	;' '
 11085  39DB  3420               	retlw	32	;' '
 11086  39DC  3400               	retlw	0
 11087                           
 11088                           	psect	stringtext17
 11089  39DD                     __pstringtext17:	
 11090  39DD                     STR_82:	
 11091  39DD  3454               	retlw	84	;'T'
 11092  39DE  3448               	retlw	72	;'H'
 11093  39DF  3445               	retlw	69	;'E'
 11094  39E0  3420               	retlw	32	;' '
 11095  39E1  3443               	retlw	67	;'C'
 11096  39E2  3448               	retlw	72	;'H'
 11097  39E3  344F               	retlw	79	;'O'
 11098  39E4  3449               	retlw	73	;'I'
 11099  39E5  3443               	retlw	67	;'C'
 11100  39E6  3445               	retlw	69	;'E'
 11101  39E7  3420               	retlw	32	;' '
 11102  39E8  3449               	retlw	73	;'I'
 11103  39E9  3453               	retlw	83	;'S'
 11104  39EA  3420               	retlw	32	;' '
 11105  39EB  3459               	retlw	89	;'Y'
 11106  39EC  344F               	retlw	79	;'O'
 11107  39ED  3455               	retlw	85	;'U'
 11108  39EE  3452               	retlw	82	;'R'
 11109  39EF  3453               	retlw	83	;'S'
 11110  39F0  3420               	retlw	32	;' '
 11111  39F1  3420               	retlw	32	;' '
 11112  39F2  3420               	retlw	32	;' '
 11113  39F3  3400               	retlw	0
 11114                           
 11115                           	psect	stringtext18
 11116  39F4                     __pstringtext18:	
 11117  39F4                     STR_19:	
 11118  39F4  3449               	retlw	73	;'I'
 11119  39F5  3420               	retlw	32	;' '
 11120  39F6  3441               	retlw	65	;'A'
 11121  39F7  344D               	retlw	77	;'M'
 11122  39F8  3420               	retlw	32	;' '
 11123  39F9  344A               	retlw	74	;'J'
 11124  39FA  3455               	retlw	85	;'U'
 11125  39FB  3453               	retlw	83	;'S'
 11126  39FC  3454               	retlw	84	;'T'
 11127  39FD  3420               	retlw	32	;' '
 11128  39FE  3441               	retlw	65	;'A'
 11129  39FF  3420               	retlw	32	;' '
 11130  3A00  3442               	retlw	66	;'B'
 11131  3A01  3441               	retlw	65	;'A'
 11132  3A02  3444               	retlw	68	;'D'
 11133  3A03  3447               	retlw	71	;'G'
 11134  3A04  3445               	retlw	69	;'E'
 11135  3A05  3420               	retlw	32	;' '
 11136  3A06  3420               	retlw	32	;' '
 11137  3A07  3420               	retlw	32	;' '
 11138  3A08  3420               	retlw	32	;' '
 11139  3A09  3400               	retlw	0
 11140                           
 11141                           	psect	stringtext19
 11142  3A0A                     __pstringtext19:	
 11143  3A0A                     STR_16:	
 11144  3A0A  3457               	retlw	87	;'W'
 11145  3A0B  3449               	retlw	73	;'I'
 11146  3A0C  344C               	retlw	76	;'L'
 11147  3A0D  344C               	retlw	76	;'L'
 11148  3A0E  3420               	retlw	32	;' '
 11149  3A0F  3448               	retlw	72	;'H'
 11150  3A10  3441               	retlw	65	;'A'
 11151  3A11  3443               	retlw	67	;'C'
 11152  3A12  344B               	retlw	75	;'K'
 11153  3A13  3420               	retlw	32	;' '
 11154  3A14  3446               	retlw	70	;'F'
 11155  3A15  344F               	retlw	79	;'O'
 11156  3A16  3452               	retlw	82	;'R'
 11157  3A17  3420               	retlw	32	;' '
 11158  3A18  3441               	retlw	65	;'A'
 11159  3A19  342F               	retlw	47	;'/'
 11160  3A1A  3443               	retlw	67	;'C'
 11161  3A1B  3420               	retlw	32	;' '
 11162  3A1C  3420               	retlw	32	;' '
 11163  3A1D  3420               	retlw	32	;' '
 11164  3A1E  3400               	retlw	0
 11165                           
 11166                           	psect	stringtext20
 11167  3A1F                     __pstringtext20:	
 11168  3A1F                     STR_27:	
 11169  3A1F  3442               	retlw	66	;'B'
 11170  3A20  3445               	retlw	69	;'E'
 11171  3A21  344C               	retlw	76	;'L'
 11172  3A22  3449               	retlw	73	;'I'
 11173  3A23  3445               	retlw	69	;'E'
 11174  3A24  3456               	retlw	86	;'V'
 11175  3A25  3445               	retlw	69	;'E'
 11176  3A26  3420               	retlw	32	;' '
 11177  3A27  3454               	retlw	84	;'T'
 11178  3A28  3448               	retlw	72	;'H'
 11179  3A29  3445               	retlw	69	;'E'
 11180  3A2A  3420               	retlw	32	;' '
 11181  3A2B  344C               	retlw	76	;'L'
 11182  3A2C  3449               	retlw	73	;'I'
 11183  3A2D  3445               	retlw	69	;'E'
 11184  3A2E  3420               	retlw	32	;' '
 11185  3A2F  3420               	retlw	32	;' '
 11186  3A30  3420               	retlw	32	;' '
 11187  3A31  3400               	retlw	0
 11188                           
 11189                           	psect	stringtext21
 11190  3A32                     __pstringtext21:	
 11191  3A32                     STR_15:	
 11192  3A32  3448               	retlw	72	;'H'
 11193  3A33  3441               	retlw	65	;'A'
 11194  3A34  3443               	retlw	67	;'C'
 11195  3A35  344B               	retlw	75	;'K'
 11196  3A36  3420               	retlw	32	;' '
 11197  3A37  3454               	retlw	84	;'T'
 11198  3A38  3448               	retlw	72	;'H'
 11199  3A39  3445               	retlw	69	;'E'
 11200  3A3A  3420               	retlw	32	;' '
 11201  3A3B  3450               	retlw	80	;'P'
 11202  3A3C  344C               	retlw	76	;'L'
 11203  3A3D  3441               	retlw	65	;'A'
 11204  3A3E  344E               	retlw	78	;'N'
 11205  3A3F  3445               	retlw	69	;'E'
 11206  3A40  3454               	retlw	84	;'T'
 11207  3A41  3420               	retlw	32	;' '
 11208  3A42  3420               	retlw	32	;' '
 11209  3A43  3420               	retlw	32	;' '
 11210  3A44  3400               	retlw	0
 11211                           
 11212                           	psect	stringtext22
 11213  3A45                     __pstringtext22:	
 11214  3A45                     STR_10:	
 11215  3A45  3405               	retlw	5
 11216  3A46  3407               	retlw	7
 11217  3A47  3407               	retlw	7
 11218  3A48  3408               	retlw	8
 11219  3A49  342D               	retlw	45	;'-'
 11220  3A4A  342D               	retlw	45	;'-'
 11221  3A4B  3420               	retlw	32	;' '
 11222  3A4C  3420               	retlw	32	;' '
 11223  3A4D  342D               	retlw	45	;'-'
 11224  3A4E  342D               	retlw	45	;'-'
 11225  3A4F  3409               	retlw	9
 11226  3A50  3407               	retlw	7
 11227  3A51  3407               	retlw	7
 11228  3A52  3406               	retlw	6
 11229  3A53  3420               	retlw	32	;' '
 11230  3A54  340B               	retlw	11
 11231  3A55  3420               	retlw	32	;' '
 11232  3A56  3400               	retlw	0
 11233                           
 11234                           	psect	stringtext23
 11235  3A57                     __pstringtext23:	
 11236  3A57                     STR_26:	
 11237  3A57  3464               	retlw	100	;'d'
 11238  3A58  3465               	retlw	101	;'e'
 11239  3A59  346E               	retlw	110	;'n'
 11240  3A5A  3479               	retlw	121	;'y'
 11241  3A5B  3420               	retlw	32	;' '
 11242  3A5C  3461               	retlw	97	;'a'
 11243  3A5D  346E               	retlw	110	;'n'
 11244  3A5E  3479               	retlw	121	;'y'
 11245  3A5F  3420               	retlw	32	;' '
 11246  3A60  3461               	retlw	97	;'a'
 11247  3A61  346E               	retlw	110	;'n'
 11248  3A62  3479               	retlw	121	;'y'
 11249  3A63  3420               	retlw	32	;' '
 11250  3A64  3420               	retlw	32	;' '
 11251  3A65  3420               	retlw	32	;' '
 11252  3A66  3420               	retlw	32	;' '
 11253  3A67  3400               	retlw	0
 11254                           
 11255                           	psect	stringtext24
 11256  3A68                     __pstringtext24:	
 11257  3A68                     STR_35:	
 11258  3A68  3442               	retlw	66	;'B'
 11259  3A69  3455               	retlw	85	;'U'
 11260  3A6A  3454               	retlw	84	;'T'
 11261  3A6B  3454               	retlw	84	;'T'
 11262  3A6C  3445               	retlw	69	;'E'
 11263  3A6D  3452               	retlw	82	;'R'
 11264  3A6E  3420               	retlw	32	;' '
 11265  3A6F  3445               	retlw	69	;'E'
 11266  3A70  344D               	retlw	77	;'M'
 11267  3A71  3441               	retlw	65	;'A'
 11268  3A72  3449               	retlw	73	;'I'
 11269  3A73  344C               	retlw	76	;'L'
 11270  3A74  3453               	retlw	83	;'S'
 11271  3A75  3420               	retlw	32	;' '
 11272  3A76  3420               	retlw	32	;' '
 11273  3A77  3420               	retlw	32	;' '
 11274  3A78  3400               	retlw	0
 11275                           
 11276                           	psect	stringtext25
 11277  3A79                     __pstringtext25:	
 11278  3A79                     STR_32:	
 11279  3A79  3454               	retlw	84	;'T'
 11280  3A7A  3452               	retlw	82	;'R'
 11281  3A7B  3455               	retlw	85	;'U'
 11282  3A7C  3453               	retlw	83	;'S'
 11283  3A7D  3454               	retlw	84	;'T'
 11284  3A7E  3420               	retlw	32	;' '
 11285  3A7F  344E               	retlw	78	;'N'
 11286  3A80  344F               	retlw	79	;'O'
 11287  3A81  3420               	retlw	32	;' '
 11288  3A82  344F               	retlw	79	;'O'
 11289  3A83  344E               	retlw	78	;'N'
 11290  3A84  3445               	retlw	69	;'E'
 11291  3A85  3420               	retlw	32	;' '
 11292  3A86  3420               	retlw	32	;' '
 11293  3A87  3420               	retlw	32	;' '
 11294  3A88  3400               	retlw	0
 11295                           
 11296                           	psect	stringtext26
 11297  3A89                     __pstringtext26:	
 11298  3A89                     STR_30:	
 11299  3A89  3448               	retlw	72	;'H'
 11300  3A8A  3449               	retlw	73	;'I'
 11301  3A8B  3453               	retlw	83	;'S'
 11302  3A8C  3454               	retlw	84	;'T'
 11303  3A8D  344F               	retlw	79	;'O'
 11304  3A8E  3452               	retlw	82	;'R'
 11305  3A8F  3459               	retlw	89	;'Y'
 11306  3A90  3420               	retlw	32	;' '
 11307  3A91  342D               	retlw	45	;'-'
 11308  3A92  3443               	retlw	67	;'C'
 11309  3A93  3457               	retlw	87	;'W'
 11310  3A94  3420               	retlw	32	;' '
 11311  3A95  3420               	retlw	32	;' '
 11312  3A96  3420               	retlw	32	;' '
 11313  3A97  3400               	retlw	0
 11314                           
 11315                           	psect	stringtext27
 11316  3A98                     __pstringtext27:	
 11317  3A98                     STR_62:	
 11318  3A98  3446               	retlw	70	;'F'
 11319  3A99  3449               	retlw	73	;'I'
 11320  3A9A  3452               	retlw	82	;'R'
 11321  3A9B  3445               	retlw	69	;'E'
 11322  3A9C  3420               	retlw	32	;' '
 11323  3A9D  3442               	retlw	66	;'B'
 11324  3A9E  3441               	retlw	65	;'A'
 11325  3A9F  344C               	retlw	76	;'L'
 11326  3AA0  344C               	retlw	76	;'L'
 11327  3AA1  3420               	retlw	32	;' '
 11328  3AA2  3420               	retlw	32	;' '
 11329  3AA3  3420               	retlw	32	;' '
 11330  3AA4  3400               	retlw	0
 11331                           
 11332                           	psect	stringtext28
 11333  3AA5                     __pstringtext28:	
 11334  3AA5                     STR_42:	
 11335  3AA5  3455               	retlw	85	;'U'
 11336  3AA6  344E               	retlw	78	;'N'
 11337  3AA7  344C               	retlw	76	;'L'
 11338  3AA8  344F               	retlw	79	;'O'
 11339  3AA9  3443               	retlw	67	;'C'
 11340  3AAA  344B               	retlw	75	;'K'
 11341  3AAB  3449               	retlw	73	;'I'
 11342  3AAC  344E               	retlw	78	;'N'
 11343  3AAD  3447               	retlw	71	;'G'
 11344  3AAE  342E               	retlw	46	;'.'
 11345  3AAF  342E               	retlw	46	;'.'
 11346  3AB0  342E               	retlw	46	;'.'
 11347  3AB1  3400               	retlw	0
 11348                           
 11349                           	psect	stringtext29
 11350  3AB2                     __pstringtext29:	
 11351  3AB2                     STR_37:	
 11352  3AB2  3442               	retlw	66	;'B'
 11353  3AB3  3441               	retlw	65	;'A'
 11354  3AB4  3442               	retlw	66	;'B'
 11355  3AB5  3441               	retlw	65	;'A'
 11356  3AB6  3420               	retlw	32	;' '
 11357  3AB7  3457               	retlw	87	;'W'
 11358  3AB8  3445               	retlw	69	;'E'
 11359  3AB9  3452               	retlw	82	;'R'
 11360  3ABA  344B               	retlw	75	;'K'
 11361  3ABB  3420               	retlw	32	;' '
 11362  3ABC  3420               	retlw	32	;' '
 11363  3ABD  3420               	retlw	32	;' '
 11364  3ABE  3400               	retlw	0
 11365                           
 11366                           	psect	stringtext30
 11367  3ABF                     __pstringtext30:	
 11368  3ABF                     STR_61:	
 11369  3ABF  3452               	retlw	82	;'R'
 11370  3AC0  3445               	retlw	69	;'E'
 11371  3AC1  3444               	retlw	68	;'D'
 11372  3AC2  3420               	retlw	32	;' '
 11373  3AC3  3442               	retlw	66	;'B'
 11374  3AC4  3455               	retlw	85	;'U'
 11375  3AC5  344C               	retlw	76	;'L'
 11376  3AC6  344C               	retlw	76	;'L'
 11377  3AC7  3420               	retlw	32	;' '
 11378  3AC8  3420               	retlw	32	;' '
 11379  3AC9  3420               	retlw	32	;' '
 11380  3ACA  3400               	retlw	0
 11381                           
 11382                           	psect	stringtext31
 11383  3ACB                     __pstringtext31:	
 11384  3ACB                     STR_29:	
 11385  3ACB  3452               	retlw	82	;'R'
 11386  3ACC  344D               	retlw	77	;'M'
 11387  3ACD  3420               	retlw	32	;' '
 11388  3ACE  342D               	retlw	45	;'-'
 11389  3ACF  3452               	retlw	82	;'R'
 11390  3AD0  3446               	retlw	70	;'F'
 11391  3AD1  3420               	retlw	32	;' '
 11392  3AD2  342F               	retlw	47	;'/'
 11393  3AD3  3420               	retlw	32	;' '
 11394  3AD4  3420               	retlw	32	;' '
 11395  3AD5  3420               	retlw	32	;' '
 11396  3AD6  3400               	retlw	0
 11397                           
 11398                           	psect	stringtext32
 11399  3AD7                     __pstringtext32:	
 11400  3AD7                     STR_59:	
 11401  3AD7  3454               	retlw	84	;'T'
 11402  3AD8  3445               	retlw	69	;'E'
 11403  3AD9  3451               	retlw	81	;'Q'
 11404  3ADA  3455               	retlw	85	;'U'
 11405  3ADB  3449               	retlw	73	;'I'
 11406  3ADC  344C               	retlw	76	;'L'
 11407  3ADD  3441               	retlw	65	;'A'
 11408  3ADE  3420               	retlw	32	;' '
 11409  3ADF  3420               	retlw	32	;' '
 11410  3AE0  3420               	retlw	32	;' '
 11411  3AE1  3400               	retlw	0
 11412                           
 11413                           	psect	stringtext33
 11414  3AE2                     __pstringtext33:	
 11415  3AE2                     STR_58:	
 11416  3AE2  3457               	retlw	87	;'W'
 11417  3AE3  3448               	retlw	72	;'H'
 11418  3AE4  3449               	retlw	73	;'I'
 11419  3AE5  3453               	retlw	83	;'S'
 11420  3AE6  344B               	retlw	75	;'K'
 11421  3AE7  3445               	retlw	69	;'E'
 11422  3AE8  3459               	retlw	89	;'Y'
 11423  3AE9  3420               	retlw	32	;' '
 11424  3AEA  3420               	retlw	32	;' '
 11425  3AEB  3420               	retlw	32	;' '
 11426  3AEC  3400               	retlw	0
 11427                           
 11428                           	psect	stringtext34
 11429  3AED                     __pstringtext34:	
 11430  3AED                     STR_75:	
 11431  3AED  3420               	retlw	32	;' '
 11432  3AEE  3420               	retlw	32	;' '
 11433  3AEF  3442               	retlw	66	;'B'
 11434  3AF0  3449               	retlw	73	;'I'
 11435  3AF1  3454               	retlw	84	;'T'
 11436  3AF2  3420               	retlw	32	;' '
 11437  3AF3  344E               	retlw	78	;'N'
 11438  3AF4  3420               	retlw	32	;' '
 11439  3AF5  3420               	retlw	32	;' '
 11440  3AF6  3400               	retlw	0
 11441                           
 11442                           	psect	stringtext35
 11443  3AF7                     __pstringtext35:	
 11444  3AF7                     STR_6:	
 11445  3AF7  3450               	retlw	80	;'P'
 11446  3AF8  3441               	retlw	65	;'A'
 11447  3AF9  3453               	retlw	83	;'S'
 11448  3AFA  3453               	retlw	83	;'S'
 11449  3AFB  3457               	retlw	87	;'W'
 11450  3AFC  344F               	retlw	79	;'O'
 11451  3AFD  3452               	retlw	82	;'R'
 11452  3AFE  3444               	retlw	68	;'D'
 11453  3AFF  3420               	retlw	32	;' '
 11454  3B00  3400               	retlw	0
 11455                           
 11456                           	psect	stringtext36
 11457  3B01                     __pstringtext36:	
 11458  3B01                     STR_72:	
 11459  3B01  3420               	retlw	32	;' '
 11460  3B02  3454               	retlw	84	;'T'
 11461  3B03  3448               	retlw	72	;'H'
 11462  3B04  3445               	retlw	69	;'E'
 11463  3B05  3420               	retlw	32	;' '
 11464  3B06  3457               	retlw	87	;'W'
 11465  3B07  3448               	retlw	72	;'H'
 11466  3B08  3420               	retlw	32	;' '
 11467  3B09  3400               	retlw	0
 11468                           
 11469                           	psect	stringtext37
 11470  3B0A                     __pstringtext37:	
 11471  3B0A                     STR_57:	
 11472  3B0A  3456               	retlw	86	;'V'
 11473  3B0B  344F               	retlw	79	;'O'
 11474  3B0C  3444               	retlw	68	;'D'
 11475  3B0D  344B               	retlw	75	;'K'
 11476  3B0E  3441               	retlw	65	;'A'
 11477  3B0F  3420               	retlw	32	;' '
 11478  3B10  3420               	retlw	32	;' '
 11479  3B11  3420               	retlw	32	;' '
 11480  3B12  3400               	retlw	0
 11481                           
 11482                           	psect	stringtext38
 11483  3B13                     __pstringtext38:	
 11484  3B13                     STR_63:	
 11485  3B13  3457               	retlw	87	;'W'
 11486  3B14  3441               	retlw	65	;'A'
 11487  3B15  3454               	retlw	84	;'T'
 11488  3B16  3445               	retlw	69	;'E'
 11489  3B17  3452               	retlw	82	;'R'
 11490  3B18  3420               	retlw	32	;' '
 11491  3B19  3420               	retlw	32	;' '
 11492  3B1A  3420               	retlw	32	;' '
 11493  3B1B  3400               	retlw	0
 11494                           
 11495                           	psect	stringtext39
 11496  3B1C                     __pstringtext39:	
 11497  3B1C                     STR_64:	
 11498  3B1C  3425               	retlw	37	;'%'
 11499  3B1D  3463               	retlw	99	;'c'
 11500  3B1E  3425               	retlw	37	;'%'
 11501  3B1F  3463               	retlw	99	;'c'
 11502  3B20  3425               	retlw	37	;'%'
 11503  3B21  3463               	retlw	99	;'c'
 11504  3B22  3425               	retlw	37	;'%'
 11505  3B23  3463               	retlw	99	;'c'
 11506  3B24  3400               	retlw	0
 11507                           
 11508                           	psect	stringtext40
 11509  3B25                     __pstringtext40:	
 11510  3B25                     STR_12:	
 11511  3B25  344E               	retlw	78	;'N'
 11512  3B26  3455               	retlw	85	;'U'
 11513  3B27  344C               	retlw	76	;'L'
 11514  3B28  344C               	retlw	76	;'L'
 11515  3B29  3449               	retlw	73	;'I'
 11516  3B2A  3446               	retlw	70	;'F'
 11517  3B2B  3459               	retlw	89	;'Y'
 11518  3B2C  3420               	retlw	32	;' '
 11519  3B2D  3400               	retlw	0
 11520                           
 11521                           	psect	stringtext41
 11522  3B2E                     __pstringtext41:	
 11523  3B2E                     STR_77:	
 11524  3B2E  3450               	retlw	80	;'P'
 11525  3B2F  344F               	retlw	79	;'O'
 11526  3B30  3454               	retlw	84	;'T'
 11527  3B31  3441               	retlw	65	;'A'
 11528  3B32  3454               	retlw	84	;'T'
 11529  3B33  3420               	retlw	32	;' '
 11530  3B34  3420               	retlw	32	;' '
 11531  3B35  3400               	retlw	0
 11532                           
 11533                           	psect	stringtext42
 11534  3B36                     __pstringtext42:	
 11535  3B36                     STR_79:	
 11536  3B36  3420               	retlw	32	;' '
 11537  3B37  3420               	retlw	32	;' '
 11538  3B38  3454               	retlw	84	;'T'
 11539  3B39  3445               	retlw	69	;'E'
 11540  3B3A  3459               	retlw	89	;'Y'
 11541  3B3B  3420               	retlw	32	;' '
 11542  3B3C  3420               	retlw	32	;' '
 11543  3B3D  3400               	retlw	0
 11544                           
 11545                           	psect	stringtext43
 11546  3B3E                     __pstringtext43:	
 11547  3B3E                     STR_60:	
 11548  3B3E  3443               	retlw	67	;'C'
 11549  3B3F  3448               	retlw	72	;'H'
 11550  3B40  3455               	retlw	85	;'U'
 11551  3B41  3447               	retlw	71	;'G'
 11552  3B42  3420               	retlw	32	;' '
 11553  3B43  3420               	retlw	32	;' '
 11554  3B44  3420               	retlw	32	;' '
 11555  3B45  3400               	retlw	0
 11556                           
 11557                           	psect	stringtext44
 11558  3B46                     __pstringtext44:	
 11559  3B46                     STR_56:	
 11560  3B46  3442               	retlw	66	;'B'
 11561  3B47  3445               	retlw	69	;'E'
 11562  3B48  3445               	retlw	69	;'E'
 11563  3B49  3452               	retlw	82	;'R'
 11564  3B4A  3420               	retlw	32	;' '
 11565  3B4B  3420               	retlw	32	;' '
 11566  3B4C  3420               	retlw	32	;' '
 11567  3B4D  3400               	retlw	0
 11568                           
 11569                           	psect	stringtext45
 11570  3B4E                     __pstringtext45:	
 11571  3B4E                     STR_55:	
 11572  3B4E  3453               	retlw	83	;'S'
 11573  3B4F  3448               	retlw	72	;'H'
 11574  3B50  344F               	retlw	79	;'O'
 11575  3B51  3454               	retlw	84	;'T'
 11576  3B52  3420               	retlw	32	;' '
 11577  3B53  3420               	retlw	32	;' '
 11578  3B54  3420               	retlw	32	;' '
 11579  3B55  3400               	retlw	0
 11580                           
 11581                           	psect	stringtext46
 11582  3B56                     __pstringtext46:	
 11583  3B56                     STR_18:	
 11584  3B56  3449               	retlw	73	;'I'
 11585  3B57  3450               	retlw	80	;'P'
 11586  3B58  346F               	retlw	111	;'o'
 11587  3B59  3441               	retlw	65	;'A'
 11588  3B5A  3443               	retlw	67	;'C'
 11589  3B5B  3420               	retlw	32	;' '
 11590  3B5C  3420               	retlw	32	;' '
 11591  3B5D  3400               	retlw	0
 11592                           
 11593                           	psect	stringtext47
 11594  3B5E                     __pstringtext47:	
 11595  3B5E                     STR_13:	
 11596  3B5E  3444               	retlw	68	;'D'
 11597  3B5F  3445               	retlw	69	;'E'
 11598  3B60  3446               	retlw	70	;'F'
 11599  3B61  3443               	retlw	67	;'C'
 11600  3B62  344F               	retlw	79	;'O'
 11601  3B63  344E               	retlw	78	;'N'
 11602  3B64  3420               	retlw	32	;' '
 11603  3B65  3400               	retlw	0
 11604                           
 11605                           	psect	stringtext48
 11606  3B66                     __pstringtext48:	
 11607  3B66                     STR_7:	
 11608  3B66  344D               	retlw	77	;'M'
 11609  3B67  3441               	retlw	65	;'A'
 11610  3B68  3454               	retlw	84	;'T'
 11611  3B69  3452               	retlw	82	;'R'
 11612  3B6A  3449               	retlw	73	;'I'
 11613  3B6B  3458               	retlw	88	;'X'
 11614  3B6C  3420               	retlw	32	;' '
 11615  3B6D  3400               	retlw	0
 11616                           
 11617                           	psect	stringtext49
 11618  3B6E                     __pstringtext49:	
 11619  3B6E                     STR_83:	
 11620  3B6E  3428               	retlw	40	;'('
 11621  3B6F  346E               	retlw	110	;'n'
 11622  3B70  3475               	retlw	117	;'u'
 11623  3B71  346C               	retlw	108	;'l'
 11624  3B72  346C               	retlw	108	;'l'
 11625  3B73  3429               	retlw	41	;')'
 11626  3B74  3400               	retlw	0
 11627                           
 11628                           	psect	stringtext50
 11629  3B75                     __pstringtext50:	
 11630  3B75                     STR_71:	
 11631  3B75  344F               	retlw	79	;'O'
 11632  3B76  3457               	retlw	87	;'W'
 11633  3B77  3420               	retlw	32	;' '
 11634  3B78  3420               	retlw	32	;' '
 11635  3B79  3420               	retlw	32	;' '
 11636  3B7A  3420               	retlw	32	;' '
 11637  3B7B  3400               	retlw	0
 11638                           
 11639                           	psect	stringtext51
 11640  3B7C                     __pstringtext51:	
 11641  3B7C                     STR_73:	
 11642  3B7C  3449               	retlw	73	;'I'
 11643  3B7D  3454               	retlw	84	;'T'
 11644  3B7E  3445               	retlw	69	;'E'
 11645  3B7F  3420               	retlw	32	;' '
 11646  3B80  3420               	retlw	32	;' '
 11647  3B81  3420               	retlw	32	;' '
 11648  3B82  3400               	retlw	0
 11649                           
 11650                           	psect	stringtext52
 11651  3B83                     __pstringtext52:	
 11652  3B83                     STR_78:	
 11653  3B83  3420               	retlw	32	;' '
 11654  3B84  3420               	retlw	32	;' '
 11655  3B85  3445               	retlw	69	;'E'
 11656  3B86  3457               	retlw	87	;'W'
 11657  3B87  3420               	retlw	32	;' '
 11658  3B88  3420               	retlw	32	;' '
 11659  3B89  3400               	retlw	0
 11660                           
 11661                           	psect	stringtext53
 11662  3B8A                     __pstringtext53:	
 11663  3B8A                     STR_70:	
 11664  3B8A  3420               	retlw	32	;' '
 11665  3B8B  3420               	retlw	32	;' '
 11666  3B8C  3446               	retlw	70	;'F'
 11667  3B8D  344F               	retlw	79	;'O'
 11668  3B8E  344C               	retlw	76	;'L'
 11669  3B8F  344C               	retlw	76	;'L'
 11670  3B90  3400               	retlw	0
 11671                           
 11672                           	psect	stringtext54
 11673  3B91                     __pstringtext54:	
 11674  3B91                     STR_76:	
 11675  3B91  3445               	retlw	69	;'E'
 11676  3B92  344F               	retlw	79	;'O'
 11677  3B93  3420               	retlw	32	;' '
 11678  3B94  3420               	retlw	32	;' '
 11679  3B95  3420               	retlw	32	;' '
 11680  3B96  3400               	retlw	0
 11681                           
 11682                           	psect	stringtext55
 11683  3B97                     __pstringtext55:	
 11684  3B97                     STR_14:	
 11685  3B97  3448               	retlw	72	;'H'
 11686  3B98  3441               	retlw	65	;'A'
 11687  3B99  3458               	retlw	88	;'X'
 11688  3B9A  3420               	retlw	32	;' '
 11689  3B9B  3420               	retlw	32	;' '
 11690  3B9C  3400               	retlw	0
 11691                           
 11692                           	psect	stringtext56
 11693  3B9D                     __pstringtext56:	
 11694  3B9D                     STR_8:	
 11695  3B9D  3445               	retlw	69	;'E'
 11696  3B9E  3458               	retlw	88	;'X'
 11697  3B9F  3449               	retlw	73	;'I'
 11698  3BA0  3454               	retlw	84	;'T'
 11699  3BA1  3420               	retlw	32	;' '
 11700  3BA2  3400               	retlw	0
 11701                           
 11702                           	psect	stringtext57
 11703  3BA3                     __pstringtext57:	
 11704  3BA3                     STR_5:	
 11705  3BA3  3453               	retlw	83	;'S'
 11706  3BA4  344C               	retlw	76	;'L'
 11707  3BA5  344F               	retlw	79	;'O'
 11708  3BA6  3454               	retlw	84	;'T'
 11709  3BA7  3420               	retlw	32	;' '
 11710  3BA8  3400               	retlw	0
 11711                           
 11712                           	psect	stringtext58
 11713  3BA9                     __pstringtext58:	
 11714  3BA9                     STR_74:	
 11715  3BA9  3420               	retlw	32	;' '
 11716  3BAA  3452               	retlw	82	;'R'
 11717  3BAB  3441               	retlw	65	;'A'
 11718  3BAC  3442               	retlw	66	;'B'
 11719  3BAD  3400               	retlw	0
 11720                           
 11721                           	psect	stringtext59
 11722  3BAE                     __pstringtext59:	
 11723  3BAE                     STR_48:	
 11724  3BAE  3456               	retlw	86	;'V'
 11725  3BAF  3444               	retlw	68	;'D'
 11726  3BB0  344B               	retlw	75	;'K'
 11727  3BB1  3441               	retlw	65	;'A'
 11728  3BB2  3400               	retlw	0
 11729                           
 11730                           	psect	stringtext60
 11731  3BB3                     __pstringtext60:	
 11732  3BB3                     STR_50:	
 11733  3BB3  3454               	retlw	84	;'T'
 11734  3BB4  3451               	retlw	81	;'Q'
 11735  3BB5  344C               	retlw	76	;'L'
 11736  3BB6  3441               	retlw	65	;'A'
 11737  3BB7  3400               	retlw	0
 11738                           
 11739                           	psect	stringtext61
 11740  3BB8                     __pstringtext61:	
 11741  3BB8                     STR_53:	
 11742  3BB8  3446               	retlw	70	;'F'
 11743  3BB9  3449               	retlw	73	;'I'
 11744  3BBA  3452               	retlw	82	;'R'
 11745  3BBB  3445               	retlw	69	;'E'
 11746  3BBC  3400               	retlw	0
 11747                           
 11748                           	psect	stringtext62
 11749  3BBD                     __pstringtext62:	
 11750  3BBD                     STR_51:	
 11751  3BBD  3443               	retlw	67	;'C'
 11752  3BBE  3448               	retlw	72	;'H'
 11753  3BBF  3455               	retlw	85	;'U'
 11754  3BC0  3447               	retlw	71	;'G'
 11755  3BC1  3400               	retlw	0
 11756                           
 11757                           	psect	stringtext63
 11758  3BC2                     __pstringtext63:	
 11759  3BC2                     STR_52:	
 11760  3BC2  3452               	retlw	82	;'R'
 11761  3BC3  3445               	retlw	69	;'E'
 11762  3BC4  3442               	retlw	66	;'B'
 11763  3BC5  344C               	retlw	76	;'L'
 11764  3BC6  3400               	retlw	0
 11765                           
 11766                           	psect	stringtext64
 11767  3BC7                     __pstringtext64:	
 11768  3BC7                     STR_47:	
 11769  3BC7  3442               	retlw	66	;'B'
 11770  3BC8  3445               	retlw	69	;'E'
 11771  3BC9  3445               	retlw	69	;'E'
 11772  3BCA  3452               	retlw	82	;'R'
 11773  3BCB  3400               	retlw	0
 11774                           
 11775                           	psect	stringtext65
 11776  3BCC                     __pstringtext65:	
 11777  3BCC                     STR_54:	
 11778  3BCC  3457               	retlw	87	;'W'
 11779  3BCD  3441               	retlw	65	;'A'
 11780  3BCE  3454               	retlw	84	;'T'
 11781  3BCF  3452               	retlw	82	;'R'
 11782  3BD0  3400               	retlw	0
 11783                           
 11784                           	psect	stringtext66
 11785  3BD1                     __pstringtext66:	
 11786  3BD1                     STR_46:	
 11787  3BD1  3453               	retlw	83	;'S'
 11788  3BD2  3448               	retlw	72	;'H'
 11789  3BD3  344F               	retlw	79	;'O'
 11790  3BD4  3454               	retlw	84	;'T'
 11791  3BD5  3400               	retlw	0
 11792                           
 11793                           	psect	stringtext67
 11794  3BD6                     __pstringtext67:	
 11795  3BD6                     STR_49:	
 11796  3BD6  3457               	retlw	87	;'W'
 11797  3BD7  3453               	retlw	83	;'S'
 11798  3BD8  344B               	retlw	75	;'K'
 11799  3BD9  3459               	retlw	89	;'Y'
 11800  3BDA  3400               	retlw	0
 11801                           
 11802                           	psect	stringtext68
 11803  3BDB                     __pstringtext68:	
 11804  3BDB                     STR_45:	
 11805  3BDB  344C               	retlw	76	;'L'
 11806  3BDC  344F               	retlw	79	;'O'
 11807  3BDD  3443               	retlw	67	;'C'
 11808  3BDE  344B               	retlw	75	;'K'
 11809  3BDF  3400               	retlw	0
 11810                           
 11811                           	psect	stringtext69
 11812  3BE0                     __pstringtext69:	
 11813  3BE0                     STR_44:	
 11814  3BE0  344F               	retlw	79	;'O'
 11815  3BE1  3450               	retlw	80	;'P'
 11816  3BE2  3445               	retlw	69	;'E'
 11817  3BE3  344E               	retlw	78	;'N'
 11818  3BE4  3400               	retlw	0
 11819                           
 11820                           	psect	stringtext70
 11821  3BE5                     __pstringtext70:	
 11822  3BE5                     STR_40:	
 11823  3BE5  3450               	retlw	80	;'P'
 11824  3BE6  3445               	retlw	69	;'E'
 11825  3BE7  3457               	retlw	87	;'W'
 11826  3BE8  3420               	retlw	32	;' '
 11827  3BE9  3400               	retlw	0
 11828                           
 11829                           	psect	stringtext71
 11830  3BEA                     __pstringtext71:	
 11831  3BEA                     STR_9:	
 11832  3BEA  344E               	retlw	78	;'N'
 11833  3BEB  3455               	retlw	85	;'U'
 11834  3BEC  344C               	retlw	76	;'L'
 11835  3BED  344C               	retlw	76	;'L'
 11836  3BEE  3400               	retlw	0
 11837                           
 11838                           	psect	stringtext72
 11839  3BEF                     __pstringtext72:	
 11840  3BEF                     STR_4:	
 11841  3BEF  344D               	retlw	77	;'M'
 11842  3BF0  3445               	retlw	69	;'E'
 11843  3BF1  344E               	retlw	78	;'N'
 11844  3BF2  3455               	retlw	85	;'U'
 11845  3BF3  3400               	retlw	0
 11846                           
 11847                           	psect	stringtext73
 11848  3BF4                     __pstringtext73:	
 11849  3BF4                     STR_2:	
 11850  3BF4  3444               	retlw	68	;'D'
 11851  3BF5  344F               	retlw	79	;'O'
 11852  3BF6  3457               	retlw	87	;'W'
 11853  3BF7  344E               	retlw	78	;'N'
 11854  3BF8  3400               	retlw	0
 11855                           
 11856                           	psect	stringtext74
 11857  3BF9                     __pstringtext74:	
 11858  3BF9                     STR_1:	
 11859  3BF9  3420               	retlw	32	;' '
 11860  3BFA  3420               	retlw	32	;' '
 11861  3BFB  3455               	retlw	85	;'U'
 11862  3BFC  3450               	retlw	80	;'P'
 11863  3BFD  3400               	retlw	0
 11864                           
 11865                           	psect	stringtext75
 11866  3BFE                     __pstringtext75:	
 11867  3BFE                     STR_41:	
 11868  3BFE  3425               	retlw	37	;'%'
 11869  3BFF  3434               	retlw	52	;'4'
 11870  3C00  3464               	retlw	100	;'d'
 11871  3C01  3400               	retlw	0
 11872                           
 11873                           	psect	stringtext76
 11874  3C02                     __pstringtext76:	
 11875  3C02                     STR_69:	
 11876  3C02  3425               	retlw	37	;'%'
 11877  3C03  3473               	retlw	115	;'s'
 11878  3C04  3400               	retlw	0
 11879                           
 11880                           	psect	stringtext77
 11881  0000                     __pstringtext77:	
 11882  287D                     
 11883                           ; #config settings
 11884  0000                     
 11885                           	psect	cinit
 11886  0018                     start_initialization:	
 11887  0018                     __initialization:		;BIGRAM
 11888                           
 11889                           ; Initialize objects allocated to BIGRAM
 11890  0018  3000               	movlw	low __pidataBIGRAM
 11891  0019  0084               	movwf	4
 11892  001A  30A7               	movlw	(high __pidataBIGRAM)| (0+128)
 11893  001B  0085               	movwf	5
 11894  001C  30F0               	movlw	low (0+9968)
 11895  001D  0086               	movwf	6
 11896  001E  3026               	movlw	high (0+9968)
 11897  001F  0087               	movwf	7
 11898  0020  3001               	movlw	1
 11899  0021  00FF               	movwf	btemp+1
 11900  0022  3000               	movlw	0
 11901  0023  31B2  22DE  3180   	fcall	init_ram
 11902                           
 11903                           ; Initialize objects allocated to BANK1
 11904  0026  3000               	movlw	low __pidataBANK1
 11905  0027  0084               	movwf	4
 11906  0028  3090               	movlw	(high __pidataBANK1)| (0+128)
 11907  0029  0085               	movwf	5
 11908  002A  30C7               	movlw	low __pdataBANK1
 11909  002B  0086               	movwf	6
 11910  002C  3000               	movlw	high __pdataBANK1
 11911  002D  0087               	movwf	7
 11912  002E  3000               	movlw	0
 11913  002F  00FF               	movwf	btemp+1
 11914  0030  300F               	movlw	15
 11915  0031  31B2  22DE  3180   	fcall	init_ram
 11916                           
 11917                           ; Initialize objects allocated to BANK2
 11918  0034  0022               	movlb	2	; select bank2
 11919  0035  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
 11920  0038  00EB               	movwf	__pdataBANK2& (0+127)
 11921  0039  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
 11922  003C  00EC               	movwf	(__pdataBANK2+1)& (0+127)
 11923                           
 11924                           ; Initialize objects allocated to BANK3
 11925  003D  3018               	movlw	low __pidataBANK3
 11926  003E  0084               	movwf	4
 11927  003F  30B4               	movlw	(high __pidataBANK3)| (0+128)
 11928  0040  0085               	movwf	5
 11929  0041  30D1               	movlw	low __pdataBANK3
 11930  0042  0086               	movwf	6
 11931  0043  3001               	movlw	high __pdataBANK3
 11932  0044  0087               	movwf	7
 11933  0045  3000               	movlw	0
 11934  0046  00FF               	movwf	btemp+1
 11935  0047  3017               	movlw	23
 11936  0048  31B2  22DE  3180   	fcall	init_ram
 11937                           
 11938                           ; Initialize objects allocated to BANK4
 11939  004B  3080               	movlw	low __pidataBANK4
 11940  004C  0084               	movwf	4
 11941  004D  30AA               	movlw	(high __pidataBANK4)| (0+128)
 11942  004E  0085               	movwf	5
 11943  004F  3020               	movlw	low __pdataBANK4
 11944  0050  0086               	movwf	6
 11945  0051  3002               	movlw	high __pdataBANK4
 11946  0052  0087               	movwf	7
 11947  0053  3000               	movlw	0
 11948  0054  00FF               	movwf	btemp+1
 11949  0055  3048               	movlw	72
 11950  0056  31B2  22DE  3180   	fcall	init_ram
 11951                           
 11952                           ; Initialize objects allocated to BANK5
 11953  0059  3030               	movlw	low __pidataBANK5
 11954  005A  0084               	movwf	4
 11955  005B  30B5               	movlw	(high __pidataBANK5)| (0+128)
 11956  005C  0085               	movwf	5
 11957  005D  30CA               	movlw	low __pdataBANK5
 11958  005E  0086               	movwf	6
 11959  005F  3002               	movlw	high __pdataBANK5
 11960  0060  0087               	movwf	7
 11961  0061  3000               	movlw	0
 11962  0062  00FF               	movwf	btemp+1
 11963  0063  3023               	movlw	35
 11964  0064  31B2  22DE  3180   	fcall	init_ram
 11965                           
 11966                           ; Initialize objects allocated to BANK6
 11967  0067  30C8               	movlw	low __pidataBANK6
 11968  0068  0084               	movwf	4
 11969  0069  30AA               	movlw	(high __pidataBANK6)| (0+128)
 11970  006A  0085               	movwf	5
 11971  006B  3020               	movlw	low __pdataBANK6
 11972  006C  0086               	movwf	6
 11973  006D  3003               	movlw	high __pdataBANK6
 11974  006E  0087               	movwf	7
 11975  006F  3000               	movlw	0
 11976  0070  00FF               	movwf	btemp+1
 11977  0071  3049               	movlw	73
 11978  0072  31B2  22DE  3180   	fcall	init_ram
 11979                           
 11980                           ; Initialize objects allocated to BANK7
 11981  0075  305B               	movlw	low __pidataBANK7
 11982  0076  0084               	movwf	4
 11983  0077  30AB               	movlw	(high __pidataBANK7)| (0+128)
 11984  0078  0085               	movwf	5
 11985  0079  30A0               	movlw	low __pdataBANK7
 11986  007A  0086               	movwf	6
 11987  007B  3003               	movlw	high __pdataBANK7
 11988  007C  0087               	movwf	7
 11989  007D  3000               	movlw	0
 11990  007E  00FF               	movwf	btemp+1
 11991  007F  304C               	movlw	76
 11992  0080  31B2  22DE  3180   	fcall	init_ram
 11993                           
 11994                           ; Initialize objects allocated to BANK8
 11995  0083  3014               	movlw	low __pidataBANK8
 11996  0084  0084               	movwf	4
 11997  0085  30B7               	movlw	(high __pidataBANK8)| (0+128)
 11998  0086  0085               	movwf	5
 11999  0087  3020               	movlw	low __pdataBANK8
 12000  0088  0086               	movwf	6
 12001  0089  3004               	movlw	high __pdataBANK8
 12002  008A  0087               	movwf	7
 12003  008B  3000               	movlw	0
 12004  008C  00FF               	movwf	btemp+1
 12005  008D  3038               	movlw	56
 12006  008E  31B2  22DE  3180   	fcall	init_ram
 12007                           
 12008                           ; Initialize objects allocated to BANK10
 12009  0091  3085               	movlw	low __pidataBANK10
 12010  0092  0084               	movwf	4
 12011  0093  30B7               	movlw	(high __pidataBANK10)| (0+128)
 12012  0094  0085               	movwf	5
 12013  0095  3020               	movlw	low __pdataBANK10
 12014  0096  0086               	movwf	6
 12015  0097  3005               	movlw	high __pdataBANK10
 12016  0098  0087               	movwf	7
 12017  0099  3000               	movlw	0
 12018  009A  00FF               	movwf	btemp+1
 12019  009B  303A               	movlw	58
 12020  009C  31B2  22DE  3180   	fcall	init_ram
 12021                           
 12022                           ; Clear objects allocated to COMMON
 12023  009F  01FC               	clrf	__pbssCOMMON& (0+127)
 12024                           
 12025                           ; Clear objects allocated to BANK1
 12026  00A0  30A0               	movlw	low __pbssBANK1
 12027  00A1  0084               	movwf	4
 12028  00A2  3000               	movlw	high __pbssBANK1
 12029  00A3  0085               	movwf	5
 12030  00A4  3027               	movlw	39
 12031  00A5  00FE               	movwf	btemp
 12032  00A6  3000               	movlw	0
 12033  00A7  00FF               	movwf	btemp+1
 12034  00A8  31B2  22D2  3180   	fcall	clear_ram0
 12035                           
 12036                           ; Clear objects allocated to BANK2
 12037  00AB  3020               	movlw	low __pbssBANK2
 12038  00AC  0084               	movwf	4
 12039  00AD  3001               	movlw	high __pbssBANK2
 12040  00AE  0085               	movwf	5
 12041  00AF  304B               	movlw	75
 12042  00B0  00FE               	movwf	btemp
 12043  00B1  3000               	movlw	0
 12044  00B2  00FF               	movwf	btemp+1
 12045  00B3  31B2  22D2  3180   	fcall	clear_ram0
 12046                           
 12047                           ; Clear objects allocated to BANK3
 12048  00B6  30A0               	movlw	low __pbssBANK3
 12049  00B7  0084               	movwf	4
 12050  00B8  3001               	movlw	high __pbssBANK3
 12051  00B9  0085               	movwf	5
 12052  00BA  3031               	movlw	49
 12053  00BB  00FE               	movwf	btemp
 12054  00BC  3000               	movlw	0
 12055  00BD  00FF               	movwf	btemp+1
 12056  00BE  31B2  22D2  3180   	fcall	clear_ram0
 12057                           
 12058                           ; Clear objects allocated to BANK5
 12059  00C1  30A0               	movlw	low __pbssBANK5
 12060  00C2  0084               	movwf	4
 12061  00C3  3002               	movlw	high __pbssBANK5
 12062  00C4  0085               	movwf	5
 12063  00C5  302A               	movlw	42
 12064  00C6  00FE               	movwf	btemp
 12065  00C7  3000               	movlw	0
 12066  00C8  00FF               	movwf	btemp+1
 12067  00C9  31B2  22D2  3180   	fcall	clear_ram0
 12068                           
 12069                           ; Clear objects allocated to BANK9
 12070  00CC  30A0               	movlw	low __pbssBANK9
 12071  00CD  0084               	movwf	4
 12072  00CE  3004               	movlw	high __pbssBANK9
 12073  00CF  0085               	movwf	5
 12074  00D0  303D               	movlw	61
 12075  00D1  00FE               	movwf	btemp
 12076  00D2  3000               	movlw	0
 12077  00D3  00FF               	movwf	btemp+1
 12078  00D4  31B2  22D2  3180   	fcall	clear_ram0
 12079                           
 12080                           ; Clear objects allocated to BANK11
 12081  00D7  30A0               	movlw	low __pbssBANK11
 12082  00D8  0084               	movwf	4
 12083  00D9  3005               	movlw	high __pbssBANK11
 12084  00DA  0085               	movwf	5
 12085  00DB  3028               	movlw	40
 12086  00DC  00FE               	movwf	btemp
 12087  00DD  3000               	movlw	0
 12088  00DE  00FF               	movwf	btemp+1
 12089  00DF  31B2  22D2         	fcall	clear_ram0
 12090  00E1                     end_of_initialization:	
 12091                           ;End of C runtime variable initialization code
 12092                           
 12093  00E1                     __end_of__initialization:	
 12094  00E1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 12095  00E2  0020               	movlb	0
 12096  00E3  3186  2E61         	ljmp	_main	;jump to C main() function
 12097                           
 12098                           	psect	bssCOMMON
 12099  007C                     __pbssCOMMON:	
 12100  007C                     _Shot_Index:	
 12101  007C                     	ds	1
 12102                           
 12103                           	psect	bssBANK1
 12104  00A0                     __pbssBANK1:	
 12105  00A0                     _matrix_leds_idx:	
 12106  00A0                     	ds	2
 12107  00A2                     _locked_leds:	
 12108  00A2                     	ds	2
 12109  00A4                     _locked_locking_leds_idx:	
 12110  00A4                     	ds	2
 12111  00A6                     _flashy_option_size:	
 12112  00A6                     	ds	2
 12113  00A8                     _flashy_option_idx:	
 12114  00A8                     	ds	2
 12115  00AA                     _deaths:	
 12116  00AA                     	ds	2
 12117  00AC                     _flashy_scroll_rate:	
 12118  00AC                     	ds	2
 12119  00AE                     _flashy_sparkle_rate:	
 12120  00AE                     	ds	2
 12121  00B0                     _flashy_leds_state_track:	
 12122  00B0                     	ds	2
 12123  00B2                     _flashy_leds_idx:	
 12124  00B2                     	ds	2
 12125  00B4                     _menu_option_size:	
 12126  00B4                     	ds	2
 12127  00B6                     _menu_option_idx:	
 12128  00B6                     	ds	2
 12129  00B8                     _oddeven:	
 12130  00B8                     	ds	2
 12131  00BA                     _currentTask:	
 12132  00BA                     	ds	2
 12133  00BC                     _slot_taskData:	
 12134  00BC                     	ds	2
 12135  00BE                     _TMR0_InterruptHandler:	
 12136  00BE                     	ds	2
 12137  00C0                     _timer0ReloadVal16bit:	
 12138  00C0                     	ds	2
 12139  00C2                     _matrix_found:	
 12140  00C2                     	ds	1
 12141  00C3                     _pw_found:	
 12142  00C3                     	ds	1
 12143  00C4                     _badge_locked:	
 12144  00C4                     	ds	1
 12145  00C5                     _secret_value:	
 12146  00C5                     	ds	2
 12147                           
 12148                           	psect	dataBANK1
 12149  00C7                     __pdataBANK1:	
 12150  00C7                     marquee_speedy@F14090:	
 12151  00C7                     	ds	5
 12152  00CC                     _randx:	
 12153  00CC                     	ds	4
 12154  00D0                     _Leds_idx:	
 12155  00D0                     	ds	2
 12156  00D2                     _locked_lock_base_leds:	
 12157  00D2                     	ds	2
 12158  00D4                     _FLASHY_TEXT_SECRET_TEST:	
 12159  00D4                     	ds	2
 12160                           
 12161                           	psect	bssBANK2
 12162  0120                     __pbssBANK2:	
 12163  0120                     _matrix_option_size:	
 12164  0120                     	ds	2
 12165  0122                     _matrix_option_idx:	
 12166  0122                     	ds	2
 12167  0124                     _TMR4_InterruptHandler:	
 12168  0124                     	ds	2
 12169  0126                     _TMR2_InterruptHandler:	
 12170  0126                     	ds	2
 12171  0128                     _secret_task:	
 12172  0128                     	ds	13
 12173  0135                     _locked_task:	
 12174  0135                     	ds	13
 12175  0142                     _slot_task:	
 12176  0142                     	ds	13
 12177  014F                     _menu_task:	
 12178  014F                     	ds	13
 12179  015C                     _flashy_task:	
 12180  015C                     	ds	13
 12181  0169                     _locked_secret_value:	
 12182  0169                     	ds	2
 12183                           
 12184                           	psect	dataBANK2
 12185  016B                     __pdataBANK2:	
 12186  016B                     _FLASHY_TEXT:	
 12187  016B                     	ds	2
 12188                           
 12189                           	psect	bssBANK3
 12190  01A0                     __pbssBANK3:	
 12191  01A0                     _schedulerInst:	
 12192  01A0                     	ds	18
 12193  01B2                     _badge_inst:	
 12194  01B2                     	ds	18
 12195  01C4                     _matrix_task:	
 12196  01C4                     	ds	13
 12197                           
 12198                           	psect	dataBANK3
 12199  01D1                     __pdataBANK3:	
 12200  01D1                     _Shot_Options:	
 12201  01D1                     	ds	18
 12202  01E3                     marquee@F14099:	
 12203  01E3                     	ds	5
 12204                           
 12205                           	psect	dataBANK4
 12206  0220                     __pdataBANK4:	
 12207  0220                     _locked_locking_leds:	
 12208  0220                     	ds	12
 12209  022C                     _menu_option:	
 12210  022C                     	ds	10
 12211  0236                     _secret_inputs:	
 12212  0236                     	ds	25
 12213  024F                     _locked_secret_inputs:	
 12214  024F                     	ds	25
 12215                           
 12216                           	psect	bssBANK5
 12217  02A0                     __pbssBANK5:	
 12218  02A0                     _secret_TaskData:	
 12219  02A0                     	ds	14
 12220  02AE                     _locked_TaskData:	
 12221  02AE                     	ds	14
 12222  02BC                     _menu_TaskData:	
 12223  02BC                     	ds	14
 12224                           
 12225                           	psect	dataBANK5
 12226  02CA                     __pdataBANK5:	
 12227  02CA                     _menu_options_leds:	
 12228  02CA                     	ds	10
 12229  02D4                     _matrix_secret_inputs:	
 12230  02D4                     	ds	25
 12231                           
 12232                           	psect	dataBANK6
 12233  0320                     __pdataBANK6:	
 12234  0320                     _Shot_Options_Long:	
 12235  0320                     	ds	18
 12236  0332                     _Slot_Wheel:	
 12237  0332                     	ds	55
 12238                           
 12239                           	psect	dataBANK7
 12240  03A0                     __pdataBANK7:	
 12241  03A0                     _roundabout_leds_inverse:	
 12242  03A0                     	ds	28
 12243  03BC                     _roundabout_leds:	
 12244  03BC                     	ds	28
 12245  03D8                     _matrix_option:	
 12246  03D8                     	ds	20
 12247                           
 12248                           	psect	dataBANK8
 12249  0420                     __pdataBANK8:	
 12250  0420                     _curtain_leds_inverse:	
 12251  0420                     	ds	28
 12252  043C                     _curtain_leds:	
 12253  043C                     	ds	28
 12254                           
 12255                           	psect	bssBANK9
 12256  04A0                     __pbssBANK9:	
 12257  04A0                     _matrix_TaskData:	
 12258  04A0                     	ds	31
 12259  04BF                     _flashy_TaskData:	
 12260  04BF                     	ds	30
 12261                           
 12262                           	psect	dataBANK10
 12263  0520                     __pdataBANK10:	
 12264  0520                     _flashy_option:	
 12265  0520                     	ds	58
 12266                           
 12267                           	psect	bssBANK11
 12268  05A0                     __pbssBANK11:	
 12269  05A0                     _slot_TaskData:	
 12270  05A0                     	ds	40
 12271                           
 12272                           	psect	inittext
 12273  32DE                     init_ram:	
 12274  32DE  00FE               	movwf	126
 12275  32DF                     initloop:	
 12276  32DF  0012               	moviw fsr0++
 12277  32E0  001E               	movwi fsr1++
 12278  32E1  3001               	movlw	1
 12279  32E2  02FE               	subwf	126,f
 12280  32E3  3000               	movlw	0
 12281  32E4  3BFF               	subwfb	127,f
 12282  32E5  087F               	movf	127,w
 12283  32E6  047E               	iorwf	126,w
 12284  32E7  1903               	btfsc	3,2
 12285  32E8  3400               	retlw	0
 12286  32E9  2ADF               	goto	initloop
 12287                           
 12288                           	psect	clrtext
 12289  32D2                     clear_ram0:	
 12290                           ;	Called with FSR0 containing the base address, and
 12291                           ;	btemp/btemp+1 has the size to clear
 12292                           
 12293  32D2  0064               	clrwdt	;clear the watchdog before getting into this loop
 12294  32D3                     clrloop0:	
 12295  32D3  0180               	clrf	0	;clear RAM location pointed to by FSR
 12296  32D4  3101               	addfsr 0,1
 12297  32D5  3001               	movlw	1
 12298  32D6  02FE               	subwf	126,f
 12299  32D7  3000               	movlw	0
 12300  32D8  3BFF               	subwfb	127,f
 12301  32D9  087F               	movf	127,w
 12302  32DA  047E               	iorwf	126,w
 12303  32DB  1903               	btfsc	3,2
 12304  32DC  3400               	retlw	0	;all done for this memory range, return
 12305  32DD  2AD3               	goto	clrloop0	;have we reached the end yet?
 12306                           
 12307                           	psect	cstackBANK1
 12308  00D6                     __pcstackBANK1:	
 12309  00D6                     schedulerExecute@currentSystemTick:	
 12310                           
 12311                           ; 2 bytes @ 0x0
 12312  00D6                     	ds	2
 12313  00D8                     schedulerExecute@taskLastSystemTick:	
 12314                           
 12315                           ; 2 bytes @ 0x2
 12316  00D8                     	ds	2
 12317  00DA                     schedulerExecute@tickDelta:	
 12318                           
 12319                           ; 2 bytes @ 0x4
 12320  00DA                     	ds	2
 12321  00DC                     schedulerExecute@scheduler:	
 12322                           
 12323                           ; 1 bytes @ 0x6
 12324  00DC                     	ds	1
 12325  00DD                     schedulerExecute@k:	
 12326                           
 12327                           ; 1 bytes @ 0x7
 12328  00DD                     	ds	1
 12329                           
 12330                           	psect	cstackCOMMON
 12331  0070                     __pcstackCOMMON:	
 12332  0070                     ?_isdigit:	
 12333  0070                     ?_TMR2_StartTimer:	
 12334                           ; 1 bit 
 12335                           
 12336  0070                     ?_TMR4_StartTimer:	
 12337                           ; 1 bytes @ 0x0
 12338                           
 12339  0070                     ?_PIN_MANAGER_Initialize:	
 12340                           ; 1 bytes @ 0x0
 12341                           
 12342  0070                     ?_OSCILLATOR_Initialize:	
 12343                           ; 1 bytes @ 0x0
 12344                           
 12345  0070                     ?_WDT_Initialize:	
 12346                           ; 1 bytes @ 0x0
 12347                           
 12348  0070                     ?_PWM2_Initialize:	
 12349                           ; 1 bytes @ 0x0
 12350                           
 12351  0070                     ?_TMR0_Initialize:	
 12352                           ; 1 bytes @ 0x0
 12353                           
 12354  0070                     ?_TMR0_DefaultInterruptHandler:	
 12355                           ; 1 bytes @ 0x0
 12356                           
 12357  0070                     ??_TMR0_DefaultInterruptHandler:	
 12358                           ; 1 bytes @ 0x0
 12359                           
 12360  0070                     ?_TMR0_StartTimer:	
 12361                           ; 1 bytes @ 0x0
 12362                           
 12363  0070                     ?_TMR0_CallBack:	
 12364                           ; 1 bytes @ 0x0
 12365                           
 12366  0070                     ??_TMR0_CallBack:	
 12367                           ; 1 bytes @ 0x0
 12368                           
 12369  0070                     ?_nullifyBadge_segDisplayRegister:	
 12370                           ; 1 bytes @ 0x0
 12371                           
 12372  0070                     ?_nullifyBadge_segDisplayErase:	
 12373                           ; 1 bytes @ 0x0
 12374                           
 12375  0070                     ?_nullifyBadge_segDisplayForceUpdate:	
 12376                           ; 1 bytes @ 0x0
 12377                           
 12378  0070                     ?_nullifyBadge_platformInit:	
 12379                           ; 1 bytes @ 0x0
 12380                           
 12381  0070                     ?_displayL2_Initialize:	
 12382                           ; 1 bytes @ 0x0
 12383                           
 12384  0070                     ?_displayL2_ForceUpdate:	
 12385                           ; 1 bytes @ 0x0
 12386                           
 12387  0070                     ?_displayL2_EraseSegDisplay:	
 12388                           ; 1 bytes @ 0x0
 12389                           
 12390  0070                     ?_displayL2_ClrUserLeds:	
 12391                           ; 1 bytes @ 0x0
 12392                           
 12393  0070                     ?_displayL1_Update:	
 12394                           ; 1 bytes @ 0x0
 12395                           
 12396  0070                     ?_SPI1_Initialize:	
 12397                           ; 1 bytes @ 0x0
 12398                           
 12399  0070                     ?_SPI1_Exchange8bit:	
 12400                           ; 1 bytes @ 0x0
 12401                           
 12402  0070                     ?_PWM5_Initialize:	
 12403                           ; 1 bytes @ 0x0
 12404                           
 12405  0070                     ?_PWM6_Initialize:	
 12406                           ; 1 bytes @ 0x0
 12407                           
 12408  0070                     ?_PWM1_Initialize:	
 12409                           ; 1 bytes @ 0x0
 12410                           
 12411  0070                     ?_TMR2_Initialize:	
 12412                           ; 1 bytes @ 0x0
 12413                           
 12414  0070                     ?_TMR4_Initialize:	
 12415                           ; 1 bytes @ 0x0
 12416                           
 12417  0070                     ?_SYSTEM_Initialize:	
 12418                           ; 1 bytes @ 0x0
 12419                           
 12420  0070                     ?_TMR0_ISR:	
 12421                           ; 1 bytes @ 0x0
 12422                           
 12423  0070                     ??_TMR0_ISR:	
 12424                           ; 1 bytes @ 0x0
 12425                           
 12426  0070                     ?_INTERRUPT_InterruptManager:	
 12427                           ; 1 bytes @ 0x0
 12428                           
 12429  0070                     ??_INTERRUPT_InterruptManager:	
 12430                           ; 1 bytes @ 0x0
 12431                           
 12432  0070                     ?_scheduler_TaskRun:	
 12433                           ; 1 bytes @ 0x0
 12434                           
 12435  0070                     ?_scheduler_Init:	
 12436                           ; 1 bytes @ 0x0
 12437                           
 12438  0070                     ?_scheduler_TaskInit:	
 12439                           ; 1 bytes @ 0x0
 12440                           
 12441  0070                     ?_schedulerExecute:	
 12442                           ; 1 bytes @ 0x0
 12443                           
 12444  0070                     ?_led_rand:	
 12445                           ; 1 bytes @ 0x0
 12446                           
 12447  0070                     ?_main:	
 12448                           ; 1 bytes @ 0x0
 12449                           
 12450  0070                     ?_nullifyBadge_userLedsRegister:	
 12451                           ; 1 bytes @ 0x0
 12452                           
 12453  0070                     ?_nullifyBadge_userLedsClr:	
 12454                           ; 1 bytes @ 0x0
 12455                           
 12456  0070                     ?_nullifyBadge_buttonsGet:	
 12457                           ; 1 bytes @ 0x0
 12458                           
 12459  0070                     ?_nullifyBadge_irGet:	
 12460                           ; 1 bytes @ 0x0
 12461                           
 12462  0070                     ?_nullifyBadge_irTxRegister:	
 12463                           ; 1 bytes @ 0x0
 12464                           
 12465  0070                     ?_nullifyBadge_irTxRelease:	
 12466                           ; 1 bytes @ 0x0
 12467                           
 12468  0070                     ?_nullifyBadge_irTxSet:	
 12469                           ; 1 bytes @ 0x0
 12470                           
 12471  0070                     ?_nullifyBadge_irTxClr:	
 12472                           ; 1 bytes @ 0x0
 12473                           
 12474  0070                     ?_displayL1_Initialize:	
 12475                           ; 1 bytes @ 0x0
 12476                           
 12477  0070                     ?_locked_lock_leds:	
 12478                           ; 1 bytes @ 0x0
 12479                           
 12480  0070                     ?_locked_unlock_leds:	
 12481                           ; 2 bytes @ 0x0
 12482                           
 12483                           
 12484                           ; 2 bytes @ 0x0
 12485  0070                     	ds	1
 12486  0071                     ??_TMR2_StartTimer:	
 12487  0071                     ??_TMR4_StartTimer:	
 12488                           ; 1 bytes @ 0x1
 12489                           
 12490  0071                     ??_PIN_MANAGER_Initialize:	
 12491                           ; 1 bytes @ 0x1
 12492                           
 12493  0071                     ??_OSCILLATOR_Initialize:	
 12494                           ; 1 bytes @ 0x1
 12495                           
 12496  0071                     ??_WDT_Initialize:	
 12497                           ; 1 bytes @ 0x1
 12498                           
 12499  0071                     ??_PWM2_Initialize:	
 12500                           ; 1 bytes @ 0x1
 12501                           
 12502  0071                     ?_TMR0_SetInterruptHandler:	
 12503                           ; 1 bytes @ 0x1
 12504                           
 12505  0071                     ??_TMR0_StartTimer:	
 12506                           ; 1 bytes @ 0x1
 12507                           
 12508  0071                     ??_nullifyBadge_segDisplayRegister:	
 12509                           ; 1 bytes @ 0x1
 12510                           
 12511  0071                     ?_secret_clear:	
 12512                           ; 1 bytes @ 0x1
 12513                           
 12514  0071                     ??_isdigit:	
 12515                           ; 1 bytes @ 0x1
 12516                           
 12517  0071                     ??_SPI1_Initialize:	
 12518                           ; 1 bytes @ 0x1
 12519                           
 12520  0071                     ??_SPI1_Exchange8bit:	
 12521                           ; 1 bytes @ 0x1
 12522                           
 12523  0071                     ??_PWM5_Initialize:	
 12524                           ; 1 bytes @ 0x1
 12525                           
 12526  0071                     ?_PWM5_LoadDutyValue:	
 12527                           ; 1 bytes @ 0x1
 12528                           
 12529  0071                     ??_PWM6_Initialize:	
 12530                           ; 1 bytes @ 0x1
 12531                           
 12532  0071                     ?_PWM6_LoadDutyValue:	
 12533                           ; 1 bytes @ 0x1
 12534                           
 12535  0071                     ??_PWM1_Initialize:	
 12536                           ; 1 bytes @ 0x1
 12537                           
 12538  0071                     ?_PWM1_LoadDutyValue:	
 12539                           ; 1 bytes @ 0x1
 12540                           
 12541  0071                     ??_TMR2_Initialize:	
 12542                           ; 1 bytes @ 0x1
 12543                           
 12544  0071                     ??_TMR4_Initialize:	
 12545                           ; 1 bytes @ 0x1
 12546                           
 12547  0071                     ?_PWM2_LoadDutyValue:	
 12548                           ; 1 bytes @ 0x1
 12549                           
 12550  0071                     ??_scheduler_Init:	
 12551                           ; 1 bytes @ 0x1
 12552                           
 12553  0071                     ??_scheduler_TaskInit:	
 12554                           ; 1 bytes @ 0x1
 12555                           
 12556  0071                     ??_nullifyBadge_userLedsRegister:	
 12557                           ; 1 bytes @ 0x1
 12558                           
 12559  0071                     ??_nullifyBadge_buttonsGet:	
 12560                           ; 1 bytes @ 0x1
 12561                           
 12562  0071                     ??_nullifyBadge_irGet:	
 12563                           ; 1 bytes @ 0x1
 12564                           
 12565  0071                     ??_nullifyBadge_irTxRegister:	
 12566                           ; 1 bytes @ 0x1
 12567                           
 12568  0071                     ??_nullifyBadge_irTxRelease:	
 12569                           ; 1 bytes @ 0x1
 12570                           
 12571  0071                     ??_nullifyBadge_irTxSet:	
 12572                           ; 1 bytes @ 0x1
 12573                           
 12574  0071                     ??_nullifyBadge_irTxClr:	
 12575                           ; 1 bytes @ 0x1
 12576                           
 12577  0071                     ?_displayL1_SetUserLed:	
 12578                           ; 1 bytes @ 0x1
 12579                           
 12580  0071                     ??_locked_lock_leds:	
 12581                           ; 1 bytes @ 0x1
 12582                           
 12583  0071                     ??_locked_unlock_leds:	
 12584                           ; 1 bytes @ 0x1
 12585                           
 12586  0071                     ?___bmul:	
 12587                           ; 1 bytes @ 0x1
 12588                           
 12589  0071                     ?_strlen:	
 12590                           ; 1 bytes @ 0x1
 12591                           
 12592  0071                     ?_memset:	
 12593                           ; 2 bytes @ 0x1
 12594                           
 12595  0071                     ?_displayCharReverse:	
 12596                           ; 2 bytes @ 0x1
 12597                           
 12598  0071                     ?_TMR0_Read16bitTimer:	
 12599                           ; 2 bytes @ 0x1
 12600                           
 12601  0071                     ?_locked_get_lock_leds:	
 12602                           ; 2 bytes @ 0x1
 12603                           
 12604  0071                     ?_locked_get_unlock_leds:	
 12605                           ; 2 bytes @ 0x1
 12606                           
 12607  0071                     ?___wmul:	
 12608                           ; 2 bytes @ 0x1
 12609                           
 12610  0071                     ?___lwdiv:	
 12611                           ; 2 bytes @ 0x1
 12612                           
 12613  0071                     ?___lmul:	
 12614                           ; 2 bytes @ 0x1
 12615                           
 12616  0071                     SPI1_Exchange8bit@data:	
 12617                           ; 4 bytes @ 0x1
 12618                           
 12619  0071                     PIN_MANAGER_Initialize@state:	
 12620                           ; 1 bytes @ 0x1
 12621                           
 12622  0071                     scheduler_TaskInit@task:	
 12623                           ; 1 bytes @ 0x1
 12624                           
 12625  0071                     nullifyBadge_segDisplayRegister@badge:	
 12626                           ; 1 bytes @ 0x1
 12627                           
 12628  0071                     nullifyBadge_userLedsRegister@badge:	
 12629                           ; 1 bytes @ 0x1
 12630                           
 12631  0071                     nullifyBadge_irTxRegister@badge:	
 12632                           ; 1 bytes @ 0x1
 12633                           
 12634  0071                     ___bmul@multiplicand:	
 12635                           ; 1 bytes @ 0x1
 12636                           
 12637  0071                     _isdigit$3635:	
 12638                           ; 1 bytes @ 0x1
 12639                           
 12640  0071                     PWM5_LoadDutyValue@dutyValue:	
 12641                           ; 1 bytes @ 0x1
 12642                           
 12643  0071                     PWM6_LoadDutyValue@dutyValue:	
 12644                           ; 2 bytes @ 0x1
 12645                           
 12646  0071                     PWM1_LoadDutyValue@dutyValue:	
 12647                           ; 2 bytes @ 0x1
 12648                           
 12649  0071                     PWM2_LoadDutyValue@dutyValue:	
 12650                           ; 2 bytes @ 0x1
 12651                           
 12652  0071                     TMR0_SetInterruptHandler@InterruptHandler:	
 12653                           ; 2 bytes @ 0x1
 12654                           
 12655  0071                     displayL1_SetUserLed@userLedVect:	
 12656                           ; 2 bytes @ 0x1
 12657                           
 12658  0071                     displayCharReverse@cVal:	
 12659                           ; 2 bytes @ 0x1
 12660                           
 12661  0071                     secret_clear@data:	
 12662                           ; 2 bytes @ 0x1
 12663                           
 12664  0071                     ___wmul@multiplier:	
 12665                           ; 2 bytes @ 0x1
 12666                           
 12667  0071                     ___lwdiv@divisor:	
 12668                           ; 2 bytes @ 0x1
 12669                           
 12670  0071                     memset@p1:	
 12671                           ; 2 bytes @ 0x1
 12672                           
 12673  0071                     strlen@s:	
 12674                           ; 2 bytes @ 0x1
 12675                           
 12676  0071                     ___lmul@multiplier:	
 12677                           ; 2 bytes @ 0x1
 12678                           
 12679                           
 12680                           ; 4 bytes @ 0x1
 12681  0071                     	ds	1
 12682  0072                     ?_SPI1_Exchange8bitBuffer:	
 12683  0072                     ??___bmul:	
 12684                           ; 1 bytes @ 0x2
 12685                           
 12686  0072                     SPI1_Exchange8bitBuffer@bufLen:	
 12687                           ; 1 bytes @ 0x2
 12688                           
 12689  0072                     scheduler_Init@scheduler:	
 12690                           ; 1 bytes @ 0x2
 12691                           
 12692  0072                     nullifyBadge_irTxRelease@badge:	
 12693                           ; 1 bytes @ 0x2
 12694                           
 12695  0072                     isdigit@c:	
 12696                           ; 1 bytes @ 0x2
 12697                           
 12698                           
 12699                           ; 1 bytes @ 0x2
 12700  0072                     	ds	1
 12701  0073                     ??_TMR0_Initialize:	
 12702  0073                     ??_TMR0_SetInterruptHandler:	
 12703                           ; 1 bytes @ 0x3
 12704                           
 12705  0073                     ??_strlen:	
 12706                           ; 1 bytes @ 0x3
 12707                           
 12708  0073                     ??_displayCharReverse:	
 12709                           ; 1 bytes @ 0x3
 12710                           
 12711  0073                     ??_secret_clear:	
 12712                           ; 1 bytes @ 0x3
 12713                           
 12714  0073                     ??_PWM5_LoadDutyValue:	
 12715                           ; 1 bytes @ 0x3
 12716                           
 12717  0073                     ??_PWM6_LoadDutyValue:	
 12718                           ; 1 bytes @ 0x3
 12719                           
 12720  0073                     ??_PWM1_LoadDutyValue:	
 12721                           ; 1 bytes @ 0x3
 12722                           
 12723  0073                     ??_SYSTEM_Initialize:	
 12724                           ; 1 bytes @ 0x3
 12725                           
 12726  0073                     ??_PWM2_LoadDutyValue:	
 12727                           ; 1 bytes @ 0x3
 12728                           
 12729  0073                     ??_TMR0_Read16bitTimer:	
 12730                           ; 1 bytes @ 0x3
 12731                           
 12732  0073                     ??_displayL1_SetUserLed:	
 12733                           ; 1 bytes @ 0x3
 12734                           
 12735  0073                     ??_locked_get_lock_leds:	
 12736                           ; 1 bytes @ 0x3
 12737                           
 12738  0073                     ??_locked_get_unlock_leds:	
 12739                           ; 1 bytes @ 0x3
 12740                           
 12741  0073                     SPI1_Exchange8bitBuffer@dataOut:	
 12742                           ; 1 bytes @ 0x3
 12743                           
 12744  0073                     scheduler_Init@k:	
 12745                           ; 1 bytes @ 0x3
 12746                           
 12747  0073                     nullifyBadge_buttonsGet@retVal:	
 12748                           ; 1 bytes @ 0x3
 12749                           
 12750  0073                     ___bmul@product:	
 12751                           ; 1 bytes @ 0x3
 12752                           
 12753  0073                     locked_lock_leds@size:	
 12754                           ; 1 bytes @ 0x3
 12755                           
 12756  0073                     locked_get_unlock_leds@leds:	
 12757                           ; 2 bytes @ 0x3
 12758                           
 12759  0073                     ___wmul@multiplicand:	
 12760                           ; 2 bytes @ 0x3
 12761                           
 12762  0073                     ___lwdiv@dividend:	
 12763                           ; 2 bytes @ 0x3
 12764                           
 12765  0073                     memset@c:	
 12766                           ; 2 bytes @ 0x3
 12767                           
 12768                           
 12769                           ; 2 bytes @ 0x3
 12770  0073                     	ds	1
 12771  0074                     ??_SPI1_Exchange8bitBuffer:	
 12772  0074                     displayL1_SetUserLed@display:	
 12773                           ; 1 bytes @ 0x4
 12774                           
 12775  0074                     ___bmul@multiplier:	
 12776                           ; 1 bytes @ 0x4
 12777                           
 12778                           
 12779                           ; 1 bytes @ 0x4
 12780  0074                     	ds	1
 12781  0075                     ??___wmul:	
 12782  0075                     ??___lwdiv:	
 12783                           ; 1 bytes @ 0x5
 12784                           
 12785  0075                     locked_get_lock_leds@size:	
 12786                           ; 1 bytes @ 0x5
 12787                           
 12788  0075                     ___wmul@product:	
 12789                           ; 2 bytes @ 0x5
 12790                           
 12791  0075                     memset@n:	
 12792                           ; 2 bytes @ 0x5
 12793                           
 12794  0075                     strlen@cp:	
 12795                           ; 2 bytes @ 0x5
 12796                           
 12797  0075                     ___lmul@multiplicand:	
 12798                           ; 2 bytes @ 0x5
 12799                           
 12800                           
 12801                           ; 4 bytes @ 0x5
 12802  0075                     	ds	1
 12803  0076                     ___lwdiv@counter:	
 12804                           
 12805                           ; 1 bytes @ 0x6
 12806  0076                     	ds	1
 12807  0077                     ??_memset:	
 12808  0077                     ?_locked_secret_check:	
 12809                           ; 1 bytes @ 0x7
 12810                           
 12811  0077                     ?_secret_check:	
 12812                           ; 1 bytes @ 0x7
 12813                           
 12814  0077                     ?_matrix_secret_check:	
 12815                           ; 1 bytes @ 0x7
 12816                           
 12817  0077                     SPI1_Exchange8bitBuffer@dataIn:	
 12818                           ; 1 bytes @ 0x7
 12819                           
 12820  0077                     locked_get_lock_leds@leds:	
 12821                           ; 1 bytes @ 0x7
 12822                           
 12823  0077                     locked_secret_check@data:	
 12824                           ; 2 bytes @ 0x7
 12825                           
 12826  0077                     secret_check@data:	
 12827                           ; 2 bytes @ 0x7
 12828                           
 12829  0077                     matrix_secret_check@data:	
 12830                           ; 2 bytes @ 0x7
 12831                           
 12832  0077                     ___lwdiv@quotient:	
 12833                           ; 2 bytes @ 0x7
 12834                           
 12835  0077                     memset@p:	
 12836                           ; 2 bytes @ 0x7
 12837                           
 12838                           
 12839                           ; 2 bytes @ 0x7
 12840  0077                     	ds	1
 12841  0078                     SPI1_Exchange8bitBuffer@bytesWritten:	
 12842  0078                     displayCharReverse@retValLower:	
 12843                           ; 1 bytes @ 0x8
 12844                           
 12845  0078                     TMR0_Read16bitTimer@readVal:	
 12846                           ; 1 bytes @ 0x8
 12847                           
 12848                           
 12849                           ; 2 bytes @ 0x8
 12850  0078                     	ds	1
 12851  0079                     ??_displayL1_Update:	
 12852  0079                     ??___lmul:	
 12853                           ; 1 bytes @ 0x9
 12854                           
 12855  0079                     ??___almod:	
 12856                           ; 1 bytes @ 0x9
 12857                           
 12858  0079                     ??___lwmod:	
 12859                           ; 1 bytes @ 0x9
 12860                           
 12861  0079                     displayCharReverse@retValUpper:	
 12862                           ; 1 bytes @ 0x9
 12863                           
 12864  0079                     locked_secret_check@buttonPressed:	
 12865                           ; 1 bytes @ 0x9
 12866                           
 12867  0079                     secret_check@buttonPressed:	
 12868                           ; 1 bytes @ 0x9
 12869                           
 12870  0079                     matrix_secret_check@buttonPressed:	
 12871                           ; 1 bytes @ 0x9
 12872                           
 12873                           
 12874                           ; 1 bytes @ 0x9
 12875  0079                     	ds	1
 12876  007A                     TMR0_Read16bitTimer@readValLow:	
 12877  007A                     displayCharReverse@retValUpperRev:	
 12878                           ; 1 bytes @ 0xA
 12879                           
 12880  007A                     ___almod@counter:	
 12881                           ; 1 bytes @ 0xA
 12882                           
 12883  007A                     ___lwmod@counter:	
 12884                           ; 1 bytes @ 0xA
 12885                           
 12886                           
 12887                           ; 1 bytes @ 0xA
 12888  007A                     	ds	1
 12889  007B                     ??_displayL2_ForceUpdate:	
 12890  007B                     ??_displayL2_SetUserLeds:	
 12891                           ; 1 bytes @ 0xB
 12892                           
 12893  007B                     ??_displayL2_ClrUserLeds:	
 12894                           ; 1 bytes @ 0xB
 12895                           
 12896  007B                     ??_displayL1_Initialize:	
 12897                           ; 1 bytes @ 0xB
 12898                           
 12899  007B                     TMR0_Read16bitTimer@readValHigh:	
 12900                           ; 1 bytes @ 0xB
 12901                           
 12902  007B                     displayL1_Initialize@display:	
 12903                           ; 1 bytes @ 0xB
 12904                           
 12905  007B                     displayCharReverse@k:	
 12906                           ; 1 bytes @ 0xB
 12907                           
 12908  007B                     displayL2_ForceUpdate@display:	
 12909                           ; 1 bytes @ 0xB
 12910                           
 12911  007B                     displayL2_SetUserLeds@display:	
 12912                           ; 1 bytes @ 0xB
 12913                           
 12914  007B                     displayL2_ClrUserLeds@display:	
 12915                           ; 1 bytes @ 0xB
 12916                           
 12917  007B                     ___almod@sign:	
 12918                           ; 1 bytes @ 0xB
 12919                           
 12920                           
 12921                           ; 1 bytes @ 0xB
 12922  007B                     	ds	1
 12923  007C                     ??_nullifyBadge_segDisplayErase:	
 12924  007C                     ??_nullifyBadge_segDisplayPutStr:	
 12925                           ; 1 bytes @ 0xC
 12926                           
 12927  007C                     ??_nullifyBadge_segDisplayForceUpdate:	
 12928                           ; 1 bytes @ 0xC
 12929                           
 12930  007C                     ??_nullifyBadge_userLedsSet:	
 12931                           ; 1 bytes @ 0xC
 12932                           
 12933  007C                     ??_nullifyBadge_platformInit:	
 12934                           ; 1 bytes @ 0xC
 12935                           
 12936  007C                     ??_flashy_Init:	
 12937                           ; 1 bytes @ 0xC
 12938                           
 12939  007C                     ??_menu_Init:	
 12940                           ; 1 bytes @ 0xC
 12941                           
 12942  007C                     ??_slot_Init:	
 12943                           ; 1 bytes @ 0xC
 12944                           
 12945  007C                     ??_locked_Init:	
 12946                           ; 1 bytes @ 0xC
 12947                           
 12948  007C                     ??_secret_Init:	
 12949                           ; 1 bytes @ 0xC
 12950                           
 12951  007C                     ??_displayL2_Initialize:	
 12952                           ; 1 bytes @ 0xC
 12953                           
 12954  007C                     ??_displayL2_EraseSegDisplay:	
 12955                           ; 1 bytes @ 0xC
 12956                           
 12957  007C                     ??_menu_clear:	
 12958                           ; 1 bytes @ 0xC
 12959                           
 12960  007C                     ??_menu_display_option:	
 12961                           ; 1 bytes @ 0xC
 12962                           
 12963  007C                     ??_menu_run_option:	
 12964                           ; 1 bytes @ 0xC
 12965                           
 12966  007C                     ??_locked_clear:	
 12967                           ; 1 bytes @ 0xC
 12968                           
 12969  007C                     ??_scheduler_TaskRun:	
 12970                           ; 1 bytes @ 0xC
 12971                           
 12972  007C                     ??_led_circle:	
 12973                           ; 1 bytes @ 0xC
 12974                           
 12975  007C                     ??_let_alternate:	
 12976                           ; 1 bytes @ 0xC
 12977                           
 12978  007C                     ??_nullifyBadge_userLedsClr:	
 12979                           ; 1 bytes @ 0xC
 12980                           
 12981  007C                     ??_flashy_display_option:	
 12982                           ; 1 bytes @ 0xC
 12983                           
 12984                           
 12985                           	psect	cstackBANK0
 12986  0020                     __pcstackBANK0:	
 12987                           ; 1 bytes @ 0xC
 12988                           
 12989  0020                     ?_displayL1_SetSegChar:	
 12990  0020                     ??_locked_secret_check:	
 12991                           ; 1 bytes @ 0x0
 12992                           
 12993  0020                     ??_secret_check:	
 12994                           ; 1 bytes @ 0x0
 12995                           
 12996  0020                     ??_matrix_secret_check:	
 12997                           ; 1 bytes @ 0x0
 12998                           
 12999  0020                     displayL1_SetSegChar@c:	
 13000                           ; 1 bytes @ 0x0
 13001                           
 13002  0020                     ___lmul@product:	
 13003                           ; 1 bytes @ 0x0
 13004                           
 13005  0020                     displayL1_Update@tmpRxBuf:	
 13006                           ; 4 bytes @ 0x0
 13007                           
 13008                           
 13009                           ; 10 bytes @ 0x0
 13010  0020                     	ds	1
 13011  0021                     displayL1_SetSegChar@charPos:	
 13012                           
 13013                           ; 1 bytes @ 0x1
 13014  0021                     	ds	1
 13015  0022                     ??_displayL1_SetSegChar:	
 13016                           
 13017                           ; 1 bytes @ 0x2
 13018  0022                     	ds	1
 13019  0023                     locked_secret_check@size:	
 13020  0023                     secret_check@size:	
 13021                           ; 2 bytes @ 0x3
 13022                           
 13023  0023                     matrix_secret_check@size:	
 13024                           ; 2 bytes @ 0x3
 13025                           
 13026                           
 13027                           ; 2 bytes @ 0x3
 13028  0023                     	ds	1
 13029  0024                     ?_rand:	
 13030                           
 13031                           ; 2 bytes @ 0x4
 13032  0024                     	ds	1
 13033  0025                     locked_secret_check@currents_size:	
 13034  0025                     secret_check@currents_size:	
 13035                           ; 2 bytes @ 0x5
 13036                           
 13037  0025                     matrix_secret_check@currents_size:	
 13038                           ; 2 bytes @ 0x5
 13039                           
 13040                           
 13041                           ; 2 bytes @ 0x5
 13042  0025                     	ds	1
 13043  0026                     ??_rand:	
 13044  0026                     displayL1_SetSegChar@dispDataVectBaseIdx:	
 13045                           ; 1 bytes @ 0x6
 13046                           
 13047                           
 13048                           ; 1 bytes @ 0x6
 13049  0026                     	ds	1
 13050  0027                     displayL1_SetSegChar@display:	
 13051  0027                     locked_secret_check@inputs:	
 13052                           ; 1 bytes @ 0x7
 13053                           
 13054  0027                     secret_check@inputs:	
 13055                           ; 1 bytes @ 0x7
 13056                           
 13057  0027                     matrix_secret_check@inputs:	
 13058                           ; 1 bytes @ 0x7
 13059                           
 13060                           
 13061                           ; 1 bytes @ 0x7
 13062  0027                     	ds	1
 13063  0028                     displayL1_SetSegChar@charData:	
 13064  0028                     locked_secret_check@i:	
 13065                           ; 2 bytes @ 0x8
 13066                           
 13067  0028                     secret_check@i:	
 13068                           ; 2 bytes @ 0x8
 13069                           
 13070  0028                     matrix_secret_check@i:	
 13071                           ; 2 bytes @ 0x8
 13072                           
 13073                           
 13074                           ; 2 bytes @ 0x8
 13075  0028                     	ds	2
 13076  002A                     ?_displayL2_PutChar:	
 13077  002A                     displayL1_Update@display:	
 13078                           ; 1 bytes @ 0xA
 13079                           
 13080  002A                     displayL2_PutChar@c:	
 13081                           ; 1 bytes @ 0xA
 13082                           
 13083                           
 13084                           ; 1 bytes @ 0xA
 13085  002A                     	ds	1
 13086  002B                     ??_displayL2_PutChar:	
 13087  002B                     ?_displayL2_SetUserLeds:	
 13088                           ; 1 bytes @ 0xB
 13089                           
 13090  002B                     ?___lwmod:	
 13091                           ; 1 bytes @ 0xB
 13092                           
 13093  002B                     ?___almod:	
 13094                           ; 2 bytes @ 0xB
 13095                           
 13096  002B                     nullifyBadge_segDisplayForceUpdate@badge:	
 13097                           ; 4 bytes @ 0xB
 13098                           
 13099  002B                     nullifyBadge_userLedsClr@badge:	
 13100                           ; 1 bytes @ 0xB
 13101                           
 13102  002B                     displayL2_Initialize@display:	
 13103                           ; 1 bytes @ 0xB
 13104                           
 13105  002B                     displayL2_SetUserLeds@userLedData:	
 13106                           ; 1 bytes @ 0xB
 13107                           
 13108  002B                     ___lwmod@divisor:	
 13109                           ; 2 bytes @ 0xB
 13110                           
 13111  002B                     ___almod@divisor:	
 13112                           ; 2 bytes @ 0xB
 13113                           
 13114                           
 13115                           ; 4 bytes @ 0xB
 13116  002B                     	ds	1
 13117  002C                     nullifyBadge_platformInit@badge:	
 13118                           
 13119                           ; 1 bytes @ 0xC
 13120  002C                     	ds	1
 13121  002D                     ?_nullifyBadge_userLedsSet:	
 13122  002D                     nullifyBadge_userLedsSet@userLedData:	
 13123                           ; 1 bytes @ 0xD
 13124                           
 13125  002D                     ___lwmod@dividend:	
 13126                           ; 2 bytes @ 0xD
 13127                           
 13128                           
 13129                           ; 2 bytes @ 0xD
 13130  002D                     	ds	1
 13131  002E                     displayL2_PutChar@k:	
 13132                           
 13133                           ; 1 bytes @ 0xE
 13134  002E                     	ds	1
 13135  002F                     ?_slot_Setup:	
 13136  002F                     ?_sprintf:	
 13137                           ; 1 bytes @ 0xF
 13138                           
 13139  002F                     nullifyBadge_userLedsSet@badge:	
 13140                           ; 2 bytes @ 0xF
 13141                           
 13142  002F                     displayL2_PutChar@display:	
 13143                           ; 1 bytes @ 0xF
 13144                           
 13145  002F                     slot_Setup@taskData:	
 13146                           ; 1 bytes @ 0xF
 13147                           
 13148  002F                     sprintf@sp:	
 13149                           ; 2 bytes @ 0xF
 13150                           
 13151  002F                     ___almod@dividend:	
 13152                           ; 2 bytes @ 0xF
 13153                           
 13154                           
 13155                           ; 4 bytes @ 0xF
 13156  002F                     	ds	1
 13157  0030                     ?_displayL2_PutStr:	
 13158  0030                     ?_led_roundabout:	
 13159                           ; 1 bytes @ 0x10
 13160                           
 13161  0030                     ?_led_curtain:	
 13162                           ; 1 bytes @ 0x10
 13163                           
 13164  0030                     ?_led_circle:	
 13165                           ; 1 bytes @ 0x10
 13166                           
 13167  0030                     ?_let_alternate:	
 13168                           ; 1 bytes @ 0x10
 13169                           
 13170  0030                     ?_led_Parody:	
 13171                           ; 1 bytes @ 0x10
 13172                           
 13173  0030                     led_roundabout@counter:	
 13174                           ; 1 bytes @ 0x10
 13175                           
 13176  0030                     led_curtain@counter:	
 13177                           ; 2 bytes @ 0x10
 13178                           
 13179  0030                     led_circle@count:	
 13180                           ; 2 bytes @ 0x10
 13181                           
 13182  0030                     let_alternate@count:	
 13183                           ; 2 bytes @ 0x10
 13184                           
 13185  0030                     led_Parody@count:	
 13186                           ; 2 bytes @ 0x10
 13187                           
 13188  0030                     displayL2_PutStr@str:	
 13189                           ; 2 bytes @ 0x10
 13190                           
 13191                           
 13192                           ; 2 bytes @ 0x10
 13193  0030                     	ds	1
 13194  0031                     ??_slot_Setup:	
 13195  0031                     sprintf@f:	
 13196                           ; 1 bytes @ 0x11
 13197                           
 13198                           
 13199                           ; 2 bytes @ 0x11
 13200  0031                     	ds	1
 13201  0032                     ??_displayL2_PutStr:	
 13202  0032                     ??_led_roundabout:	
 13203                           ; 1 bytes @ 0x12
 13204                           
 13205  0032                     ??_led_curtain:	
 13206                           ; 1 bytes @ 0x12
 13207                           
 13208  0032                     ??_led_Parody:	
 13209                           ; 1 bytes @ 0x12
 13210                           
 13211  0032                     ?_slot_Running_Animation:	
 13212                           ; 1 bytes @ 0x12
 13213                           
 13214  0032                     slot_Running_Animation@taskData:	
 13215                           ; 1 bytes @ 0x12
 13216                           
 13217                           
 13218                           ; 2 bytes @ 0x12
 13219  0032                     	ds	1
 13220  0033                     ??_led_rand:	
 13221                           
 13222                           ; 1 bytes @ 0x13
 13223  0033                     	ds	1
 13224  0034                     ??_slot_Running_Animation:	
 13225  0034                     led_roundabout@leds:	
 13226                           ; 1 bytes @ 0x14
 13227                           
 13228  0034                     led_curtain@leds:	
 13229                           ; 2 bytes @ 0x14
 13230                           
 13231  0034                     led_Parody@leds:	
 13232                           ; 2 bytes @ 0x14
 13233                           
 13234  0034                     slot_Setup@data:	
 13235                           ; 2 bytes @ 0x14
 13236                           
 13237                           
 13238                           ; 2 bytes @ 0x14
 13239  0034                     	ds	1
 13240  0035                     displayL2_PutStr@display:	
 13241                           
 13242                           ; 1 bytes @ 0x15
 13243  0035                     	ds	1
 13244  0036                     displayL2_PutStr@k:	
 13245  0036                     led_roundabout@size:	
 13246                           ; 1 bytes @ 0x16
 13247                           
 13248  0036                     led_curtain@size:	
 13249                           ; 2 bytes @ 0x16
 13250                           
 13251  0036                     led_Parody@size:	
 13252                           ; 2 bytes @ 0x16
 13253                           
 13254  0036                     slot_Running_Animation@data:	
 13255                           ; 2 bytes @ 0x16
 13256                           
 13257                           
 13258                           ; 2 bytes @ 0x16
 13259  0036                     	ds	1
 13260  0037                     ?_nullifyBadge_segDisplayPutStr:	
 13261  0037                     displayL2_EraseSegDisplay@display:	
 13262                           ; 1 bytes @ 0x17
 13263                           
 13264  0037                     nullifyBadge_segDisplayPutStr@str:	
 13265                           ; 1 bytes @ 0x17
 13266                           
 13267                           
 13268                           ; 2 bytes @ 0x17
 13269  0037                     	ds	1
 13270  0038                     nullifyBadge_segDisplayErase@badge:	
 13271                           
 13272                           ; 1 bytes @ 0x18
 13273  0038                     	ds	1
 13274  0039                     ?_flashy_Init:	
 13275  0039                     ?_menu_Init:	
 13276                           ; 1 bytes @ 0x19
 13277                           
 13278  0039                     ?_slot_Init:	
 13279                           ; 1 bytes @ 0x19
 13280                           
 13281  0039                     ?_locked_Init:	
 13282                           ; 1 bytes @ 0x19
 13283                           
 13284  0039                     ?_secret_Init:	
 13285                           ; 1 bytes @ 0x19
 13286                           
 13287  0039                     ?_matrix_Init:	
 13288                           ; 1 bytes @ 0x19
 13289                           
 13290  0039                     ?_menu_clear:	
 13291                           ; 1 bytes @ 0x19
 13292                           
 13293  0039                     ?_locked_clear:	
 13294                           ; 1 bytes @ 0x19
 13295                           
 13296  0039                     nullifyBadge_segDisplayPutStr@badge:	
 13297                           ; 1 bytes @ 0x19
 13298                           
 13299  0039                     menu_Init@taskData:	
 13300                           ; 1 bytes @ 0x19
 13301                           
 13302  0039                     menu_clear@data:	
 13303                           ; 2 bytes @ 0x19
 13304                           
 13305  0039                     flashy_Init@taskData:	
 13306                           ; 2 bytes @ 0x19
 13307                           
 13308  0039                     locked_Init@taskData:	
 13309                           ; 2 bytes @ 0x19
 13310                           
 13311  0039                     locked_clear@data:	
 13312                           ; 2 bytes @ 0x19
 13313                           
 13314  0039                     secret_Init@taskData:	
 13315                           ; 2 bytes @ 0x19
 13316                           
 13317  0039                     slot_Init@taskData:	
 13318                           ; 2 bytes @ 0x19
 13319                           
 13320  0039                     matrix_Init@taskData:	
 13321                           ; 2 bytes @ 0x19
 13322                           
 13323                           
 13324                           ; 2 bytes @ 0x19
 13325  0039                     	ds	1
 13326  003A                     ?_marquee_speedy:	
 13327  003A                     ?_marquee:	
 13328                           ; 1 bytes @ 0x1A
 13329                           
 13330  003A                     marquee_speedy@string:	
 13331                           ; 1 bytes @ 0x1A
 13332                           
 13333  003A                     marquee@string:	
 13334                           ; 2 bytes @ 0x1A
 13335                           
 13336                           
 13337                           ; 2 bytes @ 0x1A
 13338  003A                     	ds	1
 13339  003B                     ??_matrix_Init:	
 13340  003B                     ?_menu_run_option:	
 13341                           ; 1 bytes @ 0x1B
 13342                           
 13343  003B                     ??_sprintf:	
 13344                           ; 1 bytes @ 0x1B
 13345                           
 13346  003B                     led_rand@spark:	
 13347                           ; 1 bytes @ 0x1B
 13348                           
 13349  003B                     menu_Init@data:	
 13350                           ; 2 bytes @ 0x1B
 13351                           
 13352  003B                     menu_run_option@data:	
 13353                           ; 2 bytes @ 0x1B
 13354                           
 13355  003B                     flashy_Init@data:	
 13356                           ; 2 bytes @ 0x1B
 13357                           
 13358  003B                     locked_Init@data:	
 13359                           ; 2 bytes @ 0x1B
 13360                           
 13361  003B                     secret_Init@data:	
 13362                           ; 2 bytes @ 0x1B
 13363                           
 13364  003B                     slot_Init@data:	
 13365                           ; 2 bytes @ 0x1B
 13366                           
 13367                           
 13368                           ; 2 bytes @ 0x1B
 13369  003B                     	ds	1
 13370  003C                     marquee_speedy@count:	
 13371  003C                     marquee@count:	
 13372                           ; 2 bytes @ 0x1C
 13373                           
 13374                           
 13375                           ; 2 bytes @ 0x1C
 13376  003C                     	ds	1
 13377  003D                     ?_slot_Finished_Animation:	
 13378  003D                     slot_Finished_Animation@taskData:	
 13379                           ; 1 bytes @ 0x1D
 13380                           
 13381  003D                     matrix_Init@data:	
 13382                           ; 2 bytes @ 0x1D
 13383                           
 13384                           
 13385                           ; 2 bytes @ 0x1D
 13386  003D                     	ds	1
 13387  003E                     ??_marquee:	
 13388  003E                     marquee_speedy@multiplier:	
 13389                           ; 1 bytes @ 0x1E
 13390                           
 13391                           
 13392                           ; 2 bytes @ 0x1E
 13393  003E                     	ds	1
 13394  003F                     ?_scheduler_TaskAdd:	
 13395  003F                     ??_slot_Finished_Animation:	
 13396                           ; 1 bytes @ 0x1F
 13397                           
 13398  003F                     scheduler_TaskAdd@task:	
 13399                           ; 1 bytes @ 0x1F
 13400                           
 13401  003F                     sprintf@prec:	
 13402                           ; 1 bytes @ 0x1F
 13403                           
 13404  003F                     marquee@display_string:	
 13405                           ; 1 bytes @ 0x1F
 13406                           
 13407                           
 13408                           ; 5 bytes @ 0x1F
 13409  003F                     	ds	1
 13410  0040                     ??_scheduler_TaskAdd:	
 13411  0040                     ??_marquee_speedy:	
 13412                           ; 1 bytes @ 0x20
 13413                           
 13414  0040                     sprintf@flag:	
 13415                           ; 1 bytes @ 0x20
 13416                           
 13417                           
 13418                           ; 1 bytes @ 0x20
 13419  0040                     	ds	1
 13420  0041                     slot_Finished_Animation@data:	
 13421  0041                     sprintf@cp:	
 13422                           ; 2 bytes @ 0x21
 13423                           
 13424  0041                     marquee_speedy@display_string:	
 13425                           ; 2 bytes @ 0x21
 13426                           
 13427                           
 13428                           ; 5 bytes @ 0x21
 13429  0041                     	ds	2
 13430  0043                     sprintf@ap:	
 13431                           
 13432                           ; 1 bytes @ 0x23
 13433  0043                     	ds	1
 13434  0044                     marquee@multiplier:	
 13435  0044                     sprintf@val:	
 13436                           ; 2 bytes @ 0x24
 13437                           
 13438                           
 13439                           ; 2 bytes @ 0x24
 13440  0044                     	ds	2
 13441  0046                     scheduler_TaskAdd@scheduler:	
 13442  0046                     marquee_speedy@i:	
 13443                           ; 1 bytes @ 0x26
 13444                           
 13445  0046                     marquee@i:	
 13446                           ; 2 bytes @ 0x26
 13447                           
 13448  0046                     sprintf@len:	
 13449                           ; 2 bytes @ 0x26
 13450                           
 13451                           
 13452                           ; 2 bytes @ 0x26
 13453  0046                     	ds	1
 13454  0047                     scheduler_TaskAdd@k:	
 13455                           
 13456                           ; 1 bytes @ 0x27
 13457  0047                     	ds	1
 13458  0048                     marquee_speedy@string_length:	
 13459  0048                     marquee@string_length:	
 13460                           ; 2 bytes @ 0x28
 13461                           
 13462  0048                     sprintf@width:	
 13463                           ; 2 bytes @ 0x28
 13464                           
 13465                           
 13466                           ; 2 bytes @ 0x28
 13467  0048                     	ds	2
 13468  004A                     sprintf@c:	
 13469  004A                     marquee_speedy@j:	
 13470                           ; 1 bytes @ 0x2A
 13471                           
 13472  004A                     marquee@j:	
 13473                           ; 2 bytes @ 0x2A
 13474                           
 13475                           
 13476                           ; 2 bytes @ 0x2A
 13477  004A                     	ds	2
 13478  004C                     ?_menu_display_option:	
 13479  004C                     ?_flashy_display_option:	
 13480                           ; 1 bytes @ 0x2C
 13481                           
 13482  004C                     ?_matrix_display_option:	
 13483                           ; 1 bytes @ 0x2C
 13484                           
 13485  004C                     menu_display_option@data:	
 13486                           ; 1 bytes @ 0x2C
 13487                           
 13488  004C                     flashy_display_option@data:	
 13489                           ; 2 bytes @ 0x2C
 13490                           
 13491  004C                     matrix_display_option@data:	
 13492                           ; 2 bytes @ 0x2C
 13493                           
 13494                           
 13495                           ; 2 bytes @ 0x2C
 13496  004C                     	ds	2
 13497  004E                     ??_matrix_display_option:	
 13498  004E                     menu_display_option@size:	
 13499                           ; 1 bytes @ 0x2E
 13500                           
 13501                           
 13502                           ; 2 bytes @ 0x2E
 13503  004E                     	ds	2
 13504  0050                     menu_display_option@led:	
 13505                           
 13506                           ; 2 bytes @ 0x30
 13507  0050                     	ds	2
 13508  0052                     ?_flashy_Main:	
 13509  0052                     ?_menu_Main:	
 13510                           ; 1 bytes @ 0x32
 13511                           
 13512  0052                     ?_slot_Main:	
 13513                           ; 1 bytes @ 0x32
 13514                           
 13515  0052                     ?_locked_Main:	
 13516                           ; 1 bytes @ 0x32
 13517                           
 13518  0052                     ?_secret_Main:	
 13519                           ; 1 bytes @ 0x32
 13520                           
 13521  0052                     ?_matrix_Main:	
 13522                           ; 1 bytes @ 0x32
 13523                           
 13524  0052                     menu_Main@taskData:	
 13525                           ; 1 bytes @ 0x32
 13526                           
 13527  0052                     flashy_Main@taskData:	
 13528                           ; 2 bytes @ 0x32
 13529                           
 13530  0052                     locked_Main@taskData:	
 13531                           ; 2 bytes @ 0x32
 13532                           
 13533  0052                     secret_Main@taskData:	
 13534                           ; 2 bytes @ 0x32
 13535                           
 13536  0052                     slot_Main@taskData:	
 13537                           ; 2 bytes @ 0x32
 13538                           
 13539  0052                     matrix_Main@taskData:	
 13540                           ; 2 bytes @ 0x32
 13541                           
 13542                           
 13543                           ; 2 bytes @ 0x32
 13544  0052                     	ds	2
 13545  0054                     ??_flashy_Main:	
 13546  0054                     ??_menu_Main:	
 13547                           ; 1 bytes @ 0x34
 13548                           
 13549  0054                     ??_slot_Main:	
 13550                           ; 1 bytes @ 0x34
 13551                           
 13552  0054                     ??_locked_Main:	
 13553                           ; 1 bytes @ 0x34
 13554                           
 13555  0054                     ??_secret_Main:	
 13556                           ; 1 bytes @ 0x34
 13557                           
 13558  0054                     ??_matrix_Main:	
 13559                           ; 1 bytes @ 0x34
 13560                           
 13561                           
 13562                           ; 1 bytes @ 0x34
 13563  0054                     	ds	2
 13564  0056                     menu_Main@buttonPressed:	
 13565  0056                     locked_Main@buttonPressed:	
 13566                           ; 1 bytes @ 0x36
 13567                           
 13568  0056                     secret_Main@secret_found:	
 13569                           ; 1 bytes @ 0x36
 13570                           
 13571  0056                     flashy_Main@hit_counter:	
 13572                           ; 1 bytes @ 0x36
 13573                           
 13574                           
 13575                           ; 6 bytes @ 0x36
 13576  0056                     	ds	1
 13577  0057                     secret_Main@buttonPressed:	
 13578  0057                     menu_Main@data:	
 13579                           ; 1 bytes @ 0x37
 13580                           
 13581  0057                     locked_Main@data:	
 13582                           ; 2 bytes @ 0x37
 13583                           
 13584                           
 13585                           ; 2 bytes @ 0x37
 13586  0057                     	ds	1
 13587  0058                     matrix_Main@buttonPressed:	
 13588  0058                     secret_Main@data:	
 13589                           ; 1 bytes @ 0x38
 13590                           
 13591                           
 13592                           ; 2 bytes @ 0x38
 13593  0058                     	ds	1
 13594  0059                     matrix_Main@holdvalue:	
 13595                           
 13596                           ; 1 bytes @ 0x39
 13597  0059                     	ds	1
 13598  005A                     matrix_Main@data:	
 13599                           
 13600                           ; 2 bytes @ 0x3A
 13601  005A                     	ds	2
 13602  005C                     flashy_Main@buttonPressed:	
 13603                           
 13604                           ; 2 bytes @ 0x3C
 13605  005C                     	ds	2
 13606  005E                     flashy_Main@data:	
 13607                           
 13608                           ; 2 bytes @ 0x3E
 13609  005E                     	ds	6
 13610  0064                     slot_Main@buttonPressed:	
 13611                           
 13612                           ; 1 bytes @ 0x44
 13613  0064                     	ds	1
 13614  0065                     slot_Main@data:	
 13615                           
 13616                           ; 2 bytes @ 0x45
 13617  0065                     	ds	2
 13618  0067                     scheduler_TaskRun@task:	
 13619                           
 13620                           ; 1 bytes @ 0x47
 13621  0067                     	ds	1
 13622  0068                     ??_schedulerExecute:	
 13623                           
 13624                           ; 1 bytes @ 0x48
 13625  0068                     	ds	6
 13626  006E                     ??_main:	
 13627                           
 13628                           ; 1 bytes @ 0x4E
 13629  006E                     	ds	1
 13630                           
 13631                           	psect	maintext
 13632  0661                     __pmaintext:	
 13633 ;;
 13634 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
 13635 ;;
 13636 ;; *************** function _main *****************
 13637 ;; Defined at:
 13638 ;;		line 225 in file "main.c"
 13639 ;; Parameters:    Size  Location     Type
 13640 ;;		None
 13641 ;; Auto vars:     Size  Location     Type
 13642 ;;		None
 13643 ;; Return value:  Size  Location     Type
 13644 ;;                  1    wreg      void 
 13645 ;; Registers used:
 13646 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13647 ;; Tracked objects:
 13648 ;;		On entry : B1F/0
 13649 ;;		On exit  : 0/0
 13650 ;;		Unchanged: 0/0
 13651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13654 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13655 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13656 ;;Total ram usage:        1 bytes
 13657 ;; Hardware stack levels required when called:   15
 13658 ;; This function calls:
 13659 ;;		_nullifyBadge_platformInit
 13660 ;;		_schedulerExecute
 13661 ;;		_scheduler_Init
 13662 ;;		_scheduler_TaskAdd
 13663 ;;		_scheduler_TaskInit
 13664 ;; This function is called by:
 13665 ;;		Startup code after reset
 13666 ;; This function uses a non-reentrant model
 13667 ;;
 13668                           
 13669                           
 13670                           ;psect for function _main
 13671  0661                     _main:	
 13672                           
 13673                           ;main.c: 228: nullifyBadge_platformInit(&badge_inst);
 13674                           
 13675                           ;incstack = 0
 13676                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13677  0661  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13678  0662  31AC  24F0  3186   	fcall	_nullifyBadge_platformInit
 13679                           
 13680                           ;main.c: 231: scheduler_Init(&schedulerInst);
 13681  0665  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13682  0666  31B4  247D  3186   	fcall	_scheduler_Init
 13683                           
 13684                           ;main.c: 234: scheduler_TaskInit(&flashy_task);
 13685  0669  305C               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 13686  066A  31B7  274C  3186   	fcall	_scheduler_TaskInit
 13687                           
 13688                           ;main.c: 235: scheduler_TaskInit(&menu_task);
 13689  066D  304F               	movlw	(low (_menu_task| (0+256)))& (0+255)
 13690  066E  31B7  274C  3186   	fcall	_scheduler_TaskInit
 13691                           
 13692                           ;main.c: 236: scheduler_TaskInit(&slot_task);
 13693  0671  3042               	movlw	(low (_slot_task| (0+256)))& (0+255)
 13694  0672  31B7  274C  3186   	fcall	_scheduler_TaskInit
 13695                           
 13696                           ;main.c: 237: scheduler_TaskInit(&locked_task);
 13697  0675  3035               	movlw	(low (_locked_task| (0+256)))& (0+255)
 13698  0676  31B7  274C  3186   	fcall	_scheduler_TaskInit
 13699                           
 13700                           ;main.c: 238: scheduler_TaskInit(&secret_task);
 13701  0679  3028               	movlw	(low (_secret_task| (0+256)))& (0+255)
 13702  067A  31B7  274C  3186   	fcall	_scheduler_TaskInit
 13703                           
 13704                           ;main.c: 239: scheduler_TaskInit(&matrix_task);
 13705  067D  30C4               	movlw	(low (_matrix_task| (0+256)))& (0+255)
 13706  067E  31B7  274C  3186   	fcall	_scheduler_TaskInit
 13707                           
 13708                           ;main.c: 242: flashy_TaskData.badge = &badge_inst;
 13709  0681  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13710  0682  0020               	movlb	0	; select bank0
 13711  0683  00EE               	movwf	??_main
 13712  0684  086E               	movf	??_main,w
 13713  0685  0029               	movlb	9	; select bank9
 13714  0686  00BF               	movwf	_flashy_TaskData^(0+1152)
 13715                           
 13716                           ;main.c: 243: menu_TaskData.badge = &badge_inst;
 13717  0687  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13718  0688  0020               	movlb	0	; select bank0
 13719  0689  00EE               	movwf	??_main
 13720  068A  086E               	movf	??_main,w
 13721  068B  0025               	movlb	5	; select bank5
 13722  068C  00BC               	movwf	_menu_TaskData^(0+640)
 13723                           
 13724                           ;main.c: 244: slot_TaskData.badge = &badge_inst;
 13725  068D  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13726  068E  0020               	movlb	0	; select bank0
 13727  068F  00EE               	movwf	??_main
 13728  0690  086E               	movf	??_main,w
 13729  0691  002B               	movlb	11	; select bank11
 13730  0692  00A0               	movwf	_slot_TaskData^(0+1408)
 13731                           
 13732                           ;main.c: 245: locked_TaskData.badge = &badge_inst;
 13733  0693  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13734  0694  0020               	movlb	0	; select bank0
 13735  0695  00EE               	movwf	??_main
 13736  0696  086E               	movf	??_main,w
 13737  0697  0025               	movlb	5	; select bank5
 13738  0698  00AE               	movwf	_locked_TaskData^(0+640)
 13739                           
 13740                           ;main.c: 246: secret_TaskData.badge = &badge_inst;
 13741  0699  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13742  069A  0020               	movlb	0	; select bank0
 13743  069B  00EE               	movwf	??_main
 13744  069C  086E               	movf	??_main,w
 13745  069D  0025               	movlb	5	; select bank5
 13746  069E  00A0               	movwf	_secret_TaskData^(0+640)
 13747                           
 13748                           ;main.c: 247: matrix_TaskData.badge = &badge_inst;
 13749  069F  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13750  06A0  0020               	movlb	0	; select bank0
 13751  06A1  00EE               	movwf	??_main
 13752  06A2  086E               	movf	??_main,w
 13753  06A3  0029               	movlb	9	; select bank9
 13754  06A4  00A0               	movwf	_matrix_TaskData^(0+1152)
 13755                           
 13756                           ;main.c: 251: badge_locked = 1;
 13757  06A5  0021               	movlb	1	; select bank1
 13758  06A6  01C4               	clrf	_badge_locked^(0+128)
 13759  06A7  0AC4               	incf	_badge_locked^(0+128),f
 13760                           
 13761                           ;main.c: 254: flashy_task.taskData = (void *) &flashy_TaskData;
 13762  06A8  30BF               	movlw	low _flashy_TaskData
 13763  06A9  0022               	movlb	2	; select bank2
 13764  06AA  00DE               	movwf	(low ((_flashy_task| (0+256)+2)))^0
 13765  06AB  3004               	movlw	high _flashy_TaskData
 13766  06AC  00DF               	movwf	((low ((_flashy_task| (0+256)+2))+1))^0
 13767                           
 13768                           ;main.c: 255: flashy_task.taskInitCallback = flashy_Init;
 13769  06AD  3064               	movlw	low _flashy_Init
 13770  06AE  00E0               	movwf	(low ((_flashy_task| (0+256)+4)))^0
 13771  06AF  3007               	movlw	high _flashy_Init
 13772  06B0  00E1               	movwf	((low ((_flashy_task| (0+256)+4)))^0+1)
 13773                           
 13774                           ;main.c: 256: flashy_task.taskExecuteCallback = flashy_Main;
 13775  06B1  3019               	movlw	low _flashy_Main
 13776  06B2  00E4               	movwf	(low ((_flashy_task| (0+256)+8)))^0
 13777  06B3  3008               	movlw	high _flashy_Main
 13778  06B4  00E5               	movwf	((low ((_flashy_task| (0+256)+8)))^0+1)
 13779                           
 13780                           ;main.c: 257: flashy_task.taskExitCallback = flashy_Exit;
 13781  06B5  3000               	movlw	0
 13782  06B6  00E2               	movwf	(low ((_flashy_task| (0+256)+6)))^0
 13783  06B7  3000               	movlw	0
 13784  06B8  00E3               	movwf	((low ((_flashy_task| (0+256)+6)))^0+1)
 13785                           
 13786                           ;main.c: 258: flashy_task.taskInterval = 10;
 13787  06B9  300A               	movlw	10
 13788  06BA  00E6               	movwf	(_flashy_task^(0+256)+10)
 13789  06BB  3000               	movlw	0
 13790  06BC  00E7               	movwf	(_flashy_task^(0+256)+11)
 13791                           
 13792                           ;main.c: 260: menu_task.taskData = (void *) &menu_TaskData;
 13793  06BD  30BC               	movlw	low _menu_TaskData
 13794  06BE  00D1               	movwf	(low ((_menu_task| (0+256)+2)))^0
 13795  06BF  3002               	movlw	high _menu_TaskData
 13796  06C0  00D2               	movwf	((low ((_menu_task| (0+256)+2))+1))^0
 13797                           
 13798                           ;main.c: 261: menu_task.taskInitCallback = menu_Init;
 13799  06C1  3002               	movlw	low _menu_Init
 13800  06C2  00D3               	movwf	(low ((_menu_task| (0+256)+4)))^0
 13801  06C3  302E               	movlw	high _menu_Init
 13802  06C4  00D4               	movwf	((low ((_menu_task| (0+256)+4)))^0+1)
 13803                           
 13804                           ;main.c: 262: menu_task.taskExecuteCallback = menu_Main;
 13805  06C5  308F               	movlw	low _menu_Main
 13806  06C6  00D7               	movwf	(low ((_menu_task| (0+256)+8)))^0
 13807  06C7  301B               	movlw	high _menu_Main
 13808  06C8  00D8               	movwf	((low ((_menu_task| (0+256)+8)))^0+1)
 13809                           
 13810                           ;main.c: 263: menu_task.taskExitCallback = menu_Exit;
 13811  06C9  3000               	movlw	0
 13812  06CA  00D5               	movwf	(low ((_menu_task| (0+256)+6)))^0
 13813  06CB  3000               	movlw	0
 13814  06CC  00D6               	movwf	((low ((_menu_task| (0+256)+6)))^0+1)
 13815                           
 13816                           ;main.c: 264: menu_task.taskInterval = 10;
 13817  06CD  300A               	movlw	10
 13818  06CE  00D9               	movwf	(_menu_task^(0+256)+10)
 13819  06CF  3000               	movlw	0
 13820  06D0  00DA               	movwf	(_menu_task^(0+256)+11)
 13821                           
 13822                           ;main.c: 266: slot_task.taskData = (void *) &slot_TaskData;
 13823  06D1  30A0               	movlw	low _slot_TaskData
 13824  06D2  00C4               	movwf	(low ((_slot_task| (0+256)+2)))^0
 13825  06D3  3005               	movlw	high _slot_TaskData
 13826  06D4  00C5               	movwf	((low ((_slot_task| (0+256)+2))+1))^0
 13827                           
 13828                           ;main.c: 267: slot_task.taskInitCallback = slot_Init;
 13829  06D5  3064               	movlw	low _slot_Init
 13830  06D6  00C6               	movwf	(low ((_slot_task| (0+256)+4)))^0
 13831  06D7  302E               	movlw	high _slot_Init
 13832  06D8  00C7               	movwf	((low ((_slot_task| (0+256)+4)))^0+1)
 13833                           
 13834                           ;main.c: 268: slot_task.taskExecuteCallback = slot_Main;
 13835  06D9  30E5               	movlw	low _slot_Main
 13836  06DA  00CA               	movwf	(low ((_slot_task| (0+256)+8)))^0
 13837  06DB  3000               	movlw	high _slot_Main
 13838  06DC  00CB               	movwf	((low ((_slot_task| (0+256)+8)))^0+1)
 13839                           
 13840                           ;main.c: 269: slot_task.taskExitCallback = slot_Exit;
 13841  06DD  3000               	movlw	0
 13842  06DE  00C8               	movwf	(low ((_slot_task| (0+256)+6)))^0
 13843  06DF  3000               	movlw	0
 13844  06E0  00C9               	movwf	((low ((_slot_task| (0+256)+6)))^0+1)
 13845                           
 13846                           ;main.c: 270: slot_task.taskInterval = 10;
 13847  06E1  300A               	movlw	10
 13848  06E2  00CC               	movwf	(_slot_task^(0+256)+10)
 13849  06E3  3000               	movlw	0
 13850  06E4  00CD               	movwf	(_slot_task^(0+256)+11)
 13851                           
 13852                           ;main.c: 272: locked_task.taskData = (void *) &locked_TaskData;
 13853  06E5  30AE               	movlw	low _locked_TaskData
 13854  06E6  00B7               	movwf	(low ((_locked_task| (0+256)+2)))^0
 13855  06E7  3002               	movlw	high _locked_TaskData
 13856  06E8  00B8               	movwf	((low ((_locked_task| (0+256)+2))+1))^0
 13857                           
 13858                           ;main.c: 273: locked_task.taskInitCallback = locked_Init;
 13859  06E9  302D               	movlw	low _locked_Init
 13860  06EA  00B9               	movwf	(low ((_locked_task| (0+256)+4)))^0
 13861  06EB  302F               	movlw	high _locked_Init
 13862  06EC  00BA               	movwf	((low ((_locked_task| (0+256)+4)))^0+1)
 13863                           
 13864                           ;main.c: 274: locked_task.taskExecuteCallback = locked_Main;
 13865  06ED  3086               	movlw	low _locked_Main
 13866  06EE  00BD               	movwf	(low ((_locked_task| (0+256)+8)))^0
 13867  06EF  301D               	movlw	high _locked_Main
 13868  06F0  00BE               	movwf	((low ((_locked_task| (0+256)+8)))^0+1)
 13869                           
 13870                           ;main.c: 275: locked_task.taskExitCallback = locked_Exit;
 13871  06F1  3000               	movlw	0
 13872  06F2  00BB               	movwf	(low ((_locked_task| (0+256)+6)))^0
 13873  06F3  3000               	movlw	0
 13874  06F4  00BC               	movwf	((low ((_locked_task| (0+256)+6)))^0+1)
 13875                           
 13876                           ;main.c: 276: locked_task.taskInterval = 10;
 13877  06F5  300A               	movlw	10
 13878  06F6  00BF               	movwf	(_locked_task^(0+256)+10)
 13879  06F7  3000               	movlw	0
 13880  06F8  00C0               	movwf	(_locked_task^(0+256)+11)
 13881                           
 13882                           ;main.c: 278: secret_task.taskData = (void *) &secret_TaskData;
 13883  06F9  30A0               	movlw	low _secret_TaskData
 13884  06FA  00AA               	movwf	(low ((_secret_task| (0+256)+2)))^0
 13885  06FB  3002               	movlw	high _secret_TaskData
 13886  06FC  00AB               	movwf	((low ((_secret_task| (0+256)+2))+1))^0
 13887                           
 13888                           ;main.c: 279: secret_task.taskInitCallback = secret_Init;
 13889  06FD  3045               	movlw	low _secret_Init
 13890  06FE  00AC               	movwf	(low ((_secret_task| (0+256)+4)))^0
 13891  06FF  302D               	movlw	high _secret_Init
 13892  0700  00AD               	movwf	((low ((_secret_task| (0+256)+4)))^0+1)
 13893                           
 13894                           ;main.c: 280: secret_task.taskExecuteCallback = secret_Main;
 13895  0701  3005               	movlw	low _secret_Main
 13896  0702  00B0               	movwf	(low ((_secret_task| (0+256)+8)))^0
 13897  0703  3018               	movlw	high _secret_Main
 13898  0704  00B1               	movwf	((low ((_secret_task| (0+256)+8)))^0+1)
 13899                           
 13900                           ;main.c: 281: secret_task.taskExitCallback = secret_Exit;
 13901  0705  3000               	movlw	0
 13902  0706  00AE               	movwf	(low ((_secret_task| (0+256)+6)))^0
 13903  0707  3000               	movlw	0
 13904  0708  00AF               	movwf	((low ((_secret_task| (0+256)+6)))^0+1)
 13905                           
 13906                           ;main.c: 282: secret_task.taskInterval = 10;
 13907  0709  300A               	movlw	10
 13908  070A  00B2               	movwf	(_secret_task^(0+256)+10)
 13909  070B  3000               	movlw	0
 13910  070C  00B3               	movwf	(_secret_task^(0+256)+11)
 13911                           
 13912                           ;main.c: 284: matrix_task.taskData = (void *) &matrix_TaskData;
 13913  070D  30A0               	movlw	low _matrix_TaskData
 13914  070E  0023               	movlb	3	; select bank3
 13915  070F  00C6               	movwf	(low ((_matrix_task| (0+256)+2)))^(0+128)
 13916  0710  3004               	movlw	high _matrix_TaskData
 13917  0711  00C7               	movwf	((low ((_matrix_task| (0+256)+2))+1))^(0+128)
 13918                           
 13919                           ;main.c: 285: matrix_task.taskInitCallback = matrix_Init;
 13920  0712  3047               	movlw	low _matrix_Init
 13921  0713  00C8               	movwf	(low ((_matrix_task| (0+256)+4)))^(0+128)
 13922  0714  3024               	movlw	high _matrix_Init
 13923  0715  00C9               	movwf	((low ((_matrix_task| (0+256)+4)))^(0+128)+1)
 13924                           
 13925                           ;main.c: 286: matrix_task.taskExecuteCallback = matrix_Main;
 13926  0716  30CB               	movlw	low _matrix_Main
 13927  0717  00CC               	movwf	(low ((_matrix_task| (0+256)+8)))^(0+128)
 13928  0718  3010               	movlw	high _matrix_Main
 13929  0719  00CD               	movwf	((low ((_matrix_task| (0+256)+8)))^(0+128)+1)
 13930                           
 13931                           ;main.c: 287: matrix_task.taskExitCallback = matrix_Exit;
 13932  071A  3000               	movlw	0
 13933  071B  00CA               	movwf	(low ((_matrix_task| (0+256)+6)))^(0+128)
 13934  071C  3000               	movlw	0
 13935  071D  00CB               	movwf	((low ((_matrix_task| (0+256)+6)))^(0+128)+1)
 13936                           
 13937                           ;main.c: 288: matrix_task.taskInterval = 10;
 13938  071E  300A               	movlw	10
 13939  071F  00CE               	movwf	(_matrix_task^(0+384)+10)
 13940  0720  3000               	movlw	0
 13941  0721  00CF               	movwf	(_matrix_task^(0+384)+11)
 13942                           
 13943                           ;main.c: 291: secret_value = SECRET_VALUE_INIT;
 13944  0722  0021               	movlb	1	; select bank1
 13945  0723  01C5               	clrf	_secret_value^(0+128)
 13946  0724  01C6               	clrf	(_secret_value+1)^(0+128)
 13947                           
 13948                           ;main.c: 294: currentTask = FLASHY_TASK;
 13949  0725  3002               	movlw	2
 13950  0726  00BA               	movwf	_currentTask^(0+128)
 13951  0727  3000               	movlw	0
 13952  0728  00BB               	movwf	(_currentTask^(0+128)+1)
 13953                           
 13954                           ;main.c: 296: scheduler_TaskAdd(&schedulerInst, &flashy_task);
 13955  0729  305C               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 13956  072A  0020               	movlb	0	; select bank0
 13957  072B  00EE               	movwf	??_main
 13958  072C  086E               	movf	??_main,w
 13959  072D  00BF               	movwf	scheduler_TaskAdd@task
 13960  072E  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13961  072F  31A3  2349  3186   	fcall	_scheduler_TaskAdd
 13962                           
 13963                           ;main.c: 297: scheduler_TaskAdd(&schedulerInst, &menu_task);
 13964  0732  304F               	movlw	(low (_menu_task| (0+256)))& (0+255)
 13965  0733  0020               	movlb	0	; select bank0
 13966  0734  00EE               	movwf	??_main
 13967  0735  086E               	movf	??_main,w
 13968  0736  00BF               	movwf	scheduler_TaskAdd@task
 13969  0737  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13970  0738  31A3  2349  3186   	fcall	_scheduler_TaskAdd
 13971                           
 13972                           ;main.c: 298: scheduler_TaskAdd(&schedulerInst, &slot_task);
 13973  073B  3042               	movlw	(low (_slot_task| (0+256)))& (0+255)
 13974  073C  0020               	movlb	0	; select bank0
 13975  073D  00EE               	movwf	??_main
 13976  073E  086E               	movf	??_main,w
 13977  073F  00BF               	movwf	scheduler_TaskAdd@task
 13978  0740  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13979  0741  31A3  2349  3186   	fcall	_scheduler_TaskAdd
 13980                           
 13981                           ;main.c: 299: scheduler_TaskAdd(&schedulerInst, &locked_task);
 13982  0744  3035               	movlw	(low (_locked_task| (0+256)))& (0+255)
 13983  0745  0020               	movlb	0	; select bank0
 13984  0746  00EE               	movwf	??_main
 13985  0747  086E               	movf	??_main,w
 13986  0748  00BF               	movwf	scheduler_TaskAdd@task
 13987  0749  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13988  074A  31A3  2349  3186   	fcall	_scheduler_TaskAdd
 13989                           
 13990                           ;main.c: 300: scheduler_TaskAdd(&schedulerInst, &secret_task);
 13991  074D  3028               	movlw	(low (_secret_task| (0+256)))& (0+255)
 13992  074E  0020               	movlb	0	; select bank0
 13993  074F  00EE               	movwf	??_main
 13994  0750  086E               	movf	??_main,w
 13995  0751  00BF               	movwf	scheduler_TaskAdd@task
 13996  0752  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13997  0753  31A3  2349  3186   	fcall	_scheduler_TaskAdd
 13998                           
 13999                           ;main.c: 301: scheduler_TaskAdd(&schedulerInst, &matrix_task);
 14000  0756  30C4               	movlw	(low (_matrix_task| (0+256)))& (0+255)
 14001  0757  0020               	movlb	0	; select bank0
 14002  0758  00EE               	movwf	??_main
 14003  0759  086E               	movf	??_main,w
 14004  075A  00BF               	movwf	scheduler_TaskAdd@task
 14005  075B  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14006  075C  31A3  2349  3186   	fcall	_scheduler_TaskAdd
 14007  075F                     l10667:	
 14008                           ;main.c: 304: while(1){
 14009                           
 14010                           
 14011                           ;main.c: 305: schedulerExecute(&schedulerInst);
 14012  075F  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14013  0760  31A3  23C3  3186   	fcall	_schedulerExecute
 14014  0763  2F5F               	goto	l10667
 14015  0764                     __end_of_main:	
 14016                           
 14017                           	psect	text1
 14018  374C                     __ptext1:	
 14019 ;; *************** function _scheduler_TaskInit *****************
 14020 ;; Defined at:
 14021 ;;		line 36 in file "cooperative_scheduler.c"
 14022 ;; Parameters:    Size  Location     Type
 14023 ;;  task            1    wreg     PTR struct t_schedulerTa
 14024 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14025 ;;		 -> menu_task(13), flashy_task(13), 
 14026 ;; Auto vars:     Size  Location     Type
 14027 ;;  task            1    1[COMMON] PTR struct t_schedulerTa
 14028 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14029 ;;		 -> menu_task(13), flashy_task(13), 
 14030 ;; Return value:  Size  Location     Type
 14031 ;;                  1    wreg      void 
 14032 ;; Registers used:
 14033 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14034 ;; Tracked objects:
 14035 ;;		On entry : 0/0
 14036 ;;		On exit  : 0/0
 14037 ;;		Unchanged: 0/0
 14038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14040 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14042 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14043 ;;Total ram usage:        1 bytes
 14044 ;; Hardware stack levels used:    1
 14045 ;; Hardware stack levels required when called:    4
 14046 ;; This function calls:
 14047 ;;		Nothing
 14048 ;; This function is called by:
 14049 ;;		_main
 14050 ;; This function uses a non-reentrant model
 14051 ;;
 14052                           
 14053                           
 14054                           ;psect for function _scheduler_TaskInit
 14055  374C                     _scheduler_TaskInit:	
 14056                           
 14057                           ;incstack = 0
 14058                           ; Regs used in _scheduler_TaskInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 14059                           ;scheduler_TaskInit@task stored from wreg
 14060  374C  00F1               	movwf	scheduler_TaskInit@task
 14061                           
 14062                           ;cooperative_scheduler.c: 37: task->systemTickLastExecuted = 0;
 14063  374D  0871               	movf	scheduler_TaskInit@task,w
 14064  374E  0086               	movwf	6
 14065  374F  3001               	movlw	1	; select bank2/3
 14066  3750  0087               	movwf	7
 14067  3751  3000               	movlw	0
 14068  3752  3FC0               	movwi [0]fsr1
 14069  3753  3FC1               	movwi [1]fsr1
 14070                           
 14071                           ;cooperative_scheduler.c: 38: task->taskData = (0);
 14072  3754  0871               	movf	scheduler_TaskInit@task,w
 14073  3755  3E02               	addlw	2
 14074  3756  0086               	movwf	6
 14075  3757  3001               	movlw	1	; select bank2/3
 14076  3758  0087               	movwf	7
 14077  3759  3000               	movlw	0
 14078  375A  3FC0               	movwi [0]fsr1
 14079  375B  3FC1               	movwi [1]fsr1
 14080                           
 14081                           ;cooperative_scheduler.c: 39: task->taskInitCallback = (0);
 14082  375C  0871               	movf	scheduler_TaskInit@task,w
 14083  375D  3E04               	addlw	4
 14084  375E  0086               	movwf	6
 14085  375F  3001               	movlw	1	; select bank2/3
 14086  3760  0087               	movwf	7
 14087  3761  3000               	movlw	0
 14088  3762  3FC0               	movwi [0]fsr1
 14089  3763  3FC1               	movwi [1]fsr1
 14090                           
 14091                           ;cooperative_scheduler.c: 40: task->taskExitCallback = (0);
 14092  3764  0871               	movf	scheduler_TaskInit@task,w
 14093  3765  3E06               	addlw	6
 14094  3766  0086               	movwf	6
 14095  3767  3001               	movlw	1	; select bank2/3
 14096  3768  0087               	movwf	7
 14097  3769  3000               	movlw	0
 14098  376A  3FC0               	movwi [0]fsr1
 14099  376B  3FC1               	movwi [1]fsr1
 14100                           
 14101                           ;cooperative_scheduler.c: 41: task->taskExecuteCallback = (0);
 14102  376C  0871               	movf	scheduler_TaskInit@task,w
 14103  376D  3E08               	addlw	8
 14104  376E  0086               	movwf	6
 14105  376F  3001               	movlw	1	; select bank2/3
 14106  3770  0087               	movwf	7
 14107  3771  3000               	movlw	0
 14108  3772  3FC0               	movwi [0]fsr1
 14109  3773  3FC1               	movwi [1]fsr1
 14110                           
 14111                           ;cooperative_scheduler.c: 42: task->taskInterval = 65535;
 14112  3774  0871               	movf	scheduler_TaskInit@task,w
 14113  3775  3E0A               	addlw	10
 14114  3776  0086               	movwf	6
 14115  3777  3001               	movlw	1	; select bank2/3
 14116  3778  0087               	movwf	7
 14117  3779  30FF               	movlw	255
 14118  377A  3FC0               	movwi [0]fsr1
 14119  377B  30FF               	movlw	255
 14120  377C  3FC1               	movwi [1]fsr1
 14121                           
 14122                           ;cooperative_scheduler.c: 43: task->taskId = -1;
 14123  377D  0871               	movf	scheduler_TaskInit@task,w
 14124  377E  3E0C               	addlw	12
 14125  377F  0086               	movwf	6
 14126  3780  3001               	movlw	1	; select bank2/3
 14127  3781  0087               	movwf	7
 14128  3782  0181               	clrf	1
 14129  3783  0381               	decf	1,f
 14130  3784  0008               	return
 14131  3785                     __end_of_scheduler_TaskInit:	
 14132                           
 14133                           	psect	text2
 14134  2349                     __ptext2:	
 14135 ;; *************** function _scheduler_TaskAdd *****************
 14136 ;; Defined at:
 14137 ;;		line 46 in file "cooperative_scheduler.c"
 14138 ;; Parameters:    Size  Location     Type
 14139 ;;  scheduler       1    wreg     PTR struct t_scheduler
 14140 ;;		 -> schedulerInst(18), 
 14141 ;;  task            1   31[BANK0 ] PTR struct t_schedulerTa
 14142 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14143 ;;		 -> menu_task(13), flashy_task(13), 
 14144 ;; Auto vars:     Size  Location     Type
 14145 ;;  scheduler       1   38[BANK0 ] PTR struct t_scheduler
 14146 ;;		 -> schedulerInst(18), 
 14147 ;;  k               1   39[BANK0 ] unsigned char 
 14148 ;; Return value:  Size  Location     Type
 14149 ;;                  1    wreg      char 
 14150 ;; Registers used:
 14151 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14152 ;; Tracked objects:
 14153 ;;		On entry : 0/0
 14154 ;;		On exit  : 0/0
 14155 ;;		Unchanged: 0/0
 14156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14157 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14158 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14159 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14160 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14161 ;;Total ram usage:        9 bytes
 14162 ;; Hardware stack levels used:    1
 14163 ;; Hardware stack levels required when called:   11
 14164 ;; This function calls:
 14165 ;;		Absolute function
 14166 ;;		_flashy_Init
 14167 ;;		_locked_Init
 14168 ;;		_matrix_Init
 14169 ;;		_menu_Init
 14170 ;;		_secret_Init
 14171 ;;		_slot_Init
 14172 ;; This function is called by:
 14173 ;;		_main
 14174 ;; This function uses a non-reentrant model
 14175 ;;
 14176                           
 14177                           
 14178                           ;psect for function _scheduler_TaskAdd
 14179  2349                     _scheduler_TaskAdd:	
 14180                           
 14181                           ;incstack = 0
 14182                           ; Regs used in _scheduler_TaskAdd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14183                           ;scheduler_TaskAdd@scheduler stored from wreg
 14184  2349  0020               	movlb	0	; select bank0
 14185  234A  00C6               	movwf	scheduler_TaskAdd@scheduler
 14186                           
 14187                           ;cooperative_scheduler.c: 47: u8 k;
 14188                           ;cooperative_scheduler.c: 48: for (k = 0; k < 16; k++) {
 14189  234B  01C7               	clrf	scheduler_TaskAdd@k
 14190  234C  3010               	movlw	16
 14191  234D  0247               	subwf	scheduler_TaskAdd@k,w
 14192  234E  1803               	btfsc	3,0
 14193  234F  2BBB               	goto	l10465
 14194  2350                     l10451:	
 14195                           
 14196                           ;cooperative_scheduler.c: 49: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 14197  2350  0846               	movf	scheduler_TaskAdd@scheduler,w
 14198  2351  3E10               	addlw	16
 14199  2352  0086               	movwf	6
 14200  2353  3001               	movlw	1	; select bank2/3
 14201  2354  0087               	movwf	7
 14202  2355  3F40               	moviw [0]fsr1
 14203  2356  00C0               	movwf	??_scheduler_TaskAdd
 14204  2357  3F41               	moviw [1]fsr1
 14205  2358  00C1               	movwf	??_scheduler_TaskAdd+1
 14206  2359  3001               	movlw	1
 14207  235A  00C2               	movwf	??_scheduler_TaskAdd+2
 14208  235B  3000               	movlw	0
 14209  235C  00C3               	movwf	??_scheduler_TaskAdd+3
 14210  235D  0A47               	incf	scheduler_TaskAdd@k,w
 14211  235E  2B61               	goto	u6484
 14212  235F                     u6485:	
 14213  235F  35C2               	lslf	??_scheduler_TaskAdd+2,f
 14214  2360  0DC3               	rlf	??_scheduler_TaskAdd+3,f
 14215  2361                     u6484:	
 14216  2361  0B89               	decfsz	9,f
 14217  2362  2B5F               	goto	u6485
 14218  2363  0840               	movf	??_scheduler_TaskAdd,w
 14219  2364  0542               	andwf	??_scheduler_TaskAdd+2,w
 14220  2365  00C4               	movwf	??_scheduler_TaskAdd+4
 14221  2366  0841               	movf	??_scheduler_TaskAdd+1,w
 14222  2367  0543               	andwf	??_scheduler_TaskAdd+3,w
 14223  2368  00C5               	movwf	??_scheduler_TaskAdd+5
 14224  2369  0844               	movf	??_scheduler_TaskAdd+4,w
 14225  236A  0445               	iorwf	??_scheduler_TaskAdd+5,w
 14226  236B  1D03               	btfss	3,2
 14227  236C  2BB3               	goto	l10461
 14228                           
 14229                           ;cooperative_scheduler.c: 50: scheduler->tasks[k] = task;
 14230  236D  083F               	movf	scheduler_TaskAdd@task,w
 14231  236E  00C0               	movwf	??_scheduler_TaskAdd
 14232  236F  0847               	movf	scheduler_TaskAdd@k,w
 14233  2370  0746               	addwf	scheduler_TaskAdd@scheduler,w
 14234  2371  00C1               	movwf	??_scheduler_TaskAdd+1
 14235  2372  0841               	movf	??_scheduler_TaskAdd+1,w
 14236  2373  0086               	movwf	6
 14237  2374  3001               	movlw	1	; select bank2/3
 14238  2375  0087               	movwf	7
 14239  2376  0840               	movf	??_scheduler_TaskAdd,w
 14240  2377  0081               	movwf	1
 14241                           
 14242                           ;cooperative_scheduler.c: 51: scheduler->taskEntryVector |= (1 << k);
 14243  2378  3001               	movlw	1
 14244  2379  00C0               	movwf	??_scheduler_TaskAdd
 14245  237A  3000               	movlw	0
 14246  237B  00C1               	movwf	??_scheduler_TaskAdd+1
 14247  237C  0A47               	incf	scheduler_TaskAdd@k,w
 14248  237D  2B80               	goto	u6504
 14249  237E                     u6505:	
 14250  237E  35C0               	lslf	??_scheduler_TaskAdd,f
 14251  237F  0DC1               	rlf	??_scheduler_TaskAdd+1,f
 14252  2380                     u6504:	
 14253  2380  0B89               	decfsz	9,f
 14254  2381  2B7E               	goto	u6505
 14255  2382  0846               	movf	scheduler_TaskAdd@scheduler,w
 14256  2383  3E10               	addlw	16
 14257  2384  0086               	movwf	6
 14258  2385  3001               	movlw	1	; select bank2/3
 14259  2386  0087               	movwf	7
 14260  2387  0840               	movf	??_scheduler_TaskAdd,w
 14261  2388  0481               	iorwf	1,f
 14262  2389  3141               	addfsr 1,1
 14263  238A  0841               	movf	??_scheduler_TaskAdd+1,w
 14264  238B  0481               	iorwf	1,f
 14265                           
 14266                           ;cooperative_scheduler.c: 53: if (task->taskInitCallback != (0)) {
 14267  238C  083F               	movf	scheduler_TaskAdd@task,w
 14268  238D  3E04               	addlw	4
 14269  238E  0086               	movwf	6
 14270  238F  3001               	movlw	1	; select bank2/3
 14271  2390  0087               	movwf	7
 14272  2391  0016               	moviw fsr1++
 14273  2392  0401               	iorwf	1,w
 14274  2393  1903               	btfsc	3,2
 14275  2394  2BA8               	goto	l10457
 14276                           
 14277                           ;cooperative_scheduler.c: 54: task->taskInitCallback (task->taskData);
 14278  2395  083F               	movf	scheduler_TaskAdd@task,w
 14279  2396  3E02               	addlw	2
 14280  2397  0086               	movwf	6
 14281  2398  3001               	movlw	1	; select bank2/3
 14282  2399  0087               	movwf	7
 14283  239A  3F40               	moviw [0]fsr1
 14284  239B  00B9               	movwf	matrix_Init@taskData
 14285  239C  3F41               	moviw [1]fsr1
 14286  239D  00BA               	movwf	matrix_Init@taskData+1
 14287  239E  083F               	movf	scheduler_TaskAdd@task,w
 14288  239F  3E04               	addlw	4
 14289  23A0  0086               	movwf	6
 14290  23A1  3001               	movlw	1	; select bank2/3
 14291  23A2  0087               	movwf	7
 14292  23A3  3F41               	moviw [1]fsr1
 14293  23A4  008A               	movwf	10
 14294  23A5  3F40               	moviw [0]fsr1
 14295  23A6  000A               	callw
 14296  23A7  31A3               	pagesel	$
 14297  23A8                     l10457:	
 14298                           
 14299                           ;cooperative_scheduler.c: 55: }
 14300                           ;cooperative_scheduler.c: 57: task->taskId = (s8) k;
 14301  23A8  0020               	movlb	0	; select bank0
 14302  23A9  0847               	movf	scheduler_TaskAdd@k,w
 14303  23AA  00C0               	movwf	??_scheduler_TaskAdd
 14304  23AB  083F               	movf	scheduler_TaskAdd@task,w
 14305  23AC  3E0C               	addlw	12
 14306  23AD  0086               	movwf	6
 14307  23AE  3001               	movlw	1	; select bank2/3
 14308  23AF  0087               	movwf	7
 14309  23B0  0840               	movf	??_scheduler_TaskAdd,w
 14310  23B1  0081               	movwf	1
 14311                           
 14312                           ;cooperative_scheduler.c: 58: return k;
 14313                           ;	Return value of _scheduler_TaskAdd is never used
 14314  23B2  0008               	return
 14315  23B3                     l10461:	
 14316  23B3  3001               	movlw	1
 14317  23B4  00C0               	movwf	??_scheduler_TaskAdd
 14318  23B5  0840               	movf	??_scheduler_TaskAdd,w
 14319  23B6  07C7               	addwf	scheduler_TaskAdd@k,f
 14320  23B7  3010               	movlw	16
 14321  23B8  0247               	subwf	scheduler_TaskAdd@k,w
 14322  23B9  1C03               	skipc
 14323  23BA  2B50               	goto	l10451
 14324  23BB                     l10465:	
 14325                           
 14326                           ;cooperative_scheduler.c: 59: }
 14327                           ;cooperative_scheduler.c: 60: }
 14328                           ;cooperative_scheduler.c: 62: task->taskId = -1;
 14329  23BB  083F               	movf	scheduler_TaskAdd@task,w
 14330  23BC  3E0C               	addlw	12
 14331  23BD  0086               	movwf	6
 14332  23BE  3001               	movlw	1	; select bank2/3
 14333  23BF  0087               	movwf	7
 14334  23C0  0181               	clrf	1
 14335  23C1  0381               	decf	1,f
 14336  23C2  0008               	return
 14337  23C3                     __end_of_scheduler_TaskAdd:	
 14338                           ;cooperative_scheduler.c: 63: return -1;
 14339                           ;	Return value of _scheduler_TaskAdd is never used
 14340                           
 14341                           
 14342                           	psect	text3
 14343  2447                     __ptext3:	
 14344 ;; *************** function _matrix_Init *****************
 14345 ;; Defined at:
 14346 ;;		line 66 in file "matrix_task.c"
 14347 ;; Parameters:    Size  Location     Type
 14348 ;;  taskData        2   25[BANK0 ] PTR void 
 14349 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14350 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14351 ;; Auto vars:     Size  Location     Type
 14352 ;;  data            2   29[BANK0 ] PTR struct t_matrix_task
 14353 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14354 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14355 ;; Return value:  Size  Location     Type
 14356 ;;                  1    wreg      void 
 14357 ;; Registers used:
 14358 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14359 ;; Tracked objects:
 14360 ;;		On entry : 0/0
 14361 ;;		On exit  : 0/0
 14362 ;;		Unchanged: 0/0
 14363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14364 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14365 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14366 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14367 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14368 ;;Total ram usage:        6 bytes
 14369 ;; Hardware stack levels used:    1
 14370 ;; Hardware stack levels required when called:   10
 14371 ;; This function calls:
 14372 ;;		_nullifyBadge_segDisplayErase
 14373 ;;		_nullifyBadge_segDisplayRegister
 14374 ;;		_nullifyBadge_userLedsClr
 14375 ;;		_nullifyBadge_userLedsRegister
 14376 ;; This function is called by:
 14377 ;;		_main
 14378 ;;		_scheduler_TaskAdd
 14379 ;; This function uses a non-reentrant model
 14380 ;;
 14381                           
 14382                           
 14383                           ;psect for function _matrix_Init
 14384  2447                     _matrix_Init:	
 14385                           
 14386                           ;matrix_task.c: 67: struct t_matrix_taskData *data = (struct t_matrix_taskData *) taskDa
      +                          ta;
 14387                           
 14388                           ;incstack = 0
 14389                           ; Regs used in _matrix_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14390  2447  0020               	movlb	0	; select bank0
 14391  2448  083A               	movf	matrix_Init@taskData+1,w
 14392  2449  00BE               	movwf	matrix_Init@data+1
 14393  244A  0839               	movf	matrix_Init@taskData,w
 14394  244B  00BD               	movwf	matrix_Init@data
 14395                           
 14396                           ;matrix_task.c: 70: nullifyBadge_userLedsRegister(data->badge);
 14397  244C  083D               	movf	matrix_Init@data,w
 14398  244D  0086               	movwf	6
 14399  244E  083E               	movf	matrix_Init@data+1,w
 14400  244F  0087               	movwf	7
 14401  2450  0801               	movf	1,w
 14402  2451  31B3  2322  31A4   	fcall	_nullifyBadge_userLedsRegister
 14403                           
 14404                           ;matrix_task.c: 71: nullifyBadge_userLedsClr(data->badge);
 14405  2454  0020               	movlb	0	; select bank0
 14406  2455  083D               	movf	matrix_Init@data,w
 14407  2456  0086               	movwf	6
 14408  2457  083E               	movf	matrix_Init@data+1,w
 14409  2458  0087               	movwf	7
 14410  2459  0801               	movf	1,w
 14411  245A  3187  27FA  31A4   	fcall	_nullifyBadge_userLedsClr
 14412                           
 14413                           ;matrix_task.c: 72: nullifyBadge_segDisplayRegister(data->badge);
 14414  245D  0020               	movlb	0	; select bank0
 14415  245E  083D               	movf	matrix_Init@data,w
 14416  245F  0086               	movwf	6
 14417  2460  083E               	movf	matrix_Init@data+1,w
 14418  2461  0087               	movwf	7
 14419  2462  0801               	movf	1,w
 14420  2463  31B2  224B  31A4   	fcall	_nullifyBadge_segDisplayRegister
 14421                           
 14422                           ;matrix_task.c: 73: nullifyBadge_segDisplayErase(data->badge);
 14423  2466  0020               	movlb	0	; select bank0
 14424  2467  083D               	movf	matrix_Init@data,w
 14425  2468  0086               	movwf	6
 14426  2469  083E               	movf	matrix_Init@data+1,w
 14427  246A  0087               	movwf	7
 14428  246B  0801               	movf	1,w
 14429  246C  31B2  223D  31A4   	fcall	_nullifyBadge_segDisplayErase
 14430                           
 14431                           ;matrix_task.c: 74: matrix_found =0;
 14432  246F  0021               	movlb	1	; select bank1
 14433  2470  01C2               	clrf	_matrix_found^(0+128)
 14434                           
 14435                           ;matrix_task.c: 76: data->display_state = MATRIX_STATE_DISPLAY;
 14436  2471  0020               	movlb	0	; select bank0
 14437  2472  083D               	movf	matrix_Init@data,w
 14438  2473  3E02               	addlw	2
 14439  2474  00BB               	movwf	??_matrix_Init
 14440  2475  3000               	movlw	0
 14441  2476  3D3E               	addwfc	matrix_Init@data+1,w
 14442  2477  00BC               	movwf	??_matrix_Init+1
 14443  2478  083B               	movf	??_matrix_Init,w
 14444  2479  0086               	movwf	6
 14445  247A  083C               	movf	??_matrix_Init+1,w
 14446  247B  0087               	movwf	7
 14447  247C  300A               	movlw	10
 14448  247D  0081               	movwf	1
 14449                           
 14450                           ;matrix_task.c: 77: data->martix_state = STILL_IN_MATRIX;
 14451  247E  083D               	movf	matrix_Init@data,w
 14452  247F  3E01               	addlw	1
 14453  2480  00BB               	movwf	??_matrix_Init
 14454  2481  3000               	movlw	0
 14455  2482  3D3E               	addwfc	matrix_Init@data+1,w
 14456  2483  00BC               	movwf	??_matrix_Init+1
 14457  2484  083B               	movf	??_matrix_Init,w
 14458  2485  0086               	movwf	6
 14459  2486  083C               	movf	??_matrix_Init+1,w
 14460  2487  0087               	movwf	7
 14461  2488  3001               	movlw	1
 14462  2489  0081               	movwf	1
 14463                           
 14464                           ;matrix_task.c: 78: matrix_leds_idx =0;
 14465  248A  0021               	movlb	1	; select bank1
 14466  248B  01A0               	clrf	_matrix_leds_idx^(0+128)
 14467  248C  01A1               	clrf	(_matrix_leds_idx+1)^(0+128)
 14468                           
 14469                           ;matrix_task.c: 81: data->holdCountA = 0 ;
 14470  248D  0020               	movlb	0	; select bank0
 14471  248E  083D               	movf	matrix_Init@data,w
 14472  248F  0086               	movwf	6
 14473  2490  083E               	movf	matrix_Init@data+1,w
 14474  2491  0087               	movwf	7
 14475  2492  3149               	addfsr 1,9
 14476  2493  3000               	movlw	0
 14477  2494  3FC0               	movwi [0]fsr1
 14478  2495  3FC1               	movwi [1]fsr1
 14479                           
 14480                           ;matrix_task.c: 82: data->holdCountB = 0 ;
 14481  2496  083D               	movf	matrix_Init@data,w
 14482  2497  0086               	movwf	6
 14483  2498  083E               	movf	matrix_Init@data+1,w
 14484  2499  0087               	movwf	7
 14485  249A  314B               	addfsr 1,11
 14486  249B  3000               	movlw	0
 14487  249C  3FC0               	movwi [0]fsr1
 14488  249D  3FC1               	movwi [1]fsr1
 14489                           
 14490                           ;matrix_task.c: 83: data->holdCountX = 0 ;
 14491  249E  083D               	movf	matrix_Init@data,w
 14492  249F  0086               	movwf	6
 14493  24A0  083E               	movf	matrix_Init@data+1,w
 14494  24A1  0087               	movwf	7
 14495  24A2  314D               	addfsr 1,13
 14496  24A3  3000               	movlw	0
 14497  24A4  3FC0               	movwi [0]fsr1
 14498  24A5  3FC1               	movwi [1]fsr1
 14499                           
 14500                           ;matrix_task.c: 84: data->holdCountY = 0 ;
 14501  24A6  083D               	movf	matrix_Init@data,w
 14502  24A7  0086               	movwf	6
 14503  24A8  083E               	movf	matrix_Init@data+1,w
 14504  24A9  0087               	movwf	7
 14505  24AA  314F               	addfsr 1,15
 14506  24AB  3000               	movlw	0
 14507  24AC  3FC0               	movwi [0]fsr1
 14508  24AD  3FC1               	movwi [1]fsr1
 14509                           
 14510                           ;matrix_task.c: 85: data->holdCountXY = 0;
 14511  24AE  083D               	movf	matrix_Init@data,w
 14512  24AF  0086               	movwf	6
 14513  24B0  083E               	movf	matrix_Init@data+1,w
 14514  24B1  0087               	movwf	7
 14515  24B2  3151               	addfsr 1,17
 14516  24B3  3000               	movlw	0
 14517  24B4  3FC0               	movwi [0]fsr1
 14518  24B5  3FC1               	movwi [1]fsr1
 14519                           
 14520                           ;matrix_task.c: 86: data->holdCountAY = 0;
 14521  24B6  083D               	movf	matrix_Init@data,w
 14522  24B7  0086               	movwf	6
 14523  24B8  083E               	movf	matrix_Init@data+1,w
 14524  24B9  0087               	movwf	7
 14525  24BA  3153               	addfsr 1,19
 14526  24BB  3000               	movlw	0
 14527  24BC  3FC0               	movwi [0]fsr1
 14528  24BD  3FC1               	movwi [1]fsr1
 14529                           
 14530                           ;matrix_task.c: 87: data->holdCountAX = 0;
 14531  24BE  083D               	movf	matrix_Init@data,w
 14532  24BF  0086               	movwf	6
 14533  24C0  083E               	movf	matrix_Init@data+1,w
 14534  24C1  0087               	movwf	7
 14535  24C2  3155               	addfsr 1,21
 14536  24C3  3000               	movlw	0
 14537  24C4  3FC0               	movwi [0]fsr1
 14538  24C5  3FC1               	movwi [1]fsr1
 14539                           
 14540                           ;matrix_task.c: 88: data->holdCountBX = 0;
 14541  24C6  083D               	movf	matrix_Init@data,w
 14542  24C7  0086               	movwf	6
 14543  24C8  083E               	movf	matrix_Init@data+1,w
 14544  24C9  0087               	movwf	7
 14545  24CA  3157               	addfsr 1,23
 14546  24CB  3000               	movlw	0
 14547  24CC  3FC0               	movwi [0]fsr1
 14548  24CD  3FC1               	movwi [1]fsr1
 14549                           
 14550                           ;matrix_task.c: 89: data->holdCountBY = 0;
 14551  24CE  083D               	movf	matrix_Init@data,w
 14552  24CF  0086               	movwf	6
 14553  24D0  083E               	movf	matrix_Init@data+1,w
 14554  24D1  0087               	movwf	7
 14555  24D2  3159               	addfsr 1,25
 14556  24D3  3000               	movlw	0
 14557  24D4  3FC0               	movwi [0]fsr1
 14558  24D5  3FC1               	movwi [1]fsr1
 14559                           
 14560                           ;matrix_task.c: 90: data->holdCountBA = 0;
 14561  24D6  083D               	movf	matrix_Init@data,w
 14562  24D7  0086               	movwf	6
 14563  24D8  083E               	movf	matrix_Init@data+1,w
 14564  24D9  0087               	movwf	7
 14565  24DA  315B               	addfsr 1,27
 14566  24DB  3000               	movlw	0
 14567  24DC  3FC0               	movwi [0]fsr1
 14568  24DD  3FC1               	movwi [1]fsr1
 14569                           
 14570                           ;matrix_task.c: 91: data->noholdCount = 0;
 14571  24DE  083D               	movf	matrix_Init@data,w
 14572  24DF  0086               	movwf	6
 14573  24E0  083E               	movf	matrix_Init@data+1,w
 14574  24E1  0087               	movwf	7
 14575  24E2  315D               	addfsr 1,29
 14576  24E3  3000               	movlw	0
 14577  24E4  3FC0               	movwi [0]fsr1
 14578  24E5  3FC1               	movwi [1]fsr1
 14579  24E6  0008               	return
 14580  24E7                     __end_of_matrix_Init:	
 14581                           
 14582                           	psect	text4
 14583  2D45                     __ptext4:	
 14584 ;; *************** function _secret_Init *****************
 14585 ;; Defined at:
 14586 ;;		line 51 in file "secret_task.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;  taskData        2   25[BANK0 ] PTR void 
 14589 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14590 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14591 ;; Auto vars:     Size  Location     Type
 14592 ;;  data            2   27[BANK0 ] PTR struct t_secret_task
 14593 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14594 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14595 ;; Return value:  Size  Location     Type
 14596 ;;                  1    wreg      void 
 14597 ;; Registers used:
 14598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14599 ;; Tracked objects:
 14600 ;;		On entry : 0/0
 14601 ;;		On exit  : 0/0
 14602 ;;		Unchanged: 0/0
 14603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14604 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14605 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14607 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14608 ;;Total ram usage:        4 bytes
 14609 ;; Hardware stack levels used:    1
 14610 ;; Hardware stack levels required when called:   10
 14611 ;; This function calls:
 14612 ;;		_nullifyBadge_segDisplayErase
 14613 ;;		_nullifyBadge_segDisplayRegister
 14614 ;;		_nullifyBadge_userLedsClr
 14615 ;;		_nullifyBadge_userLedsRegister
 14616 ;; This function is called by:
 14617 ;;		_main
 14618 ;;		_scheduler_TaskAdd
 14619 ;; This function uses a non-reentrant model
 14620 ;;
 14621                           
 14622                           
 14623                           ;psect for function _secret_Init
 14624  2D45                     _secret_Init:	
 14625                           
 14626                           ;secret_task.c: 52: struct t_secret_taskData *data = (struct t_secret_taskData *) taskDa
      +                          ta;
 14627                           
 14628                           ;incstack = 0
 14629                           ; Regs used in _secret_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14630  2D45  0020               	movlb	0	; select bank0
 14631  2D46  083A               	movf	secret_Init@taskData+1,w
 14632  2D47  00BC               	movwf	secret_Init@data+1
 14633  2D48  0839               	movf	secret_Init@taskData,w
 14634  2D49  00BB               	movwf	secret_Init@data
 14635                           
 14636                           ;secret_task.c: 55: nullifyBadge_userLedsRegister(data->badge);
 14637  2D4A  083B               	movf	secret_Init@data,w
 14638  2D4B  0086               	movwf	6
 14639  2D4C  083C               	movf	secret_Init@data+1,w
 14640  2D4D  0087               	movwf	7
 14641  2D4E  0801               	movf	1,w
 14642  2D4F  31B3  2322  31AD   	fcall	_nullifyBadge_userLedsRegister
 14643                           
 14644                           ;secret_task.c: 56: nullifyBadge_userLedsClr(data->badge);
 14645  2D52  0020               	movlb	0	; select bank0
 14646  2D53  083B               	movf	secret_Init@data,w
 14647  2D54  0086               	movwf	6
 14648  2D55  083C               	movf	secret_Init@data+1,w
 14649  2D56  0087               	movwf	7
 14650  2D57  0801               	movf	1,w
 14651  2D58  3187  27FA  31AD   	fcall	_nullifyBadge_userLedsClr
 14652                           
 14653                           ;secret_task.c: 57: nullifyBadge_segDisplayRegister(data->badge);
 14654  2D5B  0020               	movlb	0	; select bank0
 14655  2D5C  083B               	movf	secret_Init@data,w
 14656  2D5D  0086               	movwf	6
 14657  2D5E  083C               	movf	secret_Init@data+1,w
 14658  2D5F  0087               	movwf	7
 14659  2D60  0801               	movf	1,w
 14660  2D61  31B2  224B  31AD   	fcall	_nullifyBadge_segDisplayRegister
 14661                           
 14662                           ;secret_task.c: 58: nullifyBadge_segDisplayErase(data->badge);
 14663  2D64  0020               	movlb	0	; select bank0
 14664  2D65  083B               	movf	secret_Init@data,w
 14665  2D66  0086               	movwf	6
 14666  2D67  083C               	movf	secret_Init@data+1,w
 14667  2D68  0087               	movwf	7
 14668  2D69  0801               	movf	1,w
 14669  2D6A  31B2  223D  31AD   	fcall	_nullifyBadge_segDisplayErase
 14670                           
 14671                           ;secret_task.c: 61: data->delayTickCount = 300;
 14672  2D6D  0020               	movlb	0	; select bank0
 14673  2D6E  083B               	movf	secret_Init@data,w
 14674  2D6F  0086               	movwf	6
 14675  2D70  083C               	movf	secret_Init@data+1,w
 14676  2D71  0087               	movwf	7
 14677  2D72  3142               	addfsr 1,2
 14678  2D73  302C               	movlw	44
 14679  2D74  3FC0               	movwi [0]fsr1
 14680  2D75  3001               	movlw	1
 14681  2D76  3FC1               	movwi [1]fsr1
 14682                           
 14683                           ;secret_task.c: 62: data->holdCountA = 0;
 14684  2D77  083B               	movf	secret_Init@data,w
 14685  2D78  0086               	movwf	6
 14686  2D79  083C               	movf	secret_Init@data+1,w
 14687  2D7A  0087               	movwf	7
 14688  2D7B  3144               	addfsr 1,4
 14689  2D7C  3000               	movlw	0
 14690  2D7D  3FC0               	movwi [0]fsr1
 14691  2D7E  3FC1               	movwi [1]fsr1
 14692                           
 14693                           ;secret_task.c: 63: data->holdCountB = 0;
 14694  2D7F  083B               	movf	secret_Init@data,w
 14695  2D80  0086               	movwf	6
 14696  2D81  083C               	movf	secret_Init@data+1,w
 14697  2D82  0087               	movwf	7
 14698  2D83  3146               	addfsr 1,6
 14699  2D84  3000               	movlw	0
 14700  2D85  3FC0               	movwi [0]fsr1
 14701  2D86  3FC1               	movwi [1]fsr1
 14702                           
 14703                           ;secret_task.c: 64: data->holdCountX = 0;
 14704  2D87  083B               	movf	secret_Init@data,w
 14705  2D88  0086               	movwf	6
 14706  2D89  083C               	movf	secret_Init@data+1,w
 14707  2D8A  0087               	movwf	7
 14708  2D8B  3148               	addfsr 1,8
 14709  2D8C  3000               	movlw	0
 14710  2D8D  3FC0               	movwi [0]fsr1
 14711  2D8E  3FC1               	movwi [1]fsr1
 14712                           
 14713                           ;secret_task.c: 65: data->holdCountY = 0;
 14714  2D8F  083B               	movf	secret_Init@data,w
 14715  2D90  0086               	movwf	6
 14716  2D91  083C               	movf	secret_Init@data+1,w
 14717  2D92  0087               	movwf	7
 14718  2D93  314A               	addfsr 1,10
 14719  2D94  3000               	movlw	0
 14720  2D95  3FC0               	movwi [0]fsr1
 14721  2D96  3FC1               	movwi [1]fsr1
 14722                           
 14723                           ;secret_task.c: 66: data->noholdCount = 0;
 14724  2D97  083B               	movf	secret_Init@data,w
 14725  2D98  0086               	movwf	6
 14726  2D99  083C               	movf	secret_Init@data+1,w
 14727  2D9A  0087               	movwf	7
 14728  2D9B  314C               	addfsr 1,12
 14729  2D9C  3000               	movlw	0
 14730  2D9D  3FC0               	movwi [0]fsr1
 14731  2D9E  3FC1               	movwi [1]fsr1
 14732  2D9F  0008               	return
 14733  2DA0                     __end_of_secret_Init:	
 14734                           
 14735                           	psect	text5
 14736  2F2D                     __ptext5:	
 14737 ;; *************** function _locked_Init *****************
 14738 ;; Defined at:
 14739 ;;		line 102 in file "locked_task.c"
 14740 ;; Parameters:    Size  Location     Type
 14741 ;;  taskData        2   25[BANK0 ] PTR void 
 14742 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14743 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14744 ;; Auto vars:     Size  Location     Type
 14745 ;;  data            2   27[BANK0 ] PTR struct t_locked_task
 14746 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14747 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14748 ;; Return value:  Size  Location     Type
 14749 ;;                  1    wreg      void 
 14750 ;; Registers used:
 14751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14752 ;; Tracked objects:
 14753 ;;		On entry : 0/0
 14754 ;;		On exit  : 0/0
 14755 ;;		Unchanged: 0/0
 14756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14757 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14758 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14760 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14761 ;;Total ram usage:        4 bytes
 14762 ;; Hardware stack levels used:    1
 14763 ;; Hardware stack levels required when called:   10
 14764 ;; This function calls:
 14765 ;;		_locked_lock_leds
 14766 ;;		_nullifyBadge_segDisplayErase
 14767 ;;		_nullifyBadge_segDisplayRegister
 14768 ;;		_nullifyBadge_userLedsClr
 14769 ;;		_nullifyBadge_userLedsRegister
 14770 ;; This function is called by:
 14771 ;;		_main
 14772 ;;		_scheduler_TaskAdd
 14773 ;; This function uses a non-reentrant model
 14774 ;;
 14775                           
 14776                           
 14777                           ;psect for function _locked_Init
 14778  2F2D                     _locked_Init:	
 14779                           
 14780                           ;locked_task.c: 103: struct t_locked_taskData *data = (struct t_locked_taskData *) taskD
      +                          ata;
 14781                           
 14782                           ;incstack = 0
 14783                           ; Regs used in _locked_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14784  2F2D  0020               	movlb	0	; select bank0
 14785  2F2E  083A               	movf	locked_Init@taskData+1,w
 14786  2F2F  00BC               	movwf	locked_Init@data+1
 14787  2F30  0839               	movf	locked_Init@taskData,w
 14788  2F31  00BB               	movwf	locked_Init@data
 14789                           
 14790                           ;locked_task.c: 106: nullifyBadge_userLedsRegister(data->badge);
 14791  2F32  083B               	movf	locked_Init@data,w
 14792  2F33  0086               	movwf	6
 14793  2F34  083C               	movf	locked_Init@data+1,w
 14794  2F35  0087               	movwf	7
 14795  2F36  0801               	movf	1,w
 14796  2F37  31B3  2322  31AF   	fcall	_nullifyBadge_userLedsRegister
 14797                           
 14798                           ;locked_task.c: 107: nullifyBadge_userLedsClr(data->badge);
 14799  2F3A  0020               	movlb	0	; select bank0
 14800  2F3B  083B               	movf	locked_Init@data,w
 14801  2F3C  0086               	movwf	6
 14802  2F3D  083C               	movf	locked_Init@data+1,w
 14803  2F3E  0087               	movwf	7
 14804  2F3F  0801               	movf	1,w
 14805  2F40  3187  27FA  31AF   	fcall	_nullifyBadge_userLedsClr
 14806                           
 14807                           ;locked_task.c: 108: nullifyBadge_segDisplayRegister(data->badge);
 14808  2F43  0020               	movlb	0	; select bank0
 14809  2F44  083B               	movf	locked_Init@data,w
 14810  2F45  0086               	movwf	6
 14811  2F46  083C               	movf	locked_Init@data+1,w
 14812  2F47  0087               	movwf	7
 14813  2F48  0801               	movf	1,w
 14814  2F49  31B2  224B  31AF   	fcall	_nullifyBadge_segDisplayRegister
 14815                           
 14816                           ;locked_task.c: 109: nullifyBadge_segDisplayErase(data->badge);
 14817  2F4C  0020               	movlb	0	; select bank0
 14818  2F4D  083B               	movf	locked_Init@data,w
 14819  2F4E  0086               	movwf	6
 14820  2F4F  083C               	movf	locked_Init@data+1,w
 14821  2F50  0087               	movwf	7
 14822  2F51  0801               	movf	1,w
 14823  2F52  31B2  223D  31AF   	fcall	_nullifyBadge_segDisplayErase
 14824                           
 14825                           ;locked_task.c: 110: pw_found =0;
 14826  2F55  0021               	movlb	1	; select bank1
 14827  2F56  01C3               	clrf	_pw_found^(0+128)
 14828                           
 14829                           ;locked_task.c: 112: locked_lock_leds();
 14830  2F57  31B4  2462  31AF   	fcall	_locked_lock_leds
 14831                           
 14832                           ;locked_task.c: 113: data->state = LOCKED_LOCKED_STATE;
 14833  2F5A  0020               	movlb	0	; select bank0
 14834  2F5B  083B               	movf	locked_Init@data,w
 14835  2F5C  0086               	movwf	6
 14836  2F5D  083C               	movf	locked_Init@data+1,w
 14837  2F5E  0087               	movwf	7
 14838  2F5F  314D               	addfsr 1,13
 14839  2F60  0181               	clrf	1
 14840                           
 14841                           ;locked_task.c: 114: data->delayTickCount = 0;
 14842  2F61  083B               	movf	locked_Init@data,w
 14843  2F62  0086               	movwf	6
 14844  2F63  083C               	movf	locked_Init@data+1,w
 14845  2F64  0087               	movwf	7
 14846  2F65  3141               	addfsr 1,1
 14847  2F66  3000               	movlw	0
 14848  2F67  3FC0               	movwi [0]fsr1
 14849  2F68  3FC1               	movwi [1]fsr1
 14850                           
 14851                           ;locked_task.c: 115: data->holdCountA = 0;
 14852  2F69  083B               	movf	locked_Init@data,w
 14853  2F6A  0086               	movwf	6
 14854  2F6B  083C               	movf	locked_Init@data+1,w
 14855  2F6C  0087               	movwf	7
 14856  2F6D  3143               	addfsr 1,3
 14857  2F6E  3000               	movlw	0
 14858  2F6F  3FC0               	movwi [0]fsr1
 14859  2F70  3FC1               	movwi [1]fsr1
 14860                           
 14861                           ;locked_task.c: 116: data->holdCountB = 0;
 14862  2F71  083B               	movf	locked_Init@data,w
 14863  2F72  0086               	movwf	6
 14864  2F73  083C               	movf	locked_Init@data+1,w
 14865  2F74  0087               	movwf	7
 14866  2F75  3145               	addfsr 1,5
 14867  2F76  3000               	movlw	0
 14868  2F77  3FC0               	movwi [0]fsr1
 14869  2F78  3FC1               	movwi [1]fsr1
 14870                           
 14871                           ;locked_task.c: 117: data->holdCountX = 0;
 14872  2F79  083B               	movf	locked_Init@data,w
 14873  2F7A  0086               	movwf	6
 14874  2F7B  083C               	movf	locked_Init@data+1,w
 14875  2F7C  0087               	movwf	7
 14876  2F7D  3147               	addfsr 1,7
 14877  2F7E  3000               	movlw	0
 14878  2F7F  3FC0               	movwi [0]fsr1
 14879  2F80  3FC1               	movwi [1]fsr1
 14880                           
 14881                           ;locked_task.c: 118: data->holdCountY = 0;
 14882  2F81  083B               	movf	locked_Init@data,w
 14883  2F82  0086               	movwf	6
 14884  2F83  083C               	movf	locked_Init@data+1,w
 14885  2F84  0087               	movwf	7
 14886  2F85  3149               	addfsr 1,9
 14887  2F86  3000               	movlw	0
 14888  2F87  3FC0               	movwi [0]fsr1
 14889  2F88  3FC1               	movwi [1]fsr1
 14890                           
 14891                           ;locked_task.c: 119: data->noholdCount = 0;
 14892  2F89  083B               	movf	locked_Init@data,w
 14893  2F8A  0086               	movwf	6
 14894  2F8B  083C               	movf	locked_Init@data+1,w
 14895  2F8C  0087               	movwf	7
 14896  2F8D  314B               	addfsr 1,11
 14897  2F8E  3000               	movlw	0
 14898  2F8F  3FC0               	movwi [0]fsr1
 14899  2F90  3FC1               	movwi [1]fsr1
 14900  2F91  0008               	return
 14901  2F92                     __end_of_locked_Init:	
 14902                           
 14903                           	psect	text6
 14904  2E02                     __ptext6:	
 14905 ;; *************** function _menu_Init *****************
 14906 ;; Defined at:
 14907 ;;		line 37 in file "menu_task.c"
 14908 ;; Parameters:    Size  Location     Type
 14909 ;;  taskData        2   25[BANK0 ] PTR void 
 14910 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14911 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14912 ;; Auto vars:     Size  Location     Type
 14913 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 14914 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14915 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14916 ;; Return value:  Size  Location     Type
 14917 ;;                  1    wreg      void 
 14918 ;; Registers used:
 14919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14920 ;; Tracked objects:
 14921 ;;		On entry : 0/0
 14922 ;;		On exit  : 0/0
 14923 ;;		Unchanged: 0/0
 14924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14925 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14926 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14928 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14929 ;;Total ram usage:        4 bytes
 14930 ;; Hardware stack levels used:    1
 14931 ;; Hardware stack levels required when called:   10
 14932 ;; This function calls:
 14933 ;;		_nullifyBadge_segDisplayErase
 14934 ;;		_nullifyBadge_segDisplayRegister
 14935 ;;		_nullifyBadge_userLedsClr
 14936 ;;		_nullifyBadge_userLedsRegister
 14937 ;; This function is called by:
 14938 ;;		_main
 14939 ;;		_scheduler_TaskAdd
 14940 ;; This function uses a non-reentrant model
 14941 ;;
 14942                           
 14943                           
 14944                           ;psect for function _menu_Init
 14945  2E02                     _menu_Init:	
 14946                           
 14947                           ;menu_task.c: 38: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 14948                           
 14949                           ;incstack = 0
 14950                           ; Regs used in _menu_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14951  2E02  0020               	movlb	0	; select bank0
 14952  2E03  083A               	movf	menu_Init@taskData+1,w
 14953  2E04  00BC               	movwf	menu_Init@data+1
 14954  2E05  0839               	movf	menu_Init@taskData,w
 14955  2E06  00BB               	movwf	menu_Init@data
 14956                           
 14957                           ;menu_task.c: 41: nullifyBadge_userLedsRegister(data->badge);
 14958  2E07  083B               	movf	menu_Init@data,w
 14959  2E08  0086               	movwf	6
 14960  2E09  083C               	movf	menu_Init@data+1,w
 14961  2E0A  0087               	movwf	7
 14962  2E0B  0801               	movf	1,w
 14963  2E0C  31B3  2322  31AE   	fcall	_nullifyBadge_userLedsRegister
 14964                           
 14965                           ;menu_task.c: 42: nullifyBadge_userLedsClr(data->badge);
 14966  2E0F  0020               	movlb	0	; select bank0
 14967  2E10  083B               	movf	menu_Init@data,w
 14968  2E11  0086               	movwf	6
 14969  2E12  083C               	movf	menu_Init@data+1,w
 14970  2E13  0087               	movwf	7
 14971  2E14  0801               	movf	1,w
 14972  2E15  3187  27FA  31AE   	fcall	_nullifyBadge_userLedsClr
 14973                           
 14974                           ;menu_task.c: 43: nullifyBadge_segDisplayRegister(data->badge);
 14975  2E18  0020               	movlb	0	; select bank0
 14976  2E19  083B               	movf	menu_Init@data,w
 14977  2E1A  0086               	movwf	6
 14978  2E1B  083C               	movf	menu_Init@data+1,w
 14979  2E1C  0087               	movwf	7
 14980  2E1D  0801               	movf	1,w
 14981  2E1E  31B2  224B  31AE   	fcall	_nullifyBadge_segDisplayRegister
 14982                           
 14983                           ;menu_task.c: 44: nullifyBadge_segDisplayErase(data->badge);
 14984  2E21  0020               	movlb	0	; select bank0
 14985  2E22  083B               	movf	menu_Init@data,w
 14986  2E23  0086               	movwf	6
 14987  2E24  083C               	movf	menu_Init@data+1,w
 14988  2E25  0087               	movwf	7
 14989  2E26  0801               	movf	1,w
 14990  2E27  31B2  223D  31AE   	fcall	_nullifyBadge_segDisplayErase
 14991                           
 14992                           ;menu_task.c: 47: data->delayTickCount = 50;
 14993  2E2A  0020               	movlb	0	; select bank0
 14994  2E2B  083B               	movf	menu_Init@data,w
 14995  2E2C  0086               	movwf	6
 14996  2E2D  083C               	movf	menu_Init@data+1,w
 14997  2E2E  0087               	movwf	7
 14998  2E2F  3142               	addfsr 1,2
 14999  2E30  3032               	movlw	50
 15000  2E31  3FC0               	movwi [0]fsr1
 15001  2E32  3000               	movlw	0
 15002  2E33  3FC1               	movwi [1]fsr1
 15003                           
 15004                           ;menu_task.c: 48: data->holdCountA = 0;
 15005  2E34  083B               	movf	menu_Init@data,w
 15006  2E35  0086               	movwf	6
 15007  2E36  083C               	movf	menu_Init@data+1,w
 15008  2E37  0087               	movwf	7
 15009  2E38  3144               	addfsr 1,4
 15010  2E39  3000               	movlw	0
 15011  2E3A  3FC0               	movwi [0]fsr1
 15012  2E3B  3FC1               	movwi [1]fsr1
 15013                           
 15014                           ;menu_task.c: 49: data->holdCountB = 0;
 15015  2E3C  083B               	movf	menu_Init@data,w
 15016  2E3D  0086               	movwf	6
 15017  2E3E  083C               	movf	menu_Init@data+1,w
 15018  2E3F  0087               	movwf	7
 15019  2E40  3146               	addfsr 1,6
 15020  2E41  3000               	movlw	0
 15021  2E42  3FC0               	movwi [0]fsr1
 15022  2E43  3FC1               	movwi [1]fsr1
 15023                           
 15024                           ;menu_task.c: 50: data->holdCountX = 0;
 15025  2E44  083B               	movf	menu_Init@data,w
 15026  2E45  0086               	movwf	6
 15027  2E46  083C               	movf	menu_Init@data+1,w
 15028  2E47  0087               	movwf	7
 15029  2E48  3148               	addfsr 1,8
 15030  2E49  3000               	movlw	0
 15031  2E4A  3FC0               	movwi [0]fsr1
 15032  2E4B  3FC1               	movwi [1]fsr1
 15033                           
 15034                           ;menu_task.c: 51: data->holdCountY = 0;
 15035  2E4C  083B               	movf	menu_Init@data,w
 15036  2E4D  0086               	movwf	6
 15037  2E4E  083C               	movf	menu_Init@data+1,w
 15038  2E4F  0087               	movwf	7
 15039  2E50  314A               	addfsr 1,10
 15040  2E51  3000               	movlw	0
 15041  2E52  3FC0               	movwi [0]fsr1
 15042  2E53  3FC1               	movwi [1]fsr1
 15043                           
 15044                           ;menu_task.c: 52: data->noholdCount = 0;
 15045  2E54  083B               	movf	menu_Init@data,w
 15046  2E55  0086               	movwf	6
 15047  2E56  083C               	movf	menu_Init@data+1,w
 15048  2E57  0087               	movwf	7
 15049  2E58  314C               	addfsr 1,12
 15050  2E59  3000               	movlw	0
 15051  2E5A  3FC0               	movwi [0]fsr1
 15052  2E5B  3FC1               	movwi [1]fsr1
 15053                           
 15054                           ;menu_task.c: 54: menu_option_idx = 0;
 15055  2E5C  0021               	movlb	1	; select bank1
 15056  2E5D  01B6               	clrf	_menu_option_idx^(0+128)
 15057  2E5E  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 15058                           
 15059                           ;menu_task.c: 56: menu_option_size = sizeof(menu_option)/sizeof(menu_option[0]);
 15060  2E5F  3005               	movlw	5
 15061  2E60  00B4               	movwf	_menu_option_size^(0+128)
 15062  2E61  3000               	movlw	0
 15063  2E62  00B5               	movwf	(_menu_option_size^(0+128)+1)
 15064  2E63  0008               	return
 15065  2E64                     __end_of_menu_Init:	
 15066                           
 15067                           	psect	text7
 15068  0764                     __ptext7:	
 15069 ;; *************** function _flashy_Init *****************
 15070 ;; Defined at:
 15071 ;;		line 66 in file "flashy_task.c"
 15072 ;; Parameters:    Size  Location     Type
 15073 ;;  taskData        2   25[BANK0 ] PTR void 
 15074 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15075 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15076 ;; Auto vars:     Size  Location     Type
 15077 ;;  data            2   27[BANK0 ] PTR struct t_flashy_task
 15078 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15079 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15080 ;; Return value:  Size  Location     Type
 15081 ;;                  1    wreg      void 
 15082 ;; Registers used:
 15083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15084 ;; Tracked objects:
 15085 ;;		On entry : 0/0
 15086 ;;		On exit  : 0/0
 15087 ;;		Unchanged: 0/0
 15088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15089 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15090 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15092 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15093 ;;Total ram usage:        4 bytes
 15094 ;; Hardware stack levels used:    1
 15095 ;; Hardware stack levels required when called:   10
 15096 ;; This function calls:
 15097 ;;		_nullifyBadge_segDisplayErase
 15098 ;;		_nullifyBadge_segDisplayRegister
 15099 ;;		_nullifyBadge_userLedsClr
 15100 ;;		_nullifyBadge_userLedsRegister
 15101 ;; This function is called by:
 15102 ;;		_main
 15103 ;;		_scheduler_TaskAdd
 15104 ;; This function uses a non-reentrant model
 15105 ;;
 15106                           
 15107                           
 15108                           ;psect for function _flashy_Init
 15109  0764                     _flashy_Init:	
 15110                           
 15111                           ;flashy_task.c: 67: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskDa
      +                          ta;
 15112                           
 15113                           ;incstack = 0
 15114                           ; Regs used in _flashy_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15115  0764  0020               	movlb	0	; select bank0
 15116  0765  083A               	movf	flashy_Init@taskData+1,w
 15117  0766  00BC               	movwf	flashy_Init@data+1
 15118  0767  0839               	movf	flashy_Init@taskData,w
 15119  0768  00BB               	movwf	flashy_Init@data
 15120                           
 15121                           ;flashy_task.c: 70: nullifyBadge_userLedsRegister(data->badge);
 15122  0769  083B               	movf	flashy_Init@data,w
 15123  076A  0086               	movwf	6
 15124  076B  083C               	movf	flashy_Init@data+1,w
 15125  076C  0087               	movwf	7
 15126  076D  0801               	movf	1,w
 15127  076E  31B3  2322  3187   	fcall	_nullifyBadge_userLedsRegister
 15128                           
 15129                           ;flashy_task.c: 71: nullifyBadge_userLedsClr(data->badge);
 15130  0771  0020               	movlb	0	; select bank0
 15131  0772  083B               	movf	flashy_Init@data,w
 15132  0773  0086               	movwf	6
 15133  0774  083C               	movf	flashy_Init@data+1,w
 15134  0775  0087               	movwf	7
 15135  0776  0801               	movf	1,w
 15136  0777  3187  27FA  3187   	fcall	_nullifyBadge_userLedsClr
 15137                           
 15138                           ;flashy_task.c: 72: nullifyBadge_segDisplayRegister(data->badge);
 15139  077A  0020               	movlb	0	; select bank0
 15140  077B  083B               	movf	flashy_Init@data,w
 15141  077C  0086               	movwf	6
 15142  077D  083C               	movf	flashy_Init@data+1,w
 15143  077E  0087               	movwf	7
 15144  077F  0801               	movf	1,w
 15145  0780  31B2  224B  3187   	fcall	_nullifyBadge_segDisplayRegister
 15146                           
 15147                           ;flashy_task.c: 73: nullifyBadge_segDisplayErase(data->badge);
 15148  0783  0020               	movlb	0	; select bank0
 15149  0784  083B               	movf	flashy_Init@data,w
 15150  0785  0086               	movwf	6
 15151  0786  083C               	movf	flashy_Init@data+1,w
 15152  0787  0087               	movwf	7
 15153  0788  0801               	movf	1,w
 15154  0789  31B2  223D  3187   	fcall	_nullifyBadge_segDisplayErase
 15155                           
 15156                           ;flashy_task.c: 79: data->delayTickCount = 35;
 15157  078C  0020               	movlb	0	; select bank0
 15158  078D  083B               	movf	flashy_Init@data,w
 15159  078E  0086               	movwf	6
 15160  078F  083C               	movf	flashy_Init@data+1,w
 15161  0790  0087               	movwf	7
 15162  0791  3141               	addfsr 1,1
 15163  0792  3023               	movlw	35
 15164  0793  3FC0               	movwi [0]fsr1
 15165  0794  3000               	movlw	0
 15166  0795  3FC1               	movwi [1]fsr1
 15167                           
 15168                           ;flashy_task.c: 80: data->displayTickCount = 0;
 15169  0796  083B               	movf	flashy_Init@data,w
 15170  0797  0086               	movwf	6
 15171  0798  083C               	movf	flashy_Init@data+1,w
 15172  0799  0087               	movwf	7
 15173  079A  3144               	addfsr 1,4
 15174  079B  3000               	movlw	0
 15175  079C  3FC0               	movwi [0]fsr1
 15176  079D  3FC1               	movwi [1]fsr1
 15177                           
 15178                           ;flashy_task.c: 83: data->holdCountA = 0;
 15179  079E  083B               	movf	flashy_Init@data,w
 15180  079F  0086               	movwf	6
 15181  07A0  083C               	movf	flashy_Init@data+1,w
 15182  07A1  0087               	movwf	7
 15183  07A2  314A               	addfsr 1,10
 15184  07A3  3000               	movlw	0
 15185  07A4  3FC0               	movwi [0]fsr1
 15186  07A5  3FC1               	movwi [1]fsr1
 15187                           
 15188                           ;flashy_task.c: 84: data->holdCountB = 0;
 15189  07A6  083B               	movf	flashy_Init@data,w
 15190  07A7  0086               	movwf	6
 15191  07A8  083C               	movf	flashy_Init@data+1,w
 15192  07A9  0087               	movwf	7
 15193  07AA  314C               	addfsr 1,12
 15194  07AB  3000               	movlw	0
 15195  07AC  3FC0               	movwi [0]fsr1
 15196  07AD  3FC1               	movwi [1]fsr1
 15197                           
 15198                           ;flashy_task.c: 85: data->holdCountX = 0;
 15199  07AE  083B               	movf	flashy_Init@data,w
 15200  07AF  0086               	movwf	6
 15201  07B0  083C               	movf	flashy_Init@data+1,w
 15202  07B1  0087               	movwf	7
 15203  07B2  314E               	addfsr 1,14
 15204  07B3  3000               	movlw	0
 15205  07B4  3FC0               	movwi [0]fsr1
 15206  07B5  3FC1               	movwi [1]fsr1
 15207                           
 15208                           ;flashy_task.c: 86: data->holdCountY = 0;
 15209  07B6  083B               	movf	flashy_Init@data,w
 15210  07B7  0086               	movwf	6
 15211  07B8  083C               	movf	flashy_Init@data+1,w
 15212  07B9  0087               	movwf	7
 15213  07BA  3150               	addfsr 1,16
 15214  07BB  3000               	movlw	0
 15215  07BC  3FC0               	movwi [0]fsr1
 15216  07BD  3FC1               	movwi [1]fsr1
 15217                           
 15218                           ;flashy_task.c: 87: data->holdCountXY = 0;
 15219  07BE  083B               	movf	flashy_Init@data,w
 15220  07BF  0086               	movwf	6
 15221  07C0  083C               	movf	flashy_Init@data+1,w
 15222  07C1  0087               	movwf	7
 15223  07C2  3152               	addfsr 1,18
 15224  07C3  3000               	movlw	0
 15225  07C4  3FC0               	movwi [0]fsr1
 15226  07C5  3FC1               	movwi [1]fsr1
 15227                           
 15228                           ;flashy_task.c: 88: data->holdCountAY = 0;
 15229  07C6  083B               	movf	flashy_Init@data,w
 15230  07C7  0086               	movwf	6
 15231  07C8  083C               	movf	flashy_Init@data+1,w
 15232  07C9  0087               	movwf	7
 15233  07CA  3154               	addfsr 1,20
 15234  07CB  3000               	movlw	0
 15235  07CC  3FC0               	movwi [0]fsr1
 15236  07CD  3FC1               	movwi [1]fsr1
 15237                           
 15238                           ;flashy_task.c: 89: data->holdCountAX = 0;
 15239  07CE  083B               	movf	flashy_Init@data,w
 15240  07CF  0086               	movwf	6
 15241  07D0  083C               	movf	flashy_Init@data+1,w
 15242  07D1  0087               	movwf	7
 15243  07D2  3156               	addfsr 1,22
 15244  07D3  3000               	movlw	0
 15245  07D4  3FC0               	movwi [0]fsr1
 15246  07D5  3FC1               	movwi [1]fsr1
 15247                           
 15248                           ;flashy_task.c: 90: data->noholdCount = 0;
 15249  07D6  083B               	movf	flashy_Init@data,w
 15250  07D7  0086               	movwf	6
 15251  07D8  083C               	movf	flashy_Init@data+1,w
 15252  07D9  0087               	movwf	7
 15253  07DA  315C               	addfsr 1,28
 15254  07DB  3000               	movlw	0
 15255  07DC  3FC0               	movwi [0]fsr1
 15256  07DD  3FC1               	movwi [1]fsr1
 15257                           
 15258                           ;flashy_task.c: 92: flashy_leds_idx = 0;
 15259  07DE  0021               	movlb	1	; select bank1
 15260  07DF  01B2               	clrf	_flashy_leds_idx^(0+128)
 15261  07E0  01B3               	clrf	(_flashy_leds_idx+1)^(0+128)
 15262                           
 15263                           ;flashy_task.c: 93: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 15264  07E1  0020               	movlb	0	; select bank0
 15265  07E2  083B               	movf	flashy_Init@data,w
 15266  07E3  0086               	movwf	6
 15267  07E4  083C               	movf	flashy_Init@data+1,w
 15268  07E5  0087               	movwf	7
 15269  07E6  3143               	addfsr 1,3
 15270  07E7  0181               	clrf	1
 15271                           
 15272                           ;flashy_task.c: 94: flashy_option_idx = 0;
 15273  07E8  0021               	movlb	1	; select bank1
 15274  07E9  01A8               	clrf	_flashy_option_idx^(0+128)
 15275  07EA  01A9               	clrf	(_flashy_option_idx+1)^(0+128)
 15276                           
 15277                           ;flashy_task.c: 96: flashy_option_size = sizeof(flashy_option)/sizeof(flashy_option[0]);
 15278  07EB  301D               	movlw	29
 15279  07EC  00A6               	movwf	_flashy_option_size^(0+128)
 15280  07ED  3000               	movlw	0
 15281  07EE  00A7               	movwf	(_flashy_option_size^(0+128)+1)
 15282                           
 15283                           ;flashy_task.c: 98: flashy_sparkle_rate =50;
 15284  07EF  3032               	movlw	50
 15285  07F0  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 15286  07F1  3000               	movlw	0
 15287  07F2  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 15288                           
 15289                           ;flashy_task.c: 99: flashy_scroll_rate=50;
 15290  07F3  3032               	movlw	50
 15291  07F4  00AC               	movwf	_flashy_scroll_rate^(0+128)
 15292  07F5  3000               	movlw	0
 15293  07F6  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 15294                           
 15295                           ;flashy_task.c: 100: flashy_leds_state_track =0;
 15296  07F7  01B0               	clrf	_flashy_leds_state_track^(0+128)
 15297  07F8  01B1               	clrf	(_flashy_leds_state_track+1)^(0+128)
 15298  07F9  0008               	return
 15299  07FA                     __end_of_flashy_Init:	
 15300                           
 15301                           	psect	text8
 15302  2E64                     __ptext8:	
 15303 ;; *************** function _slot_Init *****************
 15304 ;; Defined at:
 15305 ;;		line 29 in file "slot_task.c"
 15306 ;; Parameters:    Size  Location     Type
 15307 ;;  taskData        2   25[BANK0 ] PTR void 
 15308 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15309 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15310 ;; Auto vars:     Size  Location     Type
 15311 ;;  data            2   27[BANK0 ] PTR struct t_slot_taskDa
 15312 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15313 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15314 ;; Return value:  Size  Location     Type
 15315 ;;                  1    wreg      void 
 15316 ;; Registers used:
 15317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15318 ;; Tracked objects:
 15319 ;;		On entry : 0/0
 15320 ;;		On exit  : 0/0
 15321 ;;		Unchanged: 0/0
 15322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15323 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15324 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15326 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15327 ;;Total ram usage:        4 bytes
 15328 ;; Hardware stack levels used:    1
 15329 ;; Hardware stack levels required when called:   10
 15330 ;; This function calls:
 15331 ;;		_nullifyBadge_segDisplayErase
 15332 ;;		_nullifyBadge_segDisplayRegister
 15333 ;;		_nullifyBadge_userLedsClr
 15334 ;;		_nullifyBadge_userLedsRegister
 15335 ;;		_slot_Setup
 15336 ;; This function is called by:
 15337 ;;		_main
 15338 ;;		_scheduler_TaskAdd
 15339 ;; This function uses a non-reentrant model
 15340 ;;
 15341                           
 15342                           
 15343                           ;psect for function _slot_Init
 15344  2E64                     _slot_Init:	
 15345                           
 15346                           ;slot_task.c: 30: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 15347                           
 15348                           ;incstack = 0
 15349                           ; Regs used in _slot_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15350  2E64  0020               	movlb	0	; select bank0
 15351  2E65  083A               	movf	slot_Init@taskData+1,w
 15352  2E66  00BC               	movwf	slot_Init@data+1
 15353  2E67  0839               	movf	slot_Init@taskData,w
 15354  2E68  00BB               	movwf	slot_Init@data
 15355                           
 15356                           ;slot_task.c: 33: nullifyBadge_userLedsRegister(data->badge);
 15357  2E69  083B               	movf	slot_Init@data,w
 15358  2E6A  0086               	movwf	6
 15359  2E6B  083C               	movf	slot_Init@data+1,w
 15360  2E6C  0087               	movwf	7
 15361  2E6D  0801               	movf	1,w
 15362  2E6E  31B3  2322  31AE   	fcall	_nullifyBadge_userLedsRegister
 15363                           
 15364                           ;slot_task.c: 34: nullifyBadge_userLedsClr(data->badge);
 15365  2E71  0020               	movlb	0	; select bank0
 15366  2E72  083B               	movf	slot_Init@data,w
 15367  2E73  0086               	movwf	6
 15368  2E74  083C               	movf	slot_Init@data+1,w
 15369  2E75  0087               	movwf	7
 15370  2E76  0801               	movf	1,w
 15371  2E77  3187  27FA  31AE   	fcall	_nullifyBadge_userLedsClr
 15372                           
 15373                           ;slot_task.c: 35: nullifyBadge_segDisplayRegister(data->badge);
 15374  2E7A  0020               	movlb	0	; select bank0
 15375  2E7B  083B               	movf	slot_Init@data,w
 15376  2E7C  0086               	movwf	6
 15377  2E7D  083C               	movf	slot_Init@data+1,w
 15378  2E7E  0087               	movwf	7
 15379  2E7F  0801               	movf	1,w
 15380  2E80  31B2  224B  31AE   	fcall	_nullifyBadge_segDisplayRegister
 15381                           
 15382                           ;slot_task.c: 36: nullifyBadge_segDisplayErase(data->badge);
 15383  2E83  0020               	movlb	0	; select bank0
 15384  2E84  083B               	movf	slot_Init@data,w
 15385  2E85  0086               	movwf	6
 15386  2E86  083C               	movf	slot_Init@data+1,w
 15387  2E87  0087               	movwf	7
 15388  2E88  0801               	movf	1,w
 15389  2E89  31B2  223D  31AE   	fcall	_nullifyBadge_segDisplayErase
 15390                           
 15391                           ;slot_task.c: 39: data->displayTickCount = 0;
 15392  2E8C  0020               	movlb	0	; select bank0
 15393  2E8D  083B               	movf	slot_Init@data,w
 15394  2E8E  0086               	movwf	6
 15395  2E8F  083C               	movf	slot_Init@data+1,w
 15396  2E90  0087               	movwf	7
 15397  2E91  3143               	addfsr 1,3
 15398  2E92  3000               	movlw	0
 15399  2E93  3FC0               	movwi [0]fsr1
 15400  2E94  3FC1               	movwi [1]fsr1
 15401                           
 15402                           ;slot_task.c: 40: data->holdCountA = 0;
 15403  2E95  083B               	movf	slot_Init@data,w
 15404  2E96  0086               	movwf	6
 15405  2E97  083C               	movf	slot_Init@data+1,w
 15406  2E98  0087               	movwf	7
 15407  2E99  315F               	addfsr 1,31
 15408  2E9A  3000               	movlw	0
 15409  2E9B  3FC0               	movwi [0]fsr1
 15410  2E9C  3FC1               	movwi [1]fsr1
 15411                           
 15412                           ;slot_task.c: 41: data->holdCountB = 0;
 15413  2E9D  083B               	movf	slot_Init@data,w
 15414  2E9E  3E21               	addlw	33
 15415  2E9F  0086               	movwf	6
 15416  2EA0  3000               	movlw	0
 15417  2EA1  3D3C               	addwfc	slot_Init@data+1,w
 15418  2EA2  0087               	movwf	7
 15419  2EA3  3000               	movlw	0
 15420  2EA4  3FC0               	movwi [0]fsr1
 15421  2EA5  3FC1               	movwi [1]fsr1
 15422                           
 15423                           ;slot_task.c: 42: data->holdCountX = 0;
 15424  2EA6  083B               	movf	slot_Init@data,w
 15425  2EA7  3E23               	addlw	35
 15426  2EA8  0086               	movwf	6
 15427  2EA9  3000               	movlw	0
 15428  2EAA  3D3C               	addwfc	slot_Init@data+1,w
 15429  2EAB  0087               	movwf	7
 15430  2EAC  3000               	movlw	0
 15431  2EAD  3FC0               	movwi [0]fsr1
 15432  2EAE  3FC1               	movwi [1]fsr1
 15433                           
 15434                           ;slot_task.c: 43: data->holdCountY = 0;
 15435  2EAF  083B               	movf	slot_Init@data,w
 15436  2EB0  3E25               	addlw	37
 15437  2EB1  0086               	movwf	6
 15438  2EB2  3000               	movlw	0
 15439  2EB3  3D3C               	addwfc	slot_Init@data+1,w
 15440  2EB4  0087               	movwf	7
 15441  2EB5  3000               	movlw	0
 15442  2EB6  3FC0               	movwi [0]fsr1
 15443  2EB7  3FC1               	movwi [1]fsr1
 15444                           
 15445                           ;slot_task.c: 44: data->noholdCount = 0;
 15446  2EB8  083B               	movf	slot_Init@data,w
 15447  2EB9  3E27               	addlw	39
 15448  2EBA  0086               	movwf	6
 15449  2EBB  3000               	movlw	0
 15450  2EBC  3D3C               	addwfc	slot_Init@data+1,w
 15451  2EBD  0087               	movwf	7
 15452  2EBE  3000               	movlw	0
 15453  2EBF  3FC0               	movwi [0]fsr1
 15454  2EC0  3FC1               	movwi [1]fsr1
 15455                           
 15456                           ;slot_task.c: 45: slot_Setup(data);
 15457  2EC1  083C               	movf	slot_Init@data+1,w
 15458  2EC2  00B0               	movwf	slot_Setup@taskData+1
 15459  2EC3  083B               	movf	slot_Init@data,w
 15460  2EC4  00AF               	movwf	slot_Setup@taskData
 15461  2EC5  31AC  2447         	fcall	_slot_Setup
 15462  2EC7  0008               	return
 15463  2EC8                     __end_of_slot_Init:	
 15464                           
 15465                           	psect	text9
 15466  3322                     __ptext9:	
 15467 ;; *************** function _nullifyBadge_userLedsRegister *****************
 15468 ;; Defined at:
 15469 ;;		line 133 in file "nullifyBadge.c"
 15470 ;; Parameters:    Size  Location     Type
 15471 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 15472 ;;		 -> badge_inst(18), 
 15473 ;; Auto vars:     Size  Location     Type
 15474 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 15475 ;;		 -> badge_inst(18), 
 15476 ;; Return value:  Size  Location     Type
 15477 ;;                  1    wreg      char 
 15478 ;; Registers used:
 15479 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15480 ;; Tracked objects:
 15481 ;;		On entry : 0/0
 15482 ;;		On exit  : 0/0
 15483 ;;		Unchanged: 0/0
 15484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15486 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15488 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15489 ;;Total ram usage:        1 bytes
 15490 ;; Hardware stack levels used:    1
 15491 ;; Hardware stack levels required when called:    4
 15492 ;; This function calls:
 15493 ;;		Nothing
 15494 ;; This function is called by:
 15495 ;;		_menu_Init
 15496 ;;		_flashy_Init
 15497 ;;		_locked_Init
 15498 ;;		_secret_Init
 15499 ;;		_slot_Init
 15500 ;;		_matrix_Init
 15501 ;; This function uses a non-reentrant model
 15502 ;;
 15503                           
 15504                           
 15505                           ;psect for function _nullifyBadge_userLedsRegister
 15506  3322                     _nullifyBadge_userLedsRegister:	
 15507                           
 15508                           ;incstack = 0
 15509                           ; Regs used in _nullifyBadge_userLedsRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 15510                           ;nullifyBadge_userLedsRegister@badge stored from wreg
 15511  3322  00F1               	movwf	nullifyBadge_userLedsRegister@badge
 15512                           
 15513                           ;nullifyBadge.c: 134: if (badge->registeredHw & HW_USER_LEDS) {
 15514  3323  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 15515  3324  3E11               	addlw	17
 15516  3325  0086               	movwf	6
 15517  3326  3001               	movlw	1	; select bank2/3
 15518  3327  0087               	movwf	7
 15519  3328  1801               	btfsc	1,0
 15520  3329  0008               	return
 15521                           
 15522                           ;nullifyBadge.c: 137: else {
 15523                           ;nullifyBadge.c: 138: badge->registeredHw |= (1 << HW_USER_LEDS);
 15524                           
 15525                           ;nullifyBadge.c: 136: }
 15526                           
 15527                           ;nullifyBadge.c: 135: return -1;
 15528                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 15529  332A  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 15530  332B  3E11               	addlw	17
 15531  332C  0086               	movwf	6
 15532  332D  3001               	movlw	1	; select bank2/3
 15533  332E  0087               	movwf	7
 15534  332F  1481               	bsf	1,1
 15535                           
 15536                           ;nullifyBadge.c: 139: return 0;
 15537                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 15538  3330  0008               	return
 15539  3331                     __end_of_nullifyBadge_userLedsRegister:	
 15540                           
 15541                           	psect	text10
 15542  324B                     __ptext10:	
 15543 ;; *************** function _nullifyBadge_segDisplayRegister *****************
 15544 ;; Defined at:
 15545 ;;		line 68 in file "nullifyBadge.c"
 15546 ;; Parameters:    Size  Location     Type
 15547 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 15548 ;;		 -> badge_inst(18), 
 15549 ;; Auto vars:     Size  Location     Type
 15550 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 15551 ;;		 -> badge_inst(18), 
 15552 ;; Return value:  Size  Location     Type
 15553 ;;                  1    wreg      char 
 15554 ;; Registers used:
 15555 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15556 ;; Tracked objects:
 15557 ;;		On entry : 0/0
 15558 ;;		On exit  : 0/0
 15559 ;;		Unchanged: 0/0
 15560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15562 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15564 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15565 ;;Total ram usage:        1 bytes
 15566 ;; Hardware stack levels used:    1
 15567 ;; Hardware stack levels required when called:    4
 15568 ;; This function calls:
 15569 ;;		Nothing
 15570 ;; This function is called by:
 15571 ;;		_menu_Init
 15572 ;;		_flashy_Init
 15573 ;;		_locked_Init
 15574 ;;		_secret_Init
 15575 ;;		_slot_Init
 15576 ;;		_matrix_Init
 15577 ;;		_fadeDisplay_Init
 15578 ;; This function uses a non-reentrant model
 15579 ;;
 15580                           
 15581                           
 15582                           ;psect for function _nullifyBadge_segDisplayRegister
 15583  324B                     _nullifyBadge_segDisplayRegister:	
 15584                           
 15585                           ;incstack = 0
 15586                           ; Regs used in _nullifyBadge_segDisplayRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 15587                           ;nullifyBadge_segDisplayRegister@badge stored from wreg
 15588  324B  00F1               	movwf	nullifyBadge_segDisplayRegister@badge
 15589                           
 15590                           ;nullifyBadge.c: 72: else {
 15591                           ;nullifyBadge.c: 73: badge->registeredHw |= (1 << HW_SEG_DISPLAY);
 15592                           
 15593                           ;nullifyBadge.c: 71: }
 15594                           
 15595                           ;nullifyBadge.c: 70: return -1;
 15596                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 15597                           
 15598                           ;nullifyBadge.c: 69: if (badge->registeredHw & HW_SEG_DISPLAY) {
 15599  324C  0871               	movf	nullifyBadge_segDisplayRegister@badge,w
 15600  324D  3E11               	addlw	17
 15601  324E  0086               	movwf	6
 15602  324F  3001               	movlw	1	; select bank2/3
 15603  3250  0087               	movwf	7
 15604  3251  1401               	bsf	1,0
 15605                           
 15606                           ;nullifyBadge.c: 74: return 0;
 15607                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 15608  3252  0008               	return
 15609  3253                     __end_of_nullifyBadge_segDisplayRegister:	
 15610                           
 15611                           	psect	text11
 15612  347D                     __ptext11:	
 15613 ;; *************** function _scheduler_Init *****************
 15614 ;; Defined at:
 15615 ;;		line 27 in file "cooperative_scheduler.c"
 15616 ;; Parameters:    Size  Location     Type
 15617 ;;  scheduler       1    wreg     PTR struct t_scheduler
 15618 ;;		 -> schedulerInst(18), 
 15619 ;; Auto vars:     Size  Location     Type
 15620 ;;  scheduler       1    2[COMMON] PTR struct t_scheduler
 15621 ;;		 -> schedulerInst(18), 
 15622 ;;  k               1    3[COMMON] unsigned char 
 15623 ;; Return value:  Size  Location     Type
 15624 ;;                  1    wreg      void 
 15625 ;; Registers used:
 15626 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15627 ;; Tracked objects:
 15628 ;;		On entry : 0/0
 15629 ;;		On exit  : 0/0
 15630 ;;		Unchanged: 0/0
 15631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15634 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15635 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15636 ;;Total ram usage:        3 bytes
 15637 ;; Hardware stack levels used:    1
 15638 ;; Hardware stack levels required when called:    4
 15639 ;; This function calls:
 15640 ;;		Nothing
 15641 ;; This function is called by:
 15642 ;;		_main
 15643 ;; This function uses a non-reentrant model
 15644 ;;
 15645                           
 15646                           
 15647                           ;psect for function _scheduler_Init
 15648  347D                     _scheduler_Init:	
 15649                           
 15650                           ;incstack = 0
 15651                           ; Regs used in _scheduler_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 15652                           ;scheduler_Init@scheduler stored from wreg
 15653  347D  00F2               	movwf	scheduler_Init@scheduler
 15654                           
 15655                           ;cooperative_scheduler.c: 28: scheduler->taskEntryVector = 0x0;
 15656  347E  0872               	movf	scheduler_Init@scheduler,w
 15657  347F  3E10               	addlw	16
 15658  3480  0086               	movwf	6
 15659  3481  3001               	movlw	1	; select bank2/3
 15660  3482  0087               	movwf	7
 15661  3483  3000               	movlw	0
 15662  3484  3FC0               	movwi [0]fsr1
 15663  3485  3FC1               	movwi [1]fsr1
 15664                           
 15665                           ;cooperative_scheduler.c: 29: u8 k;
 15666                           ;cooperative_scheduler.c: 31: for (k = 0; k < 16; k++) {
 15667  3486  01F3               	clrf	scheduler_Init@k
 15668  3487                     L1:	
 15669  3487  3010               	movlw	16
 15670  3488  0273               	subwf	scheduler_Init@k,w
 15671  3489  1803               	btfsc	3,0
 15672  348A  0008               	return
 15673                           
 15674                           ;cooperative_scheduler.c: 32: scheduler->tasks[k] = (0);
 15675  348B  0873               	movf	scheduler_Init@k,w
 15676  348C  0772               	addwf	scheduler_Init@scheduler,w
 15677  348D  00F1               	movwf	??_scheduler_Init
 15678  348E  0871               	movf	??_scheduler_Init,w
 15679  348F  0086               	movwf	6
 15680  3490  3001               	movlw	1	; select bank2/3
 15681  3491  0087               	movwf	7
 15682  3492  0181               	clrf	1
 15683  3493  3001               	movlw	1
 15684  3494  00F1               	movwf	??_scheduler_Init
 15685  3495  0871               	movf	??_scheduler_Init,w
 15686  3496  07F3               	addwf	scheduler_Init@k,f
 15687  3497  2C87               	goto	L1
 15688  3498                     __end_of_scheduler_Init:	
 15689                           
 15690                           	psect	text12
 15691  23C3                     __ptext12:	
 15692 ;; *************** function _schedulerExecute *****************
 15693 ;; Defined at:
 15694 ;;		line 77 in file "cooperative_scheduler.c"
 15695 ;; Parameters:    Size  Location     Type
 15696 ;;  scheduler       1    wreg     PTR struct t_scheduler
 15697 ;;		 -> schedulerInst(18), 
 15698 ;; Auto vars:     Size  Location     Type
 15699 ;;  scheduler       1    6[BANK1 ] PTR struct t_scheduler
 15700 ;;		 -> schedulerInst(18), 
 15701 ;;  tickDelta       2    4[BANK1 ] unsigned int 
 15702 ;;  taskLastSyst    2    2[BANK1 ] unsigned int 
 15703 ;;  currentSyste    2    0[BANK1 ] unsigned int 
 15704 ;;  k               1    7[BANK1 ] unsigned char 
 15705 ;; Return value:  Size  Location     Type
 15706 ;;                  1    wreg      void 
 15707 ;; Registers used:
 15708 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15709 ;; Tracked objects:
 15710 ;;		On entry : 0/0
 15711 ;;		On exit  : 0/0
 15712 ;;		Unchanged: 0/0
 15713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15715 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15716 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15717 ;;      Totals:         0       6       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15718 ;;Total ram usage:       14 bytes
 15719 ;; Hardware stack levels used:    1
 15720 ;; Hardware stack levels required when called:   14
 15721 ;; This function calls:
 15722 ;;		_TMR0_Read16bitTimer
 15723 ;;		_scheduler_TaskRun
 15724 ;; This function is called by:
 15725 ;;		_main
 15726 ;; This function uses a non-reentrant model
 15727 ;;
 15728                           
 15729                           
 15730                           ;psect for function _schedulerExecute
 15731  23C3                     _schedulerExecute:	
 15732                           
 15733                           ;incstack = 0
 15734                           ; Regs used in _schedulerExecute: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15735                           ;schedulerExecute@scheduler stored from wreg
 15736  23C3  0021               	movlb	1	; select bank1
 15737  23C4  00DC               	movwf	schedulerExecute@scheduler^(0+128)
 15738                           
 15739                           ;cooperative_scheduler.c: 78: u16 currentSystemTick;
 15740                           ;cooperative_scheduler.c: 79: u16 taskLastSystemTick;
 15741                           ;cooperative_scheduler.c: 80: u16 tickDelta;
 15742                           ;cooperative_scheduler.c: 81: u8 k;
 15743                           ;cooperative_scheduler.c: 83: for (k = 0; k < 16; k++) {
 15744  23C5  01DD               	clrf	schedulerExecute@k^(0+128)
 15745  23C6                     L2:	
 15746  23C6  3010               	movlw	16
 15747  23C7  025D               	subwf	schedulerExecute@k^(0+128),w
 15748  23C8  1803               	btfsc	3,0
 15749  23C9  0008               	return
 15750                           
 15751                           ;cooperative_scheduler.c: 86: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 15752  23CA  085C               	movf	schedulerExecute@scheduler^(0+128),w
 15753  23CB  3E10               	addlw	16
 15754  23CC  0086               	movwf	6
 15755  23CD  3001               	movlw	1	; select bank2/3
 15756  23CE  0087               	movwf	7
 15757  23CF  3F40               	moviw [0]fsr1
 15758  23D0  0020               	movlb	0	; select bank0
 15759  23D1  00E8               	movwf	??_schedulerExecute
 15760  23D2  3F41               	moviw [1]fsr1
 15761  23D3  00E9               	movwf	??_schedulerExecute+1
 15762  23D4  3001               	movlw	1
 15763  23D5  00EA               	movwf	??_schedulerExecute+2
 15764  23D6  3000               	movlw	0
 15765  23D7  00EB               	movwf	??_schedulerExecute+3
 15766  23D8  0021               	movlb	1	; select bank1
 15767  23D9  0A5D               	incf	schedulerExecute@k^(0+128),w
 15768  23DA  0020               	movlb	0	; select bank0
 15769  23DB  2BDE               	goto	u6544
 15770  23DC                     u6545:	
 15771  23DC  35EA               	lslf	??_schedulerExecute+2,f
 15772  23DD  0DEB               	rlf	??_schedulerExecute+3,f
 15773  23DE                     u6544:	
 15774  23DE  0B89               	decfsz	9,f
 15775  23DF  2BDC               	goto	u6545
 15776  23E0  0868               	movf	??_schedulerExecute,w
 15777  23E1  056A               	andwf	??_schedulerExecute+2,w
 15778  23E2  00EC               	movwf	??_schedulerExecute+4
 15779  23E3  0869               	movf	??_schedulerExecute+1,w
 15780  23E4  056B               	andwf	??_schedulerExecute+3,w
 15781  23E5  00ED               	movwf	??_schedulerExecute+5
 15782  23E6  086C               	movf	??_schedulerExecute+4,w
 15783  23E7  046D               	iorwf	??_schedulerExecute+5,w
 15784  23E8  1903               	btfsc	3,2
 15785  23E9  2C40               	goto	l10489
 15786                           
 15787                           ;cooperative_scheduler.c: 88: }
 15788                           ;cooperative_scheduler.c: 90: currentSystemTick = TMR0_Read16bitTimer();
 15789                           
 15790                           ;cooperative_scheduler.c: 87: continue;
 15791  23EA  31B4  2498  31A3   	fcall	_TMR0_Read16bitTimer
 15792  23ED  0872               	movf	?_TMR0_Read16bitTimer+1,w
 15793  23EE  0021               	movlb	1	; select bank1
 15794  23EF  00D7               	movwf	(schedulerExecute@currentSystemTick+1)^(0+128)
 15795  23F0  0871               	movf	?_TMR0_Read16bitTimer,w
 15796  23F1  00D6               	movwf	schedulerExecute@currentSystemTick^(0+128)
 15797                           
 15798                           ;cooperative_scheduler.c: 91: taskLastSystemTick = scheduler->tasks[k]->systemTickLastEx
      +                          ecuted;
 15799  23F2  085D               	movf	schedulerExecute@k^(0+128),w
 15800  23F3  075C               	addwf	schedulerExecute@scheduler^(0+128),w
 15801  23F4  0020               	movlb	0	; select bank0
 15802  23F5  00E8               	movwf	??_schedulerExecute
 15803  23F6  0868               	movf	??_schedulerExecute,w
 15804  23F7  0086               	movwf	6
 15805  23F8  3001               	movlw	1	; select bank2/3
 15806  23F9  0087               	movwf	7
 15807  23FA  0801               	movf	1,w
 15808  23FB  0086               	movwf	6
 15809  23FC  3001               	movlw	1	; select bank2/3
 15810  23FD  0087               	movwf	7
 15811  23FE  3F40               	moviw [0]fsr1
 15812  23FF  0021               	movlb	1	; select bank1
 15813  2400  00D8               	movwf	schedulerExecute@taskLastSystemTick^(0+128)
 15814  2401  3F41               	moviw [1]fsr1
 15815  2402  00D9               	movwf	(schedulerExecute@taskLastSystemTick+1)^(0+128)
 15816                           
 15817                           ;cooperative_scheduler.c: 99: tickDelta = currentSystemTick - taskLastSystemTick;
 15818  2403  0958               	comf	schedulerExecute@taskLastSystemTick^(0+128),w
 15819  2404  0020               	movlb	0	; select bank0
 15820  2405  00E8               	movwf	??_schedulerExecute
 15821  2406  0021               	movlb	1	; select bank1
 15822  2407  0959               	comf	(schedulerExecute@taskLastSystemTick+1)^(0+128),w
 15823  2408  0020               	movlb	0	; select bank0
 15824  2409  00E9               	movwf	??_schedulerExecute+1
 15825  240A  0AE8               	incf	??_schedulerExecute,f
 15826  240B  1903               	skipnz
 15827  240C  0AE9               	incf	??_schedulerExecute+1,f
 15828  240D  0021               	movlb	1	; select bank1
 15829  240E  0856               	movf	schedulerExecute@currentSystemTick^(0+128),w
 15830  240F  0020               	movlb	0	; select bank0
 15831  2410  0768               	addwf	??_schedulerExecute,w
 15832  2411  0021               	movlb	1	; select bank1
 15833  2412  00DA               	movwf	schedulerExecute@tickDelta^(0+128)
 15834  2413  0857               	movf	(schedulerExecute@currentSystemTick+1)^(0+128),w
 15835  2414  0020               	movlb	0	; select bank0
 15836  2415  3D69               	addwfc	??_schedulerExecute+1,w
 15837  2416  0021               	movlb	1	; select bank1
 15838  2417  00DB               	movwf	(schedulerExecute@tickDelta+1)^(0+128)
 15839                           
 15840                           ;cooperative_scheduler.c: 103: if (tickDelta >= scheduler->tasks[k]->taskInterval) {
 15841  2418  085D               	movf	schedulerExecute@k^(0+128),w
 15842  2419  075C               	addwf	schedulerExecute@scheduler^(0+128),w
 15843  241A  0020               	movlb	0	; select bank0
 15844  241B  00E8               	movwf	??_schedulerExecute
 15845  241C  0868               	movf	??_schedulerExecute,w
 15846  241D  0086               	movwf	6
 15847  241E  3001               	movlw	1	; select bank2/3
 15848  241F  0087               	movwf	7
 15849  2420  0801               	movf	1,w
 15850  2421  3E0A               	addlw	10
 15851  2422  0086               	movwf	6
 15852  2423  3001               	movlw	1	; select bank2/3
 15853  2424  0087               	movwf	7
 15854  2425  3F40               	moviw [0]fsr1
 15855  2426  00E9               	movwf	??_schedulerExecute+1
 15856  2427  3F41               	moviw [1]fsr1
 15857  2428  00EA               	movwf	??_schedulerExecute+2
 15858  2429  086A               	movf	??_schedulerExecute+2,w
 15859  242A  0021               	movlb	1	; select bank1
 15860  242B  025B               	subwf	(schedulerExecute@tickDelta+1)^(0+128),w
 15861  242C  1D03               	skipz
 15862  242D  2C32               	goto	u6565
 15863  242E  0020               	movlb	0	; select bank0
 15864  242F  0869               	movf	??_schedulerExecute+1,w
 15865  2430  0021               	movlb	1	; select bank1
 15866  2431  025A               	subwf	schedulerExecute@tickDelta^(0+128),w
 15867  2432                     u6565:	
 15868  2432  1C03               	skipc
 15869  2433  2C40               	goto	l10489
 15870                           
 15871                           ;cooperative_scheduler.c: 104: scheduler_TaskRun(scheduler->tasks[k]);
 15872  2434  085D               	movf	schedulerExecute@k^(0+128),w
 15873  2435  075C               	addwf	schedulerExecute@scheduler^(0+128),w
 15874  2436  0020               	movlb	0	; select bank0
 15875  2437  00E8               	movwf	??_schedulerExecute
 15876  2438  0868               	movf	??_schedulerExecute,w
 15877  2439  0086               	movwf	6
 15878  243A  3001               	movlw	1	; select bank2/3
 15879  243B  0087               	movwf	7
 15880  243C  0801               	movf	1,w
 15881  243D  31A8  2083  31A3   	fcall	_scheduler_TaskRun
 15882  2440                     l10489:	
 15883  2440  3001               	movlw	1
 15884  2441  0020               	movlb	0	; select bank0
 15885  2442  00E8               	movwf	??_schedulerExecute
 15886  2443  0868               	movf	??_schedulerExecute,w
 15887  2444  0021               	movlb	1	; select bank1
 15888  2445  07DD               	addwf	schedulerExecute@k^(0+128),f
 15889  2446  2BC6               	goto	L2
 15890  2447                     __end_of_schedulerExecute:	
 15891                           
 15892                           	psect	text13
 15893  2883                     __ptext13:	
 15894 ;; *************** function _scheduler_TaskRun *****************
 15895 ;; Defined at:
 15896 ;;		line 20 in file "cooperative_scheduler.c"
 15897 ;; Parameters:    Size  Location     Type
 15898 ;;  task            1    wreg     PTR struct t_schedulerTa
 15899 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 15900 ;;		 -> menu_task(13), flashy_task(13), NULL(0), 
 15901 ;; Auto vars:     Size  Location     Type
 15902 ;;  task            1   71[BANK0 ] PTR struct t_schedulerTa
 15903 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 15904 ;;		 -> menu_task(13), flashy_task(13), NULL(0), 
 15905 ;; Return value:  Size  Location     Type
 15906 ;;                  1    wreg      void 
 15907 ;; Registers used:
 15908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15909 ;; Tracked objects:
 15910 ;;		On entry : 0/0
 15911 ;;		On exit  : 0/0
 15912 ;;		Unchanged: 0/0
 15913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15915 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15917 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15918 ;;Total ram usage:        1 bytes
 15919 ;; Hardware stack levels used:    1
 15920 ;; Hardware stack levels required when called:   13
 15921 ;; This function calls:
 15922 ;;		Absolute function
 15923 ;;		_TMR0_Read16bitTimer
 15924 ;;		_flashy_Main
 15925 ;;		_locked_Main
 15926 ;;		_matrix_Main
 15927 ;;		_menu_Main
 15928 ;;		_secret_Main
 15929 ;;		_slot_Main
 15930 ;; This function is called by:
 15931 ;;		_schedulerExecute
 15932 ;; This function uses a non-reentrant model
 15933 ;;
 15934                           
 15935                           
 15936                           ;psect for function _scheduler_TaskRun
 15937  2883                     _scheduler_TaskRun:	
 15938                           
 15939                           ;incstack = 0
 15940                           ; Regs used in _scheduler_TaskRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15941                           ;scheduler_TaskRun@task stored from wreg
 15942  2883  0020               	movlb	0	; select bank0
 15943  2884  00E7               	movwf	scheduler_TaskRun@task
 15944                           
 15945                           ;cooperative_scheduler.c: 21: task->taskExecuteCallback (task->taskData);
 15946  2885  0867               	movf	scheduler_TaskRun@task,w
 15947  2886  3E02               	addlw	2
 15948  2887  0086               	movwf	6
 15949  2888  3001               	movlw	1	; select bank2/3
 15950  2889  0087               	movwf	7
 15951  288A  3F40               	moviw [0]fsr1
 15952  288B  00D2               	movwf	matrix_Main@taskData
 15953  288C  3F41               	moviw [1]fsr1
 15954  288D  00D3               	movwf	matrix_Main@taskData+1
 15955  288E  0867               	movf	scheduler_TaskRun@task,w
 15956  288F  3E08               	addlw	8
 15957  2890  0086               	movwf	6
 15958  2891  3001               	movlw	1	; select bank2/3
 15959  2892  0087               	movwf	7
 15960  2893  3F41               	moviw [1]fsr1
 15961  2894  008A               	movwf	10
 15962  2895  3F40               	moviw [0]fsr1
 15963  2896  000A               	callw
 15964  2897  31A8               	pagesel	$
 15965                           
 15966                           ;cooperative_scheduler.c: 22: task->systemTickLastExecuted = TMR0_Read16bitTimer();
 15967  2898  31B4  2498         	fcall	_TMR0_Read16bitTimer
 15968  289A  0020               	movlb	0	; select bank0
 15969  289B  0867               	movf	scheduler_TaskRun@task,w
 15970  289C  0086               	movwf	6
 15971  289D  3001               	movlw	1	; select bank2/3
 15972  289E  0087               	movwf	7
 15973  289F  0871               	movf	?_TMR0_Read16bitTimer,w
 15974  28A0  3FC0               	movwi [0]fsr1
 15975  28A1  0872               	movf	?_TMR0_Read16bitTimer+1,w
 15976  28A2  3FC1               	movwi [1]fsr1
 15977  28A3  0008               	return
 15978  28A4                     __end_of_scheduler_TaskRun:	
 15979                           
 15980                           	psect	text14
 15981  10CB                     __ptext14:	
 15982 ;; *************** function _matrix_Main *****************
 15983 ;; Defined at:
 15984 ;;		line 149 in file "matrix_task.c"
 15985 ;; Parameters:    Size  Location     Type
 15986 ;;  taskData        2   50[BANK0 ] PTR void 
 15987 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15988 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15989 ;; Auto vars:     Size  Location     Type
 15990 ;;  data            2   58[BANK0 ] PTR struct t_matrix_task
 15991 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15992 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15993 ;;  holdvalue       1   57[BANK0 ] unsigned char 
 15994 ;;  buttonPresse    1   56[BANK0 ] unsigned char 
 15995 ;; Return value:  Size  Location     Type
 15996 ;;                  1    wreg      void 
 15997 ;; Registers used:
 15998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15999 ;; Tracked objects:
 16000 ;;		On entry : 0/0
 16001 ;;		On exit  : 0/0
 16002 ;;		Unchanged: 0/0
 16003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16004 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16005 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16006 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16007 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16008 ;;Total ram usage:       10 bytes
 16009 ;; Hardware stack levels used:    1
 16010 ;; Hardware stack levels required when called:   11
 16011 ;; This function calls:
 16012 ;;		_led_Parody
 16013 ;;		_led_curtain
 16014 ;;		_matrix_display_option
 16015 ;;		_matrix_secret_check
 16016 ;;		_nullifyBadge_buttonsGet
 16017 ;; This function is called by:
 16018 ;;		_main
 16019 ;;		_scheduler_TaskRun
 16020 ;; This function uses a non-reentrant model
 16021 ;;
 16022                           
 16023                           
 16024                           ;psect for function _matrix_Main
 16025  10CB                     _matrix_Main:	
 16026                           
 16027                           ;matrix_task.c: 150: struct t_matrix_taskData *data = (struct t_matrix_taskData *) taskD
      +                          ata ;
 16028                           
 16029                           ;incstack = 0
 16030                           ; Regs used in _matrix_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16031  10CB  0020               	movlb	0	; select bank0
 16032  10CC  0853               	movf	matrix_Main@taskData+1,w
 16033  10CD  00DB               	movwf	matrix_Main@data+1
 16034  10CE  0852               	movf	matrix_Main@taskData,w
 16035  10CF  00DA               	movwf	matrix_Main@data
 16036                           
 16037                           ;matrix_task.c: 151: u8 buttonPressed = 0 ;
 16038  10D0  01D8               	clrf	matrix_Main@buttonPressed
 16039                           
 16040                           ;matrix_task.c: 152: u8 holdvalue = 50;
 16041  10D1  3032               	movlw	50
 16042  10D2  00D4               	movwf	??_matrix_Main
 16043  10D3  0854               	movf	??_matrix_Main,w
 16044  10D4  00D9               	movwf	matrix_Main@holdvalue
 16045                           
 16046                           ;matrix_task.c: 154: if ( currentTask != MATRIX_TASK ){
 16047  10D5  3004               	movlw	4
 16048  10D6  0021               	movlb	1	; select bank1
 16049  10D7  063A               	xorwf	_currentTask^(0+128),w
 16050  10D8  043B               	iorwf	(_currentTask+1)^(0+128),w
 16051  10D9  1903               	btfsc	3,2
 16052  10DA  2901               	goto	l9887
 16053                           
 16054                           ;matrix_task.c: 155: data->holdCountA = 1;
 16055  10DB  0020               	movlb	0	; select bank0
 16056  10DC  085A               	movf	matrix_Main@data,w
 16057  10DD  0086               	movwf	6
 16058  10DE  085B               	movf	matrix_Main@data+1,w
 16059  10DF  0087               	movwf	7
 16060  10E0  3149               	addfsr 1,9
 16061  10E1  3001               	movlw	1
 16062  10E2  3FC0               	movwi [0]fsr1
 16063  10E3  3000               	movlw	0
 16064  10E4  3FC1               	movwi [1]fsr1
 16065                           
 16066                           ;matrix_task.c: 156: data->holdCountB = 1;
 16067  10E5  085A               	movf	matrix_Main@data,w
 16068  10E6  0086               	movwf	6
 16069  10E7  085B               	movf	matrix_Main@data+1,w
 16070  10E8  0087               	movwf	7
 16071  10E9  314B               	addfsr 1,11
 16072  10EA  3001               	movlw	1
 16073  10EB  3FC0               	movwi [0]fsr1
 16074  10EC  3000               	movlw	0
 16075  10ED  3FC1               	movwi [1]fsr1
 16076                           
 16077                           ;matrix_task.c: 157: data->holdCountX = 1;
 16078  10EE  085A               	movf	matrix_Main@data,w
 16079  10EF  0086               	movwf	6
 16080  10F0  085B               	movf	matrix_Main@data+1,w
 16081  10F1  0087               	movwf	7
 16082  10F2  314D               	addfsr 1,13
 16083  10F3  3001               	movlw	1
 16084  10F4  3FC0               	movwi [0]fsr1
 16085  10F5  3000               	movlw	0
 16086  10F6  3FC1               	movwi [1]fsr1
 16087                           
 16088                           ;matrix_task.c: 158: data->holdCountY = 1;
 16089  10F7  085A               	movf	matrix_Main@data,w
 16090  10F8  0086               	movwf	6
 16091  10F9  085B               	movf	matrix_Main@data+1,w
 16092  10FA  0087               	movwf	7
 16093  10FB  314F               	addfsr 1,15
 16094  10FC  3001               	movlw	1
 16095  10FD  3FC0               	movwi [0]fsr1
 16096  10FE  3000               	movlw	0
 16097  10FF  3FC1               	movwi [1]fsr1
 16098                           
 16099                           ;matrix_task.c: 159: return;
 16100  1100  0008               	return
 16101  1101                     l9887:	
 16102                           
 16103                           ;matrix_task.c: 160: }
 16104                           ;matrix_task.c: 164: if (data->martix_state == STILL_IN_MATRIX){
 16105  1101  0020               	movlb	0	; select bank0
 16106  1102  085A               	movf	matrix_Main@data,w
 16107  1103  0086               	movwf	6
 16108  1104  085B               	movf	matrix_Main@data+1,w
 16109  1105  0087               	movwf	7
 16110  1106  3141               	addfsr 1,1
 16111  1107  0301               	decf	1,w
 16112  1108  1D03               	btfss	3,2
 16113  1109  2939               	goto	l9899
 16114                           
 16115                           ;matrix_task.c: 165: if(data->delayTickCount == 0){
 16116  110A  085A               	movf	matrix_Main@data,w
 16117  110B  0086               	movwf	6
 16118  110C  085B               	movf	matrix_Main@data+1,w
 16119  110D  0087               	movwf	7
 16120  110E  3143               	addfsr 1,3
 16121  110F  0016               	moviw fsr1++
 16122  1110  0401               	iorwf	1,w
 16123  1111  1D03               	btfss	3,2
 16124  1112  292E               	goto	l9897
 16125                           
 16126                           ;matrix_task.c: 166: led_Parody(matrix_leds_idx);
 16127  1113  0021               	movlb	1	; select bank1
 16128  1114  0821               	movf	(_matrix_leds_idx+1)^(0+128),w
 16129  1115  0020               	movlb	0	; select bank0
 16130  1116  00B1               	movwf	led_Parody@count+1
 16131  1117  0021               	movlb	1	; select bank1
 16132  1118  0820               	movf	_matrix_leds_idx^(0+128),w
 16133  1119  0020               	movlb	0	; select bank0
 16134  111A  00B0               	movwf	led_Parody@count
 16135  111B  31AE  26C8  3190   	fcall	_led_Parody
 16136                           
 16137                           ;matrix_task.c: 167: matrix_leds_idx += 1;
 16138  111E  3001               	movlw	1
 16139  111F  0021               	movlb	1	; select bank1
 16140  1120  07A0               	addwf	_matrix_leds_idx^(0+128),f
 16141  1121  3000               	movlw	0
 16142  1122  3DA1               	addwfc	(_matrix_leds_idx+1)^(0+128),f
 16143                           
 16144                           ;matrix_task.c: 168: data->delayTickCount = 10;
 16145  1123  0020               	movlb	0	; select bank0
 16146  1124  085A               	movf	matrix_Main@data,w
 16147  1125  0086               	movwf	6
 16148  1126  085B               	movf	matrix_Main@data+1,w
 16149  1127  0087               	movwf	7
 16150  1128  3143               	addfsr 1,3
 16151  1129  300A               	movlw	10
 16152  112A  3FC0               	movwi [0]fsr1
 16153  112B  3000               	movlw	0
 16154  112C  3FC1               	movwi [1]fsr1
 16155                           
 16156                           ;matrix_task.c: 169: }
 16157  112D  2939               	goto	l9899
 16158  112E                     l9897:	
 16159                           
 16160                           ;matrix_task.c: 170: else {
 16161                           ;matrix_task.c: 171: data->delayTickCount -= 1;
 16162  112E  085A               	movf	matrix_Main@data,w
 16163  112F  0086               	movwf	6
 16164  1130  085B               	movf	matrix_Main@data+1,w
 16165  1131  0087               	movwf	7
 16166  1132  3143               	addfsr 1,3
 16167  1133  3001               	movlw	1
 16168  1134  0281               	subwf	1,f
 16169  1135  3141               	addfsr 1,1
 16170  1136  3000               	movlw	0
 16171  1137  3B81               	subwfb	1,f
 16172  1138  317F               	addfsr 1,-1
 16173  1139                     l9899:	
 16174                           
 16175                           ;matrix_task.c: 172: }
 16176                           ;matrix_task.c: 173: }
 16177                           ;matrix_task.c: 177: buttonPressed = nullifyBadge_buttonsGet();
 16178  1139  31B6  264B  3190   	fcall	_nullifyBadge_buttonsGet
 16179  113C  0020               	movlb	0	; select bank0
 16180  113D  00D4               	movwf	??_matrix_Main
 16181  113E  0854               	movf	??_matrix_Main,w
 16182  113F  00D8               	movwf	matrix_Main@buttonPressed
 16183                           
 16184                           ;matrix_task.c: 180: switch (buttonPressed) {
 16185  1140  2F93               	goto	l10233
 16186  1141                     l9901:	
 16187                           ;matrix_task.c: 181: case 1:
 16188                           
 16189                           
 16190                           ;matrix_task.c: 183: if (data->holdCountA == holdvalue){
 16191  1141  085A               	movf	matrix_Main@data,w
 16192  1142  0086               	movwf	6
 16193  1143  085B               	movf	matrix_Main@data+1,w
 16194  1144  0087               	movwf	7
 16195  1145  3149               	addfsr 1,9
 16196  1146  3F40               	moviw [0]fsr1
 16197  1147  00D4               	movwf	??_matrix_Main
 16198  1148  3F41               	moviw [1]fsr1
 16199  1149  00D5               	movwf	??_matrix_Main+1
 16200  114A  0859               	movf	matrix_Main@holdvalue,w
 16201  114B  00D6               	movwf	??_matrix_Main+2
 16202  114C  01D7               	clrf	??_matrix_Main+3
 16203  114D  0855               	movf	??_matrix_Main+1,w
 16204  114E  0657               	xorwf	??_matrix_Main+3,w
 16205  114F  1D03               	skipz
 16206  1150  2953               	goto	u6335
 16207  1151  0854               	movf	??_matrix_Main,w
 16208  1152  0656               	xorwf	??_matrix_Main+2,w
 16209  1153                     u6335:	
 16210  1153  1D03               	skipz
 16211  1154  296C               	goto	l9907
 16212                           
 16213                           ;matrix_task.c: 184: matrix_found = matrix_secret_check(data, buttonPressed);
 16214  1155  085B               	movf	matrix_Main@data+1,w
 16215  1156  00F8               	movwf	matrix_secret_check@data+1
 16216  1157  085A               	movf	matrix_Main@data,w
 16217  1158  00F7               	movwf	matrix_secret_check@data
 16218  1159  0858               	movf	matrix_Main@buttonPressed,w
 16219  115A  00D4               	movwf	??_matrix_Main
 16220  115B  0854               	movf	??_matrix_Main,w
 16221  115C  00F9               	movwf	matrix_secret_check@buttonPressed
 16222  115D  31A5  258A  3190   	fcall	_matrix_secret_check
 16223  1160  0020               	movlb	0	; select bank0
 16224  1161  00D5               	movwf	??_matrix_Main+1
 16225  1162  0855               	movf	??_matrix_Main+1,w
 16226  1163  0021               	movlb	1	; select bank1
 16227  1164  00C2               	movwf	_matrix_found^(0+128)
 16228                           
 16229                           ;matrix_task.c: 185: data->display_state = MATRIX_A;
 16230  1165  0020               	movlb	0	; select bank0
 16231  1166  085A               	movf	matrix_Main@data,w
 16232  1167  0086               	movwf	6
 16233  1168  085B               	movf	matrix_Main@data+1,w
 16234  1169  0087               	movwf	7
 16235  116A  3142               	addfsr 1,2
 16236  116B  0181               	clrf	1
 16237  116C                     l9907:	
 16238                           
 16239                           ;matrix_task.c: 186: }
 16240                           ;matrix_task.c: 187: data->holdCountA += 1;
 16241  116C  085A               	movf	matrix_Main@data,w
 16242  116D  0086               	movwf	6
 16243  116E  085B               	movf	matrix_Main@data+1,w
 16244  116F  0087               	movwf	7
 16245  1170  3149               	addfsr 1,9
 16246  1171  3001               	movlw	1
 16247  1172  0781               	addwf	1,f
 16248  1173  3141               	addfsr 1,1
 16249  1174  1803               	skipnc
 16250  1175  0A81               	incf	1,f
 16251                           
 16252                           ;matrix_task.c: 188: data->holdCountB = 0;
 16253  1176  085A               	movf	matrix_Main@data,w
 16254  1177  0086               	movwf	6
 16255  1178  085B               	movf	matrix_Main@data+1,w
 16256  1179  0087               	movwf	7
 16257  117A  314B               	addfsr 1,11
 16258  117B  3000               	movlw	0
 16259  117C  3FC0               	movwi [0]fsr1
 16260  117D  3FC1               	movwi [1]fsr1
 16261                           
 16262                           ;matrix_task.c: 189: data->holdCountX = 0;
 16263  117E  085A               	movf	matrix_Main@data,w
 16264  117F  0086               	movwf	6
 16265  1180  085B               	movf	matrix_Main@data+1,w
 16266  1181  0087               	movwf	7
 16267  1182  314D               	addfsr 1,13
 16268  1183  3000               	movlw	0
 16269  1184  3FC0               	movwi [0]fsr1
 16270  1185  3FC1               	movwi [1]fsr1
 16271                           
 16272                           ;matrix_task.c: 190: data->holdCountY = 0;
 16273  1186  085A               	movf	matrix_Main@data,w
 16274  1187  0086               	movwf	6
 16275  1188  085B               	movf	matrix_Main@data+1,w
 16276  1189  0087               	movwf	7
 16277  118A  314F               	addfsr 1,15
 16278  118B  3000               	movlw	0
 16279  118C  3FC0               	movwi [0]fsr1
 16280  118D  3FC1               	movwi [1]fsr1
 16281                           
 16282                           ;matrix_task.c: 191: data->holdCountXY = 0;
 16283  118E  085A               	movf	matrix_Main@data,w
 16284  118F  0086               	movwf	6
 16285  1190  085B               	movf	matrix_Main@data+1,w
 16286  1191  0087               	movwf	7
 16287  1192  3151               	addfsr 1,17
 16288  1193  3000               	movlw	0
 16289  1194  3FC0               	movwi [0]fsr1
 16290  1195  3FC1               	movwi [1]fsr1
 16291                           
 16292                           ;matrix_task.c: 192: data->holdCountAY = 0;
 16293  1196  085A               	movf	matrix_Main@data,w
 16294  1197  0086               	movwf	6
 16295  1198  085B               	movf	matrix_Main@data+1,w
 16296  1199  0087               	movwf	7
 16297  119A  3153               	addfsr 1,19
 16298  119B  3000               	movlw	0
 16299  119C  3FC0               	movwi [0]fsr1
 16300  119D  3FC1               	movwi [1]fsr1
 16301                           
 16302                           ;matrix_task.c: 193: data->holdCountAX = 0;
 16303  119E  085A               	movf	matrix_Main@data,w
 16304  119F  0086               	movwf	6
 16305  11A0  085B               	movf	matrix_Main@data+1,w
 16306  11A1  0087               	movwf	7
 16307  11A2  3155               	addfsr 1,21
 16308  11A3  3000               	movlw	0
 16309  11A4  3FC0               	movwi [0]fsr1
 16310  11A5  3FC1               	movwi [1]fsr1
 16311                           
 16312                           ;matrix_task.c: 194: data->holdCountBX = 0;
 16313  11A6  085A               	movf	matrix_Main@data,w
 16314  11A7  0086               	movwf	6
 16315  11A8  085B               	movf	matrix_Main@data+1,w
 16316  11A9  0087               	movwf	7
 16317  11AA  3157               	addfsr 1,23
 16318  11AB  3000               	movlw	0
 16319  11AC  3FC0               	movwi [0]fsr1
 16320  11AD  3FC1               	movwi [1]fsr1
 16321                           
 16322                           ;matrix_task.c: 195: data->holdCountBY = 0;
 16323  11AE  085A               	movf	matrix_Main@data,w
 16324  11AF  0086               	movwf	6
 16325  11B0  085B               	movf	matrix_Main@data+1,w
 16326  11B1  0087               	movwf	7
 16327  11B2  3159               	addfsr 1,25
 16328  11B3  3000               	movlw	0
 16329  11B4  3FC0               	movwi [0]fsr1
 16330  11B5  3FC1               	movwi [1]fsr1
 16331                           
 16332                           ;matrix_task.c: 196: data->holdCountBA = 0;
 16333  11B6  085A               	movf	matrix_Main@data,w
 16334  11B7  0086               	movwf	6
 16335  11B8  085B               	movf	matrix_Main@data+1,w
 16336  11B9  0087               	movwf	7
 16337  11BA  315B               	addfsr 1,27
 16338  11BB  3000               	movlw	0
 16339  11BC  3FC0               	movwi [0]fsr1
 16340  11BD  3FC1               	movwi [1]fsr1
 16341                           
 16342                           ;matrix_task.c: 197: data->noholdCount = 0;
 16343  11BE  085A               	movf	matrix_Main@data,w
 16344  11BF  0086               	movwf	6
 16345  11C0  085B               	movf	matrix_Main@data+1,w
 16346  11C1  0087               	movwf	7
 16347  11C2  315D               	addfsr 1,29
 16348  11C3  3000               	movlw	0
 16349  11C4  3FC0               	movwi [0]fsr1
 16350  11C5  3FC1               	movwi [1]fsr1
 16351                           
 16352                           ;matrix_task.c: 198: data->displayTickdown = 300;
 16353  11C6  085A               	movf	matrix_Main@data,w
 16354  11C7  0086               	movwf	6
 16355  11C8  085B               	movf	matrix_Main@data+1,w
 16356  11C9  0087               	movwf	7
 16357  11CA  3147               	addfsr 1,7
 16358  11CB  302C               	movlw	44
 16359  11CC  3FC0               	movwi [0]fsr1
 16360  11CD  3001               	movlw	1
 16361  11CE  3FC1               	movwi [1]fsr1
 16362                           
 16363                           ;matrix_task.c: 199: break;
 16364  11CF  2FB4               	goto	l10235
 16365  11D0                     l9931:	
 16366                           ;matrix_task.c: 200: case 2:
 16367                           
 16368                           
 16369                           ;matrix_task.c: 202: if (data->holdCountB == holdvalue){
 16370  11D0  085A               	movf	matrix_Main@data,w
 16371  11D1  0086               	movwf	6
 16372  11D2  085B               	movf	matrix_Main@data+1,w
 16373  11D3  0087               	movwf	7
 16374  11D4  314B               	addfsr 1,11
 16375  11D5  3F40               	moviw [0]fsr1
 16376  11D6  00D4               	movwf	??_matrix_Main
 16377  11D7  3F41               	moviw [1]fsr1
 16378  11D8  00D5               	movwf	??_matrix_Main+1
 16379  11D9  0859               	movf	matrix_Main@holdvalue,w
 16380  11DA  00D6               	movwf	??_matrix_Main+2
 16381  11DB  01D7               	clrf	??_matrix_Main+3
 16382  11DC  0855               	movf	??_matrix_Main+1,w
 16383  11DD  0657               	xorwf	??_matrix_Main+3,w
 16384  11DE  1D03               	skipz
 16385  11DF  29E2               	goto	u6345
 16386  11E0  0854               	movf	??_matrix_Main,w
 16387  11E1  0656               	xorwf	??_matrix_Main+2,w
 16388  11E2                     u6345:	
 16389  11E2  1D03               	skipz
 16390  11E3  2A01               	goto	l9937
 16391                           
 16392                           ;matrix_task.c: 203: matrix_found = matrix_secret_check(data, buttonPressed);
 16393  11E4  085B               	movf	matrix_Main@data+1,w
 16394  11E5  00F8               	movwf	matrix_secret_check@data+1
 16395  11E6  085A               	movf	matrix_Main@data,w
 16396  11E7  00F7               	movwf	matrix_secret_check@data
 16397  11E8  0858               	movf	matrix_Main@buttonPressed,w
 16398  11E9  00D4               	movwf	??_matrix_Main
 16399  11EA  0854               	movf	??_matrix_Main,w
 16400  11EB  00F9               	movwf	matrix_secret_check@buttonPressed
 16401  11EC  31A5  258A  3190   	fcall	_matrix_secret_check
 16402  11EF  0020               	movlb	0	; select bank0
 16403  11F0  00D5               	movwf	??_matrix_Main+1
 16404  11F1  0855               	movf	??_matrix_Main+1,w
 16405  11F2  0021               	movlb	1	; select bank1
 16406  11F3  00C2               	movwf	_matrix_found^(0+128)
 16407                           
 16408                           ;matrix_task.c: 204: data->display_state = MATRIX_B;
 16409  11F4  0020               	movlb	0	; select bank0
 16410  11F5  085A               	movf	matrix_Main@data,w
 16411  11F6  3E02               	addlw	2
 16412  11F7  00D4               	movwf	??_matrix_Main
 16413  11F8  3000               	movlw	0
 16414  11F9  3D5B               	addwfc	matrix_Main@data+1,w
 16415  11FA  00D5               	movwf	??_matrix_Main+1
 16416  11FB  0854               	movf	??_matrix_Main,w
 16417  11FC  0086               	movwf	6
 16418  11FD  0855               	movf	??_matrix_Main+1,w
 16419  11FE  0087               	movwf	7
 16420  11FF  3002               	movlw	2
 16421  1200  0081               	movwf	1
 16422  1201                     l9937:	
 16423                           
 16424                           ;matrix_task.c: 205: }
 16425                           ;matrix_task.c: 206: data->holdCountA = 0;
 16426  1201  085A               	movf	matrix_Main@data,w
 16427  1202  0086               	movwf	6
 16428  1203  085B               	movf	matrix_Main@data+1,w
 16429  1204  0087               	movwf	7
 16430  1205  3149               	addfsr 1,9
 16431  1206  3000               	movlw	0
 16432  1207  3FC0               	movwi [0]fsr1
 16433  1208  3FC1               	movwi [1]fsr1
 16434                           
 16435                           ;matrix_task.c: 207: data->holdCountB += 1;
 16436  1209  085A               	movf	matrix_Main@data,w
 16437  120A  0086               	movwf	6
 16438  120B  085B               	movf	matrix_Main@data+1,w
 16439  120C  0087               	movwf	7
 16440  120D  314B               	addfsr 1,11
 16441  120E  3001               	movlw	1
 16442  120F  0781               	addwf	1,f
 16443  1210  3141               	addfsr 1,1
 16444  1211  1803               	skipnc
 16445  1212  0A81               	incf	1,f
 16446                           
 16447                           ;matrix_task.c: 208: data->holdCountX = 0;
 16448  1213  085A               	movf	matrix_Main@data,w
 16449  1214  0086               	movwf	6
 16450  1215  085B               	movf	matrix_Main@data+1,w
 16451  1216  0087               	movwf	7
 16452  1217  314D               	addfsr 1,13
 16453  1218  3000               	movlw	0
 16454  1219  3FC0               	movwi [0]fsr1
 16455  121A  3FC1               	movwi [1]fsr1
 16456                           
 16457                           ;matrix_task.c: 209: data->holdCountY = 0;
 16458  121B  085A               	movf	matrix_Main@data,w
 16459  121C  0086               	movwf	6
 16460  121D  085B               	movf	matrix_Main@data+1,w
 16461  121E  0087               	movwf	7
 16462  121F  314F               	addfsr 1,15
 16463  1220  3000               	movlw	0
 16464  1221  3FC0               	movwi [0]fsr1
 16465  1222  3FC1               	movwi [1]fsr1
 16466                           
 16467                           ;matrix_task.c: 210: data->holdCountXY = 0;
 16468  1223  085A               	movf	matrix_Main@data,w
 16469  1224  0086               	movwf	6
 16470  1225  085B               	movf	matrix_Main@data+1,w
 16471  1226  0087               	movwf	7
 16472  1227  3151               	addfsr 1,17
 16473  1228  3000               	movlw	0
 16474  1229  3FC0               	movwi [0]fsr1
 16475  122A  3FC1               	movwi [1]fsr1
 16476                           
 16477                           ;matrix_task.c: 211: data->holdCountAY = 0;
 16478  122B  085A               	movf	matrix_Main@data,w
 16479  122C  0086               	movwf	6
 16480  122D  085B               	movf	matrix_Main@data+1,w
 16481  122E  0087               	movwf	7
 16482  122F  3153               	addfsr 1,19
 16483  1230  3000               	movlw	0
 16484  1231  3FC0               	movwi [0]fsr1
 16485  1232  3FC1               	movwi [1]fsr1
 16486                           
 16487                           ;matrix_task.c: 212: data->holdCountAX = 0;
 16488  1233  085A               	movf	matrix_Main@data,w
 16489  1234  0086               	movwf	6
 16490  1235  085B               	movf	matrix_Main@data+1,w
 16491  1236  0087               	movwf	7
 16492  1237  3155               	addfsr 1,21
 16493  1238  3000               	movlw	0
 16494  1239  3FC0               	movwi [0]fsr1
 16495  123A  3FC1               	movwi [1]fsr1
 16496                           
 16497                           ;matrix_task.c: 213: data->holdCountBX = 0;
 16498  123B  085A               	movf	matrix_Main@data,w
 16499  123C  0086               	movwf	6
 16500  123D  085B               	movf	matrix_Main@data+1,w
 16501  123E  0087               	movwf	7
 16502  123F  3157               	addfsr 1,23
 16503  1240  3000               	movlw	0
 16504  1241  3FC0               	movwi [0]fsr1
 16505  1242  3FC1               	movwi [1]fsr1
 16506                           
 16507                           ;matrix_task.c: 214: data->holdCountBY = 0;
 16508  1243  085A               	movf	matrix_Main@data,w
 16509  1244  0086               	movwf	6
 16510  1245  085B               	movf	matrix_Main@data+1,w
 16511  1246  0087               	movwf	7
 16512  1247  3159               	addfsr 1,25
 16513  1248  3000               	movlw	0
 16514  1249  3FC0               	movwi [0]fsr1
 16515  124A  3FC1               	movwi [1]fsr1
 16516                           
 16517                           ;matrix_task.c: 215: data->holdCountBA = 0;
 16518  124B  085A               	movf	matrix_Main@data,w
 16519  124C  0086               	movwf	6
 16520  124D  085B               	movf	matrix_Main@data+1,w
 16521  124E  0087               	movwf	7
 16522  124F  315B               	addfsr 1,27
 16523  1250  3000               	movlw	0
 16524  1251  3FC0               	movwi [0]fsr1
 16525  1252  3FC1               	movwi [1]fsr1
 16526                           
 16527                           ;matrix_task.c: 216: data->noholdCount = 0;
 16528  1253  085A               	movf	matrix_Main@data,w
 16529  1254  0086               	movwf	6
 16530  1255  085B               	movf	matrix_Main@data+1,w
 16531  1256  0087               	movwf	7
 16532  1257  315D               	addfsr 1,29
 16533  1258  3000               	movlw	0
 16534  1259  3FC0               	movwi [0]fsr1
 16535  125A  3FC1               	movwi [1]fsr1
 16536                           
 16537                           ;matrix_task.c: 217: data->displayTickdown = 300;
 16538  125B  085A               	movf	matrix_Main@data,w
 16539  125C  0086               	movwf	6
 16540  125D  085B               	movf	matrix_Main@data+1,w
 16541  125E  0087               	movwf	7
 16542  125F  3147               	addfsr 1,7
 16543  1260  302C               	movlw	44
 16544  1261  3FC0               	movwi [0]fsr1
 16545  1262  3001               	movlw	1
 16546  1263  3FC1               	movwi [1]fsr1
 16547                           
 16548                           ;matrix_task.c: 218: break;
 16549  1264  2FB4               	goto	l10235
 16550  1265                     l9961:	
 16551                           ;matrix_task.c: 219: case 4:
 16552                           
 16553                           
 16554                           ;matrix_task.c: 221: if (data->holdCountX == holdvalue){
 16555  1265  085A               	movf	matrix_Main@data,w
 16556  1266  0086               	movwf	6
 16557  1267  085B               	movf	matrix_Main@data+1,w
 16558  1268  0087               	movwf	7
 16559  1269  314D               	addfsr 1,13
 16560  126A  3F40               	moviw [0]fsr1
 16561  126B  00D4               	movwf	??_matrix_Main
 16562  126C  3F41               	moviw [1]fsr1
 16563  126D  00D5               	movwf	??_matrix_Main+1
 16564  126E  0859               	movf	matrix_Main@holdvalue,w
 16565  126F  00D6               	movwf	??_matrix_Main+2
 16566  1270  01D7               	clrf	??_matrix_Main+3
 16567  1271  0855               	movf	??_matrix_Main+1,w
 16568  1272  0657               	xorwf	??_matrix_Main+3,w
 16569  1273  1D03               	skipz
 16570  1274  2A77               	goto	u6355
 16571  1275  0854               	movf	??_matrix_Main,w
 16572  1276  0656               	xorwf	??_matrix_Main+2,w
 16573  1277                     u6355:	
 16574  1277  1D03               	skipz
 16575  1278  2A96               	goto	l9967
 16576                           
 16577                           ;matrix_task.c: 222: matrix_found = matrix_secret_check(data, buttonPressed);
 16578  1279  085B               	movf	matrix_Main@data+1,w
 16579  127A  00F8               	movwf	matrix_secret_check@data+1
 16580  127B  085A               	movf	matrix_Main@data,w
 16581  127C  00F7               	movwf	matrix_secret_check@data
 16582  127D  0858               	movf	matrix_Main@buttonPressed,w
 16583  127E  00D4               	movwf	??_matrix_Main
 16584  127F  0854               	movf	??_matrix_Main,w
 16585  1280  00F9               	movwf	matrix_secret_check@buttonPressed
 16586  1281  31A5  258A  3190   	fcall	_matrix_secret_check
 16587  1284  0020               	movlb	0	; select bank0
 16588  1285  00D5               	movwf	??_matrix_Main+1
 16589  1286  0855               	movf	??_matrix_Main+1,w
 16590  1287  0021               	movlb	1	; select bank1
 16591  1288  00C2               	movwf	_matrix_found^(0+128)
 16592                           
 16593                           ;matrix_task.c: 223: data->display_state = MATRIX_X;
 16594  1289  0020               	movlb	0	; select bank0
 16595  128A  085A               	movf	matrix_Main@data,w
 16596  128B  3E02               	addlw	2
 16597  128C  00D4               	movwf	??_matrix_Main
 16598  128D  3000               	movlw	0
 16599  128E  3D5B               	addwfc	matrix_Main@data+1,w
 16600  128F  00D5               	movwf	??_matrix_Main+1
 16601  1290  0854               	movf	??_matrix_Main,w
 16602  1291  0086               	movwf	6
 16603  1292  0855               	movf	??_matrix_Main+1,w
 16604  1293  0087               	movwf	7
 16605  1294  3003               	movlw	3
 16606  1295  0081               	movwf	1
 16607  1296                     l9967:	
 16608                           
 16609                           ;matrix_task.c: 224: }
 16610                           ;matrix_task.c: 225: data->holdCountA = 0;
 16611  1296  085A               	movf	matrix_Main@data,w
 16612  1297  0086               	movwf	6
 16613  1298  085B               	movf	matrix_Main@data+1,w
 16614  1299  0087               	movwf	7
 16615  129A  3149               	addfsr 1,9
 16616  129B  3000               	movlw	0
 16617  129C  3FC0               	movwi [0]fsr1
 16618  129D  3FC1               	movwi [1]fsr1
 16619                           
 16620                           ;matrix_task.c: 226: data->holdCountB = 0;
 16621  129E  085A               	movf	matrix_Main@data,w
 16622  129F  0086               	movwf	6
 16623  12A0  085B               	movf	matrix_Main@data+1,w
 16624  12A1  0087               	movwf	7
 16625  12A2  314B               	addfsr 1,11
 16626  12A3  3000               	movlw	0
 16627  12A4  3FC0               	movwi [0]fsr1
 16628  12A5  3FC1               	movwi [1]fsr1
 16629                           
 16630                           ;matrix_task.c: 227: data->holdCountX += 1;
 16631  12A6  085A               	movf	matrix_Main@data,w
 16632  12A7  0086               	movwf	6
 16633  12A8  085B               	movf	matrix_Main@data+1,w
 16634  12A9  0087               	movwf	7
 16635  12AA  314D               	addfsr 1,13
 16636  12AB  3001               	movlw	1
 16637  12AC  0781               	addwf	1,f
 16638  12AD  3141               	addfsr 1,1
 16639  12AE  1803               	skipnc
 16640  12AF  0A81               	incf	1,f
 16641                           
 16642                           ;matrix_task.c: 228: data->holdCountY = 0;
 16643  12B0  085A               	movf	matrix_Main@data,w
 16644  12B1  0086               	movwf	6
 16645  12B2  085B               	movf	matrix_Main@data+1,w
 16646  12B3  0087               	movwf	7
 16647  12B4  314F               	addfsr 1,15
 16648  12B5  3000               	movlw	0
 16649  12B6  3FC0               	movwi [0]fsr1
 16650  12B7  3FC1               	movwi [1]fsr1
 16651                           
 16652                           ;matrix_task.c: 229: data->holdCountXY = 0;
 16653  12B8  085A               	movf	matrix_Main@data,w
 16654  12B9  0086               	movwf	6
 16655  12BA  085B               	movf	matrix_Main@data+1,w
 16656  12BB  0087               	movwf	7
 16657  12BC  3151               	addfsr 1,17
 16658  12BD  3000               	movlw	0
 16659  12BE  3FC0               	movwi [0]fsr1
 16660  12BF  3FC1               	movwi [1]fsr1
 16661                           
 16662                           ;matrix_task.c: 230: data->holdCountAY = 0;
 16663  12C0  085A               	movf	matrix_Main@data,w
 16664  12C1  0086               	movwf	6
 16665  12C2  085B               	movf	matrix_Main@data+1,w
 16666  12C3  0087               	movwf	7
 16667  12C4  3153               	addfsr 1,19
 16668  12C5  3000               	movlw	0
 16669  12C6  3FC0               	movwi [0]fsr1
 16670  12C7  3FC1               	movwi [1]fsr1
 16671                           
 16672                           ;matrix_task.c: 231: data->holdCountAX = 0;
 16673  12C8  085A               	movf	matrix_Main@data,w
 16674  12C9  0086               	movwf	6
 16675  12CA  085B               	movf	matrix_Main@data+1,w
 16676  12CB  0087               	movwf	7
 16677  12CC  3155               	addfsr 1,21
 16678  12CD  3000               	movlw	0
 16679  12CE  3FC0               	movwi [0]fsr1
 16680  12CF  3FC1               	movwi [1]fsr1
 16681                           
 16682                           ;matrix_task.c: 232: data->holdCountBX = 0;
 16683  12D0  085A               	movf	matrix_Main@data,w
 16684  12D1  0086               	movwf	6
 16685  12D2  085B               	movf	matrix_Main@data+1,w
 16686  12D3  0087               	movwf	7
 16687  12D4  3157               	addfsr 1,23
 16688  12D5  3000               	movlw	0
 16689  12D6  3FC0               	movwi [0]fsr1
 16690  12D7  3FC1               	movwi [1]fsr1
 16691                           
 16692                           ;matrix_task.c: 233: data->holdCountBY = 0;
 16693  12D8  085A               	movf	matrix_Main@data,w
 16694  12D9  0086               	movwf	6
 16695  12DA  085B               	movf	matrix_Main@data+1,w
 16696  12DB  0087               	movwf	7
 16697  12DC  3159               	addfsr 1,25
 16698  12DD  3000               	movlw	0
 16699  12DE  3FC0               	movwi [0]fsr1
 16700  12DF  3FC1               	movwi [1]fsr1
 16701                           
 16702                           ;matrix_task.c: 234: data->holdCountBA = 0;
 16703  12E0  085A               	movf	matrix_Main@data,w
 16704  12E1  0086               	movwf	6
 16705  12E2  085B               	movf	matrix_Main@data+1,w
 16706  12E3  0087               	movwf	7
 16707  12E4  315B               	addfsr 1,27
 16708  12E5  3000               	movlw	0
 16709  12E6  3FC0               	movwi [0]fsr1
 16710  12E7  3FC1               	movwi [1]fsr1
 16711                           
 16712                           ;matrix_task.c: 235: data->noholdCount = 0;
 16713  12E8  085A               	movf	matrix_Main@data,w
 16714  12E9  0086               	movwf	6
 16715  12EA  085B               	movf	matrix_Main@data+1,w
 16716  12EB  0087               	movwf	7
 16717  12EC  315D               	addfsr 1,29
 16718  12ED  3000               	movlw	0
 16719  12EE  3FC0               	movwi [0]fsr1
 16720  12EF  3FC1               	movwi [1]fsr1
 16721                           
 16722                           ;matrix_task.c: 236: data->displayTickdown = 300;
 16723  12F0  085A               	movf	matrix_Main@data,w
 16724  12F1  0086               	movwf	6
 16725  12F2  085B               	movf	matrix_Main@data+1,w
 16726  12F3  0087               	movwf	7
 16727  12F4  3147               	addfsr 1,7
 16728  12F5  302C               	movlw	44
 16729  12F6  3FC0               	movwi [0]fsr1
 16730  12F7  3001               	movlw	1
 16731  12F8  3FC1               	movwi [1]fsr1
 16732                           
 16733                           ;matrix_task.c: 237: break;
 16734  12F9  2FB4               	goto	l10235
 16735  12FA                     l9991:	
 16736                           ;matrix_task.c: 238: case 8:
 16737                           
 16738                           
 16739                           ;matrix_task.c: 240: if (data->holdCountY == holdvalue){
 16740  12FA  085A               	movf	matrix_Main@data,w
 16741  12FB  0086               	movwf	6
 16742  12FC  085B               	movf	matrix_Main@data+1,w
 16743  12FD  0087               	movwf	7
 16744  12FE  314F               	addfsr 1,15
 16745  12FF  3F40               	moviw [0]fsr1
 16746  1300  00D4               	movwf	??_matrix_Main
 16747  1301  3F41               	moviw [1]fsr1
 16748  1302  00D5               	movwf	??_matrix_Main+1
 16749  1303  0859               	movf	matrix_Main@holdvalue,w
 16750  1304  00D6               	movwf	??_matrix_Main+2
 16751  1305  01D7               	clrf	??_matrix_Main+3
 16752  1306  0855               	movf	??_matrix_Main+1,w
 16753  1307  0657               	xorwf	??_matrix_Main+3,w
 16754  1308  1D03               	skipz
 16755  1309  2B0C               	goto	u6365
 16756  130A  0854               	movf	??_matrix_Main,w
 16757  130B  0656               	xorwf	??_matrix_Main+2,w
 16758  130C                     u6365:	
 16759  130C  1D03               	skipz
 16760  130D  2B2B               	goto	l9997
 16761                           
 16762                           ;matrix_task.c: 241: matrix_found = matrix_secret_check(data, buttonPressed);
 16763  130E  085B               	movf	matrix_Main@data+1,w
 16764  130F  00F8               	movwf	matrix_secret_check@data+1
 16765  1310  085A               	movf	matrix_Main@data,w
 16766  1311  00F7               	movwf	matrix_secret_check@data
 16767  1312  0858               	movf	matrix_Main@buttonPressed,w
 16768  1313  00D4               	movwf	??_matrix_Main
 16769  1314  0854               	movf	??_matrix_Main,w
 16770  1315  00F9               	movwf	matrix_secret_check@buttonPressed
 16771  1316  31A5  258A  3190   	fcall	_matrix_secret_check
 16772  1319  0020               	movlb	0	; select bank0
 16773  131A  00D5               	movwf	??_matrix_Main+1
 16774  131B  0855               	movf	??_matrix_Main+1,w
 16775  131C  0021               	movlb	1	; select bank1
 16776  131D  00C2               	movwf	_matrix_found^(0+128)
 16777                           
 16778                           ;matrix_task.c: 242: data->display_state = MATRIX_Y;
 16779  131E  0020               	movlb	0	; select bank0
 16780  131F  085A               	movf	matrix_Main@data,w
 16781  1320  3E02               	addlw	2
 16782  1321  00D4               	movwf	??_matrix_Main
 16783  1322  3000               	movlw	0
 16784  1323  3D5B               	addwfc	matrix_Main@data+1,w
 16785  1324  00D5               	movwf	??_matrix_Main+1
 16786  1325  0854               	movf	??_matrix_Main,w
 16787  1326  0086               	movwf	6
 16788  1327  0855               	movf	??_matrix_Main+1,w
 16789  1328  0087               	movwf	7
 16790  1329  3001               	movlw	1
 16791  132A  0081               	movwf	1
 16792  132B                     l9997:	
 16793                           
 16794                           ;matrix_task.c: 243: }
 16795                           ;matrix_task.c: 245: data->holdCountA = 0;
 16796  132B  085A               	movf	matrix_Main@data,w
 16797  132C  0086               	movwf	6
 16798  132D  085B               	movf	matrix_Main@data+1,w
 16799  132E  0087               	movwf	7
 16800  132F  3149               	addfsr 1,9
 16801  1330  3000               	movlw	0
 16802  1331  3FC0               	movwi [0]fsr1
 16803  1332  3FC1               	movwi [1]fsr1
 16804                           
 16805                           ;matrix_task.c: 246: data->holdCountB = 0;
 16806  1333  085A               	movf	matrix_Main@data,w
 16807  1334  0086               	movwf	6
 16808  1335  085B               	movf	matrix_Main@data+1,w
 16809  1336  0087               	movwf	7
 16810  1337  314B               	addfsr 1,11
 16811  1338  3000               	movlw	0
 16812  1339  3FC0               	movwi [0]fsr1
 16813  133A  3FC1               	movwi [1]fsr1
 16814                           
 16815                           ;matrix_task.c: 247: data->holdCountX = 0;
 16816  133B  085A               	movf	matrix_Main@data,w
 16817  133C  0086               	movwf	6
 16818  133D  085B               	movf	matrix_Main@data+1,w
 16819  133E  0087               	movwf	7
 16820  133F  314D               	addfsr 1,13
 16821  1340  3000               	movlw	0
 16822  1341  3FC0               	movwi [0]fsr1
 16823  1342  3FC1               	movwi [1]fsr1
 16824                           
 16825                           ;matrix_task.c: 248: data->holdCountY += 1;
 16826  1343  085A               	movf	matrix_Main@data,w
 16827  1344  0086               	movwf	6
 16828  1345  085B               	movf	matrix_Main@data+1,w
 16829  1346  0087               	movwf	7
 16830  1347  314F               	addfsr 1,15
 16831  1348  3001               	movlw	1
 16832  1349  0781               	addwf	1,f
 16833  134A  3141               	addfsr 1,1
 16834  134B  1803               	skipnc
 16835  134C  0A81               	incf	1,f
 16836                           
 16837                           ;matrix_task.c: 249: data->holdCountXY = 0;
 16838  134D  085A               	movf	matrix_Main@data,w
 16839  134E  0086               	movwf	6
 16840  134F  085B               	movf	matrix_Main@data+1,w
 16841  1350  0087               	movwf	7
 16842  1351  3151               	addfsr 1,17
 16843  1352  3000               	movlw	0
 16844  1353  3FC0               	movwi [0]fsr1
 16845  1354  3FC1               	movwi [1]fsr1
 16846                           
 16847                           ;matrix_task.c: 250: data->holdCountAY = 0;
 16848  1355  085A               	movf	matrix_Main@data,w
 16849  1356  0086               	movwf	6
 16850  1357  085B               	movf	matrix_Main@data+1,w
 16851  1358  0087               	movwf	7
 16852  1359  3153               	addfsr 1,19
 16853  135A  3000               	movlw	0
 16854  135B  3FC0               	movwi [0]fsr1
 16855  135C  3FC1               	movwi [1]fsr1
 16856                           
 16857                           ;matrix_task.c: 251: data->holdCountAX = 0;
 16858  135D  085A               	movf	matrix_Main@data,w
 16859  135E  0086               	movwf	6
 16860  135F  085B               	movf	matrix_Main@data+1,w
 16861  1360  0087               	movwf	7
 16862  1361  3155               	addfsr 1,21
 16863  1362  3000               	movlw	0
 16864  1363  3FC0               	movwi [0]fsr1
 16865  1364  3FC1               	movwi [1]fsr1
 16866                           
 16867                           ;matrix_task.c: 252: data->holdCountBX = 0;
 16868  1365  085A               	movf	matrix_Main@data,w
 16869  1366  0086               	movwf	6
 16870  1367  085B               	movf	matrix_Main@data+1,w
 16871  1368  0087               	movwf	7
 16872  1369  3157               	addfsr 1,23
 16873  136A  3000               	movlw	0
 16874  136B  3FC0               	movwi [0]fsr1
 16875  136C  3FC1               	movwi [1]fsr1
 16876                           
 16877                           ;matrix_task.c: 253: data->holdCountBY = 0;
 16878  136D  085A               	movf	matrix_Main@data,w
 16879  136E  0086               	movwf	6
 16880  136F  085B               	movf	matrix_Main@data+1,w
 16881  1370  0087               	movwf	7
 16882  1371  3159               	addfsr 1,25
 16883  1372  3000               	movlw	0
 16884  1373  3FC0               	movwi [0]fsr1
 16885  1374  3FC1               	movwi [1]fsr1
 16886                           
 16887                           ;matrix_task.c: 254: data->holdCountBA = 0;
 16888  1375  085A               	movf	matrix_Main@data,w
 16889  1376  0086               	movwf	6
 16890  1377  085B               	movf	matrix_Main@data+1,w
 16891  1378  0087               	movwf	7
 16892  1379  315B               	addfsr 1,27
 16893  137A  3000               	movlw	0
 16894  137B  3FC0               	movwi [0]fsr1
 16895  137C  3FC1               	movwi [1]fsr1
 16896                           
 16897                           ;matrix_task.c: 255: data->noholdCount = 0;
 16898  137D  085A               	movf	matrix_Main@data,w
 16899  137E  0086               	movwf	6
 16900  137F  085B               	movf	matrix_Main@data+1,w
 16901  1380  0087               	movwf	7
 16902  1381  315D               	addfsr 1,29
 16903  1382  3000               	movlw	0
 16904  1383  3FC0               	movwi [0]fsr1
 16905  1384  3FC1               	movwi [1]fsr1
 16906                           
 16907                           ;matrix_task.c: 256: data->displayTickdown = 300;
 16908  1385  085A               	movf	matrix_Main@data,w
 16909  1386  0086               	movwf	6
 16910  1387  085B               	movf	matrix_Main@data+1,w
 16911  1388  0087               	movwf	7
 16912  1389  3147               	addfsr 1,7
 16913  138A  302C               	movlw	44
 16914  138B  3FC0               	movwi [0]fsr1
 16915  138C  3001               	movlw	1
 16916  138D  3FC1               	movwi [1]fsr1
 16917                           
 16918                           ;matrix_task.c: 257: break;
 16919  138E  2FB4               	goto	l10235
 16920  138F                     l10021:	
 16921                           ;matrix_task.c: 258: case 4 | 8:
 16922                           
 16923                           
 16924                           ;matrix_task.c: 260: if (data->holdCountXY == holdvalue){
 16925  138F  085A               	movf	matrix_Main@data,w
 16926  1390  0086               	movwf	6
 16927  1391  085B               	movf	matrix_Main@data+1,w
 16928  1392  0087               	movwf	7
 16929  1393  3151               	addfsr 1,17
 16930  1394  3F40               	moviw [0]fsr1
 16931  1395  00D4               	movwf	??_matrix_Main
 16932  1396  3F41               	moviw [1]fsr1
 16933  1397  00D5               	movwf	??_matrix_Main+1
 16934  1398  0859               	movf	matrix_Main@holdvalue,w
 16935  1399  00D6               	movwf	??_matrix_Main+2
 16936  139A  01D7               	clrf	??_matrix_Main+3
 16937  139B  0855               	movf	??_matrix_Main+1,w
 16938  139C  0657               	xorwf	??_matrix_Main+3,w
 16939  139D  1D03               	skipz
 16940  139E  2BA1               	goto	u6375
 16941  139F  0854               	movf	??_matrix_Main,w
 16942  13A0  0656               	xorwf	??_matrix_Main+2,w
 16943  13A1                     u6375:	
 16944  13A1  1D03               	skipz
 16945  13A2  2BC0               	goto	l10027
 16946                           
 16947                           ;matrix_task.c: 261: matrix_found = matrix_secret_check(data, 4 | 8);
 16948  13A3  085B               	movf	matrix_Main@data+1,w
 16949  13A4  00F8               	movwf	matrix_secret_check@data+1
 16950  13A5  085A               	movf	matrix_Main@data,w
 16951  13A6  00F7               	movwf	matrix_secret_check@data
 16952  13A7  300C               	movlw	12
 16953  13A8  00D4               	movwf	??_matrix_Main
 16954  13A9  0854               	movf	??_matrix_Main,w
 16955  13AA  00F9               	movwf	matrix_secret_check@buttonPressed
 16956  13AB  31A5  258A  3190   	fcall	_matrix_secret_check
 16957  13AE  0020               	movlb	0	; select bank0
 16958  13AF  00D5               	movwf	??_matrix_Main+1
 16959  13B0  0855               	movf	??_matrix_Main+1,w
 16960  13B1  0021               	movlb	1	; select bank1
 16961  13B2  00C2               	movwf	_matrix_found^(0+128)
 16962                           
 16963                           ;matrix_task.c: 262: data->display_state = MATRIX_XY;
 16964  13B3  0020               	movlb	0	; select bank0
 16965  13B4  085A               	movf	matrix_Main@data,w
 16966  13B5  3E02               	addlw	2
 16967  13B6  00D4               	movwf	??_matrix_Main
 16968  13B7  3000               	movlw	0
 16969  13B8  3D5B               	addwfc	matrix_Main@data+1,w
 16970  13B9  00D5               	movwf	??_matrix_Main+1
 16971  13BA  0854               	movf	??_matrix_Main,w
 16972  13BB  0086               	movwf	6
 16973  13BC  0855               	movf	??_matrix_Main+1,w
 16974  13BD  0087               	movwf	7
 16975  13BE  3008               	movlw	8
 16976  13BF  0081               	movwf	1
 16977  13C0                     l10027:	
 16978                           
 16979                           ;matrix_task.c: 263: }
 16980                           ;matrix_task.c: 264: data->holdCountA = 0;
 16981  13C0  085A               	movf	matrix_Main@data,w
 16982  13C1  0086               	movwf	6
 16983  13C2  085B               	movf	matrix_Main@data+1,w
 16984  13C3  0087               	movwf	7
 16985  13C4  3149               	addfsr 1,9
 16986  13C5  3000               	movlw	0
 16987  13C6  3FC0               	movwi [0]fsr1
 16988  13C7  3FC1               	movwi [1]fsr1
 16989                           
 16990                           ;matrix_task.c: 265: data->holdCountB = 0;
 16991  13C8  085A               	movf	matrix_Main@data,w
 16992  13C9  0086               	movwf	6
 16993  13CA  085B               	movf	matrix_Main@data+1,w
 16994  13CB  0087               	movwf	7
 16995  13CC  314B               	addfsr 1,11
 16996  13CD  3000               	movlw	0
 16997  13CE  3FC0               	movwi [0]fsr1
 16998  13CF  3FC1               	movwi [1]fsr1
 16999                           
 17000                           ;matrix_task.c: 266: data->holdCountX = 0;
 17001  13D0  085A               	movf	matrix_Main@data,w
 17002  13D1  0086               	movwf	6
 17003  13D2  085B               	movf	matrix_Main@data+1,w
 17004  13D3  0087               	movwf	7
 17005  13D4  314D               	addfsr 1,13
 17006  13D5  3000               	movlw	0
 17007  13D6  3FC0               	movwi [0]fsr1
 17008  13D7  3FC1               	movwi [1]fsr1
 17009                           
 17010                           ;matrix_task.c: 267: data->holdCountY = 0;
 17011  13D8  085A               	movf	matrix_Main@data,w
 17012  13D9  0086               	movwf	6
 17013  13DA  085B               	movf	matrix_Main@data+1,w
 17014  13DB  0087               	movwf	7
 17015  13DC  314F               	addfsr 1,15
 17016  13DD  3000               	movlw	0
 17017  13DE  3FC0               	movwi [0]fsr1
 17018  13DF  3FC1               	movwi [1]fsr1
 17019                           
 17020                           ;matrix_task.c: 268: data->holdCountXY += 1;
 17021  13E0  085A               	movf	matrix_Main@data,w
 17022  13E1  0086               	movwf	6
 17023  13E2  085B               	movf	matrix_Main@data+1,w
 17024  13E3  0087               	movwf	7
 17025  13E4  3151               	addfsr 1,17
 17026  13E5  3001               	movlw	1
 17027  13E6  0781               	addwf	1,f
 17028  13E7  3141               	addfsr 1,1
 17029  13E8  1803               	skipnc
 17030  13E9  0A81               	incf	1,f
 17031                           
 17032                           ;matrix_task.c: 269: data->holdCountAY = 0;
 17033  13EA  085A               	movf	matrix_Main@data,w
 17034  13EB  0086               	movwf	6
 17035  13EC  085B               	movf	matrix_Main@data+1,w
 17036  13ED  0087               	movwf	7
 17037  13EE  3153               	addfsr 1,19
 17038  13EF  3000               	movlw	0
 17039  13F0  3FC0               	movwi [0]fsr1
 17040  13F1  3FC1               	movwi [1]fsr1
 17041                           
 17042                           ;matrix_task.c: 270: data->holdCountAX = 0;
 17043  13F2  085A               	movf	matrix_Main@data,w
 17044  13F3  0086               	movwf	6
 17045  13F4  085B               	movf	matrix_Main@data+1,w
 17046  13F5  0087               	movwf	7
 17047  13F6  3155               	addfsr 1,21
 17048  13F7  3000               	movlw	0
 17049  13F8  3FC0               	movwi [0]fsr1
 17050  13F9  3FC1               	movwi [1]fsr1
 17051                           
 17052                           ;matrix_task.c: 271: data->holdCountBX = 0;
 17053  13FA  085A               	movf	matrix_Main@data,w
 17054  13FB  0086               	movwf	6
 17055  13FC  085B               	movf	matrix_Main@data+1,w
 17056  13FD  0087               	movwf	7
 17057  13FE  3157               	addfsr 1,23
 17058  13FF  3000               	movlw	0
 17059  1400  3FC0               	movwi [0]fsr1
 17060  1401  3FC1               	movwi [1]fsr1
 17061                           
 17062                           ;matrix_task.c: 272: data->holdCountBY = 0;
 17063  1402  085A               	movf	matrix_Main@data,w
 17064  1403  0086               	movwf	6
 17065  1404  085B               	movf	matrix_Main@data+1,w
 17066  1405  0087               	movwf	7
 17067  1406  3159               	addfsr 1,25
 17068  1407  3000               	movlw	0
 17069  1408  3FC0               	movwi [0]fsr1
 17070  1409  3FC1               	movwi [1]fsr1
 17071                           
 17072                           ;matrix_task.c: 273: data->holdCountBA = 0;
 17073  140A  085A               	movf	matrix_Main@data,w
 17074  140B  0086               	movwf	6
 17075  140C  085B               	movf	matrix_Main@data+1,w
 17076  140D  0087               	movwf	7
 17077  140E  315B               	addfsr 1,27
 17078  140F  3000               	movlw	0
 17079  1410  3FC0               	movwi [0]fsr1
 17080  1411  3FC1               	movwi [1]fsr1
 17081                           
 17082                           ;matrix_task.c: 274: data->noholdCount = 0;
 17083  1412  085A               	movf	matrix_Main@data,w
 17084  1413  0086               	movwf	6
 17085  1414  085B               	movf	matrix_Main@data+1,w
 17086  1415  0087               	movwf	7
 17087  1416  315D               	addfsr 1,29
 17088  1417  3000               	movlw	0
 17089  1418  3FC0               	movwi [0]fsr1
 17090  1419  3FC1               	movwi [1]fsr1
 17091                           
 17092                           ;matrix_task.c: 275: data->displayTickdown = 300;
 17093  141A  085A               	movf	matrix_Main@data,w
 17094  141B  0086               	movwf	6
 17095  141C  085B               	movf	matrix_Main@data+1,w
 17096  141D  0087               	movwf	7
 17097  141E  3147               	addfsr 1,7
 17098  141F  302C               	movlw	44
 17099  1420  3FC0               	movwi [0]fsr1
 17100  1421  3001               	movlw	1
 17101  1422  3FC1               	movwi [1]fsr1
 17102                           
 17103                           ;matrix_task.c: 276: break;
 17104  1423  2FB4               	goto	l10235
 17105  1424                     l10051:	
 17106                           ;matrix_task.c: 277: case 1 | 8:
 17107                           
 17108                           
 17109                           ;matrix_task.c: 279: if (data->holdCountAY == holdvalue){
 17110  1424  085A               	movf	matrix_Main@data,w
 17111  1425  0086               	movwf	6
 17112  1426  085B               	movf	matrix_Main@data+1,w
 17113  1427  0087               	movwf	7
 17114  1428  3153               	addfsr 1,19
 17115  1429  3F40               	moviw [0]fsr1
 17116  142A  00D4               	movwf	??_matrix_Main
 17117  142B  3F41               	moviw [1]fsr1
 17118  142C  00D5               	movwf	??_matrix_Main+1
 17119  142D  0859               	movf	matrix_Main@holdvalue,w
 17120  142E  00D6               	movwf	??_matrix_Main+2
 17121  142F  01D7               	clrf	??_matrix_Main+3
 17122  1430  0855               	movf	??_matrix_Main+1,w
 17123  1431  0657               	xorwf	??_matrix_Main+3,w
 17124  1432  1D03               	skipz
 17125  1433  2C36               	goto	u6385
 17126  1434  0854               	movf	??_matrix_Main,w
 17127  1435  0656               	xorwf	??_matrix_Main+2,w
 17128  1436                     u6385:	
 17129  1436  1D03               	skipz
 17130  1437  2C55               	goto	l10057
 17131                           
 17132                           ;matrix_task.c: 280: matrix_found = matrix_secret_check(data, 1 | 8);
 17133  1438  085B               	movf	matrix_Main@data+1,w
 17134  1439  00F8               	movwf	matrix_secret_check@data+1
 17135  143A  085A               	movf	matrix_Main@data,w
 17136  143B  00F7               	movwf	matrix_secret_check@data
 17137  143C  3009               	movlw	9
 17138  143D  00D4               	movwf	??_matrix_Main
 17139  143E  0854               	movf	??_matrix_Main,w
 17140  143F  00F9               	movwf	matrix_secret_check@buttonPressed
 17141  1440  31A5  258A  3190   	fcall	_matrix_secret_check
 17142  1443  0020               	movlb	0	; select bank0
 17143  1444  00D5               	movwf	??_matrix_Main+1
 17144  1445  0855               	movf	??_matrix_Main+1,w
 17145  1446  0021               	movlb	1	; select bank1
 17146  1447  00C2               	movwf	_matrix_found^(0+128)
 17147                           
 17148                           ;matrix_task.c: 281: data->display_state = MATRIX_AY;
 17149  1448  0020               	movlb	0	; select bank0
 17150  1449  085A               	movf	matrix_Main@data,w
 17151  144A  3E02               	addlw	2
 17152  144B  00D4               	movwf	??_matrix_Main
 17153  144C  3000               	movlw	0
 17154  144D  3D5B               	addwfc	matrix_Main@data+1,w
 17155  144E  00D5               	movwf	??_matrix_Main+1
 17156  144F  0854               	movf	??_matrix_Main,w
 17157  1450  0086               	movwf	6
 17158  1451  0855               	movf	??_matrix_Main+1,w
 17159  1452  0087               	movwf	7
 17160  1453  3005               	movlw	5
 17161  1454  0081               	movwf	1
 17162  1455                     l10057:	
 17163                           
 17164                           ;matrix_task.c: 282: }
 17165                           ;matrix_task.c: 283: data->holdCountA = 0;
 17166  1455  085A               	movf	matrix_Main@data,w
 17167  1456  0086               	movwf	6
 17168  1457  085B               	movf	matrix_Main@data+1,w
 17169  1458  0087               	movwf	7
 17170  1459  3149               	addfsr 1,9
 17171  145A  3000               	movlw	0
 17172  145B  3FC0               	movwi [0]fsr1
 17173  145C  3FC1               	movwi [1]fsr1
 17174                           
 17175                           ;matrix_task.c: 284: data->holdCountB = 0;
 17176  145D  085A               	movf	matrix_Main@data,w
 17177  145E  0086               	movwf	6
 17178  145F  085B               	movf	matrix_Main@data+1,w
 17179  1460  0087               	movwf	7
 17180  1461  314B               	addfsr 1,11
 17181  1462  3000               	movlw	0
 17182  1463  3FC0               	movwi [0]fsr1
 17183  1464  3FC1               	movwi [1]fsr1
 17184                           
 17185                           ;matrix_task.c: 285: data->holdCountX = 0;
 17186  1465  085A               	movf	matrix_Main@data,w
 17187  1466  0086               	movwf	6
 17188  1467  085B               	movf	matrix_Main@data+1,w
 17189  1468  0087               	movwf	7
 17190  1469  314D               	addfsr 1,13
 17191  146A  3000               	movlw	0
 17192  146B  3FC0               	movwi [0]fsr1
 17193  146C  3FC1               	movwi [1]fsr1
 17194                           
 17195                           ;matrix_task.c: 286: data->holdCountY = 0;
 17196  146D  085A               	movf	matrix_Main@data,w
 17197  146E  0086               	movwf	6
 17198  146F  085B               	movf	matrix_Main@data+1,w
 17199  1470  0087               	movwf	7
 17200  1471  314F               	addfsr 1,15
 17201  1472  3000               	movlw	0
 17202  1473  3FC0               	movwi [0]fsr1
 17203  1474  3FC1               	movwi [1]fsr1
 17204                           
 17205                           ;matrix_task.c: 287: data->holdCountXY = 0;
 17206  1475  085A               	movf	matrix_Main@data,w
 17207  1476  0086               	movwf	6
 17208  1477  085B               	movf	matrix_Main@data+1,w
 17209  1478  0087               	movwf	7
 17210  1479  3151               	addfsr 1,17
 17211  147A  3000               	movlw	0
 17212  147B  3FC0               	movwi [0]fsr1
 17213  147C  3FC1               	movwi [1]fsr1
 17214                           
 17215                           ;matrix_task.c: 288: data->holdCountAY += 1;
 17216  147D  085A               	movf	matrix_Main@data,w
 17217  147E  0086               	movwf	6
 17218  147F  085B               	movf	matrix_Main@data+1,w
 17219  1480  0087               	movwf	7
 17220  1481  3153               	addfsr 1,19
 17221  1482  3001               	movlw	1
 17222  1483  0781               	addwf	1,f
 17223  1484  3141               	addfsr 1,1
 17224  1485  1803               	skipnc
 17225  1486  0A81               	incf	1,f
 17226                           
 17227                           ;matrix_task.c: 289: data->holdCountAX = 0;
 17228  1487  085A               	movf	matrix_Main@data,w
 17229  1488  0086               	movwf	6
 17230  1489  085B               	movf	matrix_Main@data+1,w
 17231  148A  0087               	movwf	7
 17232  148B  3155               	addfsr 1,21
 17233  148C  3000               	movlw	0
 17234  148D  3FC0               	movwi [0]fsr1
 17235  148E  3FC1               	movwi [1]fsr1
 17236                           
 17237                           ;matrix_task.c: 290: data->holdCountBX = 0;
 17238  148F  085A               	movf	matrix_Main@data,w
 17239  1490  0086               	movwf	6
 17240  1491  085B               	movf	matrix_Main@data+1,w
 17241  1492  0087               	movwf	7
 17242  1493  3157               	addfsr 1,23
 17243  1494  3000               	movlw	0
 17244  1495  3FC0               	movwi [0]fsr1
 17245  1496  3FC1               	movwi [1]fsr1
 17246                           
 17247                           ;matrix_task.c: 291: data->holdCountBY = 0;
 17248  1497  085A               	movf	matrix_Main@data,w
 17249  1498  0086               	movwf	6
 17250  1499  085B               	movf	matrix_Main@data+1,w
 17251  149A  0087               	movwf	7
 17252  149B  3159               	addfsr 1,25
 17253  149C  3000               	movlw	0
 17254  149D  3FC0               	movwi [0]fsr1
 17255  149E  3FC1               	movwi [1]fsr1
 17256                           
 17257                           ;matrix_task.c: 292: data->holdCountBA = 0;
 17258  149F  085A               	movf	matrix_Main@data,w
 17259  14A0  0086               	movwf	6
 17260  14A1  085B               	movf	matrix_Main@data+1,w
 17261  14A2  0087               	movwf	7
 17262  14A3  315B               	addfsr 1,27
 17263  14A4  3000               	movlw	0
 17264  14A5  3FC0               	movwi [0]fsr1
 17265  14A6  3FC1               	movwi [1]fsr1
 17266                           
 17267                           ;matrix_task.c: 293: data->noholdCount = 0;
 17268  14A7  085A               	movf	matrix_Main@data,w
 17269  14A8  0086               	movwf	6
 17270  14A9  085B               	movf	matrix_Main@data+1,w
 17271  14AA  0087               	movwf	7
 17272  14AB  315D               	addfsr 1,29
 17273  14AC  3000               	movlw	0
 17274  14AD  3FC0               	movwi [0]fsr1
 17275  14AE  3FC1               	movwi [1]fsr1
 17276                           
 17277                           ;matrix_task.c: 294: data->displayTickdown = 300;
 17278  14AF  085A               	movf	matrix_Main@data,w
 17279  14B0  0086               	movwf	6
 17280  14B1  085B               	movf	matrix_Main@data+1,w
 17281  14B2  0087               	movwf	7
 17282  14B3  3147               	addfsr 1,7
 17283  14B4  302C               	movlw	44
 17284  14B5  3FC0               	movwi [0]fsr1
 17285  14B6  3001               	movlw	1
 17286  14B7  3FC1               	movwi [1]fsr1
 17287                           
 17288                           ;matrix_task.c: 295: break;
 17289  14B8  2FB4               	goto	l10235
 17290  14B9                     l10081:	
 17291                           ;matrix_task.c: 296: case 1 | 4:
 17292                           
 17293                           
 17294                           ;matrix_task.c: 298: if (data->holdCountAX == holdvalue){
 17295  14B9  085A               	movf	matrix_Main@data,w
 17296  14BA  0086               	movwf	6
 17297  14BB  085B               	movf	matrix_Main@data+1,w
 17298  14BC  0087               	movwf	7
 17299  14BD  3155               	addfsr 1,21
 17300  14BE  3F40               	moviw [0]fsr1
 17301  14BF  00D4               	movwf	??_matrix_Main
 17302  14C0  3F41               	moviw [1]fsr1
 17303  14C1  00D5               	movwf	??_matrix_Main+1
 17304  14C2  0859               	movf	matrix_Main@holdvalue,w
 17305  14C3  00D6               	movwf	??_matrix_Main+2
 17306  14C4  01D7               	clrf	??_matrix_Main+3
 17307  14C5  0855               	movf	??_matrix_Main+1,w
 17308  14C6  0657               	xorwf	??_matrix_Main+3,w
 17309  14C7  1D03               	skipz
 17310  14C8  2CCB               	goto	u6395
 17311  14C9  0854               	movf	??_matrix_Main,w
 17312  14CA  0656               	xorwf	??_matrix_Main+2,w
 17313  14CB                     u6395:	
 17314  14CB  1D03               	skipz
 17315  14CC  2CEA               	goto	l10087
 17316                           
 17317                           ;matrix_task.c: 299: matrix_found = matrix_secret_check(data, 1 | 4);
 17318  14CD  085B               	movf	matrix_Main@data+1,w
 17319  14CE  00F8               	movwf	matrix_secret_check@data+1
 17320  14CF  085A               	movf	matrix_Main@data,w
 17321  14D0  00F7               	movwf	matrix_secret_check@data
 17322  14D1  3005               	movlw	5
 17323  14D2  00D4               	movwf	??_matrix_Main
 17324  14D3  0854               	movf	??_matrix_Main,w
 17325  14D4  00F9               	movwf	matrix_secret_check@buttonPressed
 17326  14D5  31A5  258A  3190   	fcall	_matrix_secret_check
 17327  14D8  0020               	movlb	0	; select bank0
 17328  14D9  00D5               	movwf	??_matrix_Main+1
 17329  14DA  0855               	movf	??_matrix_Main+1,w
 17330  14DB  0021               	movlb	1	; select bank1
 17331  14DC  00C2               	movwf	_matrix_found^(0+128)
 17332                           
 17333                           ;matrix_task.c: 300: data->display_state = MATRIX_AX;
 17334  14DD  0020               	movlb	0	; select bank0
 17335  14DE  085A               	movf	matrix_Main@data,w
 17336  14DF  3E02               	addlw	2
 17337  14E0  00D4               	movwf	??_matrix_Main
 17338  14E1  3000               	movlw	0
 17339  14E2  3D5B               	addwfc	matrix_Main@data+1,w
 17340  14E3  00D5               	movwf	??_matrix_Main+1
 17341  14E4  0854               	movf	??_matrix_Main,w
 17342  14E5  0086               	movwf	6
 17343  14E6  0855               	movf	??_matrix_Main+1,w
 17344  14E7  0087               	movwf	7
 17345  14E8  3004               	movlw	4
 17346  14E9  0081               	movwf	1
 17347  14EA                     l10087:	
 17348                           
 17349                           ;matrix_task.c: 301: }
 17350                           ;matrix_task.c: 302: data->holdCountA = 0;
 17351  14EA  085A               	movf	matrix_Main@data,w
 17352  14EB  0086               	movwf	6
 17353  14EC  085B               	movf	matrix_Main@data+1,w
 17354  14ED  0087               	movwf	7
 17355  14EE  3149               	addfsr 1,9
 17356  14EF  3000               	movlw	0
 17357  14F0  3FC0               	movwi [0]fsr1
 17358  14F1  3FC1               	movwi [1]fsr1
 17359                           
 17360                           ;matrix_task.c: 303: data->holdCountB = 0;
 17361  14F2  085A               	movf	matrix_Main@data,w
 17362  14F3  0086               	movwf	6
 17363  14F4  085B               	movf	matrix_Main@data+1,w
 17364  14F5  0087               	movwf	7
 17365  14F6  314B               	addfsr 1,11
 17366  14F7  3000               	movlw	0
 17367  14F8  3FC0               	movwi [0]fsr1
 17368  14F9  3FC1               	movwi [1]fsr1
 17369                           
 17370                           ;matrix_task.c: 304: data->holdCountX = 0;
 17371  14FA  085A               	movf	matrix_Main@data,w
 17372  14FB  0086               	movwf	6
 17373  14FC  085B               	movf	matrix_Main@data+1,w
 17374  14FD  0087               	movwf	7
 17375  14FE  314D               	addfsr 1,13
 17376  14FF  3000               	movlw	0
 17377  1500  3FC0               	movwi [0]fsr1
 17378  1501  3FC1               	movwi [1]fsr1
 17379                           
 17380                           ;matrix_task.c: 305: data->holdCountY = 0;
 17381  1502  085A               	movf	matrix_Main@data,w
 17382  1503  0086               	movwf	6
 17383  1504  085B               	movf	matrix_Main@data+1,w
 17384  1505  0087               	movwf	7
 17385  1506  314F               	addfsr 1,15
 17386  1507  3000               	movlw	0
 17387  1508  3FC0               	movwi [0]fsr1
 17388  1509  3FC1               	movwi [1]fsr1
 17389                           
 17390                           ;matrix_task.c: 306: data->holdCountXY = 0;
 17391  150A  085A               	movf	matrix_Main@data,w
 17392  150B  0086               	movwf	6
 17393  150C  085B               	movf	matrix_Main@data+1,w
 17394  150D  0087               	movwf	7
 17395  150E  3151               	addfsr 1,17
 17396  150F  3000               	movlw	0
 17397  1510  3FC0               	movwi [0]fsr1
 17398  1511  3FC1               	movwi [1]fsr1
 17399                           
 17400                           ;matrix_task.c: 307: data->holdCountAY = 0;
 17401  1512  085A               	movf	matrix_Main@data,w
 17402  1513  0086               	movwf	6
 17403  1514  085B               	movf	matrix_Main@data+1,w
 17404  1515  0087               	movwf	7
 17405  1516  3153               	addfsr 1,19
 17406  1517  3000               	movlw	0
 17407  1518  3FC0               	movwi [0]fsr1
 17408  1519  3FC1               	movwi [1]fsr1
 17409                           
 17410                           ;matrix_task.c: 308: data->holdCountAX += 1;
 17411  151A  085A               	movf	matrix_Main@data,w
 17412  151B  0086               	movwf	6
 17413  151C  085B               	movf	matrix_Main@data+1,w
 17414  151D  0087               	movwf	7
 17415  151E  3155               	addfsr 1,21
 17416  151F  3001               	movlw	1
 17417  1520  0781               	addwf	1,f
 17418  1521  3141               	addfsr 1,1
 17419  1522  1803               	skipnc
 17420  1523  0A81               	incf	1,f
 17421                           
 17422                           ;matrix_task.c: 309: data->holdCountBX = 0;
 17423  1524  085A               	movf	matrix_Main@data,w
 17424  1525  0086               	movwf	6
 17425  1526  085B               	movf	matrix_Main@data+1,w
 17426  1527  0087               	movwf	7
 17427  1528  3157               	addfsr 1,23
 17428  1529  3000               	movlw	0
 17429  152A  3FC0               	movwi [0]fsr1
 17430  152B  3FC1               	movwi [1]fsr1
 17431                           
 17432                           ;matrix_task.c: 310: data->holdCountBY = 0;
 17433  152C  085A               	movf	matrix_Main@data,w
 17434  152D  0086               	movwf	6
 17435  152E  085B               	movf	matrix_Main@data+1,w
 17436  152F  0087               	movwf	7
 17437  1530  3159               	addfsr 1,25
 17438  1531  3000               	movlw	0
 17439  1532  3FC0               	movwi [0]fsr1
 17440  1533  3FC1               	movwi [1]fsr1
 17441                           
 17442                           ;matrix_task.c: 311: data->holdCountBA = 0;
 17443  1534  085A               	movf	matrix_Main@data,w
 17444  1535  0086               	movwf	6
 17445  1536  085B               	movf	matrix_Main@data+1,w
 17446  1537  0087               	movwf	7
 17447  1538  315B               	addfsr 1,27
 17448  1539  3000               	movlw	0
 17449  153A  3FC0               	movwi [0]fsr1
 17450  153B  3FC1               	movwi [1]fsr1
 17451                           
 17452                           ;matrix_task.c: 312: data->noholdCount = 0;
 17453  153C  085A               	movf	matrix_Main@data,w
 17454  153D  0086               	movwf	6
 17455  153E  085B               	movf	matrix_Main@data+1,w
 17456  153F  0087               	movwf	7
 17457  1540  315D               	addfsr 1,29
 17458  1541  3000               	movlw	0
 17459  1542  3FC0               	movwi [0]fsr1
 17460  1543  3FC1               	movwi [1]fsr1
 17461                           
 17462                           ;matrix_task.c: 313: data->displayTickdown = 300;
 17463  1544  085A               	movf	matrix_Main@data,w
 17464  1545  0086               	movwf	6
 17465  1546  085B               	movf	matrix_Main@data+1,w
 17466  1547  0087               	movwf	7
 17467  1548  3147               	addfsr 1,7
 17468  1549  302C               	movlw	44
 17469  154A  3FC0               	movwi [0]fsr1
 17470  154B  3001               	movlw	1
 17471  154C  3FC1               	movwi [1]fsr1
 17472                           
 17473                           ;matrix_task.c: 314: break;
 17474  154D  2FB4               	goto	l10235
 17475  154E                     l10111:	
 17476                           ;matrix_task.c: 315: case 2 | 4:
 17477                           
 17478                           
 17479                           ;matrix_task.c: 317: if (data->holdCountBX == holdvalue){
 17480  154E  085A               	movf	matrix_Main@data,w
 17481  154F  0086               	movwf	6
 17482  1550  085B               	movf	matrix_Main@data+1,w
 17483  1551  0087               	movwf	7
 17484  1552  3157               	addfsr 1,23
 17485  1553  3F40               	moviw [0]fsr1
 17486  1554  00D4               	movwf	??_matrix_Main
 17487  1555  3F41               	moviw [1]fsr1
 17488  1556  00D5               	movwf	??_matrix_Main+1
 17489  1557  0859               	movf	matrix_Main@holdvalue,w
 17490  1558  00D6               	movwf	??_matrix_Main+2
 17491  1559  01D7               	clrf	??_matrix_Main+3
 17492  155A  0855               	movf	??_matrix_Main+1,w
 17493  155B  0657               	xorwf	??_matrix_Main+3,w
 17494  155C  1D03               	skipz
 17495  155D  2D60               	goto	u6405
 17496  155E  0854               	movf	??_matrix_Main,w
 17497  155F  0656               	xorwf	??_matrix_Main+2,w
 17498  1560                     u6405:	
 17499  1560  1D03               	skipz
 17500  1561  2D7F               	goto	l10117
 17501                           
 17502                           ;matrix_task.c: 318: matrix_found = matrix_secret_check(data, 2 | 4);
 17503  1562  085B               	movf	matrix_Main@data+1,w
 17504  1563  00F8               	movwf	matrix_secret_check@data+1
 17505  1564  085A               	movf	matrix_Main@data,w
 17506  1565  00F7               	movwf	matrix_secret_check@data
 17507  1566  3006               	movlw	6
 17508  1567  00D4               	movwf	??_matrix_Main
 17509  1568  0854               	movf	??_matrix_Main,w
 17510  1569  00F9               	movwf	matrix_secret_check@buttonPressed
 17511  156A  31A5  258A  3190   	fcall	_matrix_secret_check
 17512  156D  0020               	movlb	0	; select bank0
 17513  156E  00D5               	movwf	??_matrix_Main+1
 17514  156F  0855               	movf	??_matrix_Main+1,w
 17515  1570  0021               	movlb	1	; select bank1
 17516  1571  00C2               	movwf	_matrix_found^(0+128)
 17517                           
 17518                           ;matrix_task.c: 319: data->display_state = MATRIX_BX;
 17519  1572  0020               	movlb	0	; select bank0
 17520  1573  085A               	movf	matrix_Main@data,w
 17521  1574  3E02               	addlw	2
 17522  1575  00D4               	movwf	??_matrix_Main
 17523  1576  3000               	movlw	0
 17524  1577  3D5B               	addwfc	matrix_Main@data+1,w
 17525  1578  00D5               	movwf	??_matrix_Main+1
 17526  1579  0854               	movf	??_matrix_Main,w
 17527  157A  0086               	movwf	6
 17528  157B  0855               	movf	??_matrix_Main+1,w
 17529  157C  0087               	movwf	7
 17530  157D  3007               	movlw	7
 17531  157E  0081               	movwf	1
 17532  157F                     l10117:	
 17533                           
 17534                           ;matrix_task.c: 320: }
 17535                           ;matrix_task.c: 321: data->holdCountA = 0;
 17536  157F  085A               	movf	matrix_Main@data,w
 17537  1580  0086               	movwf	6
 17538  1581  085B               	movf	matrix_Main@data+1,w
 17539  1582  0087               	movwf	7
 17540  1583  3149               	addfsr 1,9
 17541  1584  3000               	movlw	0
 17542  1585  3FC0               	movwi [0]fsr1
 17543  1586  3FC1               	movwi [1]fsr1
 17544                           
 17545                           ;matrix_task.c: 322: data->holdCountB = 0;
 17546  1587  085A               	movf	matrix_Main@data,w
 17547  1588  0086               	movwf	6
 17548  1589  085B               	movf	matrix_Main@data+1,w
 17549  158A  0087               	movwf	7
 17550  158B  314B               	addfsr 1,11
 17551  158C  3000               	movlw	0
 17552  158D  3FC0               	movwi [0]fsr1
 17553  158E  3FC1               	movwi [1]fsr1
 17554                           
 17555                           ;matrix_task.c: 323: data->holdCountX = 0;
 17556  158F  085A               	movf	matrix_Main@data,w
 17557  1590  0086               	movwf	6
 17558  1591  085B               	movf	matrix_Main@data+1,w
 17559  1592  0087               	movwf	7
 17560  1593  314D               	addfsr 1,13
 17561  1594  3000               	movlw	0
 17562  1595  3FC0               	movwi [0]fsr1
 17563  1596  3FC1               	movwi [1]fsr1
 17564                           
 17565                           ;matrix_task.c: 324: data->holdCountY = 0;
 17566  1597  085A               	movf	matrix_Main@data,w
 17567  1598  0086               	movwf	6
 17568  1599  085B               	movf	matrix_Main@data+1,w
 17569  159A  0087               	movwf	7
 17570  159B  314F               	addfsr 1,15
 17571  159C  3000               	movlw	0
 17572  159D  3FC0               	movwi [0]fsr1
 17573  159E  3FC1               	movwi [1]fsr1
 17574                           
 17575                           ;matrix_task.c: 325: data->holdCountXY = 0;
 17576  159F  085A               	movf	matrix_Main@data,w
 17577  15A0  0086               	movwf	6
 17578  15A1  085B               	movf	matrix_Main@data+1,w
 17579  15A2  0087               	movwf	7
 17580  15A3  3151               	addfsr 1,17
 17581  15A4  3000               	movlw	0
 17582  15A5  3FC0               	movwi [0]fsr1
 17583  15A6  3FC1               	movwi [1]fsr1
 17584                           
 17585                           ;matrix_task.c: 326: data->holdCountAY = 0;
 17586  15A7  085A               	movf	matrix_Main@data,w
 17587  15A8  0086               	movwf	6
 17588  15A9  085B               	movf	matrix_Main@data+1,w
 17589  15AA  0087               	movwf	7
 17590  15AB  3153               	addfsr 1,19
 17591  15AC  3000               	movlw	0
 17592  15AD  3FC0               	movwi [0]fsr1
 17593  15AE  3FC1               	movwi [1]fsr1
 17594                           
 17595                           ;matrix_task.c: 327: data->holdCountAX = 0;
 17596  15AF  085A               	movf	matrix_Main@data,w
 17597  15B0  0086               	movwf	6
 17598  15B1  085B               	movf	matrix_Main@data+1,w
 17599  15B2  0087               	movwf	7
 17600  15B3  3155               	addfsr 1,21
 17601  15B4  3000               	movlw	0
 17602  15B5  3FC0               	movwi [0]fsr1
 17603  15B6  3FC1               	movwi [1]fsr1
 17604                           
 17605                           ;matrix_task.c: 328: data->holdCountBX += 1;
 17606  15B7  085A               	movf	matrix_Main@data,w
 17607  15B8  0086               	movwf	6
 17608  15B9  085B               	movf	matrix_Main@data+1,w
 17609  15BA  0087               	movwf	7
 17610  15BB  3157               	addfsr 1,23
 17611  15BC  3001               	movlw	1
 17612  15BD  0781               	addwf	1,f
 17613  15BE  3141               	addfsr 1,1
 17614  15BF  1803               	skipnc
 17615  15C0  0A81               	incf	1,f
 17616                           
 17617                           ;matrix_task.c: 329: data->holdCountBY = 0;
 17618  15C1  085A               	movf	matrix_Main@data,w
 17619  15C2  0086               	movwf	6
 17620  15C3  085B               	movf	matrix_Main@data+1,w
 17621  15C4  0087               	movwf	7
 17622  15C5  3159               	addfsr 1,25
 17623  15C6  3000               	movlw	0
 17624  15C7  3FC0               	movwi [0]fsr1
 17625  15C8  3FC1               	movwi [1]fsr1
 17626                           
 17627                           ;matrix_task.c: 330: data->holdCountBA = 0;
 17628  15C9  085A               	movf	matrix_Main@data,w
 17629  15CA  0086               	movwf	6
 17630  15CB  085B               	movf	matrix_Main@data+1,w
 17631  15CC  0087               	movwf	7
 17632  15CD  315B               	addfsr 1,27
 17633  15CE  3000               	movlw	0
 17634  15CF  3FC0               	movwi [0]fsr1
 17635  15D0  3FC1               	movwi [1]fsr1
 17636                           
 17637                           ;matrix_task.c: 331: data->noholdCount = 0;
 17638  15D1  085A               	movf	matrix_Main@data,w
 17639  15D2  0086               	movwf	6
 17640  15D3  085B               	movf	matrix_Main@data+1,w
 17641  15D4  0087               	movwf	7
 17642  15D5  315D               	addfsr 1,29
 17643  15D6  3000               	movlw	0
 17644  15D7  3FC0               	movwi [0]fsr1
 17645  15D8  3FC1               	movwi [1]fsr1
 17646                           
 17647                           ;matrix_task.c: 332: data->displayTickdown = 300;
 17648  15D9  085A               	movf	matrix_Main@data,w
 17649  15DA  0086               	movwf	6
 17650  15DB  085B               	movf	matrix_Main@data+1,w
 17651  15DC  0087               	movwf	7
 17652  15DD  3147               	addfsr 1,7
 17653  15DE  302C               	movlw	44
 17654  15DF  3FC0               	movwi [0]fsr1
 17655  15E0  3001               	movlw	1
 17656  15E1  3FC1               	movwi [1]fsr1
 17657                           
 17658                           ;matrix_task.c: 333: break;
 17659  15E2  2FB4               	goto	l10235
 17660  15E3                     l10141:	
 17661                           ;matrix_task.c: 334: case 2 | 8:
 17662                           
 17663                           
 17664                           ;matrix_task.c: 336: if (data->holdCountBY == holdvalue){
 17665  15E3  085A               	movf	matrix_Main@data,w
 17666  15E4  0086               	movwf	6
 17667  15E5  085B               	movf	matrix_Main@data+1,w
 17668  15E6  0087               	movwf	7
 17669  15E7  3159               	addfsr 1,25
 17670  15E8  3F40               	moviw [0]fsr1
 17671  15E9  00D4               	movwf	??_matrix_Main
 17672  15EA  3F41               	moviw [1]fsr1
 17673  15EB  00D5               	movwf	??_matrix_Main+1
 17674  15EC  0859               	movf	matrix_Main@holdvalue,w
 17675  15ED  00D6               	movwf	??_matrix_Main+2
 17676  15EE  01D7               	clrf	??_matrix_Main+3
 17677  15EF  0855               	movf	??_matrix_Main+1,w
 17678  15F0  0657               	xorwf	??_matrix_Main+3,w
 17679  15F1  1D03               	skipz
 17680  15F2  2DF5               	goto	u6415
 17681  15F3  0854               	movf	??_matrix_Main,w
 17682  15F4  0656               	xorwf	??_matrix_Main+2,w
 17683  15F5                     u6415:	
 17684  15F5  1D03               	skipz
 17685  15F6  2E14               	goto	l10147
 17686                           
 17687                           ;matrix_task.c: 337: matrix_found = matrix_secret_check(data, 2 | 8);
 17688  15F7  085B               	movf	matrix_Main@data+1,w
 17689  15F8  00F8               	movwf	matrix_secret_check@data+1
 17690  15F9  085A               	movf	matrix_Main@data,w
 17691  15FA  00F7               	movwf	matrix_secret_check@data
 17692  15FB  300A               	movlw	10
 17693  15FC  00D4               	movwf	??_matrix_Main
 17694  15FD  0854               	movf	??_matrix_Main,w
 17695  15FE  00F9               	movwf	matrix_secret_check@buttonPressed
 17696  15FF  31A5  258A  3190   	fcall	_matrix_secret_check
 17697  1602  0020               	movlb	0	; select bank0
 17698  1603  00D5               	movwf	??_matrix_Main+1
 17699  1604  0855               	movf	??_matrix_Main+1,w
 17700  1605  0021               	movlb	1	; select bank1
 17701  1606  00C2               	movwf	_matrix_found^(0+128)
 17702                           
 17703                           ;matrix_task.c: 338: data->display_state = MATRIX_BY;
 17704  1607  0020               	movlb	0	; select bank0
 17705  1608  085A               	movf	matrix_Main@data,w
 17706  1609  3E02               	addlw	2
 17707  160A  00D4               	movwf	??_matrix_Main
 17708  160B  3000               	movlw	0
 17709  160C  3D5B               	addwfc	matrix_Main@data+1,w
 17710  160D  00D5               	movwf	??_matrix_Main+1
 17711  160E  0854               	movf	??_matrix_Main,w
 17712  160F  0086               	movwf	6
 17713  1610  0855               	movf	??_matrix_Main+1,w
 17714  1611  0087               	movwf	7
 17715  1612  3009               	movlw	9
 17716  1613  0081               	movwf	1
 17717  1614                     l10147:	
 17718                           
 17719                           ;matrix_task.c: 339: }
 17720                           ;matrix_task.c: 340: data->holdCountA = 0;
 17721  1614  085A               	movf	matrix_Main@data,w
 17722  1615  0086               	movwf	6
 17723  1616  085B               	movf	matrix_Main@data+1,w
 17724  1617  0087               	movwf	7
 17725  1618  3149               	addfsr 1,9
 17726  1619  3000               	movlw	0
 17727  161A  3FC0               	movwi [0]fsr1
 17728  161B  3FC1               	movwi [1]fsr1
 17729                           
 17730                           ;matrix_task.c: 341: data->holdCountB = 0;
 17731  161C  085A               	movf	matrix_Main@data,w
 17732  161D  0086               	movwf	6
 17733  161E  085B               	movf	matrix_Main@data+1,w
 17734  161F  0087               	movwf	7
 17735  1620  314B               	addfsr 1,11
 17736  1621  3000               	movlw	0
 17737  1622  3FC0               	movwi [0]fsr1
 17738  1623  3FC1               	movwi [1]fsr1
 17739                           
 17740                           ;matrix_task.c: 342: data->holdCountX = 0;
 17741  1624  085A               	movf	matrix_Main@data,w
 17742  1625  0086               	movwf	6
 17743  1626  085B               	movf	matrix_Main@data+1,w
 17744  1627  0087               	movwf	7
 17745  1628  314D               	addfsr 1,13
 17746  1629  3000               	movlw	0
 17747  162A  3FC0               	movwi [0]fsr1
 17748  162B  3FC1               	movwi [1]fsr1
 17749                           
 17750                           ;matrix_task.c: 343: data->holdCountY = 0;
 17751  162C  085A               	movf	matrix_Main@data,w
 17752  162D  0086               	movwf	6
 17753  162E  085B               	movf	matrix_Main@data+1,w
 17754  162F  0087               	movwf	7
 17755  1630  314F               	addfsr 1,15
 17756  1631  3000               	movlw	0
 17757  1632  3FC0               	movwi [0]fsr1
 17758  1633  3FC1               	movwi [1]fsr1
 17759                           
 17760                           ;matrix_task.c: 344: data->holdCountXY = 0;
 17761  1634  085A               	movf	matrix_Main@data,w
 17762  1635  0086               	movwf	6
 17763  1636  085B               	movf	matrix_Main@data+1,w
 17764  1637  0087               	movwf	7
 17765  1638  3151               	addfsr 1,17
 17766  1639  3000               	movlw	0
 17767  163A  3FC0               	movwi [0]fsr1
 17768  163B  3FC1               	movwi [1]fsr1
 17769                           
 17770                           ;matrix_task.c: 345: data->holdCountAY = 0;
 17771  163C  085A               	movf	matrix_Main@data,w
 17772  163D  0086               	movwf	6
 17773  163E  085B               	movf	matrix_Main@data+1,w
 17774  163F  0087               	movwf	7
 17775  1640  3153               	addfsr 1,19
 17776  1641  3000               	movlw	0
 17777  1642  3FC0               	movwi [0]fsr1
 17778  1643  3FC1               	movwi [1]fsr1
 17779                           
 17780                           ;matrix_task.c: 346: data->holdCountAX = 0;
 17781  1644  085A               	movf	matrix_Main@data,w
 17782  1645  0086               	movwf	6
 17783  1646  085B               	movf	matrix_Main@data+1,w
 17784  1647  0087               	movwf	7
 17785  1648  3155               	addfsr 1,21
 17786  1649  3000               	movlw	0
 17787  164A  3FC0               	movwi [0]fsr1
 17788  164B  3FC1               	movwi [1]fsr1
 17789                           
 17790                           ;matrix_task.c: 347: data->holdCountBX = 0;
 17791  164C  085A               	movf	matrix_Main@data,w
 17792  164D  0086               	movwf	6
 17793  164E  085B               	movf	matrix_Main@data+1,w
 17794  164F  0087               	movwf	7
 17795  1650  3157               	addfsr 1,23
 17796  1651  3000               	movlw	0
 17797  1652  3FC0               	movwi [0]fsr1
 17798  1653  3FC1               	movwi [1]fsr1
 17799                           
 17800                           ;matrix_task.c: 348: data->holdCountBY += 1;
 17801  1654  085A               	movf	matrix_Main@data,w
 17802  1655  0086               	movwf	6
 17803  1656  085B               	movf	matrix_Main@data+1,w
 17804  1657  0087               	movwf	7
 17805  1658  3159               	addfsr 1,25
 17806  1659  3001               	movlw	1
 17807  165A  0781               	addwf	1,f
 17808  165B  3141               	addfsr 1,1
 17809  165C  1803               	skipnc
 17810  165D  0A81               	incf	1,f
 17811                           
 17812                           ;matrix_task.c: 349: data->holdCountBA = 0;
 17813  165E  085A               	movf	matrix_Main@data,w
 17814  165F  0086               	movwf	6
 17815  1660  085B               	movf	matrix_Main@data+1,w
 17816  1661  0087               	movwf	7
 17817  1662  315B               	addfsr 1,27
 17818  1663  3000               	movlw	0
 17819  1664  3FC0               	movwi [0]fsr1
 17820  1665  3FC1               	movwi [1]fsr1
 17821                           
 17822                           ;matrix_task.c: 350: data->noholdCount = 0;
 17823  1666  085A               	movf	matrix_Main@data,w
 17824  1667  0086               	movwf	6
 17825  1668  085B               	movf	matrix_Main@data+1,w
 17826  1669  0087               	movwf	7
 17827  166A  315D               	addfsr 1,29
 17828  166B  3000               	movlw	0
 17829  166C  3FC0               	movwi [0]fsr1
 17830  166D  3FC1               	movwi [1]fsr1
 17831                           
 17832                           ;matrix_task.c: 351: data->displayTickdown = 300;
 17833  166E  085A               	movf	matrix_Main@data,w
 17834  166F  0086               	movwf	6
 17835  1670  085B               	movf	matrix_Main@data+1,w
 17836  1671  0087               	movwf	7
 17837  1672  3147               	addfsr 1,7
 17838  1673  302C               	movlw	44
 17839  1674  3FC0               	movwi [0]fsr1
 17840  1675  3001               	movlw	1
 17841  1676  3FC1               	movwi [1]fsr1
 17842                           
 17843                           ;matrix_task.c: 353: break;
 17844  1677  2FB4               	goto	l10235
 17845  1678                     l10171:	
 17846                           ;matrix_task.c: 354: case 2 | 1:
 17847                           
 17848                           
 17849                           ;matrix_task.c: 356: if (data->holdCountBA == holdvalue){
 17850  1678  085A               	movf	matrix_Main@data,w
 17851  1679  0086               	movwf	6
 17852  167A  085B               	movf	matrix_Main@data+1,w
 17853  167B  0087               	movwf	7
 17854  167C  315B               	addfsr 1,27
 17855  167D  3F40               	moviw [0]fsr1
 17856  167E  00D4               	movwf	??_matrix_Main
 17857  167F  3F41               	moviw [1]fsr1
 17858  1680  00D5               	movwf	??_matrix_Main+1
 17859  1681  0859               	movf	matrix_Main@holdvalue,w
 17860  1682  00D6               	movwf	??_matrix_Main+2
 17861  1683  01D7               	clrf	??_matrix_Main+3
 17862  1684  0855               	movf	??_matrix_Main+1,w
 17863  1685  0657               	xorwf	??_matrix_Main+3,w
 17864  1686  1D03               	skipz
 17865  1687  2E8A               	goto	u6425
 17866  1688  0854               	movf	??_matrix_Main,w
 17867  1689  0656               	xorwf	??_matrix_Main+2,w
 17868  168A                     u6425:	
 17869  168A  1D03               	skipz
 17870  168B  2EA9               	goto	l10177
 17871                           
 17872                           ;matrix_task.c: 357: matrix_found = matrix_secret_check(data, 2 | 1);
 17873  168C  085B               	movf	matrix_Main@data+1,w
 17874  168D  00F8               	movwf	matrix_secret_check@data+1
 17875  168E  085A               	movf	matrix_Main@data,w
 17876  168F  00F7               	movwf	matrix_secret_check@data
 17877  1690  3003               	movlw	3
 17878  1691  00D4               	movwf	??_matrix_Main
 17879  1692  0854               	movf	??_matrix_Main,w
 17880  1693  00F9               	movwf	matrix_secret_check@buttonPressed
 17881  1694  31A5  258A  3190   	fcall	_matrix_secret_check
 17882  1697  0020               	movlb	0	; select bank0
 17883  1698  00D5               	movwf	??_matrix_Main+1
 17884  1699  0855               	movf	??_matrix_Main+1,w
 17885  169A  0021               	movlb	1	; select bank1
 17886  169B  00C2               	movwf	_matrix_found^(0+128)
 17887                           
 17888                           ;matrix_task.c: 358: data->display_state = MATRIX_BA;
 17889  169C  0020               	movlb	0	; select bank0
 17890  169D  085A               	movf	matrix_Main@data,w
 17891  169E  3E02               	addlw	2
 17892  169F  00D4               	movwf	??_matrix_Main
 17893  16A0  3000               	movlw	0
 17894  16A1  3D5B               	addwfc	matrix_Main@data+1,w
 17895  16A2  00D5               	movwf	??_matrix_Main+1
 17896  16A3  0854               	movf	??_matrix_Main,w
 17897  16A4  0086               	movwf	6
 17898  16A5  0855               	movf	??_matrix_Main+1,w
 17899  16A6  0087               	movwf	7
 17900  16A7  3006               	movlw	6
 17901  16A8  0081               	movwf	1
 17902  16A9                     l10177:	
 17903                           
 17904                           ;matrix_task.c: 359: }
 17905                           ;matrix_task.c: 360: data->holdCountA = 0;
 17906  16A9  085A               	movf	matrix_Main@data,w
 17907  16AA  0086               	movwf	6
 17908  16AB  085B               	movf	matrix_Main@data+1,w
 17909  16AC  0087               	movwf	7
 17910  16AD  3149               	addfsr 1,9
 17911  16AE  3000               	movlw	0
 17912  16AF  3FC0               	movwi [0]fsr1
 17913  16B0  3FC1               	movwi [1]fsr1
 17914                           
 17915                           ;matrix_task.c: 361: data->holdCountB = 0;
 17916  16B1  085A               	movf	matrix_Main@data,w
 17917  16B2  0086               	movwf	6
 17918  16B3  085B               	movf	matrix_Main@data+1,w
 17919  16B4  0087               	movwf	7
 17920  16B5  314B               	addfsr 1,11
 17921  16B6  3000               	movlw	0
 17922  16B7  3FC0               	movwi [0]fsr1
 17923  16B8  3FC1               	movwi [1]fsr1
 17924                           
 17925                           ;matrix_task.c: 362: data->holdCountX = 0;
 17926  16B9  085A               	movf	matrix_Main@data,w
 17927  16BA  0086               	movwf	6
 17928  16BB  085B               	movf	matrix_Main@data+1,w
 17929  16BC  0087               	movwf	7
 17930  16BD  314D               	addfsr 1,13
 17931  16BE  3000               	movlw	0
 17932  16BF  3FC0               	movwi [0]fsr1
 17933  16C0  3FC1               	movwi [1]fsr1
 17934                           
 17935                           ;matrix_task.c: 363: data->holdCountY = 0;
 17936  16C1  085A               	movf	matrix_Main@data,w
 17937  16C2  0086               	movwf	6
 17938  16C3  085B               	movf	matrix_Main@data+1,w
 17939  16C4  0087               	movwf	7
 17940  16C5  314F               	addfsr 1,15
 17941  16C6  3000               	movlw	0
 17942  16C7  3FC0               	movwi [0]fsr1
 17943  16C8  3FC1               	movwi [1]fsr1
 17944                           
 17945                           ;matrix_task.c: 364: data->holdCountXY = 0;
 17946  16C9  085A               	movf	matrix_Main@data,w
 17947  16CA  0086               	movwf	6
 17948  16CB  085B               	movf	matrix_Main@data+1,w
 17949  16CC  0087               	movwf	7
 17950  16CD  3151               	addfsr 1,17
 17951  16CE  3000               	movlw	0
 17952  16CF  3FC0               	movwi [0]fsr1
 17953  16D0  3FC1               	movwi [1]fsr1
 17954                           
 17955                           ;matrix_task.c: 365: data->holdCountAY = 0;
 17956  16D1  085A               	movf	matrix_Main@data,w
 17957  16D2  0086               	movwf	6
 17958  16D3  085B               	movf	matrix_Main@data+1,w
 17959  16D4  0087               	movwf	7
 17960  16D5  3153               	addfsr 1,19
 17961  16D6  3000               	movlw	0
 17962  16D7  3FC0               	movwi [0]fsr1
 17963  16D8  3FC1               	movwi [1]fsr1
 17964                           
 17965                           ;matrix_task.c: 366: data->holdCountAX = 0;
 17966  16D9  085A               	movf	matrix_Main@data,w
 17967  16DA  0086               	movwf	6
 17968  16DB  085B               	movf	matrix_Main@data+1,w
 17969  16DC  0087               	movwf	7
 17970  16DD  3155               	addfsr 1,21
 17971  16DE  3000               	movlw	0
 17972  16DF  3FC0               	movwi [0]fsr1
 17973  16E0  3FC1               	movwi [1]fsr1
 17974                           
 17975                           ;matrix_task.c: 367: data->holdCountBX = 0;
 17976  16E1  085A               	movf	matrix_Main@data,w
 17977  16E2  0086               	movwf	6
 17978  16E3  085B               	movf	matrix_Main@data+1,w
 17979  16E4  0087               	movwf	7
 17980  16E5  3157               	addfsr 1,23
 17981  16E6  3000               	movlw	0
 17982  16E7  3FC0               	movwi [0]fsr1
 17983  16E8  3FC1               	movwi [1]fsr1
 17984                           
 17985                           ;matrix_task.c: 368: data->holdCountBY = 0;
 17986  16E9  085A               	movf	matrix_Main@data,w
 17987  16EA  0086               	movwf	6
 17988  16EB  085B               	movf	matrix_Main@data+1,w
 17989  16EC  0087               	movwf	7
 17990  16ED  3159               	addfsr 1,25
 17991  16EE  3000               	movlw	0
 17992  16EF  3FC0               	movwi [0]fsr1
 17993  16F0  3FC1               	movwi [1]fsr1
 17994                           
 17995                           ;matrix_task.c: 369: data->holdCountBA += 1;
 17996  16F1  085A               	movf	matrix_Main@data,w
 17997  16F2  0086               	movwf	6
 17998  16F3  085B               	movf	matrix_Main@data+1,w
 17999  16F4  0087               	movwf	7
 18000  16F5  315B               	addfsr 1,27
 18001  16F6  3001               	movlw	1
 18002  16F7  0781               	addwf	1,f
 18003  16F8  3141               	addfsr 1,1
 18004  16F9  1803               	skipnc
 18005  16FA  0A81               	incf	1,f
 18006                           
 18007                           ;matrix_task.c: 370: data->noholdCount = 0;
 18008  16FB  085A               	movf	matrix_Main@data,w
 18009  16FC  0086               	movwf	6
 18010  16FD  085B               	movf	matrix_Main@data+1,w
 18011  16FE  0087               	movwf	7
 18012  16FF  315D               	addfsr 1,29
 18013  1700  3000               	movlw	0
 18014  1701  3FC0               	movwi [0]fsr1
 18015  1702  3FC1               	movwi [1]fsr1
 18016                           
 18017                           ;matrix_task.c: 371: data->displayTickdown = 300;
 18018  1703  085A               	movf	matrix_Main@data,w
 18019  1704  0086               	movwf	6
 18020  1705  085B               	movf	matrix_Main@data+1,w
 18021  1706  0087               	movwf	7
 18022  1707  3147               	addfsr 1,7
 18023  1708  302C               	movlw	44
 18024  1709  3FC0               	movwi [0]fsr1
 18025  170A  3001               	movlw	1
 18026  170B  3FC1               	movwi [1]fsr1
 18027                           
 18028                           ;matrix_task.c: 372: break;
 18029  170C  2FB4               	goto	l10235
 18030  170D                     l10201:	
 18031                           ;matrix_task.c: 373: default:
 18032                           
 18033                           
 18034                           ;matrix_task.c: 374: data->noholdCount += 1;
 18035  170D  085A               	movf	matrix_Main@data,w
 18036  170E  0086               	movwf	6
 18037  170F  085B               	movf	matrix_Main@data+1,w
 18038  1710  0087               	movwf	7
 18039  1711  315D               	addfsr 1,29
 18040  1712  3001               	movlw	1
 18041  1713  0781               	addwf	1,f
 18042  1714  3141               	addfsr 1,1
 18043  1715  1803               	skipnc
 18044  1716  0A81               	incf	1,f
 18045                           
 18046                           ;matrix_task.c: 375: data->holdCountA = 0;
 18047  1717  085A               	movf	matrix_Main@data,w
 18048  1718  0086               	movwf	6
 18049  1719  085B               	movf	matrix_Main@data+1,w
 18050  171A  0087               	movwf	7
 18051  171B  3149               	addfsr 1,9
 18052  171C  3000               	movlw	0
 18053  171D  3FC0               	movwi [0]fsr1
 18054  171E  3FC1               	movwi [1]fsr1
 18055                           
 18056                           ;matrix_task.c: 376: data->holdCountB = 0;
 18057  171F  085A               	movf	matrix_Main@data,w
 18058  1720  0086               	movwf	6
 18059  1721  085B               	movf	matrix_Main@data+1,w
 18060  1722  0087               	movwf	7
 18061  1723  314B               	addfsr 1,11
 18062  1724  3000               	movlw	0
 18063  1725  3FC0               	movwi [0]fsr1
 18064  1726  3FC1               	movwi [1]fsr1
 18065                           
 18066                           ;matrix_task.c: 377: data->holdCountX = 0;
 18067  1727  085A               	movf	matrix_Main@data,w
 18068  1728  0086               	movwf	6
 18069  1729  085B               	movf	matrix_Main@data+1,w
 18070  172A  0087               	movwf	7
 18071  172B  314D               	addfsr 1,13
 18072  172C  3000               	movlw	0
 18073  172D  3FC0               	movwi [0]fsr1
 18074  172E  3FC1               	movwi [1]fsr1
 18075                           
 18076                           ;matrix_task.c: 378: data->holdCountY = 0;
 18077  172F  085A               	movf	matrix_Main@data,w
 18078  1730  0086               	movwf	6
 18079  1731  085B               	movf	matrix_Main@data+1,w
 18080  1732  0087               	movwf	7
 18081  1733  314F               	addfsr 1,15
 18082  1734  3000               	movlw	0
 18083  1735  3FC0               	movwi [0]fsr1
 18084  1736  3FC1               	movwi [1]fsr1
 18085                           
 18086                           ;matrix_task.c: 379: data->holdCountXY = 0;
 18087  1737  085A               	movf	matrix_Main@data,w
 18088  1738  0086               	movwf	6
 18089  1739  085B               	movf	matrix_Main@data+1,w
 18090  173A  0087               	movwf	7
 18091  173B  3151               	addfsr 1,17
 18092  173C  3000               	movlw	0
 18093  173D  3FC0               	movwi [0]fsr1
 18094  173E  3FC1               	movwi [1]fsr1
 18095                           
 18096                           ;matrix_task.c: 380: data->holdCountAY = 0;
 18097  173F  085A               	movf	matrix_Main@data,w
 18098  1740  0086               	movwf	6
 18099  1741  085B               	movf	matrix_Main@data+1,w
 18100  1742  0087               	movwf	7
 18101  1743  3153               	addfsr 1,19
 18102  1744  3000               	movlw	0
 18103  1745  3FC0               	movwi [0]fsr1
 18104  1746  3FC1               	movwi [1]fsr1
 18105                           
 18106                           ;matrix_task.c: 381: data->holdCountAX = 0;
 18107  1747  085A               	movf	matrix_Main@data,w
 18108  1748  0086               	movwf	6
 18109  1749  085B               	movf	matrix_Main@data+1,w
 18110  174A  0087               	movwf	7
 18111  174B  3155               	addfsr 1,21
 18112  174C  3000               	movlw	0
 18113  174D  3FC0               	movwi [0]fsr1
 18114  174E  3FC1               	movwi [1]fsr1
 18115                           
 18116                           ;matrix_task.c: 382: data->holdCountBX = 0;
 18117  174F  085A               	movf	matrix_Main@data,w
 18118  1750  0086               	movwf	6
 18119  1751  085B               	movf	matrix_Main@data+1,w
 18120  1752  0087               	movwf	7
 18121  1753  3157               	addfsr 1,23
 18122  1754  3000               	movlw	0
 18123  1755  3FC0               	movwi [0]fsr1
 18124  1756  3FC1               	movwi [1]fsr1
 18125                           
 18126                           ;matrix_task.c: 383: data->holdCountBY = 0;
 18127  1757  085A               	movf	matrix_Main@data,w
 18128  1758  0086               	movwf	6
 18129  1759  085B               	movf	matrix_Main@data+1,w
 18130  175A  0087               	movwf	7
 18131  175B  3159               	addfsr 1,25
 18132  175C  3000               	movlw	0
 18133  175D  3FC0               	movwi [0]fsr1
 18134  175E  3FC1               	movwi [1]fsr1
 18135                           
 18136                           ;matrix_task.c: 384: data->holdCountBA = 0;
 18137  175F  085A               	movf	matrix_Main@data,w
 18138  1760  0086               	movwf	6
 18139  1761  085B               	movf	matrix_Main@data+1,w
 18140  1762  0087               	movwf	7
 18141  1763  315B               	addfsr 1,27
 18142  1764  3000               	movlw	0
 18143  1765  3FC0               	movwi [0]fsr1
 18144  1766  3FC1               	movwi [1]fsr1
 18145                           
 18146                           ;matrix_task.c: 385: if (matrix_found){
 18147  1767  0021               	movlb	1	; select bank1
 18148  1768  0842               	movf	_matrix_found^(0+128),w
 18149  1769  1903               	btfsc	3,2
 18150  176A  2F7F               	goto	l10229
 18151                           
 18152                           ;matrix_task.c: 386: data->display_state = MATRIX_DONE;
 18153  176B  0020               	movlb	0	; select bank0
 18154  176C  085A               	movf	matrix_Main@data,w
 18155  176D  3E02               	addlw	2
 18156  176E  00D4               	movwf	??_matrix_Main
 18157  176F  3000               	movlw	0
 18158  1770  3D5B               	addwfc	matrix_Main@data+1,w
 18159  1771  00D5               	movwf	??_matrix_Main+1
 18160  1772  0854               	movf	??_matrix_Main,w
 18161  1773  0086               	movwf	6
 18162  1774  0855               	movf	??_matrix_Main+1,w
 18163  1775  0087               	movwf	7
 18164  1776  300B               	movlw	11
 18165  1777  0081               	movwf	1
 18166                           
 18167                           ;matrix_task.c: 387: data->martix_state = MATRIX_SOLVED;
 18168  1778  085A               	movf	matrix_Main@data,w
 18169  1779  0086               	movwf	6
 18170  177A  085B               	movf	matrix_Main@data+1,w
 18171  177B  0087               	movwf	7
 18172  177C  3141               	addfsr 1,1
 18173  177D  0181               	clrf	1
 18174                           
 18175                           ;matrix_task.c: 388: break;
 18176  177E  2FB4               	goto	l10235
 18177  177F                     l10229:	
 18178                           
 18179                           ;matrix_task.c: 389: }
 18180                           ;matrix_task.c: 390: data->displayTickdown -= 1;
 18181  177F  0020               	movlb	0	; select bank0
 18182  1780  085A               	movf	matrix_Main@data,w
 18183  1781  0086               	movwf	6
 18184  1782  085B               	movf	matrix_Main@data+1,w
 18185  1783  0087               	movwf	7
 18186  1784  3147               	addfsr 1,7
 18187  1785  3001               	movlw	1
 18188  1786  0281               	subwf	1,f
 18189  1787  3141               	addfsr 1,1
 18190  1788  3000               	movlw	0
 18191  1789  3B81               	subwfb	1,f
 18192  178A  317F               	addfsr 1,-1
 18193                           
 18194                           ;matrix_task.c: 391: matrix_display_option(data);
 18195  178B  085B               	movf	matrix_Main@data+1,w
 18196  178C  00CD               	movwf	matrix_display_option@data+1
 18197  178D  085A               	movf	matrix_Main@data,w
 18198  178E  00CC               	movwf	matrix_display_option@data
 18199  178F  31A4  24E7  3190   	fcall	_matrix_display_option
 18200                           
 18201                           ;matrix_task.c: 392: }
 18202  1792  2FB4               	goto	l10235
 18203  1793                     l10233:	
 18204  1793  0020               	movlb	0	; select bank0
 18205  1794  0858               	movf	matrix_Main@buttonPressed,w
 18206                           
 18207                           ; Switch size 1, requested type "space"
 18208                           ; Number of cases is 10, Range of values is 1 to 12
 18209                           ; switch strategies available:
 18210                           ; Name         Instructions Cycles
 18211                           ; simple_byte           31    16 (average)
 18212                           ; direct_byte           33     9 (fixed)
 18213                           ; jumptable            263     9 (fixed)
 18214                           ;	Chosen strategy is simple_byte
 18215  1795  3A01               	xorlw	1	; case 1
 18216  1796  1903               	skipnz
 18217  1797  2941               	goto	l9901
 18218  1798  3A03               	xorlw	3	; case 2
 18219  1799  1903               	skipnz
 18220  179A  29D0               	goto	l9931
 18221  179B  3A01               	xorlw	1	; case 3
 18222  179C  1903               	skipnz
 18223  179D  2E78               	goto	l10171
 18224  179E  3A07               	xorlw	7	; case 4
 18225  179F  1903               	skipnz
 18226  17A0  2A65               	goto	l9961
 18227  17A1  3A01               	xorlw	1	; case 5
 18228  17A2  1903               	skipnz
 18229  17A3  2CB9               	goto	l10081
 18230  17A4  3A03               	xorlw	3	; case 6
 18231  17A5  1903               	skipnz
 18232  17A6  2D4E               	goto	l10111
 18233  17A7  3A0E               	xorlw	14	; case 8
 18234  17A8  1903               	skipnz
 18235  17A9  2AFA               	goto	l9991
 18236  17AA  3A01               	xorlw	1	; case 9
 18237  17AB  1903               	skipnz
 18238  17AC  2C24               	goto	l10051
 18239  17AD  3A03               	xorlw	3	; case 10
 18240  17AE  1903               	skipnz
 18241  17AF  2DE3               	goto	l10141
 18242  17B0  3A06               	xorlw	6	; case 12
 18243  17B1  1903               	skipnz
 18244  17B2  2B8F               	goto	l10021
 18245  17B3  2F0D               	goto	l10201
 18246  17B4                     l10235:	
 18247                           
 18248                           ;matrix_task.c: 393: if (matrix_found){
 18249  17B4  0021               	movlb	1	; select bank1
 18250  17B5  0842               	movf	_matrix_found^(0+128),w
 18251  17B6  1903               	btfsc	3,2
 18252  17B7  2FCB               	goto	l10241
 18253                           
 18254                           ;matrix_task.c: 394: data->display_state = MATRIX_DONE;
 18255  17B8  0020               	movlb	0	; select bank0
 18256  17B9  085A               	movf	matrix_Main@data,w
 18257  17BA  3E02               	addlw	2
 18258  17BB  00D4               	movwf	??_matrix_Main
 18259  17BC  3000               	movlw	0
 18260  17BD  3D5B               	addwfc	matrix_Main@data+1,w
 18261  17BE  00D5               	movwf	??_matrix_Main+1
 18262  17BF  0854               	movf	??_matrix_Main,w
 18263  17C0  0086               	movwf	6
 18264  17C1  0855               	movf	??_matrix_Main+1,w
 18265  17C2  0087               	movwf	7
 18266  17C3  300B               	movlw	11
 18267  17C4  0081               	movwf	1
 18268                           
 18269                           ;matrix_task.c: 395: data->martix_state = MATRIX_SOLVED;
 18270  17C5  085A               	movf	matrix_Main@data,w
 18271  17C6  0086               	movwf	6
 18272  17C7  085B               	movf	matrix_Main@data+1,w
 18273  17C8  0087               	movwf	7
 18274  17C9  3141               	addfsr 1,1
 18275  17CA  0181               	clrf	1
 18276  17CB                     l10241:	
 18277                           
 18278                           ;matrix_task.c: 396: }
 18279                           ;matrix_task.c: 398: if(data->display_state == MATRIX_DONE){
 18280  17CB  0020               	movlb	0	; select bank0
 18281  17CC  085A               	movf	matrix_Main@data,w
 18282  17CD  0086               	movwf	6
 18283  17CE  085B               	movf	matrix_Main@data+1,w
 18284  17CF  0087               	movwf	7
 18285  17D0  3142               	addfsr 1,2
 18286  17D1  300B               	movlw	11
 18287  17D2  0601               	xorwf	1,w
 18288  17D3  1D03               	btfss	3,2
 18289  17D4  0008               	return
 18290                           
 18291                           ;matrix_task.c: 400: if (data->delayTickCount < 1){
 18292  17D5  085A               	movf	matrix_Main@data,w
 18293  17D6  0086               	movwf	6
 18294  17D7  085B               	movf	matrix_Main@data+1,w
 18295  17D8  0087               	movwf	7
 18296  17D9  3143               	addfsr 1,3
 18297  17DA  0016               	moviw fsr1++
 18298  17DB  0401               	iorwf	1,w
 18299  17DC  1D03               	btfss	3,2
 18300  17DD  2FF4               	goto	l10249
 18301                           
 18302                           ;matrix_task.c: 401: led_curtain(data->noholdCount);
 18303  17DE  085A               	movf	matrix_Main@data,w
 18304  17DF  0086               	movwf	6
 18305  17E0  085B               	movf	matrix_Main@data+1,w
 18306  17E1  0087               	movwf	7
 18307  17E2  315D               	addfsr 1,29
 18308  17E3  3F40               	moviw [0]fsr1
 18309  17E4  00B0               	movwf	led_curtain@counter
 18310  17E5  3F41               	moviw [1]fsr1
 18311  17E6  00B1               	movwf	led_curtain@counter+1
 18312  17E7  31A8  20A4         	fcall	_led_curtain
 18313                           
 18314                           ;matrix_task.c: 402: data->delayTickCount = 20;
 18315  17E9  0020               	movlb	0	; select bank0
 18316  17EA  085A               	movf	matrix_Main@data,w
 18317  17EB  0086               	movwf	6
 18318  17EC  085B               	movf	matrix_Main@data+1,w
 18319  17ED  0087               	movwf	7
 18320  17EE  3143               	addfsr 1,3
 18321  17EF  3014               	movlw	20
 18322  17F0  3FC0               	movwi [0]fsr1
 18323  17F1  3000               	movlw	0
 18324  17F2  3FC1               	movwi [1]fsr1
 18325                           
 18326                           ;matrix_task.c: 403: }
 18327  17F3  0008               	return
 18328  17F4                     l10249:	
 18329                           
 18330                           ;matrix_task.c: 404: else {
 18331                           ;matrix_task.c: 405: data->delayTickCount -= 1;
 18332  17F4  085A               	movf	matrix_Main@data,w
 18333  17F5  0086               	movwf	6
 18334  17F6  085B               	movf	matrix_Main@data+1,w
 18335  17F7  0087               	movwf	7
 18336  17F8  3143               	addfsr 1,3
 18337  17F9  3001               	movlw	1
 18338  17FA  0281               	subwf	1,f
 18339  17FB  3141               	addfsr 1,1
 18340  17FC  3000               	movlw	0
 18341  17FD  3B81               	subwfb	1,f
 18342  17FE  317F               	addfsr 1,-1
 18343  17FF  0008               	return
 18344  1800                     __end_of_matrix_Main:	
 18345                           
 18346                           	psect	text15
 18347  1805                     __ptext15:	
 18348 ;; *************** function _secret_Main *****************
 18349 ;; Defined at:
 18350 ;;		line 99 in file "secret_task.c"
 18351 ;; Parameters:    Size  Location     Type
 18352 ;;  taskData        2   50[BANK0 ] PTR void 
 18353 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18354 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18355 ;; Auto vars:     Size  Location     Type
 18356 ;;  data            2   56[BANK0 ] PTR struct t_secret_task
 18357 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18358 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18359 ;;  buttonPresse    1   55[BANK0 ] unsigned char 
 18360 ;;  secret_found    1   54[BANK0 ] unsigned char 
 18361 ;; Return value:  Size  Location     Type
 18362 ;;                  1    wreg      void 
 18363 ;; Registers used:
 18364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18365 ;; Tracked objects:
 18366 ;;		On entry : 0/0
 18367 ;;		On exit  : 0/0
 18368 ;;		Unchanged: 0/0
 18369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18370 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18371 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18372 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18373 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18374 ;;Total ram usage:        8 bytes
 18375 ;; Hardware stack levels used:    1
 18376 ;; Hardware stack levels required when called:    6
 18377 ;; This function calls:
 18378 ;;		_nullifyBadge_buttonsGet
 18379 ;;		_secret_check
 18380 ;;		_secret_clear
 18381 ;; This function is called by:
 18382 ;;		_main
 18383 ;;		_scheduler_TaskRun
 18384 ;; This function uses a non-reentrant model
 18385 ;;
 18386                           
 18387                           
 18388                           ;psect for function _secret_Main
 18389  1805                     _secret_Main:	
 18390                           
 18391                           ;secret_task.c: 100: struct t_secret_taskData *data = (struct t_secret_taskData *) taskD
      +                          ata;
 18392                           
 18393                           ;incstack = 0
 18394                           ; Regs used in _secret_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18395  1805  0020               	movlb	0	; select bank0
 18396  1806  0853               	movf	secret_Main@taskData+1,w
 18397  1807  00D9               	movwf	secret_Main@data+1
 18398  1808  0852               	movf	secret_Main@taskData,w
 18399  1809  00D8               	movwf	secret_Main@data
 18400                           
 18401                           ;secret_task.c: 101: u8 buttonPressed, secret_found = 0;
 18402  180A  01D6               	clrf	secret_Main@secret_found
 18403                           
 18404                           ;secret_task.c: 103: buttonPressed = nullifyBadge_buttonsGet();
 18405  180B  31B6  264B  3198   	fcall	_nullifyBadge_buttonsGet
 18406  180E  0020               	movlb	0	; select bank0
 18407  180F  00D4               	movwf	??_secret_Main
 18408  1810  0854               	movf	??_secret_Main,w
 18409  1811  00D7               	movwf	secret_Main@buttonPressed
 18410                           
 18411                           ;secret_task.c: 104: switch (buttonPressed) {
 18412  1812  29A5               	goto	l9763
 18413  1813                     l9677:	
 18414                           ;secret_task.c: 105: case 0:
 18415                           
 18416                           
 18417                           ;secret_task.c: 107: if (data->delayTickCount == 0){
 18418  1813  0858               	movf	secret_Main@data,w
 18419  1814  0086               	movwf	6
 18420  1815  0859               	movf	secret_Main@data+1,w
 18421  1816  0087               	movwf	7
 18422  1817  3142               	addfsr 1,2
 18423  1818  0016               	moviw fsr1++
 18424  1819  0401               	iorwf	1,w
 18425  181A  1D03               	btfss	3,2
 18426  181B  282D               	goto	l9683
 18427                           
 18428                           ;secret_task.c: 108: data->delayTickCount = 300;
 18429  181C  0858               	movf	secret_Main@data,w
 18430  181D  0086               	movwf	6
 18431  181E  0859               	movf	secret_Main@data+1,w
 18432  181F  0087               	movwf	7
 18433  1820  3142               	addfsr 1,2
 18434  1821  302C               	movlw	44
 18435  1822  3FC0               	movwi [0]fsr1
 18436  1823  3001               	movlw	1
 18437  1824  3FC1               	movwi [1]fsr1
 18438                           
 18439                           ;secret_task.c: 109: secret_check(data, 0);
 18440  1825  0859               	movf	secret_Main@data+1,w
 18441  1826  00F8               	movwf	secret_check@data+1
 18442  1827  0858               	movf	secret_Main@data,w
 18443  1828  00F7               	movwf	secret_check@data
 18444  1829  01F9               	clrf	secret_check@buttonPressed
 18445  182A  31A6  2645  3198   	fcall	_secret_check
 18446  182D                     l9683:	
 18447                           
 18448                           ;secret_task.c: 110: }
 18449                           ;secret_task.c: 111: data->holdCountA = 0;
 18450  182D  0020               	movlb	0	; select bank0
 18451  182E  0858               	movf	secret_Main@data,w
 18452  182F  0086               	movwf	6
 18453  1830  0859               	movf	secret_Main@data+1,w
 18454  1831  0087               	movwf	7
 18455  1832  3144               	addfsr 1,4
 18456  1833  3000               	movlw	0
 18457  1834  3FC0               	movwi [0]fsr1
 18458  1835  3FC1               	movwi [1]fsr1
 18459                           
 18460                           ;secret_task.c: 112: data->holdCountB = 0;
 18461  1836  0858               	movf	secret_Main@data,w
 18462  1837  0086               	movwf	6
 18463  1838  0859               	movf	secret_Main@data+1,w
 18464  1839  0087               	movwf	7
 18465  183A  3146               	addfsr 1,6
 18466  183B  3000               	movlw	0
 18467  183C  3FC0               	movwi [0]fsr1
 18468  183D  3FC1               	movwi [1]fsr1
 18469                           
 18470                           ;secret_task.c: 113: data->holdCountX = 0;
 18471  183E  0858               	movf	secret_Main@data,w
 18472  183F  0086               	movwf	6
 18473  1840  0859               	movf	secret_Main@data+1,w
 18474  1841  0087               	movwf	7
 18475  1842  3148               	addfsr 1,8
 18476  1843  3000               	movlw	0
 18477  1844  3FC0               	movwi [0]fsr1
 18478  1845  3FC1               	movwi [1]fsr1
 18479                           
 18480                           ;secret_task.c: 114: data->holdCountY = 0;
 18481  1846  0858               	movf	secret_Main@data,w
 18482  1847  0086               	movwf	6
 18483  1848  0859               	movf	secret_Main@data+1,w
 18484  1849  0087               	movwf	7
 18485  184A  314A               	addfsr 1,10
 18486  184B  3000               	movlw	0
 18487  184C  3FC0               	movwi [0]fsr1
 18488  184D  3FC1               	movwi [1]fsr1
 18489                           
 18490                           ;secret_task.c: 115: data->noholdCount += 1;
 18491  184E  0858               	movf	secret_Main@data,w
 18492  184F  0086               	movwf	6
 18493  1850  0859               	movf	secret_Main@data+1,w
 18494  1851  0087               	movwf	7
 18495  1852  314C               	addfsr 1,12
 18496  1853  3001               	movlw	1
 18497  1854  0781               	addwf	1,f
 18498  1855  3141               	addfsr 1,1
 18499  1856  1803               	skipnc
 18500  1857  0A81               	incf	1,f
 18501                           
 18502                           ;secret_task.c: 116: data->delayTickCount -= 1;
 18503  1858  0858               	movf	secret_Main@data,w
 18504  1859  0086               	movwf	6
 18505  185A  0859               	movf	secret_Main@data+1,w
 18506  185B  0087               	movwf	7
 18507  185C  3142               	addfsr 1,2
 18508  185D  3001               	movlw	1
 18509  185E  0281               	subwf	1,f
 18510  185F  3141               	addfsr 1,1
 18511  1860  3000               	movlw	0
 18512  1861  3B81               	subwfb	1,f
 18513  1862  317F               	addfsr 1,-1
 18514                           
 18515                           ;secret_task.c: 117: break;
 18516  1863  29B7               	goto	l9765
 18517  1864                     l9695:	
 18518                           ;secret_task.c: 118: case 1:
 18519                           
 18520                           
 18521                           ;secret_task.c: 120: if (data->holdCountA == 0){
 18522  1864  0858               	movf	secret_Main@data,w
 18523  1865  0086               	movwf	6
 18524  1866  0859               	movf	secret_Main@data+1,w
 18525  1867  0087               	movwf	7
 18526  1868  3144               	addfsr 1,4
 18527  1869  0016               	moviw fsr1++
 18528  186A  0401               	iorwf	1,w
 18529  186B  1D03               	btfss	3,2
 18530  186C  287C               	goto	l9699
 18531                           
 18532                           ;secret_task.c: 121: secret_found = secret_check(data, buttonPressed);
 18533  186D  0859               	movf	secret_Main@data+1,w
 18534  186E  00F8               	movwf	secret_check@data+1
 18535  186F  0858               	movf	secret_Main@data,w
 18536  1870  00F7               	movwf	secret_check@data
 18537  1871  0857               	movf	secret_Main@buttonPressed,w
 18538  1872  00D4               	movwf	??_secret_Main
 18539  1873  0854               	movf	??_secret_Main,w
 18540  1874  00F9               	movwf	secret_check@buttonPressed
 18541  1875  31A6  2645  3198   	fcall	_secret_check
 18542  1878  0020               	movlb	0	; select bank0
 18543  1879  00D5               	movwf	??_secret_Main+1
 18544  187A  0855               	movf	??_secret_Main+1,w
 18545  187B  00D6               	movwf	secret_Main@secret_found
 18546  187C                     l9699:	
 18547                           
 18548                           ;secret_task.c: 122: }
 18549                           ;secret_task.c: 123: data->holdCountA += 1;
 18550  187C  0858               	movf	secret_Main@data,w
 18551  187D  0086               	movwf	6
 18552  187E  0859               	movf	secret_Main@data+1,w
 18553  187F  0087               	movwf	7
 18554  1880  3144               	addfsr 1,4
 18555  1881  3001               	movlw	1
 18556  1882  0781               	addwf	1,f
 18557  1883  3141               	addfsr 1,1
 18558  1884  1803               	skipnc
 18559  1885  0A81               	incf	1,f
 18560                           
 18561                           ;secret_task.c: 124: data->holdCountB = 0;
 18562  1886  0858               	movf	secret_Main@data,w
 18563  1887  0086               	movwf	6
 18564  1888  0859               	movf	secret_Main@data+1,w
 18565  1889  0087               	movwf	7
 18566  188A  3146               	addfsr 1,6
 18567  188B  3000               	movlw	0
 18568  188C  3FC0               	movwi [0]fsr1
 18569  188D  3FC1               	movwi [1]fsr1
 18570                           
 18571                           ;secret_task.c: 125: data->holdCountX = 0;
 18572  188E  0858               	movf	secret_Main@data,w
 18573  188F  0086               	movwf	6
 18574  1890  0859               	movf	secret_Main@data+1,w
 18575  1891  0087               	movwf	7
 18576  1892  3148               	addfsr 1,8
 18577  1893  3000               	movlw	0
 18578  1894  3FC0               	movwi [0]fsr1
 18579  1895  3FC1               	movwi [1]fsr1
 18580                           
 18581                           ;secret_task.c: 126: data->holdCountY = 0;
 18582  1896  0858               	movf	secret_Main@data,w
 18583  1897  0086               	movwf	6
 18584  1898  0859               	movf	secret_Main@data+1,w
 18585  1899  0087               	movwf	7
 18586  189A  314A               	addfsr 1,10
 18587  189B  3000               	movlw	0
 18588  189C  3FC0               	movwi [0]fsr1
 18589  189D  3FC1               	movwi [1]fsr1
 18590                           
 18591                           ;secret_task.c: 127: data->noholdCount = 0;
 18592  189E  0858               	movf	secret_Main@data,w
 18593  189F  0086               	movwf	6
 18594  18A0  0859               	movf	secret_Main@data+1,w
 18595  18A1  0087               	movwf	7
 18596  18A2  314C               	addfsr 1,12
 18597  18A3  3000               	movlw	0
 18598  18A4  3FC0               	movwi [0]fsr1
 18599  18A5  3FC1               	movwi [1]fsr1
 18600                           
 18601                           ;secret_task.c: 128: data->delayTickCount = 300;
 18602  18A6  0858               	movf	secret_Main@data,w
 18603  18A7  0086               	movwf	6
 18604  18A8  0859               	movf	secret_Main@data+1,w
 18605  18A9  0087               	movwf	7
 18606  18AA  3142               	addfsr 1,2
 18607  18AB  302C               	movlw	44
 18608  18AC  3FC0               	movwi [0]fsr1
 18609  18AD  3001               	movlw	1
 18610  18AE  3FC1               	movwi [1]fsr1
 18611                           
 18612                           ;secret_task.c: 129: break;
 18613  18AF  29B7               	goto	l9765
 18614  18B0                     l9711:	
 18615                           ;secret_task.c: 130: case 2:
 18616                           
 18617                           
 18618                           ;secret_task.c: 132: if (data->holdCountB == 0){
 18619  18B0  0858               	movf	secret_Main@data,w
 18620  18B1  0086               	movwf	6
 18621  18B2  0859               	movf	secret_Main@data+1,w
 18622  18B3  0087               	movwf	7
 18623  18B4  3146               	addfsr 1,6
 18624  18B5  0016               	moviw fsr1++
 18625  18B6  0401               	iorwf	1,w
 18626  18B7  1D03               	btfss	3,2
 18627  18B8  28C8               	goto	l9715
 18628                           
 18629                           ;secret_task.c: 133: secret_found = secret_check(data, buttonPressed);
 18630  18B9  0859               	movf	secret_Main@data+1,w
 18631  18BA  00F8               	movwf	secret_check@data+1
 18632  18BB  0858               	movf	secret_Main@data,w
 18633  18BC  00F7               	movwf	secret_check@data
 18634  18BD  0857               	movf	secret_Main@buttonPressed,w
 18635  18BE  00D4               	movwf	??_secret_Main
 18636  18BF  0854               	movf	??_secret_Main,w
 18637  18C0  00F9               	movwf	secret_check@buttonPressed
 18638  18C1  31A6  2645  3198   	fcall	_secret_check
 18639  18C4  0020               	movlb	0	; select bank0
 18640  18C5  00D5               	movwf	??_secret_Main+1
 18641  18C6  0855               	movf	??_secret_Main+1,w
 18642  18C7  00D6               	movwf	secret_Main@secret_found
 18643  18C8                     l9715:	
 18644                           
 18645                           ;secret_task.c: 134: }
 18646                           ;secret_task.c: 135: data->holdCountA = 0;
 18647  18C8  0858               	movf	secret_Main@data,w
 18648  18C9  0086               	movwf	6
 18649  18CA  0859               	movf	secret_Main@data+1,w
 18650  18CB  0087               	movwf	7
 18651  18CC  3144               	addfsr 1,4
 18652  18CD  3000               	movlw	0
 18653  18CE  3FC0               	movwi [0]fsr1
 18654  18CF  3FC1               	movwi [1]fsr1
 18655                           
 18656                           ;secret_task.c: 136: data->holdCountB += 1;
 18657  18D0  0858               	movf	secret_Main@data,w
 18658  18D1  0086               	movwf	6
 18659  18D2  0859               	movf	secret_Main@data+1,w
 18660  18D3  0087               	movwf	7
 18661  18D4  3146               	addfsr 1,6
 18662  18D5  3001               	movlw	1
 18663  18D6  0781               	addwf	1,f
 18664  18D7  3141               	addfsr 1,1
 18665  18D8  1803               	skipnc
 18666  18D9  0A81               	incf	1,f
 18667                           
 18668                           ;secret_task.c: 137: data->holdCountX = 0;
 18669  18DA  0858               	movf	secret_Main@data,w
 18670  18DB  0086               	movwf	6
 18671  18DC  0859               	movf	secret_Main@data+1,w
 18672  18DD  0087               	movwf	7
 18673  18DE  3148               	addfsr 1,8
 18674  18DF  3000               	movlw	0
 18675  18E0  3FC0               	movwi [0]fsr1
 18676  18E1  3FC1               	movwi [1]fsr1
 18677                           
 18678                           ;secret_task.c: 138: data->holdCountY = 0;
 18679  18E2  0858               	movf	secret_Main@data,w
 18680  18E3  0086               	movwf	6
 18681  18E4  0859               	movf	secret_Main@data+1,w
 18682  18E5  0087               	movwf	7
 18683  18E6  314A               	addfsr 1,10
 18684  18E7  3000               	movlw	0
 18685  18E8  3FC0               	movwi [0]fsr1
 18686  18E9  3FC1               	movwi [1]fsr1
 18687                           
 18688                           ;secret_task.c: 139: data->noholdCount = 0;
 18689  18EA  0858               	movf	secret_Main@data,w
 18690  18EB  0086               	movwf	6
 18691  18EC  0859               	movf	secret_Main@data+1,w
 18692  18ED  0087               	movwf	7
 18693  18EE  314C               	addfsr 1,12
 18694  18EF  3000               	movlw	0
 18695  18F0  3FC0               	movwi [0]fsr1
 18696  18F1  3FC1               	movwi [1]fsr1
 18697                           
 18698                           ;secret_task.c: 140: data->delayTickCount = 300;
 18699  18F2  0858               	movf	secret_Main@data,w
 18700  18F3  0086               	movwf	6
 18701  18F4  0859               	movf	secret_Main@data+1,w
 18702  18F5  0087               	movwf	7
 18703  18F6  3142               	addfsr 1,2
 18704  18F7  302C               	movlw	44
 18705  18F8  3FC0               	movwi [0]fsr1
 18706  18F9  3001               	movlw	1
 18707  18FA  3FC1               	movwi [1]fsr1
 18708                           
 18709                           ;secret_task.c: 141: break;
 18710  18FB  29B7               	goto	l9765
 18711  18FC                     l9727:	
 18712                           ;secret_task.c: 142: case 4:
 18713                           
 18714                           
 18715                           ;secret_task.c: 144: if (data->holdCountX == 0){
 18716  18FC  0858               	movf	secret_Main@data,w
 18717  18FD  0086               	movwf	6
 18718  18FE  0859               	movf	secret_Main@data+1,w
 18719  18FF  0087               	movwf	7
 18720  1900  3148               	addfsr 1,8
 18721  1901  0016               	moviw fsr1++
 18722  1902  0401               	iorwf	1,w
 18723  1903  1D03               	btfss	3,2
 18724  1904  2914               	goto	l9731
 18725                           
 18726                           ;secret_task.c: 145: secret_found = secret_check(data, buttonPressed);
 18727  1905  0859               	movf	secret_Main@data+1,w
 18728  1906  00F8               	movwf	secret_check@data+1
 18729  1907  0858               	movf	secret_Main@data,w
 18730  1908  00F7               	movwf	secret_check@data
 18731  1909  0857               	movf	secret_Main@buttonPressed,w
 18732  190A  00D4               	movwf	??_secret_Main
 18733  190B  0854               	movf	??_secret_Main,w
 18734  190C  00F9               	movwf	secret_check@buttonPressed
 18735  190D  31A6  2645  3198   	fcall	_secret_check
 18736  1910  0020               	movlb	0	; select bank0
 18737  1911  00D5               	movwf	??_secret_Main+1
 18738  1912  0855               	movf	??_secret_Main+1,w
 18739  1913  00D6               	movwf	secret_Main@secret_found
 18740  1914                     l9731:	
 18741                           
 18742                           ;secret_task.c: 146: }
 18743                           ;secret_task.c: 147: data->holdCountA = 0;
 18744  1914  0858               	movf	secret_Main@data,w
 18745  1915  0086               	movwf	6
 18746  1916  0859               	movf	secret_Main@data+1,w
 18747  1917  0087               	movwf	7
 18748  1918  3144               	addfsr 1,4
 18749  1919  3000               	movlw	0
 18750  191A  3FC0               	movwi [0]fsr1
 18751  191B  3FC1               	movwi [1]fsr1
 18752                           
 18753                           ;secret_task.c: 148: data->holdCountB = 0;
 18754  191C  0858               	movf	secret_Main@data,w
 18755  191D  0086               	movwf	6
 18756  191E  0859               	movf	secret_Main@data+1,w
 18757  191F  0087               	movwf	7
 18758  1920  3146               	addfsr 1,6
 18759  1921  3000               	movlw	0
 18760  1922  3FC0               	movwi [0]fsr1
 18761  1923  3FC1               	movwi [1]fsr1
 18762                           
 18763                           ;secret_task.c: 149: data->holdCountX += 1;
 18764  1924  0858               	movf	secret_Main@data,w
 18765  1925  0086               	movwf	6
 18766  1926  0859               	movf	secret_Main@data+1,w
 18767  1927  0087               	movwf	7
 18768  1928  3148               	addfsr 1,8
 18769  1929  3001               	movlw	1
 18770  192A  0781               	addwf	1,f
 18771  192B  3141               	addfsr 1,1
 18772  192C  1803               	skipnc
 18773  192D  0A81               	incf	1,f
 18774                           
 18775                           ;secret_task.c: 150: data->holdCountY = 0;
 18776  192E  0858               	movf	secret_Main@data,w
 18777  192F  0086               	movwf	6
 18778  1930  0859               	movf	secret_Main@data+1,w
 18779  1931  0087               	movwf	7
 18780  1932  314A               	addfsr 1,10
 18781  1933  3000               	movlw	0
 18782  1934  3FC0               	movwi [0]fsr1
 18783  1935  3FC1               	movwi [1]fsr1
 18784                           
 18785                           ;secret_task.c: 151: data->noholdCount = 0;
 18786  1936  0858               	movf	secret_Main@data,w
 18787  1937  0086               	movwf	6
 18788  1938  0859               	movf	secret_Main@data+1,w
 18789  1939  0087               	movwf	7
 18790  193A  314C               	addfsr 1,12
 18791  193B  3000               	movlw	0
 18792  193C  3FC0               	movwi [0]fsr1
 18793  193D  3FC1               	movwi [1]fsr1
 18794                           
 18795                           ;secret_task.c: 152: data->delayTickCount = 300;
 18796  193E  0858               	movf	secret_Main@data,w
 18797  193F  0086               	movwf	6
 18798  1940  0859               	movf	secret_Main@data+1,w
 18799  1941  0087               	movwf	7
 18800  1942  3142               	addfsr 1,2
 18801  1943  302C               	movlw	44
 18802  1944  3FC0               	movwi [0]fsr1
 18803  1945  3001               	movlw	1
 18804  1946  3FC1               	movwi [1]fsr1
 18805                           
 18806                           ;secret_task.c: 153: break;
 18807  1947  29B7               	goto	l9765
 18808  1948                     l9743:	
 18809                           ;secret_task.c: 154: case 8:
 18810                           
 18811                           
 18812                           ;secret_task.c: 156: if (data->holdCountY == 0){
 18813  1948  0858               	movf	secret_Main@data,w
 18814  1949  0086               	movwf	6
 18815  194A  0859               	movf	secret_Main@data+1,w
 18816  194B  0087               	movwf	7
 18817  194C  314A               	addfsr 1,10
 18818  194D  0016               	moviw fsr1++
 18819  194E  0401               	iorwf	1,w
 18820  194F  1D03               	btfss	3,2
 18821  1950  2960               	goto	l9747
 18822                           
 18823                           ;secret_task.c: 157: secret_found = secret_check(data, buttonPressed);
 18824  1951  0859               	movf	secret_Main@data+1,w
 18825  1952  00F8               	movwf	secret_check@data+1
 18826  1953  0858               	movf	secret_Main@data,w
 18827  1954  00F7               	movwf	secret_check@data
 18828  1955  0857               	movf	secret_Main@buttonPressed,w
 18829  1956  00D4               	movwf	??_secret_Main
 18830  1957  0854               	movf	??_secret_Main,w
 18831  1958  00F9               	movwf	secret_check@buttonPressed
 18832  1959  31A6  2645  3198   	fcall	_secret_check
 18833  195C  0020               	movlb	0	; select bank0
 18834  195D  00D5               	movwf	??_secret_Main+1
 18835  195E  0855               	movf	??_secret_Main+1,w
 18836  195F  00D6               	movwf	secret_Main@secret_found
 18837  1960                     l9747:	
 18838                           
 18839                           ;secret_task.c: 158: }
 18840                           ;secret_task.c: 159: data->holdCountA = 0;
 18841  1960  0858               	movf	secret_Main@data,w
 18842  1961  0086               	movwf	6
 18843  1962  0859               	movf	secret_Main@data+1,w
 18844  1963  0087               	movwf	7
 18845  1964  3144               	addfsr 1,4
 18846  1965  3000               	movlw	0
 18847  1966  3FC0               	movwi [0]fsr1
 18848  1967  3FC1               	movwi [1]fsr1
 18849                           
 18850                           ;secret_task.c: 160: data->holdCountB = 0;
 18851  1968  0858               	movf	secret_Main@data,w
 18852  1969  0086               	movwf	6
 18853  196A  0859               	movf	secret_Main@data+1,w
 18854  196B  0087               	movwf	7
 18855  196C  3146               	addfsr 1,6
 18856  196D  3000               	movlw	0
 18857  196E  3FC0               	movwi [0]fsr1
 18858  196F  3FC1               	movwi [1]fsr1
 18859                           
 18860                           ;secret_task.c: 161: data->holdCountX = 0;
 18861  1970  0858               	movf	secret_Main@data,w
 18862  1971  0086               	movwf	6
 18863  1972  0859               	movf	secret_Main@data+1,w
 18864  1973  0087               	movwf	7
 18865  1974  3148               	addfsr 1,8
 18866  1975  3000               	movlw	0
 18867  1976  3FC0               	movwi [0]fsr1
 18868  1977  3FC1               	movwi [1]fsr1
 18869                           
 18870                           ;secret_task.c: 162: data->holdCountY += 1;
 18871  1978  0858               	movf	secret_Main@data,w
 18872  1979  0086               	movwf	6
 18873  197A  0859               	movf	secret_Main@data+1,w
 18874  197B  0087               	movwf	7
 18875  197C  314A               	addfsr 1,10
 18876  197D  3001               	movlw	1
 18877  197E  0781               	addwf	1,f
 18878  197F  3141               	addfsr 1,1
 18879  1980  1803               	skipnc
 18880  1981  0A81               	incf	1,f
 18881                           
 18882                           ;secret_task.c: 163: data->noholdCount = 0;
 18883  1982  0858               	movf	secret_Main@data,w
 18884  1983  0086               	movwf	6
 18885  1984  0859               	movf	secret_Main@data+1,w
 18886  1985  0087               	movwf	7
 18887  1986  314C               	addfsr 1,12
 18888  1987  3000               	movlw	0
 18889  1988  3FC0               	movwi [0]fsr1
 18890  1989  3FC1               	movwi [1]fsr1
 18891                           
 18892                           ;secret_task.c: 164: data->delayTickCount = 300;
 18893  198A  0858               	movf	secret_Main@data,w
 18894  198B  0086               	movwf	6
 18895  198C  0859               	movf	secret_Main@data+1,w
 18896  198D  0087               	movwf	7
 18897  198E  3142               	addfsr 1,2
 18898  198F  302C               	movlw	44
 18899  1990  3FC0               	movwi [0]fsr1
 18900  1991  3001               	movlw	1
 18901  1992  3FC1               	movwi [1]fsr1
 18902                           
 18903                           ;secret_task.c: 165: break;
 18904  1993  29B7               	goto	l9765
 18905  1994                     l9759:	
 18906                           ;secret_task.c: 166: default:
 18907                           
 18908                           
 18909                           ;secret_task.c: 168: secret_check(data, 0);
 18910  1994  0859               	movf	secret_Main@data+1,w
 18911  1995  00F8               	movwf	secret_check@data+1
 18912  1996  0858               	movf	secret_Main@data,w
 18913  1997  00F7               	movwf	secret_check@data
 18914  1998  01F9               	clrf	secret_check@buttonPressed
 18915  1999  31A6  2645  3198   	fcall	_secret_check
 18916                           
 18917                           ;secret_task.c: 169: secret_clear(data);
 18918  199C  0020               	movlb	0	; select bank0
 18919  199D  0859               	movf	secret_Main@data+1,w
 18920  199E  00F2               	movwf	secret_clear@data+1
 18921  199F  0858               	movf	secret_Main@data,w
 18922  19A0  00F1               	movwf	secret_clear@data
 18923  19A1  31B6  26AE  3198   	fcall	_secret_clear
 18924                           
 18925                           ;secret_task.c: 170: }
 18926  19A4  29B7               	goto	l9765
 18927  19A5                     l9763:	
 18928  19A5  0020               	movlb	0	; select bank0
 18929  19A6  0857               	movf	secret_Main@buttonPressed,w
 18930                           
 18931                           ; Switch size 1, requested type "space"
 18932                           ; Number of cases is 5, Range of values is 0 to 8
 18933                           ; switch strategies available:
 18934                           ; Name         Instructions Cycles
 18935                           ; simple_byte           16     9 (average)
 18936                           ; direct_byte           24     6 (fixed)
 18937                           ; jumptable            260     6 (fixed)
 18938                           ;	Chosen strategy is simple_byte
 18939  19A7  3A00               	xorlw	0	; case 0
 18940  19A8  1903               	skipnz
 18941  19A9  2813               	goto	l9677
 18942  19AA  3A01               	xorlw	1	; case 1
 18943  19AB  1903               	skipnz
 18944  19AC  2864               	goto	l9695
 18945  19AD  3A03               	xorlw	3	; case 2
 18946  19AE  1903               	skipnz
 18947  19AF  28B0               	goto	l9711
 18948  19B0  3A06               	xorlw	6	; case 4
 18949  19B1  1903               	skipnz
 18950  19B2  28FC               	goto	l9727
 18951  19B3  3A0C               	xorlw	12	; case 8
 18952  19B4  1903               	skipnz
 18953  19B5  2948               	goto	l9743
 18954  19B6  2994               	goto	l9759
 18955  19B7                     l9765:	
 18956                           
 18957                           ;secret_task.c: 173: if (secret_found){
 18958  19B7  0020               	movlb	0	; select bank0
 18959  19B8  0856               	movf	secret_Main@secret_found,w
 18960  19B9  1903               	btfsc	3,2
 18961  19BA  0008               	return
 18962                           
 18963                           ;secret_task.c: 174: secret_clear(data);
 18964  19BB  0859               	movf	secret_Main@data+1,w
 18965  19BC  00F2               	movwf	secret_clear@data+1
 18966  19BD  0858               	movf	secret_Main@data,w
 18967  19BE  00F1               	movwf	secret_clear@data
 18968  19BF  31B6  26AE         	fcall	_secret_clear
 18969  19C1  0008               	return
 18970  19C2                     __end_of_secret_Main:	
 18971                           
 18972                           	psect	text16
 18973  1D86                     __ptext16:	
 18974 ;; *************** function _locked_Main *****************
 18975 ;; Defined at:
 18976 ;;		line 153 in file "locked_task.c"
 18977 ;; Parameters:    Size  Location     Type
 18978 ;;  taskData        2   50[BANK0 ] PTR void 
 18979 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18980 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18981 ;; Auto vars:     Size  Location     Type
 18982 ;;  data            2   55[BANK0 ] PTR struct t_locked_task
 18983 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18984 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18985 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 18986 ;; Return value:  Size  Location     Type
 18987 ;;                  1    wreg      void 
 18988 ;; Registers used:
 18989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18990 ;; Tracked objects:
 18991 ;;		On entry : 0/0
 18992 ;;		On exit  : 0/0
 18993 ;;		Unchanged: 0/0
 18994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18995 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18996 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18997 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18998 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18999 ;;Total ram usage:        7 bytes
 19000 ;; Hardware stack levels used:    1
 19001 ;; Hardware stack levels required when called:   11
 19002 ;; This function calls:
 19003 ;;		___lwmod
 19004 ;;		_locked_clear
 19005 ;;		_locked_get_lock_leds
 19006 ;;		_locked_get_unlock_leds
 19007 ;;		_locked_lock_leds
 19008 ;;		_locked_secret_check
 19009 ;;		_locked_unlock_leds
 19010 ;;		_marquee
 19011 ;;		_nullifyBadge_buttonsGet
 19012 ;;		_nullifyBadge_userLedsSet
 19013 ;;		_slot_Setup
 19014 ;; This function is called by:
 19015 ;;		_main
 19016 ;;		_scheduler_TaskRun
 19017 ;; This function uses a non-reentrant model
 19018 ;;
 19019                           
 19020                           
 19021                           ;psect for function _locked_Main
 19022  1D86                     _locked_Main:	
 19023                           
 19024                           ;locked_task.c: 154: struct t_locked_taskData *data = (struct t_locked_taskData *) taskD
      +                          ata;
 19025                           
 19026                           ;incstack = 0
 19027                           ; Regs used in _locked_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19028  1D86  0020               	movlb	0	; select bank0
 19029  1D87  0853               	movf	locked_Main@taskData+1,w
 19030  1D88  00D8               	movwf	locked_Main@data+1
 19031  1D89  0852               	movf	locked_Main@taskData,w
 19032  1D8A  00D7               	movwf	locked_Main@data
 19033                           
 19034                           ;locked_task.c: 155: u8 buttonPressed;
 19035                           ;locked_task.c: 156: pw_found =0;
 19036  1D8B  0021               	movlb	1	; select bank1
 19037  1D8C  01C3               	clrf	_pw_found^(0+128)
 19038                           
 19039                           ;locked_task.c: 157: if ( currentTask != LOCKED_TASK ){
 19040  1D8D  3003               	movlw	3
 19041  1D8E  063A               	xorwf	_currentTask^(0+128),w
 19042  1D8F  043B               	iorwf	(_currentTask+1)^(0+128),w
 19043  1D90  1903               	btfsc	3,2
 19044  1D91  2E9F               	goto	l9605
 19045                           
 19046                           ;locked_task.c: 158: data->holdCountA = 1;
 19047  1D92  0020               	movlb	0	; select bank0
 19048  1D93  0857               	movf	locked_Main@data,w
 19049  1D94  0086               	movwf	6
 19050  1D95  0858               	movf	locked_Main@data+1,w
 19051  1D96  0087               	movwf	7
 19052  1D97  3143               	addfsr 1,3
 19053  1D98  3001               	movlw	1
 19054  1D99  3FC0               	movwi [0]fsr1
 19055  1D9A  3000               	movlw	0
 19056  1D9B  3FC1               	movwi [1]fsr1
 19057                           
 19058                           ;locked_task.c: 159: data->holdCountB = 1;
 19059  1D9C  0857               	movf	locked_Main@data,w
 19060  1D9D  0086               	movwf	6
 19061  1D9E  0858               	movf	locked_Main@data+1,w
 19062  1D9F  0087               	movwf	7
 19063  1DA0  3145               	addfsr 1,5
 19064  1DA1  3001               	movlw	1
 19065  1DA2  3FC0               	movwi [0]fsr1
 19066  1DA3  3000               	movlw	0
 19067  1DA4  3FC1               	movwi [1]fsr1
 19068                           
 19069                           ;locked_task.c: 160: data->holdCountX = 1;
 19070  1DA5  0857               	movf	locked_Main@data,w
 19071  1DA6  0086               	movwf	6
 19072  1DA7  0858               	movf	locked_Main@data+1,w
 19073  1DA8  0087               	movwf	7
 19074  1DA9  3147               	addfsr 1,7
 19075  1DAA  3001               	movlw	1
 19076  1DAB  3FC0               	movwi [0]fsr1
 19077  1DAC  3000               	movlw	0
 19078  1DAD  3FC1               	movwi [1]fsr1
 19079                           
 19080                           ;locked_task.c: 161: data->holdCountY = 1;
 19081  1DAE  0857               	movf	locked_Main@data,w
 19082  1DAF  0086               	movwf	6
 19083  1DB0  0858               	movf	locked_Main@data+1,w
 19084  1DB1  0087               	movwf	7
 19085  1DB2  3149               	addfsr 1,9
 19086  1DB3  3001               	movlw	1
 19087  1DB4  3FC0               	movwi [0]fsr1
 19088  1DB5  3000               	movlw	0
 19089  1DB6  3FC1               	movwi [1]fsr1
 19090                           
 19091                           ;locked_task.c: 162: return;
 19092  1DB7  0008               	return
 19093  1DB8                     l9561:	
 19094                           ;locked_task.c: 169: case LOCKED_UNLOCKING_STATE:
 19095                           
 19096                           ;locked_task.c: 163: }
 19097                           ;locked_task.c: 168: switch (data->state){
 19098                           
 19099                           
 19100                           ;locked_task.c: 170: badge_locked = 0;
 19101  1DB8  0021               	movlb	1	; select bank1
 19102  1DB9  01C4               	clrf	_badge_locked^(0+128)
 19103                           
 19104                           ;locked_task.c: 171: slot_Setup(slot_taskData);
 19105  1DBA  083D               	movf	(_slot_taskData+1)^(0+128),w
 19106  1DBB  0020               	movlb	0	; select bank0
 19107  1DBC  00B0               	movwf	slot_Setup@taskData+1
 19108  1DBD  0021               	movlb	1	; select bank1
 19109  1DBE  083C               	movf	_slot_taskData^(0+128),w
 19110  1DBF  0020               	movlb	0	; select bank0
 19111  1DC0  00AF               	movwf	slot_Setup@taskData
 19112  1DC1  31AC  2447  319D   	fcall	_slot_Setup
 19113                           
 19114                           ;locked_task.c: 172: marquee("UNLOCKING...", data->delayTickCount);
 19115  1DC4  30A5               	movlw	low (STR_42| (0+32768))
 19116  1DC5  0020               	movlb	0	; select bank0
 19117  1DC6  00BA               	movwf	marquee@string
 19118  1DC7  30BA               	movlw	high (STR_42| (0+32768))
 19119  1DC8  00BB               	movwf	marquee@string+1
 19120  1DC9  0857               	movf	locked_Main@data,w
 19121  1DCA  0086               	movwf	6
 19122  1DCB  0858               	movf	locked_Main@data+1,w
 19123  1DCC  0087               	movwf	7
 19124  1DCD  3141               	addfsr 1,1
 19125  1DCE  3F40               	moviw [0]fsr1
 19126  1DCF  00BC               	movwf	marquee@count
 19127  1DD0  3F41               	moviw [1]fsr1
 19128  1DD1  00BD               	movwf	marquee@count+1
 19129  1DD2  31A2  22D2  319D   	fcall	_marquee
 19130                           
 19131                           ;locked_task.c: 174: if (data->delayTickCount % 75 == 0){
 19132  1DD5  304B               	movlw	75
 19133  1DD6  0020               	movlb	0	; select bank0
 19134  1DD7  00AB               	movwf	___lwmod@divisor
 19135  1DD8  3000               	movlw	0
 19136  1DD9  00AC               	movwf	___lwmod@divisor+1
 19137  1DDA  0857               	movf	locked_Main@data,w
 19138  1DDB  0086               	movwf	6
 19139  1DDC  0858               	movf	locked_Main@data+1,w
 19140  1DDD  0087               	movwf	7
 19141  1DDE  3141               	addfsr 1,1
 19142  1DDF  3F40               	moviw [0]fsr1
 19143  1DE0  00AD               	movwf	___lwmod@dividend
 19144  1DE1  3F41               	moviw [1]fsr1
 19145  1DE2  00AE               	movwf	___lwmod@dividend+1
 19146  1DE3  31B5  25EF  319D   	fcall	___lwmod
 19147  1DE6  0020               	movlb	0	; select bank0
 19148  1DE7  082B               	movf	?___lwmod,w
 19149  1DE8  042C               	iorwf	?___lwmod+1,w
 19150  1DE9  1D03               	btfss	3,2
 19151  1DEA  2DF5               	goto	l9571
 19152                           
 19153                           ;locked_task.c: 175: locked_leds = locked_lock_base_leds | locked_get_unlock_leds();
 19154  1DEB  3188  2000  319D   	fcall	_locked_get_unlock_leds
 19155  1DEE  0021               	movlb	1	; select bank1
 19156  1DEF  0852               	movf	_locked_lock_base_leds^(0+128),w
 19157  1DF0  0471               	iorwf	?_locked_get_unlock_leds,w
 19158  1DF1  00A2               	movwf	_locked_leds^(0+128)
 19159  1DF2  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 19160  1DF3  0472               	iorwf	?_locked_get_unlock_leds+1,w
 19161  1DF4  00A3               	movwf	(_locked_leds+1)^(0+128)
 19162  1DF5                     l9571:	
 19163                           
 19164                           ;locked_task.c: 176: }
 19165                           ;locked_task.c: 179: if (data->delayTickCount == 375){
 19166  1DF5  0020               	movlb	0	; select bank0
 19167  1DF6  0857               	movf	locked_Main@data,w
 19168  1DF7  0086               	movwf	6
 19169  1DF8  0858               	movf	locked_Main@data+1,w
 19170  1DF9  0087               	movwf	7
 19171  1DFA  3141               	addfsr 1,1
 19172  1DFB  0016               	moviw fsr1++
 19173  1DFC  3A77               	xorlw	119
 19174  1DFD  00D4               	movwf	??_locked_Main
 19175  1DFE  0016               	moviw fsr1++
 19176  1DFF  3A01               	xorlw	1
 19177  1E00  04D4               	iorwf	??_locked_Main,f
 19178  1E01  1D03               	btfss	3,2
 19179  1E02  2E65               	goto	l9591
 19180                           
 19181                           ;locked_task.c: 180: data->state = LOCKED_UNLOCKED_STATE;
 19182  1E03  0857               	movf	locked_Main@data,w
 19183  1E04  3E0D               	addlw	13
 19184  1E05  00D4               	movwf	??_locked_Main
 19185  1E06  3000               	movlw	0
 19186  1E07  3D58               	addwfc	locked_Main@data+1,w
 19187  1E08  00D5               	movwf	??_locked_Main+1
 19188  1E09  0854               	movf	??_locked_Main,w
 19189  1E0A  0086               	movwf	6
 19190  1E0B  0855               	movf	??_locked_Main+1,w
 19191  1E0C  0087               	movwf	7
 19192  1E0D  3002               	movlw	2
 19193  1E0E  0081               	movwf	1
 19194                           
 19195                           ;locked_task.c: 181: data->delayTickCount = 0;
 19196  1E0F  0857               	movf	locked_Main@data,w
 19197  1E10  0086               	movwf	6
 19198  1E11  0858               	movf	locked_Main@data+1,w
 19199  1E12  0087               	movwf	7
 19200  1E13  3141               	addfsr 1,1
 19201  1E14  3000               	movlw	0
 19202  1E15  3FC0               	movwi [0]fsr1
 19203  1E16  3FC1               	movwi [1]fsr1
 19204  1E17  2EB3               	goto	l9607
 19205  1E18                     l9579:	
 19206                           ;locked_task.c: 187: case LOCKED_LOCKING_STATE:
 19207                           
 19208                           ;locked_task.c: 185: }
 19209                           ;locked_task.c: 186: break;
 19210                           
 19211                           ;locked_task.c: 183: else {
 19212                           ;locked_task.c: 184: data->delayTickCount += 1;
 19213                           
 19214                           ;locked_task.c: 182: }
 19215                           
 19216                           
 19217                           ;locked_task.c: 188: marquee("LOCKING...", data->delayTickCount);
 19218  1E18  30A7               	movlw	low ((STR_42+2)| (0+32768))
 19219  1E19  00BA               	movwf	marquee@string
 19220  1E1A  30BA               	movlw	high ((STR_42+2)| (0+32768))
 19221  1E1B  00BB               	movwf	marquee@string+1
 19222  1E1C  0857               	movf	locked_Main@data,w
 19223  1E1D  0086               	movwf	6
 19224  1E1E  0858               	movf	locked_Main@data+1,w
 19225  1E1F  0087               	movwf	7
 19226  1E20  3141               	addfsr 1,1
 19227  1E21  3F40               	moviw [0]fsr1
 19228  1E22  00BC               	movwf	marquee@count
 19229  1E23  3F41               	moviw [1]fsr1
 19230  1E24  00BD               	movwf	marquee@count+1
 19231  1E25  31A2  22D2  319D   	fcall	_marquee
 19232                           
 19233                           ;locked_task.c: 190: if (data->delayTickCount % 75 == 0){
 19234  1E28  304B               	movlw	75
 19235  1E29  0020               	movlb	0	; select bank0
 19236  1E2A  00AB               	movwf	___lwmod@divisor
 19237  1E2B  3000               	movlw	0
 19238  1E2C  00AC               	movwf	___lwmod@divisor+1
 19239  1E2D  0857               	movf	locked_Main@data,w
 19240  1E2E  0086               	movwf	6
 19241  1E2F  0858               	movf	locked_Main@data+1,w
 19242  1E30  0087               	movwf	7
 19243  1E31  3141               	addfsr 1,1
 19244  1E32  3F40               	moviw [0]fsr1
 19245  1E33  00AD               	movwf	___lwmod@dividend
 19246  1E34  3F41               	moviw [1]fsr1
 19247  1E35  00AE               	movwf	___lwmod@dividend+1
 19248  1E36  31B5  25EF  319D   	fcall	___lwmod
 19249  1E39  0020               	movlb	0	; select bank0
 19250  1E3A  082B               	movf	?___lwmod,w
 19251  1E3B  042C               	iorwf	?___lwmod+1,w
 19252  1E3C  1D03               	btfss	3,2
 19253  1E3D  2E48               	goto	l9585
 19254                           
 19255                           ;locked_task.c: 191: locked_leds = locked_lock_base_leds | locked_get_lock_leds();
 19256  1E3E  31B5  2553  319D   	fcall	_locked_get_lock_leds
 19257  1E41  0021               	movlb	1	; select bank1
 19258  1E42  0852               	movf	_locked_lock_base_leds^(0+128),w
 19259  1E43  0471               	iorwf	?_locked_get_lock_leds,w
 19260  1E44  00A2               	movwf	_locked_leds^(0+128)
 19261  1E45  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 19262  1E46  0472               	iorwf	?_locked_get_lock_leds+1,w
 19263  1E47  00A3               	movwf	(_locked_leds+1)^(0+128)
 19264  1E48                     l9585:	
 19265                           
 19266                           ;locked_task.c: 192: }
 19267                           ;locked_task.c: 195: if (data->delayTickCount == 375){
 19268  1E48  0020               	movlb	0	; select bank0
 19269  1E49  0857               	movf	locked_Main@data,w
 19270  1E4A  0086               	movwf	6
 19271  1E4B  0858               	movf	locked_Main@data+1,w
 19272  1E4C  0087               	movwf	7
 19273  1E4D  3141               	addfsr 1,1
 19274  1E4E  0016               	moviw fsr1++
 19275  1E4F  3A77               	xorlw	119
 19276  1E50  00D4               	movwf	??_locked_Main
 19277  1E51  0016               	moviw fsr1++
 19278  1E52  3A01               	xorlw	1
 19279  1E53  04D4               	iorwf	??_locked_Main,f
 19280  1E54  1D03               	btfss	3,2
 19281  1E55  2E65               	goto	l9591
 19282                           
 19283                           ;locked_task.c: 196: data->state = LOCKED_LOCKED_STATE;
 19284  1E56  0857               	movf	locked_Main@data,w
 19285  1E57  0086               	movwf	6
 19286  1E58  0858               	movf	locked_Main@data+1,w
 19287  1E59  0087               	movwf	7
 19288  1E5A  314D               	addfsr 1,13
 19289  1E5B  0181               	clrf	1
 19290                           
 19291                           ;locked_task.c: 197: data->delayTickCount = 0;
 19292  1E5C  0857               	movf	locked_Main@data,w
 19293  1E5D  0086               	movwf	6
 19294  1E5E  0858               	movf	locked_Main@data+1,w
 19295  1E5F  0087               	movwf	7
 19296  1E60  3141               	addfsr 1,1
 19297  1E61  3000               	movlw	0
 19298  1E62  3FC0               	movwi [0]fsr1
 19299  1E63  3FC1               	movwi [1]fsr1
 19300                           
 19301                           ;locked_task.c: 198: }
 19302  1E64  2EB3               	goto	l9607
 19303  1E65                     l9591:	
 19304                           
 19305                           ;locked_task.c: 199: else {
 19306                           ;locked_task.c: 200: data->delayTickCount += 1;
 19307  1E65  0857               	movf	locked_Main@data,w
 19308  1E66  0086               	movwf	6
 19309  1E67  0858               	movf	locked_Main@data+1,w
 19310  1E68  0087               	movwf	7
 19311  1E69  3141               	addfsr 1,1
 19312  1E6A  3001               	movlw	1
 19313  1E6B  0781               	addwf	1,f
 19314  1E6C  3141               	addfsr 1,1
 19315  1E6D  1803               	skipnc
 19316  1E6E  0A81               	incf	1,f
 19317                           
 19318                           ;locked_task.c: 201: }
 19319                           ;locked_task.c: 202: break;
 19320  1E6F  2EB3               	goto	l9607
 19321  1E70                     l9593:	
 19322                           ;locked_task.c: 203: case LOCKED_UNLOCKED_STATE:
 19323                           
 19324                           
 19325                           ;locked_task.c: 204: badge_locked = 0;
 19326  1E70  0021               	movlb	1	; select bank1
 19327  1E71  01C4               	clrf	_badge_locked^(0+128)
 19328                           
 19329                           ;locked_task.c: 206: marquee("OPEN", data->delayTickCount);
 19330  1E72  30E0               	movlw	low (STR_44| (0+32768))
 19331  1E73  0020               	movlb	0	; select bank0
 19332  1E74  00BA               	movwf	marquee@string
 19333  1E75  30BB               	movlw	high (STR_44| (0+32768))
 19334  1E76  00BB               	movwf	marquee@string+1
 19335  1E77  0857               	movf	locked_Main@data,w
 19336  1E78  0086               	movwf	6
 19337  1E79  0858               	movf	locked_Main@data+1,w
 19338  1E7A  0087               	movwf	7
 19339  1E7B  3141               	addfsr 1,1
 19340  1E7C  3F40               	moviw [0]fsr1
 19341  1E7D  00BC               	movwf	marquee@count
 19342  1E7E  3F41               	moviw [1]fsr1
 19343  1E7F  00BD               	movwf	marquee@count+1
 19344  1E80  31A2  22D2  319D   	fcall	_marquee
 19345                           
 19346                           ;locked_task.c: 207: locked_unlock_leds();
 19347  1E83  31B3  2399  319D   	fcall	_locked_unlock_leds
 19348                           
 19349                           ;locked_task.c: 208: break;
 19350  1E86  2EB3               	goto	l9607
 19351  1E87                     l1282:	
 19352                           ;locked_task.c: 209: case LOCKED_LOCKED_STATE:
 19353                           
 19354                           
 19355                           ;locked_task.c: 210: badge_locked = 1;
 19356  1E87  0021               	movlb	1	; select bank1
 19357  1E88  01C4               	clrf	_badge_locked^(0+128)
 19358  1E89  0AC4               	incf	_badge_locked^(0+128),f
 19359                           
 19360                           ;locked_task.c: 211: marquee("LOCK", data->delayTickCount);
 19361  1E8A  30DB               	movlw	low (STR_45| (0+32768))
 19362  1E8B  0020               	movlb	0	; select bank0
 19363  1E8C  00BA               	movwf	marquee@string
 19364  1E8D  30BB               	movlw	high (STR_45| (0+32768))
 19365  1E8E  00BB               	movwf	marquee@string+1
 19366  1E8F  0857               	movf	locked_Main@data,w
 19367  1E90  0086               	movwf	6
 19368  1E91  0858               	movf	locked_Main@data+1,w
 19369  1E92  0087               	movwf	7
 19370  1E93  3141               	addfsr 1,1
 19371  1E94  3F40               	moviw [0]fsr1
 19372  1E95  00BC               	movwf	marquee@count
 19373  1E96  3F41               	moviw [1]fsr1
 19374  1E97  00BD               	movwf	marquee@count+1
 19375  1E98  31A2  22D2  319D   	fcall	_marquee
 19376                           
 19377                           ;locked_task.c: 213: locked_lock_leds();
 19378  1E9B  31B4  2462  319D   	fcall	_locked_lock_leds
 19379                           
 19380                           ;locked_task.c: 215: }
 19381                           
 19382                           ;locked_task.c: 214: break;
 19383  1E9E  2EB3               	goto	l9607
 19384  1E9F                     l9605:	
 19385  1E9F  0020               	movlb	0	; select bank0
 19386  1EA0  0857               	movf	locked_Main@data,w
 19387  1EA1  0086               	movwf	6
 19388  1EA2  0858               	movf	locked_Main@data+1,w
 19389  1EA3  0087               	movwf	7
 19390  1EA4  314D               	addfsr 1,13
 19391  1EA5  0801               	movf	1,w
 19392                           
 19393                           ; Switch size 1, requested type "space"
 19394                           ; Number of cases is 4, Range of values is 0 to 3
 19395                           ; switch strategies available:
 19396                           ; Name         Instructions Cycles
 19397                           ; simple_byte           13     7 (average)
 19398                           ; direct_byte           14     6 (fixed)
 19399                           ; jumptable            260     6 (fixed)
 19400                           ;	Chosen strategy is simple_byte
 19401  1EA6  3A00               	xorlw	0	; case 0
 19402  1EA7  1903               	skipnz
 19403  1EA8  2E87               	goto	l1282
 19404  1EA9  3A01               	xorlw	1	; case 1
 19405  1EAA  1903               	skipnz
 19406  1EAB  2E18               	goto	l9579
 19407  1EAC  3A03               	xorlw	3	; case 2
 19408  1EAD  1903               	skipnz
 19409  1EAE  2E70               	goto	l9593
 19410  1EAF  3A01               	xorlw	1	; case 3
 19411  1EB0  1903               	skipnz
 19412  1EB1  2DB8               	goto	l9561
 19413  1EB2  2EB3               	goto	l9607
 19414  1EB3                     l9607:	
 19415                           
 19416                           ;locked_task.c: 216: nullifyBadge_userLedsSet(data->badge, locked_leds);
 19417  1EB3  0021               	movlb	1	; select bank1
 19418  1EB4  0823               	movf	(_locked_leds+1)^(0+128),w
 19419  1EB5  0020               	movlb	0	; select bank0
 19420  1EB6  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 19421  1EB7  0021               	movlb	1	; select bank1
 19422  1EB8  0822               	movf	_locked_leds^(0+128),w
 19423  1EB9  0020               	movlb	0	; select bank0
 19424  1EBA  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 19425  1EBB  0857               	movf	locked_Main@data,w
 19426  1EBC  0086               	movwf	6
 19427  1EBD  0858               	movf	locked_Main@data+1,w
 19428  1EBE  0087               	movwf	7
 19429  1EBF  0801               	movf	1,w
 19430  1EC0  31B3  2352  319D   	fcall	_nullifyBadge_userLedsSet
 19431                           
 19432                           ;locked_task.c: 219: buttonPressed = nullifyBadge_buttonsGet();
 19433  1EC3  31B6  264B  319D   	fcall	_nullifyBadge_buttonsGet
 19434  1EC6  0020               	movlb	0	; select bank0
 19435  1EC7  00D4               	movwf	??_locked_Main
 19436  1EC8  0854               	movf	??_locked_Main,w
 19437  1EC9  00D6               	movwf	locked_Main@buttonPressed
 19438                           
 19439                           ;locked_task.c: 220: switch (buttonPressed) {
 19440  1ECA  2FCF               	goto	l9661
 19441  1ECB                     l9611:	
 19442                           ;locked_task.c: 221: case 4:
 19443                           
 19444                           
 19445                           ;locked_task.c: 222: locked_clear(data);
 19446  1ECB  0858               	movf	locked_Main@data+1,w
 19447  1ECC  00BA               	movwf	locked_clear@data+1
 19448  1ECD  0857               	movf	locked_Main@data,w
 19449  1ECE  00B9               	movwf	locked_clear@data
 19450  1ECF  31A9  2126  319D   	fcall	_locked_clear
 19451                           
 19452                           ;locked_task.c: 223: currentTask = MENU_TASK;
 19453  1ED2  0021               	movlb	1	; select bank1
 19454  1ED3  01BA               	clrf	_currentTask^(0+128)
 19455  1ED4  01BB               	clrf	(_currentTask+1)^(0+128)
 19456                           
 19457                           ;locked_task.c: 224: break;
 19458  1ED5  2FDD               	goto	l9663
 19459  1ED6                     l9615:	
 19460                           ;locked_task.c: 225: case 8:
 19461                           
 19462                           
 19463                           ;locked_task.c: 226: if (data->holdCountY == 0){
 19464  1ED6  0020               	movlb	0	; select bank0
 19465  1ED7  0857               	movf	locked_Main@data,w
 19466  1ED8  0086               	movwf	6
 19467  1ED9  0858               	movf	locked_Main@data+1,w
 19468  1EDA  0087               	movwf	7
 19469  1EDB  3149               	addfsr 1,9
 19470  1EDC  0016               	moviw fsr1++
 19471  1EDD  0401               	iorwf	1,w
 19472  1EDE  1D03               	btfss	3,2
 19473  1EDF  2EF0               	goto	l9619
 19474                           
 19475                           ;locked_task.c: 228: pw_found = locked_secret_check(data, 8 );
 19476  1EE0  0858               	movf	locked_Main@data+1,w
 19477  1EE1  00F8               	movwf	locked_secret_check@data+1
 19478  1EE2  0857               	movf	locked_Main@data,w
 19479  1EE3  00F7               	movwf	locked_secret_check@data
 19480  1EE4  3008               	movlw	8
 19481  1EE5  00D4               	movwf	??_locked_Main
 19482  1EE6  0854               	movf	??_locked_Main,w
 19483  1EE7  00F9               	movwf	locked_secret_check@buttonPressed
 19484  1EE8  3190  200F  319D   	fcall	_locked_secret_check
 19485  1EEB  0020               	movlb	0	; select bank0
 19486  1EEC  00D5               	movwf	??_locked_Main+1
 19487  1EED  0855               	movf	??_locked_Main+1,w
 19488  1EEE  0021               	movlb	1	; select bank1
 19489  1EEF  00C3               	movwf	_pw_found^(0+128)
 19490  1EF0                     l9619:	
 19491                           
 19492                           ;locked_task.c: 229: }
 19493                           ;locked_task.c: 230: data->holdCountA = 0;
 19494  1EF0  0020               	movlb	0	; select bank0
 19495  1EF1  0857               	movf	locked_Main@data,w
 19496  1EF2  0086               	movwf	6
 19497  1EF3  0858               	movf	locked_Main@data+1,w
 19498  1EF4  0087               	movwf	7
 19499  1EF5  3143               	addfsr 1,3
 19500  1EF6  3000               	movlw	0
 19501  1EF7  3FC0               	movwi [0]fsr1
 19502  1EF8  3FC1               	movwi [1]fsr1
 19503                           
 19504                           ;locked_task.c: 231: data->holdCountB = 0;
 19505  1EF9  0857               	movf	locked_Main@data,w
 19506  1EFA  0086               	movwf	6
 19507  1EFB  0858               	movf	locked_Main@data+1,w
 19508  1EFC  0087               	movwf	7
 19509  1EFD  3145               	addfsr 1,5
 19510  1EFE  3000               	movlw	0
 19511  1EFF  3FC0               	movwi [0]fsr1
 19512  1F00  3FC1               	movwi [1]fsr1
 19513                           
 19514                           ;locked_task.c: 232: data->holdCountX = 0;
 19515  1F01  0857               	movf	locked_Main@data,w
 19516  1F02  0086               	movwf	6
 19517  1F03  0858               	movf	locked_Main@data+1,w
 19518  1F04  0087               	movwf	7
 19519  1F05  3147               	addfsr 1,7
 19520  1F06  3000               	movlw	0
 19521  1F07  3FC0               	movwi [0]fsr1
 19522  1F08  3FC1               	movwi [1]fsr1
 19523                           
 19524                           ;locked_task.c: 233: data->holdCountY += 1;
 19525  1F09  0857               	movf	locked_Main@data,w
 19526  1F0A  0086               	movwf	6
 19527  1F0B  0858               	movf	locked_Main@data+1,w
 19528  1F0C  0087               	movwf	7
 19529  1F0D  3149               	addfsr 1,9
 19530  1F0E  3001               	movlw	1
 19531  1F0F  0781               	addwf	1,f
 19532  1F10  3141               	addfsr 1,1
 19533  1F11  1803               	skipnc
 19534  1F12  0A81               	incf	1,f
 19535                           
 19536                           ;locked_task.c: 234: data->noholdCount = 0;
 19537  1F13  0857               	movf	locked_Main@data,w
 19538  1F14  0086               	movwf	6
 19539  1F15  0858               	movf	locked_Main@data+1,w
 19540  1F16  0087               	movwf	7
 19541  1F17  314B               	addfsr 1,11
 19542  1F18  3000               	movlw	0
 19543  1F19  3FC0               	movwi [0]fsr1
 19544  1F1A  3FC1               	movwi [1]fsr1
 19545                           
 19546                           ;locked_task.c: 235: break;
 19547  1F1B  2FDD               	goto	l9663
 19548  1F1C                     l9629:	
 19549                           ;locked_task.c: 236: case 2:
 19550                           
 19551                           
 19552                           ;locked_task.c: 237: if (data->holdCountB == 0){
 19553  1F1C  0857               	movf	locked_Main@data,w
 19554  1F1D  0086               	movwf	6
 19555  1F1E  0858               	movf	locked_Main@data+1,w
 19556  1F1F  0087               	movwf	7
 19557  1F20  3145               	addfsr 1,5
 19558  1F21  0016               	moviw fsr1++
 19559  1F22  0401               	iorwf	1,w
 19560  1F23  1D03               	btfss	3,2
 19561  1F24  2F35               	goto	l9633
 19562                           
 19563                           ;locked_task.c: 238: pw_found = locked_secret_check(data, 2 );
 19564  1F25  0858               	movf	locked_Main@data+1,w
 19565  1F26  00F8               	movwf	locked_secret_check@data+1
 19566  1F27  0857               	movf	locked_Main@data,w
 19567  1F28  00F7               	movwf	locked_secret_check@data
 19568  1F29  3002               	movlw	2
 19569  1F2A  00D4               	movwf	??_locked_Main
 19570  1F2B  0854               	movf	??_locked_Main,w
 19571  1F2C  00F9               	movwf	locked_secret_check@buttonPressed
 19572  1F2D  3190  200F  319D   	fcall	_locked_secret_check
 19573  1F30  0020               	movlb	0	; select bank0
 19574  1F31  00D5               	movwf	??_locked_Main+1
 19575  1F32  0855               	movf	??_locked_Main+1,w
 19576  1F33  0021               	movlb	1	; select bank1
 19577  1F34  00C3               	movwf	_pw_found^(0+128)
 19578  1F35                     l9633:	
 19579                           
 19580                           ;locked_task.c: 239: }
 19581                           ;locked_task.c: 240: data->holdCountA = 0;
 19582  1F35  0020               	movlb	0	; select bank0
 19583  1F36  0857               	movf	locked_Main@data,w
 19584  1F37  0086               	movwf	6
 19585  1F38  0858               	movf	locked_Main@data+1,w
 19586  1F39  0087               	movwf	7
 19587  1F3A  3143               	addfsr 1,3
 19588  1F3B  3000               	movlw	0
 19589  1F3C  3FC0               	movwi [0]fsr1
 19590  1F3D  3FC1               	movwi [1]fsr1
 19591                           
 19592                           ;locked_task.c: 241: data->holdCountB += 1;
 19593  1F3E  0857               	movf	locked_Main@data,w
 19594  1F3F  0086               	movwf	6
 19595  1F40  0858               	movf	locked_Main@data+1,w
 19596  1F41  0087               	movwf	7
 19597  1F42  3145               	addfsr 1,5
 19598  1F43  3001               	movlw	1
 19599  1F44  0781               	addwf	1,f
 19600  1F45  3141               	addfsr 1,1
 19601  1F46  1803               	skipnc
 19602  1F47  0A81               	incf	1,f
 19603                           
 19604                           ;locked_task.c: 242: data->holdCountX = 0;
 19605  1F48  0857               	movf	locked_Main@data,w
 19606  1F49  0086               	movwf	6
 19607  1F4A  0858               	movf	locked_Main@data+1,w
 19608  1F4B  0087               	movwf	7
 19609  1F4C  3147               	addfsr 1,7
 19610  1F4D  3000               	movlw	0
 19611  1F4E  3FC0               	movwi [0]fsr1
 19612  1F4F  3FC1               	movwi [1]fsr1
 19613                           
 19614                           ;locked_task.c: 243: data->holdCountY = 0;
 19615  1F50  0857               	movf	locked_Main@data,w
 19616  1F51  0086               	movwf	6
 19617  1F52  0858               	movf	locked_Main@data+1,w
 19618  1F53  0087               	movwf	7
 19619  1F54  3149               	addfsr 1,9
 19620  1F55  3000               	movlw	0
 19621  1F56  3FC0               	movwi [0]fsr1
 19622  1F57  3FC1               	movwi [1]fsr1
 19623                           
 19624                           ;locked_task.c: 244: data->noholdCount = 0;
 19625  1F58  0857               	movf	locked_Main@data,w
 19626  1F59  0086               	movwf	6
 19627  1F5A  0858               	movf	locked_Main@data+1,w
 19628  1F5B  0087               	movwf	7
 19629  1F5C  314B               	addfsr 1,11
 19630  1F5D  3000               	movlw	0
 19631  1F5E  3FC0               	movwi [0]fsr1
 19632  1F5F  3FC1               	movwi [1]fsr1
 19633                           
 19634                           ;locked_task.c: 245: break;
 19635  1F60  2FDD               	goto	l9663
 19636  1F61                     l9643:	
 19637                           ;locked_task.c: 246: case 1:
 19638                           
 19639                           
 19640                           ;locked_task.c: 247: if (data->holdCountA == 0){
 19641  1F61  0857               	movf	locked_Main@data,w
 19642  1F62  0086               	movwf	6
 19643  1F63  0858               	movf	locked_Main@data+1,w
 19644  1F64  0087               	movwf	7
 19645  1F65  3143               	addfsr 1,3
 19646  1F66  0016               	moviw fsr1++
 19647  1F67  0401               	iorwf	1,w
 19648  1F68  1D03               	btfss	3,2
 19649  1F69  2F78               	goto	l9647
 19650                           
 19651                           ;locked_task.c: 248: pw_found = locked_secret_check(data, 1 );
 19652  1F6A  0858               	movf	locked_Main@data+1,w
 19653  1F6B  00F8               	movwf	locked_secret_check@data+1
 19654  1F6C  0857               	movf	locked_Main@data,w
 19655  1F6D  00F7               	movwf	locked_secret_check@data
 19656  1F6E  01F9               	clrf	locked_secret_check@buttonPressed
 19657  1F6F  0AF9               	incf	locked_secret_check@buttonPressed,f
 19658  1F70  3190  200F  319D   	fcall	_locked_secret_check
 19659  1F73  0020               	movlb	0	; select bank0
 19660  1F74  00D4               	movwf	??_locked_Main
 19661  1F75  0854               	movf	??_locked_Main,w
 19662  1F76  0021               	movlb	1	; select bank1
 19663  1F77  00C3               	movwf	_pw_found^(0+128)
 19664  1F78                     l9647:	
 19665                           
 19666                           ;locked_task.c: 249: }
 19667                           ;locked_task.c: 250: data->holdCountA += 1;
 19668  1F78  0020               	movlb	0	; select bank0
 19669  1F79  0857               	movf	locked_Main@data,w
 19670  1F7A  0086               	movwf	6
 19671  1F7B  0858               	movf	locked_Main@data+1,w
 19672  1F7C  0087               	movwf	7
 19673  1F7D  3143               	addfsr 1,3
 19674  1F7E  3001               	movlw	1
 19675  1F7F  0781               	addwf	1,f
 19676  1F80  3141               	addfsr 1,1
 19677  1F81  1803               	skipnc
 19678  1F82  0A81               	incf	1,f
 19679                           
 19680                           ;locked_task.c: 251: data->holdCountB = 0;
 19681  1F83  0857               	movf	locked_Main@data,w
 19682  1F84  0086               	movwf	6
 19683  1F85  0858               	movf	locked_Main@data+1,w
 19684  1F86  0087               	movwf	7
 19685  1F87  3145               	addfsr 1,5
 19686  1F88  3000               	movlw	0
 19687  1F89  3FC0               	movwi [0]fsr1
 19688  1F8A  3FC1               	movwi [1]fsr1
 19689                           
 19690                           ;locked_task.c: 252: data->holdCountX = 0;
 19691  1F8B  0857               	movf	locked_Main@data,w
 19692  1F8C  0086               	movwf	6
 19693  1F8D  0858               	movf	locked_Main@data+1,w
 19694  1F8E  0087               	movwf	7
 19695  1F8F  3147               	addfsr 1,7
 19696  1F90  3000               	movlw	0
 19697  1F91  3FC0               	movwi [0]fsr1
 19698  1F92  3FC1               	movwi [1]fsr1
 19699                           
 19700                           ;locked_task.c: 253: data->holdCountY = 0;
 19701  1F93  0857               	movf	locked_Main@data,w
 19702  1F94  0086               	movwf	6
 19703  1F95  0858               	movf	locked_Main@data+1,w
 19704  1F96  0087               	movwf	7
 19705  1F97  3149               	addfsr 1,9
 19706  1F98  3000               	movlw	0
 19707  1F99  3FC0               	movwi [0]fsr1
 19708  1F9A  3FC1               	movwi [1]fsr1
 19709                           
 19710                           ;locked_task.c: 254: data->noholdCount = 0;
 19711  1F9B  0857               	movf	locked_Main@data,w
 19712  1F9C  0086               	movwf	6
 19713  1F9D  0858               	movf	locked_Main@data+1,w
 19714  1F9E  0087               	movwf	7
 19715  1F9F  314B               	addfsr 1,11
 19716  1FA0  3000               	movlw	0
 19717  1FA1  3FC0               	movwi [0]fsr1
 19718  1FA2  3FC1               	movwi [1]fsr1
 19719                           
 19720                           ;locked_task.c: 255: break;
 19721  1FA3  2FDD               	goto	l9663
 19722  1FA4                     l9657:	
 19723                           ;locked_task.c: 256: default:
 19724                           
 19725                           
 19726                           ;locked_task.c: 257: data->holdCountA = 0;
 19727  1FA4  0857               	movf	locked_Main@data,w
 19728  1FA5  0086               	movwf	6
 19729  1FA6  0858               	movf	locked_Main@data+1,w
 19730  1FA7  0087               	movwf	7
 19731  1FA8  3143               	addfsr 1,3
 19732  1FA9  3000               	movlw	0
 19733  1FAA  3FC0               	movwi [0]fsr1
 19734  1FAB  3FC1               	movwi [1]fsr1
 19735                           
 19736                           ;locked_task.c: 258: data->holdCountB = 0;
 19737  1FAC  0857               	movf	locked_Main@data,w
 19738  1FAD  0086               	movwf	6
 19739  1FAE  0858               	movf	locked_Main@data+1,w
 19740  1FAF  0087               	movwf	7
 19741  1FB0  3145               	addfsr 1,5
 19742  1FB1  3000               	movlw	0
 19743  1FB2  3FC0               	movwi [0]fsr1
 19744  1FB3  3FC1               	movwi [1]fsr1
 19745                           
 19746                           ;locked_task.c: 259: data->holdCountX = 0;
 19747  1FB4  0857               	movf	locked_Main@data,w
 19748  1FB5  0086               	movwf	6
 19749  1FB6  0858               	movf	locked_Main@data+1,w
 19750  1FB7  0087               	movwf	7
 19751  1FB8  3147               	addfsr 1,7
 19752  1FB9  3000               	movlw	0
 19753  1FBA  3FC0               	movwi [0]fsr1
 19754  1FBB  3FC1               	movwi [1]fsr1
 19755                           
 19756                           ;locked_task.c: 260: data->holdCountY = 0;
 19757  1FBC  0857               	movf	locked_Main@data,w
 19758  1FBD  0086               	movwf	6
 19759  1FBE  0858               	movf	locked_Main@data+1,w
 19760  1FBF  0087               	movwf	7
 19761  1FC0  3149               	addfsr 1,9
 19762  1FC1  3000               	movlw	0
 19763  1FC2  3FC0               	movwi [0]fsr1
 19764  1FC3  3FC1               	movwi [1]fsr1
 19765                           
 19766                           ;locked_task.c: 261: data->noholdCount += 1;
 19767  1FC4  0857               	movf	locked_Main@data,w
 19768  1FC5  0086               	movwf	6
 19769  1FC6  0858               	movf	locked_Main@data+1,w
 19770  1FC7  0087               	movwf	7
 19771  1FC8  314B               	addfsr 1,11
 19772  1FC9  3001               	movlw	1
 19773  1FCA  0781               	addwf	1,f
 19774  1FCB  3141               	addfsr 1,1
 19775  1FCC  1803               	skipnc
 19776  1FCD  0A81               	incf	1,f
 19777                           
 19778                           ;locked_task.c: 262: }
 19779  1FCE  2FDD               	goto	l9663
 19780  1FCF                     l9661:	
 19781  1FCF  0856               	movf	locked_Main@buttonPressed,w
 19782                           
 19783                           ; Switch size 1, requested type "space"
 19784                           ; Number of cases is 4, Range of values is 1 to 8
 19785                           ; switch strategies available:
 19786                           ; Name         Instructions Cycles
 19787                           ; simple_byte           13     7 (average)
 19788                           ; direct_byte           25     9 (fixed)
 19789                           ; jumptable            263     9 (fixed)
 19790                           ;	Chosen strategy is simple_byte
 19791  1FD0  3A01               	xorlw	1	; case 1
 19792  1FD1  1903               	skipnz
 19793  1FD2  2F61               	goto	l9643
 19794  1FD3  3A03               	xorlw	3	; case 2
 19795  1FD4  1903               	skipnz
 19796  1FD5  2F1C               	goto	l9629
 19797  1FD6  3A06               	xorlw	6	; case 4
 19798  1FD7  1903               	skipnz
 19799  1FD8  2ECB               	goto	l9611
 19800  1FD9  3A0C               	xorlw	12	; case 8
 19801  1FDA  1903               	skipnz
 19802  1FDB  2ED6               	goto	l9615
 19803  1FDC  2FA4               	goto	l9657
 19804  1FDD                     l9663:	
 19805                           
 19806                           ;locked_task.c: 263: if(pw_found==1){
 19807  1FDD  0021               	movlb	1	; select bank1
 19808  1FDE  0343               	decf	_pw_found^(0+128),w
 19809  1FDF  1D03               	btfss	3,2
 19810  1FE0  0008               	return
 19811                           
 19812                           ;locked_task.c: 264: if (badge_locked){
 19813  1FE1  0844               	movf	_badge_locked^(0+128),w
 19814  1FE2  1903               	btfsc	3,2
 19815  1FE3  2FF2               	goto	l9669
 19816                           
 19817                           ;locked_task.c: 266: data->state = LOCKED_UNLOCKING_STATE;
 19818  1FE4  0020               	movlb	0	; select bank0
 19819  1FE5  0857               	movf	locked_Main@data,w
 19820  1FE6  3E0D               	addlw	13
 19821  1FE7  00D4               	movwf	??_locked_Main
 19822  1FE8  3000               	movlw	0
 19823  1FE9  3D58               	addwfc	locked_Main@data+1,w
 19824  1FEA  00D5               	movwf	??_locked_Main+1
 19825  1FEB  0854               	movf	??_locked_Main,w
 19826  1FEC  0086               	movwf	6
 19827  1FED  0855               	movf	??_locked_Main+1,w
 19828  1FEE  0087               	movwf	7
 19829  1FEF  3003               	movlw	3
 19830  1FF0  0081               	movwf	1
 19831                           
 19832                           ;locked_task.c: 267: }
 19833  1FF1  0008               	return
 19834  1FF2                     l9669:	
 19835                           
 19836                           ;locked_task.c: 268: else {
 19837                           ;locked_task.c: 270: data->state = LOCKED_LOCKING_STATE;
 19838  1FF2  0020               	movlb	0	; select bank0
 19839  1FF3  0857               	movf	locked_Main@data,w
 19840  1FF4  3E0D               	addlw	13
 19841  1FF5  00D4               	movwf	??_locked_Main
 19842  1FF6  3000               	movlw	0
 19843  1FF7  3D58               	addwfc	locked_Main@data+1,w
 19844  1FF8  00D5               	movwf	??_locked_Main+1
 19845  1FF9  0854               	movf	??_locked_Main,w
 19846  1FFA  0086               	movwf	6
 19847  1FFB  0855               	movf	??_locked_Main+1,w
 19848  1FFC  0087               	movwf	7
 19849  1FFD  3001               	movlw	1
 19850  1FFE  0081               	movwf	1
 19851  1FFF  0008               	return
 19852  2000                     __end_of_locked_Main:	
 19853                           
 19854                           	psect	text17
 19855  1B8F                     __ptext17:	
 19856 ;; *************** function _menu_Main *****************
 19857 ;; Defined at:
 19858 ;;		line 59 in file "menu_task.c"
 19859 ;; Parameters:    Size  Location     Type
 19860 ;;  taskData        2   50[BANK0 ] PTR void 
 19861 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19862 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19863 ;; Auto vars:     Size  Location     Type
 19864 ;;  data            2   55[BANK0 ] PTR struct t_menu_taskDa
 19865 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19866 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19867 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 19868 ;; Return value:  Size  Location     Type
 19869 ;;                  1    wreg      void 
 19870 ;; Registers used:
 19871 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19872 ;; Tracked objects:
 19873 ;;		On entry : 0/0
 19874 ;;		On exit  : 0/0
 19875 ;;		Unchanged: 0/0
 19876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19877 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19878 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19879 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19880 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19881 ;;Total ram usage:        7 bytes
 19882 ;; Hardware stack levels used:    1
 19883 ;; Hardware stack levels required when called:   12
 19884 ;; This function calls:
 19885 ;;		_menu_clear
 19886 ;;		_menu_display_option
 19887 ;;		_menu_run_option
 19888 ;;		_nullifyBadge_buttonsGet
 19889 ;;		_slot_Setup
 19890 ;; This function is called by:
 19891 ;;		_main
 19892 ;;		_scheduler_TaskRun
 19893 ;; This function uses a non-reentrant model
 19894 ;;
 19895                           
 19896                           
 19897                           ;psect for function _menu_Main
 19898  1B8F                     _menu_Main:	
 19899                           
 19900                           ;menu_task.c: 60: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 19901                           
 19902                           ;incstack = 0
 19903                           ; Regs used in _menu_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19904  1B8F  0020               	movlb	0	; select bank0
 19905  1B90  0853               	movf	menu_Main@taskData+1,w
 19906  1B91  00D8               	movwf	menu_Main@data+1
 19907  1B92  0852               	movf	menu_Main@taskData,w
 19908  1B93  00D7               	movwf	menu_Main@data
 19909                           
 19910                           ;menu_task.c: 61: u8 buttonPressed;
 19911                           ;menu_task.c: 63: if ( currentTask != MENU_TASK ){
 19912  1B94  0021               	movlb	1	; select bank1
 19913  1B95  083A               	movf	_currentTask^(0+128),w
 19914  1B96  043B               	iorwf	(_currentTask+1)^(0+128),w
 19915  1B97  1903               	btfsc	3,2
 19916  1B98  2C13               	goto	l9013
 19917                           
 19918                           ;menu_task.c: 65: buttonPressed = nullifyBadge_buttonsGet();
 19919  1B99  31B6  264B  319B   	fcall	_nullifyBadge_buttonsGet
 19920  1B9C  0020               	movlb	0	; select bank0
 19921  1B9D  00D4               	movwf	??_menu_Main
 19922  1B9E  0854               	movf	??_menu_Main,w
 19923  1B9F  00D6               	movwf	menu_Main@buttonPressed
 19924                           
 19925                           ;menu_task.c: 66: switch (buttonPressed) {
 19926  1BA0  2C0D               	goto	l9011
 19927  1BA1                     l8989:	
 19928                           ;menu_task.c: 67: case 1 | 2 | 8:
 19929                           
 19930                           
 19931                           ;menu_task.c: 68: currentTask = MENU_TASK;
 19932  1BA1  0021               	movlb	1	; select bank1
 19933  1BA2  01BA               	clrf	_currentTask^(0+128)
 19934  1BA3  01BB               	clrf	(_currentTask+1)^(0+128)
 19935                           
 19936                           ;menu_task.c: 69: menu_clear(data);
 19937  1BA4  0020               	movlb	0	; select bank0
 19938  1BA5  0858               	movf	menu_Main@data+1,w
 19939  1BA6  00BA               	movwf	menu_clear@data+1
 19940  1BA7  0857               	movf	menu_Main@data,w
 19941  1BA8  00B9               	movwf	menu_clear@data
 19942  1BA9  31A9  21F1  319B   	fcall	_menu_clear
 19943                           
 19944                           ;menu_task.c: 72: slot_Setup(slot_taskData);
 19945  1BAC  0021               	movlb	1	; select bank1
 19946  1BAD  083D               	movf	(_slot_taskData+1)^(0+128),w
 19947  1BAE  0020               	movlb	0	; select bank0
 19948  1BAF  00B0               	movwf	slot_Setup@taskData+1
 19949  1BB0  0021               	movlb	1	; select bank1
 19950  1BB1  083C               	movf	_slot_taskData^(0+128),w
 19951  1BB2  0020               	movlb	0	; select bank0
 19952  1BB3  00AF               	movwf	slot_Setup@taskData
 19953  1BB4  31AC  2447  319B   	fcall	_slot_Setup
 19954                           
 19955                           ;menu_task.c: 75: data->holdCountA = 1;
 19956  1BB7  0020               	movlb	0	; select bank0
 19957  1BB8  0857               	movf	menu_Main@data,w
 19958  1BB9  0086               	movwf	6
 19959  1BBA  0858               	movf	menu_Main@data+1,w
 19960  1BBB  0087               	movwf	7
 19961  1BBC  3144               	addfsr 1,4
 19962  1BBD  3001               	movlw	1
 19963  1BBE  3FC0               	movwi [0]fsr1
 19964  1BBF  3000               	movlw	0
 19965  1BC0  3FC1               	movwi [1]fsr1
 19966                           
 19967                           ;menu_task.c: 76: data->holdCountB = 1;
 19968  1BC1  0857               	movf	menu_Main@data,w
 19969  1BC2  0086               	movwf	6
 19970  1BC3  0858               	movf	menu_Main@data+1,w
 19971  1BC4  0087               	movwf	7
 19972  1BC5  3146               	addfsr 1,6
 19973  1BC6  3001               	movlw	1
 19974  1BC7  3FC0               	movwi [0]fsr1
 19975  1BC8  3000               	movlw	0
 19976  1BC9  3FC1               	movwi [1]fsr1
 19977                           
 19978                           ;menu_task.c: 77: data->holdCountX = 1;
 19979  1BCA  0857               	movf	menu_Main@data,w
 19980  1BCB  0086               	movwf	6
 19981  1BCC  0858               	movf	menu_Main@data+1,w
 19982  1BCD  0087               	movwf	7
 19983  1BCE  3148               	addfsr 1,8
 19984  1BCF  3001               	movlw	1
 19985  1BD0  3FC0               	movwi [0]fsr1
 19986  1BD1  3000               	movlw	0
 19987  1BD2  3FC1               	movwi [1]fsr1
 19988                           
 19989                           ;menu_task.c: 78: data->holdCountY = 1;
 19990  1BD3  0857               	movf	menu_Main@data,w
 19991  1BD4  0086               	movwf	6
 19992  1BD5  0858               	movf	menu_Main@data+1,w
 19993  1BD6  0087               	movwf	7
 19994  1BD7  314A               	addfsr 1,10
 19995  1BD8  3001               	movlw	1
 19996  1BD9  3FC0               	movwi [0]fsr1
 19997  1BDA  3000               	movlw	0
 19998  1BDB  3FC1               	movwi [1]fsr1
 19999                           
 20000                           ;menu_task.c: 80: menu_option_idx = 0;
 20001  1BDC  0021               	movlb	1	; select bank1
 20002  1BDD  01B6               	clrf	_menu_option_idx^(0+128)
 20003  1BDE  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 20004                           
 20005                           ;menu_task.c: 81: menu_display_option(data);
 20006  1BDF  0020               	movlb	0	; select bank0
 20007  1BE0  0858               	movf	menu_Main@data+1,w
 20008  1BE1  00CD               	movwf	menu_display_option@data+1
 20009  1BE2  0857               	movf	menu_Main@data,w
 20010  1BE3  00CC               	movwf	menu_display_option@data
 20011  1BE4  31AD  25A0         	fcall	_menu_display_option
 20012                           
 20013                           ;menu_task.c: 82: break;
 20014  1BE6  0008               	return
 20015  1BE7                     l9007:	
 20016                           ;menu_task.c: 83: default:
 20017                           
 20018                           
 20019                           ;menu_task.c: 85: data->holdCountA = 1;
 20020  1BE7  0020               	movlb	0	; select bank0
 20021  1BE8  0857               	movf	menu_Main@data,w
 20022  1BE9  0086               	movwf	6
 20023  1BEA  0858               	movf	menu_Main@data+1,w
 20024  1BEB  0087               	movwf	7
 20025  1BEC  3144               	addfsr 1,4
 20026  1BED  3001               	movlw	1
 20027  1BEE  3FC0               	movwi [0]fsr1
 20028  1BEF  3000               	movlw	0
 20029  1BF0  3FC1               	movwi [1]fsr1
 20030                           
 20031                           ;menu_task.c: 86: data->holdCountB = 1;
 20032  1BF1  0857               	movf	menu_Main@data,w
 20033  1BF2  0086               	movwf	6
 20034  1BF3  0858               	movf	menu_Main@data+1,w
 20035  1BF4  0087               	movwf	7
 20036  1BF5  3146               	addfsr 1,6
 20037  1BF6  3001               	movlw	1
 20038  1BF7  3FC0               	movwi [0]fsr1
 20039  1BF8  3000               	movlw	0
 20040  1BF9  3FC1               	movwi [1]fsr1
 20041                           
 20042                           ;menu_task.c: 87: data->holdCountX = 1;
 20043  1BFA  0857               	movf	menu_Main@data,w
 20044  1BFB  0086               	movwf	6
 20045  1BFC  0858               	movf	menu_Main@data+1,w
 20046  1BFD  0087               	movwf	7
 20047  1BFE  3148               	addfsr 1,8
 20048  1BFF  3001               	movlw	1
 20049  1C00  3FC0               	movwi [0]fsr1
 20050  1C01  3000               	movlw	0
 20051  1C02  3FC1               	movwi [1]fsr1
 20052                           
 20053                           ;menu_task.c: 88: data->holdCountY = 1;
 20054  1C03  0857               	movf	menu_Main@data,w
 20055  1C04  0086               	movwf	6
 20056  1C05  0858               	movf	menu_Main@data+1,w
 20057  1C06  0087               	movwf	7
 20058  1C07  314A               	addfsr 1,10
 20059  1C08  3001               	movlw	1
 20060  1C09  3FC0               	movwi [0]fsr1
 20061  1C0A  3000               	movlw	0
 20062  1C0B  3FC1               	movwi [1]fsr1
 20063                           
 20064                           ;menu_task.c: 90: }
 20065                           
 20066                           ;menu_task.c: 89: break;
 20067  1C0C  0008               	return
 20068  1C0D                     l9011:	
 20069  1C0D  0856               	movf	menu_Main@buttonPressed,w
 20070                           
 20071                           ; Switch size 1, requested type "space"
 20072                           ; Number of cases is 1, Range of values is 11 to 11
 20073                           ; switch strategies available:
 20074                           ; Name         Instructions Cycles
 20075                           ; simple_byte            4     3 (average)
 20076                           ; direct_byte           11     9 (fixed)
 20077                           ; jumptable            263     9 (fixed)
 20078                           ;	Chosen strategy is simple_byte
 20079  1C0E  3A0B               	xorlw	11	; case 11
 20080  1C0F  1903               	skipnz
 20081  1C10  2BA1               	goto	l8989
 20082  1C11  2BE7               	goto	l9007
 20083                           
 20084                           ;menu_task.c: 91: return;
 20085  1C12  0008               	return
 20086  1C13                     l9013:	
 20087                           
 20088                           ;menu_task.c: 92: }
 20089                           ;menu_task.c: 94: buttonPressed = nullifyBadge_buttonsGet();
 20090  1C13  31B6  264B  319B   	fcall	_nullifyBadge_buttonsGet
 20091  1C16  0020               	movlb	0	; select bank0
 20092  1C17  00D4               	movwf	??_menu_Main
 20093  1C18  0854               	movf	??_menu_Main,w
 20094  1C19  00D6               	movwf	menu_Main@buttonPressed
 20095                           
 20096                           ;menu_task.c: 95: switch (buttonPressed) {
 20097  1C1A  2D74               	goto	l9097
 20098  1C1B                     l9015:	
 20099                           ;menu_task.c: 96: case 1:
 20100                           
 20101                           
 20102                           ;menu_task.c: 98: if (data->holdCountA == 0){
 20103  1C1B  0857               	movf	menu_Main@data,w
 20104  1C1C  0086               	movwf	6
 20105  1C1D  0858               	movf	menu_Main@data+1,w
 20106  1C1E  0087               	movwf	7
 20107  1C1F  3144               	addfsr 1,4
 20108  1C20  0016               	moviw fsr1++
 20109  1C21  0401               	iorwf	1,w
 20110  1C22  1D03               	btfss	3,2
 20111  1C23  2C34               	goto	l9023
 20112                           
 20113                           ;menu_task.c: 100: if (menu_option_idx == 0){
 20114  1C24  0021               	movlb	1	; select bank1
 20115  1C25  0836               	movf	_menu_option_idx^(0+128),w
 20116  1C26  0437               	iorwf	(_menu_option_idx+1)^(0+128),w
 20117  1C27  1D03               	btfss	3,2
 20118  1C28  2C30               	goto	l9021
 20119                           
 20120                           ;menu_task.c: 101: menu_option_idx = menu_option_size - 1;
 20121  1C29  0834               	movf	_menu_option_size^(0+128),w
 20122  1C2A  3EFF               	addlw	255
 20123  1C2B  00B6               	movwf	_menu_option_idx^(0+128)
 20124  1C2C  30FF               	movlw	255
 20125  1C2D  3D35               	addwfc	(_menu_option_size+1)^(0+128),w
 20126  1C2E  00B7               	movwf	(_menu_option_idx+1)^(0+128)
 20127                           
 20128                           ;menu_task.c: 102: }
 20129  1C2F  2C34               	goto	l9023
 20130  1C30                     l9021:	
 20131                           
 20132                           ;menu_task.c: 103: else {
 20133                           ;menu_task.c: 104: menu_option_idx -= 1;
 20134  1C30  3001               	movlw	1
 20135  1C31  02B6               	subwf	_menu_option_idx^(0+128),f
 20136  1C32  3000               	movlw	0
 20137  1C33  3BB7               	subwfb	(_menu_option_idx+1)^(0+128),f
 20138  1C34                     l9023:	
 20139                           
 20140                           ;menu_task.c: 105: }
 20141                           ;menu_task.c: 106: }
 20142                           ;menu_task.c: 107: menu_display_option(data);
 20143  1C34  0020               	movlb	0	; select bank0
 20144  1C35  0858               	movf	menu_Main@data+1,w
 20145  1C36  00CD               	movwf	menu_display_option@data+1
 20146  1C37  0857               	movf	menu_Main@data,w
 20147  1C38  00CC               	movwf	menu_display_option@data
 20148  1C39  31AD  25A0  319B   	fcall	_menu_display_option
 20149                           
 20150                           ;menu_task.c: 108: data->holdCountA += 1;
 20151  1C3C  0020               	movlb	0	; select bank0
 20152  1C3D  0857               	movf	menu_Main@data,w
 20153  1C3E  0086               	movwf	6
 20154  1C3F  0858               	movf	menu_Main@data+1,w
 20155  1C40  0087               	movwf	7
 20156  1C41  3144               	addfsr 1,4
 20157  1C42  3001               	movlw	1
 20158  1C43  0781               	addwf	1,f
 20159  1C44  3141               	addfsr 1,1
 20160  1C45  1803               	skipnc
 20161  1C46  0A81               	incf	1,f
 20162                           
 20163                           ;menu_task.c: 109: data->holdCountB = 0;
 20164  1C47  0857               	movf	menu_Main@data,w
 20165  1C48  0086               	movwf	6
 20166  1C49  0858               	movf	menu_Main@data+1,w
 20167  1C4A  0087               	movwf	7
 20168  1C4B  3146               	addfsr 1,6
 20169  1C4C  3000               	movlw	0
 20170  1C4D  3FC0               	movwi [0]fsr1
 20171  1C4E  3FC1               	movwi [1]fsr1
 20172                           
 20173                           ;menu_task.c: 110: data->holdCountX = 0;
 20174  1C4F  0857               	movf	menu_Main@data,w
 20175  1C50  0086               	movwf	6
 20176  1C51  0858               	movf	menu_Main@data+1,w
 20177  1C52  0087               	movwf	7
 20178  1C53  3148               	addfsr 1,8
 20179  1C54  3000               	movlw	0
 20180  1C55  3FC0               	movwi [0]fsr1
 20181  1C56  3FC1               	movwi [1]fsr1
 20182                           
 20183                           ;menu_task.c: 111: data->holdCountY = 0;
 20184  1C57  0857               	movf	menu_Main@data,w
 20185  1C58  0086               	movwf	6
 20186  1C59  0858               	movf	menu_Main@data+1,w
 20187  1C5A  0087               	movwf	7
 20188  1C5B  314A               	addfsr 1,10
 20189  1C5C  3000               	movlw	0
 20190  1C5D  3FC0               	movwi [0]fsr1
 20191  1C5E  3FC1               	movwi [1]fsr1
 20192                           
 20193                           ;menu_task.c: 112: data->noholdCount = 0;
 20194  1C5F  0857               	movf	menu_Main@data,w
 20195  1C60  0086               	movwf	6
 20196  1C61  0858               	movf	menu_Main@data+1,w
 20197  1C62  0087               	movwf	7
 20198  1C63  314C               	addfsr 1,12
 20199  1C64  3000               	movlw	0
 20200  1C65  3FC0               	movwi [0]fsr1
 20201  1C66  3FC1               	movwi [1]fsr1
 20202                           
 20203                           ;menu_task.c: 113: break;
 20204  1C67  0008               	return
 20205  1C68                     l9035:	
 20206                           ;menu_task.c: 114: case 2:
 20207                           
 20208                           
 20209                           ;menu_task.c: 116: if (data->holdCountB == 0){
 20210  1C68  0857               	movf	menu_Main@data,w
 20211  1C69  0086               	movwf	6
 20212  1C6A  0858               	movf	menu_Main@data+1,w
 20213  1C6B  0087               	movwf	7
 20214  1C6C  3146               	addfsr 1,6
 20215  1C6D  0016               	moviw fsr1++
 20216  1C6E  0401               	iorwf	1,w
 20217  1C6F  1D03               	btfss	3,2
 20218  1C70  2C90               	goto	l9043
 20219                           
 20220                           ;menu_task.c: 118: if (menu_option_idx == menu_option_size - 1){
 20221  1C71  0021               	movlb	1	; select bank1
 20222  1C72  0834               	movf	_menu_option_size^(0+128),w
 20223  1C73  3EFF               	addlw	255
 20224  1C74  0020               	movlb	0	; select bank0
 20225  1C75  00D4               	movwf	??_menu_Main
 20226  1C76  30FF               	movlw	255
 20227  1C77  0021               	movlb	1	; select bank1
 20228  1C78  3D35               	addwfc	(_menu_option_size+1)^(0+128),w
 20229  1C79  0020               	movlb	0	; select bank0
 20230  1C7A  00D5               	movwf	??_menu_Main+1
 20231  1C7B  0021               	movlb	1	; select bank1
 20232  1C7C  0837               	movf	(_menu_option_idx+1)^(0+128),w
 20233  1C7D  0020               	movlb	0	; select bank0
 20234  1C7E  0655               	xorwf	??_menu_Main+1,w
 20235  1C7F  1D03               	skipz
 20236  1C80  2C85               	goto	u5655
 20237  1C81  0021               	movlb	1	; select bank1
 20238  1C82  0836               	movf	_menu_option_idx^(0+128),w
 20239  1C83  0020               	movlb	0	; select bank0
 20240  1C84  0654               	xorwf	??_menu_Main,w
 20241  1C85                     u5655:	
 20242  1C85  1D03               	skipz
 20243  1C86  2C8B               	goto	l9041
 20244                           
 20245                           ;menu_task.c: 119: menu_option_idx = 0;
 20246  1C87  0021               	movlb	1	; select bank1
 20247  1C88  01B6               	clrf	_menu_option_idx^(0+128)
 20248  1C89  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 20249                           
 20250                           ;menu_task.c: 120: }
 20251  1C8A  2C90               	goto	l9043
 20252  1C8B                     l9041:	
 20253                           
 20254                           ;menu_task.c: 121: else {
 20255                           ;menu_task.c: 122: menu_option_idx += 1;
 20256  1C8B  3001               	movlw	1
 20257  1C8C  0021               	movlb	1	; select bank1
 20258  1C8D  07B6               	addwf	_menu_option_idx^(0+128),f
 20259  1C8E  3000               	movlw	0
 20260  1C8F  3DB7               	addwfc	(_menu_option_idx+1)^(0+128),f
 20261  1C90                     l9043:	
 20262                           
 20263                           ;menu_task.c: 123: }
 20264                           ;menu_task.c: 124: }
 20265                           ;menu_task.c: 125: menu_display_option(data);
 20266  1C90  0020               	movlb	0	; select bank0
 20267  1C91  0858               	movf	menu_Main@data+1,w
 20268  1C92  00CD               	movwf	menu_display_option@data+1
 20269  1C93  0857               	movf	menu_Main@data,w
 20270  1C94  00CC               	movwf	menu_display_option@data
 20271  1C95  31AD  25A0  319B   	fcall	_menu_display_option
 20272                           
 20273                           ;menu_task.c: 126: data->holdCountA = 0;
 20274  1C98  0020               	movlb	0	; select bank0
 20275  1C99  0857               	movf	menu_Main@data,w
 20276  1C9A  0086               	movwf	6
 20277  1C9B  0858               	movf	menu_Main@data+1,w
 20278  1C9C  0087               	movwf	7
 20279  1C9D  3144               	addfsr 1,4
 20280  1C9E  3000               	movlw	0
 20281  1C9F  3FC0               	movwi [0]fsr1
 20282  1CA0  3FC1               	movwi [1]fsr1
 20283                           
 20284                           ;menu_task.c: 127: data->holdCountB += 1;
 20285  1CA1  0857               	movf	menu_Main@data,w
 20286  1CA2  0086               	movwf	6
 20287  1CA3  0858               	movf	menu_Main@data+1,w
 20288  1CA4  0087               	movwf	7
 20289  1CA5  3146               	addfsr 1,6
 20290  1CA6  3001               	movlw	1
 20291  1CA7  0781               	addwf	1,f
 20292  1CA8  3141               	addfsr 1,1
 20293  1CA9  1803               	skipnc
 20294  1CAA  0A81               	incf	1,f
 20295                           
 20296                           ;menu_task.c: 128: data->holdCountX = 0;
 20297  1CAB  0857               	movf	menu_Main@data,w
 20298  1CAC  0086               	movwf	6
 20299  1CAD  0858               	movf	menu_Main@data+1,w
 20300  1CAE  0087               	movwf	7
 20301  1CAF  3148               	addfsr 1,8
 20302  1CB0  3000               	movlw	0
 20303  1CB1  3FC0               	movwi [0]fsr1
 20304  1CB2  3FC1               	movwi [1]fsr1
 20305                           
 20306                           ;menu_task.c: 129: data->holdCountY = 0;
 20307  1CB3  0857               	movf	menu_Main@data,w
 20308  1CB4  0086               	movwf	6
 20309  1CB5  0858               	movf	menu_Main@data+1,w
 20310  1CB6  0087               	movwf	7
 20311  1CB7  314A               	addfsr 1,10
 20312  1CB8  3000               	movlw	0
 20313  1CB9  3FC0               	movwi [0]fsr1
 20314  1CBA  3FC1               	movwi [1]fsr1
 20315                           
 20316                           ;menu_task.c: 130: data->noholdCount = 0;
 20317  1CBB  0857               	movf	menu_Main@data,w
 20318  1CBC  0086               	movwf	6
 20319  1CBD  0858               	movf	menu_Main@data+1,w
 20320  1CBE  0087               	movwf	7
 20321  1CBF  314C               	addfsr 1,12
 20322  1CC0  3000               	movlw	0
 20323  1CC1  3FC0               	movwi [0]fsr1
 20324  1CC2  3FC1               	movwi [1]fsr1
 20325                           
 20326                           ;menu_task.c: 131: break;
 20327  1CC3  0008               	return
 20328  1CC4                     l9055:	
 20329                           ;menu_task.c: 132: case 4:
 20330                           
 20331                           
 20332                           ;menu_task.c: 133: if (data->holdCountX == 0){
 20333  1CC4  0857               	movf	menu_Main@data,w
 20334  1CC5  0086               	movwf	6
 20335  1CC6  0858               	movf	menu_Main@data+1,w
 20336  1CC7  0087               	movwf	7
 20337  1CC8  3148               	addfsr 1,8
 20338  1CC9  0016               	moviw fsr1++
 20339  1CCA  0401               	iorwf	1,w
 20340  1CCB  1D03               	btfss	3,2
 20341  1CCC  2CD9               	goto	l9061
 20342                           
 20343                           ;menu_task.c: 135: menu_clear(data);
 20344  1CCD  0858               	movf	menu_Main@data+1,w
 20345  1CCE  00BA               	movwf	menu_clear@data+1
 20346  1CCF  0857               	movf	menu_Main@data,w
 20347  1CD0  00B9               	movwf	menu_clear@data
 20348  1CD1  31A9  21F1  319B   	fcall	_menu_clear
 20349                           
 20350                           ;menu_task.c: 136: currentTask = FLASHY_TASK;
 20351  1CD4  3002               	movlw	2
 20352  1CD5  0021               	movlb	1	; select bank1
 20353  1CD6  00BA               	movwf	_currentTask^(0+128)
 20354  1CD7  3000               	movlw	0
 20355  1CD8  00BB               	movwf	(_currentTask^(0+128)+1)
 20356  1CD9                     l9061:	
 20357                           
 20358                           ;menu_task.c: 137: }
 20359                           ;menu_task.c: 138: data->holdCountA = 0;
 20360  1CD9  0020               	movlb	0	; select bank0
 20361  1CDA  0857               	movf	menu_Main@data,w
 20362  1CDB  0086               	movwf	6
 20363  1CDC  0858               	movf	menu_Main@data+1,w
 20364  1CDD  0087               	movwf	7
 20365  1CDE  3144               	addfsr 1,4
 20366  1CDF  3000               	movlw	0
 20367  1CE0  3FC0               	movwi [0]fsr1
 20368  1CE1  3FC1               	movwi [1]fsr1
 20369                           
 20370                           ;menu_task.c: 139: data->holdCountB = 0;
 20371  1CE2  0857               	movf	menu_Main@data,w
 20372  1CE3  0086               	movwf	6
 20373  1CE4  0858               	movf	menu_Main@data+1,w
 20374  1CE5  0087               	movwf	7
 20375  1CE6  3146               	addfsr 1,6
 20376  1CE7  3000               	movlw	0
 20377  1CE8  3FC0               	movwi [0]fsr1
 20378  1CE9  3FC1               	movwi [1]fsr1
 20379                           
 20380                           ;menu_task.c: 140: data->holdCountX += 1;
 20381  1CEA  0857               	movf	menu_Main@data,w
 20382  1CEB  0086               	movwf	6
 20383  1CEC  0858               	movf	menu_Main@data+1,w
 20384  1CED  0087               	movwf	7
 20385  1CEE  3148               	addfsr 1,8
 20386  1CEF  3001               	movlw	1
 20387  1CF0  0781               	addwf	1,f
 20388  1CF1  3141               	addfsr 1,1
 20389  1CF2  1803               	skipnc
 20390  1CF3  0A81               	incf	1,f
 20391                           
 20392                           ;menu_task.c: 141: data->holdCountY = 0;
 20393  1CF4  0857               	movf	menu_Main@data,w
 20394  1CF5  0086               	movwf	6
 20395  1CF6  0858               	movf	menu_Main@data+1,w
 20396  1CF7  0087               	movwf	7
 20397  1CF8  314A               	addfsr 1,10
 20398  1CF9  3000               	movlw	0
 20399  1CFA  3FC0               	movwi [0]fsr1
 20400  1CFB  3FC1               	movwi [1]fsr1
 20401                           
 20402                           ;menu_task.c: 142: data->noholdCount = 0;
 20403  1CFC  0857               	movf	menu_Main@data,w
 20404  1CFD  0086               	movwf	6
 20405  1CFE  0858               	movf	menu_Main@data+1,w
 20406  1CFF  0087               	movwf	7
 20407  1D00  314C               	addfsr 1,12
 20408  1D01  3000               	movlw	0
 20409  1D02  3FC0               	movwi [0]fsr1
 20410  1D03  3FC1               	movwi [1]fsr1
 20411                           
 20412                           ;menu_task.c: 143: break;
 20413  1D04  0008               	return
 20414  1D05                     l9071:	
 20415                           ;menu_task.c: 144: case 8:
 20416                           
 20417                           
 20418                           ;menu_task.c: 145: if (data->holdCountY == 0){
 20419  1D05  0857               	movf	menu_Main@data,w
 20420  1D06  0086               	movwf	6
 20421  1D07  0858               	movf	menu_Main@data+1,w
 20422  1D08  0087               	movwf	7
 20423  1D09  314A               	addfsr 1,10
 20424  1D0A  0016               	moviw fsr1++
 20425  1D0B  0401               	iorwf	1,w
 20426  1D0C  1D03               	btfss	3,2
 20427  1D0D  2D15               	goto	l9075
 20428                           
 20429                           ;menu_task.c: 146: menu_run_option(data);
 20430  1D0E  0858               	movf	menu_Main@data+1,w
 20431  1D0F  00BC               	movwf	menu_run_option@data+1
 20432  1D10  0857               	movf	menu_Main@data,w
 20433  1D11  00BB               	movwf	menu_run_option@data
 20434  1D12  31AB  2311  319B   	fcall	_menu_run_option
 20435  1D15                     l9075:	
 20436                           
 20437                           ;menu_task.c: 147: }
 20438                           ;menu_task.c: 148: data->holdCountA = 0;
 20439  1D15  0020               	movlb	0	; select bank0
 20440  1D16  0857               	movf	menu_Main@data,w
 20441  1D17  0086               	movwf	6
 20442  1D18  0858               	movf	menu_Main@data+1,w
 20443  1D19  0087               	movwf	7
 20444  1D1A  3144               	addfsr 1,4
 20445  1D1B  3000               	movlw	0
 20446  1D1C  3FC0               	movwi [0]fsr1
 20447  1D1D  3FC1               	movwi [1]fsr1
 20448                           
 20449                           ;menu_task.c: 149: data->holdCountB = 0;
 20450  1D1E  0857               	movf	menu_Main@data,w
 20451  1D1F  0086               	movwf	6
 20452  1D20  0858               	movf	menu_Main@data+1,w
 20453  1D21  0087               	movwf	7
 20454  1D22  3146               	addfsr 1,6
 20455  1D23  3000               	movlw	0
 20456  1D24  3FC0               	movwi [0]fsr1
 20457  1D25  3FC1               	movwi [1]fsr1
 20458                           
 20459                           ;menu_task.c: 150: data->holdCountX = 0;
 20460  1D26  0857               	movf	menu_Main@data,w
 20461  1D27  0086               	movwf	6
 20462  1D28  0858               	movf	menu_Main@data+1,w
 20463  1D29  0087               	movwf	7
 20464  1D2A  3148               	addfsr 1,8
 20465  1D2B  3000               	movlw	0
 20466  1D2C  3FC0               	movwi [0]fsr1
 20467  1D2D  3FC1               	movwi [1]fsr1
 20468                           
 20469                           ;menu_task.c: 151: data->holdCountY += 1;
 20470  1D2E  0857               	movf	menu_Main@data,w
 20471  1D2F  0086               	movwf	6
 20472  1D30  0858               	movf	menu_Main@data+1,w
 20473  1D31  0087               	movwf	7
 20474  1D32  314A               	addfsr 1,10
 20475  1D33  3001               	movlw	1
 20476  1D34  0781               	addwf	1,f
 20477  1D35  3141               	addfsr 1,1
 20478  1D36  1803               	skipnc
 20479  1D37  0A81               	incf	1,f
 20480                           
 20481                           ;menu_task.c: 152: data->noholdCount = 0;
 20482  1D38  0857               	movf	menu_Main@data,w
 20483  1D39  0086               	movwf	6
 20484  1D3A  0858               	movf	menu_Main@data+1,w
 20485  1D3B  0087               	movwf	7
 20486  1D3C  314C               	addfsr 1,12
 20487  1D3D  3000               	movlw	0
 20488  1D3E  3FC0               	movwi [0]fsr1
 20489  1D3F  3FC1               	movwi [1]fsr1
 20490                           
 20491                           ;menu_task.c: 153: break;
 20492  1D40  0008               	return
 20493  1D41                     l9085:	
 20494                           ;menu_task.c: 155: default:
 20495                           
 20496                           ;menu_task.c: 154: case 1 | 2 | 8:
 20497                           
 20498                           
 20499                           ;menu_task.c: 156: menu_display_option(data);
 20500  1D41  0858               	movf	menu_Main@data+1,w
 20501  1D42  00CD               	movwf	menu_display_option@data+1
 20502  1D43  0857               	movf	menu_Main@data,w
 20503  1D44  00CC               	movwf	menu_display_option@data
 20504  1D45  31AD  25A0  319B   	fcall	_menu_display_option
 20505                           
 20506                           ;menu_task.c: 157: data->holdCountA = 0;
 20507  1D48  0020               	movlb	0	; select bank0
 20508  1D49  0857               	movf	menu_Main@data,w
 20509  1D4A  0086               	movwf	6
 20510  1D4B  0858               	movf	menu_Main@data+1,w
 20511  1D4C  0087               	movwf	7
 20512  1D4D  3144               	addfsr 1,4
 20513  1D4E  3000               	movlw	0
 20514  1D4F  3FC0               	movwi [0]fsr1
 20515  1D50  3FC1               	movwi [1]fsr1
 20516                           
 20517                           ;menu_task.c: 158: data->holdCountB = 0;
 20518  1D51  0857               	movf	menu_Main@data,w
 20519  1D52  0086               	movwf	6
 20520  1D53  0858               	movf	menu_Main@data+1,w
 20521  1D54  0087               	movwf	7
 20522  1D55  3146               	addfsr 1,6
 20523  1D56  3000               	movlw	0
 20524  1D57  3FC0               	movwi [0]fsr1
 20525  1D58  3FC1               	movwi [1]fsr1
 20526                           
 20527                           ;menu_task.c: 159: data->holdCountX = 0;
 20528  1D59  0857               	movf	menu_Main@data,w
 20529  1D5A  0086               	movwf	6
 20530  1D5B  0858               	movf	menu_Main@data+1,w
 20531  1D5C  0087               	movwf	7
 20532  1D5D  3148               	addfsr 1,8
 20533  1D5E  3000               	movlw	0
 20534  1D5F  3FC0               	movwi [0]fsr1
 20535  1D60  3FC1               	movwi [1]fsr1
 20536                           
 20537                           ;menu_task.c: 160: data->holdCountY = 0;
 20538  1D61  0857               	movf	menu_Main@data,w
 20539  1D62  0086               	movwf	6
 20540  1D63  0858               	movf	menu_Main@data+1,w
 20541  1D64  0087               	movwf	7
 20542  1D65  314A               	addfsr 1,10
 20543  1D66  3000               	movlw	0
 20544  1D67  3FC0               	movwi [0]fsr1
 20545  1D68  3FC1               	movwi [1]fsr1
 20546                           
 20547                           ;menu_task.c: 161: data->noholdCount += 1;
 20548  1D69  0857               	movf	menu_Main@data,w
 20549  1D6A  0086               	movwf	6
 20550  1D6B  0858               	movf	menu_Main@data+1,w
 20551  1D6C  0087               	movwf	7
 20552  1D6D  314C               	addfsr 1,12
 20553  1D6E  3001               	movlw	1
 20554  1D6F  0781               	addwf	1,f
 20555  1D70  3141               	addfsr 1,1
 20556  1D71  1803               	skipnc
 20557  1D72  0A81               	incf	1,f
 20558                           
 20559                           ;menu_task.c: 162: }
 20560  1D73  0008               	return
 20561  1D74                     l9097:	
 20562  1D74  0856               	movf	menu_Main@buttonPressed,w
 20563                           
 20564                           ; Switch size 1, requested type "space"
 20565                           ; Number of cases is 5, Range of values is 1 to 11
 20566                           ; switch strategies available:
 20567                           ; Name         Instructions Cycles
 20568                           ; simple_byte           16     9 (average)
 20569                           ; direct_byte           31     9 (fixed)
 20570                           ; jumptable            263     9 (fixed)
 20571                           ;	Chosen strategy is simple_byte
 20572  1D75  3A01               	xorlw	1	; case 1
 20573  1D76  1903               	skipnz
 20574  1D77  2C1B               	goto	l9015
 20575  1D78  3A03               	xorlw	3	; case 2
 20576  1D79  1903               	skipnz
 20577  1D7A  2C68               	goto	l9035
 20578  1D7B  3A06               	xorlw	6	; case 4
 20579  1D7C  1903               	skipnz
 20580  1D7D  2CC4               	goto	l9055
 20581  1D7E  3A0C               	xorlw	12	; case 8
 20582  1D7F  1903               	skipnz
 20583  1D80  2D05               	goto	l9071
 20584  1D81  3A03               	xorlw	3	; case 11
 20585  1D82  1903               	skipnz
 20586  1D83  2D41               	goto	l9085
 20587  1D84  2D41               	goto	l9085
 20588  1D85  0008               	return
 20589  1D86                     __end_of_menu_Main:	
 20590                           
 20591                           	psect	text18
 20592  0819                     __ptext18:	
 20593 ;; *************** function _flashy_Main *****************
 20594 ;; Defined at:
 20595 ;;		line 122 in file "flashy_task.c"
 20596 ;; Parameters:    Size  Location     Type
 20597 ;;  taskData        2   50[BANK0 ] PTR void 
 20598 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20599 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20600 ;; Auto vars:     Size  Location     Type
 20601 ;;  hit_counter     6   54[BANK0 ] unsigned char [6]
 20602 ;;  data            2   62[BANK0 ] PTR struct t_flashy_task
 20603 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20604 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20605 ;;  buttonPresse    2   60[BANK0 ] unsigned int 
 20606 ;; Return value:  Size  Location     Type
 20607 ;;                  1    wreg      void 
 20608 ;; Registers used:
 20609 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20610 ;; Tracked objects:
 20611 ;;		On entry : 0/0
 20612 ;;		On exit  : 0/0
 20613 ;;		Unchanged: 0/0
 20614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20615 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20616 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20617 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20618 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20619 ;;Total ram usage:       14 bytes
 20620 ;; Hardware stack levels used:    1
 20621 ;; Hardware stack levels required when called:   11
 20622 ;; This function calls:
 20623 ;;		_flashy_display_option
 20624 ;;		_led_Parody
 20625 ;;		_led_circle
 20626 ;;		_led_curtain
 20627 ;;		_led_rand
 20628 ;;		_led_roundabout
 20629 ;;		_let_alternate
 20630 ;;		_marquee
 20631 ;;		_nullifyBadge_buttonsGet
 20632 ;;		_nullifyBadge_irGet
 20633 ;;		_nullifyBadge_irTxClr
 20634 ;;		_nullifyBadge_irTxRegister
 20635 ;;		_nullifyBadge_irTxRelease
 20636 ;;		_nullifyBadge_irTxSet
 20637 ;;		_nullifyBadge_segDisplayForceUpdate
 20638 ;;		_nullifyBadge_segDisplayPutStr
 20639 ;;		_nullifyBadge_userLedsSet
 20640 ;;		_sprintf
 20641 ;; This function is called by:
 20642 ;;		_main
 20643 ;;		_scheduler_TaskRun
 20644 ;; This function uses a non-reentrant model
 20645 ;;
 20646                           
 20647                           
 20648                           ;psect for function _flashy_Main
 20649  0819                     _flashy_Main:	
 20650                           
 20651                           ;flashy_task.c: 123: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskD
      +                          ata;
 20652                           
 20653                           ;incstack = 0
 20654                           ; Regs used in _flashy_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20655  0819  0020               	movlb	0	; select bank0
 20656  081A  0853               	movf	flashy_Main@taskData+1,w
 20657  081B  00DF               	movwf	flashy_Main@data+1
 20658  081C  0852               	movf	flashy_Main@taskData,w
 20659  081D  00DE               	movwf	flashy_Main@data
 20660                           
 20661                           ;flashy_task.c: 124: u16 buttonPressed;
 20662                           ;flashy_task.c: 125: char hit_counter[6];
 20663                           ;flashy_task.c: 127: if ( currentTask != FLASHY_TASK ){
 20664  081E  3002               	movlw	2
 20665  081F  0021               	movlb	1	; select bank1
 20666  0820  063A               	xorwf	_currentTask^(0+128),w
 20667  0821  043B               	iorwf	(_currentTask+1)^(0+128),w
 20668  0822  1903               	btfsc	3,2
 20669  0823  28C6               	goto	l9135
 20670                           
 20671                           ;flashy_task.c: 128: data->holdCountA = 1;
 20672  0824  0020               	movlb	0	; select bank0
 20673  0825  085E               	movf	flashy_Main@data,w
 20674  0826  0086               	movwf	6
 20675  0827  085F               	movf	flashy_Main@data+1,w
 20676  0828  0087               	movwf	7
 20677  0829  314A               	addfsr 1,10
 20678  082A  3001               	movlw	1
 20679  082B  3FC0               	movwi [0]fsr1
 20680  082C  3000               	movlw	0
 20681  082D  3FC1               	movwi [1]fsr1
 20682                           
 20683                           ;flashy_task.c: 129: data->holdCountB = 1;
 20684  082E  085E               	movf	flashy_Main@data,w
 20685  082F  0086               	movwf	6
 20686  0830  085F               	movf	flashy_Main@data+1,w
 20687  0831  0087               	movwf	7
 20688  0832  314C               	addfsr 1,12
 20689  0833  3001               	movlw	1
 20690  0834  3FC0               	movwi [0]fsr1
 20691  0835  3000               	movlw	0
 20692  0836  3FC1               	movwi [1]fsr1
 20693                           
 20694                           ;flashy_task.c: 130: data->holdCountX = 1;
 20695  0837  085E               	movf	flashy_Main@data,w
 20696  0838  0086               	movwf	6
 20697  0839  085F               	movf	flashy_Main@data+1,w
 20698  083A  0087               	movwf	7
 20699  083B  314E               	addfsr 1,14
 20700  083C  3001               	movlw	1
 20701  083D  3FC0               	movwi [0]fsr1
 20702  083E  3000               	movlw	0
 20703  083F  3FC1               	movwi [1]fsr1
 20704                           
 20705                           ;flashy_task.c: 131: data->holdCountY = 1;
 20706  0840  085E               	movf	flashy_Main@data,w
 20707  0841  0086               	movwf	6
 20708  0842  085F               	movf	flashy_Main@data+1,w
 20709  0843  0087               	movwf	7
 20710  0844  3150               	addfsr 1,16
 20711  0845  3001               	movlw	1
 20712  0846  3FC0               	movwi [0]fsr1
 20713  0847  3000               	movlw	0
 20714  0848  3FC1               	movwi [1]fsr1
 20715                           
 20716                           ;flashy_task.c: 132: data->holdCountXY = 1;
 20717  0849  085E               	movf	flashy_Main@data,w
 20718  084A  0086               	movwf	6
 20719  084B  085F               	movf	flashy_Main@data+1,w
 20720  084C  0087               	movwf	7
 20721  084D  3152               	addfsr 1,18
 20722  084E  3001               	movlw	1
 20723  084F  3FC0               	movwi [0]fsr1
 20724  0850  3000               	movlw	0
 20725  0851  3FC1               	movwi [1]fsr1
 20726                           
 20727                           ;flashy_task.c: 133: data->holdCountAY = 1;
 20728  0852  085E               	movf	flashy_Main@data,w
 20729  0853  0086               	movwf	6
 20730  0854  085F               	movf	flashy_Main@data+1,w
 20731  0855  0087               	movwf	7
 20732  0856  3154               	addfsr 1,20
 20733  0857  3001               	movlw	1
 20734  0858  3FC0               	movwi [0]fsr1
 20735  0859  3000               	movlw	0
 20736  085A  3FC1               	movwi [1]fsr1
 20737                           
 20738                           ;flashy_task.c: 134: data->holdCountAX = 1;
 20739  085B  085E               	movf	flashy_Main@data,w
 20740  085C  0086               	movwf	6
 20741  085D  085F               	movf	flashy_Main@data+1,w
 20742  085E  0087               	movwf	7
 20743  085F  3156               	addfsr 1,22
 20744  0860  3001               	movlw	1
 20745  0861  3FC0               	movwi [0]fsr1
 20746  0862  3000               	movlw	0
 20747  0863  3FC1               	movwi [1]fsr1
 20748                           
 20749                           ;flashy_task.c: 135: return;
 20750  0864  0008               	return
 20751  0865                     l9107:	
 20752                           ;flashy_task.c: 142: case SECRET_VALUE_TEST:
 20753                           
 20754                           ;flashy_task.c: 141: break;
 20755                           
 20756                           ;flashy_task.c: 140: case SECRET_VALUE_INIT:
 20757                           
 20758                           ;flashy_task.c: 136: }
 20759                           ;flashy_task.c: 139: switch (secret_value){
 20760                           
 20761                           
 20762                           ;flashy_task.c: 143: secret_value = SECRET_VALUE_INIT;
 20763  0865  0021               	movlb	1	; select bank1
 20764  0866  01C5               	clrf	_secret_value^(0+128)
 20765  0867  01C6               	clrf	(_secret_value+1)^(0+128)
 20766                           
 20767                           ;flashy_task.c: 144: data->displayTickCount = 0;
 20768  0868  0020               	movlb	0	; select bank0
 20769  0869  085E               	movf	flashy_Main@data,w
 20770  086A  0086               	movwf	6
 20771  086B  085F               	movf	flashy_Main@data+1,w
 20772  086C  0087               	movwf	7
 20773  086D  3144               	addfsr 1,4
 20774  086E  3000               	movlw	0
 20775  086F  3FC0               	movwi [0]fsr1
 20776  0870  3FC1               	movwi [1]fsr1
 20777                           
 20778                           ;flashy_task.c: 145: data->display_state = FLASHY_STATE_DISPLAY_SECRET_TEST;
 20779  0871  085E               	movf	flashy_Main@data,w
 20780  0872  3E06               	addlw	6
 20781  0873  00D4               	movwf	??_flashy_Main
 20782  0874  3000               	movlw	0
 20783  0875  3D5F               	addwfc	flashy_Main@data+1,w
 20784  0876  00D5               	movwf	??_flashy_Main+1
 20785  0877  0854               	movf	??_flashy_Main,w
 20786  0878  0086               	movwf	6
 20787  0879  0855               	movf	??_flashy_Main+1,w
 20788  087A  0087               	movwf	7
 20789  087B  3005               	movlw	5
 20790  087C  0081               	movwf	1
 20791                           
 20792                           ;flashy_task.c: 147: data->holdCountA = 1;
 20793  087D  085E               	movf	flashy_Main@data,w
 20794  087E  0086               	movwf	6
 20795  087F  085F               	movf	flashy_Main@data+1,w
 20796  0880  0087               	movwf	7
 20797  0881  314A               	addfsr 1,10
 20798  0882  3001               	movlw	1
 20799  0883  3FC0               	movwi [0]fsr1
 20800  0884  3000               	movlw	0
 20801  0885  3FC1               	movwi [1]fsr1
 20802                           
 20803                           ;flashy_task.c: 148: data->holdCountB = 1;
 20804  0886  085E               	movf	flashy_Main@data,w
 20805  0887  0086               	movwf	6
 20806  0888  085F               	movf	flashy_Main@data+1,w
 20807  0889  0087               	movwf	7
 20808  088A  314C               	addfsr 1,12
 20809  088B  3001               	movlw	1
 20810  088C  3FC0               	movwi [0]fsr1
 20811  088D  3000               	movlw	0
 20812  088E  3FC1               	movwi [1]fsr1
 20813                           
 20814                           ;flashy_task.c: 149: data->holdCountX = 1;
 20815  088F  085E               	movf	flashy_Main@data,w
 20816  0890  0086               	movwf	6
 20817  0891  085F               	movf	flashy_Main@data+1,w
 20818  0892  0087               	movwf	7
 20819  0893  314E               	addfsr 1,14
 20820  0894  3001               	movlw	1
 20821  0895  3FC0               	movwi [0]fsr1
 20822  0896  3000               	movlw	0
 20823  0897  3FC1               	movwi [1]fsr1
 20824                           
 20825                           ;flashy_task.c: 150: data->holdCountY = 1;
 20826  0898  085E               	movf	flashy_Main@data,w
 20827  0899  0086               	movwf	6
 20828  089A  085F               	movf	flashy_Main@data+1,w
 20829  089B  0087               	movwf	7
 20830  089C  3150               	addfsr 1,16
 20831  089D  3001               	movlw	1
 20832  089E  3FC0               	movwi [0]fsr1
 20833  089F  3000               	movlw	0
 20834  08A0  3FC1               	movwi [1]fsr1
 20835                           
 20836                           ;flashy_task.c: 151: data->holdCountXY = 1;
 20837  08A1  085E               	movf	flashy_Main@data,w
 20838  08A2  0086               	movwf	6
 20839  08A3  085F               	movf	flashy_Main@data+1,w
 20840  08A4  0087               	movwf	7
 20841  08A5  3152               	addfsr 1,18
 20842  08A6  3001               	movlw	1
 20843  08A7  3FC0               	movwi [0]fsr1
 20844  08A8  3000               	movlw	0
 20845  08A9  3FC1               	movwi [1]fsr1
 20846                           
 20847                           ;flashy_task.c: 152: data->holdCountAY = 1;
 20848  08AA  085E               	movf	flashy_Main@data,w
 20849  08AB  0086               	movwf	6
 20850  08AC  085F               	movf	flashy_Main@data+1,w
 20851  08AD  0087               	movwf	7
 20852  08AE  3154               	addfsr 1,20
 20853  08AF  3001               	movlw	1
 20854  08B0  3FC0               	movwi [0]fsr1
 20855  08B1  3000               	movlw	0
 20856  08B2  3FC1               	movwi [1]fsr1
 20857                           
 20858                           ;flashy_task.c: 153: data->holdCountAX = 1;
 20859  08B3  085E               	movf	flashy_Main@data,w
 20860  08B4  0086               	movwf	6
 20861  08B5  085F               	movf	flashy_Main@data+1,w
 20862  08B6  0087               	movwf	7
 20863  08B7  3156               	addfsr 1,22
 20864  08B8  3001               	movlw	1
 20865  08B9  3FC0               	movwi [0]fsr1
 20866  08BA  3000               	movlw	0
 20867  08BB  3FC1               	movwi [1]fsr1
 20868                           
 20869                           ;flashy_task.c: 154: data->noholdCount = 1;
 20870  08BC  085E               	movf	flashy_Main@data,w
 20871  08BD  0086               	movwf	6
 20872  08BE  085F               	movf	flashy_Main@data+1,w
 20873  08BF  0087               	movwf	7
 20874  08C0  315C               	addfsr 1,28
 20875  08C1  3001               	movlw	1
 20876  08C2  3FC0               	movwi [0]fsr1
 20877  08C3  3000               	movlw	0
 20878  08C4  3FC1               	movwi [1]fsr1
 20879                           
 20880                           ;flashy_task.c: 155: return;
 20881  08C5  0008               	return
 20882  08C6                     l9135:	
 20883                           ;flashy_task.c: 157: }
 20884                           
 20885                           ;flashy_task.c: 156: break;
 20886                           
 20887                           
 20888                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20889                           ; Switch size 1, requested type "space"
 20890                           ; Number of cases is 1, Range of values is 0 to 0
 20891                           ; switch strategies available:
 20892                           ; Name         Instructions Cycles
 20893                           ; simple_byte            4     3 (average)
 20894                           ; direct_byte            8     6 (fixed)
 20895                           ; jumptable            260     6 (fixed)
 20896                           ;	Chosen strategy is simple_byte
 20897  08C6  0021               	movlb	1	; select bank1
 20898  08C7  0846               	movf	(_secret_value+1)^(0+128),w
 20899  08C8  3A00               	xorlw	0	; case 0
 20900  08C9  1903               	skipnz
 20901  08CA  28CC               	goto	l10827
 20902  08CB  29C4               	goto	l9205
 20903  08CC                     l10827:	
 20904                           
 20905                           ; Switch size 1, requested type "space"
 20906                           ; Number of cases is 2, Range of values is 0 to 1
 20907                           ; switch strategies available:
 20908                           ; Name         Instructions Cycles
 20909                           ; simple_byte            7     4 (average)
 20910                           ; direct_byte           10     6 (fixed)
 20911                           ; jumptable            260     6 (fixed)
 20912                           ;	Chosen strategy is simple_byte
 20913  08CC  0845               	movf	_secret_value^(0+128),w
 20914  08CD  3A00               	xorlw	0	; case 0
 20915  08CE  1903               	skipnz
 20916  08CF  29C4               	goto	l9205
 20917  08D0  3A01               	xorlw	1	; case 1
 20918  08D1  1903               	skipnz
 20919  08D2  2865               	goto	l9107
 20920  08D3  29C4               	goto	l9205
 20921                           
 20922                           ;flashy_task.c: 160: switch (data->led_state){
 20923  08D4  29C4               	goto	l9205
 20924  08D5                     l9137:	
 20925                           ;flashy_task.c: 161: case FLASHY_STATE_LED_ROUNDABOUT:
 20926                           
 20927                           
 20928                           ;flashy_task.c: 162: if (data->delayTickCount == 0){
 20929  08D5  0020               	movlb	0	; select bank0
 20930  08D6  085E               	movf	flashy_Main@data,w
 20931  08D7  0086               	movwf	6
 20932  08D8  085F               	movf	flashy_Main@data+1,w
 20933  08D9  0087               	movwf	7
 20934  08DA  3141               	addfsr 1,1
 20935  08DB  0016               	moviw fsr1++
 20936  08DC  0401               	iorwf	1,w
 20937  08DD  1D03               	btfss	3,2
 20938  08DE  29B8               	goto	L7
 20939                           
 20940                           ;flashy_task.c: 163: led_roundabout(flashy_leds_idx);
 20941  08DF  0021               	movlb	1	; select bank1
 20942  08E0  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20943  08E1  0020               	movlb	0	; select bank0
 20944  08E2  00B1               	movwf	led_roundabout@counter+1
 20945  08E3  0021               	movlb	1	; select bank1
 20946  08E4  0832               	movf	_flashy_leds_idx^(0+128),w
 20947  08E5  0020               	movlb	0	; select bank0
 20948  08E6  00B0               	movwf	led_roundabout@counter
 20949  08E7  31A8  20E5  3188   	fcall	_led_roundabout
 20950                           
 20951                           ;flashy_task.c: 164: flashy_leds_idx += 1;
 20952  08EA  3001               	movlw	1
 20953  08EB  0021               	movlb	1	; select bank1
 20954  08EC  07B2               	addwf	_flashy_leds_idx^(0+128),f
 20955  08ED  3000               	movlw	0
 20956  08EE  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 20957                           
 20958                           ;flashy_task.c: 165: data->delayTickCount = 35;
 20959  08EF  0020               	movlb	0	; select bank0
 20960  08F0  085E               	movf	flashy_Main@data,w
 20961  08F1  0086               	movwf	6
 20962  08F2  085F               	movf	flashy_Main@data+1,w
 20963  08F3  0087               	movwf	7
 20964  08F4  3141               	addfsr 1,1
 20965  08F5  3023               	movlw	35
 20966  08F6  3FC0               	movwi [0]fsr1
 20967  08F7  3000               	movlw	0
 20968  08F8  3FC1               	movwi [1]fsr1
 20969                           
 20970                           ;flashy_task.c: 166: }
 20971  08F9  2A5E               	goto	l9235
 20972  08FA                     l9147:	
 20973                           ;flashy_task.c: 171: case FLASHY_STATE_LED_SHOT:
 20974                           
 20975                           ;flashy_task.c: 169: }
 20976                           ;flashy_task.c: 170: break;
 20977                           
 20978                           ;flashy_task.c: 167: else {
 20979                           ;flashy_task.c: 168: data->delayTickCount -= 1;
 20980                           
 20981                           
 20982                           ;flashy_task.c: 172: if (data->delayTickCount == 0){
 20983  08FA  085E               	movf	flashy_Main@data,w
 20984  08FB  0086               	movwf	6
 20985  08FC  085F               	movf	flashy_Main@data+1,w
 20986  08FD  0087               	movwf	7
 20987  08FE  3141               	addfsr 1,1
 20988  08FF  0016               	moviw fsr1++
 20989  0900  0401               	iorwf	1,w
 20990  0901  1D03               	btfss	3,2
 20991  0902  29B8               	goto	L7
 20992                           
 20993                           ;flashy_task.c: 173: led_curtain(flashy_leds_idx);
 20994  0903  0021               	movlb	1	; select bank1
 20995  0904  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20996  0905  0020               	movlb	0	; select bank0
 20997  0906  00B1               	movwf	led_curtain@counter+1
 20998  0907  0021               	movlb	1	; select bank1
 20999  0908  0832               	movf	_flashy_leds_idx^(0+128),w
 21000  0909  0020               	movlb	0	; select bank0
 21001  090A  00B0               	movwf	led_curtain@counter
 21002  090B  31A8  20A4  3188   	fcall	_led_curtain
 21003                           
 21004                           ;flashy_task.c: 174: flashy_leds_idx += 1;
 21005  090E  3001               	movlw	1
 21006  090F  0021               	movlb	1	; select bank1
 21007  0910  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21008  0911  3000               	movlw	0
 21009  0912  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21010                           
 21011                           ;flashy_task.c: 175: data->delayTickCount = 5;
 21012  0913  0020               	movlb	0	; select bank0
 21013  0914  085E               	movf	flashy_Main@data,w
 21014  0915  0086               	movwf	6
 21015  0916  085F               	movf	flashy_Main@data+1,w
 21016  0917  0087               	movwf	7
 21017  0918  3141               	addfsr 1,1
 21018  0919  3005               	movlw	5
 21019  091A  3FC0               	movwi [0]fsr1
 21020  091B  3000               	movlw	0
 21021  091C  3FC1               	movwi [1]fsr1
 21022                           
 21023                           ;flashy_task.c: 176: }
 21024  091D  2A5E               	goto	l9235
 21025  091E                     l9157:	
 21026                           ;flashy_task.c: 181: case FLASHY_STATE_SPARKLE:
 21027                           
 21028                           ;flashy_task.c: 179: }
 21029                           ;flashy_task.c: 180: break;
 21030                           
 21031                           ;flashy_task.c: 177: else {
 21032                           ;flashy_task.c: 178: data->delayTickCount -= 1;
 21033                           
 21034                           
 21035                           ;flashy_task.c: 182: if (data->delayTickCount < 1){
 21036  091E  085E               	movf	flashy_Main@data,w
 21037  091F  0086               	movwf	6
 21038  0920  085F               	movf	flashy_Main@data+1,w
 21039  0921  0087               	movwf	7
 21040  0922  3141               	addfsr 1,1
 21041  0923  0016               	moviw fsr1++
 21042  0924  0401               	iorwf	1,w
 21043  0925  1D03               	btfss	3,2
 21044  0926  29B7               	goto	l9201
 21045                           
 21046                           ;flashy_task.c: 183: led_rand();
 21047  0927  31AA  2238  3188   	fcall	_led_rand
 21048                           
 21049                           ;flashy_task.c: 184: data->delayTickCount = flashy_sparkle_rate;
 21050  092A  0020               	movlb	0	; select bank0
 21051  092B  085E               	movf	flashy_Main@data,w
 21052  092C  0086               	movwf	6
 21053  092D  085F               	movf	flashy_Main@data+1,w
 21054  092E  0087               	movwf	7
 21055  092F  3141               	addfsr 1,1
 21056  0930  0021               	movlb	1	; select bank1
 21057  0931  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21058  0932  3FC0               	movwi [0]fsr1
 21059  0933  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21060  0934  3FC1               	movwi [1]fsr1
 21061  0935  2A5E               	goto	l9235
 21062  0936                     l9165:	
 21063                           ;flashy_task.c: 190: case FLASHY_STATE_CIRCLE:
 21064                           
 21065                           ;flashy_task.c: 188: }
 21066                           ;flashy_task.c: 189: break;
 21067                           
 21068                           ;flashy_task.c: 186: else {
 21069                           ;flashy_task.c: 187: data->delayTickCount -= 1;
 21070                           
 21071                           ;flashy_task.c: 185: }
 21072                           
 21073                           
 21074                           ;flashy_task.c: 191: if (data->delayTickCount ==0 ){
 21075  0936  085E               	movf	flashy_Main@data,w
 21076  0937  0086               	movwf	6
 21077  0938  085F               	movf	flashy_Main@data+1,w
 21078  0939  0087               	movwf	7
 21079  093A  3141               	addfsr 1,1
 21080  093B  0016               	moviw fsr1++
 21081  093C  0401               	iorwf	1,w
 21082  093D  1D03               	btfss	3,2
 21083  093E  29B7               	goto	l9201
 21084                           
 21085                           ;flashy_task.c: 192: if (flashy_leds_idx == 1024 ){
 21086  093F  3004               	movlw	4
 21087  0940  0021               	movlb	1	; select bank1
 21088  0941  0633               	xorwf	(_flashy_leds_idx+1)^(0+128),w
 21089  0942  0432               	iorwf	_flashy_leds_idx^(0+128),w
 21090  0943  1D03               	btfss	3,2
 21091  0944  2949               	goto	l9171
 21092                           
 21093                           ;flashy_task.c: 193: flashy_leds_idx = flashy_leds_idx << 1;
 21094  0945  3532               	lslf	_flashy_leds_idx^(0+128),w
 21095  0946  00B2               	movwf	_flashy_leds_idx^(0+128)
 21096  0947  0D33               	rlf	(_flashy_leds_idx+1)^(0+128),w
 21097  0948  00B3               	movwf	(_flashy_leds_idx+1)^(0+128)
 21098  0949                     l9171:	
 21099                           
 21100                           ;flashy_task.c: 194: }
 21101                           ;flashy_task.c: 195: led_circle(flashy_leds_idx);
 21102  0949  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21103  094A  0020               	movlb	0	; select bank0
 21104  094B  00B1               	movwf	led_circle@count+1
 21105  094C  0021               	movlb	1	; select bank1
 21106  094D  0832               	movf	_flashy_leds_idx^(0+128),w
 21107  094E  0020               	movlb	0	; select bank0
 21108  094F  00B0               	movwf	led_circle@count
 21109  0950  31B2  225C  3188   	fcall	_led_circle
 21110                           
 21111                           ;flashy_task.c: 196: if (flashy_leds_idx < 1 ){
 21112  0953  0021               	movlb	1	; select bank1
 21113  0954  0832               	movf	_flashy_leds_idx^(0+128),w
 21114  0955  0433               	iorwf	(_flashy_leds_idx+1)^(0+128),w
 21115  0956  1D03               	btfss	3,2
 21116  0957  295D               	goto	l9177
 21117                           
 21118                           ;flashy_task.c: 197: flashy_leds_idx = 1;
 21119  0958  3001               	movlw	1
 21120  0959  00B2               	movwf	_flashy_leds_idx^(0+128)
 21121  095A  3000               	movlw	0
 21122  095B  00B3               	movwf	(_flashy_leds_idx^(0+128)+1)
 21123                           
 21124                           ;flashy_task.c: 198: break;
 21125  095C  2A5E               	goto	l9235
 21126  095D                     l9177:	
 21127                           
 21128                           ;flashy_task.c: 199: }
 21129                           ;flashy_task.c: 200: flashy_leds_idx = flashy_leds_idx << 1;
 21130  095D  3532               	lslf	_flashy_leds_idx^(0+128),w
 21131  095E  00B2               	movwf	_flashy_leds_idx^(0+128)
 21132  095F  0D33               	rlf	(_flashy_leds_idx+1)^(0+128),w
 21133  0960  00B3               	movwf	(_flashy_leds_idx+1)^(0+128)
 21134                           
 21135                           ;flashy_task.c: 202: data->delayTickCount = flashy_sparkle_rate;
 21136  0961  0020               	movlb	0	; select bank0
 21137  0962  085E               	movf	flashy_Main@data,w
 21138  0963  0086               	movwf	6
 21139  0964  085F               	movf	flashy_Main@data+1,w
 21140  0965  0087               	movwf	7
 21141  0966  3141               	addfsr 1,1
 21142  0967  0021               	movlb	1	; select bank1
 21143  0968  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21144  0969  3FC0               	movwi [0]fsr1
 21145  096A  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21146  096B  3FC1               	movwi [1]fsr1
 21147  096C  2A5E               	goto	l9235
 21148  096D                     l9183:	
 21149                           ;flashy_task.c: 208: case FLASHY_STATE_LED_ALT:
 21150                           
 21151                           ;flashy_task.c: 206: }
 21152                           ;flashy_task.c: 207: break;
 21153                           
 21154                           ;flashy_task.c: 204: else {
 21155                           ;flashy_task.c: 205: data->delayTickCount -= 1;
 21156                           
 21157                           ;flashy_task.c: 203: }
 21158                           
 21159                           
 21160                           ;flashy_task.c: 209: if (data->delayTickCount == 0){
 21161  096D  085E               	movf	flashy_Main@data,w
 21162  096E  0086               	movwf	6
 21163  096F  085F               	movf	flashy_Main@data+1,w
 21164  0970  0087               	movwf	7
 21165  0971  3141               	addfsr 1,1
 21166  0972  0016               	moviw fsr1++
 21167  0973  0401               	iorwf	1,w
 21168  0974  1D03               	btfss	3,2
 21169  0975  29B7               	goto	l9201
 21170                           
 21171                           ;flashy_task.c: 210: let_alternate(flashy_leds_idx);
 21172  0976  0021               	movlb	1	; select bank1
 21173  0977  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21174  0978  0020               	movlb	0	; select bank0
 21175  0979  00B1               	movwf	let_alternate@count+1
 21176  097A  0021               	movlb	1	; select bank1
 21177  097B  0832               	movf	_flashy_leds_idx^(0+128),w
 21178  097C  0020               	movlb	0	; select bank0
 21179  097D  00B0               	movwf	let_alternate@count
 21180  097E  31B3  23AC  3188   	fcall	_let_alternate
 21181                           
 21182                           ;flashy_task.c: 211: flashy_leds_idx += 1;
 21183  0981  3001               	movlw	1
 21184  0982  0021               	movlb	1	; select bank1
 21185  0983  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21186  0984  3000               	movlw	0
 21187  0985  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21188                           
 21189                           ;flashy_task.c: 212: data->delayTickCount = flashy_sparkle_rate;
 21190  0986  0020               	movlb	0	; select bank0
 21191  0987  085E               	movf	flashy_Main@data,w
 21192  0988  0086               	movwf	6
 21193  0989  085F               	movf	flashy_Main@data+1,w
 21194  098A  0087               	movwf	7
 21195  098B  3141               	addfsr 1,1
 21196  098C  0021               	movlb	1	; select bank1
 21197  098D  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21198  098E  3FC0               	movwi [0]fsr1
 21199  098F  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21200  0990  3FC1               	movwi [1]fsr1
 21201  0991  2A5E               	goto	l9235
 21202  0992                     l9193:	
 21203                           ;flashy_task.c: 218: case FLASHY_STATE_LED_PARODY:
 21204                           
 21205                           ;flashy_task.c: 216: }
 21206                           ;flashy_task.c: 217: break;
 21207                           
 21208                           ;flashy_task.c: 214: else {
 21209                           ;flashy_task.c: 215: data->delayTickCount -= 1;
 21210                           
 21211                           ;flashy_task.c: 213: }
 21212                           
 21213                           
 21214                           ;flashy_task.c: 219: if (data->delayTickCount == 0){
 21215  0992  085E               	movf	flashy_Main@data,w
 21216  0993  0086               	movwf	6
 21217  0994  085F               	movf	flashy_Main@data+1,w
 21218  0995  0087               	movwf	7
 21219  0996  3141               	addfsr 1,1
 21220  0997  0016               	moviw fsr1++
 21221  0998  0401               	iorwf	1,w
 21222  0999  1D03               	btfss	3,2
 21223  099A  29B7               	goto	l9201
 21224                           
 21225                           ;flashy_task.c: 220: led_Parody(flashy_leds_idx);
 21226  099B  0021               	movlb	1	; select bank1
 21227  099C  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21228  099D  0020               	movlb	0	; select bank0
 21229  099E  00B1               	movwf	led_Parody@count+1
 21230  099F  0021               	movlb	1	; select bank1
 21231  09A0  0832               	movf	_flashy_leds_idx^(0+128),w
 21232  09A1  0020               	movlb	0	; select bank0
 21233  09A2  00B0               	movwf	led_Parody@count
 21234  09A3  31AE  26C8  3188   	fcall	_led_Parody
 21235                           
 21236                           ;flashy_task.c: 221: flashy_leds_idx += 1;
 21237  09A6  3001               	movlw	1
 21238  09A7  0021               	movlb	1	; select bank1
 21239  09A8  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21240  09A9  3000               	movlw	0
 21241  09AA  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21242                           
 21243                           ;flashy_task.c: 222: data->delayTickCount = flashy_sparkle_rate;
 21244  09AB  0020               	movlb	0	; select bank0
 21245  09AC  085E               	movf	flashy_Main@data,w
 21246  09AD  0086               	movwf	6
 21247  09AE  085F               	movf	flashy_Main@data+1,w
 21248  09AF  0087               	movwf	7
 21249  09B0  3141               	addfsr 1,1
 21250  09B1  0021               	movlb	1	; select bank1
 21251  09B2  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21252  09B3  3FC0               	movwi [0]fsr1
 21253  09B4  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21254  09B5  3FC1               	movwi [1]fsr1
 21255                           
 21256                           ;flashy_task.c: 223: }
 21257  09B6  2A5E               	goto	l9235
 21258  09B7                     l9201:	
 21259                           
 21260                           ;flashy_task.c: 224: else {
 21261                           ;flashy_task.c: 225: data->delayTickCount -= 1;
 21262  09B7  0020               	movlb	0	; select bank0
 21263  09B8                     L7:	
 21264  09B8  085E               	movf	flashy_Main@data,w
 21265  09B9  0086               	movwf	6
 21266  09BA  085F               	movf	flashy_Main@data+1,w
 21267  09BB  0087               	movwf	7
 21268  09BC  3141               	addfsr 1,1
 21269  09BD  3001               	movlw	1
 21270  09BE  0281               	subwf	1,f
 21271  09BF  3141               	addfsr 1,1
 21272  09C0  3000               	movlw	0
 21273  09C1  3B81               	subwfb	1,f
 21274  09C2  317F               	addfsr 1,-1
 21275                           
 21276                           ;flashy_task.c: 229: }
 21277                           
 21278                           ;flashy_task.c: 226: }
 21279                           ;flashy_task.c: 227: break;
 21280  09C3  2A5E               	goto	l9235
 21281  09C4                     l9205:	
 21282  09C4  0020               	movlb	0	; select bank0
 21283  09C5  085E               	movf	flashy_Main@data,w
 21284  09C6  0086               	movwf	6
 21285  09C7  085F               	movf	flashy_Main@data+1,w
 21286  09C8  0087               	movwf	7
 21287  09C9  3143               	addfsr 1,3
 21288  09CA  0801               	movf	1,w
 21289                           
 21290                           ; Switch size 1, requested type "space"
 21291                           ; Number of cases is 6, Range of values is 0 to 5
 21292                           ; switch strategies available:
 21293                           ; Name         Instructions Cycles
 21294                           ; direct_byte           18     6 (fixed)
 21295                           ; simple_byte           19    10 (average)
 21296                           ; jumptable            260     6 (fixed)
 21297                           ;	Chosen strategy is direct_byte
 21298  09CB  0084               	movwf	4
 21299  09CC  3006               	movlw	6
 21300  09CD  0204               	subwf	4,w
 21301  09CE  1803               	skipnc
 21302  09CF  2A5E               	goto	l9235
 21303  09D0  31B0               	movlp	high S10829
 21304  09D1  3504               	lslf	4,w
 21305  09D2  3E00               	addlw	low S10829
 21306  09D3  0082               	movwf	2
 21307                           
 21308                           ;flashy_task.c: 232: switch (data->display_state){
 21309  09D4  2A5E               	goto	l9235
 21310  09D5                     l9207:	
 21311                           ;flashy_task.c: 233: case FLASHY_STATE_DISPLAY_BLASTER:
 21312                           
 21313                           
 21314                           ;flashy_task.c: 234: nullifyBadge_segDisplayPutStr(data->badge, "PEW ");
 21315  09D5  30E5               	movlw	low (STR_40| (0+32768))
 21316  09D6  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21317  09D7  30BB               	movlw	high (STR_40| (0+32768))
 21318  09D8  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21319  09D9  085E               	movf	flashy_Main@data,w
 21320  09DA  0086               	movwf	6
 21321  09DB  085F               	movf	flashy_Main@data+1,w
 21322  09DC  0087               	movwf	7
 21323  09DD  0801               	movf	1,w
 21324  09DE  31B2  2279  3188   	fcall	_nullifyBadge_segDisplayPutStr
 21325                           
 21326                           ;flashy_task.c: 235: nullifyBadge_segDisplayForceUpdate(data->badge);
 21327  09E1  0020               	movlb	0	; select bank0
 21328  09E2  085E               	movf	flashy_Main@data,w
 21329  09E3  0086               	movwf	6
 21330  09E4  085F               	movf	flashy_Main@data+1,w
 21331  09E5  0087               	movwf	7
 21332  09E6  0801               	movf	1,w
 21333  09E7  31B2  2237  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 21334  09EA  2A52               	goto	L10
 21335  09EB                     l9213:	
 21336                           ;flashy_task.c: 238: case FLASHY_STATE_DISPLAY_SHOT:
 21337                           
 21338                           ;flashy_task.c: 237: break;
 21339                           
 21340                           ;flashy_task.c: 236: data->displayTickCount += 1;
 21341                           
 21342                           
 21343                           ;flashy_task.c: 239: sprintf((char *)hit_counter, "%4d", deaths);
 21344  09EB  3056               	movlw	low flashy_Main@hit_counter
 21345  09EC  00AF               	movwf	sprintf@sp
 21346  09ED  3000               	movlw	high flashy_Main@hit_counter
 21347  09EE  00B0               	movwf	sprintf@sp+1
 21348  09EF  30FE               	movlw	low (STR_41| (0+32768))
 21349  09F0  00B1               	movwf	sprintf@f
 21350  09F1  30BB               	movlw	high (STR_41| (0+32768))
 21351  09F2  00B2               	movwf	sprintf@f+1
 21352  09F3  0021               	movlb	1	; select bank1
 21353  09F4  082B               	movf	(_deaths+1)^(0+128),w
 21354  09F5  0020               	movlb	0	; select bank0
 21355  09F6  00B4               	movwf	?_sprintf+5
 21356  09F7  0021               	movlb	1	; select bank1
 21357  09F8  082A               	movf	_deaths^(0+128),w
 21358  09F9  0020               	movlb	0	; select bank0
 21359  09FA  00B3               	movwf	?_sprintf+4
 21360  09FB  3199  21C2  3188   	fcall	_sprintf
 21361                           
 21362                           ;flashy_task.c: 241: nullifyBadge_segDisplayPutStr(data->badge, hit_counter);
 21363  09FE  3056               	movlw	low flashy_Main@hit_counter
 21364  09FF  0020               	movlb	0	; select bank0
 21365  0A00  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21366  0A01  3000               	movlw	high flashy_Main@hit_counter
 21367  0A02  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21368  0A03  085E               	movf	flashy_Main@data,w
 21369  0A04  0086               	movwf	6
 21370  0A05  085F               	movf	flashy_Main@data+1,w
 21371  0A06  0087               	movwf	7
 21372  0A07  0801               	movf	1,w
 21373  0A08  31B2  2279  3188   	fcall	_nullifyBadge_segDisplayPutStr
 21374                           
 21375                           ;flashy_task.c: 242: nullifyBadge_segDisplayForceUpdate(data->badge);
 21376  0A0B  0020               	movlb	0	; select bank0
 21377  0A0C  085E               	movf	flashy_Main@data,w
 21378  0A0D  0086               	movwf	6
 21379  0A0E  085F               	movf	flashy_Main@data+1,w
 21380  0A0F  0087               	movwf	7
 21381  0A10  0801               	movf	1,w
 21382  0A11  31B2  2237  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 21383                           
 21384                           ;flashy_task.c: 243: if (data->displayTickCount == 150){
 21385  0A14  0020               	movlb	0	; select bank0
 21386  0A15  085E               	movf	flashy_Main@data,w
 21387  0A16  0086               	movwf	6
 21388  0A17  085F               	movf	flashy_Main@data+1,w
 21389  0A18  0087               	movwf	7
 21390  0A19  3144               	addfsr 1,4
 21391  0A1A  0016               	moviw fsr1++
 21392  0A1B  3A96               	xorlw	150
 21393  0A1C  00D4               	movwf	??_flashy_Main
 21394  0A1D  0016               	moviw fsr1++
 21395  0A1E  04D4               	iorwf	??_flashy_Main,f
 21396  0A1F  1D03               	btfss	3,2
 21397  0A20  2A53               	goto	L9
 21398                           
 21399                           ;flashy_task.c: 244: data->displayTickCount = 0;
 21400  0A21  085E               	movf	flashy_Main@data,w
 21401  0A22  0086               	movwf	6
 21402  0A23  085F               	movf	flashy_Main@data+1,w
 21403  0A24  0087               	movwf	7
 21404  0A25  3144               	addfsr 1,4
 21405  0A26  3000               	movlw	0
 21406  0A27  3FC0               	movwi [0]fsr1
 21407  0A28  3FC1               	movwi [1]fsr1
 21408                           
 21409                           ;flashy_task.c: 245: data->display_state = 35;
 21410  0A29  085E               	movf	flashy_Main@data,w
 21411  0A2A  3E06               	addlw	6
 21412  0A2B  00D4               	movwf	??_flashy_Main
 21413  0A2C  3000               	movlw	0
 21414  0A2D  3D5F               	addwfc	flashy_Main@data+1,w
 21415  0A2E  00D5               	movwf	??_flashy_Main+1
 21416  0A2F  0854               	movf	??_flashy_Main,w
 21417  0A30  0086               	movwf	6
 21418  0A31  0855               	movf	??_flashy_Main+1,w
 21419  0A32  0087               	movwf	7
 21420  0A33  3023               	movlw	35
 21421  0A34  0081               	movwf	1
 21422  0A35  2A53               	goto	L9
 21423  0A36                     l9225:	
 21424                           ;flashy_task.c: 249: case FLASHY_STATE_DISPLAY_SECRET_TEST:
 21425                           
 21426                           ;flashy_task.c: 248: break;
 21427                           
 21428                           ;flashy_task.c: 246: }
 21429                           ;flashy_task.c: 247: data->displayTickCount += 1;
 21430                           
 21431                           
 21432                           ;flashy_task.c: 250: marquee(FLASHY_TEXT_SECRET_TEST, data->displayTickCount);
 21433  0A36  0021               	movlb	1	; select bank1
 21434  0A37  0855               	movf	(_FLASHY_TEXT_SECRET_TEST+1)^(0+128),w
 21435  0A38  0020               	movlb	0	; select bank0
 21436  0A39  00BB               	movwf	marquee@string+1
 21437  0A3A  0021               	movlb	1	; select bank1
 21438  0A3B  0854               	movf	_FLASHY_TEXT_SECRET_TEST^(0+128),w
 21439  0A3C  0020               	movlb	0	; select bank0
 21440  0A3D  00BA               	movwf	marquee@string
 21441  0A3E  085E               	movf	flashy_Main@data,w
 21442  0A3F  0086               	movwf	6
 21443  0A40  085F               	movf	flashy_Main@data+1,w
 21444  0A41  0087               	movwf	7
 21445  0A42  3144               	addfsr 1,4
 21446  0A43  3F40               	moviw [0]fsr1
 21447  0A44  00BC               	movwf	marquee@count
 21448  0A45  3F41               	moviw [1]fsr1
 21449  0A46  00BD               	movwf	marquee@count+1
 21450  0A47  31A2  22D2  3188   	fcall	_marquee
 21451  0A4A  2A52               	goto	L10
 21452  0A4B                     l9229:	
 21453                           ;flashy_task.c: 255: default:
 21454                           
 21455                           ;flashy_task.c: 253: case FLASHY_STATE_DISPLAY:
 21456                           
 21457                           ;flashy_task.c: 252: break;
 21458                           
 21459                           ;flashy_task.c: 251: data->displayTickCount += 1;
 21460                           
 21461                           
 21462                           ;flashy_task.c: 256: flashy_display_option(data);
 21463  0A4B  085F               	movf	flashy_Main@data+1,w
 21464  0A4C  00CD               	movwf	flashy_display_option@data+1
 21465  0A4D  085E               	movf	flashy_Main@data,w
 21466  0A4E  00CC               	movwf	flashy_display_option@data
 21467  0A4F  31A2  2200  3188   	fcall	_flashy_display_option
 21468  0A52                     L10:	
 21469                           
 21470                           ;flashy_task.c: 257: data->displayTickCount += 1;
 21471  0A52  0020               	movlb	0	; select bank0
 21472  0A53                     L9:	
 21473  0A53  085E               	movf	flashy_Main@data,w
 21474  0A54  0086               	movwf	6
 21475  0A55  085F               	movf	flashy_Main@data+1,w
 21476  0A56  0087               	movwf	7
 21477  0A57  3144               	addfsr 1,4
 21478  0A58  3001               	movlw	1
 21479  0A59  0781               	addwf	1,f
 21480  0A5A  3141               	addfsr 1,1
 21481  0A5B  1803               	skipnc
 21482  0A5C  0A81               	incf	1,f
 21483                           
 21484                           ;flashy_task.c: 259: }
 21485                           
 21486                           ;flashy_task.c: 258: break;
 21487  0A5D  2A72               	goto	l9237
 21488  0A5E                     l9235:	
 21489  0A5E  0020               	movlb	0	; select bank0
 21490  0A5F  085E               	movf	flashy_Main@data,w
 21491  0A60  0086               	movwf	6
 21492  0A61  085F               	movf	flashy_Main@data+1,w
 21493  0A62  0087               	movwf	7
 21494  0A63  3146               	addfsr 1,6
 21495  0A64  0801               	movf	1,w
 21496                           
 21497                           ; Switch size 1, requested type "space"
 21498                           ; Number of cases is 4, Range of values is 0 to 5
 21499                           ; switch strategies available:
 21500                           ; Name         Instructions Cycles
 21501                           ; simple_byte           13     7 (average)
 21502                           ; direct_byte           18     6 (fixed)
 21503                           ; jumptable            260     6 (fixed)
 21504                           ;	Chosen strategy is simple_byte
 21505  0A65  3A00               	xorlw	0	; case 0
 21506  0A66  1903               	skipnz
 21507  0A67  2A4B               	goto	l9229
 21508  0A68  3A02               	xorlw	2	; case 2
 21509  0A69  1903               	skipnz
 21510  0A6A  29D5               	goto	l9207
 21511  0A6B  3A01               	xorlw	1	; case 3
 21512  0A6C  1903               	skipnz
 21513  0A6D  29EB               	goto	l9213
 21514  0A6E  3A06               	xorlw	6	; case 5
 21515  0A6F  1903               	skipnz
 21516  0A70  2A36               	goto	l9225
 21517  0A71  2A4B               	goto	l9229
 21518  0A72                     l9237:	
 21519                           
 21520                           ;flashy_task.c: 262: buttonPressed = nullifyBadge_buttonsGet();
 21521  0A72  31B6  264B  3188   	fcall	_nullifyBadge_buttonsGet
 21522  0A75  0020               	movlb	0	; select bank0
 21523  0A76  00D4               	movwf	??_flashy_Main
 21524  0A77  01D5               	clrf	??_flashy_Main+1
 21525  0A78  0854               	movf	??_flashy_Main,w
 21526  0A79  00DC               	movwf	flashy_Main@buttonPressed
 21527  0A7A  0855               	movf	??_flashy_Main+1,w
 21528  0A7B  00DD               	movwf	flashy_Main@buttonPressed+1
 21529                           
 21530                           ;flashy_task.c: 263: switch (buttonPressed) {
 21531  0A7C  2F36               	goto	l9497
 21532  0A7D                     l9239:	
 21533                           ;flashy_task.c: 264: case 4 | 8:
 21534                           
 21535                           
 21536                           ;flashy_task.c: 265: if (data->holdCountXY == 0 ){
 21537  0A7D  085E               	movf	flashy_Main@data,w
 21538  0A7E  0086               	movwf	6
 21539  0A7F  085F               	movf	flashy_Main@data+1,w
 21540  0A80  0087               	movwf	7
 21541  0A81  3152               	addfsr 1,18
 21542  0A82  0016               	moviw fsr1++
 21543  0A83  0401               	iorwf	1,w
 21544  0A84  1D03               	btfss	3,2
 21545  0A85  2A8C               	goto	l9243
 21546                           
 21547                           ;flashy_task.c: 267: data->display_state = FLASHY_STATE_DISPLAY;
 21548  0A86  085E               	movf	flashy_Main@data,w
 21549  0A87  0086               	movwf	6
 21550  0A88  085F               	movf	flashy_Main@data+1,w
 21551  0A89  0087               	movwf	7
 21552  0A8A  3146               	addfsr 1,6
 21553  0A8B  0181               	clrf	1
 21554  0A8C                     l9243:	
 21555                           
 21556                           ;flashy_task.c: 268: }
 21557                           ;flashy_task.c: 270: data->holdCountA = 0;
 21558  0A8C  085E               	movf	flashy_Main@data,w
 21559  0A8D  0086               	movwf	6
 21560  0A8E  085F               	movf	flashy_Main@data+1,w
 21561  0A8F  0087               	movwf	7
 21562  0A90  314A               	addfsr 1,10
 21563  0A91  3000               	movlw	0
 21564  0A92  3FC0               	movwi [0]fsr1
 21565  0A93  3FC1               	movwi [1]fsr1
 21566                           
 21567                           ;flashy_task.c: 271: data->holdCountB = 0;
 21568  0A94  085E               	movf	flashy_Main@data,w
 21569  0A95  0086               	movwf	6
 21570  0A96  085F               	movf	flashy_Main@data+1,w
 21571  0A97  0087               	movwf	7
 21572  0A98  314C               	addfsr 1,12
 21573  0A99  3000               	movlw	0
 21574  0A9A  3FC0               	movwi [0]fsr1
 21575  0A9B  3FC1               	movwi [1]fsr1
 21576                           
 21577                           ;flashy_task.c: 272: data->holdCountX = 0;
 21578  0A9C  085E               	movf	flashy_Main@data,w
 21579  0A9D  0086               	movwf	6
 21580  0A9E  085F               	movf	flashy_Main@data+1,w
 21581  0A9F  0087               	movwf	7
 21582  0AA0  314E               	addfsr 1,14
 21583  0AA1  3000               	movlw	0
 21584  0AA2  3FC0               	movwi [0]fsr1
 21585  0AA3  3FC1               	movwi [1]fsr1
 21586                           
 21587                           ;flashy_task.c: 273: data->holdCountY = 0;
 21588  0AA4  085E               	movf	flashy_Main@data,w
 21589  0AA5  0086               	movwf	6
 21590  0AA6  085F               	movf	flashy_Main@data+1,w
 21591  0AA7  0087               	movwf	7
 21592  0AA8  3150               	addfsr 1,16
 21593  0AA9  3000               	movlw	0
 21594  0AAA  3FC0               	movwi [0]fsr1
 21595  0AAB  3FC1               	movwi [1]fsr1
 21596                           
 21597                           ;flashy_task.c: 274: data->holdCountXY += 1;
 21598  0AAC  085E               	movf	flashy_Main@data,w
 21599  0AAD  0086               	movwf	6
 21600  0AAE  085F               	movf	flashy_Main@data+1,w
 21601  0AAF  0087               	movwf	7
 21602  0AB0  3152               	addfsr 1,18
 21603  0AB1  3001               	movlw	1
 21604  0AB2  0781               	addwf	1,f
 21605  0AB3  3141               	addfsr 1,1
 21606  0AB4  1803               	skipnc
 21607  0AB5  0A81               	incf	1,f
 21608                           
 21609                           ;flashy_task.c: 275: data->holdCountAY = 0;
 21610  0AB6  085E               	movf	flashy_Main@data,w
 21611  0AB7  0086               	movwf	6
 21612  0AB8  085F               	movf	flashy_Main@data+1,w
 21613  0AB9  0087               	movwf	7
 21614  0ABA  3154               	addfsr 1,20
 21615  0ABB  3000               	movlw	0
 21616  0ABC  3FC0               	movwi [0]fsr1
 21617  0ABD  3FC1               	movwi [1]fsr1
 21618                           
 21619                           ;flashy_task.c: 276: data->holdCountAX = 0;
 21620  0ABE  085E               	movf	flashy_Main@data,w
 21621  0ABF  0086               	movwf	6
 21622  0AC0  085F               	movf	flashy_Main@data+1,w
 21623  0AC1  0087               	movwf	7
 21624  0AC2  3156               	addfsr 1,22
 21625  0AC3  3000               	movlw	0
 21626  0AC4  3FC0               	movwi [0]fsr1
 21627  0AC5  3FC1               	movwi [1]fsr1
 21628                           
 21629                           ;flashy_task.c: 277: data->holdCountBX = 0;
 21630  0AC6  085E               	movf	flashy_Main@data,w
 21631  0AC7  0086               	movwf	6
 21632  0AC8  085F               	movf	flashy_Main@data+1,w
 21633  0AC9  0087               	movwf	7
 21634  0ACA  3158               	addfsr 1,24
 21635  0ACB  3000               	movlw	0
 21636  0ACC  3FC0               	movwi [0]fsr1
 21637  0ACD  3FC1               	movwi [1]fsr1
 21638                           
 21639                           ;flashy_task.c: 278: data->holdCountBY = 0;
 21640  0ACE  085E               	movf	flashy_Main@data,w
 21641  0ACF  0086               	movwf	6
 21642  0AD0  085F               	movf	flashy_Main@data+1,w
 21643  0AD1  0087               	movwf	7
 21644  0AD2  315A               	addfsr 1,26
 21645  0AD3  3000               	movlw	0
 21646  0AD4  3FC0               	movwi [0]fsr1
 21647  0AD5  3FC1               	movwi [1]fsr1
 21648                           
 21649                           ;flashy_task.c: 279: data->noholdCount = 0;
 21650  0AD6  085E               	movf	flashy_Main@data,w
 21651  0AD7  0086               	movwf	6
 21652  0AD8  085F               	movf	flashy_Main@data+1,w
 21653  0AD9  0087               	movwf	7
 21654  0ADA  315C               	addfsr 1,28
 21655  0ADB  3000               	movlw	0
 21656  0ADC  3FC0               	movwi [0]fsr1
 21657  0ADD  3FC1               	movwi [1]fsr1
 21658                           
 21659                           ;flashy_task.c: 280: break;
 21660  0ADE  2FC9               	goto	l9527
 21661  0ADF                     l9263:	
 21662                           ;flashy_task.c: 281: case 1 | 8:
 21663                           
 21664                           
 21665                           ;flashy_task.c: 282: if ( data->holdCountAY == 0 ){
 21666  0ADF  085E               	movf	flashy_Main@data,w
 21667  0AE0  0086               	movwf	6
 21668  0AE1  085F               	movf	flashy_Main@data+1,w
 21669  0AE2  0087               	movwf	7
 21670  0AE3  3154               	addfsr 1,20
 21671  0AE4  0016               	moviw fsr1++
 21672  0AE5  0401               	iorwf	1,w
 21673  0AE6  1D03               	btfss	3,2
 21674  0AE7  2AF8               	goto	l9269
 21675                           
 21676                           ;flashy_task.c: 283: if (flashy_sparkle_rate > 1000){
 21677  0AE8  3003               	movlw	3
 21678  0AE9  0021               	movlb	1	; select bank1
 21679  0AEA  022F               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 21680  0AEB  30E9               	movlw	233
 21681  0AEC  1903               	skipnz
 21682  0AED  022E               	subwf	_flashy_sparkle_rate^(0+128),w
 21683  0AEE  1C03               	skipc
 21684  0AEF  2AF4               	goto	l1147
 21685                           
 21686                           ;flashy_task.c: 284: flashy_sparkle_rate = 1000;
 21687  0AF0  30E8               	movlw	232
 21688  0AF1  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 21689  0AF2  3003               	movlw	3
 21690  0AF3  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 21691  0AF4                     l1147:	
 21692                           
 21693                           ;flashy_task.c: 285: }
 21694                           ;flashy_task.c: 286: flashy_sparkle_rate += 5;
 21695  0AF4  3005               	movlw	5
 21696  0AF5  07AE               	addwf	_flashy_sparkle_rate^(0+128),f
 21697  0AF6  3000               	movlw	0
 21698  0AF7  3DAF               	addwfc	(_flashy_sparkle_rate+1)^(0+128),f
 21699  0AF8                     l9269:	
 21700                           
 21701                           ;flashy_task.c: 287: }
 21702                           ;flashy_task.c: 289: data->holdCountA = 0;
 21703  0AF8  0020               	movlb	0	; select bank0
 21704  0AF9  085E               	movf	flashy_Main@data,w
 21705  0AFA  0086               	movwf	6
 21706  0AFB  085F               	movf	flashy_Main@data+1,w
 21707  0AFC  0087               	movwf	7
 21708  0AFD  314A               	addfsr 1,10
 21709  0AFE  3000               	movlw	0
 21710  0AFF  3FC0               	movwi [0]fsr1
 21711  0B00  3FC1               	movwi [1]fsr1
 21712                           
 21713                           ;flashy_task.c: 290: data->holdCountB = 0;
 21714  0B01  085E               	movf	flashy_Main@data,w
 21715  0B02  0086               	movwf	6
 21716  0B03  085F               	movf	flashy_Main@data+1,w
 21717  0B04  0087               	movwf	7
 21718  0B05  314C               	addfsr 1,12
 21719  0B06  3000               	movlw	0
 21720  0B07  3FC0               	movwi [0]fsr1
 21721  0B08  3FC1               	movwi [1]fsr1
 21722                           
 21723                           ;flashy_task.c: 291: data->holdCountX = 0;
 21724  0B09  085E               	movf	flashy_Main@data,w
 21725  0B0A  0086               	movwf	6
 21726  0B0B  085F               	movf	flashy_Main@data+1,w
 21727  0B0C  0087               	movwf	7
 21728  0B0D  314E               	addfsr 1,14
 21729  0B0E  3000               	movlw	0
 21730  0B0F  3FC0               	movwi [0]fsr1
 21731  0B10  3FC1               	movwi [1]fsr1
 21732                           
 21733                           ;flashy_task.c: 292: data->holdCountY = 0;
 21734  0B11  085E               	movf	flashy_Main@data,w
 21735  0B12  0086               	movwf	6
 21736  0B13  085F               	movf	flashy_Main@data+1,w
 21737  0B14  0087               	movwf	7
 21738  0B15  3150               	addfsr 1,16
 21739  0B16  3000               	movlw	0
 21740  0B17  3FC0               	movwi [0]fsr1
 21741  0B18  3FC1               	movwi [1]fsr1
 21742                           
 21743                           ;flashy_task.c: 293: data->holdCountXY = 0;
 21744  0B19  085E               	movf	flashy_Main@data,w
 21745  0B1A  0086               	movwf	6
 21746  0B1B  085F               	movf	flashy_Main@data+1,w
 21747  0B1C  0087               	movwf	7
 21748  0B1D  3152               	addfsr 1,18
 21749  0B1E  3000               	movlw	0
 21750  0B1F  3FC0               	movwi [0]fsr1
 21751  0B20  3FC1               	movwi [1]fsr1
 21752                           
 21753                           ;flashy_task.c: 294: data->holdCountAY += 1;
 21754  0B21  085E               	movf	flashy_Main@data,w
 21755  0B22  0086               	movwf	6
 21756  0B23  085F               	movf	flashy_Main@data+1,w
 21757  0B24  0087               	movwf	7
 21758  0B25  3154               	addfsr 1,20
 21759  0B26  3001               	movlw	1
 21760  0B27  0781               	addwf	1,f
 21761  0B28  3141               	addfsr 1,1
 21762  0B29  1803               	skipnc
 21763  0B2A  0A81               	incf	1,f
 21764                           
 21765                           ;flashy_task.c: 295: data->holdCountAX = 0;
 21766  0B2B  085E               	movf	flashy_Main@data,w
 21767  0B2C  0086               	movwf	6
 21768  0B2D  085F               	movf	flashy_Main@data+1,w
 21769  0B2E  0087               	movwf	7
 21770  0B2F  3156               	addfsr 1,22
 21771  0B30  3000               	movlw	0
 21772  0B31  3FC0               	movwi [0]fsr1
 21773  0B32  3FC1               	movwi [1]fsr1
 21774                           
 21775                           ;flashy_task.c: 296: data->holdCountBX = 0;
 21776  0B33  085E               	movf	flashy_Main@data,w
 21777  0B34  0086               	movwf	6
 21778  0B35  085F               	movf	flashy_Main@data+1,w
 21779  0B36  0087               	movwf	7
 21780  0B37  3158               	addfsr 1,24
 21781  0B38  3000               	movlw	0
 21782  0B39  3FC0               	movwi [0]fsr1
 21783  0B3A  3FC1               	movwi [1]fsr1
 21784                           
 21785                           ;flashy_task.c: 297: data->holdCountBY = 0;
 21786  0B3B  085E               	movf	flashy_Main@data,w
 21787  0B3C  0086               	movwf	6
 21788  0B3D  085F               	movf	flashy_Main@data+1,w
 21789  0B3E  0087               	movwf	7
 21790  0B3F  315A               	addfsr 1,26
 21791  0B40  3000               	movlw	0
 21792  0B41  3FC0               	movwi [0]fsr1
 21793  0B42  3FC1               	movwi [1]fsr1
 21794                           
 21795                           ;flashy_task.c: 298: data->noholdCount = 0;
 21796  0B43  085E               	movf	flashy_Main@data,w
 21797  0B44  0086               	movwf	6
 21798  0B45  085F               	movf	flashy_Main@data+1,w
 21799  0B46  0087               	movwf	7
 21800  0B47  315C               	addfsr 1,28
 21801  0B48  3000               	movlw	0
 21802  0B49  3FC0               	movwi [0]fsr1
 21803  0B4A  3FC1               	movwi [1]fsr1
 21804                           
 21805                           ;flashy_task.c: 299: break;
 21806  0B4B  2FC9               	goto	l9527
 21807  0B4C                     l9289:	
 21808                           ;flashy_task.c: 300: case 1 | 4:
 21809                           
 21810                           
 21811                           ;flashy_task.c: 301: if ( data->holdCountAX == 0 ){
 21812  0B4C  085E               	movf	flashy_Main@data,w
 21813  0B4D  0086               	movwf	6
 21814  0B4E  085F               	movf	flashy_Main@data+1,w
 21815  0B4F  0087               	movwf	7
 21816  0B50  3156               	addfsr 1,22
 21817  0B51  0016               	moviw fsr1++
 21818  0B52  0401               	iorwf	1,w
 21819  0B53  1D03               	btfss	3,2
 21820  0B54  2B65               	goto	l9295
 21821                           
 21822                           ;flashy_task.c: 302: if (flashy_sparkle_rate < 5)
 21823  0B55  3000               	movlw	0
 21824  0B56  0021               	movlb	1	; select bank1
 21825  0B57  022F               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 21826  0B58  3005               	movlw	5
 21827  0B59  1903               	skipnz
 21828  0B5A  022E               	subwf	_flashy_sparkle_rate^(0+128),w
 21829  0B5B  1803               	skipnc
 21830  0B5C  2B61               	goto	l1150
 21831                           
 21832                           ;flashy_task.c: 303: flashy_sparkle_rate=5;
 21833  0B5D  3005               	movlw	5
 21834  0B5E  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 21835  0B5F  3000               	movlw	0
 21836  0B60  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 21837  0B61                     l1150:	
 21838                           
 21839                           ;flashy_task.c: 304: flashy_sparkle_rate -= 5;
 21840  0B61  3005               	movlw	5
 21841  0B62  02AE               	subwf	_flashy_sparkle_rate^(0+128),f
 21842  0B63  3000               	movlw	0
 21843  0B64  3BAF               	subwfb	(_flashy_sparkle_rate+1)^(0+128),f
 21844  0B65                     l9295:	
 21845                           
 21846                           ;flashy_task.c: 305: }
 21847                           ;flashy_task.c: 307: data->holdCountA = 0;
 21848  0B65  0020               	movlb	0	; select bank0
 21849  0B66  085E               	movf	flashy_Main@data,w
 21850  0B67  0086               	movwf	6
 21851  0B68  085F               	movf	flashy_Main@data+1,w
 21852  0B69  0087               	movwf	7
 21853  0B6A  314A               	addfsr 1,10
 21854  0B6B  3000               	movlw	0
 21855  0B6C  3FC0               	movwi [0]fsr1
 21856  0B6D  3FC1               	movwi [1]fsr1
 21857                           
 21858                           ;flashy_task.c: 308: data->holdCountB = 0;
 21859  0B6E  085E               	movf	flashy_Main@data,w
 21860  0B6F  0086               	movwf	6
 21861  0B70  085F               	movf	flashy_Main@data+1,w
 21862  0B71  0087               	movwf	7
 21863  0B72  314C               	addfsr 1,12
 21864  0B73  3000               	movlw	0
 21865  0B74  3FC0               	movwi [0]fsr1
 21866  0B75  3FC1               	movwi [1]fsr1
 21867                           
 21868                           ;flashy_task.c: 309: data->holdCountX += 1;
 21869  0B76  085E               	movf	flashy_Main@data,w
 21870  0B77  0086               	movwf	6
 21871  0B78  085F               	movf	flashy_Main@data+1,w
 21872  0B79  0087               	movwf	7
 21873  0B7A  314E               	addfsr 1,14
 21874  0B7B  3001               	movlw	1
 21875  0B7C  0781               	addwf	1,f
 21876  0B7D  3141               	addfsr 1,1
 21877  0B7E  1803               	skipnc
 21878  0B7F  0A81               	incf	1,f
 21879                           
 21880                           ;flashy_task.c: 310: data->holdCountY = 0;
 21881  0B80  085E               	movf	flashy_Main@data,w
 21882  0B81  0086               	movwf	6
 21883  0B82  085F               	movf	flashy_Main@data+1,w
 21884  0B83  0087               	movwf	7
 21885  0B84  3150               	addfsr 1,16
 21886  0B85  3000               	movlw	0
 21887  0B86  3FC0               	movwi [0]fsr1
 21888  0B87  3FC1               	movwi [1]fsr1
 21889                           
 21890                           ;flashy_task.c: 311: data->holdCountXY = 0;
 21891  0B88  085E               	movf	flashy_Main@data,w
 21892  0B89  0086               	movwf	6
 21893  0B8A  085F               	movf	flashy_Main@data+1,w
 21894  0B8B  0087               	movwf	7
 21895  0B8C  3152               	addfsr 1,18
 21896  0B8D  3000               	movlw	0
 21897  0B8E  3FC0               	movwi [0]fsr1
 21898  0B8F  3FC1               	movwi [1]fsr1
 21899                           
 21900                           ;flashy_task.c: 312: data->holdCountAY = 0;
 21901  0B90  085E               	movf	flashy_Main@data,w
 21902  0B91  0086               	movwf	6
 21903  0B92  085F               	movf	flashy_Main@data+1,w
 21904  0B93  0087               	movwf	7
 21905  0B94  3154               	addfsr 1,20
 21906  0B95  3000               	movlw	0
 21907  0B96  3FC0               	movwi [0]fsr1
 21908  0B97  3FC1               	movwi [1]fsr1
 21909                           
 21910                           ;flashy_task.c: 313: data->holdCountAX += 1;
 21911  0B98  085E               	movf	flashy_Main@data,w
 21912  0B99  0086               	movwf	6
 21913  0B9A  085F               	movf	flashy_Main@data+1,w
 21914  0B9B  0087               	movwf	7
 21915  0B9C  3156               	addfsr 1,22
 21916  0B9D  3001               	movlw	1
 21917  0B9E  0781               	addwf	1,f
 21918  0B9F  3141               	addfsr 1,1
 21919  0BA0  1803               	skipnc
 21920  0BA1  0A81               	incf	1,f
 21921                           
 21922                           ;flashy_task.c: 314: data->holdCountBX = 0;
 21923  0BA2  085E               	movf	flashy_Main@data,w
 21924  0BA3  0086               	movwf	6
 21925  0BA4  085F               	movf	flashy_Main@data+1,w
 21926  0BA5  0087               	movwf	7
 21927  0BA6  3158               	addfsr 1,24
 21928  0BA7  3000               	movlw	0
 21929  0BA8  3FC0               	movwi [0]fsr1
 21930  0BA9  3FC1               	movwi [1]fsr1
 21931                           
 21932                           ;flashy_task.c: 315: data->holdCountBY = 0;
 21933  0BAA  085E               	movf	flashy_Main@data,w
 21934  0BAB  0086               	movwf	6
 21935  0BAC  085F               	movf	flashy_Main@data+1,w
 21936  0BAD  0087               	movwf	7
 21937  0BAE  315A               	addfsr 1,26
 21938  0BAF  3000               	movlw	0
 21939  0BB0  3FC0               	movwi [0]fsr1
 21940  0BB1  3FC1               	movwi [1]fsr1
 21941                           
 21942                           ;flashy_task.c: 316: data->noholdCount = 0;
 21943  0BB2  085E               	movf	flashy_Main@data,w
 21944  0BB3  0086               	movwf	6
 21945  0BB4  085F               	movf	flashy_Main@data+1,w
 21946  0BB5  0087               	movwf	7
 21947  0BB6  315C               	addfsr 1,28
 21948  0BB7  3000               	movlw	0
 21949  0BB8  3FC0               	movwi [0]fsr1
 21950  0BB9  3FC1               	movwi [1]fsr1
 21951                           
 21952                           ;flashy_task.c: 317: break;
 21953  0BBA  2FC9               	goto	l9527
 21954  0BBB                     l9315:	
 21955                           ;flashy_task.c: 318: case 2 | 8:
 21956                           
 21957                           
 21958                           ;flashy_task.c: 319: if (data->holdCountBY == 0){
 21959  0BBB  085E               	movf	flashy_Main@data,w
 21960  0BBC  0086               	movwf	6
 21961  0BBD  085F               	movf	flashy_Main@data+1,w
 21962  0BBE  0087               	movwf	7
 21963  0BBF  315A               	addfsr 1,26
 21964  0BC0  0016               	moviw fsr1++
 21965  0BC1  0401               	iorwf	1,w
 21966  0BC2  1D03               	btfss	3,2
 21967  0BC3  2BD8               	goto	l9325
 21968                           
 21969                           ;flashy_task.c: 320: if (flashy_option_idx == 0){
 21970  0BC4  0021               	movlb	1	; select bank1
 21971  0BC5  0828               	movf	_flashy_option_idx^(0+128),w
 21972  0BC6  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 21973  0BC7  1903               	btfsc	3,2
 21974  0BC8  2BD8               	goto	l9325
 21975                           
 21976                           ;flashy_task.c: 323: else {
 21977                           ;flashy_task.c: 324: if (flashy_scroll_rate > 150){
 21978                           
 21979                           ;flashy_task.c: 322: }
 21980  0BC9  3000               	movlw	0
 21981  0BCA  022D               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 21982  0BCB  3097               	movlw	151
 21983  0BCC  1903               	skipnz
 21984  0BCD  022C               	subwf	_flashy_scroll_rate^(0+128),w
 21985  0BCE  1C03               	skipc
 21986  0BCF  2BD4               	goto	l1155
 21987                           
 21988                           ;flashy_task.c: 325: flashy_scroll_rate =150;
 21989  0BD0  3096               	movlw	150
 21990  0BD1  00AC               	movwf	_flashy_scroll_rate^(0+128)
 21991  0BD2  3000               	movlw	0
 21992  0BD3  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 21993  0BD4                     l1155:	
 21994                           
 21995                           ;flashy_task.c: 326: }
 21996                           ;flashy_task.c: 327: flashy_scroll_rate +=2;
 21997  0BD4  3002               	movlw	2
 21998  0BD5  07AC               	addwf	_flashy_scroll_rate^(0+128),f
 21999  0BD6  3000               	movlw	0
 22000  0BD7  3DAD               	addwfc	(_flashy_scroll_rate+1)^(0+128),f
 22001  0BD8                     l9325:	
 22002                           
 22003                           ;flashy_task.c: 328: }
 22004                           ;flashy_task.c: 330: }
 22005                           ;flashy_task.c: 331: data->holdCountA = 0;
 22006  0BD8  0020               	movlb	0	; select bank0
 22007  0BD9  085E               	movf	flashy_Main@data,w
 22008  0BDA  0086               	movwf	6
 22009  0BDB  085F               	movf	flashy_Main@data+1,w
 22010  0BDC  0087               	movwf	7
 22011  0BDD  314A               	addfsr 1,10
 22012  0BDE  3000               	movlw	0
 22013  0BDF  3FC0               	movwi [0]fsr1
 22014  0BE0  3FC1               	movwi [1]fsr1
 22015                           
 22016                           ;flashy_task.c: 332: data->holdCountB += 1;
 22017  0BE1  085E               	movf	flashy_Main@data,w
 22018  0BE2  0086               	movwf	6
 22019  0BE3  085F               	movf	flashy_Main@data+1,w
 22020  0BE4  0087               	movwf	7
 22021  0BE5  314C               	addfsr 1,12
 22022  0BE6  3001               	movlw	1
 22023  0BE7  0781               	addwf	1,f
 22024  0BE8  3141               	addfsr 1,1
 22025  0BE9  1803               	skipnc
 22026  0BEA  0A81               	incf	1,f
 22027                           
 22028                           ;flashy_task.c: 333: data->holdCountX = 0;
 22029  0BEB  085E               	movf	flashy_Main@data,w
 22030  0BEC  0086               	movwf	6
 22031  0BED  085F               	movf	flashy_Main@data+1,w
 22032  0BEE  0087               	movwf	7
 22033  0BEF  314E               	addfsr 1,14
 22034  0BF0  3000               	movlw	0
 22035  0BF1  3FC0               	movwi [0]fsr1
 22036  0BF2  3FC1               	movwi [1]fsr1
 22037                           
 22038                           ;flashy_task.c: 334: data->holdCountY += 1;
 22039  0BF3  085E               	movf	flashy_Main@data,w
 22040  0BF4  0086               	movwf	6
 22041  0BF5  085F               	movf	flashy_Main@data+1,w
 22042  0BF6  0087               	movwf	7
 22043  0BF7  3150               	addfsr 1,16
 22044  0BF8  3001               	movlw	1
 22045  0BF9  0781               	addwf	1,f
 22046  0BFA  3141               	addfsr 1,1
 22047  0BFB  1803               	skipnc
 22048  0BFC  0A81               	incf	1,f
 22049                           
 22050                           ;flashy_task.c: 335: data->holdCountXY = 0;
 22051  0BFD  085E               	movf	flashy_Main@data,w
 22052  0BFE  0086               	movwf	6
 22053  0BFF  085F               	movf	flashy_Main@data+1,w
 22054  0C00  0087               	movwf	7
 22055  0C01  3152               	addfsr 1,18
 22056  0C02  3000               	movlw	0
 22057  0C03  3FC0               	movwi [0]fsr1
 22058  0C04  3FC1               	movwi [1]fsr1
 22059                           
 22060                           ;flashy_task.c: 336: data->holdCountAY = 0;
 22061  0C05  085E               	movf	flashy_Main@data,w
 22062  0C06  0086               	movwf	6
 22063  0C07  085F               	movf	flashy_Main@data+1,w
 22064  0C08  0087               	movwf	7
 22065  0C09  3154               	addfsr 1,20
 22066  0C0A  3000               	movlw	0
 22067  0C0B  3FC0               	movwi [0]fsr1
 22068  0C0C  3FC1               	movwi [1]fsr1
 22069                           
 22070                           ;flashy_task.c: 337: data->holdCountAX = 0;
 22071  0C0D  085E               	movf	flashy_Main@data,w
 22072  0C0E  0086               	movwf	6
 22073  0C0F  085F               	movf	flashy_Main@data+1,w
 22074  0C10  0087               	movwf	7
 22075  0C11  3156               	addfsr 1,22
 22076  0C12  3000               	movlw	0
 22077  0C13  3FC0               	movwi [0]fsr1
 22078  0C14  3FC1               	movwi [1]fsr1
 22079                           
 22080                           ;flashy_task.c: 338: data->holdCountBX = 0;
 22081  0C15  085E               	movf	flashy_Main@data,w
 22082  0C16  0086               	movwf	6
 22083  0C17  085F               	movf	flashy_Main@data+1,w
 22084  0C18  0087               	movwf	7
 22085  0C19  3158               	addfsr 1,24
 22086  0C1A  3000               	movlw	0
 22087  0C1B  3FC0               	movwi [0]fsr1
 22088  0C1C  3FC1               	movwi [1]fsr1
 22089                           
 22090                           ;flashy_task.c: 339: data->holdCountBY += 1;
 22091  0C1D  085E               	movf	flashy_Main@data,w
 22092  0C1E  0086               	movwf	6
 22093  0C1F  085F               	movf	flashy_Main@data+1,w
 22094  0C20  0087               	movwf	7
 22095  0C21  315A               	addfsr 1,26
 22096  0C22  3001               	movlw	1
 22097  0C23  0781               	addwf	1,f
 22098  0C24  3141               	addfsr 1,1
 22099  0C25  1803               	skipnc
 22100  0C26  0A81               	incf	1,f
 22101                           
 22102                           ;flashy_task.c: 340: data->noholdCount = 0;
 22103  0C27  085E               	movf	flashy_Main@data,w
 22104  0C28  0086               	movwf	6
 22105  0C29  085F               	movf	flashy_Main@data+1,w
 22106  0C2A  0087               	movwf	7
 22107  0C2B  315C               	addfsr 1,28
 22108  0C2C  3000               	movlw	0
 22109  0C2D  3FC0               	movwi [0]fsr1
 22110  0C2E  3FC1               	movwi [1]fsr1
 22111                           
 22112                           ;flashy_task.c: 341: break;
 22113  0C2F  2FC9               	goto	l9527
 22114  0C30                     l9345:	
 22115                           ;flashy_task.c: 342: case 2 | 4:
 22116                           
 22117                           
 22118                           ;flashy_task.c: 343: if (data-> holdCountBX == 0){
 22119  0C30  085E               	movf	flashy_Main@data,w
 22120  0C31  0086               	movwf	6
 22121  0C32  085F               	movf	flashy_Main@data+1,w
 22122  0C33  0087               	movwf	7
 22123  0C34  3158               	addfsr 1,24
 22124  0C35  0016               	moviw fsr1++
 22125  0C36  0401               	iorwf	1,w
 22126  0C37  1D03               	btfss	3,2
 22127  0C38  2C4D               	goto	l9355
 22128                           
 22129                           ;flashy_task.c: 344: if (flashy_option_idx == 0){
 22130  0C39  0021               	movlb	1	; select bank1
 22131  0C3A  0828               	movf	_flashy_option_idx^(0+128),w
 22132  0C3B  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 22133  0C3C  1903               	btfsc	3,2
 22134  0C3D  2C4D               	goto	l9355
 22135                           
 22136                           ;flashy_task.c: 347: else {
 22137                           ;flashy_task.c: 348: if (flashy_scroll_rate < 5){
 22138                           
 22139                           ;flashy_task.c: 346: }
 22140  0C3E  3000               	movlw	0
 22141  0C3F  022D               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 22142  0C40  3005               	movlw	5
 22143  0C41  1903               	skipnz
 22144  0C42  022C               	subwf	_flashy_scroll_rate^(0+128),w
 22145  0C43  1803               	skipnc
 22146  0C44  2C49               	goto	l1160
 22147                           
 22148                           ;flashy_task.c: 349: flashy_scroll_rate =5;
 22149  0C45  3005               	movlw	5
 22150  0C46  00AC               	movwf	_flashy_scroll_rate^(0+128)
 22151  0C47  3000               	movlw	0
 22152  0C48  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 22153  0C49                     l1160:	
 22154                           
 22155                           ;flashy_task.c: 350: }
 22156                           ;flashy_task.c: 351: flashy_scroll_rate -=3;
 22157  0C49  3003               	movlw	3
 22158  0C4A  02AC               	subwf	_flashy_scroll_rate^(0+128),f
 22159  0C4B  3000               	movlw	0
 22160  0C4C  3BAD               	subwfb	(_flashy_scroll_rate+1)^(0+128),f
 22161  0C4D                     l9355:	
 22162                           
 22163                           ;flashy_task.c: 352: }
 22164                           ;flashy_task.c: 354: }
 22165                           ;flashy_task.c: 355: data->holdCountA = 0;
 22166  0C4D  0020               	movlb	0	; select bank0
 22167  0C4E  085E               	movf	flashy_Main@data,w
 22168  0C4F  0086               	movwf	6
 22169  0C50  085F               	movf	flashy_Main@data+1,w
 22170  0C51  0087               	movwf	7
 22171  0C52  314A               	addfsr 1,10
 22172  0C53  3000               	movlw	0
 22173  0C54  3FC0               	movwi [0]fsr1
 22174  0C55  3FC1               	movwi [1]fsr1
 22175                           
 22176                           ;flashy_task.c: 356: data->holdCountB += 1;
 22177  0C56  085E               	movf	flashy_Main@data,w
 22178  0C57  0086               	movwf	6
 22179  0C58  085F               	movf	flashy_Main@data+1,w
 22180  0C59  0087               	movwf	7
 22181  0C5A  314C               	addfsr 1,12
 22182  0C5B  3001               	movlw	1
 22183  0C5C  0781               	addwf	1,f
 22184  0C5D  3141               	addfsr 1,1
 22185  0C5E  1803               	skipnc
 22186  0C5F  0A81               	incf	1,f
 22187                           
 22188                           ;flashy_task.c: 357: data->holdCountX += 1;
 22189  0C60  085E               	movf	flashy_Main@data,w
 22190  0C61  0086               	movwf	6
 22191  0C62  085F               	movf	flashy_Main@data+1,w
 22192  0C63  0087               	movwf	7
 22193  0C64  314E               	addfsr 1,14
 22194  0C65  3001               	movlw	1
 22195  0C66  0781               	addwf	1,f
 22196  0C67  3141               	addfsr 1,1
 22197  0C68  1803               	skipnc
 22198  0C69  0A81               	incf	1,f
 22199                           
 22200                           ;flashy_task.c: 358: data->holdCountY = 0;
 22201  0C6A  085E               	movf	flashy_Main@data,w
 22202  0C6B  0086               	movwf	6
 22203  0C6C  085F               	movf	flashy_Main@data+1,w
 22204  0C6D  0087               	movwf	7
 22205  0C6E  3150               	addfsr 1,16
 22206  0C6F  3000               	movlw	0
 22207  0C70  3FC0               	movwi [0]fsr1
 22208  0C71  3FC1               	movwi [1]fsr1
 22209                           
 22210                           ;flashy_task.c: 359: data->holdCountXY = 0;
 22211  0C72  085E               	movf	flashy_Main@data,w
 22212  0C73  0086               	movwf	6
 22213  0C74  085F               	movf	flashy_Main@data+1,w
 22214  0C75  0087               	movwf	7
 22215  0C76  3152               	addfsr 1,18
 22216  0C77  3000               	movlw	0
 22217  0C78  3FC0               	movwi [0]fsr1
 22218  0C79  3FC1               	movwi [1]fsr1
 22219                           
 22220                           ;flashy_task.c: 360: data->holdCountAY = 0;
 22221  0C7A  085E               	movf	flashy_Main@data,w
 22222  0C7B  0086               	movwf	6
 22223  0C7C  085F               	movf	flashy_Main@data+1,w
 22224  0C7D  0087               	movwf	7
 22225  0C7E  3154               	addfsr 1,20
 22226  0C7F  3000               	movlw	0
 22227  0C80  3FC0               	movwi [0]fsr1
 22228  0C81  3FC1               	movwi [1]fsr1
 22229                           
 22230                           ;flashy_task.c: 361: data->holdCountAX = 0;
 22231  0C82  085E               	movf	flashy_Main@data,w
 22232  0C83  0086               	movwf	6
 22233  0C84  085F               	movf	flashy_Main@data+1,w
 22234  0C85  0087               	movwf	7
 22235  0C86  3156               	addfsr 1,22
 22236  0C87  3000               	movlw	0
 22237  0C88  3FC0               	movwi [0]fsr1
 22238  0C89  3FC1               	movwi [1]fsr1
 22239                           
 22240                           ;flashy_task.c: 362: data->holdCountBX += 1;
 22241  0C8A  085E               	movf	flashy_Main@data,w
 22242  0C8B  0086               	movwf	6
 22243  0C8C  085F               	movf	flashy_Main@data+1,w
 22244  0C8D  0087               	movwf	7
 22245  0C8E  3158               	addfsr 1,24
 22246  0C8F  3001               	movlw	1
 22247  0C90  0781               	addwf	1,f
 22248  0C91  3141               	addfsr 1,1
 22249  0C92  1803               	skipnc
 22250  0C93  0A81               	incf	1,f
 22251                           
 22252                           ;flashy_task.c: 363: data->holdCountBY = 0;
 22253  0C94  085E               	movf	flashy_Main@data,w
 22254  0C95  0086               	movwf	6
 22255  0C96  085F               	movf	flashy_Main@data+1,w
 22256  0C97  0087               	movwf	7
 22257  0C98  315A               	addfsr 1,26
 22258  0C99  3000               	movlw	0
 22259  0C9A  3FC0               	movwi [0]fsr1
 22260  0C9B  3FC1               	movwi [1]fsr1
 22261                           
 22262                           ;flashy_task.c: 364: data->noholdCount = 0;
 22263  0C9C  085E               	movf	flashy_Main@data,w
 22264  0C9D  0086               	movwf	6
 22265  0C9E  085F               	movf	flashy_Main@data+1,w
 22266  0C9F  0087               	movwf	7
 22267  0CA0  315C               	addfsr 1,28
 22268  0CA1  3000               	movlw	0
 22269  0CA2  3FC0               	movwi [0]fsr1
 22270  0CA3  3FC1               	movwi [1]fsr1
 22271                           
 22272                           ;flashy_task.c: 365: break;
 22273  0CA4  2FC9               	goto	l9527
 22274  0CA5                     l9375:	
 22275                           ;flashy_task.c: 366: case 8:
 22276                           
 22277                           
 22278                           ;flashy_task.c: 368: if (data->holdCountY == 0 && data->blasterTickCount == 0){
 22279  0CA5  085E               	movf	flashy_Main@data,w
 22280  0CA6  0086               	movwf	6
 22281  0CA7  085F               	movf	flashy_Main@data+1,w
 22282  0CA8  0087               	movwf	7
 22283  0CA9  3150               	addfsr 1,16
 22284  0CAA  0016               	moviw fsr1++
 22285  0CAB  0401               	iorwf	1,w
 22286  0CAC  1D03               	btfss	3,2
 22287  0CAD  2CFB               	goto	l9393
 22288  0CAE  085E               	movf	flashy_Main@data,w
 22289  0CAF  0086               	movwf	6
 22290  0CB0  085F               	movf	flashy_Main@data+1,w
 22291  0CB1  0087               	movwf	7
 22292  0CB2  3147               	addfsr 1,7
 22293  0CB3  0016               	moviw fsr1++
 22294  0CB4  0401               	iorwf	1,w
 22295  0CB5  1D03               	btfss	3,2
 22296  0CB6  2CFB               	goto	l9393
 22297                           
 22298                           ;flashy_task.c: 370: nullifyBadge_userLedsSet(data->badge, 0x0);
 22299  0CB7  3000               	movlw	0
 22300  0CB8  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 22301  0CB9  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 22302  0CBA  085E               	movf	flashy_Main@data,w
 22303  0CBB  0086               	movwf	6
 22304  0CBC  085F               	movf	flashy_Main@data+1,w
 22305  0CBD  0087               	movwf	7
 22306  0CBE  0801               	movf	1,w
 22307  0CBF  31B3  2352  3188   	fcall	_nullifyBadge_userLedsSet
 22308                           
 22309                           ;flashy_task.c: 372: data->displayTickCount = 0;
 22310  0CC2  0020               	movlb	0	; select bank0
 22311  0CC3  085E               	movf	flashy_Main@data,w
 22312  0CC4  0086               	movwf	6
 22313  0CC5  085F               	movf	flashy_Main@data+1,w
 22314  0CC6  0087               	movwf	7
 22315  0CC7  3144               	addfsr 1,4
 22316  0CC8  3000               	movlw	0
 22317  0CC9  3FC0               	movwi [0]fsr1
 22318  0CCA  3FC1               	movwi [1]fsr1
 22319                           
 22320                           ;flashy_task.c: 373: data->blasterTickCount = 100;
 22321  0CCB  085E               	movf	flashy_Main@data,w
 22322  0CCC  0086               	movwf	6
 22323  0CCD  085F               	movf	flashy_Main@data+1,w
 22324  0CCE  0087               	movwf	7
 22325  0CCF  3147               	addfsr 1,7
 22326  0CD0  3064               	movlw	100
 22327  0CD1  3FC0               	movwi [0]fsr1
 22328  0CD2  3000               	movlw	0
 22329  0CD3  3FC1               	movwi [1]fsr1
 22330                           
 22331                           ;flashy_task.c: 374: data->delayTickCount = 5;
 22332  0CD4  085E               	movf	flashy_Main@data,w
 22333  0CD5  0086               	movwf	6
 22334  0CD6  085F               	movf	flashy_Main@data+1,w
 22335  0CD7  0087               	movwf	7
 22336  0CD8  3141               	addfsr 1,1
 22337  0CD9  3005               	movlw	5
 22338  0CDA  3FC0               	movwi [0]fsr1
 22339  0CDB  3000               	movlw	0
 22340  0CDC  3FC1               	movwi [1]fsr1
 22341                           
 22342                           ;flashy_task.c: 376: data->led_state = FLASHY_STATE_LED_SHOT;
 22343  0CDD  085E               	movf	flashy_Main@data,w
 22344  0CDE  3E03               	addlw	3
 22345  0CDF  00D4               	movwf	??_flashy_Main
 22346  0CE0  3000               	movlw	0
 22347  0CE1  3D5F               	addwfc	flashy_Main@data+1,w
 22348  0CE2  00D5               	movwf	??_flashy_Main+1
 22349  0CE3  0854               	movf	??_flashy_Main,w
 22350  0CE4  0086               	movwf	6
 22351  0CE5  0855               	movf	??_flashy_Main+1,w
 22352  0CE6  0087               	movwf	7
 22353  0CE7  3001               	movlw	1
 22354  0CE8  0081               	movwf	1
 22355                           
 22356                           ;flashy_task.c: 377: data->display_state = FLASHY_STATE_DISPLAY_BLASTER;
 22357  0CE9  085E               	movf	flashy_Main@data,w
 22358  0CEA  3E06               	addlw	6
 22359  0CEB  00D4               	movwf	??_flashy_Main
 22360  0CEC  3000               	movlw	0
 22361  0CED  3D5F               	addwfc	flashy_Main@data+1,w
 22362  0CEE  00D5               	movwf	??_flashy_Main+1
 22363  0CEF  0854               	movf	??_flashy_Main,w
 22364  0CF0  0086               	movwf	6
 22365  0CF1  0855               	movf	??_flashy_Main+1,w
 22366  0CF2  0087               	movwf	7
 22367  0CF3  3002               	movlw	2
 22368  0CF4  0081               	movwf	1
 22369                           
 22370                           ;flashy_task.c: 378: data->blaster_state = FLASHY_BLASTER_SHOOTING_STATE;
 22371  0CF5  085E               	movf	flashy_Main@data,w
 22372  0CF6  0086               	movwf	6
 22373  0CF7  085F               	movf	flashy_Main@data+1,w
 22374  0CF8  0087               	movwf	7
 22375  0CF9  3149               	addfsr 1,9
 22376  0CFA  0181               	clrf	1
 22377  0CFB                     l9393:	
 22378                           
 22379                           ;flashy_task.c: 379: }
 22380                           ;flashy_task.c: 381: data->holdCountA = 0;
 22381  0CFB  085E               	movf	flashy_Main@data,w
 22382  0CFC  0086               	movwf	6
 22383  0CFD  085F               	movf	flashy_Main@data+1,w
 22384  0CFE  0087               	movwf	7
 22385  0CFF  314A               	addfsr 1,10
 22386  0D00  3000               	movlw	0
 22387  0D01  3FC0               	movwi [0]fsr1
 22388  0D02  3FC1               	movwi [1]fsr1
 22389                           
 22390                           ;flashy_task.c: 382: data->holdCountB = 0;
 22391  0D03  085E               	movf	flashy_Main@data,w
 22392  0D04  0086               	movwf	6
 22393  0D05  085F               	movf	flashy_Main@data+1,w
 22394  0D06  0087               	movwf	7
 22395  0D07  314C               	addfsr 1,12
 22396  0D08  3000               	movlw	0
 22397  0D09  3FC0               	movwi [0]fsr1
 22398  0D0A  3FC1               	movwi [1]fsr1
 22399                           
 22400                           ;flashy_task.c: 383: data->holdCountX = 0;
 22401  0D0B  085E               	movf	flashy_Main@data,w
 22402  0D0C  0086               	movwf	6
 22403  0D0D  085F               	movf	flashy_Main@data+1,w
 22404  0D0E  0087               	movwf	7
 22405  0D0F  314E               	addfsr 1,14
 22406  0D10  3000               	movlw	0
 22407  0D11  3FC0               	movwi [0]fsr1
 22408  0D12  3FC1               	movwi [1]fsr1
 22409                           
 22410                           ;flashy_task.c: 384: data->holdCountY += 1;
 22411  0D13  085E               	movf	flashy_Main@data,w
 22412  0D14  0086               	movwf	6
 22413  0D15  085F               	movf	flashy_Main@data+1,w
 22414  0D16  0087               	movwf	7
 22415  0D17  3150               	addfsr 1,16
 22416  0D18  3001               	movlw	1
 22417  0D19  0781               	addwf	1,f
 22418  0D1A  3141               	addfsr 1,1
 22419  0D1B  1803               	skipnc
 22420  0D1C  0A81               	incf	1,f
 22421                           
 22422                           ;flashy_task.c: 385: data->holdCountXY = 0;
 22423  0D1D  085E               	movf	flashy_Main@data,w
 22424  0D1E  0086               	movwf	6
 22425  0D1F  085F               	movf	flashy_Main@data+1,w
 22426  0D20  0087               	movwf	7
 22427  0D21  3152               	addfsr 1,18
 22428  0D22  3000               	movlw	0
 22429  0D23  3FC0               	movwi [0]fsr1
 22430  0D24  3FC1               	movwi [1]fsr1
 22431                           
 22432                           ;flashy_task.c: 386: data->holdCountAY = 0;
 22433  0D25  085E               	movf	flashy_Main@data,w
 22434  0D26  0086               	movwf	6
 22435  0D27  085F               	movf	flashy_Main@data+1,w
 22436  0D28  0087               	movwf	7
 22437  0D29  3154               	addfsr 1,20
 22438  0D2A  3000               	movlw	0
 22439  0D2B  3FC0               	movwi [0]fsr1
 22440  0D2C  3FC1               	movwi [1]fsr1
 22441                           
 22442                           ;flashy_task.c: 387: data->holdCountAX = 0;
 22443  0D2D  085E               	movf	flashy_Main@data,w
 22444  0D2E  0086               	movwf	6
 22445  0D2F  085F               	movf	flashy_Main@data+1,w
 22446  0D30  0087               	movwf	7
 22447  0D31  3156               	addfsr 1,22
 22448  0D32  3000               	movlw	0
 22449  0D33  3FC0               	movwi [0]fsr1
 22450  0D34  3FC1               	movwi [1]fsr1
 22451                           
 22452                           ;flashy_task.c: 388: data->holdCountBX = 0;
 22453  0D35  085E               	movf	flashy_Main@data,w
 22454  0D36  0086               	movwf	6
 22455  0D37  085F               	movf	flashy_Main@data+1,w
 22456  0D38  0087               	movwf	7
 22457  0D39  3158               	addfsr 1,24
 22458  0D3A  3000               	movlw	0
 22459  0D3B  3FC0               	movwi [0]fsr1
 22460  0D3C  3FC1               	movwi [1]fsr1
 22461                           
 22462                           ;flashy_task.c: 389: data->holdCountBY = 0;
 22463  0D3D  085E               	movf	flashy_Main@data,w
 22464  0D3E  0086               	movwf	6
 22465  0D3F  085F               	movf	flashy_Main@data+1,w
 22466  0D40  0087               	movwf	7
 22467  0D41  315A               	addfsr 1,26
 22468  0D42  3000               	movlw	0
 22469  0D43  3FC0               	movwi [0]fsr1
 22470  0D44  3FC1               	movwi [1]fsr1
 22471                           
 22472                           ;flashy_task.c: 390: data->noholdCount = 0;
 22473  0D45  085E               	movf	flashy_Main@data,w
 22474  0D46  0086               	movwf	6
 22475  0D47  085F               	movf	flashy_Main@data+1,w
 22476  0D48  0087               	movwf	7
 22477  0D49  315C               	addfsr 1,28
 22478  0D4A  3000               	movlw	0
 22479  0D4B  3FC0               	movwi [0]fsr1
 22480  0D4C  3FC1               	movwi [1]fsr1
 22481                           
 22482                           ;flashy_task.c: 391: break;
 22483  0D4D  2FC9               	goto	l9527
 22484  0D4E                     l9413:	
 22485                           ;flashy_task.c: 392: case 2:
 22486                           
 22487                           
 22488                           ;flashy_task.c: 394: if (data->holdCountB == 0){
 22489  0D4E  085E               	movf	flashy_Main@data,w
 22490  0D4F  0086               	movwf	6
 22491  0D50  085F               	movf	flashy_Main@data+1,w
 22492  0D51  0087               	movwf	7
 22493  0D52  314C               	addfsr 1,12
 22494  0D53  0016               	moviw fsr1++
 22495  0D54  0401               	iorwf	1,w
 22496  0D55  1D03               	btfss	3,2
 22497  0D56  2D7C               	goto	l9423
 22498                           
 22499                           ;flashy_task.c: 395: data->display_state = FLASHY_STATE_DISPLAY;
 22500  0D57  085E               	movf	flashy_Main@data,w
 22501  0D58  0086               	movwf	6
 22502  0D59  085F               	movf	flashy_Main@data+1,w
 22503  0D5A  0087               	movwf	7
 22504  0D5B  3146               	addfsr 1,6
 22505  0D5C  0181               	clrf	1
 22506                           
 22507                           ;flashy_task.c: 396: if (flashy_option_idx == flashy_option_size - 1){
 22508  0D5D  0021               	movlb	1	; select bank1
 22509  0D5E  0826               	movf	_flashy_option_size^(0+128),w
 22510  0D5F  3EFF               	addlw	255
 22511  0D60  0020               	movlb	0	; select bank0
 22512  0D61  00D4               	movwf	??_flashy_Main
 22513  0D62  30FF               	movlw	255
 22514  0D63  0021               	movlb	1	; select bank1
 22515  0D64  3D27               	addwfc	(_flashy_option_size+1)^(0+128),w
 22516  0D65  0020               	movlb	0	; select bank0
 22517  0D66  00D5               	movwf	??_flashy_Main+1
 22518  0D67  0021               	movlb	1	; select bank1
 22519  0D68  0829               	movf	(_flashy_option_idx+1)^(0+128),w
 22520  0D69  0020               	movlb	0	; select bank0
 22521  0D6A  0655               	xorwf	??_flashy_Main+1,w
 22522  0D6B  1D03               	skipz
 22523  0D6C  2D71               	goto	u5925
 22524  0D6D  0021               	movlb	1	; select bank1
 22525  0D6E  0828               	movf	_flashy_option_idx^(0+128),w
 22526  0D6F  0020               	movlb	0	; select bank0
 22527  0D70  0654               	xorwf	??_flashy_Main,w
 22528  0D71                     u5925:	
 22529  0D71  1D03               	skipz
 22530  0D72  2D77               	goto	l9421
 22531                           
 22532                           ;flashy_task.c: 397: flashy_option_idx = 0;
 22533  0D73  0021               	movlb	1	; select bank1
 22534  0D74  01A8               	clrf	_flashy_option_idx^(0+128)
 22535  0D75  01A9               	clrf	(_flashy_option_idx+1)^(0+128)
 22536                           
 22537                           ;flashy_task.c: 398: }
 22538  0D76  2D7C               	goto	l9423
 22539  0D77                     l9421:	
 22540                           
 22541                           ;flashy_task.c: 399: else {
 22542                           ;flashy_task.c: 400: flashy_option_idx += 1;
 22543  0D77  3001               	movlw	1
 22544  0D78  0021               	movlb	1	; select bank1
 22545  0D79  07A8               	addwf	_flashy_option_idx^(0+128),f
 22546  0D7A  3000               	movlw	0
 22547  0D7B  3DA9               	addwfc	(_flashy_option_idx+1)^(0+128),f
 22548  0D7C                     l9423:	
 22549                           
 22550                           ;flashy_task.c: 401: }
 22551                           ;flashy_task.c: 402: }
 22552                           ;flashy_task.c: 403: data->holdCountA = 0;
 22553  0D7C  0020               	movlb	0	; select bank0
 22554  0D7D  085E               	movf	flashy_Main@data,w
 22555  0D7E  0086               	movwf	6
 22556  0D7F  085F               	movf	flashy_Main@data+1,w
 22557  0D80  0087               	movwf	7
 22558  0D81  314A               	addfsr 1,10
 22559  0D82  3000               	movlw	0
 22560  0D83  3FC0               	movwi [0]fsr1
 22561  0D84  3FC1               	movwi [1]fsr1
 22562                           
 22563                           ;flashy_task.c: 404: data->holdCountB += 1;
 22564  0D85  085E               	movf	flashy_Main@data,w
 22565  0D86  0086               	movwf	6
 22566  0D87  085F               	movf	flashy_Main@data+1,w
 22567  0D88  0087               	movwf	7
 22568  0D89  314C               	addfsr 1,12
 22569  0D8A  3001               	movlw	1
 22570  0D8B  0781               	addwf	1,f
 22571  0D8C  3141               	addfsr 1,1
 22572  0D8D  1803               	skipnc
 22573  0D8E  0A81               	incf	1,f
 22574                           
 22575                           ;flashy_task.c: 405: data->holdCountX = 0;
 22576  0D8F  085E               	movf	flashy_Main@data,w
 22577  0D90  0086               	movwf	6
 22578  0D91  085F               	movf	flashy_Main@data+1,w
 22579  0D92  0087               	movwf	7
 22580  0D93  314E               	addfsr 1,14
 22581  0D94  3000               	movlw	0
 22582  0D95  3FC0               	movwi [0]fsr1
 22583  0D96  3FC1               	movwi [1]fsr1
 22584                           
 22585                           ;flashy_task.c: 406: data->holdCountY = 0;
 22586  0D97  085E               	movf	flashy_Main@data,w
 22587  0D98  0086               	movwf	6
 22588  0D99  085F               	movf	flashy_Main@data+1,w
 22589  0D9A  0087               	movwf	7
 22590  0D9B  3150               	addfsr 1,16
 22591  0D9C  3000               	movlw	0
 22592  0D9D  3FC0               	movwi [0]fsr1
 22593  0D9E  3FC1               	movwi [1]fsr1
 22594                           
 22595                           ;flashy_task.c: 407: data->holdCountXY = 0;
 22596  0D9F  085E               	movf	flashy_Main@data,w
 22597  0DA0  0086               	movwf	6
 22598  0DA1  085F               	movf	flashy_Main@data+1,w
 22599  0DA2  0087               	movwf	7
 22600  0DA3  3152               	addfsr 1,18
 22601  0DA4  3000               	movlw	0
 22602  0DA5  3FC0               	movwi [0]fsr1
 22603  0DA6  3FC1               	movwi [1]fsr1
 22604                           
 22605                           ;flashy_task.c: 408: data->holdCountAY = 0;
 22606  0DA7  085E               	movf	flashy_Main@data,w
 22607  0DA8  0086               	movwf	6
 22608  0DA9  085F               	movf	flashy_Main@data+1,w
 22609  0DAA  0087               	movwf	7
 22610  0DAB  3154               	addfsr 1,20
 22611  0DAC  3000               	movlw	0
 22612  0DAD  3FC0               	movwi [0]fsr1
 22613  0DAE  3FC1               	movwi [1]fsr1
 22614                           
 22615                           ;flashy_task.c: 409: data->holdCountAX = 0;
 22616  0DAF  085E               	movf	flashy_Main@data,w
 22617  0DB0  0086               	movwf	6
 22618  0DB1  085F               	movf	flashy_Main@data+1,w
 22619  0DB2  0087               	movwf	7
 22620  0DB3  3156               	addfsr 1,22
 22621  0DB4  3000               	movlw	0
 22622  0DB5  3FC0               	movwi [0]fsr1
 22623  0DB6  3FC1               	movwi [1]fsr1
 22624                           
 22625                           ;flashy_task.c: 410: data->holdCountBX = 0;
 22626  0DB7  085E               	movf	flashy_Main@data,w
 22627  0DB8  0086               	movwf	6
 22628  0DB9  085F               	movf	flashy_Main@data+1,w
 22629  0DBA  0087               	movwf	7
 22630  0DBB  3158               	addfsr 1,24
 22631  0DBC  3000               	movlw	0
 22632  0DBD  3FC0               	movwi [0]fsr1
 22633  0DBE  3FC1               	movwi [1]fsr1
 22634                           
 22635                           ;flashy_task.c: 411: data->holdCountBY = 0;
 22636  0DBF  085E               	movf	flashy_Main@data,w
 22637  0DC0  0086               	movwf	6
 22638  0DC1  085F               	movf	flashy_Main@data+1,w
 22639  0DC2  0087               	movwf	7
 22640  0DC3  315A               	addfsr 1,26
 22641  0DC4  3000               	movlw	0
 22642  0DC5  3FC0               	movwi [0]fsr1
 22643  0DC6  3FC1               	movwi [1]fsr1
 22644                           
 22645                           ;flashy_task.c: 412: data->noholdCount = 0;
 22646  0DC7  085E               	movf	flashy_Main@data,w
 22647  0DC8  0086               	movwf	6
 22648  0DC9  085F               	movf	flashy_Main@data+1,w
 22649  0DCA  0087               	movwf	7
 22650  0DCB  315C               	addfsr 1,28
 22651  0DCC  3000               	movlw	0
 22652  0DCD  3FC0               	movwi [0]fsr1
 22653  0DCE  3FC1               	movwi [1]fsr1
 22654                           
 22655                           ;flashy_task.c: 413: break;
 22656  0DCF  2FC9               	goto	l9527
 22657  0DD0                     l9443:	
 22658                           ;flashy_task.c: 414: case 1:
 22659                           
 22660                           
 22661                           ;flashy_task.c: 415: if ( data->holdCountA == 0){
 22662  0DD0  085E               	movf	flashy_Main@data,w
 22663  0DD1  0086               	movwf	6
 22664  0DD2  085F               	movf	flashy_Main@data+1,w
 22665  0DD3  0087               	movwf	7
 22666  0DD4  314A               	addfsr 1,10
 22667  0DD5  0016               	moviw fsr1++
 22668  0DD6  0401               	iorwf	1,w
 22669  0DD7  1D03               	btfss	3,2
 22670  0DD8  2E3E               	goto	l9471
 22671                           
 22672                           ;flashy_task.c: 418: if (flashy_leds_state_track > 4){
 22673  0DD9  3000               	movlw	0
 22674  0DDA  0021               	movlb	1	; select bank1
 22675  0DDB  0231               	subwf	(_flashy_leds_state_track+1)^(0+128),w
 22676  0DDC  3005               	movlw	5
 22677  0DDD  1903               	skipnz
 22678  0DDE  0230               	subwf	_flashy_leds_state_track^(0+128),w
 22679  0DDF  1C03               	skipc
 22680  0DE0  2DE3               	goto	l9449
 22681                           
 22682                           ;flashy_task.c: 419: flashy_leds_state_track=0;
 22683  0DE1  01B0               	clrf	_flashy_leds_state_track^(0+128)
 22684  0DE2  01B1               	clrf	(_flashy_leds_state_track+1)^(0+128)
 22685  0DE3                     l9449:	
 22686                           
 22687                           ;flashy_task.c: 420: }
 22688                           ;flashy_task.c: 421: if (flashy_leds_state_track== 0){
 22689  0DE3  0830               	movf	_flashy_leds_state_track^(0+128),w
 22690  0DE4  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22691  0DE5  1D03               	btfss	3,2
 22692  0DE6  2DF4               	goto	l9453
 22693                           
 22694                           ;flashy_task.c: 422: data->led_state = FLASHY_STATE_LED_ALT;
 22695  0DE7  0020               	movlb	0	; select bank0
 22696  0DE8  085E               	movf	flashy_Main@data,w
 22697  0DE9  3E03               	addlw	3
 22698  0DEA  00D4               	movwf	??_flashy_Main
 22699  0DEB  3000               	movlw	0
 22700  0DEC  3D5F               	addwfc	flashy_Main@data+1,w
 22701  0DED  00D5               	movwf	??_flashy_Main+1
 22702  0DEE  0854               	movf	??_flashy_Main,w
 22703  0DEF  0086               	movwf	6
 22704  0DF0  0855               	movf	??_flashy_Main+1,w
 22705  0DF1  0087               	movwf	7
 22706  0DF2  3004               	movlw	4
 22707  0DF3  0081               	movwf	1
 22708  0DF4                     l9453:	
 22709                           
 22710                           ;flashy_task.c: 423: }
 22711                           ;flashy_task.c: 424: if (flashy_leds_state_track ==1){
 22712  0DF4  0021               	movlb	1	; select bank1
 22713  0DF5  0330               	decf	_flashy_leds_state_track^(0+128),w
 22714  0DF6  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22715  0DF7  1D03               	btfss	3,2
 22716  0DF8  2E06               	goto	l9457
 22717                           
 22718                           ;flashy_task.c: 425: data->led_state = FLASHY_STATE_SPARKLE;
 22719  0DF9  0020               	movlb	0	; select bank0
 22720  0DFA  085E               	movf	flashy_Main@data,w
 22721  0DFB  3E03               	addlw	3
 22722  0DFC  00D4               	movwf	??_flashy_Main
 22723  0DFD  3000               	movlw	0
 22724  0DFE  3D5F               	addwfc	flashy_Main@data+1,w
 22725  0DFF  00D5               	movwf	??_flashy_Main+1
 22726  0E00  0854               	movf	??_flashy_Main,w
 22727  0E01  0086               	movwf	6
 22728  0E02  0855               	movf	??_flashy_Main+1,w
 22729  0E03  0087               	movwf	7
 22730  0E04  3002               	movlw	2
 22731  0E05  0081               	movwf	1
 22732  0E06                     l9457:	
 22733                           
 22734                           ;flashy_task.c: 426: }
 22735                           ;flashy_task.c: 427: if (flashy_leds_state_track == 2){
 22736  0E06  3002               	movlw	2
 22737  0E07  0021               	movlb	1	; select bank1
 22738  0E08  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22739  0E09  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22740  0E0A  1D03               	btfss	3,2
 22741  0E0B  2E19               	goto	l9461
 22742                           
 22743                           ;flashy_task.c: 428: data->led_state = FLASHY_STATE_CIRCLE;
 22744  0E0C  0020               	movlb	0	; select bank0
 22745  0E0D  085E               	movf	flashy_Main@data,w
 22746  0E0E  3E03               	addlw	3
 22747  0E0F  00D4               	movwf	??_flashy_Main
 22748  0E10  3000               	movlw	0
 22749  0E11  3D5F               	addwfc	flashy_Main@data+1,w
 22750  0E12  00D5               	movwf	??_flashy_Main+1
 22751  0E13  0854               	movf	??_flashy_Main,w
 22752  0E14  0086               	movwf	6
 22753  0E15  0855               	movf	??_flashy_Main+1,w
 22754  0E16  0087               	movwf	7
 22755  0E17  3003               	movlw	3
 22756  0E18  0081               	movwf	1
 22757  0E19                     l9461:	
 22758                           
 22759                           ;flashy_task.c: 429: }
 22760                           ;flashy_task.c: 430: if (flashy_leds_state_track == 3){
 22761  0E19  3003               	movlw	3
 22762  0E1A  0021               	movlb	1	; select bank1
 22763  0E1B  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22764  0E1C  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22765  0E1D  1D03               	btfss	3,2
 22766  0E1E  2E26               	goto	l9465
 22767                           
 22768                           ;flashy_task.c: 431: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 22769  0E1F  0020               	movlb	0	; select bank0
 22770  0E20  085E               	movf	flashy_Main@data,w
 22771  0E21  0086               	movwf	6
 22772  0E22  085F               	movf	flashy_Main@data+1,w
 22773  0E23  0087               	movwf	7
 22774  0E24  3143               	addfsr 1,3
 22775  0E25  0181               	clrf	1
 22776  0E26                     l9465:	
 22777                           
 22778                           ;flashy_task.c: 432: }
 22779                           ;flashy_task.c: 433: if (flashy_leds_state_track ==4 ){
 22780  0E26  3004               	movlw	4
 22781  0E27  0021               	movlb	1	; select bank1
 22782  0E28  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22783  0E29  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22784  0E2A  1D03               	btfss	3,2
 22785  0E2B  2E39               	goto	l9469
 22786                           
 22787                           ;flashy_task.c: 434: data->led_state = FLASHY_STATE_LED_PARODY;
 22788  0E2C  0020               	movlb	0	; select bank0
 22789  0E2D  085E               	movf	flashy_Main@data,w
 22790  0E2E  3E03               	addlw	3
 22791  0E2F  00D4               	movwf	??_flashy_Main
 22792  0E30  3000               	movlw	0
 22793  0E31  3D5F               	addwfc	flashy_Main@data+1,w
 22794  0E32  00D5               	movwf	??_flashy_Main+1
 22795  0E33  0854               	movf	??_flashy_Main,w
 22796  0E34  0086               	movwf	6
 22797  0E35  0855               	movf	??_flashy_Main+1,w
 22798  0E36  0087               	movwf	7
 22799  0E37  3005               	movlw	5
 22800  0E38  0081               	movwf	1
 22801  0E39                     l9469:	
 22802                           
 22803                           ;flashy_task.c: 435: }
 22804                           ;flashy_task.c: 436: flashy_leds_state_track +=1;
 22805  0E39  3001               	movlw	1
 22806  0E3A  0021               	movlb	1	; select bank1
 22807  0E3B  07B0               	addwf	_flashy_leds_state_track^(0+128),f
 22808  0E3C  3000               	movlw	0
 22809  0E3D  3DB1               	addwfc	(_flashy_leds_state_track+1)^(0+128),f
 22810  0E3E                     l9471:	
 22811                           
 22812                           ;flashy_task.c: 437: }
 22813                           ;flashy_task.c: 439: data->holdCountA += 1;
 22814  0E3E  0020               	movlb	0	; select bank0
 22815  0E3F  085E               	movf	flashy_Main@data,w
 22816  0E40  0086               	movwf	6
 22817  0E41  085F               	movf	flashy_Main@data+1,w
 22818  0E42  0087               	movwf	7
 22819  0E43  314A               	addfsr 1,10
 22820  0E44  3001               	movlw	1
 22821  0E45  0781               	addwf	1,f
 22822  0E46  3141               	addfsr 1,1
 22823  0E47  1803               	skipnc
 22824  0E48  0A81               	incf	1,f
 22825                           
 22826                           ;flashy_task.c: 440: data->holdCountB = 0;
 22827  0E49  085E               	movf	flashy_Main@data,w
 22828  0E4A  0086               	movwf	6
 22829  0E4B  085F               	movf	flashy_Main@data+1,w
 22830  0E4C  0087               	movwf	7
 22831  0E4D  314C               	addfsr 1,12
 22832  0E4E  3000               	movlw	0
 22833  0E4F  3FC0               	movwi [0]fsr1
 22834  0E50  3FC1               	movwi [1]fsr1
 22835                           
 22836                           ;flashy_task.c: 441: data->holdCountX = 0;
 22837  0E51  085E               	movf	flashy_Main@data,w
 22838  0E52  0086               	movwf	6
 22839  0E53  085F               	movf	flashy_Main@data+1,w
 22840  0E54  0087               	movwf	7
 22841  0E55  314E               	addfsr 1,14
 22842  0E56  3000               	movlw	0
 22843  0E57  3FC0               	movwi [0]fsr1
 22844  0E58  3FC1               	movwi [1]fsr1
 22845                           
 22846                           ;flashy_task.c: 442: data->holdCountY = 0;
 22847  0E59  085E               	movf	flashy_Main@data,w
 22848  0E5A  0086               	movwf	6
 22849  0E5B  085F               	movf	flashy_Main@data+1,w
 22850  0E5C  0087               	movwf	7
 22851  0E5D  3150               	addfsr 1,16
 22852  0E5E  3000               	movlw	0
 22853  0E5F  3FC0               	movwi [0]fsr1
 22854  0E60  3FC1               	movwi [1]fsr1
 22855                           
 22856                           ;flashy_task.c: 443: data->holdCountXY = 0;
 22857  0E61  085E               	movf	flashy_Main@data,w
 22858  0E62  0086               	movwf	6
 22859  0E63  085F               	movf	flashy_Main@data+1,w
 22860  0E64  0087               	movwf	7
 22861  0E65  3152               	addfsr 1,18
 22862  0E66  3000               	movlw	0
 22863  0E67  3FC0               	movwi [0]fsr1
 22864  0E68  3FC1               	movwi [1]fsr1
 22865                           
 22866                           ;flashy_task.c: 444: data->holdCountAY = 0;
 22867  0E69  085E               	movf	flashy_Main@data,w
 22868  0E6A  0086               	movwf	6
 22869  0E6B  085F               	movf	flashy_Main@data+1,w
 22870  0E6C  0087               	movwf	7
 22871  0E6D  3154               	addfsr 1,20
 22872  0E6E  3000               	movlw	0
 22873  0E6F  3FC0               	movwi [0]fsr1
 22874  0E70  3FC1               	movwi [1]fsr1
 22875                           
 22876                           ;flashy_task.c: 445: data->holdCountAX = 0;
 22877  0E71  085E               	movf	flashy_Main@data,w
 22878  0E72  0086               	movwf	6
 22879  0E73  085F               	movf	flashy_Main@data+1,w
 22880  0E74  0087               	movwf	7
 22881  0E75  3156               	addfsr 1,22
 22882  0E76  3000               	movlw	0
 22883  0E77  3FC0               	movwi [0]fsr1
 22884  0E78  3FC1               	movwi [1]fsr1
 22885                           
 22886                           ;flashy_task.c: 446: data->holdCountBX = 0;
 22887  0E79  085E               	movf	flashy_Main@data,w
 22888  0E7A  0086               	movwf	6
 22889  0E7B  085F               	movf	flashy_Main@data+1,w
 22890  0E7C  0087               	movwf	7
 22891  0E7D  3158               	addfsr 1,24
 22892  0E7E  3000               	movlw	0
 22893  0E7F  3FC0               	movwi [0]fsr1
 22894  0E80  3FC1               	movwi [1]fsr1
 22895                           
 22896                           ;flashy_task.c: 447: data->holdCountBY = 0;
 22897  0E81  085E               	movf	flashy_Main@data,w
 22898  0E82  0086               	movwf	6
 22899  0E83  085F               	movf	flashy_Main@data+1,w
 22900  0E84  0087               	movwf	7
 22901  0E85  315A               	addfsr 1,26
 22902  0E86  3000               	movlw	0
 22903  0E87  3FC0               	movwi [0]fsr1
 22904  0E88  3FC1               	movwi [1]fsr1
 22905                           
 22906                           ;flashy_task.c: 448: data->noholdCount = 0;
 22907  0E89  085E               	movf	flashy_Main@data,w
 22908  0E8A  0086               	movwf	6
 22909  0E8B  085F               	movf	flashy_Main@data+1,w
 22910  0E8C  0087               	movwf	7
 22911  0E8D  315C               	addfsr 1,28
 22912  0E8E  3000               	movlw	0
 22913  0E8F  3FC0               	movwi [0]fsr1
 22914  0E90  3FC1               	movwi [1]fsr1
 22915                           
 22916                           ;flashy_task.c: 449: break;
 22917  0E91  2FC9               	goto	l9527
 22918  0E92                     l9491:	
 22919                           ;flashy_task.c: 450: case 0:
 22920                           
 22921                           
 22922                           ;flashy_task.c: 452: data->holdCountA = 0;
 22923  0E92  085E               	movf	flashy_Main@data,w
 22924  0E93  0086               	movwf	6
 22925  0E94  085F               	movf	flashy_Main@data+1,w
 22926  0E95  0087               	movwf	7
 22927  0E96  314A               	addfsr 1,10
 22928  0E97  3000               	movlw	0
 22929  0E98  3FC0               	movwi [0]fsr1
 22930  0E99  3FC1               	movwi [1]fsr1
 22931                           
 22932                           ;flashy_task.c: 453: data->holdCountB = 0;
 22933  0E9A  085E               	movf	flashy_Main@data,w
 22934  0E9B  0086               	movwf	6
 22935  0E9C  085F               	movf	flashy_Main@data+1,w
 22936  0E9D  0087               	movwf	7
 22937  0E9E  314C               	addfsr 1,12
 22938  0E9F  3000               	movlw	0
 22939  0EA0  3FC0               	movwi [0]fsr1
 22940  0EA1  3FC1               	movwi [1]fsr1
 22941                           
 22942                           ;flashy_task.c: 454: data->holdCountX = 0;
 22943  0EA2  085E               	movf	flashy_Main@data,w
 22944  0EA3  0086               	movwf	6
 22945  0EA4  085F               	movf	flashy_Main@data+1,w
 22946  0EA5  0087               	movwf	7
 22947  0EA6  314E               	addfsr 1,14
 22948  0EA7  3000               	movlw	0
 22949  0EA8  3FC0               	movwi [0]fsr1
 22950  0EA9  3FC1               	movwi [1]fsr1
 22951                           
 22952                           ;flashy_task.c: 455: data->holdCountY = 0;
 22953  0EAA  085E               	movf	flashy_Main@data,w
 22954  0EAB  0086               	movwf	6
 22955  0EAC  085F               	movf	flashy_Main@data+1,w
 22956  0EAD  0087               	movwf	7
 22957  0EAE  3150               	addfsr 1,16
 22958  0EAF  3000               	movlw	0
 22959  0EB0  3FC0               	movwi [0]fsr1
 22960  0EB1  3FC1               	movwi [1]fsr1
 22961                           
 22962                           ;flashy_task.c: 456: data->holdCountXY = 0;
 22963  0EB2  085E               	movf	flashy_Main@data,w
 22964  0EB3  0086               	movwf	6
 22965  0EB4  085F               	movf	flashy_Main@data+1,w
 22966  0EB5  0087               	movwf	7
 22967  0EB6  3152               	addfsr 1,18
 22968  0EB7  3000               	movlw	0
 22969  0EB8  3FC0               	movwi [0]fsr1
 22970  0EB9  3FC1               	movwi [1]fsr1
 22971                           
 22972                           ;flashy_task.c: 457: data->holdCountAY = 0;
 22973  0EBA  085E               	movf	flashy_Main@data,w
 22974  0EBB  0086               	movwf	6
 22975  0EBC  085F               	movf	flashy_Main@data+1,w
 22976  0EBD  0087               	movwf	7
 22977  0EBE  3154               	addfsr 1,20
 22978  0EBF  3000               	movlw	0
 22979  0EC0  3FC0               	movwi [0]fsr1
 22980  0EC1  3FC1               	movwi [1]fsr1
 22981                           
 22982                           ;flashy_task.c: 458: data->holdCountAX = 0;
 22983  0EC2  085E               	movf	flashy_Main@data,w
 22984  0EC3  0086               	movwf	6
 22985  0EC4  085F               	movf	flashy_Main@data+1,w
 22986  0EC5  0087               	movwf	7
 22987  0EC6  3156               	addfsr 1,22
 22988  0EC7  3000               	movlw	0
 22989  0EC8  3FC0               	movwi [0]fsr1
 22990  0EC9  3FC1               	movwi [1]fsr1
 22991                           
 22992                           ;flashy_task.c: 459: data->holdCountBX = 0;
 22993  0ECA  085E               	movf	flashy_Main@data,w
 22994  0ECB  0086               	movwf	6
 22995  0ECC  085F               	movf	flashy_Main@data+1,w
 22996  0ECD  0087               	movwf	7
 22997  0ECE  3158               	addfsr 1,24
 22998  0ECF  3000               	movlw	0
 22999  0ED0  3FC0               	movwi [0]fsr1
 23000  0ED1  3FC1               	movwi [1]fsr1
 23001                           
 23002                           ;flashy_task.c: 460: data->holdCountBY = 0;
 23003  0ED2  085E               	movf	flashy_Main@data,w
 23004  0ED3  0086               	movwf	6
 23005  0ED4  085F               	movf	flashy_Main@data+1,w
 23006  0ED5  0087               	movwf	7
 23007  0ED6  315A               	addfsr 1,26
 23008  0ED7  3000               	movlw	0
 23009  0ED8  3FC0               	movwi [0]fsr1
 23010  0ED9  3FC1               	movwi [1]fsr1
 23011                           
 23012                           ;flashy_task.c: 461: data->noholdCount += 1;
 23013  0EDA  085E               	movf	flashy_Main@data,w
 23014  0EDB  0086               	movwf	6
 23015  0EDC  085F               	movf	flashy_Main@data+1,w
 23016  0EDD  0087               	movwf	7
 23017  0EDE  315C               	addfsr 1,28
 23018  0EDF  3001               	movlw	1
 23019  0EE0  0781               	addwf	1,f
 23020  0EE1  3141               	addfsr 1,1
 23021  0EE2  1803               	skipnc
 23022  0EE3  0A81               	incf	1,f
 23023                           
 23024                           ;flashy_task.c: 462: break;
 23025  0EE4  2FC9               	goto	l9527
 23026  0EE5                     l9495:	
 23027                           ;flashy_task.c: 463: default:
 23028                           
 23029                           
 23030                           ;flashy_task.c: 464: data->holdCountA = 0;
 23031  0EE5  085E               	movf	flashy_Main@data,w
 23032  0EE6  0086               	movwf	6
 23033  0EE7  085F               	movf	flashy_Main@data+1,w
 23034  0EE8  0087               	movwf	7
 23035  0EE9  314A               	addfsr 1,10
 23036  0EEA  3000               	movlw	0
 23037  0EEB  3FC0               	movwi [0]fsr1
 23038  0EEC  3FC1               	movwi [1]fsr1
 23039                           
 23040                           ;flashy_task.c: 465: data->holdCountB = 0;
 23041  0EED  085E               	movf	flashy_Main@data,w
 23042  0EEE  0086               	movwf	6
 23043  0EEF  085F               	movf	flashy_Main@data+1,w
 23044  0EF0  0087               	movwf	7
 23045  0EF1  314C               	addfsr 1,12
 23046  0EF2  3000               	movlw	0
 23047  0EF3  3FC0               	movwi [0]fsr1
 23048  0EF4  3FC1               	movwi [1]fsr1
 23049                           
 23050                           ;flashy_task.c: 466: data->holdCountX = 0;
 23051  0EF5  085E               	movf	flashy_Main@data,w
 23052  0EF6  0086               	movwf	6
 23053  0EF7  085F               	movf	flashy_Main@data+1,w
 23054  0EF8  0087               	movwf	7
 23055  0EF9  314E               	addfsr 1,14
 23056  0EFA  3000               	movlw	0
 23057  0EFB  3FC0               	movwi [0]fsr1
 23058  0EFC  3FC1               	movwi [1]fsr1
 23059                           
 23060                           ;flashy_task.c: 467: data->holdCountY = 0;
 23061  0EFD  085E               	movf	flashy_Main@data,w
 23062  0EFE  0086               	movwf	6
 23063  0EFF  085F               	movf	flashy_Main@data+1,w
 23064  0F00  0087               	movwf	7
 23065  0F01  3150               	addfsr 1,16
 23066  0F02  3000               	movlw	0
 23067  0F03  3FC0               	movwi [0]fsr1
 23068  0F04  3FC1               	movwi [1]fsr1
 23069                           
 23070                           ;flashy_task.c: 468: data->holdCountXY = 0;
 23071  0F05  085E               	movf	flashy_Main@data,w
 23072  0F06  0086               	movwf	6
 23073  0F07  085F               	movf	flashy_Main@data+1,w
 23074  0F08  0087               	movwf	7
 23075  0F09  3152               	addfsr 1,18
 23076  0F0A  3000               	movlw	0
 23077  0F0B  3FC0               	movwi [0]fsr1
 23078  0F0C  3FC1               	movwi [1]fsr1
 23079                           
 23080                           ;flashy_task.c: 469: data->holdCountAY = 0;
 23081  0F0D  085E               	movf	flashy_Main@data,w
 23082  0F0E  0086               	movwf	6
 23083  0F0F  085F               	movf	flashy_Main@data+1,w
 23084  0F10  0087               	movwf	7
 23085  0F11  3154               	addfsr 1,20
 23086  0F12  3000               	movlw	0
 23087  0F13  3FC0               	movwi [0]fsr1
 23088  0F14  3FC1               	movwi [1]fsr1
 23089                           
 23090                           ;flashy_task.c: 470: data->holdCountAX = 0;
 23091  0F15  085E               	movf	flashy_Main@data,w
 23092  0F16  0086               	movwf	6
 23093  0F17  085F               	movf	flashy_Main@data+1,w
 23094  0F18  0087               	movwf	7
 23095  0F19  3156               	addfsr 1,22
 23096  0F1A  3000               	movlw	0
 23097  0F1B  3FC0               	movwi [0]fsr1
 23098  0F1C  3FC1               	movwi [1]fsr1
 23099                           
 23100                           ;flashy_task.c: 471: data->holdCountBX = 0;
 23101  0F1D  085E               	movf	flashy_Main@data,w
 23102  0F1E  0086               	movwf	6
 23103  0F1F  085F               	movf	flashy_Main@data+1,w
 23104  0F20  0087               	movwf	7
 23105  0F21  3158               	addfsr 1,24
 23106  0F22  3000               	movlw	0
 23107  0F23  3FC0               	movwi [0]fsr1
 23108  0F24  3FC1               	movwi [1]fsr1
 23109                           
 23110                           ;flashy_task.c: 472: data->holdCountBY = 0;
 23111  0F25  085E               	movf	flashy_Main@data,w
 23112  0F26  0086               	movwf	6
 23113  0F27  085F               	movf	flashy_Main@data+1,w
 23114  0F28  0087               	movwf	7
 23115  0F29  315A               	addfsr 1,26
 23116  0F2A  3000               	movlw	0
 23117  0F2B  3FC0               	movwi [0]fsr1
 23118  0F2C  3FC1               	movwi [1]fsr1
 23119                           
 23120                           ;flashy_task.c: 473: data->noholdCount = 0;
 23121  0F2D  085E               	movf	flashy_Main@data,w
 23122  0F2E  0086               	movwf	6
 23123  0F2F  085F               	movf	flashy_Main@data+1,w
 23124  0F30  0087               	movwf	7
 23125  0F31  315C               	addfsr 1,28
 23126  0F32  3000               	movlw	0
 23127  0F33  3FC0               	movwi [0]fsr1
 23128  0F34  3FC1               	movwi [1]fsr1
 23129                           
 23130                           ;flashy_task.c: 474: }
 23131  0F35  2FC9               	goto	l9527
 23132  0F36                     l9497:	
 23133                           
 23134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23135                           ; Switch size 1, requested type "space"
 23136                           ; Number of cases is 1, Range of values is 0 to 0
 23137                           ; switch strategies available:
 23138                           ; Name         Instructions Cycles
 23139                           ; simple_byte            4     3 (average)
 23140                           ; direct_byte            8     6 (fixed)
 23141                           ; jumptable            260     6 (fixed)
 23142                           ;	Chosen strategy is simple_byte
 23143  0F36  085D               	movf	flashy_Main@buttonPressed+1,w
 23144  0F37  3A00               	xorlw	0	; case 0
 23145  0F38  1903               	skipnz
 23146  0F39  2F3B               	goto	l10831
 23147  0F3A  2EE5               	goto	l9495
 23148  0F3B                     l10831:	
 23149                           
 23150                           ; Switch size 1, requested type "space"
 23151                           ; Number of cases is 9, Range of values is 0 to 12
 23152                           ; switch strategies available:
 23153                           ; Name         Instructions Cycles
 23154                           ; simple_byte           28    15 (average)
 23155                           ; direct_byte           32     6 (fixed)
 23156                           ; jumptable            260     6 (fixed)
 23157                           ;	Chosen strategy is simple_byte
 23158  0F3B  085C               	movf	flashy_Main@buttonPressed,w
 23159  0F3C  3A00               	xorlw	0	; case 0
 23160  0F3D  1903               	skipnz
 23161  0F3E  2E92               	goto	l9491
 23162  0F3F  3A01               	xorlw	1	; case 1
 23163  0F40  1903               	skipnz
 23164  0F41  2DD0               	goto	l9443
 23165  0F42  3A03               	xorlw	3	; case 2
 23166  0F43  1903               	skipnz
 23167  0F44  2D4E               	goto	l9413
 23168  0F45  3A07               	xorlw	7	; case 5
 23169  0F46  1903               	skipnz
 23170  0F47  2B4C               	goto	l9289
 23171  0F48  3A03               	xorlw	3	; case 6
 23172  0F49  1903               	skipnz
 23173  0F4A  2C30               	goto	l9345
 23174  0F4B  3A0E               	xorlw	14	; case 8
 23175  0F4C  1903               	skipnz
 23176  0F4D  2CA5               	goto	l9375
 23177  0F4E  3A01               	xorlw	1	; case 9
 23178  0F4F  1903               	skipnz
 23179  0F50  2ADF               	goto	l9263
 23180  0F51  3A03               	xorlw	3	; case 10
 23181  0F52  1903               	skipnz
 23182  0F53  2BBB               	goto	l9315
 23183  0F54  3A06               	xorlw	6	; case 12
 23184  0F55  1903               	skipnz
 23185  0F56  2A7D               	goto	l9239
 23186  0F57  2EE5               	goto	l9495
 23187                           
 23188                           ;flashy_task.c: 477: switch (data->blaster_state) {
 23189  0F58  2FC9               	goto	l9527
 23190  0F59                     l9499:	
 23191                           ;flashy_task.c: 478: case FLASHY_BLASTER_SHOOTING_STATE:
 23192                           
 23193                           
 23194                           ;flashy_task.c: 480: if (data->blasterTickCount == 100) {
 23195  0F59  085E               	movf	flashy_Main@data,w
 23196  0F5A  0086               	movwf	6
 23197  0F5B  085F               	movf	flashy_Main@data+1,w
 23198  0F5C  0087               	movwf	7
 23199  0F5D  3147               	addfsr 1,7
 23200  0F5E  0016               	moviw fsr1++
 23201  0F5F  3A64               	xorlw	100
 23202  0F60  00D4               	movwf	??_flashy_Main
 23203  0F61  0016               	moviw fsr1++
 23204  0F62  04D4               	iorwf	??_flashy_Main,f
 23205  0F63  1D03               	btfss	3,2
 23206  0F64  2F70               	goto	l9505
 23207                           
 23208                           ;flashy_task.c: 481: nullifyBadge_irTxRegister(data->badge);
 23209  0F65  085E               	movf	flashy_Main@data,w
 23210  0F66  0086               	movwf	6
 23211  0F67  085F               	movf	flashy_Main@data+1,w
 23212  0F68  0087               	movwf	7
 23213  0F69  0801               	movf	1,w
 23214  0F6A  31B3  2313  3188   	fcall	_nullifyBadge_irTxRegister
 23215                           
 23216                           ;flashy_task.c: 482: nullifyBadge_irTxSet();
 23217  0F6D  31B2  2224  3188   	fcall	_nullifyBadge_irTxSet
 23218  0F70                     l9505:	
 23219                           
 23220                           ;flashy_task.c: 483: }
 23221                           ;flashy_task.c: 484: if (data->blasterTickCount == 100 - 1 ){
 23222  0F70  0020               	movlb	0	; select bank0
 23223  0F71  085E               	movf	flashy_Main@data,w
 23224  0F72  0086               	movwf	6
 23225  0F73  085F               	movf	flashy_Main@data+1,w
 23226  0F74  0087               	movwf	7
 23227  0F75  3147               	addfsr 1,7
 23228  0F76  0016               	moviw fsr1++
 23229  0F77  3A63               	xorlw	99
 23230  0F78  00D4               	movwf	??_flashy_Main
 23231  0F79  0016               	moviw fsr1++
 23232  0F7A  04D4               	iorwf	??_flashy_Main,f
 23233  0F7B  1D03               	btfss	3,2
 23234  0F7C  2F89               	goto	l9511
 23235                           
 23236                           ;flashy_task.c: 485: nullifyBadge_irTxClr();
 23237  0F7D  31B2  2221  3188   	fcall	_nullifyBadge_irTxClr
 23238                           
 23239                           ;flashy_task.c: 486: nullifyBadge_irTxRelease(data->badge);
 23240  0F80  0020               	movlb	0	; select bank0
 23241  0F81  085E               	movf	flashy_Main@data,w
 23242  0F82  0086               	movwf	6
 23243  0F83  085F               	movf	flashy_Main@data+1,w
 23244  0F84  0087               	movwf	7
 23245  0F85  0801               	movf	1,w
 23246  0F86  31B2  22AF  3188   	fcall	_nullifyBadge_irTxRelease
 23247  0F89                     l9511:	
 23248                           
 23249                           ;flashy_task.c: 487: }
 23250                           ;flashy_task.c: 488: if (data->blasterTickCount == 0){
 23251  0F89  0020               	movlb	0	; select bank0
 23252  0F8A  085E               	movf	flashy_Main@data,w
 23253  0F8B  0086               	movwf	6
 23254  0F8C  085F               	movf	flashy_Main@data+1,w
 23255  0F8D  0087               	movwf	7
 23256  0F8E  3147               	addfsr 1,7
 23257  0F8F  0016               	moviw fsr1++
 23258  0F90  0401               	iorwf	1,w
 23259  0F91  1D03               	btfss	3,2
 23260  0F92  2FBD               	goto	l9523
 23261                           
 23262                           ;flashy_task.c: 489: data->displayTickCount = 0;
 23263  0F93  085E               	movf	flashy_Main@data,w
 23264  0F94  0086               	movwf	6
 23265  0F95  085F               	movf	flashy_Main@data+1,w
 23266  0F96  0087               	movwf	7
 23267  0F97  3144               	addfsr 1,4
 23268  0F98  3000               	movlw	0
 23269  0F99  3FC0               	movwi [0]fsr1
 23270  0F9A  3FC1               	movwi [1]fsr1
 23271                           
 23272                           ;flashy_task.c: 490: data->delayTickCount = 5;
 23273  0F9B  085E               	movf	flashy_Main@data,w
 23274  0F9C  0086               	movwf	6
 23275  0F9D  085F               	movf	flashy_Main@data+1,w
 23276  0F9E  0087               	movwf	7
 23277  0F9F  3141               	addfsr 1,1
 23278  0FA0  3005               	movlw	5
 23279  0FA1  3FC0               	movwi [0]fsr1
 23280  0FA2  3000               	movlw	0
 23281  0FA3  3FC1               	movwi [1]fsr1
 23282                           
 23283                           ;flashy_task.c: 492: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 23284  0FA4  085E               	movf	flashy_Main@data,w
 23285  0FA5  0086               	movwf	6
 23286  0FA6  085F               	movf	flashy_Main@data+1,w
 23287  0FA7  0087               	movwf	7
 23288  0FA8  3143               	addfsr 1,3
 23289  0FA9  0181               	clrf	1
 23290                           
 23291                           ;flashy_task.c: 493: data->display_state = FLASHY_STATE_DISPLAY;
 23292  0FAA  085E               	movf	flashy_Main@data,w
 23293  0FAB  0086               	movwf	6
 23294  0FAC  085F               	movf	flashy_Main@data+1,w
 23295  0FAD  0087               	movwf	7
 23296  0FAE  3146               	addfsr 1,6
 23297  0FAF  0181               	clrf	1
 23298                           
 23299                           ;flashy_task.c: 494: data->blaster_state = FLASHY_BLASTER_IDLE_STATE;
 23300  0FB0  085E               	movf	flashy_Main@data,w
 23301  0FB1  3E09               	addlw	9
 23302  0FB2  00D4               	movwf	??_flashy_Main
 23303  0FB3  3000               	movlw	0
 23304  0FB4  3D5F               	addwfc	flashy_Main@data+1,w
 23305  0FB5  00D5               	movwf	??_flashy_Main+1
 23306  0FB6  0854               	movf	??_flashy_Main,w
 23307  0FB7  0086               	movwf	6
 23308  0FB8  0855               	movf	??_flashy_Main+1,w
 23309  0FB9  0087               	movwf	7
 23310  0FBA  3001               	movlw	1
 23311  0FBB  0081               	movwf	1
 23312                           
 23313                           ;flashy_task.c: 495: }
 23314  0FBC  2FD6               	goto	l9529
 23315  0FBD                     l9523:	
 23316                           
 23317                           ;flashy_task.c: 496: else {
 23318                           ;flashy_task.c: 497: data->blasterTickCount -= 1;
 23319  0FBD  085E               	movf	flashy_Main@data,w
 23320  0FBE  0086               	movwf	6
 23321  0FBF  085F               	movf	flashy_Main@data+1,w
 23322  0FC0  0087               	movwf	7
 23323  0FC1  3147               	addfsr 1,7
 23324  0FC2  3001               	movlw	1
 23325  0FC3  0281               	subwf	1,f
 23326  0FC4  3141               	addfsr 1,1
 23327  0FC5  3000               	movlw	0
 23328  0FC6  3B81               	subwfb	1,f
 23329  0FC7  317F               	addfsr 1,-1
 23330                           
 23331                           ;flashy_task.c: 502: }
 23332                           
 23333                           ;flashy_task.c: 501: break;
 23334                           
 23335                           ;flashy_task.c: 500: case FLASHY_BLASTER_IDLE_STATE:
 23336                           
 23337                           ;flashy_task.c: 498: }
 23338                           ;flashy_task.c: 499: break;
 23339  0FC8  2FD6               	goto	l9529
 23340  0FC9                     l9527:	
 23341  0FC9  085E               	movf	flashy_Main@data,w
 23342  0FCA  0086               	movwf	6
 23343  0FCB  085F               	movf	flashy_Main@data+1,w
 23344  0FCC  0087               	movwf	7
 23345  0FCD  3149               	addfsr 1,9
 23346  0FCE  0801               	movf	1,w
 23347                           
 23348                           ; Switch size 1, requested type "space"
 23349                           ; Number of cases is 2, Range of values is 0 to 1
 23350                           ; switch strategies available:
 23351                           ; Name         Instructions Cycles
 23352                           ; simple_byte            7     4 (average)
 23353                           ; direct_byte           10     6 (fixed)
 23354                           ; jumptable            260     6 (fixed)
 23355                           ;	Chosen strategy is simple_byte
 23356  0FCF  3A00               	xorlw	0	; case 0
 23357  0FD0  1903               	skipnz
 23358  0FD1  2F59               	goto	l9499
 23359  0FD2  3A01               	xorlw	1	; case 1
 23360  0FD3  1903               	skipnz
 23361  0FD4  2FD6               	goto	l9529
 23362  0FD5  2FD6               	goto	l9529
 23363  0FD6                     l9529:	
 23364                           
 23365                           ;flashy_task.c: 505: if (nullifyBadge_irGet() && (data->blaster_state != FLASHY_BLASTER_
      +                          SHOOTING_STATE)) {
 23366  0FD6  3198  2000  3188   	fcall	_nullifyBadge_irGet
 23367  0FD9  3A00               	xorlw	0
 23368  0FDA  1903               	skipnz
 23369  0FDB  0008               	return
 23370  0FDC  0020               	movlb	0	; select bank0
 23371  0FDD  085E               	movf	flashy_Main@data,w
 23372  0FDE  0086               	movwf	6
 23373  0FDF  085F               	movf	flashy_Main@data+1,w
 23374  0FE0  0087               	movwf	7
 23375  0FE1  3149               	addfsr 1,9
 23376  0FE2  0801               	movf	1,w
 23377  0FE3  1903               	btfsc	3,2
 23378  0FE4  0008               	return
 23379                           
 23380                           ;flashy_task.c: 506: data->displayTickCount = 0;
 23381  0FE5  085E               	movf	flashy_Main@data,w
 23382  0FE6  0086               	movwf	6
 23383  0FE7  085F               	movf	flashy_Main@data+1,w
 23384  0FE8  0087               	movwf	7
 23385  0FE9  3144               	addfsr 1,4
 23386  0FEA  3000               	movlw	0
 23387  0FEB  3FC0               	movwi [0]fsr1
 23388  0FEC  3FC1               	movwi [1]fsr1
 23389                           
 23390                           ;flashy_task.c: 507: deaths += 1;
 23391  0FED  3001               	movlw	1
 23392  0FEE  0021               	movlb	1	; select bank1
 23393  0FEF  07AA               	addwf	_deaths^(0+128),f
 23394  0FF0  3000               	movlw	0
 23395  0FF1  3DAB               	addwfc	(_deaths+1)^(0+128),f
 23396                           
 23397                           ;flashy_task.c: 508: data->display_state = FLASHY_STATE_DISPLAY_SHOT;
 23398  0FF2  0020               	movlb	0	; select bank0
 23399  0FF3  085E               	movf	flashy_Main@data,w
 23400  0FF4  3E06               	addlw	6
 23401  0FF5  00D4               	movwf	??_flashy_Main
 23402  0FF6  3000               	movlw	0
 23403  0FF7  3D5F               	addwfc	flashy_Main@data+1,w
 23404  0FF8  00D5               	movwf	??_flashy_Main+1
 23405  0FF9  0854               	movf	??_flashy_Main,w
 23406  0FFA  0086               	movwf	6
 23407  0FFB  0855               	movf	??_flashy_Main+1,w
 23408  0FFC  0087               	movwf	7
 23409  0FFD  3003               	movlw	3
 23410  0FFE  0081               	movwf	1
 23411  0FFF  0008               	return
 23412  1000                     __end_of_flashy_Main:	
 23413                           
 23414                           	psect	swtext1
 23415  3000                     __pswtext1:	
 23416  3000                     S10829:	
 23417  3000  3188  28D5         	ljmp	l9137
 23418  3002  3188  28FA         	ljmp	l9147
 23419  3004  3189  291E         	ljmp	l9157
 23420  3006  3189  2936         	ljmp	l9165
 23421  3008  3189  296D         	ljmp	l9183
 23422  300A  3189  2992         	ljmp	l9193
 23423                           
 23424                           	psect	text19
 23425  00E5                     __ptext19:	
 23426 ;; *************** function _slot_Main *****************
 23427 ;; Defined at:
 23428 ;;		line 96 in file "slot_task.c"
 23429 ;; Parameters:    Size  Location     Type
 23430 ;;  taskData        2   50[BANK0 ] PTR void 
 23431 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 23432 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 23433 ;; Auto vars:     Size  Location     Type
 23434 ;;  data            2   69[BANK0 ] PTR struct t_slot_taskDa
 23435 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 23436 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 23437 ;;  buttonPresse    1   68[BANK0 ] unsigned char 
 23438 ;; Return value:  Size  Location     Type
 23439 ;;                  1    wreg      void 
 23440 ;; Registers used:
 23441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23442 ;; Tracked objects:
 23443 ;;		On entry : 0/0
 23444 ;;		On exit  : 0/0
 23445 ;;		Unchanged: 0/0
 23446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23447 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23448 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23449 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23450 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23451 ;;Total ram usage:       21 bytes
 23452 ;; Hardware stack levels used:    1
 23453 ;; Hardware stack levels required when called:   11
 23454 ;; This function calls:
 23455 ;;		___lwmod
 23456 ;;		_marquee
 23457 ;;		_marquee_speedy
 23458 ;;		_memset
 23459 ;;		_nullifyBadge_buttonsGet
 23460 ;;		_rand
 23461 ;;		_slot_Finished_Animation
 23462 ;;		_slot_Running_Animation
 23463 ;;		_slot_Setup
 23464 ;;		_sprintf
 23465 ;;		_strlen
 23466 ;; This function is called by:
 23467 ;;		_main
 23468 ;;		_scheduler_TaskRun
 23469 ;; This function uses a non-reentrant model
 23470 ;;
 23471                           
 23472                           
 23473                           ;psect for function _slot_Main
 23474  00E5                     _slot_Main:	
 23475                           
 23476                           ;slot_task.c: 97: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 23477                           
 23478                           ;incstack = 0
 23479                           ; Regs used in _slot_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23480  00E5  0020               	movlb	0	; select bank0
 23481  00E6  0853               	movf	slot_Main@taskData+1,w
 23482  00E7  00E6               	movwf	slot_Main@data+1
 23483  00E8  0852               	movf	slot_Main@taskData,w
 23484  00E9  00E5               	movwf	slot_Main@data
 23485                           
 23486                           ;slot_task.c: 98: u8 buttonPressed;
 23487                           ;slot_task.c: 101: if ( currentTask != SLOT_TASK ){
 23488  00EA  0021               	movlb	1	; select bank1
 23489  00EB  033A               	decf	_currentTask^(0+128),w
 23490  00EC  043B               	iorwf	(_currentTask+1)^(0+128),w
 23491  00ED  1903               	btfsc	3,2
 23492  00EE  291E               	goto	l9779
 23493                           
 23494                           ;slot_task.c: 102: buttonPressed = nullifyBadge_buttonsGet();
 23495  00EF  31B6  264B  3180   	fcall	_nullifyBadge_buttonsGet
 23496  00F2  0020               	movlb	0	; select bank0
 23497  00F3  00D4               	movwf	??_slot_Main
 23498  00F4  0854               	movf	??_slot_Main,w
 23499  00F5  00E4               	movwf	slot_Main@buttonPressed
 23500                           
 23501                           ;slot_task.c: 106: data->holdCountA = 1;
 23502                           
 23503                           ;slot_task.c: 104: default:
 23504                           
 23505                           ;slot_task.c: 103: switch (buttonPressed) {
 23506  00F6  0865               	movf	slot_Main@data,w
 23507  00F7  0086               	movwf	6
 23508  00F8  0866               	movf	slot_Main@data+1,w
 23509  00F9  0087               	movwf	7
 23510  00FA  315F               	addfsr 1,31
 23511  00FB  3001               	movlw	1
 23512  00FC  3FC0               	movwi [0]fsr1
 23513  00FD  3000               	movlw	0
 23514  00FE  3FC1               	movwi [1]fsr1
 23515                           
 23516                           ;slot_task.c: 107: data->holdCountB = 1;
 23517  00FF  0865               	movf	slot_Main@data,w
 23518  0100  3E21               	addlw	33
 23519  0101  0086               	movwf	6
 23520  0102  3000               	movlw	0
 23521  0103  3D66               	addwfc	slot_Main@data+1,w
 23522  0104  0087               	movwf	7
 23523  0105  3001               	movlw	1
 23524  0106  3FC0               	movwi [0]fsr1
 23525  0107  3000               	movlw	0
 23526  0108  3FC1               	movwi [1]fsr1
 23527                           
 23528                           ;slot_task.c: 108: data->holdCountX = 1;
 23529  0109  0865               	movf	slot_Main@data,w
 23530  010A  3E23               	addlw	35
 23531  010B  0086               	movwf	6
 23532  010C  3000               	movlw	0
 23533  010D  3D66               	addwfc	slot_Main@data+1,w
 23534  010E  0087               	movwf	7
 23535  010F  3001               	movlw	1
 23536  0110  3FC0               	movwi [0]fsr1
 23537  0111  3000               	movlw	0
 23538  0112  3FC1               	movwi [1]fsr1
 23539                           
 23540                           ;slot_task.c: 109: data->holdCountY = 1;
 23541  0113  0865               	movf	slot_Main@data,w
 23542  0114  3E25               	addlw	37
 23543  0115  0086               	movwf	6
 23544  0116  3000               	movlw	0
 23545  0117  3D66               	addwfc	slot_Main@data+1,w
 23546  0118  0087               	movwf	7
 23547  0119  3001               	movlw	1
 23548  011A  3FC0               	movwi [0]fsr1
 23549  011B  3000               	movlw	0
 23550  011C  3FC1               	movwi [1]fsr1
 23551                           
 23552                           ;slot_task.c: 111: }
 23553                           
 23554                           ;slot_task.c: 110: break;
 23555  011D  0008               	return
 23556  011E                     l9779:	
 23557                           ;slot_task.c: 112: return;
 23558                           
 23559                           
 23560                           ;slot_task.c: 113: }
 23561                           ;slot_task.c: 115: buttonPressed = nullifyBadge_buttonsGet();
 23562  011E  31B6  264B  3180   	fcall	_nullifyBadge_buttonsGet
 23563  0121  0020               	movlb	0	; select bank0
 23564  0122  00D4               	movwf	??_slot_Main
 23565  0123  0854               	movf	??_slot_Main,w
 23566  0124  00E4               	movwf	slot_Main@buttonPressed
 23567                           
 23568                           ;slot_task.c: 119: memset(data->slot_print_buf, 0x00, 20);
 23569                           
 23570                           ;slot_task.c: 117: default:
 23571                           
 23572                           ;slot_task.c: 116: switch (buttonPressed) {
 23573  0125  0865               	movf	slot_Main@data,w
 23574  0126  3E0B               	addlw	11
 23575  0127  00F1               	movwf	memset@p1
 23576  0128  3000               	movlw	0
 23577  0129  3D66               	addwfc	slot_Main@data+1,w
 23578  012A  00F2               	movwf	memset@p1+1
 23579  012B  3000               	movlw	0
 23580  012C  00F3               	movwf	memset@c
 23581  012D  00F4               	movwf	memset@c+1
 23582  012E  3014               	movlw	20
 23583  012F  00F5               	movwf	memset@n
 23584  0130  3000               	movlw	0
 23585  0131  00F6               	movwf	memset@n+1
 23586  0132  31B4  242F  3180   	fcall	_memset
 23587                           
 23588                           ;slot_task.c: 122: if (data->displayTickCount < 100) {
 23589  0135  0020               	movlb	0	; select bank0
 23590  0136  0865               	movf	slot_Main@data,w
 23591  0137  0086               	movwf	6
 23592  0138  0866               	movf	slot_Main@data+1,w
 23593  0139  0087               	movwf	7
 23594  013A  3143               	addfsr 1,3
 23595  013B  3F40               	moviw [0]fsr1
 23596  013C  00D4               	movwf	??_slot_Main
 23597  013D  3F41               	moviw [1]fsr1
 23598  013E  00D5               	movwf	??_slot_Main+1
 23599  013F  3000               	movlw	0
 23600  0140  0255               	subwf	??_slot_Main+1,w
 23601  0141  3064               	movlw	100
 23602  0142  1903               	skipnz
 23603  0143  0254               	subwf	??_slot_Main,w
 23604  0144  1803               	skipnc
 23605  0145  2A51               	goto	l9799
 23606                           
 23607                           ;slot_task.c: 123: slot_Running_Animation(data);
 23608  0146  0866               	movf	slot_Main@data+1,w
 23609  0147  00B3               	movwf	slot_Running_Animation@taskData+1
 23610  0148  0865               	movf	slot_Main@data,w
 23611  0149  00B2               	movwf	slot_Running_Animation@taskData
 23612  014A  31A9  21AB  3180   	fcall	_slot_Running_Animation
 23613                           
 23614                           ;slot_task.c: 124: data->slot_wheel_index[0] = (u8)rand() % strlen(Slot_Wheel);
 23615  014D  3032               	movlw	low _Slot_Wheel
 23616  014E  00F1               	movwf	strlen@s
 23617  014F  3003               	movlw	high _Slot_Wheel
 23618  0150  00F2               	movwf	strlen@s+1
 23619  0151  31B4  24D3  3180   	fcall	_strlen
 23620  0154  0872               	movf	?_strlen+1,w
 23621  0155  0020               	movlb	0	; select bank0
 23622  0156  00AC               	movwf	___lwmod@divisor+1
 23623  0157  0871               	movf	?_strlen,w
 23624  0158  00AB               	movwf	___lwmod@divisor
 23625  0159  31A9  2168  3180   	fcall	_rand
 23626  015C  0020               	movlb	0	; select bank0
 23627  015D  0824               	movf	?_rand,w
 23628  015E  00D4               	movwf	??_slot_Main
 23629  015F  01D5               	clrf	??_slot_Main+1
 23630  0160  0854               	movf	??_slot_Main,w
 23631  0161  00AD               	movwf	___lwmod@dividend
 23632  0162  0855               	movf	??_slot_Main+1,w
 23633  0163  00AE               	movwf	___lwmod@dividend+1
 23634  0164  31B5  25EF  3180   	fcall	___lwmod
 23635  0167  0020               	movlb	0	; select bank0
 23636  0168  082B               	movf	?___lwmod,w
 23637  0169  00D6               	movwf	??_slot_Main+2
 23638  016A  0865               	movf	slot_Main@data,w
 23639  016B  3E07               	addlw	7
 23640  016C  00D7               	movwf	??_slot_Main+3
 23641  016D  3000               	movlw	0
 23642  016E  3D66               	addwfc	slot_Main@data+1,w
 23643  016F  00D8               	movwf	??_slot_Main+4
 23644  0170  0857               	movf	??_slot_Main+3,w
 23645  0171  0086               	movwf	6
 23646  0172  0858               	movf	??_slot_Main+4,w
 23647  0173  0087               	movwf	7
 23648  0174  0856               	movf	??_slot_Main+2,w
 23649  0175  0081               	movwf	1
 23650                           
 23651                           ;slot_task.c: 125: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 23652  0176  3032               	movlw	low _Slot_Wheel
 23653  0177  00F1               	movwf	strlen@s
 23654  0178  3003               	movlw	high _Slot_Wheel
 23655  0179  00F2               	movwf	strlen@s+1
 23656  017A  31B4  24D3  3180   	fcall	_strlen
 23657  017D  0872               	movf	?_strlen+1,w
 23658  017E  0020               	movlb	0	; select bank0
 23659  017F  00AC               	movwf	___lwmod@divisor+1
 23660  0180  0871               	movf	?_strlen,w
 23661  0181  00AB               	movwf	___lwmod@divisor
 23662  0182  31A9  2168  3180   	fcall	_rand
 23663  0185  0020               	movlb	0	; select bank0
 23664  0186  0824               	movf	?_rand,w
 23665  0187  00D4               	movwf	??_slot_Main
 23666  0188  01D5               	clrf	??_slot_Main+1
 23667  0189  0854               	movf	??_slot_Main,w
 23668  018A  00AD               	movwf	___lwmod@dividend
 23669  018B  0855               	movf	??_slot_Main+1,w
 23670  018C  00AE               	movwf	___lwmod@dividend+1
 23671  018D  31B5  25EF  3180   	fcall	___lwmod
 23672  0190  0020               	movlb	0	; select bank0
 23673  0191  082B               	movf	?___lwmod,w
 23674  0192  00D6               	movwf	??_slot_Main+2
 23675  0193  0865               	movf	slot_Main@data,w
 23676  0194  3E08               	addlw	8
 23677  0195  00D7               	movwf	??_slot_Main+3
 23678  0196  3000               	movlw	0
 23679  0197  3D66               	addwfc	slot_Main@data+1,w
 23680  0198  00D8               	movwf	??_slot_Main+4
 23681  0199  0857               	movf	??_slot_Main+3,w
 23682  019A  0086               	movwf	6
 23683  019B  0858               	movf	??_slot_Main+4,w
 23684  019C  0087               	movwf	7
 23685  019D  0856               	movf	??_slot_Main+2,w
 23686  019E  0081               	movwf	1
 23687                           
 23688                           ;slot_task.c: 126: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 23689  019F  3032               	movlw	low _Slot_Wheel
 23690  01A0  00F1               	movwf	strlen@s
 23691  01A1  3003               	movlw	high _Slot_Wheel
 23692  01A2  00F2               	movwf	strlen@s+1
 23693  01A3  31B4  24D3  3180   	fcall	_strlen
 23694  01A6  0872               	movf	?_strlen+1,w
 23695  01A7  0020               	movlb	0	; select bank0
 23696  01A8  00AC               	movwf	___lwmod@divisor+1
 23697  01A9  0871               	movf	?_strlen,w
 23698  01AA  00AB               	movwf	___lwmod@divisor
 23699  01AB  31A9  2168  3180   	fcall	_rand
 23700  01AE  0020               	movlb	0	; select bank0
 23701  01AF  0824               	movf	?_rand,w
 23702  01B0  00D4               	movwf	??_slot_Main
 23703  01B1  01D5               	clrf	??_slot_Main+1
 23704  01B2  0854               	movf	??_slot_Main,w
 23705  01B3  00AD               	movwf	___lwmod@dividend
 23706  01B4  0855               	movf	??_slot_Main+1,w
 23707  01B5  00AE               	movwf	___lwmod@dividend+1
 23708  01B6  31B5  25EF  3180   	fcall	___lwmod
 23709  01B9  0020               	movlb	0	; select bank0
 23710  01BA  082B               	movf	?___lwmod,w
 23711  01BB  00D6               	movwf	??_slot_Main+2
 23712  01BC  0865               	movf	slot_Main@data,w
 23713  01BD  3E09               	addlw	9
 23714  01BE  00D7               	movwf	??_slot_Main+3
 23715  01BF  3000               	movlw	0
 23716  01C0  3D66               	addwfc	slot_Main@data+1,w
 23717  01C1  00D8               	movwf	??_slot_Main+4
 23718  01C2  0857               	movf	??_slot_Main+3,w
 23719  01C3  0086               	movwf	6
 23720  01C4  0858               	movf	??_slot_Main+4,w
 23721  01C5  0087               	movwf	7
 23722  01C6  0856               	movf	??_slot_Main+2,w
 23723  01C7  0081               	movwf	1
 23724                           
 23725                           ;slot_task.c: 127: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23726  01C8  3032               	movlw	low _Slot_Wheel
 23727  01C9  00F1               	movwf	strlen@s
 23728  01CA  3003               	movlw	high _Slot_Wheel
 23729  01CB  00F2               	movwf	strlen@s+1
 23730  01CC  31B4  24D3  3180   	fcall	_strlen
 23731  01CF  0872               	movf	?_strlen+1,w
 23732  01D0  0020               	movlb	0	; select bank0
 23733  01D1  00AC               	movwf	___lwmod@divisor+1
 23734  01D2  0871               	movf	?_strlen,w
 23735  01D3  00AB               	movwf	___lwmod@divisor
 23736  01D4  31A9  2168  3180   	fcall	_rand
 23737  01D7  0020               	movlb	0	; select bank0
 23738  01D8  0824               	movf	?_rand,w
 23739  01D9  00D4               	movwf	??_slot_Main
 23740  01DA  01D5               	clrf	??_slot_Main+1
 23741  01DB  0854               	movf	??_slot_Main,w
 23742  01DC  00AD               	movwf	___lwmod@dividend
 23743  01DD  0855               	movf	??_slot_Main+1,w
 23744  01DE  00AE               	movwf	___lwmod@dividend+1
 23745  01DF  31B5  25EF  3180   	fcall	___lwmod
 23746  01E2  0020               	movlb	0	; select bank0
 23747  01E3  082B               	movf	?___lwmod,w
 23748  01E4  00D6               	movwf	??_slot_Main+2
 23749  01E5  0865               	movf	slot_Main@data,w
 23750  01E6  3E0A               	addlw	10
 23751  01E7  00D7               	movwf	??_slot_Main+3
 23752  01E8  3000               	movlw	0
 23753  01E9  3D66               	addwfc	slot_Main@data+1,w
 23754  01EA  00D8               	movwf	??_slot_Main+4
 23755  01EB  0857               	movf	??_slot_Main+3,w
 23756  01EC  0086               	movwf	6
 23757  01ED  0858               	movf	??_slot_Main+4,w
 23758  01EE  0087               	movwf	7
 23759  01EF  0856               	movf	??_slot_Main+2,w
 23760  01F0  0081               	movwf	1
 23761                           
 23762                           ;slot_task.c: 128: sprintf(data->slot_print_buf, "%c%c%c%c", Slot_Wheel[data->slot_wheel
      +                          _index[0]], Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]]
      +                          , Slot_Wheel[data->slot_wheel_index[3]]);
 23763  01F1  0865               	movf	slot_Main@data,w
 23764  01F2  3E0B               	addlw	11
 23765  01F3  00AF               	movwf	sprintf@sp
 23766  01F4  3000               	movlw	0
 23767  01F5  3D66               	addwfc	slot_Main@data+1,w
 23768  01F6  00B0               	movwf	sprintf@sp+1
 23769  01F7  301C               	movlw	low (STR_64| (0+32768))
 23770  01F8  00B1               	movwf	sprintf@f
 23771  01F9  30BB               	movlw	high (STR_64| (0+32768))
 23772  01FA  00B2               	movwf	sprintf@f+1
 23773  01FB  0865               	movf	slot_Main@data,w
 23774  01FC  0086               	movwf	6
 23775  01FD  0866               	movf	slot_Main@data+1,w
 23776  01FE  0087               	movwf	7
 23777  01FF  3147               	addfsr 1,7
 23778  0200  0801               	movf	1,w
 23779  0201  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23780  0202  0086               	movwf	6
 23781  0203  3003               	movlw	3	; select bank6/7
 23782  0204  0087               	movwf	7
 23783  0205  0801               	movf	1,w
 23784  0206  00D4               	movwf	??_slot_Main
 23785  0207  01D5               	clrf	??_slot_Main+1
 23786  0208  0854               	movf	??_slot_Main,w
 23787  0209  00B3               	movwf	?_sprintf+4
 23788  020A  0855               	movf	??_slot_Main+1,w
 23789  020B  00B4               	movwf	?_sprintf+5
 23790  020C  0865               	movf	slot_Main@data,w
 23791  020D  0086               	movwf	6
 23792  020E  0866               	movf	slot_Main@data+1,w
 23793  020F  0087               	movwf	7
 23794  0210  3148               	addfsr 1,8
 23795  0211  0801               	movf	1,w
 23796  0212  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23797  0213  0086               	movwf	6
 23798  0214  3003               	movlw	3	; select bank6/7
 23799  0215  0087               	movwf	7
 23800  0216  0801               	movf	1,w
 23801  0217  00D6               	movwf	??_slot_Main+2
 23802  0218  01D7               	clrf	??_slot_Main+3
 23803  0219  0856               	movf	??_slot_Main+2,w
 23804  021A  00B5               	movwf	?_sprintf+6
 23805  021B  0857               	movf	??_slot_Main+3,w
 23806  021C  00B6               	movwf	?_sprintf+7
 23807  021D  0865               	movf	slot_Main@data,w
 23808  021E  0086               	movwf	6
 23809  021F  0866               	movf	slot_Main@data+1,w
 23810  0220  0087               	movwf	7
 23811  0221  3149               	addfsr 1,9
 23812  0222  0801               	movf	1,w
 23813  0223  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23814  0224  0086               	movwf	6
 23815  0225  3003               	movlw	3	; select bank6/7
 23816  0226  0087               	movwf	7
 23817  0227  0801               	movf	1,w
 23818  0228  00D8               	movwf	??_slot_Main+4
 23819  0229  01D9               	clrf	??_slot_Main+5
 23820  022A  0858               	movf	??_slot_Main+4,w
 23821  022B  00B7               	movwf	?_sprintf+8
 23822  022C  0859               	movf	??_slot_Main+5,w
 23823  022D  00B8               	movwf	?_sprintf+9
 23824  022E  0865               	movf	slot_Main@data,w
 23825  022F  0086               	movwf	6
 23826  0230  0866               	movf	slot_Main@data+1,w
 23827  0231  0087               	movwf	7
 23828  0232  314A               	addfsr 1,10
 23829  0233  0801               	movf	1,w
 23830  0234  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23831  0235  0086               	movwf	6
 23832  0236  3003               	movlw	3	; select bank6/7
 23833  0237  0087               	movwf	7
 23834  0238  0801               	movf	1,w
 23835  0239  00DA               	movwf	??_slot_Main+6
 23836  023A  01DB               	clrf	??_slot_Main+7
 23837  023B  085A               	movf	??_slot_Main+6,w
 23838  023C  00B9               	movwf	?_sprintf+10
 23839  023D  085B               	movf	??_slot_Main+7,w
 23840  023E  00BA               	movwf	?_sprintf+11
 23841  023F  3199  21C2  3180   	fcall	_sprintf
 23842                           
 23843                           ;slot_task.c: 129: marquee(data->slot_print_buf, 1);}
 23844  0242  0020               	movlb	0	; select bank0
 23845  0243  0865               	movf	slot_Main@data,w
 23846  0244  3E0B               	addlw	11
 23847  0245  00BA               	movwf	marquee@string
 23848  0246  3000               	movlw	0
 23849  0247  3D66               	addwfc	slot_Main@data+1,w
 23850  0248  00BB               	movwf	marquee@string+1
 23851  0249  3001               	movlw	1
 23852  024A  00BC               	movwf	marquee@count
 23853  024B  3000               	movlw	0
 23854  024C  00BD               	movwf	marquee@count+1
 23855  024D  31A2  22D2  3180   	fcall	_marquee
 23856  0250  2E27               	goto	l9863
 23857  0251                     l9799:	
 23858                           
 23859                           ;slot_task.c: 130: else if (data->displayTickCount < 200) {
 23860  0251  0020               	movlb	0	; select bank0
 23861  0252  0865               	movf	slot_Main@data,w
 23862  0253  0086               	movwf	6
 23863  0254  0866               	movf	slot_Main@data+1,w
 23864  0255  0087               	movwf	7
 23865  0256  3143               	addfsr 1,3
 23866  0257  3F40               	moviw [0]fsr1
 23867  0258  00D4               	movwf	??_slot_Main
 23868  0259  3F41               	moviw [1]fsr1
 23869  025A  00D5               	movwf	??_slot_Main+1
 23870  025B  3000               	movlw	0
 23871  025C  0255               	subwf	??_slot_Main+1,w
 23872  025D  30C8               	movlw	200
 23873  025E  1903               	skipnz
 23874  025F  0254               	subwf	??_slot_Main,w
 23875  0260  1803               	skipnc
 23876  0261  2B47               	goto	l9813
 23877                           
 23878                           ;slot_task.c: 131: slot_Running_Animation(data);
 23879  0262  0866               	movf	slot_Main@data+1,w
 23880  0263  00B3               	movwf	slot_Running_Animation@taskData+1
 23881  0264  0865               	movf	slot_Main@data,w
 23882  0265  00B2               	movwf	slot_Running_Animation@taskData
 23883  0266  31A9  21AB  3180   	fcall	_slot_Running_Animation
 23884                           
 23885                           ;slot_task.c: 132: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 23886  0269  3032               	movlw	low _Slot_Wheel
 23887  026A  00F1               	movwf	strlen@s
 23888  026B  3003               	movlw	high _Slot_Wheel
 23889  026C  00F2               	movwf	strlen@s+1
 23890  026D  31B4  24D3  3180   	fcall	_strlen
 23891  0270  0872               	movf	?_strlen+1,w
 23892  0271  0020               	movlb	0	; select bank0
 23893  0272  00AC               	movwf	___lwmod@divisor+1
 23894  0273  0871               	movf	?_strlen,w
 23895  0274  00AB               	movwf	___lwmod@divisor
 23896  0275  31A9  2168  3180   	fcall	_rand
 23897  0278  0020               	movlb	0	; select bank0
 23898  0279  0824               	movf	?_rand,w
 23899  027A  00D4               	movwf	??_slot_Main
 23900  027B  01D5               	clrf	??_slot_Main+1
 23901  027C  0854               	movf	??_slot_Main,w
 23902  027D  00AD               	movwf	___lwmod@dividend
 23903  027E  0855               	movf	??_slot_Main+1,w
 23904  027F  00AE               	movwf	___lwmod@dividend+1
 23905  0280  31B5  25EF  3180   	fcall	___lwmod
 23906  0283  0020               	movlb	0	; select bank0
 23907  0284  082B               	movf	?___lwmod,w
 23908  0285  00D6               	movwf	??_slot_Main+2
 23909  0286  0865               	movf	slot_Main@data,w
 23910  0287  3E08               	addlw	8
 23911  0288  00D7               	movwf	??_slot_Main+3
 23912  0289  3000               	movlw	0
 23913  028A  3D66               	addwfc	slot_Main@data+1,w
 23914  028B  00D8               	movwf	??_slot_Main+4
 23915  028C  0857               	movf	??_slot_Main+3,w
 23916  028D  0086               	movwf	6
 23917  028E  0858               	movf	??_slot_Main+4,w
 23918  028F  0087               	movwf	7
 23919  0290  0856               	movf	??_slot_Main+2,w
 23920  0291  0081               	movwf	1
 23921                           
 23922                           ;slot_task.c: 133: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 23923  0292  3032               	movlw	low _Slot_Wheel
 23924  0293  00F1               	movwf	strlen@s
 23925  0294  3003               	movlw	high _Slot_Wheel
 23926  0295  00F2               	movwf	strlen@s+1
 23927  0296  31B4  24D3  3180   	fcall	_strlen
 23928  0299  0872               	movf	?_strlen+1,w
 23929  029A  0020               	movlb	0	; select bank0
 23930  029B  00AC               	movwf	___lwmod@divisor+1
 23931  029C  0871               	movf	?_strlen,w
 23932  029D  00AB               	movwf	___lwmod@divisor
 23933  029E  31A9  2168  3180   	fcall	_rand
 23934  02A1  0020               	movlb	0	; select bank0
 23935  02A2  0824               	movf	?_rand,w
 23936  02A3  00D4               	movwf	??_slot_Main
 23937  02A4  01D5               	clrf	??_slot_Main+1
 23938  02A5  0854               	movf	??_slot_Main,w
 23939  02A6  00AD               	movwf	___lwmod@dividend
 23940  02A7  0855               	movf	??_slot_Main+1,w
 23941  02A8  00AE               	movwf	___lwmod@dividend+1
 23942  02A9  31B5  25EF  3180   	fcall	___lwmod
 23943  02AC  0020               	movlb	0	; select bank0
 23944  02AD  082B               	movf	?___lwmod,w
 23945  02AE  00D6               	movwf	??_slot_Main+2
 23946  02AF  0865               	movf	slot_Main@data,w
 23947  02B0  3E09               	addlw	9
 23948  02B1  00D7               	movwf	??_slot_Main+3
 23949  02B2  3000               	movlw	0
 23950  02B3  3D66               	addwfc	slot_Main@data+1,w
 23951  02B4  00D8               	movwf	??_slot_Main+4
 23952  02B5  0857               	movf	??_slot_Main+3,w
 23953  02B6  0086               	movwf	6
 23954  02B7  0858               	movf	??_slot_Main+4,w
 23955  02B8  0087               	movwf	7
 23956  02B9  0856               	movf	??_slot_Main+2,w
 23957  02BA  0081               	movwf	1
 23958                           
 23959                           ;slot_task.c: 134: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23960  02BB  3032               	movlw	low _Slot_Wheel
 23961  02BC  00F1               	movwf	strlen@s
 23962  02BD  3003               	movlw	high _Slot_Wheel
 23963  02BE  00F2               	movwf	strlen@s+1
 23964  02BF  31B4  24D3  3180   	fcall	_strlen
 23965  02C2  0872               	movf	?_strlen+1,w
 23966  02C3  0020               	movlb	0	; select bank0
 23967  02C4  00AC               	movwf	___lwmod@divisor+1
 23968  02C5  0871               	movf	?_strlen,w
 23969  02C6  00AB               	movwf	___lwmod@divisor
 23970  02C7  31A9  2168  3180   	fcall	_rand
 23971  02CA  0020               	movlb	0	; select bank0
 23972  02CB  0824               	movf	?_rand,w
 23973  02CC  00D4               	movwf	??_slot_Main
 23974  02CD  01D5               	clrf	??_slot_Main+1
 23975  02CE  0854               	movf	??_slot_Main,w
 23976  02CF  00AD               	movwf	___lwmod@dividend
 23977  02D0  0855               	movf	??_slot_Main+1,w
 23978  02D1  00AE               	movwf	___lwmod@dividend+1
 23979  02D2  31B5  25EF  3180   	fcall	___lwmod
 23980  02D5  0020               	movlb	0	; select bank0
 23981  02D6  082B               	movf	?___lwmod,w
 23982  02D7  00D6               	movwf	??_slot_Main+2
 23983  02D8  0865               	movf	slot_Main@data,w
 23984  02D9  3E0A               	addlw	10
 23985  02DA  00D7               	movwf	??_slot_Main+3
 23986  02DB  3000               	movlw	0
 23987  02DC  3D66               	addwfc	slot_Main@data+1,w
 23988  02DD  00D8               	movwf	??_slot_Main+4
 23989  02DE  0857               	movf	??_slot_Main+3,w
 23990  02DF  0086               	movwf	6
 23991  02E0  0858               	movf	??_slot_Main+4,w
 23992  02E1  0087               	movwf	7
 23993  02E2  0856               	movf	??_slot_Main+2,w
 23994  02E3  0081               	movwf	1
 23995                           
 23996                           ;slot_task.c: 135: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]], Slot_Whe
      +                          el[data->slot_wheel_index[3]]);
 23997  02E4  0865               	movf	slot_Main@data,w
 23998  02E5  3E0B               	addlw	11
 23999  02E6  00AF               	movwf	sprintf@sp
 24000  02E7  3000               	movlw	0
 24001  02E8  3D66               	addwfc	slot_Main@data+1,w
 24002  02E9  00B0               	movwf	sprintf@sp+1
 24003  02EA  301C               	movlw	low (STR_64| (0+32768))
 24004  02EB  00B1               	movwf	sprintf@f
 24005  02EC  30BB               	movlw	high (STR_64| (0+32768))
 24006  02ED  00B2               	movwf	sprintf@f+1
 24007  02EE  357C               	lslf	_Shot_Index,w
 24008  02EF  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24009  02F0  0086               	movwf	6
 24010  02F1  3001               	movlw	1	; select bank3/4
 24011  02F2  0087               	movwf	7
 24012  02F3  3F40               	moviw [0]fsr1
 24013  02F4  00D4               	movwf	??_slot_Main
 24014  02F5  3F41               	moviw [1]fsr1
 24015  02F6  00D5               	movwf	??_slot_Main+1
 24016  02F7  0854               	movf	??_slot_Main,w
 24017  02F8  0084               	movwf	4
 24018  02F9  0855               	movf	??_slot_Main+1,w
 24019  02FA  0085               	movwf	5
 24020  02FB  0800               	movf	0,w	;code access
 24021  02FC  00D6               	movwf	??_slot_Main+2
 24022  02FD  01D7               	clrf	??_slot_Main+3
 24023  02FE  0856               	movf	??_slot_Main+2,w
 24024  02FF  00B3               	movwf	?_sprintf+4
 24025  0300  0857               	movf	??_slot_Main+3,w
 24026  0301  00B4               	movwf	?_sprintf+5
 24027  0302  0865               	movf	slot_Main@data,w
 24028  0303  0086               	movwf	6
 24029  0304  0866               	movf	slot_Main@data+1,w
 24030  0305  0087               	movwf	7
 24031  0306  3148               	addfsr 1,8
 24032  0307  0801               	movf	1,w
 24033  0308  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24034  0309  0086               	movwf	6
 24035  030A  3003               	movlw	3	; select bank6/7
 24036  030B  0087               	movwf	7
 24037  030C  0801               	movf	1,w
 24038  030D  00D8               	movwf	??_slot_Main+4
 24039  030E  01D9               	clrf	??_slot_Main+5
 24040  030F  0858               	movf	??_slot_Main+4,w
 24041  0310  00B5               	movwf	?_sprintf+6
 24042  0311  0859               	movf	??_slot_Main+5,w
 24043  0312  00B6               	movwf	?_sprintf+7
 24044  0313  0865               	movf	slot_Main@data,w
 24045  0314  0086               	movwf	6
 24046  0315  0866               	movf	slot_Main@data+1,w
 24047  0316  0087               	movwf	7
 24048  0317  3149               	addfsr 1,9
 24049  0318  0801               	movf	1,w
 24050  0319  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24051  031A  0086               	movwf	6
 24052  031B  3003               	movlw	3	; select bank6/7
 24053  031C  0087               	movwf	7
 24054  031D  0801               	movf	1,w
 24055  031E  00DA               	movwf	??_slot_Main+6
 24056  031F  01DB               	clrf	??_slot_Main+7
 24057  0320  085A               	movf	??_slot_Main+6,w
 24058  0321  00B7               	movwf	?_sprintf+8
 24059  0322  085B               	movf	??_slot_Main+7,w
 24060  0323  00B8               	movwf	?_sprintf+9
 24061  0324  0865               	movf	slot_Main@data,w
 24062  0325  0086               	movwf	6
 24063  0326  0866               	movf	slot_Main@data+1,w
 24064  0327  0087               	movwf	7
 24065  0328  314A               	addfsr 1,10
 24066  0329  0801               	movf	1,w
 24067  032A  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24068  032B  0086               	movwf	6
 24069  032C  3003               	movlw	3	; select bank6/7
 24070  032D  0087               	movwf	7
 24071  032E  0801               	movf	1,w
 24072  032F  00DC               	movwf	??_slot_Main+8
 24073  0330  01DD               	clrf	??_slot_Main+9
 24074  0331  085C               	movf	??_slot_Main+8,w
 24075  0332  00B9               	movwf	?_sprintf+10
 24076  0333  085D               	movf	??_slot_Main+9,w
 24077  0334  00BA               	movwf	?_sprintf+11
 24078  0335  3199  21C2  3180   	fcall	_sprintf
 24079                           
 24080                           ;slot_task.c: 136: marquee(data->slot_print_buf, 1);}
 24081  0338  0020               	movlb	0	; select bank0
 24082  0339  0865               	movf	slot_Main@data,w
 24083  033A  3E0B               	addlw	11
 24084  033B  00BA               	movwf	marquee@string
 24085  033C  3000               	movlw	0
 24086  033D  3D66               	addwfc	slot_Main@data+1,w
 24087  033E  00BB               	movwf	marquee@string+1
 24088  033F  3001               	movlw	1
 24089  0340  00BC               	movwf	marquee@count
 24090  0341  3000               	movlw	0
 24091  0342  00BD               	movwf	marquee@count+1
 24092  0343  31A2  22D2  3180   	fcall	_marquee
 24093  0346  2E27               	goto	l9863
 24094  0347                     l9813:	
 24095                           
 24096                           ;slot_task.c: 137: else if (data->displayTickCount < 300) {
 24097  0347  0020               	movlb	0	; select bank0
 24098  0348  0865               	movf	slot_Main@data,w
 24099  0349  0086               	movwf	6
 24100  034A  0866               	movf	slot_Main@data+1,w
 24101  034B  0087               	movwf	7
 24102  034C  3143               	addfsr 1,3
 24103  034D  3F40               	moviw [0]fsr1
 24104  034E  00D4               	movwf	??_slot_Main
 24105  034F  3F41               	moviw [1]fsr1
 24106  0350  00D5               	movwf	??_slot_Main+1
 24107  0351  3001               	movlw	1
 24108  0352  0255               	subwf	??_slot_Main+1,w
 24109  0353  302C               	movlw	44
 24110  0354  1903               	skipnz
 24111  0355  0254               	subwf	??_slot_Main,w
 24112  0356  1803               	skipnc
 24113  0357  2C1A               	goto	l9825
 24114                           
 24115                           ;slot_task.c: 138: slot_Running_Animation(data);
 24116  0358  0866               	movf	slot_Main@data+1,w
 24117  0359  00B3               	movwf	slot_Running_Animation@taskData+1
 24118  035A  0865               	movf	slot_Main@data,w
 24119  035B  00B2               	movwf	slot_Running_Animation@taskData
 24120  035C  31A9  21AB  3180   	fcall	_slot_Running_Animation
 24121                           
 24122                           ;slot_task.c: 139: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 24123  035F  3032               	movlw	low _Slot_Wheel
 24124  0360  00F1               	movwf	strlen@s
 24125  0361  3003               	movlw	high _Slot_Wheel
 24126  0362  00F2               	movwf	strlen@s+1
 24127  0363  31B4  24D3  3180   	fcall	_strlen
 24128  0366  0872               	movf	?_strlen+1,w
 24129  0367  0020               	movlb	0	; select bank0
 24130  0368  00AC               	movwf	___lwmod@divisor+1
 24131  0369  0871               	movf	?_strlen,w
 24132  036A  00AB               	movwf	___lwmod@divisor
 24133  036B  31A9  2168  3180   	fcall	_rand
 24134  036E  0020               	movlb	0	; select bank0
 24135  036F  0824               	movf	?_rand,w
 24136  0370  00D4               	movwf	??_slot_Main
 24137  0371  01D5               	clrf	??_slot_Main+1
 24138  0372  0854               	movf	??_slot_Main,w
 24139  0373  00AD               	movwf	___lwmod@dividend
 24140  0374  0855               	movf	??_slot_Main+1,w
 24141  0375  00AE               	movwf	___lwmod@dividend+1
 24142  0376  31B5  25EF  3180   	fcall	___lwmod
 24143  0379  0020               	movlb	0	; select bank0
 24144  037A  082B               	movf	?___lwmod,w
 24145  037B  00D6               	movwf	??_slot_Main+2
 24146  037C  0865               	movf	slot_Main@data,w
 24147  037D  3E09               	addlw	9
 24148  037E  00D7               	movwf	??_slot_Main+3
 24149  037F  3000               	movlw	0
 24150  0380  3D66               	addwfc	slot_Main@data+1,w
 24151  0381  00D8               	movwf	??_slot_Main+4
 24152  0382  0857               	movf	??_slot_Main+3,w
 24153  0383  0086               	movwf	6
 24154  0384  0858               	movf	??_slot_Main+4,w
 24155  0385  0087               	movwf	7
 24156  0386  0856               	movf	??_slot_Main+2,w
 24157  0387  0081               	movwf	1
 24158                           
 24159                           ;slot_task.c: 140: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 24160  0388  3032               	movlw	low _Slot_Wheel
 24161  0389  00F1               	movwf	strlen@s
 24162  038A  3003               	movlw	high _Slot_Wheel
 24163  038B  00F2               	movwf	strlen@s+1
 24164  038C  31B4  24D3  3180   	fcall	_strlen
 24165  038F  0872               	movf	?_strlen+1,w
 24166  0390  0020               	movlb	0	; select bank0
 24167  0391  00AC               	movwf	___lwmod@divisor+1
 24168  0392  0871               	movf	?_strlen,w
 24169  0393  00AB               	movwf	___lwmod@divisor
 24170  0394  31A9  2168  3180   	fcall	_rand
 24171  0397  0020               	movlb	0	; select bank0
 24172  0398  0824               	movf	?_rand,w
 24173  0399  00D4               	movwf	??_slot_Main
 24174  039A  01D5               	clrf	??_slot_Main+1
 24175  039B  0854               	movf	??_slot_Main,w
 24176  039C  00AD               	movwf	___lwmod@dividend
 24177  039D  0855               	movf	??_slot_Main+1,w
 24178  039E  00AE               	movwf	___lwmod@dividend+1
 24179  039F  31B5  25EF  3180   	fcall	___lwmod
 24180  03A2  0020               	movlb	0	; select bank0
 24181  03A3  082B               	movf	?___lwmod,w
 24182  03A4  00D6               	movwf	??_slot_Main+2
 24183  03A5  0865               	movf	slot_Main@data,w
 24184  03A6  3E0A               	addlw	10
 24185  03A7  00D7               	movwf	??_slot_Main+3
 24186  03A8  3000               	movlw	0
 24187  03A9  3D66               	addwfc	slot_Main@data+1,w
 24188  03AA  00D8               	movwf	??_slot_Main+4
 24189  03AB  0857               	movf	??_slot_Main+3,w
 24190  03AC  0086               	movwf	6
 24191  03AD  0858               	movf	??_slot_Main+4,w
 24192  03AE  0087               	movwf	7
 24193  03AF  0856               	movf	??_slot_Main+2,w
 24194  03B0  0081               	movwf	1
 24195                           
 24196                           ;slot_task.c: 141: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Slot_Wheel[data->slot_wheel_index[2]], Slot_Wheel[data->s
      +                          lot_wheel_index[3]]);
 24197  03B1  0865               	movf	slot_Main@data,w
 24198  03B2  3E0B               	addlw	11
 24199  03B3  00AF               	movwf	sprintf@sp
 24200  03B4  3000               	movlw	0
 24201  03B5  3D66               	addwfc	slot_Main@data+1,w
 24202  03B6  00B0               	movwf	sprintf@sp+1
 24203  03B7  301C               	movlw	low (STR_64| (0+32768))
 24204  03B8  00B1               	movwf	sprintf@f
 24205  03B9  30BB               	movlw	high (STR_64| (0+32768))
 24206  03BA  00B2               	movwf	sprintf@f+1
 24207  03BB  357C               	lslf	_Shot_Index,w
 24208  03BC  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24209  03BD  0086               	movwf	6
 24210  03BE  3001               	movlw	1	; select bank3/4
 24211  03BF  0087               	movwf	7
 24212  03C0  3F40               	moviw [0]fsr1
 24213  03C1  00D4               	movwf	??_slot_Main
 24214  03C2  3F41               	moviw [1]fsr1
 24215  03C3  00D5               	movwf	??_slot_Main+1
 24216  03C4  0854               	movf	??_slot_Main,w
 24217  03C5  0084               	movwf	4
 24218  03C6  0855               	movf	??_slot_Main+1,w
 24219  03C7  0085               	movwf	5
 24220  03C8  0800               	movf	0,w	;code access
 24221  03C9  00D6               	movwf	??_slot_Main+2
 24222  03CA  01D7               	clrf	??_slot_Main+3
 24223  03CB  0856               	movf	??_slot_Main+2,w
 24224  03CC  00B3               	movwf	?_sprintf+4
 24225  03CD  0857               	movf	??_slot_Main+3,w
 24226  03CE  00B4               	movwf	?_sprintf+5
 24227  03CF  357C               	lslf	_Shot_Index,w
 24228  03D0  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24229  03D1  0086               	movwf	6
 24230  03D2  3001               	movlw	1	; select bank3/4
 24231  03D3  0087               	movwf	7
 24232  03D4  3F40               	moviw [0]fsr1
 24233  03D5  00D8               	movwf	??_slot_Main+4
 24234  03D6  3F41               	moviw [1]fsr1
 24235  03D7  00D9               	movwf	??_slot_Main+5
 24236  03D8  3001               	movlw	1
 24237  03D9  0758               	addwf	??_slot_Main+4,w
 24238  03DA  0084               	movwf	4
 24239  03DB  0859               	movf	??_slot_Main+5,w
 24240  03DC  1803               	skipnc
 24241  03DD  0A59               	incf	??_slot_Main+5,w
 24242  03DE  0085               	movwf	5
 24243  03DF  0800               	movf	0,w	;code access
 24244  03E0  00DA               	movwf	??_slot_Main+6
 24245  03E1  01DB               	clrf	??_slot_Main+7
 24246  03E2  085A               	movf	??_slot_Main+6,w
 24247  03E3  00B5               	movwf	?_sprintf+6
 24248  03E4  085B               	movf	??_slot_Main+7,w
 24249  03E5  00B6               	movwf	?_sprintf+7
 24250  03E6  0865               	movf	slot_Main@data,w
 24251  03E7  0086               	movwf	6
 24252  03E8  0866               	movf	slot_Main@data+1,w
 24253  03E9  0087               	movwf	7
 24254  03EA  3149               	addfsr 1,9
 24255  03EB  0801               	movf	1,w
 24256  03EC  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24257  03ED  0086               	movwf	6
 24258  03EE  3003               	movlw	3	; select bank6/7
 24259  03EF  0087               	movwf	7
 24260  03F0  0801               	movf	1,w
 24261  03F1  00DC               	movwf	??_slot_Main+8
 24262  03F2  01DD               	clrf	??_slot_Main+9
 24263  03F3  085C               	movf	??_slot_Main+8,w
 24264  03F4  00B7               	movwf	?_sprintf+8
 24265  03F5  085D               	movf	??_slot_Main+9,w
 24266  03F6  00B8               	movwf	?_sprintf+9
 24267  03F7  0865               	movf	slot_Main@data,w
 24268  03F8  0086               	movwf	6
 24269  03F9  0866               	movf	slot_Main@data+1,w
 24270  03FA  0087               	movwf	7
 24271  03FB  314A               	addfsr 1,10
 24272  03FC  0801               	movf	1,w
 24273  03FD  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24274  03FE  0086               	movwf	6
 24275  03FF  3003               	movlw	3	; select bank6/7
 24276  0400  0087               	movwf	7
 24277  0401  0801               	movf	1,w
 24278  0402  00DE               	movwf	??_slot_Main+10
 24279  0403  01DF               	clrf	??_slot_Main+11
 24280  0404  085E               	movf	??_slot_Main+10,w
 24281  0405  00B9               	movwf	?_sprintf+10
 24282  0406  085F               	movf	??_slot_Main+11,w
 24283  0407  00BA               	movwf	?_sprintf+11
 24284  0408  3199  21C2  3180   	fcall	_sprintf
 24285                           
 24286                           ;slot_task.c: 142: marquee(data->slot_print_buf, 1);}
 24287  040B  0020               	movlb	0	; select bank0
 24288  040C  0865               	movf	slot_Main@data,w
 24289  040D  3E0B               	addlw	11
 24290  040E  00BA               	movwf	marquee@string
 24291  040F  3000               	movlw	0
 24292  0410  3D66               	addwfc	slot_Main@data+1,w
 24293  0411  00BB               	movwf	marquee@string+1
 24294  0412  3001               	movlw	1
 24295  0413  00BC               	movwf	marquee@count
 24296  0414  3000               	movlw	0
 24297  0415  00BD               	movwf	marquee@count+1
 24298  0416  31A2  22D2  3180   	fcall	_marquee
 24299  0419  2E27               	goto	l9863
 24300  041A                     l9825:	
 24301                           
 24302                           ;slot_task.c: 143: else if (data->displayTickCount < 400) {
 24303  041A  0020               	movlb	0	; select bank0
 24304  041B  0865               	movf	slot_Main@data,w
 24305  041C  0086               	movwf	6
 24306  041D  0866               	movf	slot_Main@data+1,w
 24307  041E  0087               	movwf	7
 24308  041F  3143               	addfsr 1,3
 24309  0420  3F40               	moviw [0]fsr1
 24310  0421  00D4               	movwf	??_slot_Main
 24311  0422  3F41               	moviw [1]fsr1
 24312  0423  00D5               	movwf	??_slot_Main+1
 24313  0424  3001               	movlw	1
 24314  0425  0255               	subwf	??_slot_Main+1,w
 24315  0426  3090               	movlw	144
 24316  0427  1903               	skipnz
 24317  0428  0254               	subwf	??_slot_Main,w
 24318  0429  1803               	skipnc
 24319  042A  2CCA               	goto	l9835
 24320                           
 24321                           ;slot_task.c: 144: slot_Running_Animation(data);
 24322  042B  0866               	movf	slot_Main@data+1,w
 24323  042C  00B3               	movwf	slot_Running_Animation@taskData+1
 24324  042D  0865               	movf	slot_Main@data,w
 24325  042E  00B2               	movwf	slot_Running_Animation@taskData
 24326  042F  31A9  21AB  3180   	fcall	_slot_Running_Animation
 24327                           
 24328                           ;slot_task.c: 145: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 24329  0432  3032               	movlw	low _Slot_Wheel
 24330  0433  00F1               	movwf	strlen@s
 24331  0434  3003               	movlw	high _Slot_Wheel
 24332  0435  00F2               	movwf	strlen@s+1
 24333  0436  31B4  24D3  3180   	fcall	_strlen
 24334  0439  0872               	movf	?_strlen+1,w
 24335  043A  0020               	movlb	0	; select bank0
 24336  043B  00AC               	movwf	___lwmod@divisor+1
 24337  043C  0871               	movf	?_strlen,w
 24338  043D  00AB               	movwf	___lwmod@divisor
 24339  043E  31A9  2168  3180   	fcall	_rand
 24340  0441  0020               	movlb	0	; select bank0
 24341  0442  0824               	movf	?_rand,w
 24342  0443  00D4               	movwf	??_slot_Main
 24343  0444  01D5               	clrf	??_slot_Main+1
 24344  0445  0854               	movf	??_slot_Main,w
 24345  0446  00AD               	movwf	___lwmod@dividend
 24346  0447  0855               	movf	??_slot_Main+1,w
 24347  0448  00AE               	movwf	___lwmod@dividend+1
 24348  0449  31B5  25EF  3180   	fcall	___lwmod
 24349  044C  0020               	movlb	0	; select bank0
 24350  044D  082B               	movf	?___lwmod,w
 24351  044E  00D6               	movwf	??_slot_Main+2
 24352  044F  0865               	movf	slot_Main@data,w
 24353  0450  3E0A               	addlw	10
 24354  0451  00D7               	movwf	??_slot_Main+3
 24355  0452  3000               	movlw	0
 24356  0453  3D66               	addwfc	slot_Main@data+1,w
 24357  0454  00D8               	movwf	??_slot_Main+4
 24358  0455  0857               	movf	??_slot_Main+3,w
 24359  0456  0086               	movwf	6
 24360  0457  0858               	movf	??_slot_Main+4,w
 24361  0458  0087               	movwf	7
 24362  0459  0856               	movf	??_slot_Main+2,w
 24363  045A  0081               	movwf	1
 24364                           
 24365                           ;slot_task.c: 146: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Slot_Wheel[data->slot_wheel_
      +                          index[3]]);
 24366  045B  0865               	movf	slot_Main@data,w
 24367  045C  3E0B               	addlw	11
 24368  045D  00AF               	movwf	sprintf@sp
 24369  045E  3000               	movlw	0
 24370  045F  3D66               	addwfc	slot_Main@data+1,w
 24371  0460  00B0               	movwf	sprintf@sp+1
 24372  0461  301C               	movlw	low (STR_64| (0+32768))
 24373  0462  00B1               	movwf	sprintf@f
 24374  0463  30BB               	movlw	high (STR_64| (0+32768))
 24375  0464  00B2               	movwf	sprintf@f+1
 24376  0465  357C               	lslf	_Shot_Index,w
 24377  0466  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24378  0467  0086               	movwf	6
 24379  0468  3001               	movlw	1	; select bank3/4
 24380  0469  0087               	movwf	7
 24381  046A  3F40               	moviw [0]fsr1
 24382  046B  00D4               	movwf	??_slot_Main
 24383  046C  3F41               	moviw [1]fsr1
 24384  046D  00D5               	movwf	??_slot_Main+1
 24385  046E  0854               	movf	??_slot_Main,w
 24386  046F  0084               	movwf	4
 24387  0470  0855               	movf	??_slot_Main+1,w
 24388  0471  0085               	movwf	5
 24389  0472  0800               	movf	0,w	;code access
 24390  0473  00D6               	movwf	??_slot_Main+2
 24391  0474  01D7               	clrf	??_slot_Main+3
 24392  0475  0856               	movf	??_slot_Main+2,w
 24393  0476  00B3               	movwf	?_sprintf+4
 24394  0477  0857               	movf	??_slot_Main+3,w
 24395  0478  00B4               	movwf	?_sprintf+5
 24396  0479  357C               	lslf	_Shot_Index,w
 24397  047A  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24398  047B  0086               	movwf	6
 24399  047C  3001               	movlw	1	; select bank3/4
 24400  047D  0087               	movwf	7
 24401  047E  3F40               	moviw [0]fsr1
 24402  047F  00D8               	movwf	??_slot_Main+4
 24403  0480  3F41               	moviw [1]fsr1
 24404  0481  00D9               	movwf	??_slot_Main+5
 24405  0482  3001               	movlw	1
 24406  0483  0758               	addwf	??_slot_Main+4,w
 24407  0484  0084               	movwf	4
 24408  0485  0859               	movf	??_slot_Main+5,w
 24409  0486  1803               	skipnc
 24410  0487  0A59               	incf	??_slot_Main+5,w
 24411  0488  0085               	movwf	5
 24412  0489  0800               	movf	0,w	;code access
 24413  048A  00DA               	movwf	??_slot_Main+6
 24414  048B  01DB               	clrf	??_slot_Main+7
 24415  048C  085A               	movf	??_slot_Main+6,w
 24416  048D  00B5               	movwf	?_sprintf+6
 24417  048E  085B               	movf	??_slot_Main+7,w
 24418  048F  00B6               	movwf	?_sprintf+7
 24419  0490  357C               	lslf	_Shot_Index,w
 24420  0491  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24421  0492  0086               	movwf	6
 24422  0493  3001               	movlw	1	; select bank3/4
 24423  0494  0087               	movwf	7
 24424  0495  3F40               	moviw [0]fsr1
 24425  0496  00DC               	movwf	??_slot_Main+8
 24426  0497  3F41               	moviw [1]fsr1
 24427  0498  00DD               	movwf	??_slot_Main+9
 24428  0499  3002               	movlw	2
 24429  049A  075C               	addwf	??_slot_Main+8,w
 24430  049B  0084               	movwf	4
 24431  049C  085D               	movf	??_slot_Main+9,w
 24432  049D  1803               	skipnc
 24433  049E  0A5D               	incf	??_slot_Main+9,w
 24434  049F  0085               	movwf	5
 24435  04A0  0800               	movf	0,w	;code access
 24436  04A1  00DE               	movwf	??_slot_Main+10
 24437  04A2  01DF               	clrf	??_slot_Main+11
 24438  04A3  085E               	movf	??_slot_Main+10,w
 24439  04A4  00B7               	movwf	?_sprintf+8
 24440  04A5  085F               	movf	??_slot_Main+11,w
 24441  04A6  00B8               	movwf	?_sprintf+9
 24442  04A7  0865               	movf	slot_Main@data,w
 24443  04A8  0086               	movwf	6
 24444  04A9  0866               	movf	slot_Main@data+1,w
 24445  04AA  0087               	movwf	7
 24446  04AB  314A               	addfsr 1,10
 24447  04AC  0801               	movf	1,w
 24448  04AD  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24449  04AE  0086               	movwf	6
 24450  04AF  3003               	movlw	3	; select bank6/7
 24451  04B0  0087               	movwf	7
 24452  04B1  0801               	movf	1,w
 24453  04B2  00E0               	movwf	??_slot_Main+12
 24454  04B3  01E1               	clrf	??_slot_Main+13
 24455  04B4  0860               	movf	??_slot_Main+12,w
 24456  04B5  00B9               	movwf	?_sprintf+10
 24457  04B6  0861               	movf	??_slot_Main+13,w
 24458  04B7  00BA               	movwf	?_sprintf+11
 24459  04B8  3199  21C2  3180   	fcall	_sprintf
 24460                           
 24461                           ;slot_task.c: 148: marquee(data->slot_print_buf, 1);}
 24462  04BB  0020               	movlb	0	; select bank0
 24463  04BC  0865               	movf	slot_Main@data,w
 24464  04BD  3E0B               	addlw	11
 24465  04BE  00BA               	movwf	marquee@string
 24466  04BF  3000               	movlw	0
 24467  04C0  3D66               	addwfc	slot_Main@data+1,w
 24468  04C1  00BB               	movwf	marquee@string+1
 24469  04C2  3001               	movlw	1
 24470  04C3  00BC               	movwf	marquee@count
 24471  04C4  3000               	movlw	0
 24472  04C5  00BD               	movwf	marquee@count+1
 24473  04C6  31A2  22D2  3180   	fcall	_marquee
 24474  04C9  2E27               	goto	l9863
 24475  04CA                     l9835:	
 24476                           
 24477                           ;slot_task.c: 149: else if (data->displayTickCount < 500) {
 24478  04CA  0020               	movlb	0	; select bank0
 24479  04CB  0865               	movf	slot_Main@data,w
 24480  04CC  0086               	movwf	6
 24481  04CD  0866               	movf	slot_Main@data+1,w
 24482  04CE  0087               	movwf	7
 24483  04CF  3143               	addfsr 1,3
 24484  04D0  3F40               	moviw [0]fsr1
 24485  04D1  00D4               	movwf	??_slot_Main
 24486  04D2  3F41               	moviw [1]fsr1
 24487  04D3  00D5               	movwf	??_slot_Main+1
 24488  04D4  3001               	movlw	1
 24489  04D5  0255               	subwf	??_slot_Main+1,w
 24490  04D6  30F4               	movlw	244
 24491  04D7  1903               	skipnz
 24492  04D8  0254               	subwf	??_slot_Main,w
 24493  04D9  1803               	skipnc
 24494  04DA  2D83               	goto	l9843
 24495                           
 24496                           ;slot_task.c: 150: slot_Finished_Animation(data);
 24497  04DB  0866               	movf	slot_Main@data+1,w
 24498  04DC  00BE               	movwf	slot_Finished_Animation@taskData+1
 24499  04DD  0865               	movf	slot_Main@data,w
 24500  04DE  00BD               	movwf	slot_Finished_Animation@taskData
 24501  04DF  31B5  259E  3180   	fcall	_slot_Finished_Animation
 24502                           
 24503                           ;slot_task.c: 151: if ( data->displayTickCount % 50 <= 25 ) {
 24504  04E2  3032               	movlw	50
 24505  04E3  0020               	movlb	0	; select bank0
 24506  04E4  00AB               	movwf	___lwmod@divisor
 24507  04E5  3000               	movlw	0
 24508  04E6  00AC               	movwf	___lwmod@divisor+1
 24509  04E7  0865               	movf	slot_Main@data,w
 24510  04E8  0086               	movwf	6
 24511  04E9  0866               	movf	slot_Main@data+1,w
 24512  04EA  0087               	movwf	7
 24513  04EB  3143               	addfsr 1,3
 24514  04EC  3F40               	moviw [0]fsr1
 24515  04ED  00AD               	movwf	___lwmod@dividend
 24516  04EE  3F41               	moviw [1]fsr1
 24517  04EF  00AE               	movwf	___lwmod@dividend+1
 24518  04F0  31B5  25EF  3180   	fcall	___lwmod
 24519  04F3  3000               	movlw	0
 24520  04F4  0020               	movlb	0	; select bank0
 24521  04F5  022C               	subwf	?___lwmod+1,w
 24522  04F6  301A               	movlw	26
 24523  04F7  1903               	skipnz
 24524  04F8  022B               	subwf	?___lwmod,w
 24525  04F9  1803               	skipnc
 24526  04FA  2D0D               	goto	l9841
 24527                           
 24528                           ;slot_task.c: 152: memset(data->slot_print_buf, 0x20, 4);
 24529  04FB  0865               	movf	slot_Main@data,w
 24530  04FC  3E0B               	addlw	11
 24531  04FD  00F1               	movwf	memset@p1
 24532  04FE  3000               	movlw	0
 24533  04FF  3D66               	addwfc	slot_Main@data+1,w
 24534  0500  00F2               	movwf	memset@p1+1
 24535  0501  3020               	movlw	32
 24536  0502  00F3               	movwf	memset@c
 24537  0503  3000               	movlw	0
 24538  0504  00F4               	movwf	memset@c+1
 24539  0505  3004               	movlw	4
 24540  0506  00F5               	movwf	memset@n
 24541  0507  3000               	movlw	0
 24542  0508  00F6               	movwf	memset@n+1
 24543  0509  31B4  242F  3180   	fcall	_memset
 24544                           
 24545                           ;slot_task.c: 153: }
 24546  050C  2D74               	goto	l1454
 24547  050D                     l9841:	
 24548                           
 24549                           ;slot_task.c: 154: else {
 24550                           ;slot_task.c: 155: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Shot_Options[Shot_Index][3])
      +                          ;
 24551  050D  0020               	movlb	0	; select bank0
 24552  050E  0865               	movf	slot_Main@data,w
 24553  050F  3E0B               	addlw	11
 24554  0510  00AF               	movwf	sprintf@sp
 24555  0511  3000               	movlw	0
 24556  0512  3D66               	addwfc	slot_Main@data+1,w
 24557  0513  00B0               	movwf	sprintf@sp+1
 24558  0514  301C               	movlw	low (STR_64| (0+32768))
 24559  0515  00B1               	movwf	sprintf@f
 24560  0516  30BB               	movlw	high (STR_64| (0+32768))
 24561  0517  00B2               	movwf	sprintf@f+1
 24562  0518  357C               	lslf	_Shot_Index,w
 24563  0519  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24564  051A  0086               	movwf	6
 24565  051B  3001               	movlw	1	; select bank3/4
 24566  051C  0087               	movwf	7
 24567  051D  3F40               	moviw [0]fsr1
 24568  051E  00D4               	movwf	??_slot_Main
 24569  051F  3F41               	moviw [1]fsr1
 24570  0520  00D5               	movwf	??_slot_Main+1
 24571  0521  0854               	movf	??_slot_Main,w
 24572  0522  0084               	movwf	4
 24573  0523  0855               	movf	??_slot_Main+1,w
 24574  0524  0085               	movwf	5
 24575  0525  0800               	movf	0,w	;code access
 24576  0526  00D6               	movwf	??_slot_Main+2
 24577  0527  01D7               	clrf	??_slot_Main+3
 24578  0528  0856               	movf	??_slot_Main+2,w
 24579  0529  00B3               	movwf	?_sprintf+4
 24580  052A  0857               	movf	??_slot_Main+3,w
 24581  052B  00B4               	movwf	?_sprintf+5
 24582  052C  357C               	lslf	_Shot_Index,w
 24583  052D  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24584  052E  0086               	movwf	6
 24585  052F  3001               	movlw	1	; select bank3/4
 24586  0530  0087               	movwf	7
 24587  0531  3F40               	moviw [0]fsr1
 24588  0532  00D8               	movwf	??_slot_Main+4
 24589  0533  3F41               	moviw [1]fsr1
 24590  0534  00D9               	movwf	??_slot_Main+5
 24591  0535  3001               	movlw	1
 24592  0536  0758               	addwf	??_slot_Main+4,w
 24593  0537  0084               	movwf	4
 24594  0538  0859               	movf	??_slot_Main+5,w
 24595  0539  1803               	skipnc
 24596  053A  0A59               	incf	??_slot_Main+5,w
 24597  053B  0085               	movwf	5
 24598  053C  0800               	movf	0,w	;code access
 24599  053D  00DA               	movwf	??_slot_Main+6
 24600  053E  01DB               	clrf	??_slot_Main+7
 24601  053F  085A               	movf	??_slot_Main+6,w
 24602  0540  00B5               	movwf	?_sprintf+6
 24603  0541  085B               	movf	??_slot_Main+7,w
 24604  0542  00B6               	movwf	?_sprintf+7
 24605  0543  357C               	lslf	_Shot_Index,w
 24606  0544  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24607  0545  0086               	movwf	6
 24608  0546  3001               	movlw	1	; select bank3/4
 24609  0547  0087               	movwf	7
 24610  0548  3F40               	moviw [0]fsr1
 24611  0549  00DC               	movwf	??_slot_Main+8
 24612  054A  3F41               	moviw [1]fsr1
 24613  054B  00DD               	movwf	??_slot_Main+9
 24614  054C  3002               	movlw	2
 24615  054D  075C               	addwf	??_slot_Main+8,w
 24616  054E  0084               	movwf	4
 24617  054F  085D               	movf	??_slot_Main+9,w
 24618  0550  1803               	skipnc
 24619  0551  0A5D               	incf	??_slot_Main+9,w
 24620  0552  0085               	movwf	5
 24621  0553  0800               	movf	0,w	;code access
 24622  0554  00DE               	movwf	??_slot_Main+10
 24623  0555  01DF               	clrf	??_slot_Main+11
 24624  0556  085E               	movf	??_slot_Main+10,w
 24625  0557  00B7               	movwf	?_sprintf+8
 24626  0558  085F               	movf	??_slot_Main+11,w
 24627  0559  00B8               	movwf	?_sprintf+9
 24628  055A  357C               	lslf	_Shot_Index,w
 24629  055B  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24630  055C  0086               	movwf	6
 24631  055D  3001               	movlw	1	; select bank3/4
 24632  055E  0087               	movwf	7
 24633  055F  3F40               	moviw [0]fsr1
 24634  0560  00E0               	movwf	??_slot_Main+12
 24635  0561  3F41               	moviw [1]fsr1
 24636  0562  00E1               	movwf	??_slot_Main+13
 24637  0563  3003               	movlw	3
 24638  0564  0760               	addwf	??_slot_Main+12,w
 24639  0565  0084               	movwf	4
 24640  0566  0861               	movf	??_slot_Main+13,w
 24641  0567  1803               	skipnc
 24642  0568  0A61               	incf	??_slot_Main+13,w
 24643  0569  0085               	movwf	5
 24644  056A  0800               	movf	0,w	;code access
 24645  056B  00E2               	movwf	??_slot_Main+14
 24646  056C  01E3               	clrf	??_slot_Main+15
 24647  056D  0862               	movf	??_slot_Main+14,w
 24648  056E  00B9               	movwf	?_sprintf+10
 24649  056F  0863               	movf	??_slot_Main+15,w
 24650  0570  00BA               	movwf	?_sprintf+11
 24651  0571  3199  21C2  3180   	fcall	_sprintf
 24652  0574                     l1454:	
 24653                           
 24654                           ;slot_task.c: 156: }
 24655                           ;slot_task.c: 157: marquee(data->slot_print_buf, 1);
 24656  0574  0020               	movlb	0	; select bank0
 24657  0575  0865               	movf	slot_Main@data,w
 24658  0576  3E0B               	addlw	11
 24659  0577  00BA               	movwf	marquee@string
 24660  0578  3000               	movlw	0
 24661  0579  3D66               	addwfc	slot_Main@data+1,w
 24662  057A  00BB               	movwf	marquee@string+1
 24663  057B  3001               	movlw	1
 24664  057C  00BC               	movwf	marquee@count
 24665  057D  3000               	movlw	0
 24666  057E  00BD               	movwf	marquee@count+1
 24667  057F  31A2  22D2  3180   	fcall	_marquee
 24668                           
 24669                           ;slot_task.c: 158: }
 24670  0582  2E27               	goto	l9863
 24671  0583                     l9843:	
 24672                           
 24673                           ;slot_task.c: 159: else {
 24674                           ;slot_task.c: 160: slot_Finished_Animation(data);
 24675  0583  0020               	movlb	0	; select bank0
 24676  0584  0866               	movf	slot_Main@data+1,w
 24677  0585  00BE               	movwf	slot_Finished_Animation@taskData+1
 24678  0586  0865               	movf	slot_Main@data,w
 24679  0587  00BD               	movwf	slot_Finished_Animation@taskData
 24680  0588  31B5  259E  3180   	fcall	_slot_Finished_Animation
 24681                           
 24682                           ;slot_task.c: 161: if ( data->displayTickCount % 50 <= 25 ) {
 24683  058B  3032               	movlw	50
 24684  058C  0020               	movlb	0	; select bank0
 24685  058D  00AB               	movwf	___lwmod@divisor
 24686  058E  3000               	movlw	0
 24687  058F  00AC               	movwf	___lwmod@divisor+1
 24688  0590  0865               	movf	slot_Main@data,w
 24689  0591  0086               	movwf	6
 24690  0592  0866               	movf	slot_Main@data+1,w
 24691  0593  0087               	movwf	7
 24692  0594  3143               	addfsr 1,3
 24693  0595  3F40               	moviw [0]fsr1
 24694  0596  00AD               	movwf	___lwmod@dividend
 24695  0597  3F41               	moviw [1]fsr1
 24696  0598  00AE               	movwf	___lwmod@dividend+1
 24697  0599  31B5  25EF  3180   	fcall	___lwmod
 24698  059C  3000               	movlw	0
 24699  059D  0020               	movlb	0	; select bank0
 24700  059E  022C               	subwf	?___lwmod+1,w
 24701  059F  301A               	movlw	26
 24702  05A0  1903               	skipnz
 24703  05A1  022B               	subwf	?___lwmod,w
 24704  05A2  1803               	skipnc
 24705  05A3  2DB6               	goto	l9847
 24706                           
 24707                           ;slot_task.c: 162: memset(data->slot_print_buf, 0x20, 4);
 24708  05A4  0865               	movf	slot_Main@data,w
 24709  05A5  3E0B               	addlw	11
 24710  05A6  00F1               	movwf	memset@p1
 24711  05A7  3000               	movlw	0
 24712  05A8  3D66               	addwfc	slot_Main@data+1,w
 24713  05A9  00F2               	movwf	memset@p1+1
 24714  05AA  3020               	movlw	32
 24715  05AB  00F3               	movwf	memset@c
 24716  05AC  3000               	movlw	0
 24717  05AD  00F4               	movwf	memset@c+1
 24718  05AE  3004               	movlw	4
 24719  05AF  00F5               	movwf	memset@n
 24720  05B0  3000               	movlw	0
 24721  05B1  00F6               	movwf	memset@n+1
 24722  05B2  31B4  242F  3180   	fcall	_memset
 24723                           
 24724                           ;slot_task.c: 163: }
 24725  05B5  2DCD               	goto	l1457
 24726  05B6                     l9847:	
 24727                           
 24728                           ;slot_task.c: 164: else {
 24729                           ;slot_task.c: 165: sprintf(data->slot_print_buf, "%s", Shot_Options_Long[Shot_Index]);
 24730  05B6  0020               	movlb	0	; select bank0
 24731  05B7  0865               	movf	slot_Main@data,w
 24732  05B8  3E0B               	addlw	11
 24733  05B9  00AF               	movwf	sprintf@sp
 24734  05BA  3000               	movlw	0
 24735  05BB  3D66               	addwfc	slot_Main@data+1,w
 24736  05BC  00B0               	movwf	sprintf@sp+1
 24737  05BD  3002               	movlw	low (STR_69| (0+32768))
 24738  05BE  00B1               	movwf	sprintf@f
 24739  05BF  30BC               	movlw	high (STR_69| (0+32768))
 24740  05C0  00B2               	movwf	sprintf@f+1
 24741  05C1  357C               	lslf	_Shot_Index,w
 24742  05C2  3E20               	addlw	(low (_Shot_Options_Long| (0+768)))& (0+255)
 24743  05C3  0086               	movwf	6
 24744  05C4  3003               	movlw	3	; select bank6/7
 24745  05C5  0087               	movwf	7
 24746  05C6  3F40               	moviw [0]fsr1
 24747  05C7  00B3               	movwf	low ((?_sprintf| 0+4))
 24748  05C8  3F41               	moviw [1]fsr1
 24749  05C9  00B4               	movwf	(low ((?_sprintf| 0+4))+1)
 24750  05CA  3199  21C2  3180   	fcall	_sprintf
 24751  05CD                     l1457:	
 24752                           
 24753                           ;slot_task.c: 166: }
 24754                           ;slot_task.c: 168: marquee_speedy(data->slot_print_buf, data->displayTickCount, 20);
 24755  05CD  0020               	movlb	0	; select bank0
 24756  05CE  0865               	movf	slot_Main@data,w
 24757  05CF  3E0B               	addlw	11
 24758  05D0  00BA               	movwf	marquee_speedy@string
 24759  05D1  3000               	movlw	0
 24760  05D2  3D66               	addwfc	slot_Main@data+1,w
 24761  05D3  00BB               	movwf	marquee_speedy@string+1
 24762  05D4  0865               	movf	slot_Main@data,w
 24763  05D5  0086               	movwf	6
 24764  05D6  0866               	movf	slot_Main@data+1,w
 24765  05D7  0087               	movwf	7
 24766  05D8  3143               	addfsr 1,3
 24767  05D9  3F40               	moviw [0]fsr1
 24768  05DA  00BC               	movwf	marquee_speedy@count
 24769  05DB  3F41               	moviw [1]fsr1
 24770  05DC  00BD               	movwf	marquee_speedy@count+1
 24771  05DD  3014               	movlw	20
 24772  05DE  00BE               	movwf	marquee_speedy@multiplier
 24773  05DF  3000               	movlw	0
 24774  05E0  00BF               	movwf	marquee_speedy@multiplier+1
 24775  05E1  31A2  225F  3180   	fcall	_marquee_speedy
 24776                           
 24777                           ;slot_task.c: 169: if (data->displayTickCount == 500 + (50 * 10)) {
 24778  05E4  0020               	movlb	0	; select bank0
 24779  05E5  0865               	movf	slot_Main@data,w
 24780  05E6  0086               	movwf	6
 24781  05E7  0866               	movf	slot_Main@data+1,w
 24782  05E8  0087               	movwf	7
 24783  05E9  3143               	addfsr 1,3
 24784  05EA  0016               	moviw fsr1++
 24785  05EB  3AE8               	xorlw	232
 24786  05EC  00D4               	movwf	??_slot_Main
 24787  05ED  0016               	moviw fsr1++
 24788  05EE  3A03               	xorlw	3
 24789  05EF  04D4               	iorwf	??_slot_Main,f
 24790  05F0  1D03               	btfss	3,2
 24791  05F1  2E27               	goto	l9863
 24792                           
 24793                           ;slot_task.c: 170: currentTask = MENU_TASK;
 24794  05F2  0021               	movlb	1	; select bank1
 24795  05F3  01BA               	clrf	_currentTask^(0+128)
 24796  05F4  01BB               	clrf	(_currentTask+1)^(0+128)
 24797                           
 24798                           ;slot_task.c: 173: slot_Setup(slot_taskData);
 24799  05F5  083D               	movf	(_slot_taskData+1)^(0+128),w
 24800  05F6  0020               	movlb	0	; select bank0
 24801  05F7  00B0               	movwf	slot_Setup@taskData+1
 24802  05F8  0021               	movlb	1	; select bank1
 24803  05F9  083C               	movf	_slot_taskData^(0+128),w
 24804  05FA  0020               	movlb	0	; select bank0
 24805  05FB  00AF               	movwf	slot_Setup@taskData
 24806  05FC  31AC  2447         	fcall	_slot_Setup
 24807                           
 24808                           ;slot_task.c: 176: data->holdCountA = 1;
 24809  05FE  0020               	movlb	0	; select bank0
 24810  05FF  0865               	movf	slot_Main@data,w
 24811  0600  0086               	movwf	6
 24812  0601  0866               	movf	slot_Main@data+1,w
 24813  0602  0087               	movwf	7
 24814  0603  315F               	addfsr 1,31
 24815  0604  3001               	movlw	1
 24816  0605  3FC0               	movwi [0]fsr1
 24817  0606  3000               	movlw	0
 24818  0607  3FC1               	movwi [1]fsr1
 24819                           
 24820                           ;slot_task.c: 177: data->holdCountB = 1;
 24821  0608  0865               	movf	slot_Main@data,w
 24822  0609  3E21               	addlw	33
 24823  060A  0086               	movwf	6
 24824  060B  3000               	movlw	0
 24825  060C  3D66               	addwfc	slot_Main@data+1,w
 24826  060D  0087               	movwf	7
 24827  060E  3001               	movlw	1
 24828  060F  3FC0               	movwi [0]fsr1
 24829  0610  3000               	movlw	0
 24830  0611  3FC1               	movwi [1]fsr1
 24831                           
 24832                           ;slot_task.c: 178: data->holdCountX = 1;
 24833  0612  0865               	movf	slot_Main@data,w
 24834  0613  3E23               	addlw	35
 24835  0614  0086               	movwf	6
 24836  0615  3000               	movlw	0
 24837  0616  3D66               	addwfc	slot_Main@data+1,w
 24838  0617  0087               	movwf	7
 24839  0618  3001               	movlw	1
 24840  0619  3FC0               	movwi [0]fsr1
 24841  061A  3000               	movlw	0
 24842  061B  3FC1               	movwi [1]fsr1
 24843                           
 24844                           ;slot_task.c: 179: data->holdCountY = 1;
 24845  061C  0865               	movf	slot_Main@data,w
 24846  061D  3E25               	addlw	37
 24847  061E  0086               	movwf	6
 24848  061F  3000               	movlw	0
 24849  0620  3D66               	addwfc	slot_Main@data+1,w
 24850  0621  0087               	movwf	7
 24851  0622  3001               	movlw	1
 24852  0623  3FC0               	movwi [0]fsr1
 24853  0624  3000               	movlw	0
 24854  0625  3FC1               	movwi [1]fsr1
 24855                           
 24856                           ;slot_task.c: 180: break;
 24857  0626  0008               	return
 24858  0627                     l9863:	
 24859                           
 24860                           ;slot_task.c: 181: }
 24861                           ;slot_task.c: 182: }
 24862                           ;slot_task.c: 184: data->displayTickCount += 1;
 24863  0627  0020               	movlb	0	; select bank0
 24864  0628  0865               	movf	slot_Main@data,w
 24865  0629  0086               	movwf	6
 24866  062A  0866               	movf	slot_Main@data+1,w
 24867  062B  0087               	movwf	7
 24868  062C  3143               	addfsr 1,3
 24869  062D  3001               	movlw	1
 24870  062E  0781               	addwf	1,f
 24871  062F  3141               	addfsr 1,1
 24872  0630  1803               	skipnc
 24873  0631  0A81               	incf	1,f
 24874                           
 24875                           ;slot_task.c: 185: data->holdCountA = 0;
 24876  0632  0865               	movf	slot_Main@data,w
 24877  0633  0086               	movwf	6
 24878  0634  0866               	movf	slot_Main@data+1,w
 24879  0635  0087               	movwf	7
 24880  0636  315F               	addfsr 1,31
 24881  0637  3000               	movlw	0
 24882  0638  3FC0               	movwi [0]fsr1
 24883  0639  3FC1               	movwi [1]fsr1
 24884                           
 24885                           ;slot_task.c: 186: data->holdCountB = 0;
 24886  063A  0865               	movf	slot_Main@data,w
 24887  063B  3E21               	addlw	33
 24888  063C  0086               	movwf	6
 24889  063D  3000               	movlw	0
 24890  063E  3D66               	addwfc	slot_Main@data+1,w
 24891  063F  0087               	movwf	7
 24892  0640  3000               	movlw	0
 24893  0641  3FC0               	movwi [0]fsr1
 24894  0642  3FC1               	movwi [1]fsr1
 24895                           
 24896                           ;slot_task.c: 187: data->holdCountX = 0;
 24897  0643  0865               	movf	slot_Main@data,w
 24898  0644  3E23               	addlw	35
 24899  0645  0086               	movwf	6
 24900  0646  3000               	movlw	0
 24901  0647  3D66               	addwfc	slot_Main@data+1,w
 24902  0648  0087               	movwf	7
 24903  0649  3000               	movlw	0
 24904  064A  3FC0               	movwi [0]fsr1
 24905  064B  3FC1               	movwi [1]fsr1
 24906                           
 24907                           ;slot_task.c: 188: data->holdCountY = 0;
 24908  064C  0865               	movf	slot_Main@data,w
 24909  064D  3E25               	addlw	37
 24910  064E  0086               	movwf	6
 24911  064F  3000               	movlw	0
 24912  0650  3D66               	addwfc	slot_Main@data+1,w
 24913  0651  0087               	movwf	7
 24914  0652  3000               	movlw	0
 24915  0653  3FC0               	movwi [0]fsr1
 24916  0654  3FC1               	movwi [1]fsr1
 24917                           
 24918                           ;slot_task.c: 189: data->noholdCount += 1;
 24919  0655  0865               	movf	slot_Main@data,w
 24920  0656  3E27               	addlw	39
 24921  0657  0086               	movwf	6
 24922  0658  3000               	movlw	0
 24923  0659  3D66               	addwfc	slot_Main@data+1,w
 24924  065A  0087               	movwf	7
 24925  065B  3001               	movlw	1
 24926  065C  0781               	addwf	1,f
 24927  065D  3141               	addfsr 1,1
 24928  065E  1803               	skipnc
 24929  065F  0A81               	incf	1,f
 24930                           
 24931                           ;slot_task.c: 190: }
 24932  0660  0008               	return
 24933  0661                     __end_of_slot_Main:	
 24934                           
 24935                           	psect	text20
 24936  29AB                     __ptext20:	
 24937 ;; *************** function _slot_Running_Animation *****************
 24938 ;; Defined at:
 24939 ;;		line 64 in file "slot_task.c"
 24940 ;; Parameters:    Size  Location     Type
 24941 ;;  taskData        2   18[BANK0 ] PTR void 
 24942 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24943 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24944 ;; Auto vars:     Size  Location     Type
 24945 ;;  data            2   22[BANK0 ] PTR struct t_slot_taskDa
 24946 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24947 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24948 ;; Return value:  Size  Location     Type
 24949 ;;                  1    wreg      void 
 24950 ;; Registers used:
 24951 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24952 ;; Tracked objects:
 24953 ;;		On entry : 0/0
 24954 ;;		On exit  : 0/0
 24955 ;;		Unchanged: 0/0
 24956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24957 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24958 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24959 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24960 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24961 ;;Total ram usage:        6 bytes
 24962 ;; Hardware stack levels used:    1
 24963 ;; Hardware stack levels required when called:   10
 24964 ;; This function calls:
 24965 ;;		_led_circle
 24966 ;; This function is called by:
 24967 ;;		_slot_Main
 24968 ;; This function uses a non-reentrant model
 24969 ;;
 24970                           
 24971                           
 24972                           ;psect for function _slot_Running_Animation
 24973  29AB                     _slot_Running_Animation:	
 24974                           
 24975                           ;slot_task.c: 65: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 24976                           
 24977                           ;incstack = 0
 24978                           ; Regs used in _slot_Running_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 24979  29AB  0020               	movlb	0	; select bank0
 24980  29AC  0833               	movf	slot_Running_Animation@taskData+1,w
 24981  29AD  00B7               	movwf	slot_Running_Animation@data+1
 24982  29AE  0832               	movf	slot_Running_Animation@taskData,w
 24983  29AF  00B6               	movwf	slot_Running_Animation@data
 24984                           
 24985                           ;slot_task.c: 66: if (data->delayTickCount ==0 ){
 24986  29B0  0836               	movf	slot_Running_Animation@data,w
 24987  29B1  0086               	movwf	6
 24988  29B2  0837               	movf	slot_Running_Animation@data+1,w
 24989  29B3  0087               	movwf	7
 24990  29B4  3145               	addfsr 1,5
 24991  29B5  0016               	moviw fsr1++
 24992  29B6  0401               	iorwf	1,w
 24993  29B7  1D03               	btfss	3,2
 24994  29B8  29E5               	goto	l8903
 24995                           
 24996                           ;slot_task.c: 67: if (Leds_idx == 1024 ){
 24997  29B9  3004               	movlw	4
 24998  29BA  0021               	movlb	1	; select bank1
 24999  29BB  0651               	xorwf	(_Leds_idx+1)^(0+128),w
 25000  29BC  0450               	iorwf	_Leds_idx^(0+128),w
 25001  29BD  1D03               	btfss	3,2
 25002  29BE  29C3               	goto	l8895
 25003                           
 25004                           ;slot_task.c: 68: Leds_idx = Leds_idx << 1;
 25005  29BF  3550               	lslf	_Leds_idx^(0+128),w
 25006  29C0  00D0               	movwf	_Leds_idx^(0+128)
 25007  29C1  0D51               	rlf	(_Leds_idx+1)^(0+128),w
 25008  29C2  00D1               	movwf	(_Leds_idx+1)^(0+128)
 25009  29C3                     l8895:	
 25010                           
 25011                           ;slot_task.c: 69: }
 25012                           ;slot_task.c: 70: led_circle(Leds_idx);
 25013  29C3  0851               	movf	(_Leds_idx+1)^(0+128),w
 25014  29C4  0020               	movlb	0	; select bank0
 25015  29C5  00B1               	movwf	led_circle@count+1
 25016  29C6  0021               	movlb	1	; select bank1
 25017  29C7  0850               	movf	_Leds_idx^(0+128),w
 25018  29C8  0020               	movlb	0	; select bank0
 25019  29C9  00B0               	movwf	led_circle@count
 25020  29CA  31B2  225C  31A9   	fcall	_led_circle
 25021                           
 25022                           ;slot_task.c: 71: if (Leds_idx < 1 ){
 25023  29CD  0021               	movlb	1	; select bank1
 25024  29CE  0850               	movf	_Leds_idx^(0+128),w
 25025  29CF  0451               	iorwf	(_Leds_idx+1)^(0+128),w
 25026  29D0  1D03               	btfss	3,2
 25027  29D1  29D6               	goto	l1427
 25028                           
 25029                           ;slot_task.c: 72: Leds_idx = 1;
 25030  29D2  3001               	movlw	1
 25031  29D3  00D0               	movwf	_Leds_idx^(0+128)
 25032  29D4  3000               	movlw	0
 25033  29D5  00D1               	movwf	(_Leds_idx^(0+128)+1)
 25034  29D6                     l1427:	
 25035                           
 25036                           ;slot_task.c: 73: }
 25037                           ;slot_task.c: 74: Leds_idx = Leds_idx << 1;
 25038  29D6  3550               	lslf	_Leds_idx^(0+128),w
 25039  29D7  00D0               	movwf	_Leds_idx^(0+128)
 25040  29D8  0D51               	rlf	(_Leds_idx+1)^(0+128),w
 25041  29D9  00D1               	movwf	(_Leds_idx+1)^(0+128)
 25042                           
 25043                           ;slot_task.c: 76: data->delayTickCount = 10;
 25044  29DA  0020               	movlb	0	; select bank0
 25045  29DB  0836               	movf	slot_Running_Animation@data,w
 25046  29DC  0086               	movwf	6
 25047  29DD  0837               	movf	slot_Running_Animation@data+1,w
 25048  29DE  0087               	movwf	7
 25049  29DF  3145               	addfsr 1,5
 25050  29E0  300A               	movlw	10
 25051  29E1  3FC0               	movwi [0]fsr1
 25052  29E2  3000               	movlw	0
 25053  29E3  3FC1               	movwi [1]fsr1
 25054                           
 25055                           ;slot_task.c: 77: }
 25056  29E4  0008               	return
 25057  29E5                     l8903:	
 25058                           
 25059                           ;slot_task.c: 78: else {
 25060                           ;slot_task.c: 79: data->delayTickCount -= 1;
 25061  29E5  0836               	movf	slot_Running_Animation@data,w
 25062  29E6  0086               	movwf	6
 25063  29E7  0837               	movf	slot_Running_Animation@data+1,w
 25064  29E8  0087               	movwf	7
 25065  29E9  3145               	addfsr 1,5
 25066  29EA  3001               	movlw	1
 25067  29EB  0281               	subwf	1,f
 25068  29EC  3141               	addfsr 1,1
 25069  29ED  3000               	movlw	0
 25070  29EE  3B81               	subwfb	1,f
 25071  29EF  317F               	addfsr 1,-1
 25072  29F0  0008               	return
 25073  29F1                     __end_of_slot_Running_Animation:	
 25074                           
 25075                           	psect	text21
 25076  359E                     __ptext21:	
 25077 ;; *************** function _slot_Finished_Animation *****************
 25078 ;; Defined at:
 25079 ;;		line 84 in file "slot_task.c"
 25080 ;; Parameters:    Size  Location     Type
 25081 ;;  taskData        2   29[BANK0 ] PTR void 
 25082 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25083 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25084 ;; Auto vars:     Size  Location     Type
 25085 ;;  data            2   33[BANK0 ] PTR struct t_slot_taskDa
 25086 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25087 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25088 ;; Return value:  Size  Location     Type
 25089 ;;                  1    wreg      void 
 25090 ;; Registers used:
 25091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25092 ;; Tracked objects:
 25093 ;;		On entry : 0/0
 25094 ;;		On exit  : 0/0
 25095 ;;		Unchanged: 0/0
 25096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25097 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25098 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25099 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25100 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25101 ;;Total ram usage:        6 bytes
 25102 ;; Hardware stack levels used:    1
 25103 ;; Hardware stack levels required when called:   10
 25104 ;; This function calls:
 25105 ;;		_led_rand
 25106 ;; This function is called by:
 25107 ;;		_slot_Main
 25108 ;; This function uses a non-reentrant model
 25109 ;;
 25110                           
 25111                           
 25112                           ;psect for function _slot_Finished_Animation
 25113  359E                     _slot_Finished_Animation:	
 25114                           
 25115                           ;slot_task.c: 85: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 25116                           
 25117                           ;incstack = 0
 25118                           ; Regs used in _slot_Finished_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 25119  359E  0020               	movlb	0	; select bank0
 25120  359F  083E               	movf	slot_Finished_Animation@taskData+1,w
 25121  35A0  00C2               	movwf	slot_Finished_Animation@data+1
 25122  35A1  083D               	movf	slot_Finished_Animation@taskData,w
 25123  35A2  00C1               	movwf	slot_Finished_Animation@data
 25124                           
 25125                           ;slot_task.c: 86: if (data->delayTickCount < 1){
 25126  35A3  0841               	movf	slot_Finished_Animation@data,w
 25127  35A4  0086               	movwf	6
 25128  35A5  0842               	movf	slot_Finished_Animation@data+1,w
 25129  35A6  0087               	movwf	7
 25130  35A7  3145               	addfsr 1,5
 25131  35A8  0016               	moviw fsr1++
 25132  35A9  0401               	iorwf	1,w
 25133  35AA  1D03               	btfss	3,2
 25134  35AB  2DB9               	goto	l8913
 25135                           
 25136                           ;slot_task.c: 87: led_rand();
 25137  35AC  31AA  2238         	fcall	_led_rand
 25138                           
 25139                           ;slot_task.c: 88: data->delayTickCount = 10;
 25140  35AE  0020               	movlb	0	; select bank0
 25141  35AF  0841               	movf	slot_Finished_Animation@data,w
 25142  35B0  0086               	movwf	6
 25143  35B1  0842               	movf	slot_Finished_Animation@data+1,w
 25144  35B2  0087               	movwf	7
 25145  35B3  3145               	addfsr 1,5
 25146  35B4  300A               	movlw	10
 25147  35B5  3FC0               	movwi [0]fsr1
 25148  35B6  3000               	movlw	0
 25149  35B7  3FC1               	movwi [1]fsr1
 25150                           
 25151                           ;slot_task.c: 89: }
 25152  35B8  0008               	return
 25153  35B9                     l8913:	
 25154                           
 25155                           ;slot_task.c: 90: else {
 25156                           ;slot_task.c: 91: data->delayTickCount -= 1;
 25157  35B9  0841               	movf	slot_Finished_Animation@data,w
 25158  35BA  0086               	movwf	6
 25159  35BB  0842               	movf	slot_Finished_Animation@data+1,w
 25160  35BC  0087               	movwf	7
 25161  35BD  3145               	addfsr 1,5
 25162  35BE  3001               	movlw	1
 25163  35BF  0281               	subwf	1,f
 25164  35C0  3141               	addfsr 1,1
 25165  35C1  3000               	movlw	0
 25166  35C2  3B81               	subwfb	1,f
 25167  35C3  317F               	addfsr 1,-1
 25168  35C4  0008               	return
 25169  35C5                     __end_of_slot_Finished_Animation:	
 25170                           
 25171                           	psect	text22
 25172  36AE                     __ptext22:	
 25173 ;; *************** function _secret_clear *****************
 25174 ;; Defined at:
 25175 ;;		line 178 in file "secret_task.c"
 25176 ;; Parameters:    Size  Location     Type
 25177 ;;  data            2    1[COMMON] PTR struct t_secret_task
 25178 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25179 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25180 ;; Auto vars:     Size  Location     Type
 25181 ;;		None
 25182 ;; Return value:  Size  Location     Type
 25183 ;;                  1    wreg      void 
 25184 ;; Registers used:
 25185 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 25186 ;; Tracked objects:
 25187 ;;		On entry : 0/0
 25188 ;;		On exit  : 0/0
 25189 ;;		Unchanged: 0/0
 25190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25191 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25194 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25195 ;;Total ram usage:        2 bytes
 25196 ;; Hardware stack levels used:    1
 25197 ;; Hardware stack levels required when called:    4
 25198 ;; This function calls:
 25199 ;;		Nothing
 25200 ;; This function is called by:
 25201 ;;		_secret_Main
 25202 ;; This function uses a non-reentrant model
 25203 ;;
 25204                           
 25205                           
 25206                           ;psect for function _secret_clear
 25207  36AE                     _secret_clear:	
 25208                           
 25209                           ;secret_task.c: 180: data->delayTickCount = 300;
 25210                           
 25211                           ;incstack = 0
 25212                           ; Regs used in _secret_clear: [wreg+fsr1l+fsr1h+status,2+status,0]
 25213  36AE  0871               	movf	secret_clear@data,w
 25214  36AF  0086               	movwf	6
 25215  36B0  0872               	movf	secret_clear@data+1,w
 25216  36B1  0087               	movwf	7
 25217  36B2  3142               	addfsr 1,2
 25218  36B3  302C               	movlw	44
 25219  36B4  3FC0               	movwi [0]fsr1
 25220  36B5  3001               	movlw	1
 25221  36B6  3FC1               	movwi [1]fsr1
 25222                           
 25223                           ;secret_task.c: 181: data->holdCountA = 0;
 25224  36B7  0871               	movf	secret_clear@data,w
 25225  36B8  0086               	movwf	6
 25226  36B9  0872               	movf	secret_clear@data+1,w
 25227  36BA  0087               	movwf	7
 25228  36BB  3144               	addfsr 1,4
 25229  36BC  3000               	movlw	0
 25230  36BD  3FC0               	movwi [0]fsr1
 25231  36BE  3FC1               	movwi [1]fsr1
 25232                           
 25233                           ;secret_task.c: 182: data->holdCountB = 0;
 25234  36BF  0871               	movf	secret_clear@data,w
 25235  36C0  0086               	movwf	6
 25236  36C1  0872               	movf	secret_clear@data+1,w
 25237  36C2  0087               	movwf	7
 25238  36C3  3146               	addfsr 1,6
 25239  36C4  3000               	movlw	0
 25240  36C5  3FC0               	movwi [0]fsr1
 25241  36C6  3FC1               	movwi [1]fsr1
 25242                           
 25243                           ;secret_task.c: 183: data->holdCountX = 0;
 25244  36C7  0871               	movf	secret_clear@data,w
 25245  36C8  0086               	movwf	6
 25246  36C9  0872               	movf	secret_clear@data+1,w
 25247  36CA  0087               	movwf	7
 25248  36CB  3148               	addfsr 1,8
 25249  36CC  3000               	movlw	0
 25250  36CD  3FC0               	movwi [0]fsr1
 25251  36CE  3FC1               	movwi [1]fsr1
 25252                           
 25253                           ;secret_task.c: 184: data->holdCountY = 0;
 25254  36CF  0871               	movf	secret_clear@data,w
 25255  36D0  0086               	movwf	6
 25256  36D1  0872               	movf	secret_clear@data+1,w
 25257  36D2  0087               	movwf	7
 25258  36D3  314A               	addfsr 1,10
 25259  36D4  3000               	movlw	0
 25260  36D5  3FC0               	movwi [0]fsr1
 25261  36D6  3FC1               	movwi [1]fsr1
 25262                           
 25263                           ;secret_task.c: 185: data->noholdCount = 0;
 25264  36D7  0871               	movf	secret_clear@data,w
 25265  36D8  0086               	movwf	6
 25266  36D9  0872               	movf	secret_clear@data+1,w
 25267  36DA  0087               	movwf	7
 25268  36DB  314C               	addfsr 1,12
 25269  36DC  3000               	movlw	0
 25270  36DD  3FC0               	movwi [0]fsr1
 25271  36DE  3FC1               	movwi [1]fsr1
 25272  36DF  0008               	return
 25273  36E0                     __end_of_secret_clear:	
 25274                           
 25275                           	psect	text23
 25276  2645                     __ptext23:	
 25277 ;; *************** function _secret_check *****************
 25278 ;; Defined at:
 25279 ;;		line 69 in file "secret_task.c"
 25280 ;; Parameters:    Size  Location     Type
 25281 ;;  data            2    7[COMMON] PTR struct t_secret_task
 25282 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25283 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25284 ;;  buttonPresse    1    9[COMMON] unsigned char 
 25285 ;; Auto vars:     Size  Location     Type
 25286 ;;  i               2    8[BANK0 ] unsigned int 
 25287 ;;  hit_counter     6    0        unsigned char [6]
 25288 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 25289 ;;  size            2    3[BANK0 ] unsigned int 
 25290 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 25291 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), 
 25292 ;; Return value:  Size  Location     Type
 25293 ;;                  1    wreg      unsigned char 
 25294 ;; Registers used:
 25295 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25296 ;; Tracked objects:
 25297 ;;		On entry : 0/0
 25298 ;;		On exit  : 0/0
 25299 ;;		Unchanged: 0/0
 25300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25301 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25302 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25303 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25304 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25305 ;;Total ram usage:       13 bytes
 25306 ;; Hardware stack levels used:    1
 25307 ;; Hardware stack levels required when called:    5
 25308 ;; This function calls:
 25309 ;;		___bmul
 25310 ;;		_strlen
 25311 ;; This function is called by:
 25312 ;;		_secret_Main
 25313 ;; This function uses a non-reentrant model
 25314 ;;
 25315                           
 25316                           
 25317                           ;psect for function _secret_check
 25318  2645                     _secret_check:	
 25319                           
 25320                           ;secret_task.c: 70: u8 *inputs;
 25321                           ;secret_task.c: 71: u16 size = sizeof(secret_inputs) / sizeof(secret_inputs[0]);
 25322                           
 25323                           ;incstack = 0
 25324                           ; Regs used in _secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25325  2645  3001               	movlw	1
 25326  2646  0020               	movlb	0	; select bank0
 25327  2647  00A3               	movwf	secret_check@size
 25328  2648  3000               	movlw	0
 25329  2649  00A4               	movwf	secret_check@size+1
 25330                           
 25331                           ;secret_task.c: 72: u16 currents_size;
 25332                           ;secret_task.c: 73: char hit_counter[6];
 25333                           ;secret_task.c: 75: for (u16 i = 0; i < size; i++){
 25334  264A  01A8               	clrf	secret_check@i
 25335  264B  01A9               	clrf	secret_check@i+1
 25336  264C                     l8869:	
 25337  264C  0824               	movf	secret_check@size+1,w
 25338  264D  0229               	subwf	secret_check@i+1,w
 25339  264E  1D03               	skipz
 25340  264F  2E52               	goto	u5485
 25341  2650  0823               	movf	secret_check@size,w
 25342  2651  0228               	subwf	secret_check@i,w
 25343  2652                     u5485:	
 25344  2652  1803               	btfsc	3,0
 25345  2653  2EFE               	goto	l8871
 25346                           
 25347                           ;secret_task.c: 76: inputs = secret_inputs[i].inputs;
 25348  2654  3019               	movlw	25
 25349  2655  00A0               	movwf	??_secret_check
 25350  2656  0820               	movf	??_secret_check,w
 25351  2657  00F1               	movwf	___bmul@multiplicand
 25352  2658  0828               	movf	secret_check@i,w
 25353  2659  31B3  2363  31A6   	fcall	___bmul
 25354  265C  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25355  265D  0020               	movlb	0	; select bank0
 25356  265E  00A1               	movwf	??_secret_check+1
 25357  265F  0821               	movf	??_secret_check+1,w
 25358  2660  00A7               	movwf	secret_check@inputs
 25359                           
 25360                           ;secret_task.c: 78: if (buttonPressed == inputs[secret_inputs[i].idx]){
 25361  2661  3019               	movlw	25
 25362  2662  00A0               	movwf	??_secret_check
 25363  2663  0820               	movf	??_secret_check,w
 25364  2664  00F1               	movwf	___bmul@multiplicand
 25365  2665  0828               	movf	secret_check@i,w
 25366  2666  31B3  2363  31A6   	fcall	___bmul
 25367  2669  3E14               	addlw	20
 25368  266A  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25369  266B  0086               	movwf	6
 25370  266C  3002               	movlw	2	; select bank4/5
 25371  266D  0087               	movwf	7
 25372  266E  0801               	movf	1,w
 25373  266F  0020               	movlb	0	; select bank0
 25374  2670  0727               	addwf	secret_check@inputs,w
 25375  2671  00A1               	movwf	??_secret_check+1
 25376  2672  0821               	movf	??_secret_check+1,w
 25377  2673  0086               	movwf	6
 25378  2674  3002               	movlw	2	; select bank4/5
 25379  2675  0087               	movwf	7
 25380  2676  0801               	movf	1,w
 25381  2677  0679               	xorwf	secret_check@buttonPressed,w
 25382  2678  1D03               	skipz
 25383  2679  2EE7               	goto	l8865
 25384                           
 25385                           ;secret_task.c: 79: currents_size = strlen((const char *)inputs);
 25386  267A  0827               	movf	secret_check@inputs,w
 25387  267B  00F1               	movwf	strlen@s
 25388  267C  3002               	movlw	2
 25389  267D  00F2               	movwf	strlen@s+1
 25390  267E  31B4  24D3  31A6   	fcall	_strlen
 25391  2681  0872               	movf	?_strlen+1,w
 25392  2682  0020               	movlb	0	; select bank0
 25393  2683  00A6               	movwf	secret_check@currents_size+1
 25394  2684  0871               	movf	?_strlen,w
 25395  2685  00A5               	movwf	secret_check@currents_size
 25396                           
 25397                           ;secret_task.c: 80: secret_inputs[i].idx++;
 25398  2686  3019               	movlw	25
 25399  2687  00A0               	movwf	??_secret_check
 25400  2688  0820               	movf	??_secret_check,w
 25401  2689  00F1               	movwf	___bmul@multiplicand
 25402  268A  0828               	movf	secret_check@i,w
 25403  268B  31B3  2363  31A6   	fcall	___bmul
 25404  268E  3E14               	addlw	20
 25405  268F  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25406  2690  0086               	movwf	6
 25407  2691  3002               	movlw	2	; select bank4/5
 25408  2692  0087               	movwf	7
 25409  2693  3001               	movlw	1
 25410  2694  0781               	addwf	1,f
 25411  2695  3141               	addfsr 1,1
 25412  2696  1803               	skipnc
 25413  2697  0A81               	incf	1,f
 25414                           
 25415                           ;secret_task.c: 82: if (secret_inputs[i].idx == currents_size) {
 25416  2698  3019               	movlw	25
 25417  2699  0020               	movlb	0	; select bank0
 25418  269A  00A0               	movwf	??_secret_check
 25419  269B  0820               	movf	??_secret_check,w
 25420  269C  00F1               	movwf	___bmul@multiplicand
 25421  269D  0828               	movf	secret_check@i,w
 25422  269E  31B3  2363  31A6   	fcall	___bmul
 25423  26A1  3E14               	addlw	20
 25424  26A2  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25425  26A3  0086               	movwf	6
 25426  26A4  3002               	movlw	2	; select bank4/5
 25427  26A5  0087               	movwf	7
 25428  26A6  3F40               	moviw [0]fsr1
 25429  26A7  0020               	movlb	0	; select bank0
 25430  26A8  00A1               	movwf	??_secret_check+1
 25431  26A9  3F41               	moviw [1]fsr1
 25432  26AA  00A2               	movwf	??_secret_check+2
 25433  26AB  0826               	movf	secret_check@currents_size+1,w
 25434  26AC  0622               	xorwf	??_secret_check+2,w
 25435  26AD  1D03               	skipz
 25436  26AE  2EB1               	goto	u5475
 25437  26AF  0825               	movf	secret_check@currents_size,w
 25438  26B0  0621               	xorwf	??_secret_check+1,w
 25439  26B1                     u5475:	
 25440  26B1  1D03               	skipz
 25441  26B2  2EF8               	goto	l8867
 25442                           
 25443                           ;secret_task.c: 84: secret_inputs[i].idx = 0;
 25444  26B3  3019               	movlw	25
 25445  26B4  00A0               	movwf	??_secret_check
 25446  26B5  0820               	movf	??_secret_check,w
 25447  26B6  00F1               	movwf	___bmul@multiplicand
 25448  26B7  0828               	movf	secret_check@i,w
 25449  26B8  31B3  2363  31A6   	fcall	___bmul
 25450  26BB  3E14               	addlw	20
 25451  26BC  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25452  26BD  0086               	movwf	6
 25453  26BE  3002               	movlw	2	; select bank4/5
 25454  26BF  0087               	movwf	7
 25455  26C0  3000               	movlw	0
 25456  26C1  3FC0               	movwi [0]fsr1
 25457  26C2  3FC1               	movwi [1]fsr1
 25458                           
 25459                           ;secret_task.c: 87: *(secret_inputs[i].variable) = (u16) secret_inputs[i].value;
 25460  26C3  3019               	movlw	25
 25461  26C4  0020               	movlb	0	; select bank0
 25462  26C5  00A0               	movwf	??_secret_check
 25463  26C6  0820               	movf	??_secret_check,w
 25464  26C7  00F1               	movwf	___bmul@multiplicand
 25465  26C8  0828               	movf	secret_check@i,w
 25466  26C9  31B3  2363  31A6   	fcall	___bmul
 25467  26CC  3E17               	addlw	23
 25468  26CD  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25469  26CE  0086               	movwf	6
 25470  26CF  3002               	movlw	2	; select bank4/5
 25471  26D0  0087               	movwf	7
 25472  26D1  3019               	movlw	25
 25473  26D2  0020               	movlb	0	; select bank0
 25474  26D3  00A1               	movwf	??_secret_check+1
 25475  26D4  0821               	movf	??_secret_check+1,w
 25476  26D5  00F1               	movwf	___bmul@multiplicand
 25477  26D6  0828               	movf	secret_check@i,w
 25478  26D7  31B3  2363         	fcall	___bmul
 25479  26D9  3E16               	addlw	22
 25480  26DA  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25481  26DB  0084               	movwf	4
 25482  26DC  3002               	movlw	2	; select bank4/5
 25483  26DD  0085               	movwf	5
 25484  26DE  0800               	movf	0,w
 25485  26DF  0084               	movwf	4
 25486  26E0  0185               	clrf	5
 25487  26E1  3F40               	moviw [0]fsr1
 25488  26E2  3F80               	movwi [0]fsr0
 25489  26E3  3F41               	moviw [1]fsr1
 25490  26E4  3F81               	movwi [1]fsr0
 25491                           
 25492                           ;secret_task.c: 89: return 1;
 25493  26E5  3001               	movlw	1
 25494  26E6  0008               	return
 25495  26E7                     l8865:	
 25496                           ;secret_task.c: 90: }
 25497                           ;secret_task.c: 91: } else {
 25498                           
 25499                           
 25500                           ;secret_task.c: 93: secret_inputs[i].idx = 0;
 25501  26E7  3019               	movlw	25
 25502  26E8  0020               	movlb	0	; select bank0
 25503  26E9  00A0               	movwf	??_secret_check
 25504  26EA  0820               	movf	??_secret_check,w
 25505  26EB  00F1               	movwf	___bmul@multiplicand
 25506  26EC  0828               	movf	secret_check@i,w
 25507  26ED  31B3  2363  31A6   	fcall	___bmul
 25508  26F0  3E14               	addlw	20
 25509  26F1  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25510  26F2  0086               	movwf	6
 25511  26F3  3002               	movlw	2	; select bank4/5
 25512  26F4  0087               	movwf	7
 25513  26F5  3000               	movlw	0
 25514  26F6  3FC0               	movwi [0]fsr1
 25515  26F7  3FC1               	movwi [1]fsr1
 25516  26F8                     l8867:	
 25517  26F8  3001               	movlw	1
 25518  26F9  0020               	movlb	0	; select bank0
 25519  26FA  07A8               	addwf	secret_check@i,f
 25520  26FB  3000               	movlw	0
 25521  26FC  3DA9               	addwfc	secret_check@i+1,f
 25522  26FD  2E4C               	goto	l8869
 25523  26FE                     l8871:	
 25524                           
 25525                           ;secret_task.c: 94: }
 25526                           ;secret_task.c: 95: }
 25527                           ;secret_task.c: 96: return 0;
 25528  26FE  3000               	movlw	0
 25529  26FF  0008               	return
 25530  2700                     __end_of_secret_check:	
 25531                           
 25532                           	psect	text24
 25533  2B11                     __ptext24:	
 25534 ;; *************** function _menu_run_option *****************
 25535 ;; Defined at:
 25536 ;;		line 185 in file "menu_task.c"
 25537 ;; Parameters:    Size  Location     Type
 25538 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 25539 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25540 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25541 ;; Auto vars:     Size  Location     Type
 25542 ;;		None
 25543 ;; Return value:  Size  Location     Type
 25544 ;;                  1    wreg      void 
 25545 ;; Registers used:
 25546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25547 ;; Tracked objects:
 25548 ;;		On entry : 0/0
 25549 ;;		On exit  : 0/0
 25550 ;;		Unchanged: 0/0
 25551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25552 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25555 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25556 ;;Total ram usage:        2 bytes
 25557 ;; Hardware stack levels used:    1
 25558 ;; Hardware stack levels required when called:   11
 25559 ;; This function calls:
 25560 ;;		_menu_clear
 25561 ;; This function is called by:
 25562 ;;		_menu_Main
 25563 ;; This function uses a non-reentrant model
 25564 ;;
 25565                           
 25566                           
 25567                           ;psect for function _menu_run_option
 25568  2B11                     _menu_run_option:	
 25569                           
 25570                           ;menu_task.c: 186: switch (menu_option_idx){
 25571                           
 25572                           ;incstack = 0
 25573                           ; Regs used in _menu_run_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25574  2B11  2B46               	goto	l8625
 25575  2B12                     l8607:	
 25576                           ;menu_task.c: 187: case 1:
 25577                           
 25578                           
 25579                           ;menu_task.c: 188: menu_clear(data);
 25580  2B12  0020               	movlb	0	; select bank0
 25581  2B13  083C               	movf	menu_run_option@data+1,w
 25582  2B14  00BA               	movwf	menu_clear@data+1
 25583  2B15  083B               	movf	menu_run_option@data,w
 25584  2B16  00B9               	movwf	menu_clear@data
 25585  2B17  31A9  21F1         	fcall	_menu_clear
 25586                           
 25587                           ;menu_task.c: 189: currentTask = SLOT_TASK;
 25588  2B19  3001               	movlw	1
 25589  2B1A  0021               	movlb	1	; select bank1
 25590  2B1B  00BA               	movwf	_currentTask^(0+128)
 25591  2B1C  3000               	movlw	0
 25592  2B1D  00BB               	movwf	(_currentTask^(0+128)+1)
 25593                           
 25594                           ;menu_task.c: 190: break;
 25595  2B1E  0008               	return
 25596  2B1F                     l8611:	
 25597                           ;menu_task.c: 191: case 2:
 25598                           
 25599                           
 25600                           ;menu_task.c: 192: menu_clear(data);
 25601  2B1F  0020               	movlb	0	; select bank0
 25602  2B20  083C               	movf	menu_run_option@data+1,w
 25603  2B21  00BA               	movwf	menu_clear@data+1
 25604  2B22  083B               	movf	menu_run_option@data,w
 25605  2B23  00B9               	movwf	menu_clear@data
 25606  2B24  31A9  21F1         	fcall	_menu_clear
 25607                           
 25608                           ;menu_task.c: 193: currentTask = LOCKED_TASK;
 25609  2B26  3003               	movlw	3
 25610  2B27  0021               	movlb	1	; select bank1
 25611  2B28  00BA               	movwf	_currentTask^(0+128)
 25612  2B29  3000               	movlw	0
 25613  2B2A  00BB               	movwf	(_currentTask^(0+128)+1)
 25614                           
 25615                           ;menu_task.c: 194: break;
 25616  2B2B  0008               	return
 25617  2B2C                     l8615:	
 25618                           ;menu_task.c: 195: case 4:
 25619                           
 25620                           
 25621                           ;menu_task.c: 196: menu_clear(data);
 25622  2B2C  0020               	movlb	0	; select bank0
 25623  2B2D  083C               	movf	menu_run_option@data+1,w
 25624  2B2E  00BA               	movwf	menu_clear@data+1
 25625  2B2F  083B               	movf	menu_run_option@data,w
 25626  2B30  00B9               	movwf	menu_clear@data
 25627  2B31  31A9  21F1         	fcall	_menu_clear
 25628                           
 25629                           ;menu_task.c: 197: currentTask = FLASHY_TASK;
 25630  2B33  3002               	movlw	2
 25631  2B34  0021               	movlb	1	; select bank1
 25632  2B35  00BA               	movwf	_currentTask^(0+128)
 25633  2B36  3000               	movlw	0
 25634  2B37  00BB               	movwf	(_currentTask^(0+128)+1)
 25635                           
 25636                           ;menu_task.c: 198: break;
 25637  2B38  0008               	return
 25638  2B39                     l8619:	
 25639                           ;menu_task.c: 199: case 3:
 25640                           
 25641                           
 25642                           ;menu_task.c: 200: menu_clear(data);
 25643  2B39  0020               	movlb	0	; select bank0
 25644  2B3A  083C               	movf	menu_run_option@data+1,w
 25645  2B3B  00BA               	movwf	menu_clear@data+1
 25646  2B3C  083B               	movf	menu_run_option@data,w
 25647  2B3D  00B9               	movwf	menu_clear@data
 25648  2B3E  31A9  21F1         	fcall	_menu_clear
 25649                           
 25650                           ;menu_task.c: 201: currentTask = MATRIX_TASK;
 25651  2B40  3004               	movlw	4
 25652  2B41  0021               	movlb	1	; select bank1
 25653  2B42  00BA               	movwf	_currentTask^(0+128)
 25654  2B43  3000               	movlw	0
 25655  2B44  00BB               	movwf	(_currentTask^(0+128)+1)
 25656                           
 25657                           ;menu_task.c: 203: }
 25658                           
 25659                           ;menu_task.c: 202: break;
 25660  2B45  0008               	return
 25661  2B46                     l8625:	
 25662                           
 25663                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 25664                           ; Switch size 1, requested type "space"
 25665                           ; Number of cases is 1, Range of values is 0 to 0
 25666                           ; switch strategies available:
 25667                           ; Name         Instructions Cycles
 25668                           ; simple_byte            4     3 (average)
 25669                           ; direct_byte            8     6 (fixed)
 25670                           ; jumptable            260     6 (fixed)
 25671                           ;	Chosen strategy is simple_byte
 25672  2B46  0021               	movlb	1	; select bank1
 25673  2B47  0837               	movf	(_menu_option_idx+1)^(0+128),w
 25674  2B48  3A00               	xorlw	0	; case 0
 25675  2B49  1903               	skipnz
 25676  2B4A  2B4C               	goto	l10833
 25677  2B4B  2B5A               	goto	l1010
 25678  2B4C                     l10833:	
 25679                           
 25680                           ; Switch size 1, requested type "space"
 25681                           ; Number of cases is 4, Range of values is 1 to 4
 25682                           ; switch strategies available:
 25683                           ; Name         Instructions Cycles
 25684                           ; simple_byte           13     7 (average)
 25685                           ; direct_byte           17     9 (fixed)
 25686                           ; jumptable            263     9 (fixed)
 25687                           ;	Chosen strategy is simple_byte
 25688  2B4C  0836               	movf	_menu_option_idx^(0+128),w
 25689  2B4D  3A01               	xorlw	1	; case 1
 25690  2B4E  1903               	skipnz
 25691  2B4F  2B12               	goto	l8607
 25692  2B50  3A03               	xorlw	3	; case 2
 25693  2B51  1903               	skipnz
 25694  2B52  2B1F               	goto	l8611
 25695  2B53  3A01               	xorlw	1	; case 3
 25696  2B54  1903               	skipnz
 25697  2B55  2B39               	goto	l8619
 25698  2B56  3A07               	xorlw	7	; case 4
 25699  2B57  1903               	skipnz
 25700  2B58  2B2C               	goto	l8615
 25701  2B59  2B5A               	goto	l1010
 25702  2B5A                     l1010:	
 25703  2B5A  0008               	return
 25704  2B5B                     __end_of_menu_run_option:	
 25705                           
 25706                           	psect	text25
 25707  29F1                     __ptext25:	
 25708 ;; *************** function _menu_clear *****************
 25709 ;; Defined at:
 25710 ;;		line 206 in file "menu_task.c"
 25711 ;; Parameters:    Size  Location     Type
 25712 ;;  data            2   25[BANK0 ] PTR struct t_menu_taskDa
 25713 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25714 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25715 ;; Auto vars:     Size  Location     Type
 25716 ;;		None
 25717 ;; Return value:  Size  Location     Type
 25718 ;;                  1    wreg      void 
 25719 ;; Registers used:
 25720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25721 ;; Tracked objects:
 25722 ;;		On entry : 0/0
 25723 ;;		On exit  : 0/0
 25724 ;;		Unchanged: 0/0
 25725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25726 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25729 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25730 ;;Total ram usage:        2 bytes
 25731 ;; Hardware stack levels used:    1
 25732 ;; Hardware stack levels required when called:   10
 25733 ;; This function calls:
 25734 ;;		_nullifyBadge_segDisplayErase
 25735 ;;		_nullifyBadge_userLedsClr
 25736 ;; This function is called by:
 25737 ;;		_menu_Main
 25738 ;;		_menu_run_option
 25739 ;; This function uses a non-reentrant model
 25740 ;;
 25741                           
 25742                           
 25743                           ;psect for function _menu_clear
 25744  29F1                     _menu_clear:	
 25745                           
 25746                           ;menu_task.c: 208: data->delayTickCount = 50;
 25747                           
 25748                           ;incstack = 0
 25749                           ; Regs used in _menu_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25750  29F1  0020               	movlb	0	; select bank0
 25751  29F2  0839               	movf	menu_clear@data,w
 25752  29F3  0086               	movwf	6
 25753  29F4  083A               	movf	menu_clear@data+1,w
 25754  29F5  0087               	movwf	7
 25755  29F6  3142               	addfsr 1,2
 25756  29F7  3032               	movlw	50
 25757  29F8  3FC0               	movwi [0]fsr1
 25758  29F9  3000               	movlw	0
 25759  29FA  3FC1               	movwi [1]fsr1
 25760                           
 25761                           ;menu_task.c: 209: data->holdCountA = 0;
 25762  29FB  0839               	movf	menu_clear@data,w
 25763  29FC  0086               	movwf	6
 25764  29FD  083A               	movf	menu_clear@data+1,w
 25765  29FE  0087               	movwf	7
 25766  29FF  3144               	addfsr 1,4
 25767  2A00  3000               	movlw	0
 25768  2A01  3FC0               	movwi [0]fsr1
 25769  2A02  3FC1               	movwi [1]fsr1
 25770                           
 25771                           ;menu_task.c: 210: data->holdCountB = 0;
 25772  2A03  0839               	movf	menu_clear@data,w
 25773  2A04  0086               	movwf	6
 25774  2A05  083A               	movf	menu_clear@data+1,w
 25775  2A06  0087               	movwf	7
 25776  2A07  3146               	addfsr 1,6
 25777  2A08  3000               	movlw	0
 25778  2A09  3FC0               	movwi [0]fsr1
 25779  2A0A  3FC1               	movwi [1]fsr1
 25780                           
 25781                           ;menu_task.c: 211: data->holdCountX = 0;
 25782  2A0B  0839               	movf	menu_clear@data,w
 25783  2A0C  0086               	movwf	6
 25784  2A0D  083A               	movf	menu_clear@data+1,w
 25785  2A0E  0087               	movwf	7
 25786  2A0F  3148               	addfsr 1,8
 25787  2A10  3000               	movlw	0
 25788  2A11  3FC0               	movwi [0]fsr1
 25789  2A12  3FC1               	movwi [1]fsr1
 25790                           
 25791                           ;menu_task.c: 212: data->holdCountY = 0;
 25792  2A13  0839               	movf	menu_clear@data,w
 25793  2A14  0086               	movwf	6
 25794  2A15  083A               	movf	menu_clear@data+1,w
 25795  2A16  0087               	movwf	7
 25796  2A17  314A               	addfsr 1,10
 25797  2A18  3000               	movlw	0
 25798  2A19  3FC0               	movwi [0]fsr1
 25799  2A1A  3FC1               	movwi [1]fsr1
 25800                           
 25801                           ;menu_task.c: 213: data->noholdCount = 0;
 25802  2A1B  0839               	movf	menu_clear@data,w
 25803  2A1C  0086               	movwf	6
 25804  2A1D  083A               	movf	menu_clear@data+1,w
 25805  2A1E  0087               	movwf	7
 25806  2A1F  314C               	addfsr 1,12
 25807  2A20  3000               	movlw	0
 25808  2A21  3FC0               	movwi [0]fsr1
 25809  2A22  3FC1               	movwi [1]fsr1
 25810                           
 25811                           ;menu_task.c: 215: menu_option_idx = 0;
 25812  2A23  0021               	movlb	1	; select bank1
 25813  2A24  01B6               	clrf	_menu_option_idx^(0+128)
 25814  2A25  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 25815                           
 25816                           ;menu_task.c: 218: nullifyBadge_userLedsClr(data->badge);
 25817  2A26  0020               	movlb	0	; select bank0
 25818  2A27  0839               	movf	menu_clear@data,w
 25819  2A28  0086               	movwf	6
 25820  2A29  083A               	movf	menu_clear@data+1,w
 25821  2A2A  0087               	movwf	7
 25822  2A2B  0801               	movf	1,w
 25823  2A2C  3187  27FA  31A9   	fcall	_nullifyBadge_userLedsClr
 25824                           
 25825                           ;menu_task.c: 219: nullifyBadge_segDisplayErase(data->badge);
 25826  2A2F  0020               	movlb	0	; select bank0
 25827  2A30  0839               	movf	menu_clear@data,w
 25828  2A31  0086               	movwf	6
 25829  2A32  083A               	movf	menu_clear@data+1,w
 25830  2A33  0087               	movwf	7
 25831  2A34  0801               	movf	1,w
 25832  2A35  31B2  223D         	fcall	_nullifyBadge_segDisplayErase
 25833  2A37  0008               	return
 25834  2A38                     __end_of_menu_clear:	
 25835                           
 25836                           	psect	text26
 25837  2DA0                     __ptext26:	
 25838 ;; *************** function _menu_display_option *****************
 25839 ;; Defined at:
 25840 ;;		line 166 in file "menu_task.c"
 25841 ;; Parameters:    Size  Location     Type
 25842 ;;  data            2   44[BANK0 ] PTR struct t_menu_taskDa
 25843 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25844 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25845 ;; Auto vars:     Size  Location     Type
 25846 ;;  led             2   48[BANK0 ] unsigned int 
 25847 ;;  size            2   46[BANK0 ] unsigned int 
 25848 ;; Return value:  Size  Location     Type
 25849 ;;                  1    wreg      void 
 25850 ;; Registers used:
 25851 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25852 ;; Tracked objects:
 25853 ;;		On entry : 0/0
 25854 ;;		On exit  : 0/0
 25855 ;;		Unchanged: 0/0
 25856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25857 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25858 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25860 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25861 ;;Total ram usage:        6 bytes
 25862 ;; Hardware stack levels used:    1
 25863 ;; Hardware stack levels required when called:   10
 25864 ;; This function calls:
 25865 ;;		___lwmod
 25866 ;;		_marquee
 25867 ;;		_nullifyBadge_segDisplayForceUpdate
 25868 ;;		_nullifyBadge_segDisplayPutStr
 25869 ;;		_nullifyBadge_userLedsSet
 25870 ;; This function is called by:
 25871 ;;		_menu_Main
 25872 ;; This function uses a non-reentrant model
 25873 ;;
 25874                           
 25875                           
 25876                           ;psect for function _menu_display_option
 25877  2DA0                     _menu_display_option:	
 25878                           
 25879                           ;menu_task.c: 167: u16 size = sizeof(menu_options_leds)/sizeof(menu_options_leds[0]);
 25880                           
 25881                           ;incstack = 0
 25882                           ; Regs used in _menu_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25883  2DA0  3005               	movlw	5
 25884  2DA1  0020               	movlb	0	; select bank0
 25885  2DA2  00CE               	movwf	menu_display_option@size
 25886  2DA3  3000               	movlw	0
 25887  2DA4  00CF               	movwf	menu_display_option@size+1
 25888                           
 25889                           ;menu_task.c: 168: u16 led = menu_options_leds[menu_option_idx % size];
 25890  2DA5  084F               	movf	menu_display_option@size+1,w
 25891  2DA6  00AC               	movwf	___lwmod@divisor+1
 25892  2DA7  084E               	movf	menu_display_option@size,w
 25893  2DA8  00AB               	movwf	___lwmod@divisor
 25894  2DA9  0021               	movlb	1	; select bank1
 25895  2DAA  0837               	movf	(_menu_option_idx+1)^(0+128),w
 25896  2DAB  0020               	movlb	0	; select bank0
 25897  2DAC  00AE               	movwf	___lwmod@dividend+1
 25898  2DAD  0021               	movlb	1	; select bank1
 25899  2DAE  0836               	movf	_menu_option_idx^(0+128),w
 25900  2DAF  0020               	movlb	0	; select bank0
 25901  2DB0  00AD               	movwf	___lwmod@dividend
 25902  2DB1  31B5  25EF  31AD   	fcall	___lwmod
 25903  2DB4  0020               	movlb	0	; select bank0
 25904  2DB5  082B               	movf	?___lwmod,w
 25905  2DB6  0709               	addwf	9,w
 25906  2DB7  3ECA               	addlw	(low (_menu_options_leds| (0+512)))& (0+255)
 25907  2DB8  0086               	movwf	6
 25908  2DB9  3002               	movlw	2	; select bank5/6
 25909  2DBA  0087               	movwf	7
 25910  2DBB  3F40               	moviw [0]fsr1
 25911  2DBC  00D0               	movwf	menu_display_option@led
 25912  2DBD  3F41               	moviw [1]fsr1
 25913  2DBE  00D1               	movwf	menu_display_option@led+1
 25914                           
 25915                           ;menu_task.c: 174: nullifyBadge_userLedsSet(data->badge, led);
 25916  2DBF  0851               	movf	menu_display_option@led+1,w
 25917  2DC0  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 25918  2DC1  0850               	movf	menu_display_option@led,w
 25919  2DC2  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 25920  2DC3  084C               	movf	menu_display_option@data,w
 25921  2DC4  0086               	movwf	6
 25922  2DC5  084D               	movf	menu_display_option@data+1,w
 25923  2DC6  0087               	movwf	7
 25924  2DC7  0801               	movf	1,w
 25925  2DC8  31B3  2352  31AD   	fcall	_nullifyBadge_userLedsSet
 25926                           
 25927                           ;menu_task.c: 176: if (menu_option_idx == 0){
 25928  2DCB  0021               	movlb	1	; select bank1
 25929  2DCC  0836               	movf	_menu_option_idx^(0+128),w
 25930  2DCD  0437               	iorwf	(_menu_option_idx+1)^(0+128),w
 25931  2DCE  1D03               	btfss	3,2
 25932  2DCF  2DEB               	goto	l8603
 25933                           
 25934                           ;menu_task.c: 177: nullifyBadge_segDisplayPutStr(data->badge, menu_option[menu_option_id
      +                          x]);
 25935  2DD0  3536               	lslf	_menu_option_idx^(0+128),w
 25936  2DD1  3E2C               	addlw	(low (_menu_option| (0+512)))& (0+255)
 25937  2DD2  0086               	movwf	6
 25938  2DD3  3002               	movlw	2	; select bank4/5
 25939  2DD4  0087               	movwf	7
 25940  2DD5  3F40               	moviw [0]fsr1
 25941  2DD6  0020               	movlb	0	; select bank0
 25942  2DD7  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 25943  2DD8  3F41               	moviw [1]fsr1
 25944  2DD9  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 25945  2DDA  084C               	movf	menu_display_option@data,w
 25946  2DDB  0086               	movwf	6
 25947  2DDC  084D               	movf	menu_display_option@data+1,w
 25948  2DDD  0087               	movwf	7
 25949  2DDE  0801               	movf	1,w
 25950  2DDF  31B2  2279  31AD   	fcall	_nullifyBadge_segDisplayPutStr
 25951                           
 25952                           ;menu_task.c: 178: nullifyBadge_segDisplayForceUpdate(data->badge);
 25953  2DE2  0020               	movlb	0	; select bank0
 25954  2DE3  084C               	movf	menu_display_option@data,w
 25955  2DE4  0086               	movwf	6
 25956  2DE5  084D               	movf	menu_display_option@data+1,w
 25957  2DE6  0087               	movwf	7
 25958  2DE7  0801               	movf	1,w
 25959  2DE8  31B2  2237         	fcall	_nullifyBadge_segDisplayForceUpdate
 25960                           
 25961                           ;menu_task.c: 179: }
 25962  2DEA  0008               	return
 25963  2DEB                     l8603:	
 25964                           
 25965                           ;menu_task.c: 180: else {
 25966                           ;menu_task.c: 181: marquee(menu_option[menu_option_idx], data->noholdCount);
 25967  2DEB  0021               	movlb	1	; select bank1
 25968  2DEC  3536               	lslf	_menu_option_idx^(0+128),w
 25969  2DED  3E2C               	addlw	(low (_menu_option| (0+512)))& (0+255)
 25970  2DEE  0086               	movwf	6
 25971  2DEF  3002               	movlw	2	; select bank4/5
 25972  2DF0  0087               	movwf	7
 25973  2DF1  3F40               	moviw [0]fsr1
 25974  2DF2  0020               	movlb	0	; select bank0
 25975  2DF3  00BA               	movwf	marquee@string
 25976  2DF4  3F41               	moviw [1]fsr1
 25977  2DF5  00BB               	movwf	marquee@string+1
 25978  2DF6  084C               	movf	menu_display_option@data,w
 25979  2DF7  0086               	movwf	6
 25980  2DF8  084D               	movf	menu_display_option@data+1,w
 25981  2DF9  0087               	movwf	7
 25982  2DFA  314C               	addfsr 1,12
 25983  2DFB  3F40               	moviw [0]fsr1
 25984  2DFC  00BC               	movwf	marquee@count
 25985  2DFD  3F41               	moviw [1]fsr1
 25986  2DFE  00BD               	movwf	marquee@count+1
 25987  2DFF  31A2  22D2         	fcall	_marquee
 25988  2E01  0008               	return
 25989  2E02                     __end_of_menu_display_option:	
 25990                           
 25991                           	psect	text27
 25992  258A                     __ptext27:	
 25993 ;; *************** function _matrix_secret_check *****************
 25994 ;; Defined at:
 25995 ;;		line 94 in file "matrix_task.c"
 25996 ;; Parameters:    Size  Location     Type
 25997 ;;  data            2    7[COMMON] PTR struct t_matrix_task
 25998 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25999 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26000 ;;  buttonPresse    1    9[COMMON] unsigned char 
 26001 ;; Auto vars:     Size  Location     Type
 26002 ;;  i               2    8[BANK0 ] unsigned int 
 26003 ;;  hit_counter     6    0        unsigned char [6]
 26004 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 26005 ;;  size            2    3[BANK0 ] unsigned int 
 26006 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 26007 ;;		 -> matrix_secret_inputs.inputs(20), matrix_secret_inputs(25), 
 26008 ;; Return value:  Size  Location     Type
 26009 ;;                  1    wreg      unsigned char 
 26010 ;; Registers used:
 26011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26012 ;; Tracked objects:
 26013 ;;		On entry : 0/0
 26014 ;;		On exit  : 0/0
 26015 ;;		Unchanged: 0/0
 26016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26017 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26018 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26019 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26020 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26021 ;;Total ram usage:       13 bytes
 26022 ;; Hardware stack levels used:    1
 26023 ;; Hardware stack levels required when called:    5
 26024 ;; This function calls:
 26025 ;;		___bmul
 26026 ;;		_strlen
 26027 ;; This function is called by:
 26028 ;;		_matrix_Main
 26029 ;; This function uses a non-reentrant model
 26030 ;;
 26031                           
 26032                           
 26033                           ;psect for function _matrix_secret_check
 26034  258A                     _matrix_secret_check:	
 26035                           
 26036                           ;matrix_task.c: 95: u8 *inputs;
 26037                           ;matrix_task.c: 96: u16 size = sizeof(matrix_secret_inputs) / sizeof(matrix_secret_input
      +                          s[0]);
 26038                           
 26039                           ;incstack = 0
 26040                           ; Regs used in _matrix_secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26041  258A  3001               	movlw	1
 26042  258B  0020               	movlb	0	; select bank0
 26043  258C  00A3               	movwf	matrix_secret_check@size
 26044  258D  3000               	movlw	0
 26045  258E  00A4               	movwf	matrix_secret_check@size+1
 26046                           
 26047                           ;matrix_task.c: 97: u16 currents_size;
 26048                           ;matrix_task.c: 98: char hit_counter[6];
 26049                           ;matrix_task.c: 100: for (u16 i = 0; i < size; i++){
 26050  258F  01A8               	clrf	matrix_secret_check@i
 26051  2590  01A9               	clrf	matrix_secret_check@i+1
 26052  2591                     l8941:	
 26053  2591  0824               	movf	matrix_secret_check@size+1,w
 26054  2592  0229               	subwf	matrix_secret_check@i+1,w
 26055  2593  1D03               	skipz
 26056  2594  2D97               	goto	u5555
 26057  2595  0823               	movf	matrix_secret_check@size,w
 26058  2596  0228               	subwf	matrix_secret_check@i,w
 26059  2597                     u5555:	
 26060  2597  1803               	btfsc	3,0
 26061  2598  2E43               	goto	l8943
 26062                           
 26063                           ;matrix_task.c: 101: inputs = matrix_secret_inputs[i].inputs;
 26064  2599  3019               	movlw	25
 26065  259A  00A0               	movwf	??_matrix_secret_check
 26066  259B  0820               	movf	??_matrix_secret_check,w
 26067  259C  00F1               	movwf	___bmul@multiplicand
 26068  259D  0828               	movf	matrix_secret_check@i,w
 26069  259E  31B3  2363  31A5   	fcall	___bmul
 26070  25A1  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26071  25A2  0020               	movlb	0	; select bank0
 26072  25A3  00A1               	movwf	??_matrix_secret_check+1
 26073  25A4  0821               	movf	??_matrix_secret_check+1,w
 26074  25A5  00A7               	movwf	matrix_secret_check@inputs
 26075                           
 26076                           ;matrix_task.c: 103: if (buttonPressed == inputs[matrix_secret_inputs[i].idx]){
 26077  25A6  3019               	movlw	25
 26078  25A7  00A0               	movwf	??_matrix_secret_check
 26079  25A8  0820               	movf	??_matrix_secret_check,w
 26080  25A9  00F1               	movwf	___bmul@multiplicand
 26081  25AA  0828               	movf	matrix_secret_check@i,w
 26082  25AB  31B3  2363  31A5   	fcall	___bmul
 26083  25AE  3E14               	addlw	20
 26084  25AF  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26085  25B0  0086               	movwf	6
 26086  25B1  3002               	movlw	2	; select bank5/6
 26087  25B2  0087               	movwf	7
 26088  25B3  0801               	movf	1,w
 26089  25B4  0020               	movlb	0	; select bank0
 26090  25B5  0727               	addwf	matrix_secret_check@inputs,w
 26091  25B6  00A1               	movwf	??_matrix_secret_check+1
 26092  25B7  0821               	movf	??_matrix_secret_check+1,w
 26093  25B8  0086               	movwf	6
 26094  25B9  3002               	movlw	2	; select bank4/5
 26095  25BA  0087               	movwf	7
 26096  25BB  0801               	movf	1,w
 26097  25BC  0679               	xorwf	matrix_secret_check@buttonPressed,w
 26098  25BD  1D03               	skipz
 26099  25BE  2E2C               	goto	l8937
 26100                           
 26101                           ;matrix_task.c: 104: currents_size = strlen((const char *)inputs);
 26102  25BF  0827               	movf	matrix_secret_check@inputs,w
 26103  25C0  00F1               	movwf	strlen@s
 26104  25C1  3002               	movlw	2
 26105  25C2  00F2               	movwf	strlen@s+1
 26106  25C3  31B4  24D3  31A5   	fcall	_strlen
 26107  25C6  0872               	movf	?_strlen+1,w
 26108  25C7  0020               	movlb	0	; select bank0
 26109  25C8  00A6               	movwf	matrix_secret_check@currents_size+1
 26110  25C9  0871               	movf	?_strlen,w
 26111  25CA  00A5               	movwf	matrix_secret_check@currents_size
 26112                           
 26113                           ;matrix_task.c: 105: matrix_secret_inputs[i].idx++;
 26114  25CB  3019               	movlw	25
 26115  25CC  00A0               	movwf	??_matrix_secret_check
 26116  25CD  0820               	movf	??_matrix_secret_check,w
 26117  25CE  00F1               	movwf	___bmul@multiplicand
 26118  25CF  0828               	movf	matrix_secret_check@i,w
 26119  25D0  31B3  2363  31A5   	fcall	___bmul
 26120  25D3  3E14               	addlw	20
 26121  25D4  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26122  25D5  0086               	movwf	6
 26123  25D6  3002               	movlw	2	; select bank5/6
 26124  25D7  0087               	movwf	7
 26125  25D8  3001               	movlw	1
 26126  25D9  0781               	addwf	1,f
 26127  25DA  3141               	addfsr 1,1
 26128  25DB  1803               	skipnc
 26129  25DC  0A81               	incf	1,f
 26130                           
 26131                           ;matrix_task.c: 107: if (matrix_secret_inputs[i].idx == currents_size) {
 26132  25DD  3019               	movlw	25
 26133  25DE  0020               	movlb	0	; select bank0
 26134  25DF  00A0               	movwf	??_matrix_secret_check
 26135  25E0  0820               	movf	??_matrix_secret_check,w
 26136  25E1  00F1               	movwf	___bmul@multiplicand
 26137  25E2  0828               	movf	matrix_secret_check@i,w
 26138  25E3  31B3  2363  31A5   	fcall	___bmul
 26139  25E6  3E14               	addlw	20
 26140  25E7  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26141  25E8  0086               	movwf	6
 26142  25E9  3002               	movlw	2	; select bank5/6
 26143  25EA  0087               	movwf	7
 26144  25EB  3F40               	moviw [0]fsr1
 26145  25EC  0020               	movlb	0	; select bank0
 26146  25ED  00A1               	movwf	??_matrix_secret_check+1
 26147  25EE  3F41               	moviw [1]fsr1
 26148  25EF  00A2               	movwf	??_matrix_secret_check+2
 26149  25F0  0826               	movf	matrix_secret_check@currents_size+1,w
 26150  25F1  0622               	xorwf	??_matrix_secret_check+2,w
 26151  25F2  1D03               	skipz
 26152  25F3  2DF6               	goto	u5545
 26153  25F4  0825               	movf	matrix_secret_check@currents_size,w
 26154  25F5  0621               	xorwf	??_matrix_secret_check+1,w
 26155  25F6                     u5545:	
 26156  25F6  1D03               	skipz
 26157  25F7  2E3D               	goto	l8939
 26158                           
 26159                           ;matrix_task.c: 109: matrix_secret_inputs[i].idx = 0;
 26160  25F8  3019               	movlw	25
 26161  25F9  00A0               	movwf	??_matrix_secret_check
 26162  25FA  0820               	movf	??_matrix_secret_check,w
 26163  25FB  00F1               	movwf	___bmul@multiplicand
 26164  25FC  0828               	movf	matrix_secret_check@i,w
 26165  25FD  31B3  2363  31A5   	fcall	___bmul
 26166  2600  3E14               	addlw	20
 26167  2601  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26168  2602  0086               	movwf	6
 26169  2603  3002               	movlw	2	; select bank5/6
 26170  2604  0087               	movwf	7
 26171  2605  3000               	movlw	0
 26172  2606  3FC0               	movwi [0]fsr1
 26173  2607  3FC1               	movwi [1]fsr1
 26174                           
 26175                           ;matrix_task.c: 112: *(matrix_secret_inputs[i].variable) = (u16) matrix_secret_inputs[i]
      +                          .value;
 26176  2608  3019               	movlw	25
 26177  2609  0020               	movlb	0	; select bank0
 26178  260A  00A0               	movwf	??_matrix_secret_check
 26179  260B  0820               	movf	??_matrix_secret_check,w
 26180  260C  00F1               	movwf	___bmul@multiplicand
 26181  260D  0828               	movf	matrix_secret_check@i,w
 26182  260E  31B3  2363  31A5   	fcall	___bmul
 26183  2611  3E17               	addlw	23
 26184  2612  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26185  2613  0086               	movwf	6
 26186  2614  3002               	movlw	2	; select bank5/6
 26187  2615  0087               	movwf	7
 26188  2616  3019               	movlw	25
 26189  2617  0020               	movlb	0	; select bank0
 26190  2618  00A1               	movwf	??_matrix_secret_check+1
 26191  2619  0821               	movf	??_matrix_secret_check+1,w
 26192  261A  00F1               	movwf	___bmul@multiplicand
 26193  261B  0828               	movf	matrix_secret_check@i,w
 26194  261C  31B3  2363         	fcall	___bmul
 26195  261E  3E16               	addlw	22
 26196  261F  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26197  2620  0084               	movwf	4
 26198  2621  3002               	movlw	2	; select bank5/6
 26199  2622  0085               	movwf	5
 26200  2623  0800               	movf	0,w
 26201  2624  0084               	movwf	4
 26202  2625  0185               	clrf	5
 26203  2626  3F40               	moviw [0]fsr1
 26204  2627  3F80               	movwi [0]fsr0
 26205  2628  3F41               	moviw [1]fsr1
 26206  2629  3F81               	movwi [1]fsr0
 26207                           
 26208                           ;matrix_task.c: 114: return 1;
 26209  262A  3001               	movlw	1
 26210  262B  0008               	return
 26211  262C                     l8937:	
 26212                           ;matrix_task.c: 115: }
 26213                           ;matrix_task.c: 116: } else {
 26214                           
 26215                           
 26216                           ;matrix_task.c: 118: matrix_secret_inputs[i].idx = 0;
 26217  262C  3019               	movlw	25
 26218  262D  0020               	movlb	0	; select bank0
 26219  262E  00A0               	movwf	??_matrix_secret_check
 26220  262F  0820               	movf	??_matrix_secret_check,w
 26221  2630  00F1               	movwf	___bmul@multiplicand
 26222  2631  0828               	movf	matrix_secret_check@i,w
 26223  2632  31B3  2363  31A5   	fcall	___bmul
 26224  2635  3E14               	addlw	20
 26225  2636  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26226  2637  0086               	movwf	6
 26227  2638  3002               	movlw	2	; select bank5/6
 26228  2639  0087               	movwf	7
 26229  263A  3000               	movlw	0
 26230  263B  3FC0               	movwi [0]fsr1
 26231  263C  3FC1               	movwi [1]fsr1
 26232  263D                     l8939:	
 26233  263D  3001               	movlw	1
 26234  263E  0020               	movlb	0	; select bank0
 26235  263F  07A8               	addwf	matrix_secret_check@i,f
 26236  2640  3000               	movlw	0
 26237  2641  3DA9               	addwfc	matrix_secret_check@i+1,f
 26238  2642  2D91               	goto	l8941
 26239  2643                     l8943:	
 26240                           
 26241                           ;matrix_task.c: 119: }
 26242                           ;matrix_task.c: 120: }
 26243                           ;matrix_task.c: 121: return 0;
 26244  2643  3000               	movlw	0
 26245  2644  0008               	return
 26246  2645                     __end_of_matrix_secret_check:	
 26247                           
 26248                           	psect	text28
 26249  24E7                     __ptext28:	
 26250 ;; *************** function _matrix_display_option *****************
 26251 ;; Defined at:
 26252 ;;		line 124 in file "matrix_task.c"
 26253 ;; Parameters:    Size  Location     Type
 26254 ;;  data            2   44[BANK0 ] PTR struct t_matrix_task
 26255 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26256 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26257 ;; Auto vars:     Size  Location     Type
 26258 ;;		None
 26259 ;; Return value:  Size  Location     Type
 26260 ;;                  1    wreg      void 
 26261 ;; Registers used:
 26262 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26263 ;; Tracked objects:
 26264 ;;		On entry : 0/0
 26265 ;;		On exit  : 0/0
 26266 ;;		Unchanged: 0/0
 26267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26268 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26270 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26271 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26272 ;;Total ram usage:        4 bytes
 26273 ;; Hardware stack levels used:    1
 26274 ;; Hardware stack levels required when called:   10
 26275 ;; This function calls:
 26276 ;;		_marquee_speedy
 26277 ;; This function is called by:
 26278 ;;		_matrix_Main
 26279 ;; This function uses a non-reentrant model
 26280 ;;
 26281                           
 26282                           
 26283                           ;psect for function _matrix_display_option
 26284  24E7                     _matrix_display_option:	
 26285                           
 26286                           ;matrix_task.c: 126: if(badge_locked ==1){
 26287                           
 26288                           ;incstack = 0
 26289                           ; Regs used in _matrix_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26290  24E7  0021               	movlb	1	; select bank1
 26291  24E8  0344               	decf	_badge_locked^(0+128),w
 26292  24E9  1D03               	btfss	3,2
 26293  24EA  2D19               	goto	l8957
 26294                           
 26295                           ;matrix_task.c: 127: marquee_speedy("YOU ARE IN TOO DEEP     TAKE THE RED PILL    ", dat
      +                          a->noholdCount, 40);
 26296  24EB  302F               	movlw	low (STR_80| (0+32768))
 26297  24EC  0020               	movlb	0	; select bank0
 26298  24ED  00BA               	movwf	marquee_speedy@string
 26299  24EE  30B8               	movlw	high (STR_80| (0+32768))
 26300  24EF  00BB               	movwf	marquee_speedy@string+1
 26301  24F0  084C               	movf	matrix_display_option@data,w
 26302  24F1  0086               	movwf	6
 26303  24F2  084D               	movf	matrix_display_option@data+1,w
 26304  24F3  0087               	movwf	7
 26305  24F4  315D               	addfsr 1,29
 26306  24F5  3F40               	moviw [0]fsr1
 26307  24F6  00BC               	movwf	marquee_speedy@count
 26308  24F7  3F41               	moviw [1]fsr1
 26309  24F8  00BD               	movwf	marquee_speedy@count+1
 26310  24F9  3028               	movlw	40
 26311  24FA  00BE               	movwf	marquee_speedy@multiplier
 26312  24FB  3000               	movlw	0
 26313  24FC  00BF               	movwf	marquee_speedy@multiplier+1
 26314  24FD  31A2  225F         	fcall	_marquee_speedy
 26315                           
 26316                           ;matrix_task.c: 128: data->display_state = MATRIX_STATE_DISPLAY;
 26317  24FF  0020               	movlb	0	; select bank0
 26318  2500  084C               	movf	matrix_display_option@data,w
 26319  2501  3E02               	addlw	2
 26320  2502  00CE               	movwf	??_matrix_display_option
 26321  2503  3000               	movlw	0
 26322  2504  3D4D               	addwfc	matrix_display_option@data+1,w
 26323  2505  00CF               	movwf	??_matrix_display_option+1
 26324  2506  084E               	movf	??_matrix_display_option,w
 26325  2507  0086               	movwf	6
 26326  2508  084F               	movf	??_matrix_display_option+1,w
 26327  2509  0087               	movwf	7
 26328  250A  300A               	movlw	10
 26329  250B  0081               	movwf	1
 26330                           
 26331                           ;matrix_task.c: 129: data->martix_state = STILL_IN_MATRIX;
 26332  250C  084C               	movf	matrix_display_option@data,w
 26333  250D  3E01               	addlw	1
 26334  250E  00CE               	movwf	??_matrix_display_option
 26335  250F  3000               	movlw	0
 26336  2510  3D4D               	addwfc	matrix_display_option@data+1,w
 26337  2511  00CF               	movwf	??_matrix_display_option+1
 26338  2512  084E               	movf	??_matrix_display_option,w
 26339  2513  0086               	movwf	6
 26340  2514  084F               	movf	??_matrix_display_option+1,w
 26341  2515  0087               	movwf	7
 26342  2516  3001               	movlw	1
 26343  2517  0081               	movwf	1
 26344                           
 26345                           ;matrix_task.c: 130: return;
 26346  2518  0008               	return
 26347  2519                     l8957:	
 26348                           
 26349                           ;matrix_task.c: 131: }
 26350                           ;matrix_task.c: 133: if (data->display_state == MATRIX_DONE){
 26351  2519  0020               	movlb	0	; select bank0
 26352  251A  084C               	movf	matrix_display_option@data,w
 26353  251B  0086               	movwf	6
 26354  251C  084D               	movf	matrix_display_option@data+1,w
 26355  251D  0087               	movwf	7
 26356  251E  3142               	addfsr 1,2
 26357  251F  300B               	movlw	11
 26358  2520  0601               	xorwf	1,w
 26359  2521  1D03               	btfss	3,2
 26360  2522  2D32               	goto	l8961
 26361                           
 26362                           ;matrix_task.c: 134: marquee_speedy("YOU STAY IN WONDERLAND    ", data->noholdCount, 15)
      +                          ;
 26363  2523  308D               	movlw	low (STR_81| (0+32768))
 26364  2524  00BA               	movwf	marquee_speedy@string
 26365  2525  30B9               	movlw	high (STR_81| (0+32768))
 26366  2526  00BB               	movwf	marquee_speedy@string+1
 26367  2527  084C               	movf	matrix_display_option@data,w
 26368  2528  0086               	movwf	6
 26369  2529  084D               	movf	matrix_display_option@data+1,w
 26370  252A  0087               	movwf	7
 26371  252B  315D               	addfsr 1,29
 26372  252C  3F40               	moviw [0]fsr1
 26373  252D  00BC               	movwf	marquee_speedy@count
 26374  252E  3F41               	moviw [1]fsr1
 26375  252F  00BD               	movwf	marquee_speedy@count+1
 26376  2530  300F               	movlw	15
 26377  2531  2D64               	goto	L12
 26378  2532                     l8961:	
 26379                           ;matrix_task.c: 135: }
 26380                           
 26381                           
 26382                           ;matrix_task.c: 136: else if (data->display_state != MATRIX_STATE_DISPLAY ){
 26383  2532  0020               	movlb	0	; select bank0
 26384  2533  084C               	movf	matrix_display_option@data,w
 26385  2534  0086               	movwf	6
 26386  2535  084D               	movf	matrix_display_option@data+1,w
 26387  2536  0087               	movwf	7
 26388  2537  3142               	addfsr 1,2
 26389  2538  300A               	movlw	10
 26390  2539  0601               	xorwf	1,w
 26391  253A  1903               	btfsc	3,2
 26392  253B  2D55               	goto	l8965
 26393                           
 26394                           ;matrix_task.c: 138: marquee_speedy(matrix_option[data->display_state], data->noholdCoun
      +                          t, 20);
 26395  253C  084C               	movf	matrix_display_option@data,w
 26396  253D  0086               	movwf	6
 26397  253E  084D               	movf	matrix_display_option@data+1,w
 26398  253F  0087               	movwf	7
 26399  2540  3142               	addfsr 1,2
 26400  2541  3501               	lslf	1,w
 26401  2542  3ED8               	addlw	(low (_matrix_option| (0+768)))& (0+255)
 26402  2543  0086               	movwf	6
 26403  2544  3003               	movlw	3	; select bank7/8
 26404  2545  0087               	movwf	7
 26405  2546  3F40               	moviw [0]fsr1
 26406  2547  00BA               	movwf	marquee_speedy@string
 26407  2548  3F41               	moviw [1]fsr1
 26408  2549  00BB               	movwf	marquee_speedy@string+1
 26409  254A  084C               	movf	matrix_display_option@data,w
 26410  254B  0086               	movwf	6
 26411  254C  084D               	movf	matrix_display_option@data+1,w
 26412  254D  0087               	movwf	7
 26413  254E  315D               	addfsr 1,29
 26414  254F  3F40               	moviw [0]fsr1
 26415  2550  00BC               	movwf	marquee_speedy@count
 26416  2551  3F41               	moviw [1]fsr1
 26417  2552  00BD               	movwf	marquee_speedy@count+1
 26418  2553  3014               	movlw	20
 26419  2554  2D64               	goto	L12
 26420  2555                     l8965:	
 26421                           ;matrix_task.c: 139: }
 26422                           
 26423                           
 26424                           ;matrix_task.c: 140: else{
 26425                           ;matrix_task.c: 141: marquee_speedy("THE CHOICE IS YOURS   ", data->noholdCount, 30);
 26426  2555  30DD               	movlw	low (STR_82| (0+32768))
 26427  2556  0020               	movlb	0	; select bank0
 26428  2557  00BA               	movwf	marquee_speedy@string
 26429  2558  30B9               	movlw	high (STR_82| (0+32768))
 26430  2559  00BB               	movwf	marquee_speedy@string+1
 26431  255A  084C               	movf	matrix_display_option@data,w
 26432  255B  0086               	movwf	6
 26433  255C  084D               	movf	matrix_display_option@data+1,w
 26434  255D  0087               	movwf	7
 26435  255E  315D               	addfsr 1,29
 26436  255F  3F40               	moviw [0]fsr1
 26437  2560  00BC               	movwf	marquee_speedy@count
 26438  2561  3F41               	moviw [1]fsr1
 26439  2562  00BD               	movwf	marquee_speedy@count+1
 26440  2563  301E               	movlw	30
 26441  2564                     L12:	
 26442  2564  00BE               	movwf	marquee_speedy@multiplier
 26443  2565  3000               	movlw	0
 26444  2566  00BF               	movwf	marquee_speedy@multiplier+1
 26445  2567  31A2  225F  31A4   	fcall	_marquee_speedy
 26446                           
 26447                           ;matrix_task.c: 142: }
 26448                           ;matrix_task.c: 144: if (data -> displayTickdown == 0 && data->display_state != MATRIX_D
      +                          ONE ){
 26449  256A  0020               	movlb	0	; select bank0
 26450  256B  084C               	movf	matrix_display_option@data,w
 26451  256C  0086               	movwf	6
 26452  256D  084D               	movf	matrix_display_option@data+1,w
 26453  256E  0087               	movwf	7
 26454  256F  3147               	addfsr 1,7
 26455  2570  0016               	moviw fsr1++
 26456  2571  0401               	iorwf	1,w
 26457  2572  1D03               	btfss	3,2
 26458  2573  0008               	return
 26459  2574  084C               	movf	matrix_display_option@data,w
 26460  2575  0086               	movwf	6
 26461  2576  084D               	movf	matrix_display_option@data+1,w
 26462  2577  0087               	movwf	7
 26463  2578  3142               	addfsr 1,2
 26464  2579  300B               	movlw	11
 26465  257A  0601               	xorwf	1,w
 26466  257B  1903               	btfsc	3,2
 26467  257C  0008               	return
 26468                           
 26469                           ;matrix_task.c: 145: data->display_state = MATRIX_STATE_DISPLAY;
 26470  257D  084C               	movf	matrix_display_option@data,w
 26471  257E  3E02               	addlw	2
 26472  257F  00CE               	movwf	??_matrix_display_option
 26473  2580  3000               	movlw	0
 26474  2581  3D4D               	addwfc	matrix_display_option@data+1,w
 26475  2582  00CF               	movwf	??_matrix_display_option+1
 26476  2583  084E               	movf	??_matrix_display_option,w
 26477  2584  0086               	movwf	6
 26478  2585  084F               	movf	??_matrix_display_option+1,w
 26479  2586  0087               	movwf	7
 26480  2587  300A               	movlw	10
 26481  2588  0081               	movwf	1
 26482  2589  0008               	return
 26483  258A                     __end_of_matrix_display_option:	
 26484                           
 26485                           	psect	text29
 26486  2C47                     __ptext29:	
 26487 ;; *************** function _slot_Setup *****************
 26488 ;; Defined at:
 26489 ;;		line 48 in file "slot_task.c"
 26490 ;; Parameters:    Size  Location     Type
 26491 ;;  taskData        2   15[BANK0 ] PTR void 
 26492 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26493 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26494 ;; Auto vars:     Size  Location     Type
 26495 ;;  data            2   20[BANK0 ] PTR struct t_slot_taskDa
 26496 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26497 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26498 ;; Return value:  Size  Location     Type
 26499 ;;                  1    wreg      void 
 26500 ;; Registers used:
 26501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26502 ;; Tracked objects:
 26503 ;;		On entry : 0/0
 26504 ;;		On exit  : 0/0
 26505 ;;		Unchanged: 0/0
 26506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26507 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26508 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26509 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26510 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26511 ;;Total ram usage:        7 bytes
 26512 ;; Hardware stack levels used:    1
 26513 ;; Hardware stack levels required when called:    6
 26514 ;; This function calls:
 26515 ;;		___lwmod
 26516 ;;		_memset
 26517 ;;		_rand
 26518 ;; This function is called by:
 26519 ;;		_menu_Main
 26520 ;;		_locked_Main
 26521 ;;		_slot_Init
 26522 ;;		_slot_Main
 26523 ;; This function uses a non-reentrant model
 26524 ;;
 26525                           
 26526                           
 26527                           ;psect for function _slot_Setup
 26528  2C47                     _slot_Setup:	
 26529                           
 26530                           ;slot_task.c: 49: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 26531                           
 26532                           ;incstack = 0
 26533                           ; Regs used in _slot_Setup: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 26534  2C47  0020               	movlb	0	; select bank0
 26535  2C48  0830               	movf	slot_Setup@taskData+1,w
 26536  2C49  00B5               	movwf	slot_Setup@data+1
 26537  2C4A  082F               	movf	slot_Setup@taskData,w
 26538  2C4B  00B4               	movwf	slot_Setup@data
 26539                           
 26540                           ;slot_task.c: 50: slot_taskData = data;
 26541  2C4C  0835               	movf	slot_Setup@data+1,w
 26542  2C4D  0021               	movlb	1	; select bank1
 26543  2C4E  00BD               	movwf	(_slot_taskData+1)^(0+128)
 26544  2C4F  0020               	movlb	0	; select bank0
 26545  2C50  0834               	movf	slot_Setup@data,w
 26546  2C51  0021               	movlb	1	; select bank1
 26547  2C52  00BC               	movwf	_slot_taskData^(0+128)
 26548                           
 26549                           ;slot_task.c: 51: data->displayTickCount = 0;
 26550  2C53  0020               	movlb	0	; select bank0
 26551  2C54  0834               	movf	slot_Setup@data,w
 26552  2C55  0086               	movwf	6
 26553  2C56  0835               	movf	slot_Setup@data+1,w
 26554  2C57  0087               	movwf	7
 26555  2C58  3143               	addfsr 1,3
 26556  2C59  3000               	movlw	0
 26557  2C5A  3FC0               	movwi [0]fsr1
 26558  2C5B  3FC1               	movwi [1]fsr1
 26559                           
 26560                           ;slot_task.c: 52: data->delayTickCount = 0;
 26561  2C5C  0834               	movf	slot_Setup@data,w
 26562  2C5D  0086               	movwf	6
 26563  2C5E  0835               	movf	slot_Setup@data+1,w
 26564  2C5F  0087               	movwf	7
 26565  2C60  3145               	addfsr 1,5
 26566  2C61  3000               	movlw	0
 26567  2C62  3FC0               	movwi [0]fsr1
 26568  2C63  3FC1               	movwi [1]fsr1
 26569                           
 26570                           ;slot_task.c: 53: memset(data->slot_print_buf, 0x00, 20);
 26571  2C64  0834               	movf	slot_Setup@data,w
 26572  2C65  3E0B               	addlw	11
 26573  2C66  00F1               	movwf	memset@p1
 26574  2C67  3000               	movlw	0
 26575  2C68  3D35               	addwfc	slot_Setup@data+1,w
 26576  2C69  00F2               	movwf	memset@p1+1
 26577  2C6A  3000               	movlw	0
 26578  2C6B  00F3               	movwf	memset@c
 26579  2C6C  00F4               	movwf	memset@c+1
 26580  2C6D  3014               	movlw	20
 26581  2C6E  00F5               	movwf	memset@n
 26582  2C6F  3000               	movlw	0
 26583  2C70  00F6               	movwf	memset@n+1
 26584  2C71  31B4  242F  31AC   	fcall	_memset
 26585                           
 26586                           ;slot_task.c: 54: if (!badge_locked) {
 26587  2C74  0021               	movlb	1	; select bank1
 26588  2C75  0844               	movf	_badge_locked^(0+128),w
 26589  2C76  1D03               	btfss	3,2
 26590  2C77  2C90               	goto	l8589
 26591                           
 26592                           ;slot_task.c: 55: Shot_Index = (u8)rand() % (sizeof(Shot_Options)/sizeof(Shot_Options[0]
      +                          ));
 26593  2C78  3009               	movlw	9
 26594  2C79  0020               	movlb	0	; select bank0
 26595  2C7A  00AB               	movwf	___lwmod@divisor
 26596  2C7B  3000               	movlw	0
 26597  2C7C  00AC               	movwf	___lwmod@divisor+1
 26598  2C7D  31A9  2168  31AC   	fcall	_rand
 26599  2C80  0020               	movlb	0	; select bank0
 26600  2C81  0824               	movf	?_rand,w
 26601  2C82  00B1               	movwf	??_slot_Setup
 26602  2C83  01B2               	clrf	??_slot_Setup+1
 26603  2C84  0831               	movf	??_slot_Setup,w
 26604  2C85  00AD               	movwf	___lwmod@dividend
 26605  2C86  0832               	movf	??_slot_Setup+1,w
 26606  2C87  00AE               	movwf	___lwmod@dividend+1
 26607  2C88  31B5  25EF  31AC   	fcall	___lwmod
 26608  2C8B  0020               	movlb	0	; select bank0
 26609  2C8C  082B               	movf	?___lwmod,w
 26610  2C8D  00B3               	movwf	??_slot_Setup+2
 26611  2C8E  0833               	movf	??_slot_Setup+2,w
 26612  2C8F  2C94               	goto	L13
 26613  2C90                     l8589:	
 26614                           ;slot_task.c: 56: }
 26615                           
 26616                           
 26617                           ;slot_task.c: 57: else {
 26618                           ;slot_task.c: 58: Shot_Index = ((sizeof(Shot_Options)/sizeof(Shot_Options[0]))-1);
 26619  2C90  3008               	movlw	8
 26620  2C91  0020               	movlb	0	; select bank0
 26621  2C92  00B1               	movwf	??_slot_Setup
 26622  2C93  0831               	movf	??_slot_Setup,w
 26623  2C94                     L13:	
 26624  2C94  00FC               	movwf	_Shot_Index
 26625                           
 26626                           ;slot_task.c: 59: }
 26627                           ;slot_task.c: 61: Leds_idx = 1;
 26628  2C95  3001               	movlw	1
 26629  2C96  0021               	movlb	1	; select bank1
 26630  2C97  00D0               	movwf	_Leds_idx^(0+128)
 26631  2C98  3000               	movlw	0
 26632  2C99  00D1               	movwf	(_Leds_idx^(0+128)+1)
 26633  2C9A  0008               	return
 26634  2C9B                     __end_of_slot_Setup:	
 26635                           
 26636                           	psect	text30
 26637  3399                     __ptext30:	
 26638 ;; *************** function _locked_unlock_leds *****************
 26639 ;; Defined at:
 26640 ;;		line 71 in file "locked_task.c"
 26641 ;; Parameters:    Size  Location     Type
 26642 ;;		None
 26643 ;; Auto vars:     Size  Location     Type
 26644 ;;		None
 26645 ;; Return value:  Size  Location     Type
 26646 ;;                  2  1245[None  ] unsigned int 
 26647 ;; Registers used:
 26648 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26649 ;; Tracked objects:
 26650 ;;		On entry : 0/0
 26651 ;;		On exit  : 0/0
 26652 ;;		Unchanged: 0/0
 26653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26656 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26657 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26658 ;;Total ram usage:        2 bytes
 26659 ;; Hardware stack levels used:    1
 26660 ;; Hardware stack levels required when called:    4
 26661 ;; This function calls:
 26662 ;;		Nothing
 26663 ;; This function is called by:
 26664 ;;		_locked_Main
 26665 ;; This function uses a non-reentrant model
 26666 ;;
 26667                           
 26668                           
 26669                           ;psect for function _locked_unlock_leds
 26670  3399                     _locked_unlock_leds:	
 26671                           
 26672                           ;locked_task.c: 72: locked_locking_leds_idx = 0;
 26673                           
 26674                           ;incstack = 0
 26675                           ; Regs used in _locked_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 26676  3399  0021               	movlb	1	; select bank1
 26677  339A  01A4               	clrf	_locked_locking_leds_idx^(0+128)
 26678  339B  01A5               	clrf	(_locked_locking_leds_idx+1)^(0+128)
 26679                           
 26680                           ;locked_task.c: 73: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 26681  339C  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 26682  339D  3E20               	addlw	(low (_locked_locking_leds| (0+512)))& (0+255)
 26683  339E  0086               	movwf	6
 26684  339F  3002               	movlw	2	; select bank4/5
 26685  33A0  0087               	movwf	7
 26686  33A1  3F40               	moviw [0]fsr1
 26687  33A2  00F1               	movwf	??_locked_unlock_leds
 26688  33A3  3F41               	moviw [1]fsr1
 26689  33A4  00F2               	movwf	??_locked_unlock_leds+1
 26690  33A5  0852               	movf	_locked_lock_base_leds^(0+128),w
 26691  33A6  0471               	iorwf	??_locked_unlock_leds,w
 26692  33A7  00A2               	movwf	_locked_leds^(0+128)
 26693  33A8  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 26694  33A9  0472               	iorwf	??_locked_unlock_leds+1,w
 26695  33AA  00A3               	movwf	(_locked_leds+1)^(0+128)
 26696  33AB  0008               	return
 26697  33AC                     __end_of_locked_unlock_leds:	
 26698                           ;locked_task.c: 74: return locked_leds;
 26699                           ;	Return value of _locked_unlock_leds is never used
 26700                           
 26701                           
 26702                           	psect	text31
 26703  100F                     __ptext31:	
 26704 ;; *************** function _locked_secret_check *****************
 26705 ;; Defined at:
 26706 ;;		line 122 in file "locked_task.c"
 26707 ;; Parameters:    Size  Location     Type
 26708 ;;  data            2    7[COMMON] PTR struct t_locked_task
 26709 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26710 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26711 ;;  buttonPresse    1    9[COMMON] unsigned char 
 26712 ;; Auto vars:     Size  Location     Type
 26713 ;;  i               2    8[BANK0 ] unsigned int 
 26714 ;;  hit_counter     6    0        unsigned char [6]
 26715 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 26716 ;;  size            2    3[BANK0 ] unsigned int 
 26717 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 26718 ;;		 -> locked_secret_inputs.inputs(20), locked_secret_inputs(25), 
 26719 ;; Return value:  Size  Location     Type
 26720 ;;                  1    wreg      unsigned char 
 26721 ;; Registers used:
 26722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26723 ;; Tracked objects:
 26724 ;;		On entry : 0/0
 26725 ;;		On exit  : 0/0
 26726 ;;		Unchanged: 0/0
 26727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26728 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26729 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26730 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26731 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26732 ;;Total ram usage:       13 bytes
 26733 ;; Hardware stack levels used:    1
 26734 ;; Hardware stack levels required when called:    5
 26735 ;; This function calls:
 26736 ;;		___bmul
 26737 ;;		_strlen
 26738 ;; This function is called by:
 26739 ;;		_locked_Main
 26740 ;; This function uses a non-reentrant model
 26741 ;;
 26742                           
 26743                           
 26744                           ;psect for function _locked_secret_check
 26745  100F                     _locked_secret_check:	
 26746                           
 26747                           ;locked_task.c: 123: u8 *inputs;
 26748                           ;locked_task.c: 124: u16 size = sizeof(locked_secret_inputs) / sizeof(locked_secret_inpu
      +                          ts[0]);
 26749                           
 26750                           ;incstack = 0
 26751                           ; Regs used in _locked_secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26752  100F  3001               	movlw	1
 26753  1010  0020               	movlb	0	; select bank0
 26754  1011  00A3               	movwf	locked_secret_check@size
 26755  1012  3000               	movlw	0
 26756  1013  00A4               	movwf	locked_secret_check@size+1
 26757                           
 26758                           ;locked_task.c: 125: u16 currents_size;
 26759                           ;locked_task.c: 126: char hit_counter[6];
 26760                           ;locked_task.c: 128: for (u16 i = 0; i < size; i++){
 26761  1014  01A8               	clrf	locked_secret_check@i
 26762  1015  01A9               	clrf	locked_secret_check@i+1
 26763  1016                     l8831:	
 26764  1016  0824               	movf	locked_secret_check@size+1,w
 26765  1017  0229               	subwf	locked_secret_check@i+1,w
 26766  1018  1D03               	skipz
 26767  1019  281C               	goto	u5455
 26768  101A  0823               	movf	locked_secret_check@size,w
 26769  101B  0228               	subwf	locked_secret_check@i,w
 26770  101C                     u5455:	
 26771  101C  1803               	btfsc	3,0
 26772  101D  28C9               	goto	l8833
 26773                           
 26774                           ;locked_task.c: 129: inputs = locked_secret_inputs[i].inputs;
 26775  101E  3019               	movlw	25
 26776  101F  00A0               	movwf	??_locked_secret_check
 26777  1020  0820               	movf	??_locked_secret_check,w
 26778  1021  00F1               	movwf	___bmul@multiplicand
 26779  1022  0828               	movf	locked_secret_check@i,w
 26780  1023  31B3  2363  3190   	fcall	___bmul
 26781  1026  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26782  1027  0020               	movlb	0	; select bank0
 26783  1028  00A1               	movwf	??_locked_secret_check+1
 26784  1029  0821               	movf	??_locked_secret_check+1,w
 26785  102A  00A7               	movwf	locked_secret_check@inputs
 26786                           
 26787                           ;locked_task.c: 131: if (buttonPressed == inputs[locked_secret_inputs[i].idx]){
 26788  102B  3019               	movlw	25
 26789  102C  00A0               	movwf	??_locked_secret_check
 26790  102D  0820               	movf	??_locked_secret_check,w
 26791  102E  00F1               	movwf	___bmul@multiplicand
 26792  102F  0828               	movf	locked_secret_check@i,w
 26793  1030  31B3  2363  3190   	fcall	___bmul
 26794  1033  3E14               	addlw	20
 26795  1034  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26796  1035  0086               	movwf	6
 26797  1036  3002               	movlw	2	; select bank4/5
 26798  1037  0087               	movwf	7
 26799  1038  0801               	movf	1,w
 26800  1039  0020               	movlb	0	; select bank0
 26801  103A  0727               	addwf	locked_secret_check@inputs,w
 26802  103B  00A1               	movwf	??_locked_secret_check+1
 26803  103C  0821               	movf	??_locked_secret_check+1,w
 26804  103D  0086               	movwf	6
 26805  103E  3002               	movlw	2	; select bank4/5
 26806  103F  0087               	movwf	7
 26807  1040  0801               	movf	1,w
 26808  1041  0679               	xorwf	locked_secret_check@buttonPressed,w
 26809  1042  1D03               	skipz
 26810  1043  28B2               	goto	l8827
 26811                           
 26812                           ;locked_task.c: 132: currents_size = strlen((const char *)inputs);
 26813  1044  0827               	movf	locked_secret_check@inputs,w
 26814  1045  00F1               	movwf	strlen@s
 26815  1046  3002               	movlw	2
 26816  1047  00F2               	movwf	strlen@s+1
 26817  1048  31B4  24D3  3190   	fcall	_strlen
 26818  104B  0872               	movf	?_strlen+1,w
 26819  104C  0020               	movlb	0	; select bank0
 26820  104D  00A6               	movwf	locked_secret_check@currents_size+1
 26821  104E  0871               	movf	?_strlen,w
 26822  104F  00A5               	movwf	locked_secret_check@currents_size
 26823                           
 26824                           ;locked_task.c: 133: locked_secret_inputs[i].idx++;
 26825  1050  3019               	movlw	25
 26826  1051  00A0               	movwf	??_locked_secret_check
 26827  1052  0820               	movf	??_locked_secret_check,w
 26828  1053  00F1               	movwf	___bmul@multiplicand
 26829  1054  0828               	movf	locked_secret_check@i,w
 26830  1055  31B3  2363  3190   	fcall	___bmul
 26831  1058  3E14               	addlw	20
 26832  1059  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26833  105A  0086               	movwf	6
 26834  105B  3002               	movlw	2	; select bank4/5
 26835  105C  0087               	movwf	7
 26836  105D  3001               	movlw	1
 26837  105E  0781               	addwf	1,f
 26838  105F  3141               	addfsr 1,1
 26839  1060  1803               	skipnc
 26840  1061  0A81               	incf	1,f
 26841                           
 26842                           ;locked_task.c: 135: if (locked_secret_inputs[i].idx == currents_size) {
 26843  1062  3019               	movlw	25
 26844  1063  0020               	movlb	0	; select bank0
 26845  1064  00A0               	movwf	??_locked_secret_check
 26846  1065  0820               	movf	??_locked_secret_check,w
 26847  1066  00F1               	movwf	___bmul@multiplicand
 26848  1067  0828               	movf	locked_secret_check@i,w
 26849  1068  31B3  2363  3190   	fcall	___bmul
 26850  106B  3E14               	addlw	20
 26851  106C  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26852  106D  0086               	movwf	6
 26853  106E  3002               	movlw	2	; select bank4/5
 26854  106F  0087               	movwf	7
 26855  1070  3F40               	moviw [0]fsr1
 26856  1071  0020               	movlb	0	; select bank0
 26857  1072  00A1               	movwf	??_locked_secret_check+1
 26858  1073  3F41               	moviw [1]fsr1
 26859  1074  00A2               	movwf	??_locked_secret_check+2
 26860  1075  0826               	movf	locked_secret_check@currents_size+1,w
 26861  1076  0622               	xorwf	??_locked_secret_check+2,w
 26862  1077  1D03               	skipz
 26863  1078  287B               	goto	u5445
 26864  1079  0825               	movf	locked_secret_check@currents_size,w
 26865  107A  0621               	xorwf	??_locked_secret_check+1,w
 26866  107B                     u5445:	
 26867  107B  1D03               	skipz
 26868  107C  28C3               	goto	l8829
 26869                           
 26870                           ;locked_task.c: 137: locked_secret_inputs[i].idx = 0;
 26871  107D  3019               	movlw	25
 26872  107E  00A0               	movwf	??_locked_secret_check
 26873  107F  0820               	movf	??_locked_secret_check,w
 26874  1080  00F1               	movwf	___bmul@multiplicand
 26875  1081  0828               	movf	locked_secret_check@i,w
 26876  1082  31B3  2363  3190   	fcall	___bmul
 26877  1085  3E14               	addlw	20
 26878  1086  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26879  1087  0086               	movwf	6
 26880  1088  3002               	movlw	2	; select bank4/5
 26881  1089  0087               	movwf	7
 26882  108A  3000               	movlw	0
 26883  108B  3FC0               	movwi [0]fsr1
 26884  108C  3FC1               	movwi [1]fsr1
 26885                           
 26886                           ;locked_task.c: 140: *(locked_secret_inputs[i].variable) = (u16) locked_secret_inputs[i]
      +                          .value;
 26887  108D  3019               	movlw	25
 26888  108E  0020               	movlb	0	; select bank0
 26889  108F  00A0               	movwf	??_locked_secret_check
 26890  1090  0820               	movf	??_locked_secret_check,w
 26891  1091  00F1               	movwf	___bmul@multiplicand
 26892  1092  0828               	movf	locked_secret_check@i,w
 26893  1093  31B3  2363  3190   	fcall	___bmul
 26894  1096  3E17               	addlw	23
 26895  1097  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26896  1098  0086               	movwf	6
 26897  1099  3002               	movlw	2	; select bank4/5
 26898  109A  0087               	movwf	7
 26899  109B  3019               	movlw	25
 26900  109C  0020               	movlb	0	; select bank0
 26901  109D  00A1               	movwf	??_locked_secret_check+1
 26902  109E  0821               	movf	??_locked_secret_check+1,w
 26903  109F  00F1               	movwf	___bmul@multiplicand
 26904  10A0  0828               	movf	locked_secret_check@i,w
 26905  10A1  31B3  2363         	fcall	___bmul
 26906  10A3  3E16               	addlw	22
 26907  10A4  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26908  10A5  0084               	movwf	4
 26909  10A6  3002               	movlw	2	; select bank4/5
 26910  10A7  0085               	movwf	5
 26911  10A8  0800               	movf	0,w
 26912  10A9  0084               	movwf	4
 26913  10AA  3001               	movlw	1	; select bank2/3
 26914  10AB  0085               	movwf	5
 26915  10AC  3F40               	moviw [0]fsr1
 26916  10AD  3F80               	movwi [0]fsr0
 26917  10AE  3F41               	moviw [1]fsr1
 26918  10AF  3F81               	movwi [1]fsr0
 26919                           
 26920                           ;locked_task.c: 142: return 1;
 26921  10B0  3001               	movlw	1
 26922  10B1  0008               	return
 26923  10B2                     l8827:	
 26924                           ;locked_task.c: 143: }
 26925                           ;locked_task.c: 144: } else {
 26926                           
 26927                           
 26928                           ;locked_task.c: 146: locked_secret_inputs[i].idx = 0;
 26929  10B2  3019               	movlw	25
 26930  10B3  0020               	movlb	0	; select bank0
 26931  10B4  00A0               	movwf	??_locked_secret_check
 26932  10B5  0820               	movf	??_locked_secret_check,w
 26933  10B6  00F1               	movwf	___bmul@multiplicand
 26934  10B7  0828               	movf	locked_secret_check@i,w
 26935  10B8  31B3  2363  3190   	fcall	___bmul
 26936  10BB  3E14               	addlw	20
 26937  10BC  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26938  10BD  0086               	movwf	6
 26939  10BE  3002               	movlw	2	; select bank4/5
 26940  10BF  0087               	movwf	7
 26941  10C0  3000               	movlw	0
 26942  10C1  3FC0               	movwi [0]fsr1
 26943  10C2  3FC1               	movwi [1]fsr1
 26944  10C3                     l8829:	
 26945  10C3  3001               	movlw	1
 26946  10C4  0020               	movlb	0	; select bank0
 26947  10C5  07A8               	addwf	locked_secret_check@i,f
 26948  10C6  3000               	movlw	0
 26949  10C7  3DA9               	addwfc	locked_secret_check@i+1,f
 26950  10C8  2816               	goto	l8831
 26951  10C9                     l8833:	
 26952                           
 26953                           ;locked_task.c: 147: }
 26954                           ;locked_task.c: 148: }
 26955                           ;locked_task.c: 149: return 0;
 26956  10C9  3000               	movlw	0
 26957  10CA  0008               	return
 26958  10CB                     __end_of_locked_secret_check:	
 26959                           
 26960                           	psect	text32
 26961  3363                     __ptext32:	
 26962 ;; *************** function ___bmul *****************
 26963 ;; Defined at:
 26964 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul8.c"
 26965 ;; Parameters:    Size  Location     Type
 26966 ;;  multiplier      1    wreg     unsigned char 
 26967 ;;  multiplicand    1    1[COMMON] unsigned char 
 26968 ;; Auto vars:     Size  Location     Type
 26969 ;;  multiplier      1    4[COMMON] unsigned char 
 26970 ;;  product         1    3[COMMON] unsigned char 
 26971 ;; Return value:  Size  Location     Type
 26972 ;;                  1    wreg      unsigned char 
 26973 ;; Registers used:
 26974 ;;		wreg, status,2, status,0
 26975 ;; Tracked objects:
 26976 ;;		On entry : 0/0
 26977 ;;		On exit  : 0/0
 26978 ;;		Unchanged: 0/0
 26979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26980 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26981 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26982 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26983 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26984 ;;Total ram usage:        4 bytes
 26985 ;; Hardware stack levels used:    1
 26986 ;; Hardware stack levels required when called:    4
 26987 ;; This function calls:
 26988 ;;		Nothing
 26989 ;; This function is called by:
 26990 ;;		_matrix_secret_check
 26991 ;;		_secret_check
 26992 ;;		_locked_secret_check
 26993 ;; This function uses a non-reentrant model
 26994 ;;
 26995                           
 26996                           
 26997                           ;psect for function ___bmul
 26998  3363                     ___bmul:	
 26999                           
 27000                           ;incstack = 0
 27001                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 27002                           ;___bmul@multiplier stored from wreg
 27003  3363  00F4               	movwf	___bmul@multiplier
 27004  3364  01F3               	clrf	___bmul@product
 27005  3365                     l8505:	
 27006  3365  1C74               	btfss	___bmul@multiplier,0
 27007  3366  2B6B               	goto	l8509
 27008  3367  0871               	movf	___bmul@multiplicand,w
 27009  3368  00F2               	movwf	??___bmul
 27010  3369  0872               	movf	??___bmul,w
 27011  336A  07F3               	addwf	___bmul@product,f
 27012  336B                     l8509:	
 27013  336B  1003               	clrc
 27014  336C  0DF1               	rlf	___bmul@multiplicand,f
 27015  336D  1003               	clrc
 27016  336E  0CF4               	rrf	___bmul@multiplier,f
 27017  336F  0874               	movf	___bmul@multiplier,w
 27018  3370  1D03               	btfss	3,2
 27019  3371  2B65               	goto	l8505
 27020  3372  0873               	movf	___bmul@product,w
 27021  3373  0008               	return
 27022  3374                     __end_of___bmul:	
 27023                           
 27024                           	psect	text33
 27025  3462                     __ptext33:	
 27026 ;; *************** function _locked_lock_leds *****************
 27027 ;; Defined at:
 27028 ;;		line 63 in file "locked_task.c"
 27029 ;; Parameters:    Size  Location     Type
 27030 ;;		None
 27031 ;; Auto vars:     Size  Location     Type
 27032 ;;  size            2    3[COMMON] unsigned int 
 27033 ;; Return value:  Size  Location     Type
 27034 ;;                  2  1242[None  ] unsigned int 
 27035 ;; Registers used:
 27036 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27037 ;; Tracked objects:
 27038 ;;		On entry : 0/0
 27039 ;;		On exit  : 0/0
 27040 ;;		Unchanged: 0/0
 27041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27043 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27044 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27045 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27046 ;;Total ram usage:        4 bytes
 27047 ;; Hardware stack levels used:    1
 27048 ;; Hardware stack levels required when called:    4
 27049 ;; This function calls:
 27050 ;;		Nothing
 27051 ;; This function is called by:
 27052 ;;		_locked_Init
 27053 ;;		_locked_Main
 27054 ;; This function uses a non-reentrant model
 27055 ;;
 27056                           
 27057                           
 27058                           ;psect for function _locked_lock_leds
 27059  3462                     _locked_lock_leds:	
 27060                           
 27061                           ;locked_task.c: 64: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 27062                           
 27063                           ;incstack = 0
 27064                           ; Regs used in _locked_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 27065  3462  3006               	movlw	6
 27066  3463  00F3               	movwf	locked_lock_leds@size
 27067  3464  3000               	movlw	0
 27068  3465  00F4               	movwf	locked_lock_leds@size+1
 27069                           
 27070                           ;locked_task.c: 65: locked_locking_leds_idx = size - 1;
 27071  3466  0873               	movf	locked_lock_leds@size,w
 27072  3467  3EFF               	addlw	255
 27073  3468  0021               	movlb	1	; select bank1
 27074  3469  00A4               	movwf	_locked_locking_leds_idx^(0+128)
 27075  346A  30FF               	movlw	255
 27076  346B  3D74               	addwfc	locked_lock_leds@size+1,w
 27077  346C  00A5               	movwf	(_locked_locking_leds_idx+1)^(0+128)
 27078                           
 27079                           ;locked_task.c: 66: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 27080  346D  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 27081  346E  3E20               	addlw	(low (_locked_locking_leds| (0+512)))& (0+255)
 27082  346F  0086               	movwf	6
 27083  3470  3002               	movlw	2	; select bank4/5
 27084  3471  0087               	movwf	7
 27085  3472  3F40               	moviw [0]fsr1
 27086  3473  00F1               	movwf	??_locked_lock_leds
 27087  3474  3F41               	moviw [1]fsr1
 27088  3475  00F2               	movwf	??_locked_lock_leds+1
 27089  3476  0852               	movf	_locked_lock_base_leds^(0+128),w
 27090  3477  0471               	iorwf	??_locked_lock_leds,w
 27091  3478  00A2               	movwf	_locked_leds^(0+128)
 27092  3479  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 27093  347A  0472               	iorwf	??_locked_lock_leds+1,w
 27094  347B  00A3               	movwf	(_locked_leds+1)^(0+128)
 27095  347C  0008               	return
 27096  347D                     __end_of_locked_lock_leds:	
 27097                           ;locked_task.c: 67: return locked_leds;
 27098                           ;	Return value of _locked_lock_leds is never used
 27099                           
 27100                           
 27101                           	psect	text34
 27102  0800                     __ptext34:	
 27103 ;; *************** function _locked_get_unlock_leds *****************
 27104 ;; Defined at:
 27105 ;;		line 88 in file "locked_task.c"
 27106 ;; Parameters:    Size  Location     Type
 27107 ;;		None
 27108 ;; Auto vars:     Size  Location     Type
 27109 ;;  leds            2    3[COMMON] unsigned int 
 27110 ;; Return value:  Size  Location     Type
 27111 ;;                  2    1[COMMON] unsigned int 
 27112 ;; Registers used:
 27113 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27114 ;; Tracked objects:
 27115 ;;		On entry : 0/0
 27116 ;;		On exit  : 0/0
 27117 ;;		Unchanged: 0/0
 27118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27119 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27120 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27122 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27123 ;;Total ram usage:        4 bytes
 27124 ;; Hardware stack levels used:    1
 27125 ;; Hardware stack levels required when called:    4
 27126 ;; This function calls:
 27127 ;;		Nothing
 27128 ;; This function is called by:
 27129 ;;		_locked_Main
 27130 ;; This function uses a non-reentrant model
 27131 ;;
 27132                           
 27133                           
 27134                           ;psect for function _locked_get_unlock_leds
 27135  0800                     _locked_get_unlock_leds:	
 27136                           
 27137                           ;locked_task.c: 89: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 27138                           
 27139                           ;incstack = 0
 27140                           ; Regs used in _locked_get_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 27141  0800  0021               	movlb	1	; select bank1
 27142  0801  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 27143  0802  3E20               	addlw	(low (_locked_locking_leds| (0+512)))& (0+255)
 27144  0803  0086               	movwf	6
 27145  0804  3002               	movlw	2	; select bank4/5
 27146  0805  0087               	movwf	7
 27147  0806  3F40               	moviw [0]fsr1
 27148  0807  00F3               	movwf	locked_get_unlock_leds@leds
 27149  0808  3F41               	moviw [1]fsr1
 27150  0809  00F4               	movwf	locked_get_unlock_leds@leds+1
 27151                           
 27152                           ;locked_task.c: 92: if (locked_locking_leds_idx > 0){
 27153  080A  0824               	movf	_locked_locking_leds_idx^(0+128),w
 27154  080B  0425               	iorwf	(_locked_locking_leds_idx+1)^(0+128),w
 27155  080C  1903               	btfsc	3,2
 27156  080D  2812               	goto	l1253
 27157                           
 27158                           ;locked_task.c: 93: locked_locking_leds_idx -= 1;
 27159  080E  3001               	movlw	1
 27160  080F  02A4               	subwf	_locked_locking_leds_idx^(0+128),f
 27161  0810  3000               	movlw	0
 27162  0811  3BA5               	subwfb	(_locked_locking_leds_idx+1)^(0+128),f
 27163  0812                     l1253:	
 27164                           
 27165                           ;locked_task.c: 94: }
 27166                           ;locked_task.c: 95: return locked_lock_base_leds | leds;
 27167  0812  0873               	movf	locked_get_unlock_leds@leds,w
 27168  0813  0452               	iorwf	_locked_lock_base_leds^(0+128),w
 27169  0814  00F1               	movwf	?_locked_get_unlock_leds
 27170  0815  0874               	movf	locked_get_unlock_leds@leds+1,w
 27171  0816  0453               	iorwf	(_locked_lock_base_leds+1)^(0+128),w
 27172  0817  00F2               	movwf	?_locked_get_unlock_leds+1
 27173  0818  0008               	return
 27174  0819                     __end_of_locked_get_unlock_leds:	
 27175                           
 27176                           	psect	text35
 27177  3553                     __ptext35:	
 27178 ;; *************** function _locked_get_lock_leds *****************
 27179 ;; Defined at:
 27180 ;;		line 77 in file "locked_task.c"
 27181 ;; Parameters:    Size  Location     Type
 27182 ;;		None
 27183 ;; Auto vars:     Size  Location     Type
 27184 ;;  leds            2    7[COMMON] unsigned int 
 27185 ;;  size            2    5[COMMON] unsigned int 
 27186 ;; Return value:  Size  Location     Type
 27187 ;;                  2    1[COMMON] unsigned int 
 27188 ;; Registers used:
 27189 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27190 ;; Tracked objects:
 27191 ;;		On entry : 0/0
 27192 ;;		On exit  : 0/0
 27193 ;;		Unchanged: 0/0
 27194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27195 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27196 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27197 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27198 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27199 ;;Total ram usage:        8 bytes
 27200 ;; Hardware stack levels used:    1
 27201 ;; Hardware stack levels required when called:    4
 27202 ;; This function calls:
 27203 ;;		Nothing
 27204 ;; This function is called by:
 27205 ;;		_locked_Main
 27206 ;; This function uses a non-reentrant model
 27207 ;;
 27208                           
 27209                           
 27210                           ;psect for function _locked_get_lock_leds
 27211  3553                     _locked_get_lock_leds:	
 27212                           
 27213                           ;locked_task.c: 78: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 27214                           
 27215                           ;incstack = 0
 27216                           ; Regs used in _locked_get_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 27217  3553  3006               	movlw	6
 27218  3554  00F5               	movwf	locked_get_lock_leds@size
 27219  3555  3000               	movlw	0
 27220  3556  00F6               	movwf	locked_get_lock_leds@size+1
 27221                           
 27222                           ;locked_task.c: 79: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 27223  3557  0021               	movlb	1	; select bank1
 27224  3558  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 27225  3559  3E20               	addlw	(low (_locked_locking_leds| (0+512)))& (0+255)
 27226  355A  0086               	movwf	6
 27227  355B  3002               	movlw	2	; select bank4/5
 27228  355C  0087               	movwf	7
 27229  355D  3F40               	moviw [0]fsr1
 27230  355E  00F7               	movwf	locked_get_lock_leds@leds
 27231  355F  3F41               	moviw [1]fsr1
 27232  3560  00F8               	movwf	locked_get_lock_leds@leds+1
 27233                           
 27234                           ;locked_task.c: 82: if (locked_locking_leds_idx < size - 1){
 27235  3561  0875               	movf	locked_get_lock_leds@size,w
 27236  3562  3EFF               	addlw	255
 27237  3563  00F3               	movwf	??_locked_get_lock_leds
 27238  3564  30FF               	movlw	255
 27239  3565  3D76               	addwfc	locked_get_lock_leds@size+1,w
 27240  3566  00F4               	movwf	??_locked_get_lock_leds+1
 27241  3567  0874               	movf	??_locked_get_lock_leds+1,w
 27242  3568  0225               	subwf	(_locked_locking_leds_idx+1)^(0+128),w
 27243  3569  1D03               	skipz
 27244  356A  2D6D               	goto	u5415
 27245  356B  0873               	movf	??_locked_get_lock_leds,w
 27246  356C  0224               	subwf	_locked_locking_leds_idx^(0+128),w
 27247  356D                     u5415:	
 27248  356D  1803               	skipnc
 27249  356E  2D73               	goto	l1249
 27250                           
 27251                           ;locked_task.c: 83: locked_locking_leds_idx += 1;
 27252  356F  3001               	movlw	1
 27253  3570  07A4               	addwf	_locked_locking_leds_idx^(0+128),f
 27254  3571  3000               	movlw	0
 27255  3572  3DA5               	addwfc	(_locked_locking_leds_idx+1)^(0+128),f
 27256  3573                     l1249:	
 27257                           
 27258                           ;locked_task.c: 84: }
 27259                           ;locked_task.c: 85: return leds;
 27260  3573  0878               	movf	locked_get_lock_leds@leds+1,w
 27261  3574  00F2               	movwf	?_locked_get_lock_leds+1
 27262  3575  0877               	movf	locked_get_lock_leds@leds,w
 27263  3576  00F1               	movwf	?_locked_get_lock_leds
 27264  3577  0008               	return
 27265  3578                     __end_of_locked_get_lock_leds:	
 27266                           
 27267                           	psect	text36
 27268  2926                     __ptext36:	
 27269 ;; *************** function _locked_clear *****************
 27270 ;; Defined at:
 27271 ;;		line 275 in file "locked_task.c"
 27272 ;; Parameters:    Size  Location     Type
 27273 ;;  data            2   25[BANK0 ] PTR struct t_locked_task
 27274 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 27275 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 27276 ;; Auto vars:     Size  Location     Type
 27277 ;;		None
 27278 ;; Return value:  Size  Location     Type
 27279 ;;                  1    wreg      void 
 27280 ;; Registers used:
 27281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27282 ;; Tracked objects:
 27283 ;;		On entry : 0/0
 27284 ;;		On exit  : 0/0
 27285 ;;		Unchanged: 0/0
 27286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27287 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27290 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27291 ;;Total ram usage:        2 bytes
 27292 ;; Hardware stack levels used:    1
 27293 ;; Hardware stack levels required when called:   10
 27294 ;; This function calls:
 27295 ;;		_nullifyBadge_segDisplayErase
 27296 ;;		_nullifyBadge_userLedsClr
 27297 ;; This function is called by:
 27298 ;;		_locked_Main
 27299 ;; This function uses a non-reentrant model
 27300 ;;
 27301                           
 27302                           
 27303                           ;psect for function _locked_clear
 27304  2926                     _locked_clear:	
 27305                           
 27306                           ;locked_task.c: 277: data->delayTickCount = 0;
 27307                           
 27308                           ;incstack = 0
 27309                           ; Regs used in _locked_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27310  2926  0020               	movlb	0	; select bank0
 27311  2927  0839               	movf	locked_clear@data,w
 27312  2928  0086               	movwf	6
 27313  2929  083A               	movf	locked_clear@data+1,w
 27314  292A  0087               	movwf	7
 27315  292B  3141               	addfsr 1,1
 27316  292C  3000               	movlw	0
 27317  292D  3FC0               	movwi [0]fsr1
 27318  292E  3FC1               	movwi [1]fsr1
 27319                           
 27320                           ;locked_task.c: 278: data->holdCountA = 0;
 27321  292F  0839               	movf	locked_clear@data,w
 27322  2930  0086               	movwf	6
 27323  2931  083A               	movf	locked_clear@data+1,w
 27324  2932  0087               	movwf	7
 27325  2933  3143               	addfsr 1,3
 27326  2934  3000               	movlw	0
 27327  2935  3FC0               	movwi [0]fsr1
 27328  2936  3FC1               	movwi [1]fsr1
 27329                           
 27330                           ;locked_task.c: 279: data->holdCountB = 0;
 27331  2937  0839               	movf	locked_clear@data,w
 27332  2938  0086               	movwf	6
 27333  2939  083A               	movf	locked_clear@data+1,w
 27334  293A  0087               	movwf	7
 27335  293B  3145               	addfsr 1,5
 27336  293C  3000               	movlw	0
 27337  293D  3FC0               	movwi [0]fsr1
 27338  293E  3FC1               	movwi [1]fsr1
 27339                           
 27340                           ;locked_task.c: 280: data->holdCountX = 0;
 27341  293F  0839               	movf	locked_clear@data,w
 27342  2940  0086               	movwf	6
 27343  2941  083A               	movf	locked_clear@data+1,w
 27344  2942  0087               	movwf	7
 27345  2943  3147               	addfsr 1,7
 27346  2944  3000               	movlw	0
 27347  2945  3FC0               	movwi [0]fsr1
 27348  2946  3FC1               	movwi [1]fsr1
 27349                           
 27350                           ;locked_task.c: 281: data->holdCountY = 0;
 27351  2947  0839               	movf	locked_clear@data,w
 27352  2948  0086               	movwf	6
 27353  2949  083A               	movf	locked_clear@data+1,w
 27354  294A  0087               	movwf	7
 27355  294B  3149               	addfsr 1,9
 27356  294C  3000               	movlw	0
 27357  294D  3FC0               	movwi [0]fsr1
 27358  294E  3FC1               	movwi [1]fsr1
 27359                           
 27360                           ;locked_task.c: 282: data->noholdCount = 0;
 27361  294F  0839               	movf	locked_clear@data,w
 27362  2950  0086               	movwf	6
 27363  2951  083A               	movf	locked_clear@data+1,w
 27364  2952  0087               	movwf	7
 27365  2953  314B               	addfsr 1,11
 27366  2954  3000               	movlw	0
 27367  2955  3FC0               	movwi [0]fsr1
 27368  2956  3FC1               	movwi [1]fsr1
 27369                           
 27370                           ;locked_task.c: 285: nullifyBadge_userLedsClr(data->badge);
 27371  2957  0839               	movf	locked_clear@data,w
 27372  2958  0086               	movwf	6
 27373  2959  083A               	movf	locked_clear@data+1,w
 27374  295A  0087               	movwf	7
 27375  295B  0801               	movf	1,w
 27376  295C  3187  27FA  31A9   	fcall	_nullifyBadge_userLedsClr
 27377                           
 27378                           ;locked_task.c: 286: nullifyBadge_segDisplayErase(data->badge);
 27379  295F  0020               	movlb	0	; select bank0
 27380  2960  0839               	movf	locked_clear@data,w
 27381  2961  0086               	movwf	6
 27382  2962  083A               	movf	locked_clear@data+1,w
 27383  2963  0087               	movwf	7
 27384  2964  0801               	movf	1,w
 27385  2965  31B2  223D         	fcall	_nullifyBadge_segDisplayErase
 27386  2967  0008               	return
 27387  2968                     __end_of_locked_clear:	
 27388                           
 27389                           	psect	text37
 27390  07FA                     __ptext37:	
 27391 ;; *************** function _nullifyBadge_userLedsClr *****************
 27392 ;; Defined at:
 27393 ;;		line 177 in file "nullifyBadge.c"
 27394 ;; Parameters:    Size  Location     Type
 27395 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 27396 ;;		 -> badge_inst(18), 
 27397 ;; Auto vars:     Size  Location     Type
 27398 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 27399 ;;		 -> badge_inst(18), 
 27400 ;; Return value:  Size  Location     Type
 27401 ;;                  1    wreg      void 
 27402 ;; Registers used:
 27403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27404 ;; Tracked objects:
 27405 ;;		On entry : 0/0
 27406 ;;		On exit  : 0/0
 27407 ;;		Unchanged: 0/0
 27408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27412 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27413 ;;Total ram usage:        1 bytes
 27414 ;; Hardware stack levels used:    1
 27415 ;; Hardware stack levels required when called:    8
 27416 ;; This function calls:
 27417 ;;		_displayL2_ClrUserLeds
 27418 ;; This function is called by:
 27419 ;;		_menu_Init
 27420 ;;		_menu_clear
 27421 ;;		_menu_Exit
 27422 ;;		_flashy_Init
 27423 ;;		_flashy_Exit
 27424 ;;		_locked_Init
 27425 ;;		_locked_clear
 27426 ;;		_locked_Exit
 27427 ;;		_secret_Init
 27428 ;;		_secret_Exit
 27429 ;;		_slot_Init
 27430 ;;		_slot_Exit
 27431 ;;		_matrix_Init
 27432 ;;		_matrix_Exit
 27433 ;; This function uses a non-reentrant model
 27434 ;;
 27435                           
 27436                           
 27437                           ;psect for function _nullifyBadge_userLedsClr
 27438  07FA                     _nullifyBadge_userLedsClr:	
 27439                           
 27440                           ;incstack = 0
 27441                           ; Regs used in _nullifyBadge_userLedsClr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 27442                           ;nullifyBadge_userLedsClr@badge stored from wreg
 27443  07FA  0020               	movlb	0	; select bank0
 27444  07FB  00AB               	movwf	nullifyBadge_userLedsClr@badge
 27445                           
 27446                           ;nullifyBadge.c: 178: displayL2_ClrUserLeds(&badge->display);
 27447  07FC  082B               	movf	nullifyBadge_userLedsClr@badge,w
 27448  07FD  31B3  2305         	fcall	_displayL2_ClrUserLeds
 27449  07FF  0008               	return
 27450  0800                     __end_of_nullifyBadge_userLedsClr:	
 27451                           
 27452                           	psect	text38
 27453  3305                     __ptext38:	
 27454 ;; *************** function _displayL2_ClrUserLeds *****************
 27455 ;; Defined at:
 27456 ;;		line 94 in file "nullifyBadge_displayL2.c"
 27457 ;; Parameters:    Size  Location     Type
 27458 ;;  display         1    wreg     PTR struct t_nullifyDisp
 27459 ;;		 -> badge_inst(18), 
 27460 ;; Auto vars:     Size  Location     Type
 27461 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 27462 ;;		 -> badge_inst(18), 
 27463 ;; Return value:  Size  Location     Type
 27464 ;;                  1    wreg      void 
 27465 ;; Registers used:
 27466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27467 ;; Tracked objects:
 27468 ;;		On entry : 0/0
 27469 ;;		On exit  : 0/0
 27470 ;;		Unchanged: 0/0
 27471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27473 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27475 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27476 ;;Total ram usage:        1 bytes
 27477 ;; Hardware stack levels used:    1
 27478 ;; Hardware stack levels required when called:    7
 27479 ;; This function calls:
 27480 ;;		_displayL1_SetUserLed
 27481 ;;		_displayL1_Update
 27482 ;; This function is called by:
 27483 ;;		_nullifyBadge_userLedsClr
 27484 ;; This function uses a non-reentrant model
 27485 ;;
 27486                           
 27487                           
 27488                           ;psect for function _displayL2_ClrUserLeds
 27489  3305                     _displayL2_ClrUserLeds:	
 27490                           
 27491                           ;incstack = 0
 27492                           ; Regs used in _displayL2_ClrUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 27493                           ;displayL2_ClrUserLeds@display stored from wreg
 27494  3305  00FB               	movwf	displayL2_ClrUserLeds@display
 27495                           
 27496                           ;nullifyBadge_displayL2.c: 95: displayL1_SetUserLed(&display->display_l1, 0);
 27497  3306  3000               	movlw	0
 27498  3307  00F1               	movwf	displayL1_SetUserLed@userLedVect
 27499  3308  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 27500  3309  087B               	movf	displayL2_ClrUserLeds@display,w
 27501  330A  3E07               	addlw	7
 27502  330B  31B3  2374  31B3   	fcall	_displayL1_SetUserLed
 27503                           
 27504                           ;nullifyBadge_displayL2.c: 96: displayL1_Update(&display->display_l1);
 27505  330E  087B               	movf	displayL2_ClrUserLeds@display,w
 27506  330F  3E07               	addlw	7
 27507  3310  31B3  2341         	fcall	_displayL1_Update
 27508  3312  0008               	return
 27509  3313                     __end_of_displayL2_ClrUserLeds:	
 27510                           
 27511                           	psect	text39
 27512  323D                     __ptext39:	
 27513 ;; *************** function _nullifyBadge_segDisplayErase *****************
 27514 ;; Defined at:
 27515 ;;		line 123 in file "nullifyBadge.c"
 27516 ;; Parameters:    Size  Location     Type
 27517 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 27518 ;;		 -> badge_inst(18), 
 27519 ;; Auto vars:     Size  Location     Type
 27520 ;;  badge           1   24[BANK0 ] PTR struct t_nullifyBadg
 27521 ;;		 -> badge_inst(18), 
 27522 ;; Return value:  Size  Location     Type
 27523 ;;                  1    wreg      void 
 27524 ;; Registers used:
 27525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27526 ;; Tracked objects:
 27527 ;;		On entry : 0/0
 27528 ;;		On exit  : 0/0
 27529 ;;		Unchanged: 0/0
 27530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27534 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27535 ;;Total ram usage:        1 bytes
 27536 ;; Hardware stack levels used:    1
 27537 ;; Hardware stack levels required when called:    9
 27538 ;; This function calls:
 27539 ;;		_displayL2_EraseSegDisplay
 27540 ;; This function is called by:
 27541 ;;		_menu_Init
 27542 ;;		_menu_clear
 27543 ;;		_menu_Exit
 27544 ;;		_flashy_Init
 27545 ;;		_flashy_Exit
 27546 ;;		_locked_Init
 27547 ;;		_locked_clear
 27548 ;;		_locked_Exit
 27549 ;;		_secret_Init
 27550 ;;		_secret_Exit
 27551 ;;		_slot_Init
 27552 ;;		_slot_Exit
 27553 ;;		_matrix_Init
 27554 ;;		_matrix_Exit
 27555 ;;		_fadeDisplay_Init
 27556 ;;		_fadeDisplay_Exit
 27557 ;; This function uses a non-reentrant model
 27558 ;;
 27559                           
 27560                           
 27561                           ;psect for function _nullifyBadge_segDisplayErase
 27562  323D                     _nullifyBadge_segDisplayErase:	
 27563                           
 27564                           ;incstack = 0
 27565                           ; Regs used in _nullifyBadge_segDisplayErase: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 27566                           ;nullifyBadge_segDisplayErase@badge stored from wreg
 27567  323D  0020               	movlb	0	; select bank0
 27568  323E  00B8               	movwf	nullifyBadge_segDisplayErase@badge
 27569                           
 27570                           ;nullifyBadge.c: 124: displayL2_EraseSegDisplay(&badge->display);
 27571  323F  0838               	movf	nullifyBadge_segDisplayErase@badge,w
 27572  3240  31B3  2331         	fcall	_displayL2_EraseSegDisplay
 27573  3242  0008               	return
 27574  3243                     __end_of_nullifyBadge_segDisplayErase:	
 27575                           
 27576                           	psect	text40
 27577  3331                     __ptext40:	
 27578 ;; *************** function _displayL2_EraseSegDisplay *****************
 27579 ;; Defined at:
 27580 ;;		line 83 in file "nullifyBadge_displayL2.c"
 27581 ;; Parameters:    Size  Location     Type
 27582 ;;  display         1    wreg     PTR struct t_nullifyDisp
 27583 ;;		 -> badge_inst(18), 
 27584 ;; Auto vars:     Size  Location     Type
 27585 ;;  display         1   23[BANK0 ] PTR struct t_nullifyDisp
 27586 ;;		 -> badge_inst(18), 
 27587 ;; Return value:  Size  Location     Type
 27588 ;;                  1    wreg      void 
 27589 ;; Registers used:
 27590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27591 ;; Tracked objects:
 27592 ;;		On entry : 0/0
 27593 ;;		On exit  : 0/0
 27594 ;;		Unchanged: 0/0
 27595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27597 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27599 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27600 ;;Total ram usage:        1 bytes
 27601 ;; Hardware stack levels used:    1
 27602 ;; Hardware stack levels required when called:    8
 27603 ;; This function calls:
 27604 ;;		_displayL1_Update
 27605 ;;		_displayL2_PutStr
 27606 ;; This function is called by:
 27607 ;;		_nullifyBadge_segDisplayErase
 27608 ;; This function uses a non-reentrant model
 27609 ;;
 27610                           
 27611                           
 27612                           ;psect for function _displayL2_EraseSegDisplay
 27613  3331                     _displayL2_EraseSegDisplay:	
 27614                           
 27615                           ;incstack = 0
 27616                           ; Regs used in _displayL2_EraseSegDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27617                           ;displayL2_EraseSegDisplay@display stored from wreg
 27618  3331  0020               	movlb	0	; select bank0
 27619  3332  00B7               	movwf	displayL2_EraseSegDisplay@display
 27620                           
 27621                           ;nullifyBadge_displayL2.c: 84: displayL2_PutStr(display, "    ");
 27622  3333  307D               	movlw	low ((STR_34+115)| (0+32768))
 27623  3334  00B0               	movwf	displayL2_PutStr@str
 27624  3335  30A8               	movlw	high ((STR_34+115)| (0+32768))
 27625  3336  00B1               	movwf	displayL2_PutStr@str+1
 27626  3337  0837               	movf	displayL2_EraseSegDisplay@display,w
 27627  3338  31B5  25C5  31B3   	fcall	_displayL2_PutStr
 27628                           
 27629                           ;nullifyBadge_displayL2.c: 85: displayL1_Update(&display->display_l1);
 27630  333B  0020               	movlb	0	; select bank0
 27631  333C  0837               	movf	displayL2_EraseSegDisplay@display,w
 27632  333D  3E07               	addlw	7
 27633  333E  31B3  2341         	fcall	_displayL1_Update
 27634  3340  0008               	return
 27635  3341                     __end_of_displayL2_EraseSegDisplay:	
 27636                           
 27637                           	psect	text41
 27638  19C2                     __ptext41:	
 27639 ;; *************** function _sprintf *****************
 27640 ;; Defined at:
 27641 ;;		line 492 in file "/Applications/microchip/xc8/v1.42/sources/common/doprnt.c"
 27642 ;; Parameters:    Size  Location     Type
 27643 ;;  sp              2   15[BANK0 ] PTR unsigned char 
 27644 ;;		 -> flashy_Main@hit_counter(6), matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), 
 27645 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 27646 ;;  f               2   17[BANK0 ] PTR const unsigned char 
 27647 ;;		 -> STR_69(3), STR_68(9), STR_67(9), STR_66(9), 
 27648 ;;		 -> STR_65(9), STR_64(9), STR_41(4), 
 27649 ;; Auto vars:     Size  Location     Type
 27650 ;;  tmpval          4    0        struct .
 27651 ;;  width           2   40[BANK0 ] int 
 27652 ;;  len             2   38[BANK0 ] unsigned int 
 27653 ;;  val             2   36[BANK0 ] unsigned int 
 27654 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
 27655 ;;		 -> STR_83(7), sprintf@c(1), STR_63(9), STR_62(13), 
 27656 ;;		 -> STR_61(12), STR_60(8), STR_59(11), STR_58(11), 
 27657 ;;		 -> STR_57(9), STR_56(8), STR_55(8), 
 27658 ;;  c               1   42[BANK0 ] char 
 27659 ;;  ap              1   35[BANK0 ] PTR void [1]
 27660 ;;		 -> ?_sprintf(2), 
 27661 ;;  flag            1   32[BANK0 ] unsigned char 
 27662 ;;  prec            1   31[BANK0 ] char 
 27663 ;; Return value:  Size  Location     Type
 27664 ;;                  2   15[BANK0 ] int 
 27665 ;; Registers used:
 27666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27667 ;; Tracked objects:
 27668 ;;		On entry : 0/0
 27669 ;;		On exit  : 0/0
 27670 ;;		Unchanged: 0/0
 27671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27672 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27673 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27674 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27675 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27676 ;;Total ram usage:       28 bytes
 27677 ;; Hardware stack levels used:    1
 27678 ;; Hardware stack levels required when called:    5
 27679 ;; This function calls:
 27680 ;;		___lwdiv
 27681 ;;		___lwmod
 27682 ;;		___wmul
 27683 ;;		_isdigit
 27684 ;; This function is called by:
 27685 ;;		_flashy_Main
 27686 ;;		_slot_Main
 27687 ;; This function uses a non-reentrant model
 27688 ;;
 27689                           
 27690                           
 27691                           ;psect for function _sprintf
 27692  19C2                     _sprintf:	
 27693                           
 27694                           ;doprnt.c: 494: va_list ap;
 27695                           ;doprnt.c: 499: signed char c;
 27696                           ;doprnt.c: 501: int width;
 27697                           ;doprnt.c: 506: signed char prec;
 27698                           ;doprnt.c: 508: unsigned char flag;
 27699                           ;doprnt.c: 523: union {
 27700                           ;doprnt.c: 524: unsigned long vd;
 27701                           ;doprnt.c: 525: double integ;
 27702                           ;doprnt.c: 526: } tmpval;
 27703                           ;doprnt.c: 528: unsigned int val;
 27704                           ;doprnt.c: 529: unsigned len;
 27705                           ;doprnt.c: 530: const char * cp;
 27706                           ;doprnt.c: 533: *ap = __va_start();
 27707                           
 27708                           ;incstack = 0
 27709                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27710  19C2  3033               	movlw	(low ((?_sprintf| 0+4)))& (0+255)
 27711  19C3  0020               	movlb	0	; select bank0
 27712  19C4  00BB               	movwf	??_sprintf
 27713  19C5  083B               	movf	??_sprintf,w
 27714  19C6  00C3               	movwf	sprintf@ap
 27715  19C7                     l8767:	
 27716                           ;doprnt.c: 536: while(c = *f++) {
 27717                           
 27718  19C7  0832               	movf	sprintf@f+1,w
 27719  19C8  00BC               	movwf	??_sprintf+1
 27720  19C9  0831               	movf	sprintf@f,w
 27721  19CA  00BB               	movwf	??_sprintf
 27722  19CB  0AB1               	incf	sprintf@f,f
 27723  19CC  1903               	skipnz
 27724  19CD  0AB2               	incf	sprintf@f+1,f
 27725  19CE  083B               	movf	??_sprintf,w
 27726  19CF  0084               	movwf	4
 27727  19D0  083C               	movf	??_sprintf+1,w
 27728  19D1  0085               	movwf	5
 27729  19D2  0800               	movf	0,w	;code access
 27730  19D3  00BD               	movwf	??_sprintf+2
 27731  19D4  083D               	movf	??_sprintf+2,w
 27732  19D5  00CA               	movwf	sprintf@c
 27733  19D6  084A               	movf	sprintf@c,w
 27734  19D7  1903               	btfsc	3,2
 27735  19D8  2B88               	goto	l8769
 27736                           
 27737                           ;doprnt.c: 538: if(c != '%')
 27738  19D9  3025               	movlw	37
 27739  19DA  064A               	xorwf	sprintf@c,w
 27740  19DB  1903               	btfsc	3,2
 27741  19DC  29E8               	goto	l8651
 27742                           
 27743                           ;doprnt.c: 540: {
 27744                           ;doprnt.c: 541: ((*sp++ = (c)));
 27745  19DD  082F               	movf	sprintf@sp,w
 27746  19DE  0086               	movwf	6
 27747  19DF  0830               	movf	sprintf@sp+1,w
 27748  19E0  0087               	movwf	7
 27749  19E1  084A               	movf	sprintf@c,w
 27750  19E2  0081               	movwf	1
 27751  19E3  3001               	movlw	1
 27752  19E4  07AF               	addwf	sprintf@sp,f
 27753  19E5  3000               	movlw	0
 27754  19E6  3DB0               	addwfc	sprintf@sp+1,f
 27755                           
 27756                           ;doprnt.c: 542: continue;
 27757  19E7  29C7               	goto	l8767
 27758  19E8                     l8651:	
 27759                           
 27760                           ;doprnt.c: 543: }
 27761                           ;doprnt.c: 546: width = 0;
 27762  19E8  01C8               	clrf	sprintf@width
 27763  19E9  01C9               	clrf	sprintf@width+1
 27764                           
 27765                           ;doprnt.c: 548: flag = 0;
 27766  19EA  01C0               	clrf	sprintf@flag
 27767                           
 27768                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 27769  19EB  0831               	movf	sprintf@f,w
 27770  19EC  0084               	movwf	4
 27771  19ED  0832               	movf	sprintf@f+1,w
 27772  19EE  0085               	movwf	5
 27773  19EF  0800               	movf	0,w	;code access
 27774  19F0  31B2  22F7  3199   	fcall	_isdigit
 27775  19F3  1C03               	btfss	3,0
 27776  19F4  2AA1               	goto	l8709
 27777                           
 27778                           ;doprnt.c: 598: width = 0;
 27779  19F5  0020               	movlb	0	; select bank0
 27780  19F6  01C8               	clrf	sprintf@width
 27781  19F7  01C9               	clrf	sprintf@width+1
 27782  19F8                     l8657:	
 27783                           ;doprnt.c: 599: do {
 27784                           
 27785                           
 27786                           ;doprnt.c: 600: width *= 10;
 27787  19F8  300A               	movlw	10
 27788  19F9  00F1               	movwf	___wmul@multiplier
 27789  19FA  3000               	movlw	0
 27790  19FB  00F2               	movwf	___wmul@multiplier+1
 27791  19FC  0020               	movlb	0	; select bank0
 27792  19FD  0849               	movf	sprintf@width+1,w
 27793  19FE  00F4               	movwf	___wmul@multiplicand+1
 27794  19FF  0848               	movf	sprintf@width,w
 27795  1A00  00F3               	movwf	___wmul@multiplicand
 27796  1A01  31B4  2447  3199   	fcall	___wmul
 27797  1A04  0872               	movf	?___wmul+1,w
 27798  1A05  0020               	movlb	0	; select bank0
 27799  1A06  00C9               	movwf	sprintf@width+1
 27800  1A07  0871               	movf	?___wmul,w
 27801  1A08  00C8               	movwf	sprintf@width
 27802                           
 27803                           ;doprnt.c: 601: width += *f++ - '0';
 27804  1A09  0831               	movf	sprintf@f,w
 27805  1A0A  0084               	movwf	4
 27806  1A0B  0832               	movf	sprintf@f+1,w
 27807  1A0C  0085               	movwf	5
 27808  1A0D  0800               	movf	0,w	;code access
 27809  1A0E  3ED0               	addlw	208
 27810  1A0F  00BB               	movwf	??_sprintf
 27811  1A10  30FF               	movlw	255
 27812  1A11  1803               	skipnc
 27813  1A12  3000               	movlw	0
 27814  1A13  00BC               	movwf	??_sprintf+1
 27815  1A14  083B               	movf	??_sprintf,w
 27816  1A15  07C8               	addwf	sprintf@width,f
 27817  1A16  083C               	movf	??_sprintf+1,w
 27818  1A17  3DC9               	addwfc	sprintf@width+1,f
 27819  1A18  3001               	movlw	1
 27820  1A19  07B1               	addwf	sprintf@f,f
 27821  1A1A  3000               	movlw	0
 27822  1A1B  3DB2               	addwfc	sprintf@f+1,f
 27823                           
 27824                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 27825  1A1C  0831               	movf	sprintf@f,w
 27826  1A1D  0084               	movwf	4
 27827  1A1E  0832               	movf	sprintf@f+1,w
 27828  1A1F  0085               	movwf	5
 27829  1A20  0800               	movf	0,w	;code access
 27830  1A21  31B2  22F7  3199   	fcall	_isdigit
 27831  1A24  1C03               	btfss	3,0
 27832  1A25  2AA1               	goto	l8709
 27833  1A26  29F8               	goto	l8657
 27834  1A27                     l8665:	
 27835                           ;doprnt.c: 728: case 's':
 27836                           
 27837                           ;doprnt.c: 698: case 'i':
 27838                           ;doprnt.c: 699: break;
 27839                           
 27840                           ;doprnt.c: 697: case 'd':
 27841                           
 27842                           ;doprnt.c: 638: goto alldone;
 27843                           
 27844                           ;doprnt.c: 637: case 0:
 27845                           
 27846                           ;doprnt.c: 608: }
 27847                           ;doprnt.c: 635: switch(c = *f++) {
 27848                           
 27849                           
 27850                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 27851  1A27  0020               	movlb	0	; select bank0
 27852  1A28  0843               	movf	sprintf@ap,w
 27853  1A29  0086               	movwf	6
 27854  1A2A  0187               	clrf	7
 27855  1A2B  3F40               	moviw [0]fsr1
 27856  1A2C  00C1               	movwf	sprintf@cp
 27857  1A2D  3F41               	moviw [1]fsr1
 27858  1A2E  00C2               	movwf	sprintf@cp+1
 27859  1A2F  3002               	movlw	2
 27860  1A30  00BB               	movwf	??_sprintf
 27861  1A31  083B               	movf	??_sprintf,w
 27862  1A32  07C3               	addwf	sprintf@ap,f
 27863                           
 27864                           ;doprnt.c: 740: if(!cp)
 27865  1A33  0841               	movf	sprintf@cp,w
 27866  1A34  0442               	iorwf	sprintf@cp+1,w
 27867  1A35  1D03               	btfss	3,2
 27868  1A36  2A3B               	goto	l8673
 27869                           
 27870                           ;doprnt.c: 741: cp = "(null)";
 27871  1A37  306E               	movlw	low (STR_83| (0+32768))
 27872  1A38  00C1               	movwf	sprintf@cp
 27873  1A39  30BB               	movlw	high (STR_83| (0+32768))
 27874  1A3A  00C2               	movwf	sprintf@cp+1
 27875  1A3B                     l8673:	
 27876                           
 27877                           ;doprnt.c: 745: len = 0;
 27878  1A3B  01C6               	clrf	sprintf@len
 27879  1A3C  01C7               	clrf	sprintf@len+1
 27880  1A3D                     l8677:	
 27881                           ;doprnt.c: 746: while(cp[len])
 27882                           
 27883  1A3D  0841               	movf	sprintf@cp,w
 27884  1A3E  0746               	addwf	sprintf@len,w
 27885  1A3F  0084               	movwf	4
 27886  1A40  0842               	movf	sprintf@cp+1,w
 27887  1A41  3D47               	addwfc	sprintf@len+1,w
 27888  1A42  0085               	movwf	5
 27889  1A43  0012               	moviw fsr0++
 27890  1A44  1903               	btfsc	3,2
 27891  1A45  2A4B               	goto	l8679
 27892                           
 27893                           ;doprnt.c: 747: len++;
 27894  1A46  3001               	movlw	1
 27895  1A47  07C6               	addwf	sprintf@len,f
 27896  1A48  3000               	movlw	0
 27897  1A49  3DC7               	addwfc	sprintf@len+1,f
 27898  1A4A  2A3D               	goto	l8677
 27899  1A4B                     l8679:	
 27900                           ;doprnt.c: 750: dostring:
 27901                           
 27902                           
 27903                           ;doprnt.c: 757: if(width > len)
 27904  1A4B  0849               	movf	sprintf@width+1,w
 27905  1A4C  0247               	subwf	sprintf@len+1,w
 27906  1A4D  1D03               	skipz
 27907  1A4E  2A51               	goto	u5265
 27908  1A4F  0848               	movf	sprintf@width,w
 27909  1A50  0246               	subwf	sprintf@len,w
 27910  1A51                     u5265:	
 27911  1A51  1803               	skipnc
 27912  1A52  2A58               	goto	l8683
 27913                           
 27914                           ;doprnt.c: 758: width -= len;
 27915  1A53  0846               	movf	sprintf@len,w
 27916  1A54  02C8               	subwf	sprintf@width,f
 27917  1A55  0847               	movf	sprintf@len+1,w
 27918  1A56  3BC9               	subwfb	sprintf@width+1,f
 27919  1A57  2A5A               	goto	l8689
 27920  1A58                     l8683:	
 27921                           
 27922                           ;doprnt.c: 759: else
 27923                           ;doprnt.c: 760: width = 0;
 27924  1A58  01C8               	clrf	sprintf@width
 27925  1A59  01C9               	clrf	sprintf@width+1
 27926  1A5A                     l8689:	
 27927                           ;doprnt.c: 764: while(width--)
 27928                           
 27929  1A5A  30FF               	movlw	255
 27930  1A5B  07C8               	addwf	sprintf@width,f
 27931  1A5C  30FF               	movlw	255
 27932  1A5D  3DC9               	addwfc	sprintf@width+1,f
 27933  1A5E  0A48               	incf	sprintf@width,w
 27934  1A5F  1903               	btfsc	3,2
 27935  1A60  0A49               	incf	sprintf@width+1,w
 27936  1A61  1903               	btfsc	3,2
 27937  1A62  2A82               	goto	l8697
 27938                           
 27939                           ;doprnt.c: 765: ((*sp++ = (' ')));
 27940  1A63  082F               	movf	sprintf@sp,w
 27941  1A64  0086               	movwf	6
 27942  1A65  0830               	movf	sprintf@sp+1,w
 27943  1A66  0087               	movwf	7
 27944  1A67  3020               	movlw	32
 27945  1A68  0081               	movwf	1
 27946  1A69  3001               	movlw	1
 27947  1A6A  07AF               	addwf	sprintf@sp,f
 27948  1A6B  3000               	movlw	0
 27949  1A6C  3DB0               	addwfc	sprintf@sp+1,f
 27950  1A6D  2A5A               	goto	l8689
 27951  1A6E                     l8691:	
 27952                           ;doprnt.c: 767: while(len--)
 27953                           
 27954                           
 27955                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 27956  1A6E  0841               	movf	sprintf@cp,w
 27957  1A6F  0084               	movwf	4
 27958  1A70  0842               	movf	sprintf@cp+1,w
 27959  1A71  0085               	movwf	5
 27960  1A72  0800               	movf	0,w	;code access
 27961  1A73  00BB               	movwf	??_sprintf
 27962  1A74  082F               	movf	sprintf@sp,w
 27963  1A75  0086               	movwf	6
 27964  1A76  0830               	movf	sprintf@sp+1,w
 27965  1A77  0087               	movwf	7
 27966  1A78  083B               	movf	??_sprintf,w
 27967  1A79  0081               	movwf	1
 27968  1A7A  3001               	movlw	1
 27969  1A7B  07C1               	addwf	sprintf@cp,f
 27970  1A7C  3000               	movlw	0
 27971  1A7D  3DC2               	addwfc	sprintf@cp+1,f
 27972  1A7E  3001               	movlw	1
 27973  1A7F  07AF               	addwf	sprintf@sp,f
 27974  1A80  3000               	movlw	0
 27975  1A81  3DB0               	addwfc	sprintf@sp+1,f
 27976  1A82                     l8697:	
 27977  1A82  3001               	movlw	1
 27978  1A83  02C6               	subwf	sprintf@len,f
 27979  1A84  3000               	movlw	0
 27980  1A85  3BC7               	subwfb	sprintf@len+1,f
 27981  1A86  0A46               	incf	sprintf@len,w
 27982  1A87  1D03               	skipz
 27983  1A88  2A6E               	goto	l8691
 27984  1A89  0A47               	incf	sprintf@len+1,w
 27985  1A8A  1903               	btfsc	3,2
 27986  1A8B  29C7               	goto	l8767
 27987  1A8C  2A6E               	goto	l8691
 27988  1A8D                     l8699:	
 27989                           ;doprnt.c: 784: case 'c':
 27990                           
 27991                           ;doprnt.c: 774: continue;
 27992                           
 27993                           
 27994                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 27995  1A8D  0843               	movf	sprintf@ap,w
 27996  1A8E  0086               	movwf	6
 27997  1A8F  0187               	clrf	7
 27998  1A90  0801               	movf	1,w
 27999  1A91  00BB               	movwf	??_sprintf
 28000  1A92  083B               	movf	??_sprintf,w
 28001  1A93  00CA               	movwf	sprintf@c
 28002  1A94  3002               	movlw	2
 28003  1A95  00BB               	movwf	??_sprintf
 28004  1A96  083B               	movf	??_sprintf,w
 28005  1A97  07C3               	addwf	sprintf@ap,f
 28006  1A98                     l8703:	
 28007                           ;doprnt.c: 802: default:
 28008                           
 28009                           
 28010                           ;doprnt.c: 805: cp = (char *)&c;
 28011  1A98  304A               	movlw	low sprintf@c
 28012  1A99  00C1               	movwf	sprintf@cp
 28013  1A9A  3000               	movlw	high sprintf@c
 28014  1A9B  00C2               	movwf	sprintf@cp+1
 28015                           
 28016                           ;doprnt.c: 806: len = 1;
 28017  1A9C  3001               	movlw	1
 28018  1A9D  00C6               	movwf	sprintf@len
 28019  1A9E  3000               	movlw	0
 28020  1A9F  00C7               	movwf	sprintf@len+1
 28021                           
 28022                           ;doprnt.c: 807: goto dostring;
 28023  1AA0  2A4B               	goto	l8679
 28024  1AA1                     l8709:	
 28025                           ;doprnt.c: 822: }
 28026                           
 28027  1AA1  0020               	movlb	0	; select bank0
 28028  1AA2  0832               	movf	sprintf@f+1,w
 28029  1AA3  00BC               	movwf	??_sprintf+1
 28030  1AA4  0831               	movf	sprintf@f,w
 28031  1AA5  00BB               	movwf	??_sprintf
 28032  1AA6  0AB1               	incf	sprintf@f,f
 28033  1AA7  1903               	skipnz
 28034  1AA8  0AB2               	incf	sprintf@f+1,f
 28035  1AA9  083B               	movf	??_sprintf,w
 28036  1AAA  0084               	movwf	4
 28037  1AAB  083C               	movf	??_sprintf+1,w
 28038  1AAC  0085               	movwf	5
 28039  1AAD  0800               	movf	0,w	;code access
 28040  1AAE  00CA               	movwf	sprintf@c
 28041                           
 28042                           ; Switch size 1, requested type "space"
 28043                           ; Number of cases is 5, Range of values is 0 to 115
 28044                           ; switch strategies available:
 28045                           ; Name         Instructions Cycles
 28046                           ; simple_byte           16     9 (average)
 28047                           ; direct_byte          238     6 (fixed)
 28048                           ; jumptable            260     6 (fixed)
 28049                           ;	Chosen strategy is simple_byte
 28050  1AAF  3A00               	xorlw	0	; case 0
 28051  1AB0  1903               	skipnz
 28052  1AB1  2B88               	goto	l8769
 28053  1AB2  3A63               	xorlw	99	; case 99
 28054  1AB3  1903               	skipnz
 28055  1AB4  2A8D               	goto	l8699
 28056  1AB5  3A07               	xorlw	7	; case 100
 28057  1AB6  1903               	skipnz
 28058  1AB7  2ABF               	goto	l8711
 28059  1AB8  3A0D               	xorlw	13	; case 105
 28060  1AB9  1903               	skipnz
 28061  1ABA  2ABF               	goto	l8711
 28062  1ABB  3A1A               	xorlw	26	; case 115
 28063  1ABC  1903               	skipnz
 28064  1ABD  2A27               	goto	l8665
 28065  1ABE  2A98               	goto	l8703
 28066  1ABF                     l8711:	
 28067                           
 28068                           ;doprnt.c: 1253: {
 28069                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 28070  1ABF  0020               	movlb	0	; select bank0
 28071  1AC0  0843               	movf	sprintf@ap,w
 28072  1AC1  0086               	movwf	6
 28073  1AC2  0187               	clrf	7
 28074  1AC3  3F40               	moviw [0]fsr1
 28075  1AC4  00C4               	movwf	sprintf@val
 28076  1AC5  3F41               	moviw [1]fsr1
 28077  1AC6  00C5               	movwf	sprintf@val+1
 28078  1AC7  3002               	movlw	2
 28079  1AC8  00BB               	movwf	??_sprintf
 28080  1AC9  083B               	movf	??_sprintf,w
 28081  1ACA  07C3               	addwf	sprintf@ap,f
 28082                           
 28083                           ;doprnt.c: 1261: if((int)val < 0) {
 28084  1ACB  1FC5               	btfss	sprintf@val+1,7
 28085  1ACC  2AD6               	goto	l8721
 28086                           
 28087                           ;doprnt.c: 1262: flag |= 0x03;
 28088  1ACD  3003               	movlw	3
 28089  1ACE  00BB               	movwf	??_sprintf
 28090  1ACF  083B               	movf	??_sprintf,w
 28091  1AD0  04C0               	iorwf	sprintf@flag,f
 28092                           
 28093                           ;doprnt.c: 1263: val = -val;
 28094  1AD1  09C4               	comf	sprintf@val,f
 28095  1AD2  09C5               	comf	sprintf@val+1,f
 28096  1AD3  0AC4               	incf	sprintf@val,f
 28097  1AD4  1903               	skipnz
 28098  1AD5  0AC5               	incf	sprintf@val+1,f
 28099  1AD6                     l8721:	
 28100                           
 28101                           ;doprnt.c: 1264: }
 28102                           ;doprnt.c: 1266: }
 28103                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 28104  1AD6  01CA               	clrf	sprintf@c
 28105  1AD7  0ACA               	incf	sprintf@c,f
 28106  1AD8  3005               	movlw	5
 28107  1AD9  064A               	xorwf	sprintf@c,w
 28108  1ADA  1903               	btfsc	3,2
 28109  1ADB  2AFB               	goto	l8733
 28110  1ADC                     l8727:	
 28111                           
 28112                           ;doprnt.c: 1306: if(val < dpowers[c])
 28113  1ADC  084A               	movf	sprintf@c,w
 28114  1ADD  00BB               	movwf	??_sprintf
 28115  1ADE  01BC               	clrf	??_sprintf+1
 28116  1ADF  35BB               	lslf	??_sprintf,f
 28117  1AE0  0DBC               	rlf	??_sprintf+1,f
 28118  1AE1  3000               	movlw	low (_dpowers| (0+32768))
 28119  1AE2  073B               	addwf	??_sprintf,w
 28120  1AE3  0084               	movwf	4
 28121  1AE4  30A8               	movlw	high (_dpowers| (0+32768))
 28122  1AE5  3D3C               	addwfc	??_sprintf+1,w
 28123  1AE6  0085               	movwf	5
 28124  1AE7  3F00               	moviw [0]fsr0
 28125  1AE8  00BD               	movwf	??_sprintf+2
 28126  1AE9  3F01               	moviw [1]fsr0
 28127  1AEA  00BE               	movwf	??_sprintf+3
 28128  1AEB  083E               	movf	??_sprintf+3,w
 28129  1AEC  0245               	subwf	sprintf@val+1,w
 28130  1AED  1D03               	skipz
 28131  1AEE  2AF1               	goto	u5315
 28132  1AEF  083D               	movf	??_sprintf+2,w
 28133  1AF0  0244               	subwf	sprintf@val,w
 28134  1AF1                     u5315:	
 28135  1AF1  1C03               	btfss	3,0
 28136  1AF2  2AFB               	goto	l8733
 28137                           
 28138                           ;doprnt.c: 1307: break;
 28139  1AF3  3001               	movlw	1
 28140  1AF4  00BB               	movwf	??_sprintf
 28141  1AF5  083B               	movf	??_sprintf,w
 28142  1AF6  07CA               	addwf	sprintf@c,f
 28143  1AF7  3005               	movlw	5
 28144  1AF8  064A               	xorwf	sprintf@c,w
 28145  1AF9  1D03               	btfss	3,2
 28146  1AFA  2ADC               	goto	l8727
 28147  1AFB                     l8733:	
 28148                           
 28149                           ;doprnt.c: 1345: if(width && flag & 0x03)
 28150  1AFB  0848               	movf	sprintf@width,w
 28151  1AFC  0449               	iorwf	sprintf@width+1,w
 28152  1AFD  1903               	btfsc	3,2
 28153  1AFE  2B07               	goto	l1611
 28154  1AFF  0840               	movf	sprintf@flag,w
 28155  1B00  3903               	andlw	3
 28156  1B01  1903               	btfsc	3,2
 28157  1B02  2B07               	goto	l1611
 28158                           
 28159                           ;doprnt.c: 1346: width--;
 28160  1B03  30FF               	movlw	255
 28161  1B04  07C8               	addwf	sprintf@width,f
 28162  1B05  30FF               	movlw	255
 28163  1B06  3DC9               	addwfc	sprintf@width+1,f
 28164  1B07                     l1611:	
 28165                           
 28166                           ;doprnt.c: 1381: if(width > c)
 28167  1B07  084A               	movf	sprintf@c,w
 28168  1B08  00BB               	movwf	??_sprintf
 28169  1B09  01BC               	clrf	??_sprintf+1
 28170  1B0A  1BBB               	btfsc	??_sprintf,7
 28171  1B0B  03BC               	decf	??_sprintf+1,f
 28172  1B0C  083C               	movf	??_sprintf+1,w
 28173  1B0D  3A80               	xorlw	128
 28174  1B0E  00BD               	movwf	??_sprintf+2
 28175  1B0F  0849               	movf	sprintf@width+1,w
 28176  1B10  3A80               	xorlw	128
 28177  1B11  023D               	subwf	??_sprintf+2,w
 28178  1B12  1D03               	skipz
 28179  1B13  2B16               	goto	u5355
 28180  1B14  0848               	movf	sprintf@width,w
 28181  1B15  023B               	subwf	??_sprintf,w
 28182  1B16                     u5355:	
 28183  1B16  1803               	skipnc
 28184  1B17  2B23               	goto	l8741
 28185                           
 28186                           ;doprnt.c: 1382: width -= c;
 28187  1B18  0020               	movlb	0	; select bank0
 28188  1B19  084A               	movf	sprintf@c,w
 28189  1B1A  00BB               	movwf	??_sprintf
 28190  1B1B  01BC               	clrf	??_sprintf+1
 28191  1B1C  1BBB               	btfsc	??_sprintf,7
 28192  1B1D  03BC               	decf	??_sprintf+1,f
 28193  1B1E  083B               	movf	??_sprintf,w
 28194  1B1F  02C8               	subwf	sprintf@width,f
 28195  1B20  083C               	movf	??_sprintf+1,w
 28196  1B21  3BC9               	subwfb	sprintf@width+1,f
 28197  1B22  2B26               	goto	l8743
 28198  1B23                     l8741:	
 28199                           
 28200                           ;doprnt.c: 1383: else
 28201                           ;doprnt.c: 1384: width = 0;
 28202  1B23  0020               	movlb	0	; select bank0
 28203  1B24  01C8               	clrf	sprintf@width
 28204  1B25  01C9               	clrf	sprintf@width+1
 28205  1B26                     l8743:	
 28206                           
 28207                           ;doprnt.c: 1422: {
 28208                           ;doprnt.c: 1424: if(width
 28209                           ;doprnt.c: 1428: )
 28210  1B26  0848               	movf	sprintf@width,w
 28211  1B27  0449               	iorwf	sprintf@width+1,w
 28212  1B28  1903               	btfsc	3,2
 28213  1B29  2B3C               	goto	l8751
 28214  1B2A                     l8745:	
 28215                           ;doprnt.c: 1429: do
 28216                           
 28217                           
 28218                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 28219  1B2A  082F               	movf	sprintf@sp,w
 28220  1B2B  0086               	movwf	6
 28221  1B2C  0830               	movf	sprintf@sp+1,w
 28222  1B2D  0087               	movwf	7
 28223  1B2E  3020               	movlw	32
 28224  1B2F  0081               	movwf	1
 28225  1B30  3001               	movlw	1
 28226  1B31  07AF               	addwf	sprintf@sp,f
 28227  1B32  3000               	movlw	0
 28228  1B33  3DB0               	addwfc	sprintf@sp+1,f
 28229                           
 28230                           ;doprnt.c: 1431: while(--width);
 28231  1B34  30FF               	movlw	255
 28232  1B35  07C8               	addwf	sprintf@width,f
 28233  1B36  30FF               	movlw	255
 28234  1B37  3DC9               	addwfc	sprintf@width+1,f
 28235  1B38  0848               	movf	sprintf@width,w
 28236  1B39  0449               	iorwf	sprintf@width+1,w
 28237  1B3A  1D03               	btfss	3,2
 28238  1B3B  2B2A               	goto	l8745
 28239  1B3C                     l8751:	
 28240                           
 28241                           ;doprnt.c: 1438: if(flag & 0x03)
 28242  1B3C  0840               	movf	sprintf@flag,w
 28243  1B3D  3903               	andlw	3
 28244  1B3E  1903               	btfsc	3,2
 28245  1B3F  2B4A               	goto	l8757
 28246                           
 28247                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 28248  1B40  082F               	movf	sprintf@sp,w
 28249  1B41  0086               	movwf	6
 28250  1B42  0830               	movf	sprintf@sp+1,w
 28251  1B43  0087               	movwf	7
 28252  1B44  302D               	movlw	45
 28253  1B45  0081               	movwf	1
 28254  1B46  3001               	movlw	1
 28255  1B47  07AF               	addwf	sprintf@sp,f
 28256  1B48  3000               	movlw	0
 28257  1B49  3DB0               	addwfc	sprintf@sp+1,f
 28258  1B4A                     l8757:	
 28259                           
 28260                           ;doprnt.c: 1469: }
 28261                           ;doprnt.c: 1472: prec = c;
 28262  1B4A  084A               	movf	sprintf@c,w
 28263  1B4B  00BB               	movwf	??_sprintf
 28264  1B4C  083B               	movf	??_sprintf,w
 28265  1B4D  00BF               	movwf	sprintf@prec
 28266  1B4E                     l8765:	
 28267                           ;doprnt.c: 1474: while(prec--) {
 28268                           
 28269  1B4E  30FF               	movlw	255
 28270  1B4F  00BB               	movwf	??_sprintf
 28271  1B50  083B               	movf	??_sprintf,w
 28272  1B51  07BF               	addwf	sprintf@prec,f
 28273  1B52  0A3F               	incf	sprintf@prec,w
 28274  1B53  1903               	btfsc	3,2
 28275  1B54  29C7               	goto	l8767
 28276                           
 28277                           ;doprnt.c: 1478: {
 28278                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 28279  1B55  300A               	movlw	10
 28280  1B56  00AB               	movwf	___lwmod@divisor
 28281  1B57  3000               	movlw	0
 28282  1B58  00AC               	movwf	___lwmod@divisor+1
 28283  1B59  083F               	movf	sprintf@prec,w
 28284  1B5A  00BB               	movwf	??_sprintf
 28285  1B5B  01BC               	clrf	??_sprintf+1
 28286  1B5C  35BB               	lslf	??_sprintf,f
 28287  1B5D  0DBC               	rlf	??_sprintf+1,f
 28288  1B5E  3000               	movlw	low (_dpowers| (0+32768))
 28289  1B5F  073B               	addwf	??_sprintf,w
 28290  1B60  0084               	movwf	4
 28291  1B61  30A8               	movlw	high (_dpowers| (0+32768))
 28292  1B62  3D3C               	addwfc	??_sprintf+1,w
 28293  1B63  0085               	movwf	5
 28294  1B64  3F00               	moviw [0]fsr0
 28295  1B65  00F1               	movwf	___lwdiv@divisor
 28296  1B66  3F01               	moviw [1]fsr0
 28297  1B67  00F2               	movwf	___lwdiv@divisor+1
 28298  1B68  0845               	movf	sprintf@val+1,w
 28299  1B69  00F4               	movwf	___lwdiv@dividend+1
 28300  1B6A  0844               	movf	sprintf@val,w
 28301  1B6B  00F3               	movwf	___lwdiv@dividend
 28302  1B6C  31B6  26E0  3199   	fcall	___lwdiv
 28303  1B6F  0872               	movf	?___lwdiv+1,w
 28304  1B70  0020               	movlb	0	; select bank0
 28305  1B71  00AE               	movwf	___lwmod@dividend+1
 28306  1B72  0871               	movf	?___lwdiv,w
 28307  1B73  00AD               	movwf	___lwmod@dividend
 28308  1B74  31B5  25EF  3199   	fcall	___lwmod
 28309  1B77  0020               	movlb	0	; select bank0
 28310  1B78  082B               	movf	?___lwmod,w
 28311  1B79  3E30               	addlw	48
 28312  1B7A  00BD               	movwf	??_sprintf+2
 28313  1B7B  083D               	movf	??_sprintf+2,w
 28314  1B7C  00CA               	movwf	sprintf@c
 28315                           
 28316                           ;doprnt.c: 1523: }
 28317                           ;doprnt.c: 1524: ((*sp++ = (c)));
 28318  1B7D  082F               	movf	sprintf@sp,w
 28319  1B7E  0086               	movwf	6
 28320  1B7F  0830               	movf	sprintf@sp+1,w
 28321  1B80  0087               	movwf	7
 28322  1B81  084A               	movf	sprintf@c,w
 28323  1B82  0081               	movwf	1
 28324  1B83  3001               	movlw	1
 28325  1B84  07AF               	addwf	sprintf@sp,f
 28326  1B85  3000               	movlw	0
 28327  1B86  3DB0               	addwfc	sprintf@sp+1,f
 28328  1B87  2B4E               	goto	l8765
 28329  1B88                     l8769:	
 28330                           ;doprnt.c: 1525: }
 28331                           ;doprnt.c: 1533: }
 28332                           ;doprnt.c: 1535: alldone:
 28333                           
 28334                           
 28335                           ;doprnt.c: 1538: *sp = 0;
 28336  1B88  0020               	movlb	0	; select bank0
 28337  1B89  082F               	movf	sprintf@sp,w
 28338  1B8A  0086               	movwf	6
 28339  1B8B  0830               	movf	sprintf@sp+1,w
 28340  1B8C  0087               	movwf	7
 28341  1B8D  0181               	clrf	1
 28342  1B8E  0008               	return
 28343  1B8F                     __end_of_sprintf:	
 28344                           ;doprnt.c: 1540: return 0;
 28345                           ;	Return value of _sprintf is never used
 28346                           
 28347                           
 28348                           	psect	text42
 28349  32F7                     __ptext42:	
 28350 ;; *************** function _isdigit *****************
 28351 ;; Defined at:
 28352 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/isdigit.c"
 28353 ;; Parameters:    Size  Location     Type
 28354 ;;  c               1    wreg     unsigned char 
 28355 ;; Auto vars:     Size  Location     Type
 28356 ;;  c               1    2[COMMON] unsigned char 
 28357 ;; Return value:  Size  Location     Type
 28358 ;;		None               void
 28359 ;; Registers used:
 28360 ;;		wreg, status,2, status,0
 28361 ;; Tracked objects:
 28362 ;;		On entry : 0/0
 28363 ;;		On exit  : 0/0
 28364 ;;		Unchanged: 0/0
 28365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28370 ;;Total ram usage:        2 bytes
 28371 ;; Hardware stack levels used:    1
 28372 ;; Hardware stack levels required when called:    4
 28373 ;; This function calls:
 28374 ;;		Nothing
 28375 ;; This function is called by:
 28376 ;;		_sprintf
 28377 ;; This function uses a non-reentrant model
 28378 ;;
 28379                           
 28380                           
 28381                           ;psect for function _isdigit
 28382  32F7                     _isdigit:	
 28383                           
 28384                           ;incstack = 0
 28385                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 28386                           ;isdigit@c stored from wreg
 28387  32F7  00F2               	movwf	isdigit@c
 28388  32F8  01F1               	clrf	_isdigit$3635
 28389  32F9  303A               	movlw	58
 28390  32FA  0272               	subwf	isdigit@c,w
 28391  32FB  1803               	skipnc
 28392  32FC  2B03               	goto	l8485
 28393  32FD  3030               	movlw	48
 28394  32FE  0272               	subwf	isdigit@c,w
 28395  32FF  1C03               	skipc
 28396  3300  2B03               	goto	l8485
 28397  3301  01F1               	clrf	_isdigit$3635
 28398  3302  0AF1               	incf	_isdigit$3635,f
 28399  3303                     l8485:	
 28400  3303  0C71               	rrf	_isdigit$3635,w
 28401  3304  0008               	return
 28402  3305                     __end_of_isdigit:	
 28403                           
 28404                           	psect	text43
 28405  3447                     __ptext43:	
 28406 ;; *************** function ___wmul *****************
 28407 ;; Defined at:
 28408 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
 28409 ;; Parameters:    Size  Location     Type
 28410 ;;  multiplier      2    1[COMMON] unsigned int 
 28411 ;;  multiplicand    2    3[COMMON] unsigned int 
 28412 ;; Auto vars:     Size  Location     Type
 28413 ;;  product         2    5[COMMON] unsigned int 
 28414 ;; Return value:  Size  Location     Type
 28415 ;;                  2    1[COMMON] unsigned int 
 28416 ;; Registers used:
 28417 ;;		wreg, status,2, status,0
 28418 ;; Tracked objects:
 28419 ;;		On entry : 0/0
 28420 ;;		On exit  : 0/0
 28421 ;;		Unchanged: 0/0
 28422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28423 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28426 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28427 ;;Total ram usage:        6 bytes
 28428 ;; Hardware stack levels used:    1
 28429 ;; Hardware stack levels required when called:    4
 28430 ;; This function calls:
 28431 ;;		Nothing
 28432 ;; This function is called by:
 28433 ;;		_locked_secret_check
 28434 ;;		_secret_check
 28435 ;;		_matrix_secret_check
 28436 ;;		_sprintf
 28437 ;; This function uses a non-reentrant model
 28438 ;;
 28439                           
 28440                           
 28441                           ;psect for function ___wmul
 28442  3447                     ___wmul:	
 28443                           
 28444                           ;incstack = 0
 28445                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 28446  3447  01F5               	clrf	___wmul@product
 28447  3448  01F6               	clrf	___wmul@product+1
 28448  3449                     l8491:	
 28449  3449  1C71               	btfss	___wmul@multiplier,0
 28450  344A  2C4F               	goto	l1704
 28451  344B  0873               	movf	___wmul@multiplicand,w
 28452  344C  07F5               	addwf	___wmul@product,f
 28453  344D  0874               	movf	___wmul@multiplicand+1,w
 28454  344E  3DF6               	addwfc	___wmul@product+1,f
 28455  344F                     l1704:	
 28456  344F  3001               	movlw	1
 28457  3450                     u5065:	
 28458  3450  35F3               	lslf	___wmul@multiplicand,f
 28459  3451  0DF4               	rlf	___wmul@multiplicand+1,f
 28460  3452  0B89               	decfsz	9,f
 28461  3453  2C50               	goto	u5065
 28462  3454  3001               	movlw	1
 28463  3455                     u5075:	
 28464  3455  36F2               	lsrf	___wmul@multiplier+1,f
 28465  3456  0CF1               	rrf	___wmul@multiplier,f
 28466  3457  0B89               	decfsz	9,f
 28467  3458  2C55               	goto	u5075
 28468  3459  0871               	movf	___wmul@multiplier,w
 28469  345A  0472               	iorwf	___wmul@multiplier+1,w
 28470  345B  1D03               	btfss	3,2
 28471  345C  2C49               	goto	l8491
 28472  345D  0876               	movf	___wmul@product+1,w
 28473  345E  00F2               	movwf	?___wmul+1
 28474  345F  0875               	movf	___wmul@product,w
 28475  3460  00F1               	movwf	?___wmul
 28476  3461  0008               	return
 28477  3462                     __end_of___wmul:	
 28478                           
 28479                           	psect	text44
 28480  3224                     __ptext44:	
 28481 ;; *************** function _nullifyBadge_irTxSet *****************
 28482 ;; Defined at:
 28483 ;;		line 264 in file "nullifyBadge.c"
 28484 ;; Parameters:    Size  Location     Type
 28485 ;;		None
 28486 ;; Auto vars:     Size  Location     Type
 28487 ;;		None
 28488 ;; Return value:  Size  Location     Type
 28489 ;;                  1    wreg      void 
 28490 ;; Registers used:
 28491 ;;		None
 28492 ;; Tracked objects:
 28493 ;;		On entry : 0/0
 28494 ;;		On exit  : 0/0
 28495 ;;		Unchanged: 0/0
 28496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28501 ;;Total ram usage:        0 bytes
 28502 ;; Hardware stack levels used:    1
 28503 ;; Hardware stack levels required when called:    4
 28504 ;; This function calls:
 28505 ;;		Nothing
 28506 ;; This function is called by:
 28507 ;;		_flashy_Main
 28508 ;; This function uses a non-reentrant model
 28509 ;;
 28510                           
 28511                           
 28512                           ;psect for function _nullifyBadge_irTxSet
 28513  3224                     _nullifyBadge_irTxSet:	
 28514                           
 28515                           ;incstack = 0
 28516                           ; Regs used in _nullifyBadge_irTxSet: []
 28517                           ;nullifyBadge.c: 266: do { LATBbits.LATB7 = 0; } while(0);
 28518  3224  0022               	movlb	2	; select bank2
 28519  3225  138D               	bcf	13,7	;volatile
 28520  3226  0008               	return
 28521  3227                     __end_of_nullifyBadge_irTxSet:	
 28522                           
 28523                           	psect	text45
 28524  32AF                     __ptext45:	
 28525 ;; *************** function _nullifyBadge_irTxRelease *****************
 28526 ;; Defined at:
 28527 ;;		line 254 in file "nullifyBadge.c"
 28528 ;; Parameters:    Size  Location     Type
 28529 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 28530 ;;		 -> badge_inst(18), 
 28531 ;; Auto vars:     Size  Location     Type
 28532 ;;  badge           1    2[COMMON] PTR struct t_nullifyBadg
 28533 ;;		 -> badge_inst(18), 
 28534 ;; Return value:  Size  Location     Type
 28535 ;;                  1    wreg      void 
 28536 ;; Registers used:
 28537 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28538 ;; Tracked objects:
 28539 ;;		On entry : 0/0
 28540 ;;		On exit  : 0/0
 28541 ;;		Unchanged: 0/0
 28542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28544 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28545 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28546 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28547 ;;Total ram usage:        2 bytes
 28548 ;; Hardware stack levels used:    1
 28549 ;; Hardware stack levels required when called:    4
 28550 ;; This function calls:
 28551 ;;		Nothing
 28552 ;; This function is called by:
 28553 ;;		_flashy_Main
 28554 ;; This function uses a non-reentrant model
 28555 ;;
 28556                           
 28557                           
 28558                           ;psect for function _nullifyBadge_irTxRelease
 28559  32AF                     _nullifyBadge_irTxRelease:	
 28560                           
 28561                           ;incstack = 0
 28562                           ; Regs used in _nullifyBadge_irTxRelease: [wreg+fsr1l+fsr1h+status,2+status,0]
 28563                           ;nullifyBadge_irTxRelease@badge stored from wreg
 28564  32AF  00F2               	movwf	nullifyBadge_irTxRelease@badge
 28565                           
 28566                           ;nullifyBadge.c: 255: badge->registeredHw &= ~(1 << HW_IR_TX);
 28567  32B0  30FB               	movlw	251
 28568  32B1  00F1               	movwf	??_nullifyBadge_irTxRelease
 28569  32B2  0872               	movf	nullifyBadge_irTxRelease@badge,w
 28570  32B3  3E11               	addlw	17
 28571  32B4  0086               	movwf	6
 28572  32B5  3001               	movlw	1	; select bank2/3
 28573  32B6  0087               	movwf	7
 28574  32B7  0871               	movf	??_nullifyBadge_irTxRelease,w
 28575  32B8  0581               	andwf	1,f
 28576  32B9  0008               	return
 28577  32BA                     __end_of_nullifyBadge_irTxRelease:	
 28578                           
 28579                           	psect	text46
 28580  3313                     __ptext46:	
 28581 ;; *************** function _nullifyBadge_irTxRegister *****************
 28582 ;; Defined at:
 28583 ;;		line 242 in file "nullifyBadge.c"
 28584 ;; Parameters:    Size  Location     Type
 28585 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 28586 ;;		 -> badge_inst(18), 
 28587 ;; Auto vars:     Size  Location     Type
 28588 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 28589 ;;		 -> badge_inst(18), 
 28590 ;; Return value:  Size  Location     Type
 28591 ;;                  1    wreg      char 
 28592 ;; Registers used:
 28593 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28594 ;; Tracked objects:
 28595 ;;		On entry : 0/0
 28596 ;;		On exit  : 0/0
 28597 ;;		Unchanged: 0/0
 28598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28600 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28602 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28603 ;;Total ram usage:        1 bytes
 28604 ;; Hardware stack levels used:    1
 28605 ;; Hardware stack levels required when called:    4
 28606 ;; This function calls:
 28607 ;;		Nothing
 28608 ;; This function is called by:
 28609 ;;		_flashy_Main
 28610 ;; This function uses a non-reentrant model
 28611 ;;
 28612                           
 28613                           
 28614                           ;psect for function _nullifyBadge_irTxRegister
 28615  3313                     _nullifyBadge_irTxRegister:	
 28616                           
 28617                           ;incstack = 0
 28618                           ; Regs used in _nullifyBadge_irTxRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 28619                           ;nullifyBadge_irTxRegister@badge stored from wreg
 28620  3313  00F1               	movwf	nullifyBadge_irTxRegister@badge
 28621                           
 28622                           ;nullifyBadge.c: 243: if (badge->registeredHw & HW_IR_TX) {
 28623  3314  0871               	movf	nullifyBadge_irTxRegister@badge,w
 28624  3315  3E11               	addlw	17
 28625  3316  0086               	movwf	6
 28626  3317  3001               	movlw	1	; select bank2/3
 28627  3318  0087               	movwf	7
 28628  3319  1881               	btfsc	1,1
 28629  331A  0008               	return
 28630                           
 28631                           ;nullifyBadge.c: 246: else {
 28632                           ;nullifyBadge.c: 247: badge->registeredHw |= (1 << HW_IR_TX);
 28633                           
 28634                           ;nullifyBadge.c: 245: }
 28635                           
 28636                           ;nullifyBadge.c: 244: return -1;
 28637                           ;	Return value of _nullifyBadge_irTxRegister is never used
 28638  331B  0871               	movf	nullifyBadge_irTxRegister@badge,w
 28639  331C  3E11               	addlw	17
 28640  331D  0086               	movwf	6
 28641  331E  3001               	movlw	1	; select bank2/3
 28642  331F  0087               	movwf	7
 28643  3320  1501               	bsf	1,2
 28644                           
 28645                           ;nullifyBadge.c: 248: return 0;
 28646                           ;	Return value of _nullifyBadge_irTxRegister is never used
 28647  3321  0008               	return
 28648  3322                     __end_of_nullifyBadge_irTxRegister:	
 28649                           
 28650                           	psect	text47
 28651  3221                     __ptext47:	
 28652 ;; *************** function _nullifyBadge_irTxClr *****************
 28653 ;; Defined at:
 28654 ;;		line 270 in file "nullifyBadge.c"
 28655 ;; Parameters:    Size  Location     Type
 28656 ;;		None
 28657 ;; Auto vars:     Size  Location     Type
 28658 ;;		None
 28659 ;; Return value:  Size  Location     Type
 28660 ;;                  1    wreg      void 
 28661 ;; Registers used:
 28662 ;;		None
 28663 ;; Tracked objects:
 28664 ;;		On entry : 0/0
 28665 ;;		On exit  : 0/0
 28666 ;;		Unchanged: 0/0
 28667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28672 ;;Total ram usage:        0 bytes
 28673 ;; Hardware stack levels used:    1
 28674 ;; Hardware stack levels required when called:    4
 28675 ;; This function calls:
 28676 ;;		Nothing
 28677 ;; This function is called by:
 28678 ;;		_flashy_Main
 28679 ;; This function uses a non-reentrant model
 28680 ;;
 28681                           
 28682                           
 28683                           ;psect for function _nullifyBadge_irTxClr
 28684  3221                     _nullifyBadge_irTxClr:	
 28685                           
 28686                           ;incstack = 0
 28687                           ; Regs used in _nullifyBadge_irTxClr: []
 28688                           ;nullifyBadge.c: 272: do { LATBbits.LATB7 = 1; } while(0);
 28689  3221  0022               	movlb	2	; select bank2
 28690  3222  178D               	bsf	13,7	;volatile
 28691  3223  0008               	return
 28692  3224                     __end_of_nullifyBadge_irTxClr:	
 28693                           
 28694                           	psect	text48
 28695  1800                     __ptext48:	
 28696 ;; *************** function _nullifyBadge_irGet *****************
 28697 ;; Defined at:
 28698 ;;		line 232 in file "nullifyBadge.c"
 28699 ;; Parameters:    Size  Location     Type
 28700 ;;		None
 28701 ;; Auto vars:     Size  Location     Type
 28702 ;;		None
 28703 ;; Return value:  Size  Location     Type
 28704 ;;                  1    wreg      unsigned char 
 28705 ;; Registers used:
 28706 ;;		wreg, status,2, status,0
 28707 ;; Tracked objects:
 28708 ;;		On entry : 0/0
 28709 ;;		On exit  : 0/0
 28710 ;;		Unchanged: 0/0
 28711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28716 ;;Total ram usage:        0 bytes
 28717 ;; Hardware stack levels used:    1
 28718 ;; Hardware stack levels required when called:    4
 28719 ;; This function calls:
 28720 ;;		Nothing
 28721 ;; This function is called by:
 28722 ;;		_flashy_Main
 28723 ;; This function uses a non-reentrant model
 28724 ;;
 28725                           
 28726                           
 28727                           ;psect for function _nullifyBadge_irGet
 28728  1800                     _nullifyBadge_irGet:	
 28729                           
 28730                           ;nullifyBadge.c: 233: return PORTBbits.RB5;
 28731                           
 28732                           ;incstack = 0
 28733                           ; Regs used in _nullifyBadge_irGet: [wreg+status,2+status,0]
 28734  1800  0020               	movlb	0	; select bank0
 28735  1801  0E0D               	swapf	13,w	;volatile
 28736  1802  0C89               	rrf	9,f
 28737  1803  3901               	andlw	1
 28738  1804  0008               	return
 28739  1805                     __end_of_nullifyBadge_irGet:	
 28740                           
 28741                           	psect	text49
 28742  364B                     __ptext49:	
 28743 ;; *************** function _nullifyBadge_buttonsGet *****************
 28744 ;; Defined at:
 28745 ;;		line 187 in file "nullifyBadge.c"
 28746 ;; Parameters:    Size  Location     Type
 28747 ;;		None
 28748 ;; Auto vars:     Size  Location     Type
 28749 ;;  retVal          1    3[COMMON] unsigned char 
 28750 ;; Return value:  Size  Location     Type
 28751 ;;                  1    wreg      unsigned char 
 28752 ;; Registers used:
 28753 ;;		wreg, status,2, status,0
 28754 ;; Tracked objects:
 28755 ;;		On entry : 0/0
 28756 ;;		On exit  : 0/0
 28757 ;;		Unchanged: 0/0
 28758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28760 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28761 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28762 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28763 ;;Total ram usage:        3 bytes
 28764 ;; Hardware stack levels used:    1
 28765 ;; Hardware stack levels required when called:    4
 28766 ;; This function calls:
 28767 ;;		Nothing
 28768 ;; This function is called by:
 28769 ;;		_menu_Main
 28770 ;;		_flashy_Main
 28771 ;;		_locked_Main
 28772 ;;		_secret_Main
 28773 ;;		_slot_Main
 28774 ;;		_matrix_Main
 28775 ;; This function uses a non-reentrant model
 28776 ;;
 28777                           
 28778                           
 28779                           ;psect for function _nullifyBadge_buttonsGet
 28780  364B                     _nullifyBadge_buttonsGet:	
 28781                           
 28782                           ;nullifyBadge.c: 188: u8 retVal = 0x0F;
 28783                           
 28784                           ;incstack = 0
 28785                           ; Regs used in _nullifyBadge_buttonsGet: [wreg+status,2+status,0]
 28786  364B  300F               	movlw	15
 28787  364C  00F1               	movwf	??_nullifyBadge_buttonsGet
 28788  364D  0871               	movf	??_nullifyBadge_buttonsGet,w
 28789  364E  00F3               	movwf	nullifyBadge_buttonsGet@retVal
 28790                           
 28791                           ;nullifyBadge.c: 190: retVal &= ~(PORTCbits.RC5 << 0);
 28792  364F  0020               	movlb	0	; select bank0
 28793  3650  0E0E               	swapf	14,w	;volatile
 28794  3651  0C89               	rrf	9,f
 28795  3652  3901               	andlw	1
 28796  3653  3AFF               	xorlw	255
 28797  3654  00F1               	movwf	??_nullifyBadge_buttonsGet
 28798  3655  0871               	movf	??_nullifyBadge_buttonsGet,w
 28799  3656  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28800                           
 28801                           ;nullifyBadge.c: 191: retVal &= ~(PORTAbits.RA2 << 1);
 28802  3657  0C0C               	rrf	12,w	;volatile
 28803  3658  0C89               	rrf	9,f
 28804  3659  3901               	andlw	1
 28805  365A  0709               	addwf	9,w
 28806  365B  3AFF               	xorlw	255
 28807  365C  00F1               	movwf	??_nullifyBadge_buttonsGet
 28808  365D  0871               	movf	??_nullifyBadge_buttonsGet,w
 28809  365E  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28810                           
 28811                           ;nullifyBadge.c: 192: retVal &= ~(PORTAbits.RA4 << 2);
 28812  365F  0E0C               	swapf	12,w	;volatile
 28813  3660  3901               	andlw	1
 28814  3661  00F1               	movwf	??_nullifyBadge_buttonsGet
 28815  3662  3001               	movlw	1
 28816  3663                     u5145:	
 28817  3663  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 28818  3664  3EFF               	addlw	-1
 28819  3665  1D03               	skipz
 28820  3666  2E63               	goto	u5145
 28821  3667  3571               	lslf	??_nullifyBadge_buttonsGet,w
 28822  3668  3AFF               	xorlw	255
 28823  3669  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 28824  366A  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 28825  366B  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28826                           
 28827                           ;nullifyBadge.c: 193: retVal &= ~(PORTAbits.RA5 << 3);
 28828  366C  0E0C               	swapf	12,w	;volatile
 28829  366D  0C89               	rrf	9,f
 28830  366E  3901               	andlw	1
 28831  366F  00F1               	movwf	??_nullifyBadge_buttonsGet
 28832  3670  3002               	movlw	2
 28833  3671                     u5155:	
 28834  3671  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 28835  3672  3EFF               	addlw	-1
 28836  3673  1D03               	skipz
 28837  3674  2E71               	goto	u5155
 28838  3675  3571               	lslf	??_nullifyBadge_buttonsGet,w
 28839  3676  3AFF               	xorlw	255
 28840  3677  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 28841  3678  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 28842  3679  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28843                           
 28844                           ;nullifyBadge.c: 195: return retVal;
 28845  367A  0873               	movf	nullifyBadge_buttonsGet@retVal,w
 28846  367B  0008               	return
 28847  367C                     __end_of_nullifyBadge_buttonsGet:	
 28848                           
 28849                           	psect	text50
 28850  33AC                     __ptext50:	
 28851 ;; *************** function _let_alternate *****************
 28852 ;; Defined at:
 28853 ;;		line 194 in file "main.c"
 28854 ;; Parameters:    Size  Location     Type
 28855 ;;  count           2   16[BANK0 ] unsigned int 
 28856 ;; Auto vars:     Size  Location     Type
 28857 ;;		None
 28858 ;; Return value:  Size  Location     Type
 28859 ;;                  1    wreg      void 
 28860 ;; Registers used:
 28861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28862 ;; Tracked objects:
 28863 ;;		On entry : 0/0
 28864 ;;		On exit  : 0/0
 28865 ;;		Unchanged: 0/0
 28866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28867 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28870 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28871 ;;Total ram usage:        2 bytes
 28872 ;; Hardware stack levels used:    1
 28873 ;; Hardware stack levels required when called:    9
 28874 ;; This function calls:
 28875 ;;		_nullifyBadge_userLedsSet
 28876 ;; This function is called by:
 28877 ;;		_flashy_Main
 28878 ;; This function uses a non-reentrant model
 28879 ;;
 28880                           
 28881                           
 28882                           ;psect for function _let_alternate
 28883  33AC                     _let_alternate:	
 28884                           
 28885                           ;main.c: 195: if(count %2 == 1){
 28886                           
 28887                           ;incstack = 0
 28888                           ; Regs used in _let_alternate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 28889  33AC  0020               	movlb	0	; select bank0
 28890  33AD  1C30               	btfss	let_alternate@count,0
 28891  33AE  2BB7               	goto	l8533
 28892                           
 28893                           ;main.c: 196: nullifyBadge_userLedsSet(&badge_inst,43349);
 28894  33AF  3055               	movlw	85
 28895  33B0  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28896  33B1  30A9               	movlw	169
 28897  33B2  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28898  33B3  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28899  33B4  31B3  2352         	fcall	_nullifyBadge_userLedsSet
 28900                           
 28901                           ;main.c: 197: }
 28902  33B6  0008               	return
 28903  33B7                     l8533:	
 28904                           
 28905                           ;main.c: 198: else{
 28906                           ;main.c: 199: nullifyBadge_userLedsSet(&badge_inst,21162);
 28907  33B7  30AA               	movlw	170
 28908  33B8  0020               	movlb	0	; select bank0
 28909  33B9  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28910  33BA  3052               	movlw	82
 28911  33BB  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28912  33BC  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28913  33BD  31B3  2352         	fcall	_nullifyBadge_userLedsSet
 28914  33BF  0008               	return
 28915  33C0                     __end_of_let_alternate:	
 28916                           
 28917                           	psect	text51
 28918  28E5                     __ptext51:	
 28919 ;; *************** function _led_roundabout *****************
 28920 ;; Defined at:
 28921 ;;		line 159 in file "main.c"
 28922 ;; Parameters:    Size  Location     Type
 28923 ;;  counter         2   16[BANK0 ] unsigned int 
 28924 ;; Auto vars:     Size  Location     Type
 28925 ;;  size            2   22[BANK0 ] unsigned int 
 28926 ;;  leds            2   20[BANK0 ] unsigned int 
 28927 ;; Return value:  Size  Location     Type
 28928 ;;                  1    wreg      void 
 28929 ;; Registers used:
 28930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28931 ;; Tracked objects:
 28932 ;;		On entry : 0/0
 28933 ;;		On exit  : 0/0
 28934 ;;		Unchanged: 0/0
 28935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28936 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28937 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28938 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28939 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28940 ;;Total ram usage:        8 bytes
 28941 ;; Hardware stack levels used:    1
 28942 ;; Hardware stack levels required when called:    9
 28943 ;; This function calls:
 28944 ;;		___lwmod
 28945 ;;		_nullifyBadge_userLedsSet
 28946 ;; This function is called by:
 28947 ;;		_flashy_Main
 28948 ;; This function uses a non-reentrant model
 28949 ;;
 28950                           
 28951                           
 28952                           ;psect for function _led_roundabout
 28953  28E5                     _led_roundabout:	
 28954                           
 28955                           ;main.c: 160: u16 size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 28956                           
 28957                           ;incstack = 0
 28958                           ; Regs used in _led_roundabout: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 28959  28E5  300E               	movlw	14
 28960  28E6  0020               	movlb	0	; select bank0
 28961  28E7  00B6               	movwf	led_roundabout@size
 28962  28E8  3000               	movlw	0
 28963  28E9  00B7               	movwf	led_roundabout@size+1
 28964                           
 28965                           ;main.c: 161: u16 leds = roundabout_leds[counter % size];
 28966  28EA  0837               	movf	led_roundabout@size+1,w
 28967  28EB  00AC               	movwf	___lwmod@divisor+1
 28968  28EC  0836               	movf	led_roundabout@size,w
 28969  28ED  00AB               	movwf	___lwmod@divisor
 28970  28EE  0831               	movf	led_roundabout@counter+1,w
 28971  28EF  00AE               	movwf	___lwmod@dividend+1
 28972  28F0  0830               	movf	led_roundabout@counter,w
 28973  28F1  00AD               	movwf	___lwmod@dividend
 28974  28F2  31B5  25EF  31A8   	fcall	___lwmod
 28975  28F5  0020               	movlb	0	; select bank0
 28976  28F6  082B               	movf	?___lwmod,w
 28977  28F7  0709               	addwf	9,w
 28978  28F8  3EBC               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 28979  28F9  0086               	movwf	6
 28980  28FA  3003               	movlw	3	; select bank7/8
 28981  28FB  0087               	movwf	7
 28982  28FC  3F40               	moviw [0]fsr1
 28983  28FD  00B4               	movwf	led_roundabout@leds
 28984  28FE  3F41               	moviw [1]fsr1
 28985  28FF  00B5               	movwf	led_roundabout@leds+1
 28986                           
 28987                           ;main.c: 163: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 28988  2900  300E               	movlw	14
 28989  2901  00B6               	movwf	led_roundabout@size
 28990  2902  3000               	movlw	0
 28991  2903  00B7               	movwf	led_roundabout@size+1
 28992                           
 28993                           ;main.c: 164: leds |= roundabout_leds_inverse[counter % size];
 28994  2904  0837               	movf	led_roundabout@size+1,w
 28995  2905  00AC               	movwf	___lwmod@divisor+1
 28996  2906  0836               	movf	led_roundabout@size,w
 28997  2907  00AB               	movwf	___lwmod@divisor
 28998  2908  0831               	movf	led_roundabout@counter+1,w
 28999  2909  00AE               	movwf	___lwmod@dividend+1
 29000  290A  0830               	movf	led_roundabout@counter,w
 29001  290B  00AD               	movwf	___lwmod@dividend
 29002  290C  31B5  25EF  31A8   	fcall	___lwmod
 29003  290F  0020               	movlb	0	; select bank0
 29004  2910  082B               	movf	?___lwmod,w
 29005  2911  0709               	addwf	9,w
 29006  2912  3EA0               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 29007  2913  0086               	movwf	6
 29008  2914  3003               	movlw	3	; select bank7/8
 29009  2915  0087               	movwf	7
 29010  2916  3F40               	moviw [0]fsr1
 29011  2917  00B2               	movwf	??_led_roundabout
 29012  2918  3F41               	moviw [1]fsr1
 29013  2919  00B3               	movwf	??_led_roundabout+1
 29014  291A  0832               	movf	??_led_roundabout,w
 29015  291B  04B4               	iorwf	led_roundabout@leds,f
 29016  291C  0833               	movf	??_led_roundabout+1,w
 29017  291D  04B5               	iorwf	led_roundabout@leds+1,f
 29018                           
 29019                           ;main.c: 166: nullifyBadge_userLedsSet(&badge_inst, leds);
 29020  291E  0835               	movf	led_roundabout@leds+1,w
 29021  291F  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29022  2920  0834               	movf	led_roundabout@leds,w
 29023  2921  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29024  2922  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29025  2923  31B3  2352         	fcall	_nullifyBadge_userLedsSet
 29026  2925  0008               	return
 29027  2926                     __end_of_led_roundabout:	
 29028                           
 29029                           	psect	text52
 29030  2A38                     __ptext52:	
 29031 ;; *************** function _led_rand *****************
 29032 ;; Defined at:
 29033 ;;		line 179 in file "main.c"
 29034 ;; Parameters:    Size  Location     Type
 29035 ;;		None
 29036 ;; Auto vars:     Size  Location     Type
 29037 ;;  spark           2   27[BANK0 ] unsigned int 
 29038 ;; Return value:  Size  Location     Type
 29039 ;;                  1    wreg      void 
 29040 ;; Registers used:
 29041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29042 ;; Tracked objects:
 29043 ;;		On entry : 0/0
 29044 ;;		On exit  : 0/0
 29045 ;;		Unchanged: 0/0
 29046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29048 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29049 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29050 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29051 ;;Total ram usage:       10 bytes
 29052 ;; Hardware stack levels used:    1
 29053 ;; Hardware stack levels required when called:    9
 29054 ;; This function calls:
 29055 ;;		___almod
 29056 ;;		_nullifyBadge_userLedsSet
 29057 ;;		_rand
 29058 ;; This function is called by:
 29059 ;;		_flashy_Main
 29060 ;;		_slot_Finished_Animation
 29061 ;; This function uses a non-reentrant model
 29062 ;;
 29063                           
 29064                           
 29065                           ;psect for function _led_rand
 29066  2A38                     _led_rand:	
 29067                           
 29068                           ;main.c: 181: u16 spark = rand() % 65535;
 29069                           
 29070                           ;incstack = 0
 29071                           ; Regs used in _led_rand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29072  2A38  3000               	movlw	0
 29073  2A39  0020               	movlb	0	; select bank0
 29074  2A3A  00AE               	movwf	___almod@divisor+3
 29075  2A3B  3000               	movlw	0
 29076  2A3C  00AD               	movwf	___almod@divisor+2
 29077  2A3D  30FF               	movlw	255
 29078  2A3E  00AC               	movwf	___almod@divisor+1
 29079  2A3F  30FF               	movlw	255
 29080  2A40  00AB               	movwf	___almod@divisor
 29081  2A41  31A9  2168  31AA   	fcall	_rand
 29082  2A44  0020               	movlb	0	; select bank0
 29083  2A45  0824               	movf	?_rand,w
 29084  2A46  00AF               	movwf	___almod@dividend
 29085  2A47  0825               	movf	?_rand+1,w
 29086  2A48  00B0               	movwf	___almod@dividend+1
 29087  2A49  0D89               	rlf	9,f
 29088  2A4A  3B89               	subwfb	9,f
 29089  2A4B  0989               	comf	9,f
 29090  2A4C  00B1               	movwf	___almod@dividend+2
 29091  2A4D  00B2               	movwf	___almod@dividend+3
 29092  2A4E  31AF  2792  31AA   	fcall	___almod
 29093  2A51  0020               	movlb	0	; select bank0
 29094  2A52  082C               	movf	?___almod+1,w
 29095  2A53  00BC               	movwf	led_rand@spark+1
 29096  2A54  082B               	movf	?___almod,w
 29097  2A55  00BB               	movwf	led_rand@spark
 29098                           
 29099                           ;main.c: 182: if ( (spark | 64511) == 65535 ){
 29100  2A56  30FF               	movlw	255
 29101  2A57  00B3               	movwf	??_led_rand
 29102  2A58  30FB               	movlw	251
 29103  2A59  00B4               	movwf	??_led_rand+1
 29104  2A5A  3000               	movlw	0
 29105  2A5B  00B5               	movwf	??_led_rand+2
 29106  2A5C  3000               	movlw	0
 29107  2A5D  00B6               	movwf	??_led_rand+3
 29108  2A5E  083B               	movf	led_rand@spark,w
 29109  2A5F  00B7               	movwf	??_led_rand+4
 29110  2A60  083C               	movf	led_rand@spark+1,w
 29111  2A61  00B8               	movwf	??_led_rand+5
 29112  2A62  01B9               	clrf	??_led_rand+6
 29113  2A63  01BA               	clrf	??_led_rand+7
 29114  2A64  0837               	movf	??_led_rand+4,w
 29115  2A65  04B3               	iorwf	??_led_rand,f
 29116  2A66  0838               	movf	??_led_rand+5,w
 29117  2A67  04B4               	iorwf	??_led_rand+1,f
 29118  2A68  0839               	movf	??_led_rand+6,w
 29119  2A69  04B5               	iorwf	??_led_rand+2,f
 29120  2A6A  083A               	movf	??_led_rand+7,w
 29121  2A6B  04B6               	iorwf	??_led_rand+3,f
 29122  2A6C  0A33               	incf	??_led_rand,w
 29123  2A6D  1D03               	skipz
 29124  2A6E  2A78               	goto	l8447
 29125  2A6F  0A34               	incf	??_led_rand+1,w
 29126  2A70  0435               	iorwf	??_led_rand+2,w
 29127  2A71  0436               	iorwf	??_led_rand+3,w
 29128  2A72  1D03               	btfss	3,2
 29129  2A73  2A78               	goto	l8447
 29130                           
 29131                           ;main.c: 183: spark ^= 1024 ;
 29132  2A74  3000               	movlw	0
 29133  2A75  06BB               	xorwf	led_rand@spark,f
 29134  2A76  3004               	movlw	4
 29135  2A77  06BC               	xorwf	led_rand@spark+1,f
 29136  2A78                     l8447:	
 29137                           
 29138                           ;main.c: 184: }
 29139                           ;main.c: 185: nullifyBadge_userLedsSet(&badge_inst,spark);
 29140  2A78  083C               	movf	led_rand@spark+1,w
 29141  2A79  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29142  2A7A  083B               	movf	led_rand@spark,w
 29143  2A7B  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29144  2A7C  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29145  2A7D  31B3  2352         	fcall	_nullifyBadge_userLedsSet
 29146  2A7F  0008               	return
 29147  2A80                     __end_of_led_rand:	
 29148                           
 29149                           	psect	text53
 29150  2968                     __ptext53:	
 29151 ;; *************** function _rand *****************
 29152 ;; Defined at:
 29153 ;;		line 12 in file "/Applications/microchip/xc8/v1.42/sources/common/rand.c"
 29154 ;; Parameters:    Size  Location     Type
 29155 ;;		None
 29156 ;; Auto vars:     Size  Location     Type
 29157 ;;		None
 29158 ;; Return value:  Size  Location     Type
 29159 ;;                  2    4[BANK0 ] int 
 29160 ;; Registers used:
 29161 ;;		wreg, status,2, status,0, pclath, cstack
 29162 ;; Tracked objects:
 29163 ;;		On entry : 0/0
 29164 ;;		On exit  : 0/0
 29165 ;;		Unchanged: 0/0
 29166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29167 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29169 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29170 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29171 ;;Total ram usage:        7 bytes
 29172 ;; Hardware stack levels used:    1
 29173 ;; Hardware stack levels required when called:    5
 29174 ;; This function calls:
 29175 ;;		___lmul
 29176 ;; This function is called by:
 29177 ;;		_led_rand
 29178 ;;		_slot_Setup
 29179 ;;		_slot_Main
 29180 ;; This function uses a non-reentrant model
 29181 ;;
 29182                           
 29183                           
 29184                           ;psect for function _rand
 29185  2968                     _rand:	
 29186                           
 29187                           ;incstack = 0
 29188                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 29189  2968  0021               	movlb	1	; select bank1
 29190  2969  084F               	movf	(_randx+3)^(0+128),w
 29191  296A  00F4               	movwf	___lmul@multiplier+3
 29192  296B  084E               	movf	(_randx+2)^(0+128),w
 29193  296C  00F3               	movwf	___lmul@multiplier+2
 29194  296D  084D               	movf	(_randx+1)^(0+128),w
 29195  296E  00F2               	movwf	___lmul@multiplier+1
 29196  296F  084C               	movf	_randx^(0+128),w
 29197  2970  00F1               	movwf	___lmul@multiplier
 29198  2971  3041               	movlw	65
 29199  2972  00F8               	movwf	___lmul@multiplicand+3
 29200  2973  30C6               	movlw	198
 29201  2974  00F7               	movwf	___lmul@multiplicand+2
 29202  2975  304E               	movlw	78
 29203  2976  00F6               	movwf	___lmul@multiplicand+1
 29204  2977  306D               	movlw	109
 29205  2978  00F5               	movwf	___lmul@multiplicand
 29206  2979  31B6  267C  31A9   	fcall	___lmul
 29207  297C  0874               	movf	?___lmul+3,w
 29208  297D  0021               	movlb	1	; select bank1
 29209  297E  00CF               	movwf	(_randx+3)^(0+128)
 29210  297F  0873               	movf	?___lmul+2,w
 29211  2980  00CE               	movwf	(_randx+2)^(0+128)
 29212  2981  0872               	movf	?___lmul+1,w
 29213  2982  00CD               	movwf	(_randx+1)^(0+128)
 29214  2983  0871               	movf	?___lmul,w
 29215  2984  00CC               	movwf	_randx^(0+128)
 29216  2985  3039               	movlw	57
 29217  2986  07CC               	addwf	_randx^(0+128),f
 29218  2987  3030               	movlw	48
 29219  2988  3DCD               	addwfc	(_randx+1)^(0+128),f
 29220  2989  3000               	movlw	0
 29221  298A  3DCE               	addwfc	(_randx+2)^(0+128),f
 29222  298B  3000               	movlw	0
 29223  298C  3DCF               	addwfc	(_randx+3)^(0+128),f
 29224  298D  084C               	movf	_randx^(0+128),w
 29225  298E  0020               	movlb	0	; select bank0
 29226  298F  00A6               	movwf	??_rand
 29227  2990  0021               	movlb	1	; select bank1
 29228  2991  084D               	movf	(_randx+1)^(0+128),w
 29229  2992  0020               	movlb	0	; select bank0
 29230  2993  00A7               	movwf	??_rand+1
 29231  2994  0021               	movlb	1	; select bank1
 29232  2995  084E               	movf	(_randx+2)^(0+128),w
 29233  2996  0020               	movlb	0	; select bank0
 29234  2997  00A8               	movwf	??_rand+2
 29235  2998  0021               	movlb	1	; select bank1
 29236  2999  084F               	movf	(_randx+3)^(0+128),w
 29237  299A  0020               	movlb	0	; select bank0
 29238  299B  00A9               	movwf	??_rand+3
 29239  299C  3010               	movlw	16
 29240  299D  00AA               	movwf	??_rand+4
 29241  299E                     u4725:	
 29242  299E  37A9               	asrf	??_rand+3,f
 29243  299F  0CA8               	rrf	??_rand+2,f
 29244  29A0  0CA7               	rrf	??_rand+1,f
 29245  29A1  0CA6               	rrf	??_rand,f
 29246  29A2  0BAA               	decfsz	??_rand+4,f
 29247  29A3  299E               	goto	u4725
 29248  29A4  30FF               	movlw	255
 29249  29A5  0526               	andwf	??_rand,w
 29250  29A6  00A4               	movwf	?_rand
 29251  29A7  307F               	movlw	127
 29252  29A8  0527               	andwf	??_rand+1,w
 29253  29A9  00A5               	movwf	?_rand+1
 29254  29AA  0008               	return
 29255  29AB                     __end_of_rand:	
 29256                           
 29257                           	psect	text54
 29258  367C                     __ptext54:	
 29259 ;; *************** function ___lmul *****************
 29260 ;; Defined at:
 29261 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul32.c"
 29262 ;; Parameters:    Size  Location     Type
 29263 ;;  multiplier      4    1[COMMON] unsigned long 
 29264 ;;  multiplicand    4    5[COMMON] unsigned long 
 29265 ;; Auto vars:     Size  Location     Type
 29266 ;;  product         4    0[BANK0 ] unsigned long 
 29267 ;; Return value:  Size  Location     Type
 29268 ;;                  4    1[COMMON] unsigned long 
 29269 ;; Registers used:
 29270 ;;		wreg, status,2, status,0
 29271 ;; Tracked objects:
 29272 ;;		On entry : 0/0
 29273 ;;		On exit  : 0/0
 29274 ;;		Unchanged: 0/0
 29275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29276 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29277 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29279 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29280 ;;Total ram usage:       12 bytes
 29281 ;; Hardware stack levels used:    1
 29282 ;; Hardware stack levels required when called:    4
 29283 ;; This function calls:
 29284 ;;		Nothing
 29285 ;; This function is called by:
 29286 ;;		_rand
 29287 ;; This function uses a non-reentrant model
 29288 ;;
 29289                           
 29290                           
 29291                           ;psect for function ___lmul
 29292  367C                     ___lmul:	
 29293                           
 29294                           ;incstack = 0
 29295                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 29296  367C  3000               	movlw	0
 29297  367D  0020               	movlb	0	; select bank0
 29298  367E  00A3               	movwf	___lmul@product+3
 29299  367F  3000               	movlw	0
 29300  3680  00A2               	movwf	___lmul@product+2
 29301  3681  3000               	movlw	0
 29302  3682  00A1               	movwf	___lmul@product+1
 29303  3683  3000               	movlw	0
 29304  3684  00A0               	movwf	___lmul@product
 29305  3685                     l8271:	
 29306  3685  1C71               	btfss	___lmul@multiplier,0
 29307  3686  2E90               	goto	l8275
 29308  3687  0875               	movf	___lmul@multiplicand,w
 29309  3688  0020               	movlb	0	; select bank0
 29310  3689  07A0               	addwf	___lmul@product,f
 29311  368A  0876               	movf	___lmul@multiplicand+1,w
 29312  368B  3DA1               	addwfc	___lmul@product+1,f
 29313  368C  0877               	movf	___lmul@multiplicand+2,w
 29314  368D  3DA2               	addwfc	___lmul@product+2,f
 29315  368E  0878               	movf	___lmul@multiplicand+3,w
 29316  368F  3DA3               	addwfc	___lmul@product+3,f
 29317  3690                     l8275:	
 29318  3690  3001               	movlw	1
 29319  3691                     u4675:	
 29320  3691  35F5               	lslf	___lmul@multiplicand,f
 29321  3692  0DF6               	rlf	___lmul@multiplicand+1,f
 29322  3693  0DF7               	rlf	___lmul@multiplicand+2,f
 29323  3694  0DF8               	rlf	___lmul@multiplicand+3,f
 29324  3695  0B89               	decfsz	9,f
 29325  3696  2E91               	goto	u4675
 29326  3697  3001               	movlw	1
 29327  3698                     u4685:	
 29328  3698  36F4               	lsrf	___lmul@multiplier+3,f
 29329  3699  0CF3               	rrf	___lmul@multiplier+2,f
 29330  369A  0CF2               	rrf	___lmul@multiplier+1,f
 29331  369B  0CF1               	rrf	___lmul@multiplier,f
 29332  369C  0B89               	decfsz	9,f
 29333  369D  2E98               	goto	u4685
 29334  369E  0874               	movf	___lmul@multiplier+3,w
 29335  369F  0473               	iorwf	___lmul@multiplier+2,w
 29336  36A0  0472               	iorwf	___lmul@multiplier+1,w
 29337  36A1  0471               	iorwf	___lmul@multiplier,w
 29338  36A2  1D03               	skipz
 29339  36A3  2E85               	goto	l8271
 29340  36A4  0020               	movlb	0	; select bank0
 29341  36A5  0823               	movf	___lmul@product+3,w
 29342  36A6  00F4               	movwf	?___lmul+3
 29343  36A7  0822               	movf	___lmul@product+2,w
 29344  36A8  00F3               	movwf	?___lmul+2
 29345  36A9  0821               	movf	___lmul@product+1,w
 29346  36AA  00F2               	movwf	?___lmul+1
 29347  36AB  0820               	movf	___lmul@product,w
 29348  36AC  00F1               	movwf	?___lmul
 29349  36AD  0008               	return
 29350  36AE                     __end_of___lmul:	
 29351                           
 29352                           	psect	text55
 29353  2F92                     __ptext55:	
 29354 ;; *************** function ___almod *****************
 29355 ;; Defined at:
 29356 ;;		line 5 in file "/Applications/microchip/xc8/v1.42/sources/common/almod.c"
 29357 ;; Parameters:    Size  Location     Type
 29358 ;;  divisor         4   11[BANK0 ] long 
 29359 ;;  dividend        4   15[BANK0 ] long 
 29360 ;; Auto vars:     Size  Location     Type
 29361 ;;  sign            1   11[COMMON] unsigned char 
 29362 ;;  counter         1   10[COMMON] unsigned char 
 29363 ;; Return value:  Size  Location     Type
 29364 ;;                  4   11[BANK0 ] long 
 29365 ;; Registers used:
 29366 ;;		wreg, status,2, status,0
 29367 ;; Tracked objects:
 29368 ;;		On entry : 0/0
 29369 ;;		On exit  : 0/0
 29370 ;;		Unchanged: 0/0
 29371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29372 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29373 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29375 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29376 ;;Total ram usage:       11 bytes
 29377 ;; Hardware stack levels used:    1
 29378 ;; Hardware stack levels required when called:    4
 29379 ;; This function calls:
 29380 ;;		Nothing
 29381 ;; This function is called by:
 29382 ;;		_led_rand
 29383 ;; This function uses a non-reentrant model
 29384 ;;
 29385                           
 29386                           
 29387                           ;psect for function ___almod
 29388  2F92                     ___almod:	
 29389                           
 29390                           ;incstack = 0
 29391                           ; Regs used in ___almod: [wreg+status,2+status,0]
 29392  2F92  01FB               	clrf	___almod@sign
 29393  2F93  0020               	movlb	0	; select bank0
 29394  2F94  1FB2               	btfss	___almod@dividend+3,7
 29395  2F95  2FA3               	goto	l1772
 29396  2F96  09AF               	comf	___almod@dividend,f
 29397  2F97  09B0               	comf	___almod@dividend+1,f
 29398  2F98  09B1               	comf	___almod@dividend+2,f
 29399  2F99  09B2               	comf	___almod@dividend+3,f
 29400  2F9A  0AAF               	incf	___almod@dividend,f
 29401  2F9B  1903               	skipnz
 29402  2F9C  0AB0               	incf	___almod@dividend+1,f
 29403  2F9D  1903               	skipnz
 29404  2F9E  0AB1               	incf	___almod@dividend+2,f
 29405  2F9F  1903               	skipnz
 29406  2FA0  0AB2               	incf	___almod@dividend+3,f
 29407  2FA1  01FB               	clrf	___almod@sign
 29408  2FA2  0AFB               	incf	___almod@sign,f
 29409  2FA3                     l1772:	
 29410  2FA3  1FAE               	btfss	___almod@divisor+3,7
 29411  2FA4  2FB0               	goto	l8323
 29412  2FA5  09AB               	comf	___almod@divisor,f
 29413  2FA6  09AC               	comf	___almod@divisor+1,f
 29414  2FA7  09AD               	comf	___almod@divisor+2,f
 29415  2FA8  09AE               	comf	___almod@divisor+3,f
 29416  2FA9  0AAB               	incf	___almod@divisor,f
 29417  2FAA  1903               	skipnz
 29418  2FAB  0AAC               	incf	___almod@divisor+1,f
 29419  2FAC  1903               	skipnz
 29420  2FAD  0AAD               	incf	___almod@divisor+2,f
 29421  2FAE  1903               	skipnz
 29422  2FAF  0AAE               	incf	___almod@divisor+3,f
 29423  2FB0                     l8323:	
 29424  2FB0  082E               	movf	___almod@divisor+3,w
 29425  2FB1  042D               	iorwf	___almod@divisor+2,w
 29426  2FB2  042C               	iorwf	___almod@divisor+1,w
 29427  2FB3  042B               	iorwf	___almod@divisor,w
 29428  2FB4  1903               	skipnz
 29429  2FB5  2FE9               	goto	l8339
 29430  2FB6  01FA               	clrf	___almod@counter
 29431  2FB7  0AFA               	incf	___almod@counter,f
 29432  2FB8                     l8329:	
 29433  2FB8  1BAE               	btfsc	___almod@divisor+3,7
 29434  2FB9  2FC6               	goto	l8331
 29435  2FBA  3001               	movlw	1
 29436  2FBB                     u4765:	
 29437  2FBB  35AB               	lslf	___almod@divisor,f
 29438  2FBC  0DAC               	rlf	___almod@divisor+1,f
 29439  2FBD  0DAD               	rlf	___almod@divisor+2,f
 29440  2FBE  0DAE               	rlf	___almod@divisor+3,f
 29441  2FBF  0B89               	decfsz	9,f
 29442  2FC0  2FBB               	goto	u4765
 29443  2FC1  3001               	movlw	1
 29444  2FC2  00F9               	movwf	??___almod
 29445  2FC3  0879               	movf	??___almod,w
 29446  2FC4  07FA               	addwf	___almod@counter,f
 29447  2FC5  2FB8               	goto	l8329
 29448  2FC6                     l8331:	
 29449  2FC6  082E               	movf	___almod@divisor+3,w
 29450  2FC7  0232               	subwf	___almod@dividend+3,w
 29451  2FC8  1D03               	skipz
 29452  2FC9  2FD4               	goto	u4785
 29453  2FCA  082D               	movf	___almod@divisor+2,w
 29454  2FCB  0231               	subwf	___almod@dividend+2,w
 29455  2FCC  1D03               	skipz
 29456  2FCD  2FD4               	goto	u4785
 29457  2FCE  082C               	movf	___almod@divisor+1,w
 29458  2FCF  0230               	subwf	___almod@dividend+1,w
 29459  2FD0  1D03               	skipz
 29460  2FD1  2FD4               	goto	u4785
 29461  2FD2  082B               	movf	___almod@divisor,w
 29462  2FD3  022F               	subwf	___almod@dividend,w
 29463  2FD4                     u4785:	
 29464  2FD4  1C03               	skipc
 29465  2FD5  2FDE               	goto	l8335
 29466  2FD6  082B               	movf	___almod@divisor,w
 29467  2FD7  02AF               	subwf	___almod@dividend,f
 29468  2FD8  082C               	movf	___almod@divisor+1,w
 29469  2FD9  3BB0               	subwfb	___almod@dividend+1,f
 29470  2FDA  082D               	movf	___almod@divisor+2,w
 29471  2FDB  3BB1               	subwfb	___almod@dividend+2,f
 29472  2FDC  082E               	movf	___almod@divisor+3,w
 29473  2FDD  3BB2               	subwfb	___almod@dividend+3,f
 29474  2FDE                     l8335:	
 29475  2FDE  3001               	movlw	1
 29476  2FDF                     u4795:	
 29477  2FDF  36AE               	lsrf	___almod@divisor+3,f
 29478  2FE0  0CAD               	rrf	___almod@divisor+2,f
 29479  2FE1  0CAC               	rrf	___almod@divisor+1,f
 29480  2FE2  0CAB               	rrf	___almod@divisor,f
 29481  2FE3  0B89               	decfsz	9,f
 29482  2FE4  2FDF               	goto	u4795
 29483  2FE5  3001               	movlw	1
 29484  2FE6  02FA               	subwf	___almod@counter,f
 29485  2FE7  1D03               	btfss	3,2
 29486  2FE8  2FC6               	goto	l8331
 29487  2FE9                     l8339:	
 29488  2FE9  087B               	movf	___almod@sign,w
 29489  2FEA  1903               	btfsc	3,2
 29490  2FEB  2FF7               	goto	l8343
 29491  2FEC  09AF               	comf	___almod@dividend,f
 29492  2FED  09B0               	comf	___almod@dividend+1,f
 29493  2FEE  09B1               	comf	___almod@dividend+2,f
 29494  2FEF  09B2               	comf	___almod@dividend+3,f
 29495  2FF0  0AAF               	incf	___almod@dividend,f
 29496  2FF1  1903               	skipnz
 29497  2FF2  0AB0               	incf	___almod@dividend+1,f
 29498  2FF3  1903               	skipnz
 29499  2FF4  0AB1               	incf	___almod@dividend+2,f
 29500  2FF5  1903               	skipnz
 29501  2FF6  0AB2               	incf	___almod@dividend+3,f
 29502  2FF7                     l8343:	
 29503  2FF7  0832               	movf	___almod@dividend+3,w
 29504  2FF8  00AE               	movwf	?___almod+3
 29505  2FF9  0831               	movf	___almod@dividend+2,w
 29506  2FFA  00AD               	movwf	?___almod+2
 29507  2FFB  0830               	movf	___almod@dividend+1,w
 29508  2FFC  00AC               	movwf	?___almod+1
 29509  2FFD  082F               	movf	___almod@dividend,w
 29510  2FFE  00AB               	movwf	?___almod
 29511  2FFF  0008               	return
 29512  3000                     __end_of___almod:	
 29513                           
 29514                           	psect	text56
 29515  28A4                     __ptext56:	
 29516 ;; *************** function _led_curtain *****************
 29517 ;; Defined at:
 29518 ;;		line 169 in file "main.c"
 29519 ;; Parameters:    Size  Location     Type
 29520 ;;  counter         2   16[BANK0 ] unsigned int 
 29521 ;; Auto vars:     Size  Location     Type
 29522 ;;  size            2   22[BANK0 ] unsigned int 
 29523 ;;  leds            2   20[BANK0 ] unsigned int 
 29524 ;; Return value:  Size  Location     Type
 29525 ;;                  1    wreg      void 
 29526 ;; Registers used:
 29527 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29528 ;; Tracked objects:
 29529 ;;		On entry : 0/0
 29530 ;;		On exit  : 0/0
 29531 ;;		Unchanged: 0/0
 29532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29533 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29534 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29535 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29536 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29537 ;;Total ram usage:        8 bytes
 29538 ;; Hardware stack levels used:    1
 29539 ;; Hardware stack levels required when called:    9
 29540 ;; This function calls:
 29541 ;;		___lwmod
 29542 ;;		_nullifyBadge_userLedsSet
 29543 ;; This function is called by:
 29544 ;;		_flashy_Main
 29545 ;;		_matrix_Main
 29546 ;; This function uses a non-reentrant model
 29547 ;;
 29548                           
 29549                           
 29550                           ;psect for function _led_curtain
 29551  28A4                     _led_curtain:	
 29552                           
 29553                           ;main.c: 170: u16 size = sizeof(curtain_leds) / sizeof(curtain_leds[0]);
 29554                           
 29555                           ;incstack = 0
 29556                           ; Regs used in _led_curtain: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29557  28A4  300E               	movlw	14
 29558  28A5  0020               	movlb	0	; select bank0
 29559  28A6  00B6               	movwf	led_curtain@size
 29560  28A7  3000               	movlw	0
 29561  28A8  00B7               	movwf	led_curtain@size+1
 29562                           
 29563                           ;main.c: 171: u16 leds = curtain_leds[counter % size];
 29564  28A9  0837               	movf	led_curtain@size+1,w
 29565  28AA  00AC               	movwf	___lwmod@divisor+1
 29566  28AB  0836               	movf	led_curtain@size,w
 29567  28AC  00AB               	movwf	___lwmod@divisor
 29568  28AD  0831               	movf	led_curtain@counter+1,w
 29569  28AE  00AE               	movwf	___lwmod@dividend+1
 29570  28AF  0830               	movf	led_curtain@counter,w
 29571  28B0  00AD               	movwf	___lwmod@dividend
 29572  28B1  31B5  25EF  31A8   	fcall	___lwmod
 29573  28B4  0020               	movlb	0	; select bank0
 29574  28B5  082B               	movf	?___lwmod,w
 29575  28B6  0709               	addwf	9,w
 29576  28B7  3E3C               	addlw	(low (_curtain_leds| (0+1024)))& (0+255)
 29577  28B8  0086               	movwf	6
 29578  28B9  3004               	movlw	4	; select bank8/9
 29579  28BA  0087               	movwf	7
 29580  28BB  3F40               	moviw [0]fsr1
 29581  28BC  00B4               	movwf	led_curtain@leds
 29582  28BD  3F41               	moviw [1]fsr1
 29583  28BE  00B5               	movwf	led_curtain@leds+1
 29584                           
 29585                           ;main.c: 173: size = sizeof(curtain_leds_inverse) / sizeof(curtain_leds_inverse[0]);
 29586  28BF  300E               	movlw	14
 29587  28C0  00B6               	movwf	led_curtain@size
 29588  28C1  3000               	movlw	0
 29589  28C2  00B7               	movwf	led_curtain@size+1
 29590                           
 29591                           ;main.c: 174: leds |= curtain_leds_inverse[counter % size];
 29592  28C3  0837               	movf	led_curtain@size+1,w
 29593  28C4  00AC               	movwf	___lwmod@divisor+1
 29594  28C5  0836               	movf	led_curtain@size,w
 29595  28C6  00AB               	movwf	___lwmod@divisor
 29596  28C7  0831               	movf	led_curtain@counter+1,w
 29597  28C8  00AE               	movwf	___lwmod@dividend+1
 29598  28C9  0830               	movf	led_curtain@counter,w
 29599  28CA  00AD               	movwf	___lwmod@dividend
 29600  28CB  31B5  25EF  31A8   	fcall	___lwmod
 29601  28CE  0020               	movlb	0	; select bank0
 29602  28CF  082B               	movf	?___lwmod,w
 29603  28D0  0709               	addwf	9,w
 29604  28D1  3E20               	addlw	(low (_curtain_leds_inverse| (0+1024)))& (0+255)
 29605  28D2  0086               	movwf	6
 29606  28D3  3004               	movlw	4	; select bank8/9
 29607  28D4  0087               	movwf	7
 29608  28D5  3F40               	moviw [0]fsr1
 29609  28D6  00B2               	movwf	??_led_curtain
 29610  28D7  3F41               	moviw [1]fsr1
 29611  28D8  00B3               	movwf	??_led_curtain+1
 29612  28D9  0832               	movf	??_led_curtain,w
 29613  28DA  04B4               	iorwf	led_curtain@leds,f
 29614  28DB  0833               	movf	??_led_curtain+1,w
 29615  28DC  04B5               	iorwf	led_curtain@leds+1,f
 29616                           
 29617                           ;main.c: 176: nullifyBadge_userLedsSet(&badge_inst, leds);
 29618  28DD  0835               	movf	led_curtain@leds+1,w
 29619  28DE  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29620  28DF  0834               	movf	led_curtain@leds,w
 29621  28E0  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29622  28E1  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29623  28E2  31B3  2352         	fcall	_nullifyBadge_userLedsSet
 29624  28E4  0008               	return
 29625  28E5                     __end_of_led_curtain:	
 29626                           
 29627                           	psect	text57
 29628  325C                     __ptext57:	
 29629 ;; *************** function _led_circle *****************
 29630 ;; Defined at:
 29631 ;;		line 188 in file "main.c"
 29632 ;; Parameters:    Size  Location     Type
 29633 ;;  count           2   16[BANK0 ] unsigned int 
 29634 ;; Auto vars:     Size  Location     Type
 29635 ;;		None
 29636 ;; Return value:  Size  Location     Type
 29637 ;;                  1    wreg      void 
 29638 ;; Registers used:
 29639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29640 ;; Tracked objects:
 29641 ;;		On entry : 0/0
 29642 ;;		On exit  : 0/0
 29643 ;;		Unchanged: 0/0
 29644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29645 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29649 ;;Total ram usage:        2 bytes
 29650 ;; Hardware stack levels used:    1
 29651 ;; Hardware stack levels required when called:    9
 29652 ;; This function calls:
 29653 ;;		_nullifyBadge_userLedsSet
 29654 ;; This function is called by:
 29655 ;;		_flashy_Main
 29656 ;;		_slot_Running_Animation
 29657 ;; This function uses a non-reentrant model
 29658 ;;
 29659                           
 29660                           
 29661                           ;psect for function _led_circle
 29662  325C                     _led_circle:	
 29663                           
 29664                           ;main.c: 190: nullifyBadge_userLedsSet(&badge_inst,count);
 29665                           
 29666                           ;incstack = 0
 29667                           ; Regs used in _led_circle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29668  325C  0020               	movlb	0	; select bank0
 29669  325D  0831               	movf	led_circle@count+1,w
 29670  325E  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29671  325F  0830               	movf	led_circle@count,w
 29672  3260  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29673  3261  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29674  3262  31B3  2352         	fcall	_nullifyBadge_userLedsSet
 29675  3264  0008               	return
 29676  3265                     __end_of_led_circle:	
 29677                           
 29678                           	psect	text58
 29679  2EC8                     __ptext58:	
 29680 ;; *************** function _led_Parody *****************
 29681 ;; Defined at:
 29682 ;;		line 203 in file "main.c"
 29683 ;; Parameters:    Size  Location     Type
 29684 ;;  count           2   16[BANK0 ] unsigned int 
 29685 ;; Auto vars:     Size  Location     Type
 29686 ;;  size            2   22[BANK0 ] unsigned int 
 29687 ;;  leds            2   20[BANK0 ] unsigned int 
 29688 ;; Return value:  Size  Location     Type
 29689 ;;                  1    wreg      void 
 29690 ;; Registers used:
 29691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29692 ;; Tracked objects:
 29693 ;;		On entry : 0/0
 29694 ;;		On exit  : 0/0
 29695 ;;		Unchanged: 0/0
 29696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29697 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29698 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29699 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29700 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29701 ;;Total ram usage:        8 bytes
 29702 ;; Hardware stack levels used:    1
 29703 ;; Hardware stack levels required when called:    9
 29704 ;; This function calls:
 29705 ;;		___lwmod
 29706 ;;		_nullifyBadge_userLedsSet
 29707 ;; This function is called by:
 29708 ;;		_flashy_Main
 29709 ;;		_matrix_Main
 29710 ;; This function uses a non-reentrant model
 29711 ;;
 29712                           
 29713                           
 29714                           ;psect for function _led_Parody
 29715  2EC8                     _led_Parody:	
 29716                           
 29717                           ;main.c: 204: u16 size;
 29718                           ;main.c: 205: u16 leds;
 29719                           ;main.c: 207: if (count % 30 == 0){
 29720                           
 29721                           ;incstack = 0
 29722                           ; Regs used in _led_Parody: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29723  2EC8  301E               	movlw	30
 29724  2EC9  0020               	movlb	0	; select bank0
 29725  2ECA  00AB               	movwf	___lwmod@divisor
 29726  2ECB  3000               	movlw	0
 29727  2ECC  00AC               	movwf	___lwmod@divisor+1
 29728  2ECD  0831               	movf	led_Parody@count+1,w
 29729  2ECE  00AE               	movwf	___lwmod@dividend+1
 29730  2ECF  0830               	movf	led_Parody@count,w
 29731  2ED0  00AD               	movwf	___lwmod@dividend
 29732  2ED1  31B5  25EF  31AE   	fcall	___lwmod
 29733  2ED4  0020               	movlb	0	; select bank0
 29734  2ED5  082B               	movf	?___lwmod,w
 29735  2ED6  042C               	iorwf	?___lwmod+1,w
 29736  2ED7  1D03               	btfss	3,2
 29737  2ED8  2EDE               	goto	l625
 29738                           
 29739                           ;main.c: 208: oddeven ^= 1 ;
 29740  2ED9  3001               	movlw	1
 29741  2EDA  0021               	movlb	1	; select bank1
 29742  2EDB  06B8               	xorwf	_oddeven^(0+128),f
 29743  2EDC  3000               	movlw	0
 29744  2EDD  06B9               	xorwf	(_oddeven+1)^(0+128),f
 29745  2EDE                     l625:	
 29746                           
 29747                           ;main.c: 209: }
 29748                           ;main.c: 211: if(count %2 == oddeven){
 29749  2EDE  3001               	movlw	1
 29750  2EDF  0020               	movlb	0	; select bank0
 29751  2EE0  0530               	andwf	led_Parody@count,w
 29752  2EE1  00B2               	movwf	??_led_Parody
 29753  2EE2  3000               	movlw	0
 29754  2EE3  0531               	andwf	led_Parody@count+1,w
 29755  2EE4  00B3               	movwf	??_led_Parody+1
 29756  2EE5  0021               	movlb	1	; select bank1
 29757  2EE6  0839               	movf	(_oddeven+1)^(0+128),w
 29758  2EE7  0020               	movlb	0	; select bank0
 29759  2EE8  0633               	xorwf	??_led_Parody+1,w
 29760  2EE9  1D03               	skipz
 29761  2EEA  2EEF               	goto	u5135
 29762  2EEB  0021               	movlb	1	; select bank1
 29763  2EEC  0838               	movf	_oddeven^(0+128),w
 29764  2EED  0020               	movlb	0	; select bank0
 29765  2EEE  0632               	xorwf	??_led_Parody,w
 29766  2EEF                     u5135:	
 29767  2EEF  1D03               	skipz
 29768  2EF0  2F0B               	goto	l8543
 29769                           
 29770                           ;main.c: 213: size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 29771  2EF1  300E               	movlw	14
 29772  2EF2  00B6               	movwf	led_Parody@size
 29773  2EF3  3000               	movlw	0
 29774  2EF4  00B7               	movwf	led_Parody@size+1
 29775                           
 29776                           ;main.c: 214: leds = roundabout_leds[count % size];
 29777  2EF5  0837               	movf	led_Parody@size+1,w
 29778  2EF6  00AC               	movwf	___lwmod@divisor+1
 29779  2EF7  0836               	movf	led_Parody@size,w
 29780  2EF8  00AB               	movwf	___lwmod@divisor
 29781  2EF9  0831               	movf	led_Parody@count+1,w
 29782  2EFA  00AE               	movwf	___lwmod@dividend+1
 29783  2EFB  0830               	movf	led_Parody@count,w
 29784  2EFC  00AD               	movwf	___lwmod@dividend
 29785  2EFD  31B5  25EF  31AE   	fcall	___lwmod
 29786  2F00  0020               	movlb	0	; select bank0
 29787  2F01  082B               	movf	?___lwmod,w
 29788  2F02  0709               	addwf	9,w
 29789  2F03  3EBC               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 29790  2F04  0086               	movwf	6
 29791  2F05  3003               	movlw	3	; select bank7/8
 29792  2F06  0087               	movwf	7
 29793  2F07  3F40               	moviw [0]fsr1
 29794  2F08  00B4               	movwf	led_Parody@leds
 29795  2F09  3F41               	moviw [1]fsr1
 29796  2F0A  2F24               	goto	L14
 29797  2F0B                     l8543:	
 29798                           ;main.c: 215: }
 29799                           
 29800                           
 29801                           ;main.c: 216: else{
 29802                           ;main.c: 217: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 29803  2F0B  300E               	movlw	14
 29804  2F0C  00B6               	movwf	led_Parody@size
 29805  2F0D  3000               	movlw	0
 29806  2F0E  00B7               	movwf	led_Parody@size+1
 29807                           
 29808                           ;main.c: 218: leds = roundabout_leds_inverse[count % size];
 29809  2F0F  0837               	movf	led_Parody@size+1,w
 29810  2F10  00AC               	movwf	___lwmod@divisor+1
 29811  2F11  0836               	movf	led_Parody@size,w
 29812  2F12  00AB               	movwf	___lwmod@divisor
 29813  2F13  0831               	movf	led_Parody@count+1,w
 29814  2F14  00AE               	movwf	___lwmod@dividend+1
 29815  2F15  0830               	movf	led_Parody@count,w
 29816  2F16  00AD               	movwf	___lwmod@dividend
 29817  2F17  31B5  25EF  31AE   	fcall	___lwmod
 29818  2F1A  0020               	movlb	0	; select bank0
 29819  2F1B  082B               	movf	?___lwmod,w
 29820  2F1C  0709               	addwf	9,w
 29821  2F1D  3EA0               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 29822  2F1E  0086               	movwf	6
 29823  2F1F  3003               	movlw	3	; select bank7/8
 29824  2F20  0087               	movwf	7
 29825  2F21  3F40               	moviw [0]fsr1
 29826  2F22  00B4               	movwf	led_Parody@leds
 29827  2F23  3F41               	moviw [1]fsr1
 29828  2F24                     L14:	
 29829  2F24  00B5               	movwf	led_Parody@leds+1
 29830                           
 29831                           ;main.c: 219: }
 29832                           ;main.c: 220: nullifyBadge_userLedsSet(&badge_inst, leds);
 29833  2F25  0835               	movf	led_Parody@leds+1,w
 29834  2F26  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29835  2F27  0834               	movf	led_Parody@leds,w
 29836  2F28  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29837  2F29  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29838  2F2A  31B3  2352         	fcall	_nullifyBadge_userLedsSet
 29839  2F2C  0008               	return
 29840  2F2D                     __end_of_led_Parody:	
 29841                           
 29842                           	psect	text59
 29843  3352                     __ptext59:	
 29844 ;; *************** function _nullifyBadge_userLedsSet *****************
 29845 ;; Defined at:
 29846 ;;		line 164 in file "nullifyBadge.c"
 29847 ;; Parameters:    Size  Location     Type
 29848 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 29849 ;;		 -> badge_inst(18), 
 29850 ;;  userLedData     2   13[BANK0 ] unsigned int 
 29851 ;; Auto vars:     Size  Location     Type
 29852 ;;  badge           1   15[BANK0 ] PTR struct t_nullifyBadg
 29853 ;;		 -> badge_inst(18), 
 29854 ;; Return value:  Size  Location     Type
 29855 ;;                  1    wreg      void 
 29856 ;; Registers used:
 29857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29858 ;; Tracked objects:
 29859 ;;		On entry : 0/0
 29860 ;;		On exit  : 0/0
 29861 ;;		Unchanged: 0/0
 29862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29863 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29864 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29866 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29867 ;;Total ram usage:        3 bytes
 29868 ;; Hardware stack levels used:    1
 29869 ;; Hardware stack levels required when called:    8
 29870 ;; This function calls:
 29871 ;;		_displayL2_SetUserLeds
 29872 ;; This function is called by:
 29873 ;;		_led_roundabout
 29874 ;;		_led_curtain
 29875 ;;		_led_rand
 29876 ;;		_led_circle
 29877 ;;		_let_alternate
 29878 ;;		_led_Parody
 29879 ;;		_menu_display_option
 29880 ;;		_flashy_Main
 29881 ;;		_locked_Main
 29882 ;; This function uses a non-reentrant model
 29883 ;;
 29884                           
 29885                           
 29886                           ;psect for function _nullifyBadge_userLedsSet
 29887  3352                     _nullifyBadge_userLedsSet:	
 29888                           
 29889                           ;incstack = 0
 29890                           ; Regs used in _nullifyBadge_userLedsSet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 29891                           ;nullifyBadge_userLedsSet@badge stored from wreg
 29892  3352  0020               	movlb	0	; select bank0
 29893  3353  00AF               	movwf	nullifyBadge_userLedsSet@badge
 29894                           
 29895                           ;nullifyBadge.c: 165: if (badge_locked) {
 29896  3354  0021               	movlb	1	; select bank1
 29897  3355  0844               	movf	_badge_locked^(0+128),w
 29898  3356  1903               	btfsc	3,2
 29899  3357  2B5A               	goto	l8303
 29900                           
 29901                           ;nullifyBadge.c: 166: userLedData |= 1024;
 29902  3358  0020               	movlb	0	; select bank0
 29903  3359  152E               	bsf	nullifyBadge_userLedsSet@userLedData+1,2
 29904  335A                     l8303:	
 29905                           
 29906                           ;nullifyBadge.c: 167: }
 29907                           ;nullifyBadge.c: 168: displayL2_SetUserLeds(&badge->display, userLedData);
 29908  335A  0020               	movlb	0	; select bank0
 29909  335B  082E               	movf	nullifyBadge_userLedsSet@userLedData+1,w
 29910  335C  00AC               	movwf	displayL2_SetUserLeds@userLedData+1
 29911  335D  082D               	movf	nullifyBadge_userLedsSet@userLedData,w
 29912  335E  00AB               	movwf	displayL2_SetUserLeds@userLedData
 29913  335F  082F               	movf	nullifyBadge_userLedsSet@badge,w
 29914  3360  31B4  24F1         	fcall	_displayL2_SetUserLeds
 29915  3362  0008               	return
 29916  3363                     __end_of_nullifyBadge_userLedsSet:	
 29917                           
 29918                           	psect	text60
 29919  34F1                     __ptext60:	
 29920 ;; *************** function _displayL2_SetUserLeds *****************
 29921 ;; Defined at:
 29922 ;;		line 88 in file "nullifyBadge_displayL2.c"
 29923 ;; Parameters:    Size  Location     Type
 29924 ;;  display         1    wreg     PTR struct t_nullifyDisp
 29925 ;;		 -> badge_inst(18), 
 29926 ;;  userLedData     2   11[BANK0 ] unsigned int 
 29927 ;; Auto vars:     Size  Location     Type
 29928 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 29929 ;;		 -> badge_inst(18), 
 29930 ;; Return value:  Size  Location     Type
 29931 ;;                  1    wreg      void 
 29932 ;; Registers used:
 29933 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29934 ;; Tracked objects:
 29935 ;;		On entry : 0/0
 29936 ;;		On exit  : 0/0
 29937 ;;		Unchanged: 0/0
 29938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29939 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29942 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29943 ;;Total ram usage:        3 bytes
 29944 ;; Hardware stack levels used:    1
 29945 ;; Hardware stack levels required when called:    7
 29946 ;; This function calls:
 29947 ;;		_displayL1_SetUserLed
 29948 ;;		_displayL1_Update
 29949 ;; This function is called by:
 29950 ;;		_nullifyBadge_userLedsSet
 29951 ;;		_nullifyBadge_userLedsSetForce
 29952 ;; This function uses a non-reentrant model
 29953 ;;
 29954                           
 29955                           
 29956                           ;psect for function _displayL2_SetUserLeds
 29957  34F1                     _displayL2_SetUserLeds:	
 29958                           
 29959                           ;incstack = 0
 29960                           ; Regs used in _displayL2_SetUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 29961                           ;displayL2_SetUserLeds@display stored from wreg
 29962  34F1  00FB               	movwf	displayL2_SetUserLeds@display
 29963                           
 29964                           ;nullifyBadge_displayL2.c: 89: display->ledVect = userLedData;
 29965  34F2  087B               	movf	displayL2_SetUserLeds@display,w
 29966  34F3  3E05               	addlw	5
 29967  34F4  0086               	movwf	6
 29968  34F5  3001               	movlw	1	; select bank2/3
 29969  34F6  0087               	movwf	7
 29970  34F7  0020               	movlb	0	; select bank0
 29971  34F8  082B               	movf	displayL2_SetUserLeds@userLedData,w
 29972  34F9  3FC0               	movwi [0]fsr1
 29973  34FA  082C               	movf	displayL2_SetUserLeds@userLedData+1,w
 29974  34FB  3FC1               	movwi [1]fsr1
 29975                           
 29976                           ;nullifyBadge_displayL2.c: 90: displayL1_SetUserLed(&display->display_l1, display->ledVe
      +                          ct);
 29977  34FC  087B               	movf	displayL2_SetUserLeds@display,w
 29978  34FD  3E05               	addlw	5
 29979  34FE  0086               	movwf	6
 29980  34FF  3001               	movlw	1	; select bank2/3
 29981  3500  0087               	movwf	7
 29982  3501  3F40               	moviw [0]fsr1
 29983  3502  00F1               	movwf	displayL1_SetUserLed@userLedVect
 29984  3503  3F41               	moviw [1]fsr1
 29985  3504  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 29986  3505  087B               	movf	displayL2_SetUserLeds@display,w
 29987  3506  3E07               	addlw	7
 29988  3507  31B3  2374  31B4   	fcall	_displayL1_SetUserLed
 29989                           
 29990                           ;nullifyBadge_displayL2.c: 91: displayL1_Update(&display->display_l1);
 29991  350A  087B               	movf	displayL2_SetUserLeds@display,w
 29992  350B  3E07               	addlw	7
 29993  350C  31B3  2341         	fcall	_displayL1_Update
 29994  350E  0008               	return
 29995  350F                     __end_of_displayL2_SetUserLeds:	
 29996                           
 29997                           	psect	text61
 29998  3374                     __ptext61:	
 29999 ;; *************** function _displayL1_SetUserLed *****************
 30000 ;; Defined at:
 30001 ;;		line 71 in file "nullifyBadge_displayL1.c"
 30002 ;; Parameters:    Size  Location     Type
 30003 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30004 ;;		 -> badge_inst(18), 
 30005 ;;  userLedVect     2    1[COMMON] unsigned int 
 30006 ;; Auto vars:     Size  Location     Type
 30007 ;;  display         1    4[COMMON] PTR struct t_nullifyDisp
 30008 ;;		 -> badge_inst(18), 
 30009 ;; Return value:  Size  Location     Type
 30010 ;;                  1    wreg      void 
 30011 ;; Registers used:
 30012 ;;		wreg, fsr1l, fsr1h, status,2
 30013 ;; Tracked objects:
 30014 ;;		On entry : 0/0
 30015 ;;		On exit  : 0/0
 30016 ;;		Unchanged: 0/0
 30017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30019 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30021 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30022 ;;Total ram usage:        4 bytes
 30023 ;; Hardware stack levels used:    1
 30024 ;; Hardware stack levels required when called:    4
 30025 ;; This function calls:
 30026 ;;		Nothing
 30027 ;; This function is called by:
 30028 ;;		_displayL2_SetUserLeds
 30029 ;;		_displayL2_ClrUserLeds
 30030 ;; This function uses a non-reentrant model
 30031 ;;
 30032                           
 30033                           
 30034                           ;psect for function _displayL1_SetUserLed
 30035  3374                     _displayL1_SetUserLed:	
 30036                           
 30037                           ;incstack = 0
 30038                           ; Regs used in _displayL1_SetUserLed: [wreg+fsr1l+fsr1h+status,2]
 30039                           ;displayL1_SetUserLed@display stored from wreg
 30040  3374  00F4               	movwf	displayL1_SetUserLed@display
 30041                           
 30042                           ;nullifyBadge_displayL1.c: 73: display->displayVect[0] = (u8) (userLedVect >> 8);
 30043  3375  0872               	movf	displayL1_SetUserLed@userLedVect+1,w
 30044  3376  00F3               	movwf	??_displayL1_SetUserLed
 30045  3377  0874               	movf	displayL1_SetUserLed@display,w
 30046  3378  0086               	movwf	6
 30047  3379  3001               	movlw	1	; select bank2/3
 30048  337A  0087               	movwf	7
 30049  337B  0873               	movf	??_displayL1_SetUserLed,w
 30050  337C  0081               	movwf	1
 30051                           
 30052                           ;nullifyBadge_displayL1.c: 74: display->displayVect[1] = (u8) (userLedVect & 0xFF);
 30053  337D  0871               	movf	displayL1_SetUserLed@userLedVect,w
 30054  337E  00F3               	movwf	??_displayL1_SetUserLed
 30055  337F  0A74               	incf	displayL1_SetUserLed@display,w
 30056  3380  0086               	movwf	6
 30057  3381  3001               	movlw	1	; select bank2/3
 30058  3382  0087               	movwf	7
 30059  3383  0873               	movf	??_displayL1_SetUserLed,w
 30060  3384  0081               	movwf	1
 30061  3385  0008               	return
 30062  3386                     __end_of_displayL1_SetUserLed:	
 30063                           
 30064                           	psect	text62
 30065  2200                     __ptext62:	
 30066 ;; *************** function _flashy_display_option *****************
 30067 ;; Defined at:
 30068 ;;		line 105 in file "flashy_task.c"
 30069 ;; Parameters:    Size  Location     Type
 30070 ;;  data            2   44[BANK0 ] PTR struct t_flashy_task
 30071 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 30072 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 30073 ;; Auto vars:     Size  Location     Type
 30074 ;;		None
 30075 ;; Return value:  Size  Location     Type
 30076 ;;                  1    wreg      void 
 30077 ;; Registers used:
 30078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30079 ;; Tracked objects:
 30080 ;;		On entry : 0/0
 30081 ;;		On exit  : 0/0
 30082 ;;		Unchanged: 0/0
 30083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30084 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30087 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30088 ;;Total ram usage:        2 bytes
 30089 ;; Hardware stack levels used:    1
 30090 ;; Hardware stack levels required when called:   10
 30091 ;; This function calls:
 30092 ;;		_marquee
 30093 ;;		_marquee_speedy
 30094 ;;		_nullifyBadge_segDisplayForceUpdate
 30095 ;;		_nullifyBadge_segDisplayPutStr
 30096 ;; This function is called by:
 30097 ;;		_flashy_Main
 30098 ;; This function uses a non-reentrant model
 30099 ;;
 30100                           
 30101                           
 30102                           ;psect for function _flashy_display_option
 30103  2200                     _flashy_display_option:	
 30104                           
 30105                           ;flashy_task.c: 106: if (flashy_option_idx == 0){
 30106                           
 30107                           ;incstack = 0
 30108                           ; Regs used in _flashy_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30109  2200  0021               	movlb	1	; select bank1
 30110  2201  0828               	movf	_flashy_option_idx^(0+128),w
 30111  2202  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 30112  2203  1D03               	btfss	3,2
 30113  2204  2A20               	goto	l8637
 30114                           
 30115                           ;flashy_task.c: 107: nullifyBadge_segDisplayPutStr(data->badge, flashy_option[flashy_opt
      +                          ion_idx]);
 30116  2205  3528               	lslf	_flashy_option_idx^(0+128),w
 30117  2206  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 30118  2207  0086               	movwf	6
 30119  2208  3005               	movlw	5	; select bank10/11
 30120  2209  0087               	movwf	7
 30121  220A  3F40               	moviw [0]fsr1
 30122  220B  0020               	movlb	0	; select bank0
 30123  220C  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30124  220D  3F41               	moviw [1]fsr1
 30125  220E  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30126  220F  084C               	movf	flashy_display_option@data,w
 30127  2210  0086               	movwf	6
 30128  2211  084D               	movf	flashy_display_option@data+1,w
 30129  2212  0087               	movwf	7
 30130  2213  0801               	movf	1,w
 30131  2214  31B2  2279  31A2   	fcall	_nullifyBadge_segDisplayPutStr
 30132                           
 30133                           ;flashy_task.c: 108: nullifyBadge_segDisplayForceUpdate(data->badge);
 30134  2217  0020               	movlb	0	; select bank0
 30135  2218  084C               	movf	flashy_display_option@data,w
 30136  2219  0086               	movwf	6
 30137  221A  084D               	movf	flashy_display_option@data+1,w
 30138  221B  0087               	movwf	7
 30139  221C  0801               	movf	1,w
 30140  221D  31B2  2237         	fcall	_nullifyBadge_segDisplayForceUpdate
 30141                           
 30142                           ;flashy_task.c: 109: }
 30143  221F  0008               	return
 30144  2220                     l8637:	
 30145                           
 30146                           ;flashy_task.c: 110: else {
 30147                           ;flashy_task.c: 111: if (data->display_state==FLASHY_STATE_DISPLAY ){
 30148  2220  0020               	movlb	0	; select bank0
 30149  2221  084C               	movf	flashy_display_option@data,w
 30150  2222  0086               	movwf	6
 30151  2223  084D               	movf	flashy_display_option@data+1,w
 30152  2224  0087               	movwf	7
 30153  2225  3146               	addfsr 1,6
 30154  2226  0801               	movf	1,w
 30155  2227  1D03               	btfss	3,2
 30156  2228  2A48               	goto	l8641
 30157                           
 30158                           ;flashy_task.c: 113: marquee_speedy(flashy_option[flashy_option_idx], data->noholdCount,
      +                           flashy_scroll_rate);
 30159  2229  0021               	movlb	1	; select bank1
 30160  222A  3528               	lslf	_flashy_option_idx^(0+128),w
 30161  222B  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 30162  222C  0086               	movwf	6
 30163  222D  3005               	movlw	5	; select bank10/11
 30164  222E  0087               	movwf	7
 30165  222F  3F40               	moviw [0]fsr1
 30166  2230  0020               	movlb	0	; select bank0
 30167  2231  00BA               	movwf	marquee_speedy@string
 30168  2232  3F41               	moviw [1]fsr1
 30169  2233  00BB               	movwf	marquee_speedy@string+1
 30170  2234  084C               	movf	flashy_display_option@data,w
 30171  2235  0086               	movwf	6
 30172  2236  084D               	movf	flashy_display_option@data+1,w
 30173  2237  0087               	movwf	7
 30174  2238  315C               	addfsr 1,28
 30175  2239  3F40               	moviw [0]fsr1
 30176  223A  00BC               	movwf	marquee_speedy@count
 30177  223B  3F41               	moviw [1]fsr1
 30178  223C  00BD               	movwf	marquee_speedy@count+1
 30179  223D  0021               	movlb	1	; select bank1
 30180  223E  082D               	movf	(_flashy_scroll_rate+1)^(0+128),w
 30181  223F  0020               	movlb	0	; select bank0
 30182  2240  00BF               	movwf	marquee_speedy@multiplier+1
 30183  2241  0021               	movlb	1	; select bank1
 30184  2242  082C               	movf	_flashy_scroll_rate^(0+128),w
 30185  2243  0020               	movlb	0	; select bank0
 30186  2244  00BE               	movwf	marquee_speedy@multiplier
 30187  2245  31A2  225F         	fcall	_marquee_speedy
 30188                           
 30189                           ;flashy_task.c: 114: }
 30190  2247  0008               	return
 30191  2248                     l8641:	
 30192                           
 30193                           ;flashy_task.c: 115: else{
 30194                           ;flashy_task.c: 116: marquee(flashy_option[flashy_option_idx], data->noholdCount);
 30195  2248  0021               	movlb	1	; select bank1
 30196  2249  3528               	lslf	_flashy_option_idx^(0+128),w
 30197  224A  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 30198  224B  0086               	movwf	6
 30199  224C  3005               	movlw	5	; select bank10/11
 30200  224D  0087               	movwf	7
 30201  224E  3F40               	moviw [0]fsr1
 30202  224F  0020               	movlb	0	; select bank0
 30203  2250  00BA               	movwf	marquee@string
 30204  2251  3F41               	moviw [1]fsr1
 30205  2252  00BB               	movwf	marquee@string+1
 30206  2253  084C               	movf	flashy_display_option@data,w
 30207  2254  0086               	movwf	6
 30208  2255  084D               	movf	flashy_display_option@data+1,w
 30209  2256  0087               	movwf	7
 30210  2257  315C               	addfsr 1,28
 30211  2258  3F40               	moviw [0]fsr1
 30212  2259  00BC               	movwf	marquee@count
 30213  225A  3F41               	moviw [1]fsr1
 30214  225B  00BD               	movwf	marquee@count+1
 30215  225C  31A2  22D2         	fcall	_marquee
 30216  225E  0008               	return
 30217  225F                     __end_of_flashy_display_option:	
 30218                           
 30219                           	psect	text63
 30220  225F                     __ptext63:	
 30221 ;; *************** function _marquee_speedy *****************
 30222 ;; Defined at:
 30223 ;;		line 133 in file "main.c"
 30224 ;; Parameters:    Size  Location     Type
 30225 ;;  string          2   26[BANK0 ] PTR unsigned char 
 30226 ;;		 -> STR_82(23), STR_81(27), STR_80(46), STR_79(8), 
 30227 ;;		 -> STR_78(7), STR_77(8), STR_76(6), STR_75(10), 
 30228 ;;		 -> STR_74(5), STR_73(7), STR_72(9), STR_71(7), 
 30229 ;;		 -> STR_70(7), STR_39(5), STR_38(43), STR_37(13), 
 30230 ;;		 -> STR_36(47), STR_35(17), STR_34(120), STR_33(34), 
 30231 ;;		 -> STR_32(16), STR_31(35), STR_30(15), STR_29(12), 
 30232 ;;		 -> STR_28(29), STR_27(19), STR_26(17), STR_25(40), 
 30233 ;;		 -> STR_24(27), STR_23(29), STR_22(30), STR_21(36), 
 30234 ;;		 -> STR_20(28), STR_19(22), STR_18(8), STR_17(26), 
 30235 ;;		 -> STR_16(21), STR_15(19), STR_14(6), STR_13(8), 
 30236 ;;		 -> STR_12(9), STR_11(5), matrix_TaskData(31), secret_TaskData(14), 
 30237 ;;		 -> locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), 
 30238 ;;		 -> NULL(0), 
 30239 ;;  count           2   28[BANK0 ] unsigned int 
 30240 ;;  multiplier      2   30[BANK0 ] unsigned int 
 30241 ;; Auto vars:     Size  Location     Type
 30242 ;;  j               2   42[BANK0 ] unsigned int 
 30243 ;;  display_stri    5   33[BANK0 ] unsigned char [5]
 30244 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 30245 ;;  i               2   38[BANK0 ] unsigned int 
 30246 ;; Return value:  Size  Location     Type
 30247 ;;                  1    wreg      void 
 30248 ;; Registers used:
 30249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30250 ;; Tracked objects:
 30251 ;;		On entry : 0/0
 30252 ;;		On exit  : 0/0
 30253 ;;		Unchanged: 0/0
 30254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30255 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30256 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30258 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30259 ;;Total ram usage:       18 bytes
 30260 ;; Hardware stack levels used:    1
 30261 ;; Hardware stack levels required when called:    9
 30262 ;; This function calls:
 30263 ;;		___lwdiv
 30264 ;;		___lwmod
 30265 ;;		_nullifyBadge_segDisplayForceUpdate
 30266 ;;		_nullifyBadge_segDisplayPutStr
 30267 ;;		_strlen
 30268 ;; This function is called by:
 30269 ;;		_flashy_display_option
 30270 ;;		_slot_Main
 30271 ;;		_matrix_display_option
 30272 ;; This function uses a non-reentrant model
 30273 ;;
 30274                           
 30275                           
 30276                           ;psect for function _marquee_speedy
 30277  225F                     _marquee_speedy:	
 30278                           
 30279                           ;main.c: 134: u16 string_length = strlen((const char *) string);
 30280                           
 30281                           ;incstack = 0
 30282                           ; Regs used in _marquee_speedy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30283  225F  0020               	movlb	0	; select bank0
 30284  2260  083B               	movf	marquee_speedy@string+1,w
 30285  2261  00F2               	movwf	strlen@s+1
 30286  2262  083A               	movf	marquee_speedy@string,w
 30287  2263  00F1               	movwf	strlen@s
 30288  2264  31B4  24D3  31A2   	fcall	_strlen
 30289  2267  0872               	movf	?_strlen+1,w
 30290  2268  0020               	movlb	0	; select bank0
 30291  2269  00C9               	movwf	marquee_speedy@string_length+1
 30292  226A  0871               	movf	?_strlen,w
 30293  226B  00C8               	movwf	marquee_speedy@string_length
 30294                           
 30295                           ;main.c: 135: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 30296  226C  30C7               	movlw	low marquee_speedy@F14090
 30297  226D  0086               	movwf	6
 30298  226E  3000               	movlw	high marquee_speedy@F14090
 30299  226F  0087               	movwf	7
 30300  2270  3041               	movlw	low marquee_speedy@display_string
 30301  2271  0084               	movwf	4
 30302  2272  3000               	movlw	high marquee_speedy@display_string
 30303  2273  0085               	movwf	5
 30304  2274  3005               	movlw	5
 30305  2275  00C0               	movwf	??_marquee_speedy
 30306  2276                     u4950:	
 30307  2276  0016               	moviw fsr1++
 30308  2277  001A               	movwi fsr0++
 30309  2278  0BC0               	decfsz	??_marquee_speedy,f
 30310  2279  2A76               	goto	u4950
 30311                           
 30312                           ;main.c: 136: u16 i = (count / multiplier) % string_length;
 30313  227A  0849               	movf	marquee_speedy@string_length+1,w
 30314  227B  00AC               	movwf	___lwmod@divisor+1
 30315  227C  0848               	movf	marquee_speedy@string_length,w
 30316  227D  00AB               	movwf	___lwmod@divisor
 30317  227E  083F               	movf	marquee_speedy@multiplier+1,w
 30318  227F  00F2               	movwf	___lwdiv@divisor+1
 30319  2280  083E               	movf	marquee_speedy@multiplier,w
 30320  2281  00F1               	movwf	___lwdiv@divisor
 30321  2282  083D               	movf	marquee_speedy@count+1,w
 30322  2283  00F4               	movwf	___lwdiv@dividend+1
 30323  2284  083C               	movf	marquee_speedy@count,w
 30324  2285  00F3               	movwf	___lwdiv@dividend
 30325  2286  31B6  26E0  31A2   	fcall	___lwdiv
 30326  2289  0872               	movf	?___lwdiv+1,w
 30327  228A  0020               	movlb	0	; select bank0
 30328  228B  00AE               	movwf	___lwmod@dividend+1
 30329  228C  0871               	movf	?___lwdiv,w
 30330  228D  00AD               	movwf	___lwmod@dividend
 30331  228E  31B5  25EF  31A2   	fcall	___lwmod
 30332  2291  0020               	movlb	0	; select bank0
 30333  2292  082C               	movf	?___lwmod+1,w
 30334  2293  00C7               	movwf	marquee_speedy@i+1
 30335  2294  082B               	movf	?___lwmod,w
 30336  2295  00C6               	movwf	marquee_speedy@i
 30337                           
 30338                           ;main.c: 138: for (u16 j=0; j < 4; j++){
 30339  2296  01CA               	clrf	marquee_speedy@j
 30340  2297  01CB               	clrf	marquee_speedy@j+1
 30341  2298  3000               	movlw	0
 30342  2299  024B               	subwf	marquee_speedy@j+1,w
 30343  229A  3004               	movlw	4
 30344  229B  1903               	skipnz
 30345  229C  024A               	subwf	marquee_speedy@j,w
 30346  229D  1803               	btfsc	3,0
 30347  229E  2AC6               	goto	l8413
 30348  229F                     l8407:	
 30349                           
 30350                           ;main.c: 139: display_string[j] = string[(i + j) % string_length];
 30351  229F  0849               	movf	marquee_speedy@string_length+1,w
 30352  22A0  00AC               	movwf	___lwmod@divisor+1
 30353  22A1  0848               	movf	marquee_speedy@string_length,w
 30354  22A2  00AB               	movwf	___lwmod@divisor
 30355  22A3  084A               	movf	marquee_speedy@j,w
 30356  22A4  0746               	addwf	marquee_speedy@i,w
 30357  22A5  00AD               	movwf	___lwmod@dividend
 30358  22A6  084B               	movf	marquee_speedy@j+1,w
 30359  22A7  3D47               	addwfc	marquee_speedy@i+1,w
 30360  22A8  00AE               	movwf	___lwmod@dividend+1
 30361  22A9  31B5  25EF  31A2   	fcall	___lwmod
 30362  22AC  0020               	movlb	0	; select bank0
 30363  22AD  083A               	movf	marquee_speedy@string,w
 30364  22AE  072B               	addwf	?___lwmod,w
 30365  22AF  0084               	movwf	4
 30366  22B0  083B               	movf	marquee_speedy@string+1,w
 30367  22B1  3D2C               	addwfc	?___lwmod+1,w
 30368  22B2  0085               	movwf	5
 30369  22B3  0800               	movf	0,w	;code access
 30370  22B4  00C0               	movwf	??_marquee_speedy
 30371  22B5  084A               	movf	marquee_speedy@j,w
 30372  22B6  3E41               	addlw	(low (marquee_speedy@display_string| 0))& (0+255)
 30373  22B7  0086               	movwf	6
 30374  22B8  0187               	clrf	7
 30375  22B9  0840               	movf	??_marquee_speedy,w
 30376  22BA  0081               	movwf	1
 30377  22BB  3001               	movlw	1
 30378  22BC  07CA               	addwf	marquee_speedy@j,f
 30379  22BD  3000               	movlw	0
 30380  22BE  3DCB               	addwfc	marquee_speedy@j+1,f
 30381  22BF  3000               	movlw	0
 30382  22C0  024B               	subwf	marquee_speedy@j+1,w
 30383  22C1  3004               	movlw	4
 30384  22C2  1903               	skipnz
 30385  22C3  024A               	subwf	marquee_speedy@j,w
 30386  22C4  1C03               	skipc
 30387  22C5  2A9F               	goto	l8407
 30388  22C6                     l8413:	
 30389                           
 30390                           ;main.c: 140: }
 30391                           ;main.c: 141: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 30392  22C6  3041               	movlw	low marquee_speedy@display_string
 30393  22C7  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30394  22C8  3000               	movlw	high marquee_speedy@display_string
 30395  22C9  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30396  22CA  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30397  22CB  31B2  2279  31A2   	fcall	_nullifyBadge_segDisplayPutStr
 30398                           
 30399                           ;main.c: 142: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 30400  22CE  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30401  22CF  31B2  2237         	fcall	_nullifyBadge_segDisplayForceUpdate
 30402  22D1  0008               	return
 30403  22D2                     __end_of_marquee_speedy:	
 30404                           
 30405                           	psect	text64
 30406  22D2                     __ptext64:	
 30407 ;; *************** function _marquee *****************
 30408 ;; Defined at:
 30409 ;;		line 146 in file "main.c"
 30410 ;; Parameters:    Size  Location     Type
 30411 ;;  string          2   26[BANK0 ] PTR unsigned char 
 30412 ;;		 -> STR_45(5), STR_44(5), STR_43(11), STR_42(13), 
 30413 ;;		 -> STR_39(5), STR_38(43), STR_37(13), STR_36(47), 
 30414 ;;		 -> STR_35(17), STR_34(120), STR_33(34), STR_32(16), 
 30415 ;;		 -> STR_31(35), STR_30(15), STR_29(12), STR_28(29), 
 30416 ;;		 -> STR_27(19), STR_26(17), STR_25(40), STR_24(27), 
 30417 ;;		 -> STR_23(29), STR_22(30), STR_21(36), STR_20(28), 
 30418 ;;		 -> STR_19(22), STR_18(8), STR_17(26), STR_16(21), 
 30419 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 30420 ;;		 -> STR_11(5), STR_10(18), STR_8(6), STR_7(8), 
 30421 ;;		 -> STR_6(10), STR_5(6), STR_4(5), matrix_TaskData(31), 
 30422 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 30423 ;;		 -> flashy_TaskData(30), NULL(0), 
 30424 ;;  count           2   28[BANK0 ] unsigned int 
 30425 ;; Auto vars:     Size  Location     Type
 30426 ;;  j               2   42[BANK0 ] unsigned int 
 30427 ;;  display_stri    5   31[BANK0 ] unsigned char [5]
 30428 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 30429 ;;  i               2   38[BANK0 ] unsigned int 
 30430 ;;  multiplier      2   36[BANK0 ] unsigned int 
 30431 ;; Return value:  Size  Location     Type
 30432 ;;                  1    wreg      void 
 30433 ;; Registers used:
 30434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30435 ;; Tracked objects:
 30436 ;;		On entry : 0/0
 30437 ;;		On exit  : 0/0
 30438 ;;		Unchanged: 0/0
 30439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30440 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30441 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30443 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30444 ;;Total ram usage:       18 bytes
 30445 ;; Hardware stack levels used:    1
 30446 ;; Hardware stack levels required when called:    9
 30447 ;; This function calls:
 30448 ;;		___lwdiv
 30449 ;;		___lwmod
 30450 ;;		_nullifyBadge_segDisplayForceUpdate
 30451 ;;		_nullifyBadge_segDisplayPutStr
 30452 ;;		_strlen
 30453 ;; This function is called by:
 30454 ;;		_menu_display_option
 30455 ;;		_flashy_display_option
 30456 ;;		_flashy_Main
 30457 ;;		_locked_Main
 30458 ;;		_slot_Main
 30459 ;; This function uses a non-reentrant model
 30460 ;;
 30461                           
 30462                           
 30463                           ;psect for function _marquee
 30464  22D2                     _marquee:	
 30465                           
 30466                           ;main.c: 147: u16 multiplier = 50;
 30467                           
 30468                           ;incstack = 0
 30469                           ; Regs used in _marquee: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30470  22D2  3032               	movlw	50
 30471  22D3  0020               	movlb	0	; select bank0
 30472  22D4  00C4               	movwf	marquee@multiplier
 30473  22D5  3000               	movlw	0
 30474  22D6  00C5               	movwf	marquee@multiplier+1
 30475                           
 30476                           ;main.c: 148: u16 string_length = strlen((const char *) string);
 30477  22D7  083B               	movf	marquee@string+1,w
 30478  22D8  00F2               	movwf	strlen@s+1
 30479  22D9  083A               	movf	marquee@string,w
 30480  22DA  00F1               	movwf	strlen@s
 30481  22DB  31B4  24D3  31A2   	fcall	_strlen
 30482  22DE  0872               	movf	?_strlen+1,w
 30483  22DF  0020               	movlb	0	; select bank0
 30484  22E0  00C9               	movwf	marquee@string_length+1
 30485  22E1  0871               	movf	?_strlen,w
 30486  22E2  00C8               	movwf	marquee@string_length
 30487                           
 30488                           ;main.c: 149: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 30489  22E3  30E3               	movlw	low marquee@F14099
 30490  22E4  0086               	movwf	6
 30491  22E5  3001               	movlw	high marquee@F14099
 30492  22E6  0087               	movwf	7
 30493  22E7  303F               	movlw	low marquee@display_string
 30494  22E8  0084               	movwf	4
 30495  22E9  3000               	movlw	high marquee@display_string
 30496  22EA  0085               	movwf	5
 30497  22EB  3005               	movlw	5
 30498  22EC  00BE               	movwf	??_marquee
 30499  22ED                     u4980:	
 30500  22ED  0016               	moviw fsr1++
 30501  22EE  001A               	movwi fsr0++
 30502  22EF  0BBE               	decfsz	??_marquee,f
 30503  22F0  2AED               	goto	u4980
 30504                           
 30505                           ;main.c: 150: u16 i = (count / multiplier) % string_length;
 30506  22F1  0849               	movf	marquee@string_length+1,w
 30507  22F2  00AC               	movwf	___lwmod@divisor+1
 30508  22F3  0848               	movf	marquee@string_length,w
 30509  22F4  00AB               	movwf	___lwmod@divisor
 30510  22F5  0845               	movf	marquee@multiplier+1,w
 30511  22F6  00F2               	movwf	___lwdiv@divisor+1
 30512  22F7  0844               	movf	marquee@multiplier,w
 30513  22F8  00F1               	movwf	___lwdiv@divisor
 30514  22F9  083D               	movf	marquee@count+1,w
 30515  22FA  00F4               	movwf	___lwdiv@dividend+1
 30516  22FB  083C               	movf	marquee@count,w
 30517  22FC  00F3               	movwf	___lwdiv@dividend
 30518  22FD  31B6  26E0  31A2   	fcall	___lwdiv
 30519  2300  0872               	movf	?___lwdiv+1,w
 30520  2301  0020               	movlb	0	; select bank0
 30521  2302  00AE               	movwf	___lwmod@dividend+1
 30522  2303  0871               	movf	?___lwdiv,w
 30523  2304  00AD               	movwf	___lwmod@dividend
 30524  2305  31B5  25EF  31A2   	fcall	___lwmod
 30525  2308  0020               	movlb	0	; select bank0
 30526  2309  082C               	movf	?___lwmod+1,w
 30527  230A  00C7               	movwf	marquee@i+1
 30528  230B  082B               	movf	?___lwmod,w
 30529  230C  00C6               	movwf	marquee@i
 30530                           
 30531                           ;main.c: 152: for (u16 j=0; j < 4; j++){
 30532  230D  01CA               	clrf	marquee@j
 30533  230E  01CB               	clrf	marquee@j+1
 30534  230F  3000               	movlw	0
 30535  2310  024B               	subwf	marquee@j+1,w
 30536  2311  3004               	movlw	4
 30537  2312  1903               	skipnz
 30538  2313  024A               	subwf	marquee@j,w
 30539  2314  1803               	btfsc	3,0
 30540  2315  2B3D               	goto	l8437
 30541  2316                     l8431:	
 30542                           
 30543                           ;main.c: 153: display_string[j] = string[(i + j) % string_length];
 30544  2316  0849               	movf	marquee@string_length+1,w
 30545  2317  00AC               	movwf	___lwmod@divisor+1
 30546  2318  0848               	movf	marquee@string_length,w
 30547  2319  00AB               	movwf	___lwmod@divisor
 30548  231A  084A               	movf	marquee@j,w
 30549  231B  0746               	addwf	marquee@i,w
 30550  231C  00AD               	movwf	___lwmod@dividend
 30551  231D  084B               	movf	marquee@j+1,w
 30552  231E  3D47               	addwfc	marquee@i+1,w
 30553  231F  00AE               	movwf	___lwmod@dividend+1
 30554  2320  31B5  25EF  31A2   	fcall	___lwmod
 30555  2323  0020               	movlb	0	; select bank0
 30556  2324  083A               	movf	marquee@string,w
 30557  2325  072B               	addwf	?___lwmod,w
 30558  2326  0084               	movwf	4
 30559  2327  083B               	movf	marquee@string+1,w
 30560  2328  3D2C               	addwfc	?___lwmod+1,w
 30561  2329  0085               	movwf	5
 30562  232A  0800               	movf	0,w	;code access
 30563  232B  00BE               	movwf	??_marquee
 30564  232C  084A               	movf	marquee@j,w
 30565  232D  3E3F               	addlw	(low (marquee@display_string| 0))& (0+255)
 30566  232E  0086               	movwf	6
 30567  232F  0187               	clrf	7
 30568  2330  083E               	movf	??_marquee,w
 30569  2331  0081               	movwf	1
 30570  2332  3001               	movlw	1
 30571  2333  07CA               	addwf	marquee@j,f
 30572  2334  3000               	movlw	0
 30573  2335  3DCB               	addwfc	marquee@j+1,f
 30574  2336  3000               	movlw	0
 30575  2337  024B               	subwf	marquee@j+1,w
 30576  2338  3004               	movlw	4
 30577  2339  1903               	skipnz
 30578  233A  024A               	subwf	marquee@j,w
 30579  233B  1C03               	skipc
 30580  233C  2B16               	goto	l8431
 30581  233D                     l8437:	
 30582                           
 30583                           ;main.c: 154: }
 30584                           ;main.c: 155: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 30585  233D  303F               	movlw	low marquee@display_string
 30586  233E  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30587  233F  3000               	movlw	high marquee@display_string
 30588  2340  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30589  2341  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30590  2342  31B2  2279  31A2   	fcall	_nullifyBadge_segDisplayPutStr
 30591                           
 30592                           ;main.c: 156: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 30593  2345  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30594  2346  31B2  2237         	fcall	_nullifyBadge_segDisplayForceUpdate
 30595  2348  0008               	return
 30596  2349                     __end_of_marquee:	
 30597                           
 30598                           	psect	text65
 30599  34D3                     __ptext65:	
 30600 ;; *************** function _strlen *****************
 30601 ;; Defined at:
 30602 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/strlen.c"
 30603 ;; Parameters:    Size  Location     Type
 30604 ;;  s               2    1[COMMON] PTR const unsigned char 
 30605 ;;		 -> STR_82(23), STR_81(27), STR_80(46), matrix_secret_inputs.inputs(20), 
 30606 ;;		 -> matrix_secret_inputs(25), STR_79(8), STR_78(7), STR_77(8), 
 30607 ;;		 -> STR_76(6), STR_75(10), STR_74(5), STR_73(7), 
 30608 ;;		 -> STR_72(9), STR_71(7), STR_70(7), Slot_Wheel(55), 
 30609 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), STR_45(5), STR_44(5), 
 30610 ;;		 -> STR_43(11), STR_42(13), locked_secret_inputs.inputs(20), locked_secret_inputs(25), 
 30611 ;;		 -> STR_39(5), STR_38(43), STR_37(13), STR_36(47), 
 30612 ;;		 -> STR_35(17), STR_34(120), STR_33(34), STR_32(16), 
 30613 ;;		 -> STR_31(35), STR_30(15), STR_29(12), STR_28(29), 
 30614 ;;		 -> STR_27(19), STR_26(17), STR_25(40), STR_24(27), 
 30615 ;;		 -> STR_23(29), STR_22(30), STR_21(36), STR_20(28), 
 30616 ;;		 -> STR_19(22), STR_18(8), STR_17(26), STR_16(21), 
 30617 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 30618 ;;		 -> STR_11(5), STR_10(18), STR_8(6), STR_7(8), 
 30619 ;;		 -> STR_6(10), STR_5(6), STR_4(5), matrix_TaskData(31), 
 30620 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 30621 ;;		 -> flashy_TaskData(30), NULL(0), 
 30622 ;; Auto vars:     Size  Location     Type
 30623 ;;  cp              2    5[COMMON] PTR const unsigned char 
 30624 ;;		 -> STR_82(23), STR_81(27), STR_80(46), matrix_secret_inputs.inputs(20), 
 30625 ;;		 -> matrix_secret_inputs(25), STR_79(8), STR_78(7), STR_77(8), 
 30626 ;;		 -> STR_76(6), STR_75(10), STR_74(5), STR_73(7), 
 30627 ;;		 -> STR_72(9), STR_71(7), STR_70(7), Slot_Wheel(55), 
 30628 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), STR_45(5), STR_44(5), 
 30629 ;;		 -> STR_43(11), STR_42(13), locked_secret_inputs.inputs(20), locked_secret_inputs(25), 
 30630 ;;		 -> STR_39(5), STR_38(43), STR_37(13), STR_36(47), 
 30631 ;;		 -> STR_35(17), STR_34(120), STR_33(34), STR_32(16), 
 30632 ;;		 -> STR_31(35), STR_30(15), STR_29(12), STR_28(29), 
 30633 ;;		 -> STR_27(19), STR_26(17), STR_25(40), STR_24(27), 
 30634 ;;		 -> STR_23(29), STR_22(30), STR_21(36), STR_20(28), 
 30635 ;;		 -> STR_19(22), STR_18(8), STR_17(26), STR_16(21), 
 30636 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 30637 ;;		 -> STR_11(5), STR_10(18), STR_8(6), STR_7(8), 
 30638 ;;		 -> STR_6(10), STR_5(6), STR_4(5), matrix_TaskData(31), 
 30639 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 30640 ;;		 -> flashy_TaskData(30), NULL(0), 
 30641 ;; Return value:  Size  Location     Type
 30642 ;;                  2    1[COMMON] unsigned int 
 30643 ;; Registers used:
 30644 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 30645 ;; Tracked objects:
 30646 ;;		On entry : 0/0
 30647 ;;		On exit  : 0/0
 30648 ;;		Unchanged: 0/0
 30649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30650 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30651 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30652 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30653 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30654 ;;Total ram usage:        6 bytes
 30655 ;; Hardware stack levels used:    1
 30656 ;; Hardware stack levels required when called:    4
 30657 ;; This function calls:
 30658 ;;		Nothing
 30659 ;; This function is called by:
 30660 ;;		_marquee_speedy
 30661 ;;		_marquee
 30662 ;;		_locked_secret_check
 30663 ;;		_secret_check
 30664 ;;		_slot_Main
 30665 ;;		_matrix_secret_check
 30666 ;; This function uses a non-reentrant model
 30667 ;;
 30668                           
 30669                           
 30670                           ;psect for function _strlen
 30671  34D3                     _strlen:	
 30672                           
 30673                           ;incstack = 0
 30674                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 30675  34D3  0872               	movf	strlen@s+1,w
 30676  34D4  00F6               	movwf	strlen@cp+1
 30677  34D5  0871               	movf	strlen@s,w
 30678  34D6  00F5               	movwf	strlen@cp
 30679  34D7                     l8289:	
 30680  34D7  0875               	movf	strlen@cp,w
 30681  34D8  0084               	movwf	4
 30682  34D9  0876               	movf	strlen@cp+1,w
 30683  34DA  0085               	movwf	5
 30684  34DB  0012               	moviw fsr0++
 30685  34DC  1903               	btfsc	3,2
 30686  34DD  2CE3               	goto	l8291
 30687  34DE  3001               	movlw	1
 30688  34DF  07F5               	addwf	strlen@cp,f
 30689  34E0  3000               	movlw	0
 30690  34E1  3DF6               	addwfc	strlen@cp+1,f
 30691  34E2  2CD7               	goto	l8289
 30692  34E3                     l8291:	
 30693  34E3  0971               	comf	strlen@s,w
 30694  34E4  00F3               	movwf	??_strlen
 30695  34E5  0972               	comf	strlen@s+1,w
 30696  34E6  00F4               	movwf	??_strlen+1
 30697  34E7  0AF3               	incf	??_strlen,f
 30698  34E8  1903               	skipnz
 30699  34E9  0AF4               	incf	??_strlen+1,f
 30700  34EA  0875               	movf	strlen@cp,w
 30701  34EB  0773               	addwf	??_strlen,w
 30702  34EC  00F1               	movwf	?_strlen
 30703  34ED  0876               	movf	strlen@cp+1,w
 30704  34EE  3D74               	addwfc	??_strlen+1,w
 30705  34EF  00F2               	movwf	?_strlen+1
 30706  34F0  0008               	return
 30707  34F1                     __end_of_strlen:	
 30708                           
 30709                           	psect	text66
 30710  3279                     __ptext66:	
 30711 ;; *************** function _nullifyBadge_segDisplayPutStr *****************
 30712 ;; Defined at:
 30713 ;;		line 113 in file "nullifyBadge.c"
 30714 ;; Parameters:    Size  Location     Type
 30715 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 30716 ;;		 -> badge_inst(18), 
 30717 ;;  str             2   23[BANK0 ] PTR unsigned char 
 30718 ;;		 -> flashy_Main@hit_counter(6), STR_40(5), STR_39(5), STR_38(43), 
 30719 ;;		 -> STR_37(13), STR_36(47), STR_35(17), STR_34(120), 
 30720 ;;		 -> STR_33(34), STR_32(16), STR_31(35), STR_30(15), 
 30721 ;;		 -> STR_29(12), STR_28(29), STR_27(19), STR_26(17), 
 30722 ;;		 -> STR_25(40), STR_24(27), STR_23(29), STR_22(30), 
 30723 ;;		 -> STR_21(36), STR_20(28), STR_19(22), STR_18(8), 
 30724 ;;		 -> STR_17(26), STR_16(21), STR_15(19), STR_14(6), 
 30725 ;;		 -> STR_13(8), STR_12(9), STR_11(5), STR_8(6), 
 30726 ;;		 -> STR_7(8), STR_6(10), STR_5(6), STR_4(5), 
 30727 ;;		 -> marquee@display_string(5), marquee_speedy@display_string(5), 
 30728 ;; Auto vars:     Size  Location     Type
 30729 ;;  badge           1   25[BANK0 ] PTR struct t_nullifyBadg
 30730 ;;		 -> badge_inst(18), 
 30731 ;; Return value:  Size  Location     Type
 30732 ;;                  1    wreg      void 
 30733 ;; Registers used:
 30734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30735 ;; Tracked objects:
 30736 ;;		On entry : 0/0
 30737 ;;		On exit  : 0/0
 30738 ;;		Unchanged: 0/0
 30739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30740 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30743 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30744 ;;Total ram usage:        3 bytes
 30745 ;; Hardware stack levels used:    1
 30746 ;; Hardware stack levels required when called:    8
 30747 ;; This function calls:
 30748 ;;		_displayL2_PutStr
 30749 ;; This function is called by:
 30750 ;;		_marquee_speedy
 30751 ;;		_marquee
 30752 ;;		_menu_display_option
 30753 ;;		_flashy_display_option
 30754 ;;		_flashy_Main
 30755 ;; This function uses a non-reentrant model
 30756 ;;
 30757                           
 30758                           
 30759                           ;psect for function _nullifyBadge_segDisplayPutStr
 30760  3279                     _nullifyBadge_segDisplayPutStr:	
 30761                           
 30762                           ;incstack = 0
 30763                           ; Regs used in _nullifyBadge_segDisplayPutStr: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 30764                           ;nullifyBadge_segDisplayPutStr@badge stored from wreg
 30765  3279  0020               	movlb	0	; select bank0
 30766  327A  00B9               	movwf	nullifyBadge_segDisplayPutStr@badge
 30767                           
 30768                           ;nullifyBadge.c: 114: displayL2_PutStr(&badge->display, str);
 30769  327B  0838               	movf	nullifyBadge_segDisplayPutStr@str+1,w
 30770  327C  00B1               	movwf	displayL2_PutStr@str+1
 30771  327D  0837               	movf	nullifyBadge_segDisplayPutStr@str,w
 30772  327E  00B0               	movwf	displayL2_PutStr@str
 30773  327F  0839               	movf	nullifyBadge_segDisplayPutStr@badge,w
 30774  3280  31B5  25C5         	fcall	_displayL2_PutStr
 30775  3282  0008               	return
 30776  3283                     __end_of_nullifyBadge_segDisplayPutStr:	
 30777                           
 30778                           	psect	text67
 30779  35C5                     __ptext67:	
 30780 ;; *************** function _displayL2_PutStr *****************
 30781 ;; Defined at:
 30782 ;;		line 55 in file "nullifyBadge_displayL2.c"
 30783 ;; Parameters:    Size  Location     Type
 30784 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30785 ;;		 -> badge_inst(18), 
 30786 ;;  str             2   16[BANK0 ] PTR unsigned char 
 30787 ;;		 -> flashy_Main@hit_counter(6), STR_40(5), STR_39(5), STR_38(43), 
 30788 ;;		 -> STR_37(13), STR_36(47), STR_35(17), STR_34(120), 
 30789 ;;		 -> STR_33(34), STR_32(16), STR_31(35), STR_30(15), 
 30790 ;;		 -> STR_29(12), STR_28(29), STR_27(19), STR_26(17), 
 30791 ;;		 -> STR_25(40), STR_24(27), STR_23(29), STR_22(30), 
 30792 ;;		 -> STR_21(36), STR_20(28), STR_19(22), STR_18(8), 
 30793 ;;		 -> STR_17(26), STR_16(21), STR_15(19), STR_14(6), 
 30794 ;;		 -> STR_13(8), STR_12(9), STR_11(5), STR_8(6), 
 30795 ;;		 -> STR_7(8), STR_6(10), STR_5(6), STR_4(5), 
 30796 ;;		 -> STR_3(5), marquee@display_string(5), marquee_speedy@display_string(5), 
 30797 ;; Auto vars:     Size  Location     Type
 30798 ;;  display         1   21[BANK0 ] PTR struct t_nullifyDisp
 30799 ;;		 -> badge_inst(18), 
 30800 ;;  k               1   22[BANK0 ] unsigned char 
 30801 ;; Return value:  Size  Location     Type
 30802 ;;                  1    wreg      void 
 30803 ;; Registers used:
 30804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30805 ;; Tracked objects:
 30806 ;;		On entry : 0/0
 30807 ;;		On exit  : 0/0
 30808 ;;		Unchanged: 0/0
 30809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30810 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30811 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30812 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30813 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30814 ;;Total ram usage:        7 bytes
 30815 ;; Hardware stack levels used:    1
 30816 ;; Hardware stack levels required when called:    7
 30817 ;; This function calls:
 30818 ;;		_displayL2_PutChar
 30819 ;; This function is called by:
 30820 ;;		_nullifyBadge_segDisplayPutStr
 30821 ;;		_displayL2_EraseSegDisplay
 30822 ;; This function uses a non-reentrant model
 30823 ;;
 30824                           
 30825                           
 30826                           ;psect for function _displayL2_PutStr
 30827  35C5                     _displayL2_PutStr:	
 30828                           
 30829                           ;incstack = 0
 30830                           ; Regs used in _displayL2_PutStr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30831                           ;displayL2_PutStr@display stored from wreg
 30832  35C5  0020               	movlb	0	; select bank0
 30833  35C6  00B5               	movwf	displayL2_PutStr@display
 30834                           
 30835                           ;nullifyBadge_displayL2.c: 57: u8 k = 0;
 30836  35C7  01B6               	clrf	displayL2_PutStr@k
 30837  35C8                     l8243:	
 30838                           ;nullifyBadge_displayL2.c: 59: while (str[k] != '\0') {
 30839                           
 30840  35C8  0831               	movf	displayL2_PutStr@str+1,w
 30841  35C9  00B3               	movwf	??_displayL2_PutStr+1
 30842  35CA  0830               	movf	displayL2_PutStr@str,w
 30843  35CB  00B2               	movwf	??_displayL2_PutStr
 30844  35CC  0836               	movf	displayL2_PutStr@k,w
 30845  35CD  0732               	addwf	??_displayL2_PutStr,w
 30846  35CE  0084               	movwf	4
 30847  35CF  0833               	movf	??_displayL2_PutStr+1,w
 30848  35D0  1803               	skipnc
 30849  35D1  0A33               	incf	??_displayL2_PutStr+1,w
 30850  35D2  0085               	movwf	5
 30851  35D3  0012               	moviw fsr0++
 30852  35D4  1903               	btfsc	3,2
 30853  35D5  0008               	return
 30854                           
 30855                           ;nullifyBadge_displayL2.c: 60: displayL2_PutChar(display, str[k]);
 30856  35D6  0831               	movf	displayL2_PutStr@str+1,w
 30857  35D7  00B3               	movwf	??_displayL2_PutStr+1
 30858  35D8  0830               	movf	displayL2_PutStr@str,w
 30859  35D9  00B2               	movwf	??_displayL2_PutStr
 30860  35DA  0836               	movf	displayL2_PutStr@k,w
 30861  35DB  0732               	addwf	??_displayL2_PutStr,w
 30862  35DC  0084               	movwf	4
 30863  35DD  0833               	movf	??_displayL2_PutStr+1,w
 30864  35DE  1803               	skipnc
 30865  35DF  0A33               	incf	??_displayL2_PutStr+1,w
 30866  35E0  0085               	movwf	5
 30867  35E1  0800               	movf	0,w	;code access
 30868  35E2  00B4               	movwf	??_displayL2_PutStr+2
 30869  35E3  0834               	movf	??_displayL2_PutStr+2,w
 30870  35E4  00AA               	movwf	displayL2_PutChar@c
 30871  35E5  0835               	movf	displayL2_PutStr@display,w
 30872  35E6  31AB  23F5  31B5   	fcall	_displayL2_PutChar
 30873                           
 30874                           ;nullifyBadge_displayL2.c: 61: k++;
 30875  35E9  3001               	movlw	1
 30876  35EA  0020               	movlb	0	; select bank0
 30877  35EB  00B2               	movwf	??_displayL2_PutStr
 30878  35EC  0832               	movf	??_displayL2_PutStr,w
 30879  35ED  07B6               	addwf	displayL2_PutStr@k,f
 30880  35EE  2DC8               	goto	l8243
 30881  35EF                     __end_of_displayL2_PutStr:	
 30882                           
 30883                           	psect	text68
 30884  2BF5                     __ptext68:	
 30885 ;; *************** function _displayL2_PutChar *****************
 30886 ;; Defined at:
 30887 ;;		line 38 in file "nullifyBadge_displayL2.c"
 30888 ;; Parameters:    Size  Location     Type
 30889 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30890 ;;		 -> badge_inst(18), 
 30891 ;;  c               1   10[BANK0 ] unsigned char 
 30892 ;; Auto vars:     Size  Location     Type
 30893 ;;  display         1   15[BANK0 ] PTR struct t_nullifyDisp
 30894 ;;		 -> badge_inst(18), 
 30895 ;;  k               1   14[BANK0 ] unsigned char 
 30896 ;; Return value:  Size  Location     Type
 30897 ;;                  1    wreg      void 
 30898 ;; Registers used:
 30899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30900 ;; Tracked objects:
 30901 ;;		On entry : 0/0
 30902 ;;		On exit  : 0/0
 30903 ;;		Unchanged: 0/0
 30904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30905 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30907 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30908 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30909 ;;Total ram usage:        6 bytes
 30910 ;; Hardware stack levels used:    1
 30911 ;; Hardware stack levels required when called:    6
 30912 ;; This function calls:
 30913 ;;		_displayL1_SetSegChar
 30914 ;; This function is called by:
 30915 ;;		_displayL2_PutStr
 30916 ;;		_nullifyBadge_segDisplayPutChar
 30917 ;; This function uses a non-reentrant model
 30918 ;;
 30919                           
 30920                           
 30921                           ;psect for function _displayL2_PutChar
 30922  2BF5                     _displayL2_PutChar:	
 30923                           
 30924                           ;incstack = 0
 30925                           ; Regs used in _displayL2_PutChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30926                           ;displayL2_PutChar@display stored from wreg
 30927  2BF5  0020               	movlb	0	; select bank0
 30928  2BF6  00AF               	movwf	displayL2_PutChar@display
 30929                           
 30930                           ;nullifyBadge_displayL2.c: 40: display->charVect[0] = display->charVect[1];
 30931  2BF7  0A2F               	incf	displayL2_PutChar@display,w
 30932  2BF8  0086               	movwf	6
 30933  2BF9  3001               	movlw	1	; select bank2/3
 30934  2BFA  0087               	movwf	7
 30935  2BFB  0801               	movf	1,w
 30936  2BFC  00AB               	movwf	??_displayL2_PutChar
 30937  2BFD  082F               	movf	displayL2_PutChar@display,w
 30938  2BFE  0086               	movwf	6
 30939  2BFF  3001               	movlw	1	; select bank2/3
 30940  2C00  0087               	movwf	7
 30941  2C01  082B               	movf	??_displayL2_PutChar,w
 30942  2C02  0081               	movwf	1
 30943                           
 30944                           ;nullifyBadge_displayL2.c: 41: display->charVect[1] = display->charVect[2];
 30945  2C03  082F               	movf	displayL2_PutChar@display,w
 30946  2C04  3E02               	addlw	2
 30947  2C05  0086               	movwf	6
 30948  2C06  3001               	movlw	1	; select bank2/3
 30949  2C07  0087               	movwf	7
 30950  2C08  0801               	movf	1,w
 30951  2C09  00AB               	movwf	??_displayL2_PutChar
 30952  2C0A  0A2F               	incf	displayL2_PutChar@display,w
 30953  2C0B  0086               	movwf	6
 30954  2C0C  3001               	movlw	1	; select bank2/3
 30955  2C0D  0087               	movwf	7
 30956  2C0E  082B               	movf	??_displayL2_PutChar,w
 30957  2C0F  0081               	movwf	1
 30958                           
 30959                           ;nullifyBadge_displayL2.c: 42: display->charVect[2] = display->charVect[3];
 30960  2C10  082F               	movf	displayL2_PutChar@display,w
 30961  2C11  3E03               	addlw	3
 30962  2C12  0086               	movwf	6
 30963  2C13  3001               	movlw	1	; select bank2/3
 30964  2C14  0087               	movwf	7
 30965  2C15  0801               	movf	1,w
 30966  2C16  00AB               	movwf	??_displayL2_PutChar
 30967  2C17  082F               	movf	displayL2_PutChar@display,w
 30968  2C18  3E02               	addlw	2
 30969  2C19  0086               	movwf	6
 30970  2C1A  3001               	movlw	1	; select bank2/3
 30971  2C1B  0087               	movwf	7
 30972  2C1C  082B               	movf	??_displayL2_PutChar,w
 30973  2C1D  0081               	movwf	1
 30974                           
 30975                           ;nullifyBadge_displayL2.c: 45: display->charVect[3] = c;
 30976  2C1E  082A               	movf	displayL2_PutChar@c,w
 30977  2C1F  00AB               	movwf	??_displayL2_PutChar
 30978  2C20  082F               	movf	displayL2_PutChar@display,w
 30979  2C21  3E03               	addlw	3
 30980  2C22  0086               	movwf	6
 30981  2C23  3001               	movlw	1	; select bank2/3
 30982  2C24  0087               	movwf	7
 30983  2C25  082B               	movf	??_displayL2_PutChar,w
 30984  2C26  0081               	movwf	1
 30985                           
 30986                           ;nullifyBadge_displayL2.c: 48: u8 k = 0;
 30987  2C27  01AE               	clrf	displayL2_PutChar@k
 30988                           
 30989                           ;nullifyBadge_displayL2.c: 49: for (k = 0; k < 4; k++) {
 30990  2C28  01AE               	clrf	displayL2_PutChar@k
 30991  2C29                     L15:	
 30992  2C29  3004               	movlw	4
 30993  2C2A  022E               	subwf	displayL2_PutChar@k,w
 30994  2C2B  1803               	btfsc	3,0
 30995  2C2C  0008               	return
 30996                           
 30997                           ;nullifyBadge_displayL2.c: 50: displayL1_SetSegChar(&display->display_l1, display->charV
      +                          ect[k], k);
 30998  2C2D  082E               	movf	displayL2_PutChar@k,w
 30999  2C2E  072F               	addwf	displayL2_PutChar@display,w
 31000  2C2F  00AB               	movwf	??_displayL2_PutChar
 31001  2C30  082B               	movf	??_displayL2_PutChar,w
 31002  2C31  0086               	movwf	6
 31003  2C32  3001               	movlw	1	; select bank2/3
 31004  2C33  0087               	movwf	7
 31005  2C34  0801               	movf	1,w
 31006  2C35  00AC               	movwf	??_displayL2_PutChar+1
 31007  2C36  082C               	movf	??_displayL2_PutChar+1,w
 31008  2C37  00A0               	movwf	displayL1_SetSegChar@c
 31009  2C38  082E               	movf	displayL2_PutChar@k,w
 31010  2C39  00AD               	movwf	??_displayL2_PutChar+2
 31011  2C3A  082D               	movf	??_displayL2_PutChar+2,w
 31012  2C3B  00A1               	movwf	displayL1_SetSegChar@charPos
 31013  2C3C  082F               	movf	displayL2_PutChar@display,w
 31014  2C3D  3E07               	addlw	7
 31015  2C3E  31B7  27BF  31AB   	fcall	_displayL1_SetSegChar
 31016  2C41  3001               	movlw	1
 31017  2C42  0020               	movlb	0	; select bank0
 31018  2C43  00AB               	movwf	??_displayL2_PutChar
 31019  2C44  082B               	movf	??_displayL2_PutChar,w
 31020  2C45  07AE               	addwf	displayL2_PutChar@k,f
 31021  2C46  2C29               	goto	L15
 31022  2C47                     __end_of_displayL2_PutChar:	
 31023                           
 31024                           	psect	text69
 31025  37BF                     __ptext69:	
 31026 ;; *************** function _displayL1_SetSegChar *****************
 31027 ;; Defined at:
 31028 ;;		line 18 in file "nullifyBadge_displayL1.c"
 31029 ;; Parameters:    Size  Location     Type
 31030 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31031 ;;		 -> badge_inst(18), 
 31032 ;;  c               1    0[BANK0 ] unsigned char 
 31033 ;;  charPos         1    1[BANK0 ] unsigned char 
 31034 ;; Auto vars:     Size  Location     Type
 31035 ;;  display         1    7[BANK0 ] PTR struct t_nullifyDisp
 31036 ;;		 -> badge_inst(18), 
 31037 ;;  charData        2    8[BANK0 ] unsigned int 
 31038 ;;  dispDataVect    1    6[BANK0 ] unsigned char 
 31039 ;; Return value:  Size  Location     Type
 31040 ;;                  1    wreg      void 
 31041 ;; Registers used:
 31042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31043 ;; Tracked objects:
 31044 ;;		On entry : 0/0
 31045 ;;		On exit  : 0/0
 31046 ;;		Unchanged: 0/0
 31047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31048 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31049 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31050 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31051 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31052 ;;Total ram usage:       10 bytes
 31053 ;; Hardware stack levels used:    1
 31054 ;; Hardware stack levels required when called:    5
 31055 ;; This function calls:
 31056 ;;		_displayCharReverse
 31057 ;; This function is called by:
 31058 ;;		_displayL2_PutChar
 31059 ;;		_nullifyBadge_segDisplayPutCharPos
 31060 ;;		_displayL2_PrintChar
 31061 ;; This function uses a non-reentrant model
 31062 ;;
 31063                           
 31064                           
 31065                           ;psect for function _displayL1_SetSegChar
 31066  37BF                     _displayL1_SetSegChar:	
 31067                           
 31068                           ;incstack = 0
 31069                           ; Regs used in _displayL1_SetSegChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31070                           ;displayL1_SetSegChar@display stored from wreg
 31071  37BF  0020               	movlb	0	; select bank0
 31072  37C0  00A7               	movwf	displayL1_SetSegChar@display
 31073                           
 31074                           ;nullifyBadge_displayL1.c: 23: u16 charData = asciiCharTableLookup[(u8) c];
 31075  37C1  0820               	movf	displayL1_SetSegChar@c,w
 31076  37C2  00A2               	movwf	??_displayL1_SetSegChar
 31077  37C3  01A3               	clrf	??_displayL1_SetSegChar+1
 31078  37C4  35A2               	lslf	??_displayL1_SetSegChar,f
 31079  37C5  0DA3               	rlf	??_displayL1_SetSegChar+1,f
 31080  37C6  30F0               	movlw	240
 31081  37C7  00A4               	movwf	??_displayL1_SetSegChar+2
 31082  37C8  3026               	movlw	38
 31083  37C9  00A5               	movwf	??_displayL1_SetSegChar+3
 31084  37CA  0822               	movf	??_displayL1_SetSegChar,w
 31085  37CB  0724               	addwf	??_displayL1_SetSegChar+2,w
 31086  37CC  0086               	movwf	6
 31087  37CD  0823               	movf	??_displayL1_SetSegChar+1,w
 31088  37CE  3D25               	addwfc	??_displayL1_SetSegChar+3,w
 31089  37CF  0087               	movwf	7
 31090  37D0  3F40               	moviw [0]fsr1
 31091  37D1  00A8               	movwf	displayL1_SetSegChar@charData
 31092  37D2  3F41               	moviw [1]fsr1
 31093  37D3  00A9               	movwf	displayL1_SetSegChar@charData+1
 31094                           
 31095                           ;nullifyBadge_displayL1.c: 29: if (charPos & 0x1) {
 31096  37D4  1C21               	btfss	displayL1_SetSegChar@charPos,0
 31097  37D5  2FE1               	goto	l8181
 31098                           
 31099                           ;nullifyBadge_displayL1.c: 30: charData = displayCharReverse(charData);
 31100  37D6  0829               	movf	displayL1_SetSegChar@charData+1,w
 31101  37D7  00F2               	movwf	displayCharReverse@cVal+1
 31102  37D8  0828               	movf	displayL1_SetSegChar@charData,w
 31103  37D9  00F1               	movwf	displayCharReverse@cVal
 31104  37DA  31B6  261C         	fcall	_displayCharReverse
 31105  37DC  0872               	movf	?_displayCharReverse+1,w
 31106  37DD  0020               	movlb	0	; select bank0
 31107  37DE  00A9               	movwf	displayL1_SetSegChar@charData+1
 31108  37DF  0871               	movf	?_displayCharReverse,w
 31109  37E0  00A8               	movwf	displayL1_SetSegChar@charData
 31110  37E1                     l8181:	
 31111                           
 31112                           ;nullifyBadge_displayL1.c: 31: }
 31113                           ;nullifyBadge_displayL1.c: 61: u8 dispDataVectBaseIdx = 8 - ( charPos << 1 );
 31114  37E1  3521               	lslf	displayL1_SetSegChar@charPos,w
 31115  37E2  3AFF               	xorlw	255
 31116  37E3  3E01               	addlw	1
 31117  37E4  3E08               	addlw	8
 31118  37E5  00A2               	movwf	??_displayL1_SetSegChar
 31119  37E6  0822               	movf	??_displayL1_SetSegChar,w
 31120  37E7  00A6               	movwf	displayL1_SetSegChar@dispDataVectBaseIdx
 31121                           
 31122                           ;nullifyBadge_displayL1.c: 64: display->displayVect[dispDataVectBaseIdx] = (u8) (charDat
      +                          a >> 8);
 31123  37E8  0829               	movf	displayL1_SetSegChar@charData+1,w
 31124  37E9  00A2               	movwf	??_displayL1_SetSegChar
 31125  37EA  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 31126  37EB  0727               	addwf	displayL1_SetSegChar@display,w
 31127  37EC  00A3               	movwf	??_displayL1_SetSegChar+1
 31128  37ED  0823               	movf	??_displayL1_SetSegChar+1,w
 31129  37EE  0086               	movwf	6
 31130  37EF  3001               	movlw	1	; select bank2/3
 31131  37F0  0087               	movwf	7
 31132  37F1  0822               	movf	??_displayL1_SetSegChar,w
 31133  37F2  0081               	movwf	1
 31134                           
 31135                           ;nullifyBadge_displayL1.c: 67: display->displayVect[dispDataVectBaseIdx+1] = (u8) (charD
      +                          ata & 0xFF);
 31136  37F3  0828               	movf	displayL1_SetSegChar@charData,w
 31137  37F4  00A2               	movwf	??_displayL1_SetSegChar
 31138  37F5  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 31139  37F6  3E01               	addlw	1
 31140  37F7  0727               	addwf	displayL1_SetSegChar@display,w
 31141  37F8  00A3               	movwf	??_displayL1_SetSegChar+1
 31142  37F9  0823               	movf	??_displayL1_SetSegChar+1,w
 31143  37FA  0086               	movwf	6
 31144  37FB  3001               	movlw	1	; select bank2/3
 31145  37FC  0087               	movwf	7
 31146  37FD  0822               	movf	??_displayL1_SetSegChar,w
 31147  37FE  0081               	movwf	1
 31148  37FF  0008               	return
 31149  3800                     __end_of_displayL1_SetSegChar:	
 31150                           
 31151                           	psect	text70
 31152  361C                     __ptext70:	
 31153 ;; *************** function _displayCharReverse *****************
 31154 ;; Defined at:
 31155 ;;		line 105 in file "nullifyBadge_displayL1.c"
 31156 ;; Parameters:    Size  Location     Type
 31157 ;;  cVal            2    1[COMMON] unsigned int 
 31158 ;; Auto vars:     Size  Location     Type
 31159 ;;  k               1   11[COMMON] unsigned char 
 31160 ;;  retValUpperR    1   10[COMMON] unsigned char 
 31161 ;;  retValUpper     1    9[COMMON] unsigned char 
 31162 ;;  retValLower     1    8[COMMON] unsigned char 
 31163 ;; Return value:  Size  Location     Type
 31164 ;;                  2    1[COMMON] unsigned int 
 31165 ;; Registers used:
 31166 ;;		wreg, status,2, status,0
 31167 ;; Tracked objects:
 31168 ;;		On entry : 0/0
 31169 ;;		On exit  : 0/0
 31170 ;;		Unchanged: 0/0
 31171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31172 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31173 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31174 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31175 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31176 ;;Total ram usage:       11 bytes
 31177 ;; Hardware stack levels used:    1
 31178 ;; Hardware stack levels required when called:    4
 31179 ;; This function calls:
 31180 ;;		Nothing
 31181 ;; This function is called by:
 31182 ;;		_displayL1_SetSegChar
 31183 ;; This function uses a non-reentrant model
 31184 ;;
 31185                           
 31186                           
 31187                           ;psect for function _displayCharReverse
 31188  361C                     _displayCharReverse:	
 31189                           
 31190                           ;nullifyBadge_displayL1.c: 106: u8 retValUpper, retValLower, retValUpperRev;
 31191                           ;nullifyBadge_displayL1.c: 108: u8 k;
 31192                           ;nullifyBadge_displayL1.c: 111: retValUpper = cVal >> 8;
 31193                           
 31194                           ;incstack = 0
 31195                           ; Regs used in _displayCharReverse: [wreg+status,2+status,0]
 31196  361C  0872               	movf	displayCharReverse@cVal+1,w
 31197  361D  00F3               	movwf	??_displayCharReverse
 31198  361E  0873               	movf	??_displayCharReverse,w
 31199  361F  00F9               	movwf	displayCharReverse@retValUpper
 31200                           
 31201                           ;nullifyBadge_displayL1.c: 112: retValLower = cVal & 0xFF;
 31202  3620  0871               	movf	displayCharReverse@cVal,w
 31203  3621  00F3               	movwf	??_displayCharReverse
 31204  3622  0873               	movf	??_displayCharReverse,w
 31205  3623  00F8               	movwf	displayCharReverse@retValLower
 31206                           
 31207                           ;nullifyBadge_displayL1.c: 115: retValUpperRev = 0;
 31208  3624  01FA               	clrf	displayCharReverse@retValUpperRev
 31209                           
 31210                           ;nullifyBadge_displayL1.c: 117: for (k = 0; k < 7; k++) {
 31211  3625  01FB               	clrf	displayCharReverse@k
 31212  3626  3007               	movlw	7
 31213  3627  027B               	subwf	displayCharReverse@k,w
 31214  3628  1803               	btfsc	3,0
 31215  3629  2E3B               	goto	l8163
 31216  362A                     l8155:	
 31217                           
 31218                           ;nullifyBadge_displayL1.c: 118: retValUpperRev |= (retValUpper & 0x1);
 31219  362A  0879               	movf	displayCharReverse@retValUpper,w
 31220  362B  3901               	andlw	1
 31221  362C  00F3               	movwf	??_displayCharReverse
 31222  362D  0873               	movf	??_displayCharReverse,w
 31223  362E  04FA               	iorwf	displayCharReverse@retValUpperRev,f
 31224                           
 31225                           ;nullifyBadge_displayL1.c: 119: retValUpper >>= 1;
 31226  362F  1003               	clrc
 31227  3630  0CF9               	rrf	displayCharReverse@retValUpper,f
 31228                           
 31229                           ;nullifyBadge_displayL1.c: 120: retValUpperRev <<= 1;
 31230  3631  1003               	clrc
 31231  3632  0DFA               	rlf	displayCharReverse@retValUpperRev,f
 31232  3633  3001               	movlw	1
 31233  3634  00F3               	movwf	??_displayCharReverse
 31234  3635  0873               	movf	??_displayCharReverse,w
 31235  3636  07FB               	addwf	displayCharReverse@k,f
 31236  3637  3007               	movlw	7
 31237  3638  027B               	subwf	displayCharReverse@k,w
 31238  3639  1C03               	skipc
 31239  363A  2E2A               	goto	l8155
 31240  363B                     l8163:	
 31241                           
 31242                           ;nullifyBadge_displayL1.c: 121: }
 31243                           ;nullifyBadge_displayL1.c: 123: return (retValLower << 8) | (retValUpperRev);
 31244  363B  087A               	movf	displayCharReverse@retValUpperRev,w
 31245  363C  00F3               	movwf	??_displayCharReverse
 31246  363D  01F4               	clrf	??_displayCharReverse+1
 31247  363E  0878               	movf	displayCharReverse@retValLower,w
 31248  363F  00F5               	movwf	??_displayCharReverse+2
 31249  3640  01F6               	clrf	??_displayCharReverse+3
 31250  3641  0875               	movf	??_displayCharReverse+2,w
 31251  3642  00F6               	movwf	??_displayCharReverse+3
 31252  3643  01F5               	clrf	??_displayCharReverse+2
 31253  3644  0873               	movf	??_displayCharReverse,w
 31254  3645  0475               	iorwf	??_displayCharReverse+2,w
 31255  3646  00F1               	movwf	?_displayCharReverse
 31256  3647  0874               	movf	??_displayCharReverse+1,w
 31257  3648  0476               	iorwf	??_displayCharReverse+3,w
 31258  3649  00F2               	movwf	?_displayCharReverse+1
 31259  364A  0008               	return
 31260  364B                     __end_of_displayCharReverse:	
 31261                           
 31262                           	psect	text71
 31263  3237                     __ptext71:	
 31264 ;; *************** function _nullifyBadge_segDisplayForceUpdate *****************
 31265 ;; Defined at:
 31266 ;;		line 108 in file "nullifyBadge.c"
 31267 ;; Parameters:    Size  Location     Type
 31268 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 31269 ;;		 -> badge_inst(18), 
 31270 ;; Auto vars:     Size  Location     Type
 31271 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 31272 ;;		 -> badge_inst(18), 
 31273 ;; Return value:  Size  Location     Type
 31274 ;;                  1    wreg      void 
 31275 ;; Registers used:
 31276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31277 ;; Tracked objects:
 31278 ;;		On entry : 0/0
 31279 ;;		On exit  : 0/0
 31280 ;;		Unchanged: 0/0
 31281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31285 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31286 ;;Total ram usage:        1 bytes
 31287 ;; Hardware stack levels used:    1
 31288 ;; Hardware stack levels required when called:    8
 31289 ;; This function calls:
 31290 ;;		_displayL2_ForceUpdate
 31291 ;; This function is called by:
 31292 ;;		_marquee_speedy
 31293 ;;		_marquee
 31294 ;;		_menu_display_option
 31295 ;;		_flashy_display_option
 31296 ;;		_flashy_Main
 31297 ;; This function uses a non-reentrant model
 31298 ;;
 31299                           
 31300                           
 31301                           ;psect for function _nullifyBadge_segDisplayForceUpdate
 31302  3237                     _nullifyBadge_segDisplayForceUpdate:	
 31303                           
 31304                           ;incstack = 0
 31305                           ; Regs used in _nullifyBadge_segDisplayForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+
      +                          pclath+cstack]
 31306                           ;nullifyBadge_segDisplayForceUpdate@badge stored from wreg
 31307  3237  0020               	movlb	0	; select bank0
 31308  3238  00AB               	movwf	nullifyBadge_segDisplayForceUpdate@badge
 31309                           
 31310                           ;nullifyBadge.c: 109: displayL2_ForceUpdate(&badge->display);
 31311  3239  082B               	movf	nullifyBadge_segDisplayForceUpdate@badge,w
 31312  323A  31B2  2231         	fcall	_displayL2_ForceUpdate
 31313  323C  0008               	return
 31314  323D                     __end_of_nullifyBadge_segDisplayForceUpdate:	
 31315                           
 31316                           	psect	text72
 31317  3231                     __ptext72:	
 31318 ;; *************** function _displayL2_ForceUpdate *****************
 31319 ;; Defined at:
 31320 ;;		line 79 in file "nullifyBadge_displayL2.c"
 31321 ;; Parameters:    Size  Location     Type
 31322 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31323 ;;		 -> badge_inst(18), 
 31324 ;; Auto vars:     Size  Location     Type
 31325 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 31326 ;;		 -> badge_inst(18), 
 31327 ;; Return value:  Size  Location     Type
 31328 ;;                  1    wreg      void 
 31329 ;; Registers used:
 31330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31331 ;; Tracked objects:
 31332 ;;		On entry : 0/0
 31333 ;;		On exit  : 0/0
 31334 ;;		Unchanged: 0/0
 31335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31337 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31339 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31340 ;;Total ram usage:        1 bytes
 31341 ;; Hardware stack levels used:    1
 31342 ;; Hardware stack levels required when called:    7
 31343 ;; This function calls:
 31344 ;;		_displayL1_Update
 31345 ;; This function is called by:
 31346 ;;		_nullifyBadge_segDisplayForceUpdate
 31347 ;; This function uses a non-reentrant model
 31348 ;;
 31349                           
 31350                           
 31351                           ;psect for function _displayL2_ForceUpdate
 31352  3231                     _displayL2_ForceUpdate:	
 31353                           
 31354                           ;incstack = 0
 31355                           ; Regs used in _displayL2_ForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 31356                           ;displayL2_ForceUpdate@display stored from wreg
 31357  3231  00FB               	movwf	displayL2_ForceUpdate@display
 31358                           
 31359                           ;nullifyBadge_displayL2.c: 80: displayL1_Update(&display->display_l1);
 31360  3232  087B               	movf	displayL2_ForceUpdate@display,w
 31361  3233  3E07               	addlw	7
 31362  3234  31B3  2341         	fcall	_displayL1_Update
 31363  3236  0008               	return
 31364  3237                     __end_of_displayL2_ForceUpdate:	
 31365                           
 31366                           	psect	text73
 31367  35EF                     __ptext73:	
 31368 ;; *************** function ___lwmod *****************
 31369 ;; Defined at:
 31370 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwmod.c"
 31371 ;; Parameters:    Size  Location     Type
 31372 ;;  divisor         2   11[BANK0 ] unsigned int 
 31373 ;;  dividend        2   13[BANK0 ] unsigned int 
 31374 ;; Auto vars:     Size  Location     Type
 31375 ;;  counter         1   10[COMMON] unsigned char 
 31376 ;; Return value:  Size  Location     Type
 31377 ;;                  2   11[BANK0 ] unsigned int 
 31378 ;; Registers used:
 31379 ;;		wreg, status,2, status,0
 31380 ;; Tracked objects:
 31381 ;;		On entry : 0/0
 31382 ;;		On exit  : 0/0
 31383 ;;		Unchanged: 0/0
 31384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31385 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31387 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31388 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31389 ;;Total ram usage:        6 bytes
 31390 ;; Hardware stack levels used:    1
 31391 ;; Hardware stack levels required when called:    4
 31392 ;; This function calls:
 31393 ;;		Nothing
 31394 ;; This function is called by:
 31395 ;;		_marquee_speedy
 31396 ;;		_marquee
 31397 ;;		_led_roundabout
 31398 ;;		_led_curtain
 31399 ;;		_led_Parody
 31400 ;;		_menu_display_option
 31401 ;;		_locked_Main
 31402 ;;		_slot_Setup
 31403 ;;		_slot_Main
 31404 ;;		_sprintf
 31405 ;; This function uses a non-reentrant model
 31406 ;;
 31407                           
 31408                           
 31409                           ;psect for function ___lwmod
 31410  35EF                     ___lwmod:	
 31411                           
 31412                           ;incstack = 0
 31413                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 31414  35EF  0020               	movlb	0	; select bank0
 31415  35F0  082B               	movf	___lwmod@divisor,w
 31416  35F1  042C               	iorwf	___lwmod@divisor+1,w
 31417  35F2  1903               	btfsc	3,2
 31418  35F3  2E17               	goto	l8391
 31419  35F4  01FA               	clrf	___lwmod@counter
 31420  35F5  0AFA               	incf	___lwmod@counter,f
 31421  35F6                     l8381:	
 31422  35F6  1BAC               	btfsc	___lwmod@divisor+1,7
 31423  35F7  2E02               	goto	l8383
 31424  35F8  3001               	movlw	1
 31425  35F9                     u4905:	
 31426  35F9  35AB               	lslf	___lwmod@divisor,f
 31427  35FA  0DAC               	rlf	___lwmod@divisor+1,f
 31428  35FB  0B89               	decfsz	9,f
 31429  35FC  2DF9               	goto	u4905
 31430  35FD  3001               	movlw	1
 31431  35FE  00F9               	movwf	??___lwmod
 31432  35FF  0879               	movf	??___lwmod,w
 31433  3600  07FA               	addwf	___lwmod@counter,f
 31434  3601  2DF6               	goto	l8381
 31435  3602                     l8383:	
 31436  3602  082C               	movf	___lwmod@divisor+1,w
 31437  3603  022E               	subwf	___lwmod@dividend+1,w
 31438  3604  1D03               	skipz
 31439  3605  2E08               	goto	u4925
 31440  3606  082B               	movf	___lwmod@divisor,w
 31441  3607  022D               	subwf	___lwmod@dividend,w
 31442  3608                     u4925:	
 31443  3608  1C03               	skipc
 31444  3609  2E0E               	goto	l8387
 31445  360A  082B               	movf	___lwmod@divisor,w
 31446  360B  02AD               	subwf	___lwmod@dividend,f
 31447  360C  082C               	movf	___lwmod@divisor+1,w
 31448  360D  3BAE               	subwfb	___lwmod@dividend+1,f
 31449  360E                     l8387:	
 31450  360E  3001               	movlw	1
 31451  360F                     u4935:	
 31452  360F  36AC               	lsrf	___lwmod@divisor+1,f
 31453  3610  0CAB               	rrf	___lwmod@divisor,f
 31454  3611  0B89               	decfsz	9,f
 31455  3612  2E0F               	goto	u4935
 31456  3613  3001               	movlw	1
 31457  3614  02FA               	subwf	___lwmod@counter,f
 31458  3615  1D03               	btfss	3,2
 31459  3616  2E02               	goto	l8383
 31460  3617                     l8391:	
 31461  3617  082E               	movf	___lwmod@dividend+1,w
 31462  3618  00AC               	movwf	?___lwmod+1
 31463  3619  082D               	movf	___lwmod@dividend,w
 31464  361A  00AB               	movwf	?___lwmod
 31465  361B  0008               	return
 31466  361C                     __end_of___lwmod:	
 31467                           
 31468                           	psect	text74
 31469  36E0                     __ptext74:	
 31470 ;; *************** function ___lwdiv *****************
 31471 ;; Defined at:
 31472 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwdiv.c"
 31473 ;; Parameters:    Size  Location     Type
 31474 ;;  divisor         2    1[COMMON] unsigned int 
 31475 ;;  dividend        2    3[COMMON] unsigned int 
 31476 ;; Auto vars:     Size  Location     Type
 31477 ;;  quotient        2    7[COMMON] unsigned int 
 31478 ;;  counter         1    6[COMMON] unsigned char 
 31479 ;; Return value:  Size  Location     Type
 31480 ;;                  2    1[COMMON] unsigned int 
 31481 ;; Registers used:
 31482 ;;		wreg, status,2, status,0
 31483 ;; Tracked objects:
 31484 ;;		On entry : 0/0
 31485 ;;		On exit  : 0/0
 31486 ;;		Unchanged: 0/0
 31487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31489 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31490 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31491 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31492 ;;Total ram usage:        8 bytes
 31493 ;; Hardware stack levels used:    1
 31494 ;; Hardware stack levels required when called:    4
 31495 ;; This function calls:
 31496 ;;		Nothing
 31497 ;; This function is called by:
 31498 ;;		_marquee_speedy
 31499 ;;		_marquee
 31500 ;;		_sprintf
 31501 ;; This function uses a non-reentrant model
 31502 ;;
 31503                           
 31504                           
 31505                           ;psect for function ___lwdiv
 31506  36E0                     ___lwdiv:	
 31507                           
 31508                           ;incstack = 0
 31509                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 31510  36E0  01F7               	clrf	___lwdiv@quotient
 31511  36E1  01F8               	clrf	___lwdiv@quotient+1
 31512  36E2  0871               	movf	___lwdiv@divisor,w
 31513  36E3  0472               	iorwf	___lwdiv@divisor+1,w
 31514  36E4  1903               	btfsc	3,2
 31515  36E5  2F0F               	goto	l8369
 31516  36E6  01F6               	clrf	___lwdiv@counter
 31517  36E7  0AF6               	incf	___lwdiv@counter,f
 31518  36E8                     l8357:	
 31519  36E8  1BF2               	btfsc	___lwdiv@divisor+1,7
 31520  36E9  2EF4               	goto	l8359
 31521  36EA  3001               	movlw	1
 31522  36EB                     u4835:	
 31523  36EB  35F1               	lslf	___lwdiv@divisor,f
 31524  36EC  0DF2               	rlf	___lwdiv@divisor+1,f
 31525  36ED  0B89               	decfsz	9,f
 31526  36EE  2EEB               	goto	u4835
 31527  36EF  3001               	movlw	1
 31528  36F0  00F5               	movwf	??___lwdiv
 31529  36F1  0875               	movf	??___lwdiv,w
 31530  36F2  07F6               	addwf	___lwdiv@counter,f
 31531  36F3  2EE8               	goto	l8357
 31532  36F4                     l8359:	
 31533  36F4  3001               	movlw	1
 31534  36F5                     u4855:	
 31535  36F5  35F7               	lslf	___lwdiv@quotient,f
 31536  36F6  0DF8               	rlf	___lwdiv@quotient+1,f
 31537  36F7  0B89               	decfsz	9,f
 31538  36F8  2EF5               	goto	u4855
 31539  36F9  0872               	movf	___lwdiv@divisor+1,w
 31540  36FA  0274               	subwf	___lwdiv@dividend+1,w
 31541  36FB  1D03               	skipz
 31542  36FC  2EFF               	goto	u4865
 31543  36FD  0871               	movf	___lwdiv@divisor,w
 31544  36FE  0273               	subwf	___lwdiv@dividend,w
 31545  36FF                     u4865:	
 31546  36FF  1C03               	skipc
 31547  3700  2F06               	goto	l8365
 31548  3701  0871               	movf	___lwdiv@divisor,w
 31549  3702  02F3               	subwf	___lwdiv@dividend,f
 31550  3703  0872               	movf	___lwdiv@divisor+1,w
 31551  3704  3BF4               	subwfb	___lwdiv@dividend+1,f
 31552  3705  1477               	bsf	___lwdiv@quotient,0
 31553  3706                     l8365:	
 31554  3706  3001               	movlw	1
 31555  3707                     u4875:	
 31556  3707  36F2               	lsrf	___lwdiv@divisor+1,f
 31557  3708  0CF1               	rrf	___lwdiv@divisor,f
 31558  3709  0B89               	decfsz	9,f
 31559  370A  2F07               	goto	u4875
 31560  370B  3001               	movlw	1
 31561  370C  02F6               	subwf	___lwdiv@counter,f
 31562  370D  1D03               	btfss	3,2
 31563  370E  2EF4               	goto	l8359
 31564  370F                     l8369:	
 31565  370F  0878               	movf	___lwdiv@quotient+1,w
 31566  3710  00F2               	movwf	?___lwdiv+1
 31567  3711  0877               	movf	___lwdiv@quotient,w
 31568  3712  00F1               	movwf	?___lwdiv
 31569  3713  0008               	return
 31570  3714                     __end_of___lwdiv:	
 31571                           
 31572                           	psect	text75
 31573  3498                     __ptext75:	
 31574 ;; *************** function _TMR0_Read16bitTimer *****************
 31575 ;; Defined at:
 31576 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 31577 ;; Parameters:    Size  Location     Type
 31578 ;;		None
 31579 ;; Auto vars:     Size  Location     Type
 31580 ;;  readVal         2    8[COMMON] unsigned int 
 31581 ;;  readValHigh     1   11[COMMON] unsigned char 
 31582 ;;  readValLow      1   10[COMMON] unsigned char 
 31583 ;; Return value:  Size  Location     Type
 31584 ;;                  2    1[COMMON] unsigned int 
 31585 ;; Registers used:
 31586 ;;		wreg, status,2, status,0
 31587 ;; Tracked objects:
 31588 ;;		On entry : 0/0
 31589 ;;		On exit  : 0/0
 31590 ;;		Unchanged: 0/0
 31591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31592 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31593 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31594 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31595 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31596 ;;Total ram usage:       11 bytes
 31597 ;; Hardware stack levels used:    1
 31598 ;; Hardware stack levels required when called:    4
 31599 ;; This function calls:
 31600 ;;		Nothing
 31601 ;; This function is called by:
 31602 ;;		_scheduler_TaskRun
 31603 ;;		_schedulerExecute
 31604 ;; This function uses a non-reentrant model
 31605 ;;
 31606                           
 31607                           
 31608                           ;psect for function _TMR0_Read16bitTimer
 31609  3498                     _TMR0_Read16bitTimer:	
 31610                           
 31611                           ;tmr0.c: 111: uint16_t readVal;
 31612                           ;tmr0.c: 112: uint8_t readValLow;
 31613                           ;tmr0.c: 113: uint8_t readValHigh;
 31614                           ;tmr0.c: 115: readValLow = TMR0L;
 31615                           
 31616                           ;incstack = 0
 31617                           ; Regs used in _TMR0_Read16bitTimer: [wreg+status,2+status,0]
 31618  3498  0020               	movlb	0	; select bank0
 31619  3499  0815               	movf	21,w	;volatile
 31620  349A  00F3               	movwf	??_TMR0_Read16bitTimer
 31621  349B  0873               	movf	??_TMR0_Read16bitTimer,w
 31622  349C  00FA               	movwf	TMR0_Read16bitTimer@readValLow
 31623                           
 31624                           ;tmr0.c: 116: readValHigh = TMR0H;
 31625  349D  0816               	movf	22,w	;volatile
 31626  349E  00F3               	movwf	??_TMR0_Read16bitTimer
 31627  349F  0873               	movf	??_TMR0_Read16bitTimer,w
 31628  34A0  00FB               	movwf	TMR0_Read16bitTimer@readValHigh
 31629                           
 31630                           ;tmr0.c: 117: readVal = ((uint16_t)readValHigh << 8) + readValLow;
 31631  34A1  087A               	movf	TMR0_Read16bitTimer@readValLow,w
 31632  34A2  00F3               	movwf	??_TMR0_Read16bitTimer
 31633  34A3  01F4               	clrf	??_TMR0_Read16bitTimer+1
 31634  34A4  087B               	movf	TMR0_Read16bitTimer@readValHigh,w
 31635  34A5  00F5               	movwf	??_TMR0_Read16bitTimer+2
 31636  34A6  01F6               	clrf	??_TMR0_Read16bitTimer+3
 31637  34A7  0875               	movf	??_TMR0_Read16bitTimer+2,w
 31638  34A8  00F6               	movwf	??_TMR0_Read16bitTimer+3
 31639  34A9  01F5               	clrf	??_TMR0_Read16bitTimer+2
 31640  34AA  0873               	movf	??_TMR0_Read16bitTimer,w
 31641  34AB  0775               	addwf	??_TMR0_Read16bitTimer+2,w
 31642  34AC  00F8               	movwf	TMR0_Read16bitTimer@readVal
 31643  34AD  0874               	movf	??_TMR0_Read16bitTimer+1,w
 31644  34AE  3D76               	addwfc	??_TMR0_Read16bitTimer+3,w
 31645  34AF  00F9               	movwf	TMR0_Read16bitTimer@readVal+1
 31646                           
 31647                           ;tmr0.c: 119: return readVal;
 31648  34B0  0879               	movf	TMR0_Read16bitTimer@readVal+1,w
 31649  34B1  00F2               	movwf	?_TMR0_Read16bitTimer+1
 31650  34B2  0878               	movf	TMR0_Read16bitTimer@readVal,w
 31651  34B3  00F1               	movwf	?_TMR0_Read16bitTimer
 31652  34B4  0008               	return
 31653  34B5                     __end_of_TMR0_Read16bitTimer:	
 31654                           
 31655                           	psect	text76
 31656  2CF0                     __ptext76:	
 31657 ;; *************** function _nullifyBadge_platformInit *****************
 31658 ;; Defined at:
 31659 ;;		line 13 in file "nullifyBadge.c"
 31660 ;; Parameters:    Size  Location     Type
 31661 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 31662 ;;		 -> badge_inst(18), 
 31663 ;; Auto vars:     Size  Location     Type
 31664 ;;  badge           1   12[BANK0 ] PTR struct t_nullifyBadg
 31665 ;;		 -> badge_inst(18), 
 31666 ;; Return value:  Size  Location     Type
 31667 ;;                  1    wreg      void 
 31668 ;; Registers used:
 31669 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31670 ;; Tracked objects:
 31671 ;;		On entry : 0/0
 31672 ;;		On exit  : 0/0
 31673 ;;		Unchanged: 0/0
 31674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31676 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31678 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31679 ;;Total ram usage:        1 bytes
 31680 ;; Hardware stack levels used:    1
 31681 ;; Hardware stack levels required when called:    9
 31682 ;; This function calls:
 31683 ;;		_OSCILLATOR_Initialize
 31684 ;;		_PIN_MANAGER_Initialize
 31685 ;;		_PWM1_Initialize
 31686 ;;		_PWM1_LoadDutyValue
 31687 ;;		_PWM2_Initialize
 31688 ;;		_PWM2_LoadDutyValue
 31689 ;;		_PWM5_Initialize
 31690 ;;		_PWM5_LoadDutyValue
 31691 ;;		_PWM6_Initialize
 31692 ;;		_PWM6_LoadDutyValue
 31693 ;;		_SPI1_Initialize
 31694 ;;		_SYSTEM_Initialize
 31695 ;;		_TMR0_Initialize
 31696 ;;		_TMR2_Initialize
 31697 ;;		_TMR4_Initialize
 31698 ;;		_displayL2_Initialize
 31699 ;; This function is called by:
 31700 ;;		_main
 31701 ;; This function uses a non-reentrant model
 31702 ;;
 31703                           
 31704                           
 31705                           ;psect for function _nullifyBadge_platformInit
 31706  2CF0                     _nullifyBadge_platformInit:	
 31707                           
 31708                           ;incstack = 0
 31709                           ; Regs used in _nullifyBadge_platformInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 31710                           ;nullifyBadge_platformInit@badge stored from wreg
 31711  2CF0  0020               	movlb	0	; select bank0
 31712  2CF1  00AC               	movwf	nullifyBadge_platformInit@badge
 31713                           
 31714                           ;nullifyBadge.c: 15: SYSTEM_Initialize();
 31715  2CF2  31B5  250F  31AC   	fcall	_SYSTEM_Initialize
 31716                           
 31717                           ;nullifyBadge.c: 16: OSCILLATOR_Initialize();
 31718  2CF5  31B2  2265  31AC   	fcall	_OSCILLATOR_Initialize
 31719                           
 31720                           ;nullifyBadge.c: 19: TMR0_Initialize();
 31721  2CF8  31B4  24B5  31AC   	fcall	_TMR0_Initialize
 31722                           
 31723                           ;nullifyBadge.c: 20: TMR2_Initialize();
 31724  2CFB  31B2  226F  31AC   	fcall	_TMR2_Initialize
 31725                           
 31726                           ;nullifyBadge.c: 21: TMR4_Initialize();
 31727  2CFE  31B2  22A4  31AC   	fcall	_TMR4_Initialize
 31728                           
 31729                           ;nullifyBadge.c: 23: PIN_MANAGER_Initialize();
 31730  2D01  31AC  249B  31AC   	fcall	_PIN_MANAGER_Initialize
 31731                           
 31732                           ;nullifyBadge.c: 24: PWM1_Initialize();
 31733  2D04  31B2  228E  31AC   	fcall	_PWM1_Initialize
 31734                           
 31735                           ;nullifyBadge.c: 26: PWM2_Initialize();
 31736  2D07  31B2  2299  31AC   	fcall	_PWM2_Initialize
 31737                           
 31738                           ;nullifyBadge.c: 27: PWM5_Initialize();
 31739  2D0A  31B2  22BA  31AC   	fcall	_PWM5_Initialize
 31740                           
 31741                           ;nullifyBadge.c: 28: PWM6_Initialize();
 31742  2D0D  31B2  22C6  31AC   	fcall	_PWM6_Initialize
 31743                           
 31744                           ;nullifyBadge.c: 29: SPI1_Initialize();
 31745  2D10  31B2  2243  31AC   	fcall	_SPI1_Initialize
 31746                           
 31747                           ;nullifyBadge.c: 32: PWM1_LoadDutyValue(128);
 31748  2D13  3080               	movlw	128
 31749  2D14  00F1               	movwf	PWM1_LoadDutyValue@dutyValue
 31750  2D15  3000               	movlw	0
 31751  2D16  00F2               	movwf	PWM1_LoadDutyValue@dutyValue+1
 31752  2D17  31B3  23C0  31AC   	fcall	_PWM1_LoadDutyValue
 31753                           
 31754                           ;nullifyBadge.c: 44: do { LATBbits.LATB7 = 1; } while(0);
 31755  2D1A  0022               	movlb	2	; select bank2
 31756  2D1B  178D               	bsf	13,7	;volatile
 31757                           
 31758                           ;nullifyBadge.c: 45: PWM2_LoadDutyValue(192);
 31759  2D1C  30C0               	movlw	192
 31760  2D1D  00F1               	movwf	PWM2_LoadDutyValue@dutyValue
 31761  2D1E  3000               	movlw	0
 31762  2D1F  00F2               	movwf	PWM2_LoadDutyValue@dutyValue+1
 31763  2D20  31B3  23D6  31AC   	fcall	_PWM2_LoadDutyValue
 31764                           
 31765                           ;nullifyBadge.c: 50: PWM5_LoadDutyValue(gamma_table_256x1k[128]);
 31766  2D23  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 31767  2D24  0084               	movwf	4
 31768  2D25  30A1               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 31769  2D26  0085               	movwf	5
 31770  2D27  3F00               	moviw [0]fsr0
 31771  2D28  00F1               	movwf	PWM5_LoadDutyValue@dutyValue
 31772  2D29  3F01               	moviw [1]fsr0
 31773  2D2A  00F2               	movwf	PWM5_LoadDutyValue@dutyValue+1
 31774  2D2B  31B3  23EC  31AC   	fcall	_PWM5_LoadDutyValue
 31775                           
 31776                           ;nullifyBadge.c: 51: PWM6_LoadDutyValue(gamma_table_256x1k[128]);
 31777  2D2E  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 31778  2D2F  0084               	movwf	4
 31779  2D30  30A1               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 31780  2D31  0085               	movwf	5
 31781  2D32  3F00               	moviw [0]fsr0
 31782  2D33  00F1               	movwf	PWM6_LoadDutyValue@dutyValue
 31783  2D34  3F01               	moviw [1]fsr0
 31784  2D35  00F2               	movwf	PWM6_LoadDutyValue@dutyValue+1
 31785  2D36  31B4  2402  31AC   	fcall	_PWM6_LoadDutyValue
 31786                           
 31787                           ;nullifyBadge.c: 54: displayL2_Initialize(&badge->display);
 31788  2D39  0020               	movlb	0	; select bank0
 31789  2D3A  082C               	movf	nullifyBadge_platformInit@badge,w
 31790  2D3B  31B5  2578         	fcall	_displayL2_Initialize
 31791                           
 31792                           ;nullifyBadge.c: 57: badge->registeredHw = 0x0;
 31793  2D3D  0020               	movlb	0	; select bank0
 31794  2D3E  082C               	movf	nullifyBadge_platformInit@badge,w
 31795  2D3F  3E11               	addlw	17
 31796  2D40  0086               	movwf	6
 31797  2D41  3001               	movlw	1	; select bank2/3
 31798  2D42  0087               	movwf	7
 31799  2D43  0181               	clrf	1
 31800  2D44  0008               	return
 31801  2D45                     __end_of_nullifyBadge_platformInit:	
 31802                           
 31803                           	psect	text77
 31804  3578                     __ptext77:	
 31805 ;; *************** function _displayL2_Initialize *****************
 31806 ;; Defined at:
 31807 ;;		line 12 in file "nullifyBadge_displayL2.c"
 31808 ;; Parameters:    Size  Location     Type
 31809 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31810 ;;		 -> badge_inst(18), 
 31811 ;; Auto vars:     Size  Location     Type
 31812 ;;  display         1   11[BANK0 ] PTR struct t_nullifyDisp
 31813 ;;		 -> badge_inst(18), 
 31814 ;; Return value:  Size  Location     Type
 31815 ;;                  1    wreg      void 
 31816 ;; Registers used:
 31817 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31818 ;; Tracked objects:
 31819 ;;		On entry : 0/0
 31820 ;;		On exit  : 0/0
 31821 ;;		Unchanged: 0/0
 31822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31824 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31826 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31827 ;;Total ram usage:        1 bytes
 31828 ;; Hardware stack levels used:    1
 31829 ;; Hardware stack levels required when called:    8
 31830 ;; This function calls:
 31831 ;;		_displayL1_Initialize
 31832 ;;		_memset
 31833 ;; This function is called by:
 31834 ;;		_nullifyBadge_platformInit
 31835 ;; This function uses a non-reentrant model
 31836 ;;
 31837                           
 31838                           
 31839                           ;psect for function _displayL2_Initialize
 31840  3578                     _displayL2_Initialize:	
 31841                           
 31842                           ;incstack = 0
 31843                           ; Regs used in _displayL2_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31844                           ;displayL2_Initialize@display stored from wreg
 31845  3578  0020               	movlb	0	; select bank0
 31846  3579  00AB               	movwf	displayL2_Initialize@display
 31847                           
 31848                           ;nullifyBadge_displayL2.c: 13: displayL1_Initialize(&display->display_l1);
 31849  357A  082B               	movf	displayL2_Initialize@display,w
 31850  357B  3E07               	addlw	7
 31851  357C  31B3  2386  31B5   	fcall	_displayL1_Initialize
 31852                           
 31853                           ;nullifyBadge_displayL2.c: 14: memset(display->charVect, ' ', sizeof(display->charVect))
      +                          ;
 31854  357F  0020               	movlb	0	; select bank0
 31855  3580  082B               	movf	displayL2_Initialize@display,w
 31856  3581  00F1               	movwf	memset@p1
 31857  3582  3001               	movlw	1
 31858  3583  00F2               	movwf	memset@p1+1
 31859  3584  3020               	movlw	32
 31860  3585  00F3               	movwf	memset@c
 31861  3586  3000               	movlw	0
 31862  3587  00F4               	movwf	memset@c+1
 31863  3588  3004               	movlw	4
 31864  3589  00F5               	movwf	memset@n
 31865  358A  3000               	movlw	0
 31866  358B  00F6               	movwf	memset@n+1
 31867  358C  31B4  242F         	fcall	_memset
 31868                           
 31869                           ;nullifyBadge_displayL2.c: 15: display->dpVect = 0;
 31870  358E  0020               	movlb	0	; select bank0
 31871  358F  082B               	movf	displayL2_Initialize@display,w
 31872  3590  3E04               	addlw	4
 31873  3591  0086               	movwf	6
 31874  3592  3001               	movlw	1	; select bank2/3
 31875  3593  0087               	movwf	7
 31876  3594  0181               	clrf	1
 31877                           
 31878                           ;nullifyBadge_displayL2.c: 16: display->ledVect = 0;
 31879  3595  082B               	movf	displayL2_Initialize@display,w
 31880  3596  3E05               	addlw	5
 31881  3597  0086               	movwf	6
 31882  3598  3001               	movlw	1	; select bank2/3
 31883  3599  0087               	movwf	7
 31884  359A  3000               	movlw	0
 31885  359B  3FC0               	movwi [0]fsr1
 31886  359C  3FC1               	movwi [1]fsr1
 31887  359D  0008               	return
 31888  359E                     __end_of_displayL2_Initialize:	
 31889                           
 31890                           	psect	text78
 31891  3386                     __ptext78:	
 31892 ;; *************** function _displayL1_Initialize *****************
 31893 ;; Defined at:
 31894 ;;		line 13 in file "nullifyBadge_displayL1.c"
 31895 ;; Parameters:    Size  Location     Type
 31896 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31897 ;;		 -> badge_inst(18), 
 31898 ;; Auto vars:     Size  Location     Type
 31899 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 31900 ;;		 -> badge_inst(18), 
 31901 ;; Return value:  Size  Location     Type
 31902 ;;                  1    wreg      void 
 31903 ;; Registers used:
 31904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31905 ;; Tracked objects:
 31906 ;;		On entry : 0/0
 31907 ;;		On exit  : 0/0
 31908 ;;		Unchanged: 0/0
 31909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31913 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31914 ;;Total ram usage:        1 bytes
 31915 ;; Hardware stack levels used:    1
 31916 ;; Hardware stack levels required when called:    7
 31917 ;; This function calls:
 31918 ;;		_displayL1_Update
 31919 ;;		_memset
 31920 ;; This function is called by:
 31921 ;;		_displayL2_Initialize
 31922 ;; This function uses a non-reentrant model
 31923 ;;
 31924                           
 31925                           
 31926                           ;psect for function _displayL1_Initialize
 31927  3386                     _displayL1_Initialize:	
 31928                           
 31929                           ;incstack = 0
 31930                           ; Regs used in _displayL1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31931                           ;displayL1_Initialize@display stored from wreg
 31932  3386  00FB               	movwf	displayL1_Initialize@display
 31933                           
 31934                           ;nullifyBadge_displayL1.c: 14: memset(display->displayVect, 0, sizeof(struct t_nullifyDi
      +                          splay_l1));
 31935  3387  087B               	movf	displayL1_Initialize@display,w
 31936  3388  00F1               	movwf	memset@p1
 31937  3389  3001               	movlw	1
 31938  338A  00F2               	movwf	memset@p1+1
 31939  338B  3000               	movlw	0
 31940  338C  00F3               	movwf	memset@c
 31941  338D  00F4               	movwf	memset@c+1
 31942  338E  300A               	movlw	10
 31943  338F  00F5               	movwf	memset@n
 31944  3390  3000               	movlw	0
 31945  3391  00F6               	movwf	memset@n+1
 31946  3392  31B4  242F  31B3   	fcall	_memset
 31947                           
 31948                           ;nullifyBadge_displayL1.c: 15: displayL1_Update(display);
 31949  3395  087B               	movf	displayL1_Initialize@display,w
 31950  3396  31B3  2341         	fcall	_displayL1_Update
 31951  3398  0008               	return
 31952  3399                     __end_of_displayL1_Initialize:	
 31953                           
 31954                           	psect	text79
 31955  342F                     __ptext79:	
 31956 ;; *************** function _memset *****************
 31957 ;; Defined at:
 31958 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/memset.c"
 31959 ;; Parameters:    Size  Location     Type
 31960 ;;  p1              2    1[COMMON] PTR void 
 31961 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 31962 ;;		 -> menu_TaskData(14), flashy_TaskData(30), badge_inst(18), NULL(0), 
 31963 ;;  c               2    3[COMMON] int 
 31964 ;;  n               2    5[COMMON] unsigned int 
 31965 ;; Auto vars:     Size  Location     Type
 31966 ;;  p               2    7[COMMON] PTR unsigned char 
 31967 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 31968 ;;		 -> menu_TaskData(14), flashy_TaskData(30), badge_inst(18), NULL(0), 
 31969 ;; Return value:  Size  Location     Type
 31970 ;;                  2    1[COMMON] PTR void 
 31971 ;; Registers used:
 31972 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 31973 ;; Tracked objects:
 31974 ;;		On entry : 0/0
 31975 ;;		On exit  : 0/0
 31976 ;;		Unchanged: 0/0
 31977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31978 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31979 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31981 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31982 ;;Total ram usage:        8 bytes
 31983 ;; Hardware stack levels used:    1
 31984 ;; Hardware stack levels required when called:    4
 31985 ;; This function calls:
 31986 ;;		Nothing
 31987 ;; This function is called by:
 31988 ;;		_displayL1_Initialize
 31989 ;;		_displayL2_Initialize
 31990 ;;		_slot_Setup
 31991 ;;		_slot_Main
 31992 ;; This function uses a non-reentrant model
 31993 ;;
 31994                           
 31995                           
 31996                           ;psect for function _memset
 31997  342F                     _memset:	
 31998                           
 31999                           ;incstack = 0
 32000                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 32001  342F  0872               	movf	memset@p1+1,w
 32002  3430  00F8               	movwf	memset@p+1
 32003  3431  0871               	movf	memset@p1,w
 32004  3432  00F7               	movwf	memset@p
 32005  3433                     l8457:	
 32006  3433  3001               	movlw	1
 32007  3434  02F5               	subwf	memset@n,f
 32008  3435  3000               	movlw	0
 32009  3436  3BF6               	subwfb	memset@n+1,f
 32010  3437  0A75               	incf	memset@n,w
 32011  3438  1903               	btfsc	3,2
 32012  3439  0A76               	incf	memset@n+1,w
 32013  343A  1903               	btfsc	3,2
 32014  343B  0008               	return
 32015  343C  0877               	movf	memset@p,w
 32016  343D  0086               	movwf	6
 32017  343E  0878               	movf	memset@p+1,w
 32018  343F  0087               	movwf	7
 32019  3440  0873               	movf	memset@c,w
 32020  3441  0081               	movwf	1
 32021  3442  3001               	movlw	1
 32022  3443  07F7               	addwf	memset@p,f
 32023  3444  3000               	movlw	0
 32024  3445  3DF8               	addwfc	memset@p+1,f
 32025  3446  2C33               	goto	l8457
 32026  3447                     __end_of_memset:	
 32027                           ;	Return value of _memset is never used
 32028                           
 32029                           
 32030                           	psect	text80
 32031  3341                     __ptext80:	
 32032 ;; *************** function _displayL1_Update *****************
 32033 ;; Defined at:
 32034 ;;		line 97 in file "nullifyBadge_displayL1.c"
 32035 ;; Parameters:    Size  Location     Type
 32036 ;;  display         1    wreg     PTR struct t_nullifyDisp
 32037 ;;		 -> badge_inst(18), 
 32038 ;; Auto vars:     Size  Location     Type
 32039 ;;  display         1   10[BANK0 ] PTR struct t_nullifyDisp
 32040 ;;		 -> badge_inst(18), 
 32041 ;;  tmpRxBuf       10    0[BANK0 ] unsigned char [10]
 32042 ;; Return value:  Size  Location     Type
 32043 ;;                  1    wreg      void 
 32044 ;; Registers used:
 32045 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32046 ;; Tracked objects:
 32047 ;;		On entry : 0/0
 32048 ;;		On exit  : 0/0
 32049 ;;		Unchanged: 0/0
 32050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32052 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32053 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32054 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32055 ;;Total ram usage:       13 bytes
 32056 ;; Hardware stack levels used:    1
 32057 ;; Hardware stack levels required when called:    6
 32058 ;; This function calls:
 32059 ;;		_SPI1_Exchange8bitBuffer
 32060 ;; This function is called by:
 32061 ;;		_displayL1_Initialize
 32062 ;;		_displayL2_ForceUpdate
 32063 ;;		_displayL2_EraseSegDisplay
 32064 ;;		_displayL2_SetUserLeds
 32065 ;;		_displayL2_ClrUserLeds
 32066 ;;		_displayL2_PrintChar
 32067 ;;		_displayL2_PrintStr
 32068 ;; This function uses a non-reentrant model
 32069 ;;
 32070                           
 32071                           
 32072                           ;psect for function _displayL1_Update
 32073  3341                     _displayL1_Update:	
 32074                           
 32075                           ;incstack = 0
 32076                           ; Regs used in _displayL1_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 32077                           ;displayL1_Update@display stored from wreg
 32078  3341  0020               	movlb	0	; select bank0
 32079  3342  00AA               	movwf	displayL1_Update@display
 32080                           
 32081                           ;nullifyBadge_displayL1.c: 98: u8 tmpRxBuf[10];
 32082                           ;nullifyBadge_displayL1.c: 100: SPI1_Exchange8bitBuffer(display->displayVect, 10, tmpRxB
      +                          uf);
 32083  3343  300A               	movlw	10
 32084  3344  00F9               	movwf	??_displayL1_Update
 32085  3345  0879               	movf	??_displayL1_Update,w
 32086  3346  00F2               	movwf	SPI1_Exchange8bitBuffer@bufLen
 32087  3347  3020               	movlw	(low (displayL1_Update@tmpRxBuf| 0))& (0+255)
 32088  3348  00FA               	movwf	??_displayL1_Update+1
 32089  3349  087A               	movf	??_displayL1_Update+1,w
 32090  334A  00F3               	movwf	SPI1_Exchange8bitBuffer@dataOut
 32091  334B  082A               	movf	displayL1_Update@display,w
 32092  334C  31AB  23A7         	fcall	_SPI1_Exchange8bitBuffer
 32093                           
 32094                           ;nullifyBadge_displayL1.c: 101: do { LATCbits.LATC7 = 1; } while(0);
 32095  334E  0022               	movlb	2	; select bank2
 32096  334F  178E               	bsf	14,7	;volatile
 32097                           
 32098                           ;nullifyBadge_displayL1.c: 102: do { LATCbits.LATC7 = 0; } while(0);
 32099  3350  138E               	bcf	14,7	;volatile
 32100  3351  0008               	return
 32101  3352                     __end_of_displayL1_Update:	
 32102                           
 32103                           	psect	text81
 32104  2BA7                     __ptext81:	
 32105 ;; *************** function _SPI1_Exchange8bitBuffer *****************
 32106 ;; Defined at:
 32107 ;;		line 91 in file "mcc_generated_files/spi1.c"
 32108 ;; Parameters:    Size  Location     Type
 32109 ;;  dataIn          1    wreg     PTR unsigned char 
 32110 ;;		 -> badge_inst(18), 
 32111 ;;  bufLen          1    2[COMMON] unsigned char 
 32112 ;;  dataOut         1    3[COMMON] PTR unsigned char 
 32113 ;;		 -> displayL1_Update@tmpRxBuf(10), 
 32114 ;; Auto vars:     Size  Location     Type
 32115 ;;  dataIn          1    7[COMMON] PTR unsigned char 
 32116 ;;		 -> badge_inst(18), 
 32117 ;;  bytesWritten    1    8[COMMON] unsigned char 
 32118 ;; Return value:  Size  Location     Type
 32119 ;;                  1    wreg      unsigned char 
 32120 ;; Registers used:
 32121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32122 ;; Tracked objects:
 32123 ;;		On entry : 0/0
 32124 ;;		On exit  : 0/0
 32125 ;;		Unchanged: 0/0
 32126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32127 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32128 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32129 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32130 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32131 ;;Total ram usage:        7 bytes
 32132 ;; Hardware stack levels used:    1
 32133 ;; Hardware stack levels required when called:    5
 32134 ;; This function calls:
 32135 ;;		_SPI1_Exchange8bit
 32136 ;; This function is called by:
 32137 ;;		_displayL1_Update
 32138 ;; This function uses a non-reentrant model
 32139 ;;
 32140                           
 32141                           
 32142                           ;psect for function _SPI1_Exchange8bitBuffer
 32143  2BA7                     _SPI1_Exchange8bitBuffer:	
 32144                           
 32145                           ;incstack = 0
 32146                           ; Regs used in _SPI1_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 32147                           ;SPI1_Exchange8bitBuffer@dataIn stored from wreg
 32148  2BA7  00F7               	movwf	SPI1_Exchange8bitBuffer@dataIn
 32149                           
 32150                           ;spi1.c: 93: uint8_t bytesWritten = 0;
 32151  2BA8  01F8               	clrf	SPI1_Exchange8bitBuffer@bytesWritten
 32152                           
 32153                           ;spi1.c: 95: if(bufLen != 0)
 32154  2BA9  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 32155  2BAA  1903               	btfsc	3,2
 32156  2BAB  0008               	return
 32157                           
 32158                           ;spi1.c: 96: {
 32159                           ;spi1.c: 97: if(dataIn != (0))
 32160  2BAC  0877               	movf	SPI1_Exchange8bitBuffer@dataIn,w
 32161  2BAD  1D03               	btfss	3,2
 32162  2BAE  2BD7               	goto	l8203
 32163  2BAF  2BDC               	goto	l8205
 32164  2BB0                     l8195:	
 32165                           ;spi1.c: 98: {
 32166                           ;spi1.c: 99: while(bytesWritten < bufLen)
 32167                           
 32168                           
 32169                           ;spi1.c: 100: {
 32170                           ;spi1.c: 101: if(dataOut == (0))
 32171  2BB0  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 32172  2BB1  1D03               	btfss	3,2
 32173  2BB2  2BBF               	goto	l8199
 32174                           
 32175                           ;spi1.c: 102: {
 32176                           ;spi1.c: 103: SPI1_Exchange8bit(dataIn[bytesWritten]);
 32177  2BB3  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32178  2BB4  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 32179  2BB5  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32180  2BB6  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32181  2BB7  0086               	movwf	6
 32182  2BB8  3001               	movlw	1	; select bank2/3
 32183  2BB9  0087               	movwf	7
 32184  2BBA  0801               	movf	1,w
 32185  2BBB  31B2  2253  31AB   	fcall	_SPI1_Exchange8bit
 32186                           
 32187                           ;spi1.c: 104: }
 32188  2BBE  2BD3               	goto	l8201
 32189  2BBF                     l8199:	
 32190                           
 32191                           ;spi1.c: 105: else
 32192                           ;spi1.c: 106: {
 32193                           ;spi1.c: 107: dataOut[bytesWritten] = SPI1_Exchange8bit(dataIn[bytesWritten]);
 32194  2BBF  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32195  2BC0  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 32196  2BC1  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32197  2BC2  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32198  2BC3  0086               	movwf	6
 32199  2BC4  3001               	movlw	1	; select bank2/3
 32200  2BC5  0087               	movwf	7
 32201  2BC6  0801               	movf	1,w
 32202  2BC7  31B2  2253  31AB   	fcall	_SPI1_Exchange8bit
 32203  2BCA  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 32204  2BCB  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32205  2BCC  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 32206  2BCD  00F6               	movwf	??_SPI1_Exchange8bitBuffer+2
 32207  2BCE  0876               	movf	??_SPI1_Exchange8bitBuffer+2,w
 32208  2BCF  0086               	movwf	6
 32209  2BD0  0187               	clrf	7
 32210  2BD1  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 32211  2BD2  0081               	movwf	1
 32212  2BD3                     l8201:	
 32213                           
 32214                           ;spi1.c: 108: }
 32215                           ;spi1.c: 110: bytesWritten++;
 32216  2BD3  3001               	movlw	1
 32217  2BD4  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32218  2BD5  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32219  2BD6  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 32220  2BD7                     l8203:	
 32221  2BD7  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 32222  2BD8  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32223  2BD9  1803               	btfsc	3,0
 32224  2BDA  0008               	return
 32225  2BDB  2BB0               	goto	l8195
 32226  2BDC                     l8205:	
 32227                           ;spi1.c: 111: }
 32228                           ;spi1.c: 112: }
 32229                           
 32230                           
 32231                           ;spi1.c: 113: else
 32232                           ;spi1.c: 114: {
 32233                           ;spi1.c: 115: if(dataOut != (0))
 32234  2BDC  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 32235  2BDD  1903               	btfsc	3,2
 32236  2BDE  0008               	return
 32237  2BDF                     l8213:	
 32238  2BDF  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 32239  2BE0  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32240  2BE1  1803               	btfsc	3,0
 32241  2BE2  0008               	return
 32242                           
 32243                           ;spi1.c: 118: {
 32244                           ;spi1.c: 119: dataOut[bytesWritten] = SPI1_Exchange8bit(0x0);
 32245                           
 32246                           ;spi1.c: 116: {
 32247                           ;spi1.c: 117: while(bytesWritten < bufLen )
 32248  2BE3  3000               	movlw	0
 32249  2BE4  31B2  2253  31AB   	fcall	_SPI1_Exchange8bit
 32250  2BE7  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32251  2BE8  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32252  2BE9  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 32253  2BEA  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 32254  2BEB  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 32255  2BEC  0086               	movwf	6
 32256  2BED  0187               	clrf	7
 32257  2BEE  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32258  2BEF  0081               	movwf	1
 32259                           
 32260                           ;spi1.c: 121: bytesWritten++;
 32261  2BF0  3001               	movlw	1
 32262  2BF1  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32263  2BF2  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32264  2BF3  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 32265  2BF4  2BDF               	goto	l8213
 32266  2BF5                     __end_of_SPI1_Exchange8bitBuffer:	
 32267                           ;spi1.c: 122: }
 32268                           ;spi1.c: 123: }
 32269                           ;spi1.c: 124: }
 32270                           ;spi1.c: 125: }
 32271                           ;spi1.c: 127: return bytesWritten;
 32272                           ;	Return value of _SPI1_Exchange8bitBuffer is never used
 32273                           
 32274                           
 32275                           	psect	text82
 32276  3253                     __ptext82:	
 32277 ;; *************** function _SPI1_Exchange8bit *****************
 32278 ;; Defined at:
 32279 ;;		line 77 in file "mcc_generated_files/spi1.c"
 32280 ;; Parameters:    Size  Location     Type
 32281 ;;  data            1    wreg     unsigned char 
 32282 ;; Auto vars:     Size  Location     Type
 32283 ;;  data            1    1[COMMON] unsigned char 
 32284 ;; Return value:  Size  Location     Type
 32285 ;;                  1    wreg      unsigned char 
 32286 ;; Registers used:
 32287 ;;		wreg
 32288 ;; Tracked objects:
 32289 ;;		On entry : 0/0
 32290 ;;		On exit  : 0/0
 32291 ;;		Unchanged: 0/0
 32292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32294 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32296 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32297 ;;Total ram usage:        1 bytes
 32298 ;; Hardware stack levels used:    1
 32299 ;; Hardware stack levels required when called:    4
 32300 ;; This function calls:
 32301 ;;		Nothing
 32302 ;; This function is called by:
 32303 ;;		_SPI1_Exchange8bitBuffer
 32304 ;; This function uses a non-reentrant model
 32305 ;;
 32306                           
 32307                           
 32308                           ;psect for function _SPI1_Exchange8bit
 32309  3253                     _SPI1_Exchange8bit:	
 32310                           
 32311                           ;incstack = 0
 32312                           ; Regs used in _SPI1_Exchange8bit: [wreg]
 32313                           ;SPI1_Exchange8bit@data stored from wreg
 32314  3253  00F1               	movwf	SPI1_Exchange8bit@data
 32315                           
 32316                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
 32317  3254  0024               	movlb	4	; select bank4
 32318  3255  1395               	bcf	21,7	;volatile
 32319                           
 32320                           ;spi1.c: 82: SSP1BUF = data;
 32321  3256  0871               	movf	SPI1_Exchange8bit@data,w
 32322  3257  0091               	movwf	17	;volatile
 32323  3258                     l18:	
 32324                           ;spi1.c: 85: {
 32325                           
 32326                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
 32327                           
 32328  3258  1C14               	btfss	20,0	;volatile
 32329  3259  2A58               	goto	l18
 32330                           
 32331                           ;spi1.c: 86: }
 32332                           ;spi1.c: 88: return (SSP1BUF);
 32333  325A  0811               	movf	17,w	;volatile
 32334  325B  0008               	return
 32335  325C                     __end_of_SPI1_Exchange8bit:	
 32336                           
 32337                           	psect	text83
 32338  350F                     __ptext83:	
 32339 ;; *************** function _SYSTEM_Initialize *****************
 32340 ;; Defined at:
 32341 ;;		line 76 in file "mcc_generated_files/mcc.c"
 32342 ;; Parameters:    Size  Location     Type
 32343 ;;		None
 32344 ;; Auto vars:     Size  Location     Type
 32345 ;;		None
 32346 ;; Return value:  Size  Location     Type
 32347 ;;                  1    wreg      void 
 32348 ;; Registers used:
 32349 ;;		wreg, status,2, status,0, pclath, cstack
 32350 ;; Tracked objects:
 32351 ;;		On entry : 0/0
 32352 ;;		On exit  : 0/0
 32353 ;;		Unchanged: 0/0
 32354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32359 ;;Total ram usage:        0 bytes
 32360 ;; Hardware stack levels used:    1
 32361 ;; Hardware stack levels required when called:    6
 32362 ;; This function calls:
 32363 ;;		_OSCILLATOR_Initialize
 32364 ;;		_PIN_MANAGER_Initialize
 32365 ;;		_PWM1_Initialize
 32366 ;;		_PWM2_Initialize
 32367 ;;		_PWM5_Initialize
 32368 ;;		_PWM6_Initialize
 32369 ;;		_SPI1_Initialize
 32370 ;;		_TMR0_Initialize
 32371 ;;		_TMR2_Initialize
 32372 ;;		_TMR4_Initialize
 32373 ;;		_WDT_Initialize
 32374 ;; This function is called by:
 32375 ;;		_nullifyBadge_platformInit
 32376 ;; This function uses a non-reentrant model
 32377 ;;
 32378                           
 32379                           
 32380                           ;psect for function _SYSTEM_Initialize
 32381  350F                     _SYSTEM_Initialize:	
 32382                           
 32383                           ;mcc.c: 79: PIN_MANAGER_Initialize();
 32384                           
 32385                           ;incstack = 0
 32386                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32387  350F  31AC  249B  31B5   	fcall	_PIN_MANAGER_Initialize
 32388                           
 32389                           ;mcc.c: 80: OSCILLATOR_Initialize();
 32390  3512  31B2  2265  31B5   	fcall	_OSCILLATOR_Initialize
 32391                           
 32392                           ;mcc.c: 81: WDT_Initialize();
 32393  3515  31B2  2227  31B5   	fcall	_WDT_Initialize
 32394                           
 32395                           ;mcc.c: 82: SPI1_Initialize();
 32396  3518  31B2  2243  31B5   	fcall	_SPI1_Initialize
 32397                           
 32398                           ;mcc.c: 83: PWM6_Initialize();
 32399  351B  31B2  22C6  31B5   	fcall	_PWM6_Initialize
 32400                           
 32401                           ;mcc.c: 84: PWM1_Initialize();
 32402  351E  31B2  228E  31B5   	fcall	_PWM1_Initialize
 32403                           
 32404                           ;mcc.c: 85: PWM2_Initialize();
 32405  3521  31B2  2299  31B5   	fcall	_PWM2_Initialize
 32406                           
 32407                           ;mcc.c: 86: TMR4_Initialize();
 32408  3524  31B2  22A4  31B5   	fcall	_TMR4_Initialize
 32409                           
 32410                           ;mcc.c: 87: TMR2_Initialize();
 32411  3527  31B2  226F  31B5   	fcall	_TMR2_Initialize
 32412                           
 32413                           ;mcc.c: 88: PWM5_Initialize();
 32414  352A  31B2  22BA  31B5   	fcall	_PWM5_Initialize
 32415                           
 32416                           ;mcc.c: 89: TMR0_Initialize();
 32417  352D  31B4  24B5         	fcall	_TMR0_Initialize
 32418  352F  0008               	return
 32419  3530                     __end_of_SYSTEM_Initialize:	
 32420                           
 32421                           	psect	text84
 32422  3227                     __ptext84:	
 32423 ;; *************** function _WDT_Initialize *****************
 32424 ;; Defined at:
 32425 ;;		line 110 in file "mcc_generated_files/mcc.c"
 32426 ;; Parameters:    Size  Location     Type
 32427 ;;		None
 32428 ;; Auto vars:     Size  Location     Type
 32429 ;;		None
 32430 ;; Return value:  Size  Location     Type
 32431 ;;                  1    wreg      void 
 32432 ;; Registers used:
 32433 ;;		wreg
 32434 ;; Tracked objects:
 32435 ;;		On entry : 0/0
 32436 ;;		On exit  : 0/0
 32437 ;;		Unchanged: 0/0
 32438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32443 ;;Total ram usage:        0 bytes
 32444 ;; Hardware stack levels used:    1
 32445 ;; Hardware stack levels required when called:    4
 32446 ;; This function calls:
 32447 ;;		Nothing
 32448 ;; This function is called by:
 32449 ;;		_SYSTEM_Initialize
 32450 ;; This function uses a non-reentrant model
 32451 ;;
 32452                           
 32453                           
 32454                           ;psect for function _WDT_Initialize
 32455  3227                     _WDT_Initialize:	
 32456                           
 32457                           ;mcc.c: 113: WDTCON = 0x16;
 32458                           
 32459                           ;incstack = 0
 32460                           ; Regs used in _WDT_Initialize: [wreg]
 32461  3227  3016               	movlw	22
 32462  3228  0021               	movlb	1	; select bank1
 32463  3229  0097               	movwf	23	;volatile
 32464  322A  0008               	return
 32465  322B                     __end_of_WDT_Initialize:	
 32466                           
 32467                           	psect	text85
 32468  32A4                     __ptext85:	
 32469 ;; *************** function _TMR4_Initialize *****************
 32470 ;; Defined at:
 32471 ;;		line 63 in file "mcc_generated_files/tmr4.c"
 32472 ;; Parameters:    Size  Location     Type
 32473 ;;		None
 32474 ;; Auto vars:     Size  Location     Type
 32475 ;;		None
 32476 ;; Return value:  Size  Location     Type
 32477 ;;                  1    wreg      void 
 32478 ;; Registers used:
 32479 ;;		wreg, status,2, status,0, pclath, cstack
 32480 ;; Tracked objects:
 32481 ;;		On entry : 0/0
 32482 ;;		On exit  : 0/0
 32483 ;;		Unchanged: 0/0
 32484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32489 ;;Total ram usage:        0 bytes
 32490 ;; Hardware stack levels used:    1
 32491 ;; Hardware stack levels required when called:    5
 32492 ;; This function calls:
 32493 ;;		_TMR4_StartTimer
 32494 ;; This function is called by:
 32495 ;;		_SYSTEM_Initialize
 32496 ;;		_nullifyBadge_platformInit
 32497 ;; This function uses a non-reentrant model
 32498 ;;
 32499                           
 32500                           
 32501                           ;psect for function _TMR4_Initialize
 32502  32A4                     _TMR4_Initialize:	
 32503                           
 32504                           ;tmr4.c: 68: T4CON = 0x7B;
 32505                           
 32506                           ;incstack = 0
 32507                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32508  32A4  307B               	movlw	123
 32509  32A5  0028               	movlb	8	; select bank8
 32510  32A6  0097               	movwf	23	;volatile
 32511                           
 32512                           ;tmr4.c: 71: PR4 = 0xFF;
 32513  32A7  30FF               	movlw	255
 32514  32A8  0096               	movwf	22	;volatile
 32515                           
 32516                           ;tmr4.c: 74: TMR4 = 0x00;
 32517  32A9  0195               	clrf	21	;volatile
 32518                           
 32519                           ;tmr4.c: 77: PIR2bits.TMR4IF = 0;
 32520  32AA  0020               	movlb	0	; select bank0
 32521  32AB  1092               	bcf	18,1	;volatile
 32522                           
 32523                           ;tmr4.c: 80: TMR4_StartTimer();
 32524  32AC  31B2  221E         	fcall	_TMR4_StartTimer
 32525  32AE  0008               	return
 32526  32AF                     __end_of_TMR4_Initialize:	
 32527                           
 32528                           	psect	text86
 32529  321E                     __ptext86:	
 32530 ;; *************** function _TMR4_StartTimer *****************
 32531 ;; Defined at:
 32532 ;;		line 83 in file "mcc_generated_files/tmr4.c"
 32533 ;; Parameters:    Size  Location     Type
 32534 ;;		None
 32535 ;; Auto vars:     Size  Location     Type
 32536 ;;		None
 32537 ;; Return value:  Size  Location     Type
 32538 ;;                  1    wreg      void 
 32539 ;; Registers used:
 32540 ;;		None
 32541 ;; Tracked objects:
 32542 ;;		On entry : 0/0
 32543 ;;		On exit  : 0/0
 32544 ;;		Unchanged: 0/0
 32545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32550 ;;Total ram usage:        0 bytes
 32551 ;; Hardware stack levels used:    1
 32552 ;; Hardware stack levels required when called:    4
 32553 ;; This function calls:
 32554 ;;		Nothing
 32555 ;; This function is called by:
 32556 ;;		_TMR4_Initialize
 32557 ;; This function uses a non-reentrant model
 32558 ;;
 32559                           
 32560                           
 32561                           ;psect for function _TMR4_StartTimer
 32562  321E                     _TMR4_StartTimer:	
 32563                           
 32564                           ;tmr4.c: 86: T4CONbits.TMR4ON = 1;
 32565                           
 32566                           ;incstack = 0
 32567                           ; Regs used in _TMR4_StartTimer: []
 32568  321E  0028               	movlb	8	; select bank8
 32569  321F  1517               	bsf	23,2	;volatile
 32570  3220  0008               	return
 32571  3221                     __end_of_TMR4_StartTimer:	
 32572                           
 32573                           	psect	text87
 32574  326F                     __ptext87:	
 32575 ;; *************** function _TMR2_Initialize *****************
 32576 ;; Defined at:
 32577 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 32578 ;; Parameters:    Size  Location     Type
 32579 ;;		None
 32580 ;; Auto vars:     Size  Location     Type
 32581 ;;		None
 32582 ;; Return value:  Size  Location     Type
 32583 ;;                  1    wreg      void 
 32584 ;; Registers used:
 32585 ;;		wreg, status,2, status,0, pclath, cstack
 32586 ;; Tracked objects:
 32587 ;;		On entry : 0/0
 32588 ;;		On exit  : 0/0
 32589 ;;		Unchanged: 0/0
 32590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32595 ;;Total ram usage:        0 bytes
 32596 ;; Hardware stack levels used:    1
 32597 ;; Hardware stack levels required when called:    5
 32598 ;; This function calls:
 32599 ;;		_TMR2_StartTimer
 32600 ;; This function is called by:
 32601 ;;		_SYSTEM_Initialize
 32602 ;;		_nullifyBadge_platformInit
 32603 ;; This function uses a non-reentrant model
 32604 ;;
 32605                           
 32606                           
 32607                           ;psect for function _TMR2_Initialize
 32608  326F                     _TMR2_Initialize:	
 32609                           
 32610                           ;tmr2.c: 68: T2CON = 0x01;
 32611                           
 32612                           ;incstack = 0
 32613                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32614  326F  3001               	movlw	1
 32615  3270  0020               	movlb	0	; select bank0
 32616  3271  009F               	movwf	31	;volatile
 32617                           
 32618                           ;tmr2.c: 71: PR2 = 0x4A;
 32619  3272  304A               	movlw	74
 32620  3273  009E               	movwf	30	;volatile
 32621                           
 32622                           ;tmr2.c: 74: TMR2 = 0x00;
 32623  3274  019D               	clrf	29	;volatile
 32624                           
 32625                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 32626  3275  1091               	bcf	17,1	;volatile
 32627                           
 32628                           ;tmr2.c: 80: TMR2_StartTimer();
 32629  3276  31B2  221B         	fcall	_TMR2_StartTimer
 32630  3278  0008               	return
 32631  3279                     __end_of_TMR2_Initialize:	
 32632                           
 32633                           	psect	text88
 32634  321B                     __ptext88:	
 32635 ;; *************** function _TMR2_StartTimer *****************
 32636 ;; Defined at:
 32637 ;;		line 83 in file "mcc_generated_files/tmr2.c"
 32638 ;; Parameters:    Size  Location     Type
 32639 ;;		None
 32640 ;; Auto vars:     Size  Location     Type
 32641 ;;		None
 32642 ;; Return value:  Size  Location     Type
 32643 ;;                  1    wreg      void 
 32644 ;; Registers used:
 32645 ;;		None
 32646 ;; Tracked objects:
 32647 ;;		On entry : 0/0
 32648 ;;		On exit  : 0/0
 32649 ;;		Unchanged: 0/0
 32650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32655 ;;Total ram usage:        0 bytes
 32656 ;; Hardware stack levels used:    1
 32657 ;; Hardware stack levels required when called:    4
 32658 ;; This function calls:
 32659 ;;		Nothing
 32660 ;; This function is called by:
 32661 ;;		_TMR2_Initialize
 32662 ;; This function uses a non-reentrant model
 32663 ;;
 32664                           
 32665                           
 32666                           ;psect for function _TMR2_StartTimer
 32667  321B                     _TMR2_StartTimer:	
 32668                           
 32669                           ;tmr2.c: 86: T2CONbits.TMR2ON = 1;
 32670                           
 32671                           ;incstack = 0
 32672                           ; Regs used in _TMR2_StartTimer: []
 32673  321B  0020               	movlb	0	; select bank0
 32674  321C  151F               	bsf	31,2	;volatile
 32675  321D  0008               	return
 32676  321E                     __end_of_TMR2_StartTimer:	
 32677                           
 32678                           	psect	text89
 32679  34B5                     __ptext89:	
 32680 ;; *************** function _TMR0_Initialize *****************
 32681 ;; Defined at:
 32682 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 32683 ;; Parameters:    Size  Location     Type
 32684 ;;		None
 32685 ;; Auto vars:     Size  Location     Type
 32686 ;;		None
 32687 ;; Return value:  Size  Location     Type
 32688 ;;                  1    wreg      void 
 32689 ;; Registers used:
 32690 ;;		wreg, status,2, status,0, pclath, cstack
 32691 ;; Tracked objects:
 32692 ;;		On entry : 0/0
 32693 ;;		On exit  : 0/0
 32694 ;;		Unchanged: 0/0
 32695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32700 ;;Total ram usage:        0 bytes
 32701 ;; Hardware stack levels used:    1
 32702 ;; Hardware stack levels required when called:    5
 32703 ;; This function calls:
 32704 ;;		_TMR0_SetInterruptHandler
 32705 ;;		_TMR0_StartTimer
 32706 ;; This function is called by:
 32707 ;;		_SYSTEM_Initialize
 32708 ;;		_nullifyBadge_platformInit
 32709 ;; This function uses a non-reentrant model
 32710 ;;
 32711                           
 32712                           
 32713                           ;psect for function _TMR0_Initialize
 32714  34B5                     _TMR0_Initialize:	
 32715                           
 32716                           ;tmr0.c: 70: T0CON0 = 0x10;
 32717                           
 32718                           ;incstack = 0
 32719                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32720  34B5  3010               	movlw	16
 32721  34B6  0020               	movlb	0	; select bank0
 32722  34B7  0097               	movwf	23	;volatile
 32723                           
 32724                           ;tmr0.c: 73: T0CON1 = 0x4D;
 32725  34B8  304D               	movlw	77
 32726  34B9  0098               	movwf	24	;volatile
 32727                           
 32728                           ;tmr0.c: 76: TMR0H = 0xFF;
 32729  34BA  30FF               	movlw	255
 32730  34BB  0096               	movwf	22	;volatile
 32731                           
 32732                           ;tmr0.c: 79: TMR0L = 0xFF;
 32733  34BC  30FF               	movlw	255
 32734  34BD  0095               	movwf	21	;volatile
 32735                           
 32736                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 32737  34BE  0816               	movf	22,w	;volatile
 32738  34BF  0021               	movlb	1	; select bank1
 32739  34C0  00C1               	movwf	(_timer0ReloadVal16bit+1)^(0+128)	;volatile
 32740  34C1  0020               	movlb	0	; select bank0
 32741  34C2  0815               	movf	21,w	;volatile
 32742  34C3  0021               	movlb	1	; select bank1
 32743  34C4  00C0               	movwf	_timer0ReloadVal16bit^(0+128)	;volatile
 32744                           
 32745                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
 32746  34C5  0020               	movlb	0	; select bank0
 32747  34C6  1290               	bcf	16,5	;volatile
 32748                           
 32749                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
 32750  34C7  0021               	movlb	1	; select bank1
 32751  34C8  1690               	bsf	16,5	;volatile
 32752                           
 32753                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 32754  34C9  3082               	movlw	low _TMR0_DefaultInterruptHandler
 32755  34CA  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 32756  34CB  3028               	movlw	high _TMR0_DefaultInterruptHandler
 32757  34CC  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 32758  34CD  31B2  222B  31B4   	fcall	_TMR0_SetInterruptHandler
 32759                           
 32760                           ;tmr0.c: 94: TMR0_StartTimer();
 32761  34D0  31B2  2218         	fcall	_TMR0_StartTimer
 32762  34D2  0008               	return
 32763  34D3                     __end_of_TMR0_Initialize:	
 32764                           
 32765                           	psect	text90
 32766  3218                     __ptext90:	
 32767 ;; *************** function _TMR0_StartTimer *****************
 32768 ;; Defined at:
 32769 ;;		line 97 in file "mcc_generated_files/tmr0.c"
 32770 ;; Parameters:    Size  Location     Type
 32771 ;;		None
 32772 ;; Auto vars:     Size  Location     Type
 32773 ;;		None
 32774 ;; Return value:  Size  Location     Type
 32775 ;;                  1    wreg      void 
 32776 ;; Registers used:
 32777 ;;		None
 32778 ;; Tracked objects:
 32779 ;;		On entry : 0/0
 32780 ;;		On exit  : 0/0
 32781 ;;		Unchanged: 0/0
 32782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32787 ;;Total ram usage:        0 bytes
 32788 ;; Hardware stack levels used:    1
 32789 ;; Hardware stack levels required when called:    4
 32790 ;; This function calls:
 32791 ;;		Nothing
 32792 ;; This function is called by:
 32793 ;;		_TMR0_Initialize
 32794 ;; This function uses a non-reentrant model
 32795 ;;
 32796                           
 32797                           
 32798                           ;psect for function _TMR0_StartTimer
 32799  3218                     _TMR0_StartTimer:	
 32800                           
 32801                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
 32802                           
 32803                           ;incstack = 0
 32804                           ; Regs used in _TMR0_StartTimer: []
 32805  3218  0020               	movlb	0	; select bank0
 32806  3219  1797               	bsf	23,7	;volatile
 32807  321A  0008               	return
 32808  321B                     __end_of_TMR0_StartTimer:	
 32809                           
 32810                           	psect	text91
 32811  322B                     __ptext91:	
 32812 ;; *************** function _TMR0_SetInterruptHandler *****************
 32813 ;; Defined at:
 32814 ;;		line 161 in file "mcc_generated_files/tmr0.c"
 32815 ;; Parameters:    Size  Location     Type
 32816 ;;  InterruptHan    2    1[COMMON] PTR void 
 32817 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 32818 ;; Auto vars:     Size  Location     Type
 32819 ;;		None
 32820 ;; Return value:  Size  Location     Type
 32821 ;;                  1    wreg      void 
 32822 ;; Registers used:
 32823 ;;		wreg
 32824 ;; Tracked objects:
 32825 ;;		On entry : 0/0
 32826 ;;		On exit  : 0/0
 32827 ;;		Unchanged: 0/0
 32828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32829 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32832 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32833 ;;Total ram usage:        2 bytes
 32834 ;; Hardware stack levels used:    1
 32835 ;; Hardware stack levels required when called:    4
 32836 ;; This function calls:
 32837 ;;		Nothing
 32838 ;; This function is called by:
 32839 ;;		_TMR0_Initialize
 32840 ;; This function uses a non-reentrant model
 32841 ;;
 32842                           
 32843                           
 32844                           ;psect for function _TMR0_SetInterruptHandler
 32845  322B                     _TMR0_SetInterruptHandler:	
 32846                           
 32847                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
 32848                           
 32849                           ;incstack = 0
 32850                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 32851  322B  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 32852  322C  0021               	movlb	1	; select bank1
 32853  322D  00BF               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 32854  322E  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 32855  322F  00BE               	movwf	_TMR0_InterruptHandler^(0+128)
 32856  3230  0008               	return
 32857  3231                     __end_of_TMR0_SetInterruptHandler:	
 32858                           
 32859                           	psect	text92
 32860  3243                     __ptext92:	
 32861 ;; *************** function _SPI1_Initialize *****************
 32862 ;; Defined at:
 32863 ;;		line 63 in file "mcc_generated_files/spi1.c"
 32864 ;; Parameters:    Size  Location     Type
 32865 ;;		None
 32866 ;; Auto vars:     Size  Location     Type
 32867 ;;		None
 32868 ;; Return value:  Size  Location     Type
 32869 ;;                  1    wreg      void 
 32870 ;; Registers used:
 32871 ;;		wreg
 32872 ;; Tracked objects:
 32873 ;;		On entry : 0/0
 32874 ;;		On exit  : 0/0
 32875 ;;		Unchanged: 0/0
 32876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32881 ;;Total ram usage:        0 bytes
 32882 ;; Hardware stack levels used:    1
 32883 ;; Hardware stack levels required when called:    4
 32884 ;; This function calls:
 32885 ;;		Nothing
 32886 ;; This function is called by:
 32887 ;;		_SYSTEM_Initialize
 32888 ;;		_nullifyBadge_platformInit
 32889 ;; This function uses a non-reentrant model
 32890 ;;
 32891                           
 32892                           
 32893                           ;psect for function _SPI1_Initialize
 32894  3243                     _SPI1_Initialize:	
 32895                           
 32896                           ;spi1.c: 68: SSP1STAT = 0x40;
 32897                           
 32898                           ;incstack = 0
 32899                           ; Regs used in _SPI1_Initialize: [wreg]
 32900  3243  3040               	movlw	64
 32901  3244  0024               	movlb	4	; select bank4
 32902  3245  0094               	movwf	20	;volatile
 32903                           
 32904                           ;spi1.c: 71: SSP1CON1 = 0x22;
 32905  3246  3022               	movlw	34
 32906  3247  0095               	movwf	21	;volatile
 32907                           
 32908                           ;spi1.c: 74: SSP1ADD = 0x01;
 32909  3248  3001               	movlw	1
 32910  3249  0092               	movwf	18	;volatile
 32911  324A  0008               	return
 32912  324B                     __end_of_SPI1_Initialize:	
 32913                           
 32914                           	psect	text93
 32915  32C6                     __ptext93:	
 32916 ;; *************** function _PWM6_Initialize *****************
 32917 ;; Defined at:
 32918 ;;		line 57 in file "mcc_generated_files/pwm6.c"
 32919 ;; Parameters:    Size  Location     Type
 32920 ;;		None
 32921 ;; Auto vars:     Size  Location     Type
 32922 ;;		None
 32923 ;; Return value:  Size  Location     Type
 32924 ;;                  1    wreg      void 
 32925 ;; Registers used:
 32926 ;;		wreg, status,2, status,0
 32927 ;; Tracked objects:
 32928 ;;		On entry : 0/0
 32929 ;;		On exit  : 0/0
 32930 ;;		Unchanged: 0/0
 32931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32936 ;;Total ram usage:        0 bytes
 32937 ;; Hardware stack levels used:    1
 32938 ;; Hardware stack levels required when called:    4
 32939 ;; This function calls:
 32940 ;;		Nothing
 32941 ;; This function is called by:
 32942 ;;		_SYSTEM_Initialize
 32943 ;;		_nullifyBadge_platformInit
 32944 ;; This function uses a non-reentrant model
 32945 ;;
 32946                           
 32947                           
 32948                           ;psect for function _PWM6_Initialize
 32949  32C6                     _PWM6_Initialize:	
 32950                           
 32951                           ;pwm6.c: 61: PWM6CON = 0x90;
 32952                           
 32953                           ;incstack = 0
 32954                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 32955  32C6  3090               	movlw	144
 32956  32C7  002C               	movlb	12	; select bank12
 32957  32C8  009C               	movwf	28	;volatile
 32958                           
 32959                           ;pwm6.c: 64: PWM6DCH = 0x7F;
 32960  32C9  307F               	movlw	127
 32961  32CA  009B               	movwf	27	;volatile
 32962                           
 32963                           ;pwm6.c: 67: PWM6DCL = 0xC0;
 32964  32CB  30C0               	movlw	192
 32965  32CC  009A               	movwf	26	;volatile
 32966                           
 32967                           ;pwm6.c: 71: PWMTMRSbits.P6TSEL = 0x2;
 32968  32CD  081F               	movf	31,w	;volatile
 32969  32CE  39F3               	andlw	-13
 32970  32CF  3808               	iorlw	8
 32971  32D0  009F               	movwf	31	;volatile
 32972  32D1  0008               	return
 32973  32D2                     __end_of_PWM6_Initialize:	
 32974                           
 32975                           	psect	text94
 32976  32BA                     __ptext94:	
 32977 ;; *************** function _PWM5_Initialize *****************
 32978 ;; Defined at:
 32979 ;;		line 57 in file "mcc_generated_files/pwm5.c"
 32980 ;; Parameters:    Size  Location     Type
 32981 ;;		None
 32982 ;; Auto vars:     Size  Location     Type
 32983 ;;		None
 32984 ;; Return value:  Size  Location     Type
 32985 ;;                  1    wreg      void 
 32986 ;; Registers used:
 32987 ;;		wreg, status,2, status,0
 32988 ;; Tracked objects:
 32989 ;;		On entry : 0/0
 32990 ;;		On exit  : 0/0
 32991 ;;		Unchanged: 0/0
 32992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32997 ;;Total ram usage:        0 bytes
 32998 ;; Hardware stack levels used:    1
 32999 ;; Hardware stack levels required when called:    4
 33000 ;; This function calls:
 33001 ;;		Nothing
 33002 ;; This function is called by:
 33003 ;;		_SYSTEM_Initialize
 33004 ;;		_nullifyBadge_platformInit
 33005 ;; This function uses a non-reentrant model
 33006 ;;
 33007                           
 33008                           
 33009                           ;psect for function _PWM5_Initialize
 33010  32BA                     _PWM5_Initialize:	
 33011                           
 33012                           ;pwm5.c: 61: PWM5CON = 0x90;
 33013                           
 33014                           ;incstack = 0
 33015                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
 33016  32BA  3090               	movlw	144
 33017  32BB  002C               	movlb	12	; select bank12
 33018  32BC  0099               	movwf	25	;volatile
 33019                           
 33020                           ;pwm5.c: 64: PWM5DCH = 0x7F;
 33021  32BD  307F               	movlw	127
 33022  32BE  0098               	movwf	24	;volatile
 33023                           
 33024                           ;pwm5.c: 67: PWM5DCL = 0xC0;
 33025  32BF  30C0               	movlw	192
 33026  32C0  0097               	movwf	23	;volatile
 33027                           
 33028                           ;pwm5.c: 71: PWMTMRSbits.P5TSEL = 0x2;
 33029  32C1  081F               	movf	31,w	;volatile
 33030  32C2  39FC               	andlw	-4
 33031  32C3  3802               	iorlw	2
 33032  32C4  009F               	movwf	31	;volatile
 33033  32C5  0008               	return
 33034  32C6                     __end_of_PWM5_Initialize:	
 33035                           
 33036                           	psect	text95
 33037  3299                     __ptext95:	
 33038 ;; *************** function _PWM2_Initialize *****************
 33039 ;; Defined at:
 33040 ;;		line 63 in file "mcc_generated_files/pwm2.c"
 33041 ;; Parameters:    Size  Location     Type
 33042 ;;		None
 33043 ;; Auto vars:     Size  Location     Type
 33044 ;;		None
 33045 ;; Return value:  Size  Location     Type
 33046 ;;                  1    wreg      void 
 33047 ;; Registers used:
 33048 ;;		wreg, status,2, status,0
 33049 ;; Tracked objects:
 33050 ;;		On entry : 0/0
 33051 ;;		On exit  : 0/0
 33052 ;;		Unchanged: 0/0
 33053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33058 ;;Total ram usage:        0 bytes
 33059 ;; Hardware stack levels used:    1
 33060 ;; Hardware stack levels required when called:    4
 33061 ;; This function calls:
 33062 ;;		Nothing
 33063 ;; This function is called by:
 33064 ;;		_SYSTEM_Initialize
 33065 ;;		_nullifyBadge_platformInit
 33066 ;; This function uses a non-reentrant model
 33067 ;;
 33068                           
 33069                           
 33070                           ;psect for function _PWM2_Initialize
 33071  3299                     _PWM2_Initialize:	
 33072                           
 33073                           ;pwm2.c: 68: CCP2CON = 0x8F;
 33074                           
 33075                           ;incstack = 0
 33076                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
 33077  3299  308F               	movlw	143
 33078  329A  0025               	movlb	5	; select bank5
 33079  329B  0097               	movwf	23	;volatile
 33080                           
 33081                           ;pwm2.c: 71: CCPR2H = 0x00;
 33082  329C  0196               	clrf	22	;volatile
 33083                           
 33084                           ;pwm2.c: 74: CCPR2L = 0xE0;
 33085  329D  30E0               	movlw	224
 33086  329E  0095               	movwf	21	;volatile
 33087                           
 33088                           ;pwm2.c: 77: CCPTMRSbits.C2TSEL = 0x1;
 33089  329F  081F               	movf	31,w	;volatile
 33090  32A0  39F3               	andlw	-13
 33091  32A1  3804               	iorlw	4
 33092  32A2  009F               	movwf	31	;volatile
 33093  32A3  0008               	return
 33094  32A4                     __end_of_PWM2_Initialize:	
 33095                           
 33096                           	psect	text96
 33097  328E                     __ptext96:	
 33098 ;; *************** function _PWM1_Initialize *****************
 33099 ;; Defined at:
 33100 ;;		line 63 in file "mcc_generated_files/pwm1.c"
 33101 ;; Parameters:    Size  Location     Type
 33102 ;;		None
 33103 ;; Auto vars:     Size  Location     Type
 33104 ;;		None
 33105 ;; Return value:  Size  Location     Type
 33106 ;;                  1    wreg      void 
 33107 ;; Registers used:
 33108 ;;		wreg, status,2, status,0
 33109 ;; Tracked objects:
 33110 ;;		On entry : 0/0
 33111 ;;		On exit  : 0/0
 33112 ;;		Unchanged: 0/0
 33113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33118 ;;Total ram usage:        0 bytes
 33119 ;; Hardware stack levels used:    1
 33120 ;; Hardware stack levels required when called:    4
 33121 ;; This function calls:
 33122 ;;		Nothing
 33123 ;; This function is called by:
 33124 ;;		_SYSTEM_Initialize
 33125 ;;		_nullifyBadge_platformInit
 33126 ;; This function uses a non-reentrant model
 33127 ;;
 33128                           
 33129                           
 33130                           ;psect for function _PWM1_Initialize
 33131  328E                     _PWM1_Initialize:	
 33132                           
 33133                           ;pwm1.c: 68: CCP1CON = 0x8F;
 33134                           
 33135                           ;incstack = 0
 33136                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 33137  328E  308F               	movlw	143
 33138  328F  0025               	movlb	5	; select bank5
 33139  3290  0093               	movwf	19	;volatile
 33140                           
 33141                           ;pwm1.c: 71: CCPR1H = 0x00;
 33142  3291  0192               	clrf	18	;volatile
 33143                           
 33144                           ;pwm1.c: 74: CCPR1L = 0x95;
 33145  3292  3095               	movlw	149
 33146  3293  0091               	movwf	17	;volatile
 33147                           
 33148                           ;pwm1.c: 77: CCPTMRSbits.C1TSEL = 0x1;
 33149  3294  081F               	movf	31,w	;volatile
 33150  3295  39FC               	andlw	-4
 33151  3296  3801               	iorlw	1
 33152  3297  009F               	movwf	31	;volatile
 33153  3298  0008               	return
 33154  3299                     __end_of_PWM1_Initialize:	
 33155                           
 33156                           	psect	text97
 33157  2C9B                     __ptext97:	
 33158 ;; *************** function _PIN_MANAGER_Initialize *****************
 33159 ;; Defined at:
 33160 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 33161 ;; Parameters:    Size  Location     Type
 33162 ;;		None
 33163 ;; Auto vars:     Size  Location     Type
 33164 ;;  state           1    1[COMMON] unsigned char 
 33165 ;; Return value:  Size  Location     Type
 33166 ;;                  1    wreg      void 
 33167 ;; Registers used:
 33168 ;;		wreg, status,2, status,0
 33169 ;; Tracked objects:
 33170 ;;		On entry : 0/0
 33171 ;;		On exit  : 0/0
 33172 ;;		Unchanged: 0/0
 33173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33175 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33177 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33178 ;;Total ram usage:        1 bytes
 33179 ;; Hardware stack levels used:    1
 33180 ;; Hardware stack levels required when called:    4
 33181 ;; This function calls:
 33182 ;;		Nothing
 33183 ;; This function is called by:
 33184 ;;		_SYSTEM_Initialize
 33185 ;;		_nullifyBadge_platformInit
 33186 ;; This function uses a non-reentrant model
 33187 ;;
 33188                           
 33189                           
 33190                           ;psect for function _PIN_MANAGER_Initialize
 33191  2C9B                     _PIN_MANAGER_Initialize:	
 33192                           
 33193                           ;pin_manager.c: 56: LATA = 0x00;
 33194                           
 33195                           ;incstack = 0
 33196                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 33197  2C9B  0022               	movlb	2	; select bank2
 33198  2C9C  018C               	clrf	12	;volatile
 33199                           
 33200                           ;pin_manager.c: 57: LATB = 0x80;
 33201  2C9D  3080               	movlw	128
 33202  2C9E  008D               	movwf	13	;volatile
 33203                           
 33204                           ;pin_manager.c: 58: LATC = 0x1A;
 33205  2C9F  301A               	movlw	26
 33206  2CA0  008E               	movwf	14	;volatile
 33207                           
 33208                           ;pin_manager.c: 63: TRISA = 0x37;
 33209  2CA1  3037               	movlw	55
 33210  2CA2  0021               	movlb	1	; select bank1
 33211  2CA3  008C               	movwf	12	;volatile
 33212                           
 33213                           ;pin_manager.c: 64: TRISB = 0x30;
 33214  2CA4  3030               	movlw	48
 33215  2CA5  008D               	movwf	13	;volatile
 33216                           
 33217                           ;pin_manager.c: 65: TRISC = 0x60;
 33218  2CA6  3060               	movlw	96
 33219  2CA7  008E               	movwf	14	;volatile
 33220                           
 33221                           ;pin_manager.c: 70: ANSELC = 0x40;
 33222  2CA8  3040               	movlw	64
 33223  2CA9  0023               	movlb	3	; select bank3
 33224  2CAA  008E               	movwf	14	;volatile
 33225                           
 33226                           ;pin_manager.c: 71: ANSELB = 0x00;
 33227  2CAB  018D               	clrf	13	;volatile
 33228                           
 33229                           ;pin_manager.c: 72: ANSELA = 0x03;
 33230  2CAC  3003               	movlw	3
 33231  2CAD  008C               	movwf	12	;volatile
 33232                           
 33233                           ;pin_manager.c: 77: WPUB = 0x00;
 33234  2CAE  0024               	movlb	4	; select bank4
 33235  2CAF  018D               	clrf	13	;volatile
 33236                           
 33237                           ;pin_manager.c: 78: WPUA = 0x00;
 33238  2CB0  018C               	clrf	12	;volatile
 33239                           
 33240                           ;pin_manager.c: 79: WPUC = 0x00;
 33241  2CB1  018E               	clrf	14	;volatile
 33242                           
 33243                           ;pin_manager.c: 84: ODCONA = 0x00;
 33244  2CB2  0025               	movlb	5	; select bank5
 33245  2CB3  018C               	clrf	12	;volatile
 33246                           
 33247                           ;pin_manager.c: 85: ODCONB = 0x00;
 33248  2CB4  018D               	clrf	13	;volatile
 33249                           
 33250                           ;pin_manager.c: 86: ODCONC = 0x00;
 33251  2CB5  018E               	clrf	14	;volatile
 33252                           
 33253                           ;pin_manager.c: 93: bool state = GIE;
 33254  2CB6  3000               	movlw	0
 33255  2CB7  1B8B               	btfsc	11,7	;volatile
 33256  2CB8  3001               	movlw	1
 33257  2CB9  00F1               	movwf	PIN_MANAGER_Initialize@state
 33258                           
 33259                           ;pin_manager.c: 94: GIE = 0;
 33260  2CBA  138B               	bcf	11,7	;volatile
 33261                           
 33262                           ;pin_manager.c: 95: PPSLOCK = 0x55;
 33263  2CBB  3055               	movlw	85
 33264  2CBC  003C               	movlb	28	; select bank28
 33265  2CBD  008F               	movwf	15	;volatile
 33266                           
 33267                           ;pin_manager.c: 96: PPSLOCK = 0xAA;
 33268  2CBE  30AA               	movlw	170
 33269  2CBF  008F               	movwf	15	;volatile
 33270                           
 33271                           ;pin_manager.c: 97: PPSLOCKbits.PPSLOCKED = 0x00;
 33272  2CC0  100F               	bcf	15,0	;volatile
 33273                           
 33274                           ;pin_manager.c: 99: RC1PPSbits.RC1PPS = 0x0D;
 33275  2CC1  003D               	movlb	29	; select bank29
 33276  2CC2  0821               	movf	33,w	;volatile
 33277  2CC3  39E0               	andlw	-32
 33278  2CC4  380D               	iorlw	13
 33279  2CC5  00A1               	movwf	33	;volatile
 33280                           
 33281                           ;pin_manager.c: 100: SSP1DATPPSbits.SSP1DATPPS = 0x0C;
 33282  2CC6  003C               	movlb	28	; select bank28
 33283  2CC7  0821               	movf	33,w	;volatile
 33284  2CC8  39E0               	andlw	-32
 33285  2CC9  380C               	iorlw	12
 33286  2CCA  00A1               	movwf	33	;volatile
 33287                           
 33288                           ;pin_manager.c: 101: SSP1CLKPPSbits.SSP1CLKPPS = 0x0E;
 33289  2CCB  0820               	movf	32,w	;volatile
 33290  2CCC  39E0               	andlw	-32
 33291  2CCD  380E               	iorlw	14
 33292  2CCE  00A0               	movwf	32	;volatile
 33293                           
 33294                           ;pin_manager.c: 102: RC4PPSbits.RC4PPS = 0x02;
 33295  2CCF  003D               	movlb	29	; select bank29
 33296  2CD0  0824               	movf	36,w	;volatile
 33297  2CD1  39E0               	andlw	-32
 33298  2CD2  3802               	iorlw	2
 33299  2CD3  00A4               	movwf	36	;volatile
 33300                           
 33301                           ;pin_manager.c: 103: RC0PPSbits.RC0PPS = 0x0C;
 33302  2CD4  0820               	movf	32,w	;volatile
 33303  2CD5  39E0               	andlw	-32
 33304  2CD6  380C               	iorlw	12
 33305  2CD7  00A0               	movwf	32	;volatile
 33306                           
 33307                           ;pin_manager.c: 104: RC3PPSbits.RC3PPS = 0x03;
 33308  2CD8  0823               	movf	35,w	;volatile
 33309  2CD9  39E0               	andlw	-32
 33310  2CDA  3803               	iorlw	3
 33311  2CDB  00A3               	movwf	35	;volatile
 33312                           
 33313                           ;pin_manager.c: 105: RB6PPSbits.RB6PPS = 0x18;
 33314  2CDC  081E               	movf	30,w	;volatile
 33315  2CDD  39E0               	andlw	-32
 33316  2CDE  3818               	iorlw	24
 33317  2CDF  009E               	movwf	30	;volatile
 33318                           
 33319                           ;pin_manager.c: 106: RC2PPSbits.RC2PPS = 0x19;
 33320  2CE0  0822               	movf	34,w	;volatile
 33321  2CE1  39E0               	andlw	-32
 33322  2CE2  3819               	iorlw	25
 33323  2CE3  00A2               	movwf	34	;volatile
 33324                           
 33325                           ;pin_manager.c: 108: PPSLOCK = 0x55;
 33326  2CE4  3055               	movlw	85
 33327  2CE5  003C               	movlb	28	; select bank28
 33328  2CE6  008F               	movwf	15	;volatile
 33329                           
 33330                           ;pin_manager.c: 109: PPSLOCK = 0xAA;
 33331  2CE7  30AA               	movlw	170
 33332  2CE8  008F               	movwf	15	;volatile
 33333                           
 33334                           ;pin_manager.c: 110: PPSLOCKbits.PPSLOCKED = 0x01;
 33335  2CE9  140F               	bsf	15,0	;volatile
 33336                           
 33337                           ;pin_manager.c: 112: GIE = state;
 33338  2CEA  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 33339  2CEB  2CEE               	goto	u3380
 33340  2CEC  178B               	bsf	11,7	;volatile
 33341  2CED  0008               	return
 33342  2CEE                     u3380:	
 33343  2CEE  138B               	bcf	11,7	;volatile
 33344  2CEF  0008               	return
 33345  2CF0                     __end_of_PIN_MANAGER_Initialize:	
 33346                           
 33347                           	psect	text98
 33348  3265                     __ptext98:	
 33349 ;; *************** function _OSCILLATOR_Initialize *****************
 33350 ;; Defined at:
 33351 ;;		line 92 in file "mcc_generated_files/mcc.c"
 33352 ;; Parameters:    Size  Location     Type
 33353 ;;		None
 33354 ;; Auto vars:     Size  Location     Type
 33355 ;;		None
 33356 ;; Return value:  Size  Location     Type
 33357 ;;                  1    wreg      void 
 33358 ;; Registers used:
 33359 ;;		wreg, status,2
 33360 ;; Tracked objects:
 33361 ;;		On entry : 0/0
 33362 ;;		On exit  : 0/0
 33363 ;;		Unchanged: 0/0
 33364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33369 ;;Total ram usage:        0 bytes
 33370 ;; Hardware stack levels used:    1
 33371 ;; Hardware stack levels required when called:    4
 33372 ;; This function calls:
 33373 ;;		Nothing
 33374 ;; This function is called by:
 33375 ;;		_SYSTEM_Initialize
 33376 ;;		_nullifyBadge_platformInit
 33377 ;; This function uses a non-reentrant model
 33378 ;;
 33379                           
 33380                           
 33381                           ;psect for function _OSCILLATOR_Initialize
 33382  3265                     _OSCILLATOR_Initialize:	
 33383                           
 33384                           ;mcc.c: 95: OSCCON1 = 0x00;
 33385                           
 33386                           ;incstack = 0
 33387                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 33388  3265  0032               	movlb	18	; select bank18
 33389  3266  0199               	clrf	25	;volatile
 33390                           
 33391                           ;mcc.c: 97: OSCCON3 = 0x00;
 33392  3267  019B               	clrf	27	;volatile
 33393                           
 33394                           ;mcc.c: 99: OSCEN = 0x00;
 33395  3268  019D               	clrf	29	;volatile
 33396                           
 33397                           ;mcc.c: 101: OSCFRQ = 0x06;
 33398  3269  3006               	movlw	6
 33399  326A  009F               	movwf	31	;volatile
 33400                           
 33401                           ;mcc.c: 103: OSCTUNE = 0x00;
 33402  326B  019E               	clrf	30	;volatile
 33403  326C                     l208:	
 33404                           ;mcc.c: 106: {
 33405                           
 33406                           ;mcc.c: 105: while(PLLR == 0)
 33407                           
 33408  326C  181C               	btfsc	28,0	;volatile
 33409  326D  0008               	return
 33410  326E  2A6C               	goto	l208
 33411  326F                     __end_of_OSCILLATOR_Initialize:	
 33412                           
 33413                           	psect	text99
 33414  3402                     __ptext99:	
 33415 ;; *************** function _PWM6_LoadDutyValue *****************
 33416 ;; Defined at:
 33417 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 33418 ;; Parameters:    Size  Location     Type
 33419 ;;  dutyValue       2    1[COMMON] unsigned int 
 33420 ;; Auto vars:     Size  Location     Type
 33421 ;;		None
 33422 ;; Return value:  Size  Location     Type
 33423 ;;                  1    wreg      void 
 33424 ;; Registers used:
 33425 ;;		wreg, status,2, status,0
 33426 ;; Tracked objects:
 33427 ;;		On entry : 0/0
 33428 ;;		On exit  : 0/0
 33429 ;;		Unchanged: 0/0
 33430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33431 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33433 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33434 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33435 ;;Total ram usage:        4 bytes
 33436 ;; Hardware stack levels used:    1
 33437 ;; Hardware stack levels required when called:    4
 33438 ;; This function calls:
 33439 ;;		Nothing
 33440 ;; This function is called by:
 33441 ;;		_nullifyBadge_platformInit
 33442 ;;		_nullifyBadge_userLedsSetBrightness
 33443 ;; This function uses a non-reentrant model
 33444 ;;
 33445                           
 33446                           
 33447                           ;psect for function _PWM6_LoadDutyValue
 33448  3402                     _PWM6_LoadDutyValue:	
 33449                           
 33450                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 33451                           
 33452                           ;incstack = 0
 33453                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 33454  3402  0872               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 33455  3403  00F4               	movwf	??_PWM6_LoadDutyValue+1
 33456  3404  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 33457  3405  00F3               	movwf	??_PWM6_LoadDutyValue
 33458  3406  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 33459  3407  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 33460  3408  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 33461  3409  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 33462  340A  0873               	movf	??_PWM6_LoadDutyValue,w
 33463  340B  002C               	movlb	12	; select bank12
 33464  340C  009B               	movwf	27	;volatile
 33465                           
 33466                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 33467  340D  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 33468  340E  3903               	andlw	3
 33469  340F  00F3               	movwf	??_PWM6_LoadDutyValue
 33470  3410  3005               	movlw	5
 33471  3411                     u4295:	
 33472  3411  35F3               	lslf	??_PWM6_LoadDutyValue,f
 33473  3412  3EFF               	addlw	-1
 33474  3413  1D03               	skipz
 33475  3414  2C11               	goto	u4295
 33476  3415  3573               	lslf	??_PWM6_LoadDutyValue,w
 33477  3416  009A               	movwf	26	;volatile
 33478  3417  0008               	return
 33479  3418                     __end_of_PWM6_LoadDutyValue:	
 33480                           
 33481                           	psect	text100
 33482  33EC                     __ptext100:	
 33483 ;; *************** function _PWM5_LoadDutyValue *****************
 33484 ;; Defined at:
 33485 ;;		line 74 in file "mcc_generated_files/pwm5.c"
 33486 ;; Parameters:    Size  Location     Type
 33487 ;;  dutyValue       2    1[COMMON] unsigned int 
 33488 ;; Auto vars:     Size  Location     Type
 33489 ;;		None
 33490 ;; Return value:  Size  Location     Type
 33491 ;;                  1    wreg      void 
 33492 ;; Registers used:
 33493 ;;		wreg, status,2, status,0
 33494 ;; Tracked objects:
 33495 ;;		On entry : 0/0
 33496 ;;		On exit  : 0/0
 33497 ;;		Unchanged: 0/0
 33498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33499 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33501 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33502 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33503 ;;Total ram usage:        4 bytes
 33504 ;; Hardware stack levels used:    1
 33505 ;; Hardware stack levels required when called:    4
 33506 ;; This function calls:
 33507 ;;		Nothing
 33508 ;; This function is called by:
 33509 ;;		_nullifyBadge_platformInit
 33510 ;;		_fadeDisplay_Init
 33511 ;;		_nullifyBadge_segDisplaySetBrightness
 33512 ;; This function uses a non-reentrant model
 33513 ;;
 33514                           
 33515                           
 33516                           ;psect for function _PWM5_LoadDutyValue
 33517  33EC                     _PWM5_LoadDutyValue:	
 33518                           
 33519                           ;pwm5.c: 77: PWM5DCH = (dutyValue & 0x03FC)>>2;
 33520                           
 33521                           ;incstack = 0
 33522                           ; Regs used in _PWM5_LoadDutyValue: [wreg+status,2+status,0]
 33523  33EC  0872               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 33524  33ED  00F4               	movwf	??_PWM5_LoadDutyValue+1
 33525  33EE  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 33526  33EF  00F3               	movwf	??_PWM5_LoadDutyValue
 33527  33F0  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 33528  33F1  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 33529  33F2  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 33530  33F3  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 33531  33F4  0873               	movf	??_PWM5_LoadDutyValue,w
 33532  33F5  002C               	movlb	12	; select bank12
 33533  33F6  0098               	movwf	24	;volatile
 33534                           
 33535                           ;pwm5.c: 80: PWM5DCL = (dutyValue & 0x0003)<<6;
 33536  33F7  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 33537  33F8  3903               	andlw	3
 33538  33F9  00F3               	movwf	??_PWM5_LoadDutyValue
 33539  33FA  3005               	movlw	5
 33540  33FB                     u4285:	
 33541  33FB  35F3               	lslf	??_PWM5_LoadDutyValue,f
 33542  33FC  3EFF               	addlw	-1
 33543  33FD  1D03               	skipz
 33544  33FE  2BFB               	goto	u4285
 33545  33FF  3573               	lslf	??_PWM5_LoadDutyValue,w
 33546  3400  0097               	movwf	23	;volatile
 33547  3401  0008               	return
 33548  3402                     __end_of_PWM5_LoadDutyValue:	
 33549                           
 33550                           	psect	text101
 33551  33D6                     __ptext101:	
 33552 ;; *************** function _PWM2_LoadDutyValue *****************
 33553 ;; Defined at:
 33554 ;;		line 80 in file "mcc_generated_files/pwm2.c"
 33555 ;; Parameters:    Size  Location     Type
 33556 ;;  dutyValue       2    1[COMMON] unsigned int 
 33557 ;; Auto vars:     Size  Location     Type
 33558 ;;		None
 33559 ;; Return value:  Size  Location     Type
 33560 ;;                  1    wreg      void 
 33561 ;; Registers used:
 33562 ;;		wreg, status,2
 33563 ;; Tracked objects:
 33564 ;;		On entry : 0/0
 33565 ;;		On exit  : 0/0
 33566 ;;		Unchanged: 0/0
 33567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33568 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33571 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33572 ;;Total ram usage:        2 bytes
 33573 ;; Hardware stack levels used:    1
 33574 ;; Hardware stack levels required when called:    4
 33575 ;; This function calls:
 33576 ;;		Nothing
 33577 ;; This function is called by:
 33578 ;;		_nullifyBadge_platformInit
 33579 ;; This function uses a non-reentrant model
 33580 ;;
 33581                           
 33582                           
 33583                           ;psect for function _PWM2_LoadDutyValue
 33584  33D6                     _PWM2_LoadDutyValue:	
 33585                           
 33586                           ;pwm2.c: 82: dutyValue &= 0x03FF;
 33587                           
 33588                           ;incstack = 0
 33589                           ; Regs used in _PWM2_LoadDutyValue: [wreg+status,2]
 33590  33D6  30FF               	movlw	255
 33591  33D7  05F1               	andwf	PWM2_LoadDutyValue@dutyValue,f
 33592  33D8  3003               	movlw	3
 33593  33D9  05F2               	andwf	PWM2_LoadDutyValue@dutyValue+1,f
 33594                           
 33595                           ;pwm2.c: 85: if(CCP2CONbits.CCP2FMT)
 33596  33DA  0025               	movlb	5	; select bank5
 33597  33DB  1E17               	btfss	23,4	;volatile
 33598  33DC  2BE7               	goto	l7509
 33599                           
 33600                           ;pwm2.c: 86: {
 33601                           ;pwm2.c: 87: dutyValue <<= 6;
 33602  33DD  3006               	movlw	6
 33603  33DE                     u4335:	
 33604  33DE  35F1               	lslf	PWM2_LoadDutyValue@dutyValue,f
 33605  33DF  0DF2               	rlf	PWM2_LoadDutyValue@dutyValue+1,f
 33606  33E0  0B89               	decfsz	9,f
 33607  33E1  2BDE               	goto	u4335
 33608                           
 33609                           ;pwm2.c: 88: CCPR2H = dutyValue >> 8;
 33610  33E2  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 33611  33E3  0096               	movwf	22	;volatile
 33612                           
 33613                           ;pwm2.c: 89: CCPR2L = dutyValue;
 33614  33E4  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 33615  33E5  0095               	movwf	21	;volatile
 33616                           
 33617                           ;pwm2.c: 90: }
 33618  33E6  0008               	return
 33619  33E7                     l7509:	
 33620                           
 33621                           ;pwm2.c: 91: else
 33622                           ;pwm2.c: 92: {
 33623                           ;pwm2.c: 93: CCPR2H = dutyValue >> 8;
 33624  33E7  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 33625  33E8  0096               	movwf	22	;volatile
 33626                           
 33627                           ;pwm2.c: 94: CCPR2L = dutyValue;
 33628  33E9  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 33629  33EA  0095               	movwf	21	;volatile
 33630  33EB  0008               	return
 33631  33EC                     __end_of_PWM2_LoadDutyValue:	
 33632                           
 33633                           	psect	text102
 33634  33C0                     __ptext102:	
 33635 ;; *************** function _PWM1_LoadDutyValue *****************
 33636 ;; Defined at:
 33637 ;;		line 80 in file "mcc_generated_files/pwm1.c"
 33638 ;; Parameters:    Size  Location     Type
 33639 ;;  dutyValue       2    1[COMMON] unsigned int 
 33640 ;; Auto vars:     Size  Location     Type
 33641 ;;		None
 33642 ;; Return value:  Size  Location     Type
 33643 ;;                  1    wreg      void 
 33644 ;; Registers used:
 33645 ;;		wreg, status,2
 33646 ;; Tracked objects:
 33647 ;;		On entry : 0/0
 33648 ;;		On exit  : 0/0
 33649 ;;		Unchanged: 0/0
 33650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33651 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33655 ;;Total ram usage:        2 bytes
 33656 ;; Hardware stack levels used:    1
 33657 ;; Hardware stack levels required when called:    4
 33658 ;; This function calls:
 33659 ;;		Nothing
 33660 ;; This function is called by:
 33661 ;;		_nullifyBadge_platformInit
 33662 ;; This function uses a non-reentrant model
 33663 ;;
 33664                           
 33665                           
 33666                           ;psect for function _PWM1_LoadDutyValue
 33667  33C0                     _PWM1_LoadDutyValue:	
 33668                           
 33669                           ;pwm1.c: 82: dutyValue &= 0x03FF;
 33670                           
 33671                           ;incstack = 0
 33672                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2]
 33673  33C0  30FF               	movlw	255
 33674  33C1  05F1               	andwf	PWM1_LoadDutyValue@dutyValue,f
 33675  33C2  3003               	movlw	3
 33676  33C3  05F2               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
 33677                           
 33678                           ;pwm1.c: 85: if(CCP1CONbits.CCP1FMT)
 33679  33C4  0025               	movlb	5	; select bank5
 33680  33C5  1E13               	btfss	19,4	;volatile
 33681  33C6  2BD1               	goto	l7493
 33682                           
 33683                           ;pwm1.c: 86: {
 33684                           ;pwm1.c: 87: dutyValue <<= 6;
 33685  33C7  3006               	movlw	6
 33686  33C8                     u4315:	
 33687  33C8  35F1               	lslf	PWM1_LoadDutyValue@dutyValue,f
 33688  33C9  0DF2               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
 33689  33CA  0B89               	decfsz	9,f
 33690  33CB  2BC8               	goto	u4315
 33691                           
 33692                           ;pwm1.c: 88: CCPR1H = dutyValue >> 8;
 33693  33CC  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 33694  33CD  0092               	movwf	18	;volatile
 33695                           
 33696                           ;pwm1.c: 89: CCPR1L = dutyValue;
 33697  33CE  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 33698  33CF  0091               	movwf	17	;volatile
 33699                           
 33700                           ;pwm1.c: 90: }
 33701  33D0  0008               	return
 33702  33D1                     l7493:	
 33703                           
 33704                           ;pwm1.c: 91: else
 33705                           ;pwm1.c: 92: {
 33706                           ;pwm1.c: 93: CCPR1H = dutyValue >> 8;
 33707  33D1  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 33708  33D2  0092               	movwf	18	;volatile
 33709                           
 33710                           ;pwm1.c: 94: CCPR1L = dutyValue;
 33711  33D3  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 33712  33D4  0091               	movwf	17	;volatile
 33713  33D5  0008               	return
 33714  33D6                     __end_of_PWM1_LoadDutyValue:	
 33715                           
 33716                           	psect	intentry
 33717  0004                     __pintentry:	
 33718 ;; *************** function _INTERRUPT_InterruptManager *****************
 33719 ;; Defined at:
 33720 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 33721 ;; Parameters:    Size  Location     Type
 33722 ;;		None
 33723 ;; Auto vars:     Size  Location     Type
 33724 ;;		None
 33725 ;; Return value:  Size  Location     Type
 33726 ;;                  1    wreg      void 
 33727 ;; Registers used:
 33728 ;;		wreg, status,2, status,0, pclath, cstack
 33729 ;; Tracked objects:
 33730 ;;		On entry : 0/0
 33731 ;;		On exit  : 0/0
 33732 ;;		Unchanged: 0/0
 33733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33736 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33737 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33738 ;;Total ram usage:        1 bytes
 33739 ;; Hardware stack levels used:    1
 33740 ;; Hardware stack levels required when called:    3
 33741 ;; This function calls:
 33742 ;;		_TMR0_ISR
 33743 ;; This function is called by:
 33744 ;;		Interrupt level 1
 33745 ;; This function uses a non-reentrant model
 33746 ;;
 33747                           
 33748  0004                     _INTERRUPT_InterruptManager:	
 33749                           
 33750                           ;incstack = 0
 33751  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 33752                           
 33753                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 33754  0005  3180               	pagesel	$
 33755  0006  0020               	movlb	0	; select bank0
 33756  0007  087F               	movf	127,w
 33757  0008  00F0               	movwf	??_INTERRUPT_InterruptManager
 33758                           
 33759                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 33760  0009  0021               	movlb	1	; select bank1
 33761  000A  1E90               	btfss	16,5	;volatile
 33762  000B  2811               	goto	i1l363
 33763  000C  0020               	movlb	0	; select bank0
 33764  000D  1E90               	btfss	16,5	;volatile
 33765  000E  2811               	goto	i1l363
 33766                           
 33767                           ;interrupt_manager.c: 55: {
 33768                           ;interrupt_manager.c: 56: TMR0_ISR();
 33769  000F  31B2  22EA         	fcall	_TMR0_ISR
 33770  0011                     i1l363:	
 33771                           ;interrupt_manager.c: 58: else
 33772                           ;interrupt_manager.c: 59: {
 33773                           
 33774                           ;interrupt_manager.c: 57: }
 33775                           
 33776  0011  0870               	movf	??_INTERRUPT_InterruptManager,w
 33777  0012  0020               	movlb	0	; select bank0
 33778  0013  00FF               	movwf	127
 33779  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 33780  0015  0009               	retfie
 33781  0016                     __end_of_INTERRUPT_InterruptManager:	
 33782                           
 33783                           	psect	text104
 33784  32EA                     __ptext104:	
 33785 ;; *************** function _TMR0_ISR *****************
 33786 ;; Defined at:
 33787 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 33788 ;; Parameters:    Size  Location     Type
 33789 ;;		None
 33790 ;; Auto vars:     Size  Location     Type
 33791 ;;		None
 33792 ;; Return value:  Size  Location     Type
 33793 ;;                  1    wreg      void 
 33794 ;; Registers used:
 33795 ;;		wreg, status,2, status,0, pclath, cstack
 33796 ;; Tracked objects:
 33797 ;;		On entry : 0/0
 33798 ;;		On exit  : 0/0
 33799 ;;		Unchanged: 0/0
 33800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33805 ;;Total ram usage:        0 bytes
 33806 ;; Hardware stack levels used:    1
 33807 ;; Hardware stack levels required when called:    2
 33808 ;; This function calls:
 33809 ;;		_TMR0_CallBack
 33810 ;; This function is called by:
 33811 ;;		_INTERRUPT_InterruptManager
 33812 ;; This function uses a non-reentrant model
 33813 ;;
 33814                           
 33815                           
 33816                           ;psect for function _TMR0_ISR
 33817  32EA                     _TMR0_ISR:	
 33818                           
 33819                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
 33820                           
 33821                           ;incstack = 0
 33822                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 33823  32EA  0020               	movlb	0	; select bank0
 33824  32EB  1290               	bcf	16,5	;volatile
 33825                           
 33826                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
 33827  32EC  0021               	movlb	1	; select bank1
 33828  32ED  0841               	movf	(_timer0ReloadVal16bit+1)^(0+128),w	;volatile
 33829  32EE  0020               	movlb	0	; select bank0
 33830  32EF  0096               	movwf	22	;volatile
 33831                           
 33832                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
 33833  32F0  0021               	movlb	1	; select bank1
 33834  32F1  0840               	movf	_timer0ReloadVal16bit^(0+128),w	;volatile
 33835  32F2  0020               	movlb	0	; select bank0
 33836  32F3  0095               	movwf	21	;volatile
 33837                           
 33838                           ;tmr0.c: 146: TMR0_CallBack();
 33839  32F4  31B2  2283         	fcall	_TMR0_CallBack
 33840  32F6  0008               	return
 33841  32F7                     __end_of_TMR0_ISR:	
 33842                           
 33843                           	psect	text105
 33844  3283                     __ptext105:	
 33845 ;; *************** function _TMR0_CallBack *****************
 33846 ;; Defined at:
 33847 ;;		line 151 in file "mcc_generated_files/tmr0.c"
 33848 ;; Parameters:    Size  Location     Type
 33849 ;;		None
 33850 ;; Auto vars:     Size  Location     Type
 33851 ;;		None
 33852 ;; Return value:  Size  Location     Type
 33853 ;;                  1    wreg      void 
 33854 ;; Registers used:
 33855 ;;		wreg, status,2, status,0, pclath, cstack
 33856 ;; Tracked objects:
 33857 ;;		On entry : 0/0
 33858 ;;		On exit  : 0/0
 33859 ;;		Unchanged: 0/0
 33860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33865 ;;Total ram usage:        0 bytes
 33866 ;; Hardware stack levels used:    1
 33867 ;; Hardware stack levels required when called:    1
 33868 ;; This function calls:
 33869 ;;		Absolute function
 33870 ;;		_TMR0_DefaultInterruptHandler
 33871 ;; This function is called by:
 33872 ;;		_TMR0_ISR
 33873 ;; This function uses a non-reentrant model
 33874 ;;
 33875                           
 33876                           
 33877                           ;psect for function _TMR0_CallBack
 33878  3283                     _TMR0_CallBack:	
 33879                           
 33880                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
 33881                           
 33882                           ;incstack = 0
 33883                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 33884  3283  0021               	movlb	1	; select bank1
 33885  3284  083E               	movf	_TMR0_InterruptHandler^(0+128),w
 33886  3285  043F               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 33887  3286  1903               	btfsc	3,2
 33888  3287  0008               	return
 33889                           
 33890                           ;tmr0.c: 156: {
 33891                           ;tmr0.c: 157: TMR0_InterruptHandler();
 33892  3288  083F               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 33893  3289  008A               	movwf	10
 33894  328A  083E               	movf	_TMR0_InterruptHandler^(0+128),w
 33895  328B  000A               	callw
 33896  328C  31B2               	pagesel	$
 33897  328D  0008               	return
 33898  328E                     __end_of_TMR0_CallBack:	
 33899                           
 33900                           	psect	text106
 33901  2882                     __ptext106:	
 33902 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 33903 ;; Defined at:
 33904 ;;		line 165 in file "mcc_generated_files/tmr0.c"
 33905 ;; Parameters:    Size  Location     Type
 33906 ;;		None
 33907 ;; Auto vars:     Size  Location     Type
 33908 ;;		None
 33909 ;; Return value:  Size  Location     Type
 33910 ;;                  1    wreg      void 
 33911 ;; Registers used:
 33912 ;;		None
 33913 ;; Tracked objects:
 33914 ;;		On entry : 0/0
 33915 ;;		On exit  : 0/0
 33916 ;;		Unchanged: 0/0
 33917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33922 ;;Total ram usage:        0 bytes
 33923 ;; Hardware stack levels used:    1
 33924 ;; This function calls:
 33925 ;;		Nothing
 33926 ;; This function is called by:
 33927 ;;		_TMR0_Initialize
 33928 ;;		_TMR0_CallBack
 33929 ;; This function uses a non-reentrant model
 33930 ;;
 33931                           
 33932                           
 33933                           ;psect for function _TMR0_DefaultInterruptHandler
 33934  2882                     _TMR0_DefaultInterruptHandler:	
 33935                           
 33936                           ;incstack = 0
 33937                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 33938  2882  0008               	return
 33939  2883                     __end_of_TMR0_DefaultInterruptHandler:	
 33940  007E                     btemp	set	126	;btemp
 33941  007E                     int$flags	set	126
 33942  007E                     wtemp0	set	126


Data Sizes:
    Strings     1149
    Constant    522
    Data        666
    BSS         307
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     79      79
    BANK1            80      8      62
    BANK2            80      0      77
    BANK3            80      0      72
    BANK4            80      0      72
    BANK5            80      0      77
    BANK6            80      0      73
    BANK7            80      0      76
    BANK8            80      0      56
    BANK9            80      0      61
    BANK10           80      0      58
    BANK11           80      0      40
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           16      0       0
    BANK23            0      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    menu_run_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    schedulerInst.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    schedulerInst.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    schedulerInst.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    schedulerInst.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerExecute$4099	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    matrix_secret_check@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_check@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_secret_check@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$3$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$2$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$4$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_82(CODE[23]), STR_81(CODE[27]), STR_80(CODE[46]), matrix_secret_inputs.inputs(BANK5[20]), 
		 -> matrix_secret_inputs(BANK5[25]), STR_79(CODE[8]), STR_78(CODE[7]), STR_77(CODE[8]), 
		 -> STR_76(CODE[6]), STR_75(CODE[10]), STR_74(CODE[5]), STR_73(CODE[7]), 
		 -> STR_72(CODE[9]), STR_71(CODE[7]), STR_70(CODE[7]), Slot_Wheel(BANK6[55]), 
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_45(CODE[5]), STR_44(CODE[5]), 
		 -> STR_43(CODE[11]), STR_42(CODE[13]), locked_secret_inputs.inputs(BANK4[20]), locked_secret_inputs(BANK4[25]), 
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), 
		 -> secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), 
		 -> flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_82(CODE[23]), STR_81(CODE[27]), STR_80(CODE[46]), matrix_secret_inputs.inputs(BANK5[20]), 
		 -> matrix_secret_inputs(BANK5[25]), STR_79(CODE[8]), STR_78(CODE[7]), STR_77(CODE[8]), 
		 -> STR_76(CODE[6]), STR_75(CODE[10]), STR_74(CODE[5]), STR_73(CODE[7]), 
		 -> STR_72(CODE[9]), STR_71(CODE[7]), STR_70(CODE[7]), Slot_Wheel(BANK6[55]), 
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_45(CODE[5]), STR_44(CODE[5]), 
		 -> STR_43(CODE[11]), STR_42(CODE[13]), locked_secret_inputs.inputs(BANK4[20]), locked_secret_inputs(BANK4[25]), 
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), 
		 -> secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), 
		 -> flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_83(CODE[7]), sprintf@c(BANK0[1]), STR_63(CODE[9]), STR_62(CODE[13]), 
		 -> STR_61(CODE[12]), STR_60(CODE[8]), STR_59(CODE[11]), STR_58(CODE[11]), 
		 -> STR_57(CODE[9]), STR_56(CODE[8]), STR_55(CODE[8]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_69(CODE[3]), STR_68(CODE[9]), STR_67(CODE[9]), STR_66(CODE[9]), 
		 -> STR_65(CODE[9]), STR_64(CODE[9]), STR_41(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 41
		 -> flashy_Main@hit_counter(BANK0[6]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), 
		 -> slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    matrix_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_Main@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_display_option@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> matrix_secret_inputs.inputs(BANK5[20]), matrix_secret_inputs(BANK5[25]), 

    matrix_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_Init@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S3163matrix_secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    matrix_secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    matrix_option	PTR unsigned char [10] size(2) Largest target is 10
		 -> STR_79(CODE[8]), STR_78(CODE[7]), STR_77(CODE[8]), STR_76(CODE[6]), 
		 -> STR_75(CODE[10]), STR_74(CODE[5]), STR_73(CODE[7]), STR_72(CODE[9]), 
		 -> STR_71(CODE[7]), STR_70(CODE[7]), 

    slot_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Main@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Finished_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Running_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Running_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Running_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Setup@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Setup@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Setup@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2371t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Init@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    Shot_Options_Long	PTR unsigned char [9] size(2) Largest target is 13
		 -> STR_63(CODE[9]), STR_62(CODE[13]), STR_61(CODE[12]), STR_60(CODE[8]), 
		 -> STR_59(CODE[11]), STR_58(CODE[11]), STR_57(CODE[9]), STR_56(CODE[8]), 
		 -> STR_55(CODE[8]), 

    Shot_Options	PTR unsigned char [9] size(2) Largest target is 5
		 -> STR_54(CODE[5]), STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), 
		 -> STR_50(CODE[5]), STR_49(CODE[5]), STR_48(CODE[5]), STR_47(CODE[5]), 
		 -> STR_46(CODE[5]), 

    secret_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Main@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), 

    secret_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Init@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2872secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    locked_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Main@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> locked_secret_inputs.inputs(BANK4[20]), locked_secret_inputs(BANK4[25]), 

    locked_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Init@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2731locked_secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> locked_secret_value(BANK2[2]), 

    locked_secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> locked_secret_value(BANK2[2]), 

    flashy_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Main@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_display_option@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Init@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_option	PTR unsigned char [29] size(2) Largest target is 120
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), 

    FLASHY_TEXT_SECRET_TEST	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_10(CODE[18]), 

    FLASHY_TEXT	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_9(CODE[5]), 

    menu_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_run_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_display_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_taskData	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Init@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_option	PTR unsigned char [5] size(2) Largest target is 10
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), 
		 -> STR_4(CODE[5]), 

    displayL2_ClrUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_SetUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_EraseSegDisplay@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_ForceUpdate@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutStr@str	PTR unsigned char  size(2) Largest target is 120
		 -> flashy_Main@hit_counter(BANK0[6]), STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[43]), 
		 -> STR_37(CODE[13]), STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), 
		 -> STR_33(CODE[34]), STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), 
		 -> STR_29(CODE[12]), STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), 
		 -> STR_25(CODE[40]), STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), 
		 -> STR_21(CODE[36]), STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), 
		 -> STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), 
		 -> STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), STR_8(CODE[6]), 
		 -> STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    displayL2_PutStr@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutChar@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_Initialize@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_Update@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetUserLed@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetSegChar@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    sp__memset	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    displayL1_Initialize@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRelease@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsClr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsSet@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayErase@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayPutStr@str	PTR unsigned char  size(2) Largest target is 120
		 -> flashy_Main@hit_counter(BANK0[6]), STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[43]), 
		 -> STR_37(CODE[13]), STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), 
		 -> STR_33(CODE[34]), STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), 
		 -> STR_29(CODE[12]), STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), 
		 -> STR_25(CODE[40]), STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), 
		 -> STR_21(CODE[36]), STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), 
		 -> STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), 
		 -> STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), STR_8(CODE[6]), 
		 -> STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    nullifyBadge_segDisplayPutStr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayForceUpdate@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_platformInit@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    marquee@string	PTR unsigned char  size(2) Largest target is 120
		 -> STR_45(CODE[5]), STR_44(CODE[5]), STR_43(CODE[11]), STR_42(CODE[13]), 
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), 
		 -> secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), 
		 -> flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    marquee_speedy@string	PTR unsigned char  size(2) Largest target is 120
		 -> STR_82(CODE[23]), STR_81(CODE[27]), STR_80(CODE[46]), STR_79(CODE[8]), 
		 -> STR_78(CODE[7]), STR_77(CODE[8]), STR_76(CODE[6]), STR_75(CODE[10]), 
		 -> STR_74(CODE[5]), STR_73(CODE[7]), STR_72(CODE[9]), STR_71(CODE[7]), 
		 -> STR_70(CODE[7]), STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), 
		 -> STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), 
		 -> STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), 
		 -> STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), 
		 -> STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), 
		 -> STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), 
		 -> STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), 
		 -> STR_12(CODE[9]), STR_11(CODE[5]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), 
		 -> locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), 
		 -> NULL(NULL[0]), 

    schedulerInst.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    S1195t_matrix_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1170t_secret_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1161t_locked_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1067t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1136t_menu_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1118t_flashy_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    matrix_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    matrix_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    matrix_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    secret_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    secret_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    secret_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    locked_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    locked_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    locked_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    slot_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    slot_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    slot_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    menu_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    menu_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    menu_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    flashy_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    flashy_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    flashy_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    fadeDisplay_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    S1013t_fadeDisplay_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    schedulerExecute@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerExecute@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    schedulerExecute@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskRemove@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskRemove@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskRemove@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskRemove@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRemove@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), 

    scheduler_TaskAdd@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskInit@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskInit@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskInit@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskInit@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskInit@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), 

    S923t_scheduler$tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    S902t_schedulerTask$taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskRun@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    S902t_schedulerTask$taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskRun@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    S902t_schedulerTask$taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskRun@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    S902t_schedulerTask$taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    SPI1_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 10
		 -> displayL1_Update@tmpRxBuf(BANK0[10]), 

    SPI1_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 


Critical Paths under _main in COMMON

    _schedulerExecute->_TMR0_Read16bitTimer
    _scheduler_TaskRun->_TMR0_Read16bitTimer
    _secret_check->_strlen
    _matrix_secret_check->_strlen
    _slot_Setup->___lwmod
    _locked_secret_check->_strlen
    _nullifyBadge_userLedsClr->_displayL2_ClrUserLeds
    _displayL2_ClrUserLeds->_displayL1_Update
    _sprintf->___lwmod
    _led_rand->___almod
    _rand->___lmul
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _displayL1_SetSegChar->_displayCharReverse
    _nullifyBadge_segDisplayForceUpdate->_displayL2_ForceUpdate
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->___lwdiv
    _displayL2_Initialize->_displayL1_Initialize
    _displayL1_Initialize->_displayL1_Update
    _displayL1_Update->_SPI1_Exchange8bitBuffer
    _SPI1_Exchange8bitBuffer->_SPI1_Exchange8bit
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_schedulerExecute
    _scheduler_TaskAdd->_matrix_Init
    _slot_Init->_nullifyBadge_segDisplayErase
    _secret_Init->_nullifyBadge_segDisplayErase
    _menu_Init->_nullifyBadge_segDisplayErase
    _matrix_Init->_nullifyBadge_segDisplayErase
    _locked_Init->_nullifyBadge_segDisplayErase
    _flashy_Init->_nullifyBadge_segDisplayErase
    _schedulerExecute->_scheduler_TaskRun
    _scheduler_TaskRun->_slot_Main
    _slot_Running_Animation->_led_circle
    _slot_Finished_Animation->_led_rand
    _menu_Main->_menu_display_option
    _menu_run_option->_menu_clear
    _menu_clear->_nullifyBadge_segDisplayErase
    _menu_display_option->_marquee
    _matrix_display_option->_marquee_speedy
    _slot_Setup->___lwmod
    _locked_clear->_nullifyBadge_segDisplayErase
    _displayL2_ClrUserLeds->_displayL1_Update
    _nullifyBadge_segDisplayErase->_displayL2_EraseSegDisplay
    _displayL2_EraseSegDisplay->_displayL2_PutStr
    _sprintf->___lwmod
    _let_alternate->_nullifyBadge_userLedsSet
    _led_roundabout->_nullifyBadge_userLedsSet
    _led_rand->___almod
    _rand->___lmul
    ___almod->_rand
    _led_curtain->_nullifyBadge_userLedsSet
    _led_circle->_nullifyBadge_userLedsSet
    _led_Parody->_nullifyBadge_userLedsSet
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _flashy_display_option->_marquee
    _flashy_display_option->_marquee_speedy
    _marquee_speedy->_nullifyBadge_segDisplayPutStr
    _marquee->_nullifyBadge_segDisplayPutStr
    _nullifyBadge_segDisplayPutStr->_displayL2_PutStr
    _displayL2_PutStr->_displayL2_PutChar
    _displayL2_PutChar->_displayL1_SetSegChar
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->_rand
    _nullifyBadge_platformInit->_displayL2_Initialize
    _displayL1_Initialize->_displayL1_Update

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_schedulerExecute

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  389154
                                             78 BANK0      1     1      0
          _nullifyBadge_platformInit
                   _schedulerExecute
                     _scheduler_Init
                  _scheduler_TaskAdd
                 _scheduler_TaskInit
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskInit                                   1     1      0     352
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskAdd                                    9     8      1   51944
                                             31 BANK0      9     8      1
                   Absolute function *
                        _flashy_Init *
                        _locked_Init *
                        _matrix_Init *
                          _menu_Init *
                        _secret_Init *
                          _slot_Init *
 ---------------------------------------------------------------------------------
 (2) _slot_Init                                            4     2      2   14563
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (2) _secret_Init                                          4     2      2    7129
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _menu_Init                                            4     2      2    7129
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _matrix_Init                                          6     4      2    7411
                                             25 BANK0      6     4      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _locked_Init                                          4     2      2    7194
                                             25 BANK0      4     2      2
                   _locked_lock_leds
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _flashy_Init                                          4     2      2    7284
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsRegister                        1     1      0     242
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayRegister                      1     1      0     253
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_Init                                       3     3      0     145
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _schedulerExecute                                    14    14      0  331316
                                             72 BANK0      6     6      0
                                              0 BANK1      8     8      0
                _TMR0_Read16bitTimer
                  _scheduler_TaskRun
 ---------------------------------------------------------------------------------
 (2) _scheduler_TaskRun                                    1     1      0  330760
                                             71 BANK0      1     1      0
                   Absolute function *
                _TMR0_Read16bitTimer
                        _flashy_Main *
                        _locked_Main *
                        _matrix_Main *
                          _menu_Main *
                        _secret_Main *
                          _slot_Main *
 ---------------------------------------------------------------------------------
 (3) _slot_Main                                           21    19      2   72364
                                             50 BANK0     21    19      2
                            ___lwmod
                            _marquee
                     _marquee_speedy
                             _memset
            _nullifyBadge_buttonsGet
                               _rand
            _slot_Finished_Animation
             _slot_Running_Animation
                         _slot_Setup
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _slot_Running_Animation                               6     4      2    3731
                                             18 BANK0      6     4      2
                         _led_circle
 ---------------------------------------------------------------------------------
 (4) _slot_Finished_Animation                              6     4      2    4417
                                             29 BANK0      6     4      2
                           _led_rand
 ---------------------------------------------------------------------------------
 (3) _secret_Main                                          8     6      2    4833
                                             50 BANK0      8     6      2
            _nullifyBadge_buttonsGet
                       _secret_check
                       _secret_clear
 ---------------------------------------------------------------------------------
 (4) _secret_clear                                         2     0      2     286
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (4) _secret_check                                        19    16      3    2899
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _menu_Main                                            7     5      2   51434
                                             50 BANK0      7     5      2
                         _menu_clear
                _menu_display_option
                    _menu_run_option
            _nullifyBadge_buttonsGet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (4) _menu_run_option                                      2     0      2    7012
                                             27 BANK0      2     0      2
                         _menu_clear
 ---------------------------------------------------------------------------------
 (5) _menu_clear                                           2     0      2    6838
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (4) _menu_display_option                                  6     4      2   28669
                                             44 BANK0      6     4      2
                            ___lwmod
                            _marquee
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (3) _matrix_Main                                         10     8      2   42448
                                             50 BANK0     10     8      2
                         _led_Parody
                        _led_curtain
              _matrix_display_option
                _matrix_secret_check
            _nullifyBadge_buttonsGet
 ---------------------------------------------------------------------------------
 (4) _matrix_secret_check                                 19    16      3    3495
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _matrix_display_option                                4     2      2   15068
                                             44 BANK0      4     2      2
                     _marquee_speedy
 ---------------------------------------------------------------------------------
 (3) _locked_Main                                          7     5      2   41866
                                             50 BANK0      7     5      2
                            ___lwmod
                       _locked_clear
               _locked_get_lock_leds
             _locked_get_unlock_leds
                   _locked_lock_leds
                _locked_secret_check
                 _locked_unlock_leds
                            _marquee
            _nullifyBadge_buttonsGet
           _nullifyBadge_userLedsSet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (3) _slot_Setup                                           7     5      2    7403
                                             15 BANK0      7     5      2
                            ___lwmod
                             _memset
                               _rand
 ---------------------------------------------------------------------------------
 (4) _locked_unlock_leds                                   2     2      0       0
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _locked_secret_check                                 19    16      3    2452
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1      76
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _locked_lock_leds                                     4     4      0      34
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _locked_get_unlock_leds                               4     2      2      34
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _locked_get_lock_leds                                 8     6      2      68
                                              1 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (4) _locked_clear                                         2     0      2    6588
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsClr                             1     1      0    2094
                                             11 BANK0      1     1      0
              _displayL2_ClrUserLeds
 ---------------------------------------------------------------------------------
 (4) _displayL2_ClrUserLeds                                1     1      0    1559
                                             11 COMMON     1     1      0
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayErase                         1     1      0    4196
                                             24 BANK0      1     1      0
          _displayL2_EraseSegDisplay
 ---------------------------------------------------------------------------------
 (4) _displayL2_EraseSegDisplay                            1     1      0    3589
                                             23 BANK0      1     1      0
                   _displayL1_Update
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (3) _flashy_Main                                         14    12      2  117584
                                             50 BANK0     14    12      2
              _flashy_display_option
                         _led_Parody
                         _led_circle
                        _led_curtain
                           _led_rand
                     _led_roundabout
                      _let_alternate
                            _marquee
            _nullifyBadge_buttonsGet
                 _nullifyBadge_irGet
               _nullifyBadge_irTxClr
          _nullifyBadge_irTxRegister
           _nullifyBadge_irTxRelease
               _nullifyBadge_irTxSet
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             32    20     12   16383
                                             15 BANK0     28    16     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    7304
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxSet                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRelease                             2     2      0      67
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRegister                            1     1      0      98
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxClr                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irGet                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_buttonsGet                              3     3      0      46
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _let_alternate                                        2     0      2    3314
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_roundabout                                       8     6      2    8722
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_rand                                            10    10      0    4190
                                             19 BANK0     10    10      0
                            ___almod
           _nullifyBadge_userLedsSet
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 7     5      2     316
                                              4 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     316
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) ___almod                                             11     3      8     613
                                              9 COMMON     3     3      0
                                             11 BANK0      8     0      8
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) _led_curtain                                          8     6      2    8812
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_circle                                           2     0      2    3404
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_Parody                                           8     6      2    8874
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (6) _nullifyBadge_userLedsSet                             3     1      2    3193
                                             13 BANK0      3     1      2
              _displayL2_SetUserLeds
 ---------------------------------------------------------------------------------
 (7) _displayL2_SetUserLeds                                3     1      2    1868
                                             11 COMMON     1     1      0
                                             11 BANK0      2     0      2
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (5) _displayL1_SetUserLed                                 4     2      2     376
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _flashy_display_option                                2     0      2   34663
                                             44 BANK0      2     0      2
                            _marquee
                     _marquee_speedy
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
 ---------------------------------------------------------------------------------
 (4) _marquee_speedy                                      18    12      6   14646
                                             26 BANK0     18    12      6
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _marquee                                             18    14      4   15189
                                             26 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2    1480
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayPutStr                        3     1      2    3224
                                             23 BANK0      3     1      2
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (5) _displayL2_PutStr                                     7     5      2    2406
                                             16 BANK0      7     5      2
                  _displayL2_PutChar
 ---------------------------------------------------------------------------------
 (6) _displayL2_PutChar                                    6     5      1    1993
                                             10 BANK0      6     5      1
               _displayL1_SetSegChar
 ---------------------------------------------------------------------------------
 (7) _displayL1_SetSegChar                                10     8      2    1298
                                              0 BANK0     10     8      2
                 _displayCharReverse
 ---------------------------------------------------------------------------------
 (8) _displayCharReverse                                  11     9      2     331
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayForceUpdate                   1     1      0    1399
                                             11 BANK0      1     1      0
              _displayL2_ForceUpdate
 ---------------------------------------------------------------------------------
 (6) _displayL2_ForceUpdate                                1     1      0    1152
                                             11 COMMON     1     1      0
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4    5272
                                              9 COMMON     2     2      0
                                             11 BANK0      4     0      4
                            ___lwdiv (ARG)
                               _rand (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4    1221
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _TMR0_Read16bitTimer                                 11     9      2     102
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (1) _nullifyBadge_platformInit                            1     1      0    5397
                                             12 BANK0      1     1      0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                 _PWM1_LoadDutyValue
                    _PWM2_Initialize
                 _PWM2_LoadDutyValue
                    _PWM5_Initialize
                 _PWM5_LoadDutyValue
                    _PWM6_Initialize
                 _PWM6_LoadDutyValue
                    _SPI1_Initialize
                  _SYSTEM_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
               _displayL2_Initialize
 ---------------------------------------------------------------------------------
 (2) _displayL2_Initialize                                 1     1      0    4257
                                             11 BANK0      1     1      0
               _displayL1_Initialize
                             _memset
 ---------------------------------------------------------------------------------
 (3) _displayL1_Initialize                                 1     1      0    2640
                                             11 COMMON     1     1      0
                   _displayL1_Update
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    1457
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (5) _displayL1_Update                                    13    13      0    1085
                                              9 COMMON     2     2      0
                                              0 BANK0     11    11      0
            _SPI1_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bitBuffer                              7     5      2     759
                                              2 COMMON     7     5      2
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     121
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM5_Initialize
                    _PWM6_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      98
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM6_LoadDutyValue                                   4     2      2     196
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM5_LoadDutyValue                                   4     2      2     272
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_LoadDutyValue                                   2     0      2     166
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM1_LoadDutyValue                                   2     0      2     166
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          1     1      0       0
                                              0 COMMON     1     1      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (13) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (14) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _nullifyBadge_platformInit
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM1_LoadDutyValue
     _PWM2_Initialize
     _PWM2_LoadDutyValue
     _PWM5_Initialize
     _PWM5_LoadDutyValue
     _PWM6_Initialize
     _PWM6_LoadDutyValue
     _SPI1_Initialize
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _PWM1_Initialize
       _PWM2_Initialize
       _PWM5_Initialize
       _PWM6_Initialize
       _SPI1_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
         _TMR0_StartTimer
       _TMR2_Initialize
         _TMR2_StartTimer
       _TMR4_Initialize
         _TMR4_StartTimer
       _WDT_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
     _TMR4_Initialize
       _TMR4_StartTimer
     _displayL2_Initialize
       _displayL1_Initialize
         _displayL1_Update
           _SPI1_Exchange8bitBuffer
             _SPI1_Exchange8bit
         _memset
       _memset
   _schedulerExecute
     _TMR0_Read16bitTimer
     _scheduler_TaskRun
       Absolute function(Fake) *
       _TMR0_Read16bitTimer *
       _flashy_Main *
         _flashy_display_option
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_circle
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_rand
           ___almod
             _rand (ARG)
               ___lmul
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _rand
             ___lmul
         _led_roundabout
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _let_alternate
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_irGet
         _nullifyBadge_irTxClr
         _nullifyBadge_irTxRegister
         _nullifyBadge_irTxRelease
         _nullifyBadge_irTxSet
         _nullifyBadge_segDisplayForceUpdate
           _displayL2_ForceUpdate
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _nullifyBadge_segDisplayPutStr
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
       _locked_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _locked_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _locked_get_lock_leds
         _locked_get_unlock_leds
         _locked_lock_leds
         _locked_secret_check
           ___bmul
           _strlen
         _locked_unlock_leds
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _matrix_Main *
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _matrix_display_option
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
         _matrix_secret_check
           ___bmul
           _strlen
         _nullifyBadge_buttonsGet
       _menu_Main *
         _menu_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_display_option
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_run_option
           _menu_clear
             _nullifyBadge_segDisplayErase
               _displayL2_EraseSegDisplay
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
                 _displayL2_PutStr
                   _displayL2_PutChar
                     _displayL1_SetSegChar
                       _displayCharReverse
             _nullifyBadge_userLedsClr
               _displayL2_ClrUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _nullifyBadge_buttonsGet
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _secret_Main *
         _nullifyBadge_buttonsGet
         _secret_check
           ___bmul
           _strlen
         _secret_clear
       _slot_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _marquee_speedy
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _memset
         _nullifyBadge_buttonsGet
         _rand
           ___lmul
         _slot_Finished_Animation
           _led_rand
             ___almod
               _rand (ARG)
                 ___lmul
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _rand
               ___lmul
         _slot_Running_Animation
           _led_circle
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
         _strlen
   _scheduler_Init
   _scheduler_TaskAdd
     Absolute function(Fake) *
     _flashy_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _locked_Init *
       _locked_lock_leds
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _matrix_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _menu_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _secret_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _slot_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
       _slot_Setup
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _memset
         _rand
           ___lmul
   _scheduler_TaskInit

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.2%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      48      11       90.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      48      13       90.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     330      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      4D      16       96.2%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      49      18       91.2%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      4C      20       95.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      38      22       70.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      3D      24       76.2%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      3A      26       72.5%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     330      28        0.0%
BANK11              50      0      28      29       50.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              10      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23               0      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24               0      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25               0      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Jul 26 08:15:59 2017

                          _SPI1_Exchange8bit 3253                                            pc 0002  
           __size_of_slot_Finished_Animation 0027                               ___bmul@product 0073  
                 __end_of_gamma_table_256x1k 2200                           ?_SPI1_Exchange8bit 0070  
                                __CFG_CP$OFF 0000                                           l18 3258  
                      _displayL2_ClrUserLeds 3305                          ___wmul@multiplicand 0073  
                   marquee_speedy@multiplier 003E                                 ?_led_curtain 0030  
              nullifyBadge_buttonsGet@retVal 0073                  __size_of_PWM6_LoadDutyValue 0016  
                                __CFG_LVP$ON 0000                   ??_nullifyBadge_userLedsClr 007C  
                 ??_nullifyBadge_userLedsSet 007C                                          l208 326C  
                                        l625 2EDE                                          _GIE 005F  
                             led_Parody@leds 0034              ??_nullifyBadge_segDisplayPutStr 007C  
                                        _PR2 001E                                          _PR4 0416  
                               __CFG_CPD$OFF 0000                               _scheduler_Init 347D  
                             led_Parody@size 0036                          ??_SPI1_Exchange8bit 0071  
                   ??_slot_Running_Animation 0034                           _locked_unlock_leds 3399  
                marquee_speedy@string_length 0048                              _TMR2_Initialize 326F  
             SPI1_Exchange8bitBuffer@dataOut 0073                     displayL1_Update@tmpRxBuf 0020  
                                        wreg 0009                                _slot_taskData 00BC  
               marquee_speedy@display_string 0041                  displayL1_Initialize@display 007B  
        nullifyBadge_userLedsSet@userLedData 002D                              led_curtain@leds 0034  
                    secret_Main@secret_found 0056                              led_curtain@size 0036  
                       _displayL1_Initialize 3386                  slot_Finished_Animation@data 0041  
                                       l1010 2B5A                                         l1150 0B61  
                                       l1160 0C49                                         l1155 0BD4  
                                       l1147 0AF4                                         l1253 0812  
                                       l1249 3573                                         l1282 1E87  
                                       l1611 1B07                                         l1427 29D6  
                                       l1454 0574                                         l1704 344F  
                                       l1457 05CD                                         l1772 2FA3  
                                       l8201 2BD3                                         l8203 2BD7  
                                       l9011 1C0D                                         l8213 2BDF  
                                       l8205 2BDC                                         l9021 1C30  
                                       l9013 1C13                                         l8303 335A  
                                       l9023 1C34                                         l9015 1C1B  
                                       l9007 1BE7                                         l9201 09B7  
                                       l9041 1C8B                                         l8163 363B  
                                       l8155 362A                                         l8243 35C8  
                                       l8331 2FC6                                         l8323 2FB0  
                                       l9107 0865                                         l9043 1C90  
                                       l9035 1C68                                         l7509 33E7  
                                       l8181 37E1                                         l8413 22C6  
                                       l9213 09EB                                         l9205 09C4  
                                       l9061 1CD9                                         l8431 2316  
                                       l8407 229F                                         l8343 2FF7  
                                       l8335 2FDE                                         l8271 3685  
                                       l9207 09D5                                         l9135 08C6  
                                       l9071 1D05                                         l9055 1CC4  
                                       l8329 2FB8                                         l8505 3365  
                                       l9225 0A36                                         l9137 08D5  
                                       l8195 2BB0                                         l8291 34E3  
                                       l8339 2FE9                                         l8275 3690  
                                       l8603 2DEB                                         l8611 2B1F  
                                       l9315 0BBB                                         l9243 0A8C  
                                       l9171 0949                                         l9147 08FA  
                                       l9235 0A5E                                         l9075 1D15  
                                       l7493 33D1                                         l8365 3706  
                                       l8357 36E8                                         l8381 35F6  
                                       l8437 233D                                         l8533 33B7  
                                       l8509 336B                                         l9421 0D77  
                                       l9413 0D4E                                         l9325 0BD8  
                                       l9229 0A4B                                         l9237 0A72  
                                       l9165 0936                                         l9157 091E  
                                       l9085 1D41                                         l8199 2BBF  
                                       l8359 36F4                                         l8383 3602  
                                       l8391 3617                                         l8543 2F0B  
                                       l8447 2A78                                         l8703 1A98  
                                       l8711 1ABF                                         l8615 2B2C  
                                       l8607 2B12                                         l9511 0F89  
                                       l9423 0D7C                                         l9263 0ADF  
                                       l9239 0A7D                                         l9183 096D  
                                       l8457 3433                                         l8369 370F  
                                       l8289 34D7                                         l8641 2248  
                                       l8721 1AD6                                         l8625 2B46  
                                       l9505 0F70                                         l9345 0C30  
                                       l9193 0992                                         l9177 095D  
                                       l9097 1D74                                         l8387 360E  
                                       l8491 3449                                         l8651 19E8  
                                       l8619 2B39                                         l9523 0FBD  
                                       l9443 0DD0                                         l9355 0C4D  
                                       l9611 1ECB                                         l8637 2220  
                                       l8485 3303                                         l8741 1B23  
                                       l8733 1AFB                                         l8709 1AA1  
                                       l9461 0E19                                         l9453 0DF4  
                                       l9269 0AF8                                         l9605 1E9F  
                                       l8751 1B3C                                         l8743 1B26  
                                       l8727 1ADC                                         l8831 1016  
                                       l8903 29E5                                         l9471 0E3E  
                                       l9375 0CA5                                         l9295 0B65  
                                       l9527 0FC9                                         l9615 1ED6  
                                       l9607 1EB3                                         l9711 18B0  
                                       l8745 1B2A                                         l8673 1A3B  
                                       l8665 1A27                                         l8657 19F8  
                                       l8833 10C9                                         l8913 35B9  
                                       l9529 0FD6                                         l9465 0E26  
                                       l9457 0E06                                         l9449 0DE3  
                                       l9393 0CFB                                         l9289 0B4C  
                                       l9633 1F35                                         l9561 1DB8  
                                       l8691 1A6E                                         l8683 1A58  
                                       l8827 10B2                                         l9491 0E92  
                                       l9643 1F61                                         l9619 1EF0  
                                       l9571 1DF5                                         l9731 1914  
                                       l9715 18C8                                         l8765 1B4E  
                                       l8757 1B4A                                         l8677 1A3D  
                                       l8829 10C3                                         l8589 2C90  
                                       l8941 2591                                         l9813 0347  
                                       l9469 0E39                                         l9629 1F1C  
                                       l9661 1FCF                                         l9901 1141  
                                       l8679 1A4B                                         l8767 19C7  
                                       l8943 2643                                         l8871 26FE  
                                       l9495 0EE5                                         l9647 1F78  
                                       l9663 1FDD                                         l9591 1E65  
                                       l9743 1948                                         l9727 18FC  
                                       l8697 1A82                                         l8689 1A5A  
                                       l8769 1B88                                         l8961 2532  
                                       l8937 262C                                         l8865 26E7  
                                       l9841 050D                                         l9825 041A  
                                       l9497 0F36                                         l9657 1FA4  
                                       l9593 1E70                                         l9585 1E48  
                                       l8699 1A8D                                         l8939 263D  
                                       l8867 26F8                                         l9843 0583  
                                       l9835 04CA                                         l9499 0F59  
                                       l9579 1E18                                         l9747 1960  
                                       l9683 182D                                         l9763 19A5  
                                       l9931 11D0                                         l9907 116C  
                                       l8965 2555                                         l8957 2519  
                                       l8869 264C                                         l9669 1FF2  
                                       l9765 19B7                                         l9677 1813  
                                       l8895 29C3                                         l9847 05B6  
                                       l9863 0627                                         l9759 1994  
                                       l9695 1864                                         STR_1 3BF9  
                                       STR_2 3BF4                                         l9961 1265  
                                       l9937 1201                          ?_locked_unlock_leds 0070  
                                       STR_3 287D                                         STR_4 3BEF  
                                       l9779 011E                                         l9699 187C  
                                       STR_5 3BA3                                         STR_6 3AF7  
                                       l8989 1BA1                                         STR_7 3B66  
                                       STR_8 3B9D                                         l9799 0251  
                                       l9991 12FA                                         l9967 1296  
                                       l9887 1101                                         STR_9 3BEA  
                                       l9897 112E                                         l9899 1139  
                                       l9997 132B                      __end_of_PWM1_Initialize 3299  
                                       _LATA 010C                                         _LATB 010D  
                                       _LATC 010E                                         u4315 33C8  
                                       u3380 2CEE                                         u4335 33DE  
                                       u5135 2EEF                                         u5145 3663  
                                       u5065 3450                                         u5155 3671  
                                       u5075 3455                                         u5315 1AF1  
                            led_Parody@count 0030                                         u4285 33FB  
                                       u4295 3411                                         u5415 356D  
                                       u5265 1A51                                         u5355 1B16  
                                       u4725 299E                                         u5445 107B  
                                       u6405 1560                                         u5455 101C  
                                       u6415 15F5                                         u6335 1153  
                                       u6504 2380                                         u4905 35F9  
                                       u5545 25F6                                         u6425 168A  
                                       u6345 11E2                                         u6505 237E  
                                       u4835 36EB                                         u4675 3691  
                                       u5555 2597                                         u5475 26B1  
                                       u6355 1277                                         u4925 3608  
                                       u4765 2FBB                                         u4685 3698  
                                       u5485 2652                                         u6365 130C  
                                       u4950 2276                                         u4855 36F5  
                                       u4935 360F                                         u5655 1C85  
                                       u6375 13A1                                         u6544 23DE  
                                       u4865 36FF                                         u4785 2FD4  
                                       u6385 1436                                         u6545 23DC  
                                       u4875 3707                                         u4795 2FDF  
                                       u6395 14CB                                         u4980 22ED  
                                       u6484 2361                                         u5925 0D71  
                                       u6565 2432                                         u6485 235F  
                                       _PLLR 48E0                                         _TMR2 001D  
                                       _TMR4 0415                                         _WPUA 020C  
                                       _WPUB 020D                                         _WPUC 020E  
                               __CFG_WRT$OFF 0000                                __CFG_FCMEN$ON 0000  
                     ?_matrix_display_option 004C                                         _main 0661  
                                       _rand 2968                              _TMR0_StartTimer 3218  
                                       fsr0h 0005                                         fsr1h 0007  
                                       indf0 0000                                         fsr0l 0004  
                                       indf1 0001                                         fsr1l 0006  
                                       btemp 007E                                __CFG_BOREN$ON 0000  
                           ??_marquee_speedy 0040                                __CFG_BORV$LOW 0000  
                                       start 0016                    __end_of_SPI1_Exchange8bit 325C  
                        _menu_display_option 2DA0                              _PWM5_Initialize 32BA  
                        matrix_Main@taskData 0052                          locked_Main@taskData 0052  
               displayL2_ClrUserLeds@display 007B                      displayL2_PutStr@display 0035  
                              __CFG_CSWEN$ON 0000                            ___bmul@multiplier 0074  
                              __CFG_MCLRE$ON 0000                         _displayL1_SetSegChar 37BF  
                 __end_of_PWM5_LoadDutyValue 3402                                        S10829 3000  
                        menu_run_option@data 003B                         _displayL2_Initialize 3578  
                       ??_locked_unlock_leds 0071                      __end_of_PWM2_Initialize 32A4  
                    __end_of_TMR0_Initialize 34D3               ??_TMR0_DefaultInterruptHandler 0070  
             __size_of_OSCILLATOR_Initialize 000A                       __end_of_scheduler_Init 3498  
                       _displayL1_SetUserLed 3374                        marquee@display_string 003F  
              __end_of_OSCILLATOR_Initialize 326F                                        l10021 138F  
                                      l10111 154E                                        l10201 170D  
                                      l10051 1424                                        l10027 13C0  
                                      l10141 15E3                                        l10117 157F  
                                      l10241 17CB                                        l10081 14B9  
                                      l10057 1455                                        l10233 1793  
                                      l10171 1678                                        l10147 1614  
                                      l10235 17B4                                        l10229 177F  
                                      l10087 14EA                                        l10249 17F4  
                                      l10177 16A9                                        l10451 2350  
                                      l10461 23B3                                        l10457 23A8  
                                      l10465 23BB                                        l10831 0F3B  
                                      l10833 2B4C                                        l10489 2440  
                                      l10827 08CC                                        l10667 075F  
                    ?_locked_get_unlock_leds 0071                      _locked_locking_leds_idx 00A4  
                            __end_of___almod 3000                                        ?_main 0070  
                                      ?_rand 0024                                        STR_10 3A45  
                                      STR_11 3BEA                                        STR_20 3971  
                                      STR_12 3B25                                        STR_21 38B0  
                                      STR_13 3B5E                                        STR_30 3A89  
                                      STR_22 3919                                        STR_14 3B97  
                                      STR_31 38D4                                        STR_23 3954  
                                      STR_15 3A32                                        STR_40 3BE5  
                                      STR_32 3A79                                        STR_24 39A8  
                                      STR_16 3A0A                                        STR_41 3BFE  
                                      STR_33 38F7                                        STR_25 3888  
                                      STR_17 39C3                                __CFG_WDTE$OFF 0000  
                                      STR_42 3AA5                                        STR_34 280A  
                                      STR_26 3A57                                        STR_18 3B56  
                                      STR_50 3BB3                                        STR_43 3AA7  
                                      STR_35 3A68                                        STR_27 3A1F  
                                      STR_19 39F4                                        STR_51 3BBD  
                                      STR_44 3BE0                                        STR_36 3800  
                                      STR_28 3937                                        STR_60 3B3E  
                                      STR_52 3BC2                                        STR_45 3BDB  
                                      STR_37 3AB2                                        STR_29 3ACB  
                                      STR_61 3ABF                                        STR_53 3BB8  
                                      STR_38 385D                                        STR_70 3B8A  
                                      STR_62 3A98                                        STR_54 3BCC  
                                      STR_46 3BD1                                        STR_39 287D  
                                      STR_71 3B75                                        STR_63 3B13  
                                      STR_55 3B4E                                        STR_47 3BC7  
                                      STR_64 3B1C                                        STR_80 382F  
                                      STR_72 3B01                                        STR_56 3B46  
                                      STR_48 3BAE                                        STR_65 3B1C  
                                      STR_81 398D                                        STR_73 3B7C  
                                      STR_57 3B0A                                        STR_49 3BD6  
                                      STR_66 3B1C                                        STR_82 39DD  
                                      STR_74 3BA9                                        STR_58 3AE2  
                                      STR_67 3B1C                                        STR_83 3B6E  
                                      STR_75 3AED                                        STR_59 3AD7  
                                      STR_68 3B1C                                        STR_76 3B91  
                                      STR_69 3C02                                        STR_77 3B2E  
                                      STR_78 3B83                                        STR_79 3B36  
                           _schedulerExecute 23C3                                        _T2CON 001F  
                    _flashy_leds_state_track 00B0                                        _T4CON 0417  
                             __CFG_DEBUG$OFF 0000                              __end_of___lwdiv 3714  
                            __end_of___lwmod 361C                                        i1l363 0011  
                                      _OSCEN 091D                                        _TMR0H 0016  
                                      _TMR0L 0015                               _led_roundabout 28E5  
                       ?_menu_display_option 004C               nullifyBadge_irTxRegister@badge 0071  
                 __end_of_scheduler_TaskInit 3785                                        _TRISA 008C  
                                      _TRISB 008D                                        _TRISC 008E  
           __size_of_nullifyBadge_buttonsGet 0031            __size_of_TMR0_SetInterruptHandler 0006  
                            _TMR4_Initialize 32A4                              _PWM6_Initialize 32C6  
                        ___lmul@multiplicand 0075                    ?_TMR0_SetInterruptHandler 0071  
                      _displayL2_ForceUpdate 3231                       ??_locked_get_lock_leds 0073  
                           __end_of_TMR0_ISR 32F7                                 _badge_locked 00C4  
                               ?_matrix_Main 0052                                 ?_locked_Main 0052  
                               ?_matrix_Init 0039                                 ?_locked_Init 0039  
                      ?_displayL1_Initialize 0070                              __end_of_dpowers 280A  
                    _SPI1_Exchange8bitBuffer 2BA7                               _WDT_Initialize 3227  
                            __end_of_isdigit 3305                              __end_of_marquee 2349  
                                      _randx 00CC                         matrix_Main@holdvalue 0059  
                                      pclath 000A           __size_of_nullifyBadge_platformInit 0055  
                                      status 0003                                        wtemp0 007E  
                            __end_of_sprintf 1B8F                              _TMR2_StartTimer 321B  
          __size_of_nullifyBadge_irTxRelease 000B                             _menu_option_size 00B4  
                  ?_nullifyBadge_irTxRelease 0070                     __size_of_SPI1_Initialize 0008  
                     menu_Main@buttonPressed 0056                 displayL1_SetSegChar@charData 0028  
                      ?_displayL1_SetSegChar 0020                              __initialization 0018  
                          ?_displayL1_Update 0070                                 __end_of_main 0764  
                               __end_of_rand 29AB                        ?_displayL2_Initialize 0070  
                          ?_displayL2_PutStr 0030                       __size_of_let_alternate 0014  
                     ?_displayL2_ClrUserLeds 0070               __end_of_locked_get_unlock_leds 0819  
                         ??_displayL1_Update 0079                      __end_of_TMR2_Initialize 3279  
                      ?_displayL1_SetUserLed 0071                  ?_INTERRUPT_InterruptManager 0070  
                         ??_displayL2_PutStr 0032             displayCharReverse@retValUpperRev 007A  
                            ?_scheduler_Init 0070                       __end_of_led_roundabout 2926  
                                     ??_main 006E                                       ??_rand 0026  
                              slot_Main@data 0065                         _nullifyBadge_irTxClr 3221  
                      ??_menu_display_option 007C                         _nullifyBadge_irTxSet 3224  
                               ?_secret_Main 0052                                 ?_secret_Init 0039  
            __size_of_slot_Running_Animation 0046                       __end_of_WDT_Initialize 322B  
                              slot_Init@data 003B        __end_of_nullifyBadge_segDisplayPutStr 3283  
     __size_of_nullifyBadge_segDisplayPutStr 000A                _nullifyBadge_segDisplayPutStr 3279  
                    __end_of_TMR0_StartTimer 321B                              scheduler_Init@k 0073  
             nullifyBadge_platformInit@badge 002C                                       _CCPR1H 0292  
                                     _CCPR2H 0296                                       _CCPR1L 0291  
                                     _CCPR2L 0295                                       _ANSELA 018C  
                                     _ANSELB 018D                                       _ANSELC 018E  
                                     _T0CON0 0017                                       _T0CON1 0018  
                           ?_PWM1_Initialize 0070                                       _ODCONA 028C  
                                     _ODCONB 028D                                       _ODCONC 028E  
                    __end_of_PWM5_Initialize 32C6                  __end_of_TMR0_Read16bitTimer 34B5  
                                     _OSCFRQ 091F                                       _WDTCON 0097  
                  matrix_secret_check@inputs 0027                    locked_secret_check@inputs 0027  
                            _TMR4_StartTimer 321E                        SPI1_Exchange8bit@data 0071  
                          _scheduler_TaskAdd 2349                     __size_of_menu_run_option 004A  
                   __end_of_locked_lock_leds 347D            __end_of_nullifyBadge_platformInit 2D45  
                 __size_of_SPI1_Exchange8bit 0009                            _scheduler_TaskRun 2883  
                             __CFG_PWRTE$OFF 0000                  __end_of_locked_secret_check 10CB  
                __end_of_matrix_secret_check 2645                           ?_scheduler_TaskAdd 003F  
                         ?_scheduler_TaskRun 0070                      _slot_Finished_Animation 359E  
                                     ___bmul 3363                             __end_of_led_rand 2A80  
                                     ___lmul 367C                                    ??___almod 0079  
                   locked_get_lock_leds@leds 0077                                   _Shot_Index 007C  
                                     ___wmul 3447                               __CFG_STVREN$ON 0000  
                   locked_get_lock_leds@size 0075                                       _deaths 00AA  
                       __size_of_flashy_Main 07E7                         __size_of_flashy_Init 0096  
                                  ??___lwdiv 0075                                    ??___lwmod 0079  
                      _flashy_display_option 2200                             ?_TMR0_Initialize 0070  
                           ?_PWM2_Initialize 0070                                ?_locked_clear 0039  
                                     _memset 342F                      __end_of_PWM6_Initialize 32D2  
                    __end_of_TMR4_Initialize 32AF                          ??_scheduler_TaskAdd 0040  
           nullifyBadge_segDisplayPutStr@str 0037             __end_of_nullifyBadge_userLedsClr 0800  
           __end_of_nullifyBadge_userLedsSet 3363                          ??_scheduler_TaskRun 007C  
                            ?_led_roundabout 0030                        ?_nullifyBadge_irTxClr 0070  
                               __pdataBANK10 0520                        ?_nullifyBadge_irTxSet 0070  
                                     _strlen 34D3                                 __pdataBIGRAM 26F0  
                       __size_of_led_curtain 0041                                   _Slot_Wheel 0332  
                     ?_displayL2_ForceUpdate 0070                                    ??_isdigit 0071  
                                  ??_marquee 003E                    ??_SPI1_Exchange8bitBuffer 0074  
                            ?_WDT_Initialize 0070                       ??_displayL1_Initialize 007B  
                      _displayL2_SetUserLeds 34F1                TMR0_Read16bitTimer@readValLow 007A  
                      __end_of_TMR0_CallBack 328E                                _let_alternate 33AC  
                    __end_of_TMR2_StartTimer 321E     TMR0_SetInterruptHandler@InterruptHandler 0071  
                                  ??_sprintf 003B                   ?_displayL2_EraseSegDisplay 0070  
                 __end_of_nullifyBadge_irGet 1805                         locked_lock_leds@size 0073  
                          _SYSTEM_Initialize 350F             displayL2_EraseSegDisplay@display 0037  
                 ?_nullifyBadge_irTxRegister 0070                            _menu_options_leds 02CA  
                  __end_of_scheduler_TaskAdd 23C3                      __end_of__initialization 00E1  
                  secret_check@buttonPressed 0079                    __end_of_scheduler_TaskRun 28A4  
                     menu_display_option@led 0050                      _roundabout_leds_inverse 03A0  
                         ?_SYSTEM_Initialize 0070                   __end_of_PWM2_LoadDutyValue 33EC  
                     _slot_Running_Animation 29AB                       ??_displayL1_SetSegChar 0022  
                PWM1_LoadDutyValue@dutyValue 0071                    secret_check@currents_size 0025  
                        ___bmul@multiplicand 0071                                led_rand@spark 003B  
                     ??_displayL2_Initialize 007C                            _displayL2_PutChar 2BF5  
                             __pcstackCOMMON 0070                  displayL1_SetSegChar@charPos 0021  
                __size_of_displayCharReverse 002F                                 __pidataBANK1 1000  
                               __pidataBANK2 0002                                 __pidataBANK3 3418  
                               __pidataBANK4 2A80                                 __pidataBANK5 3530  
                               __pidataBANK6 2AC8                                 __pidataBANK7 2B5B  
                               __pidataBANK8 3714                          ??_SYSTEM_Initialize 0073  
                                  ?_TMR0_ISR 0070                       ??_displayL1_SetUserLed 0073  
                         ?_displayL2_PutChar 002A                                   _badge_inst 01B2  
                             ??_locked_clear 007C                            ??_SPI1_Initialize 0071  
                displayL1_SetSegChar@display 0027                           _PWM1_LoadDutyValue 33C0  
                      scheduler_TaskAdd@task 003F                             ?_TMR2_Initialize 0070  
                        matrix_Init@taskData 0039                          locked_Init@taskData 0039  
                        _flashy_sparkle_rate 00AE         __end_of_nullifyBadge_segDisplayErase 3243  
      __size_of_nullifyBadge_segDisplayErase 0006                 _nullifyBadge_segDisplayErase 323D  
                    _nullifyBadge_buttonsGet 364B                          ??_displayL2_PutChar 002B  
                        ?_PWM1_LoadDutyValue 0071                               ?_let_alternate 0030  
                         _gamma_table_256x1k 2000                             ?_TMR0_StartTimer 0070  
                    ??_matrix_display_option 004E                      __end_of_TMR4_StartTimer 3221  
                  __end_of_SYSTEM_Initialize 3530                           led_curtain@counter 0030  
                               sprintf@width 0048                                _menu_TaskData 02BC  
                                 __pbssBANK1 00A0                                   __pbssBANK2 0120  
                                 __pbssBANK3 01A0                                   __pbssBANK5 02A0  
                                 __pbssBANK9 04A0                         __size_of_locked_Main 027A  
                       __size_of_matrix_Main 0735                         __size_of_locked_Init 0065  
                       __size_of_matrix_Init 00A0                          secret_Main@taskData 0052  
                           ?_PWM5_Initialize 0070               ?_nullifyBadge_segDisplayPutStr 0037  
                          _flashy_option_idx 00A8                     __end_of_schedulerExecute 2447  
                      _TMR4_InterruptHandler 0124           nullifyBadge_userLedsRegister@badge 0071  
                         __size_of_menu_Main 01F7                           __size_of_menu_Init 0062  
                  __end_of_displayL2_PutChar 2C47                    ??_slot_Finished_Animation 003F  
                              ?_secret_check 0077                         ??_PWM1_LoadDutyValue 0073  
                              ?_secret_clear 0071                               _SSP1DATPPSbits 0E21  
                            _secret_TaskData 02A0                                   __pmaintext 0661  
                                    ?___bmul 0071             __end_of_TMR0_SetInterruptHandler 3231  
                                    ?___lmul 0071                       ?_flashy_display_option 004C  
                                    ?___wmul 0071                        scheduler_TaskRun@task 0067  
                                 ??_TMR0_ISR 0070                              __CFG_PPS1WAY$ON 0000  
                 __end_of_PWM6_LoadDutyValue 3418                                   __pintentry 0004  
                          ??_menu_run_option 007C                                      _CCP1CON 0293  
                                    _CCP2CON 0297                                      ?_memset 0071  
                             ___lmul@product 0020                       ??_nullifyBadge_irTxClr 0071  
                           ?_TMR4_Initialize 0070                             ?_PWM6_Initialize 0070  
                     ??_nullifyBadge_irTxSet 0071                               _SSP1CLKPPSbits 0E20  
                        __CFG_RSTOSC$HFINT32 0000                                      ?_strlen 0071  
                                 _led_Parody 2EC8                ?_nullifyBadge_segDisplayErase 0070  
                     ?_displayL2_SetUserLeds 002B                           _PWM5_LoadDutyValue 33EC  
                                    _OSCCON1 0919                     displayL2_PutChar@display 002F  
                                    _OSCCON3 091B                           __size_of_slot_Main 057C  
                         __size_of_slot_Init 0064                                      _NVMADRH 0892  
                  matrix_display_option@data 004C                                      _NVMADRL 0891  
                                    _NVMDATH 0894                                      _OSCTUNE 091E  
                                    _NVMDATL 0893                                      _NVMCON2 0896  
                                    _PWM5DCH 0618                                      _PWM5DCL 0617  
                                    _PWM6DCH 061B                                      _PWM6DCL 061A  
                                    _PWM5CON 0619                                      _PWM6CON 061C  
                                    _SSP1ADD 0212                         __size_of_secret_Main 01BD  
                                    _PPSLOCK 0E0F                                      _SSP1BUF 0211  
                                 _led_circle 325C                         __size_of_secret_Init 005B  
                           ?_TMR2_StartTimer 0070                                _matrix_option 03D8  
                                  ?_led_rand 0070                          ?_PWM5_LoadDutyValue 0071  
                    _FLASHY_TEXT_SECRET_TEST 00D4                     flashy_Main@buttonPressed 005C  
                 __size_of_scheduler_TaskAdd 007A            __size_of_nullifyBadge_userLedsClr 0006  
                 __size_of_scheduler_TaskRun 0021            __size_of_nullifyBadge_userLedsSet 0011  
                         _scheduler_TaskInit 374C                    ?_nullifyBadge_userLedsClr 0070  
                  ?_nullifyBadge_userLedsSet 002D                               ??_secret_check 0020  
                             ??_secret_clear 0073                      ??_displayL2_ClrUserLeds 007B  
               displayL2_SetUserLeds@display 007B                             ??_scheduler_Init 0071  
                        ?_scheduler_TaskInit 0070                              __size_of___bmul 0011  
                                    ___almod 2F92                              __size_of___lmul 0032  
                            __size_of___wmul 001B              ??_nullifyBadge_userLedsRegister 0071  
                                    ___lwdiv 36E0                           scheduler_TaskAdd@k 0047  
                                    ___lwmod 35EF                         ??_PWM5_LoadDutyValue 0073  
                __size_of_locked_unlock_leds 0013                    ??_nullifyBadge_buttonsGet 0071  
                            _roundabout_leds 03BC                      scheduler_Init@scheduler 0072  
                            __size_of_memset 0018                        displayL1_SetSegChar@c 0020  
                            _matrix_TaskData 04A0                              _locked_TaskData 02AE  
                                 _menu_clear 29F1                                      __ptext1 374C  
                                    __ptext2 2349                                      __ptext3 2447  
                                    __ptext4 2D45                                      __ptext5 2F2D  
                                    __ptext6 2E02                                      __ptext7 0764  
                                    __ptext8 2E64                                      __ptext9 3322  
                            __size_of_strlen 001E              __end_of_slot_Finished_Animation 35C5  
                                    _dpowers 2800                               slot_Setup@data 0034  
                      _OSCILLATOR_Initialize 3265                                      _oddeven 00B8  
                                  _T2CONbits 001F                            __end_of_menu_Main 1D86  
                          __end_of_menu_Init 2E64                                      _isdigit 32F7  
                            ??_let_alternate 007C                                      _marquee 22D2  
                                  _T4CONbits 0417                     ??_PIN_MANAGER_Initialize 0071  
    nullifyBadge_segDisplayForceUpdate@badge 002B                    __size_of_displayL1_Update 0011  
                       ??_scheduler_TaskInit 0071                    __size_of_displayL2_PutStr 002A  
                 __size_of_SYSTEM_Initialize 0021                                      _sprintf 19C2  
                                    clrloop0 32D3                             ?_TMR4_StartTimer 0070  
              __size_of_locked_get_lock_leds 0025                          displayL2_PutStr@str 0030  
                                 ??_led_rand 0033                         end_of_initialization 00E1  
                       __end_of_locked_clear 2968                                      init_ram 32DE  
                                    memset@c 0073                                      memset@n 0075  
                                    memset@p 0077                                secret_check@i 0028  
                                    initloop 32DF                                 marquee@count 003C  
                 __size_of_displayL2_PutChar 0052                            ?_locked_lock_leds 0070  
                          __end_of_slot_Main 0661                            __end_of_slot_Init 2EC8  
                           ??_led_roundabout 0032                           ??_locked_lock_leds 0071  
                            _matrix_leds_idx 00A0               TMR0_Read16bitTimer@readValHigh 007B  
                __end_of_menu_display_option 2E02                       slot_Main@buttonPressed 0064  
                                    strlen@s 0071                      ??_displayL2_ForceUpdate 007B  
                    __size_of_marquee_speedy 0073                           secret_check@inputs 0027  
                           ??_WDT_Initialize 0071                     _TMR0_SetInterruptHandler 322B  
                                  _PORTAbits 000C                                    _PORTBbits 000D  
                                  _PORTCbits 000E                nullifyBadge_userLedsClr@badge 002B  
                                ?_led_Parody 0030                                   _slot_Setup 2C47  
                    displayL1_Update@display 002A                                  ?_led_circle 0030  
                    menu_display_option@data 004C               ??_nullifyBadge_segDisplayErase 007C  
                    menu_display_option@size 004E                             __CFG_FEXTOSC$OFF 0000  
                ??_displayL2_EraseSegDisplay 007C              __end_of_nullifyBadge_buttonsGet 367C  
                              _schedulerInst 01A0                     _nullifyBadge_irTxRelease 32AF  
                    ?_slot_Running_Animation 0032                  ??_nullifyBadge_irTxRegister 0071  
                                _CCP1CONbits 0293                              _SPI1_Initialize 3243  
                                _CCP2CONbits 0297                            slot_Main@taskData 0052  
                              ??_flashy_Main 0054                                ??_flashy_Init 007C  
                 ?_nullifyBadge_platformInit 0070                 __size_of_TMR0_Read16bitTimer 001D  
                   __size_of_PWM1_Initialize 000B                          secret_Init@taskData 0039  
                       _timer0ReloadVal16bit 00C0                           _nullifyBadge_irGet 1800  
                            flashy_Main@data 005E                                __pidataBANK10 3785  
                             __end_of___bmul 3374                nullifyBadge_userLedsSet@badge 002F  
                             __end_of___lmul 36AE                                __pidataBIGRAM 2700  
                              ??_led_curtain 0032                               __end_of___wmul 3462  
            slot_Finished_Animation@taskData 003D                       flashy_Main@hit_counter 0056  
                          __size_of_TMR0_ISR 000D                           _PWM2_LoadDutyValue 33D6  
               __size_of_locked_secret_check 00BC                 __size_of_matrix_secret_check 00BB  
                                ?_menu_clear 0039                       ?_OSCILLATOR_Initialize 0070  
                             __end_of_memset 3447                          ?_nullifyBadge_irGet 0070  
                            flashy_Init@data 003B        __end_of_nullifyBadge_userLedsRegister 3331  
     __size_of_nullifyBadge_userLedsRegister 000F                _nullifyBadge_userLedsRegister 3322  
                       __end_of_secret_check 2700                              _menu_option_idx 00B6  
                       __end_of_secret_clear 36E0                               __end_of_strlen 34F1  
                        start_initialization 0018                     __size_of_PWM2_Initialize 000B  
                   __size_of_TMR0_Initialize 001E                          ?_PWM2_LoadDutyValue 0071  
            __size_of_PIN_MANAGER_Initialize 0055                         marquee_speedy@F14090 00C7  
              __size_of_displayL1_Initialize 0013               __end_of_slot_Running_Animation 29F1  
                       _matrix_secret_inputs 02D4                         _locked_secret_inputs 024F  
             __size_of_matrix_display_option 00A3                __end_of_matrix_display_option 258A  
                       ??_nullifyBadge_irGet 0071                              _menu_run_option 2B11  
                          ?_schedulerExecute 0070                      ??_flashy_display_option 007C  
                 __end_of_displayCharReverse 364B                     ??_locked_get_unlock_leds 0073  
                        __size_of_led_Parody 0065                           led_roundabout@leds 0034  
                           __CFG_LPBOREN$OFF 0000                           led_roundabout@size 0036  
                         _flashy_scroll_rate 00AC                         ??_PWM2_LoadDutyValue 0073  
                              _secret_inputs 0236                           ??_schedulerExecute 0068  
                  flashy_display_option@data 004C                __size_of_displayL1_SetSegChar 0041  
                                   ??___bmul 0072                  PWM2_LoadDutyValue@dutyValue 0071  
                                   ??___lmul 0079                   slot_Running_Animation@data 0036  
                                   ??___wmul 0075                    _displayL2_EraseSegDisplay 3331  
                                _CCPTMRSbits 029F                          __size_of_led_circle 0009  
              __size_of_displayL2_Initialize 0026                       __size_of_TMR0_CallBack 000B  
                                __pdataBANK1 00C7                                  __pdataBANK2 016B  
                                __pdataBANK3 01D1                                  __pdataBANK4 0220  
                                __pdataBANK5 02CA                                  __pdataBANK6 0320  
                                __pdataBANK7 03A0                                  __pdataBANK8 0420  
                                   ??_memset 0077                    _nullifyBadge_irTxRegister 3313  
              __size_of_displayL1_SetUserLed 0012                          __end_of_flashy_Main 1000  
                        __end_of_flashy_Init 07FA                     ?_SPI1_Exchange8bitBuffer 0072  
                    ??_displayL2_SetUserLeds 007B                             secret_check@data 0077  
                                   ??_strlen 0073                             secret_check@size 0023  
                                __pbssBANK11 05A0                    schedulerExecute@scheduler 00DC  
         nullifyBadge_segDisplayPutStr@badge 0039                  PWM5_LoadDutyValue@dutyValue 0071  
                       marquee_speedy@string 003A                                  __pbssCOMMON 007C  
                                ?_slot_Setup 002F                    schedulerExecute@tickDelta 00DA  
                                  ___latbits 0003                          __end_of_led_curtain 28E5  
                              __pcstackBANK0 0020                                __pcstackBANK1 00D6  
                      __size_of_locked_clear 0042                             _displayL1_Update 3341  
                         _PWM6_LoadDutyValue 3402                     __size_of_TMR2_Initialize 000A  
                              ??_matrix_Main 0054                                ??_locked_Main 0054  
                           _displayL2_PutStr 35C5                                ??_matrix_Init 003B  
                              ??_locked_Init 007C                       scheduler_TaskInit@task 0071  
                           secret_clear@data 0071                      __end_of_SPI1_Initialize 324B  
                               _isdigit$3635 0071                         _asciiCharTableLookup 26F0  
                      _locked_lock_base_leds 00D2                           _flashy_option_size 00A6  
           matrix_secret_check@buttonPressed 0079             locked_secret_check@buttonPressed 0079  
                    matrix_secret_check@data 0077                      locked_secret_check@data 0077  
                               _curtain_leds 043C                          ?_PWM6_LoadDutyValue 0071  
                    matrix_secret_check@size 0023                      locked_secret_check@size 0023  
           displayL2_SetUserLeds@userLedData 002B                                  sprintf@flag 0040  
                          __size_of_led_rand 0048                                  sprintf@prec 003F  
           matrix_secret_check@currents_size 0025             locked_secret_check@currents_size 0025  
                        __size_of_menu_clear 0047                        _TMR0_InterruptHandler 00BE  
                   __size_of_TMR0_StartTimer 0003                  __size_of_PWM1_LoadDutyValue 0016  
                           ___lwdiv@dividend 0073                       _PIN_MANAGER_Initialize 2C9B  
                                _FLASHY_TEXT 016B                     __size_of_PWM5_Initialize 000C  
                          menu_Main@taskData 0052               __size_of_displayL2_ClrUserLeds 000E  
              __end_of_displayL2_ClrUserLeds 3313                  displayL1_SetUserLed@display 0074  
                                   ?___almod 002B                                    __ptext100 33EC  
                                  __ptext101 33D6                                    __ptext102 33C0  
                                  __ptext104 32EA                                    __ptext105 3283  
                                  __ptext106 2882                            schedulerExecute@k 00DD  
                                   ?___lwdiv 0071                                     ?___lwmod 002B  
                             _marquee_speedy 225F                         ??_PWM6_LoadDutyValue 0073  
                               _locked_clear 2926                            ??_PWM1_Initialize 0071  
               ??_INTERRUPT_InterruptManager 0070                             ___almod@dividend 002F  
                               _matrix_found 00C2                            marquee@multiplier 0044  
                                  __pswtext1 3000                       displayCharReverse@cVal 0071  
              __size_of_nullifyBadge_irTxClr 0003                __size_of_nullifyBadge_irTxSet 0003  
                              ??_secret_Main 0054                                ??_secret_Init 007C  
                        _locked_locking_leds 0220                                     ?_isdigit 0070  
                                   ?_marquee 003A                     __size_of_PWM6_Initialize 000C  
                   __size_of_TMR4_Initialize 000B               ?_nullifyBadge_userLedsRegister 0070  
                displayL2_Initialize@display 002B                      __end_of_menu_run_option 2B5B  
                           ___lwdiv@quotient 0077                              secret_Main@data 0058  
                                  _menu_Main 1B8F                         matrix_secret_check@i 0028  
                       locked_secret_check@i 0028                                    _menu_Init 2E02  
              nullifyBadge_irTxRelease@badge 0072                                    _menu_Exit 0000  
                                   ?_sprintf 002F                          flashy_Main@taskData 0052  
                              _TMR0_CallBack 3283                           displayL2_PutChar@c 002A  
                         displayL2_PutChar@k 002E                                    _menu_task 014F  
    displayL1_SetSegChar@dispDataVectBaseIdx 0026                     ?_slot_Finished_Animation 003D  
                          ??_TMR0_Initialize 0073                            ??_PWM2_Initialize 0071  
                            secret_Init@data 003B                SPI1_Exchange8bitBuffer@dataIn 0077  
                             ___wmul@product 0075                          __end_of_locked_Main 2000  
                        __end_of_matrix_Main 1800                          __end_of_locked_Init 2F92  
                        __end_of_matrix_Init 24E7                                     _LATBbits 010D  
                                   _LATCbits 010E                SPI1_Exchange8bitBuffer@bufLen 0072  
                                  clear_ram0 32D2                                     _PIE0bits 0090  
                   __size_of_TMR2_StartTimer 0003          __size_of_INTERRUPT_InterruptManager 0012  
                 ??_TMR0_SetInterruptHandler 0073              __size_of_locked_get_unlock_leds 0019  
                                   _PIR0bits 0010                                     _PIR1bits 0011  
                                   _PIR2bits 0012                                  _flashy_Main 0819  
                                _flashy_Init 0764                                  _flashy_Exit 0000  
                        __size_of_slot_Setup 0054                   TMR0_Read16bitTimer@readVal 0078  
                 __end_of_locked_unlock_leds 33AC                   scheduler_TaskAdd@scheduler 0046  
            __end_of_SPI1_Exchange8bitBuffer 2BF5                 __end_of_locked_get_lock_leds 3578  
                     __end_of_marquee_speedy 22D2                                  _flashy_task 015C  
                                   _SSP1CON1 0215                                     _TMR0_ISR 32EA  
                                   _SSP1STAT 0214                            slot_Init@taskData 0039  
                __size_of_PWM5_LoadDutyValue 0016                        __size_of_secret_check 00BB  
                                  _slot_Main 00E5                        __size_of_secret_clear 0032  
                                  _slot_Init 2E64                                    _slot_Exit 0000  
                                _led_curtain 28A4              displayL1_SetUserLed@userLedVect 0071  
                            _flashy_TaskData 04BF                                    _slot_task 0142  
          schedulerExecute@currentSystemTick 00D6                            ___wmul@multiplier 0071  
             __size_of_displayL2_ForceUpdate 0006                __end_of_displayL2_ForceUpdate 3237  
                          _Shot_Options_Long 0320                                 ??_led_Parody 0032  
                 ??_nullifyBadge_irTxRelease 0071                    __size_of_locked_lock_leds 001B  
          nullifyBadge_segDisplayErase@badge 0038                     matrix_Main@buttonPressed 0058  
                   locked_Main@buttonPressed 0056                          _TMR0_Read16bitTimer 3498  
                      __end_of_let_alternate 33C0                                 ??_led_circle 007C  
                            led_circle@count 0030                  __size_of_scheduler_TaskInit 0039  
                             ?_TMR0_CallBack 0070                                   ?_menu_Main 0052  
                                 ?_menu_Init 0039                             ?_SPI1_Initialize 0070  
                   _nullifyBadge_userLedsClr 07FA                            ___lmul@multiplier 0071  
                      led_roundabout@counter 0030                     _nullifyBadge_userLedsSet 3352  
                        __end_of_secret_Main 19C2                          __end_of_secret_Init 2DA0  
                                   _Leds_idx 00D0                          _locked_secret_check 100F  
                        _matrix_secret_check 258A                            ??_TMR2_Initialize 0071  
                        _locked_secret_value 0169                     secret_Main@buttonPressed 0057  
                 locked_get_unlock_leds@leds 0073                     __size_of_TMR4_StartTimer 0003  
                               _secret_check 2645                                 _secret_clear 36AE  
                       ?_TMR0_Read16bitTimer 0071                           __end_of_led_Parody 2F2D  
                            marquee_speedy@i 0046                              marquee_speedy@j 004A  
                ??_nullifyBadge_platformInit 007C                     ?_nullifyBadge_buttonsGet 0070  
                               _secret_value 00C5                              _flashy_leds_idx 00B2  
 __end_of_nullifyBadge_segDisplayForceUpdate 323D  __size_of_nullifyBadge_segDisplayForceUpdate 0006  
       ??_nullifyBadge_segDisplayForceUpdate 007C          ?_nullifyBadge_segDisplayForceUpdate 0070  
         _nullifyBadge_segDisplayForceUpdate 3237                              ?_marquee_speedy 003A  
                    ??_OSCILLATOR_Initialize 0071                          marquee_speedy@count 003C  
                          ??_TMR0_StartTimer 0071                             __size_of___almod 006E  
                         __end_of_led_circle 3265                                   ?_slot_Main 0052  
                                 ?_slot_Init 0039                             __size_of___lwdiv 0034  
                           __size_of___lwmod 002D                         ?_matrix_secret_check 0077  
                       ?_locked_secret_check 0077                                 ??_menu_clear 007C  
                          ??_PWM5_Initialize 0071                      __size_of_scheduler_Init 001B  
                                 sprintf@len 0046                                  _currentTask 00BA  
                                 sprintf@val 0044                 __size_of_menu_display_option 0062  
         __size_of_displayL2_EraseSegDisplay 0010                                   _T0CON0bits 0017  
                     _locked_get_unlock_leds 0800                             __size_of_isdigit 000E  
                           __size_of_marquee 0077                              ___lwdiv@divisor 0071  
                            ___lwdiv@counter 0076                                 _Shot_Options 01D1  
                        displayCharReverse@k 007B           __size_of_nullifyBadge_irTxRegister 000F  
                                   __ptext10 324B                                     __ptext11 347D  
                                   __ptext20 29AB                                     __ptext12 23C3  
                                   __ptext21 359E                                     __ptext13 2883  
                                   __ptext30 3399                                     __ptext22 36AE  
                                   __ptext14 10CB                                     __ptext31 100F  
                                   __ptext23 2645                                     __ptext15 1805  
                                   __ptext40 3331                                     __ptext32 3363  
                                   __ptext24 2B11                                     __ptext16 1D86  
                                   __ptext41 19C2                                     __ptext33 3462  
                                   __ptext25 29F1                                     __ptext17 1B8F  
                                   __ptext50 33AC                                     __ptext42 32F7  
                                   __ptext34 0800                                     __ptext26 2DA0  
                                   __ptext18 0819                                     __ptext51 28E5  
                                   __ptext43 3447                                     __ptext35 3553  
                                   __ptext27 258A                                     __ptext19 00E5  
                                   __ptext60 34F1                                     __ptext52 2A38  
                                   __ptext44 3224                                     __ptext36 2926  
                                   __ptext28 24E7                                     __ptext61 3374  
                                   __ptext53 2968                                     __ptext45 32AF  
                                   __ptext37 07FA                                     __ptext29 2C47  
                                   __ptext70 361C                                     __ptext62 2200  
                                   __ptext54 367C                                     __ptext46 3313  
                                   __ptext38 3305                                     __ptext71 3237  
                                   __ptext63 225F                                     __ptext55 2F92  
                                   __ptext47 3221                                     __ptext39 323D  
                                   __ptext80 3341                                     __ptext72 3231  
                                   __ptext64 22D2                                     __ptext56 28A4  
                                   __ptext48 1800                                     __ptext81 2BA7  
                                   __ptext73 35EF                                     __ptext65 34D3  
                                   __ptext57 325C                                     __ptext49 364B  
                                   __ptext90 3218                                     __ptext82 3253  
                                   __ptext74 36E0                                     __ptext66 3279  
                                   __ptext58 2EC8                                     __ptext91 322B  
                                   __ptext83 350F                                     __ptext75 3498  
                                   __ptext67 35C5                                     __ptext59 3352  
                                   __ptext92 3243                                     __ptext84 3227  
                                   __ptext76 2CF0                                     __ptext68 2BF5  
                                   __ptext93 32C6                                     __ptext85 32A4  
                                   __ptext77 3578                                     __ptext69 37BF  
                                   __ptext94 32BA                                     __ptext86 321E  
                                   __ptext78 3386                                     __ptext95 3299  
                                   __ptext87 326F                                     __ptext79 342F  
                                   __ptext96 328E                                     __ptext88 321B  
                                   __ptext97 2C9B                                     __ptext89 34B5  
                                   __ptext98 3265                                     __ptext99 3402  
                                _matrix_Main 10CB                                  _locked_Main 1D86  
                                _matrix_Init 2447                                  _locked_Init 2F2D  
                         slot_Setup@taskData 002F                                  _matrix_Exit 0000  
                                _locked_Exit 0000                                 _SSP1CON1bits 0215  
                           ?_menu_run_option 003B                                  _locked_leds 00A2  
                                _matrix_task 01C4                                  _locked_task 0135  
                            ___almod@divisor 002B                                     _led_rand 2A38  
                           __size_of_sprintf 01CD                              ___almod@counter 007A  
             slot_Running_Animation@taskData 0032                                  _menu_option 022C  
    __end_of_nullifyBadge_segDisplayRegister 3253     __size_of_nullifyBadge_segDisplayRegister 0008  
          ??_nullifyBadge_segDisplayRegister 0071             ?_nullifyBadge_segDisplayRegister 0070  
            _nullifyBadge_segDisplayRegister 324B                         marquee@string_length 0048  
                              menu_Main@data 0057                            ??_TMR4_Initialize 0071  
                          ??_PWM6_Initialize 0071                                __size_of_main 0103  
                              __size_of_rand 0043         __end_of_TMR0_DefaultInterruptHandler 2883  
      __size_of_TMR0_DefaultInterruptHandler 0001                 _TMR0_DefaultInterruptHandler 2882  
                         __end_of_menu_clear 2A38                            displayL2_PutStr@k 0036  
                      ??_TMR0_Read16bitTimer 0073                                   _RC0PPSbits 0EA0  
                              marquee@F14099 01E3                                   _RC1PPSbits 0EA1  
                              menu_Init@data 003B                     __end_of_displayL1_Update 3352  
                         let_alternate@count 0030                                   _RC2PPSbits 0EA2  
             __size_of_flashy_display_option 005F                     __end_of_displayL2_PutStr 35EF  
              __end_of_flashy_display_option 225F                                   _RC3PPSbits 0EA3  
               __end_of_displayL1_Initialize 3399                         _curtain_leds_inverse 0420  
                                   _pw_found 00C3                                   _RC4PPSbits 0EA4  
                                 _RB6PPSbits 0E9E                                     int$flags 007E  
               displayL2_ForceUpdate@display 007B                              matrix_Main@data 005A  
                            locked_Main@data 0057                            ??_TMR2_StartTimer 0071  
         __end_of_INTERRUPT_InterruptManager 0016                   _INTERRUPT_InterruptManager 0004  
                      ??_matrix_secret_check 0020                        ??_locked_secret_check 0020  
                               _SSP1STATbits 0214         nullifyBadge_segDisplayRegister@badge 0071  
                PIN_MANAGER_Initialize@state 0071           schedulerExecute@taskLastSystemTick 00D8  
                         _displayCharReverse 361C                            menu_Init@taskData 0039  
                  __size_of_schedulerExecute 0084               __size_of_displayL2_SetUserLeds 001E  
                            matrix_Init@data 003D                              locked_Init@data 003B  
              __end_of_displayL2_SetUserLeds 350F                displayCharReverse@retValLower 0078  
              displayCharReverse@retValUpper 0079                                   _INTCONbits 000B  
                                _secret_Main 1805                      __size_of_led_roundabout 0041  
                                _secret_Init 2D45                                 ??_slot_Setup 0031  
                                _secret_Exit 0000                              ??_TMR0_CallBack 0070  
                                _NVMCON1bits 0895                    _nullifyBadge_platformInit 2CF0  
               __end_of_displayL1_SetSegChar 3800                                  _secret_task 0128  
                             __pstringtext10 3919                               __pstringtext11 3937  
                             __pstringtext20 3A1F                               __pstringtext12 3954  
                             __pstringtext21 3A32                               __pstringtext13 3971  
                             __pstringtext30 3ABF                               __pstringtext22 3A45  
                             __pstringtext14 398D                               __pstringtext31 3ACB  
                             __pstringtext23 3A57                               __pstringtext15 39A8  
                             __pstringtext40 3B25                               __pstringtext32 3AD7  
                             __pstringtext24 3A68                               __pstringtext16 39C3  
                             __pstringtext41 3B2E                               __pstringtext33 3AE2  
                             __pstringtext25 3A79                               __pstringtext17 39DD  
                             __pstringtext50 3B75                               __pstringtext42 3B36  
                             __pstringtext34 3AED                               __pstringtext26 3A89  
                             __pstringtext18 39F4                               __pstringtext51 3B7C  
                             __pstringtext43 3B3E                               __pstringtext35 3AF7  
                             __pstringtext27 3A98                               __pstringtext19 3A0A  
                             __pstringtext60 3BB3                               __pstringtext52 3B83  
                             __pstringtext44 3B46                               __pstringtext36 3B01  
                             __pstringtext28 3AA5                               __pstringtext61 3BB8  
                             __pstringtext53 3B8A                               __pstringtext45 3B4E  
                             __pstringtext37 3B0A                               __pstringtext29 3AB2  
                             __pstringtext70 3BE5                               __pstringtext62 3BBD  
                             __pstringtext54 3B91                               __pstringtext46 3B56  
                             __pstringtext38 3B13                               __pstringtext71 3BEA  
                             __pstringtext63 3BC2                               __pstringtext55 3B97  
                             __pstringtext47 3B5E                               __pstringtext39 3B1C  
                             __pstringtext72 3BEF                               __pstringtext64 3BC7  
                             __pstringtext56 3B9D                               __pstringtext48 3B66  
                             __pstringtext73 3BF4                               __pstringtext65 3BCC  
                             __pstringtext57 3BA3                               __pstringtext49 3B6E  
                             __pstringtext74 3BF9                               __pstringtext66 3BD1  
                             __pstringtext58 3BA9                               __pstringtext75 3BFE  
                             __pstringtext67 3BD6                               __pstringtext59 3BAE  
                             __pstringtext76 3C02                               __pstringtext68 3BDB  
                             __pstringtext77 0000                               __pstringtext69 3BE0  
          __end_of_displayL2_EraseSegDisplay 3341                                     isdigit@c 0072  
                                   marquee@i 0046                                     marquee@j 004A  
                                   memset@p1 0071                 __end_of_displayL2_Initialize 359E  
                        ?_displayCharReverse 0071                                  ??_menu_Main 0054  
                                ??_menu_Init 007C                      __size_of_WDT_Initialize 0004  
                       _locked_get_lock_leds 3553            __end_of_nullifyBadge_irTxRegister 3322  
           __size_of_SPI1_Exchange8bitBuffer 004E                 __end_of_displayL1_SetUserLed 3386  
                                   intlevel1 0000                                    sprintf@ap 0043  
                                  sprintf@cp 0041                                    sprintf@sp 002F  
                           ___lwmod@dividend 002D                      ?_PIN_MANAGER_Initialize 0070  
                              marquee@string 003A                  __size_of_nullifyBadge_irGet 0005  
                          __CFG_CLKOUTEN$OFF 0000                        _matrix_display_option 24E7  
        SPI1_Exchange8bitBuffer@bytesWritten 0078                                  _PPSLOCKbits 0E0F  
                            _PWM1_Initialize 328E                          flashy_Init@taskData 0039  
                             menu_clear@data 0039                ?_TMR0_DefaultInterruptHandler 0070  
                __size_of_PWM2_LoadDutyValue 0016                         ??_displayCharReverse 0073  
                         __end_of_slot_Setup 2C9B                            ??_TMR4_StartTimer 0071  
                                ??_slot_Main 0054                                  ??_slot_Init 007C  
                              __pstringtext1 2000                                __pstringtext2 2800  
                              __pstringtext3 3800                                __pstringtext4 382F  
                              __pstringtext5 385D                                __pstringtext6 3888  
                              __pstringtext7 38B0                                __pstringtext8 38D4  
                              __pstringtext9 38F7             __end_of_nullifyBadge_irTxRelease 32BA  
                                   sprintf@c 004A                                     sprintf@f 0031  
                              _flashy_option 0520                             _locked_lock_leds 3462  
                            ___lwmod@divisor 002B                              _TMR0_Initialize 34B5  
                            _PWM2_Initialize 3299                                     strlen@cp 0075  
                              _slot_TaskData 05A0                              ___lwmod@counter 007A  
                PWM6_LoadDutyValue@dutyValue 0071                        ?_locked_get_lock_leds 0071  
             __end_of_PIN_MANAGER_Initialize 2CF0                           _matrix_option_size 0120  
                           locked_clear@data 0039                                 ___almod@sign 007B  
                                _PWMTMRSbits 061F                 __end_of_nullifyBadge_irTxClr 3224  
               __end_of_nullifyBadge_irTxSet 3227                   __end_of_PWM1_LoadDutyValue 33D6  
                          _matrix_option_idx 0122                        _TMR2_InterruptHandler 0126  
                               ?_flashy_Main 0052                                 ?_flashy_Init 0039  
