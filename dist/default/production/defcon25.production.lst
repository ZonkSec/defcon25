

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Jul 25 07:17:45 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16LF18346
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBIGRAM,global,class=CODE,delta=2
    13                           	psect	stringtext1,global,class=STRCODE,delta=2
    14                           	psect	stringtext2,global,class=STRCODE,delta=2
    15                           	psect	stringtext3,global,class=STRCODE,delta=2
    16                           	psect	stringtext4,global,class=STRCODE,delta=2
    17                           	psect	stringtext5,global,class=STRCODE,delta=2
    18                           	psect	stringtext6,global,class=STRCODE,delta=2
    19                           	psect	stringtext7,global,class=STRCODE,delta=2
    20                           	psect	stringtext8,global,class=STRCODE,delta=2
    21                           	psect	stringtext9,global,class=STRCODE,delta=2
    22                           	psect	stringtext10,global,class=STRCODE,delta=2
    23                           	psect	stringtext11,global,class=STRCODE,delta=2
    24                           	psect	stringtext12,global,class=STRCODE,delta=2
    25                           	psect	stringtext13,global,class=STRCODE,delta=2
    26                           	psect	stringtext14,global,class=STRCODE,delta=2
    27                           	psect	stringtext15,global,class=STRCODE,delta=2
    28                           	psect	stringtext16,global,class=STRCODE,delta=2
    29                           	psect	stringtext17,global,class=STRCODE,delta=2
    30                           	psect	stringtext18,global,class=STRCODE,delta=2
    31                           	psect	stringtext19,global,class=STRCODE,delta=2
    32                           	psect	stringtext20,global,class=STRCODE,delta=2
    33                           	psect	stringtext21,global,class=STRCODE,delta=2
    34                           	psect	stringtext22,global,class=STRCODE,delta=2
    35                           	psect	stringtext23,global,class=STRCODE,delta=2
    36                           	psect	stringtext24,global,class=STRCODE,delta=2
    37                           	psect	stringtext25,global,class=STRCODE,delta=2
    38                           	psect	stringtext26,global,class=STRCODE,delta=2
    39                           	psect	stringtext27,global,class=STRCODE,delta=2
    40                           	psect	stringtext28,global,class=STRCODE,delta=2
    41                           	psect	stringtext29,global,class=STRCODE,delta=2
    42                           	psect	stringtext30,global,class=STRCODE,delta=2
    43                           	psect	stringtext31,global,class=STRCODE,delta=2
    44                           	psect	stringtext32,global,class=STRCODE,delta=2
    45                           	psect	stringtext33,global,class=STRCODE,delta=2
    46                           	psect	stringtext34,global,class=STRCODE,delta=2
    47                           	psect	stringtext35,global,class=STRCODE,delta=2
    48                           	psect	stringtext36,global,class=STRCODE,delta=2
    49                           	psect	stringtext37,global,class=STRCODE,delta=2
    50                           	psect	stringtext38,global,class=STRCODE,delta=2
    51                           	psect	stringtext39,global,class=STRCODE,delta=2
    52                           	psect	stringtext40,global,class=STRCODE,delta=2
    53                           	psect	stringtext41,global,class=STRCODE,delta=2
    54                           	psect	stringtext42,global,class=STRCODE,delta=2
    55                           	psect	stringtext43,global,class=STRCODE,delta=2
    56                           	psect	stringtext44,global,class=STRCODE,delta=2
    57                           	psect	stringtext45,global,class=STRCODE,delta=2
    58                           	psect	stringtext46,global,class=STRCODE,delta=2
    59                           	psect	stringtext47,global,class=STRCODE,delta=2
    60                           	psect	stringtext48,global,class=STRCODE,delta=2
    61                           	psect	stringtext49,global,class=STRCODE,delta=2
    62                           	psect	cinit,global,class=CODE,merge=1,delta=2
    63                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    64                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    65                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    66                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    67                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    68                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    69                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    70                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    71                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    72                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    73                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    74                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    75                           	psect	bssBANK8,global,class=BANK8,space=1,delta=1
    76                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    77                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    78                           	psect	inittext,global,class=CODE,delta=2
    79                           	psect	clrtext,global,class=CODE,delta=2
    80                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    81                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    82                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    83                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    84                           	psect	text1,local,class=CODE,merge=1,delta=2
    85                           	psect	text2,local,class=CODE,merge=1,delta=2
    86                           	psect	text3,local,class=CODE,merge=1,delta=2
    87                           	psect	text4,local,class=CODE,merge=1,delta=2
    88                           	psect	text5,local,class=CODE,merge=1,delta=2
    89                           	psect	text6,local,class=CODE,merge=1,delta=2
    90                           	psect	text7,local,class=CODE,merge=1,delta=2
    91                           	psect	text8,local,class=CODE,merge=1,delta=2
    92                           	psect	text9,local,class=CODE,merge=1,delta=2
    93                           	psect	text10,local,class=CODE,merge=1,delta=2
    94                           	psect	text11,local,class=CODE,merge=1,delta=2
    95                           	psect	text12,local,class=CODE,merge=1,delta=2
    96                           	psect	text13,local,class=CODE,merge=1,delta=2
    97                           	psect	text14,local,class=CODE,merge=1,delta=2
    98                           	psect	text15,local,class=CODE,merge=1,delta=2
    99                           	psect	text16,local,class=CODE,merge=1,delta=2
   100                           	psect	swtext1,local,class=CONST,delta=2
   101                           	psect	text17,local,class=CODE,merge=1,delta=2
   102                           	psect	text18,local,class=CODE,merge=1,delta=2
   103                           	psect	text19,local,class=CODE,merge=1,delta=2
   104                           	psect	text20,local,class=CODE,merge=1,delta=2
   105                           	psect	text21,local,class=CODE,merge=1,delta=2
   106                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
   107                           	psect	text23,local,class=CODE,merge=1,delta=2
   108                           	psect	text24,local,class=CODE,merge=1,delta=2
   109                           	psect	text25,local,class=CODE,merge=1,delta=2
   110                           	psect	text26,local,class=CODE,merge=1,delta=2
   111                           	psect	text27,local,class=CODE,merge=1,delta=2
   112                           	psect	text28,local,class=CODE,merge=1,delta=2
   113                           	psect	text29,local,class=CODE,merge=1,delta=2
   114                           	psect	text30,local,class=CODE,merge=1,delta=2
   115                           	psect	text31,local,class=CODE,merge=1,delta=2
   116                           	psect	text32,local,class=CODE,merge=1,delta=2
   117                           	psect	text33,local,class=CODE,merge=1,delta=2
   118                           	psect	text34,local,class=CODE,merge=1,delta=2
   119                           	psect	text35,local,class=CODE,merge=1,delta=2
   120                           	psect	text36,local,class=CODE,merge=1,delta=2
   121                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
   122                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
   123                           	psect	text39,local,class=CODE,merge=1,delta=2
   124                           	psect	text40,local,class=CODE,merge=1,delta=2
   125                           	psect	text41,local,class=CODE,merge=1,delta=2
   126                           	psect	text42,local,class=CODE,merge=1,delta=2
   127                           	psect	text43,local,class=CODE,merge=1,delta=2
   128                           	psect	text44,local,class=CODE,merge=1,delta=2
   129                           	psect	text45,local,class=CODE,merge=1,delta=2
   130                           	psect	text46,local,class=CODE,merge=1,delta=2
   131                           	psect	text47,local,class=CODE,merge=1,delta=2
   132                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
   133                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
   134                           	psect	text50,local,class=CODE,merge=1,delta=2,group=2
   135                           	psect	text51,local,class=CODE,merge=1,delta=2
   136                           	psect	text52,local,class=CODE,merge=1,delta=2
   137                           	psect	text53,local,class=CODE,merge=1,delta=2
   138                           	psect	text54,local,class=CODE,merge=1,delta=2
   139                           	psect	text55,local,class=CODE,merge=1,delta=2
   140                           	psect	text56,local,class=CODE,merge=1,delta=2
   141                           	psect	text57,local,class=CODE,merge=1,delta=2
   142                           	psect	text58,local,class=CODE,merge=1,delta=2
   143                           	psect	text59,local,class=CODE,merge=1,delta=2
   144                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
   145                           	psect	text61,local,class=CODE,merge=1,delta=2
   146                           	psect	text62,local,class=CODE,merge=1,delta=2
   147                           	psect	text63,local,class=CODE,merge=1,delta=2
   148                           	psect	text64,local,class=CODE,merge=1,delta=2
   149                           	psect	text65,local,class=CODE,merge=1,delta=2
   150                           	psect	text66,local,class=CODE,merge=1,delta=2
   151                           	psect	text67,local,class=CODE,merge=1,delta=2
   152                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
   153                           	psect	text69,local,class=CODE,merge=1,delta=2,group=2
   154                           	psect	text70,local,class=CODE,merge=1,delta=2
   155                           	psect	text71,local,class=CODE,merge=1,delta=2
   156                           	psect	text72,local,class=CODE,merge=1,delta=2
   157                           	psect	text73,local,class=CODE,merge=1,delta=2
   158                           	psect	text74,local,class=CODE,merge=1,delta=2,group=2
   159                           	psect	text75,local,class=CODE,merge=1,delta=2
   160                           	psect	text76,local,class=CODE,merge=1,delta=2
   161                           	psect	text77,local,class=CODE,merge=1,delta=2
   162                           	psect	text78,local,class=CODE,merge=1,delta=2
   163                           	psect	text79,local,class=CODE,merge=1,delta=2
   164                           	psect	text80,local,class=CODE,merge=1,delta=2
   165                           	psect	text81,local,class=CODE,merge=1,delta=2
   166                           	psect	text82,local,class=CODE,merge=1,delta=2
   167                           	psect	text83,local,class=CODE,merge=1,delta=2
   168                           	psect	text84,local,class=CODE,merge=1,delta=2
   169                           	psect	text85,local,class=CODE,merge=1,delta=2
   170                           	psect	text86,local,class=CODE,merge=1,delta=2
   171                           	psect	text87,local,class=CODE,merge=1,delta=2
   172                           	psect	text88,local,class=CODE,merge=1,delta=2
   173                           	psect	text89,local,class=CODE,merge=1,delta=2
   174                           	psect	text90,local,class=CODE,merge=1,delta=2
   175                           	psect	text91,local,class=CODE,merge=1,delta=2
   176                           	psect	text92,local,class=CODE,merge=1,delta=2
   177                           	psect	text93,local,class=CODE,merge=1,delta=2
   178                           	psect	text94,local,class=CODE,merge=1,delta=2
   179                           	psect	text95,local,class=CODE,merge=1,delta=2
   180                           	psect	text96,local,class=CODE,merge=1,delta=2
   181                           	psect	text97,local,class=CODE,merge=1,delta=2
   182                           	psect	intentry,global,class=CODE,delta=2
   183                           	psect	text99,local,class=CODE,merge=1,delta=2
   184                           	psect	text100,local,class=CODE,merge=1,delta=2
   185                           	psect	text101,local,class=CODE,merge=1,delta=2
   186                           	dabs	1,0xCA0,32
   187                           	dabs	1,0xC20,80
   188                           	dabs	1,0xBA0,80
   189                           	dabs	1,0xB30,64
   190                           	dabs	1,0x26F0,0,_asciiCharTableLookup
   191                           	dabs	1,0x7E,2
   192  0000                     
   193                           ; Version 1.42
   194                           ; Generated 13/04/2017 GMT
   195                           ; 
   196                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   197                           ; All rights reserved.
   198                           ; 
   199                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   200                           ; 
   201                           ; Redistribution and use in source and binary forms, with or without modification, are
   202                           ; permitted provided that the following conditions are met:
   203                           ; 
   204                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   205                           ;        conditions and the following disclaimer.
   206                           ; 
   207                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   208                           ;        of conditions and the following disclaimer in the documentation and/or other
   209                           ;        materials provided with the distribution.
   210                           ; 
   211                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   212                           ;        software without specific prior written permission.
   213                           ; 
   214                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   215                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   216                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   217                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   218                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   219                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   220                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   221                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   222                           ; 
   223                           ; 
   224                           ; Code-generator required, PIC16LF18346 Definitions
   225                           ; 
   226                           ; SFR Addresses
   227  0000                     	;# 
   228  0001                     	;# 
   229  0002                     	;# 
   230  0003                     	;# 
   231  0004                     	;# 
   232  0005                     	;# 
   233  0006                     	;# 
   234  0007                     	;# 
   235  0008                     	;# 
   236  0009                     	;# 
   237  000A                     	;# 
   238  000B                     	;# 
   239  000C                     	;# 
   240  000D                     	;# 
   241  000E                     	;# 
   242  0010                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0015                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  0019                     	;# 
   255  001A                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001D                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  0090                     	;# 
   265  0091                     	;# 
   266  0092                     	;# 
   267  0093                     	;# 
   268  0094                     	;# 
   269  0097                     	;# 
   270  009B                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  0111                     	;# 
   280  0112                     	;# 
   281  0113                     	;# 
   282  0114                     	;# 
   283  0115                     	;# 
   284  0116                     	;# 
   285  0117                     	;# 
   286  0118                     	;# 
   287  0119                     	;# 
   288  018C                     	;# 
   289  018D                     	;# 
   290  018E                     	;# 
   291  0199                     	;# 
   292  0199                     	;# 
   293  0199                     	;# 
   294  019A                     	;# 
   295  019A                     	;# 
   296  019A                     	;# 
   297  019B                     	;# 
   298  019B                     	;# 
   299  019B                     	;# 
   300  019B                     	;# 
   301  019B                     	;# 
   302  019C                     	;# 
   303  019C                     	;# 
   304  019C                     	;# 
   305  019D                     	;# 
   306  019D                     	;# 
   307  019D                     	;# 
   308  019E                     	;# 
   309  019E                     	;# 
   310  019E                     	;# 
   311  019F                     	;# 
   312  019F                     	;# 
   313  019F                     	;# 
   314  019F                     	;# 
   315  019F                     	;# 
   316  020C                     	;# 
   317  020D                     	;# 
   318  020E                     	;# 
   319  0211                     	;# 
   320  0211                     	;# 
   321  0212                     	;# 
   322  0212                     	;# 
   323  0213                     	;# 
   324  0213                     	;# 
   325  0214                     	;# 
   326  0214                     	;# 
   327  0215                     	;# 
   328  0215                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0216                     	;# 
   332  0216                     	;# 
   333  0217                     	;# 
   334  0217                     	;# 
   335  0219                     	;# 
   336  021A                     	;# 
   337  021B                     	;# 
   338  021C                     	;# 
   339  021D                     	;# 
   340  021D                     	;# 
   341  021E                     	;# 
   342  021F                     	;# 
   343  028C                     	;# 
   344  028D                     	;# 
   345  028E                     	;# 
   346  0291                     	;# 
   347  0291                     	;# 
   348  0292                     	;# 
   349  0293                     	;# 
   350  0294                     	;# 
   351  0295                     	;# 
   352  0295                     	;# 
   353  0296                     	;# 
   354  0297                     	;# 
   355  0298                     	;# 
   356  029F                     	;# 
   357  030C                     	;# 
   358  030D                     	;# 
   359  030E                     	;# 
   360  0311                     	;# 
   361  0311                     	;# 
   362  0312                     	;# 
   363  0313                     	;# 
   364  0314                     	;# 
   365  0315                     	;# 
   366  0315                     	;# 
   367  0316                     	;# 
   368  0317                     	;# 
   369  0318                     	;# 
   370  038C                     	;# 
   371  038D                     	;# 
   372  038E                     	;# 
   373  0391                     	;# 
   374  0392                     	;# 
   375  0393                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0397                     	;# 
   380  0398                     	;# 
   381  0399                     	;# 
   382  039A                     	;# 
   383  039C                     	;# 
   384  039D                     	;# 
   385  039E                     	;# 
   386  039F                     	;# 
   387  0411                     	;# 
   388  0411                     	;# 
   389  0412                     	;# 
   390  0413                     	;# 
   391  0414                     	;# 
   392  0415                     	;# 
   393  0416                     	;# 
   394  0417                     	;# 
   395  0418                     	;# 
   396  0418                     	;# 
   397  0419                     	;# 
   398  041A                     	;# 
   399  041B                     	;# 
   400  041C                     	;# 
   401  041D                     	;# 
   402  041E                     	;# 
   403  041F                     	;# 
   404  0498                     	;# 
   405  0498                     	;# 
   406  0499                     	;# 
   407  049A                     	;# 
   408  049B                     	;# 
   409  049B                     	;# 
   410  049C                     	;# 
   411  049D                     	;# 
   412  049E                     	;# 
   413  049F                     	;# 
   414  0617                     	;# 
   415  0618                     	;# 
   416  0619                     	;# 
   417  0619                     	;# 
   418  061A                     	;# 
   419  061B                     	;# 
   420  061C                     	;# 
   421  061C                     	;# 
   422  061F                     	;# 
   423  0691                     	;# 
   424  0692                     	;# 
   425  0693                     	;# 
   426  0694                     	;# 
   427  0695                     	;# 
   428  0696                     	;# 
   429  0697                     	;# 
   430  0698                     	;# 
   431  0699                     	;# 
   432  0711                     	;# 
   433  0712                     	;# 
   434  0713                     	;# 
   435  0714                     	;# 
   436  0715                     	;# 
   437  0716                     	;# 
   438  0717                     	;# 
   439  0718                     	;# 
   440  0719                     	;# 
   441  0891                     	;# 
   442  0891                     	;# 
   443  0891                     	;# 
   444  0891                     	;# 
   445  0891                     	;# 
   446  0891                     	;# 
   447  0892                     	;# 
   448  0892                     	;# 
   449  0892                     	;# 
   450  0893                     	;# 
   451  0893                     	;# 
   452  0893                     	;# 
   453  0893                     	;# 
   454  0893                     	;# 
   455  0893                     	;# 
   456  0894                     	;# 
   457  0894                     	;# 
   458  0894                     	;# 
   459  0895                     	;# 
   460  0895                     	;# 
   461  0895                     	;# 
   462  0896                     	;# 
   463  0896                     	;# 
   464  0896                     	;# 
   465  089B                     	;# 
   466  0911                     	;# 
   467  0912                     	;# 
   468  0913                     	;# 
   469  0914                     	;# 
   470  0915                     	;# 
   471  0916                     	;# 
   472  0918                     	;# 
   473  0919                     	;# 
   474  091A                     	;# 
   475  091B                     	;# 
   476  091C                     	;# 
   477  091D                     	;# 
   478  091E                     	;# 
   479  091F                     	;# 
   480  0E0F                     	;# 
   481  0E10                     	;# 
   482  0E11                     	;# 
   483  0E12                     	;# 
   484  0E13                     	;# 
   485  0E14                     	;# 
   486  0E15                     	;# 
   487  0E16                     	;# 
   488  0E17                     	;# 
   489  0E18                     	;# 
   490  0E19                     	;# 
   491  0E1A                     	;# 
   492  0E1B                     	;# 
   493  0E1C                     	;# 
   494  0E1D                     	;# 
   495  0E1E                     	;# 
   496  0E1F                     	;# 
   497  0E20                     	;# 
   498  0E21                     	;# 
   499  0E22                     	;# 
   500  0E24                     	;# 
   501  0E25                     	;# 
   502  0E28                     	;# 
   503  0E29                     	;# 
   504  0E2A                     	;# 
   505  0E2B                     	;# 
   506  0E2C                     	;# 
   507  0E2D                     	;# 
   508  0E2E                     	;# 
   509  0E2F                     	;# 
   510  0E90                     	;# 
   511  0E91                     	;# 
   512  0E92                     	;# 
   513  0E94                     	;# 
   514  0E95                     	;# 
   515  0E9C                     	;# 
   516  0E9D                     	;# 
   517  0E9E                     	;# 
   518  0E9F                     	;# 
   519  0EA0                     	;# 
   520  0EA1                     	;# 
   521  0EA2                     	;# 
   522  0EA3                     	;# 
   523  0EA4                     	;# 
   524  0EA5                     	;# 
   525  0EA6                     	;# 
   526  0EA7                     	;# 
   527  0F0F                     	;# 
   528  0F10                     	;# 
   529  0F11                     	;# 
   530  0F12                     	;# 
   531  0F13                     	;# 
   532  0F14                     	;# 
   533  0F15                     	;# 
   534  0F16                     	;# 
   535  0F17                     	;# 
   536  0F18                     	;# 
   537  0F19                     	;# 
   538  0F1A                     	;# 
   539  0F1B                     	;# 
   540  0F1C                     	;# 
   541  0F1D                     	;# 
   542  0F1E                     	;# 
   543  0F1F                     	;# 
   544  0F20                     	;# 
   545  0F21                     	;# 
   546  0F22                     	;# 
   547  0F23                     	;# 
   548  0F24                     	;# 
   549  0F25                     	;# 
   550  0F26                     	;# 
   551  0F27                     	;# 
   552  0F28                     	;# 
   553  0F29                     	;# 
   554  0F2A                     	;# 
   555  0F2B                     	;# 
   556  0F2C                     	;# 
   557  0F2D                     	;# 
   558  0F2E                     	;# 
   559  0F2F                     	;# 
   560  0F30                     	;# 
   561  0F31                     	;# 
   562  0F32                     	;# 
   563  0F33                     	;# 
   564  0F34                     	;# 
   565  0F35                     	;# 
   566  0F36                     	;# 
   567  0F37                     	;# 
   568  0FE4                     	;# 
   569  0FE5                     	;# 
   570  0FE6                     	;# 
   571  0FE7                     	;# 
   572  0FE8                     	;# 
   573  0FE9                     	;# 
   574  0FEA                     	;# 
   575  0FEB                     	;# 
   576  0FED                     	;# 
   577  0FEE                     	;# 
   578  0FEF                     	;# 
   579  0000                     	;# 
   580  0001                     	;# 
   581  0002                     	;# 
   582  0003                     	;# 
   583  0004                     	;# 
   584  0005                     	;# 
   585  0006                     	;# 
   586  0007                     	;# 
   587  0008                     	;# 
   588  0009                     	;# 
   589  000A                     	;# 
   590  000B                     	;# 
   591  000C                     	;# 
   592  000D                     	;# 
   593  000E                     	;# 
   594  0010                     	;# 
   595  0011                     	;# 
   596  0012                     	;# 
   597  0013                     	;# 
   598  0014                     	;# 
   599  0015                     	;# 
   600  0015                     	;# 
   601  0016                     	;# 
   602  0016                     	;# 
   603  0017                     	;# 
   604  0018                     	;# 
   605  0019                     	;# 
   606  0019                     	;# 
   607  001A                     	;# 
   608  001B                     	;# 
   609  001C                     	;# 
   610  001D                     	;# 
   611  001E                     	;# 
   612  001F                     	;# 
   613  008C                     	;# 
   614  008D                     	;# 
   615  008E                     	;# 
   616  0090                     	;# 
   617  0091                     	;# 
   618  0092                     	;# 
   619  0093                     	;# 
   620  0094                     	;# 
   621  0097                     	;# 
   622  009B                     	;# 
   623  009B                     	;# 
   624  009C                     	;# 
   625  009D                     	;# 
   626  009E                     	;# 
   627  009F                     	;# 
   628  010C                     	;# 
   629  010D                     	;# 
   630  010E                     	;# 
   631  0111                     	;# 
   632  0112                     	;# 
   633  0113                     	;# 
   634  0114                     	;# 
   635  0115                     	;# 
   636  0116                     	;# 
   637  0117                     	;# 
   638  0118                     	;# 
   639  0119                     	;# 
   640  018C                     	;# 
   641  018D                     	;# 
   642  018E                     	;# 
   643  0199                     	;# 
   644  0199                     	;# 
   645  0199                     	;# 
   646  019A                     	;# 
   647  019A                     	;# 
   648  019A                     	;# 
   649  019B                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019B                     	;# 
   653  019B                     	;# 
   654  019C                     	;# 
   655  019C                     	;# 
   656  019C                     	;# 
   657  019D                     	;# 
   658  019D                     	;# 
   659  019D                     	;# 
   660  019E                     	;# 
   661  019E                     	;# 
   662  019E                     	;# 
   663  019F                     	;# 
   664  019F                     	;# 
   665  019F                     	;# 
   666  019F                     	;# 
   667  019F                     	;# 
   668  020C                     	;# 
   669  020D                     	;# 
   670  020E                     	;# 
   671  0211                     	;# 
   672  0211                     	;# 
   673  0212                     	;# 
   674  0212                     	;# 
   675  0213                     	;# 
   676  0213                     	;# 
   677  0214                     	;# 
   678  0214                     	;# 
   679  0215                     	;# 
   680  0215                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0216                     	;# 
   684  0216                     	;# 
   685  0217                     	;# 
   686  0217                     	;# 
   687  0219                     	;# 
   688  021A                     	;# 
   689  021B                     	;# 
   690  021C                     	;# 
   691  021D                     	;# 
   692  021D                     	;# 
   693  021E                     	;# 
   694  021F                     	;# 
   695  028C                     	;# 
   696  028D                     	;# 
   697  028E                     	;# 
   698  0291                     	;# 
   699  0291                     	;# 
   700  0292                     	;# 
   701  0293                     	;# 
   702  0294                     	;# 
   703  0295                     	;# 
   704  0295                     	;# 
   705  0296                     	;# 
   706  0297                     	;# 
   707  0298                     	;# 
   708  029F                     	;# 
   709  030C                     	;# 
   710  030D                     	;# 
   711  030E                     	;# 
   712  0311                     	;# 
   713  0311                     	;# 
   714  0312                     	;# 
   715  0313                     	;# 
   716  0314                     	;# 
   717  0315                     	;# 
   718  0315                     	;# 
   719  0316                     	;# 
   720  0317                     	;# 
   721  0318                     	;# 
   722  038C                     	;# 
   723  038D                     	;# 
   724  038E                     	;# 
   725  0391                     	;# 
   726  0392                     	;# 
   727  0393                     	;# 
   728  0394                     	;# 
   729  0395                     	;# 
   730  0396                     	;# 
   731  0397                     	;# 
   732  0398                     	;# 
   733  0399                     	;# 
   734  039A                     	;# 
   735  039C                     	;# 
   736  039D                     	;# 
   737  039E                     	;# 
   738  039F                     	;# 
   739  0411                     	;# 
   740  0411                     	;# 
   741  0412                     	;# 
   742  0413                     	;# 
   743  0414                     	;# 
   744  0415                     	;# 
   745  0416                     	;# 
   746  0417                     	;# 
   747  0418                     	;# 
   748  0418                     	;# 
   749  0419                     	;# 
   750  041A                     	;# 
   751  041B                     	;# 
   752  041C                     	;# 
   753  041D                     	;# 
   754  041E                     	;# 
   755  041F                     	;# 
   756  0498                     	;# 
   757  0498                     	;# 
   758  0499                     	;# 
   759  049A                     	;# 
   760  049B                     	;# 
   761  049B                     	;# 
   762  049C                     	;# 
   763  049D                     	;# 
   764  049E                     	;# 
   765  049F                     	;# 
   766  0617                     	;# 
   767  0618                     	;# 
   768  0619                     	;# 
   769  0619                     	;# 
   770  061A                     	;# 
   771  061B                     	;# 
   772  061C                     	;# 
   773  061C                     	;# 
   774  061F                     	;# 
   775  0691                     	;# 
   776  0692                     	;# 
   777  0693                     	;# 
   778  0694                     	;# 
   779  0695                     	;# 
   780  0696                     	;# 
   781  0697                     	;# 
   782  0698                     	;# 
   783  0699                     	;# 
   784  0711                     	;# 
   785  0712                     	;# 
   786  0713                     	;# 
   787  0714                     	;# 
   788  0715                     	;# 
   789  0716                     	;# 
   790  0717                     	;# 
   791  0718                     	;# 
   792  0719                     	;# 
   793  0891                     	;# 
   794  0891                     	;# 
   795  0891                     	;# 
   796  0891                     	;# 
   797  0891                     	;# 
   798  0891                     	;# 
   799  0892                     	;# 
   800  0892                     	;# 
   801  0892                     	;# 
   802  0893                     	;# 
   803  0893                     	;# 
   804  0893                     	;# 
   805  0893                     	;# 
   806  0893                     	;# 
   807  0893                     	;# 
   808  0894                     	;# 
   809  0894                     	;# 
   810  0894                     	;# 
   811  0895                     	;# 
   812  0895                     	;# 
   813  0895                     	;# 
   814  0896                     	;# 
   815  0896                     	;# 
   816  0896                     	;# 
   817  089B                     	;# 
   818  0911                     	;# 
   819  0912                     	;# 
   820  0913                     	;# 
   821  0914                     	;# 
   822  0915                     	;# 
   823  0916                     	;# 
   824  0918                     	;# 
   825  0919                     	;# 
   826  091A                     	;# 
   827  091B                     	;# 
   828  091C                     	;# 
   829  091D                     	;# 
   830  091E                     	;# 
   831  091F                     	;# 
   832  0E0F                     	;# 
   833  0E10                     	;# 
   834  0E11                     	;# 
   835  0E12                     	;# 
   836  0E13                     	;# 
   837  0E14                     	;# 
   838  0E15                     	;# 
   839  0E16                     	;# 
   840  0E17                     	;# 
   841  0E18                     	;# 
   842  0E19                     	;# 
   843  0E1A                     	;# 
   844  0E1B                     	;# 
   845  0E1C                     	;# 
   846  0E1D                     	;# 
   847  0E1E                     	;# 
   848  0E1F                     	;# 
   849  0E20                     	;# 
   850  0E21                     	;# 
   851  0E22                     	;# 
   852  0E24                     	;# 
   853  0E25                     	;# 
   854  0E28                     	;# 
   855  0E29                     	;# 
   856  0E2A                     	;# 
   857  0E2B                     	;# 
   858  0E2C                     	;# 
   859  0E2D                     	;# 
   860  0E2E                     	;# 
   861  0E2F                     	;# 
   862  0E90                     	;# 
   863  0E91                     	;# 
   864  0E92                     	;# 
   865  0E94                     	;# 
   866  0E95                     	;# 
   867  0E9C                     	;# 
   868  0E9D                     	;# 
   869  0E9E                     	;# 
   870  0E9F                     	;# 
   871  0EA0                     	;# 
   872  0EA1                     	;# 
   873  0EA2                     	;# 
   874  0EA3                     	;# 
   875  0EA4                     	;# 
   876  0EA5                     	;# 
   877  0EA6                     	;# 
   878  0EA7                     	;# 
   879  0F0F                     	;# 
   880  0F10                     	;# 
   881  0F11                     	;# 
   882  0F12                     	;# 
   883  0F13                     	;# 
   884  0F14                     	;# 
   885  0F15                     	;# 
   886  0F16                     	;# 
   887  0F17                     	;# 
   888  0F18                     	;# 
   889  0F19                     	;# 
   890  0F1A                     	;# 
   891  0F1B                     	;# 
   892  0F1C                     	;# 
   893  0F1D                     	;# 
   894  0F1E                     	;# 
   895  0F1F                     	;# 
   896  0F20                     	;# 
   897  0F21                     	;# 
   898  0F22                     	;# 
   899  0F23                     	;# 
   900  0F24                     	;# 
   901  0F25                     	;# 
   902  0F26                     	;# 
   903  0F27                     	;# 
   904  0F28                     	;# 
   905  0F29                     	;# 
   906  0F2A                     	;# 
   907  0F2B                     	;# 
   908  0F2C                     	;# 
   909  0F2D                     	;# 
   910  0F2E                     	;# 
   911  0F2F                     	;# 
   912  0F30                     	;# 
   913  0F31                     	;# 
   914  0F32                     	;# 
   915  0F33                     	;# 
   916  0F34                     	;# 
   917  0F35                     	;# 
   918  0F36                     	;# 
   919  0F37                     	;# 
   920  0FE4                     	;# 
   921  0FE5                     	;# 
   922  0FE6                     	;# 
   923  0FE7                     	;# 
   924  0FE8                     	;# 
   925  0FE9                     	;# 
   926  0FEA                     	;# 
   927  0FEB                     	;# 
   928  0FED                     	;# 
   929  0FEE                     	;# 
   930  0FEF                     	;# 
   931  0000                     	;# 
   932  0001                     	;# 
   933  0002                     	;# 
   934  0003                     	;# 
   935  0004                     	;# 
   936  0005                     	;# 
   937  0006                     	;# 
   938  0007                     	;# 
   939  0008                     	;# 
   940  0009                     	;# 
   941  000A                     	;# 
   942  000B                     	;# 
   943  000C                     	;# 
   944  000D                     	;# 
   945  000E                     	;# 
   946  0010                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0013                     	;# 
   950  0014                     	;# 
   951  0015                     	;# 
   952  0015                     	;# 
   953  0016                     	;# 
   954  0016                     	;# 
   955  0017                     	;# 
   956  0018                     	;# 
   957  0019                     	;# 
   958  0019                     	;# 
   959  001A                     	;# 
   960  001B                     	;# 
   961  001C                     	;# 
   962  001D                     	;# 
   963  001E                     	;# 
   964  001F                     	;# 
   965  008C                     	;# 
   966  008D                     	;# 
   967  008E                     	;# 
   968  0090                     	;# 
   969  0091                     	;# 
   970  0092                     	;# 
   971  0093                     	;# 
   972  0094                     	;# 
   973  0097                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  009F                     	;# 
   980  010C                     	;# 
   981  010D                     	;# 
   982  010E                     	;# 
   983  0111                     	;# 
   984  0112                     	;# 
   985  0113                     	;# 
   986  0114                     	;# 
   987  0115                     	;# 
   988  0116                     	;# 
   989  0117                     	;# 
   990  0118                     	;# 
   991  0119                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0199                     	;# 
   996  0199                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019A                     	;# 
  1000  019A                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019C                     	;# 
  1008  019C                     	;# 
  1009  019D                     	;# 
  1010  019D                     	;# 
  1011  019D                     	;# 
  1012  019E                     	;# 
  1013  019E                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  019F                     	;# 
  1017  019F                     	;# 
  1018  019F                     	;# 
  1019  019F                     	;# 
  1020  020C                     	;# 
  1021  020D                     	;# 
  1022  020E                     	;# 
  1023  0211                     	;# 
  1024  0211                     	;# 
  1025  0212                     	;# 
  1026  0212                     	;# 
  1027  0213                     	;# 
  1028  0213                     	;# 
  1029  0214                     	;# 
  1030  0214                     	;# 
  1031  0215                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0219                     	;# 
  1040  021A                     	;# 
  1041  021B                     	;# 
  1042  021C                     	;# 
  1043  021D                     	;# 
  1044  021D                     	;# 
  1045  021E                     	;# 
  1046  021F                     	;# 
  1047  028C                     	;# 
  1048  028D                     	;# 
  1049  028E                     	;# 
  1050  0291                     	;# 
  1051  0291                     	;# 
  1052  0292                     	;# 
  1053  0293                     	;# 
  1054  0294                     	;# 
  1055  0295                     	;# 
  1056  0295                     	;# 
  1057  0296                     	;# 
  1058  0297                     	;# 
  1059  0298                     	;# 
  1060  029F                     	;# 
  1061  030C                     	;# 
  1062  030D                     	;# 
  1063  030E                     	;# 
  1064  0311                     	;# 
  1065  0311                     	;# 
  1066  0312                     	;# 
  1067  0313                     	;# 
  1068  0314                     	;# 
  1069  0315                     	;# 
  1070  0315                     	;# 
  1071  0316                     	;# 
  1072  0317                     	;# 
  1073  0318                     	;# 
  1074  038C                     	;# 
  1075  038D                     	;# 
  1076  038E                     	;# 
  1077  0391                     	;# 
  1078  0392                     	;# 
  1079  0393                     	;# 
  1080  0394                     	;# 
  1081  0395                     	;# 
  1082  0396                     	;# 
  1083  0397                     	;# 
  1084  0398                     	;# 
  1085  0399                     	;# 
  1086  039A                     	;# 
  1087  039C                     	;# 
  1088  039D                     	;# 
  1089  039E                     	;# 
  1090  039F                     	;# 
  1091  0411                     	;# 
  1092  0411                     	;# 
  1093  0412                     	;# 
  1094  0413                     	;# 
  1095  0414                     	;# 
  1096  0415                     	;# 
  1097  0416                     	;# 
  1098  0417                     	;# 
  1099  0418                     	;# 
  1100  0418                     	;# 
  1101  0419                     	;# 
  1102  041A                     	;# 
  1103  041B                     	;# 
  1104  041C                     	;# 
  1105  041D                     	;# 
  1106  041E                     	;# 
  1107  041F                     	;# 
  1108  0498                     	;# 
  1109  0498                     	;# 
  1110  0499                     	;# 
  1111  049A                     	;# 
  1112  049B                     	;# 
  1113  049B                     	;# 
  1114  049C                     	;# 
  1115  049D                     	;# 
  1116  049E                     	;# 
  1117  049F                     	;# 
  1118  0617                     	;# 
  1119  0618                     	;# 
  1120  0619                     	;# 
  1121  0619                     	;# 
  1122  061A                     	;# 
  1123  061B                     	;# 
  1124  061C                     	;# 
  1125  061C                     	;# 
  1126  061F                     	;# 
  1127  0691                     	;# 
  1128  0692                     	;# 
  1129  0693                     	;# 
  1130  0694                     	;# 
  1131  0695                     	;# 
  1132  0696                     	;# 
  1133  0697                     	;# 
  1134  0698                     	;# 
  1135  0699                     	;# 
  1136  0711                     	;# 
  1137  0712                     	;# 
  1138  0713                     	;# 
  1139  0714                     	;# 
  1140  0715                     	;# 
  1141  0716                     	;# 
  1142  0717                     	;# 
  1143  0718                     	;# 
  1144  0719                     	;# 
  1145  0891                     	;# 
  1146  0891                     	;# 
  1147  0891                     	;# 
  1148  0891                     	;# 
  1149  0891                     	;# 
  1150  0891                     	;# 
  1151  0892                     	;# 
  1152  0892                     	;# 
  1153  0892                     	;# 
  1154  0893                     	;# 
  1155  0893                     	;# 
  1156  0893                     	;# 
  1157  0893                     	;# 
  1158  0893                     	;# 
  1159  0893                     	;# 
  1160  0894                     	;# 
  1161  0894                     	;# 
  1162  0894                     	;# 
  1163  0895                     	;# 
  1164  0895                     	;# 
  1165  0895                     	;# 
  1166  0896                     	;# 
  1167  0896                     	;# 
  1168  0896                     	;# 
  1169  089B                     	;# 
  1170  0911                     	;# 
  1171  0912                     	;# 
  1172  0913                     	;# 
  1173  0914                     	;# 
  1174  0915                     	;# 
  1175  0916                     	;# 
  1176  0918                     	;# 
  1177  0919                     	;# 
  1178  091A                     	;# 
  1179  091B                     	;# 
  1180  091C                     	;# 
  1181  091D                     	;# 
  1182  091E                     	;# 
  1183  091F                     	;# 
  1184  0E0F                     	;# 
  1185  0E10                     	;# 
  1186  0E11                     	;# 
  1187  0E12                     	;# 
  1188  0E13                     	;# 
  1189  0E14                     	;# 
  1190  0E15                     	;# 
  1191  0E16                     	;# 
  1192  0E17                     	;# 
  1193  0E18                     	;# 
  1194  0E19                     	;# 
  1195  0E1A                     	;# 
  1196  0E1B                     	;# 
  1197  0E1C                     	;# 
  1198  0E1D                     	;# 
  1199  0E1E                     	;# 
  1200  0E1F                     	;# 
  1201  0E20                     	;# 
  1202  0E21                     	;# 
  1203  0E22                     	;# 
  1204  0E24                     	;# 
  1205  0E25                     	;# 
  1206  0E28                     	;# 
  1207  0E29                     	;# 
  1208  0E2A                     	;# 
  1209  0E2B                     	;# 
  1210  0E2C                     	;# 
  1211  0E2D                     	;# 
  1212  0E2E                     	;# 
  1213  0E2F                     	;# 
  1214  0E90                     	;# 
  1215  0E91                     	;# 
  1216  0E92                     	;# 
  1217  0E94                     	;# 
  1218  0E95                     	;# 
  1219  0E9C                     	;# 
  1220  0E9D                     	;# 
  1221  0E9E                     	;# 
  1222  0E9F                     	;# 
  1223  0EA0                     	;# 
  1224  0EA1                     	;# 
  1225  0EA2                     	;# 
  1226  0EA3                     	;# 
  1227  0EA4                     	;# 
  1228  0EA5                     	;# 
  1229  0EA6                     	;# 
  1230  0EA7                     	;# 
  1231  0F0F                     	;# 
  1232  0F10                     	;# 
  1233  0F11                     	;# 
  1234  0F12                     	;# 
  1235  0F13                     	;# 
  1236  0F14                     	;# 
  1237  0F15                     	;# 
  1238  0F16                     	;# 
  1239  0F17                     	;# 
  1240  0F18                     	;# 
  1241  0F19                     	;# 
  1242  0F1A                     	;# 
  1243  0F1B                     	;# 
  1244  0F1C                     	;# 
  1245  0F1D                     	;# 
  1246  0F1E                     	;# 
  1247  0F1F                     	;# 
  1248  0F20                     	;# 
  1249  0F21                     	;# 
  1250  0F22                     	;# 
  1251  0F23                     	;# 
  1252  0F24                     	;# 
  1253  0F25                     	;# 
  1254  0F26                     	;# 
  1255  0F27                     	;# 
  1256  0F28                     	;# 
  1257  0F29                     	;# 
  1258  0F2A                     	;# 
  1259  0F2B                     	;# 
  1260  0F2C                     	;# 
  1261  0F2D                     	;# 
  1262  0F2E                     	;# 
  1263  0F2F                     	;# 
  1264  0F30                     	;# 
  1265  0F31                     	;# 
  1266  0F32                     	;# 
  1267  0F33                     	;# 
  1268  0F34                     	;# 
  1269  0F35                     	;# 
  1270  0F36                     	;# 
  1271  0F37                     	;# 
  1272  0FE4                     	;# 
  1273  0FE5                     	;# 
  1274  0FE6                     	;# 
  1275  0FE7                     	;# 
  1276  0FE8                     	;# 
  1277  0FE9                     	;# 
  1278  0FEA                     	;# 
  1279  0FEB                     	;# 
  1280  0FED                     	;# 
  1281  0FEE                     	;# 
  1282  0FEF                     	;# 
  1283  0000                     	;# 
  1284  0001                     	;# 
  1285  0002                     	;# 
  1286  0003                     	;# 
  1287  0004                     	;# 
  1288  0005                     	;# 
  1289  0006                     	;# 
  1290  0007                     	;# 
  1291  0008                     	;# 
  1292  0009                     	;# 
  1293  000A                     	;# 
  1294  000B                     	;# 
  1295  000C                     	;# 
  1296  000D                     	;# 
  1297  000E                     	;# 
  1298  0010                     	;# 
  1299  0011                     	;# 
  1300  0012                     	;# 
  1301  0013                     	;# 
  1302  0014                     	;# 
  1303  0015                     	;# 
  1304  0015                     	;# 
  1305  0016                     	;# 
  1306  0016                     	;# 
  1307  0017                     	;# 
  1308  0018                     	;# 
  1309  0019                     	;# 
  1310  0019                     	;# 
  1311  001A                     	;# 
  1312  001B                     	;# 
  1313  001C                     	;# 
  1314  001D                     	;# 
  1315  001E                     	;# 
  1316  001F                     	;# 
  1317  008C                     	;# 
  1318  008D                     	;# 
  1319  008E                     	;# 
  1320  0090                     	;# 
  1321  0091                     	;# 
  1322  0092                     	;# 
  1323  0093                     	;# 
  1324  0094                     	;# 
  1325  0097                     	;# 
  1326  009B                     	;# 
  1327  009B                     	;# 
  1328  009C                     	;# 
  1329  009D                     	;# 
  1330  009E                     	;# 
  1331  009F                     	;# 
  1332  010C                     	;# 
  1333  010D                     	;# 
  1334  010E                     	;# 
  1335  0111                     	;# 
  1336  0112                     	;# 
  1337  0113                     	;# 
  1338  0114                     	;# 
  1339  0115                     	;# 
  1340  0116                     	;# 
  1341  0117                     	;# 
  1342  0118                     	;# 
  1343  0119                     	;# 
  1344  018C                     	;# 
  1345  018D                     	;# 
  1346  018E                     	;# 
  1347  0199                     	;# 
  1348  0199                     	;# 
  1349  0199                     	;# 
  1350  019A                     	;# 
  1351  019A                     	;# 
  1352  019A                     	;# 
  1353  019B                     	;# 
  1354  019B                     	;# 
  1355  019B                     	;# 
  1356  019B                     	;# 
  1357  019B                     	;# 
  1358  019C                     	;# 
  1359  019C                     	;# 
  1360  019C                     	;# 
  1361  019D                     	;# 
  1362  019D                     	;# 
  1363  019D                     	;# 
  1364  019E                     	;# 
  1365  019E                     	;# 
  1366  019E                     	;# 
  1367  019F                     	;# 
  1368  019F                     	;# 
  1369  019F                     	;# 
  1370  019F                     	;# 
  1371  019F                     	;# 
  1372  020C                     	;# 
  1373  020D                     	;# 
  1374  020E                     	;# 
  1375  0211                     	;# 
  1376  0211                     	;# 
  1377  0212                     	;# 
  1378  0212                     	;# 
  1379  0213                     	;# 
  1380  0213                     	;# 
  1381  0214                     	;# 
  1382  0214                     	;# 
  1383  0215                     	;# 
  1384  0215                     	;# 
  1385  0215                     	;# 
  1386  0215                     	;# 
  1387  0216                     	;# 
  1388  0216                     	;# 
  1389  0217                     	;# 
  1390  0217                     	;# 
  1391  0219                     	;# 
  1392  021A                     	;# 
  1393  021B                     	;# 
  1394  021C                     	;# 
  1395  021D                     	;# 
  1396  021D                     	;# 
  1397  021E                     	;# 
  1398  021F                     	;# 
  1399  028C                     	;# 
  1400  028D                     	;# 
  1401  028E                     	;# 
  1402  0291                     	;# 
  1403  0291                     	;# 
  1404  0292                     	;# 
  1405  0293                     	;# 
  1406  0294                     	;# 
  1407  0295                     	;# 
  1408  0295                     	;# 
  1409  0296                     	;# 
  1410  0297                     	;# 
  1411  0298                     	;# 
  1412  029F                     	;# 
  1413  030C                     	;# 
  1414  030D                     	;# 
  1415  030E                     	;# 
  1416  0311                     	;# 
  1417  0311                     	;# 
  1418  0312                     	;# 
  1419  0313                     	;# 
  1420  0314                     	;# 
  1421  0315                     	;# 
  1422  0315                     	;# 
  1423  0316                     	;# 
  1424  0317                     	;# 
  1425  0318                     	;# 
  1426  038C                     	;# 
  1427  038D                     	;# 
  1428  038E                     	;# 
  1429  0391                     	;# 
  1430  0392                     	;# 
  1431  0393                     	;# 
  1432  0394                     	;# 
  1433  0395                     	;# 
  1434  0396                     	;# 
  1435  0397                     	;# 
  1436  0398                     	;# 
  1437  0399                     	;# 
  1438  039A                     	;# 
  1439  039C                     	;# 
  1440  039D                     	;# 
  1441  039E                     	;# 
  1442  039F                     	;# 
  1443  0411                     	;# 
  1444  0411                     	;# 
  1445  0412                     	;# 
  1446  0413                     	;# 
  1447  0414                     	;# 
  1448  0415                     	;# 
  1449  0416                     	;# 
  1450  0417                     	;# 
  1451  0418                     	;# 
  1452  0418                     	;# 
  1453  0419                     	;# 
  1454  041A                     	;# 
  1455  041B                     	;# 
  1456  041C                     	;# 
  1457  041D                     	;# 
  1458  041E                     	;# 
  1459  041F                     	;# 
  1460  0498                     	;# 
  1461  0498                     	;# 
  1462  0499                     	;# 
  1463  049A                     	;# 
  1464  049B                     	;# 
  1465  049B                     	;# 
  1466  049C                     	;# 
  1467  049D                     	;# 
  1468  049E                     	;# 
  1469  049F                     	;# 
  1470  0617                     	;# 
  1471  0618                     	;# 
  1472  0619                     	;# 
  1473  0619                     	;# 
  1474  061A                     	;# 
  1475  061B                     	;# 
  1476  061C                     	;# 
  1477  061C                     	;# 
  1478  061F                     	;# 
  1479  0691                     	;# 
  1480  0692                     	;# 
  1481  0693                     	;# 
  1482  0694                     	;# 
  1483  0695                     	;# 
  1484  0696                     	;# 
  1485  0697                     	;# 
  1486  0698                     	;# 
  1487  0699                     	;# 
  1488  0711                     	;# 
  1489  0712                     	;# 
  1490  0713                     	;# 
  1491  0714                     	;# 
  1492  0715                     	;# 
  1493  0716                     	;# 
  1494  0717                     	;# 
  1495  0718                     	;# 
  1496  0719                     	;# 
  1497  0891                     	;# 
  1498  0891                     	;# 
  1499  0891                     	;# 
  1500  0891                     	;# 
  1501  0891                     	;# 
  1502  0891                     	;# 
  1503  0892                     	;# 
  1504  0892                     	;# 
  1505  0892                     	;# 
  1506  0893                     	;# 
  1507  0893                     	;# 
  1508  0893                     	;# 
  1509  0893                     	;# 
  1510  0893                     	;# 
  1511  0893                     	;# 
  1512  0894                     	;# 
  1513  0894                     	;# 
  1514  0894                     	;# 
  1515  0895                     	;# 
  1516  0895                     	;# 
  1517  0895                     	;# 
  1518  0896                     	;# 
  1519  0896                     	;# 
  1520  0896                     	;# 
  1521  089B                     	;# 
  1522  0911                     	;# 
  1523  0912                     	;# 
  1524  0913                     	;# 
  1525  0914                     	;# 
  1526  0915                     	;# 
  1527  0916                     	;# 
  1528  0918                     	;# 
  1529  0919                     	;# 
  1530  091A                     	;# 
  1531  091B                     	;# 
  1532  091C                     	;# 
  1533  091D                     	;# 
  1534  091E                     	;# 
  1535  091F                     	;# 
  1536  0E0F                     	;# 
  1537  0E10                     	;# 
  1538  0E11                     	;# 
  1539  0E12                     	;# 
  1540  0E13                     	;# 
  1541  0E14                     	;# 
  1542  0E15                     	;# 
  1543  0E16                     	;# 
  1544  0E17                     	;# 
  1545  0E18                     	;# 
  1546  0E19                     	;# 
  1547  0E1A                     	;# 
  1548  0E1B                     	;# 
  1549  0E1C                     	;# 
  1550  0E1D                     	;# 
  1551  0E1E                     	;# 
  1552  0E1F                     	;# 
  1553  0E20                     	;# 
  1554  0E21                     	;# 
  1555  0E22                     	;# 
  1556  0E24                     	;# 
  1557  0E25                     	;# 
  1558  0E28                     	;# 
  1559  0E29                     	;# 
  1560  0E2A                     	;# 
  1561  0E2B                     	;# 
  1562  0E2C                     	;# 
  1563  0E2D                     	;# 
  1564  0E2E                     	;# 
  1565  0E2F                     	;# 
  1566  0E90                     	;# 
  1567  0E91                     	;# 
  1568  0E92                     	;# 
  1569  0E94                     	;# 
  1570  0E95                     	;# 
  1571  0E9C                     	;# 
  1572  0E9D                     	;# 
  1573  0E9E                     	;# 
  1574  0E9F                     	;# 
  1575  0EA0                     	;# 
  1576  0EA1                     	;# 
  1577  0EA2                     	;# 
  1578  0EA3                     	;# 
  1579  0EA4                     	;# 
  1580  0EA5                     	;# 
  1581  0EA6                     	;# 
  1582  0EA7                     	;# 
  1583  0F0F                     	;# 
  1584  0F10                     	;# 
  1585  0F11                     	;# 
  1586  0F12                     	;# 
  1587  0F13                     	;# 
  1588  0F14                     	;# 
  1589  0F15                     	;# 
  1590  0F16                     	;# 
  1591  0F17                     	;# 
  1592  0F18                     	;# 
  1593  0F19                     	;# 
  1594  0F1A                     	;# 
  1595  0F1B                     	;# 
  1596  0F1C                     	;# 
  1597  0F1D                     	;# 
  1598  0F1E                     	;# 
  1599  0F1F                     	;# 
  1600  0F20                     	;# 
  1601  0F21                     	;# 
  1602  0F22                     	;# 
  1603  0F23                     	;# 
  1604  0F24                     	;# 
  1605  0F25                     	;# 
  1606  0F26                     	;# 
  1607  0F27                     	;# 
  1608  0F28                     	;# 
  1609  0F29                     	;# 
  1610  0F2A                     	;# 
  1611  0F2B                     	;# 
  1612  0F2C                     	;# 
  1613  0F2D                     	;# 
  1614  0F2E                     	;# 
  1615  0F2F                     	;# 
  1616  0F30                     	;# 
  1617  0F31                     	;# 
  1618  0F32                     	;# 
  1619  0F33                     	;# 
  1620  0F34                     	;# 
  1621  0F35                     	;# 
  1622  0F36                     	;# 
  1623  0F37                     	;# 
  1624  0FE4                     	;# 
  1625  0FE5                     	;# 
  1626  0FE6                     	;# 
  1627  0FE7                     	;# 
  1628  0FE8                     	;# 
  1629  0FE9                     	;# 
  1630  0FEA                     	;# 
  1631  0FEB                     	;# 
  1632  0FED                     	;# 
  1633  0FEE                     	;# 
  1634  0FEF                     	;# 
  1635  0000                     	;# 
  1636  0001                     	;# 
  1637  0002                     	;# 
  1638  0003                     	;# 
  1639  0004                     	;# 
  1640  0005                     	;# 
  1641  0006                     	;# 
  1642  0007                     	;# 
  1643  0008                     	;# 
  1644  0009                     	;# 
  1645  000A                     	;# 
  1646  000B                     	;# 
  1647  000C                     	;# 
  1648  000D                     	;# 
  1649  000E                     	;# 
  1650  0010                     	;# 
  1651  0011                     	;# 
  1652  0012                     	;# 
  1653  0013                     	;# 
  1654  0014                     	;# 
  1655  0015                     	;# 
  1656  0015                     	;# 
  1657  0016                     	;# 
  1658  0016                     	;# 
  1659  0017                     	;# 
  1660  0018                     	;# 
  1661  0019                     	;# 
  1662  0019                     	;# 
  1663  001A                     	;# 
  1664  001B                     	;# 
  1665  001C                     	;# 
  1666  001D                     	;# 
  1667  001E                     	;# 
  1668  001F                     	;# 
  1669  008C                     	;# 
  1670  008D                     	;# 
  1671  008E                     	;# 
  1672  0090                     	;# 
  1673  0091                     	;# 
  1674  0092                     	;# 
  1675  0093                     	;# 
  1676  0094                     	;# 
  1677  0097                     	;# 
  1678  009B                     	;# 
  1679  009B                     	;# 
  1680  009C                     	;# 
  1681  009D                     	;# 
  1682  009E                     	;# 
  1683  009F                     	;# 
  1684  010C                     	;# 
  1685  010D                     	;# 
  1686  010E                     	;# 
  1687  0111                     	;# 
  1688  0112                     	;# 
  1689  0113                     	;# 
  1690  0114                     	;# 
  1691  0115                     	;# 
  1692  0116                     	;# 
  1693  0117                     	;# 
  1694  0118                     	;# 
  1695  0119                     	;# 
  1696  018C                     	;# 
  1697  018D                     	;# 
  1698  018E                     	;# 
  1699  0199                     	;# 
  1700  0199                     	;# 
  1701  0199                     	;# 
  1702  019A                     	;# 
  1703  019A                     	;# 
  1704  019A                     	;# 
  1705  019B                     	;# 
  1706  019B                     	;# 
  1707  019B                     	;# 
  1708  019B                     	;# 
  1709  019B                     	;# 
  1710  019C                     	;# 
  1711  019C                     	;# 
  1712  019C                     	;# 
  1713  019D                     	;# 
  1714  019D                     	;# 
  1715  019D                     	;# 
  1716  019E                     	;# 
  1717  019E                     	;# 
  1718  019E                     	;# 
  1719  019F                     	;# 
  1720  019F                     	;# 
  1721  019F                     	;# 
  1722  019F                     	;# 
  1723  019F                     	;# 
  1724  020C                     	;# 
  1725  020D                     	;# 
  1726  020E                     	;# 
  1727  0211                     	;# 
  1728  0211                     	;# 
  1729  0212                     	;# 
  1730  0212                     	;# 
  1731  0213                     	;# 
  1732  0213                     	;# 
  1733  0214                     	;# 
  1734  0214                     	;# 
  1735  0215                     	;# 
  1736  0215                     	;# 
  1737  0215                     	;# 
  1738  0215                     	;# 
  1739  0216                     	;# 
  1740  0216                     	;# 
  1741  0217                     	;# 
  1742  0217                     	;# 
  1743  0219                     	;# 
  1744  021A                     	;# 
  1745  021B                     	;# 
  1746  021C                     	;# 
  1747  021D                     	;# 
  1748  021D                     	;# 
  1749  021E                     	;# 
  1750  021F                     	;# 
  1751  028C                     	;# 
  1752  028D                     	;# 
  1753  028E                     	;# 
  1754  0291                     	;# 
  1755  0291                     	;# 
  1756  0292                     	;# 
  1757  0293                     	;# 
  1758  0294                     	;# 
  1759  0295                     	;# 
  1760  0295                     	;# 
  1761  0296                     	;# 
  1762  0297                     	;# 
  1763  0298                     	;# 
  1764  029F                     	;# 
  1765  030C                     	;# 
  1766  030D                     	;# 
  1767  030E                     	;# 
  1768  0311                     	;# 
  1769  0311                     	;# 
  1770  0312                     	;# 
  1771  0313                     	;# 
  1772  0314                     	;# 
  1773  0315                     	;# 
  1774  0315                     	;# 
  1775  0316                     	;# 
  1776  0317                     	;# 
  1777  0318                     	;# 
  1778  038C                     	;# 
  1779  038D                     	;# 
  1780  038E                     	;# 
  1781  0391                     	;# 
  1782  0392                     	;# 
  1783  0393                     	;# 
  1784  0394                     	;# 
  1785  0395                     	;# 
  1786  0396                     	;# 
  1787  0397                     	;# 
  1788  0398                     	;# 
  1789  0399                     	;# 
  1790  039A                     	;# 
  1791  039C                     	;# 
  1792  039D                     	;# 
  1793  039E                     	;# 
  1794  039F                     	;# 
  1795  0411                     	;# 
  1796  0411                     	;# 
  1797  0412                     	;# 
  1798  0413                     	;# 
  1799  0414                     	;# 
  1800  0415                     	;# 
  1801  0416                     	;# 
  1802  0417                     	;# 
  1803  0418                     	;# 
  1804  0418                     	;# 
  1805  0419                     	;# 
  1806  041A                     	;# 
  1807  041B                     	;# 
  1808  041C                     	;# 
  1809  041D                     	;# 
  1810  041E                     	;# 
  1811  041F                     	;# 
  1812  0498                     	;# 
  1813  0498                     	;# 
  1814  0499                     	;# 
  1815  049A                     	;# 
  1816  049B                     	;# 
  1817  049B                     	;# 
  1818  049C                     	;# 
  1819  049D                     	;# 
  1820  049E                     	;# 
  1821  049F                     	;# 
  1822  0617                     	;# 
  1823  0618                     	;# 
  1824  0619                     	;# 
  1825  0619                     	;# 
  1826  061A                     	;# 
  1827  061B                     	;# 
  1828  061C                     	;# 
  1829  061C                     	;# 
  1830  061F                     	;# 
  1831  0691                     	;# 
  1832  0692                     	;# 
  1833  0693                     	;# 
  1834  0694                     	;# 
  1835  0695                     	;# 
  1836  0696                     	;# 
  1837  0697                     	;# 
  1838  0698                     	;# 
  1839  0699                     	;# 
  1840  0711                     	;# 
  1841  0712                     	;# 
  1842  0713                     	;# 
  1843  0714                     	;# 
  1844  0715                     	;# 
  1845  0716                     	;# 
  1846  0717                     	;# 
  1847  0718                     	;# 
  1848  0719                     	;# 
  1849  0891                     	;# 
  1850  0891                     	;# 
  1851  0891                     	;# 
  1852  0891                     	;# 
  1853  0891                     	;# 
  1854  0891                     	;# 
  1855  0892                     	;# 
  1856  0892                     	;# 
  1857  0892                     	;# 
  1858  0893                     	;# 
  1859  0893                     	;# 
  1860  0893                     	;# 
  1861  0893                     	;# 
  1862  0893                     	;# 
  1863  0893                     	;# 
  1864  0894                     	;# 
  1865  0894                     	;# 
  1866  0894                     	;# 
  1867  0895                     	;# 
  1868  0895                     	;# 
  1869  0895                     	;# 
  1870  0896                     	;# 
  1871  0896                     	;# 
  1872  0896                     	;# 
  1873  089B                     	;# 
  1874  0911                     	;# 
  1875  0912                     	;# 
  1876  0913                     	;# 
  1877  0914                     	;# 
  1878  0915                     	;# 
  1879  0916                     	;# 
  1880  0918                     	;# 
  1881  0919                     	;# 
  1882  091A                     	;# 
  1883  091B                     	;# 
  1884  091C                     	;# 
  1885  091D                     	;# 
  1886  091E                     	;# 
  1887  091F                     	;# 
  1888  0E0F                     	;# 
  1889  0E10                     	;# 
  1890  0E11                     	;# 
  1891  0E12                     	;# 
  1892  0E13                     	;# 
  1893  0E14                     	;# 
  1894  0E15                     	;# 
  1895  0E16                     	;# 
  1896  0E17                     	;# 
  1897  0E18                     	;# 
  1898  0E19                     	;# 
  1899  0E1A                     	;# 
  1900  0E1B                     	;# 
  1901  0E1C                     	;# 
  1902  0E1D                     	;# 
  1903  0E1E                     	;# 
  1904  0E1F                     	;# 
  1905  0E20                     	;# 
  1906  0E21                     	;# 
  1907  0E22                     	;# 
  1908  0E24                     	;# 
  1909  0E25                     	;# 
  1910  0E28                     	;# 
  1911  0E29                     	;# 
  1912  0E2A                     	;# 
  1913  0E2B                     	;# 
  1914  0E2C                     	;# 
  1915  0E2D                     	;# 
  1916  0E2E                     	;# 
  1917  0E2F                     	;# 
  1918  0E90                     	;# 
  1919  0E91                     	;# 
  1920  0E92                     	;# 
  1921  0E94                     	;# 
  1922  0E95                     	;# 
  1923  0E9C                     	;# 
  1924  0E9D                     	;# 
  1925  0E9E                     	;# 
  1926  0E9F                     	;# 
  1927  0EA0                     	;# 
  1928  0EA1                     	;# 
  1929  0EA2                     	;# 
  1930  0EA3                     	;# 
  1931  0EA4                     	;# 
  1932  0EA5                     	;# 
  1933  0EA6                     	;# 
  1934  0EA7                     	;# 
  1935  0F0F                     	;# 
  1936  0F10                     	;# 
  1937  0F11                     	;# 
  1938  0F12                     	;# 
  1939  0F13                     	;# 
  1940  0F14                     	;# 
  1941  0F15                     	;# 
  1942  0F16                     	;# 
  1943  0F17                     	;# 
  1944  0F18                     	;# 
  1945  0F19                     	;# 
  1946  0F1A                     	;# 
  1947  0F1B                     	;# 
  1948  0F1C                     	;# 
  1949  0F1D                     	;# 
  1950  0F1E                     	;# 
  1951  0F1F                     	;# 
  1952  0F20                     	;# 
  1953  0F21                     	;# 
  1954  0F22                     	;# 
  1955  0F23                     	;# 
  1956  0F24                     	;# 
  1957  0F25                     	;# 
  1958  0F26                     	;# 
  1959  0F27                     	;# 
  1960  0F28                     	;# 
  1961  0F29                     	;# 
  1962  0F2A                     	;# 
  1963  0F2B                     	;# 
  1964  0F2C                     	;# 
  1965  0F2D                     	;# 
  1966  0F2E                     	;# 
  1967  0F2F                     	;# 
  1968  0F30                     	;# 
  1969  0F31                     	;# 
  1970  0F32                     	;# 
  1971  0F33                     	;# 
  1972  0F34                     	;# 
  1973  0F35                     	;# 
  1974  0F36                     	;# 
  1975  0F37                     	;# 
  1976  0FE4                     	;# 
  1977  0FE5                     	;# 
  1978  0FE6                     	;# 
  1979  0FE7                     	;# 
  1980  0FE8                     	;# 
  1981  0FE9                     	;# 
  1982  0FEA                     	;# 
  1983  0FEB                     	;# 
  1984  0FED                     	;# 
  1985  0FEE                     	;# 
  1986  0FEF                     	;# 
  1987  0000                     	;# 
  1988  0001                     	;# 
  1989  0002                     	;# 
  1990  0003                     	;# 
  1991  0004                     	;# 
  1992  0005                     	;# 
  1993  0006                     	;# 
  1994  0007                     	;# 
  1995  0008                     	;# 
  1996  0009                     	;# 
  1997  000A                     	;# 
  1998  000B                     	;# 
  1999  000C                     	;# 
  2000  000D                     	;# 
  2001  000E                     	;# 
  2002  0010                     	;# 
  2003  0011                     	;# 
  2004  0012                     	;# 
  2005  0013                     	;# 
  2006  0014                     	;# 
  2007  0015                     	;# 
  2008  0015                     	;# 
  2009  0016                     	;# 
  2010  0016                     	;# 
  2011  0017                     	;# 
  2012  0018                     	;# 
  2013  0019                     	;# 
  2014  0019                     	;# 
  2015  001A                     	;# 
  2016  001B                     	;# 
  2017  001C                     	;# 
  2018  001D                     	;# 
  2019  001E                     	;# 
  2020  001F                     	;# 
  2021  008C                     	;# 
  2022  008D                     	;# 
  2023  008E                     	;# 
  2024  0090                     	;# 
  2025  0091                     	;# 
  2026  0092                     	;# 
  2027  0093                     	;# 
  2028  0094                     	;# 
  2029  0097                     	;# 
  2030  009B                     	;# 
  2031  009B                     	;# 
  2032  009C                     	;# 
  2033  009D                     	;# 
  2034  009E                     	;# 
  2035  009F                     	;# 
  2036  010C                     	;# 
  2037  010D                     	;# 
  2038  010E                     	;# 
  2039  0111                     	;# 
  2040  0112                     	;# 
  2041  0113                     	;# 
  2042  0114                     	;# 
  2043  0115                     	;# 
  2044  0116                     	;# 
  2045  0117                     	;# 
  2046  0118                     	;# 
  2047  0119                     	;# 
  2048  018C                     	;# 
  2049  018D                     	;# 
  2050  018E                     	;# 
  2051  0199                     	;# 
  2052  0199                     	;# 
  2053  0199                     	;# 
  2054  019A                     	;# 
  2055  019A                     	;# 
  2056  019A                     	;# 
  2057  019B                     	;# 
  2058  019B                     	;# 
  2059  019B                     	;# 
  2060  019B                     	;# 
  2061  019B                     	;# 
  2062  019C                     	;# 
  2063  019C                     	;# 
  2064  019C                     	;# 
  2065  019D                     	;# 
  2066  019D                     	;# 
  2067  019D                     	;# 
  2068  019E                     	;# 
  2069  019E                     	;# 
  2070  019E                     	;# 
  2071  019F                     	;# 
  2072  019F                     	;# 
  2073  019F                     	;# 
  2074  019F                     	;# 
  2075  019F                     	;# 
  2076  020C                     	;# 
  2077  020D                     	;# 
  2078  020E                     	;# 
  2079  0211                     	;# 
  2080  0211                     	;# 
  2081  0212                     	;# 
  2082  0212                     	;# 
  2083  0213                     	;# 
  2084  0213                     	;# 
  2085  0214                     	;# 
  2086  0214                     	;# 
  2087  0215                     	;# 
  2088  0215                     	;# 
  2089  0215                     	;# 
  2090  0215                     	;# 
  2091  0216                     	;# 
  2092  0216                     	;# 
  2093  0217                     	;# 
  2094  0217                     	;# 
  2095  0219                     	;# 
  2096  021A                     	;# 
  2097  021B                     	;# 
  2098  021C                     	;# 
  2099  021D                     	;# 
  2100  021D                     	;# 
  2101  021E                     	;# 
  2102  021F                     	;# 
  2103  028C                     	;# 
  2104  028D                     	;# 
  2105  028E                     	;# 
  2106  0291                     	;# 
  2107  0291                     	;# 
  2108  0292                     	;# 
  2109  0293                     	;# 
  2110  0294                     	;# 
  2111  0295                     	;# 
  2112  0295                     	;# 
  2113  0296                     	;# 
  2114  0297                     	;# 
  2115  0298                     	;# 
  2116  029F                     	;# 
  2117  030C                     	;# 
  2118  030D                     	;# 
  2119  030E                     	;# 
  2120  0311                     	;# 
  2121  0311                     	;# 
  2122  0312                     	;# 
  2123  0313                     	;# 
  2124  0314                     	;# 
  2125  0315                     	;# 
  2126  0315                     	;# 
  2127  0316                     	;# 
  2128  0317                     	;# 
  2129  0318                     	;# 
  2130  038C                     	;# 
  2131  038D                     	;# 
  2132  038E                     	;# 
  2133  0391                     	;# 
  2134  0392                     	;# 
  2135  0393                     	;# 
  2136  0394                     	;# 
  2137  0395                     	;# 
  2138  0396                     	;# 
  2139  0397                     	;# 
  2140  0398                     	;# 
  2141  0399                     	;# 
  2142  039A                     	;# 
  2143  039C                     	;# 
  2144  039D                     	;# 
  2145  039E                     	;# 
  2146  039F                     	;# 
  2147  0411                     	;# 
  2148  0411                     	;# 
  2149  0412                     	;# 
  2150  0413                     	;# 
  2151  0414                     	;# 
  2152  0415                     	;# 
  2153  0416                     	;# 
  2154  0417                     	;# 
  2155  0418                     	;# 
  2156  0418                     	;# 
  2157  0419                     	;# 
  2158  041A                     	;# 
  2159  041B                     	;# 
  2160  041C                     	;# 
  2161  041D                     	;# 
  2162  041E                     	;# 
  2163  041F                     	;# 
  2164  0498                     	;# 
  2165  0498                     	;# 
  2166  0499                     	;# 
  2167  049A                     	;# 
  2168  049B                     	;# 
  2169  049B                     	;# 
  2170  049C                     	;# 
  2171  049D                     	;# 
  2172  049E                     	;# 
  2173  049F                     	;# 
  2174  0617                     	;# 
  2175  0618                     	;# 
  2176  0619                     	;# 
  2177  0619                     	;# 
  2178  061A                     	;# 
  2179  061B                     	;# 
  2180  061C                     	;# 
  2181  061C                     	;# 
  2182  061F                     	;# 
  2183  0691                     	;# 
  2184  0692                     	;# 
  2185  0693                     	;# 
  2186  0694                     	;# 
  2187  0695                     	;# 
  2188  0696                     	;# 
  2189  0697                     	;# 
  2190  0698                     	;# 
  2191  0699                     	;# 
  2192  0711                     	;# 
  2193  0712                     	;# 
  2194  0713                     	;# 
  2195  0714                     	;# 
  2196  0715                     	;# 
  2197  0716                     	;# 
  2198  0717                     	;# 
  2199  0718                     	;# 
  2200  0719                     	;# 
  2201  0891                     	;# 
  2202  0891                     	;# 
  2203  0891                     	;# 
  2204  0891                     	;# 
  2205  0891                     	;# 
  2206  0891                     	;# 
  2207  0892                     	;# 
  2208  0892                     	;# 
  2209  0892                     	;# 
  2210  0893                     	;# 
  2211  0893                     	;# 
  2212  0893                     	;# 
  2213  0893                     	;# 
  2214  0893                     	;# 
  2215  0893                     	;# 
  2216  0894                     	;# 
  2217  0894                     	;# 
  2218  0894                     	;# 
  2219  0895                     	;# 
  2220  0895                     	;# 
  2221  0895                     	;# 
  2222  0896                     	;# 
  2223  0896                     	;# 
  2224  0896                     	;# 
  2225  089B                     	;# 
  2226  0911                     	;# 
  2227  0912                     	;# 
  2228  0913                     	;# 
  2229  0914                     	;# 
  2230  0915                     	;# 
  2231  0916                     	;# 
  2232  0918                     	;# 
  2233  0919                     	;# 
  2234  091A                     	;# 
  2235  091B                     	;# 
  2236  091C                     	;# 
  2237  091D                     	;# 
  2238  091E                     	;# 
  2239  091F                     	;# 
  2240  0E0F                     	;# 
  2241  0E10                     	;# 
  2242  0E11                     	;# 
  2243  0E12                     	;# 
  2244  0E13                     	;# 
  2245  0E14                     	;# 
  2246  0E15                     	;# 
  2247  0E16                     	;# 
  2248  0E17                     	;# 
  2249  0E18                     	;# 
  2250  0E19                     	;# 
  2251  0E1A                     	;# 
  2252  0E1B                     	;# 
  2253  0E1C                     	;# 
  2254  0E1D                     	;# 
  2255  0E1E                     	;# 
  2256  0E1F                     	;# 
  2257  0E20                     	;# 
  2258  0E21                     	;# 
  2259  0E22                     	;# 
  2260  0E24                     	;# 
  2261  0E25                     	;# 
  2262  0E28                     	;# 
  2263  0E29                     	;# 
  2264  0E2A                     	;# 
  2265  0E2B                     	;# 
  2266  0E2C                     	;# 
  2267  0E2D                     	;# 
  2268  0E2E                     	;# 
  2269  0E2F                     	;# 
  2270  0E90                     	;# 
  2271  0E91                     	;# 
  2272  0E92                     	;# 
  2273  0E94                     	;# 
  2274  0E95                     	;# 
  2275  0E9C                     	;# 
  2276  0E9D                     	;# 
  2277  0E9E                     	;# 
  2278  0E9F                     	;# 
  2279  0EA0                     	;# 
  2280  0EA1                     	;# 
  2281  0EA2                     	;# 
  2282  0EA3                     	;# 
  2283  0EA4                     	;# 
  2284  0EA5                     	;# 
  2285  0EA6                     	;# 
  2286  0EA7                     	;# 
  2287  0F0F                     	;# 
  2288  0F10                     	;# 
  2289  0F11                     	;# 
  2290  0F12                     	;# 
  2291  0F13                     	;# 
  2292  0F14                     	;# 
  2293  0F15                     	;# 
  2294  0F16                     	;# 
  2295  0F17                     	;# 
  2296  0F18                     	;# 
  2297  0F19                     	;# 
  2298  0F1A                     	;# 
  2299  0F1B                     	;# 
  2300  0F1C                     	;# 
  2301  0F1D                     	;# 
  2302  0F1E                     	;# 
  2303  0F1F                     	;# 
  2304  0F20                     	;# 
  2305  0F21                     	;# 
  2306  0F22                     	;# 
  2307  0F23                     	;# 
  2308  0F24                     	;# 
  2309  0F25                     	;# 
  2310  0F26                     	;# 
  2311  0F27                     	;# 
  2312  0F28                     	;# 
  2313  0F29                     	;# 
  2314  0F2A                     	;# 
  2315  0F2B                     	;# 
  2316  0F2C                     	;# 
  2317  0F2D                     	;# 
  2318  0F2E                     	;# 
  2319  0F2F                     	;# 
  2320  0F30                     	;# 
  2321  0F31                     	;# 
  2322  0F32                     	;# 
  2323  0F33                     	;# 
  2324  0F34                     	;# 
  2325  0F35                     	;# 
  2326  0F36                     	;# 
  2327  0F37                     	;# 
  2328  0FE4                     	;# 
  2329  0FE5                     	;# 
  2330  0FE6                     	;# 
  2331  0FE7                     	;# 
  2332  0FE8                     	;# 
  2333  0FE9                     	;# 
  2334  0FEA                     	;# 
  2335  0FEB                     	;# 
  2336  0FED                     	;# 
  2337  0FEE                     	;# 
  2338  0FEF                     	;# 
  2339  0000                     	;# 
  2340  0001                     	;# 
  2341  0002                     	;# 
  2342  0003                     	;# 
  2343  0004                     	;# 
  2344  0005                     	;# 
  2345  0006                     	;# 
  2346  0007                     	;# 
  2347  0008                     	;# 
  2348  0009                     	;# 
  2349  000A                     	;# 
  2350  000B                     	;# 
  2351  000C                     	;# 
  2352  000D                     	;# 
  2353  000E                     	;# 
  2354  0010                     	;# 
  2355  0011                     	;# 
  2356  0012                     	;# 
  2357  0013                     	;# 
  2358  0014                     	;# 
  2359  0015                     	;# 
  2360  0015                     	;# 
  2361  0016                     	;# 
  2362  0016                     	;# 
  2363  0017                     	;# 
  2364  0018                     	;# 
  2365  0019                     	;# 
  2366  0019                     	;# 
  2367  001A                     	;# 
  2368  001B                     	;# 
  2369  001C                     	;# 
  2370  001D                     	;# 
  2371  001E                     	;# 
  2372  001F                     	;# 
  2373  008C                     	;# 
  2374  008D                     	;# 
  2375  008E                     	;# 
  2376  0090                     	;# 
  2377  0091                     	;# 
  2378  0092                     	;# 
  2379  0093                     	;# 
  2380  0094                     	;# 
  2381  0097                     	;# 
  2382  009B                     	;# 
  2383  009B                     	;# 
  2384  009C                     	;# 
  2385  009D                     	;# 
  2386  009E                     	;# 
  2387  009F                     	;# 
  2388  010C                     	;# 
  2389  010D                     	;# 
  2390  010E                     	;# 
  2391  0111                     	;# 
  2392  0112                     	;# 
  2393  0113                     	;# 
  2394  0114                     	;# 
  2395  0115                     	;# 
  2396  0116                     	;# 
  2397  0117                     	;# 
  2398  0118                     	;# 
  2399  0119                     	;# 
  2400  018C                     	;# 
  2401  018D                     	;# 
  2402  018E                     	;# 
  2403  0199                     	;# 
  2404  0199                     	;# 
  2405  0199                     	;# 
  2406  019A                     	;# 
  2407  019A                     	;# 
  2408  019A                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019B                     	;# 
  2413  019B                     	;# 
  2414  019C                     	;# 
  2415  019C                     	;# 
  2416  019C                     	;# 
  2417  019D                     	;# 
  2418  019D                     	;# 
  2419  019D                     	;# 
  2420  019E                     	;# 
  2421  019E                     	;# 
  2422  019E                     	;# 
  2423  019F                     	;# 
  2424  019F                     	;# 
  2425  019F                     	;# 
  2426  019F                     	;# 
  2427  019F                     	;# 
  2428  020C                     	;# 
  2429  020D                     	;# 
  2430  020E                     	;# 
  2431  0211                     	;# 
  2432  0211                     	;# 
  2433  0212                     	;# 
  2434  0212                     	;# 
  2435  0213                     	;# 
  2436  0213                     	;# 
  2437  0214                     	;# 
  2438  0214                     	;# 
  2439  0215                     	;# 
  2440  0215                     	;# 
  2441  0215                     	;# 
  2442  0215                     	;# 
  2443  0216                     	;# 
  2444  0216                     	;# 
  2445  0217                     	;# 
  2446  0217                     	;# 
  2447  0219                     	;# 
  2448  021A                     	;# 
  2449  021B                     	;# 
  2450  021C                     	;# 
  2451  021D                     	;# 
  2452  021D                     	;# 
  2453  021E                     	;# 
  2454  021F                     	;# 
  2455  028C                     	;# 
  2456  028D                     	;# 
  2457  028E                     	;# 
  2458  0291                     	;# 
  2459  0291                     	;# 
  2460  0292                     	;# 
  2461  0293                     	;# 
  2462  0294                     	;# 
  2463  0295                     	;# 
  2464  0295                     	;# 
  2465  0296                     	;# 
  2466  0297                     	;# 
  2467  0298                     	;# 
  2468  029F                     	;# 
  2469  030C                     	;# 
  2470  030D                     	;# 
  2471  030E                     	;# 
  2472  0311                     	;# 
  2473  0311                     	;# 
  2474  0312                     	;# 
  2475  0313                     	;# 
  2476  0314                     	;# 
  2477  0315                     	;# 
  2478  0315                     	;# 
  2479  0316                     	;# 
  2480  0317                     	;# 
  2481  0318                     	;# 
  2482  038C                     	;# 
  2483  038D                     	;# 
  2484  038E                     	;# 
  2485  0391                     	;# 
  2486  0392                     	;# 
  2487  0393                     	;# 
  2488  0394                     	;# 
  2489  0395                     	;# 
  2490  0396                     	;# 
  2491  0397                     	;# 
  2492  0398                     	;# 
  2493  0399                     	;# 
  2494  039A                     	;# 
  2495  039C                     	;# 
  2496  039D                     	;# 
  2497  039E                     	;# 
  2498  039F                     	;# 
  2499  0411                     	;# 
  2500  0411                     	;# 
  2501  0412                     	;# 
  2502  0413                     	;# 
  2503  0414                     	;# 
  2504  0415                     	;# 
  2505  0416                     	;# 
  2506  0417                     	;# 
  2507  0418                     	;# 
  2508  0418                     	;# 
  2509  0419                     	;# 
  2510  041A                     	;# 
  2511  041B                     	;# 
  2512  041C                     	;# 
  2513  041D                     	;# 
  2514  041E                     	;# 
  2515  041F                     	;# 
  2516  0498                     	;# 
  2517  0498                     	;# 
  2518  0499                     	;# 
  2519  049A                     	;# 
  2520  049B                     	;# 
  2521  049B                     	;# 
  2522  049C                     	;# 
  2523  049D                     	;# 
  2524  049E                     	;# 
  2525  049F                     	;# 
  2526  0617                     	;# 
  2527  0618                     	;# 
  2528  0619                     	;# 
  2529  0619                     	;# 
  2530  061A                     	;# 
  2531  061B                     	;# 
  2532  061C                     	;# 
  2533  061C                     	;# 
  2534  061F                     	;# 
  2535  0691                     	;# 
  2536  0692                     	;# 
  2537  0693                     	;# 
  2538  0694                     	;# 
  2539  0695                     	;# 
  2540  0696                     	;# 
  2541  0697                     	;# 
  2542  0698                     	;# 
  2543  0699                     	;# 
  2544  0711                     	;# 
  2545  0712                     	;# 
  2546  0713                     	;# 
  2547  0714                     	;# 
  2548  0715                     	;# 
  2549  0716                     	;# 
  2550  0717                     	;# 
  2551  0718                     	;# 
  2552  0719                     	;# 
  2553  0891                     	;# 
  2554  0891                     	;# 
  2555  0891                     	;# 
  2556  0891                     	;# 
  2557  0891                     	;# 
  2558  0891                     	;# 
  2559  0892                     	;# 
  2560  0892                     	;# 
  2561  0892                     	;# 
  2562  0893                     	;# 
  2563  0893                     	;# 
  2564  0893                     	;# 
  2565  0893                     	;# 
  2566  0893                     	;# 
  2567  0893                     	;# 
  2568  0894                     	;# 
  2569  0894                     	;# 
  2570  0894                     	;# 
  2571  0895                     	;# 
  2572  0895                     	;# 
  2573  0895                     	;# 
  2574  0896                     	;# 
  2575  0896                     	;# 
  2576  0896                     	;# 
  2577  089B                     	;# 
  2578  0911                     	;# 
  2579  0912                     	;# 
  2580  0913                     	;# 
  2581  0914                     	;# 
  2582  0915                     	;# 
  2583  0916                     	;# 
  2584  0918                     	;# 
  2585  0919                     	;# 
  2586  091A                     	;# 
  2587  091B                     	;# 
  2588  091C                     	;# 
  2589  091D                     	;# 
  2590  091E                     	;# 
  2591  091F                     	;# 
  2592  0E0F                     	;# 
  2593  0E10                     	;# 
  2594  0E11                     	;# 
  2595  0E12                     	;# 
  2596  0E13                     	;# 
  2597  0E14                     	;# 
  2598  0E15                     	;# 
  2599  0E16                     	;# 
  2600  0E17                     	;# 
  2601  0E18                     	;# 
  2602  0E19                     	;# 
  2603  0E1A                     	;# 
  2604  0E1B                     	;# 
  2605  0E1C                     	;# 
  2606  0E1D                     	;# 
  2607  0E1E                     	;# 
  2608  0E1F                     	;# 
  2609  0E20                     	;# 
  2610  0E21                     	;# 
  2611  0E22                     	;# 
  2612  0E24                     	;# 
  2613  0E25                     	;# 
  2614  0E28                     	;# 
  2615  0E29                     	;# 
  2616  0E2A                     	;# 
  2617  0E2B                     	;# 
  2618  0E2C                     	;# 
  2619  0E2D                     	;# 
  2620  0E2E                     	;# 
  2621  0E2F                     	;# 
  2622  0E90                     	;# 
  2623  0E91                     	;# 
  2624  0E92                     	;# 
  2625  0E94                     	;# 
  2626  0E95                     	;# 
  2627  0E9C                     	;# 
  2628  0E9D                     	;# 
  2629  0E9E                     	;# 
  2630  0E9F                     	;# 
  2631  0EA0                     	;# 
  2632  0EA1                     	;# 
  2633  0EA2                     	;# 
  2634  0EA3                     	;# 
  2635  0EA4                     	;# 
  2636  0EA5                     	;# 
  2637  0EA6                     	;# 
  2638  0EA7                     	;# 
  2639  0F0F                     	;# 
  2640  0F10                     	;# 
  2641  0F11                     	;# 
  2642  0F12                     	;# 
  2643  0F13                     	;# 
  2644  0F14                     	;# 
  2645  0F15                     	;# 
  2646  0F16                     	;# 
  2647  0F17                     	;# 
  2648  0F18                     	;# 
  2649  0F19                     	;# 
  2650  0F1A                     	;# 
  2651  0F1B                     	;# 
  2652  0F1C                     	;# 
  2653  0F1D                     	;# 
  2654  0F1E                     	;# 
  2655  0F1F                     	;# 
  2656  0F20                     	;# 
  2657  0F21                     	;# 
  2658  0F22                     	;# 
  2659  0F23                     	;# 
  2660  0F24                     	;# 
  2661  0F25                     	;# 
  2662  0F26                     	;# 
  2663  0F27                     	;# 
  2664  0F28                     	;# 
  2665  0F29                     	;# 
  2666  0F2A                     	;# 
  2667  0F2B                     	;# 
  2668  0F2C                     	;# 
  2669  0F2D                     	;# 
  2670  0F2E                     	;# 
  2671  0F2F                     	;# 
  2672  0F30                     	;# 
  2673  0F31                     	;# 
  2674  0F32                     	;# 
  2675  0F33                     	;# 
  2676  0F34                     	;# 
  2677  0F35                     	;# 
  2678  0F36                     	;# 
  2679  0F37                     	;# 
  2680  0FE4                     	;# 
  2681  0FE5                     	;# 
  2682  0FE6                     	;# 
  2683  0FE7                     	;# 
  2684  0FE8                     	;# 
  2685  0FE9                     	;# 
  2686  0FEA                     	;# 
  2687  0FEB                     	;# 
  2688  0FED                     	;# 
  2689  0FEE                     	;# 
  2690  0FEF                     	;# 
  2691  0000                     	;# 
  2692  0001                     	;# 
  2693  0002                     	;# 
  2694  0003                     	;# 
  2695  0004                     	;# 
  2696  0005                     	;# 
  2697  0006                     	;# 
  2698  0007                     	;# 
  2699  0008                     	;# 
  2700  0009                     	;# 
  2701  000A                     	;# 
  2702  000B                     	;# 
  2703  000C                     	;# 
  2704  000D                     	;# 
  2705  000E                     	;# 
  2706  0010                     	;# 
  2707  0011                     	;# 
  2708  0012                     	;# 
  2709  0013                     	;# 
  2710  0014                     	;# 
  2711  0015                     	;# 
  2712  0015                     	;# 
  2713  0016                     	;# 
  2714  0016                     	;# 
  2715  0017                     	;# 
  2716  0018                     	;# 
  2717  0019                     	;# 
  2718  0019                     	;# 
  2719  001A                     	;# 
  2720  001B                     	;# 
  2721  001C                     	;# 
  2722  001D                     	;# 
  2723  001E                     	;# 
  2724  001F                     	;# 
  2725  008C                     	;# 
  2726  008D                     	;# 
  2727  008E                     	;# 
  2728  0090                     	;# 
  2729  0091                     	;# 
  2730  0092                     	;# 
  2731  0093                     	;# 
  2732  0094                     	;# 
  2733  0097                     	;# 
  2734  009B                     	;# 
  2735  009B                     	;# 
  2736  009C                     	;# 
  2737  009D                     	;# 
  2738  009E                     	;# 
  2739  009F                     	;# 
  2740  010C                     	;# 
  2741  010D                     	;# 
  2742  010E                     	;# 
  2743  0111                     	;# 
  2744  0112                     	;# 
  2745  0113                     	;# 
  2746  0114                     	;# 
  2747  0115                     	;# 
  2748  0116                     	;# 
  2749  0117                     	;# 
  2750  0118                     	;# 
  2751  0119                     	;# 
  2752  018C                     	;# 
  2753  018D                     	;# 
  2754  018E                     	;# 
  2755  0199                     	;# 
  2756  0199                     	;# 
  2757  0199                     	;# 
  2758  019A                     	;# 
  2759  019A                     	;# 
  2760  019A                     	;# 
  2761  019B                     	;# 
  2762  019B                     	;# 
  2763  019B                     	;# 
  2764  019B                     	;# 
  2765  019B                     	;# 
  2766  019C                     	;# 
  2767  019C                     	;# 
  2768  019C                     	;# 
  2769  019D                     	;# 
  2770  019D                     	;# 
  2771  019D                     	;# 
  2772  019E                     	;# 
  2773  019E                     	;# 
  2774  019E                     	;# 
  2775  019F                     	;# 
  2776  019F                     	;# 
  2777  019F                     	;# 
  2778  019F                     	;# 
  2779  019F                     	;# 
  2780  020C                     	;# 
  2781  020D                     	;# 
  2782  020E                     	;# 
  2783  0211                     	;# 
  2784  0211                     	;# 
  2785  0212                     	;# 
  2786  0212                     	;# 
  2787  0213                     	;# 
  2788  0213                     	;# 
  2789  0214                     	;# 
  2790  0214                     	;# 
  2791  0215                     	;# 
  2792  0215                     	;# 
  2793  0215                     	;# 
  2794  0215                     	;# 
  2795  0216                     	;# 
  2796  0216                     	;# 
  2797  0217                     	;# 
  2798  0217                     	;# 
  2799  0219                     	;# 
  2800  021A                     	;# 
  2801  021B                     	;# 
  2802  021C                     	;# 
  2803  021D                     	;# 
  2804  021D                     	;# 
  2805  021E                     	;# 
  2806  021F                     	;# 
  2807  028C                     	;# 
  2808  028D                     	;# 
  2809  028E                     	;# 
  2810  0291                     	;# 
  2811  0291                     	;# 
  2812  0292                     	;# 
  2813  0293                     	;# 
  2814  0294                     	;# 
  2815  0295                     	;# 
  2816  0295                     	;# 
  2817  0296                     	;# 
  2818  0297                     	;# 
  2819  0298                     	;# 
  2820  029F                     	;# 
  2821  030C                     	;# 
  2822  030D                     	;# 
  2823  030E                     	;# 
  2824  0311                     	;# 
  2825  0311                     	;# 
  2826  0312                     	;# 
  2827  0313                     	;# 
  2828  0314                     	;# 
  2829  0315                     	;# 
  2830  0315                     	;# 
  2831  0316                     	;# 
  2832  0317                     	;# 
  2833  0318                     	;# 
  2834  038C                     	;# 
  2835  038D                     	;# 
  2836  038E                     	;# 
  2837  0391                     	;# 
  2838  0392                     	;# 
  2839  0393                     	;# 
  2840  0394                     	;# 
  2841  0395                     	;# 
  2842  0396                     	;# 
  2843  0397                     	;# 
  2844  0398                     	;# 
  2845  0399                     	;# 
  2846  039A                     	;# 
  2847  039C                     	;# 
  2848  039D                     	;# 
  2849  039E                     	;# 
  2850  039F                     	;# 
  2851  0411                     	;# 
  2852  0411                     	;# 
  2853  0412                     	;# 
  2854  0413                     	;# 
  2855  0414                     	;# 
  2856  0415                     	;# 
  2857  0416                     	;# 
  2858  0417                     	;# 
  2859  0418                     	;# 
  2860  0418                     	;# 
  2861  0419                     	;# 
  2862  041A                     	;# 
  2863  041B                     	;# 
  2864  041C                     	;# 
  2865  041D                     	;# 
  2866  041E                     	;# 
  2867  041F                     	;# 
  2868  0498                     	;# 
  2869  0498                     	;# 
  2870  0499                     	;# 
  2871  049A                     	;# 
  2872  049B                     	;# 
  2873  049B                     	;# 
  2874  049C                     	;# 
  2875  049D                     	;# 
  2876  049E                     	;# 
  2877  049F                     	;# 
  2878  0617                     	;# 
  2879  0618                     	;# 
  2880  0619                     	;# 
  2881  0619                     	;# 
  2882  061A                     	;# 
  2883  061B                     	;# 
  2884  061C                     	;# 
  2885  061C                     	;# 
  2886  061F                     	;# 
  2887  0691                     	;# 
  2888  0692                     	;# 
  2889  0693                     	;# 
  2890  0694                     	;# 
  2891  0695                     	;# 
  2892  0696                     	;# 
  2893  0697                     	;# 
  2894  0698                     	;# 
  2895  0699                     	;# 
  2896  0711                     	;# 
  2897  0712                     	;# 
  2898  0713                     	;# 
  2899  0714                     	;# 
  2900  0715                     	;# 
  2901  0716                     	;# 
  2902  0717                     	;# 
  2903  0718                     	;# 
  2904  0719                     	;# 
  2905  0891                     	;# 
  2906  0891                     	;# 
  2907  0891                     	;# 
  2908  0891                     	;# 
  2909  0891                     	;# 
  2910  0891                     	;# 
  2911  0892                     	;# 
  2912  0892                     	;# 
  2913  0892                     	;# 
  2914  0893                     	;# 
  2915  0893                     	;# 
  2916  0893                     	;# 
  2917  0893                     	;# 
  2918  0893                     	;# 
  2919  0893                     	;# 
  2920  0894                     	;# 
  2921  0894                     	;# 
  2922  0894                     	;# 
  2923  0895                     	;# 
  2924  0895                     	;# 
  2925  0895                     	;# 
  2926  0896                     	;# 
  2927  0896                     	;# 
  2928  0896                     	;# 
  2929  089B                     	;# 
  2930  0911                     	;# 
  2931  0912                     	;# 
  2932  0913                     	;# 
  2933  0914                     	;# 
  2934  0915                     	;# 
  2935  0916                     	;# 
  2936  0918                     	;# 
  2937  0919                     	;# 
  2938  091A                     	;# 
  2939  091B                     	;# 
  2940  091C                     	;# 
  2941  091D                     	;# 
  2942  091E                     	;# 
  2943  091F                     	;# 
  2944  0E0F                     	;# 
  2945  0E10                     	;# 
  2946  0E11                     	;# 
  2947  0E12                     	;# 
  2948  0E13                     	;# 
  2949  0E14                     	;# 
  2950  0E15                     	;# 
  2951  0E16                     	;# 
  2952  0E17                     	;# 
  2953  0E18                     	;# 
  2954  0E19                     	;# 
  2955  0E1A                     	;# 
  2956  0E1B                     	;# 
  2957  0E1C                     	;# 
  2958  0E1D                     	;# 
  2959  0E1E                     	;# 
  2960  0E1F                     	;# 
  2961  0E20                     	;# 
  2962  0E21                     	;# 
  2963  0E22                     	;# 
  2964  0E24                     	;# 
  2965  0E25                     	;# 
  2966  0E28                     	;# 
  2967  0E29                     	;# 
  2968  0E2A                     	;# 
  2969  0E2B                     	;# 
  2970  0E2C                     	;# 
  2971  0E2D                     	;# 
  2972  0E2E                     	;# 
  2973  0E2F                     	;# 
  2974  0E90                     	;# 
  2975  0E91                     	;# 
  2976  0E92                     	;# 
  2977  0E94                     	;# 
  2978  0E95                     	;# 
  2979  0E9C                     	;# 
  2980  0E9D                     	;# 
  2981  0E9E                     	;# 
  2982  0E9F                     	;# 
  2983  0EA0                     	;# 
  2984  0EA1                     	;# 
  2985  0EA2                     	;# 
  2986  0EA3                     	;# 
  2987  0EA4                     	;# 
  2988  0EA5                     	;# 
  2989  0EA6                     	;# 
  2990  0EA7                     	;# 
  2991  0F0F                     	;# 
  2992  0F10                     	;# 
  2993  0F11                     	;# 
  2994  0F12                     	;# 
  2995  0F13                     	;# 
  2996  0F14                     	;# 
  2997  0F15                     	;# 
  2998  0F16                     	;# 
  2999  0F17                     	;# 
  3000  0F18                     	;# 
  3001  0F19                     	;# 
  3002  0F1A                     	;# 
  3003  0F1B                     	;# 
  3004  0F1C                     	;# 
  3005  0F1D                     	;# 
  3006  0F1E                     	;# 
  3007  0F1F                     	;# 
  3008  0F20                     	;# 
  3009  0F21                     	;# 
  3010  0F22                     	;# 
  3011  0F23                     	;# 
  3012  0F24                     	;# 
  3013  0F25                     	;# 
  3014  0F26                     	;# 
  3015  0F27                     	;# 
  3016  0F28                     	;# 
  3017  0F29                     	;# 
  3018  0F2A                     	;# 
  3019  0F2B                     	;# 
  3020  0F2C                     	;# 
  3021  0F2D                     	;# 
  3022  0F2E                     	;# 
  3023  0F2F                     	;# 
  3024  0F30                     	;# 
  3025  0F31                     	;# 
  3026  0F32                     	;# 
  3027  0F33                     	;# 
  3028  0F34                     	;# 
  3029  0F35                     	;# 
  3030  0F36                     	;# 
  3031  0F37                     	;# 
  3032  0FE4                     	;# 
  3033  0FE5                     	;# 
  3034  0FE6                     	;# 
  3035  0FE7                     	;# 
  3036  0FE8                     	;# 
  3037  0FE9                     	;# 
  3038  0FEA                     	;# 
  3039  0FEB                     	;# 
  3040  0FED                     	;# 
  3041  0FEE                     	;# 
  3042  0FEF                     	;# 
  3043  0000                     	;# 
  3044  0001                     	;# 
  3045  0002                     	;# 
  3046  0003                     	;# 
  3047  0004                     	;# 
  3048  0005                     	;# 
  3049  0006                     	;# 
  3050  0007                     	;# 
  3051  0008                     	;# 
  3052  0009                     	;# 
  3053  000A                     	;# 
  3054  000B                     	;# 
  3055  000C                     	;# 
  3056  000D                     	;# 
  3057  000E                     	;# 
  3058  0010                     	;# 
  3059  0011                     	;# 
  3060  0012                     	;# 
  3061  0013                     	;# 
  3062  0014                     	;# 
  3063  0015                     	;# 
  3064  0015                     	;# 
  3065  0016                     	;# 
  3066  0016                     	;# 
  3067  0017                     	;# 
  3068  0018                     	;# 
  3069  0019                     	;# 
  3070  0019                     	;# 
  3071  001A                     	;# 
  3072  001B                     	;# 
  3073  001C                     	;# 
  3074  001D                     	;# 
  3075  001E                     	;# 
  3076  001F                     	;# 
  3077  008C                     	;# 
  3078  008D                     	;# 
  3079  008E                     	;# 
  3080  0090                     	;# 
  3081  0091                     	;# 
  3082  0092                     	;# 
  3083  0093                     	;# 
  3084  0094                     	;# 
  3085  0097                     	;# 
  3086  009B                     	;# 
  3087  009B                     	;# 
  3088  009C                     	;# 
  3089  009D                     	;# 
  3090  009E                     	;# 
  3091  009F                     	;# 
  3092  010C                     	;# 
  3093  010D                     	;# 
  3094  010E                     	;# 
  3095  0111                     	;# 
  3096  0112                     	;# 
  3097  0113                     	;# 
  3098  0114                     	;# 
  3099  0115                     	;# 
  3100  0116                     	;# 
  3101  0117                     	;# 
  3102  0118                     	;# 
  3103  0119                     	;# 
  3104  018C                     	;# 
  3105  018D                     	;# 
  3106  018E                     	;# 
  3107  0199                     	;# 
  3108  0199                     	;# 
  3109  0199                     	;# 
  3110  019A                     	;# 
  3111  019A                     	;# 
  3112  019A                     	;# 
  3113  019B                     	;# 
  3114  019B                     	;# 
  3115  019B                     	;# 
  3116  019B                     	;# 
  3117  019B                     	;# 
  3118  019C                     	;# 
  3119  019C                     	;# 
  3120  019C                     	;# 
  3121  019D                     	;# 
  3122  019D                     	;# 
  3123  019D                     	;# 
  3124  019E                     	;# 
  3125  019E                     	;# 
  3126  019E                     	;# 
  3127  019F                     	;# 
  3128  019F                     	;# 
  3129  019F                     	;# 
  3130  019F                     	;# 
  3131  019F                     	;# 
  3132  020C                     	;# 
  3133  020D                     	;# 
  3134  020E                     	;# 
  3135  0211                     	;# 
  3136  0211                     	;# 
  3137  0212                     	;# 
  3138  0212                     	;# 
  3139  0213                     	;# 
  3140  0213                     	;# 
  3141  0214                     	;# 
  3142  0214                     	;# 
  3143  0215                     	;# 
  3144  0215                     	;# 
  3145  0215                     	;# 
  3146  0215                     	;# 
  3147  0216                     	;# 
  3148  0216                     	;# 
  3149  0217                     	;# 
  3150  0217                     	;# 
  3151  0219                     	;# 
  3152  021A                     	;# 
  3153  021B                     	;# 
  3154  021C                     	;# 
  3155  021D                     	;# 
  3156  021D                     	;# 
  3157  021E                     	;# 
  3158  021F                     	;# 
  3159  028C                     	;# 
  3160  028D                     	;# 
  3161  028E                     	;# 
  3162  0291                     	;# 
  3163  0291                     	;# 
  3164  0292                     	;# 
  3165  0293                     	;# 
  3166  0294                     	;# 
  3167  0295                     	;# 
  3168  0295                     	;# 
  3169  0296                     	;# 
  3170  0297                     	;# 
  3171  0298                     	;# 
  3172  029F                     	;# 
  3173  030C                     	;# 
  3174  030D                     	;# 
  3175  030E                     	;# 
  3176  0311                     	;# 
  3177  0311                     	;# 
  3178  0312                     	;# 
  3179  0313                     	;# 
  3180  0314                     	;# 
  3181  0315                     	;# 
  3182  0315                     	;# 
  3183  0316                     	;# 
  3184  0317                     	;# 
  3185  0318                     	;# 
  3186  038C                     	;# 
  3187  038D                     	;# 
  3188  038E                     	;# 
  3189  0391                     	;# 
  3190  0392                     	;# 
  3191  0393                     	;# 
  3192  0394                     	;# 
  3193  0395                     	;# 
  3194  0396                     	;# 
  3195  0397                     	;# 
  3196  0398                     	;# 
  3197  0399                     	;# 
  3198  039A                     	;# 
  3199  039C                     	;# 
  3200  039D                     	;# 
  3201  039E                     	;# 
  3202  039F                     	;# 
  3203  0411                     	;# 
  3204  0411                     	;# 
  3205  0412                     	;# 
  3206  0413                     	;# 
  3207  0414                     	;# 
  3208  0415                     	;# 
  3209  0416                     	;# 
  3210  0417                     	;# 
  3211  0418                     	;# 
  3212  0418                     	;# 
  3213  0419                     	;# 
  3214  041A                     	;# 
  3215  041B                     	;# 
  3216  041C                     	;# 
  3217  041D                     	;# 
  3218  041E                     	;# 
  3219  041F                     	;# 
  3220  0498                     	;# 
  3221  0498                     	;# 
  3222  0499                     	;# 
  3223  049A                     	;# 
  3224  049B                     	;# 
  3225  049B                     	;# 
  3226  049C                     	;# 
  3227  049D                     	;# 
  3228  049E                     	;# 
  3229  049F                     	;# 
  3230  0617                     	;# 
  3231  0618                     	;# 
  3232  0619                     	;# 
  3233  0619                     	;# 
  3234  061A                     	;# 
  3235  061B                     	;# 
  3236  061C                     	;# 
  3237  061C                     	;# 
  3238  061F                     	;# 
  3239  0691                     	;# 
  3240  0692                     	;# 
  3241  0693                     	;# 
  3242  0694                     	;# 
  3243  0695                     	;# 
  3244  0696                     	;# 
  3245  0697                     	;# 
  3246  0698                     	;# 
  3247  0699                     	;# 
  3248  0711                     	;# 
  3249  0712                     	;# 
  3250  0713                     	;# 
  3251  0714                     	;# 
  3252  0715                     	;# 
  3253  0716                     	;# 
  3254  0717                     	;# 
  3255  0718                     	;# 
  3256  0719                     	;# 
  3257  0891                     	;# 
  3258  0891                     	;# 
  3259  0891                     	;# 
  3260  0891                     	;# 
  3261  0891                     	;# 
  3262  0891                     	;# 
  3263  0892                     	;# 
  3264  0892                     	;# 
  3265  0892                     	;# 
  3266  0893                     	;# 
  3267  0893                     	;# 
  3268  0893                     	;# 
  3269  0893                     	;# 
  3270  0893                     	;# 
  3271  0893                     	;# 
  3272  0894                     	;# 
  3273  0894                     	;# 
  3274  0894                     	;# 
  3275  0895                     	;# 
  3276  0895                     	;# 
  3277  0895                     	;# 
  3278  0896                     	;# 
  3279  0896                     	;# 
  3280  0896                     	;# 
  3281  089B                     	;# 
  3282  0911                     	;# 
  3283  0912                     	;# 
  3284  0913                     	;# 
  3285  0914                     	;# 
  3286  0915                     	;# 
  3287  0916                     	;# 
  3288  0918                     	;# 
  3289  0919                     	;# 
  3290  091A                     	;# 
  3291  091B                     	;# 
  3292  091C                     	;# 
  3293  091D                     	;# 
  3294  091E                     	;# 
  3295  091F                     	;# 
  3296  0E0F                     	;# 
  3297  0E10                     	;# 
  3298  0E11                     	;# 
  3299  0E12                     	;# 
  3300  0E13                     	;# 
  3301  0E14                     	;# 
  3302  0E15                     	;# 
  3303  0E16                     	;# 
  3304  0E17                     	;# 
  3305  0E18                     	;# 
  3306  0E19                     	;# 
  3307  0E1A                     	;# 
  3308  0E1B                     	;# 
  3309  0E1C                     	;# 
  3310  0E1D                     	;# 
  3311  0E1E                     	;# 
  3312  0E1F                     	;# 
  3313  0E20                     	;# 
  3314  0E21                     	;# 
  3315  0E22                     	;# 
  3316  0E24                     	;# 
  3317  0E25                     	;# 
  3318  0E28                     	;# 
  3319  0E29                     	;# 
  3320  0E2A                     	;# 
  3321  0E2B                     	;# 
  3322  0E2C                     	;# 
  3323  0E2D                     	;# 
  3324  0E2E                     	;# 
  3325  0E2F                     	;# 
  3326  0E90                     	;# 
  3327  0E91                     	;# 
  3328  0E92                     	;# 
  3329  0E94                     	;# 
  3330  0E95                     	;# 
  3331  0E9C                     	;# 
  3332  0E9D                     	;# 
  3333  0E9E                     	;# 
  3334  0E9F                     	;# 
  3335  0EA0                     	;# 
  3336  0EA1                     	;# 
  3337  0EA2                     	;# 
  3338  0EA3                     	;# 
  3339  0EA4                     	;# 
  3340  0EA5                     	;# 
  3341  0EA6                     	;# 
  3342  0EA7                     	;# 
  3343  0F0F                     	;# 
  3344  0F10                     	;# 
  3345  0F11                     	;# 
  3346  0F12                     	;# 
  3347  0F13                     	;# 
  3348  0F14                     	;# 
  3349  0F15                     	;# 
  3350  0F16                     	;# 
  3351  0F17                     	;# 
  3352  0F18                     	;# 
  3353  0F19                     	;# 
  3354  0F1A                     	;# 
  3355  0F1B                     	;# 
  3356  0F1C                     	;# 
  3357  0F1D                     	;# 
  3358  0F1E                     	;# 
  3359  0F1F                     	;# 
  3360  0F20                     	;# 
  3361  0F21                     	;# 
  3362  0F22                     	;# 
  3363  0F23                     	;# 
  3364  0F24                     	;# 
  3365  0F25                     	;# 
  3366  0F26                     	;# 
  3367  0F27                     	;# 
  3368  0F28                     	;# 
  3369  0F29                     	;# 
  3370  0F2A                     	;# 
  3371  0F2B                     	;# 
  3372  0F2C                     	;# 
  3373  0F2D                     	;# 
  3374  0F2E                     	;# 
  3375  0F2F                     	;# 
  3376  0F30                     	;# 
  3377  0F31                     	;# 
  3378  0F32                     	;# 
  3379  0F33                     	;# 
  3380  0F34                     	;# 
  3381  0F35                     	;# 
  3382  0F36                     	;# 
  3383  0F37                     	;# 
  3384  0FE4                     	;# 
  3385  0FE5                     	;# 
  3386  0FE6                     	;# 
  3387  0FE7                     	;# 
  3388  0FE8                     	;# 
  3389  0FE9                     	;# 
  3390  0FEA                     	;# 
  3391  0FEB                     	;# 
  3392  0FED                     	;# 
  3393  0FEE                     	;# 
  3394  0FEF                     	;# 
  3395  0000                     	;# 
  3396  0001                     	;# 
  3397  0002                     	;# 
  3398  0003                     	;# 
  3399  0004                     	;# 
  3400  0005                     	;# 
  3401  0006                     	;# 
  3402  0007                     	;# 
  3403  0008                     	;# 
  3404  0009                     	;# 
  3405  000A                     	;# 
  3406  000B                     	;# 
  3407  000C                     	;# 
  3408  000D                     	;# 
  3409  000E                     	;# 
  3410  0010                     	;# 
  3411  0011                     	;# 
  3412  0012                     	;# 
  3413  0013                     	;# 
  3414  0014                     	;# 
  3415  0015                     	;# 
  3416  0015                     	;# 
  3417  0016                     	;# 
  3418  0016                     	;# 
  3419  0017                     	;# 
  3420  0018                     	;# 
  3421  0019                     	;# 
  3422  0019                     	;# 
  3423  001A                     	;# 
  3424  001B                     	;# 
  3425  001C                     	;# 
  3426  001D                     	;# 
  3427  001E                     	;# 
  3428  001F                     	;# 
  3429  008C                     	;# 
  3430  008D                     	;# 
  3431  008E                     	;# 
  3432  0090                     	;# 
  3433  0091                     	;# 
  3434  0092                     	;# 
  3435  0093                     	;# 
  3436  0094                     	;# 
  3437  0097                     	;# 
  3438  009B                     	;# 
  3439  009B                     	;# 
  3440  009C                     	;# 
  3441  009D                     	;# 
  3442  009E                     	;# 
  3443  009F                     	;# 
  3444  010C                     	;# 
  3445  010D                     	;# 
  3446  010E                     	;# 
  3447  0111                     	;# 
  3448  0112                     	;# 
  3449  0113                     	;# 
  3450  0114                     	;# 
  3451  0115                     	;# 
  3452  0116                     	;# 
  3453  0117                     	;# 
  3454  0118                     	;# 
  3455  0119                     	;# 
  3456  018C                     	;# 
  3457  018D                     	;# 
  3458  018E                     	;# 
  3459  0199                     	;# 
  3460  0199                     	;# 
  3461  0199                     	;# 
  3462  019A                     	;# 
  3463  019A                     	;# 
  3464  019A                     	;# 
  3465  019B                     	;# 
  3466  019B                     	;# 
  3467  019B                     	;# 
  3468  019B                     	;# 
  3469  019B                     	;# 
  3470  019C                     	;# 
  3471  019C                     	;# 
  3472  019C                     	;# 
  3473  019D                     	;# 
  3474  019D                     	;# 
  3475  019D                     	;# 
  3476  019E                     	;# 
  3477  019E                     	;# 
  3478  019E                     	;# 
  3479  019F                     	;# 
  3480  019F                     	;# 
  3481  019F                     	;# 
  3482  019F                     	;# 
  3483  019F                     	;# 
  3484  020C                     	;# 
  3485  020D                     	;# 
  3486  020E                     	;# 
  3487  0211                     	;# 
  3488  0211                     	;# 
  3489  0212                     	;# 
  3490  0212                     	;# 
  3491  0213                     	;# 
  3492  0213                     	;# 
  3493  0214                     	;# 
  3494  0214                     	;# 
  3495  0215                     	;# 
  3496  0215                     	;# 
  3497  0215                     	;# 
  3498  0215                     	;# 
  3499  0216                     	;# 
  3500  0216                     	;# 
  3501  0217                     	;# 
  3502  0217                     	;# 
  3503  0219                     	;# 
  3504  021A                     	;# 
  3505  021B                     	;# 
  3506  021C                     	;# 
  3507  021D                     	;# 
  3508  021D                     	;# 
  3509  021E                     	;# 
  3510  021F                     	;# 
  3511  028C                     	;# 
  3512  028D                     	;# 
  3513  028E                     	;# 
  3514  0291                     	;# 
  3515  0291                     	;# 
  3516  0292                     	;# 
  3517  0293                     	;# 
  3518  0294                     	;# 
  3519  0295                     	;# 
  3520  0295                     	;# 
  3521  0296                     	;# 
  3522  0297                     	;# 
  3523  0298                     	;# 
  3524  029F                     	;# 
  3525  030C                     	;# 
  3526  030D                     	;# 
  3527  030E                     	;# 
  3528  0311                     	;# 
  3529  0311                     	;# 
  3530  0312                     	;# 
  3531  0313                     	;# 
  3532  0314                     	;# 
  3533  0315                     	;# 
  3534  0315                     	;# 
  3535  0316                     	;# 
  3536  0317                     	;# 
  3537  0318                     	;# 
  3538  038C                     	;# 
  3539  038D                     	;# 
  3540  038E                     	;# 
  3541  0391                     	;# 
  3542  0392                     	;# 
  3543  0393                     	;# 
  3544  0394                     	;# 
  3545  0395                     	;# 
  3546  0396                     	;# 
  3547  0397                     	;# 
  3548  0398                     	;# 
  3549  0399                     	;# 
  3550  039A                     	;# 
  3551  039C                     	;# 
  3552  039D                     	;# 
  3553  039E                     	;# 
  3554  039F                     	;# 
  3555  0411                     	;# 
  3556  0411                     	;# 
  3557  0412                     	;# 
  3558  0413                     	;# 
  3559  0414                     	;# 
  3560  0415                     	;# 
  3561  0416                     	;# 
  3562  0417                     	;# 
  3563  0418                     	;# 
  3564  0418                     	;# 
  3565  0419                     	;# 
  3566  041A                     	;# 
  3567  041B                     	;# 
  3568  041C                     	;# 
  3569  041D                     	;# 
  3570  041E                     	;# 
  3571  041F                     	;# 
  3572  0498                     	;# 
  3573  0498                     	;# 
  3574  0499                     	;# 
  3575  049A                     	;# 
  3576  049B                     	;# 
  3577  049B                     	;# 
  3578  049C                     	;# 
  3579  049D                     	;# 
  3580  049E                     	;# 
  3581  049F                     	;# 
  3582  0617                     	;# 
  3583  0618                     	;# 
  3584  0619                     	;# 
  3585  0619                     	;# 
  3586  061A                     	;# 
  3587  061B                     	;# 
  3588  061C                     	;# 
  3589  061C                     	;# 
  3590  061F                     	;# 
  3591  0691                     	;# 
  3592  0692                     	;# 
  3593  0693                     	;# 
  3594  0694                     	;# 
  3595  0695                     	;# 
  3596  0696                     	;# 
  3597  0697                     	;# 
  3598  0698                     	;# 
  3599  0699                     	;# 
  3600  0711                     	;# 
  3601  0712                     	;# 
  3602  0713                     	;# 
  3603  0714                     	;# 
  3604  0715                     	;# 
  3605  0716                     	;# 
  3606  0717                     	;# 
  3607  0718                     	;# 
  3608  0719                     	;# 
  3609  0891                     	;# 
  3610  0891                     	;# 
  3611  0891                     	;# 
  3612  0891                     	;# 
  3613  0891                     	;# 
  3614  0891                     	;# 
  3615  0892                     	;# 
  3616  0892                     	;# 
  3617  0892                     	;# 
  3618  0893                     	;# 
  3619  0893                     	;# 
  3620  0893                     	;# 
  3621  0893                     	;# 
  3622  0893                     	;# 
  3623  0893                     	;# 
  3624  0894                     	;# 
  3625  0894                     	;# 
  3626  0894                     	;# 
  3627  0895                     	;# 
  3628  0895                     	;# 
  3629  0895                     	;# 
  3630  0896                     	;# 
  3631  0896                     	;# 
  3632  0896                     	;# 
  3633  089B                     	;# 
  3634  0911                     	;# 
  3635  0912                     	;# 
  3636  0913                     	;# 
  3637  0914                     	;# 
  3638  0915                     	;# 
  3639  0916                     	;# 
  3640  0918                     	;# 
  3641  0919                     	;# 
  3642  091A                     	;# 
  3643  091B                     	;# 
  3644  091C                     	;# 
  3645  091D                     	;# 
  3646  091E                     	;# 
  3647  091F                     	;# 
  3648  0E0F                     	;# 
  3649  0E10                     	;# 
  3650  0E11                     	;# 
  3651  0E12                     	;# 
  3652  0E13                     	;# 
  3653  0E14                     	;# 
  3654  0E15                     	;# 
  3655  0E16                     	;# 
  3656  0E17                     	;# 
  3657  0E18                     	;# 
  3658  0E19                     	;# 
  3659  0E1A                     	;# 
  3660  0E1B                     	;# 
  3661  0E1C                     	;# 
  3662  0E1D                     	;# 
  3663  0E1E                     	;# 
  3664  0E1F                     	;# 
  3665  0E20                     	;# 
  3666  0E21                     	;# 
  3667  0E22                     	;# 
  3668  0E24                     	;# 
  3669  0E25                     	;# 
  3670  0E28                     	;# 
  3671  0E29                     	;# 
  3672  0E2A                     	;# 
  3673  0E2B                     	;# 
  3674  0E2C                     	;# 
  3675  0E2D                     	;# 
  3676  0E2E                     	;# 
  3677  0E2F                     	;# 
  3678  0E90                     	;# 
  3679  0E91                     	;# 
  3680  0E92                     	;# 
  3681  0E94                     	;# 
  3682  0E95                     	;# 
  3683  0E9C                     	;# 
  3684  0E9D                     	;# 
  3685  0E9E                     	;# 
  3686  0E9F                     	;# 
  3687  0EA0                     	;# 
  3688  0EA1                     	;# 
  3689  0EA2                     	;# 
  3690  0EA3                     	;# 
  3691  0EA4                     	;# 
  3692  0EA5                     	;# 
  3693  0EA6                     	;# 
  3694  0EA7                     	;# 
  3695  0F0F                     	;# 
  3696  0F10                     	;# 
  3697  0F11                     	;# 
  3698  0F12                     	;# 
  3699  0F13                     	;# 
  3700  0F14                     	;# 
  3701  0F15                     	;# 
  3702  0F16                     	;# 
  3703  0F17                     	;# 
  3704  0F18                     	;# 
  3705  0F19                     	;# 
  3706  0F1A                     	;# 
  3707  0F1B                     	;# 
  3708  0F1C                     	;# 
  3709  0F1D                     	;# 
  3710  0F1E                     	;# 
  3711  0F1F                     	;# 
  3712  0F20                     	;# 
  3713  0F21                     	;# 
  3714  0F22                     	;# 
  3715  0F23                     	;# 
  3716  0F24                     	;# 
  3717  0F25                     	;# 
  3718  0F26                     	;# 
  3719  0F27                     	;# 
  3720  0F28                     	;# 
  3721  0F29                     	;# 
  3722  0F2A                     	;# 
  3723  0F2B                     	;# 
  3724  0F2C                     	;# 
  3725  0F2D                     	;# 
  3726  0F2E                     	;# 
  3727  0F2F                     	;# 
  3728  0F30                     	;# 
  3729  0F31                     	;# 
  3730  0F32                     	;# 
  3731  0F33                     	;# 
  3732  0F34                     	;# 
  3733  0F35                     	;# 
  3734  0F36                     	;# 
  3735  0F37                     	;# 
  3736  0FE4                     	;# 
  3737  0FE5                     	;# 
  3738  0FE6                     	;# 
  3739  0FE7                     	;# 
  3740  0FE8                     	;# 
  3741  0FE9                     	;# 
  3742  0FEA                     	;# 
  3743  0FEB                     	;# 
  3744  0FED                     	;# 
  3745  0FEE                     	;# 
  3746  0FEF                     	;# 
  3747  0000                     	;# 
  3748  0001                     	;# 
  3749  0002                     	;# 
  3750  0003                     	;# 
  3751  0004                     	;# 
  3752  0005                     	;# 
  3753  0006                     	;# 
  3754  0007                     	;# 
  3755  0008                     	;# 
  3756  0009                     	;# 
  3757  000A                     	;# 
  3758  000B                     	;# 
  3759  000C                     	;# 
  3760  000D                     	;# 
  3761  000E                     	;# 
  3762  0010                     	;# 
  3763  0011                     	;# 
  3764  0012                     	;# 
  3765  0013                     	;# 
  3766  0014                     	;# 
  3767  0015                     	;# 
  3768  0015                     	;# 
  3769  0016                     	;# 
  3770  0016                     	;# 
  3771  0017                     	;# 
  3772  0018                     	;# 
  3773  0019                     	;# 
  3774  0019                     	;# 
  3775  001A                     	;# 
  3776  001B                     	;# 
  3777  001C                     	;# 
  3778  001D                     	;# 
  3779  001E                     	;# 
  3780  001F                     	;# 
  3781  008C                     	;# 
  3782  008D                     	;# 
  3783  008E                     	;# 
  3784  0090                     	;# 
  3785  0091                     	;# 
  3786  0092                     	;# 
  3787  0093                     	;# 
  3788  0094                     	;# 
  3789  0097                     	;# 
  3790  009B                     	;# 
  3791  009B                     	;# 
  3792  009C                     	;# 
  3793  009D                     	;# 
  3794  009E                     	;# 
  3795  009F                     	;# 
  3796  010C                     	;# 
  3797  010D                     	;# 
  3798  010E                     	;# 
  3799  0111                     	;# 
  3800  0112                     	;# 
  3801  0113                     	;# 
  3802  0114                     	;# 
  3803  0115                     	;# 
  3804  0116                     	;# 
  3805  0117                     	;# 
  3806  0118                     	;# 
  3807  0119                     	;# 
  3808  018C                     	;# 
  3809  018D                     	;# 
  3810  018E                     	;# 
  3811  0199                     	;# 
  3812  0199                     	;# 
  3813  0199                     	;# 
  3814  019A                     	;# 
  3815  019A                     	;# 
  3816  019A                     	;# 
  3817  019B                     	;# 
  3818  019B                     	;# 
  3819  019B                     	;# 
  3820  019B                     	;# 
  3821  019B                     	;# 
  3822  019C                     	;# 
  3823  019C                     	;# 
  3824  019C                     	;# 
  3825  019D                     	;# 
  3826  019D                     	;# 
  3827  019D                     	;# 
  3828  019E                     	;# 
  3829  019E                     	;# 
  3830  019E                     	;# 
  3831  019F                     	;# 
  3832  019F                     	;# 
  3833  019F                     	;# 
  3834  019F                     	;# 
  3835  019F                     	;# 
  3836  020C                     	;# 
  3837  020D                     	;# 
  3838  020E                     	;# 
  3839  0211                     	;# 
  3840  0211                     	;# 
  3841  0212                     	;# 
  3842  0212                     	;# 
  3843  0213                     	;# 
  3844  0213                     	;# 
  3845  0214                     	;# 
  3846  0214                     	;# 
  3847  0215                     	;# 
  3848  0215                     	;# 
  3849  0215                     	;# 
  3850  0215                     	;# 
  3851  0216                     	;# 
  3852  0216                     	;# 
  3853  0217                     	;# 
  3854  0217                     	;# 
  3855  0219                     	;# 
  3856  021A                     	;# 
  3857  021B                     	;# 
  3858  021C                     	;# 
  3859  021D                     	;# 
  3860  021D                     	;# 
  3861  021E                     	;# 
  3862  021F                     	;# 
  3863  028C                     	;# 
  3864  028D                     	;# 
  3865  028E                     	;# 
  3866  0291                     	;# 
  3867  0291                     	;# 
  3868  0292                     	;# 
  3869  0293                     	;# 
  3870  0294                     	;# 
  3871  0295                     	;# 
  3872  0295                     	;# 
  3873  0296                     	;# 
  3874  0297                     	;# 
  3875  0298                     	;# 
  3876  029F                     	;# 
  3877  030C                     	;# 
  3878  030D                     	;# 
  3879  030E                     	;# 
  3880  0311                     	;# 
  3881  0311                     	;# 
  3882  0312                     	;# 
  3883  0313                     	;# 
  3884  0314                     	;# 
  3885  0315                     	;# 
  3886  0315                     	;# 
  3887  0316                     	;# 
  3888  0317                     	;# 
  3889  0318                     	;# 
  3890  038C                     	;# 
  3891  038D                     	;# 
  3892  038E                     	;# 
  3893  0391                     	;# 
  3894  0392                     	;# 
  3895  0393                     	;# 
  3896  0394                     	;# 
  3897  0395                     	;# 
  3898  0396                     	;# 
  3899  0397                     	;# 
  3900  0398                     	;# 
  3901  0399                     	;# 
  3902  039A                     	;# 
  3903  039C                     	;# 
  3904  039D                     	;# 
  3905  039E                     	;# 
  3906  039F                     	;# 
  3907  0411                     	;# 
  3908  0411                     	;# 
  3909  0412                     	;# 
  3910  0413                     	;# 
  3911  0414                     	;# 
  3912  0415                     	;# 
  3913  0416                     	;# 
  3914  0417                     	;# 
  3915  0418                     	;# 
  3916  0418                     	;# 
  3917  0419                     	;# 
  3918  041A                     	;# 
  3919  041B                     	;# 
  3920  041C                     	;# 
  3921  041D                     	;# 
  3922  041E                     	;# 
  3923  041F                     	;# 
  3924  0498                     	;# 
  3925  0498                     	;# 
  3926  0499                     	;# 
  3927  049A                     	;# 
  3928  049B                     	;# 
  3929  049B                     	;# 
  3930  049C                     	;# 
  3931  049D                     	;# 
  3932  049E                     	;# 
  3933  049F                     	;# 
  3934  0617                     	;# 
  3935  0618                     	;# 
  3936  0619                     	;# 
  3937  0619                     	;# 
  3938  061A                     	;# 
  3939  061B                     	;# 
  3940  061C                     	;# 
  3941  061C                     	;# 
  3942  061F                     	;# 
  3943  0691                     	;# 
  3944  0692                     	;# 
  3945  0693                     	;# 
  3946  0694                     	;# 
  3947  0695                     	;# 
  3948  0696                     	;# 
  3949  0697                     	;# 
  3950  0698                     	;# 
  3951  0699                     	;# 
  3952  0711                     	;# 
  3953  0712                     	;# 
  3954  0713                     	;# 
  3955  0714                     	;# 
  3956  0715                     	;# 
  3957  0716                     	;# 
  3958  0717                     	;# 
  3959  0718                     	;# 
  3960  0719                     	;# 
  3961  0891                     	;# 
  3962  0891                     	;# 
  3963  0891                     	;# 
  3964  0891                     	;# 
  3965  0891                     	;# 
  3966  0891                     	;# 
  3967  0892                     	;# 
  3968  0892                     	;# 
  3969  0892                     	;# 
  3970  0893                     	;# 
  3971  0893                     	;# 
  3972  0893                     	;# 
  3973  0893                     	;# 
  3974  0893                     	;# 
  3975  0893                     	;# 
  3976  0894                     	;# 
  3977  0894                     	;# 
  3978  0894                     	;# 
  3979  0895                     	;# 
  3980  0895                     	;# 
  3981  0895                     	;# 
  3982  0896                     	;# 
  3983  0896                     	;# 
  3984  0896                     	;# 
  3985  089B                     	;# 
  3986  0911                     	;# 
  3987  0912                     	;# 
  3988  0913                     	;# 
  3989  0914                     	;# 
  3990  0915                     	;# 
  3991  0916                     	;# 
  3992  0918                     	;# 
  3993  0919                     	;# 
  3994  091A                     	;# 
  3995  091B                     	;# 
  3996  091C                     	;# 
  3997  091D                     	;# 
  3998  091E                     	;# 
  3999  091F                     	;# 
  4000  0E0F                     	;# 
  4001  0E10                     	;# 
  4002  0E11                     	;# 
  4003  0E12                     	;# 
  4004  0E13                     	;# 
  4005  0E14                     	;# 
  4006  0E15                     	;# 
  4007  0E16                     	;# 
  4008  0E17                     	;# 
  4009  0E18                     	;# 
  4010  0E19                     	;# 
  4011  0E1A                     	;# 
  4012  0E1B                     	;# 
  4013  0E1C                     	;# 
  4014  0E1D                     	;# 
  4015  0E1E                     	;# 
  4016  0E1F                     	;# 
  4017  0E20                     	;# 
  4018  0E21                     	;# 
  4019  0E22                     	;# 
  4020  0E24                     	;# 
  4021  0E25                     	;# 
  4022  0E28                     	;# 
  4023  0E29                     	;# 
  4024  0E2A                     	;# 
  4025  0E2B                     	;# 
  4026  0E2C                     	;# 
  4027  0E2D                     	;# 
  4028  0E2E                     	;# 
  4029  0E2F                     	;# 
  4030  0E90                     	;# 
  4031  0E91                     	;# 
  4032  0E92                     	;# 
  4033  0E94                     	;# 
  4034  0E95                     	;# 
  4035  0E9C                     	;# 
  4036  0E9D                     	;# 
  4037  0E9E                     	;# 
  4038  0E9F                     	;# 
  4039  0EA0                     	;# 
  4040  0EA1                     	;# 
  4041  0EA2                     	;# 
  4042  0EA3                     	;# 
  4043  0EA4                     	;# 
  4044  0EA5                     	;# 
  4045  0EA6                     	;# 
  4046  0EA7                     	;# 
  4047  0F0F                     	;# 
  4048  0F10                     	;# 
  4049  0F11                     	;# 
  4050  0F12                     	;# 
  4051  0F13                     	;# 
  4052  0F14                     	;# 
  4053  0F15                     	;# 
  4054  0F16                     	;# 
  4055  0F17                     	;# 
  4056  0F18                     	;# 
  4057  0F19                     	;# 
  4058  0F1A                     	;# 
  4059  0F1B                     	;# 
  4060  0F1C                     	;# 
  4061  0F1D                     	;# 
  4062  0F1E                     	;# 
  4063  0F1F                     	;# 
  4064  0F20                     	;# 
  4065  0F21                     	;# 
  4066  0F22                     	;# 
  4067  0F23                     	;# 
  4068  0F24                     	;# 
  4069  0F25                     	;# 
  4070  0F26                     	;# 
  4071  0F27                     	;# 
  4072  0F28                     	;# 
  4073  0F29                     	;# 
  4074  0F2A                     	;# 
  4075  0F2B                     	;# 
  4076  0F2C                     	;# 
  4077  0F2D                     	;# 
  4078  0F2E                     	;# 
  4079  0F2F                     	;# 
  4080  0F30                     	;# 
  4081  0F31                     	;# 
  4082  0F32                     	;# 
  4083  0F33                     	;# 
  4084  0F34                     	;# 
  4085  0F35                     	;# 
  4086  0F36                     	;# 
  4087  0F37                     	;# 
  4088  0FE4                     	;# 
  4089  0FE5                     	;# 
  4090  0FE6                     	;# 
  4091  0FE7                     	;# 
  4092  0FE8                     	;# 
  4093  0FE9                     	;# 
  4094  0FEA                     	;# 
  4095  0FEB                     	;# 
  4096  0FED                     	;# 
  4097  0FEE                     	;# 
  4098  0FEF                     	;# 
  4099  0000                     	;# 
  4100  0001                     	;# 
  4101  0002                     	;# 
  4102  0003                     	;# 
  4103  0004                     	;# 
  4104  0005                     	;# 
  4105  0006                     	;# 
  4106  0007                     	;# 
  4107  0008                     	;# 
  4108  0009                     	;# 
  4109  000A                     	;# 
  4110  000B                     	;# 
  4111  000C                     	;# 
  4112  000D                     	;# 
  4113  000E                     	;# 
  4114  0010                     	;# 
  4115  0011                     	;# 
  4116  0012                     	;# 
  4117  0013                     	;# 
  4118  0014                     	;# 
  4119  0015                     	;# 
  4120  0015                     	;# 
  4121  0016                     	;# 
  4122  0016                     	;# 
  4123  0017                     	;# 
  4124  0018                     	;# 
  4125  0019                     	;# 
  4126  0019                     	;# 
  4127  001A                     	;# 
  4128  001B                     	;# 
  4129  001C                     	;# 
  4130  001D                     	;# 
  4131  001E                     	;# 
  4132  001F                     	;# 
  4133  008C                     	;# 
  4134  008D                     	;# 
  4135  008E                     	;# 
  4136  0090                     	;# 
  4137  0091                     	;# 
  4138  0092                     	;# 
  4139  0093                     	;# 
  4140  0094                     	;# 
  4141  0097                     	;# 
  4142  009B                     	;# 
  4143  009B                     	;# 
  4144  009C                     	;# 
  4145  009D                     	;# 
  4146  009E                     	;# 
  4147  009F                     	;# 
  4148  010C                     	;# 
  4149  010D                     	;# 
  4150  010E                     	;# 
  4151  0111                     	;# 
  4152  0112                     	;# 
  4153  0113                     	;# 
  4154  0114                     	;# 
  4155  0115                     	;# 
  4156  0116                     	;# 
  4157  0117                     	;# 
  4158  0118                     	;# 
  4159  0119                     	;# 
  4160  018C                     	;# 
  4161  018D                     	;# 
  4162  018E                     	;# 
  4163  0199                     	;# 
  4164  0199                     	;# 
  4165  0199                     	;# 
  4166  019A                     	;# 
  4167  019A                     	;# 
  4168  019A                     	;# 
  4169  019B                     	;# 
  4170  019B                     	;# 
  4171  019B                     	;# 
  4172  019B                     	;# 
  4173  019B                     	;# 
  4174  019C                     	;# 
  4175  019C                     	;# 
  4176  019C                     	;# 
  4177  019D                     	;# 
  4178  019D                     	;# 
  4179  019D                     	;# 
  4180  019E                     	;# 
  4181  019E                     	;# 
  4182  019E                     	;# 
  4183  019F                     	;# 
  4184  019F                     	;# 
  4185  019F                     	;# 
  4186  019F                     	;# 
  4187  019F                     	;# 
  4188  020C                     	;# 
  4189  020D                     	;# 
  4190  020E                     	;# 
  4191  0211                     	;# 
  4192  0211                     	;# 
  4193  0212                     	;# 
  4194  0212                     	;# 
  4195  0213                     	;# 
  4196  0213                     	;# 
  4197  0214                     	;# 
  4198  0214                     	;# 
  4199  0215                     	;# 
  4200  0215                     	;# 
  4201  0215                     	;# 
  4202  0215                     	;# 
  4203  0216                     	;# 
  4204  0216                     	;# 
  4205  0217                     	;# 
  4206  0217                     	;# 
  4207  0219                     	;# 
  4208  021A                     	;# 
  4209  021B                     	;# 
  4210  021C                     	;# 
  4211  021D                     	;# 
  4212  021D                     	;# 
  4213  021E                     	;# 
  4214  021F                     	;# 
  4215  028C                     	;# 
  4216  028D                     	;# 
  4217  028E                     	;# 
  4218  0291                     	;# 
  4219  0291                     	;# 
  4220  0292                     	;# 
  4221  0293                     	;# 
  4222  0294                     	;# 
  4223  0295                     	;# 
  4224  0295                     	;# 
  4225  0296                     	;# 
  4226  0297                     	;# 
  4227  0298                     	;# 
  4228  029F                     	;# 
  4229  030C                     	;# 
  4230  030D                     	;# 
  4231  030E                     	;# 
  4232  0311                     	;# 
  4233  0311                     	;# 
  4234  0312                     	;# 
  4235  0313                     	;# 
  4236  0314                     	;# 
  4237  0315                     	;# 
  4238  0315                     	;# 
  4239  0316                     	;# 
  4240  0317                     	;# 
  4241  0318                     	;# 
  4242  038C                     	;# 
  4243  038D                     	;# 
  4244  038E                     	;# 
  4245  0391                     	;# 
  4246  0392                     	;# 
  4247  0393                     	;# 
  4248  0394                     	;# 
  4249  0395                     	;# 
  4250  0396                     	;# 
  4251  0397                     	;# 
  4252  0398                     	;# 
  4253  0399                     	;# 
  4254  039A                     	;# 
  4255  039C                     	;# 
  4256  039D                     	;# 
  4257  039E                     	;# 
  4258  039F                     	;# 
  4259  0411                     	;# 
  4260  0411                     	;# 
  4261  0412                     	;# 
  4262  0413                     	;# 
  4263  0414                     	;# 
  4264  0415                     	;# 
  4265  0416                     	;# 
  4266  0417                     	;# 
  4267  0418                     	;# 
  4268  0418                     	;# 
  4269  0419                     	;# 
  4270  041A                     	;# 
  4271  041B                     	;# 
  4272  041C                     	;# 
  4273  041D                     	;# 
  4274  041E                     	;# 
  4275  041F                     	;# 
  4276  0498                     	;# 
  4277  0498                     	;# 
  4278  0499                     	;# 
  4279  049A                     	;# 
  4280  049B                     	;# 
  4281  049B                     	;# 
  4282  049C                     	;# 
  4283  049D                     	;# 
  4284  049E                     	;# 
  4285  049F                     	;# 
  4286  0617                     	;# 
  4287  0618                     	;# 
  4288  0619                     	;# 
  4289  0619                     	;# 
  4290  061A                     	;# 
  4291  061B                     	;# 
  4292  061C                     	;# 
  4293  061C                     	;# 
  4294  061F                     	;# 
  4295  0691                     	;# 
  4296  0692                     	;# 
  4297  0693                     	;# 
  4298  0694                     	;# 
  4299  0695                     	;# 
  4300  0696                     	;# 
  4301  0697                     	;# 
  4302  0698                     	;# 
  4303  0699                     	;# 
  4304  0711                     	;# 
  4305  0712                     	;# 
  4306  0713                     	;# 
  4307  0714                     	;# 
  4308  0715                     	;# 
  4309  0716                     	;# 
  4310  0717                     	;# 
  4311  0718                     	;# 
  4312  0719                     	;# 
  4313  0891                     	;# 
  4314  0891                     	;# 
  4315  0891                     	;# 
  4316  0891                     	;# 
  4317  0891                     	;# 
  4318  0891                     	;# 
  4319  0892                     	;# 
  4320  0892                     	;# 
  4321  0892                     	;# 
  4322  0893                     	;# 
  4323  0893                     	;# 
  4324  0893                     	;# 
  4325  0893                     	;# 
  4326  0893                     	;# 
  4327  0893                     	;# 
  4328  0894                     	;# 
  4329  0894                     	;# 
  4330  0894                     	;# 
  4331  0895                     	;# 
  4332  0895                     	;# 
  4333  0895                     	;# 
  4334  0896                     	;# 
  4335  0896                     	;# 
  4336  0896                     	;# 
  4337  089B                     	;# 
  4338  0911                     	;# 
  4339  0912                     	;# 
  4340  0913                     	;# 
  4341  0914                     	;# 
  4342  0915                     	;# 
  4343  0916                     	;# 
  4344  0918                     	;# 
  4345  0919                     	;# 
  4346  091A                     	;# 
  4347  091B                     	;# 
  4348  091C                     	;# 
  4349  091D                     	;# 
  4350  091E                     	;# 
  4351  091F                     	;# 
  4352  0E0F                     	;# 
  4353  0E10                     	;# 
  4354  0E11                     	;# 
  4355  0E12                     	;# 
  4356  0E13                     	;# 
  4357  0E14                     	;# 
  4358  0E15                     	;# 
  4359  0E16                     	;# 
  4360  0E17                     	;# 
  4361  0E18                     	;# 
  4362  0E19                     	;# 
  4363  0E1A                     	;# 
  4364  0E1B                     	;# 
  4365  0E1C                     	;# 
  4366  0E1D                     	;# 
  4367  0E1E                     	;# 
  4368  0E1F                     	;# 
  4369  0E20                     	;# 
  4370  0E21                     	;# 
  4371  0E22                     	;# 
  4372  0E24                     	;# 
  4373  0E25                     	;# 
  4374  0E28                     	;# 
  4375  0E29                     	;# 
  4376  0E2A                     	;# 
  4377  0E2B                     	;# 
  4378  0E2C                     	;# 
  4379  0E2D                     	;# 
  4380  0E2E                     	;# 
  4381  0E2F                     	;# 
  4382  0E90                     	;# 
  4383  0E91                     	;# 
  4384  0E92                     	;# 
  4385  0E94                     	;# 
  4386  0E95                     	;# 
  4387  0E9C                     	;# 
  4388  0E9D                     	;# 
  4389  0E9E                     	;# 
  4390  0E9F                     	;# 
  4391  0EA0                     	;# 
  4392  0EA1                     	;# 
  4393  0EA2                     	;# 
  4394  0EA3                     	;# 
  4395  0EA4                     	;# 
  4396  0EA5                     	;# 
  4397  0EA6                     	;# 
  4398  0EA7                     	;# 
  4399  0F0F                     	;# 
  4400  0F10                     	;# 
  4401  0F11                     	;# 
  4402  0F12                     	;# 
  4403  0F13                     	;# 
  4404  0F14                     	;# 
  4405  0F15                     	;# 
  4406  0F16                     	;# 
  4407  0F17                     	;# 
  4408  0F18                     	;# 
  4409  0F19                     	;# 
  4410  0F1A                     	;# 
  4411  0F1B                     	;# 
  4412  0F1C                     	;# 
  4413  0F1D                     	;# 
  4414  0F1E                     	;# 
  4415  0F1F                     	;# 
  4416  0F20                     	;# 
  4417  0F21                     	;# 
  4418  0F22                     	;# 
  4419  0F23                     	;# 
  4420  0F24                     	;# 
  4421  0F25                     	;# 
  4422  0F26                     	;# 
  4423  0F27                     	;# 
  4424  0F28                     	;# 
  4425  0F29                     	;# 
  4426  0F2A                     	;# 
  4427  0F2B                     	;# 
  4428  0F2C                     	;# 
  4429  0F2D                     	;# 
  4430  0F2E                     	;# 
  4431  0F2F                     	;# 
  4432  0F30                     	;# 
  4433  0F31                     	;# 
  4434  0F32                     	;# 
  4435  0F33                     	;# 
  4436  0F34                     	;# 
  4437  0F35                     	;# 
  4438  0F36                     	;# 
  4439  0F37                     	;# 
  4440  0FE4                     	;# 
  4441  0FE5                     	;# 
  4442  0FE6                     	;# 
  4443  0FE7                     	;# 
  4444  0FE8                     	;# 
  4445  0FE9                     	;# 
  4446  0FEA                     	;# 
  4447  0FEB                     	;# 
  4448  0FED                     	;# 
  4449  0FEE                     	;# 
  4450  0FEF                     	;# 
  4451  0000                     	;# 
  4452  0001                     	;# 
  4453  0002                     	;# 
  4454  0003                     	;# 
  4455  0004                     	;# 
  4456  0005                     	;# 
  4457  0006                     	;# 
  4458  0007                     	;# 
  4459  0008                     	;# 
  4460  0009                     	;# 
  4461  000A                     	;# 
  4462  000B                     	;# 
  4463  000C                     	;# 
  4464  000D                     	;# 
  4465  000E                     	;# 
  4466  0010                     	;# 
  4467  0011                     	;# 
  4468  0012                     	;# 
  4469  0013                     	;# 
  4470  0014                     	;# 
  4471  0015                     	;# 
  4472  0015                     	;# 
  4473  0016                     	;# 
  4474  0016                     	;# 
  4475  0017                     	;# 
  4476  0018                     	;# 
  4477  0019                     	;# 
  4478  0019                     	;# 
  4479  001A                     	;# 
  4480  001B                     	;# 
  4481  001C                     	;# 
  4482  001D                     	;# 
  4483  001E                     	;# 
  4484  001F                     	;# 
  4485  008C                     	;# 
  4486  008D                     	;# 
  4487  008E                     	;# 
  4488  0090                     	;# 
  4489  0091                     	;# 
  4490  0092                     	;# 
  4491  0093                     	;# 
  4492  0094                     	;# 
  4493  0097                     	;# 
  4494  009B                     	;# 
  4495  009B                     	;# 
  4496  009C                     	;# 
  4497  009D                     	;# 
  4498  009E                     	;# 
  4499  009F                     	;# 
  4500  010C                     	;# 
  4501  010D                     	;# 
  4502  010E                     	;# 
  4503  0111                     	;# 
  4504  0112                     	;# 
  4505  0113                     	;# 
  4506  0114                     	;# 
  4507  0115                     	;# 
  4508  0116                     	;# 
  4509  0117                     	;# 
  4510  0118                     	;# 
  4511  0119                     	;# 
  4512  018C                     	;# 
  4513  018D                     	;# 
  4514  018E                     	;# 
  4515  0199                     	;# 
  4516  0199                     	;# 
  4517  0199                     	;# 
  4518  019A                     	;# 
  4519  019A                     	;# 
  4520  019A                     	;# 
  4521  019B                     	;# 
  4522  019B                     	;# 
  4523  019B                     	;# 
  4524  019B                     	;# 
  4525  019B                     	;# 
  4526  019C                     	;# 
  4527  019C                     	;# 
  4528  019C                     	;# 
  4529  019D                     	;# 
  4530  019D                     	;# 
  4531  019D                     	;# 
  4532  019E                     	;# 
  4533  019E                     	;# 
  4534  019E                     	;# 
  4535  019F                     	;# 
  4536  019F                     	;# 
  4537  019F                     	;# 
  4538  019F                     	;# 
  4539  019F                     	;# 
  4540  020C                     	;# 
  4541  020D                     	;# 
  4542  020E                     	;# 
  4543  0211                     	;# 
  4544  0211                     	;# 
  4545  0212                     	;# 
  4546  0212                     	;# 
  4547  0213                     	;# 
  4548  0213                     	;# 
  4549  0214                     	;# 
  4550  0214                     	;# 
  4551  0215                     	;# 
  4552  0215                     	;# 
  4553  0215                     	;# 
  4554  0215                     	;# 
  4555  0216                     	;# 
  4556  0216                     	;# 
  4557  0217                     	;# 
  4558  0217                     	;# 
  4559  0219                     	;# 
  4560  021A                     	;# 
  4561  021B                     	;# 
  4562  021C                     	;# 
  4563  021D                     	;# 
  4564  021D                     	;# 
  4565  021E                     	;# 
  4566  021F                     	;# 
  4567  028C                     	;# 
  4568  028D                     	;# 
  4569  028E                     	;# 
  4570  0291                     	;# 
  4571  0291                     	;# 
  4572  0292                     	;# 
  4573  0293                     	;# 
  4574  0294                     	;# 
  4575  0295                     	;# 
  4576  0295                     	;# 
  4577  0296                     	;# 
  4578  0297                     	;# 
  4579  0298                     	;# 
  4580  029F                     	;# 
  4581  030C                     	;# 
  4582  030D                     	;# 
  4583  030E                     	;# 
  4584  0311                     	;# 
  4585  0311                     	;# 
  4586  0312                     	;# 
  4587  0313                     	;# 
  4588  0314                     	;# 
  4589  0315                     	;# 
  4590  0315                     	;# 
  4591  0316                     	;# 
  4592  0317                     	;# 
  4593  0318                     	;# 
  4594  038C                     	;# 
  4595  038D                     	;# 
  4596  038E                     	;# 
  4597  0391                     	;# 
  4598  0392                     	;# 
  4599  0393                     	;# 
  4600  0394                     	;# 
  4601  0395                     	;# 
  4602  0396                     	;# 
  4603  0397                     	;# 
  4604  0398                     	;# 
  4605  0399                     	;# 
  4606  039A                     	;# 
  4607  039C                     	;# 
  4608  039D                     	;# 
  4609  039E                     	;# 
  4610  039F                     	;# 
  4611  0411                     	;# 
  4612  0411                     	;# 
  4613  0412                     	;# 
  4614  0413                     	;# 
  4615  0414                     	;# 
  4616  0415                     	;# 
  4617  0416                     	;# 
  4618  0417                     	;# 
  4619  0418                     	;# 
  4620  0418                     	;# 
  4621  0419                     	;# 
  4622  041A                     	;# 
  4623  041B                     	;# 
  4624  041C                     	;# 
  4625  041D                     	;# 
  4626  041E                     	;# 
  4627  041F                     	;# 
  4628  0498                     	;# 
  4629  0498                     	;# 
  4630  0499                     	;# 
  4631  049A                     	;# 
  4632  049B                     	;# 
  4633  049B                     	;# 
  4634  049C                     	;# 
  4635  049D                     	;# 
  4636  049E                     	;# 
  4637  049F                     	;# 
  4638  0617                     	;# 
  4639  0618                     	;# 
  4640  0619                     	;# 
  4641  0619                     	;# 
  4642  061A                     	;# 
  4643  061B                     	;# 
  4644  061C                     	;# 
  4645  061C                     	;# 
  4646  061F                     	;# 
  4647  0691                     	;# 
  4648  0692                     	;# 
  4649  0693                     	;# 
  4650  0694                     	;# 
  4651  0695                     	;# 
  4652  0696                     	;# 
  4653  0697                     	;# 
  4654  0698                     	;# 
  4655  0699                     	;# 
  4656  0711                     	;# 
  4657  0712                     	;# 
  4658  0713                     	;# 
  4659  0714                     	;# 
  4660  0715                     	;# 
  4661  0716                     	;# 
  4662  0717                     	;# 
  4663  0718                     	;# 
  4664  0719                     	;# 
  4665  0891                     	;# 
  4666  0891                     	;# 
  4667  0891                     	;# 
  4668  0891                     	;# 
  4669  0891                     	;# 
  4670  0891                     	;# 
  4671  0892                     	;# 
  4672  0892                     	;# 
  4673  0892                     	;# 
  4674  0893                     	;# 
  4675  0893                     	;# 
  4676  0893                     	;# 
  4677  0893                     	;# 
  4678  0893                     	;# 
  4679  0893                     	;# 
  4680  0894                     	;# 
  4681  0894                     	;# 
  4682  0894                     	;# 
  4683  0895                     	;# 
  4684  0895                     	;# 
  4685  0895                     	;# 
  4686  0896                     	;# 
  4687  0896                     	;# 
  4688  0896                     	;# 
  4689  089B                     	;# 
  4690  0911                     	;# 
  4691  0912                     	;# 
  4692  0913                     	;# 
  4693  0914                     	;# 
  4694  0915                     	;# 
  4695  0916                     	;# 
  4696  0918                     	;# 
  4697  0919                     	;# 
  4698  091A                     	;# 
  4699  091B                     	;# 
  4700  091C                     	;# 
  4701  091D                     	;# 
  4702  091E                     	;# 
  4703  091F                     	;# 
  4704  0E0F                     	;# 
  4705  0E10                     	;# 
  4706  0E11                     	;# 
  4707  0E12                     	;# 
  4708  0E13                     	;# 
  4709  0E14                     	;# 
  4710  0E15                     	;# 
  4711  0E16                     	;# 
  4712  0E17                     	;# 
  4713  0E18                     	;# 
  4714  0E19                     	;# 
  4715  0E1A                     	;# 
  4716  0E1B                     	;# 
  4717  0E1C                     	;# 
  4718  0E1D                     	;# 
  4719  0E1E                     	;# 
  4720  0E1F                     	;# 
  4721  0E20                     	;# 
  4722  0E21                     	;# 
  4723  0E22                     	;# 
  4724  0E24                     	;# 
  4725  0E25                     	;# 
  4726  0E28                     	;# 
  4727  0E29                     	;# 
  4728  0E2A                     	;# 
  4729  0E2B                     	;# 
  4730  0E2C                     	;# 
  4731  0E2D                     	;# 
  4732  0E2E                     	;# 
  4733  0E2F                     	;# 
  4734  0E90                     	;# 
  4735  0E91                     	;# 
  4736  0E92                     	;# 
  4737  0E94                     	;# 
  4738  0E95                     	;# 
  4739  0E9C                     	;# 
  4740  0E9D                     	;# 
  4741  0E9E                     	;# 
  4742  0E9F                     	;# 
  4743  0EA0                     	;# 
  4744  0EA1                     	;# 
  4745  0EA2                     	;# 
  4746  0EA3                     	;# 
  4747  0EA4                     	;# 
  4748  0EA5                     	;# 
  4749  0EA6                     	;# 
  4750  0EA7                     	;# 
  4751  0F0F                     	;# 
  4752  0F10                     	;# 
  4753  0F11                     	;# 
  4754  0F12                     	;# 
  4755  0F13                     	;# 
  4756  0F14                     	;# 
  4757  0F15                     	;# 
  4758  0F16                     	;# 
  4759  0F17                     	;# 
  4760  0F18                     	;# 
  4761  0F19                     	;# 
  4762  0F1A                     	;# 
  4763  0F1B                     	;# 
  4764  0F1C                     	;# 
  4765  0F1D                     	;# 
  4766  0F1E                     	;# 
  4767  0F1F                     	;# 
  4768  0F20                     	;# 
  4769  0F21                     	;# 
  4770  0F22                     	;# 
  4771  0F23                     	;# 
  4772  0F24                     	;# 
  4773  0F25                     	;# 
  4774  0F26                     	;# 
  4775  0F27                     	;# 
  4776  0F28                     	;# 
  4777  0F29                     	;# 
  4778  0F2A                     	;# 
  4779  0F2B                     	;# 
  4780  0F2C                     	;# 
  4781  0F2D                     	;# 
  4782  0F2E                     	;# 
  4783  0F2F                     	;# 
  4784  0F30                     	;# 
  4785  0F31                     	;# 
  4786  0F32                     	;# 
  4787  0F33                     	;# 
  4788  0F34                     	;# 
  4789  0F35                     	;# 
  4790  0F36                     	;# 
  4791  0F37                     	;# 
  4792  0FE4                     	;# 
  4793  0FE5                     	;# 
  4794  0FE6                     	;# 
  4795  0FE7                     	;# 
  4796  0FE8                     	;# 
  4797  0FE9                     	;# 
  4798  0FEA                     	;# 
  4799  0FEB                     	;# 
  4800  0FED                     	;# 
  4801  0FEE                     	;# 
  4802  0FEF                     	;# 
  4803  0000                     	;# 
  4804  0001                     	;# 
  4805  0002                     	;# 
  4806  0003                     	;# 
  4807  0004                     	;# 
  4808  0005                     	;# 
  4809  0006                     	;# 
  4810  0007                     	;# 
  4811  0008                     	;# 
  4812  0009                     	;# 
  4813  000A                     	;# 
  4814  000B                     	;# 
  4815  000C                     	;# 
  4816  000D                     	;# 
  4817  000E                     	;# 
  4818  0010                     	;# 
  4819  0011                     	;# 
  4820  0012                     	;# 
  4821  0013                     	;# 
  4822  0014                     	;# 
  4823  0015                     	;# 
  4824  0015                     	;# 
  4825  0016                     	;# 
  4826  0016                     	;# 
  4827  0017                     	;# 
  4828  0018                     	;# 
  4829  0019                     	;# 
  4830  0019                     	;# 
  4831  001A                     	;# 
  4832  001B                     	;# 
  4833  001C                     	;# 
  4834  001D                     	;# 
  4835  001E                     	;# 
  4836  001F                     	;# 
  4837  008C                     	;# 
  4838  008D                     	;# 
  4839  008E                     	;# 
  4840  0090                     	;# 
  4841  0091                     	;# 
  4842  0092                     	;# 
  4843  0093                     	;# 
  4844  0094                     	;# 
  4845  0097                     	;# 
  4846  009B                     	;# 
  4847  009B                     	;# 
  4848  009C                     	;# 
  4849  009D                     	;# 
  4850  009E                     	;# 
  4851  009F                     	;# 
  4852  010C                     	;# 
  4853  010D                     	;# 
  4854  010E                     	;# 
  4855  0111                     	;# 
  4856  0112                     	;# 
  4857  0113                     	;# 
  4858  0114                     	;# 
  4859  0115                     	;# 
  4860  0116                     	;# 
  4861  0117                     	;# 
  4862  0118                     	;# 
  4863  0119                     	;# 
  4864  018C                     	;# 
  4865  018D                     	;# 
  4866  018E                     	;# 
  4867  0199                     	;# 
  4868  0199                     	;# 
  4869  0199                     	;# 
  4870  019A                     	;# 
  4871  019A                     	;# 
  4872  019A                     	;# 
  4873  019B                     	;# 
  4874  019B                     	;# 
  4875  019B                     	;# 
  4876  019B                     	;# 
  4877  019B                     	;# 
  4878  019C                     	;# 
  4879  019C                     	;# 
  4880  019C                     	;# 
  4881  019D                     	;# 
  4882  019D                     	;# 
  4883  019D                     	;# 
  4884  019E                     	;# 
  4885  019E                     	;# 
  4886  019E                     	;# 
  4887  019F                     	;# 
  4888  019F                     	;# 
  4889  019F                     	;# 
  4890  019F                     	;# 
  4891  019F                     	;# 
  4892  020C                     	;# 
  4893  020D                     	;# 
  4894  020E                     	;# 
  4895  0211                     	;# 
  4896  0211                     	;# 
  4897  0212                     	;# 
  4898  0212                     	;# 
  4899  0213                     	;# 
  4900  0213                     	;# 
  4901  0214                     	;# 
  4902  0214                     	;# 
  4903  0215                     	;# 
  4904  0215                     	;# 
  4905  0215                     	;# 
  4906  0215                     	;# 
  4907  0216                     	;# 
  4908  0216                     	;# 
  4909  0217                     	;# 
  4910  0217                     	;# 
  4911  0219                     	;# 
  4912  021A                     	;# 
  4913  021B                     	;# 
  4914  021C                     	;# 
  4915  021D                     	;# 
  4916  021D                     	;# 
  4917  021E                     	;# 
  4918  021F                     	;# 
  4919  028C                     	;# 
  4920  028D                     	;# 
  4921  028E                     	;# 
  4922  0291                     	;# 
  4923  0291                     	;# 
  4924  0292                     	;# 
  4925  0293                     	;# 
  4926  0294                     	;# 
  4927  0295                     	;# 
  4928  0295                     	;# 
  4929  0296                     	;# 
  4930  0297                     	;# 
  4931  0298                     	;# 
  4932  029F                     	;# 
  4933  030C                     	;# 
  4934  030D                     	;# 
  4935  030E                     	;# 
  4936  0311                     	;# 
  4937  0311                     	;# 
  4938  0312                     	;# 
  4939  0313                     	;# 
  4940  0314                     	;# 
  4941  0315                     	;# 
  4942  0315                     	;# 
  4943  0316                     	;# 
  4944  0317                     	;# 
  4945  0318                     	;# 
  4946  038C                     	;# 
  4947  038D                     	;# 
  4948  038E                     	;# 
  4949  0391                     	;# 
  4950  0392                     	;# 
  4951  0393                     	;# 
  4952  0394                     	;# 
  4953  0395                     	;# 
  4954  0396                     	;# 
  4955  0397                     	;# 
  4956  0398                     	;# 
  4957  0399                     	;# 
  4958  039A                     	;# 
  4959  039C                     	;# 
  4960  039D                     	;# 
  4961  039E                     	;# 
  4962  039F                     	;# 
  4963  0411                     	;# 
  4964  0411                     	;# 
  4965  0412                     	;# 
  4966  0413                     	;# 
  4967  0414                     	;# 
  4968  0415                     	;# 
  4969  0416                     	;# 
  4970  0417                     	;# 
  4971  0418                     	;# 
  4972  0418                     	;# 
  4973  0419                     	;# 
  4974  041A                     	;# 
  4975  041B                     	;# 
  4976  041C                     	;# 
  4977  041D                     	;# 
  4978  041E                     	;# 
  4979  041F                     	;# 
  4980  0498                     	;# 
  4981  0498                     	;# 
  4982  0499                     	;# 
  4983  049A                     	;# 
  4984  049B                     	;# 
  4985  049B                     	;# 
  4986  049C                     	;# 
  4987  049D                     	;# 
  4988  049E                     	;# 
  4989  049F                     	;# 
  4990  0617                     	;# 
  4991  0618                     	;# 
  4992  0619                     	;# 
  4993  0619                     	;# 
  4994  061A                     	;# 
  4995  061B                     	;# 
  4996  061C                     	;# 
  4997  061C                     	;# 
  4998  061F                     	;# 
  4999  0691                     	;# 
  5000  0692                     	;# 
  5001  0693                     	;# 
  5002  0694                     	;# 
  5003  0695                     	;# 
  5004  0696                     	;# 
  5005  0697                     	;# 
  5006  0698                     	;# 
  5007  0699                     	;# 
  5008  0711                     	;# 
  5009  0712                     	;# 
  5010  0713                     	;# 
  5011  0714                     	;# 
  5012  0715                     	;# 
  5013  0716                     	;# 
  5014  0717                     	;# 
  5015  0718                     	;# 
  5016  0719                     	;# 
  5017  0891                     	;# 
  5018  0891                     	;# 
  5019  0891                     	;# 
  5020  0891                     	;# 
  5021  0891                     	;# 
  5022  0891                     	;# 
  5023  0892                     	;# 
  5024  0892                     	;# 
  5025  0892                     	;# 
  5026  0893                     	;# 
  5027  0893                     	;# 
  5028  0893                     	;# 
  5029  0893                     	;# 
  5030  0893                     	;# 
  5031  0893                     	;# 
  5032  0894                     	;# 
  5033  0894                     	;# 
  5034  0894                     	;# 
  5035  0895                     	;# 
  5036  0895                     	;# 
  5037  0895                     	;# 
  5038  0896                     	;# 
  5039  0896                     	;# 
  5040  0896                     	;# 
  5041  089B                     	;# 
  5042  0911                     	;# 
  5043  0912                     	;# 
  5044  0913                     	;# 
  5045  0914                     	;# 
  5046  0915                     	;# 
  5047  0916                     	;# 
  5048  0918                     	;# 
  5049  0919                     	;# 
  5050  091A                     	;# 
  5051  091B                     	;# 
  5052  091C                     	;# 
  5053  091D                     	;# 
  5054  091E                     	;# 
  5055  091F                     	;# 
  5056  0E0F                     	;# 
  5057  0E10                     	;# 
  5058  0E11                     	;# 
  5059  0E12                     	;# 
  5060  0E13                     	;# 
  5061  0E14                     	;# 
  5062  0E15                     	;# 
  5063  0E16                     	;# 
  5064  0E17                     	;# 
  5065  0E18                     	;# 
  5066  0E19                     	;# 
  5067  0E1A                     	;# 
  5068  0E1B                     	;# 
  5069  0E1C                     	;# 
  5070  0E1D                     	;# 
  5071  0E1E                     	;# 
  5072  0E1F                     	;# 
  5073  0E20                     	;# 
  5074  0E21                     	;# 
  5075  0E22                     	;# 
  5076  0E24                     	;# 
  5077  0E25                     	;# 
  5078  0E28                     	;# 
  5079  0E29                     	;# 
  5080  0E2A                     	;# 
  5081  0E2B                     	;# 
  5082  0E2C                     	;# 
  5083  0E2D                     	;# 
  5084  0E2E                     	;# 
  5085  0E2F                     	;# 
  5086  0E90                     	;# 
  5087  0E91                     	;# 
  5088  0E92                     	;# 
  5089  0E94                     	;# 
  5090  0E95                     	;# 
  5091  0E9C                     	;# 
  5092  0E9D                     	;# 
  5093  0E9E                     	;# 
  5094  0E9F                     	;# 
  5095  0EA0                     	;# 
  5096  0EA1                     	;# 
  5097  0EA2                     	;# 
  5098  0EA3                     	;# 
  5099  0EA4                     	;# 
  5100  0EA5                     	;# 
  5101  0EA6                     	;# 
  5102  0EA7                     	;# 
  5103  0F0F                     	;# 
  5104  0F10                     	;# 
  5105  0F11                     	;# 
  5106  0F12                     	;# 
  5107  0F13                     	;# 
  5108  0F14                     	;# 
  5109  0F15                     	;# 
  5110  0F16                     	;# 
  5111  0F17                     	;# 
  5112  0F18                     	;# 
  5113  0F19                     	;# 
  5114  0F1A                     	;# 
  5115  0F1B                     	;# 
  5116  0F1C                     	;# 
  5117  0F1D                     	;# 
  5118  0F1E                     	;# 
  5119  0F1F                     	;# 
  5120  0F20                     	;# 
  5121  0F21                     	;# 
  5122  0F22                     	;# 
  5123  0F23                     	;# 
  5124  0F24                     	;# 
  5125  0F25                     	;# 
  5126  0F26                     	;# 
  5127  0F27                     	;# 
  5128  0F28                     	;# 
  5129  0F29                     	;# 
  5130  0F2A                     	;# 
  5131  0F2B                     	;# 
  5132  0F2C                     	;# 
  5133  0F2D                     	;# 
  5134  0F2E                     	;# 
  5135  0F2F                     	;# 
  5136  0F30                     	;# 
  5137  0F31                     	;# 
  5138  0F32                     	;# 
  5139  0F33                     	;# 
  5140  0F34                     	;# 
  5141  0F35                     	;# 
  5142  0F36                     	;# 
  5143  0F37                     	;# 
  5144  0FE4                     	;# 
  5145  0FE5                     	;# 
  5146  0FE6                     	;# 
  5147  0FE7                     	;# 
  5148  0FE8                     	;# 
  5149  0FE9                     	;# 
  5150  0FEA                     	;# 
  5151  0FEB                     	;# 
  5152  0FED                     	;# 
  5153  0FEE                     	;# 
  5154  0FEF                     	;# 
  5155  0000                     	;# 
  5156  0001                     	;# 
  5157  0002                     	;# 
  5158  0003                     	;# 
  5159  0004                     	;# 
  5160  0005                     	;# 
  5161  0006                     	;# 
  5162  0007                     	;# 
  5163  0008                     	;# 
  5164  0009                     	;# 
  5165  000A                     	;# 
  5166  000B                     	;# 
  5167  000C                     	;# 
  5168  000D                     	;# 
  5169  000E                     	;# 
  5170  0010                     	;# 
  5171  0011                     	;# 
  5172  0012                     	;# 
  5173  0013                     	;# 
  5174  0014                     	;# 
  5175  0015                     	;# 
  5176  0015                     	;# 
  5177  0016                     	;# 
  5178  0016                     	;# 
  5179  0017                     	;# 
  5180  0018                     	;# 
  5181  0019                     	;# 
  5182  0019                     	;# 
  5183  001A                     	;# 
  5184  001B                     	;# 
  5185  001C                     	;# 
  5186  001D                     	;# 
  5187  001E                     	;# 
  5188  001F                     	;# 
  5189  008C                     	;# 
  5190  008D                     	;# 
  5191  008E                     	;# 
  5192  0090                     	;# 
  5193  0091                     	;# 
  5194  0092                     	;# 
  5195  0093                     	;# 
  5196  0094                     	;# 
  5197  0097                     	;# 
  5198  009B                     	;# 
  5199  009B                     	;# 
  5200  009C                     	;# 
  5201  009D                     	;# 
  5202  009E                     	;# 
  5203  009F                     	;# 
  5204  010C                     	;# 
  5205  010D                     	;# 
  5206  010E                     	;# 
  5207  0111                     	;# 
  5208  0112                     	;# 
  5209  0113                     	;# 
  5210  0114                     	;# 
  5211  0115                     	;# 
  5212  0116                     	;# 
  5213  0117                     	;# 
  5214  0118                     	;# 
  5215  0119                     	;# 
  5216  018C                     	;# 
  5217  018D                     	;# 
  5218  018E                     	;# 
  5219  0197                     	;# 
  5220  0199                     	;# 
  5221  0199                     	;# 
  5222  0199                     	;# 
  5223  019A                     	;# 
  5224  019A                     	;# 
  5225  019A                     	;# 
  5226  019B                     	;# 
  5227  019B                     	;# 
  5228  019B                     	;# 
  5229  019B                     	;# 
  5230  019B                     	;# 
  5231  019C                     	;# 
  5232  019C                     	;# 
  5233  019C                     	;# 
  5234  019D                     	;# 
  5235  019D                     	;# 
  5236  019D                     	;# 
  5237  019E                     	;# 
  5238  019E                     	;# 
  5239  019E                     	;# 
  5240  019F                     	;# 
  5241  019F                     	;# 
  5242  019F                     	;# 
  5243  019F                     	;# 
  5244  019F                     	;# 
  5245  020C                     	;# 
  5246  020D                     	;# 
  5247  020E                     	;# 
  5248  0211                     	;# 
  5249  0211                     	;# 
  5250  0212                     	;# 
  5251  0212                     	;# 
  5252  0213                     	;# 
  5253  0213                     	;# 
  5254  0214                     	;# 
  5255  0214                     	;# 
  5256  0215                     	;# 
  5257  0215                     	;# 
  5258  0215                     	;# 
  5259  0215                     	;# 
  5260  0216                     	;# 
  5261  0216                     	;# 
  5262  0217                     	;# 
  5263  0217                     	;# 
  5264  0219                     	;# 
  5265  021A                     	;# 
  5266  021B                     	;# 
  5267  021C                     	;# 
  5268  021D                     	;# 
  5269  021D                     	;# 
  5270  021E                     	;# 
  5271  021F                     	;# 
  5272  028C                     	;# 
  5273  028D                     	;# 
  5274  028E                     	;# 
  5275  0291                     	;# 
  5276  0291                     	;# 
  5277  0292                     	;# 
  5278  0293                     	;# 
  5279  0294                     	;# 
  5280  0295                     	;# 
  5281  0295                     	;# 
  5282  0296                     	;# 
  5283  0297                     	;# 
  5284  0298                     	;# 
  5285  029F                     	;# 
  5286  030C                     	;# 
  5287  030D                     	;# 
  5288  030E                     	;# 
  5289  0311                     	;# 
  5290  0311                     	;# 
  5291  0312                     	;# 
  5292  0313                     	;# 
  5293  0314                     	;# 
  5294  0315                     	;# 
  5295  0315                     	;# 
  5296  0316                     	;# 
  5297  0317                     	;# 
  5298  0318                     	;# 
  5299  038C                     	;# 
  5300  038D                     	;# 
  5301  038E                     	;# 
  5302  0391                     	;# 
  5303  0392                     	;# 
  5304  0393                     	;# 
  5305  0394                     	;# 
  5306  0395                     	;# 
  5307  0396                     	;# 
  5308  0397                     	;# 
  5309  0398                     	;# 
  5310  0399                     	;# 
  5311  039A                     	;# 
  5312  039C                     	;# 
  5313  039D                     	;# 
  5314  039E                     	;# 
  5315  039F                     	;# 
  5316  0411                     	;# 
  5317  0411                     	;# 
  5318  0412                     	;# 
  5319  0413                     	;# 
  5320  0414                     	;# 
  5321  0415                     	;# 
  5322  0416                     	;# 
  5323  0417                     	;# 
  5324  0418                     	;# 
  5325  0418                     	;# 
  5326  0419                     	;# 
  5327  041A                     	;# 
  5328  041B                     	;# 
  5329  041C                     	;# 
  5330  041D                     	;# 
  5331  041E                     	;# 
  5332  041F                     	;# 
  5333  0498                     	;# 
  5334  0498                     	;# 
  5335  0499                     	;# 
  5336  049A                     	;# 
  5337  049B                     	;# 
  5338  049B                     	;# 
  5339  049C                     	;# 
  5340  049D                     	;# 
  5341  049E                     	;# 
  5342  049F                     	;# 
  5343  0617                     	;# 
  5344  0618                     	;# 
  5345  0619                     	;# 
  5346  0619                     	;# 
  5347  061A                     	;# 
  5348  061B                     	;# 
  5349  061C                     	;# 
  5350  061C                     	;# 
  5351  061F                     	;# 
  5352  0691                     	;# 
  5353  0692                     	;# 
  5354  0693                     	;# 
  5355  0694                     	;# 
  5356  0695                     	;# 
  5357  0696                     	;# 
  5358  0697                     	;# 
  5359  0698                     	;# 
  5360  0699                     	;# 
  5361  0711                     	;# 
  5362  0712                     	;# 
  5363  0713                     	;# 
  5364  0714                     	;# 
  5365  0715                     	;# 
  5366  0716                     	;# 
  5367  0717                     	;# 
  5368  0718                     	;# 
  5369  0719                     	;# 
  5370  0891                     	;# 
  5371  0891                     	;# 
  5372  0891                     	;# 
  5373  0891                     	;# 
  5374  0891                     	;# 
  5375  0891                     	;# 
  5376  0892                     	;# 
  5377  0892                     	;# 
  5378  0892                     	;# 
  5379  0893                     	;# 
  5380  0893                     	;# 
  5381  0893                     	;# 
  5382  0893                     	;# 
  5383  0893                     	;# 
  5384  0893                     	;# 
  5385  0894                     	;# 
  5386  0894                     	;# 
  5387  0894                     	;# 
  5388  0895                     	;# 
  5389  0895                     	;# 
  5390  0895                     	;# 
  5391  0896                     	;# 
  5392  0896                     	;# 
  5393  0896                     	;# 
  5394  089B                     	;# 
  5395  0911                     	;# 
  5396  0912                     	;# 
  5397  0913                     	;# 
  5398  0914                     	;# 
  5399  0915                     	;# 
  5400  0916                     	;# 
  5401  0918                     	;# 
  5402  0919                     	;# 
  5403  091A                     	;# 
  5404  091B                     	;# 
  5405  091C                     	;# 
  5406  091D                     	;# 
  5407  091E                     	;# 
  5408  091F                     	;# 
  5409  0E0F                     	;# 
  5410  0E10                     	;# 
  5411  0E11                     	;# 
  5412  0E12                     	;# 
  5413  0E13                     	;# 
  5414  0E14                     	;# 
  5415  0E15                     	;# 
  5416  0E16                     	;# 
  5417  0E17                     	;# 
  5418  0E18                     	;# 
  5419  0E19                     	;# 
  5420  0E1A                     	;# 
  5421  0E1B                     	;# 
  5422  0E1C                     	;# 
  5423  0E1D                     	;# 
  5424  0E1E                     	;# 
  5425  0E1F                     	;# 
  5426  0E20                     	;# 
  5427  0E21                     	;# 
  5428  0E22                     	;# 
  5429  0E24                     	;# 
  5430  0E25                     	;# 
  5431  0E28                     	;# 
  5432  0E29                     	;# 
  5433  0E2A                     	;# 
  5434  0E2B                     	;# 
  5435  0E2C                     	;# 
  5436  0E2D                     	;# 
  5437  0E2E                     	;# 
  5438  0E2F                     	;# 
  5439  0E90                     	;# 
  5440  0E91                     	;# 
  5441  0E92                     	;# 
  5442  0E94                     	;# 
  5443  0E95                     	;# 
  5444  0E9C                     	;# 
  5445  0E9D                     	;# 
  5446  0E9E                     	;# 
  5447  0E9F                     	;# 
  5448  0EA0                     	;# 
  5449  0EA1                     	;# 
  5450  0EA2                     	;# 
  5451  0EA3                     	;# 
  5452  0EA4                     	;# 
  5453  0EA5                     	;# 
  5454  0EA6                     	;# 
  5455  0EA7                     	;# 
  5456  0F0F                     	;# 
  5457  0F10                     	;# 
  5458  0F11                     	;# 
  5459  0F12                     	;# 
  5460  0F13                     	;# 
  5461  0F14                     	;# 
  5462  0F15                     	;# 
  5463  0F16                     	;# 
  5464  0F17                     	;# 
  5465  0F18                     	;# 
  5466  0F19                     	;# 
  5467  0F1A                     	;# 
  5468  0F1B                     	;# 
  5469  0F1C                     	;# 
  5470  0F1D                     	;# 
  5471  0F1E                     	;# 
  5472  0F1F                     	;# 
  5473  0F20                     	;# 
  5474  0F21                     	;# 
  5475  0F22                     	;# 
  5476  0F23                     	;# 
  5477  0F24                     	;# 
  5478  0F25                     	;# 
  5479  0F26                     	;# 
  5480  0F27                     	;# 
  5481  0F28                     	;# 
  5482  0F29                     	;# 
  5483  0F2A                     	;# 
  5484  0F2B                     	;# 
  5485  0F2C                     	;# 
  5486  0F2D                     	;# 
  5487  0F2E                     	;# 
  5488  0F2F                     	;# 
  5489  0F30                     	;# 
  5490  0F31                     	;# 
  5491  0F32                     	;# 
  5492  0F33                     	;# 
  5493  0F34                     	;# 
  5494  0F35                     	;# 
  5495  0F36                     	;# 
  5496  0F37                     	;# 
  5497  0FE4                     	;# 
  5498  0FE5                     	;# 
  5499  0FE6                     	;# 
  5500  0FE7                     	;# 
  5501  0FE8                     	;# 
  5502  0FE9                     	;# 
  5503  0FEA                     	;# 
  5504  0FEB                     	;# 
  5505  0FED                     	;# 
  5506  0FEE                     	;# 
  5507  0FEF                     	;# 
  5508  0000                     	;# 
  5509  0001                     	;# 
  5510  0002                     	;# 
  5511  0003                     	;# 
  5512  0004                     	;# 
  5513  0005                     	;# 
  5514  0006                     	;# 
  5515  0007                     	;# 
  5516  0008                     	;# 
  5517  0009                     	;# 
  5518  000A                     	;# 
  5519  000B                     	;# 
  5520  000C                     	;# 
  5521  000D                     	;# 
  5522  000E                     	;# 
  5523  0010                     	;# 
  5524  0011                     	;# 
  5525  0012                     	;# 
  5526  0013                     	;# 
  5527  0014                     	;# 
  5528  0015                     	;# 
  5529  0015                     	;# 
  5530  0016                     	;# 
  5531  0016                     	;# 
  5532  0017                     	;# 
  5533  0018                     	;# 
  5534  0019                     	;# 
  5535  0019                     	;# 
  5536  001A                     	;# 
  5537  001B                     	;# 
  5538  001C                     	;# 
  5539  001D                     	;# 
  5540  001E                     	;# 
  5541  001F                     	;# 
  5542  008C                     	;# 
  5543  008D                     	;# 
  5544  008E                     	;# 
  5545  0090                     	;# 
  5546  0091                     	;# 
  5547  0092                     	;# 
  5548  0093                     	;# 
  5549  0094                     	;# 
  5550  0097                     	;# 
  5551  009B                     	;# 
  5552  009B                     	;# 
  5553  009C                     	;# 
  5554  009D                     	;# 
  5555  009E                     	;# 
  5556  009F                     	;# 
  5557  010C                     	;# 
  5558  010D                     	;# 
  5559  010E                     	;# 
  5560  0111                     	;# 
  5561  0112                     	;# 
  5562  0113                     	;# 
  5563  0114                     	;# 
  5564  0115                     	;# 
  5565  0116                     	;# 
  5566  0117                     	;# 
  5567  0118                     	;# 
  5568  0119                     	;# 
  5569  018C                     	;# 
  5570  018D                     	;# 
  5571  018E                     	;# 
  5572  0199                     	;# 
  5573  0199                     	;# 
  5574  0199                     	;# 
  5575  019A                     	;# 
  5576  019A                     	;# 
  5577  019A                     	;# 
  5578  019B                     	;# 
  5579  019B                     	;# 
  5580  019B                     	;# 
  5581  019B                     	;# 
  5582  019B                     	;# 
  5583  019C                     	;# 
  5584  019C                     	;# 
  5585  019C                     	;# 
  5586  019D                     	;# 
  5587  019D                     	;# 
  5588  019D                     	;# 
  5589  019E                     	;# 
  5590  019E                     	;# 
  5591  019E                     	;# 
  5592  019F                     	;# 
  5593  019F                     	;# 
  5594  019F                     	;# 
  5595  019F                     	;# 
  5596  019F                     	;# 
  5597  020C                     	;# 
  5598  020D                     	;# 
  5599  020E                     	;# 
  5600  0211                     	;# 
  5601  0211                     	;# 
  5602  0212                     	;# 
  5603  0212                     	;# 
  5604  0213                     	;# 
  5605  0213                     	;# 
  5606  0214                     	;# 
  5607  0214                     	;# 
  5608  0215                     	;# 
  5609  0215                     	;# 
  5610  0215                     	;# 
  5611  0215                     	;# 
  5612  0216                     	;# 
  5613  0216                     	;# 
  5614  0217                     	;# 
  5615  0217                     	;# 
  5616  0219                     	;# 
  5617  021A                     	;# 
  5618  021B                     	;# 
  5619  021C                     	;# 
  5620  021D                     	;# 
  5621  021D                     	;# 
  5622  021E                     	;# 
  5623  021F                     	;# 
  5624  028C                     	;# 
  5625  028D                     	;# 
  5626  028E                     	;# 
  5627  0291                     	;# 
  5628  0291                     	;# 
  5629  0292                     	;# 
  5630  0293                     	;# 
  5631  0294                     	;# 
  5632  0295                     	;# 
  5633  0295                     	;# 
  5634  0296                     	;# 
  5635  0297                     	;# 
  5636  0298                     	;# 
  5637  029F                     	;# 
  5638  030C                     	;# 
  5639  030D                     	;# 
  5640  030E                     	;# 
  5641  0311                     	;# 
  5642  0311                     	;# 
  5643  0312                     	;# 
  5644  0313                     	;# 
  5645  0314                     	;# 
  5646  0315                     	;# 
  5647  0315                     	;# 
  5648  0316                     	;# 
  5649  0317                     	;# 
  5650  0318                     	;# 
  5651  038C                     	;# 
  5652  038D                     	;# 
  5653  038E                     	;# 
  5654  0391                     	;# 
  5655  0392                     	;# 
  5656  0393                     	;# 
  5657  0394                     	;# 
  5658  0395                     	;# 
  5659  0396                     	;# 
  5660  0397                     	;# 
  5661  0398                     	;# 
  5662  0399                     	;# 
  5663  039A                     	;# 
  5664  039C                     	;# 
  5665  039D                     	;# 
  5666  039E                     	;# 
  5667  039F                     	;# 
  5668  0411                     	;# 
  5669  0411                     	;# 
  5670  0412                     	;# 
  5671  0413                     	;# 
  5672  0414                     	;# 
  5673  0415                     	;# 
  5674  0416                     	;# 
  5675  0417                     	;# 
  5676  0418                     	;# 
  5677  0418                     	;# 
  5678  0419                     	;# 
  5679  041A                     	;# 
  5680  041B                     	;# 
  5681  041C                     	;# 
  5682  041D                     	;# 
  5683  041E                     	;# 
  5684  041F                     	;# 
  5685  0498                     	;# 
  5686  0498                     	;# 
  5687  0499                     	;# 
  5688  049A                     	;# 
  5689  049B                     	;# 
  5690  049B                     	;# 
  5691  049C                     	;# 
  5692  049D                     	;# 
  5693  049E                     	;# 
  5694  049F                     	;# 
  5695  0617                     	;# 
  5696  0618                     	;# 
  5697  0619                     	;# 
  5698  0619                     	;# 
  5699  061A                     	;# 
  5700  061B                     	;# 
  5701  061C                     	;# 
  5702  061C                     	;# 
  5703  061F                     	;# 
  5704  0691                     	;# 
  5705  0692                     	;# 
  5706  0693                     	;# 
  5707  0694                     	;# 
  5708  0695                     	;# 
  5709  0696                     	;# 
  5710  0697                     	;# 
  5711  0698                     	;# 
  5712  0699                     	;# 
  5713  0711                     	;# 
  5714  0712                     	;# 
  5715  0713                     	;# 
  5716  0714                     	;# 
  5717  0715                     	;# 
  5718  0716                     	;# 
  5719  0717                     	;# 
  5720  0718                     	;# 
  5721  0719                     	;# 
  5722  0891                     	;# 
  5723  0891                     	;# 
  5724  0891                     	;# 
  5725  0891                     	;# 
  5726  0891                     	;# 
  5727  0891                     	;# 
  5728  0892                     	;# 
  5729  0892                     	;# 
  5730  0892                     	;# 
  5731  0893                     	;# 
  5732  0893                     	;# 
  5733  0893                     	;# 
  5734  0893                     	;# 
  5735  0893                     	;# 
  5736  0893                     	;# 
  5737  0894                     	;# 
  5738  0894                     	;# 
  5739  0894                     	;# 
  5740  0895                     	;# 
  5741  0895                     	;# 
  5742  0895                     	;# 
  5743  0896                     	;# 
  5744  0896                     	;# 
  5745  0896                     	;# 
  5746  089B                     	;# 
  5747  0911                     	;# 
  5748  0912                     	;# 
  5749  0913                     	;# 
  5750  0914                     	;# 
  5751  0915                     	;# 
  5752  0916                     	;# 
  5753  0918                     	;# 
  5754  0919                     	;# 
  5755  091A                     	;# 
  5756  091B                     	;# 
  5757  091C                     	;# 
  5758  091D                     	;# 
  5759  091E                     	;# 
  5760  091F                     	;# 
  5761  0E0F                     	;# 
  5762  0E10                     	;# 
  5763  0E11                     	;# 
  5764  0E12                     	;# 
  5765  0E13                     	;# 
  5766  0E14                     	;# 
  5767  0E15                     	;# 
  5768  0E16                     	;# 
  5769  0E17                     	;# 
  5770  0E18                     	;# 
  5771  0E19                     	;# 
  5772  0E1A                     	;# 
  5773  0E1B                     	;# 
  5774  0E1C                     	;# 
  5775  0E1D                     	;# 
  5776  0E1E                     	;# 
  5777  0E1F                     	;# 
  5778  0E20                     	;# 
  5779  0E21                     	;# 
  5780  0E22                     	;# 
  5781  0E24                     	;# 
  5782  0E25                     	;# 
  5783  0E28                     	;# 
  5784  0E29                     	;# 
  5785  0E2A                     	;# 
  5786  0E2B                     	;# 
  5787  0E2C                     	;# 
  5788  0E2D                     	;# 
  5789  0E2E                     	;# 
  5790  0E2F                     	;# 
  5791  0E90                     	;# 
  5792  0E91                     	;# 
  5793  0E92                     	;# 
  5794  0E94                     	;# 
  5795  0E95                     	;# 
  5796  0E9C                     	;# 
  5797  0E9D                     	;# 
  5798  0E9E                     	;# 
  5799  0E9F                     	;# 
  5800  0EA0                     	;# 
  5801  0EA1                     	;# 
  5802  0EA2                     	;# 
  5803  0EA3                     	;# 
  5804  0EA4                     	;# 
  5805  0EA5                     	;# 
  5806  0EA6                     	;# 
  5807  0EA7                     	;# 
  5808  0F0F                     	;# 
  5809  0F10                     	;# 
  5810  0F11                     	;# 
  5811  0F12                     	;# 
  5812  0F13                     	;# 
  5813  0F14                     	;# 
  5814  0F15                     	;# 
  5815  0F16                     	;# 
  5816  0F17                     	;# 
  5817  0F18                     	;# 
  5818  0F19                     	;# 
  5819  0F1A                     	;# 
  5820  0F1B                     	;# 
  5821  0F1C                     	;# 
  5822  0F1D                     	;# 
  5823  0F1E                     	;# 
  5824  0F1F                     	;# 
  5825  0F20                     	;# 
  5826  0F21                     	;# 
  5827  0F22                     	;# 
  5828  0F23                     	;# 
  5829  0F24                     	;# 
  5830  0F25                     	;# 
  5831  0F26                     	;# 
  5832  0F27                     	;# 
  5833  0F28                     	;# 
  5834  0F29                     	;# 
  5835  0F2A                     	;# 
  5836  0F2B                     	;# 
  5837  0F2C                     	;# 
  5838  0F2D                     	;# 
  5839  0F2E                     	;# 
  5840  0F2F                     	;# 
  5841  0F30                     	;# 
  5842  0F31                     	;# 
  5843  0F32                     	;# 
  5844  0F33                     	;# 
  5845  0F34                     	;# 
  5846  0F35                     	;# 
  5847  0F36                     	;# 
  5848  0F37                     	;# 
  5849  0FE4                     	;# 
  5850  0FE5                     	;# 
  5851  0FE6                     	;# 
  5852  0FE7                     	;# 
  5853  0FE8                     	;# 
  5854  0FE9                     	;# 
  5855  0FEA                     	;# 
  5856  0FEB                     	;# 
  5857  0FED                     	;# 
  5858  0FEE                     	;# 
  5859  0FEF                     	;# 
  5860  0000                     	;# 
  5861  0001                     	;# 
  5862  0002                     	;# 
  5863  0003                     	;# 
  5864  0004                     	;# 
  5865  0005                     	;# 
  5866  0006                     	;# 
  5867  0007                     	;# 
  5868  0008                     	;# 
  5869  0009                     	;# 
  5870  000A                     	;# 
  5871  000B                     	;# 
  5872  000C                     	;# 
  5873  000D                     	;# 
  5874  000E                     	;# 
  5875  0010                     	;# 
  5876  0011                     	;# 
  5877  0012                     	;# 
  5878  0013                     	;# 
  5879  0014                     	;# 
  5880  0015                     	;# 
  5881  0015                     	;# 
  5882  0016                     	;# 
  5883  0016                     	;# 
  5884  0017                     	;# 
  5885  0018                     	;# 
  5886  0019                     	;# 
  5887  0019                     	;# 
  5888  001A                     	;# 
  5889  001B                     	;# 
  5890  001C                     	;# 
  5891  001D                     	;# 
  5892  001E                     	;# 
  5893  001F                     	;# 
  5894  008C                     	;# 
  5895  008D                     	;# 
  5896  008E                     	;# 
  5897  0090                     	;# 
  5898  0091                     	;# 
  5899  0092                     	;# 
  5900  0093                     	;# 
  5901  0094                     	;# 
  5902  0097                     	;# 
  5903  009B                     	;# 
  5904  009B                     	;# 
  5905  009C                     	;# 
  5906  009D                     	;# 
  5907  009E                     	;# 
  5908  009F                     	;# 
  5909  010C                     	;# 
  5910  010D                     	;# 
  5911  010E                     	;# 
  5912  0111                     	;# 
  5913  0112                     	;# 
  5914  0113                     	;# 
  5915  0114                     	;# 
  5916  0115                     	;# 
  5917  0116                     	;# 
  5918  0117                     	;# 
  5919  0118                     	;# 
  5920  0119                     	;# 
  5921  018C                     	;# 
  5922  018D                     	;# 
  5923  018E                     	;# 
  5924  0199                     	;# 
  5925  0199                     	;# 
  5926  0199                     	;# 
  5927  019A                     	;# 
  5928  019A                     	;# 
  5929  019A                     	;# 
  5930  019B                     	;# 
  5931  019B                     	;# 
  5932  019B                     	;# 
  5933  019B                     	;# 
  5934  019B                     	;# 
  5935  019C                     	;# 
  5936  019C                     	;# 
  5937  019C                     	;# 
  5938  019D                     	;# 
  5939  019D                     	;# 
  5940  019D                     	;# 
  5941  019E                     	;# 
  5942  019E                     	;# 
  5943  019E                     	;# 
  5944  019F                     	;# 
  5945  019F                     	;# 
  5946  019F                     	;# 
  5947  019F                     	;# 
  5948  019F                     	;# 
  5949  020C                     	;# 
  5950  020D                     	;# 
  5951  020E                     	;# 
  5952  0211                     	;# 
  5953  0211                     	;# 
  5954  0212                     	;# 
  5955  0212                     	;# 
  5956  0213                     	;# 
  5957  0213                     	;# 
  5958  0214                     	;# 
  5959  0214                     	;# 
  5960  0215                     	;# 
  5961  0215                     	;# 
  5962  0215                     	;# 
  5963  0215                     	;# 
  5964  0216                     	;# 
  5965  0216                     	;# 
  5966  0217                     	;# 
  5967  0217                     	;# 
  5968  0219                     	;# 
  5969  021A                     	;# 
  5970  021B                     	;# 
  5971  021C                     	;# 
  5972  021D                     	;# 
  5973  021D                     	;# 
  5974  021E                     	;# 
  5975  021F                     	;# 
  5976  028C                     	;# 
  5977  028D                     	;# 
  5978  028E                     	;# 
  5979  0291                     	;# 
  5980  0291                     	;# 
  5981  0292                     	;# 
  5982  0293                     	;# 
  5983  0294                     	;# 
  5984  0295                     	;# 
  5985  0295                     	;# 
  5986  0296                     	;# 
  5987  0297                     	;# 
  5988  0298                     	;# 
  5989  029F                     	;# 
  5990  030C                     	;# 
  5991  030D                     	;# 
  5992  030E                     	;# 
  5993  0311                     	;# 
  5994  0311                     	;# 
  5995  0312                     	;# 
  5996  0313                     	;# 
  5997  0314                     	;# 
  5998  0315                     	;# 
  5999  0315                     	;# 
  6000  0316                     	;# 
  6001  0317                     	;# 
  6002  0318                     	;# 
  6003  038C                     	;# 
  6004  038D                     	;# 
  6005  038E                     	;# 
  6006  0391                     	;# 
  6007  0392                     	;# 
  6008  0393                     	;# 
  6009  0394                     	;# 
  6010  0395                     	;# 
  6011  0396                     	;# 
  6012  0397                     	;# 
  6013  0398                     	;# 
  6014  0399                     	;# 
  6015  039A                     	;# 
  6016  039C                     	;# 
  6017  039D                     	;# 
  6018  039E                     	;# 
  6019  039F                     	;# 
  6020  0411                     	;# 
  6021  0411                     	;# 
  6022  0412                     	;# 
  6023  0413                     	;# 
  6024  0414                     	;# 
  6025  0415                     	;# 
  6026  0416                     	;# 
  6027  0417                     	;# 
  6028  0418                     	;# 
  6029  0418                     	;# 
  6030  0419                     	;# 
  6031  041A                     	;# 
  6032  041B                     	;# 
  6033  041C                     	;# 
  6034  041D                     	;# 
  6035  041E                     	;# 
  6036  041F                     	;# 
  6037  0498                     	;# 
  6038  0498                     	;# 
  6039  0499                     	;# 
  6040  049A                     	;# 
  6041  049B                     	;# 
  6042  049B                     	;# 
  6043  049C                     	;# 
  6044  049D                     	;# 
  6045  049E                     	;# 
  6046  049F                     	;# 
  6047  0617                     	;# 
  6048  0618                     	;# 
  6049  0619                     	;# 
  6050  0619                     	;# 
  6051  061A                     	;# 
  6052  061B                     	;# 
  6053  061C                     	;# 
  6054  061C                     	;# 
  6055  061F                     	;# 
  6056  0691                     	;# 
  6057  0692                     	;# 
  6058  0693                     	;# 
  6059  0694                     	;# 
  6060  0695                     	;# 
  6061  0696                     	;# 
  6062  0697                     	;# 
  6063  0698                     	;# 
  6064  0699                     	;# 
  6065  0711                     	;# 
  6066  0712                     	;# 
  6067  0713                     	;# 
  6068  0714                     	;# 
  6069  0715                     	;# 
  6070  0716                     	;# 
  6071  0717                     	;# 
  6072  0718                     	;# 
  6073  0719                     	;# 
  6074  0891                     	;# 
  6075  0891                     	;# 
  6076  0891                     	;# 
  6077  0891                     	;# 
  6078  0891                     	;# 
  6079  0891                     	;# 
  6080  0892                     	;# 
  6081  0892                     	;# 
  6082  0892                     	;# 
  6083  0893                     	;# 
  6084  0893                     	;# 
  6085  0893                     	;# 
  6086  0893                     	;# 
  6087  0893                     	;# 
  6088  0893                     	;# 
  6089  0894                     	;# 
  6090  0894                     	;# 
  6091  0894                     	;# 
  6092  0895                     	;# 
  6093  0895                     	;# 
  6094  0895                     	;# 
  6095  0896                     	;# 
  6096  0896                     	;# 
  6097  0896                     	;# 
  6098  089B                     	;# 
  6099  0911                     	;# 
  6100  0912                     	;# 
  6101  0913                     	;# 
  6102  0914                     	;# 
  6103  0915                     	;# 
  6104  0916                     	;# 
  6105  0918                     	;# 
  6106  0919                     	;# 
  6107  091A                     	;# 
  6108  091B                     	;# 
  6109  091C                     	;# 
  6110  091D                     	;# 
  6111  091E                     	;# 
  6112  091F                     	;# 
  6113  0E0F                     	;# 
  6114  0E10                     	;# 
  6115  0E11                     	;# 
  6116  0E12                     	;# 
  6117  0E13                     	;# 
  6118  0E14                     	;# 
  6119  0E15                     	;# 
  6120  0E16                     	;# 
  6121  0E17                     	;# 
  6122  0E18                     	;# 
  6123  0E19                     	;# 
  6124  0E1A                     	;# 
  6125  0E1B                     	;# 
  6126  0E1C                     	;# 
  6127  0E1D                     	;# 
  6128  0E1E                     	;# 
  6129  0E1F                     	;# 
  6130  0E20                     	;# 
  6131  0E21                     	;# 
  6132  0E22                     	;# 
  6133  0E24                     	;# 
  6134  0E25                     	;# 
  6135  0E28                     	;# 
  6136  0E29                     	;# 
  6137  0E2A                     	;# 
  6138  0E2B                     	;# 
  6139  0E2C                     	;# 
  6140  0E2D                     	;# 
  6141  0E2E                     	;# 
  6142  0E2F                     	;# 
  6143  0E90                     	;# 
  6144  0E91                     	;# 
  6145  0E92                     	;# 
  6146  0E94                     	;# 
  6147  0E95                     	;# 
  6148  0E9C                     	;# 
  6149  0E9D                     	;# 
  6150  0E9E                     	;# 
  6151  0E9F                     	;# 
  6152  0EA0                     	;# 
  6153  0EA1                     	;# 
  6154  0EA2                     	;# 
  6155  0EA3                     	;# 
  6156  0EA4                     	;# 
  6157  0EA5                     	;# 
  6158  0EA6                     	;# 
  6159  0EA7                     	;# 
  6160  0F0F                     	;# 
  6161  0F10                     	;# 
  6162  0F11                     	;# 
  6163  0F12                     	;# 
  6164  0F13                     	;# 
  6165  0F14                     	;# 
  6166  0F15                     	;# 
  6167  0F16                     	;# 
  6168  0F17                     	;# 
  6169  0F18                     	;# 
  6170  0F19                     	;# 
  6171  0F1A                     	;# 
  6172  0F1B                     	;# 
  6173  0F1C                     	;# 
  6174  0F1D                     	;# 
  6175  0F1E                     	;# 
  6176  0F1F                     	;# 
  6177  0F20                     	;# 
  6178  0F21                     	;# 
  6179  0F22                     	;# 
  6180  0F23                     	;# 
  6181  0F24                     	;# 
  6182  0F25                     	;# 
  6183  0F26                     	;# 
  6184  0F27                     	;# 
  6185  0F28                     	;# 
  6186  0F29                     	;# 
  6187  0F2A                     	;# 
  6188  0F2B                     	;# 
  6189  0F2C                     	;# 
  6190  0F2D                     	;# 
  6191  0F2E                     	;# 
  6192  0F2F                     	;# 
  6193  0F30                     	;# 
  6194  0F31                     	;# 
  6195  0F32                     	;# 
  6196  0F33                     	;# 
  6197  0F34                     	;# 
  6198  0F35                     	;# 
  6199  0F36                     	;# 
  6200  0F37                     	;# 
  6201  0FE4                     	;# 
  6202  0FE5                     	;# 
  6203  0FE6                     	;# 
  6204  0FE7                     	;# 
  6205  0FE8                     	;# 
  6206  0FE9                     	;# 
  6207  0FEA                     	;# 
  6208  0FEB                     	;# 
  6209  0FED                     	;# 
  6210  0FEE                     	;# 
  6211  0FEF                     	;# 
  6212  0000                     	;# 
  6213  0001                     	;# 
  6214  0002                     	;# 
  6215  0003                     	;# 
  6216  0004                     	;# 
  6217  0005                     	;# 
  6218  0006                     	;# 
  6219  0007                     	;# 
  6220  0008                     	;# 
  6221  0009                     	;# 
  6222  000A                     	;# 
  6223  000B                     	;# 
  6224  000C                     	;# 
  6225  000D                     	;# 
  6226  000E                     	;# 
  6227  0010                     	;# 
  6228  0011                     	;# 
  6229  0012                     	;# 
  6230  0013                     	;# 
  6231  0014                     	;# 
  6232  0015                     	;# 
  6233  0015                     	;# 
  6234  0016                     	;# 
  6235  0016                     	;# 
  6236  0017                     	;# 
  6237  0018                     	;# 
  6238  0019                     	;# 
  6239  0019                     	;# 
  6240  001A                     	;# 
  6241  001B                     	;# 
  6242  001C                     	;# 
  6243  001D                     	;# 
  6244  001E                     	;# 
  6245  001F                     	;# 
  6246  008C                     	;# 
  6247  008D                     	;# 
  6248  008E                     	;# 
  6249  0090                     	;# 
  6250  0091                     	;# 
  6251  0092                     	;# 
  6252  0093                     	;# 
  6253  0094                     	;# 
  6254  0097                     	;# 
  6255  009B                     	;# 
  6256  009B                     	;# 
  6257  009C                     	;# 
  6258  009D                     	;# 
  6259  009E                     	;# 
  6260  009F                     	;# 
  6261  010C                     	;# 
  6262  010D                     	;# 
  6263  010E                     	;# 
  6264  0111                     	;# 
  6265  0112                     	;# 
  6266  0113                     	;# 
  6267  0114                     	;# 
  6268  0115                     	;# 
  6269  0116                     	;# 
  6270  0117                     	;# 
  6271  0118                     	;# 
  6272  0119                     	;# 
  6273  018C                     	;# 
  6274  018D                     	;# 
  6275  018E                     	;# 
  6276  0199                     	;# 
  6277  0199                     	;# 
  6278  0199                     	;# 
  6279  019A                     	;# 
  6280  019A                     	;# 
  6281  019A                     	;# 
  6282  019B                     	;# 
  6283  019B                     	;# 
  6284  019B                     	;# 
  6285  019B                     	;# 
  6286  019B                     	;# 
  6287  019C                     	;# 
  6288  019C                     	;# 
  6289  019C                     	;# 
  6290  019D                     	;# 
  6291  019D                     	;# 
  6292  019D                     	;# 
  6293  019E                     	;# 
  6294  019E                     	;# 
  6295  019E                     	;# 
  6296  019F                     	;# 
  6297  019F                     	;# 
  6298  019F                     	;# 
  6299  019F                     	;# 
  6300  019F                     	;# 
  6301  020C                     	;# 
  6302  020D                     	;# 
  6303  020E                     	;# 
  6304  0211                     	;# 
  6305  0211                     	;# 
  6306  0212                     	;# 
  6307  0212                     	;# 
  6308  0213                     	;# 
  6309  0213                     	;# 
  6310  0214                     	;# 
  6311  0214                     	;# 
  6312  0215                     	;# 
  6313  0215                     	;# 
  6314  0215                     	;# 
  6315  0215                     	;# 
  6316  0216                     	;# 
  6317  0216                     	;# 
  6318  0217                     	;# 
  6319  0217                     	;# 
  6320  0219                     	;# 
  6321  021A                     	;# 
  6322  021B                     	;# 
  6323  021C                     	;# 
  6324  021D                     	;# 
  6325  021D                     	;# 
  6326  021E                     	;# 
  6327  021F                     	;# 
  6328  028C                     	;# 
  6329  028D                     	;# 
  6330  028E                     	;# 
  6331  0291                     	;# 
  6332  0291                     	;# 
  6333  0292                     	;# 
  6334  0293                     	;# 
  6335  0294                     	;# 
  6336  0295                     	;# 
  6337  0295                     	;# 
  6338  0296                     	;# 
  6339  0297                     	;# 
  6340  0298                     	;# 
  6341  029F                     	;# 
  6342  030C                     	;# 
  6343  030D                     	;# 
  6344  030E                     	;# 
  6345  0311                     	;# 
  6346  0311                     	;# 
  6347  0312                     	;# 
  6348  0313                     	;# 
  6349  0314                     	;# 
  6350  0315                     	;# 
  6351  0315                     	;# 
  6352  0316                     	;# 
  6353  0317                     	;# 
  6354  0318                     	;# 
  6355  038C                     	;# 
  6356  038D                     	;# 
  6357  038E                     	;# 
  6358  0391                     	;# 
  6359  0392                     	;# 
  6360  0393                     	;# 
  6361  0394                     	;# 
  6362  0395                     	;# 
  6363  0396                     	;# 
  6364  0397                     	;# 
  6365  0398                     	;# 
  6366  0399                     	;# 
  6367  039A                     	;# 
  6368  039C                     	;# 
  6369  039D                     	;# 
  6370  039E                     	;# 
  6371  039F                     	;# 
  6372  0411                     	;# 
  6373  0411                     	;# 
  6374  0412                     	;# 
  6375  0413                     	;# 
  6376  0414                     	;# 
  6377  0415                     	;# 
  6378  0416                     	;# 
  6379  0417                     	;# 
  6380  0418                     	;# 
  6381  0418                     	;# 
  6382  0419                     	;# 
  6383  041A                     	;# 
  6384  041B                     	;# 
  6385  041C                     	;# 
  6386  041D                     	;# 
  6387  041E                     	;# 
  6388  041F                     	;# 
  6389  0498                     	;# 
  6390  0498                     	;# 
  6391  0499                     	;# 
  6392  049A                     	;# 
  6393  049B                     	;# 
  6394  049B                     	;# 
  6395  049C                     	;# 
  6396  049D                     	;# 
  6397  049E                     	;# 
  6398  049F                     	;# 
  6399  0617                     	;# 
  6400  0618                     	;# 
  6401  0619                     	;# 
  6402  0619                     	;# 
  6403  061A                     	;# 
  6404  061B                     	;# 
  6405  061C                     	;# 
  6406  061C                     	;# 
  6407  061F                     	;# 
  6408  0691                     	;# 
  6409  0692                     	;# 
  6410  0693                     	;# 
  6411  0694                     	;# 
  6412  0695                     	;# 
  6413  0696                     	;# 
  6414  0697                     	;# 
  6415  0698                     	;# 
  6416  0699                     	;# 
  6417  0711                     	;# 
  6418  0712                     	;# 
  6419  0713                     	;# 
  6420  0714                     	;# 
  6421  0715                     	;# 
  6422  0716                     	;# 
  6423  0717                     	;# 
  6424  0718                     	;# 
  6425  0719                     	;# 
  6426  0891                     	;# 
  6427  0891                     	;# 
  6428  0891                     	;# 
  6429  0891                     	;# 
  6430  0891                     	;# 
  6431  0891                     	;# 
  6432  0892                     	;# 
  6433  0892                     	;# 
  6434  0892                     	;# 
  6435  0893                     	;# 
  6436  0893                     	;# 
  6437  0893                     	;# 
  6438  0893                     	;# 
  6439  0893                     	;# 
  6440  0893                     	;# 
  6441  0894                     	;# 
  6442  0894                     	;# 
  6443  0894                     	;# 
  6444  0895                     	;# 
  6445  0895                     	;# 
  6446  0895                     	;# 
  6447  0896                     	;# 
  6448  0896                     	;# 
  6449  0896                     	;# 
  6450  089B                     	;# 
  6451  0911                     	;# 
  6452  0912                     	;# 
  6453  0913                     	;# 
  6454  0914                     	;# 
  6455  0915                     	;# 
  6456  0916                     	;# 
  6457  0918                     	;# 
  6458  0919                     	;# 
  6459  091A                     	;# 
  6460  091B                     	;# 
  6461  091C                     	;# 
  6462  091D                     	;# 
  6463  091E                     	;# 
  6464  091F                     	;# 
  6465  0E0F                     	;# 
  6466  0E10                     	;# 
  6467  0E11                     	;# 
  6468  0E12                     	;# 
  6469  0E13                     	;# 
  6470  0E14                     	;# 
  6471  0E15                     	;# 
  6472  0E16                     	;# 
  6473  0E17                     	;# 
  6474  0E18                     	;# 
  6475  0E19                     	;# 
  6476  0E1A                     	;# 
  6477  0E1B                     	;# 
  6478  0E1C                     	;# 
  6479  0E1D                     	;# 
  6480  0E1E                     	;# 
  6481  0E1F                     	;# 
  6482  0E20                     	;# 
  6483  0E21                     	;# 
  6484  0E22                     	;# 
  6485  0E24                     	;# 
  6486  0E25                     	;# 
  6487  0E28                     	;# 
  6488  0E29                     	;# 
  6489  0E2A                     	;# 
  6490  0E2B                     	;# 
  6491  0E2C                     	;# 
  6492  0E2D                     	;# 
  6493  0E2E                     	;# 
  6494  0E2F                     	;# 
  6495  0E90                     	;# 
  6496  0E91                     	;# 
  6497  0E92                     	;# 
  6498  0E94                     	;# 
  6499  0E95                     	;# 
  6500  0E9C                     	;# 
  6501  0E9D                     	;# 
  6502  0E9E                     	;# 
  6503  0E9F                     	;# 
  6504  0EA0                     	;# 
  6505  0EA1                     	;# 
  6506  0EA2                     	;# 
  6507  0EA3                     	;# 
  6508  0EA4                     	;# 
  6509  0EA5                     	;# 
  6510  0EA6                     	;# 
  6511  0EA7                     	;# 
  6512  0F0F                     	;# 
  6513  0F10                     	;# 
  6514  0F11                     	;# 
  6515  0F12                     	;# 
  6516  0F13                     	;# 
  6517  0F14                     	;# 
  6518  0F15                     	;# 
  6519  0F16                     	;# 
  6520  0F17                     	;# 
  6521  0F18                     	;# 
  6522  0F19                     	;# 
  6523  0F1A                     	;# 
  6524  0F1B                     	;# 
  6525  0F1C                     	;# 
  6526  0F1D                     	;# 
  6527  0F1E                     	;# 
  6528  0F1F                     	;# 
  6529  0F20                     	;# 
  6530  0F21                     	;# 
  6531  0F22                     	;# 
  6532  0F23                     	;# 
  6533  0F24                     	;# 
  6534  0F25                     	;# 
  6535  0F26                     	;# 
  6536  0F27                     	;# 
  6537  0F28                     	;# 
  6538  0F29                     	;# 
  6539  0F2A                     	;# 
  6540  0F2B                     	;# 
  6541  0F2C                     	;# 
  6542  0F2D                     	;# 
  6543  0F2E                     	;# 
  6544  0F2F                     	;# 
  6545  0F30                     	;# 
  6546  0F31                     	;# 
  6547  0F32                     	;# 
  6548  0F33                     	;# 
  6549  0F34                     	;# 
  6550  0F35                     	;# 
  6551  0F36                     	;# 
  6552  0F37                     	;# 
  6553  0FE4                     	;# 
  6554  0FE5                     	;# 
  6555  0FE6                     	;# 
  6556  0FE7                     	;# 
  6557  0FE8                     	;# 
  6558  0FE9                     	;# 
  6559  0FEA                     	;# 
  6560  0FEB                     	;# 
  6561  0FED                     	;# 
  6562  0FEE                     	;# 
  6563  0FEF                     	;# 
  6564  0000                     	;# 
  6565  0001                     	;# 
  6566  0002                     	;# 
  6567  0003                     	;# 
  6568  0004                     	;# 
  6569  0005                     	;# 
  6570  0006                     	;# 
  6571  0007                     	;# 
  6572  0008                     	;# 
  6573  0009                     	;# 
  6574  000A                     	;# 
  6575  000B                     	;# 
  6576  000C                     	;# 
  6577  000D                     	;# 
  6578  000E                     	;# 
  6579  0010                     	;# 
  6580  0011                     	;# 
  6581  0012                     	;# 
  6582  0013                     	;# 
  6583  0014                     	;# 
  6584  0015                     	;# 
  6585  0015                     	;# 
  6586  0016                     	;# 
  6587  0016                     	;# 
  6588  0017                     	;# 
  6589  0018                     	;# 
  6590  0019                     	;# 
  6591  0019                     	;# 
  6592  001A                     	;# 
  6593  001B                     	;# 
  6594  001C                     	;# 
  6595  001D                     	;# 
  6596  001E                     	;# 
  6597  001F                     	;# 
  6598  008C                     	;# 
  6599  008D                     	;# 
  6600  008E                     	;# 
  6601  0090                     	;# 
  6602  0091                     	;# 
  6603  0092                     	;# 
  6604  0093                     	;# 
  6605  0094                     	;# 
  6606  0097                     	;# 
  6607  009B                     	;# 
  6608  009B                     	;# 
  6609  009C                     	;# 
  6610  009D                     	;# 
  6611  009E                     	;# 
  6612  009F                     	;# 
  6613  010C                     	;# 
  6614  010D                     	;# 
  6615  010E                     	;# 
  6616  0111                     	;# 
  6617  0112                     	;# 
  6618  0113                     	;# 
  6619  0114                     	;# 
  6620  0115                     	;# 
  6621  0116                     	;# 
  6622  0117                     	;# 
  6623  0118                     	;# 
  6624  0119                     	;# 
  6625  018C                     	;# 
  6626  018D                     	;# 
  6627  018E                     	;# 
  6628  0199                     	;# 
  6629  0199                     	;# 
  6630  0199                     	;# 
  6631  019A                     	;# 
  6632  019A                     	;# 
  6633  019A                     	;# 
  6634  019B                     	;# 
  6635  019B                     	;# 
  6636  019B                     	;# 
  6637  019B                     	;# 
  6638  019B                     	;# 
  6639  019C                     	;# 
  6640  019C                     	;# 
  6641  019C                     	;# 
  6642  019D                     	;# 
  6643  019D                     	;# 
  6644  019D                     	;# 
  6645  019E                     	;# 
  6646  019E                     	;# 
  6647  019E                     	;# 
  6648  019F                     	;# 
  6649  019F                     	;# 
  6650  019F                     	;# 
  6651  019F                     	;# 
  6652  019F                     	;# 
  6653  020C                     	;# 
  6654  020D                     	;# 
  6655  020E                     	;# 
  6656  0211                     	;# 
  6657  0211                     	;# 
  6658  0212                     	;# 
  6659  0212                     	;# 
  6660  0213                     	;# 
  6661  0213                     	;# 
  6662  0214                     	;# 
  6663  0214                     	;# 
  6664  0215                     	;# 
  6665  0215                     	;# 
  6666  0215                     	;# 
  6667  0215                     	;# 
  6668  0216                     	;# 
  6669  0216                     	;# 
  6670  0217                     	;# 
  6671  0217                     	;# 
  6672  0219                     	;# 
  6673  021A                     	;# 
  6674  021B                     	;# 
  6675  021C                     	;# 
  6676  021D                     	;# 
  6677  021D                     	;# 
  6678  021E                     	;# 
  6679  021F                     	;# 
  6680  028C                     	;# 
  6681  028D                     	;# 
  6682  028E                     	;# 
  6683  0291                     	;# 
  6684  0291                     	;# 
  6685  0292                     	;# 
  6686  0293                     	;# 
  6687  0294                     	;# 
  6688  0295                     	;# 
  6689  0295                     	;# 
  6690  0296                     	;# 
  6691  0297                     	;# 
  6692  0298                     	;# 
  6693  029F                     	;# 
  6694  030C                     	;# 
  6695  030D                     	;# 
  6696  030E                     	;# 
  6697  0311                     	;# 
  6698  0311                     	;# 
  6699  0312                     	;# 
  6700  0313                     	;# 
  6701  0314                     	;# 
  6702  0315                     	;# 
  6703  0315                     	;# 
  6704  0316                     	;# 
  6705  0317                     	;# 
  6706  0318                     	;# 
  6707  038C                     	;# 
  6708  038D                     	;# 
  6709  038E                     	;# 
  6710  0391                     	;# 
  6711  0392                     	;# 
  6712  0393                     	;# 
  6713  0394                     	;# 
  6714  0395                     	;# 
  6715  0396                     	;# 
  6716  0397                     	;# 
  6717  0398                     	;# 
  6718  0399                     	;# 
  6719  039A                     	;# 
  6720  039C                     	;# 
  6721  039D                     	;# 
  6722  039E                     	;# 
  6723  039F                     	;# 
  6724  0411                     	;# 
  6725  0411                     	;# 
  6726  0412                     	;# 
  6727  0413                     	;# 
  6728  0414                     	;# 
  6729  0415                     	;# 
  6730  0416                     	;# 
  6731  0417                     	;# 
  6732  0418                     	;# 
  6733  0418                     	;# 
  6734  0419                     	;# 
  6735  041A                     	;# 
  6736  041B                     	;# 
  6737  041C                     	;# 
  6738  041D                     	;# 
  6739  041E                     	;# 
  6740  041F                     	;# 
  6741  0498                     	;# 
  6742  0498                     	;# 
  6743  0499                     	;# 
  6744  049A                     	;# 
  6745  049B                     	;# 
  6746  049B                     	;# 
  6747  049C                     	;# 
  6748  049D                     	;# 
  6749  049E                     	;# 
  6750  049F                     	;# 
  6751  0617                     	;# 
  6752  0618                     	;# 
  6753  0619                     	;# 
  6754  0619                     	;# 
  6755  061A                     	;# 
  6756  061B                     	;# 
  6757  061C                     	;# 
  6758  061C                     	;# 
  6759  061F                     	;# 
  6760  0691                     	;# 
  6761  0692                     	;# 
  6762  0693                     	;# 
  6763  0694                     	;# 
  6764  0695                     	;# 
  6765  0696                     	;# 
  6766  0697                     	;# 
  6767  0698                     	;# 
  6768  0699                     	;# 
  6769  0711                     	;# 
  6770  0712                     	;# 
  6771  0713                     	;# 
  6772  0714                     	;# 
  6773  0715                     	;# 
  6774  0716                     	;# 
  6775  0717                     	;# 
  6776  0718                     	;# 
  6777  0719                     	;# 
  6778  0891                     	;# 
  6779  0891                     	;# 
  6780  0891                     	;# 
  6781  0891                     	;# 
  6782  0891                     	;# 
  6783  0891                     	;# 
  6784  0892                     	;# 
  6785  0892                     	;# 
  6786  0892                     	;# 
  6787  0893                     	;# 
  6788  0893                     	;# 
  6789  0893                     	;# 
  6790  0893                     	;# 
  6791  0893                     	;# 
  6792  0893                     	;# 
  6793  0894                     	;# 
  6794  0894                     	;# 
  6795  0894                     	;# 
  6796  0895                     	;# 
  6797  0895                     	;# 
  6798  0895                     	;# 
  6799  0896                     	;# 
  6800  0896                     	;# 
  6801  0896                     	;# 
  6802  089B                     	;# 
  6803  0911                     	;# 
  6804  0912                     	;# 
  6805  0913                     	;# 
  6806  0914                     	;# 
  6807  0915                     	;# 
  6808  0916                     	;# 
  6809  0918                     	;# 
  6810  0919                     	;# 
  6811  091A                     	;# 
  6812  091B                     	;# 
  6813  091C                     	;# 
  6814  091D                     	;# 
  6815  091E                     	;# 
  6816  091F                     	;# 
  6817  0E0F                     	;# 
  6818  0E10                     	;# 
  6819  0E11                     	;# 
  6820  0E12                     	;# 
  6821  0E13                     	;# 
  6822  0E14                     	;# 
  6823  0E15                     	;# 
  6824  0E16                     	;# 
  6825  0E17                     	;# 
  6826  0E18                     	;# 
  6827  0E19                     	;# 
  6828  0E1A                     	;# 
  6829  0E1B                     	;# 
  6830  0E1C                     	;# 
  6831  0E1D                     	;# 
  6832  0E1E                     	;# 
  6833  0E1F                     	;# 
  6834  0E20                     	;# 
  6835  0E21                     	;# 
  6836  0E22                     	;# 
  6837  0E24                     	;# 
  6838  0E25                     	;# 
  6839  0E28                     	;# 
  6840  0E29                     	;# 
  6841  0E2A                     	;# 
  6842  0E2B                     	;# 
  6843  0E2C                     	;# 
  6844  0E2D                     	;# 
  6845  0E2E                     	;# 
  6846  0E2F                     	;# 
  6847  0E90                     	;# 
  6848  0E91                     	;# 
  6849  0E92                     	;# 
  6850  0E94                     	;# 
  6851  0E95                     	;# 
  6852  0E9C                     	;# 
  6853  0E9D                     	;# 
  6854  0E9E                     	;# 
  6855  0E9F                     	;# 
  6856  0EA0                     	;# 
  6857  0EA1                     	;# 
  6858  0EA2                     	;# 
  6859  0EA3                     	;# 
  6860  0EA4                     	;# 
  6861  0EA5                     	;# 
  6862  0EA6                     	;# 
  6863  0EA7                     	;# 
  6864  0F0F                     	;# 
  6865  0F10                     	;# 
  6866  0F11                     	;# 
  6867  0F12                     	;# 
  6868  0F13                     	;# 
  6869  0F14                     	;# 
  6870  0F15                     	;# 
  6871  0F16                     	;# 
  6872  0F17                     	;# 
  6873  0F18                     	;# 
  6874  0F19                     	;# 
  6875  0F1A                     	;# 
  6876  0F1B                     	;# 
  6877  0F1C                     	;# 
  6878  0F1D                     	;# 
  6879  0F1E                     	;# 
  6880  0F1F                     	;# 
  6881  0F20                     	;# 
  6882  0F21                     	;# 
  6883  0F22                     	;# 
  6884  0F23                     	;# 
  6885  0F24                     	;# 
  6886  0F25                     	;# 
  6887  0F26                     	;# 
  6888  0F27                     	;# 
  6889  0F28                     	;# 
  6890  0F29                     	;# 
  6891  0F2A                     	;# 
  6892  0F2B                     	;# 
  6893  0F2C                     	;# 
  6894  0F2D                     	;# 
  6895  0F2E                     	;# 
  6896  0F2F                     	;# 
  6897  0F30                     	;# 
  6898  0F31                     	;# 
  6899  0F32                     	;# 
  6900  0F33                     	;# 
  6901  0F34                     	;# 
  6902  0F35                     	;# 
  6903  0F36                     	;# 
  6904  0F37                     	;# 
  6905  0FE4                     	;# 
  6906  0FE5                     	;# 
  6907  0FE6                     	;# 
  6908  0FE7                     	;# 
  6909  0FE8                     	;# 
  6910  0FE9                     	;# 
  6911  0FEA                     	;# 
  6912  0FEB                     	;# 
  6913  0FED                     	;# 
  6914  0FEE                     	;# 
  6915  0FEF                     	;# 
  6916  0000                     	;# 
  6917  0001                     	;# 
  6918  0002                     	;# 
  6919  0003                     	;# 
  6920  0004                     	;# 
  6921  0005                     	;# 
  6922  0006                     	;# 
  6923  0007                     	;# 
  6924  0008                     	;# 
  6925  0009                     	;# 
  6926  000A                     	;# 
  6927  000B                     	;# 
  6928  000C                     	;# 
  6929  000D                     	;# 
  6930  000E                     	;# 
  6931  0010                     	;# 
  6932  0011                     	;# 
  6933  0012                     	;# 
  6934  0013                     	;# 
  6935  0014                     	;# 
  6936  0015                     	;# 
  6937  0015                     	;# 
  6938  0016                     	;# 
  6939  0016                     	;# 
  6940  0017                     	;# 
  6941  0018                     	;# 
  6942  0019                     	;# 
  6943  0019                     	;# 
  6944  001A                     	;# 
  6945  001B                     	;# 
  6946  001C                     	;# 
  6947  001D                     	;# 
  6948  001E                     	;# 
  6949  001F                     	;# 
  6950  008C                     	;# 
  6951  008D                     	;# 
  6952  008E                     	;# 
  6953  0090                     	;# 
  6954  0091                     	;# 
  6955  0092                     	;# 
  6956  0093                     	;# 
  6957  0094                     	;# 
  6958  0097                     	;# 
  6959  009B                     	;# 
  6960  009B                     	;# 
  6961  009C                     	;# 
  6962  009D                     	;# 
  6963  009E                     	;# 
  6964  009F                     	;# 
  6965  010C                     	;# 
  6966  010D                     	;# 
  6967  010E                     	;# 
  6968  0111                     	;# 
  6969  0112                     	;# 
  6970  0113                     	;# 
  6971  0114                     	;# 
  6972  0115                     	;# 
  6973  0116                     	;# 
  6974  0117                     	;# 
  6975  0118                     	;# 
  6976  0119                     	;# 
  6977  018C                     	;# 
  6978  018D                     	;# 
  6979  018E                     	;# 
  6980  0199                     	;# 
  6981  0199                     	;# 
  6982  0199                     	;# 
  6983  019A                     	;# 
  6984  019A                     	;# 
  6985  019A                     	;# 
  6986  019B                     	;# 
  6987  019B                     	;# 
  6988  019B                     	;# 
  6989  019B                     	;# 
  6990  019B                     	;# 
  6991  019C                     	;# 
  6992  019C                     	;# 
  6993  019C                     	;# 
  6994  019D                     	;# 
  6995  019D                     	;# 
  6996  019D                     	;# 
  6997  019E                     	;# 
  6998  019E                     	;# 
  6999  019E                     	;# 
  7000  019F                     	;# 
  7001  019F                     	;# 
  7002  019F                     	;# 
  7003  019F                     	;# 
  7004  019F                     	;# 
  7005  020C                     	;# 
  7006  020D                     	;# 
  7007  020E                     	;# 
  7008  0211                     	;# 
  7009  0211                     	;# 
  7010  0212                     	;# 
  7011  0212                     	;# 
  7012  0213                     	;# 
  7013  0213                     	;# 
  7014  0214                     	;# 
  7015  0214                     	;# 
  7016  0215                     	;# 
  7017  0215                     	;# 
  7018  0215                     	;# 
  7019  0215                     	;# 
  7020  0216                     	;# 
  7021  0216                     	;# 
  7022  0217                     	;# 
  7023  0217                     	;# 
  7024  0219                     	;# 
  7025  021A                     	;# 
  7026  021B                     	;# 
  7027  021C                     	;# 
  7028  021D                     	;# 
  7029  021D                     	;# 
  7030  021E                     	;# 
  7031  021F                     	;# 
  7032  028C                     	;# 
  7033  028D                     	;# 
  7034  028E                     	;# 
  7035  0291                     	;# 
  7036  0291                     	;# 
  7037  0292                     	;# 
  7038  0293                     	;# 
  7039  0294                     	;# 
  7040  0295                     	;# 
  7041  0295                     	;# 
  7042  0296                     	;# 
  7043  0297                     	;# 
  7044  0298                     	;# 
  7045  029F                     	;# 
  7046  030C                     	;# 
  7047  030D                     	;# 
  7048  030E                     	;# 
  7049  0311                     	;# 
  7050  0311                     	;# 
  7051  0312                     	;# 
  7052  0313                     	;# 
  7053  0314                     	;# 
  7054  0315                     	;# 
  7055  0315                     	;# 
  7056  0316                     	;# 
  7057  0317                     	;# 
  7058  0318                     	;# 
  7059  038C                     	;# 
  7060  038D                     	;# 
  7061  038E                     	;# 
  7062  0391                     	;# 
  7063  0392                     	;# 
  7064  0393                     	;# 
  7065  0394                     	;# 
  7066  0395                     	;# 
  7067  0396                     	;# 
  7068  0397                     	;# 
  7069  0398                     	;# 
  7070  0399                     	;# 
  7071  039A                     	;# 
  7072  039C                     	;# 
  7073  039D                     	;# 
  7074  039E                     	;# 
  7075  039F                     	;# 
  7076  0411                     	;# 
  7077  0411                     	;# 
  7078  0412                     	;# 
  7079  0413                     	;# 
  7080  0414                     	;# 
  7081  0415                     	;# 
  7082  0416                     	;# 
  7083  0417                     	;# 
  7084  0418                     	;# 
  7085  0418                     	;# 
  7086  0419                     	;# 
  7087  041A                     	;# 
  7088  041B                     	;# 
  7089  041C                     	;# 
  7090  041D                     	;# 
  7091  041E                     	;# 
  7092  041F                     	;# 
  7093  0498                     	;# 
  7094  0498                     	;# 
  7095  0499                     	;# 
  7096  049A                     	;# 
  7097  049B                     	;# 
  7098  049B                     	;# 
  7099  049C                     	;# 
  7100  049D                     	;# 
  7101  049E                     	;# 
  7102  049F                     	;# 
  7103  0617                     	;# 
  7104  0618                     	;# 
  7105  0619                     	;# 
  7106  0619                     	;# 
  7107  061A                     	;# 
  7108  061B                     	;# 
  7109  061C                     	;# 
  7110  061C                     	;# 
  7111  061F                     	;# 
  7112  0691                     	;# 
  7113  0692                     	;# 
  7114  0693                     	;# 
  7115  0694                     	;# 
  7116  0695                     	;# 
  7117  0696                     	;# 
  7118  0697                     	;# 
  7119  0698                     	;# 
  7120  0699                     	;# 
  7121  0711                     	;# 
  7122  0712                     	;# 
  7123  0713                     	;# 
  7124  0714                     	;# 
  7125  0715                     	;# 
  7126  0716                     	;# 
  7127  0717                     	;# 
  7128  0718                     	;# 
  7129  0719                     	;# 
  7130  0891                     	;# 
  7131  0891                     	;# 
  7132  0891                     	;# 
  7133  0891                     	;# 
  7134  0891                     	;# 
  7135  0891                     	;# 
  7136  0892                     	;# 
  7137  0892                     	;# 
  7138  0892                     	;# 
  7139  0893                     	;# 
  7140  0893                     	;# 
  7141  0893                     	;# 
  7142  0893                     	;# 
  7143  0893                     	;# 
  7144  0893                     	;# 
  7145  0894                     	;# 
  7146  0894                     	;# 
  7147  0894                     	;# 
  7148  0895                     	;# 
  7149  0895                     	;# 
  7150  0895                     	;# 
  7151  0896                     	;# 
  7152  0896                     	;# 
  7153  0896                     	;# 
  7154  089B                     	;# 
  7155  0911                     	;# 
  7156  0912                     	;# 
  7157  0913                     	;# 
  7158  0914                     	;# 
  7159  0915                     	;# 
  7160  0916                     	;# 
  7161  0918                     	;# 
  7162  0919                     	;# 
  7163  091A                     	;# 
  7164  091B                     	;# 
  7165  091C                     	;# 
  7166  091D                     	;# 
  7167  091E                     	;# 
  7168  091F                     	;# 
  7169  0E0F                     	;# 
  7170  0E10                     	;# 
  7171  0E11                     	;# 
  7172  0E12                     	;# 
  7173  0E13                     	;# 
  7174  0E14                     	;# 
  7175  0E15                     	;# 
  7176  0E16                     	;# 
  7177  0E17                     	;# 
  7178  0E18                     	;# 
  7179  0E19                     	;# 
  7180  0E1A                     	;# 
  7181  0E1B                     	;# 
  7182  0E1C                     	;# 
  7183  0E1D                     	;# 
  7184  0E1E                     	;# 
  7185  0E1F                     	;# 
  7186  0E20                     	;# 
  7187  0E21                     	;# 
  7188  0E22                     	;# 
  7189  0E24                     	;# 
  7190  0E25                     	;# 
  7191  0E28                     	;# 
  7192  0E29                     	;# 
  7193  0E2A                     	;# 
  7194  0E2B                     	;# 
  7195  0E2C                     	;# 
  7196  0E2D                     	;# 
  7197  0E2E                     	;# 
  7198  0E2F                     	;# 
  7199  0E90                     	;# 
  7200  0E91                     	;# 
  7201  0E92                     	;# 
  7202  0E94                     	;# 
  7203  0E95                     	;# 
  7204  0E9C                     	;# 
  7205  0E9D                     	;# 
  7206  0E9E                     	;# 
  7207  0E9F                     	;# 
  7208  0EA0                     	;# 
  7209  0EA1                     	;# 
  7210  0EA2                     	;# 
  7211  0EA3                     	;# 
  7212  0EA4                     	;# 
  7213  0EA5                     	;# 
  7214  0EA6                     	;# 
  7215  0EA7                     	;# 
  7216  0F0F                     	;# 
  7217  0F10                     	;# 
  7218  0F11                     	;# 
  7219  0F12                     	;# 
  7220  0F13                     	;# 
  7221  0F14                     	;# 
  7222  0F15                     	;# 
  7223  0F16                     	;# 
  7224  0F17                     	;# 
  7225  0F18                     	;# 
  7226  0F19                     	;# 
  7227  0F1A                     	;# 
  7228  0F1B                     	;# 
  7229  0F1C                     	;# 
  7230  0F1D                     	;# 
  7231  0F1E                     	;# 
  7232  0F1F                     	;# 
  7233  0F20                     	;# 
  7234  0F21                     	;# 
  7235  0F22                     	;# 
  7236  0F23                     	;# 
  7237  0F24                     	;# 
  7238  0F25                     	;# 
  7239  0F26                     	;# 
  7240  0F27                     	;# 
  7241  0F28                     	;# 
  7242  0F29                     	;# 
  7243  0F2A                     	;# 
  7244  0F2B                     	;# 
  7245  0F2C                     	;# 
  7246  0F2D                     	;# 
  7247  0F2E                     	;# 
  7248  0F2F                     	;# 
  7249  0F30                     	;# 
  7250  0F31                     	;# 
  7251  0F32                     	;# 
  7252  0F33                     	;# 
  7253  0F34                     	;# 
  7254  0F35                     	;# 
  7255  0F36                     	;# 
  7256  0F37                     	;# 
  7257  0FE4                     	;# 
  7258  0FE5                     	;# 
  7259  0FE6                     	;# 
  7260  0FE7                     	;# 
  7261  0FE8                     	;# 
  7262  0FE9                     	;# 
  7263  0FEA                     	;# 
  7264  0FEB                     	;# 
  7265  0FED                     	;# 
  7266  0FEE                     	;# 
  7267  0FEF                     	;# 
  7268  0000                     	;# 
  7269  0001                     	;# 
  7270  0002                     	;# 
  7271  0003                     	;# 
  7272  0004                     	;# 
  7273  0005                     	;# 
  7274  0006                     	;# 
  7275  0007                     	;# 
  7276  0008                     	;# 
  7277  0009                     	;# 
  7278  000A                     	;# 
  7279  000B                     	;# 
  7280  000C                     	;# 
  7281  000D                     	;# 
  7282  000E                     	;# 
  7283  0010                     	;# 
  7284  0011                     	;# 
  7285  0012                     	;# 
  7286  0013                     	;# 
  7287  0014                     	;# 
  7288  0015                     	;# 
  7289  0015                     	;# 
  7290  0016                     	;# 
  7291  0016                     	;# 
  7292  0017                     	;# 
  7293  0018                     	;# 
  7294  0019                     	;# 
  7295  0019                     	;# 
  7296  001A                     	;# 
  7297  001B                     	;# 
  7298  001C                     	;# 
  7299  001D                     	;# 
  7300  001E                     	;# 
  7301  001F                     	;# 
  7302  008C                     	;# 
  7303  008D                     	;# 
  7304  008E                     	;# 
  7305  0090                     	;# 
  7306  0091                     	;# 
  7307  0092                     	;# 
  7308  0093                     	;# 
  7309  0094                     	;# 
  7310  0097                     	;# 
  7311  009B                     	;# 
  7312  009B                     	;# 
  7313  009C                     	;# 
  7314  009D                     	;# 
  7315  009E                     	;# 
  7316  009F                     	;# 
  7317  010C                     	;# 
  7318  010D                     	;# 
  7319  010E                     	;# 
  7320  0111                     	;# 
  7321  0112                     	;# 
  7322  0113                     	;# 
  7323  0114                     	;# 
  7324  0115                     	;# 
  7325  0116                     	;# 
  7326  0117                     	;# 
  7327  0118                     	;# 
  7328  0119                     	;# 
  7329  018C                     	;# 
  7330  018D                     	;# 
  7331  018E                     	;# 
  7332  0199                     	;# 
  7333  0199                     	;# 
  7334  0199                     	;# 
  7335  019A                     	;# 
  7336  019A                     	;# 
  7337  019A                     	;# 
  7338  019B                     	;# 
  7339  019B                     	;# 
  7340  019B                     	;# 
  7341  019B                     	;# 
  7342  019B                     	;# 
  7343  019C                     	;# 
  7344  019C                     	;# 
  7345  019C                     	;# 
  7346  019D                     	;# 
  7347  019D                     	;# 
  7348  019D                     	;# 
  7349  019E                     	;# 
  7350  019E                     	;# 
  7351  019E                     	;# 
  7352  019F                     	;# 
  7353  019F                     	;# 
  7354  019F                     	;# 
  7355  019F                     	;# 
  7356  019F                     	;# 
  7357  020C                     	;# 
  7358  020D                     	;# 
  7359  020E                     	;# 
  7360  0211                     	;# 
  7361  0211                     	;# 
  7362  0212                     	;# 
  7363  0212                     	;# 
  7364  0213                     	;# 
  7365  0213                     	;# 
  7366  0214                     	;# 
  7367  0214                     	;# 
  7368  0215                     	;# 
  7369  0215                     	;# 
  7370  0215                     	;# 
  7371  0215                     	;# 
  7372  0216                     	;# 
  7373  0216                     	;# 
  7374  0217                     	;# 
  7375  0217                     	;# 
  7376  0219                     	;# 
  7377  021A                     	;# 
  7378  021B                     	;# 
  7379  021C                     	;# 
  7380  021D                     	;# 
  7381  021D                     	;# 
  7382  021E                     	;# 
  7383  021F                     	;# 
  7384  028C                     	;# 
  7385  028D                     	;# 
  7386  028E                     	;# 
  7387  0291                     	;# 
  7388  0291                     	;# 
  7389  0292                     	;# 
  7390  0293                     	;# 
  7391  0294                     	;# 
  7392  0295                     	;# 
  7393  0295                     	;# 
  7394  0296                     	;# 
  7395  0297                     	;# 
  7396  0298                     	;# 
  7397  029F                     	;# 
  7398  030C                     	;# 
  7399  030D                     	;# 
  7400  030E                     	;# 
  7401  0311                     	;# 
  7402  0311                     	;# 
  7403  0312                     	;# 
  7404  0313                     	;# 
  7405  0314                     	;# 
  7406  0315                     	;# 
  7407  0315                     	;# 
  7408  0316                     	;# 
  7409  0317                     	;# 
  7410  0318                     	;# 
  7411  038C                     	;# 
  7412  038D                     	;# 
  7413  038E                     	;# 
  7414  0391                     	;# 
  7415  0392                     	;# 
  7416  0393                     	;# 
  7417  0394                     	;# 
  7418  0395                     	;# 
  7419  0396                     	;# 
  7420  0397                     	;# 
  7421  0398                     	;# 
  7422  0399                     	;# 
  7423  039A                     	;# 
  7424  039C                     	;# 
  7425  039D                     	;# 
  7426  039E                     	;# 
  7427  039F                     	;# 
  7428  0411                     	;# 
  7429  0411                     	;# 
  7430  0412                     	;# 
  7431  0413                     	;# 
  7432  0414                     	;# 
  7433  0415                     	;# 
  7434  0416                     	;# 
  7435  0417                     	;# 
  7436  0418                     	;# 
  7437  0418                     	;# 
  7438  0419                     	;# 
  7439  041A                     	;# 
  7440  041B                     	;# 
  7441  041C                     	;# 
  7442  041D                     	;# 
  7443  041E                     	;# 
  7444  041F                     	;# 
  7445  0498                     	;# 
  7446  0498                     	;# 
  7447  0499                     	;# 
  7448  049A                     	;# 
  7449  049B                     	;# 
  7450  049B                     	;# 
  7451  049C                     	;# 
  7452  049D                     	;# 
  7453  049E                     	;# 
  7454  049F                     	;# 
  7455  0617                     	;# 
  7456  0618                     	;# 
  7457  0619                     	;# 
  7458  0619                     	;# 
  7459  061A                     	;# 
  7460  061B                     	;# 
  7461  061C                     	;# 
  7462  061C                     	;# 
  7463  061F                     	;# 
  7464  0691                     	;# 
  7465  0692                     	;# 
  7466  0693                     	;# 
  7467  0694                     	;# 
  7468  0695                     	;# 
  7469  0696                     	;# 
  7470  0697                     	;# 
  7471  0698                     	;# 
  7472  0699                     	;# 
  7473  0711                     	;# 
  7474  0712                     	;# 
  7475  0713                     	;# 
  7476  0714                     	;# 
  7477  0715                     	;# 
  7478  0716                     	;# 
  7479  0717                     	;# 
  7480  0718                     	;# 
  7481  0719                     	;# 
  7482  0891                     	;# 
  7483  0891                     	;# 
  7484  0891                     	;# 
  7485  0891                     	;# 
  7486  0891                     	;# 
  7487  0891                     	;# 
  7488  0892                     	;# 
  7489  0892                     	;# 
  7490  0892                     	;# 
  7491  0893                     	;# 
  7492  0893                     	;# 
  7493  0893                     	;# 
  7494  0893                     	;# 
  7495  0893                     	;# 
  7496  0893                     	;# 
  7497  0894                     	;# 
  7498  0894                     	;# 
  7499  0894                     	;# 
  7500  0895                     	;# 
  7501  0895                     	;# 
  7502  0895                     	;# 
  7503  0896                     	;# 
  7504  0896                     	;# 
  7505  0896                     	;# 
  7506  089B                     	;# 
  7507  0911                     	;# 
  7508  0912                     	;# 
  7509  0913                     	;# 
  7510  0914                     	;# 
  7511  0915                     	;# 
  7512  0916                     	;# 
  7513  0918                     	;# 
  7514  0919                     	;# 
  7515  091A                     	;# 
  7516  091B                     	;# 
  7517  091C                     	;# 
  7518  091D                     	;# 
  7519  091E                     	;# 
  7520  091F                     	;# 
  7521  0E0F                     	;# 
  7522  0E10                     	;# 
  7523  0E11                     	;# 
  7524  0E12                     	;# 
  7525  0E13                     	;# 
  7526  0E14                     	;# 
  7527  0E15                     	;# 
  7528  0E16                     	;# 
  7529  0E17                     	;# 
  7530  0E18                     	;# 
  7531  0E19                     	;# 
  7532  0E1A                     	;# 
  7533  0E1B                     	;# 
  7534  0E1C                     	;# 
  7535  0E1D                     	;# 
  7536  0E1E                     	;# 
  7537  0E1F                     	;# 
  7538  0E20                     	;# 
  7539  0E21                     	;# 
  7540  0E22                     	;# 
  7541  0E24                     	;# 
  7542  0E25                     	;# 
  7543  0E28                     	;# 
  7544  0E29                     	;# 
  7545  0E2A                     	;# 
  7546  0E2B                     	;# 
  7547  0E2C                     	;# 
  7548  0E2D                     	;# 
  7549  0E2E                     	;# 
  7550  0E2F                     	;# 
  7551  0E90                     	;# 
  7552  0E91                     	;# 
  7553  0E92                     	;# 
  7554  0E94                     	;# 
  7555  0E95                     	;# 
  7556  0E9C                     	;# 
  7557  0E9D                     	;# 
  7558  0E9E                     	;# 
  7559  0E9F                     	;# 
  7560  0EA0                     	;# 
  7561  0EA1                     	;# 
  7562  0EA2                     	;# 
  7563  0EA3                     	;# 
  7564  0EA4                     	;# 
  7565  0EA5                     	;# 
  7566  0EA6                     	;# 
  7567  0EA7                     	;# 
  7568  0F0F                     	;# 
  7569  0F10                     	;# 
  7570  0F11                     	;# 
  7571  0F12                     	;# 
  7572  0F13                     	;# 
  7573  0F14                     	;# 
  7574  0F15                     	;# 
  7575  0F16                     	;# 
  7576  0F17                     	;# 
  7577  0F18                     	;# 
  7578  0F19                     	;# 
  7579  0F1A                     	;# 
  7580  0F1B                     	;# 
  7581  0F1C                     	;# 
  7582  0F1D                     	;# 
  7583  0F1E                     	;# 
  7584  0F1F                     	;# 
  7585  0F20                     	;# 
  7586  0F21                     	;# 
  7587  0F22                     	;# 
  7588  0F23                     	;# 
  7589  0F24                     	;# 
  7590  0F25                     	;# 
  7591  0F26                     	;# 
  7592  0F27                     	;# 
  7593  0F28                     	;# 
  7594  0F29                     	;# 
  7595  0F2A                     	;# 
  7596  0F2B                     	;# 
  7597  0F2C                     	;# 
  7598  0F2D                     	;# 
  7599  0F2E                     	;# 
  7600  0F2F                     	;# 
  7601  0F30                     	;# 
  7602  0F31                     	;# 
  7603  0F32                     	;# 
  7604  0F33                     	;# 
  7605  0F34                     	;# 
  7606  0F35                     	;# 
  7607  0F36                     	;# 
  7608  0F37                     	;# 
  7609  0FE4                     	;# 
  7610  0FE5                     	;# 
  7611  0FE6                     	;# 
  7612  0FE7                     	;# 
  7613  0FE8                     	;# 
  7614  0FE9                     	;# 
  7615  0FEA                     	;# 
  7616  0FEB                     	;# 
  7617  0FED                     	;# 
  7618  0FEE                     	;# 
  7619  0FEF                     	;# 
  7620  0000                     	;# 
  7621  0001                     	;# 
  7622  0002                     	;# 
  7623  0003                     	;# 
  7624  0004                     	;# 
  7625  0005                     	;# 
  7626  0006                     	;# 
  7627  0007                     	;# 
  7628  0008                     	;# 
  7629  0009                     	;# 
  7630  000A                     	;# 
  7631  000B                     	;# 
  7632  000C                     	;# 
  7633  000D                     	;# 
  7634  000E                     	;# 
  7635  0010                     	;# 
  7636  0011                     	;# 
  7637  0012                     	;# 
  7638  0013                     	;# 
  7639  0014                     	;# 
  7640  0015                     	;# 
  7641  0015                     	;# 
  7642  0016                     	;# 
  7643  0016                     	;# 
  7644  0017                     	;# 
  7645  0018                     	;# 
  7646  0019                     	;# 
  7647  0019                     	;# 
  7648  001A                     	;# 
  7649  001B                     	;# 
  7650  001C                     	;# 
  7651  001D                     	;# 
  7652  001E                     	;# 
  7653  001F                     	;# 
  7654  008C                     	;# 
  7655  008D                     	;# 
  7656  008E                     	;# 
  7657  0090                     	;# 
  7658  0091                     	;# 
  7659  0092                     	;# 
  7660  0093                     	;# 
  7661  0094                     	;# 
  7662  0097                     	;# 
  7663  009B                     	;# 
  7664  009B                     	;# 
  7665  009C                     	;# 
  7666  009D                     	;# 
  7667  009E                     	;# 
  7668  009F                     	;# 
  7669  010C                     	;# 
  7670  010D                     	;# 
  7671  010E                     	;# 
  7672  0111                     	;# 
  7673  0112                     	;# 
  7674  0113                     	;# 
  7675  0114                     	;# 
  7676  0115                     	;# 
  7677  0116                     	;# 
  7678  0117                     	;# 
  7679  0118                     	;# 
  7680  0119                     	;# 
  7681  018C                     	;# 
  7682  018D                     	;# 
  7683  018E                     	;# 
  7684  0199                     	;# 
  7685  0199                     	;# 
  7686  0199                     	;# 
  7687  019A                     	;# 
  7688  019A                     	;# 
  7689  019A                     	;# 
  7690  019B                     	;# 
  7691  019B                     	;# 
  7692  019B                     	;# 
  7693  019B                     	;# 
  7694  019B                     	;# 
  7695  019C                     	;# 
  7696  019C                     	;# 
  7697  019C                     	;# 
  7698  019D                     	;# 
  7699  019D                     	;# 
  7700  019D                     	;# 
  7701  019E                     	;# 
  7702  019E                     	;# 
  7703  019E                     	;# 
  7704  019F                     	;# 
  7705  019F                     	;# 
  7706  019F                     	;# 
  7707  019F                     	;# 
  7708  019F                     	;# 
  7709  020C                     	;# 
  7710  020D                     	;# 
  7711  020E                     	;# 
  7712  0211                     	;# 
  7713  0211                     	;# 
  7714  0212                     	;# 
  7715  0212                     	;# 
  7716  0213                     	;# 
  7717  0213                     	;# 
  7718  0214                     	;# 
  7719  0214                     	;# 
  7720  0215                     	;# 
  7721  0215                     	;# 
  7722  0215                     	;# 
  7723  0215                     	;# 
  7724  0216                     	;# 
  7725  0216                     	;# 
  7726  0217                     	;# 
  7727  0217                     	;# 
  7728  0219                     	;# 
  7729  021A                     	;# 
  7730  021B                     	;# 
  7731  021C                     	;# 
  7732  021D                     	;# 
  7733  021D                     	;# 
  7734  021E                     	;# 
  7735  021F                     	;# 
  7736  028C                     	;# 
  7737  028D                     	;# 
  7738  028E                     	;# 
  7739  0291                     	;# 
  7740  0291                     	;# 
  7741  0292                     	;# 
  7742  0293                     	;# 
  7743  0294                     	;# 
  7744  0295                     	;# 
  7745  0295                     	;# 
  7746  0296                     	;# 
  7747  0297                     	;# 
  7748  0298                     	;# 
  7749  029F                     	;# 
  7750  030C                     	;# 
  7751  030D                     	;# 
  7752  030E                     	;# 
  7753  0311                     	;# 
  7754  0311                     	;# 
  7755  0312                     	;# 
  7756  0313                     	;# 
  7757  0314                     	;# 
  7758  0315                     	;# 
  7759  0315                     	;# 
  7760  0316                     	;# 
  7761  0317                     	;# 
  7762  0318                     	;# 
  7763  038C                     	;# 
  7764  038D                     	;# 
  7765  038E                     	;# 
  7766  0391                     	;# 
  7767  0392                     	;# 
  7768  0393                     	;# 
  7769  0394                     	;# 
  7770  0395                     	;# 
  7771  0396                     	;# 
  7772  0397                     	;# 
  7773  0398                     	;# 
  7774  0399                     	;# 
  7775  039A                     	;# 
  7776  039C                     	;# 
  7777  039D                     	;# 
  7778  039E                     	;# 
  7779  039F                     	;# 
  7780  0411                     	;# 
  7781  0411                     	;# 
  7782  0412                     	;# 
  7783  0413                     	;# 
  7784  0414                     	;# 
  7785  0415                     	;# 
  7786  0416                     	;# 
  7787  0417                     	;# 
  7788  0418                     	;# 
  7789  0418                     	;# 
  7790  0419                     	;# 
  7791  041A                     	;# 
  7792  041B                     	;# 
  7793  041C                     	;# 
  7794  041D                     	;# 
  7795  041E                     	;# 
  7796  041F                     	;# 
  7797  0498                     	;# 
  7798  0498                     	;# 
  7799  0499                     	;# 
  7800  049A                     	;# 
  7801  049B                     	;# 
  7802  049B                     	;# 
  7803  049C                     	;# 
  7804  049D                     	;# 
  7805  049E                     	;# 
  7806  049F                     	;# 
  7807  0617                     	;# 
  7808  0618                     	;# 
  7809  0619                     	;# 
  7810  0619                     	;# 
  7811  061A                     	;# 
  7812  061B                     	;# 
  7813  061C                     	;# 
  7814  061C                     	;# 
  7815  061F                     	;# 
  7816  0691                     	;# 
  7817  0692                     	;# 
  7818  0693                     	;# 
  7819  0694                     	;# 
  7820  0695                     	;# 
  7821  0696                     	;# 
  7822  0697                     	;# 
  7823  0698                     	;# 
  7824  0699                     	;# 
  7825  0711                     	;# 
  7826  0712                     	;# 
  7827  0713                     	;# 
  7828  0714                     	;# 
  7829  0715                     	;# 
  7830  0716                     	;# 
  7831  0717                     	;# 
  7832  0718                     	;# 
  7833  0719                     	;# 
  7834  0891                     	;# 
  7835  0891                     	;# 
  7836  0891                     	;# 
  7837  0891                     	;# 
  7838  0891                     	;# 
  7839  0891                     	;# 
  7840  0892                     	;# 
  7841  0892                     	;# 
  7842  0892                     	;# 
  7843  0893                     	;# 
  7844  0893                     	;# 
  7845  0893                     	;# 
  7846  0893                     	;# 
  7847  0893                     	;# 
  7848  0893                     	;# 
  7849  0894                     	;# 
  7850  0894                     	;# 
  7851  0894                     	;# 
  7852  0895                     	;# 
  7853  0895                     	;# 
  7854  0895                     	;# 
  7855  0896                     	;# 
  7856  0896                     	;# 
  7857  0896                     	;# 
  7858  089B                     	;# 
  7859  0911                     	;# 
  7860  0912                     	;# 
  7861  0913                     	;# 
  7862  0914                     	;# 
  7863  0915                     	;# 
  7864  0916                     	;# 
  7865  0918                     	;# 
  7866  0919                     	;# 
  7867  091A                     	;# 
  7868  091B                     	;# 
  7869  091C                     	;# 
  7870  091D                     	;# 
  7871  091E                     	;# 
  7872  091F                     	;# 
  7873  0E0F                     	;# 
  7874  0E10                     	;# 
  7875  0E11                     	;# 
  7876  0E12                     	;# 
  7877  0E13                     	;# 
  7878  0E14                     	;# 
  7879  0E15                     	;# 
  7880  0E16                     	;# 
  7881  0E17                     	;# 
  7882  0E18                     	;# 
  7883  0E19                     	;# 
  7884  0E1A                     	;# 
  7885  0E1B                     	;# 
  7886  0E1C                     	;# 
  7887  0E1D                     	;# 
  7888  0E1E                     	;# 
  7889  0E1F                     	;# 
  7890  0E20                     	;# 
  7891  0E21                     	;# 
  7892  0E22                     	;# 
  7893  0E24                     	;# 
  7894  0E25                     	;# 
  7895  0E28                     	;# 
  7896  0E29                     	;# 
  7897  0E2A                     	;# 
  7898  0E2B                     	;# 
  7899  0E2C                     	;# 
  7900  0E2D                     	;# 
  7901  0E2E                     	;# 
  7902  0E2F                     	;# 
  7903  0E90                     	;# 
  7904  0E91                     	;# 
  7905  0E92                     	;# 
  7906  0E94                     	;# 
  7907  0E95                     	;# 
  7908  0E9C                     	;# 
  7909  0E9D                     	;# 
  7910  0E9E                     	;# 
  7911  0E9F                     	;# 
  7912  0EA0                     	;# 
  7913  0EA1                     	;# 
  7914  0EA2                     	;# 
  7915  0EA3                     	;# 
  7916  0EA4                     	;# 
  7917  0EA5                     	;# 
  7918  0EA6                     	;# 
  7919  0EA7                     	;# 
  7920  0F0F                     	;# 
  7921  0F10                     	;# 
  7922  0F11                     	;# 
  7923  0F12                     	;# 
  7924  0F13                     	;# 
  7925  0F14                     	;# 
  7926  0F15                     	;# 
  7927  0F16                     	;# 
  7928  0F17                     	;# 
  7929  0F18                     	;# 
  7930  0F19                     	;# 
  7931  0F1A                     	;# 
  7932  0F1B                     	;# 
  7933  0F1C                     	;# 
  7934  0F1D                     	;# 
  7935  0F1E                     	;# 
  7936  0F1F                     	;# 
  7937  0F20                     	;# 
  7938  0F21                     	;# 
  7939  0F22                     	;# 
  7940  0F23                     	;# 
  7941  0F24                     	;# 
  7942  0F25                     	;# 
  7943  0F26                     	;# 
  7944  0F27                     	;# 
  7945  0F28                     	;# 
  7946  0F29                     	;# 
  7947  0F2A                     	;# 
  7948  0F2B                     	;# 
  7949  0F2C                     	;# 
  7950  0F2D                     	;# 
  7951  0F2E                     	;# 
  7952  0F2F                     	;# 
  7953  0F30                     	;# 
  7954  0F31                     	;# 
  7955  0F32                     	;# 
  7956  0F33                     	;# 
  7957  0F34                     	;# 
  7958  0F35                     	;# 
  7959  0F36                     	;# 
  7960  0F37                     	;# 
  7961  0FE4                     	;# 
  7962  0FE5                     	;# 
  7963  0FE6                     	;# 
  7964  0FE7                     	;# 
  7965  0FE8                     	;# 
  7966  0FE9                     	;# 
  7967  0FEA                     	;# 
  7968  0FEB                     	;# 
  7969  0FED                     	;# 
  7970  0FEE                     	;# 
  7971  0FEF                     	;# 
  7972  0000                     	;# 
  7973  0001                     	;# 
  7974  0002                     	;# 
  7975  0003                     	;# 
  7976  0004                     	;# 
  7977  0005                     	;# 
  7978  0006                     	;# 
  7979  0007                     	;# 
  7980  0008                     	;# 
  7981  0009                     	;# 
  7982  000A                     	;# 
  7983  000B                     	;# 
  7984  000C                     	;# 
  7985  000D                     	;# 
  7986  000E                     	;# 
  7987  0010                     	;# 
  7988  0011                     	;# 
  7989  0012                     	;# 
  7990  0013                     	;# 
  7991  0014                     	;# 
  7992  0015                     	;# 
  7993  0015                     	;# 
  7994  0016                     	;# 
  7995  0016                     	;# 
  7996  0017                     	;# 
  7997  0018                     	;# 
  7998  0019                     	;# 
  7999  0019                     	;# 
  8000  001A                     	;# 
  8001  001B                     	;# 
  8002  001C                     	;# 
  8003  001D                     	;# 
  8004  001E                     	;# 
  8005  001F                     	;# 
  8006  008C                     	;# 
  8007  008D                     	;# 
  8008  008E                     	;# 
  8009  0090                     	;# 
  8010  0091                     	;# 
  8011  0092                     	;# 
  8012  0093                     	;# 
  8013  0094                     	;# 
  8014  0097                     	;# 
  8015  009B                     	;# 
  8016  009B                     	;# 
  8017  009C                     	;# 
  8018  009D                     	;# 
  8019  009E                     	;# 
  8020  009F                     	;# 
  8021  010C                     	;# 
  8022  010D                     	;# 
  8023  010E                     	;# 
  8024  0111                     	;# 
  8025  0112                     	;# 
  8026  0113                     	;# 
  8027  0114                     	;# 
  8028  0115                     	;# 
  8029  0116                     	;# 
  8030  0117                     	;# 
  8031  0118                     	;# 
  8032  0119                     	;# 
  8033  018C                     	;# 
  8034  018D                     	;# 
  8035  018E                     	;# 
  8036  0199                     	;# 
  8037  0199                     	;# 
  8038  0199                     	;# 
  8039  019A                     	;# 
  8040  019A                     	;# 
  8041  019A                     	;# 
  8042  019B                     	;# 
  8043  019B                     	;# 
  8044  019B                     	;# 
  8045  019B                     	;# 
  8046  019B                     	;# 
  8047  019C                     	;# 
  8048  019C                     	;# 
  8049  019C                     	;# 
  8050  019D                     	;# 
  8051  019D                     	;# 
  8052  019D                     	;# 
  8053  019E                     	;# 
  8054  019E                     	;# 
  8055  019E                     	;# 
  8056  019F                     	;# 
  8057  019F                     	;# 
  8058  019F                     	;# 
  8059  019F                     	;# 
  8060  019F                     	;# 
  8061  020C                     	;# 
  8062  020D                     	;# 
  8063  020E                     	;# 
  8064  0211                     	;# 
  8065  0211                     	;# 
  8066  0212                     	;# 
  8067  0212                     	;# 
  8068  0213                     	;# 
  8069  0213                     	;# 
  8070  0214                     	;# 
  8071  0214                     	;# 
  8072  0215                     	;# 
  8073  0215                     	;# 
  8074  0215                     	;# 
  8075  0215                     	;# 
  8076  0216                     	;# 
  8077  0216                     	;# 
  8078  0217                     	;# 
  8079  0217                     	;# 
  8080  0219                     	;# 
  8081  021A                     	;# 
  8082  021B                     	;# 
  8083  021C                     	;# 
  8084  021D                     	;# 
  8085  021D                     	;# 
  8086  021E                     	;# 
  8087  021F                     	;# 
  8088  028C                     	;# 
  8089  028D                     	;# 
  8090  028E                     	;# 
  8091  0291                     	;# 
  8092  0291                     	;# 
  8093  0292                     	;# 
  8094  0293                     	;# 
  8095  0294                     	;# 
  8096  0295                     	;# 
  8097  0295                     	;# 
  8098  0296                     	;# 
  8099  0297                     	;# 
  8100  0298                     	;# 
  8101  029F                     	;# 
  8102  030C                     	;# 
  8103  030D                     	;# 
  8104  030E                     	;# 
  8105  0311                     	;# 
  8106  0311                     	;# 
  8107  0312                     	;# 
  8108  0313                     	;# 
  8109  0314                     	;# 
  8110  0315                     	;# 
  8111  0315                     	;# 
  8112  0316                     	;# 
  8113  0317                     	;# 
  8114  0318                     	;# 
  8115  038C                     	;# 
  8116  038D                     	;# 
  8117  038E                     	;# 
  8118  0391                     	;# 
  8119  0392                     	;# 
  8120  0393                     	;# 
  8121  0394                     	;# 
  8122  0395                     	;# 
  8123  0396                     	;# 
  8124  0397                     	;# 
  8125  0398                     	;# 
  8126  0399                     	;# 
  8127  039A                     	;# 
  8128  039C                     	;# 
  8129  039D                     	;# 
  8130  039E                     	;# 
  8131  039F                     	;# 
  8132  0411                     	;# 
  8133  0411                     	;# 
  8134  0412                     	;# 
  8135  0413                     	;# 
  8136  0414                     	;# 
  8137  0415                     	;# 
  8138  0416                     	;# 
  8139  0417                     	;# 
  8140  0418                     	;# 
  8141  0418                     	;# 
  8142  0419                     	;# 
  8143  041A                     	;# 
  8144  041B                     	;# 
  8145  041C                     	;# 
  8146  041D                     	;# 
  8147  041E                     	;# 
  8148  041F                     	;# 
  8149  0498                     	;# 
  8150  0498                     	;# 
  8151  0499                     	;# 
  8152  049A                     	;# 
  8153  049B                     	;# 
  8154  049B                     	;# 
  8155  049C                     	;# 
  8156  049D                     	;# 
  8157  049E                     	;# 
  8158  049F                     	;# 
  8159  0617                     	;# 
  8160  0618                     	;# 
  8161  0619                     	;# 
  8162  0619                     	;# 
  8163  061A                     	;# 
  8164  061B                     	;# 
  8165  061C                     	;# 
  8166  061C                     	;# 
  8167  061F                     	;# 
  8168  0691                     	;# 
  8169  0692                     	;# 
  8170  0693                     	;# 
  8171  0694                     	;# 
  8172  0695                     	;# 
  8173  0696                     	;# 
  8174  0697                     	;# 
  8175  0698                     	;# 
  8176  0699                     	;# 
  8177  0711                     	;# 
  8178  0712                     	;# 
  8179  0713                     	;# 
  8180  0714                     	;# 
  8181  0715                     	;# 
  8182  0716                     	;# 
  8183  0717                     	;# 
  8184  0718                     	;# 
  8185  0719                     	;# 
  8186  0891                     	;# 
  8187  0891                     	;# 
  8188  0891                     	;# 
  8189  0891                     	;# 
  8190  0891                     	;# 
  8191  0891                     	;# 
  8192  0892                     	;# 
  8193  0892                     	;# 
  8194  0892                     	;# 
  8195  0893                     	;# 
  8196  0893                     	;# 
  8197  0893                     	;# 
  8198  0893                     	;# 
  8199  0893                     	;# 
  8200  0893                     	;# 
  8201  0894                     	;# 
  8202  0894                     	;# 
  8203  0894                     	;# 
  8204  0895                     	;# 
  8205  0895                     	;# 
  8206  0895                     	;# 
  8207  0896                     	;# 
  8208  0896                     	;# 
  8209  0896                     	;# 
  8210  089B                     	;# 
  8211  0911                     	;# 
  8212  0912                     	;# 
  8213  0913                     	;# 
  8214  0914                     	;# 
  8215  0915                     	;# 
  8216  0916                     	;# 
  8217  0918                     	;# 
  8218  0919                     	;# 
  8219  091A                     	;# 
  8220  091B                     	;# 
  8221  091C                     	;# 
  8222  091D                     	;# 
  8223  091E                     	;# 
  8224  091F                     	;# 
  8225  0E0F                     	;# 
  8226  0E10                     	;# 
  8227  0E11                     	;# 
  8228  0E12                     	;# 
  8229  0E13                     	;# 
  8230  0E14                     	;# 
  8231  0E15                     	;# 
  8232  0E16                     	;# 
  8233  0E17                     	;# 
  8234  0E18                     	;# 
  8235  0E19                     	;# 
  8236  0E1A                     	;# 
  8237  0E1B                     	;# 
  8238  0E1C                     	;# 
  8239  0E1D                     	;# 
  8240  0E1E                     	;# 
  8241  0E1F                     	;# 
  8242  0E20                     	;# 
  8243  0E21                     	;# 
  8244  0E22                     	;# 
  8245  0E24                     	;# 
  8246  0E25                     	;# 
  8247  0E28                     	;# 
  8248  0E29                     	;# 
  8249  0E2A                     	;# 
  8250  0E2B                     	;# 
  8251  0E2C                     	;# 
  8252  0E2D                     	;# 
  8253  0E2E                     	;# 
  8254  0E2F                     	;# 
  8255  0E90                     	;# 
  8256  0E91                     	;# 
  8257  0E92                     	;# 
  8258  0E94                     	;# 
  8259  0E95                     	;# 
  8260  0E9C                     	;# 
  8261  0E9D                     	;# 
  8262  0E9E                     	;# 
  8263  0E9F                     	;# 
  8264  0EA0                     	;# 
  8265  0EA1                     	;# 
  8266  0EA2                     	;# 
  8267  0EA3                     	;# 
  8268  0EA4                     	;# 
  8269  0EA5                     	;# 
  8270  0EA6                     	;# 
  8271  0EA7                     	;# 
  8272  0F0F                     	;# 
  8273  0F10                     	;# 
  8274  0F11                     	;# 
  8275  0F12                     	;# 
  8276  0F13                     	;# 
  8277  0F14                     	;# 
  8278  0F15                     	;# 
  8279  0F16                     	;# 
  8280  0F17                     	;# 
  8281  0F18                     	;# 
  8282  0F19                     	;# 
  8283  0F1A                     	;# 
  8284  0F1B                     	;# 
  8285  0F1C                     	;# 
  8286  0F1D                     	;# 
  8287  0F1E                     	;# 
  8288  0F1F                     	;# 
  8289  0F20                     	;# 
  8290  0F21                     	;# 
  8291  0F22                     	;# 
  8292  0F23                     	;# 
  8293  0F24                     	;# 
  8294  0F25                     	;# 
  8295  0F26                     	;# 
  8296  0F27                     	;# 
  8297  0F28                     	;# 
  8298  0F29                     	;# 
  8299  0F2A                     	;# 
  8300  0F2B                     	;# 
  8301  0F2C                     	;# 
  8302  0F2D                     	;# 
  8303  0F2E                     	;# 
  8304  0F2F                     	;# 
  8305  0F30                     	;# 
  8306  0F31                     	;# 
  8307  0F32                     	;# 
  8308  0F33                     	;# 
  8309  0F34                     	;# 
  8310  0F35                     	;# 
  8311  0F36                     	;# 
  8312  0F37                     	;# 
  8313  0FE4                     	;# 
  8314  0FE5                     	;# 
  8315  0FE6                     	;# 
  8316  0FE7                     	;# 
  8317  0FE8                     	;# 
  8318  0FE9                     	;# 
  8319  0FEA                     	;# 
  8320  0FEB                     	;# 
  8321  0FED                     	;# 
  8322  0FEE                     	;# 
  8323  0FEF                     	;# 
  8324  0000                     	;# 
  8325  0001                     	;# 
  8326  0002                     	;# 
  8327  0003                     	;# 
  8328  0004                     	;# 
  8329  0005                     	;# 
  8330  0006                     	;# 
  8331  0007                     	;# 
  8332  0008                     	;# 
  8333  0009                     	;# 
  8334  000A                     	;# 
  8335  000B                     	;# 
  8336  000C                     	;# 
  8337  000D                     	;# 
  8338  000E                     	;# 
  8339  0010                     	;# 
  8340  0011                     	;# 
  8341  0012                     	;# 
  8342  0013                     	;# 
  8343  0014                     	;# 
  8344  0015                     	;# 
  8345  0015                     	;# 
  8346  0016                     	;# 
  8347  0016                     	;# 
  8348  0017                     	;# 
  8349  0018                     	;# 
  8350  0019                     	;# 
  8351  0019                     	;# 
  8352  001A                     	;# 
  8353  001B                     	;# 
  8354  001C                     	;# 
  8355  001D                     	;# 
  8356  001E                     	;# 
  8357  001F                     	;# 
  8358  008C                     	;# 
  8359  008D                     	;# 
  8360  008E                     	;# 
  8361  0090                     	;# 
  8362  0091                     	;# 
  8363  0092                     	;# 
  8364  0093                     	;# 
  8365  0094                     	;# 
  8366  0097                     	;# 
  8367  009B                     	;# 
  8368  009B                     	;# 
  8369  009C                     	;# 
  8370  009D                     	;# 
  8371  009E                     	;# 
  8372  009F                     	;# 
  8373  010C                     	;# 
  8374  010D                     	;# 
  8375  010E                     	;# 
  8376  0111                     	;# 
  8377  0112                     	;# 
  8378  0113                     	;# 
  8379  0114                     	;# 
  8380  0115                     	;# 
  8381  0116                     	;# 
  8382  0117                     	;# 
  8383  0118                     	;# 
  8384  0119                     	;# 
  8385  018C                     	;# 
  8386  018D                     	;# 
  8387  018E                     	;# 
  8388  0199                     	;# 
  8389  0199                     	;# 
  8390  0199                     	;# 
  8391  019A                     	;# 
  8392  019A                     	;# 
  8393  019A                     	;# 
  8394  019B                     	;# 
  8395  019B                     	;# 
  8396  019B                     	;# 
  8397  019B                     	;# 
  8398  019B                     	;# 
  8399  019C                     	;# 
  8400  019C                     	;# 
  8401  019C                     	;# 
  8402  019D                     	;# 
  8403  019D                     	;# 
  8404  019D                     	;# 
  8405  019E                     	;# 
  8406  019E                     	;# 
  8407  019E                     	;# 
  8408  019F                     	;# 
  8409  019F                     	;# 
  8410  019F                     	;# 
  8411  019F                     	;# 
  8412  019F                     	;# 
  8413  020C                     	;# 
  8414  020D                     	;# 
  8415  020E                     	;# 
  8416  0211                     	;# 
  8417  0211                     	;# 
  8418  0212                     	;# 
  8419  0212                     	;# 
  8420  0213                     	;# 
  8421  0213                     	;# 
  8422  0214                     	;# 
  8423  0214                     	;# 
  8424  0215                     	;# 
  8425  0215                     	;# 
  8426  0215                     	;# 
  8427  0215                     	;# 
  8428  0216                     	;# 
  8429  0216                     	;# 
  8430  0217                     	;# 
  8431  0217                     	;# 
  8432  0219                     	;# 
  8433  021A                     	;# 
  8434  021B                     	;# 
  8435  021C                     	;# 
  8436  021D                     	;# 
  8437  021D                     	;# 
  8438  021E                     	;# 
  8439  021F                     	;# 
  8440  028C                     	;# 
  8441  028D                     	;# 
  8442  028E                     	;# 
  8443  0291                     	;# 
  8444  0291                     	;# 
  8445  0292                     	;# 
  8446  0293                     	;# 
  8447  0294                     	;# 
  8448  0295                     	;# 
  8449  0295                     	;# 
  8450  0296                     	;# 
  8451  0297                     	;# 
  8452  0298                     	;# 
  8453  029F                     	;# 
  8454  030C                     	;# 
  8455  030D                     	;# 
  8456  030E                     	;# 
  8457  0311                     	;# 
  8458  0311                     	;# 
  8459  0312                     	;# 
  8460  0313                     	;# 
  8461  0314                     	;# 
  8462  0315                     	;# 
  8463  0315                     	;# 
  8464  0316                     	;# 
  8465  0317                     	;# 
  8466  0318                     	;# 
  8467  038C                     	;# 
  8468  038D                     	;# 
  8469  038E                     	;# 
  8470  0391                     	;# 
  8471  0392                     	;# 
  8472  0393                     	;# 
  8473  0394                     	;# 
  8474  0395                     	;# 
  8475  0396                     	;# 
  8476  0397                     	;# 
  8477  0398                     	;# 
  8478  0399                     	;# 
  8479  039A                     	;# 
  8480  039C                     	;# 
  8481  039D                     	;# 
  8482  039E                     	;# 
  8483  039F                     	;# 
  8484  0411                     	;# 
  8485  0411                     	;# 
  8486  0412                     	;# 
  8487  0413                     	;# 
  8488  0414                     	;# 
  8489  0415                     	;# 
  8490  0416                     	;# 
  8491  0417                     	;# 
  8492  0418                     	;# 
  8493  0418                     	;# 
  8494  0419                     	;# 
  8495  041A                     	;# 
  8496  041B                     	;# 
  8497  041C                     	;# 
  8498  041D                     	;# 
  8499  041E                     	;# 
  8500  041F                     	;# 
  8501  0498                     	;# 
  8502  0498                     	;# 
  8503  0499                     	;# 
  8504  049A                     	;# 
  8505  049B                     	;# 
  8506  049B                     	;# 
  8507  049C                     	;# 
  8508  049D                     	;# 
  8509  049E                     	;# 
  8510  049F                     	;# 
  8511  0617                     	;# 
  8512  0618                     	;# 
  8513  0619                     	;# 
  8514  0619                     	;# 
  8515  061A                     	;# 
  8516  061B                     	;# 
  8517  061C                     	;# 
  8518  061C                     	;# 
  8519  061F                     	;# 
  8520  0691                     	;# 
  8521  0692                     	;# 
  8522  0693                     	;# 
  8523  0694                     	;# 
  8524  0695                     	;# 
  8525  0696                     	;# 
  8526  0697                     	;# 
  8527  0698                     	;# 
  8528  0699                     	;# 
  8529  0711                     	;# 
  8530  0712                     	;# 
  8531  0713                     	;# 
  8532  0714                     	;# 
  8533  0715                     	;# 
  8534  0716                     	;# 
  8535  0717                     	;# 
  8536  0718                     	;# 
  8537  0719                     	;# 
  8538  0891                     	;# 
  8539  0891                     	;# 
  8540  0891                     	;# 
  8541  0891                     	;# 
  8542  0891                     	;# 
  8543  0891                     	;# 
  8544  0892                     	;# 
  8545  0892                     	;# 
  8546  0892                     	;# 
  8547  0893                     	;# 
  8548  0893                     	;# 
  8549  0893                     	;# 
  8550  0893                     	;# 
  8551  0893                     	;# 
  8552  0893                     	;# 
  8553  0894                     	;# 
  8554  0894                     	;# 
  8555  0894                     	;# 
  8556  0895                     	;# 
  8557  0895                     	;# 
  8558  0895                     	;# 
  8559  0896                     	;# 
  8560  0896                     	;# 
  8561  0896                     	;# 
  8562  089B                     	;# 
  8563  0911                     	;# 
  8564  0912                     	;# 
  8565  0913                     	;# 
  8566  0914                     	;# 
  8567  0915                     	;# 
  8568  0916                     	;# 
  8569  0918                     	;# 
  8570  0919                     	;# 
  8571  091A                     	;# 
  8572  091B                     	;# 
  8573  091C                     	;# 
  8574  091D                     	;# 
  8575  091E                     	;# 
  8576  091F                     	;# 
  8577  0E0F                     	;# 
  8578  0E10                     	;# 
  8579  0E11                     	;# 
  8580  0E12                     	;# 
  8581  0E13                     	;# 
  8582  0E14                     	;# 
  8583  0E15                     	;# 
  8584  0E16                     	;# 
  8585  0E17                     	;# 
  8586  0E18                     	;# 
  8587  0E19                     	;# 
  8588  0E1A                     	;# 
  8589  0E1B                     	;# 
  8590  0E1C                     	;# 
  8591  0E1D                     	;# 
  8592  0E1E                     	;# 
  8593  0E1F                     	;# 
  8594  0E20                     	;# 
  8595  0E21                     	;# 
  8596  0E22                     	;# 
  8597  0E24                     	;# 
  8598  0E25                     	;# 
  8599  0E28                     	;# 
  8600  0E29                     	;# 
  8601  0E2A                     	;# 
  8602  0E2B                     	;# 
  8603  0E2C                     	;# 
  8604  0E2D                     	;# 
  8605  0E2E                     	;# 
  8606  0E2F                     	;# 
  8607  0E90                     	;# 
  8608  0E91                     	;# 
  8609  0E92                     	;# 
  8610  0E94                     	;# 
  8611  0E95                     	;# 
  8612  0E9C                     	;# 
  8613  0E9D                     	;# 
  8614  0E9E                     	;# 
  8615  0E9F                     	;# 
  8616  0EA0                     	;# 
  8617  0EA1                     	;# 
  8618  0EA2                     	;# 
  8619  0EA3                     	;# 
  8620  0EA4                     	;# 
  8621  0EA5                     	;# 
  8622  0EA6                     	;# 
  8623  0EA7                     	;# 
  8624  0F0F                     	;# 
  8625  0F10                     	;# 
  8626  0F11                     	;# 
  8627  0F12                     	;# 
  8628  0F13                     	;# 
  8629  0F14                     	;# 
  8630  0F15                     	;# 
  8631  0F16                     	;# 
  8632  0F17                     	;# 
  8633  0F18                     	;# 
  8634  0F19                     	;# 
  8635  0F1A                     	;# 
  8636  0F1B                     	;# 
  8637  0F1C                     	;# 
  8638  0F1D                     	;# 
  8639  0F1E                     	;# 
  8640  0F1F                     	;# 
  8641  0F20                     	;# 
  8642  0F21                     	;# 
  8643  0F22                     	;# 
  8644  0F23                     	;# 
  8645  0F24                     	;# 
  8646  0F25                     	;# 
  8647  0F26                     	;# 
  8648  0F27                     	;# 
  8649  0F28                     	;# 
  8650  0F29                     	;# 
  8651  0F2A                     	;# 
  8652  0F2B                     	;# 
  8653  0F2C                     	;# 
  8654  0F2D                     	;# 
  8655  0F2E                     	;# 
  8656  0F2F                     	;# 
  8657  0F30                     	;# 
  8658  0F31                     	;# 
  8659  0F32                     	;# 
  8660  0F33                     	;# 
  8661  0F34                     	;# 
  8662  0F35                     	;# 
  8663  0F36                     	;# 
  8664  0F37                     	;# 
  8665  0FE4                     	;# 
  8666  0FE5                     	;# 
  8667  0FE6                     	;# 
  8668  0FE7                     	;# 
  8669  0FE8                     	;# 
  8670  0FE9                     	;# 
  8671  0FEA                     	;# 
  8672  0FEB                     	;# 
  8673  0FED                     	;# 
  8674  0FEE                     	;# 
  8675  0FEF                     	;_asciiCharTableLookup
  8676                           
  8677 ;; Function _menu_Exit is unused but had its address taken
  8678  0000                     
  8679 ;; Function _flashy_Exit is unused but had its address taken
  8680  0000                     
  8681 ;; Function _locked_Exit is unused but had its address taken
  8682  0000                     
  8683 ;; Function _secret_Exit is unused but had its address taken
  8684  0000                     
  8685 ;; Function _slot_Exit is unused but had its address taken
  8686  0000                     
  8687                           	psect	idataBANK1
  8688  207C                     __pidataBANK1:	
  8689                           
  8690                           ;initializer for _Shot_Options
  8691  207C  3416               	retlw	low (STR_30| (0+32768))
  8692  207D  34B1               	retlw	high (STR_30| (0+32768))
  8693  207E  340C               	retlw	low (STR_31| (0+32768))
  8694  207F  34B1               	retlw	high (STR_31| (0+32768))
  8695  2080  34F3               	retlw	low (STR_32| (0+32768))
  8696  2081  34B0               	retlw	high (STR_32| (0+32768))
  8697  2082  341B               	retlw	low (STR_33| (0+32768))
  8698  2083  34B1               	retlw	high (STR_33| (0+32768))
  8699  2084  34F8               	retlw	low (STR_34| (0+32768))
  8700  2085  34B0               	retlw	high (STR_34| (0+32768))
  8701  2086  3402               	retlw	low (STR_35| (0+32768))
  8702  2087  34B1               	retlw	high (STR_35| (0+32768))
  8703  2088  3407               	retlw	low (STR_36| (0+32768))
  8704  2089  34B1               	retlw	high (STR_36| (0+32768))
  8705  208A  34FD               	retlw	low (STR_37| (0+32768))
  8706  208B  34B0               	retlw	high (STR_37| (0+32768))
  8707  208C  3411               	retlw	low (STR_38| (0+32768))
  8708  208D  34B1               	retlw	high (STR_38| (0+32768))
  8709                           
  8710                           ;initializer for _randx
  8711  208E  3401               	retlw	1
  8712  208F  3400               	retlw	0
  8713  2090  3400               	retlw	0
  8714  2091  3400               	retlw	0
  8715                           
  8716                           ;initializer for _Leds_idx
  8717  2092  3401               	retlw	1
  8718  2093  3400               	retlw	0
  8719                           
  8720                           ;initializer for _locked_lock_base_leds
  8721  2094  341F               	retlw	31
  8722  2095  34F8               	retlw	248
  8723                           
  8724                           ;initializer for _FLASHY_TEXT_SECRET_TEST
  8725  2096  343E               	retlw	low (STR_9| (0+32768))
  8726  2097  34B0               	retlw	high (STR_9| (0+32768))
  8727                           
  8728                           	psect	idataBANK2
  8729  0002                     __pidataBANK2:	
  8730                           
  8731                           ;initializer for _FLASHY_TEXT
  8732  0002  342F               	retlw	low (STR_8| (0+32768))
  8733  0003  34B1               	retlw	high (STR_8| (0+32768))
  8734                           
  8735                           	psect	idataBANK3
  8736  21A2                     __pidataBANK3:	
  8737                           
  8738                           ;initializer for _locked_locking_leds
  8739  21A2  3400               	retlw	0
  8740  21A3  3400               	retlw	0
  8741  21A4  3420               	retlw	32
  8742  21A5  3400               	retlw	0
  8743  21A6  3460               	retlw	96
  8744  21A7  3400               	retlw	0
  8745  21A8  34E0               	retlw	224
  8746  21A9  3400               	retlw	0
  8747  21AA  34E0               	retlw	224
  8748  21AB  3401               	retlw	1
  8749  21AC  34E0               	retlw	224
  8750  21AD  3403               	retlw	3
  8751                           
  8752                           ;initializer for _menu_options_leds
  8753  21AE  3400               	retlw	0
  8754  21AF  3402               	retlw	2
  8755  21B0  3400               	retlw	0
  8756  21B1  3401               	retlw	1
  8757  21B2  3480               	retlw	128
  8758  21B3  3400               	retlw	0
  8759  21B4  3440               	retlw	64
  8760  21B5  3400               	retlw	0
  8761  21B6  3420               	retlw	32
  8762  21B7  3400               	retlw	0
  8763                           
  8764                           ;initializer for _menu_option
  8765  21B8  3434               	retlw	low (STR_4| (0+32768))
  8766  21B9  34B1               	retlw	high (STR_4| (0+32768))
  8767  21BA  34ED               	retlw	low (STR_5| (0+32768))
  8768  21BB  34B0               	retlw	high (STR_5| (0+32768))
  8769  21BC  348C               	retlw	low (STR_6| (0+32768))
  8770  21BD  34B0               	retlw	high (STR_6| (0+32768))
  8771  21BE  34E7               	retlw	low (STR_7| (0+32768))
  8772  21BF  34B0               	retlw	high (STR_7| (0+32768))
  8773                           
  8774                           ;initializer for marquee@F14054
  8775  21C0  3420               	retlw	32
  8776  21C1  3420               	retlw	32
  8777  21C2  3420               	retlw	32
  8778  21C3  3420               	retlw	32
  8779  21C4  3400               	retlw	0
  8780                           
  8781                           ;initializer for marquee_speedy@F14045
  8782  21C5  3420               	retlw	32
  8783  21C6  3420               	retlw	32
  8784  21C7  3420               	retlw	32
  8785  21C8  3420               	retlw	32
  8786  21C9  3400               	retlw	0
  8787                           
  8788                           	psect	idataBANK4
  8789  0800                     __pidataBANK4:	
  8790                           
  8791                           ;initializer for _secret_inputs
  8792  0800  3401               	retlw	1
  8793  0801  3401               	retlw	1
  8794  0802  3402               	retlw	2
  8795  0803  3402               	retlw	2
  8796  0804  3401               	retlw	1
  8797  0805  3402               	retlw	2
  8798  0806  3401               	retlw	1
  8799  0807  3402               	retlw	2
  8800  0808  3404               	retlw	4
  8801  0809  3408               	retlw	8
  8802  080A  3400               	retlw	0
  8803  080B  3400               	retlw	0
  8804  080C  3400               	retlw	0
  8805  080D  3400               	retlw	0
  8806  080E  3400               	retlw	0
  8807  080F  3400               	retlw	0
  8808  0810  3400               	retlw	0
  8809  0811  3400               	retlw	0
  8810  0812  3400               	retlw	0
  8811  0813  3400               	retlw	0
  8812  0814  3400               	retlw	0
  8813  0815  3400               	retlw	0
  8814  0816  34C5               	retlw	low (_secret_value| 0)
  8815  0817  3401               	retlw	1
  8816  0818  3400               	retlw	0
  8817                           
  8818                           	psect	idataBANK5
  8819  2619                     __pidataBANK5:	
  8820                           
  8821                           ;initializer for _Shot_Options_Long
  8822  2619  34CA               	retlw	low (STR_39| (0+32768))
  8823  261A  34B0               	retlw	high (STR_39| (0+32768))
  8824  261B  34C2               	retlw	low (STR_40| (0+32768))
  8825  261C  34B0               	retlw	high (STR_40| (0+32768))
  8826  261D  3496               	retlw	low (STR_41| (0+32768))
  8827  261E  34B0               	retlw	high (STR_41| (0+32768))
  8828  261F  3481               	retlw	low (STR_42| (0+32768))
  8829  2620  34B0               	retlw	high (STR_42| (0+32768))
  8830  2621  3476               	retlw	low (STR_43| (0+32768))
  8831  2622  34B0               	retlw	high (STR_43| (0+32768))
  8832  2623  34BA               	retlw	low (STR_44| (0+32768))
  8833  2624  34B0               	retlw	high (STR_44| (0+32768))
  8834  2625  346A               	retlw	low (STR_45| (0+32768))
  8835  2626  34B0               	retlw	high (STR_45| (0+32768))
  8836  2627  3450               	retlw	low (STR_46| (0+32768))
  8837  2628  34B0               	retlw	high (STR_46| (0+32768))
  8838  2629  349F               	retlw	low (STR_47| (0+32768))
  8839  262A  34B0               	retlw	high (STR_47| (0+32768))
  8840                           
  8841                           ;initializer for _Slot_Wheel
  8842  262B  3441               	retlw	65
  8843  262C  3442               	retlw	66
  8844  262D  3443               	retlw	67
  8845  262E  3444               	retlw	68
  8846  262F  3445               	retlw	69
  8847  2630  3446               	retlw	70
  8848  2631  3447               	retlw	71
  8849  2632  3448               	retlw	72
  8850  2633  3449               	retlw	73
  8851  2634  344A               	retlw	74
  8852  2635  344B               	retlw	75
  8853  2636  344C               	retlw	76
  8854  2637  344D               	retlw	77
  8855  2638  344E               	retlw	78
  8856  2639  344F               	retlw	79
  8857  263A  3450               	retlw	80
  8858  263B  3451               	retlw	81
  8859  263C  3452               	retlw	82
  8860  263D  3453               	retlw	83
  8861  263E  3454               	retlw	84
  8862  263F  3455               	retlw	85
  8863  2640  3456               	retlw	86
  8864  2641  3457               	retlw	87
  8865  2642  3458               	retlw	88
  8866  2643  3459               	retlw	89
  8867  2644  345A               	retlw	90
  8868  2645  3430               	retlw	48
  8869  2646  3431               	retlw	49
  8870  2647  3432               	retlw	50
  8871  2648  3433               	retlw	51
  8872  2649  3434               	retlw	52
  8873  264A  3435               	retlw	53
  8874  264B  3436               	retlw	54
  8875  264C  3437               	retlw	55
  8876  264D  3438               	retlw	56
  8877  264E  3439               	retlw	57
  8878  264F  343C               	retlw	60
  8879  2650  343E               	retlw	62
  8880  2651  3421               	retlw	33
  8881  2652  3424               	retlw	36
  8882  2653  3425               	retlw	37
  8883  2654  3426               	retlw	38
  8884  2655  342D               	retlw	45
  8885  2656  3423               	retlw	35
  8886  2657  342A               	retlw	42
  8887  2658  342B               	retlw	43
  8888  2659  342D               	retlw	45
  8889  265A  342E               	retlw	46
  8890  265B  3440               	retlw	64
  8891  265C  343B               	retlw	59
  8892  265D  343A               	retlw	58
  8893  265E  3427               	retlw	39
  8894  265F  3422               	retlw	34
  8895  2660  342F               	retlw	47
  8896  2661  345C               	retlw	92
  8897                           
  8898                           	psect	idataBANK6
  8899  2351                     __pidataBANK6:	
  8900                           
  8901                           ;initializer for _flashy_option
  8902  2351  342F               	retlw	low (STR_8| (0+32768))
  8903  2352  34B1               	retlw	high (STR_8| (0+32768))
  8904  2353  34B1               	retlw	low (STR_11| (0+32768))
  8905  2354  34B0               	retlw	high (STR_11| (0+32768))
  8906  2355  34D2               	retlw	low (STR_12| (0+32768))
  8907  2356  34B0               	retlw	high (STR_12| (0+32768))
  8908  2357  34E1               	retlw	low (STR_13| (0+32768))
  8909  2358  34B0               	retlw	high (STR_13| (0+32768))
  8910  2359  342B               	retlw	low (STR_14| (0+32768))
  8911  235A  34B0               	retlw	high (STR_14| (0+32768))
  8912  235B  3416               	retlw	low (STR_15| (0+32768))
  8913  235C  34B0               	retlw	high (STR_15| (0+32768))
  8914  235D  34B9               	retlw	low (STR_16| (0+32768))
  8915  235E  34A8               	retlw	high (STR_16| (0+32768))
  8916  235F  3400               	retlw	low (STR_17| (0+32768))
  8917  2360  34B0               	retlw	high (STR_17| (0+32768))
  8918  2361  345D               	retlw	low (STR_18| (0+32768))
  8919  2362  34A8               	retlw	high (STR_18| (0+32768))
  8920  2363  3480               	retlw	low (STR_19| (0+32768))
  8921  2364  34A8               	retlw	high (STR_19| (0+32768))
  8922  2365  34D3               	retlw	low (STR_20| (0+32768))
  8923  2366  34A8               	retlw	high (STR_20| (0+32768))
  8924  2367  349E               	retlw	low (STR_21| (0+32768))
  8925  2368  34A8               	retlw	high (STR_21| (0+32768))
  8926  2369  3435               	retlw	low (STR_22| (0+32768))
  8927  236A  34A8               	retlw	high (STR_22| (0+32768))
  8928  236B  340A               	retlw	low (STR_23| (0+32768))
  8929  236C  34A8               	retlw	high (STR_23| (0+32768))
  8930                           
  8931                           ;initializer for _roundabout_leds
  8932  236D  3480               	retlw	128
  8933  236E  3400               	retlw	0
  8934  236F  3400               	retlw	0
  8935  2370  3401               	retlw	1
  8936  2371  3400               	retlw	0
  8937  2372  3402               	retlw	2
  8938  2373  3400               	retlw	0
  8939  2374  3408               	retlw	8
  8940  2375  3400               	retlw	0
  8941  2376  3410               	retlw	16
  8942  2377  3400               	retlw	0
  8943  2378  3420               	retlw	32
  8944  2379  3400               	retlw	0
  8945  237A  3440               	retlw	64
  8946  237B  3400               	retlw	0
  8947  237C  3480               	retlw	128
  8948  237D  3400               	retlw	0
  8949  237E  3440               	retlw	64
  8950  237F  3400               	retlw	0
  8951  2380  3420               	retlw	32
  8952  2381  3400               	retlw	0
  8953  2382  3410               	retlw	16
  8954  2383  3400               	retlw	0
  8955  2384  3408               	retlw	8
  8956  2385  3400               	retlw	0
  8957  2386  3402               	retlw	2
  8958  2387  3400               	retlw	0
  8959  2388  3401               	retlw	1
  8960                           
  8961                           	psect	idataBANK7
  8962  2319                     __pidataBANK7:	
  8963                           
  8964                           ;initializer for _curtain_leds
  8965  2319  3480               	retlw	128
  8966  231A  3400               	retlw	0
  8967  231B  3480               	retlw	128
  8968  231C  3401               	retlw	1
  8969  231D  3480               	retlw	128
  8970  231E  3403               	retlw	3
  8971  231F  3480               	retlw	128
  8972  2320  340B               	retlw	11
  8973  2321  3480               	retlw	128
  8974  2322  341B               	retlw	27
  8975  2323  3480               	retlw	128
  8976  2324  343B               	retlw	59
  8977  2325  3480               	retlw	128
  8978  2326  347B               	retlw	123
  8979  2327  3480               	retlw	128
  8980  2328  34FB               	retlw	251
  8981  2329  3480               	retlw	128
  8982  232A  347B               	retlw	123
  8983  232B  3480               	retlw	128
  8984  232C  343B               	retlw	59
  8985  232D  3480               	retlw	128
  8986  232E  341B               	retlw	27
  8987  232F  3480               	retlw	128
  8988  2330  340B               	retlw	11
  8989  2331  3480               	retlw	128
  8990  2332  3403               	retlw	3
  8991  2333  3480               	retlw	128
  8992  2334  3401               	retlw	1
  8993                           
  8994                           ;initializer for _roundabout_leds_inverse
  8995  2335  3480               	retlw	128
  8996  2336  3400               	retlw	0
  8997  2337  3440               	retlw	64
  8998  2338  3400               	retlw	0
  8999  2339  3420               	retlw	32
  9000  233A  3400               	retlw	0
  9001  233B  3410               	retlw	16
  9002  233C  3400               	retlw	0
  9003  233D  3408               	retlw	8
  9004  233E  3400               	retlw	0
  9005  233F  3404               	retlw	4
  9006  2340  3400               	retlw	0
  9007  2341  3402               	retlw	2
  9008  2342  3400               	retlw	0
  9009  2343  3401               	retlw	1
  9010  2344  3400               	retlw	0
  9011  2345  3402               	retlw	2
  9012  2346  3400               	retlw	0
  9013  2347  3404               	retlw	4
  9014  2348  3400               	retlw	0
  9015  2349  3408               	retlw	8
  9016  234A  3400               	retlw	0
  9017  234B  3410               	retlw	16
  9018  234C  3400               	retlw	0
  9019  234D  3420               	retlw	32
  9020  234E  3400               	retlw	0
  9021  234F  3440               	retlw	64
  9022  2350  3400               	retlw	0
  9023                           
  9024                           	psect	idataBANK8
  9025  2060                     __pidataBANK8:	
  9026                           
  9027                           ;initializer for _curtain_leds_inverse
  9028  2060  3480               	retlw	128
  9029  2061  3400               	retlw	0
  9030  2062  34C0               	retlw	192
  9031  2063  3400               	retlw	0
  9032  2064  34E0               	retlw	224
  9033  2065  3400               	retlw	0
  9034  2066  34F0               	retlw	240
  9035  2067  3400               	retlw	0
  9036  2068  34F8               	retlw	248
  9037  2069  3400               	retlw	0
  9038  206A  34FC               	retlw	252
  9039  206B  3400               	retlw	0
  9040  206C  34FE               	retlw	254
  9041  206D  3400               	retlw	0
  9042  206E  34FF               	retlw	255
  9043  206F  3400               	retlw	0
  9044  2070  34FE               	retlw	254
  9045  2071  3400               	retlw	0
  9046  2072  34FC               	retlw	252
  9047  2073  3400               	retlw	0
  9048  2074  34F8               	retlw	248
  9049  2075  3400               	retlw	0
  9050  2076  34F0               	retlw	240
  9051  2077  3400               	retlw	0
  9052  2078  34E0               	retlw	224
  9053  2079  3400               	retlw	0
  9054  207A  34C0               	retlw	192
  9055  207B  3400               	retlw	0
  9056                           
  9057                           	psect	idataBIGRAM
  9058  0649                     __pidataBIGRAM:	
  9059                           
  9060                           ;initializer for _asciiCharTableLookup
  9061  0649  3400               	retlw	0
  9062  064A  3400               	retlw	0
  9063  064B  3400               	retlw	0
  9064  064C  3420               	retlw	32
  9065  064D  3410               	retlw	16
  9066  064E  3410               	retlw	16
  9067  064F  3420               	retlw	32
  9068  0650  3400               	retlw	0
  9069  0651  3410               	retlw	16
  9070  0652  3410               	retlw	16
  9071  0653  34A5               	retlw	165
  9072  0654  3421               	retlw	33
  9073  0655  34A5               	retlw	165
  9074  0656  3460               	retlw	96
  9075  0657  3410               	retlw	16
  9076  0658  3430               	retlw	48
  9077  0659  3400               	retlw	0
  9078  065A  3412               	retlw	18
  9079  065B  3410               	retlw	16
  9080  065C  3408               	retlw	8
  9081  065D  3420               	retlw	32
  9082  065E  3420               	retlw	32
  9083  065F  3485               	retlw	133
  9084  0660  3445               	retlw	69
  9085  0661  34B1               	retlw	177
  9086  0662  3430               	retlw	48
  9087  0663  3410               	retlw	16
  9088  0664  3410               	retlw	16
  9089  0665  3410               	retlw	16
  9090  0666  3410               	retlw	16
  9091  0667  3410               	retlw	16
  9092  0668  3410               	retlw	16
  9093  0669  3410               	retlw	16
  9094  066A  3410               	retlw	16
  9095  066B  3410               	retlw	16
  9096  066C  3410               	retlw	16
  9097  066D  3410               	retlw	16
  9098  066E  3410               	retlw	16
  9099  066F  3410               	retlw	16
  9100  0670  3410               	retlw	16
  9101  0671  3410               	retlw	16
  9102  0672  3410               	retlw	16
  9103  0673  3410               	retlw	16
  9104  0674  3410               	retlw	16
  9105  0675  3410               	retlw	16
  9106  0676  3410               	retlw	16
  9107  0677  3410               	retlw	16
  9108  0678  3410               	retlw	16
  9109  0679  3410               	retlw	16
  9110  067A  3410               	retlw	16
  9111  067B  3410               	retlw	16
  9112  067C  3410               	retlw	16
  9113  067D  3410               	retlw	16
  9114  067E  3410               	retlw	16
  9115  067F  3410               	retlw	16
  9116  0680  3410               	retlw	16
  9117  0681  3410               	retlw	16
  9118  0682  3410               	retlw	16
  9119  0683  3410               	retlw	16
  9120  0684  3410               	retlw	16
  9121  0685  3410               	retlw	16
  9122  0686  3410               	retlw	16
  9123  0687  3410               	retlw	16
  9124  0688  3410               	retlw	16
  9125  0689  3400               	retlw	0
  9126  068A  3400               	retlw	0
  9127  068B  34C0               	retlw	192
  9128  068C  3440               	retlw	64
  9129  068D  3400               	retlw	0
  9130  068E  3444               	retlw	68
  9131  068F  3410               	retlw	16
  9132  0690  3410               	retlw	16
  9133  0691  34B4               	retlw	180
  9134  0692  3435               	retlw	53
  9135  0693  3410               	retlw	16
  9136  0694  3410               	retlw	16
  9137  0695  3410               	retlw	16
  9138  0696  3410               	retlw	16
  9139  0697  3400               	retlw	0
  9140  0698  3404               	retlw	4
  9141  0699  3408               	retlw	8
  9142  069A  3408               	retlw	8
  9143  069B  3402               	retlw	2
  9144  069C  3402               	retlw	2
  9145  069D  341E               	retlw	30
  9146  069E  341E               	retlw	30
  9147  069F  3414               	retlw	20
  9148  06A0  3414               	retlw	20
  9149  06A1  3440               	retlw	64
  9150  06A2  3400               	retlw	0
  9151  06A3  3410               	retlw	16
  9152  06A4  3410               	retlw	16
  9153  06A5  3440               	retlw	64
  9154  06A6  3400               	retlw	0
  9155  06A7  3402               	retlw	2
  9156  06A8  3408               	retlw	8
  9157  06A9  34A9               	retlw	169
  9158  06AA  3463               	retlw	99
  9159  06AB  3480               	retlw	128
  9160  06AC  3440               	retlw	64
  9161  06AD  3431               	retlw	49
  9162  06AE  3470               	retlw	112
  9163  06AF  34B0               	retlw	176
  9164  06B0  3460               	retlw	96
  9165  06B1  3490               	retlw	144
  9166  06B2  3451               	retlw	81
  9167  06B3  34B0               	retlw	176
  9168  06B4  3431               	retlw	49
  9169  06B5  34B1               	retlw	177
  9170  06B6  3431               	retlw	49
  9171  06B7  3480               	retlw	128
  9172  06B8  3460               	retlw	96
  9173  06B9  34B1               	retlw	177
  9174  06BA  3471               	retlw	113
  9175  06BB  3490               	retlw	144
  9176  06BC  3471               	retlw	113
  9177  06BD  3410               	retlw	16
  9178  06BE  3410               	retlw	16
  9179  06BF  3410               	retlw	16
  9180  06C0  3410               	retlw	16
  9181  06C1  3408               	retlw	8
  9182  06C2  3408               	retlw	8
  9183  06C3  3430               	retlw	48
  9184  06C4  3410               	retlw	16
  9185  06C5  3402               	retlw	2
  9186  06C6  3402               	retlw	2
  9187  06C7  3414               	retlw	20
  9188  06C8  34E1               	retlw	225
  9189  06C9  34A5               	retlw	165
  9190  06CA  3470               	retlw	112
  9191  06CB  3491               	retlw	145
  9192  06CC  3471               	retlw	113
  9193  06CD  34B1               	retlw	177
  9194  06CE  3411               	retlw	17
  9195  06CF  3421               	retlw	33
  9196  06D0  3421               	retlw	33
  9197  06D1  34B1               	retlw	177
  9198  06D2  3450               	retlw	80
  9199  06D3  3421               	retlw	33
  9200  06D4  3431               	retlw	49
  9201  06D5  3401               	retlw	1
  9202  06D6  3431               	retlw	49
  9203  06D7  34B1               	retlw	177
  9204  06D8  3421               	retlw	33
  9205  06D9  3491               	retlw	145
  9206  06DA  3451               	retlw	81
  9207  06DB  3424               	retlw	36
  9208  06DC  3424               	retlw	36
  9209  06DD  34A1               	retlw	161
  9210  06DE  3440               	retlw	64
  9211  06DF  3409               	retlw	9
  9212  06E0  3419               	retlw	25
  9213  06E1  3421               	retlw	33
  9214  06E2  3401               	retlw	1
  9215  06E3  3481               	retlw	129
  9216  06E4  344B               	retlw	75
  9217  06E5  3489               	retlw	137
  9218  06E6  3443               	retlw	67
  9219  06E7  34A1               	retlw	161
  9220  06E8  3461               	retlw	97
  9221  06E9  3411               	retlw	17
  9222  06EA  3471               	retlw	113
  9223  06EB  34A9               	retlw	169
  9224  06EC  3461               	retlw	97
  9225  06ED  3419               	retlw	25
  9226  06EE  3471               	retlw	113
  9227  06EF  34B0               	retlw	176
  9228  06F0  3431               	retlw	49
  9229  06F1  3404               	retlw	4
  9230  06F2  3424               	retlw	36
  9231  06F3  34A1               	retlw	161
  9232  06F4  3441               	retlw	65
  9233  06F5  3403               	retlw	3
  9234  06F6  3409               	retlw	9
  9235  06F7  348B               	retlw	139
  9236  06F8  3441               	retlw	65
  9237  06F9  340A               	retlw	10
  9238  06FA  340A               	retlw	10
  9239  06FB  3404               	retlw	4
  9240  06FC  340A               	retlw	10
  9241  06FD  3422               	retlw	34
  9242  06FE  3428               	retlw	40
  9243  06FF  3421               	retlw	33
  9244  0700  3421               	retlw	33
  9245  0701  3408               	retlw	8
  9246  0702  3402               	retlw	2
  9247  0703  34A0               	retlw	160
  9248  0704  3460               	retlw	96
  9249  0705  340A               	retlw	10
  9250  0706  3400               	retlw	0
  9251  0707  3420               	retlw	32
  9252  0708  3400               	retlw	0
  9253  0709  3410               	retlw	16
  9254  070A  3410               	retlw	16
  9255  070B  3491               	retlw	145
  9256  070C  3471               	retlw	113
  9257  070D  34B1               	retlw	177
  9258  070E  3411               	retlw	17
  9259  070F  3431               	retlw	49
  9260  0710  3410               	retlw	16
  9261  0711  34B1               	retlw	177
  9262  0712  3450               	retlw	80
  9263  0713  3421               	retlw	33
  9264  0714  3431               	retlw	49
  9265  0715  3401               	retlw	1
  9266  0716  3431               	retlw	49
  9267  0717  34B1               	retlw	177
  9268  0718  3421               	retlw	33
  9269  0719  3491               	retlw	145
  9270  071A  3451               	retlw	81
  9271  071B  3424               	retlw	36
  9272  071C  3424               	retlw	36
  9273  071D  34A1               	retlw	161
  9274  071E  3440               	retlw	64
  9275  071F  3409               	retlw	9
  9276  0720  3419               	retlw	25
  9277  0721  3421               	retlw	33
  9278  0722  3401               	retlw	1
  9279  0723  3481               	retlw	129
  9280  0724  344B               	retlw	75
  9281  0725  3489               	retlw	137
  9282  0726  3443               	retlw	67
  9283  0727  34A1               	retlw	161
  9284  0728  3461               	retlw	97
  9285  0729  3411               	retlw	17
  9286  072A  3471               	retlw	113
  9287  072B  34A9               	retlw	169
  9288  072C  3461               	retlw	97
  9289  072D  3419               	retlw	25
  9290  072E  3471               	retlw	113
  9291  072F  34B0               	retlw	176
  9292  0730  3431               	retlw	49
  9293  0731  3404               	retlw	4
  9294  0732  3424               	retlw	36
  9295  0733  34A1               	retlw	161
  9296  0734  3441               	retlw	65
  9297  0735  3403               	retlw	3
  9298  0736  3409               	retlw	9
  9299  0737  348B               	retlw	139
  9300  0738  3441               	retlw	65
  9301  0739  340A               	retlw	10
  9302  073A  340A               	retlw	10
  9303  073B  3404               	retlw	4
  9304  073C  340A               	retlw	10
  9305  073D  3422               	retlw	34
  9306  073E  3428               	retlw	40
  9307  073F  3410               	retlw	16
  9308  0740  3410               	retlw	16
  9309  0741  3404               	retlw	4
  9310  0742  3404               	retlw	4
  9311  0743  3410               	retlw	16
  9312  0744  3410               	retlw	16
  9313  0745  3410               	retlw	16
  9314  0746  3410               	retlw	16
  9315  0747  34FF               	retlw	255
  9316  0748  34FF               	retlw	255
  9317                           
  9318                           	psect	stringtext1
  9319  1000                     __pstringtext1:	
  9320  1000                     _gamma_table_256x1k:	
  9321  1000  3400               	retlw	0
  9322  1001  3400               	retlw	0
  9323  1002  3400               	retlw	0
  9324  1003  3400               	retlw	0
  9325  1004  3400               	retlw	0
  9326  1005  3400               	retlw	0
  9327  1006  3400               	retlw	0
  9328  1007  3400               	retlw	0
  9329  1008  3400               	retlw	0
  9330  1009  3400               	retlw	0
  9331  100A  3400               	retlw	0
  9332  100B  3400               	retlw	0
  9333  100C  3400               	retlw	0
  9334  100D  3400               	retlw	0
  9335  100E  3400               	retlw	0
  9336  100F  3400               	retlw	0
  9337  1010  3400               	retlw	0
  9338  1011  3400               	retlw	0
  9339  1012  3400               	retlw	0
  9340  1013  3400               	retlw	0
  9341  1014  3400               	retlw	0
  9342  1015  3400               	retlw	0
  9343  1016  3400               	retlw	0
  9344  1017  3400               	retlw	0
  9345  1018  3400               	retlw	0
  9346  1019  3400               	retlw	0
  9347  101A  3400               	retlw	0
  9348  101B  3400               	retlw	0
  9349  101C  3400               	retlw	0
  9350  101D  3400               	retlw	0
  9351  101E  3401               	retlw	1
  9352  101F  3400               	retlw	0
  9353  1020  3401               	retlw	1
  9354  1021  3400               	retlw	0
  9355  1022  3401               	retlw	1
  9356  1023  3400               	retlw	0
  9357  1024  3401               	retlw	1
  9358  1025  3400               	retlw	0
  9359  1026  3401               	retlw	1
  9360  1027  3400               	retlw	0
  9361  1028  3401               	retlw	1
  9362  1029  3400               	retlw	0
  9363  102A  3402               	retlw	2
  9364  102B  3400               	retlw	0
  9365  102C  3402               	retlw	2
  9366  102D  3400               	retlw	0
  9367  102E  3402               	retlw	2
  9368  102F  3400               	retlw	0
  9369  1030  3403               	retlw	3
  9370  1031  3400               	retlw	0
  9371  1032  3403               	retlw	3
  9372  1033  3400               	retlw	0
  9373  1034  3403               	retlw	3
  9374  1035  3400               	retlw	0
  9375  1036  3404               	retlw	4
  9376  1037  3400               	retlw	0
  9377  1038  3404               	retlw	4
  9378  1039  3400               	retlw	0
  9379  103A  3404               	retlw	4
  9380  103B  3400               	retlw	0
  9381  103C  3405               	retlw	5
  9382  103D  3400               	retlw	0
  9383  103E  3405               	retlw	5
  9384  103F  3400               	retlw	0
  9385  1040  3406               	retlw	6
  9386  1041  3400               	retlw	0
  9387  1042  3406               	retlw	6
  9388  1043  3400               	retlw	0
  9389  1044  3407               	retlw	7
  9390  1045  3400               	retlw	0
  9391  1046  3407               	retlw	7
  9392  1047  3400               	retlw	0
  9393  1048  3408               	retlw	8
  9394  1049  3400               	retlw	0
  9395  104A  3408               	retlw	8
  9396  104B  3400               	retlw	0
  9397  104C  3409               	retlw	9
  9398  104D  3400               	retlw	0
  9399  104E  3409               	retlw	9
  9400  104F  3400               	retlw	0
  9401  1050  340A               	retlw	10
  9402  1051  3400               	retlw	0
  9403  1052  340B               	retlw	11
  9404  1053  3400               	retlw	0
  9405  1054  340B               	retlw	11
  9406  1055  3400               	retlw	0
  9407  1056  340C               	retlw	12
  9408  1057  3400               	retlw	0
  9409  1058  340D               	retlw	13
  9410  1059  3400               	retlw	0
  9411  105A  340E               	retlw	14
  9412  105B  3400               	retlw	0
  9413  105C  340E               	retlw	14
  9414  105D  3400               	retlw	0
  9415  105E  340F               	retlw	15
  9416  105F  3400               	retlw	0
  9417  1060  3410               	retlw	16
  9418  1061  3400               	retlw	0
  9419  1062  3411               	retlw	17
  9420  1063  3400               	retlw	0
  9421  1064  3412               	retlw	18
  9422  1065  3400               	retlw	0
  9423  1066  3413               	retlw	19
  9424  1067  3400               	retlw	0
  9425  1068  3413               	retlw	19
  9426  1069  3400               	retlw	0
  9427  106A  3414               	retlw	20
  9428  106B  3400               	retlw	0
  9429  106C  3415               	retlw	21
  9430  106D  3400               	retlw	0
  9431  106E  3416               	retlw	22
  9432  106F  3400               	retlw	0
  9433  1070  3417               	retlw	23
  9434  1071  3400               	retlw	0
  9435  1072  3419               	retlw	25
  9436  1073  3400               	retlw	0
  9437  1074  341A               	retlw	26
  9438  1075  3400               	retlw	0
  9439  1076  341B               	retlw	27
  9440  1077  3400               	retlw	0
  9441  1078  341C               	retlw	28
  9442  1079  3400               	retlw	0
  9443  107A  341D               	retlw	29
  9444  107B  3400               	retlw	0
  9445  107C  341E               	retlw	30
  9446  107D  3400               	retlw	0
  9447  107E  3420               	retlw	32
  9448  107F  3400               	retlw	0
  9449  1080  3421               	retlw	33
  9450  1081  3400               	retlw	0
  9451  1082  3422               	retlw	34
  9452  1083  3400               	retlw	0
  9453  1084  3423               	retlw	35
  9454  1085  3400               	retlw	0
  9455  1086  3425               	retlw	37
  9456  1087  3400               	retlw	0
  9457  1088  3426               	retlw	38
  9458  1089  3400               	retlw	0
  9459  108A  3428               	retlw	40
  9460  108B  3400               	retlw	0
  9461  108C  3429               	retlw	41
  9462  108D  3400               	retlw	0
  9463  108E  342A               	retlw	42
  9464  108F  3400               	retlw	0
  9465  1090  342C               	retlw	44
  9466  1091  3400               	retlw	0
  9467  1092  342E               	retlw	46
  9468  1093  3400               	retlw	0
  9469  1094  342F               	retlw	47
  9470  1095  3400               	retlw	0
  9471  1096  3431               	retlw	49
  9472  1097  3400               	retlw	0
  9473  1098  3432               	retlw	50
  9474  1099  3400               	retlw	0
  9475  109A  3434               	retlw	52
  9476  109B  3400               	retlw	0
  9477  109C  3436               	retlw	54
  9478  109D  3400               	retlw	0
  9479  109E  3437               	retlw	55
  9480  109F  3400               	retlw	0
  9481  10A0  3439               	retlw	57
  9482  10A1  3400               	retlw	0
  9483  10A2  343B               	retlw	59
  9484  10A3  3400               	retlw	0
  9485  10A4  343D               	retlw	61
  9486  10A5  3400               	retlw	0
  9487  10A6  343F               	retlw	63
  9488  10A7  3400               	retlw	0
  9489  10A8  3441               	retlw	65
  9490  10A9  3400               	retlw	0
  9491  10AA  3442               	retlw	66
  9492  10AB  3400               	retlw	0
  9493  10AC  3444               	retlw	68
  9494  10AD  3400               	retlw	0
  9495  10AE  3446               	retlw	70
  9496  10AF  3400               	retlw	0
  9497  10B0  3448               	retlw	72
  9498  10B1  3400               	retlw	0
  9499  10B2  344B               	retlw	75
  9500  10B3  3400               	retlw	0
  9501  10B4  344D               	retlw	77
  9502  10B5  3400               	retlw	0
  9503  10B6  344F               	retlw	79
  9504  10B7  3400               	retlw	0
  9505  10B8  3451               	retlw	81
  9506  10B9  3400               	retlw	0
  9507  10BA  3453               	retlw	83
  9508  10BB  3400               	retlw	0
  9509  10BC  3455               	retlw	85
  9510  10BD  3400               	retlw	0
  9511  10BE  3458               	retlw	88
  9512  10BF  3400               	retlw	0
  9513  10C0  345A               	retlw	90
  9514  10C1  3400               	retlw	0
  9515  10C2  345C               	retlw	92
  9516  10C3  3400               	retlw	0
  9517  10C4  345F               	retlw	95
  9518  10C5  3400               	retlw	0
  9519  10C6  3461               	retlw	97
  9520  10C7  3400               	retlw	0
  9521  10C8  3464               	retlw	100
  9522  10C9  3400               	retlw	0
  9523  10CA  3466               	retlw	102
  9524  10CB  3400               	retlw	0
  9525  10CC  3469               	retlw	105
  9526  10CD  3400               	retlw	0
  9527  10CE  346B               	retlw	107
  9528  10CF  3400               	retlw	0
  9529  10D0  346E               	retlw	110
  9530  10D1  3400               	retlw	0
  9531  10D2  3470               	retlw	112
  9532  10D3  3400               	retlw	0
  9533  10D4  3473               	retlw	115
  9534  10D5  3400               	retlw	0
  9535  10D6  3476               	retlw	118
  9536  10D7  3400               	retlw	0
  9537  10D8  3479               	retlw	121
  9538  10D9  3400               	retlw	0
  9539  10DA  347B               	retlw	123
  9540  10DB  3400               	retlw	0
  9541  10DC  347E               	retlw	126
  9542  10DD  3400               	retlw	0
  9543  10DE  3481               	retlw	129
  9544  10DF  3400               	retlw	0
  9545  10E0  3484               	retlw	132
  9546  10E1  3400               	retlw	0
  9547  10E2  3487               	retlw	135
  9548  10E3  3400               	retlw	0
  9549  10E4  348A               	retlw	138
  9550  10E5  3400               	retlw	0
  9551  10E6  348D               	retlw	141
  9552  10E7  3400               	retlw	0
  9553  10E8  3490               	retlw	144
  9554  10E9  3400               	retlw	0
  9555  10EA  3493               	retlw	147
  9556  10EB  3400               	retlw	0
  9557  10EC  3496               	retlw	150
  9558  10ED  3400               	retlw	0
  9559  10EE  349A               	retlw	154
  9560  10EF  3400               	retlw	0
  9561  10F0  349D               	retlw	157
  9562  10F1  3400               	retlw	0
  9563  10F2  34A0               	retlw	160
  9564  10F3  3400               	retlw	0
  9565  10F4  34A3               	retlw	163
  9566  10F5  3400               	retlw	0
  9567  10F6  34A7               	retlw	167
  9568  10F7  3400               	retlw	0
  9569  10F8  34AA               	retlw	170
  9570  10F9  3400               	retlw	0
  9571  10FA  34AE               	retlw	174
  9572  10FB  3400               	retlw	0
  9573  10FC  34B1               	retlw	177
  9574  10FD  3400               	retlw	0
  9575  10FE  34B5               	retlw	181
  9576  10FF  3400               	retlw	0
  9577  1100  34B8               	retlw	184
  9578  1101  3400               	retlw	0
  9579  1102  34BC               	retlw	188
  9580  1103  3400               	retlw	0
  9581  1104  34BF               	retlw	191
  9582  1105  3400               	retlw	0
  9583  1106  34C3               	retlw	195
  9584  1107  3400               	retlw	0
  9585  1108  34C7               	retlw	199
  9586  1109  3400               	retlw	0
  9587  110A  34CA               	retlw	202
  9588  110B  3400               	retlw	0
  9589  110C  34CE               	retlw	206
  9590  110D  3400               	retlw	0
  9591  110E  34D2               	retlw	210
  9592  110F  3400               	retlw	0
  9593  1110  34D6               	retlw	214
  9594  1111  3400               	retlw	0
  9595  1112  34DA               	retlw	218
  9596  1113  3400               	retlw	0
  9597  1114  34DE               	retlw	222
  9598  1115  3400               	retlw	0
  9599  1116  34E2               	retlw	226
  9600  1117  3400               	retlw	0
  9601  1118  34E6               	retlw	230
  9602  1119  3400               	retlw	0
  9603  111A  34EA               	retlw	234
  9604  111B  3400               	retlw	0
  9605  111C  34EE               	retlw	238
  9606  111D  3400               	retlw	0
  9607  111E  34F3               	retlw	243
  9608  111F  3400               	retlw	0
  9609  1120  34F7               	retlw	247
  9610  1121  3400               	retlw	0
  9611  1122  34FB               	retlw	251
  9612  1123  3400               	retlw	0
  9613  1124  34FF               	retlw	255
  9614  1125  3400               	retlw	0
  9615  1126  3404               	retlw	4
  9616  1127  3401               	retlw	1
  9617  1128  3408               	retlw	8
  9618  1129  3401               	retlw	1
  9619  112A  340D               	retlw	13
  9620  112B  3401               	retlw	1
  9621  112C  3411               	retlw	17
  9622  112D  3401               	retlw	1
  9623  112E  3416               	retlw	22
  9624  112F  3401               	retlw	1
  9625  1130  341A               	retlw	26
  9626  1131  3401               	retlw	1
  9627  1132  341F               	retlw	31
  9628  1133  3401               	retlw	1
  9629  1134  3424               	retlw	36
  9630  1135  3401               	retlw	1
  9631  1136  3428               	retlw	40
  9632  1137  3401               	retlw	1
  9633  1138  342D               	retlw	45
  9634  1139  3401               	retlw	1
  9635  113A  3432               	retlw	50
  9636  113B  3401               	retlw	1
  9637  113C  3437               	retlw	55
  9638  113D  3401               	retlw	1
  9639  113E  343C               	retlw	60
  9640  113F  3401               	retlw	1
  9641  1140  3441               	retlw	65
  9642  1141  3401               	retlw	1
  9643  1142  3446               	retlw	70
  9644  1143  3401               	retlw	1
  9645  1144  344B               	retlw	75
  9646  1145  3401               	retlw	1
  9647  1146  3450               	retlw	80
  9648  1147  3401               	retlw	1
  9649  1148  3455               	retlw	85
  9650  1149  3401               	retlw	1
  9651  114A  345A               	retlw	90
  9652  114B  3401               	retlw	1
  9653  114C  345F               	retlw	95
  9654  114D  3401               	retlw	1
  9655  114E  3465               	retlw	101
  9656  114F  3401               	retlw	1
  9657  1150  346A               	retlw	106
  9658  1151  3401               	retlw	1
  9659  1152  346F               	retlw	111
  9660  1153  3401               	retlw	1
  9661  1154  3475               	retlw	117
  9662  1155  3401               	retlw	1
  9663  1156  347A               	retlw	122
  9664  1157  3401               	retlw	1
  9665  1158  3480               	retlw	128
  9666  1159  3401               	retlw	1
  9667  115A  3486               	retlw	134
  9668  115B  3401               	retlw	1
  9669  115C  348B               	retlw	139
  9670  115D  3401               	retlw	1
  9671  115E  3491               	retlw	145
  9672  115F  3401               	retlw	1
  9673  1160  3497               	retlw	151
  9674  1161  3401               	retlw	1
  9675  1162  349C               	retlw	156
  9676  1163  3401               	retlw	1
  9677  1164  34A2               	retlw	162
  9678  1165  3401               	retlw	1
  9679  1166  34A8               	retlw	168
  9680  1167  3401               	retlw	1
  9681  1168  34AE               	retlw	174
  9682  1169  3401               	retlw	1
  9683  116A  34B4               	retlw	180
  9684  116B  3401               	retlw	1
  9685  116C  34BA               	retlw	186
  9686  116D  3401               	retlw	1
  9687  116E  34C0               	retlw	192
  9688  116F  3401               	retlw	1
  9689  1170  34C6               	retlw	198
  9690  1171  3401               	retlw	1
  9691  1172  34CC               	retlw	204
  9692  1173  3401               	retlw	1
  9693  1174  34D2               	retlw	210
  9694  1175  3401               	retlw	1
  9695  1176  34D9               	retlw	217
  9696  1177  3401               	retlw	1
  9697  1178  34DF               	retlw	223
  9698  1179  3401               	retlw	1
  9699  117A  34E5               	retlw	229
  9700  117B  3401               	retlw	1
  9701  117C  34EC               	retlw	236
  9702  117D  3401               	retlw	1
  9703  117E  34F2               	retlw	242
  9704  117F  3401               	retlw	1
  9705  1180  34F9               	retlw	249
  9706  1181  3401               	retlw	1
  9707  1182  34FF               	retlw	255
  9708  1183  3401               	retlw	1
  9709  1184  3406               	retlw	6
  9710  1185  3402               	retlw	2
  9711  1186  340D               	retlw	13
  9712  1187  3402               	retlw	2
  9713  1188  3413               	retlw	19
  9714  1189  3402               	retlw	2
  9715  118A  341A               	retlw	26
  9716  118B  3402               	retlw	2
  9717  118C  3421               	retlw	33
  9718  118D  3402               	retlw	2
  9719  118E  3428               	retlw	40
  9720  118F  3402               	retlw	2
  9721  1190  342F               	retlw	47
  9722  1191  3402               	retlw	2
  9723  1192  3436               	retlw	54
  9724  1193  3402               	retlw	2
  9725  1194  343D               	retlw	61
  9726  1195  3402               	retlw	2
  9727  1196  3444               	retlw	68
  9728  1197  3402               	retlw	2
  9729  1198  344B               	retlw	75
  9730  1199  3402               	retlw	2
  9731  119A  3452               	retlw	82
  9732  119B  3402               	retlw	2
  9733  119C  345A               	retlw	90
  9734  119D  3402               	retlw	2
  9735  119E  3461               	retlw	97
  9736  119F  3402               	retlw	2
  9737  11A0  3468               	retlw	104
  9738  11A1  3402               	retlw	2
  9739  11A2  3470               	retlw	112
  9740  11A3  3402               	retlw	2
  9741  11A4  3477               	retlw	119
  9742  11A5  3402               	retlw	2
  9743  11A6  347F               	retlw	127
  9744  11A7  3402               	retlw	2
  9745  11A8  3486               	retlw	134
  9746  11A9  3402               	retlw	2
  9747  11AA  348E               	retlw	142
  9748  11AB  3402               	retlw	2
  9749  11AC  3495               	retlw	149
  9750  11AD  3402               	retlw	2
  9751  11AE  349D               	retlw	157
  9752  11AF  3402               	retlw	2
  9753  11B0  34A5               	retlw	165
  9754  11B1  3402               	retlw	2
  9755  11B2  34AD               	retlw	173
  9756  11B3  3402               	retlw	2
  9757  11B4  34B5               	retlw	181
  9758  11B5  3402               	retlw	2
  9759  11B6  34BD               	retlw	189
  9760  11B7  3402               	retlw	2
  9761  11B8  34C5               	retlw	197
  9762  11B9  3402               	retlw	2
  9763  11BA  34CD               	retlw	205
  9764  11BB  3402               	retlw	2
  9765  11BC  34D5               	retlw	213
  9766  11BD  3402               	retlw	2
  9767  11BE  34DD               	retlw	221
  9768  11BF  3402               	retlw	2
  9769  11C0  34E5               	retlw	229
  9770  11C1  3402               	retlw	2
  9771  11C2  34ED               	retlw	237
  9772  11C3  3402               	retlw	2
  9773  11C4  34F6               	retlw	246
  9774  11C5  3402               	retlw	2
  9775  11C6  34FE               	retlw	254
  9776  11C7  3402               	retlw	2
  9777  11C8  3406               	retlw	6
  9778  11C9  3403               	retlw	3
  9779  11CA  340F               	retlw	15
  9780  11CB  3403               	retlw	3
  9781  11CC  3418               	retlw	24
  9782  11CD  3403               	retlw	3
  9783  11CE  3420               	retlw	32
  9784  11CF  3403               	retlw	3
  9785  11D0  3429               	retlw	41
  9786  11D1  3403               	retlw	3
  9787  11D2  3431               	retlw	49
  9788  11D3  3403               	retlw	3
  9789  11D4  343A               	retlw	58
  9790  11D5  3403               	retlw	3
  9791  11D6  3443               	retlw	67
  9792  11D7  3403               	retlw	3
  9793  11D8  344C               	retlw	76
  9794  11D9  3403               	retlw	3
  9795  11DA  3455               	retlw	85
  9796  11DB  3403               	retlw	3
  9797  11DC  345E               	retlw	94
  9798  11DD  3403               	retlw	3
  9799  11DE  3467               	retlw	103
  9800  11DF  3403               	retlw	3
  9801  11E0  3470               	retlw	112
  9802  11E1  3403               	retlw	3
  9803  11E2  3479               	retlw	121
  9804  11E3  3403               	retlw	3
  9805  11E4  3482               	retlw	130
  9806  11E5  3403               	retlw	3
  9807  11E6  348C               	retlw	140
  9808  11E7  3403               	retlw	3
  9809  11E8  3495               	retlw	149
  9810  11E9  3403               	retlw	3
  9811  11EA  349E               	retlw	158
  9812  11EB  3403               	retlw	3
  9813  11EC  34A8               	retlw	168
  9814  11ED  3403               	retlw	3
  9815  11EE  34B1               	retlw	177
  9816  11EF  3403               	retlw	3
  9817  11F0  34BB               	retlw	187
  9818  11F1  3403               	retlw	3
  9819  11F2  34C5               	retlw	197
  9820  11F3  3403               	retlw	3
  9821  11F4  34CE               	retlw	206
  9822  11F5  3403               	retlw	3
  9823  11F6  34D8               	retlw	216
  9824  11F7  3403               	retlw	3
  9825  11F8  34E2               	retlw	226
  9826  11F9  3403               	retlw	3
  9827  11FA  34EC               	retlw	236
  9828  11FB  3403               	retlw	3
  9829  11FC  34F6               	retlw	246
  9830  11FD  3403               	retlw	3
  9831  11FE  34FF               	retlw	255
  9832  11FF  3403               	retlw	3
  9833  1200                     __end_of_gamma_table_256x1k:	
  9834                           
  9835                           	psect	stringtext2
  9836  2800                     __pstringtext2:	
  9837  2800                     _dpowers:	
  9838  2800  3401               	retlw	1
  9839  2801  3400               	retlw	0
  9840  2802  340A               	retlw	10
  9841  2803  3400               	retlw	0
  9842  2804  3464               	retlw	100
  9843  2805  3400               	retlw	0
  9844  2806  34E8               	retlw	232
  9845  2807  3403               	retlw	3
  9846  2808  3410               	retlw	16
  9847  2809  3427               	retlw	39
  9848  280A                     __end_of_dpowers:	
  9849  000D                     _PORTBbits	set	13
  9850  000C                     _PORTAbits	set	12
  9851  000E                     _PORTCbits	set	14
  9852  000B                     _INTCONbits	set	11
  9853  0017                     _T0CON0bits	set	23
  9854  0010                     _PIR0bits	set	16
  9855  0015                     _TMR0L	set	21
  9856  0016                     _TMR0H	set	22
  9857  0018                     _T0CON1	set	24
  9858  0017                     _T0CON0	set	23
  9859  0012                     _PIR2bits	set	18
  9860  001F                     _T2CONbits	set	31
  9861  0011                     _PIR1bits	set	17
  9862  001D                     _TMR2	set	29
  9863  001E                     _PR2	set	30
  9864  001F                     _T2CON	set	31
  9865  005F                     _GIE	set	95
  9866  0090                     _PIE0bits	set	144
  9867  008E                     _TRISC	set	142
  9868  008D                     _TRISB	set	141
  9869  008C                     _TRISA	set	140
  9870  0097                     _WDTCON	set	151
  9871  010E                     _LATCbits	set	270
  9872  010D                     _LATBbits	set	269
  9873  010E                     _LATC	set	270
  9874  010D                     _LATB	set	269
  9875  010C                     _LATA	set	268
  9876  018C                     _ANSELA	set	396
  9877  018D                     _ANSELB	set	397
  9878  018E                     _ANSELC	set	398
  9879  020E                     _WPUC	set	526
  9880  020C                     _WPUA	set	524
  9881  020D                     _WPUB	set	525
  9882  0214                     _SSP1STATbits	set	532
  9883  0211                     _SSP1BUF	set	529
  9884  0215                     _SSP1CON1bits	set	533
  9885  0212                     _SSP1ADD	set	530
  9886  0215                     _SSP1CON1	set	533
  9887  0214                     _SSP1STAT	set	532
  9888  0297                     _CCP2CONbits	set	663
  9889  0295                     _CCPR2L	set	661
  9890  0296                     _CCPR2H	set	662
  9891  0297                     _CCP2CON	set	663
  9892  028E                     _ODCONC	set	654
  9893  028D                     _ODCONB	set	653
  9894  028C                     _ODCONA	set	652
  9895  0293                     _CCP1CONbits	set	659
  9896  029F                     _CCPTMRSbits	set	671
  9897  0291                     _CCPR1L	set	657
  9898  0292                     _CCPR1H	set	658
  9899  0293                     _CCP1CON	set	659
  9900  0417                     _T4CONbits	set	1047
  9901  0415                     _TMR4	set	1045
  9902  0416                     _PR4	set	1046
  9903  0417                     _T4CON	set	1047
  9904  061A                     _PWM6DCL	set	1562
  9905  061B                     _PWM6DCH	set	1563
  9906  061C                     _PWM6CON	set	1564
  9907  061F                     _PWMTMRSbits	set	1567
  9908  0617                     _PWM5DCL	set	1559
  9909  0618                     _PWM5DCH	set	1560
  9910  0619                     _PWM5CON	set	1561
  9911  0896                     _NVMCON2	set	2198
  9912  0893                     _NVMDATL	set	2195
  9913  0894                     _NVMDATH	set	2196
  9914  0895                     _NVMCON1bits	set	2197
  9915  0892                     _NVMADRH	set	2194
  9916  0891                     _NVMADRL	set	2193
  9917  091E                     _OSCTUNE	set	2334
  9918  091F                     _OSCFRQ	set	2335
  9919  091D                     _OSCEN	set	2333
  9920  091B                     _OSCCON3	set	2331
  9921  0919                     _OSCCON1	set	2329
  9922  48E0                     _PLLR	set	18656
  9923  0E20                     _SSP1CLKPPSbits	set	3616
  9924  0E21                     _SSP1DATPPSbits	set	3617
  9925  0E0F                     _PPSLOCKbits	set	3599
  9926  0E0F                     _PPSLOCK	set	3599
  9927  0EA2                     _RC2PPSbits	set	3746
  9928  0E9E                     _RB6PPSbits	set	3742
  9929  0EA3                     _RC3PPSbits	set	3747
  9930  0EA0                     _RC0PPSbits	set	3744
  9931  0EA4                     _RC4PPSbits	set	3748
  9932  0EA1                     _RC1PPSbits	set	3745
  9933  280A                     STR_23:	
  9934  280A  3448               	retlw	72	;'H'
  9935  280B  3454               	retlw	84	;'T'
  9936  280C  3454               	retlw	84	;'T'
  9937  280D  3450               	retlw	80	;'P'
  9938  280E  3453               	retlw	83	;'S'
  9939  280F  343A               	retlw	58	;':'
  9940  2810  342F               	retlw	47	;'/'
  9941  2811  342F               	retlw	47	;'/'
  9942  2812  3447               	retlw	71	;'G'
  9943  2813  3449               	retlw	73	;'I'
  9944  2814  3454               	retlw	84	;'T'
  9945  2815  3448               	retlw	72	;'H'
  9946  2816  3455               	retlw	85	;'U'
  9947  2817  3442               	retlw	66	;'B'
  9948  2818  342E               	retlw	46	;'.'
  9949  2819  3443               	retlw	67	;'C'
  9950  281A  344F               	retlw	79	;'O'
  9951  281B  344D               	retlw	77	;'M'
  9952  281C  342F               	retlw	47	;'/'
  9953  281D  344E               	retlw	78	;'N'
  9954  281E  3455               	retlw	85	;'U'
  9955  281F  344C               	retlw	76	;'L'
  9956  2820  344C               	retlw	76	;'L'
  9957  2821  3449               	retlw	73	;'I'
  9958  2822  3442               	retlw	66	;'B'
  9959  2823  3441               	retlw	65	;'A'
  9960  2824  3444               	retlw	68	;'D'
  9961  2825  3447               	retlw	71	;'G'
  9962  2826  3445               	retlw	69	;'E'
  9963  2827  342F               	retlw	47	;'/'
  9964  2828  3444               	retlw	68	;'D'
  9965  2829  3445               	retlw	69	;'E'
  9966  282A  3446               	retlw	70	;'F'
  9967  282B  3443               	retlw	67	;'C'
  9968  282C  344F               	retlw	79	;'O'
  9969  282D  344E               	retlw	78	;'N'
  9970  282E  3432               	retlw	50	;'2'
  9971  282F  3435               	retlw	53	;'5'
  9972  2830  3420               	retlw	32	;' '
  9973  2831  3420               	retlw	32	;' '
  9974  2832  3420               	retlw	32	;' '
  9975  2833  3420               	retlw	32	;' '
  9976  2834  3400               	retlw	0
  9977                           
  9978                           	psect	stringtext3
  9979  2835                     __pstringtext3:	
  9980  2835                     STR_22:	
  9981  2835  3447               	retlw	71	;'G'
  9982  2836  3455               	retlw	85	;'U'
  9983  2837  3459               	retlw	89	;'Y'
  9984  2838  3453               	retlw	83	;'S'
  9985  2839  3420               	retlw	32	;' '
  9986  283A  3449               	retlw	73	;'I'
  9987  283B  3420               	retlw	32	;' '
  9988  283C  3448               	retlw	72	;'H'
  9989  283D  3441               	retlw	65	;'A'
  9990  283E  3456               	retlw	86	;'V'
  9991  283F  3445               	retlw	69	;'E'
  9992  2840  3420               	retlw	32	;' '
  9993  2841  3441               	retlw	65	;'A'
  9994  2842  3420               	retlw	32	;' '
  9995  2843  3447               	retlw	71	;'G'
  9996  2844  3452               	retlw	82	;'R'
  9997  2845  3445               	retlw	69	;'E'
  9998  2846  3441               	retlw	65	;'A'
  9999  2847  3454               	retlw	84	;'T'
 10000  2848  3420               	retlw	32	;' '
 10001  2849  3449               	retlw	73	;'I'
 10002  284A  3444               	retlw	68	;'D'
 10003  284B  3445               	retlw	69	;'E'
 10004  284C  3441               	retlw	65	;'A'
 10005  284D  3420               	retlw	32	;' '
 10006  284E  342D               	retlw	45	;'-'
 10007  284F  344D               	retlw	77	;'M'
 10008  2850  3449               	retlw	73	;'I'
 10009  2851  344B               	retlw	75	;'K'
 10010  2852  3445               	retlw	69	;'E'
 10011  2853  3420               	retlw	32	;' '
 10012  2854  344B               	retlw	75	;'K'
 10013  2855  342E               	retlw	46	;'.'
 10014  2856  3420               	retlw	32	;' '
 10015  2857  3420               	retlw	32	;' '
 10016  2858  3420               	retlw	32	;' '
 10017  2859  3420               	retlw	32	;' '
 10018  285A  3420               	retlw	32	;' '
 10019  285B  3420               	retlw	32	;' '
 10020  285C  3400               	retlw	0
 10021                           
 10022                           	psect	stringtext4
 10023  285D                     __pstringtext4:	
 10024  285D                     STR_18:	
 10025  285D  3441               	retlw	65	;'A'
 10026  285E  344C               	retlw	76	;'L'
 10027  285F  344C               	retlw	76	;'L'
 10028  2860  3420               	retlw	32	;' '
 10029  2861  3459               	retlw	89	;'Y'
 10030  2862  344F               	retlw	79	;'O'
 10031  2863  3455               	retlw	85	;'U'
 10032  2864  3420               	retlw	32	;' '
 10033  2865  3442               	retlw	66	;'B'
 10034  2866  3441               	retlw	65	;'A'
 10035  2867  3453               	retlw	83	;'S'
 10036  2868  3445               	retlw	69	;'E'
 10037  2869  3420               	retlw	32	;' '
 10038  286A  3441               	retlw	65	;'A'
 10039  286B  3452               	retlw	82	;'R'
 10040  286C  3445               	retlw	69	;'E'
 10041  286D  3420               	retlw	32	;' '
 10042  286E  3442               	retlw	66	;'B'
 10043  286F  3445               	retlw	69	;'E'
 10044  2870  344C               	retlw	76	;'L'
 10045  2871  344F               	retlw	79	;'O'
 10046  2872  344E               	retlw	78	;'N'
 10047  2873  3447               	retlw	71	;'G'
 10048  2874  3420               	retlw	32	;' '
 10049  2875  3454               	retlw	84	;'T'
 10050  2876  344F               	retlw	79	;'O'
 10051  2877  3420               	retlw	32	;' '
 10052  2878  3455               	retlw	85	;'U'
 10053  2879  3453               	retlw	83	;'S'
 10054  287A  3420               	retlw	32	;' '
 10055  287B  3420               	retlw	32	;' '
 10056  287C  3420               	retlw	32	;' '
 10057  287D  3420               	retlw	32	;' '
 10058  287E  3420               	retlw	32	;' '
 10059  287F  3400               	retlw	0
 10060                           
 10061                           	psect	stringtext5
 10062  2880                     __pstringtext5:	
 10063  2880                     STR_19:	
 10064  2880  3444               	retlw	68	;'D'
 10065  2881  344F               	retlw	79	;'O'
 10066  2882  3445               	retlw	69	;'E'
 10067  2883  3453               	retlw	83	;'S'
 10068  2884  3420               	retlw	32	;' '
 10069  2885  3444               	retlw	68	;'D'
 10070  2886  3445               	retlw	69	;'E'
 10071  2887  3456               	retlw	86	;'V'
 10072  2888  3441               	retlw	65	;'A'
 10073  2889  344E               	retlw	78	;'N'
 10074  288A  3420               	retlw	32	;' '
 10075  288B  3448               	retlw	72	;'H'
 10076  288C  3441               	retlw	65	;'A'
 10077  288D  3453               	retlw	83	;'S'
 10078  288E  3420               	retlw	32	;' '
 10079  288F  3448               	retlw	72	;'H'
 10080  2890  3449               	retlw	73	;'I'
 10081  2891  3453               	retlw	83	;'S'
 10082  2892  3420               	retlw	32	;' '
 10083  2893  3450               	retlw	80	;'P'
 10084  2894  3448               	retlw	72	;'H'
 10085  2895  344F               	retlw	79	;'O'
 10086  2896  344E               	retlw	78	;'N'
 10087  2897  3445               	retlw	69	;'E'
 10088  2898  343F               	retlw	63	;'?'
 10089  2899  3420               	retlw	32	;' '
 10090  289A  3420               	retlw	32	;' '
 10091  289B  3420               	retlw	32	;' '
 10092  289C  3420               	retlw	32	;' '
 10093  289D  3400               	retlw	0
 10094                           
 10095                           	psect	stringtext6
 10096  289E                     __pstringtext6:	
 10097  289E                     STR_21:	
 10098  289E  344E               	retlw	78	;'N'
 10099  289F  344F               	retlw	79	;'O'
 10100  28A0  3454               	retlw	84	;'T'
 10101  28A1  3448               	retlw	72	;'H'
 10102  28A2  3449               	retlw	73	;'I'
 10103  28A3  344E               	retlw	78	;'N'
 10104  28A4  3447               	retlw	71	;'G'
 10105  28A5  3420               	retlw	32	;' '
 10106  28A6  3454               	retlw	84	;'T'
 10107  28A7  344F               	retlw	79	;'O'
 10108  28A8  3420               	retlw	32	;' '
 10109  28A9  3453               	retlw	83	;'S'
 10110  28AA  3445               	retlw	69	;'E'
 10111  28AB  3445               	retlw	69	;'E'
 10112  28AC  3420               	retlw	32	;' '
 10113  28AD  3448               	retlw	72	;'H'
 10114  28AE  3445               	retlw	69	;'E'
 10115  28AF  3452               	retlw	82	;'R'
 10116  28B0  3445               	retlw	69	;'E'
 10117  28B1  342E               	retlw	46	;'.'
 10118  28B2  342E               	retlw	46	;'.'
 10119  28B3  342E               	retlw	46	;'.'
 10120  28B4  3420               	retlw	32	;' '
 10121  28B5  3420               	retlw	32	;' '
 10122  28B6  3420               	retlw	32	;' '
 10123  28B7  3420               	retlw	32	;' '
 10124  28B8  3400               	retlw	0
 10125                           
 10126                           	psect	stringtext7
 10127  28B9                     __pstringtext7:	
 10128  28B9                     STR_16:	
 10129  28B9  3448               	retlw	72	;'H'
 10130  28BA  3454               	retlw	84	;'T'
 10131  28BB  3454               	retlw	84	;'T'
 10132  28BC  3450               	retlw	80	;'P'
 10133  28BD  3420               	retlw	32	;' '
 10134  28BE  3434               	retlw	52	;'4'
 10135  28BF  3431               	retlw	49	;'1'
 10136  28C0  3438               	retlw	56	;'8'
 10137  28C1  3420               	retlw	32	;' '
 10138  28C2  3449               	retlw	73	;'I'
 10139  28C3  3427               	retlw	39	;'''
 10140  28C4  344D               	retlw	77	;'M'
 10141  28C5  3420               	retlw	32	;' '
 10142  28C6  3441               	retlw	65	;'A'
 10143  28C7  3420               	retlw	32	;' '
 10144  28C8  3454               	retlw	84	;'T'
 10145  28C9  3445               	retlw	69	;'E'
 10146  28CA  3441               	retlw	65	;'A'
 10147  28CB  3450               	retlw	80	;'P'
 10148  28CC  344F               	retlw	79	;'O'
 10149  28CD  3454               	retlw	84	;'T'
 10150  28CE  3420               	retlw	32	;' '
 10151  28CF  3420               	retlw	32	;' '
 10152  28D0  3420               	retlw	32	;' '
 10153  28D1  3420               	retlw	32	;' '
 10154  28D2  3400               	retlw	0
 10155                           
 10156                           	psect	stringtext8
 10157  28D3                     __pstringtext8:	
 10158  28D3                     STR_20:	
 10159  28D3  3459               	retlw	89	;'Y'
 10160  28D4  344F               	retlw	79	;'O'
 10161  28D5  3455               	retlw	85	;'U'
 10162  28D6  3420               	retlw	32	;' '
 10163  28D7  344A               	retlw	74	;'J'
 10164  28D8  3455               	retlw	85	;'U'
 10165  28D9  3453               	retlw	83	;'S'
 10166  28DA  3454               	retlw	84	;'T'
 10167  28DB  3420               	retlw	32	;' '
 10168  28DC  3448               	retlw	72	;'H'
 10169  28DD  3441               	retlw	65	;'A'
 10170  28DE  3456               	retlw	86	;'V'
 10171  28DF  3445               	retlw	69	;'E'
 10172  28E0  3420               	retlw	32	;' '
 10173  28E1  3454               	retlw	84	;'T'
 10174  28E2  344F               	retlw	79	;'O'
 10175  28E3  3420               	retlw	32	;' '
 10176  28E4  3442               	retlw	66	;'B'
 10177  28E5  3445               	retlw	69	;'E'
 10178  28E6  344C               	retlw	76	;'L'
 10179  28E7  3449               	retlw	73	;'I'
 10180  28E8  3445               	retlw	69	;'E'
 10181  28E9  3456               	retlw	86	;'V'
 10182  28EA  3445               	retlw	69	;'E'
 10183  28EB  3400               	retlw	0
 10184                           
 10185                           	psect	stringtext9
 10186  3000                     __pstringtext9:	
 10187  3000                     STR_17:	
 10188  3000  3449               	retlw	73	;'I'
 10189  3001  3420               	retlw	32	;' '
 10190  3002  3441               	retlw	65	;'A'
 10191  3003  344D               	retlw	77	;'M'
 10192  3004  3420               	retlw	32	;' '
 10193  3005  344A               	retlw	74	;'J'
 10194  3006  3455               	retlw	85	;'U'
 10195  3007  3453               	retlw	83	;'S'
 10196  3008  3454               	retlw	84	;'T'
 10197  3009  3420               	retlw	32	;' '
 10198  300A  3441               	retlw	65	;'A'
 10199  300B  3420               	retlw	32	;' '
 10200  300C  3442               	retlw	66	;'B'
 10201  300D  3441               	retlw	65	;'A'
 10202  300E  3444               	retlw	68	;'D'
 10203  300F  3447               	retlw	71	;'G'
 10204  3010  3445               	retlw	69	;'E'
 10205  3011  3420               	retlw	32	;' '
 10206  3012  3420               	retlw	32	;' '
 10207  3013  3420               	retlw	32	;' '
 10208  3014  3420               	retlw	32	;' '
 10209  3015  3400               	retlw	0
 10210                           
 10211                           	psect	stringtext10
 10212  3016                     __pstringtext10:	
 10213  3016                     STR_15:	
 10214  3016  3457               	retlw	87	;'W'
 10215  3017  3449               	retlw	73	;'I'
 10216  3018  344C               	retlw	76	;'L'
 10217  3019  344C               	retlw	76	;'L'
 10218  301A  3420               	retlw	32	;' '
 10219  301B  3448               	retlw	72	;'H'
 10220  301C  3441               	retlw	65	;'A'
 10221  301D  3443               	retlw	67	;'C'
 10222  301E  344B               	retlw	75	;'K'
 10223  301F  3420               	retlw	32	;' '
 10224  3020  3446               	retlw	70	;'F'
 10225  3021  344F               	retlw	79	;'O'
 10226  3022  3452               	retlw	82	;'R'
 10227  3023  3420               	retlw	32	;' '
 10228  3024  3441               	retlw	65	;'A'
 10229  3025  342F               	retlw	47	;'/'
 10230  3026  3443               	retlw	67	;'C'
 10231  3027  3420               	retlw	32	;' '
 10232  3028  3420               	retlw	32	;' '
 10233  3029  3420               	retlw	32	;' '
 10234  302A  3400               	retlw	0
 10235                           
 10236                           	psect	stringtext11
 10237  302B                     __pstringtext11:	
 10238  302B                     STR_14:	
 10239  302B  3448               	retlw	72	;'H'
 10240  302C  3441               	retlw	65	;'A'
 10241  302D  3443               	retlw	67	;'C'
 10242  302E  344B               	retlw	75	;'K'
 10243  302F  3420               	retlw	32	;' '
 10244  3030  3454               	retlw	84	;'T'
 10245  3031  3448               	retlw	72	;'H'
 10246  3032  3445               	retlw	69	;'E'
 10247  3033  3420               	retlw	32	;' '
 10248  3034  3450               	retlw	80	;'P'
 10249  3035  344C               	retlw	76	;'L'
 10250  3036  3441               	retlw	65	;'A'
 10251  3037  344E               	retlw	78	;'N'
 10252  3038  3445               	retlw	69	;'E'
 10253  3039  3454               	retlw	84	;'T'
 10254  303A  3420               	retlw	32	;' '
 10255  303B  3420               	retlw	32	;' '
 10256  303C  3420               	retlw	32	;' '
 10257  303D  3400               	retlw	0
 10258                           
 10259                           	psect	stringtext12
 10260  303E                     __pstringtext12:	
 10261  303E                     STR_9:	
 10262  303E  3405               	retlw	5
 10263  303F  3407               	retlw	7
 10264  3040  3407               	retlw	7
 10265  3041  3408               	retlw	8
 10266  3042  342D               	retlw	45	;'-'
 10267  3043  342D               	retlw	45	;'-'
 10268  3044  3420               	retlw	32	;' '
 10269  3045  3420               	retlw	32	;' '
 10270  3046  342D               	retlw	45	;'-'
 10271  3047  342D               	retlw	45	;'-'
 10272  3048  3409               	retlw	9
 10273  3049  3407               	retlw	7
 10274  304A  3407               	retlw	7
 10275  304B  3406               	retlw	6
 10276  304C  3420               	retlw	32	;' '
 10277  304D  340B               	retlw	11
 10278  304E  3420               	retlw	32	;' '
 10279  304F  3400               	retlw	0
 10280                           
 10281                           	psect	stringtext13
 10282  3050                     __pstringtext13:	
 10283  3050                     STR_46:	
 10284  3050  3446               	retlw	70	;'F'
 10285  3051  3449               	retlw	73	;'I'
 10286  3052  3452               	retlw	82	;'R'
 10287  3053  3445               	retlw	69	;'E'
 10288  3054  3420               	retlw	32	;' '
 10289  3055  3442               	retlw	66	;'B'
 10290  3056  3441               	retlw	65	;'A'
 10291  3057  344C               	retlw	76	;'L'
 10292  3058  344C               	retlw	76	;'L'
 10293  3059  3420               	retlw	32	;' '
 10294  305A  3420               	retlw	32	;' '
 10295  305B  3420               	retlw	32	;' '
 10296  305C  3400               	retlw	0
 10297                           
 10298                           	psect	stringtext14
 10299  305D                     __pstringtext14:	
 10300  305D                     STR_26:	
 10301  305D  3455               	retlw	85	;'U'
 10302  305E  344E               	retlw	78	;'N'
 10303  305F  344C               	retlw	76	;'L'
 10304  3060  344F               	retlw	79	;'O'
 10305  3061  3443               	retlw	67	;'C'
 10306  3062  344B               	retlw	75	;'K'
 10307  3063  3449               	retlw	73	;'I'
 10308  3064  344E               	retlw	78	;'N'
 10309  3065  3447               	retlw	71	;'G'
 10310  3066  342E               	retlw	46	;'.'
 10311  3067  342E               	retlw	46	;'.'
 10312  3068  342E               	retlw	46	;'.'
 10313  3069  3400               	retlw	0
 10314                           
 10315                           	psect	stringtext15
 10316  306A                     __pstringtext15:	
 10317  306A                     STR_45:	
 10318  306A  3452               	retlw	82	;'R'
 10319  306B  3445               	retlw	69	;'E'
 10320  306C  3444               	retlw	68	;'D'
 10321  306D  3420               	retlw	32	;' '
 10322  306E  3442               	retlw	66	;'B'
 10323  306F  3455               	retlw	85	;'U'
 10324  3070  344C               	retlw	76	;'L'
 10325  3071  344C               	retlw	76	;'L'
 10326  3072  3420               	retlw	32	;' '
 10327  3073  3420               	retlw	32	;' '
 10328  3074  3420               	retlw	32	;' '
 10329  3075  3400               	retlw	0
 10330                           
 10331                           	psect	stringtext16
 10332  3076                     __pstringtext16:	
 10333  3076                     STR_43:	
 10334  3076  3454               	retlw	84	;'T'
 10335  3077  3445               	retlw	69	;'E'
 10336  3078  3451               	retlw	81	;'Q'
 10337  3079  3455               	retlw	85	;'U'
 10338  307A  3449               	retlw	73	;'I'
 10339  307B  344C               	retlw	76	;'L'
 10340  307C  3441               	retlw	65	;'A'
 10341  307D  3420               	retlw	32	;' '
 10342  307E  3420               	retlw	32	;' '
 10343  307F  3420               	retlw	32	;' '
 10344  3080  3400               	retlw	0
 10345                           
 10346                           	psect	stringtext17
 10347  3081                     __pstringtext17:	
 10348  3081                     STR_42:	
 10349  3081  3457               	retlw	87	;'W'
 10350  3082  3448               	retlw	72	;'H'
 10351  3083  3449               	retlw	73	;'I'
 10352  3084  3453               	retlw	83	;'S'
 10353  3085  344B               	retlw	75	;'K'
 10354  3086  3445               	retlw	69	;'E'
 10355  3087  3459               	retlw	89	;'Y'
 10356  3088  3420               	retlw	32	;' '
 10357  3089  3420               	retlw	32	;' '
 10358  308A  3420               	retlw	32	;' '
 10359  308B  3400               	retlw	0
 10360                           
 10361                           	psect	stringtext18
 10362  308C                     __pstringtext18:	
 10363  308C                     STR_6:	
 10364  308C  3450               	retlw	80	;'P'
 10365  308D  3441               	retlw	65	;'A'
 10366  308E  3453               	retlw	83	;'S'
 10367  308F  3453               	retlw	83	;'S'
 10368  3090  3457               	retlw	87	;'W'
 10369  3091  344F               	retlw	79	;'O'
 10370  3092  3452               	retlw	82	;'R'
 10371  3093  3444               	retlw	68	;'D'
 10372  3094  3420               	retlw	32	;' '
 10373  3095  3400               	retlw	0
 10374                           
 10375                           	psect	stringtext19
 10376  3096                     __pstringtext19:	
 10377  3096                     STR_41:	
 10378  3096  3456               	retlw	86	;'V'
 10379  3097  344F               	retlw	79	;'O'
 10380  3098  3444               	retlw	68	;'D'
 10381  3099  344B               	retlw	75	;'K'
 10382  309A  3441               	retlw	65	;'A'
 10383  309B  3420               	retlw	32	;' '
 10384  309C  3420               	retlw	32	;' '
 10385  309D  3420               	retlw	32	;' '
 10386  309E  3400               	retlw	0
 10387                           
 10388                           	psect	stringtext20
 10389  309F                     __pstringtext20:	
 10390  309F                     STR_47:	
 10391  309F  3457               	retlw	87	;'W'
 10392  30A0  3441               	retlw	65	;'A'
 10393  30A1  3454               	retlw	84	;'T'
 10394  30A2  3445               	retlw	69	;'E'
 10395  30A3  3452               	retlw	82	;'R'
 10396  30A4  3420               	retlw	32	;' '
 10397  30A5  3420               	retlw	32	;' '
 10398  30A6  3420               	retlw	32	;' '
 10399  30A7  3400               	retlw	0
 10400                           
 10401                           	psect	stringtext21
 10402  30A8                     __pstringtext21:	
 10403  30A8                     STR_48:	
 10404  30A8  3425               	retlw	37	;'%'
 10405  30A9  3463               	retlw	99	;'c'
 10406  30AA  3425               	retlw	37	;'%'
 10407  30AB  3463               	retlw	99	;'c'
 10408  30AC  3425               	retlw	37	;'%'
 10409  30AD  3463               	retlw	99	;'c'
 10410  30AE  3425               	retlw	37	;'%'
 10411  30AF  3463               	retlw	99	;'c'
 10412  30B0  3400               	retlw	0
 10413                           
 10414                           	psect	stringtext22
 10415  30B1                     __pstringtext22:	
 10416  30B1                     STR_11:	
 10417  30B1  344E               	retlw	78	;'N'
 10418  30B2  3455               	retlw	85	;'U'
 10419  30B3  344C               	retlw	76	;'L'
 10420  30B4  344C               	retlw	76	;'L'
 10421  30B5  3449               	retlw	73	;'I'
 10422  30B6  3446               	retlw	70	;'F'
 10423  30B7  3459               	retlw	89	;'Y'
 10424  30B8  3420               	retlw	32	;' '
 10425  30B9  3400               	retlw	0
 10426                           
 10427                           	psect	stringtext23
 10428  30BA                     __pstringtext23:	
 10429  30BA                     STR_44:	
 10430  30BA  3443               	retlw	67	;'C'
 10431  30BB  3448               	retlw	72	;'H'
 10432  30BC  3455               	retlw	85	;'U'
 10433  30BD  3447               	retlw	71	;'G'
 10434  30BE  3420               	retlw	32	;' '
 10435  30BF  3420               	retlw	32	;' '
 10436  30C0  3420               	retlw	32	;' '
 10437  30C1  3400               	retlw	0
 10438                           
 10439                           	psect	stringtext24
 10440  30C2                     __pstringtext24:	
 10441  30C2                     STR_40:	
 10442  30C2  3442               	retlw	66	;'B'
 10443  30C3  3445               	retlw	69	;'E'
 10444  30C4  3445               	retlw	69	;'E'
 10445  30C5  3452               	retlw	82	;'R'
 10446  30C6  3420               	retlw	32	;' '
 10447  30C7  3420               	retlw	32	;' '
 10448  30C8  3420               	retlw	32	;' '
 10449  30C9  3400               	retlw	0
 10450                           
 10451                           	psect	stringtext25
 10452  30CA                     __pstringtext25:	
 10453  30CA                     STR_39:	
 10454  30CA  3453               	retlw	83	;'S'
 10455  30CB  3448               	retlw	72	;'H'
 10456  30CC  344F               	retlw	79	;'O'
 10457  30CD  3454               	retlw	84	;'T'
 10458  30CE  3420               	retlw	32	;' '
 10459  30CF  3420               	retlw	32	;' '
 10460  30D0  3420               	retlw	32	;' '
 10461  30D1  3400               	retlw	0
 10462                           
 10463                           	psect	stringtext26
 10464  30D2                     __pstringtext26:	
 10465  30D2                     STR_12:	
 10466  30D2  3444               	retlw	68	;'D'
 10467  30D3  3445               	retlw	69	;'E'
 10468  30D4  3446               	retlw	70	;'F'
 10469  30D5  3443               	retlw	67	;'C'
 10470  30D6  344F               	retlw	79	;'O'
 10471  30D7  344E               	retlw	78	;'N'
 10472  30D8  3420               	retlw	32	;' '
 10473  30D9  3400               	retlw	0
 10474                           
 10475                           	psect	stringtext27
 10476  30DA                     __pstringtext27:	
 10477  30DA                     STR_54:	
 10478  30DA  3428               	retlw	40	;'('
 10479  30DB  346E               	retlw	110	;'n'
 10480  30DC  3475               	retlw	117	;'u'
 10481  30DD  346C               	retlw	108	;'l'
 10482  30DE  346C               	retlw	108	;'l'
 10483  30DF  3429               	retlw	41	;')'
 10484  30E0  3400               	retlw	0
 10485                           
 10486                           	psect	stringtext28
 10487  30E1                     __pstringtext28:	
 10488  30E1                     STR_13:	
 10489  30E1  3448               	retlw	72	;'H'
 10490  30E2  3441               	retlw	65	;'A'
 10491  30E3  3458               	retlw	88	;'X'
 10492  30E4  3420               	retlw	32	;' '
 10493  30E5  3420               	retlw	32	;' '
 10494  30E6  3400               	retlw	0
 10495                           
 10496                           	psect	stringtext29
 10497  30E7                     __pstringtext29:	
 10498  30E7                     STR_7:	
 10499  30E7  3445               	retlw	69	;'E'
 10500  30E8  3458               	retlw	88	;'X'
 10501  30E9  3449               	retlw	73	;'I'
 10502  30EA  3454               	retlw	84	;'T'
 10503  30EB  3420               	retlw	32	;' '
 10504  30EC  3400               	retlw	0
 10505                           
 10506                           	psect	stringtext30
 10507  30ED                     __pstringtext30:	
 10508  30ED                     STR_5:	
 10509  30ED  3453               	retlw	83	;'S'
 10510  30EE  344C               	retlw	76	;'L'
 10511  30EF  344F               	retlw	79	;'O'
 10512  30F0  3454               	retlw	84	;'T'
 10513  30F1  3420               	retlw	32	;' '
 10514  30F2  3400               	retlw	0
 10515                           
 10516                           	psect	stringtext31
 10517  30F3                     __pstringtext31:	
 10518  30F3                     STR_32:	
 10519  30F3  3456               	retlw	86	;'V'
 10520  30F4  3444               	retlw	68	;'D'
 10521  30F5  344B               	retlw	75	;'K'
 10522  30F6  3441               	retlw	65	;'A'
 10523  30F7  3400               	retlw	0
 10524                           
 10525                           	psect	stringtext32
 10526  30F8                     __pstringtext32:	
 10527  30F8                     STR_34:	
 10528  30F8  3454               	retlw	84	;'T'
 10529  30F9  3451               	retlw	81	;'Q'
 10530  30FA  344C               	retlw	76	;'L'
 10531  30FB  3441               	retlw	65	;'A'
 10532  30FC  3400               	retlw	0
 10533                           
 10534                           	psect	stringtext33
 10535  30FD                     __pstringtext33:	
 10536  30FD                     STR_37:	
 10537  30FD  3446               	retlw	70	;'F'
 10538  30FE  3449               	retlw	73	;'I'
 10539  30FF  3452               	retlw	82	;'R'
 10540  3100  3445               	retlw	69	;'E'
 10541  3101  3400               	retlw	0
 10542                           
 10543                           	psect	stringtext34
 10544  3102                     __pstringtext34:	
 10545  3102                     STR_35:	
 10546  3102  3443               	retlw	67	;'C'
 10547  3103  3448               	retlw	72	;'H'
 10548  3104  3455               	retlw	85	;'U'
 10549  3105  3447               	retlw	71	;'G'
 10550  3106  3400               	retlw	0
 10551                           
 10552                           	psect	stringtext35
 10553  3107                     __pstringtext35:	
 10554  3107                     STR_36:	
 10555  3107  3452               	retlw	82	;'R'
 10556  3108  3445               	retlw	69	;'E'
 10557  3109  3442               	retlw	66	;'B'
 10558  310A  344C               	retlw	76	;'L'
 10559  310B  3400               	retlw	0
 10560                           
 10561                           	psect	stringtext36
 10562  310C                     __pstringtext36:	
 10563  310C                     STR_31:	
 10564  310C  3442               	retlw	66	;'B'
 10565  310D  3445               	retlw	69	;'E'
 10566  310E  3445               	retlw	69	;'E'
 10567  310F  3452               	retlw	82	;'R'
 10568  3110  3400               	retlw	0
 10569                           
 10570                           	psect	stringtext37
 10571  3111                     __pstringtext37:	
 10572  3111                     STR_38:	
 10573  3111  3457               	retlw	87	;'W'
 10574  3112  3441               	retlw	65	;'A'
 10575  3113  3454               	retlw	84	;'T'
 10576  3114  3452               	retlw	82	;'R'
 10577  3115  3400               	retlw	0
 10578                           
 10579                           	psect	stringtext38
 10580  3116                     __pstringtext38:	
 10581  3116                     STR_30:	
 10582  3116  3453               	retlw	83	;'S'
 10583  3117  3448               	retlw	72	;'H'
 10584  3118  344F               	retlw	79	;'O'
 10585  3119  3454               	retlw	84	;'T'
 10586  311A  3400               	retlw	0
 10587                           
 10588                           	psect	stringtext39
 10589  311B                     __pstringtext39:	
 10590  311B                     STR_33:	
 10591  311B  3457               	retlw	87	;'W'
 10592  311C  3453               	retlw	83	;'S'
 10593  311D  344B               	retlw	75	;'K'
 10594  311E  3459               	retlw	89	;'Y'
 10595  311F  3400               	retlw	0
 10596                           
 10597                           	psect	stringtext40
 10598  3120                     __pstringtext40:	
 10599  3120                     STR_29:	
 10600  3120  344C               	retlw	76	;'L'
 10601  3121  344F               	retlw	79	;'O'
 10602  3122  3443               	retlw	67	;'C'
 10603  3123  344B               	retlw	75	;'K'
 10604  3124  3400               	retlw	0
 10605                           
 10606                           	psect	stringtext41
 10607  3125                     __pstringtext41:	
 10608  3125                     STR_28:	
 10609  3125  344F               	retlw	79	;'O'
 10610  3126  3450               	retlw	80	;'P'
 10611  3127  3445               	retlw	69	;'E'
 10612  3128  344E               	retlw	78	;'N'
 10613  3129  3400               	retlw	0
 10614                           
 10615                           	psect	stringtext42
 10616  312A                     __pstringtext42:	
 10617  312A                     STR_24:	
 10618  312A  3450               	retlw	80	;'P'
 10619  312B  3445               	retlw	69	;'E'
 10620  312C  3457               	retlw	87	;'W'
 10621  312D  3420               	retlw	32	;' '
 10622  312E  3400               	retlw	0
 10623                           
 10624                           	psect	stringtext43
 10625  312F                     __pstringtext43:	
 10626  312F                     STR_8:	
 10627  312F  344E               	retlw	78	;'N'
 10628  3130  3455               	retlw	85	;'U'
 10629  3131  344C               	retlw	76	;'L'
 10630  3132  344C               	retlw	76	;'L'
 10631  3133  3400               	retlw	0
 10632                           
 10633                           	psect	stringtext44
 10634  3134                     __pstringtext44:	
 10635  3134                     STR_4:	
 10636  3134  344D               	retlw	77	;'M'
 10637  3135  3445               	retlw	69	;'E'
 10638  3136  344E               	retlw	78	;'N'
 10639  3137  3455               	retlw	85	;'U'
 10640  3138  3400               	retlw	0
 10641                           
 10642                           	psect	stringtext45
 10643  3139                     __pstringtext45:	
 10644  3139                     STR_2:	
 10645  3139  3444               	retlw	68	;'D'
 10646  313A  344F               	retlw	79	;'O'
 10647  313B  3457               	retlw	87	;'W'
 10648  313C  344E               	retlw	78	;'N'
 10649  313D  3400               	retlw	0
 10650                           
 10651                           	psect	stringtext46
 10652  313E                     __pstringtext46:	
 10653  313E                     STR_1:	
 10654  313E  3420               	retlw	32	;' '
 10655  313F  3420               	retlw	32	;' '
 10656  3140  3455               	retlw	85	;'U'
 10657  3141  3450               	retlw	80	;'P'
 10658  3142  3400               	retlw	0
 10659                           
 10660                           	psect	stringtext47
 10661  3143                     __pstringtext47:	
 10662  3143                     STR_25:	
 10663  3143  3425               	retlw	37	;'%'
 10664  3144  3434               	retlw	52	;'4'
 10665  3145  3464               	retlw	100	;'d'
 10666  3146  3400               	retlw	0
 10667                           
 10668                           	psect	stringtext48
 10669  3147                     __pstringtext48:	
 10670  3147                     STR_53:	
 10671  3147  3425               	retlw	37	;'%'
 10672  3148  3473               	retlw	115	;'s'
 10673  3149  3400               	retlw	0
 10674                           
 10675                           	psect	stringtext49
 10676  0000                     __pstringtext49:	
 10677  2858                     
 10678                           ; #config settings
 10679  0000                     
 10680                           	psect	cinit
 10681  0018                     start_initialization:	
 10682  0018                     __initialization:		;BIGRAM
 10683                           
 10684                           ; Initialize objects allocated to BIGRAM
 10685  0018  3049               	movlw	low __pidataBIGRAM
 10686  0019  0084               	movwf	4
 10687  001A  3086               	movlw	(high __pidataBIGRAM)| (0+128)
 10688  001B  0085               	movwf	5
 10689  001C  30F0               	movlw	low (0+9968)
 10690  001D  0086               	movwf	6
 10691  001E  3026               	movlw	high (0+9968)
 10692  001F  0087               	movwf	7
 10693  0020  3001               	movlw	1
 10694  0021  00FF               	movwf	btemp+1
 10695  0022  3000               	movlw	0
 10696  0023  3198  2000  3180   	fcall	init_ram
 10697                           
 10698                           ; Initialize objects allocated to BANK1
 10699  0026  307C               	movlw	low __pidataBANK1
 10700  0027  0084               	movwf	4
 10701  0028  30A0               	movlw	(high __pidataBANK1)| (0+128)
 10702  0029  0085               	movwf	5
 10703  002A  30C7               	movlw	low __pdataBANK1
 10704  002B  0086               	movwf	6
 10705  002C  3000               	movlw	high __pdataBANK1
 10706  002D  0087               	movwf	7
 10707  002E  3000               	movlw	0
 10708  002F  00FF               	movwf	btemp+1
 10709  0030  301C               	movlw	28
 10710  0031  3198  2000  3180   	fcall	init_ram
 10711                           
 10712                           ; Initialize objects allocated to BANK2
 10713  0034  0022               	movlb	2	; select bank2
 10714  0035  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
 10715  0038  00E1               	movwf	__pdataBANK2& (0+127)
 10716  0039  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
 10717  003C  00E2               	movwf	(__pdataBANK2+1)& (0+127)
 10718                           
 10719                           ; Initialize objects allocated to BANK3
 10720  003D  30A2               	movlw	low __pidataBANK3
 10721  003E  0084               	movwf	4
 10722  003F  30A1               	movlw	(high __pidataBANK3)| (0+128)
 10723  0040  0085               	movwf	5
 10724  0041  30A0               	movlw	low __pdataBANK3
 10725  0042  0086               	movwf	6
 10726  0043  3001               	movlw	high __pdataBANK3
 10727  0044  0087               	movwf	7
 10728  0045  3000               	movlw	0
 10729  0046  00FF               	movwf	btemp+1
 10730  0047  3028               	movlw	40
 10731  0048  3198  2000  3180   	fcall	init_ram
 10732                           
 10733                           ; Initialize objects allocated to BANK4
 10734  004B  3000               	movlw	low __pidataBANK4
 10735  004C  0084               	movwf	4
 10736  004D  3088               	movlw	(high __pidataBANK4)| (0+128)
 10737  004E  0085               	movwf	5
 10738  004F  304A               	movlw	low __pdataBANK4
 10739  0050  0086               	movwf	6
 10740  0051  3002               	movlw	high __pdataBANK4
 10741  0052  0087               	movwf	7
 10742  0053  3000               	movlw	0
 10743  0054  00FF               	movwf	btemp+1
 10744  0055  3019               	movlw	25
 10745  0056  3198  2000  3180   	fcall	init_ram
 10746                           
 10747                           ; Initialize objects allocated to BANK5
 10748  0059  3019               	movlw	low __pidataBANK5
 10749  005A  0084               	movwf	4
 10750  005B  30A6               	movlw	(high __pidataBANK5)| (0+128)
 10751  005C  0085               	movwf	5
 10752  005D  30A0               	movlw	low __pdataBANK5
 10753  005E  0086               	movwf	6
 10754  005F  3002               	movlw	high __pdataBANK5
 10755  0060  0087               	movwf	7
 10756  0061  3000               	movlw	0
 10757  0062  00FF               	movwf	btemp+1
 10758  0063  3049               	movlw	73
 10759  0064  3198  2000  3180   	fcall	init_ram
 10760                           
 10761                           ; Initialize objects allocated to BANK6
 10762  0067  3051               	movlw	low __pidataBANK6
 10763  0068  0084               	movwf	4
 10764  0069  30A3               	movlw	(high __pidataBANK6)| (0+128)
 10765  006A  0085               	movwf	5
 10766  006B  3020               	movlw	low __pdataBANK6
 10767  006C  0086               	movwf	6
 10768  006D  3003               	movlw	high __pdataBANK6
 10769  006E  0087               	movwf	7
 10770  006F  3000               	movlw	0
 10771  0070  00FF               	movwf	btemp+1
 10772  0071  3038               	movlw	56
 10773  0072  3198  2000  3180   	fcall	init_ram
 10774                           
 10775                           ; Initialize objects allocated to BANK7
 10776  0075  3019               	movlw	low __pidataBANK7
 10777  0076  0084               	movwf	4
 10778  0077  30A3               	movlw	(high __pidataBANK7)| (0+128)
 10779  0078  0085               	movwf	5
 10780  0079  30A0               	movlw	low __pdataBANK7
 10781  007A  0086               	movwf	6
 10782  007B  3003               	movlw	high __pdataBANK7
 10783  007C  0087               	movwf	7
 10784  007D  3000               	movlw	0
 10785  007E  00FF               	movwf	btemp+1
 10786  007F  3038               	movlw	56
 10787  0080  3198  2000  3180   	fcall	init_ram
 10788                           
 10789                           ; Initialize objects allocated to BANK8
 10790  0083  3060               	movlw	low __pidataBANK8
 10791  0084  0084               	movwf	4
 10792  0085  30A0               	movlw	(high __pidataBANK8)| (0+128)
 10793  0086  0085               	movwf	5
 10794  0087  303E               	movlw	low __pdataBANK8
 10795  0088  0086               	movwf	6
 10796  0089  3004               	movlw	high __pdataBANK8
 10797  008A  0087               	movwf	7
 10798  008B  3000               	movlw	0
 10799  008C  00FF               	movwf	btemp+1
 10800  008D  301C               	movlw	28
 10801  008E  3198  2000  3180   	fcall	init_ram
 10802                           
 10803                           ; Clear objects allocated to COMMON
 10804  0091  01FC               	clrf	__pbssCOMMON& (0+127)
 10805                           
 10806                           ; Clear objects allocated to BANK1
 10807  0092  30A0               	movlw	low __pbssBANK1
 10808  0093  0084               	movwf	4
 10809  0094  3000               	movlw	high __pbssBANK1
 10810  0095  0085               	movwf	5
 10811  0096  3027               	movlw	39
 10812  0097  00FE               	movwf	btemp
 10813  0098  3000               	movlw	0
 10814  0099  00FF               	movwf	btemp+1
 10815  009A  31AE  26A4  3180   	fcall	clear_ram0
 10816                           
 10817                           ; Clear objects allocated to BANK2
 10818  009D  3020               	movlw	low __pbssBANK2
 10819  009E  0084               	movwf	4
 10820  009F  3001               	movlw	high __pbssBANK2
 10821  00A0  0085               	movwf	5
 10822  00A1  3041               	movlw	65
 10823  00A2  00FE               	movwf	btemp
 10824  00A3  3000               	movlw	0
 10825  00A4  00FF               	movwf	btemp+1
 10826  00A5  31AE  26A4  3180   	fcall	clear_ram0
 10827                           
 10828                           ; Clear objects allocated to BANK3
 10829  00A8  30C8               	movlw	low __pbssBANK3
 10830  00A9  0084               	movwf	4
 10831  00AA  3001               	movlw	high __pbssBANK3
 10832  00AB  0085               	movwf	5
 10833  00AC  3024               	movlw	36
 10834  00AD  00FE               	movwf	btemp
 10835  00AE  3000               	movlw	0
 10836  00AF  00FF               	movwf	btemp+1
 10837  00B0  31AE  26A4  3180   	fcall	clear_ram0
 10838                           
 10839                           ; Clear objects allocated to BANK4
 10840  00B3  3020               	movlw	low __pbssBANK4
 10841  00B4  0084               	movwf	4
 10842  00B5  3002               	movlw	high __pbssBANK4
 10843  00B6  0085               	movwf	5
 10844  00B7  302A               	movlw	42
 10845  00B8  00FE               	movwf	btemp
 10846  00B9  3000               	movlw	0
 10847  00BA  00FF               	movwf	btemp+1
 10848  00BB  31AE  26A4  3180   	fcall	clear_ram0
 10849                           
 10850                           ; Clear objects allocated to BANK8
 10851  00BE  3020               	movlw	low __pbssBANK8
 10852  00BF  0084               	movwf	4
 10853  00C0  3004               	movlw	high __pbssBANK8
 10854  00C1  0085               	movwf	5
 10855  00C2  301E               	movlw	30
 10856  00C3  00FE               	movwf	btemp
 10857  00C4  3000               	movlw	0
 10858  00C5  00FF               	movwf	btemp+1
 10859  00C6  31AE  26A4  3180   	fcall	clear_ram0
 10860                           
 10861                           ; Clear objects allocated to BANK9
 10862  00C9  30A0               	movlw	low __pbssBANK9
 10863  00CA  0084               	movwf	4
 10864  00CB  3004               	movlw	high __pbssBANK9
 10865  00CC  0085               	movwf	5
 10866  00CD  3028               	movlw	40
 10867  00CE  00FE               	movwf	btemp
 10868  00CF  3000               	movlw	0
 10869  00D0  00FF               	movwf	btemp+1
 10870  00D1  31AE  26A4         	fcall	clear_ram0
 10871  00D3                     end_of_initialization:	
 10872                           ;End of C runtime variable initialization code
 10873                           
 10874  00D3                     __end_of__initialization:	
 10875  00D3  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 10876  00D4  0020               	movlb	0
 10877  00D5  319D  2D68         	ljmp	_main	;jump to C main() function
 10878                           
 10879                           	psect	bssCOMMON
 10880  007C                     __pbssCOMMON:	
 10881  007C                     _Shot_Index:	
 10882  007C                     	ds	1
 10883                           
 10884                           	psect	bssBANK1
 10885  00A0                     __pbssBANK1:	
 10886  00A0                     _locked_leds:	
 10887  00A0                     	ds	2
 10888  00A2                     _locked_locking_leds_idx:	
 10889  00A2                     	ds	2
 10890  00A4                     _flashy_option_size:	
 10891  00A4                     	ds	2
 10892  00A6                     _flashy_option_idx:	
 10893  00A6                     	ds	2
 10894  00A8                     _deaths:	
 10895  00A8                     	ds	2
 10896  00AA                     _flashy_scroll_rate:	
 10897  00AA                     	ds	2
 10898  00AC                     _flashy_sparkle_rate:	
 10899  00AC                     	ds	2
 10900  00AE                     _flashy_leds_state_track:	
 10901  00AE                     	ds	2
 10902  00B0                     _flashy_leds_idx:	
 10903  00B0                     	ds	2
 10904  00B2                     _menu_option_size:	
 10905  00B2                     	ds	2
 10906  00B4                     _menu_option_idx:	
 10907  00B4                     	ds	2
 10908  00B6                     _oddeven:	
 10909  00B6                     	ds	2
 10910  00B8                     _currentTask:	
 10911  00B8                     	ds	2
 10912  00BA                     _slot_taskData:	
 10913  00BA                     	ds	2
 10914  00BC                     _TMR0_InterruptHandler:	
 10915  00BC                     	ds	2
 10916  00BE                     _timer0ReloadVal16bit:	
 10917  00BE                     	ds	2
 10918  00C0                     _TMR4_InterruptHandler:	
 10919  00C0                     	ds	2
 10920  00C2                     _TMR2_InterruptHandler:	
 10921  00C2                     	ds	2
 10922  00C4                     _badge_locked:	
 10923  00C4                     	ds	1
 10924  00C5                     _secret_value:	
 10925  00C5                     	ds	2
 10926                           
 10927                           	psect	dataBANK1
 10928  00C7                     __pdataBANK1:	
 10929  00C7                     _Shot_Options:	
 10930  00C7                     	ds	18
 10931  00D9                     _randx:	
 10932  00D9                     	ds	4
 10933  00DD                     _Leds_idx:	
 10934  00DD                     	ds	2
 10935  00DF                     _locked_lock_base_leds:	
 10936  00DF                     	ds	2
 10937  00E1                     _FLASHY_TEXT_SECRET_TEST:	
 10938  00E1                     	ds	2
 10939                           
 10940                           	psect	bssBANK2
 10941  0120                     __pbssBANK2:	
 10942  0120                     _secret_task:	
 10943  0120                     	ds	13
 10944  012D                     _locked_task:	
 10945  012D                     	ds	13
 10946  013A                     _slot_task:	
 10947  013A                     	ds	13
 10948  0147                     _menu_task:	
 10949  0147                     	ds	13
 10950  0154                     _flashy_task:	
 10951  0154                     	ds	13
 10952                           
 10953                           	psect	dataBANK2
 10954  0161                     __pdataBANK2:	
 10955  0161                     _FLASHY_TEXT:	
 10956  0161                     	ds	2
 10957                           
 10958                           	psect	bssBANK3
 10959  01C8                     __pbssBANK3:	
 10960  01C8                     _schedulerInst:	
 10961  01C8                     	ds	18
 10962  01DA                     _badge_inst:	
 10963  01DA                     	ds	18
 10964                           
 10965                           	psect	dataBANK3
 10966  01A0                     __pdataBANK3:	
 10967  01A0                     _locked_locking_leds:	
 10968  01A0                     	ds	12
 10969  01AC                     _menu_options_leds:	
 10970  01AC                     	ds	10
 10971  01B6                     _menu_option:	
 10972  01B6                     	ds	8
 10973  01BE                     marquee@F14054:	
 10974  01BE                     	ds	5
 10975  01C3                     marquee_speedy@F14045:	
 10976  01C3                     	ds	5
 10977                           
 10978                           	psect	bssBANK4
 10979  0220                     __pbssBANK4:	
 10980  0220                     _secret_TaskData:	
 10981  0220                     	ds	14
 10982  022E                     _locked_TaskData:	
 10983  022E                     	ds	14
 10984  023C                     _menu_TaskData:	
 10985  023C                     	ds	14
 10986                           
 10987                           	psect	dataBANK4
 10988  024A                     __pdataBANK4:	
 10989  024A                     _secret_inputs:	
 10990  024A                     	ds	25
 10991                           
 10992                           	psect	dataBANK5
 10993  02A0                     __pdataBANK5:	
 10994  02A0                     _Shot_Options_Long:	
 10995  02A0                     	ds	18
 10996  02B2                     _Slot_Wheel:	
 10997  02B2                     	ds	55
 10998                           
 10999                           	psect	dataBANK6
 11000  0320                     __pdataBANK6:	
 11001  0320                     _flashy_option:	
 11002  0320                     	ds	28
 11003  033C                     _roundabout_leds:	
 11004  033C                     	ds	28
 11005                           
 11006                           	psect	dataBANK7
 11007  03A0                     __pdataBANK7:	
 11008  03A0                     _curtain_leds:	
 11009  03A0                     	ds	28
 11010  03BC                     _roundabout_leds_inverse:	
 11011  03BC                     	ds	28
 11012                           
 11013                           	psect	bssBANK8
 11014  0420                     __pbssBANK8:	
 11015  0420                     _flashy_TaskData:	
 11016  0420                     	ds	30
 11017                           
 11018                           	psect	dataBANK8
 11019  043E                     __pdataBANK8:	
 11020  043E                     _curtain_leds_inverse:	
 11021  043E                     	ds	28
 11022                           
 11023                           	psect	bssBANK9
 11024  04A0                     __pbssBANK9:	
 11025  04A0                     _slot_TaskData:	
 11026  04A0                     	ds	40
 11027                           
 11028                           	psect	inittext
 11029  1800                     init_ram:	
 11030  1800  00FE               	movwf	126
 11031  1801                     initloop:	
 11032  1801  0012               	moviw fsr0++
 11033  1802  001E               	movwi fsr1++
 11034  1803  3001               	movlw	1
 11035  1804  02FE               	subwf	126,f
 11036  1805  3000               	movlw	0
 11037  1806  3BFF               	subwfb	127,f
 11038  1807  087F               	movf	127,w
 11039  1808  047E               	iorwf	126,w
 11040  1809  1903               	btfsc	3,2
 11041  180A  3400               	retlw	0
 11042  180B  2801               	goto	initloop
 11043                           
 11044                           	psect	clrtext
 11045  2EA4                     clear_ram0:	
 11046                           ;	Called with FSR0 containing the base address, and
 11047                           ;	btemp/btemp+1 has the size to clear
 11048                           
 11049  2EA4  0064               	clrwdt	;clear the watchdog before getting into this loop
 11050  2EA5                     clrloop0:	
 11051  2EA5  0180               	clrf	0	;clear RAM location pointed to by FSR
 11052  2EA6  3101               	addfsr 0,1
 11053  2EA7  3001               	movlw	1
 11054  2EA8  02FE               	subwf	126,f
 11055  2EA9  3000               	movlw	0
 11056  2EAA  3BFF               	subwfb	127,f
 11057  2EAB  087F               	movf	127,w
 11058  2EAC  047E               	iorwf	126,w
 11059  2EAD  1903               	btfsc	3,2
 11060  2EAE  3400               	retlw	0	;all done for this memory range, return
 11061  2EAF  2EA5               	goto	clrloop0	;have we reached the end yet?
 11062                           
 11063                           	psect	cstackBANK1
 11064  00E3                     __pcstackBANK1:	
 11065  00E3                     schedulerExecute@currentSystemTick:	
 11066                           
 11067                           ; 2 bytes @ 0x0
 11068  00E3                     	ds	2
 11069  00E5                     schedulerExecute@taskLastSystemTick:	
 11070                           
 11071                           ; 2 bytes @ 0x2
 11072  00E5                     	ds	2
 11073  00E7                     schedulerExecute@tickDelta:	
 11074                           
 11075                           ; 2 bytes @ 0x4
 11076  00E7                     	ds	2
 11077  00E9                     schedulerExecute@scheduler:	
 11078                           
 11079                           ; 1 bytes @ 0x6
 11080  00E9                     	ds	1
 11081  00EA                     schedulerExecute@k:	
 11082                           
 11083                           ; 1 bytes @ 0x7
 11084  00EA                     	ds	1
 11085                           
 11086                           	psect	cstackCOMMON
 11087  0070                     __pcstackCOMMON:	
 11088  0070                     ?_isdigit:	
 11089  0070                     ?_TMR2_StartTimer:	
 11090                           ; 1 bit 
 11091                           
 11092  0070                     ?_TMR4_StartTimer:	
 11093                           ; 1 bytes @ 0x0
 11094                           
 11095  0070                     ?_PIN_MANAGER_Initialize:	
 11096                           ; 1 bytes @ 0x0
 11097                           
 11098  0070                     ?_OSCILLATOR_Initialize:	
 11099                           ; 1 bytes @ 0x0
 11100                           
 11101  0070                     ?_WDT_Initialize:	
 11102                           ; 1 bytes @ 0x0
 11103                           
 11104  0070                     ?_PWM2_Initialize:	
 11105                           ; 1 bytes @ 0x0
 11106                           
 11107  0070                     ?_TMR0_Initialize:	
 11108                           ; 1 bytes @ 0x0
 11109                           
 11110  0070                     ?_TMR0_DefaultInterruptHandler:	
 11111                           ; 1 bytes @ 0x0
 11112                           
 11113  0070                     ??_TMR0_DefaultInterruptHandler:	
 11114                           ; 1 bytes @ 0x0
 11115                           
 11116  0070                     ?_TMR0_StartTimer:	
 11117                           ; 1 bytes @ 0x0
 11118                           
 11119  0070                     ?_TMR0_CallBack:	
 11120                           ; 1 bytes @ 0x0
 11121                           
 11122  0070                     ??_TMR0_CallBack:	
 11123                           ; 1 bytes @ 0x0
 11124                           
 11125  0070                     ?_nullifyBadge_segDisplayRegister:	
 11126                           ; 1 bytes @ 0x0
 11127                           
 11128  0070                     ?_nullifyBadge_segDisplayErase:	
 11129                           ; 1 bytes @ 0x0
 11130                           
 11131  0070                     ?_nullifyBadge_segDisplayForceUpdate:	
 11132                           ; 1 bytes @ 0x0
 11133                           
 11134  0070                     ?_nullifyBadge_platformInit:	
 11135                           ; 1 bytes @ 0x0
 11136                           
 11137  0070                     ?_displayL2_Initialize:	
 11138                           ; 1 bytes @ 0x0
 11139                           
 11140  0070                     ?_displayL2_ForceUpdate:	
 11141                           ; 1 bytes @ 0x0
 11142                           
 11143  0070                     ?_displayL2_EraseSegDisplay:	
 11144                           ; 1 bytes @ 0x0
 11145                           
 11146  0070                     ?_displayL2_ClrUserLeds:	
 11147                           ; 1 bytes @ 0x0
 11148                           
 11149  0070                     ?_displayL1_Update:	
 11150                           ; 1 bytes @ 0x0
 11151                           
 11152  0070                     ?_SPI1_Initialize:	
 11153                           ; 1 bytes @ 0x0
 11154                           
 11155  0070                     ?_SPI1_Exchange8bit:	
 11156                           ; 1 bytes @ 0x0
 11157                           
 11158  0070                     ?_PWM5_Initialize:	
 11159                           ; 1 bytes @ 0x0
 11160                           
 11161  0070                     ?_PWM6_Initialize:	
 11162                           ; 1 bytes @ 0x0
 11163                           
 11164  0070                     ?_PWM1_Initialize:	
 11165                           ; 1 bytes @ 0x0
 11166                           
 11167  0070                     ?_TMR2_Initialize:	
 11168                           ; 1 bytes @ 0x0
 11169                           
 11170  0070                     ?_TMR4_Initialize:	
 11171                           ; 1 bytes @ 0x0
 11172                           
 11173  0070                     ?_SYSTEM_Initialize:	
 11174                           ; 1 bytes @ 0x0
 11175                           
 11176  0070                     ?_TMR0_ISR:	
 11177                           ; 1 bytes @ 0x0
 11178                           
 11179  0070                     ??_TMR0_ISR:	
 11180                           ; 1 bytes @ 0x0
 11181                           
 11182  0070                     ?_INTERRUPT_InterruptManager:	
 11183                           ; 1 bytes @ 0x0
 11184                           
 11185  0070                     ??_INTERRUPT_InterruptManager:	
 11186                           ; 1 bytes @ 0x0
 11187                           
 11188  0070                     ?_scheduler_TaskRun:	
 11189                           ; 1 bytes @ 0x0
 11190                           
 11191  0070                     ?_scheduler_Init:	
 11192                           ; 1 bytes @ 0x0
 11193                           
 11194  0070                     ?_scheduler_TaskInit:	
 11195                           ; 1 bytes @ 0x0
 11196                           
 11197  0070                     ?_schedulerExecute:	
 11198                           ; 1 bytes @ 0x0
 11199                           
 11200  0070                     ?_led_rand:	
 11201                           ; 1 bytes @ 0x0
 11202                           
 11203  0070                     ?_main:	
 11204                           ; 1 bytes @ 0x0
 11205                           
 11206  0070                     ?_nullifyBadge_userLedsRegister:	
 11207                           ; 1 bytes @ 0x0
 11208                           
 11209  0070                     ?_nullifyBadge_userLedsClr:	
 11210                           ; 1 bytes @ 0x0
 11211                           
 11212  0070                     ?_nullifyBadge_buttonsGet:	
 11213                           ; 1 bytes @ 0x0
 11214                           
 11215  0070                     ?_nullifyBadge_irGet:	
 11216                           ; 1 bytes @ 0x0
 11217                           
 11218  0070                     ?_nullifyBadge_irTxRegister:	
 11219                           ; 1 bytes @ 0x0
 11220                           
 11221  0070                     ?_nullifyBadge_irTxRelease:	
 11222                           ; 1 bytes @ 0x0
 11223                           
 11224  0070                     ?_nullifyBadge_irTxSet:	
 11225                           ; 1 bytes @ 0x0
 11226                           
 11227  0070                     ?_nullifyBadge_irTxClr:	
 11228                           ; 1 bytes @ 0x0
 11229                           
 11230  0070                     ?_displayL1_Initialize:	
 11231                           ; 1 bytes @ 0x0
 11232                           
 11233  0070                     ?_locked_lock_leds:	
 11234                           ; 1 bytes @ 0x0
 11235                           
 11236  0070                     ?_locked_unlock_leds:	
 11237                           ; 2 bytes @ 0x0
 11238                           
 11239                           
 11240                           ; 2 bytes @ 0x0
 11241  0070                     	ds	1
 11242  0071                     ??_TMR2_StartTimer:	
 11243  0071                     ??_TMR4_StartTimer:	
 11244                           ; 1 bytes @ 0x1
 11245                           
 11246  0071                     ??_PIN_MANAGER_Initialize:	
 11247                           ; 1 bytes @ 0x1
 11248                           
 11249  0071                     ??_OSCILLATOR_Initialize:	
 11250                           ; 1 bytes @ 0x1
 11251                           
 11252  0071                     ??_WDT_Initialize:	
 11253                           ; 1 bytes @ 0x1
 11254                           
 11255  0071                     ??_PWM2_Initialize:	
 11256                           ; 1 bytes @ 0x1
 11257                           
 11258  0071                     ?_TMR0_SetInterruptHandler:	
 11259                           ; 1 bytes @ 0x1
 11260                           
 11261  0071                     ??_TMR0_StartTimer:	
 11262                           ; 1 bytes @ 0x1
 11263                           
 11264  0071                     ??_nullifyBadge_segDisplayRegister:	
 11265                           ; 1 bytes @ 0x1
 11266                           
 11267  0071                     ?_secret_clear:	
 11268                           ; 1 bytes @ 0x1
 11269                           
 11270  0071                     ??_isdigit:	
 11271                           ; 1 bytes @ 0x1
 11272                           
 11273  0071                     ??_SPI1_Initialize:	
 11274                           ; 1 bytes @ 0x1
 11275                           
 11276  0071                     ??_SPI1_Exchange8bit:	
 11277                           ; 1 bytes @ 0x1
 11278                           
 11279  0071                     ??_PWM5_Initialize:	
 11280                           ; 1 bytes @ 0x1
 11281                           
 11282  0071                     ?_PWM5_LoadDutyValue:	
 11283                           ; 1 bytes @ 0x1
 11284                           
 11285  0071                     ??_PWM6_Initialize:	
 11286                           ; 1 bytes @ 0x1
 11287                           
 11288  0071                     ?_PWM6_LoadDutyValue:	
 11289                           ; 1 bytes @ 0x1
 11290                           
 11291  0071                     ??_PWM1_Initialize:	
 11292                           ; 1 bytes @ 0x1
 11293                           
 11294  0071                     ?_PWM1_LoadDutyValue:	
 11295                           ; 1 bytes @ 0x1
 11296                           
 11297  0071                     ??_TMR2_Initialize:	
 11298                           ; 1 bytes @ 0x1
 11299                           
 11300  0071                     ??_TMR4_Initialize:	
 11301                           ; 1 bytes @ 0x1
 11302                           
 11303  0071                     ?_PWM2_LoadDutyValue:	
 11304                           ; 1 bytes @ 0x1
 11305                           
 11306  0071                     ??_scheduler_Init:	
 11307                           ; 1 bytes @ 0x1
 11308                           
 11309  0071                     ??_scheduler_TaskInit:	
 11310                           ; 1 bytes @ 0x1
 11311                           
 11312  0071                     ??_nullifyBadge_userLedsRegister:	
 11313                           ; 1 bytes @ 0x1
 11314                           
 11315  0071                     ??_nullifyBadge_buttonsGet:	
 11316                           ; 1 bytes @ 0x1
 11317                           
 11318  0071                     ??_nullifyBadge_irGet:	
 11319                           ; 1 bytes @ 0x1
 11320                           
 11321  0071                     ??_nullifyBadge_irTxRegister:	
 11322                           ; 1 bytes @ 0x1
 11323                           
 11324  0071                     ??_nullifyBadge_irTxRelease:	
 11325                           ; 1 bytes @ 0x1
 11326                           
 11327  0071                     ??_nullifyBadge_irTxSet:	
 11328                           ; 1 bytes @ 0x1
 11329                           
 11330  0071                     ??_nullifyBadge_irTxClr:	
 11331                           ; 1 bytes @ 0x1
 11332                           
 11333  0071                     ?_displayL1_SetUserLed:	
 11334                           ; 1 bytes @ 0x1
 11335                           
 11336  0071                     ??_locked_lock_leds:	
 11337                           ; 1 bytes @ 0x1
 11338                           
 11339  0071                     ??_locked_unlock_leds:	
 11340                           ; 1 bytes @ 0x1
 11341                           
 11342  0071                     ?___bmul:	
 11343                           ; 1 bytes @ 0x1
 11344                           
 11345  0071                     ?_strlen:	
 11346                           ; 1 bytes @ 0x1
 11347                           
 11348  0071                     ?_memset:	
 11349                           ; 2 bytes @ 0x1
 11350                           
 11351  0071                     ?_displayCharReverse:	
 11352                           ; 2 bytes @ 0x1
 11353                           
 11354  0071                     ?_TMR0_Read16bitTimer:	
 11355                           ; 2 bytes @ 0x1
 11356                           
 11357  0071                     ?_locked_get_lock_leds:	
 11358                           ; 2 bytes @ 0x1
 11359                           
 11360  0071                     ?_locked_get_unlock_leds:	
 11361                           ; 2 bytes @ 0x1
 11362                           
 11363  0071                     ?___wmul:	
 11364                           ; 2 bytes @ 0x1
 11365                           
 11366  0071                     ?___lwdiv:	
 11367                           ; 2 bytes @ 0x1
 11368                           
 11369  0071                     ?___lmul:	
 11370                           ; 2 bytes @ 0x1
 11371                           
 11372  0071                     SPI1_Exchange8bit@data:	
 11373                           ; 4 bytes @ 0x1
 11374                           
 11375  0071                     PIN_MANAGER_Initialize@state:	
 11376                           ; 1 bytes @ 0x1
 11377                           
 11378  0071                     scheduler_TaskInit@task:	
 11379                           ; 1 bytes @ 0x1
 11380                           
 11381  0071                     nullifyBadge_segDisplayRegister@badge:	
 11382                           ; 1 bytes @ 0x1
 11383                           
 11384  0071                     nullifyBadge_userLedsRegister@badge:	
 11385                           ; 1 bytes @ 0x1
 11386                           
 11387  0071                     nullifyBadge_irTxRegister@badge:	
 11388                           ; 1 bytes @ 0x1
 11389                           
 11390  0071                     ___bmul@multiplicand:	
 11391                           ; 1 bytes @ 0x1
 11392                           
 11393  0071                     _isdigit$3264:	
 11394                           ; 1 bytes @ 0x1
 11395                           
 11396  0071                     PWM5_LoadDutyValue@dutyValue:	
 11397                           ; 1 bytes @ 0x1
 11398                           
 11399  0071                     PWM6_LoadDutyValue@dutyValue:	
 11400                           ; 2 bytes @ 0x1
 11401                           
 11402  0071                     PWM1_LoadDutyValue@dutyValue:	
 11403                           ; 2 bytes @ 0x1
 11404                           
 11405  0071                     PWM2_LoadDutyValue@dutyValue:	
 11406                           ; 2 bytes @ 0x1
 11407                           
 11408  0071                     TMR0_SetInterruptHandler@InterruptHandler:	
 11409                           ; 2 bytes @ 0x1
 11410                           
 11411  0071                     displayL1_SetUserLed@userLedVect:	
 11412                           ; 2 bytes @ 0x1
 11413                           
 11414  0071                     displayCharReverse@cVal:	
 11415                           ; 2 bytes @ 0x1
 11416                           
 11417  0071                     secret_clear@data:	
 11418                           ; 2 bytes @ 0x1
 11419                           
 11420  0071                     ___wmul@multiplier:	
 11421                           ; 2 bytes @ 0x1
 11422                           
 11423  0071                     ___lwdiv@divisor:	
 11424                           ; 2 bytes @ 0x1
 11425                           
 11426  0071                     memset@p1:	
 11427                           ; 2 bytes @ 0x1
 11428                           
 11429  0071                     strlen@s:	
 11430                           ; 2 bytes @ 0x1
 11431                           
 11432  0071                     ___lmul@multiplier:	
 11433                           ; 2 bytes @ 0x1
 11434                           
 11435                           
 11436                           ; 4 bytes @ 0x1
 11437  0071                     	ds	1
 11438  0072                     ?_SPI1_Exchange8bitBuffer:	
 11439  0072                     ??___bmul:	
 11440                           ; 1 bytes @ 0x2
 11441                           
 11442  0072                     SPI1_Exchange8bitBuffer@bufLen:	
 11443                           ; 1 bytes @ 0x2
 11444                           
 11445  0072                     scheduler_Init@scheduler:	
 11446                           ; 1 bytes @ 0x2
 11447                           
 11448  0072                     nullifyBadge_irTxRelease@badge:	
 11449                           ; 1 bytes @ 0x2
 11450                           
 11451  0072                     isdigit@c:	
 11452                           ; 1 bytes @ 0x2
 11453                           
 11454                           
 11455                           ; 1 bytes @ 0x2
 11456  0072                     	ds	1
 11457  0073                     ??_TMR0_Initialize:	
 11458  0073                     ??_TMR0_SetInterruptHandler:	
 11459                           ; 1 bytes @ 0x3
 11460                           
 11461  0073                     ??_strlen:	
 11462                           ; 1 bytes @ 0x3
 11463                           
 11464  0073                     ??_displayCharReverse:	
 11465                           ; 1 bytes @ 0x3
 11466                           
 11467  0073                     ??_secret_clear:	
 11468                           ; 1 bytes @ 0x3
 11469                           
 11470  0073                     ??_PWM5_LoadDutyValue:	
 11471                           ; 1 bytes @ 0x3
 11472                           
 11473  0073                     ??_PWM6_LoadDutyValue:	
 11474                           ; 1 bytes @ 0x3
 11475                           
 11476  0073                     ??_PWM1_LoadDutyValue:	
 11477                           ; 1 bytes @ 0x3
 11478                           
 11479  0073                     ??_SYSTEM_Initialize:	
 11480                           ; 1 bytes @ 0x3
 11481                           
 11482  0073                     ??_PWM2_LoadDutyValue:	
 11483                           ; 1 bytes @ 0x3
 11484                           
 11485  0073                     ??_TMR0_Read16bitTimer:	
 11486                           ; 1 bytes @ 0x3
 11487                           
 11488  0073                     ??_displayL1_SetUserLed:	
 11489                           ; 1 bytes @ 0x3
 11490                           
 11491  0073                     ??_locked_get_lock_leds:	
 11492                           ; 1 bytes @ 0x3
 11493                           
 11494  0073                     ??_locked_get_unlock_leds:	
 11495                           ; 1 bytes @ 0x3
 11496                           
 11497  0073                     SPI1_Exchange8bitBuffer@dataOut:	
 11498                           ; 1 bytes @ 0x3
 11499                           
 11500  0073                     scheduler_Init@k:	
 11501                           ; 1 bytes @ 0x3
 11502                           
 11503  0073                     nullifyBadge_buttonsGet@retVal:	
 11504                           ; 1 bytes @ 0x3
 11505                           
 11506  0073                     ___bmul@product:	
 11507                           ; 1 bytes @ 0x3
 11508                           
 11509  0073                     locked_lock_leds@size:	
 11510                           ; 1 bytes @ 0x3
 11511                           
 11512  0073                     locked_get_unlock_leds@leds:	
 11513                           ; 2 bytes @ 0x3
 11514                           
 11515  0073                     ___wmul@multiplicand:	
 11516                           ; 2 bytes @ 0x3
 11517                           
 11518  0073                     ___lwdiv@dividend:	
 11519                           ; 2 bytes @ 0x3
 11520                           
 11521  0073                     memset@c:	
 11522                           ; 2 bytes @ 0x3
 11523                           
 11524                           
 11525                           ; 2 bytes @ 0x3
 11526  0073                     	ds	1
 11527  0074                     ??_SPI1_Exchange8bitBuffer:	
 11528  0074                     displayL1_SetUserLed@display:	
 11529                           ; 1 bytes @ 0x4
 11530                           
 11531  0074                     ___bmul@multiplier:	
 11532                           ; 1 bytes @ 0x4
 11533                           
 11534                           
 11535                           ; 1 bytes @ 0x4
 11536  0074                     	ds	1
 11537  0075                     ??___wmul:	
 11538  0075                     ??___lwdiv:	
 11539                           ; 1 bytes @ 0x5
 11540                           
 11541  0075                     locked_get_lock_leds@size:	
 11542                           ; 1 bytes @ 0x5
 11543                           
 11544  0075                     ___wmul@product:	
 11545                           ; 2 bytes @ 0x5
 11546                           
 11547  0075                     memset@n:	
 11548                           ; 2 bytes @ 0x5
 11549                           
 11550  0075                     strlen@cp:	
 11551                           ; 2 bytes @ 0x5
 11552                           
 11553  0075                     ___lmul@multiplicand:	
 11554                           ; 2 bytes @ 0x5
 11555                           
 11556                           
 11557                           ; 4 bytes @ 0x5
 11558  0075                     	ds	1
 11559  0076                     ___lwdiv@counter:	
 11560                           
 11561                           ; 1 bytes @ 0x6
 11562  0076                     	ds	1
 11563  0077                     ??_memset:	
 11564  0077                     ?_secret_check:	
 11565                           ; 1 bytes @ 0x7
 11566                           
 11567  0077                     SPI1_Exchange8bitBuffer@dataIn:	
 11568                           ; 1 bytes @ 0x7
 11569                           
 11570  0077                     locked_get_lock_leds@leds:	
 11571                           ; 1 bytes @ 0x7
 11572                           
 11573  0077                     secret_check@data:	
 11574                           ; 2 bytes @ 0x7
 11575                           
 11576  0077                     ___lwdiv@quotient:	
 11577                           ; 2 bytes @ 0x7
 11578                           
 11579  0077                     memset@p:	
 11580                           ; 2 bytes @ 0x7
 11581                           
 11582                           
 11583                           ; 2 bytes @ 0x7
 11584  0077                     	ds	1
 11585  0078                     SPI1_Exchange8bitBuffer@bytesWritten:	
 11586  0078                     displayCharReverse@retValLower:	
 11587                           ; 1 bytes @ 0x8
 11588                           
 11589  0078                     TMR0_Read16bitTimer@readVal:	
 11590                           ; 1 bytes @ 0x8
 11591                           
 11592                           
 11593                           ; 2 bytes @ 0x8
 11594  0078                     	ds	1
 11595  0079                     ??_displayL1_Update:	
 11596  0079                     ??___lmul:	
 11597                           ; 1 bytes @ 0x9
 11598                           
 11599  0079                     ??___almod:	
 11600                           ; 1 bytes @ 0x9
 11601                           
 11602  0079                     ??___lwmod:	
 11603                           ; 1 bytes @ 0x9
 11604                           
 11605  0079                     displayCharReverse@retValUpper:	
 11606                           ; 1 bytes @ 0x9
 11607                           
 11608  0079                     secret_check@buttonPressed:	
 11609                           ; 1 bytes @ 0x9
 11610                           
 11611                           
 11612                           ; 1 bytes @ 0x9
 11613  0079                     	ds	1
 11614  007A                     TMR0_Read16bitTimer@readValLow:	
 11615  007A                     displayCharReverse@retValUpperRev:	
 11616                           ; 1 bytes @ 0xA
 11617                           
 11618  007A                     ___almod@counter:	
 11619                           ; 1 bytes @ 0xA
 11620                           
 11621  007A                     ___lwmod@counter:	
 11622                           ; 1 bytes @ 0xA
 11623                           
 11624                           
 11625                           ; 1 bytes @ 0xA
 11626  007A                     	ds	1
 11627  007B                     ??_displayL2_ForceUpdate:	
 11628  007B                     ??_displayL2_SetUserLeds:	
 11629                           ; 1 bytes @ 0xB
 11630                           
 11631  007B                     ??_displayL2_ClrUserLeds:	
 11632                           ; 1 bytes @ 0xB
 11633                           
 11634  007B                     ??_displayL1_Initialize:	
 11635                           ; 1 bytes @ 0xB
 11636                           
 11637  007B                     TMR0_Read16bitTimer@readValHigh:	
 11638                           ; 1 bytes @ 0xB
 11639                           
 11640  007B                     displayL1_Initialize@display:	
 11641                           ; 1 bytes @ 0xB
 11642                           
 11643  007B                     displayCharReverse@k:	
 11644                           ; 1 bytes @ 0xB
 11645                           
 11646  007B                     displayL2_ForceUpdate@display:	
 11647                           ; 1 bytes @ 0xB
 11648                           
 11649  007B                     displayL2_SetUserLeds@display:	
 11650                           ; 1 bytes @ 0xB
 11651                           
 11652  007B                     displayL2_ClrUserLeds@display:	
 11653                           ; 1 bytes @ 0xB
 11654                           
 11655  007B                     ___almod@sign:	
 11656                           ; 1 bytes @ 0xB
 11657                           
 11658                           
 11659                           ; 1 bytes @ 0xB
 11660  007B                     	ds	1
 11661  007C                     ??_nullifyBadge_segDisplayErase:	
 11662  007C                     ??_nullifyBadge_segDisplayPutStr:	
 11663                           ; 1 bytes @ 0xC
 11664                           
 11665  007C                     ??_nullifyBadge_segDisplayForceUpdate:	
 11666                           ; 1 bytes @ 0xC
 11667                           
 11668  007C                     ??_nullifyBadge_userLedsSet:	
 11669                           ; 1 bytes @ 0xC
 11670                           
 11671  007C                     ??_nullifyBadge_platformInit:	
 11672                           ; 1 bytes @ 0xC
 11673                           
 11674  007C                     ??_flashy_Init:	
 11675                           ; 1 bytes @ 0xC
 11676                           
 11677  007C                     ??_menu_Init:	
 11678                           ; 1 bytes @ 0xC
 11679                           
 11680  007C                     ??_slot_Init:	
 11681                           ; 1 bytes @ 0xC
 11682                           
 11683  007C                     ??_locked_Init:	
 11684                           ; 1 bytes @ 0xC
 11685                           
 11686  007C                     ??_secret_Init:	
 11687                           ; 1 bytes @ 0xC
 11688                           
 11689  007C                     ??_displayL2_Initialize:	
 11690                           ; 1 bytes @ 0xC
 11691                           
 11692  007C                     ??_displayL2_EraseSegDisplay:	
 11693                           ; 1 bytes @ 0xC
 11694                           
 11695  007C                     ??_menu_clear:	
 11696                           ; 1 bytes @ 0xC
 11697                           
 11698  007C                     ??_menu_display_option:	
 11699                           ; 1 bytes @ 0xC
 11700                           
 11701  007C                     ??_menu_run_option:	
 11702                           ; 1 bytes @ 0xC
 11703                           
 11704  007C                     ??_locked_clear:	
 11705                           ; 1 bytes @ 0xC
 11706                           
 11707  007C                     ??_scheduler_TaskRun:	
 11708                           ; 1 bytes @ 0xC
 11709                           
 11710  007C                     ??_led_circle:	
 11711                           ; 1 bytes @ 0xC
 11712                           
 11713  007C                     ??_let_alternate:	
 11714                           ; 1 bytes @ 0xC
 11715                           
 11716  007C                     ??_nullifyBadge_userLedsClr:	
 11717                           ; 1 bytes @ 0xC
 11718                           
 11719  007C                     ??_flashy_display_option:	
 11720                           ; 1 bytes @ 0xC
 11721                           
 11722                           
 11723                           	psect	cstackBANK0
 11724  0020                     __pcstackBANK0:	
 11725                           ; 1 bytes @ 0xC
 11726                           
 11727  0020                     ?_displayL1_SetSegChar:	
 11728  0020                     ??_secret_check:	
 11729                           ; 1 bytes @ 0x0
 11730                           
 11731  0020                     displayL1_SetSegChar@c:	
 11732                           ; 1 bytes @ 0x0
 11733                           
 11734  0020                     ___lmul@product:	
 11735                           ; 1 bytes @ 0x0
 11736                           
 11737  0020                     displayL1_Update@tmpRxBuf:	
 11738                           ; 4 bytes @ 0x0
 11739                           
 11740                           
 11741                           ; 10 bytes @ 0x0
 11742  0020                     	ds	1
 11743  0021                     displayL1_SetSegChar@charPos:	
 11744                           
 11745                           ; 1 bytes @ 0x1
 11746  0021                     	ds	1
 11747  0022                     ??_displayL1_SetSegChar:	
 11748                           
 11749                           ; 1 bytes @ 0x2
 11750  0022                     	ds	1
 11751  0023                     secret_check@size:	
 11752                           
 11753                           ; 2 bytes @ 0x3
 11754  0023                     	ds	1
 11755  0024                     ?_rand:	
 11756                           
 11757                           ; 2 bytes @ 0x4
 11758  0024                     	ds	1
 11759  0025                     secret_check@currents_size:	
 11760                           
 11761                           ; 2 bytes @ 0x5
 11762  0025                     	ds	1
 11763  0026                     ??_rand:	
 11764  0026                     displayL1_SetSegChar@dispDataVectBaseIdx:	
 11765                           ; 1 bytes @ 0x6
 11766                           
 11767                           
 11768                           ; 1 bytes @ 0x6
 11769  0026                     	ds	1
 11770  0027                     displayL1_SetSegChar@display:	
 11771  0027                     secret_check@inputs:	
 11772                           ; 1 bytes @ 0x7
 11773                           
 11774                           
 11775                           ; 1 bytes @ 0x7
 11776  0027                     	ds	1
 11777  0028                     displayL1_SetSegChar@charData:	
 11778  0028                     secret_check@i:	
 11779                           ; 2 bytes @ 0x8
 11780                           
 11781                           
 11782                           ; 2 bytes @ 0x8
 11783  0028                     	ds	2
 11784  002A                     ?_displayL2_PutChar:	
 11785  002A                     displayL1_Update@display:	
 11786                           ; 1 bytes @ 0xA
 11787                           
 11788  002A                     displayL2_PutChar@c:	
 11789                           ; 1 bytes @ 0xA
 11790                           
 11791                           
 11792                           ; 1 bytes @ 0xA
 11793  002A                     	ds	1
 11794  002B                     ??_displayL2_PutChar:	
 11795  002B                     ?_displayL2_SetUserLeds:	
 11796                           ; 1 bytes @ 0xB
 11797                           
 11798  002B                     ?___lwmod:	
 11799                           ; 1 bytes @ 0xB
 11800                           
 11801  002B                     ?___almod:	
 11802                           ; 2 bytes @ 0xB
 11803                           
 11804  002B                     nullifyBadge_segDisplayForceUpdate@badge:	
 11805                           ; 4 bytes @ 0xB
 11806                           
 11807  002B                     nullifyBadge_userLedsClr@badge:	
 11808                           ; 1 bytes @ 0xB
 11809                           
 11810  002B                     displayL2_Initialize@display:	
 11811                           ; 1 bytes @ 0xB
 11812                           
 11813  002B                     displayL2_SetUserLeds@userLedData:	
 11814                           ; 1 bytes @ 0xB
 11815                           
 11816  002B                     ___lwmod@divisor:	
 11817                           ; 2 bytes @ 0xB
 11818                           
 11819  002B                     ___almod@divisor:	
 11820                           ; 2 bytes @ 0xB
 11821                           
 11822                           
 11823                           ; 4 bytes @ 0xB
 11824  002B                     	ds	1
 11825  002C                     nullifyBadge_platformInit@badge:	
 11826                           
 11827                           ; 1 bytes @ 0xC
 11828  002C                     	ds	1
 11829  002D                     ?_nullifyBadge_userLedsSet:	
 11830  002D                     nullifyBadge_userLedsSet@userLedData:	
 11831                           ; 1 bytes @ 0xD
 11832                           
 11833  002D                     ___lwmod@dividend:	
 11834                           ; 2 bytes @ 0xD
 11835                           
 11836                           
 11837                           ; 2 bytes @ 0xD
 11838  002D                     	ds	1
 11839  002E                     displayL2_PutChar@k:	
 11840                           
 11841                           ; 1 bytes @ 0xE
 11842  002E                     	ds	1
 11843  002F                     ?_slot_Setup:	
 11844  002F                     ?_sprintf:	
 11845                           ; 1 bytes @ 0xF
 11846                           
 11847  002F                     nullifyBadge_userLedsSet@badge:	
 11848                           ; 2 bytes @ 0xF
 11849                           
 11850  002F                     displayL2_PutChar@display:	
 11851                           ; 1 bytes @ 0xF
 11852                           
 11853  002F                     slot_Setup@taskData:	
 11854                           ; 1 bytes @ 0xF
 11855                           
 11856  002F                     sprintf@sp:	
 11857                           ; 2 bytes @ 0xF
 11858                           
 11859  002F                     ___almod@dividend:	
 11860                           ; 2 bytes @ 0xF
 11861                           
 11862                           
 11863                           ; 4 bytes @ 0xF
 11864  002F                     	ds	1
 11865  0030                     ?_displayL2_PutStr:	
 11866  0030                     ?_led_roundabout:	
 11867                           ; 1 bytes @ 0x10
 11868                           
 11869  0030                     ?_led_curtain:	
 11870                           ; 1 bytes @ 0x10
 11871                           
 11872  0030                     ?_led_circle:	
 11873                           ; 1 bytes @ 0x10
 11874                           
 11875  0030                     ?_let_alternate:	
 11876                           ; 1 bytes @ 0x10
 11877                           
 11878  0030                     ?_led_Parody:	
 11879                           ; 1 bytes @ 0x10
 11880                           
 11881  0030                     led_roundabout@counter:	
 11882                           ; 1 bytes @ 0x10
 11883                           
 11884  0030                     led_curtain@counter:	
 11885                           ; 2 bytes @ 0x10
 11886                           
 11887  0030                     led_circle@count:	
 11888                           ; 2 bytes @ 0x10
 11889                           
 11890  0030                     let_alternate@count:	
 11891                           ; 2 bytes @ 0x10
 11892                           
 11893  0030                     led_Parody@count:	
 11894                           ; 2 bytes @ 0x10
 11895                           
 11896  0030                     displayL2_PutStr@str:	
 11897                           ; 2 bytes @ 0x10
 11898                           
 11899                           
 11900                           ; 2 bytes @ 0x10
 11901  0030                     	ds	1
 11902  0031                     ??_slot_Setup:	
 11903  0031                     sprintf@f:	
 11904                           ; 1 bytes @ 0x11
 11905                           
 11906                           
 11907                           ; 2 bytes @ 0x11
 11908  0031                     	ds	1
 11909  0032                     ??_displayL2_PutStr:	
 11910  0032                     ??_led_roundabout:	
 11911                           ; 1 bytes @ 0x12
 11912                           
 11913  0032                     ??_led_curtain:	
 11914                           ; 1 bytes @ 0x12
 11915                           
 11916  0032                     ??_led_Parody:	
 11917                           ; 1 bytes @ 0x12
 11918                           
 11919  0032                     ?_slot_Running_Animation:	
 11920                           ; 1 bytes @ 0x12
 11921                           
 11922  0032                     slot_Running_Animation@taskData:	
 11923                           ; 1 bytes @ 0x12
 11924                           
 11925                           
 11926                           ; 2 bytes @ 0x12
 11927  0032                     	ds	1
 11928  0033                     ??_led_rand:	
 11929                           
 11930                           ; 1 bytes @ 0x13
 11931  0033                     	ds	1
 11932  0034                     ??_slot_Running_Animation:	
 11933  0034                     led_roundabout@leds:	
 11934                           ; 1 bytes @ 0x14
 11935                           
 11936  0034                     led_curtain@leds:	
 11937                           ; 2 bytes @ 0x14
 11938                           
 11939  0034                     led_Parody@leds:	
 11940                           ; 2 bytes @ 0x14
 11941                           
 11942  0034                     slot_Setup@data:	
 11943                           ; 2 bytes @ 0x14
 11944                           
 11945                           
 11946                           ; 2 bytes @ 0x14
 11947  0034                     	ds	1
 11948  0035                     displayL2_PutStr@display:	
 11949                           
 11950                           ; 1 bytes @ 0x15
 11951  0035                     	ds	1
 11952  0036                     displayL2_PutStr@k:	
 11953  0036                     led_roundabout@size:	
 11954                           ; 1 bytes @ 0x16
 11955                           
 11956  0036                     led_curtain@size:	
 11957                           ; 2 bytes @ 0x16
 11958                           
 11959  0036                     led_Parody@size:	
 11960                           ; 2 bytes @ 0x16
 11961                           
 11962  0036                     slot_Running_Animation@data:	
 11963                           ; 2 bytes @ 0x16
 11964                           
 11965                           
 11966                           ; 2 bytes @ 0x16
 11967  0036                     	ds	1
 11968  0037                     ?_nullifyBadge_segDisplayPutStr:	
 11969  0037                     displayL2_EraseSegDisplay@display:	
 11970                           ; 1 bytes @ 0x17
 11971                           
 11972  0037                     nullifyBadge_segDisplayPutStr@str:	
 11973                           ; 1 bytes @ 0x17
 11974                           
 11975                           
 11976                           ; 2 bytes @ 0x17
 11977  0037                     	ds	1
 11978  0038                     nullifyBadge_segDisplayErase@badge:	
 11979                           
 11980                           ; 1 bytes @ 0x18
 11981  0038                     	ds	1
 11982  0039                     ?_flashy_Init:	
 11983  0039                     ?_menu_Init:	
 11984                           ; 1 bytes @ 0x19
 11985                           
 11986  0039                     ?_slot_Init:	
 11987                           ; 1 bytes @ 0x19
 11988                           
 11989  0039                     ?_locked_Init:	
 11990                           ; 1 bytes @ 0x19
 11991                           
 11992  0039                     ?_secret_Init:	
 11993                           ; 1 bytes @ 0x19
 11994                           
 11995  0039                     ?_menu_clear:	
 11996                           ; 1 bytes @ 0x19
 11997                           
 11998  0039                     ?_locked_clear:	
 11999                           ; 1 bytes @ 0x19
 12000                           
 12001  0039                     nullifyBadge_segDisplayPutStr@badge:	
 12002                           ; 1 bytes @ 0x19
 12003                           
 12004  0039                     menu_Init@taskData:	
 12005                           ; 1 bytes @ 0x19
 12006                           
 12007  0039                     menu_clear@data:	
 12008                           ; 2 bytes @ 0x19
 12009                           
 12010  0039                     flashy_Init@taskData:	
 12011                           ; 2 bytes @ 0x19
 12012                           
 12013  0039                     locked_Init@taskData:	
 12014                           ; 2 bytes @ 0x19
 12015                           
 12016  0039                     locked_clear@data:	
 12017                           ; 2 bytes @ 0x19
 12018                           
 12019  0039                     secret_Init@taskData:	
 12020                           ; 2 bytes @ 0x19
 12021                           
 12022  0039                     slot_Init@taskData:	
 12023                           ; 2 bytes @ 0x19
 12024                           
 12025                           
 12026                           ; 2 bytes @ 0x19
 12027  0039                     	ds	1
 12028  003A                     ?_marquee_speedy:	
 12029  003A                     ?_marquee:	
 12030                           ; 1 bytes @ 0x1A
 12031                           
 12032  003A                     marquee_speedy@string:	
 12033                           ; 1 bytes @ 0x1A
 12034                           
 12035  003A                     marquee@string:	
 12036                           ; 2 bytes @ 0x1A
 12037                           
 12038                           
 12039                           ; 2 bytes @ 0x1A
 12040  003A                     	ds	1
 12041  003B                     ?_menu_run_option:	
 12042  003B                     ??_sprintf:	
 12043                           ; 1 bytes @ 0x1B
 12044                           
 12045  003B                     led_rand@spark:	
 12046                           ; 1 bytes @ 0x1B
 12047                           
 12048  003B                     menu_Init@data:	
 12049                           ; 2 bytes @ 0x1B
 12050                           
 12051  003B                     menu_run_option@data:	
 12052                           ; 2 bytes @ 0x1B
 12053                           
 12054  003B                     flashy_Init@data:	
 12055                           ; 2 bytes @ 0x1B
 12056                           
 12057  003B                     locked_Init@data:	
 12058                           ; 2 bytes @ 0x1B
 12059                           
 12060  003B                     secret_Init@data:	
 12061                           ; 2 bytes @ 0x1B
 12062                           
 12063  003B                     slot_Init@data:	
 12064                           ; 2 bytes @ 0x1B
 12065                           
 12066                           
 12067                           ; 2 bytes @ 0x1B
 12068  003B                     	ds	1
 12069  003C                     marquee_speedy@count:	
 12070  003C                     marquee@count:	
 12071                           ; 2 bytes @ 0x1C
 12072                           
 12073                           
 12074                           ; 2 bytes @ 0x1C
 12075  003C                     	ds	1
 12076  003D                     ?_scheduler_TaskAdd:	
 12077  003D                     ?_slot_Finished_Animation:	
 12078                           ; 1 bytes @ 0x1D
 12079                           
 12080  003D                     scheduler_TaskAdd@task:	
 12081                           ; 1 bytes @ 0x1D
 12082                           
 12083  003D                     slot_Finished_Animation@taskData:	
 12084                           ; 1 bytes @ 0x1D
 12085                           
 12086                           
 12087                           ; 2 bytes @ 0x1D
 12088  003D                     	ds	1
 12089  003E                     ??_scheduler_TaskAdd:	
 12090  003E                     ??_marquee:	
 12091                           ; 1 bytes @ 0x1E
 12092                           
 12093  003E                     marquee_speedy@multiplier:	
 12094                           ; 1 bytes @ 0x1E
 12095                           
 12096                           
 12097                           ; 2 bytes @ 0x1E
 12098  003E                     	ds	1
 12099  003F                     ??_slot_Finished_Animation:	
 12100  003F                     sprintf@prec:	
 12101                           ; 1 bytes @ 0x1F
 12102                           
 12103  003F                     marquee@display_string:	
 12104                           ; 1 bytes @ 0x1F
 12105                           
 12106                           
 12107                           ; 5 bytes @ 0x1F
 12108  003F                     	ds	1
 12109  0040                     ??_marquee_speedy:	
 12110  0040                     sprintf@flag:	
 12111                           ; 1 bytes @ 0x20
 12112                           
 12113                           
 12114                           ; 1 bytes @ 0x20
 12115  0040                     	ds	1
 12116  0041                     slot_Finished_Animation@data:	
 12117  0041                     sprintf@cp:	
 12118                           ; 2 bytes @ 0x21
 12119                           
 12120  0041                     marquee_speedy@display_string:	
 12121                           ; 2 bytes @ 0x21
 12122                           
 12123                           
 12124                           ; 5 bytes @ 0x21
 12125  0041                     	ds	2
 12126  0043                     sprintf@ap:	
 12127                           
 12128                           ; 1 bytes @ 0x23
 12129  0043                     	ds	1
 12130  0044                     scheduler_TaskAdd@scheduler:	
 12131  0044                     marquee@multiplier:	
 12132                           ; 1 bytes @ 0x24
 12133                           
 12134  0044                     sprintf@val:	
 12135                           ; 2 bytes @ 0x24
 12136                           
 12137                           
 12138                           ; 2 bytes @ 0x24
 12139  0044                     	ds	1
 12140  0045                     scheduler_TaskAdd@k:	
 12141                           
 12142                           ; 1 bytes @ 0x25
 12143  0045                     	ds	1
 12144  0046                     marquee_speedy@i:	
 12145  0046                     marquee@i:	
 12146                           ; 2 bytes @ 0x26
 12147                           
 12148  0046                     sprintf@len:	
 12149                           ; 2 bytes @ 0x26
 12150                           
 12151                           
 12152                           ; 2 bytes @ 0x26
 12153  0046                     	ds	2
 12154  0048                     marquee_speedy@string_length:	
 12155  0048                     marquee@string_length:	
 12156                           ; 2 bytes @ 0x28
 12157                           
 12158  0048                     sprintf@width:	
 12159                           ; 2 bytes @ 0x28
 12160                           
 12161                           
 12162                           ; 2 bytes @ 0x28
 12163  0048                     	ds	2
 12164  004A                     sprintf@c:	
 12165  004A                     marquee_speedy@j:	
 12166                           ; 1 bytes @ 0x2A
 12167                           
 12168  004A                     marquee@j:	
 12169                           ; 2 bytes @ 0x2A
 12170                           
 12171                           
 12172                           ; 2 bytes @ 0x2A
 12173  004A                     	ds	2
 12174  004C                     ?_menu_display_option:	
 12175  004C                     ?_flashy_display_option:	
 12176                           ; 1 bytes @ 0x2C
 12177                           
 12178  004C                     menu_display_option@data:	
 12179                           ; 1 bytes @ 0x2C
 12180                           
 12181  004C                     flashy_display_option@data:	
 12182                           ; 2 bytes @ 0x2C
 12183                           
 12184                           
 12185                           ; 2 bytes @ 0x2C
 12186  004C                     	ds	2
 12187  004E                     menu_display_option@size:	
 12188                           
 12189                           ; 2 bytes @ 0x2E
 12190  004E                     	ds	2
 12191  0050                     menu_display_option@led:	
 12192                           
 12193                           ; 2 bytes @ 0x30
 12194  0050                     	ds	2
 12195  0052                     ?_flashy_Main:	
 12196  0052                     ?_menu_Main:	
 12197                           ; 1 bytes @ 0x32
 12198                           
 12199  0052                     ?_slot_Main:	
 12200                           ; 1 bytes @ 0x32
 12201                           
 12202  0052                     ?_locked_Main:	
 12203                           ; 1 bytes @ 0x32
 12204                           
 12205  0052                     ?_secret_Main:	
 12206                           ; 1 bytes @ 0x32
 12207                           
 12208  0052                     menu_Main@taskData:	
 12209                           ; 1 bytes @ 0x32
 12210                           
 12211  0052                     flashy_Main@taskData:	
 12212                           ; 2 bytes @ 0x32
 12213                           
 12214  0052                     locked_Main@taskData:	
 12215                           ; 2 bytes @ 0x32
 12216                           
 12217  0052                     secret_Main@taskData:	
 12218                           ; 2 bytes @ 0x32
 12219                           
 12220  0052                     slot_Main@taskData:	
 12221                           ; 2 bytes @ 0x32
 12222                           
 12223                           
 12224                           ; 2 bytes @ 0x32
 12225  0052                     	ds	2
 12226  0054                     ??_flashy_Main:	
 12227  0054                     ??_menu_Main:	
 12228                           ; 1 bytes @ 0x34
 12229                           
 12230  0054                     ??_slot_Main:	
 12231                           ; 1 bytes @ 0x34
 12232                           
 12233  0054                     ??_locked_Main:	
 12234                           ; 1 bytes @ 0x34
 12235                           
 12236  0054                     ??_secret_Main:	
 12237                           ; 1 bytes @ 0x34
 12238                           
 12239                           
 12240                           ; 1 bytes @ 0x34
 12241  0054                     	ds	2
 12242  0056                     menu_Main@buttonPressed:	
 12243  0056                     locked_Main@buttonPressed:	
 12244                           ; 1 bytes @ 0x36
 12245                           
 12246  0056                     secret_Main@secret_found:	
 12247                           ; 1 bytes @ 0x36
 12248                           
 12249  0056                     flashy_Main@hit_counter:	
 12250                           ; 1 bytes @ 0x36
 12251                           
 12252                           
 12253                           ; 6 bytes @ 0x36
 12254  0056                     	ds	1
 12255  0057                     secret_Main@buttonPressed:	
 12256  0057                     menu_Main@data:	
 12257                           ; 1 bytes @ 0x37
 12258                           
 12259  0057                     locked_Main@data:	
 12260                           ; 2 bytes @ 0x37
 12261                           
 12262                           
 12263                           ; 2 bytes @ 0x37
 12264  0057                     	ds	1
 12265  0058                     secret_Main@data:	
 12266                           
 12267                           ; 2 bytes @ 0x38
 12268  0058                     	ds	4
 12269  005C                     flashy_Main@buttonPressed:	
 12270                           
 12271                           ; 2 bytes @ 0x3C
 12272  005C                     	ds	2
 12273  005E                     flashy_Main@data:	
 12274                           
 12275                           ; 2 bytes @ 0x3E
 12276  005E                     	ds	6
 12277  0064                     slot_Main@buttonPressed:	
 12278                           
 12279                           ; 1 bytes @ 0x44
 12280  0064                     	ds	1
 12281  0065                     slot_Main@data:	
 12282                           
 12283                           ; 2 bytes @ 0x45
 12284  0065                     	ds	2
 12285  0067                     scheduler_TaskRun@task:	
 12286                           
 12287                           ; 1 bytes @ 0x47
 12288  0067                     	ds	1
 12289  0068                     ??_schedulerExecute:	
 12290                           
 12291                           ; 1 bytes @ 0x48
 12292  0068                     	ds	6
 12293  006E                     ??_main:	
 12294                           
 12295                           ; 1 bytes @ 0x4E
 12296  006E                     	ds	1
 12297                           
 12298                           	psect	maintext
 12299  1D68                     __pmaintext:	
 12300 ;;
 12301 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
 12302 ;;
 12303 ;; *************** function _main *****************
 12304 ;; Defined at:
 12305 ;;		line 222 in file "main.c"
 12306 ;; Parameters:    Size  Location     Type
 12307 ;;		None
 12308 ;; Auto vars:     Size  Location     Type
 12309 ;;		None
 12310 ;; Return value:  Size  Location     Type
 12311 ;;                  1    wreg      void 
 12312 ;; Registers used:
 12313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12314 ;; Tracked objects:
 12315 ;;		On entry : B1F/0
 12316 ;;		On exit  : 0/0
 12317 ;;		Unchanged: 0/0
 12318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12321 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12322 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12323 ;;Total ram usage:        1 bytes
 12324 ;; Hardware stack levels required when called:   15
 12325 ;; This function calls:
 12326 ;;		_nullifyBadge_platformInit
 12327 ;;		_schedulerExecute
 12328 ;;		_scheduler_Init
 12329 ;;		_scheduler_TaskAdd
 12330 ;;		_scheduler_TaskInit
 12331 ;; This function is called by:
 12332 ;;		Startup code after reset
 12333 ;; This function uses a non-reentrant model
 12334 ;;
 12335                           
 12336                           
 12337                           ;psect for function _main
 12338  1D68                     _main:	
 12339                           
 12340                           ;main.c: 225: nullifyBadge_platformInit(&badge_inst);
 12341                           
 12342                           ;incstack = 0
 12343                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12344  1D68  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 12345  1D69  31A7  27AB  319D   	fcall	_nullifyBadge_platformInit
 12346                           
 12347                           ;main.c: 228: scheduler_Init(&schedulerInst);
 12348  1D6C  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12349  1D6D  31A0  2045  319D   	fcall	_scheduler_Init
 12350                           
 12351                           ;main.c: 231: scheduler_TaskInit(&flashy_task);
 12352  1D70  3054               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 12353  1D71  31A3  2389  319D   	fcall	_scheduler_TaskInit
 12354                           
 12355                           ;main.c: 232: scheduler_TaskInit(&menu_task);
 12356  1D74  3047               	movlw	(low (_menu_task| (0+256)))& (0+255)
 12357  1D75  31A3  2389  319D   	fcall	_scheduler_TaskInit
 12358                           
 12359                           ;main.c: 233: scheduler_TaskInit(&slot_task);
 12360  1D78  303A               	movlw	(low (_slot_task| (0+256)))& (0+255)
 12361  1D79  31A3  2389  319D   	fcall	_scheduler_TaskInit
 12362                           
 12363                           ;main.c: 234: scheduler_TaskInit(&locked_task);
 12364  1D7C  302D               	movlw	(low (_locked_task| (0+256)))& (0+255)
 12365  1D7D  31A3  2389  319D   	fcall	_scheduler_TaskInit
 12366                           
 12367                           ;main.c: 235: scheduler_TaskInit(&secret_task);
 12368  1D80  3020               	movlw	(low (_secret_task| (0+256)))& (0+255)
 12369  1D81  31A3  2389  319D   	fcall	_scheduler_TaskInit
 12370                           
 12371                           ;main.c: 238: flashy_TaskData.badge = &badge_inst;
 12372  1D84  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 12373  1D85  0020               	movlb	0	; select bank0
 12374  1D86  00EE               	movwf	??_main
 12375  1D87  086E               	movf	??_main,w
 12376  1D88  0028               	movlb	8	; select bank8
 12377  1D89  00A0               	movwf	_flashy_TaskData^(0+1024)
 12378                           
 12379                           ;main.c: 239: menu_TaskData.badge = &badge_inst;
 12380  1D8A  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 12381  1D8B  0020               	movlb	0	; select bank0
 12382  1D8C  00EE               	movwf	??_main
 12383  1D8D  086E               	movf	??_main,w
 12384  1D8E  0024               	movlb	4	; select bank4
 12385  1D8F  00BC               	movwf	_menu_TaskData^(0+512)
 12386                           
 12387                           ;main.c: 240: slot_TaskData.badge = &badge_inst;
 12388  1D90  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 12389  1D91  0020               	movlb	0	; select bank0
 12390  1D92  00EE               	movwf	??_main
 12391  1D93  086E               	movf	??_main,w
 12392  1D94  0029               	movlb	9	; select bank9
 12393  1D95  00A0               	movwf	_slot_TaskData^(0+1152)
 12394                           
 12395                           ;main.c: 241: locked_TaskData.badge = &badge_inst;
 12396  1D96  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 12397  1D97  0020               	movlb	0	; select bank0
 12398  1D98  00EE               	movwf	??_main
 12399  1D99  086E               	movf	??_main,w
 12400  1D9A  0024               	movlb	4	; select bank4
 12401  1D9B  00AE               	movwf	_locked_TaskData^(0+512)
 12402                           
 12403                           ;main.c: 242: secret_TaskData.badge = &badge_inst;
 12404  1D9C  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 12405  1D9D  0020               	movlb	0	; select bank0
 12406  1D9E  00EE               	movwf	??_main
 12407  1D9F  086E               	movf	??_main,w
 12408  1DA0  0024               	movlb	4	; select bank4
 12409  1DA1  00A0               	movwf	_secret_TaskData^(0+512)
 12410                           
 12411                           ;main.c: 245: badge_locked = 1;
 12412  1DA2  0021               	movlb	1	; select bank1
 12413  1DA3  01C4               	clrf	_badge_locked^(0+128)
 12414  1DA4  0AC4               	incf	_badge_locked^(0+128),f
 12415                           
 12416                           ;main.c: 248: flashy_task.taskData = (void *) &flashy_TaskData;
 12417  1DA5  3020               	movlw	low _flashy_TaskData
 12418  1DA6  0022               	movlb	2	; select bank2
 12419  1DA7  00D6               	movwf	(low ((_flashy_task| (0+256)+2)))^0
 12420  1DA8  3004               	movlw	high _flashy_TaskData
 12421  1DA9  00D7               	movwf	((low ((_flashy_task| (0+256)+2))+1))^0
 12422                           
 12423                           ;main.c: 249: flashy_task.taskInitCallback = flashy_Init;
 12424  1DAA  3049               	movlw	low _flashy_Init
 12425  1DAB  00D8               	movwf	(low ((_flashy_task| (0+256)+4)))^0
 12426  1DAC  3007               	movlw	high _flashy_Init
 12427  1DAD  00D9               	movwf	((low ((_flashy_task| (0+256)+4)))^0+1)
 12428                           
 12429                           ;main.c: 250: flashy_task.taskExecuteCallback = flashy_Main;
 12430  1DAE  3019               	movlw	low _flashy_Main
 12431  1DAF  00DC               	movwf	(low ((_flashy_task| (0+256)+8)))^0
 12432  1DB0  3008               	movlw	high _flashy_Main
 12433  1DB1  00DD               	movwf	((low ((_flashy_task| (0+256)+8)))^0+1)
 12434                           
 12435                           ;main.c: 251: flashy_task.taskExitCallback = flashy_Exit;
 12436  1DB2  3000               	movlw	0
 12437  1DB3  00DA               	movwf	(low ((_flashy_task| (0+256)+6)))^0
 12438  1DB4  3000               	movlw	0
 12439  1DB5  00DB               	movwf	((low ((_flashy_task| (0+256)+6)))^0+1)
 12440                           
 12441                           ;main.c: 252: flashy_task.taskInterval = 10;
 12442  1DB6  300A               	movlw	10
 12443  1DB7  00DE               	movwf	(_flashy_task^(0+256)+10)
 12444  1DB8  3000               	movlw	0
 12445  1DB9  00DF               	movwf	(_flashy_task^(0+256)+11)
 12446                           
 12447                           ;main.c: 254: menu_task.taskData = (void *) &menu_TaskData;
 12448  1DBA  303C               	movlw	low _menu_TaskData
 12449  1DBB  00C9               	movwf	(low ((_menu_task| (0+256)+2)))^0
 12450  1DBC  3002               	movlw	high _menu_TaskData
 12451  1DBD  00CA               	movwf	((low ((_menu_task| (0+256)+2))+1))^0
 12452                           
 12453                           ;main.c: 255: menu_task.taskInitCallback = menu_Init;
 12454  1DBE  30C9               	movlw	low _menu_Init
 12455  1DBF  00CB               	movwf	(low ((_menu_task| (0+256)+4)))^0
 12456  1DC0  3018               	movlw	high _menu_Init
 12457  1DC1  00CC               	movwf	((low ((_menu_task| (0+256)+4)))^0+1)
 12458                           
 12459                           ;main.c: 256: menu_task.taskExecuteCallback = menu_Main;
 12460  1DC2  3009               	movlw	low _menu_Main
 12461  1DC3  00CF               	movwf	(low ((_menu_task| (0+256)+8)))^0
 12462  1DC4  3016               	movlw	high _menu_Main
 12463  1DC5  00D0               	movwf	((low ((_menu_task| (0+256)+8)))^0+1)
 12464                           
 12465                           ;main.c: 257: menu_task.taskExitCallback = menu_Exit;
 12466  1DC6  3000               	movlw	0
 12467  1DC7  00CD               	movwf	(low ((_menu_task| (0+256)+6)))^0
 12468  1DC8  3000               	movlw	0
 12469  1DC9  00CE               	movwf	((low ((_menu_task| (0+256)+6)))^0+1)
 12470                           
 12471                           ;main.c: 258: menu_task.taskInterval = 10;
 12472  1DCA  300A               	movlw	10
 12473  1DCB  00D1               	movwf	(_menu_task^(0+256)+10)
 12474  1DCC  3000               	movlw	0
 12475  1DCD  00D2               	movwf	(_menu_task^(0+256)+11)
 12476                           
 12477                           ;main.c: 260: slot_task.taskData = (void *) &slot_TaskData;
 12478  1DCE  30A0               	movlw	low _slot_TaskData
 12479  1DCF  00BC               	movwf	(low ((_slot_task| (0+256)+2)))^0
 12480  1DD0  3004               	movlw	high _slot_TaskData
 12481  1DD1  00BD               	movwf	((low ((_slot_task| (0+256)+2))+1))^0
 12482                           
 12483                           ;main.c: 261: slot_task.taskInitCallback = slot_Init;
 12484  1DD2  308E               	movlw	low _slot_Init
 12485  1DD3  00BE               	movwf	(low ((_slot_task| (0+256)+4)))^0
 12486  1DD4  3019               	movlw	high _slot_Init
 12487  1DD5  00BF               	movwf	((low ((_slot_task| (0+256)+4)))^0+1)
 12488                           
 12489                           ;main.c: 262: slot_task.taskExecuteCallback = slot_Main;
 12490  1DD6  30D7               	movlw	low _slot_Main
 12491  1DD7  00C2               	movwf	(low ((_slot_task| (0+256)+8)))^0
 12492  1DD8  3000               	movlw	high _slot_Main
 12493  1DD9  00C3               	movwf	((low ((_slot_task| (0+256)+8)))^0+1)
 12494                           
 12495                           ;main.c: 263: slot_task.taskExitCallback = slot_Exit;
 12496  1DDA  3000               	movlw	0
 12497  1DDB  00C0               	movwf	(low ((_slot_task| (0+256)+6)))^0
 12498  1DDC  3000               	movlw	0
 12499  1DDD  00C1               	movwf	((low ((_slot_task| (0+256)+6)))^0+1)
 12500                           
 12501                           ;main.c: 264: slot_task.taskInterval = 10;
 12502  1DDE  300A               	movlw	10
 12503  1DDF  00C4               	movwf	(_slot_task^(0+256)+10)
 12504  1DE0  3000               	movlw	0
 12505  1DE1  00C5               	movwf	(_slot_task^(0+256)+11)
 12506                           
 12507                           ;main.c: 266: locked_task.taskData = (void *) &locked_TaskData;
 12508  1DE2  302E               	movlw	low _locked_TaskData
 12509  1DE3  00AF               	movwf	(low ((_locked_task| (0+256)+2)))^0
 12510  1DE4  3002               	movlw	high _locked_TaskData
 12511  1DE5  00B0               	movwf	((low ((_locked_task| (0+256)+2))+1))^0
 12512                           
 12513                           ;main.c: 267: locked_task.taskInitCallback = locked_Init;
 12514  1DE6  302B               	movlw	low _locked_Init
 12515  1DE7  00B1               	movwf	(low ((_locked_task| (0+256)+4)))^0
 12516  1DE8  3019               	movlw	high _locked_Init
 12517  1DE9  00B2               	movwf	((low ((_locked_task| (0+256)+4)))^0+1)
 12518                           
 12519                           ;main.c: 268: locked_task.taskExecuteCallback = locked_Main;
 12520  1DEA  302C               	movlw	low _locked_Main
 12521  1DEB  00B5               	movwf	(low ((_locked_task| (0+256)+8)))^0
 12522  1DEC  3014               	movlw	high _locked_Main
 12523  1DED  00B6               	movwf	((low ((_locked_task| (0+256)+8)))^0+1)
 12524                           
 12525                           ;main.c: 269: locked_task.taskExitCallback = locked_Exit;
 12526  1DEE  3000               	movlw	0
 12527  1DEF  00B3               	movwf	(low ((_locked_task| (0+256)+6)))^0
 12528  1DF0  3000               	movlw	0
 12529  1DF1  00B4               	movwf	((low ((_locked_task| (0+256)+6)))^0+1)
 12530                           
 12531                           ;main.c: 270: locked_task.taskInterval = 10;
 12532  1DF2  300A               	movlw	10
 12533  1DF3  00B7               	movwf	(_locked_task^(0+256)+10)
 12534  1DF4  3000               	movlw	0
 12535  1DF5  00B8               	movwf	(_locked_task^(0+256)+11)
 12536                           
 12537                           ;main.c: 272: secret_task.taskData = (void *) &secret_TaskData;
 12538  1DF6  3020               	movlw	low _secret_TaskData
 12539  1DF7  00A2               	movwf	(low ((_secret_task| (0+256)+2)))^0
 12540  1DF8  3002               	movlw	high _secret_TaskData
 12541  1DF9  00A3               	movwf	((low ((_secret_task| (0+256)+2))+1))^0
 12542                           
 12543                           ;main.c: 273: secret_task.taskInitCallback = secret_Init;
 12544  1DFA  300C               	movlw	low _secret_Init
 12545  1DFB  00A4               	movwf	(low ((_secret_task| (0+256)+4)))^0
 12546  1DFC  3018               	movlw	high _secret_Init
 12547  1DFD  00A5               	movwf	((low ((_secret_task| (0+256)+4)))^0+1)
 12548                           
 12549                           ;main.c: 274: secret_task.taskExecuteCallback = secret_Main;
 12550  1DFE  3043               	movlw	low _secret_Main
 12551  1DFF  00A8               	movwf	(low ((_secret_task| (0+256)+8)))^0
 12552  1E00  301E               	movlw	high _secret_Main
 12553  1E01  00A9               	movwf	((low ((_secret_task| (0+256)+8)))^0+1)
 12554                           
 12555                           ;main.c: 275: secret_task.taskExitCallback = secret_Exit;
 12556  1E02  3000               	movlw	0
 12557  1E03  00A6               	movwf	(low ((_secret_task| (0+256)+6)))^0
 12558  1E04  3000               	movlw	0
 12559  1E05  00A7               	movwf	((low ((_secret_task| (0+256)+6)))^0+1)
 12560                           
 12561                           ;main.c: 276: secret_task.taskInterval = 10;
 12562  1E06  300A               	movlw	10
 12563  1E07  00AA               	movwf	(_secret_task^(0+256)+10)
 12564  1E08  3000               	movlw	0
 12565  1E09  00AB               	movwf	(_secret_task^(0+256)+11)
 12566                           
 12567                           ;main.c: 279: secret_value = SECRET_VALUE_INIT;
 12568  1E0A  0021               	movlb	1	; select bank1
 12569  1E0B  01C5               	clrf	_secret_value^(0+128)
 12570  1E0C  01C6               	clrf	(_secret_value+1)^(0+128)
 12571                           
 12572                           ;main.c: 282: currentTask = FLASHY_TASK;
 12573  1E0D  3002               	movlw	2
 12574  1E0E  00B8               	movwf	_currentTask^(0+128)
 12575  1E0F  3000               	movlw	0
 12576  1E10  00B9               	movwf	(_currentTask^(0+128)+1)
 12577                           
 12578                           ;main.c: 283: scheduler_TaskAdd(&schedulerInst, &flashy_task);
 12579  1E11  3054               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 12580  1E12  0020               	movlb	0	; select bank0
 12581  1E13  00EE               	movwf	??_main
 12582  1E14  086E               	movf	??_main,w
 12583  1E15  00BD               	movwf	scheduler_TaskAdd@task
 12584  1E16  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12585  1E17  319B  23AF  319D   	fcall	_scheduler_TaskAdd
 12586                           
 12587                           ;main.c: 284: scheduler_TaskAdd(&schedulerInst, &menu_task);
 12588  1E1A  3047               	movlw	(low (_menu_task| (0+256)))& (0+255)
 12589  1E1B  0020               	movlb	0	; select bank0
 12590  1E1C  00EE               	movwf	??_main
 12591  1E1D  086E               	movf	??_main,w
 12592  1E1E  00BD               	movwf	scheduler_TaskAdd@task
 12593  1E1F  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12594  1E20  319B  23AF  319D   	fcall	_scheduler_TaskAdd
 12595                           
 12596                           ;main.c: 285: scheduler_TaskAdd(&schedulerInst, &slot_task);
 12597  1E23  303A               	movlw	(low (_slot_task| (0+256)))& (0+255)
 12598  1E24  0020               	movlb	0	; select bank0
 12599  1E25  00EE               	movwf	??_main
 12600  1E26  086E               	movf	??_main,w
 12601  1E27  00BD               	movwf	scheduler_TaskAdd@task
 12602  1E28  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12603  1E29  319B  23AF  319D   	fcall	_scheduler_TaskAdd
 12604                           
 12605                           ;main.c: 286: scheduler_TaskAdd(&schedulerInst, &locked_task);
 12606  1E2C  302D               	movlw	(low (_locked_task| (0+256)))& (0+255)
 12607  1E2D  0020               	movlb	0	; select bank0
 12608  1E2E  00EE               	movwf	??_main
 12609  1E2F  086E               	movf	??_main,w
 12610  1E30  00BD               	movwf	scheduler_TaskAdd@task
 12611  1E31  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12612  1E32  319B  23AF  319D   	fcall	_scheduler_TaskAdd
 12613                           
 12614                           ;main.c: 287: scheduler_TaskAdd(&schedulerInst, &secret_task);
 12615  1E35  3020               	movlw	(low (_secret_task| (0+256)))& (0+255)
 12616  1E36  0020               	movlb	0	; select bank0
 12617  1E37  00EE               	movwf	??_main
 12618  1E38  086E               	movf	??_main,w
 12619  1E39  00BD               	movwf	scheduler_TaskAdd@task
 12620  1E3A  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12621  1E3B  319B  23AF  319D   	fcall	_scheduler_TaskAdd
 12622  1E3E                     l8842:	
 12623                           ;main.c: 289: while(1){
 12624                           
 12625                           
 12626                           ;main.c: 290: schedulerExecute(&schedulerInst);
 12627  1E3E  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12628  1E3F  319C  2429  319D   	fcall	_schedulerExecute
 12629  1E42  2E3E               	goto	l8842
 12630  1E43                     __end_of_main:	
 12631                           
 12632                           	psect	text1
 12633  2389                     __ptext1:	
 12634 ;; *************** function _scheduler_TaskInit *****************
 12635 ;; Defined at:
 12636 ;;		line 36 in file "cooperative_scheduler.c"
 12637 ;; Parameters:    Size  Location     Type
 12638 ;;  task            1    wreg     PTR struct t_schedulerTa
 12639 ;;		 -> secret_task(13), locked_task(13), slot_task(13), menu_task(13), 
 12640 ;;		 -> flashy_task(13), 
 12641 ;; Auto vars:     Size  Location     Type
 12642 ;;  task            1    1[COMMON] PTR struct t_schedulerTa
 12643 ;;		 -> secret_task(13), locked_task(13), slot_task(13), menu_task(13), 
 12644 ;;		 -> flashy_task(13), 
 12645 ;; Return value:  Size  Location     Type
 12646 ;;                  1    wreg      void 
 12647 ;; Registers used:
 12648 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12649 ;; Tracked objects:
 12650 ;;		On entry : 0/0
 12651 ;;		On exit  : 0/0
 12652 ;;		Unchanged: 0/0
 12653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12657 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12658 ;;Total ram usage:        1 bytes
 12659 ;; Hardware stack levels used:    1
 12660 ;; Hardware stack levels required when called:    4
 12661 ;; This function calls:
 12662 ;;		Nothing
 12663 ;; This function is called by:
 12664 ;;		_main
 12665 ;; This function uses a non-reentrant model
 12666 ;;
 12667                           
 12668                           
 12669                           ;psect for function _scheduler_TaskInit
 12670  2389                     _scheduler_TaskInit:	
 12671                           
 12672                           ;incstack = 0
 12673                           ; Regs used in _scheduler_TaskInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 12674                           ;scheduler_TaskInit@task stored from wreg
 12675  2389  00F1               	movwf	scheduler_TaskInit@task
 12676                           
 12677                           ;cooperative_scheduler.c: 37: task->systemTickLastExecuted = 0;
 12678  238A  0871               	movf	scheduler_TaskInit@task,w
 12679  238B  0086               	movwf	6
 12680  238C  3001               	movlw	1	; select bank2/3
 12681  238D  0087               	movwf	7
 12682  238E  3000               	movlw	0
 12683  238F  3FC0               	movwi [0]fsr1
 12684  2390  3FC1               	movwi [1]fsr1
 12685                           
 12686                           ;cooperative_scheduler.c: 38: task->taskData = (0);
 12687  2391  0871               	movf	scheduler_TaskInit@task,w
 12688  2392  3E02               	addlw	2
 12689  2393  0086               	movwf	6
 12690  2394  3001               	movlw	1	; select bank2/3
 12691  2395  0087               	movwf	7
 12692  2396  3000               	movlw	0
 12693  2397  3FC0               	movwi [0]fsr1
 12694  2398  3FC1               	movwi [1]fsr1
 12695                           
 12696                           ;cooperative_scheduler.c: 39: task->taskInitCallback = (0);
 12697  2399  0871               	movf	scheduler_TaskInit@task,w
 12698  239A  3E04               	addlw	4
 12699  239B  0086               	movwf	6
 12700  239C  3001               	movlw	1	; select bank2/3
 12701  239D  0087               	movwf	7
 12702  239E  3000               	movlw	0
 12703  239F  3FC0               	movwi [0]fsr1
 12704  23A0  3FC1               	movwi [1]fsr1
 12705                           
 12706                           ;cooperative_scheduler.c: 40: task->taskExitCallback = (0);
 12707  23A1  0871               	movf	scheduler_TaskInit@task,w
 12708  23A2  3E06               	addlw	6
 12709  23A3  0086               	movwf	6
 12710  23A4  3001               	movlw	1	; select bank2/3
 12711  23A5  0087               	movwf	7
 12712  23A6  3000               	movlw	0
 12713  23A7  3FC0               	movwi [0]fsr1
 12714  23A8  3FC1               	movwi [1]fsr1
 12715                           
 12716                           ;cooperative_scheduler.c: 41: task->taskExecuteCallback = (0);
 12717  23A9  0871               	movf	scheduler_TaskInit@task,w
 12718  23AA  3E08               	addlw	8
 12719  23AB  0086               	movwf	6
 12720  23AC  3001               	movlw	1	; select bank2/3
 12721  23AD  0087               	movwf	7
 12722  23AE  3000               	movlw	0
 12723  23AF  3FC0               	movwi [0]fsr1
 12724  23B0  3FC1               	movwi [1]fsr1
 12725                           
 12726                           ;cooperative_scheduler.c: 42: task->taskInterval = 65535;
 12727  23B1  0871               	movf	scheduler_TaskInit@task,w
 12728  23B2  3E0A               	addlw	10
 12729  23B3  0086               	movwf	6
 12730  23B4  3001               	movlw	1	; select bank2/3
 12731  23B5  0087               	movwf	7
 12732  23B6  30FF               	movlw	255
 12733  23B7  3FC0               	movwi [0]fsr1
 12734  23B8  30FF               	movlw	255
 12735  23B9  3FC1               	movwi [1]fsr1
 12736                           
 12737                           ;cooperative_scheduler.c: 43: task->taskId = -1;
 12738  23BA  0871               	movf	scheduler_TaskInit@task,w
 12739  23BB  3E0C               	addlw	12
 12740  23BC  0086               	movwf	6
 12741  23BD  3001               	movlw	1	; select bank2/3
 12742  23BE  0087               	movwf	7
 12743  23BF  0181               	clrf	1
 12744  23C0  0381               	decf	1,f
 12745  23C1  0008               	return
 12746  23C2                     __end_of_scheduler_TaskInit:	
 12747                           
 12748                           	psect	text2
 12749  1BAF                     __ptext2:	
 12750 ;; *************** function _scheduler_TaskAdd *****************
 12751 ;; Defined at:
 12752 ;;		line 46 in file "cooperative_scheduler.c"
 12753 ;; Parameters:    Size  Location     Type
 12754 ;;  scheduler       1    wreg     PTR struct t_scheduler
 12755 ;;		 -> schedulerInst(18), 
 12756 ;;  task            1   29[BANK0 ] PTR struct t_schedulerTa
 12757 ;;		 -> secret_task(13), locked_task(13), slot_task(13), menu_task(13), 
 12758 ;;		 -> flashy_task(13), 
 12759 ;; Auto vars:     Size  Location     Type
 12760 ;;  scheduler       1   36[BANK0 ] PTR struct t_scheduler
 12761 ;;		 -> schedulerInst(18), 
 12762 ;;  k               1   37[BANK0 ] unsigned char 
 12763 ;; Return value:  Size  Location     Type
 12764 ;;                  1    wreg      char 
 12765 ;; Registers used:
 12766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12767 ;; Tracked objects:
 12768 ;;		On entry : 0/0
 12769 ;;		On exit  : 0/0
 12770 ;;		Unchanged: 0/0
 12771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12772 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12773 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12774 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12775 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12776 ;;Total ram usage:        9 bytes
 12777 ;; Hardware stack levels used:    1
 12778 ;; Hardware stack levels required when called:   11
 12779 ;; This function calls:
 12780 ;;		Absolute function
 12781 ;;		_flashy_Init
 12782 ;;		_locked_Init
 12783 ;;		_menu_Init
 12784 ;;		_secret_Init
 12785 ;;		_slot_Init
 12786 ;; This function is called by:
 12787 ;;		_main
 12788 ;; This function uses a non-reentrant model
 12789 ;;
 12790                           
 12791                           
 12792                           ;psect for function _scheduler_TaskAdd
 12793  1BAF                     _scheduler_TaskAdd:	
 12794                           
 12795                           ;incstack = 0
 12796                           ; Regs used in _scheduler_TaskAdd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12797                           ;scheduler_TaskAdd@scheduler stored from wreg
 12798  1BAF  0020               	movlb	0	; select bank0
 12799  1BB0  00C4               	movwf	scheduler_TaskAdd@scheduler
 12800                           
 12801                           ;cooperative_scheduler.c: 47: u8 k;
 12802                           ;cooperative_scheduler.c: 48: for (k = 0; k < 16; k++) {
 12803  1BB1  01C5               	clrf	scheduler_TaskAdd@k
 12804  1BB2  3010               	movlw	16
 12805  1BB3  0245               	subwf	scheduler_TaskAdd@k,w
 12806  1BB4  1803               	btfsc	3,0
 12807  1BB5  2C21               	goto	l8656
 12808  1BB6                     l8642:	
 12809                           
 12810                           ;cooperative_scheduler.c: 49: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 12811  1BB6  0844               	movf	scheduler_TaskAdd@scheduler,w
 12812  1BB7  3E10               	addlw	16
 12813  1BB8  0086               	movwf	6
 12814  1BB9  3001               	movlw	1	; select bank2/3
 12815  1BBA  0087               	movwf	7
 12816  1BBB  3F40               	moviw [0]fsr1
 12817  1BBC  00BE               	movwf	??_scheduler_TaskAdd
 12818  1BBD  3F41               	moviw [1]fsr1
 12819  1BBE  00BF               	movwf	??_scheduler_TaskAdd+1
 12820  1BBF  3001               	movlw	1
 12821  1BC0  00C0               	movwf	??_scheduler_TaskAdd+2
 12822  1BC1  3000               	movlw	0
 12823  1BC2  00C1               	movwf	??_scheduler_TaskAdd+3
 12824  1BC3  0A45               	incf	scheduler_TaskAdd@k,w
 12825  1BC4  2BC7               	goto	u5554
 12826  1BC5                     u5555:	
 12827  1BC5  35C0               	lslf	??_scheduler_TaskAdd+2,f
 12828  1BC6  0DC1               	rlf	??_scheduler_TaskAdd+3,f
 12829  1BC7                     u5554:	
 12830  1BC7  0B89               	decfsz	9,f
 12831  1BC8  2BC5               	goto	u5555
 12832  1BC9  083E               	movf	??_scheduler_TaskAdd,w
 12833  1BCA  0540               	andwf	??_scheduler_TaskAdd+2,w
 12834  1BCB  00C2               	movwf	??_scheduler_TaskAdd+4
 12835  1BCC  083F               	movf	??_scheduler_TaskAdd+1,w
 12836  1BCD  0541               	andwf	??_scheduler_TaskAdd+3,w
 12837  1BCE  00C3               	movwf	??_scheduler_TaskAdd+5
 12838  1BCF  0842               	movf	??_scheduler_TaskAdd+4,w
 12839  1BD0  0443               	iorwf	??_scheduler_TaskAdd+5,w
 12840  1BD1  1D03               	btfss	3,2
 12841  1BD2  2C19               	goto	l8652
 12842                           
 12843                           ;cooperative_scheduler.c: 50: scheduler->tasks[k] = task;
 12844  1BD3  083D               	movf	scheduler_TaskAdd@task,w
 12845  1BD4  00BE               	movwf	??_scheduler_TaskAdd
 12846  1BD5  0845               	movf	scheduler_TaskAdd@k,w
 12847  1BD6  0744               	addwf	scheduler_TaskAdd@scheduler,w
 12848  1BD7  00BF               	movwf	??_scheduler_TaskAdd+1
 12849  1BD8  083F               	movf	??_scheduler_TaskAdd+1,w
 12850  1BD9  0086               	movwf	6
 12851  1BDA  3001               	movlw	1	; select bank2/3
 12852  1BDB  0087               	movwf	7
 12853  1BDC  083E               	movf	??_scheduler_TaskAdd,w
 12854  1BDD  0081               	movwf	1
 12855                           
 12856                           ;cooperative_scheduler.c: 51: scheduler->taskEntryVector |= (1 << k);
 12857  1BDE  3001               	movlw	1
 12858  1BDF  00BE               	movwf	??_scheduler_TaskAdd
 12859  1BE0  3000               	movlw	0
 12860  1BE1  00BF               	movwf	??_scheduler_TaskAdd+1
 12861  1BE2  0A45               	incf	scheduler_TaskAdd@k,w
 12862  1BE3  2BE6               	goto	u5574
 12863  1BE4                     u5575:	
 12864  1BE4  35BE               	lslf	??_scheduler_TaskAdd,f
 12865  1BE5  0DBF               	rlf	??_scheduler_TaskAdd+1,f
 12866  1BE6                     u5574:	
 12867  1BE6  0B89               	decfsz	9,f
 12868  1BE7  2BE4               	goto	u5575
 12869  1BE8  0844               	movf	scheduler_TaskAdd@scheduler,w
 12870  1BE9  3E10               	addlw	16
 12871  1BEA  0086               	movwf	6
 12872  1BEB  3001               	movlw	1	; select bank2/3
 12873  1BEC  0087               	movwf	7
 12874  1BED  083E               	movf	??_scheduler_TaskAdd,w
 12875  1BEE  0481               	iorwf	1,f
 12876  1BEF  3141               	addfsr 1,1
 12877  1BF0  083F               	movf	??_scheduler_TaskAdd+1,w
 12878  1BF1  0481               	iorwf	1,f
 12879                           
 12880                           ;cooperative_scheduler.c: 53: if (task->taskInitCallback != (0)) {
 12881  1BF2  083D               	movf	scheduler_TaskAdd@task,w
 12882  1BF3  3E04               	addlw	4
 12883  1BF4  0086               	movwf	6
 12884  1BF5  3001               	movlw	1	; select bank2/3
 12885  1BF6  0087               	movwf	7
 12886  1BF7  0016               	moviw fsr1++
 12887  1BF8  0401               	iorwf	1,w
 12888  1BF9  1903               	btfsc	3,2
 12889  1BFA  2C0E               	goto	l8648
 12890                           
 12891                           ;cooperative_scheduler.c: 54: task->taskInitCallback (task->taskData);
 12892  1BFB  083D               	movf	scheduler_TaskAdd@task,w
 12893  1BFC  3E02               	addlw	2
 12894  1BFD  0086               	movwf	6
 12895  1BFE  3001               	movlw	1	; select bank2/3
 12896  1BFF  0087               	movwf	7
 12897  1C00  3F40               	moviw [0]fsr1
 12898  1C01  00B9               	movwf	secret_Init@taskData
 12899  1C02  3F41               	moviw [1]fsr1
 12900  1C03  00BA               	movwf	secret_Init@taskData+1
 12901  1C04  083D               	movf	scheduler_TaskAdd@task,w
 12902  1C05  3E04               	addlw	4
 12903  1C06  0086               	movwf	6
 12904  1C07  3001               	movlw	1	; select bank2/3
 12905  1C08  0087               	movwf	7
 12906  1C09  3F41               	moviw [1]fsr1
 12907  1C0A  008A               	movwf	10
 12908  1C0B  3F40               	moviw [0]fsr1
 12909  1C0C  000A               	callw
 12910  1C0D  319B               	pagesel	$
 12911  1C0E                     l8648:	
 12912                           
 12913                           ;cooperative_scheduler.c: 55: }
 12914                           ;cooperative_scheduler.c: 57: task->taskId = (s8) k;
 12915  1C0E  0020               	movlb	0	; select bank0
 12916  1C0F  0845               	movf	scheduler_TaskAdd@k,w
 12917  1C10  00BE               	movwf	??_scheduler_TaskAdd
 12918  1C11  083D               	movf	scheduler_TaskAdd@task,w
 12919  1C12  3E0C               	addlw	12
 12920  1C13  0086               	movwf	6
 12921  1C14  3001               	movlw	1	; select bank2/3
 12922  1C15  0087               	movwf	7
 12923  1C16  083E               	movf	??_scheduler_TaskAdd,w
 12924  1C17  0081               	movwf	1
 12925                           
 12926                           ;cooperative_scheduler.c: 58: return k;
 12927                           ;	Return value of _scheduler_TaskAdd is never used
 12928  1C18  0008               	return
 12929  1C19                     l8652:	
 12930  1C19  3001               	movlw	1
 12931  1C1A  00BE               	movwf	??_scheduler_TaskAdd
 12932  1C1B  083E               	movf	??_scheduler_TaskAdd,w
 12933  1C1C  07C5               	addwf	scheduler_TaskAdd@k,f
 12934  1C1D  3010               	movlw	16
 12935  1C1E  0245               	subwf	scheduler_TaskAdd@k,w
 12936  1C1F  1C03               	skipc
 12937  1C20  2BB6               	goto	l8642
 12938  1C21                     l8656:	
 12939                           
 12940                           ;cooperative_scheduler.c: 59: }
 12941                           ;cooperative_scheduler.c: 60: }
 12942                           ;cooperative_scheduler.c: 62: task->taskId = -1;
 12943  1C21  083D               	movf	scheduler_TaskAdd@task,w
 12944  1C22  3E0C               	addlw	12
 12945  1C23  0086               	movwf	6
 12946  1C24  3001               	movlw	1	; select bank2/3
 12947  1C25  0087               	movwf	7
 12948  1C26  0181               	clrf	1
 12949  1C27  0381               	decf	1,f
 12950  1C28  0008               	return
 12951  1C29                     __end_of_scheduler_TaskAdd:	
 12952                           ;cooperative_scheduler.c: 63: return -1;
 12953                           ;	Return value of _scheduler_TaskAdd is never used
 12954                           
 12955                           
 12956                           	psect	text3
 12957  180C                     __ptext3:	
 12958 ;; *************** function _secret_Init *****************
 12959 ;; Defined at:
 12960 ;;		line 51 in file "secret_task.c"
 12961 ;; Parameters:    Size  Location     Type
 12962 ;;  taskData        2   25[BANK0 ] PTR void 
 12963 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 12964 ;;		 -> flashy_TaskData(30), NULL(0), 
 12965 ;; Auto vars:     Size  Location     Type
 12966 ;;  data            2   27[BANK0 ] PTR struct t_secret_task
 12967 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 12968 ;;		 -> flashy_TaskData(30), NULL(0), 
 12969 ;; Return value:  Size  Location     Type
 12970 ;;                  1    wreg      void 
 12971 ;; Registers used:
 12972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12973 ;; Tracked objects:
 12974 ;;		On entry : 0/0
 12975 ;;		On exit  : 0/0
 12976 ;;		Unchanged: 0/0
 12977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12978 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12979 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12981 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12982 ;;Total ram usage:        4 bytes
 12983 ;; Hardware stack levels used:    1
 12984 ;; Hardware stack levels required when called:   10
 12985 ;; This function calls:
 12986 ;;		_nullifyBadge_segDisplayErase
 12987 ;;		_nullifyBadge_segDisplayRegister
 12988 ;;		_nullifyBadge_userLedsClr
 12989 ;;		_nullifyBadge_userLedsRegister
 12990 ;; This function is called by:
 12991 ;;		_main
 12992 ;;		_scheduler_TaskAdd
 12993 ;; This function uses a non-reentrant model
 12994 ;;
 12995                           
 12996                           
 12997                           ;psect for function _secret_Init
 12998  180C                     _secret_Init:	
 12999                           
 13000                           ;secret_task.c: 52: struct t_secret_taskData *data = (struct t_secret_taskData *) taskDa
      +                          ta;
 13001                           
 13002                           ;incstack = 0
 13003                           ; Regs used in _secret_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13004  180C  0020               	movlb	0	; select bank0
 13005  180D  083A               	movf	secret_Init@taskData+1,w
 13006  180E  00BC               	movwf	secret_Init@data+1
 13007  180F  0839               	movf	secret_Init@taskData,w
 13008  1810  00BB               	movwf	secret_Init@data
 13009                           
 13010                           ;secret_task.c: 55: nullifyBadge_userLedsRegister(data->badge);
 13011  1811  083B               	movf	secret_Init@data,w
 13012  1812  0086               	movwf	6
 13013  1813  083C               	movf	secret_Init@data+1,w
 13014  1814  0087               	movwf	7
 13015  1815  0801               	movf	1,w
 13016  1816  31A0  2000  3198   	fcall	_nullifyBadge_userLedsRegister
 13017                           
 13018                           ;secret_task.c: 56: nullifyBadge_userLedsClr(data->badge);
 13019  1819  0020               	movlb	0	; select bank0
 13020  181A  083B               	movf	secret_Init@data,w
 13021  181B  0086               	movwf	6
 13022  181C  083C               	movf	secret_Init@data+1,w
 13023  181D  0087               	movwf	7
 13024  181E  0801               	movf	1,w
 13025  181F  31AE  260F  3198   	fcall	_nullifyBadge_userLedsClr
 13026                           
 13027                           ;secret_task.c: 57: nullifyBadge_segDisplayRegister(data->badge);
 13028  1822  0020               	movlb	0	; select bank0
 13029  1823  083B               	movf	secret_Init@data,w
 13030  1824  0086               	movwf	6
 13031  1825  083C               	movf	secret_Init@data+1,w
 13032  1826  0087               	movwf	7
 13033  1827  0801               	movf	1,w
 13034  1828  31AE  261D  3198   	fcall	_nullifyBadge_segDisplayRegister
 13035                           
 13036                           ;secret_task.c: 58: nullifyBadge_segDisplayErase(data->badge);
 13037  182B  0020               	movlb	0	; select bank0
 13038  182C  083B               	movf	secret_Init@data,w
 13039  182D  0086               	movwf	6
 13040  182E  083C               	movf	secret_Init@data+1,w
 13041  182F  0087               	movwf	7
 13042  1830  0801               	movf	1,w
 13043  1831  31AE  2609  3198   	fcall	_nullifyBadge_segDisplayErase
 13044                           
 13045                           ;secret_task.c: 61: data->delayTickCount = 300;
 13046  1834  0020               	movlb	0	; select bank0
 13047  1835  083B               	movf	secret_Init@data,w
 13048  1836  0086               	movwf	6
 13049  1837  083C               	movf	secret_Init@data+1,w
 13050  1838  0087               	movwf	7
 13051  1839  3142               	addfsr 1,2
 13052  183A  302C               	movlw	44
 13053  183B  3FC0               	movwi [0]fsr1
 13054  183C  3001               	movlw	1
 13055  183D  3FC1               	movwi [1]fsr1
 13056                           
 13057                           ;secret_task.c: 62: data->holdCountA = 0;
 13058  183E  083B               	movf	secret_Init@data,w
 13059  183F  0086               	movwf	6
 13060  1840  083C               	movf	secret_Init@data+1,w
 13061  1841  0087               	movwf	7
 13062  1842  3144               	addfsr 1,4
 13063  1843  3000               	movlw	0
 13064  1844  3FC0               	movwi [0]fsr1
 13065  1845  3FC1               	movwi [1]fsr1
 13066                           
 13067                           ;secret_task.c: 63: data->holdCountB = 0;
 13068  1846  083B               	movf	secret_Init@data,w
 13069  1847  0086               	movwf	6
 13070  1848  083C               	movf	secret_Init@data+1,w
 13071  1849  0087               	movwf	7
 13072  184A  3146               	addfsr 1,6
 13073  184B  3000               	movlw	0
 13074  184C  3FC0               	movwi [0]fsr1
 13075  184D  3FC1               	movwi [1]fsr1
 13076                           
 13077                           ;secret_task.c: 64: data->holdCountX = 0;
 13078  184E  083B               	movf	secret_Init@data,w
 13079  184F  0086               	movwf	6
 13080  1850  083C               	movf	secret_Init@data+1,w
 13081  1851  0087               	movwf	7
 13082  1852  3148               	addfsr 1,8
 13083  1853  3000               	movlw	0
 13084  1854  3FC0               	movwi [0]fsr1
 13085  1855  3FC1               	movwi [1]fsr1
 13086                           
 13087                           ;secret_task.c: 65: data->holdCountY = 0;
 13088  1856  083B               	movf	secret_Init@data,w
 13089  1857  0086               	movwf	6
 13090  1858  083C               	movf	secret_Init@data+1,w
 13091  1859  0087               	movwf	7
 13092  185A  314A               	addfsr 1,10
 13093  185B  3000               	movlw	0
 13094  185C  3FC0               	movwi [0]fsr1
 13095  185D  3FC1               	movwi [1]fsr1
 13096                           
 13097                           ;secret_task.c: 66: data->noholdCount = 0;
 13098  185E  083B               	movf	secret_Init@data,w
 13099  185F  0086               	movwf	6
 13100  1860  083C               	movf	secret_Init@data+1,w
 13101  1861  0087               	movwf	7
 13102  1862  314C               	addfsr 1,12
 13103  1863  3000               	movlw	0
 13104  1864  3FC0               	movwi [0]fsr1
 13105  1865  3FC1               	movwi [1]fsr1
 13106  1866  0008               	return
 13107  1867                     __end_of_secret_Init:	
 13108                           
 13109                           	psect	text4
 13110  192B                     __ptext4:	
 13111 ;; *************** function _locked_Init *****************
 13112 ;; Defined at:
 13113 ;;		line 65 in file "locked_task.c"
 13114 ;; Parameters:    Size  Location     Type
 13115 ;;  taskData        2   25[BANK0 ] PTR void 
 13116 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 13117 ;;		 -> flashy_TaskData(30), NULL(0), 
 13118 ;; Auto vars:     Size  Location     Type
 13119 ;;  data            2   27[BANK0 ] PTR struct t_locked_task
 13120 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 13121 ;;		 -> flashy_TaskData(30), NULL(0), 
 13122 ;; Return value:  Size  Location     Type
 13123 ;;                  1    wreg      void 
 13124 ;; Registers used:
 13125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13126 ;; Tracked objects:
 13127 ;;		On entry : 0/0
 13128 ;;		On exit  : 0/0
 13129 ;;		Unchanged: 0/0
 13130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13131 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13132 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13134 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13135 ;;Total ram usage:        4 bytes
 13136 ;; Hardware stack levels used:    1
 13137 ;; Hardware stack levels required when called:   10
 13138 ;; This function calls:
 13139 ;;		_locked_lock_leds
 13140 ;;		_nullifyBadge_segDisplayErase
 13141 ;;		_nullifyBadge_segDisplayRegister
 13142 ;;		_nullifyBadge_userLedsClr
 13143 ;;		_nullifyBadge_userLedsRegister
 13144 ;; This function is called by:
 13145 ;;		_main
 13146 ;;		_scheduler_TaskAdd
 13147 ;; This function uses a non-reentrant model
 13148 ;;
 13149                           
 13150                           
 13151                           ;psect for function _locked_Init
 13152  192B                     _locked_Init:	
 13153                           
 13154                           ;locked_task.c: 66: struct t_locked_taskData *data = (struct t_locked_taskData *) taskDa
      +                          ta;
 13155                           
 13156                           ;incstack = 0
 13157                           ; Regs used in _locked_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13158  192B  0020               	movlb	0	; select bank0
 13159  192C  083A               	movf	locked_Init@taskData+1,w
 13160  192D  00BC               	movwf	locked_Init@data+1
 13161  192E  0839               	movf	locked_Init@taskData,w
 13162  192F  00BB               	movwf	locked_Init@data
 13163                           
 13164                           ;locked_task.c: 69: nullifyBadge_userLedsRegister(data->badge);
 13165  1930  083B               	movf	locked_Init@data,w
 13166  1931  0086               	movwf	6
 13167  1932  083C               	movf	locked_Init@data+1,w
 13168  1933  0087               	movwf	7
 13169  1934  0801               	movf	1,w
 13170  1935  31A0  2000  3199   	fcall	_nullifyBadge_userLedsRegister
 13171                           
 13172                           ;locked_task.c: 70: nullifyBadge_userLedsClr(data->badge);
 13173  1938  0020               	movlb	0	; select bank0
 13174  1939  083B               	movf	locked_Init@data,w
 13175  193A  0086               	movwf	6
 13176  193B  083C               	movf	locked_Init@data+1,w
 13177  193C  0087               	movwf	7
 13178  193D  0801               	movf	1,w
 13179  193E  31AE  260F  3199   	fcall	_nullifyBadge_userLedsClr
 13180                           
 13181                           ;locked_task.c: 71: nullifyBadge_segDisplayRegister(data->badge);
 13182  1941  0020               	movlb	0	; select bank0
 13183  1942  083B               	movf	locked_Init@data,w
 13184  1943  0086               	movwf	6
 13185  1944  083C               	movf	locked_Init@data+1,w
 13186  1945  0087               	movwf	7
 13187  1946  0801               	movf	1,w
 13188  1947  31AE  261D  3199   	fcall	_nullifyBadge_segDisplayRegister
 13189                           
 13190                           ;locked_task.c: 72: nullifyBadge_segDisplayErase(data->badge);
 13191  194A  0020               	movlb	0	; select bank0
 13192  194B  083B               	movf	locked_Init@data,w
 13193  194C  0086               	movwf	6
 13194  194D  083C               	movf	locked_Init@data+1,w
 13195  194E  0087               	movwf	7
 13196  194F  0801               	movf	1,w
 13197  1950  31AE  2609  3199   	fcall	_nullifyBadge_segDisplayErase
 13198                           
 13199                           ;locked_task.c: 75: locked_lock_leds();
 13200  1953  31A0  202A  3199   	fcall	_locked_lock_leds
 13201                           
 13202                           ;locked_task.c: 76: data->state = LOCKED_LOCKED_STATE;
 13203  1956  0020               	movlb	0	; select bank0
 13204  1957  083B               	movf	locked_Init@data,w
 13205  1958  0086               	movwf	6
 13206  1959  083C               	movf	locked_Init@data+1,w
 13207  195A  0087               	movwf	7
 13208  195B  314D               	addfsr 1,13
 13209  195C  0181               	clrf	1
 13210                           
 13211                           ;locked_task.c: 77: data->delayTickCount = 0;
 13212  195D  083B               	movf	locked_Init@data,w
 13213  195E  0086               	movwf	6
 13214  195F  083C               	movf	locked_Init@data+1,w
 13215  1960  0087               	movwf	7
 13216  1961  3141               	addfsr 1,1
 13217  1962  3000               	movlw	0
 13218  1963  3FC0               	movwi [0]fsr1
 13219  1964  3FC1               	movwi [1]fsr1
 13220                           
 13221                           ;locked_task.c: 78: data->holdCountA = 0;
 13222  1965  083B               	movf	locked_Init@data,w
 13223  1966  0086               	movwf	6
 13224  1967  083C               	movf	locked_Init@data+1,w
 13225  1968  0087               	movwf	7
 13226  1969  3143               	addfsr 1,3
 13227  196A  3000               	movlw	0
 13228  196B  3FC0               	movwi [0]fsr1
 13229  196C  3FC1               	movwi [1]fsr1
 13230                           
 13231                           ;locked_task.c: 79: data->holdCountB = 0;
 13232  196D  083B               	movf	locked_Init@data,w
 13233  196E  0086               	movwf	6
 13234  196F  083C               	movf	locked_Init@data+1,w
 13235  1970  0087               	movwf	7
 13236  1971  3145               	addfsr 1,5
 13237  1972  3000               	movlw	0
 13238  1973  3FC0               	movwi [0]fsr1
 13239  1974  3FC1               	movwi [1]fsr1
 13240                           
 13241                           ;locked_task.c: 80: data->holdCountX = 0;
 13242  1975  083B               	movf	locked_Init@data,w
 13243  1976  0086               	movwf	6
 13244  1977  083C               	movf	locked_Init@data+1,w
 13245  1978  0087               	movwf	7
 13246  1979  3147               	addfsr 1,7
 13247  197A  3000               	movlw	0
 13248  197B  3FC0               	movwi [0]fsr1
 13249  197C  3FC1               	movwi [1]fsr1
 13250                           
 13251                           ;locked_task.c: 81: data->holdCountY = 0;
 13252  197D  083B               	movf	locked_Init@data,w
 13253  197E  0086               	movwf	6
 13254  197F  083C               	movf	locked_Init@data+1,w
 13255  1980  0087               	movwf	7
 13256  1981  3149               	addfsr 1,9
 13257  1982  3000               	movlw	0
 13258  1983  3FC0               	movwi [0]fsr1
 13259  1984  3FC1               	movwi [1]fsr1
 13260                           
 13261                           ;locked_task.c: 82: data->noholdCount = 0;
 13262  1985  083B               	movf	locked_Init@data,w
 13263  1986  0086               	movwf	6
 13264  1987  083C               	movf	locked_Init@data+1,w
 13265  1988  0087               	movwf	7
 13266  1989  314B               	addfsr 1,11
 13267  198A  3000               	movlw	0
 13268  198B  3FC0               	movwi [0]fsr1
 13269  198C  3FC1               	movwi [1]fsr1
 13270  198D  0008               	return
 13271  198E                     __end_of_locked_Init:	
 13272                           
 13273                           	psect	text5
 13274  18C9                     __ptext5:	
 13275 ;; *************** function _menu_Init *****************
 13276 ;; Defined at:
 13277 ;;		line 33 in file "menu_task.c"
 13278 ;; Parameters:    Size  Location     Type
 13279 ;;  taskData        2   25[BANK0 ] PTR void 
 13280 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 13281 ;;		 -> flashy_TaskData(30), NULL(0), 
 13282 ;; Auto vars:     Size  Location     Type
 13283 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 13284 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 13285 ;;		 -> flashy_TaskData(30), NULL(0), 
 13286 ;; Return value:  Size  Location     Type
 13287 ;;                  1    wreg      void 
 13288 ;; Registers used:
 13289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13290 ;; Tracked objects:
 13291 ;;		On entry : 0/0
 13292 ;;		On exit  : 0/0
 13293 ;;		Unchanged: 0/0
 13294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13295 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13296 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13298 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13299 ;;Total ram usage:        4 bytes
 13300 ;; Hardware stack levels used:    1
 13301 ;; Hardware stack levels required when called:   10
 13302 ;; This function calls:
 13303 ;;		_nullifyBadge_segDisplayErase
 13304 ;;		_nullifyBadge_segDisplayRegister
 13305 ;;		_nullifyBadge_userLedsClr
 13306 ;;		_nullifyBadge_userLedsRegister
 13307 ;; This function is called by:
 13308 ;;		_main
 13309 ;;		_scheduler_TaskAdd
 13310 ;; This function uses a non-reentrant model
 13311 ;;
 13312                           
 13313                           
 13314                           ;psect for function _menu_Init
 13315  18C9                     _menu_Init:	
 13316                           
 13317                           ;menu_task.c: 34: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 13318                           
 13319                           ;incstack = 0
 13320                           ; Regs used in _menu_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13321  18C9  0020               	movlb	0	; select bank0
 13322  18CA  083A               	movf	menu_Init@taskData+1,w
 13323  18CB  00BC               	movwf	menu_Init@data+1
 13324  18CC  0839               	movf	menu_Init@taskData,w
 13325  18CD  00BB               	movwf	menu_Init@data
 13326                           
 13327                           ;menu_task.c: 37: nullifyBadge_userLedsRegister(data->badge);
 13328  18CE  083B               	movf	menu_Init@data,w
 13329  18CF  0086               	movwf	6
 13330  18D0  083C               	movf	menu_Init@data+1,w
 13331  18D1  0087               	movwf	7
 13332  18D2  0801               	movf	1,w
 13333  18D3  31A0  2000  3198   	fcall	_nullifyBadge_userLedsRegister
 13334                           
 13335                           ;menu_task.c: 38: nullifyBadge_userLedsClr(data->badge);
 13336  18D6  0020               	movlb	0	; select bank0
 13337  18D7  083B               	movf	menu_Init@data,w
 13338  18D8  0086               	movwf	6
 13339  18D9  083C               	movf	menu_Init@data+1,w
 13340  18DA  0087               	movwf	7
 13341  18DB  0801               	movf	1,w
 13342  18DC  31AE  260F  3198   	fcall	_nullifyBadge_userLedsClr
 13343                           
 13344                           ;menu_task.c: 39: nullifyBadge_segDisplayRegister(data->badge);
 13345  18DF  0020               	movlb	0	; select bank0
 13346  18E0  083B               	movf	menu_Init@data,w
 13347  18E1  0086               	movwf	6
 13348  18E2  083C               	movf	menu_Init@data+1,w
 13349  18E3  0087               	movwf	7
 13350  18E4  0801               	movf	1,w
 13351  18E5  31AE  261D  3198   	fcall	_nullifyBadge_segDisplayRegister
 13352                           
 13353                           ;menu_task.c: 40: nullifyBadge_segDisplayErase(data->badge);
 13354  18E8  0020               	movlb	0	; select bank0
 13355  18E9  083B               	movf	menu_Init@data,w
 13356  18EA  0086               	movwf	6
 13357  18EB  083C               	movf	menu_Init@data+1,w
 13358  18EC  0087               	movwf	7
 13359  18ED  0801               	movf	1,w
 13360  18EE  31AE  2609  3198   	fcall	_nullifyBadge_segDisplayErase
 13361                           
 13362                           ;menu_task.c: 43: data->delayTickCount = 50;
 13363  18F1  0020               	movlb	0	; select bank0
 13364  18F2  083B               	movf	menu_Init@data,w
 13365  18F3  0086               	movwf	6
 13366  18F4  083C               	movf	menu_Init@data+1,w
 13367  18F5  0087               	movwf	7
 13368  18F6  3142               	addfsr 1,2
 13369  18F7  3032               	movlw	50
 13370  18F8  3FC0               	movwi [0]fsr1
 13371  18F9  3000               	movlw	0
 13372  18FA  3FC1               	movwi [1]fsr1
 13373                           
 13374                           ;menu_task.c: 44: data->holdCountA = 0;
 13375  18FB  083B               	movf	menu_Init@data,w
 13376  18FC  0086               	movwf	6
 13377  18FD  083C               	movf	menu_Init@data+1,w
 13378  18FE  0087               	movwf	7
 13379  18FF  3144               	addfsr 1,4
 13380  1900  3000               	movlw	0
 13381  1901  3FC0               	movwi [0]fsr1
 13382  1902  3FC1               	movwi [1]fsr1
 13383                           
 13384                           ;menu_task.c: 45: data->holdCountB = 0;
 13385  1903  083B               	movf	menu_Init@data,w
 13386  1904  0086               	movwf	6
 13387  1905  083C               	movf	menu_Init@data+1,w
 13388  1906  0087               	movwf	7
 13389  1907  3146               	addfsr 1,6
 13390  1908  3000               	movlw	0
 13391  1909  3FC0               	movwi [0]fsr1
 13392  190A  3FC1               	movwi [1]fsr1
 13393                           
 13394                           ;menu_task.c: 46: data->holdCountX = 0;
 13395  190B  083B               	movf	menu_Init@data,w
 13396  190C  0086               	movwf	6
 13397  190D  083C               	movf	menu_Init@data+1,w
 13398  190E  0087               	movwf	7
 13399  190F  3148               	addfsr 1,8
 13400  1910  3000               	movlw	0
 13401  1911  3FC0               	movwi [0]fsr1
 13402  1912  3FC1               	movwi [1]fsr1
 13403                           
 13404                           ;menu_task.c: 47: data->holdCountY = 0;
 13405  1913  083B               	movf	menu_Init@data,w
 13406  1914  0086               	movwf	6
 13407  1915  083C               	movf	menu_Init@data+1,w
 13408  1916  0087               	movwf	7
 13409  1917  314A               	addfsr 1,10
 13410  1918  3000               	movlw	0
 13411  1919  3FC0               	movwi [0]fsr1
 13412  191A  3FC1               	movwi [1]fsr1
 13413                           
 13414                           ;menu_task.c: 48: data->noholdCount = 0;
 13415  191B  083B               	movf	menu_Init@data,w
 13416  191C  0086               	movwf	6
 13417  191D  083C               	movf	menu_Init@data+1,w
 13418  191E  0087               	movwf	7
 13419  191F  314C               	addfsr 1,12
 13420  1920  3000               	movlw	0
 13421  1921  3FC0               	movwi [0]fsr1
 13422  1922  3FC1               	movwi [1]fsr1
 13423                           
 13424                           ;menu_task.c: 50: menu_option_idx = 0;
 13425  1923  0021               	movlb	1	; select bank1
 13426  1924  01B4               	clrf	_menu_option_idx^(0+128)
 13427  1925  01B5               	clrf	(_menu_option_idx+1)^(0+128)
 13428                           
 13429                           ;menu_task.c: 52: menu_option_size = sizeof(menu_option)/sizeof(menu_option[0]);
 13430  1926  3004               	movlw	4
 13431  1927  00B2               	movwf	_menu_option_size^(0+128)
 13432  1928  3000               	movlw	0
 13433  1929  00B3               	movwf	(_menu_option_size^(0+128)+1)
 13434  192A  0008               	return
 13435  192B                     __end_of_menu_Init:	
 13436                           
 13437                           	psect	text6
 13438  0749                     __ptext6:	
 13439 ;; *************** function _flashy_Init *****************
 13440 ;; Defined at:
 13441 ;;		line 50 in file "flashy_task.c"
 13442 ;; Parameters:    Size  Location     Type
 13443 ;;  taskData        2   25[BANK0 ] PTR void 
 13444 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 13445 ;;		 -> flashy_TaskData(30), NULL(0), 
 13446 ;; Auto vars:     Size  Location     Type
 13447 ;;  data            2   27[BANK0 ] PTR struct t_flashy_task
 13448 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 13449 ;;		 -> flashy_TaskData(30), NULL(0), 
 13450 ;; Return value:  Size  Location     Type
 13451 ;;                  1    wreg      void 
 13452 ;; Registers used:
 13453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13459 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13460 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13462 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13463 ;;Total ram usage:        4 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:   10
 13466 ;; This function calls:
 13467 ;;		_nullifyBadge_segDisplayErase
 13468 ;;		_nullifyBadge_segDisplayRegister
 13469 ;;		_nullifyBadge_userLedsClr
 13470 ;;		_nullifyBadge_userLedsRegister
 13471 ;; This function is called by:
 13472 ;;		_main
 13473 ;;		_scheduler_TaskAdd
 13474 ;; This function uses a non-reentrant model
 13475 ;;
 13476                           
 13477                           
 13478                           ;psect for function _flashy_Init
 13479  0749                     _flashy_Init:	
 13480                           
 13481                           ;flashy_task.c: 51: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskDa
      +                          ta;
 13482                           
 13483                           ;incstack = 0
 13484                           ; Regs used in _flashy_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13485  0749  0020               	movlb	0	; select bank0
 13486  074A  083A               	movf	flashy_Init@taskData+1,w
 13487  074B  00BC               	movwf	flashy_Init@data+1
 13488  074C  0839               	movf	flashy_Init@taskData,w
 13489  074D  00BB               	movwf	flashy_Init@data
 13490                           
 13491                           ;flashy_task.c: 54: nullifyBadge_userLedsRegister(data->badge);
 13492  074E  083B               	movf	flashy_Init@data,w
 13493  074F  0086               	movwf	6
 13494  0750  083C               	movf	flashy_Init@data+1,w
 13495  0751  0087               	movwf	7
 13496  0752  0801               	movf	1,w
 13497  0753  31A0  2000  3187   	fcall	_nullifyBadge_userLedsRegister
 13498                           
 13499                           ;flashy_task.c: 55: nullifyBadge_userLedsClr(data->badge);
 13500  0756  0020               	movlb	0	; select bank0
 13501  0757  083B               	movf	flashy_Init@data,w
 13502  0758  0086               	movwf	6
 13503  0759  083C               	movf	flashy_Init@data+1,w
 13504  075A  0087               	movwf	7
 13505  075B  0801               	movf	1,w
 13506  075C  31AE  260F  3187   	fcall	_nullifyBadge_userLedsClr
 13507                           
 13508                           ;flashy_task.c: 56: nullifyBadge_segDisplayRegister(data->badge);
 13509  075F  0020               	movlb	0	; select bank0
 13510  0760  083B               	movf	flashy_Init@data,w
 13511  0761  0086               	movwf	6
 13512  0762  083C               	movf	flashy_Init@data+1,w
 13513  0763  0087               	movwf	7
 13514  0764  0801               	movf	1,w
 13515  0765  31AE  261D  3187   	fcall	_nullifyBadge_segDisplayRegister
 13516                           
 13517                           ;flashy_task.c: 57: nullifyBadge_segDisplayErase(data->badge);
 13518  0768  0020               	movlb	0	; select bank0
 13519  0769  083B               	movf	flashy_Init@data,w
 13520  076A  0086               	movwf	6
 13521  076B  083C               	movf	flashy_Init@data+1,w
 13522  076C  0087               	movwf	7
 13523  076D  0801               	movf	1,w
 13524  076E  31AE  2609  3187   	fcall	_nullifyBadge_segDisplayErase
 13525                           
 13526                           ;flashy_task.c: 63: data->delayTickCount = 35;
 13527  0771  0020               	movlb	0	; select bank0
 13528  0772  083B               	movf	flashy_Init@data,w
 13529  0773  0086               	movwf	6
 13530  0774  083C               	movf	flashy_Init@data+1,w
 13531  0775  0087               	movwf	7
 13532  0776  3141               	addfsr 1,1
 13533  0777  3023               	movlw	35
 13534  0778  3FC0               	movwi [0]fsr1
 13535  0779  3000               	movlw	0
 13536  077A  3FC1               	movwi [1]fsr1
 13537                           
 13538                           ;flashy_task.c: 64: data->displayTickCount = 0;
 13539  077B  083B               	movf	flashy_Init@data,w
 13540  077C  0086               	movwf	6
 13541  077D  083C               	movf	flashy_Init@data+1,w
 13542  077E  0087               	movwf	7
 13543  077F  3144               	addfsr 1,4
 13544  0780  3000               	movlw	0
 13545  0781  3FC0               	movwi [0]fsr1
 13546  0782  3FC1               	movwi [1]fsr1
 13547                           
 13548                           ;flashy_task.c: 67: data->holdCountA = 0;
 13549  0783  083B               	movf	flashy_Init@data,w
 13550  0784  0086               	movwf	6
 13551  0785  083C               	movf	flashy_Init@data+1,w
 13552  0786  0087               	movwf	7
 13553  0787  314A               	addfsr 1,10
 13554  0788  3000               	movlw	0
 13555  0789  3FC0               	movwi [0]fsr1
 13556  078A  3FC1               	movwi [1]fsr1
 13557                           
 13558                           ;flashy_task.c: 68: data->holdCountB = 0;
 13559  078B  083B               	movf	flashy_Init@data,w
 13560  078C  0086               	movwf	6
 13561  078D  083C               	movf	flashy_Init@data+1,w
 13562  078E  0087               	movwf	7
 13563  078F  314C               	addfsr 1,12
 13564  0790  3000               	movlw	0
 13565  0791  3FC0               	movwi [0]fsr1
 13566  0792  3FC1               	movwi [1]fsr1
 13567                           
 13568                           ;flashy_task.c: 69: data->holdCountX = 0;
 13569  0793  083B               	movf	flashy_Init@data,w
 13570  0794  0086               	movwf	6
 13571  0795  083C               	movf	flashy_Init@data+1,w
 13572  0796  0087               	movwf	7
 13573  0797  314E               	addfsr 1,14
 13574  0798  3000               	movlw	0
 13575  0799  3FC0               	movwi [0]fsr1
 13576  079A  3FC1               	movwi [1]fsr1
 13577                           
 13578                           ;flashy_task.c: 70: data->holdCountY = 0;
 13579  079B  083B               	movf	flashy_Init@data,w
 13580  079C  0086               	movwf	6
 13581  079D  083C               	movf	flashy_Init@data+1,w
 13582  079E  0087               	movwf	7
 13583  079F  3150               	addfsr 1,16
 13584  07A0  3000               	movlw	0
 13585  07A1  3FC0               	movwi [0]fsr1
 13586  07A2  3FC1               	movwi [1]fsr1
 13587                           
 13588                           ;flashy_task.c: 71: data->holdCountXY = 0;
 13589  07A3  083B               	movf	flashy_Init@data,w
 13590  07A4  0086               	movwf	6
 13591  07A5  083C               	movf	flashy_Init@data+1,w
 13592  07A6  0087               	movwf	7
 13593  07A7  3152               	addfsr 1,18
 13594  07A8  3000               	movlw	0
 13595  07A9  3FC0               	movwi [0]fsr1
 13596  07AA  3FC1               	movwi [1]fsr1
 13597                           
 13598                           ;flashy_task.c: 72: data->holdCountAY = 0;
 13599  07AB  083B               	movf	flashy_Init@data,w
 13600  07AC  0086               	movwf	6
 13601  07AD  083C               	movf	flashy_Init@data+1,w
 13602  07AE  0087               	movwf	7
 13603  07AF  3154               	addfsr 1,20
 13604  07B0  3000               	movlw	0
 13605  07B1  3FC0               	movwi [0]fsr1
 13606  07B2  3FC1               	movwi [1]fsr1
 13607                           
 13608                           ;flashy_task.c: 73: data->holdCountAX = 0;
 13609  07B3  083B               	movf	flashy_Init@data,w
 13610  07B4  0086               	movwf	6
 13611  07B5  083C               	movf	flashy_Init@data+1,w
 13612  07B6  0087               	movwf	7
 13613  07B7  3156               	addfsr 1,22
 13614  07B8  3000               	movlw	0
 13615  07B9  3FC0               	movwi [0]fsr1
 13616  07BA  3FC1               	movwi [1]fsr1
 13617                           
 13618                           ;flashy_task.c: 74: data->noholdCount = 0;
 13619  07BB  083B               	movf	flashy_Init@data,w
 13620  07BC  0086               	movwf	6
 13621  07BD  083C               	movf	flashy_Init@data+1,w
 13622  07BE  0087               	movwf	7
 13623  07BF  315C               	addfsr 1,28
 13624  07C0  3000               	movlw	0
 13625  07C1  3FC0               	movwi [0]fsr1
 13626  07C2  3FC1               	movwi [1]fsr1
 13627                           
 13628                           ;flashy_task.c: 76: flashy_leds_idx = 0;
 13629  07C3  0021               	movlb	1	; select bank1
 13630  07C4  01B0               	clrf	_flashy_leds_idx^(0+128)
 13631  07C5  01B1               	clrf	(_flashy_leds_idx+1)^(0+128)
 13632                           
 13633                           ;flashy_task.c: 77: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 13634  07C6  0020               	movlb	0	; select bank0
 13635  07C7  083B               	movf	flashy_Init@data,w
 13636  07C8  0086               	movwf	6
 13637  07C9  083C               	movf	flashy_Init@data+1,w
 13638  07CA  0087               	movwf	7
 13639  07CB  3143               	addfsr 1,3
 13640  07CC  0181               	clrf	1
 13641                           
 13642                           ;flashy_task.c: 78: flashy_option_idx = 0;
 13643  07CD  0021               	movlb	1	; select bank1
 13644  07CE  01A6               	clrf	_flashy_option_idx^(0+128)
 13645  07CF  01A7               	clrf	(_flashy_option_idx+1)^(0+128)
 13646                           
 13647                           ;flashy_task.c: 80: flashy_option_size = sizeof(flashy_option)/sizeof(flashy_option[0]);
 13648  07D0  300E               	movlw	14
 13649  07D1  00A4               	movwf	_flashy_option_size^(0+128)
 13650  07D2  3000               	movlw	0
 13651  07D3  00A5               	movwf	(_flashy_option_size^(0+128)+1)
 13652                           
 13653                           ;flashy_task.c: 82: flashy_sparkle_rate =50;
 13654  07D4  3032               	movlw	50
 13655  07D5  00AC               	movwf	_flashy_sparkle_rate^(0+128)
 13656  07D6  3000               	movlw	0
 13657  07D7  00AD               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 13658                           
 13659                           ;flashy_task.c: 83: flashy_scroll_rate=50;
 13660  07D8  3032               	movlw	50
 13661  07D9  00AA               	movwf	_flashy_scroll_rate^(0+128)
 13662  07DA  3000               	movlw	0
 13663  07DB  00AB               	movwf	(_flashy_scroll_rate^(0+128)+1)
 13664                           
 13665                           ;flashy_task.c: 84: flashy_leds_state_track =0;
 13666  07DC  01AE               	clrf	_flashy_leds_state_track^(0+128)
 13667  07DD  01AF               	clrf	(_flashy_leds_state_track+1)^(0+128)
 13668  07DE  0008               	return
 13669  07DF                     __end_of_flashy_Init:	
 13670                           
 13671                           	psect	text7
 13672  198E                     __ptext7:	
 13673 ;; *************** function _slot_Init *****************
 13674 ;; Defined at:
 13675 ;;		line 29 in file "slot_task.c"
 13676 ;; Parameters:    Size  Location     Type
 13677 ;;  taskData        2   25[BANK0 ] PTR void 
 13678 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 13679 ;;		 -> flashy_TaskData(30), NULL(0), 
 13680 ;; Auto vars:     Size  Location     Type
 13681 ;;  data            2   27[BANK0 ] PTR struct t_slot_taskDa
 13682 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 13683 ;;		 -> flashy_TaskData(30), NULL(0), 
 13684 ;; Return value:  Size  Location     Type
 13685 ;;                  1    wreg      void 
 13686 ;; Registers used:
 13687 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13688 ;; Tracked objects:
 13689 ;;		On entry : 0/0
 13690 ;;		On exit  : 0/0
 13691 ;;		Unchanged: 0/0
 13692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13693 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13696 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13697 ;;Total ram usage:        4 bytes
 13698 ;; Hardware stack levels used:    1
 13699 ;; Hardware stack levels required when called:   10
 13700 ;; This function calls:
 13701 ;;		_nullifyBadge_segDisplayErase
 13702 ;;		_nullifyBadge_segDisplayRegister
 13703 ;;		_nullifyBadge_userLedsClr
 13704 ;;		_nullifyBadge_userLedsRegister
 13705 ;;		_slot_Setup
 13706 ;; This function is called by:
 13707 ;;		_main
 13708 ;;		_scheduler_TaskAdd
 13709 ;; This function uses a non-reentrant model
 13710 ;;
 13711                           
 13712                           
 13713                           ;psect for function _slot_Init
 13714  198E                     _slot_Init:	
 13715                           
 13716                           ;slot_task.c: 30: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 13717                           
 13718                           ;incstack = 0
 13719                           ; Regs used in _slot_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13720  198E  0020               	movlb	0	; select bank0
 13721  198F  083A               	movf	slot_Init@taskData+1,w
 13722  1990  00BC               	movwf	slot_Init@data+1
 13723  1991  0839               	movf	slot_Init@taskData,w
 13724  1992  00BB               	movwf	slot_Init@data
 13725                           
 13726                           ;slot_task.c: 33: nullifyBadge_userLedsRegister(data->badge);
 13727  1993  083B               	movf	slot_Init@data,w
 13728  1994  0086               	movwf	6
 13729  1995  083C               	movf	slot_Init@data+1,w
 13730  1996  0087               	movwf	7
 13731  1997  0801               	movf	1,w
 13732  1998  31A0  2000  3199   	fcall	_nullifyBadge_userLedsRegister
 13733                           
 13734                           ;slot_task.c: 34: nullifyBadge_userLedsClr(data->badge);
 13735  199B  0020               	movlb	0	; select bank0
 13736  199C  083B               	movf	slot_Init@data,w
 13737  199D  0086               	movwf	6
 13738  199E  083C               	movf	slot_Init@data+1,w
 13739  199F  0087               	movwf	7
 13740  19A0  0801               	movf	1,w
 13741  19A1  31AE  260F  3199   	fcall	_nullifyBadge_userLedsClr
 13742                           
 13743                           ;slot_task.c: 35: nullifyBadge_segDisplayRegister(data->badge);
 13744  19A4  0020               	movlb	0	; select bank0
 13745  19A5  083B               	movf	slot_Init@data,w
 13746  19A6  0086               	movwf	6
 13747  19A7  083C               	movf	slot_Init@data+1,w
 13748  19A8  0087               	movwf	7
 13749  19A9  0801               	movf	1,w
 13750  19AA  31AE  261D  3199   	fcall	_nullifyBadge_segDisplayRegister
 13751                           
 13752                           ;slot_task.c: 36: nullifyBadge_segDisplayErase(data->badge);
 13753  19AD  0020               	movlb	0	; select bank0
 13754  19AE  083B               	movf	slot_Init@data,w
 13755  19AF  0086               	movwf	6
 13756  19B0  083C               	movf	slot_Init@data+1,w
 13757  19B1  0087               	movwf	7
 13758  19B2  0801               	movf	1,w
 13759  19B3  31AE  2609  3199   	fcall	_nullifyBadge_segDisplayErase
 13760                           
 13761                           ;slot_task.c: 39: data->displayTickCount = 0;
 13762  19B6  0020               	movlb	0	; select bank0
 13763  19B7  083B               	movf	slot_Init@data,w
 13764  19B8  0086               	movwf	6
 13765  19B9  083C               	movf	slot_Init@data+1,w
 13766  19BA  0087               	movwf	7
 13767  19BB  3143               	addfsr 1,3
 13768  19BC  3000               	movlw	0
 13769  19BD  3FC0               	movwi [0]fsr1
 13770  19BE  3FC1               	movwi [1]fsr1
 13771                           
 13772                           ;slot_task.c: 40: data->holdCountA = 0;
 13773  19BF  083B               	movf	slot_Init@data,w
 13774  19C0  0086               	movwf	6
 13775  19C1  083C               	movf	slot_Init@data+1,w
 13776  19C2  0087               	movwf	7
 13777  19C3  315F               	addfsr 1,31
 13778  19C4  3000               	movlw	0
 13779  19C5  3FC0               	movwi [0]fsr1
 13780  19C6  3FC1               	movwi [1]fsr1
 13781                           
 13782                           ;slot_task.c: 41: data->holdCountB = 0;
 13783  19C7  083B               	movf	slot_Init@data,w
 13784  19C8  3E21               	addlw	33
 13785  19C9  0086               	movwf	6
 13786  19CA  3000               	movlw	0
 13787  19CB  3D3C               	addwfc	slot_Init@data+1,w
 13788  19CC  0087               	movwf	7
 13789  19CD  3000               	movlw	0
 13790  19CE  3FC0               	movwi [0]fsr1
 13791  19CF  3FC1               	movwi [1]fsr1
 13792                           
 13793                           ;slot_task.c: 42: data->holdCountX = 0;
 13794  19D0  083B               	movf	slot_Init@data,w
 13795  19D1  3E23               	addlw	35
 13796  19D2  0086               	movwf	6
 13797  19D3  3000               	movlw	0
 13798  19D4  3D3C               	addwfc	slot_Init@data+1,w
 13799  19D5  0087               	movwf	7
 13800  19D6  3000               	movlw	0
 13801  19D7  3FC0               	movwi [0]fsr1
 13802  19D8  3FC1               	movwi [1]fsr1
 13803                           
 13804                           ;slot_task.c: 43: data->holdCountY = 0;
 13805  19D9  083B               	movf	slot_Init@data,w
 13806  19DA  3E25               	addlw	37
 13807  19DB  0086               	movwf	6
 13808  19DC  3000               	movlw	0
 13809  19DD  3D3C               	addwfc	slot_Init@data+1,w
 13810  19DE  0087               	movwf	7
 13811  19DF  3000               	movlw	0
 13812  19E0  3FC0               	movwi [0]fsr1
 13813  19E1  3FC1               	movwi [1]fsr1
 13814                           
 13815                           ;slot_task.c: 44: data->noholdCount = 0;
 13816  19E2  083B               	movf	slot_Init@data,w
 13817  19E3  3E27               	addlw	39
 13818  19E4  0086               	movwf	6
 13819  19E5  3000               	movlw	0
 13820  19E6  3D3C               	addwfc	slot_Init@data+1,w
 13821  19E7  0087               	movwf	7
 13822  19E8  3000               	movlw	0
 13823  19E9  3FC0               	movwi [0]fsr1
 13824  19EA  3FC1               	movwi [1]fsr1
 13825                           
 13826                           ;slot_task.c: 45: slot_Setup(data);
 13827  19EB  083C               	movf	slot_Init@data+1,w
 13828  19EC  00B0               	movwf	slot_Setup@taskData+1
 13829  19ED  083B               	movf	slot_Init@data,w
 13830  19EE  00AF               	movwf	slot_Setup@taskData
 13831  19EF  31A7  2702         	fcall	_slot_Setup
 13832  19F1  0008               	return
 13833  19F2                     __end_of_slot_Init:	
 13834                           
 13835                           	psect	text8
 13836  2000                     __ptext8:	
 13837 ;; *************** function _nullifyBadge_userLedsRegister *****************
 13838 ;; Defined at:
 13839 ;;		line 133 in file "nullifyBadge.c"
 13840 ;; Parameters:    Size  Location     Type
 13841 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 13842 ;;		 -> badge_inst(18), 
 13843 ;; Auto vars:     Size  Location     Type
 13844 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 13845 ;;		 -> badge_inst(18), 
 13846 ;; Return value:  Size  Location     Type
 13847 ;;                  1    wreg      char 
 13848 ;; Registers used:
 13849 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13850 ;; Tracked objects:
 13851 ;;		On entry : 0/0
 13852 ;;		On exit  : 0/0
 13853 ;;		Unchanged: 0/0
 13854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13856 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13858 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13859 ;;Total ram usage:        1 bytes
 13860 ;; Hardware stack levels used:    1
 13861 ;; Hardware stack levels required when called:    4
 13862 ;; This function calls:
 13863 ;;		Nothing
 13864 ;; This function is called by:
 13865 ;;		_menu_Init
 13866 ;;		_flashy_Init
 13867 ;;		_locked_Init
 13868 ;;		_secret_Init
 13869 ;;		_slot_Init
 13870 ;; This function uses a non-reentrant model
 13871 ;;
 13872                           
 13873                           
 13874                           ;psect for function _nullifyBadge_userLedsRegister
 13875  2000                     _nullifyBadge_userLedsRegister:	
 13876                           
 13877                           ;incstack = 0
 13878                           ; Regs used in _nullifyBadge_userLedsRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 13879                           ;nullifyBadge_userLedsRegister@badge stored from wreg
 13880  2000  00F1               	movwf	nullifyBadge_userLedsRegister@badge
 13881                           
 13882                           ;nullifyBadge.c: 134: if (badge->registeredHw & HW_USER_LEDS) {
 13883  2001  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 13884  2002  3E11               	addlw	17
 13885  2003  0086               	movwf	6
 13886  2004  3001               	movlw	1	; select bank2/3
 13887  2005  0087               	movwf	7
 13888  2006  1801               	btfsc	1,0
 13889  2007  0008               	return
 13890                           
 13891                           ;nullifyBadge.c: 137: else {
 13892                           ;nullifyBadge.c: 138: badge->registeredHw |= (1 << HW_USER_LEDS);
 13893                           
 13894                           ;nullifyBadge.c: 136: }
 13895                           
 13896                           ;nullifyBadge.c: 135: return -1;
 13897                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 13898  2008  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 13899  2009  3E11               	addlw	17
 13900  200A  0086               	movwf	6
 13901  200B  3001               	movlw	1	; select bank2/3
 13902  200C  0087               	movwf	7
 13903  200D  1481               	bsf	1,1
 13904                           
 13905                           ;nullifyBadge.c: 139: return 0;
 13906                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 13907  200E  0008               	return
 13908  200F                     __end_of_nullifyBadge_userLedsRegister:	
 13909                           
 13910                           	psect	text9
 13911  2E1D                     __ptext9:	
 13912 ;; *************** function _nullifyBadge_segDisplayRegister *****************
 13913 ;; Defined at:
 13914 ;;		line 68 in file "nullifyBadge.c"
 13915 ;; Parameters:    Size  Location     Type
 13916 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 13917 ;;		 -> badge_inst(18), 
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 13920 ;;		 -> badge_inst(18), 
 13921 ;; Return value:  Size  Location     Type
 13922 ;;                  1    wreg      char 
 13923 ;; Registers used:
 13924 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13925 ;; Tracked objects:
 13926 ;;		On entry : 0/0
 13927 ;;		On exit  : 0/0
 13928 ;;		Unchanged: 0/0
 13929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13933 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13934 ;;Total ram usage:        1 bytes
 13935 ;; Hardware stack levels used:    1
 13936 ;; Hardware stack levels required when called:    4
 13937 ;; This function calls:
 13938 ;;		Nothing
 13939 ;; This function is called by:
 13940 ;;		_menu_Init
 13941 ;;		_flashy_Init
 13942 ;;		_locked_Init
 13943 ;;		_secret_Init
 13944 ;;		_slot_Init
 13945 ;;		_fadeDisplay_Init
 13946 ;; This function uses a non-reentrant model
 13947 ;;
 13948                           
 13949                           
 13950                           ;psect for function _nullifyBadge_segDisplayRegister
 13951  2E1D                     _nullifyBadge_segDisplayRegister:	
 13952                           
 13953                           ;incstack = 0
 13954                           ; Regs used in _nullifyBadge_segDisplayRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 13955                           ;nullifyBadge_segDisplayRegister@badge stored from wreg
 13956  2E1D  00F1               	movwf	nullifyBadge_segDisplayRegister@badge
 13957                           
 13958                           ;nullifyBadge.c: 72: else {
 13959                           ;nullifyBadge.c: 73: badge->registeredHw |= (1 << HW_SEG_DISPLAY);
 13960                           
 13961                           ;nullifyBadge.c: 71: }
 13962                           
 13963                           ;nullifyBadge.c: 70: return -1;
 13964                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 13965                           
 13966                           ;nullifyBadge.c: 69: if (badge->registeredHw & HW_SEG_DISPLAY) {
 13967  2E1E  0871               	movf	nullifyBadge_segDisplayRegister@badge,w
 13968  2E1F  3E11               	addlw	17
 13969  2E20  0086               	movwf	6
 13970  2E21  3001               	movlw	1	; select bank2/3
 13971  2E22  0087               	movwf	7
 13972  2E23  1401               	bsf	1,0
 13973                           
 13974                           ;nullifyBadge.c: 74: return 0;
 13975                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 13976  2E24  0008               	return
 13977  2E25                     __end_of_nullifyBadge_segDisplayRegister:	
 13978                           
 13979                           	psect	text10
 13980  2045                     __ptext10:	
 13981 ;; *************** function _scheduler_Init *****************
 13982 ;; Defined at:
 13983 ;;		line 27 in file "cooperative_scheduler.c"
 13984 ;; Parameters:    Size  Location     Type
 13985 ;;  scheduler       1    wreg     PTR struct t_scheduler
 13986 ;;		 -> schedulerInst(18), 
 13987 ;; Auto vars:     Size  Location     Type
 13988 ;;  scheduler       1    2[COMMON] PTR struct t_scheduler
 13989 ;;		 -> schedulerInst(18), 
 13990 ;;  k               1    3[COMMON] unsigned char 
 13991 ;; Return value:  Size  Location     Type
 13992 ;;                  1    wreg      void 
 13993 ;; Registers used:
 13994 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14001 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14003 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14004 ;;Total ram usage:        3 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    4
 14007 ;; This function calls:
 14008 ;;		Nothing
 14009 ;; This function is called by:
 14010 ;;		_main
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           
 14015                           ;psect for function _scheduler_Init
 14016  2045                     _scheduler_Init:	
 14017                           
 14018                           ;incstack = 0
 14019                           ; Regs used in _scheduler_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 14020                           ;scheduler_Init@scheduler stored from wreg
 14021  2045  00F2               	movwf	scheduler_Init@scheduler
 14022                           
 14023                           ;cooperative_scheduler.c: 28: scheduler->taskEntryVector = 0x0;
 14024  2046  0872               	movf	scheduler_Init@scheduler,w
 14025  2047  3E10               	addlw	16
 14026  2048  0086               	movwf	6
 14027  2049  3001               	movlw	1	; select bank2/3
 14028  204A  0087               	movwf	7
 14029  204B  3000               	movlw	0
 14030  204C  3FC0               	movwi [0]fsr1
 14031  204D  3FC1               	movwi [1]fsr1
 14032                           
 14033                           ;cooperative_scheduler.c: 29: u8 k;
 14034                           ;cooperative_scheduler.c: 31: for (k = 0; k < 16; k++) {
 14035  204E  01F3               	clrf	scheduler_Init@k
 14036  204F                     L1:	
 14037  204F  3010               	movlw	16
 14038  2050  0273               	subwf	scheduler_Init@k,w
 14039  2051  1803               	btfsc	3,0
 14040  2052  0008               	return
 14041                           
 14042                           ;cooperative_scheduler.c: 32: scheduler->tasks[k] = (0);
 14043  2053  0873               	movf	scheduler_Init@k,w
 14044  2054  0772               	addwf	scheduler_Init@scheduler,w
 14045  2055  00F1               	movwf	??_scheduler_Init
 14046  2056  0871               	movf	??_scheduler_Init,w
 14047  2057  0086               	movwf	6
 14048  2058  3001               	movlw	1	; select bank2/3
 14049  2059  0087               	movwf	7
 14050  205A  0181               	clrf	1
 14051  205B  3001               	movlw	1
 14052  205C  00F1               	movwf	??_scheduler_Init
 14053  205D  0871               	movf	??_scheduler_Init,w
 14054  205E  07F3               	addwf	scheduler_Init@k,f
 14055  205F  284F               	goto	L1
 14056  2060                     __end_of_scheduler_Init:	
 14057                           
 14058                           	psect	text11
 14059  1C29                     __ptext11:	
 14060 ;; *************** function _schedulerExecute *****************
 14061 ;; Defined at:
 14062 ;;		line 77 in file "cooperative_scheduler.c"
 14063 ;; Parameters:    Size  Location     Type
 14064 ;;  scheduler       1    wreg     PTR struct t_scheduler
 14065 ;;		 -> schedulerInst(18), 
 14066 ;; Auto vars:     Size  Location     Type
 14067 ;;  scheduler       1    6[BANK1 ] PTR struct t_scheduler
 14068 ;;		 -> schedulerInst(18), 
 14069 ;;  tickDelta       2    4[BANK1 ] unsigned int 
 14070 ;;  taskLastSyst    2    2[BANK1 ] unsigned int 
 14071 ;;  currentSyste    2    0[BANK1 ] unsigned int 
 14072 ;;  k               1    7[BANK1 ] unsigned char 
 14073 ;; Return value:  Size  Location     Type
 14074 ;;                  1    wreg      void 
 14075 ;; Registers used:
 14076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14077 ;; Tracked objects:
 14078 ;;		On entry : 0/0
 14079 ;;		On exit  : 0/0
 14080 ;;		Unchanged: 0/0
 14081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14083 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14084 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14085 ;;      Totals:         0       6       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14086 ;;Total ram usage:       14 bytes
 14087 ;; Hardware stack levels used:    1
 14088 ;; Hardware stack levels required when called:   14
 14089 ;; This function calls:
 14090 ;;		_TMR0_Read16bitTimer
 14091 ;;		_scheduler_TaskRun
 14092 ;; This function is called by:
 14093 ;;		_main
 14094 ;; This function uses a non-reentrant model
 14095 ;;
 14096                           
 14097                           
 14098                           ;psect for function _schedulerExecute
 14099  1C29                     _schedulerExecute:	
 14100                           
 14101                           ;incstack = 0
 14102                           ; Regs used in _schedulerExecute: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14103                           ;schedulerExecute@scheduler stored from wreg
 14104  1C29  0021               	movlb	1	; select bank1
 14105  1C2A  00E9               	movwf	schedulerExecute@scheduler^(0+128)
 14106                           
 14107                           ;cooperative_scheduler.c: 78: u16 currentSystemTick;
 14108                           ;cooperative_scheduler.c: 79: u16 taskLastSystemTick;
 14109                           ;cooperative_scheduler.c: 80: u16 tickDelta;
 14110                           ;cooperative_scheduler.c: 81: u8 k;
 14111                           ;cooperative_scheduler.c: 83: for (k = 0; k < 16; k++) {
 14112  1C2B  01EA               	clrf	schedulerExecute@k^(0+128)
 14113  1C2C                     L2:	
 14114  1C2C  3010               	movlw	16
 14115  1C2D  026A               	subwf	schedulerExecute@k^(0+128),w
 14116  1C2E  1803               	btfsc	3,0
 14117  1C2F  0008               	return
 14118                           
 14119                           ;cooperative_scheduler.c: 86: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 14120  1C30  0869               	movf	schedulerExecute@scheduler^(0+128),w
 14121  1C31  3E10               	addlw	16
 14122  1C32  0086               	movwf	6
 14123  1C33  3001               	movlw	1	; select bank2/3
 14124  1C34  0087               	movwf	7
 14125  1C35  3F40               	moviw [0]fsr1
 14126  1C36  0020               	movlb	0	; select bank0
 14127  1C37  00E8               	movwf	??_schedulerExecute
 14128  1C38  3F41               	moviw [1]fsr1
 14129  1C39  00E9               	movwf	??_schedulerExecute+1
 14130  1C3A  3001               	movlw	1
 14131  1C3B  00EA               	movwf	??_schedulerExecute+2
 14132  1C3C  3000               	movlw	0
 14133  1C3D  00EB               	movwf	??_schedulerExecute+3
 14134  1C3E  0021               	movlb	1	; select bank1
 14135  1C3F  0A6A               	incf	schedulerExecute@k^(0+128),w
 14136  1C40  0020               	movlb	0	; select bank0
 14137  1C41  2C44               	goto	u5614
 14138  1C42                     u5615:	
 14139  1C42  35EA               	lslf	??_schedulerExecute+2,f
 14140  1C43  0DEB               	rlf	??_schedulerExecute+3,f
 14141  1C44                     u5614:	
 14142  1C44  0B89               	decfsz	9,f
 14143  1C45  2C42               	goto	u5615
 14144  1C46  0868               	movf	??_schedulerExecute,w
 14145  1C47  056A               	andwf	??_schedulerExecute+2,w
 14146  1C48  00EC               	movwf	??_schedulerExecute+4
 14147  1C49  0869               	movf	??_schedulerExecute+1,w
 14148  1C4A  056B               	andwf	??_schedulerExecute+3,w
 14149  1C4B  00ED               	movwf	??_schedulerExecute+5
 14150  1C4C  086C               	movf	??_schedulerExecute+4,w
 14151  1C4D  046D               	iorwf	??_schedulerExecute+5,w
 14152  1C4E  1903               	btfsc	3,2
 14153  1C4F  2CA6               	goto	l8680
 14154                           
 14155                           ;cooperative_scheduler.c: 88: }
 14156                           ;cooperative_scheduler.c: 90: currentSystemTick = TMR0_Read16bitTimer();
 14157                           
 14158                           ;cooperative_scheduler.c: 87: continue;
 14159  1C50  31A0  2098  319C   	fcall	_TMR0_Read16bitTimer
 14160  1C53  0872               	movf	?_TMR0_Read16bitTimer+1,w
 14161  1C54  0021               	movlb	1	; select bank1
 14162  1C55  00E4               	movwf	(schedulerExecute@currentSystemTick+1)^(0+128)
 14163  1C56  0871               	movf	?_TMR0_Read16bitTimer,w
 14164  1C57  00E3               	movwf	schedulerExecute@currentSystemTick^(0+128)
 14165                           
 14166                           ;cooperative_scheduler.c: 91: taskLastSystemTick = scheduler->tasks[k]->systemTickLastEx
      +                          ecuted;
 14167  1C58  086A               	movf	schedulerExecute@k^(0+128),w
 14168  1C59  0769               	addwf	schedulerExecute@scheduler^(0+128),w
 14169  1C5A  0020               	movlb	0	; select bank0
 14170  1C5B  00E8               	movwf	??_schedulerExecute
 14171  1C5C  0868               	movf	??_schedulerExecute,w
 14172  1C5D  0086               	movwf	6
 14173  1C5E  3001               	movlw	1	; select bank2/3
 14174  1C5F  0087               	movwf	7
 14175  1C60  0801               	movf	1,w
 14176  1C61  0086               	movwf	6
 14177  1C62  3001               	movlw	1	; select bank2/3
 14178  1C63  0087               	movwf	7
 14179  1C64  3F40               	moviw [0]fsr1
 14180  1C65  0021               	movlb	1	; select bank1
 14181  1C66  00E5               	movwf	schedulerExecute@taskLastSystemTick^(0+128)
 14182  1C67  3F41               	moviw [1]fsr1
 14183  1C68  00E6               	movwf	(schedulerExecute@taskLastSystemTick+1)^(0+128)
 14184                           
 14185                           ;cooperative_scheduler.c: 99: tickDelta = currentSystemTick - taskLastSystemTick;
 14186  1C69  0965               	comf	schedulerExecute@taskLastSystemTick^(0+128),w
 14187  1C6A  0020               	movlb	0	; select bank0
 14188  1C6B  00E8               	movwf	??_schedulerExecute
 14189  1C6C  0021               	movlb	1	; select bank1
 14190  1C6D  0966               	comf	(schedulerExecute@taskLastSystemTick+1)^(0+128),w
 14191  1C6E  0020               	movlb	0	; select bank0
 14192  1C6F  00E9               	movwf	??_schedulerExecute+1
 14193  1C70  0AE8               	incf	??_schedulerExecute,f
 14194  1C71  1903               	skipnz
 14195  1C72  0AE9               	incf	??_schedulerExecute+1,f
 14196  1C73  0021               	movlb	1	; select bank1
 14197  1C74  0863               	movf	schedulerExecute@currentSystemTick^(0+128),w
 14198  1C75  0020               	movlb	0	; select bank0
 14199  1C76  0768               	addwf	??_schedulerExecute,w
 14200  1C77  0021               	movlb	1	; select bank1
 14201  1C78  00E7               	movwf	schedulerExecute@tickDelta^(0+128)
 14202  1C79  0864               	movf	(schedulerExecute@currentSystemTick+1)^(0+128),w
 14203  1C7A  0020               	movlb	0	; select bank0
 14204  1C7B  3D69               	addwfc	??_schedulerExecute+1,w
 14205  1C7C  0021               	movlb	1	; select bank1
 14206  1C7D  00E8               	movwf	(schedulerExecute@tickDelta+1)^(0+128)
 14207                           
 14208                           ;cooperative_scheduler.c: 103: if (tickDelta >= scheduler->tasks[k]->taskInterval) {
 14209  1C7E  086A               	movf	schedulerExecute@k^(0+128),w
 14210  1C7F  0769               	addwf	schedulerExecute@scheduler^(0+128),w
 14211  1C80  0020               	movlb	0	; select bank0
 14212  1C81  00E8               	movwf	??_schedulerExecute
 14213  1C82  0868               	movf	??_schedulerExecute,w
 14214  1C83  0086               	movwf	6
 14215  1C84  3001               	movlw	1	; select bank2/3
 14216  1C85  0087               	movwf	7
 14217  1C86  0801               	movf	1,w
 14218  1C87  3E0A               	addlw	10
 14219  1C88  0086               	movwf	6
 14220  1C89  3001               	movlw	1	; select bank2/3
 14221  1C8A  0087               	movwf	7
 14222  1C8B  3F40               	moviw [0]fsr1
 14223  1C8C  00E9               	movwf	??_schedulerExecute+1
 14224  1C8D  3F41               	moviw [1]fsr1
 14225  1C8E  00EA               	movwf	??_schedulerExecute+2
 14226  1C8F  086A               	movf	??_schedulerExecute+2,w
 14227  1C90  0021               	movlb	1	; select bank1
 14228  1C91  0268               	subwf	(schedulerExecute@tickDelta+1)^(0+128),w
 14229  1C92  1D03               	skipz
 14230  1C93  2C98               	goto	u5635
 14231  1C94  0020               	movlb	0	; select bank0
 14232  1C95  0869               	movf	??_schedulerExecute+1,w
 14233  1C96  0021               	movlb	1	; select bank1
 14234  1C97  0267               	subwf	schedulerExecute@tickDelta^(0+128),w
 14235  1C98                     u5635:	
 14236  1C98  1C03               	skipc
 14237  1C99  2CA6               	goto	l8680
 14238                           
 14239                           ;cooperative_scheduler.c: 104: scheduler_TaskRun(scheduler->tasks[k]);
 14240  1C9A  086A               	movf	schedulerExecute@k^(0+128),w
 14241  1C9B  0769               	addwf	schedulerExecute@scheduler^(0+128),w
 14242  1C9C  0020               	movlb	0	; select bank0
 14243  1C9D  00E8               	movwf	??_schedulerExecute
 14244  1C9E  0868               	movf	??_schedulerExecute,w
 14245  1C9F  0086               	movwf	6
 14246  1CA0  3001               	movlw	1	; select bank2/3
 14247  1CA1  0087               	movwf	7
 14248  1CA2  0801               	movf	1,w
 14249  1CA3  3187  27DF  319C   	fcall	_scheduler_TaskRun
 14250  1CA6                     l8680:	
 14251  1CA6  3001               	movlw	1
 14252  1CA7  0020               	movlb	0	; select bank0
 14253  1CA8  00E8               	movwf	??_schedulerExecute
 14254  1CA9  0868               	movf	??_schedulerExecute,w
 14255  1CAA  0021               	movlb	1	; select bank1
 14256  1CAB  07EA               	addwf	schedulerExecute@k^(0+128),f
 14257  1CAC  2C2C               	goto	L2
 14258  1CAD                     __end_of_schedulerExecute:	
 14259                           
 14260                           	psect	text12
 14261  07DF                     __ptext12:	
 14262 ;; *************** function _scheduler_TaskRun *****************
 14263 ;; Defined at:
 14264 ;;		line 20 in file "cooperative_scheduler.c"
 14265 ;; Parameters:    Size  Location     Type
 14266 ;;  task            1    wreg     PTR struct t_schedulerTa
 14267 ;;		 -> secret_task(13), locked_task(13), slot_task(13), menu_task(13), 
 14268 ;;		 -> flashy_task(13), NULL(0), 
 14269 ;; Auto vars:     Size  Location     Type
 14270 ;;  task            1   71[BANK0 ] PTR struct t_schedulerTa
 14271 ;;		 -> secret_task(13), locked_task(13), slot_task(13), menu_task(13), 
 14272 ;;		 -> flashy_task(13), NULL(0), 
 14273 ;; Return value:  Size  Location     Type
 14274 ;;                  1    wreg      void 
 14275 ;; Registers used:
 14276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14277 ;; Tracked objects:
 14278 ;;		On entry : 0/0
 14279 ;;		On exit  : 0/0
 14280 ;;		Unchanged: 0/0
 14281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14285 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14286 ;;Total ram usage:        1 bytes
 14287 ;; Hardware stack levels used:    1
 14288 ;; Hardware stack levels required when called:   13
 14289 ;; This function calls:
 14290 ;;		Absolute function
 14291 ;;		_TMR0_Read16bitTimer
 14292 ;;		_flashy_Main
 14293 ;;		_locked_Main
 14294 ;;		_menu_Main
 14295 ;;		_secret_Main
 14296 ;;		_slot_Main
 14297 ;; This function is called by:
 14298 ;;		_schedulerExecute
 14299 ;; This function uses a non-reentrant model
 14300 ;;
 14301                           
 14302                           
 14303                           ;psect for function _scheduler_TaskRun
 14304  07DF                     _scheduler_TaskRun:	
 14305                           
 14306                           ;incstack = 0
 14307                           ; Regs used in _scheduler_TaskRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14308                           ;scheduler_TaskRun@task stored from wreg
 14309  07DF  0020               	movlb	0	; select bank0
 14310  07E0  00E7               	movwf	scheduler_TaskRun@task
 14311                           
 14312                           ;cooperative_scheduler.c: 21: task->taskExecuteCallback (task->taskData);
 14313  07E1  0867               	movf	scheduler_TaskRun@task,w
 14314  07E2  3E02               	addlw	2
 14315  07E3  0086               	movwf	6
 14316  07E4  3001               	movlw	1	; select bank2/3
 14317  07E5  0087               	movwf	7
 14318  07E6  3F40               	moviw [0]fsr1
 14319  07E7  00D2               	movwf	secret_Main@taskData
 14320  07E8  3F41               	moviw [1]fsr1
 14321  07E9  00D3               	movwf	secret_Main@taskData+1
 14322  07EA  0867               	movf	scheduler_TaskRun@task,w
 14323  07EB  3E08               	addlw	8
 14324  07EC  0086               	movwf	6
 14325  07ED  3001               	movlw	1	; select bank2/3
 14326  07EE  0087               	movwf	7
 14327  07EF  3F41               	moviw [1]fsr1
 14328  07F0  008A               	movwf	10
 14329  07F1  3F40               	moviw [0]fsr1
 14330  07F2  000A               	callw
 14331  07F3  3187               	pagesel	$
 14332                           
 14333                           ;cooperative_scheduler.c: 22: task->systemTickLastExecuted = TMR0_Read16bitTimer();
 14334  07F4  31A0  2098         	fcall	_TMR0_Read16bitTimer
 14335  07F6  0020               	movlb	0	; select bank0
 14336  07F7  0867               	movf	scheduler_TaskRun@task,w
 14337  07F8  0086               	movwf	6
 14338  07F9  3001               	movlw	1	; select bank2/3
 14339  07FA  0087               	movwf	7
 14340  07FB  0871               	movf	?_TMR0_Read16bitTimer,w
 14341  07FC  3FC0               	movwi [0]fsr1
 14342  07FD  0872               	movf	?_TMR0_Read16bitTimer+1,w
 14343  07FE  3FC1               	movwi [1]fsr1
 14344  07FF  0008               	return
 14345  0800                     __end_of_scheduler_TaskRun:	
 14346                           
 14347                           	psect	text13
 14348  1E43                     __ptext13:	
 14349 ;; *************** function _secret_Main *****************
 14350 ;; Defined at:
 14351 ;;		line 99 in file "secret_task.c"
 14352 ;; Parameters:    Size  Location     Type
 14353 ;;  taskData        2   50[BANK0 ] PTR void 
 14354 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 14355 ;;		 -> flashy_TaskData(30), NULL(0), 
 14356 ;; Auto vars:     Size  Location     Type
 14357 ;;  data            2   56[BANK0 ] PTR struct t_secret_task
 14358 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 14359 ;;		 -> flashy_TaskData(30), NULL(0), 
 14360 ;;  buttonPresse    1   55[BANK0 ] unsigned char 
 14361 ;;  secret_found    1   54[BANK0 ] unsigned char 
 14362 ;; Return value:  Size  Location     Type
 14363 ;;                  1    wreg      void 
 14364 ;; Registers used:
 14365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14366 ;; Tracked objects:
 14367 ;;		On entry : 0/0
 14368 ;;		On exit  : 0/0
 14369 ;;		Unchanged: 0/0
 14370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14371 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14372 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14373 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14374 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14375 ;;Total ram usage:        8 bytes
 14376 ;; Hardware stack levels used:    1
 14377 ;; Hardware stack levels required when called:    6
 14378 ;; This function calls:
 14379 ;;		_nullifyBadge_buttonsGet
 14380 ;;		_secret_check
 14381 ;;		_secret_clear
 14382 ;; This function is called by:
 14383 ;;		_main
 14384 ;;		_scheduler_TaskRun
 14385 ;; This function uses a non-reentrant model
 14386 ;;
 14387                           
 14388                           
 14389                           ;psect for function _secret_Main
 14390  1E43                     _secret_Main:	
 14391                           
 14392                           ;secret_task.c: 100: struct t_secret_taskData *data = (struct t_secret_taskData *) taskD
      +                          ata;
 14393                           
 14394                           ;incstack = 0
 14395                           ; Regs used in _secret_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14396  1E43  0020               	movlb	0	; select bank0
 14397  1E44  0853               	movf	secret_Main@taskData+1,w
 14398  1E45  00D9               	movwf	secret_Main@data+1
 14399  1E46  0852               	movf	secret_Main@taskData,w
 14400  1E47  00D8               	movwf	secret_Main@data
 14401                           
 14402                           ;secret_task.c: 101: u8 buttonPressed, secret_found = 0;
 14403  1E48  01D6               	clrf	secret_Main@secret_found
 14404                           
 14405                           ;secret_task.c: 103: buttonPressed = nullifyBadge_buttonsGet();
 14406  1E49  31A2  2250  319E   	fcall	_nullifyBadge_buttonsGet
 14407  1E4C  0020               	movlb	0	; select bank0
 14408  1E4D  00D4               	movwf	??_secret_Main
 14409  1E4E  0854               	movf	??_secret_Main,w
 14410  1E4F  00D7               	movwf	secret_Main@buttonPressed
 14411                           
 14412                           ;secret_task.c: 104: switch (buttonPressed) {
 14413  1E50  2FE3               	goto	l8372
 14414  1E51                     l8286:	
 14415                           ;secret_task.c: 105: case 0:
 14416                           
 14417                           
 14418                           ;secret_task.c: 107: if (data->delayTickCount == 0){
 14419  1E51  0858               	movf	secret_Main@data,w
 14420  1E52  0086               	movwf	6
 14421  1E53  0859               	movf	secret_Main@data+1,w
 14422  1E54  0087               	movwf	7
 14423  1E55  3142               	addfsr 1,2
 14424  1E56  0016               	moviw fsr1++
 14425  1E57  0401               	iorwf	1,w
 14426  1E58  1D03               	btfss	3,2
 14427  1E59  2E6B               	goto	l8292
 14428                           
 14429                           ;secret_task.c: 108: data->delayTickCount = 300;
 14430  1E5A  0858               	movf	secret_Main@data,w
 14431  1E5B  0086               	movwf	6
 14432  1E5C  0859               	movf	secret_Main@data+1,w
 14433  1E5D  0087               	movwf	7
 14434  1E5E  3142               	addfsr 1,2
 14435  1E5F  302C               	movlw	44
 14436  1E60  3FC0               	movwi [0]fsr1
 14437  1E61  3001               	movlw	1
 14438  1E62  3FC1               	movwi [1]fsr1
 14439                           
 14440                           ;secret_task.c: 109: secret_check(data, 0);
 14441  1E63  0859               	movf	secret_Main@data+1,w
 14442  1E64  00F8               	movwf	secret_check@data+1
 14443  1E65  0858               	movf	secret_Main@data,w
 14444  1E66  00F7               	movwf	secret_check@data
 14445  1E67  01F9               	clrf	secret_check@buttonPressed
 14446  1E68  319C  24AD  319E   	fcall	_secret_check
 14447  1E6B                     l8292:	
 14448                           
 14449                           ;secret_task.c: 110: }
 14450                           ;secret_task.c: 111: data->holdCountA = 0;
 14451  1E6B  0020               	movlb	0	; select bank0
 14452  1E6C  0858               	movf	secret_Main@data,w
 14453  1E6D  0086               	movwf	6
 14454  1E6E  0859               	movf	secret_Main@data+1,w
 14455  1E6F  0087               	movwf	7
 14456  1E70  3144               	addfsr 1,4
 14457  1E71  3000               	movlw	0
 14458  1E72  3FC0               	movwi [0]fsr1
 14459  1E73  3FC1               	movwi [1]fsr1
 14460                           
 14461                           ;secret_task.c: 112: data->holdCountB = 0;
 14462  1E74  0858               	movf	secret_Main@data,w
 14463  1E75  0086               	movwf	6
 14464  1E76  0859               	movf	secret_Main@data+1,w
 14465  1E77  0087               	movwf	7
 14466  1E78  3146               	addfsr 1,6
 14467  1E79  3000               	movlw	0
 14468  1E7A  3FC0               	movwi [0]fsr1
 14469  1E7B  3FC1               	movwi [1]fsr1
 14470                           
 14471                           ;secret_task.c: 113: data->holdCountX = 0;
 14472  1E7C  0858               	movf	secret_Main@data,w
 14473  1E7D  0086               	movwf	6
 14474  1E7E  0859               	movf	secret_Main@data+1,w
 14475  1E7F  0087               	movwf	7
 14476  1E80  3148               	addfsr 1,8
 14477  1E81  3000               	movlw	0
 14478  1E82  3FC0               	movwi [0]fsr1
 14479  1E83  3FC1               	movwi [1]fsr1
 14480                           
 14481                           ;secret_task.c: 114: data->holdCountY = 0;
 14482  1E84  0858               	movf	secret_Main@data,w
 14483  1E85  0086               	movwf	6
 14484  1E86  0859               	movf	secret_Main@data+1,w
 14485  1E87  0087               	movwf	7
 14486  1E88  314A               	addfsr 1,10
 14487  1E89  3000               	movlw	0
 14488  1E8A  3FC0               	movwi [0]fsr1
 14489  1E8B  3FC1               	movwi [1]fsr1
 14490                           
 14491                           ;secret_task.c: 115: data->noholdCount += 1;
 14492  1E8C  0858               	movf	secret_Main@data,w
 14493  1E8D  0086               	movwf	6
 14494  1E8E  0859               	movf	secret_Main@data+1,w
 14495  1E8F  0087               	movwf	7
 14496  1E90  314C               	addfsr 1,12
 14497  1E91  3001               	movlw	1
 14498  1E92  0781               	addwf	1,f
 14499  1E93  3141               	addfsr 1,1
 14500  1E94  1803               	skipnc
 14501  1E95  0A81               	incf	1,f
 14502                           
 14503                           ;secret_task.c: 116: data->delayTickCount -= 1;
 14504  1E96  0858               	movf	secret_Main@data,w
 14505  1E97  0086               	movwf	6
 14506  1E98  0859               	movf	secret_Main@data+1,w
 14507  1E99  0087               	movwf	7
 14508  1E9A  3142               	addfsr 1,2
 14509  1E9B  3001               	movlw	1
 14510  1E9C  0281               	subwf	1,f
 14511  1E9D  3141               	addfsr 1,1
 14512  1E9E  3000               	movlw	0
 14513  1E9F  3B81               	subwfb	1,f
 14514  1EA0  317F               	addfsr 1,-1
 14515                           
 14516                           ;secret_task.c: 117: break;
 14517  1EA1  2FF5               	goto	l8374
 14518  1EA2                     l8304:	
 14519                           ;secret_task.c: 118: case 1:
 14520                           
 14521                           
 14522                           ;secret_task.c: 120: if (data->holdCountA == 0){
 14523  1EA2  0858               	movf	secret_Main@data,w
 14524  1EA3  0086               	movwf	6
 14525  1EA4  0859               	movf	secret_Main@data+1,w
 14526  1EA5  0087               	movwf	7
 14527  1EA6  3144               	addfsr 1,4
 14528  1EA7  0016               	moviw fsr1++
 14529  1EA8  0401               	iorwf	1,w
 14530  1EA9  1D03               	btfss	3,2
 14531  1EAA  2EBA               	goto	l8308
 14532                           
 14533                           ;secret_task.c: 121: secret_found = secret_check(data, buttonPressed);
 14534  1EAB  0859               	movf	secret_Main@data+1,w
 14535  1EAC  00F8               	movwf	secret_check@data+1
 14536  1EAD  0858               	movf	secret_Main@data,w
 14537  1EAE  00F7               	movwf	secret_check@data
 14538  1EAF  0857               	movf	secret_Main@buttonPressed,w
 14539  1EB0  00D4               	movwf	??_secret_Main
 14540  1EB1  0854               	movf	??_secret_Main,w
 14541  1EB2  00F9               	movwf	secret_check@buttonPressed
 14542  1EB3  319C  24AD  319E   	fcall	_secret_check
 14543  1EB6  0020               	movlb	0	; select bank0
 14544  1EB7  00D5               	movwf	??_secret_Main+1
 14545  1EB8  0855               	movf	??_secret_Main+1,w
 14546  1EB9  00D6               	movwf	secret_Main@secret_found
 14547  1EBA                     l8308:	
 14548                           
 14549                           ;secret_task.c: 122: }
 14550                           ;secret_task.c: 123: data->holdCountA += 1;
 14551  1EBA  0858               	movf	secret_Main@data,w
 14552  1EBB  0086               	movwf	6
 14553  1EBC  0859               	movf	secret_Main@data+1,w
 14554  1EBD  0087               	movwf	7
 14555  1EBE  3144               	addfsr 1,4
 14556  1EBF  3001               	movlw	1
 14557  1EC0  0781               	addwf	1,f
 14558  1EC1  3141               	addfsr 1,1
 14559  1EC2  1803               	skipnc
 14560  1EC3  0A81               	incf	1,f
 14561                           
 14562                           ;secret_task.c: 124: data->holdCountB = 0;
 14563  1EC4  0858               	movf	secret_Main@data,w
 14564  1EC5  0086               	movwf	6
 14565  1EC6  0859               	movf	secret_Main@data+1,w
 14566  1EC7  0087               	movwf	7
 14567  1EC8  3146               	addfsr 1,6
 14568  1EC9  3000               	movlw	0
 14569  1ECA  3FC0               	movwi [0]fsr1
 14570  1ECB  3FC1               	movwi [1]fsr1
 14571                           
 14572                           ;secret_task.c: 125: data->holdCountX = 0;
 14573  1ECC  0858               	movf	secret_Main@data,w
 14574  1ECD  0086               	movwf	6
 14575  1ECE  0859               	movf	secret_Main@data+1,w
 14576  1ECF  0087               	movwf	7
 14577  1ED0  3148               	addfsr 1,8
 14578  1ED1  3000               	movlw	0
 14579  1ED2  3FC0               	movwi [0]fsr1
 14580  1ED3  3FC1               	movwi [1]fsr1
 14581                           
 14582                           ;secret_task.c: 126: data->holdCountY = 0;
 14583  1ED4  0858               	movf	secret_Main@data,w
 14584  1ED5  0086               	movwf	6
 14585  1ED6  0859               	movf	secret_Main@data+1,w
 14586  1ED7  0087               	movwf	7
 14587  1ED8  314A               	addfsr 1,10
 14588  1ED9  3000               	movlw	0
 14589  1EDA  3FC0               	movwi [0]fsr1
 14590  1EDB  3FC1               	movwi [1]fsr1
 14591                           
 14592                           ;secret_task.c: 127: data->noholdCount = 0;
 14593  1EDC  0858               	movf	secret_Main@data,w
 14594  1EDD  0086               	movwf	6
 14595  1EDE  0859               	movf	secret_Main@data+1,w
 14596  1EDF  0087               	movwf	7
 14597  1EE0  314C               	addfsr 1,12
 14598  1EE1  3000               	movlw	0
 14599  1EE2  3FC0               	movwi [0]fsr1
 14600  1EE3  3FC1               	movwi [1]fsr1
 14601                           
 14602                           ;secret_task.c: 128: data->delayTickCount = 300;
 14603  1EE4  0858               	movf	secret_Main@data,w
 14604  1EE5  0086               	movwf	6
 14605  1EE6  0859               	movf	secret_Main@data+1,w
 14606  1EE7  0087               	movwf	7
 14607  1EE8  3142               	addfsr 1,2
 14608  1EE9  302C               	movlw	44
 14609  1EEA  3FC0               	movwi [0]fsr1
 14610  1EEB  3001               	movlw	1
 14611  1EEC  3FC1               	movwi [1]fsr1
 14612                           
 14613                           ;secret_task.c: 129: break;
 14614  1EED  2FF5               	goto	l8374
 14615  1EEE                     l8320:	
 14616                           ;secret_task.c: 130: case 2:
 14617                           
 14618                           
 14619                           ;secret_task.c: 132: if (data->holdCountB == 0){
 14620  1EEE  0858               	movf	secret_Main@data,w
 14621  1EEF  0086               	movwf	6
 14622  1EF0  0859               	movf	secret_Main@data+1,w
 14623  1EF1  0087               	movwf	7
 14624  1EF2  3146               	addfsr 1,6
 14625  1EF3  0016               	moviw fsr1++
 14626  1EF4  0401               	iorwf	1,w
 14627  1EF5  1D03               	btfss	3,2
 14628  1EF6  2F06               	goto	l8324
 14629                           
 14630                           ;secret_task.c: 133: secret_found = secret_check(data, buttonPressed);
 14631  1EF7  0859               	movf	secret_Main@data+1,w
 14632  1EF8  00F8               	movwf	secret_check@data+1
 14633  1EF9  0858               	movf	secret_Main@data,w
 14634  1EFA  00F7               	movwf	secret_check@data
 14635  1EFB  0857               	movf	secret_Main@buttonPressed,w
 14636  1EFC  00D4               	movwf	??_secret_Main
 14637  1EFD  0854               	movf	??_secret_Main,w
 14638  1EFE  00F9               	movwf	secret_check@buttonPressed
 14639  1EFF  319C  24AD  319E   	fcall	_secret_check
 14640  1F02  0020               	movlb	0	; select bank0
 14641  1F03  00D5               	movwf	??_secret_Main+1
 14642  1F04  0855               	movf	??_secret_Main+1,w
 14643  1F05  00D6               	movwf	secret_Main@secret_found
 14644  1F06                     l8324:	
 14645                           
 14646                           ;secret_task.c: 134: }
 14647                           ;secret_task.c: 135: data->holdCountA = 0;
 14648  1F06  0858               	movf	secret_Main@data,w
 14649  1F07  0086               	movwf	6
 14650  1F08  0859               	movf	secret_Main@data+1,w
 14651  1F09  0087               	movwf	7
 14652  1F0A  3144               	addfsr 1,4
 14653  1F0B  3000               	movlw	0
 14654  1F0C  3FC0               	movwi [0]fsr1
 14655  1F0D  3FC1               	movwi [1]fsr1
 14656                           
 14657                           ;secret_task.c: 136: data->holdCountB += 1;
 14658  1F0E  0858               	movf	secret_Main@data,w
 14659  1F0F  0086               	movwf	6
 14660  1F10  0859               	movf	secret_Main@data+1,w
 14661  1F11  0087               	movwf	7
 14662  1F12  3146               	addfsr 1,6
 14663  1F13  3001               	movlw	1
 14664  1F14  0781               	addwf	1,f
 14665  1F15  3141               	addfsr 1,1
 14666  1F16  1803               	skipnc
 14667  1F17  0A81               	incf	1,f
 14668                           
 14669                           ;secret_task.c: 137: data->holdCountX = 0;
 14670  1F18  0858               	movf	secret_Main@data,w
 14671  1F19  0086               	movwf	6
 14672  1F1A  0859               	movf	secret_Main@data+1,w
 14673  1F1B  0087               	movwf	7
 14674  1F1C  3148               	addfsr 1,8
 14675  1F1D  3000               	movlw	0
 14676  1F1E  3FC0               	movwi [0]fsr1
 14677  1F1F  3FC1               	movwi [1]fsr1
 14678                           
 14679                           ;secret_task.c: 138: data->holdCountY = 0;
 14680  1F20  0858               	movf	secret_Main@data,w
 14681  1F21  0086               	movwf	6
 14682  1F22  0859               	movf	secret_Main@data+1,w
 14683  1F23  0087               	movwf	7
 14684  1F24  314A               	addfsr 1,10
 14685  1F25  3000               	movlw	0
 14686  1F26  3FC0               	movwi [0]fsr1
 14687  1F27  3FC1               	movwi [1]fsr1
 14688                           
 14689                           ;secret_task.c: 139: data->noholdCount = 0;
 14690  1F28  0858               	movf	secret_Main@data,w
 14691  1F29  0086               	movwf	6
 14692  1F2A  0859               	movf	secret_Main@data+1,w
 14693  1F2B  0087               	movwf	7
 14694  1F2C  314C               	addfsr 1,12
 14695  1F2D  3000               	movlw	0
 14696  1F2E  3FC0               	movwi [0]fsr1
 14697  1F2F  3FC1               	movwi [1]fsr1
 14698                           
 14699                           ;secret_task.c: 140: data->delayTickCount = 300;
 14700  1F30  0858               	movf	secret_Main@data,w
 14701  1F31  0086               	movwf	6
 14702  1F32  0859               	movf	secret_Main@data+1,w
 14703  1F33  0087               	movwf	7
 14704  1F34  3142               	addfsr 1,2
 14705  1F35  302C               	movlw	44
 14706  1F36  3FC0               	movwi [0]fsr1
 14707  1F37  3001               	movlw	1
 14708  1F38  3FC1               	movwi [1]fsr1
 14709                           
 14710                           ;secret_task.c: 141: break;
 14711  1F39  2FF5               	goto	l8374
 14712  1F3A                     l8336:	
 14713                           ;secret_task.c: 142: case 4:
 14714                           
 14715                           
 14716                           ;secret_task.c: 144: if (data->holdCountX == 0){
 14717  1F3A  0858               	movf	secret_Main@data,w
 14718  1F3B  0086               	movwf	6
 14719  1F3C  0859               	movf	secret_Main@data+1,w
 14720  1F3D  0087               	movwf	7
 14721  1F3E  3148               	addfsr 1,8
 14722  1F3F  0016               	moviw fsr1++
 14723  1F40  0401               	iorwf	1,w
 14724  1F41  1D03               	btfss	3,2
 14725  1F42  2F52               	goto	l8340
 14726                           
 14727                           ;secret_task.c: 145: secret_found = secret_check(data, buttonPressed);
 14728  1F43  0859               	movf	secret_Main@data+1,w
 14729  1F44  00F8               	movwf	secret_check@data+1
 14730  1F45  0858               	movf	secret_Main@data,w
 14731  1F46  00F7               	movwf	secret_check@data
 14732  1F47  0857               	movf	secret_Main@buttonPressed,w
 14733  1F48  00D4               	movwf	??_secret_Main
 14734  1F49  0854               	movf	??_secret_Main,w
 14735  1F4A  00F9               	movwf	secret_check@buttonPressed
 14736  1F4B  319C  24AD  319E   	fcall	_secret_check
 14737  1F4E  0020               	movlb	0	; select bank0
 14738  1F4F  00D5               	movwf	??_secret_Main+1
 14739  1F50  0855               	movf	??_secret_Main+1,w
 14740  1F51  00D6               	movwf	secret_Main@secret_found
 14741  1F52                     l8340:	
 14742                           
 14743                           ;secret_task.c: 146: }
 14744                           ;secret_task.c: 147: data->holdCountA = 0;
 14745  1F52  0858               	movf	secret_Main@data,w
 14746  1F53  0086               	movwf	6
 14747  1F54  0859               	movf	secret_Main@data+1,w
 14748  1F55  0087               	movwf	7
 14749  1F56  3144               	addfsr 1,4
 14750  1F57  3000               	movlw	0
 14751  1F58  3FC0               	movwi [0]fsr1
 14752  1F59  3FC1               	movwi [1]fsr1
 14753                           
 14754                           ;secret_task.c: 148: data->holdCountB = 0;
 14755  1F5A  0858               	movf	secret_Main@data,w
 14756  1F5B  0086               	movwf	6
 14757  1F5C  0859               	movf	secret_Main@data+1,w
 14758  1F5D  0087               	movwf	7
 14759  1F5E  3146               	addfsr 1,6
 14760  1F5F  3000               	movlw	0
 14761  1F60  3FC0               	movwi [0]fsr1
 14762  1F61  3FC1               	movwi [1]fsr1
 14763                           
 14764                           ;secret_task.c: 149: data->holdCountX += 1;
 14765  1F62  0858               	movf	secret_Main@data,w
 14766  1F63  0086               	movwf	6
 14767  1F64  0859               	movf	secret_Main@data+1,w
 14768  1F65  0087               	movwf	7
 14769  1F66  3148               	addfsr 1,8
 14770  1F67  3001               	movlw	1
 14771  1F68  0781               	addwf	1,f
 14772  1F69  3141               	addfsr 1,1
 14773  1F6A  1803               	skipnc
 14774  1F6B  0A81               	incf	1,f
 14775                           
 14776                           ;secret_task.c: 150: data->holdCountY = 0;
 14777  1F6C  0858               	movf	secret_Main@data,w
 14778  1F6D  0086               	movwf	6
 14779  1F6E  0859               	movf	secret_Main@data+1,w
 14780  1F6F  0087               	movwf	7
 14781  1F70  314A               	addfsr 1,10
 14782  1F71  3000               	movlw	0
 14783  1F72  3FC0               	movwi [0]fsr1
 14784  1F73  3FC1               	movwi [1]fsr1
 14785                           
 14786                           ;secret_task.c: 151: data->noholdCount = 0;
 14787  1F74  0858               	movf	secret_Main@data,w
 14788  1F75  0086               	movwf	6
 14789  1F76  0859               	movf	secret_Main@data+1,w
 14790  1F77  0087               	movwf	7
 14791  1F78  314C               	addfsr 1,12
 14792  1F79  3000               	movlw	0
 14793  1F7A  3FC0               	movwi [0]fsr1
 14794  1F7B  3FC1               	movwi [1]fsr1
 14795                           
 14796                           ;secret_task.c: 152: data->delayTickCount = 300;
 14797  1F7C  0858               	movf	secret_Main@data,w
 14798  1F7D  0086               	movwf	6
 14799  1F7E  0859               	movf	secret_Main@data+1,w
 14800  1F7F  0087               	movwf	7
 14801  1F80  3142               	addfsr 1,2
 14802  1F81  302C               	movlw	44
 14803  1F82  3FC0               	movwi [0]fsr1
 14804  1F83  3001               	movlw	1
 14805  1F84  3FC1               	movwi [1]fsr1
 14806                           
 14807                           ;secret_task.c: 153: break;
 14808  1F85  2FF5               	goto	l8374
 14809  1F86                     l8352:	
 14810                           ;secret_task.c: 154: case 8:
 14811                           
 14812                           
 14813                           ;secret_task.c: 156: if (data->holdCountY == 0){
 14814  1F86  0858               	movf	secret_Main@data,w
 14815  1F87  0086               	movwf	6
 14816  1F88  0859               	movf	secret_Main@data+1,w
 14817  1F89  0087               	movwf	7
 14818  1F8A  314A               	addfsr 1,10
 14819  1F8B  0016               	moviw fsr1++
 14820  1F8C  0401               	iorwf	1,w
 14821  1F8D  1D03               	btfss	3,2
 14822  1F8E  2F9E               	goto	l8356
 14823                           
 14824                           ;secret_task.c: 157: secret_found = secret_check(data, buttonPressed);
 14825  1F8F  0859               	movf	secret_Main@data+1,w
 14826  1F90  00F8               	movwf	secret_check@data+1
 14827  1F91  0858               	movf	secret_Main@data,w
 14828  1F92  00F7               	movwf	secret_check@data
 14829  1F93  0857               	movf	secret_Main@buttonPressed,w
 14830  1F94  00D4               	movwf	??_secret_Main
 14831  1F95  0854               	movf	??_secret_Main,w
 14832  1F96  00F9               	movwf	secret_check@buttonPressed
 14833  1F97  319C  24AD  319E   	fcall	_secret_check
 14834  1F9A  0020               	movlb	0	; select bank0
 14835  1F9B  00D5               	movwf	??_secret_Main+1
 14836  1F9C  0855               	movf	??_secret_Main+1,w
 14837  1F9D  00D6               	movwf	secret_Main@secret_found
 14838  1F9E                     l8356:	
 14839                           
 14840                           ;secret_task.c: 158: }
 14841                           ;secret_task.c: 159: data->holdCountA = 0;
 14842  1F9E  0858               	movf	secret_Main@data,w
 14843  1F9F  0086               	movwf	6
 14844  1FA0  0859               	movf	secret_Main@data+1,w
 14845  1FA1  0087               	movwf	7
 14846  1FA2  3144               	addfsr 1,4
 14847  1FA3  3000               	movlw	0
 14848  1FA4  3FC0               	movwi [0]fsr1
 14849  1FA5  3FC1               	movwi [1]fsr1
 14850                           
 14851                           ;secret_task.c: 160: data->holdCountB = 0;
 14852  1FA6  0858               	movf	secret_Main@data,w
 14853  1FA7  0086               	movwf	6
 14854  1FA8  0859               	movf	secret_Main@data+1,w
 14855  1FA9  0087               	movwf	7
 14856  1FAA  3146               	addfsr 1,6
 14857  1FAB  3000               	movlw	0
 14858  1FAC  3FC0               	movwi [0]fsr1
 14859  1FAD  3FC1               	movwi [1]fsr1
 14860                           
 14861                           ;secret_task.c: 161: data->holdCountX = 0;
 14862  1FAE  0858               	movf	secret_Main@data,w
 14863  1FAF  0086               	movwf	6
 14864  1FB0  0859               	movf	secret_Main@data+1,w
 14865  1FB1  0087               	movwf	7
 14866  1FB2  3148               	addfsr 1,8
 14867  1FB3  3000               	movlw	0
 14868  1FB4  3FC0               	movwi [0]fsr1
 14869  1FB5  3FC1               	movwi [1]fsr1
 14870                           
 14871                           ;secret_task.c: 162: data->holdCountY += 1;
 14872  1FB6  0858               	movf	secret_Main@data,w
 14873  1FB7  0086               	movwf	6
 14874  1FB8  0859               	movf	secret_Main@data+1,w
 14875  1FB9  0087               	movwf	7
 14876  1FBA  314A               	addfsr 1,10
 14877  1FBB  3001               	movlw	1
 14878  1FBC  0781               	addwf	1,f
 14879  1FBD  3141               	addfsr 1,1
 14880  1FBE  1803               	skipnc
 14881  1FBF  0A81               	incf	1,f
 14882                           
 14883                           ;secret_task.c: 163: data->noholdCount = 0;
 14884  1FC0  0858               	movf	secret_Main@data,w
 14885  1FC1  0086               	movwf	6
 14886  1FC2  0859               	movf	secret_Main@data+1,w
 14887  1FC3  0087               	movwf	7
 14888  1FC4  314C               	addfsr 1,12
 14889  1FC5  3000               	movlw	0
 14890  1FC6  3FC0               	movwi [0]fsr1
 14891  1FC7  3FC1               	movwi [1]fsr1
 14892                           
 14893                           ;secret_task.c: 164: data->delayTickCount = 300;
 14894  1FC8  0858               	movf	secret_Main@data,w
 14895  1FC9  0086               	movwf	6
 14896  1FCA  0859               	movf	secret_Main@data+1,w
 14897  1FCB  0087               	movwf	7
 14898  1FCC  3142               	addfsr 1,2
 14899  1FCD  302C               	movlw	44
 14900  1FCE  3FC0               	movwi [0]fsr1
 14901  1FCF  3001               	movlw	1
 14902  1FD0  3FC1               	movwi [1]fsr1
 14903                           
 14904                           ;secret_task.c: 165: break;
 14905  1FD1  2FF5               	goto	l8374
 14906  1FD2                     l8368:	
 14907                           ;secret_task.c: 166: default:
 14908                           
 14909                           
 14910                           ;secret_task.c: 168: secret_check(data, 0);
 14911  1FD2  0859               	movf	secret_Main@data+1,w
 14912  1FD3  00F8               	movwf	secret_check@data+1
 14913  1FD4  0858               	movf	secret_Main@data,w
 14914  1FD5  00F7               	movwf	secret_check@data
 14915  1FD6  01F9               	clrf	secret_check@buttonPressed
 14916  1FD7  319C  24AD  319E   	fcall	_secret_check
 14917                           
 14918                           ;secret_task.c: 169: secret_clear(data);
 14919  1FDA  0020               	movlb	0	; select bank0
 14920  1FDB  0859               	movf	secret_Main@data+1,w
 14921  1FDC  00F2               	movwf	secret_clear@data+1
 14922  1FDD  0858               	movf	secret_Main@data,w
 14923  1FDE  00F1               	movwf	secret_clear@data
 14924  1FDF  31A2  22B3  319E   	fcall	_secret_clear
 14925                           
 14926                           ;secret_task.c: 170: }
 14927  1FE2  2FF5               	goto	l8374
 14928  1FE3                     l8372:	
 14929  1FE3  0020               	movlb	0	; select bank0
 14930  1FE4  0857               	movf	secret_Main@buttonPressed,w
 14931                           
 14932                           ; Switch size 1, requested type "space"
 14933                           ; Number of cases is 5, Range of values is 0 to 8
 14934                           ; switch strategies available:
 14935                           ; Name         Instructions Cycles
 14936                           ; simple_byte           16     9 (average)
 14937                           ; direct_byte           24     6 (fixed)
 14938                           ; jumptable            260     6 (fixed)
 14939                           ;	Chosen strategy is simple_byte
 14940  1FE5  3A00               	xorlw	0	; case 0
 14941  1FE6  1903               	skipnz
 14942  1FE7  2E51               	goto	l8286
 14943  1FE8  3A01               	xorlw	1	; case 1
 14944  1FE9  1903               	skipnz
 14945  1FEA  2EA2               	goto	l8304
 14946  1FEB  3A03               	xorlw	3	; case 2
 14947  1FEC  1903               	skipnz
 14948  1FED  2EEE               	goto	l8320
 14949  1FEE  3A06               	xorlw	6	; case 4
 14950  1FEF  1903               	skipnz
 14951  1FF0  2F3A               	goto	l8336
 14952  1FF1  3A0C               	xorlw	12	; case 8
 14953  1FF2  1903               	skipnz
 14954  1FF3  2F86               	goto	l8352
 14955  1FF4  2FD2               	goto	l8368
 14956  1FF5                     l8374:	
 14957                           
 14958                           ;secret_task.c: 173: if (secret_found){
 14959  1FF5  0020               	movlb	0	; select bank0
 14960  1FF6  0856               	movf	secret_Main@secret_found,w
 14961  1FF7  1903               	btfsc	3,2
 14962  1FF8  0008               	return
 14963                           
 14964                           ;secret_task.c: 174: secret_clear(data);
 14965  1FF9  0859               	movf	secret_Main@data+1,w
 14966  1FFA  00F2               	movwf	secret_clear@data+1
 14967  1FFB  0858               	movf	secret_Main@data,w
 14968  1FFC  00F1               	movwf	secret_clear@data
 14969  1FFD  31A2  22B3         	fcall	_secret_clear
 14970  1FFF  0008               	return
 14971  2000                     __end_of_secret_Main:	
 14972                           
 14973                           	psect	text14
 14974  142C                     __ptext14:	
 14975 ;; *************** function _locked_Main *****************
 14976 ;; Defined at:
 14977 ;;		line 85 in file "locked_task.c"
 14978 ;; Parameters:    Size  Location     Type
 14979 ;;  taskData        2   50[BANK0 ] PTR void 
 14980 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 14981 ;;		 -> flashy_TaskData(30), NULL(0), 
 14982 ;; Auto vars:     Size  Location     Type
 14983 ;;  data            2   55[BANK0 ] PTR struct t_locked_task
 14984 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 14985 ;;		 -> flashy_TaskData(30), NULL(0), 
 14986 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 14987 ;; Return value:  Size  Location     Type
 14988 ;;                  1    wreg      void 
 14989 ;; Registers used:
 14990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14991 ;; Tracked objects:
 14992 ;;		On entry : 0/0
 14993 ;;		On exit  : 0/0
 14994 ;;		Unchanged: 0/0
 14995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14996 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14997 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14998 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14999 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15000 ;;Total ram usage:        7 bytes
 15001 ;; Hardware stack levels used:    1
 15002 ;; Hardware stack levels required when called:   11
 15003 ;; This function calls:
 15004 ;;		___lwmod
 15005 ;;		_locked_clear
 15006 ;;		_locked_get_lock_leds
 15007 ;;		_locked_get_unlock_leds
 15008 ;;		_locked_lock_leds
 15009 ;;		_locked_unlock_leds
 15010 ;;		_marquee
 15011 ;;		_nullifyBadge_buttonsGet
 15012 ;;		_nullifyBadge_userLedsSet
 15013 ;;		_slot_Setup
 15014 ;; This function is called by:
 15015 ;;		_main
 15016 ;;		_scheduler_TaskRun
 15017 ;; This function uses a non-reentrant model
 15018 ;;
 15019                           
 15020                           
 15021                           ;psect for function _locked_Main
 15022  142C                     _locked_Main:	
 15023                           
 15024                           ;locked_task.c: 86: struct t_locked_taskData *data = (struct t_locked_taskData *) taskDa
      +                          ta;
 15025                           
 15026                           ;incstack = 0
 15027                           ; Regs used in _locked_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15028  142C  0020               	movlb	0	; select bank0
 15029  142D  0853               	movf	locked_Main@taskData+1,w
 15030  142E  00D8               	movwf	locked_Main@data+1
 15031  142F  0852               	movf	locked_Main@taskData,w
 15032  1430  00D7               	movwf	locked_Main@data
 15033                           
 15034                           ;locked_task.c: 87: u8 buttonPressed;
 15035                           ;locked_task.c: 89: if ( currentTask != LOCKED_TASK ){
 15036  1431  3003               	movlw	3
 15037  1432  0021               	movlb	1	; select bank1
 15038  1433  0638               	xorwf	_currentTask^(0+128),w
 15039  1434  0439               	iorwf	(_currentTask+1)^(0+128),w
 15040  1435  1903               	btfsc	3,2
 15041  1436  2D44               	goto	l8246
 15042                           
 15043                           ;locked_task.c: 90: data->holdCountA = 1;
 15044  1437  0020               	movlb	0	; select bank0
 15045  1438  0857               	movf	locked_Main@data,w
 15046  1439  0086               	movwf	6
 15047  143A  0858               	movf	locked_Main@data+1,w
 15048  143B  0087               	movwf	7
 15049  143C  3143               	addfsr 1,3
 15050  143D  3001               	movlw	1
 15051  143E  3FC0               	movwi [0]fsr1
 15052  143F  3000               	movlw	0
 15053  1440  3FC1               	movwi [1]fsr1
 15054                           
 15055                           ;locked_task.c: 91: data->holdCountB = 1;
 15056  1441  0857               	movf	locked_Main@data,w
 15057  1442  0086               	movwf	6
 15058  1443  0858               	movf	locked_Main@data+1,w
 15059  1444  0087               	movwf	7
 15060  1445  3145               	addfsr 1,5
 15061  1446  3001               	movlw	1
 15062  1447  3FC0               	movwi [0]fsr1
 15063  1448  3000               	movlw	0
 15064  1449  3FC1               	movwi [1]fsr1
 15065                           
 15066                           ;locked_task.c: 92: data->holdCountX = 1;
 15067  144A  0857               	movf	locked_Main@data,w
 15068  144B  0086               	movwf	6
 15069  144C  0858               	movf	locked_Main@data+1,w
 15070  144D  0087               	movwf	7
 15071  144E  3147               	addfsr 1,7
 15072  144F  3001               	movlw	1
 15073  1450  3FC0               	movwi [0]fsr1
 15074  1451  3000               	movlw	0
 15075  1452  3FC1               	movwi [1]fsr1
 15076                           
 15077                           ;locked_task.c: 93: data->holdCountY = 1;
 15078  1453  0857               	movf	locked_Main@data,w
 15079  1454  0086               	movwf	6
 15080  1455  0858               	movf	locked_Main@data+1,w
 15081  1456  0087               	movwf	7
 15082  1457  3149               	addfsr 1,9
 15083  1458  3001               	movlw	1
 15084  1459  3FC0               	movwi [0]fsr1
 15085  145A  3000               	movlw	0
 15086  145B  3FC1               	movwi [1]fsr1
 15087                           
 15088                           ;locked_task.c: 94: return;
 15089  145C  0008               	return
 15090  145D                     l8202:	
 15091                           ;locked_task.c: 101: case LOCKED_UNLOCKING_STATE:
 15092                           
 15093                           ;locked_task.c: 95: }
 15094                           ;locked_task.c: 100: switch (data->state){
 15095                           
 15096                           
 15097                           ;locked_task.c: 102: badge_locked = 0;
 15098  145D  0021               	movlb	1	; select bank1
 15099  145E  01C4               	clrf	_badge_locked^(0+128)
 15100                           
 15101                           ;locked_task.c: 103: slot_Setup(slot_taskData);
 15102  145F  083B               	movf	(_slot_taskData+1)^(0+128),w
 15103  1460  0020               	movlb	0	; select bank0
 15104  1461  00B0               	movwf	slot_Setup@taskData+1
 15105  1462  0021               	movlb	1	; select bank1
 15106  1463  083A               	movf	_slot_taskData^(0+128),w
 15107  1464  0020               	movlb	0	; select bank0
 15108  1465  00AF               	movwf	slot_Setup@taskData
 15109  1466  31A7  2702  3194   	fcall	_slot_Setup
 15110                           
 15111                           ;locked_task.c: 104: marquee("UNLOCKING...", data->delayTickCount);
 15112  1469  305D               	movlw	low (STR_26| (0+32768))
 15113  146A  0020               	movlb	0	; select bank0
 15114  146B  00BA               	movwf	marquee@string
 15115  146C  30B0               	movlw	high (STR_26| (0+32768))
 15116  146D  00BB               	movwf	marquee@string+1
 15117  146E  0857               	movf	locked_Main@data,w
 15118  146F  0086               	movwf	6
 15119  1470  0858               	movf	locked_Main@data+1,w
 15120  1471  0087               	movwf	7
 15121  1472  3141               	addfsr 1,1
 15122  1473  3F40               	moviw [0]fsr1
 15123  1474  00BC               	movwf	marquee@count
 15124  1475  3F41               	moviw [1]fsr1
 15125  1476  00BD               	movwf	marquee@count+1
 15126  1477  319B  2338  3194   	fcall	_marquee
 15127                           
 15128                           ;locked_task.c: 106: if (data->delayTickCount % 75 == 0){
 15129  147A  304B               	movlw	75
 15130  147B  0020               	movlb	0	; select bank0
 15131  147C  00AB               	movwf	___lwmod@divisor
 15132  147D  3000               	movlw	0
 15133  147E  00AC               	movwf	___lwmod@divisor+1
 15134  147F  0857               	movf	locked_Main@data,w
 15135  1480  0086               	movwf	6
 15136  1481  0858               	movf	locked_Main@data+1,w
 15137  1482  0087               	movwf	7
 15138  1483  3141               	addfsr 1,1
 15139  1484  3F40               	moviw [0]fsr1
 15140  1485  00AD               	movwf	___lwmod@dividend
 15141  1486  3F41               	moviw [1]fsr1
 15142  1487  00AE               	movwf	___lwmod@dividend+1
 15143  1488  31A1  21F4  3194   	fcall	___lwmod
 15144  148B  0020               	movlb	0	; select bank0
 15145  148C  082B               	movf	?___lwmod,w
 15146  148D  042C               	iorwf	?___lwmod+1,w
 15147  148E  1D03               	btfss	3,2
 15148  148F  2C9A               	goto	l8212
 15149                           
 15150                           ;locked_task.c: 107: locked_leds = locked_lock_base_leds | locked_get_unlock_leds();
 15151  1490  31AF  27E7  3194   	fcall	_locked_get_unlock_leds
 15152  1493  0021               	movlb	1	; select bank1
 15153  1494  085F               	movf	_locked_lock_base_leds^(0+128),w
 15154  1495  0471               	iorwf	?_locked_get_unlock_leds,w
 15155  1496  00A0               	movwf	_locked_leds^(0+128)
 15156  1497  0860               	movf	(_locked_lock_base_leds+1)^(0+128),w
 15157  1498  0472               	iorwf	?_locked_get_unlock_leds+1,w
 15158  1499  00A1               	movwf	(_locked_leds+1)^(0+128)
 15159  149A                     l8212:	
 15160                           
 15161                           ;locked_task.c: 108: }
 15162                           ;locked_task.c: 111: if (data->delayTickCount == 375){
 15163  149A  0020               	movlb	0	; select bank0
 15164  149B  0857               	movf	locked_Main@data,w
 15165  149C  0086               	movwf	6
 15166  149D  0858               	movf	locked_Main@data+1,w
 15167  149E  0087               	movwf	7
 15168  149F  3141               	addfsr 1,1
 15169  14A0  0016               	moviw fsr1++
 15170  14A1  3A77               	xorlw	119
 15171  14A2  00D4               	movwf	??_locked_Main
 15172  14A3  0016               	moviw fsr1++
 15173  14A4  3A01               	xorlw	1
 15174  14A5  04D4               	iorwf	??_locked_Main,f
 15175  14A6  1D03               	btfss	3,2
 15176  14A7  2D0A               	goto	l8232
 15177                           
 15178                           ;locked_task.c: 112: data->state = LOCKED_UNLOCKED_STATE;
 15179  14A8  0857               	movf	locked_Main@data,w
 15180  14A9  3E0D               	addlw	13
 15181  14AA  00D4               	movwf	??_locked_Main
 15182  14AB  3000               	movlw	0
 15183  14AC  3D58               	addwfc	locked_Main@data+1,w
 15184  14AD  00D5               	movwf	??_locked_Main+1
 15185  14AE  0854               	movf	??_locked_Main,w
 15186  14AF  0086               	movwf	6
 15187  14B0  0855               	movf	??_locked_Main+1,w
 15188  14B1  0087               	movwf	7
 15189  14B2  3002               	movlw	2
 15190  14B3  0081               	movwf	1
 15191                           
 15192                           ;locked_task.c: 113: data->delayTickCount = 0;
 15193  14B4  0857               	movf	locked_Main@data,w
 15194  14B5  0086               	movwf	6
 15195  14B6  0858               	movf	locked_Main@data+1,w
 15196  14B7  0087               	movwf	7
 15197  14B8  3141               	addfsr 1,1
 15198  14B9  3000               	movlw	0
 15199  14BA  3FC0               	movwi [0]fsr1
 15200  14BB  3FC1               	movwi [1]fsr1
 15201  14BC  2D58               	goto	l8248
 15202  14BD                     l8220:	
 15203                           ;locked_task.c: 119: case LOCKED_LOCKING_STATE:
 15204                           
 15205                           ;locked_task.c: 117: }
 15206                           ;locked_task.c: 118: break;
 15207                           
 15208                           ;locked_task.c: 115: else {
 15209                           ;locked_task.c: 116: data->delayTickCount += 1;
 15210                           
 15211                           ;locked_task.c: 114: }
 15212                           
 15213                           
 15214                           ;locked_task.c: 120: marquee("LOCKING...", data->delayTickCount);
 15215  14BD  305F               	movlw	low ((STR_26+2)| (0+32768))
 15216  14BE  00BA               	movwf	marquee@string
 15217  14BF  30B0               	movlw	high ((STR_26+2)| (0+32768))
 15218  14C0  00BB               	movwf	marquee@string+1
 15219  14C1  0857               	movf	locked_Main@data,w
 15220  14C2  0086               	movwf	6
 15221  14C3  0858               	movf	locked_Main@data+1,w
 15222  14C4  0087               	movwf	7
 15223  14C5  3141               	addfsr 1,1
 15224  14C6  3F40               	moviw [0]fsr1
 15225  14C7  00BC               	movwf	marquee@count
 15226  14C8  3F41               	moviw [1]fsr1
 15227  14C9  00BD               	movwf	marquee@count+1
 15228  14CA  319B  2338  3194   	fcall	_marquee
 15229                           
 15230                           ;locked_task.c: 122: if (data->delayTickCount % 75 == 0){
 15231  14CD  304B               	movlw	75
 15232  14CE  0020               	movlb	0	; select bank0
 15233  14CF  00AB               	movwf	___lwmod@divisor
 15234  14D0  3000               	movlw	0
 15235  14D1  00AC               	movwf	___lwmod@divisor+1
 15236  14D2  0857               	movf	locked_Main@data,w
 15237  14D3  0086               	movwf	6
 15238  14D4  0858               	movf	locked_Main@data+1,w
 15239  14D5  0087               	movwf	7
 15240  14D6  3141               	addfsr 1,1
 15241  14D7  3F40               	moviw [0]fsr1
 15242  14D8  00AD               	movwf	___lwmod@dividend
 15243  14D9  3F41               	moviw [1]fsr1
 15244  14DA  00AE               	movwf	___lwmod@dividend+1
 15245  14DB  31A1  21F4  3194   	fcall	___lwmod
 15246  14DE  0020               	movlb	0	; select bank0
 15247  14DF  082B               	movf	?___lwmod,w
 15248  14E0  042C               	iorwf	?___lwmod+1,w
 15249  14E1  1D03               	btfss	3,2
 15250  14E2  2CED               	goto	l8226
 15251                           
 15252                           ;locked_task.c: 123: locked_leds = locked_lock_base_leds | locked_get_lock_leds();
 15253  14E3  31A1  2130  3194   	fcall	_locked_get_lock_leds
 15254  14E6  0021               	movlb	1	; select bank1
 15255  14E7  085F               	movf	_locked_lock_base_leds^(0+128),w
 15256  14E8  0471               	iorwf	?_locked_get_lock_leds,w
 15257  14E9  00A0               	movwf	_locked_leds^(0+128)
 15258  14EA  0860               	movf	(_locked_lock_base_leds+1)^(0+128),w
 15259  14EB  0472               	iorwf	?_locked_get_lock_leds+1,w
 15260  14EC  00A1               	movwf	(_locked_leds+1)^(0+128)
 15261  14ED                     l8226:	
 15262                           
 15263                           ;locked_task.c: 124: }
 15264                           ;locked_task.c: 127: if (data->delayTickCount == 375){
 15265  14ED  0020               	movlb	0	; select bank0
 15266  14EE  0857               	movf	locked_Main@data,w
 15267  14EF  0086               	movwf	6
 15268  14F0  0858               	movf	locked_Main@data+1,w
 15269  14F1  0087               	movwf	7
 15270  14F2  3141               	addfsr 1,1
 15271  14F3  0016               	moviw fsr1++
 15272  14F4  3A77               	xorlw	119
 15273  14F5  00D4               	movwf	??_locked_Main
 15274  14F6  0016               	moviw fsr1++
 15275  14F7  3A01               	xorlw	1
 15276  14F8  04D4               	iorwf	??_locked_Main,f
 15277  14F9  1D03               	btfss	3,2
 15278  14FA  2D0A               	goto	l8232
 15279                           
 15280                           ;locked_task.c: 128: data->state = LOCKED_LOCKED_STATE;
 15281  14FB  0857               	movf	locked_Main@data,w
 15282  14FC  0086               	movwf	6
 15283  14FD  0858               	movf	locked_Main@data+1,w
 15284  14FE  0087               	movwf	7
 15285  14FF  314D               	addfsr 1,13
 15286  1500  0181               	clrf	1
 15287                           
 15288                           ;locked_task.c: 129: data->delayTickCount = 0;
 15289  1501  0857               	movf	locked_Main@data,w
 15290  1502  0086               	movwf	6
 15291  1503  0858               	movf	locked_Main@data+1,w
 15292  1504  0087               	movwf	7
 15293  1505  3141               	addfsr 1,1
 15294  1506  3000               	movlw	0
 15295  1507  3FC0               	movwi [0]fsr1
 15296  1508  3FC1               	movwi [1]fsr1
 15297                           
 15298                           ;locked_task.c: 130: }
 15299  1509  2D58               	goto	l8248
 15300  150A                     l8232:	
 15301                           
 15302                           ;locked_task.c: 131: else {
 15303                           ;locked_task.c: 132: data->delayTickCount += 1;
 15304  150A  0857               	movf	locked_Main@data,w
 15305  150B  0086               	movwf	6
 15306  150C  0858               	movf	locked_Main@data+1,w
 15307  150D  0087               	movwf	7
 15308  150E  3141               	addfsr 1,1
 15309  150F  3001               	movlw	1
 15310  1510  0781               	addwf	1,f
 15311  1511  3141               	addfsr 1,1
 15312  1512  1803               	skipnc
 15313  1513  0A81               	incf	1,f
 15314                           
 15315                           ;locked_task.c: 133: }
 15316                           ;locked_task.c: 134: break;
 15317  1514  2D58               	goto	l8248
 15318  1515                     l8234:	
 15319                           ;locked_task.c: 135: case LOCKED_UNLOCKED_STATE:
 15320                           
 15321                           
 15322                           ;locked_task.c: 136: badge_locked = 0;
 15323  1515  0021               	movlb	1	; select bank1
 15324  1516  01C4               	clrf	_badge_locked^(0+128)
 15325                           
 15326                           ;locked_task.c: 138: marquee("OPEN", data->delayTickCount);
 15327  1517  3025               	movlw	low (STR_28| (0+32768))
 15328  1518  0020               	movlb	0	; select bank0
 15329  1519  00BA               	movwf	marquee@string
 15330  151A  30B1               	movlw	high (STR_28| (0+32768))
 15331  151B  00BB               	movwf	marquee@string+1
 15332  151C  0857               	movf	locked_Main@data,w
 15333  151D  0086               	movwf	6
 15334  151E  0858               	movf	locked_Main@data+1,w
 15335  151F  0087               	movwf	7
 15336  1520  3141               	addfsr 1,1
 15337  1521  3F40               	moviw [0]fsr1
 15338  1522  00BC               	movwf	marquee@count
 15339  1523  3F41               	moviw [1]fsr1
 15340  1524  00BD               	movwf	marquee@count+1
 15341  1525  319B  2338  3194   	fcall	_marquee
 15342                           
 15343                           ;locked_task.c: 139: locked_unlock_leds();
 15344  1528  31AF  2750  3194   	fcall	_locked_unlock_leds
 15345                           
 15346                           ;locked_task.c: 140: break;
 15347  152B  2D58               	goto	l8248
 15348  152C                     l1254:	
 15349                           ;locked_task.c: 141: case LOCKED_LOCKED_STATE:
 15350                           
 15351                           
 15352                           ;locked_task.c: 142: badge_locked = 1;
 15353  152C  0021               	movlb	1	; select bank1
 15354  152D  01C4               	clrf	_badge_locked^(0+128)
 15355  152E  0AC4               	incf	_badge_locked^(0+128),f
 15356                           
 15357                           ;locked_task.c: 143: marquee("LOCK", data->delayTickCount);
 15358  152F  3020               	movlw	low (STR_29| (0+32768))
 15359  1530  0020               	movlb	0	; select bank0
 15360  1531  00BA               	movwf	marquee@string
 15361  1532  30B1               	movlw	high (STR_29| (0+32768))
 15362  1533  00BB               	movwf	marquee@string+1
 15363  1534  0857               	movf	locked_Main@data,w
 15364  1535  0086               	movwf	6
 15365  1536  0858               	movf	locked_Main@data+1,w
 15366  1537  0087               	movwf	7
 15367  1538  3141               	addfsr 1,1
 15368  1539  3F40               	moviw [0]fsr1
 15369  153A  00BC               	movwf	marquee@count
 15370  153B  3F41               	moviw [1]fsr1
 15371  153C  00BD               	movwf	marquee@count+1
 15372  153D  319B  2338  3194   	fcall	_marquee
 15373                           
 15374                           ;locked_task.c: 145: locked_lock_leds();
 15375  1540  31A0  202A  3194   	fcall	_locked_lock_leds
 15376                           
 15377                           ;locked_task.c: 147: }
 15378                           
 15379                           ;locked_task.c: 146: break;
 15380  1543  2D58               	goto	l8248
 15381  1544                     l8246:	
 15382  1544  0020               	movlb	0	; select bank0
 15383  1545  0857               	movf	locked_Main@data,w
 15384  1546  0086               	movwf	6
 15385  1547  0858               	movf	locked_Main@data+1,w
 15386  1548  0087               	movwf	7
 15387  1549  314D               	addfsr 1,13
 15388  154A  0801               	movf	1,w
 15389                           
 15390                           ; Switch size 1, requested type "space"
 15391                           ; Number of cases is 4, Range of values is 0 to 3
 15392                           ; switch strategies available:
 15393                           ; Name         Instructions Cycles
 15394                           ; simple_byte           13     7 (average)
 15395                           ; direct_byte           14     6 (fixed)
 15396                           ; jumptable            260     6 (fixed)
 15397                           ;	Chosen strategy is simple_byte
 15398  154B  3A00               	xorlw	0	; case 0
 15399  154C  1903               	skipnz
 15400  154D  2D2C               	goto	l1254
 15401  154E  3A01               	xorlw	1	; case 1
 15402  154F  1903               	skipnz
 15403  1550  2CBD               	goto	l8220
 15404  1551  3A03               	xorlw	3	; case 2
 15405  1552  1903               	skipnz
 15406  1553  2D15               	goto	l8234
 15407  1554  3A01               	xorlw	1	; case 3
 15408  1555  1903               	skipnz
 15409  1556  2C5D               	goto	l8202
 15410  1557  2D58               	goto	l8248
 15411  1558                     l8248:	
 15412                           
 15413                           ;locked_task.c: 148: nullifyBadge_userLedsSet(data->badge, locked_leds);
 15414  1558  0021               	movlb	1	; select bank1
 15415  1559  0821               	movf	(_locked_leds+1)^(0+128),w
 15416  155A  0020               	movlb	0	; select bank0
 15417  155B  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 15418  155C  0021               	movlb	1	; select bank1
 15419  155D  0820               	movf	_locked_leds^(0+128),w
 15420  155E  0020               	movlb	0	; select bank0
 15421  155F  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 15422  1560  0857               	movf	locked_Main@data,w
 15423  1561  0086               	movwf	6
 15424  1562  0858               	movf	locked_Main@data+1,w
 15425  1563  0087               	movwf	7
 15426  1564  0801               	movf	1,w
 15427  1565  31AF  2709  3194   	fcall	_nullifyBadge_userLedsSet
 15428                           
 15429                           ;locked_task.c: 151: buttonPressed = nullifyBadge_buttonsGet();
 15430  1568  31A2  2250  3194   	fcall	_nullifyBadge_buttonsGet
 15431  156B  0020               	movlb	0	; select bank0
 15432  156C  00D4               	movwf	??_locked_Main
 15433  156D  0854               	movf	??_locked_Main,w
 15434  156E  00D6               	movwf	locked_Main@buttonPressed
 15435                           
 15436                           ;locked_task.c: 152: switch (buttonPressed) {
 15437  156F  2E00               	goto	l8278
 15438  1570                     l8252:	
 15439                           ;locked_task.c: 153: case 4:
 15440                           
 15441                           
 15442                           ;locked_task.c: 154: locked_clear(data);
 15443  1570  0858               	movf	locked_Main@data+1,w
 15444  1571  00BA               	movwf	locked_clear@data+1
 15445  1572  0857               	movf	locked_Main@data,w
 15446  1573  00B9               	movwf	locked_clear@data
 15447  1574  31A4  24BF         	fcall	_locked_clear
 15448                           
 15449                           ;locked_task.c: 155: currentTask = MENU_TASK;
 15450  1576  0021               	movlb	1	; select bank1
 15451  1577  01B8               	clrf	_currentTask^(0+128)
 15452  1578  01B9               	clrf	(_currentTask+1)^(0+128)
 15453                           
 15454                           ;locked_task.c: 156: break;
 15455  1579  0008               	return
 15456  157A                     l8256:	
 15457                           ;locked_task.c: 157: case 8:
 15458                           
 15459                           
 15460                           ;locked_task.c: 158: if (data->holdCountY == 0){
 15461  157A  0020               	movlb	0	; select bank0
 15462  157B  0857               	movf	locked_Main@data,w
 15463  157C  0086               	movwf	6
 15464  157D  0858               	movf	locked_Main@data+1,w
 15465  157E  0087               	movwf	7
 15466  157F  3149               	addfsr 1,9
 15467  1580  0016               	moviw fsr1++
 15468  1581  0401               	iorwf	1,w
 15469  1582  1D03               	btfss	3,2
 15470  1583  2DAA               	goto	l8266
 15471                           
 15472                           ;locked_task.c: 161: data->delayTickCount = 0;
 15473  1584  0857               	movf	locked_Main@data,w
 15474  1585  0086               	movwf	6
 15475  1586  0858               	movf	locked_Main@data+1,w
 15476  1587  0087               	movwf	7
 15477  1588  3141               	addfsr 1,1
 15478  1589  3000               	movlw	0
 15479  158A  3FC0               	movwi [0]fsr1
 15480  158B  3FC1               	movwi [1]fsr1
 15481                           
 15482                           ;locked_task.c: 162: if (badge_locked){
 15483  158C  0021               	movlb	1	; select bank1
 15484  158D  0844               	movf	_badge_locked^(0+128),w
 15485  158E  1903               	btfsc	3,2
 15486  158F  2D9D               	goto	l8264
 15487                           
 15488                           ;locked_task.c: 164: data->state = LOCKED_UNLOCKING_STATE;
 15489  1590  0020               	movlb	0	; select bank0
 15490  1591  0857               	movf	locked_Main@data,w
 15491  1592  3E0D               	addlw	13
 15492  1593  00D4               	movwf	??_locked_Main
 15493  1594  3000               	movlw	0
 15494  1595  3D58               	addwfc	locked_Main@data+1,w
 15495  1596  00D5               	movwf	??_locked_Main+1
 15496  1597  0854               	movf	??_locked_Main,w
 15497  1598  0086               	movwf	6
 15498  1599  0855               	movf	??_locked_Main+1,w
 15499  159A  0087               	movwf	7
 15500  159B  3003               	movlw	3
 15501  159C  2DA9               	goto	L3
 15502  159D                     l8264:	
 15503                           ;locked_task.c: 165: }
 15504                           
 15505                           
 15506                           ;locked_task.c: 166: else {
 15507                           ;locked_task.c: 168: data->state = LOCKED_LOCKING_STATE;
 15508  159D  0020               	movlb	0	; select bank0
 15509  159E  0857               	movf	locked_Main@data,w
 15510  159F  3E0D               	addlw	13
 15511  15A0  00D4               	movwf	??_locked_Main
 15512  15A1  3000               	movlw	0
 15513  15A2  3D58               	addwfc	locked_Main@data+1,w
 15514  15A3  00D5               	movwf	??_locked_Main+1
 15515  15A4  0854               	movf	??_locked_Main,w
 15516  15A5  0086               	movwf	6
 15517  15A6  0855               	movf	??_locked_Main+1,w
 15518  15A7  0087               	movwf	7
 15519  15A8  3001               	movlw	1
 15520  15A9                     L3:	
 15521  15A9  0081               	movwf	1
 15522  15AA                     l8266:	
 15523                           
 15524                           ;locked_task.c: 169: }
 15525                           ;locked_task.c: 170: }
 15526                           ;locked_task.c: 171: data->holdCountA = 0;
 15527  15AA  0857               	movf	locked_Main@data,w
 15528  15AB  0086               	movwf	6
 15529  15AC  0858               	movf	locked_Main@data+1,w
 15530  15AD  0087               	movwf	7
 15531  15AE  3143               	addfsr 1,3
 15532  15AF  3000               	movlw	0
 15533  15B0  3FC0               	movwi [0]fsr1
 15534  15B1  3FC1               	movwi [1]fsr1
 15535                           
 15536                           ;locked_task.c: 172: data->holdCountB = 0;
 15537  15B2  0857               	movf	locked_Main@data,w
 15538  15B3  0086               	movwf	6
 15539  15B4  0858               	movf	locked_Main@data+1,w
 15540  15B5  0087               	movwf	7
 15541  15B6  3145               	addfsr 1,5
 15542  15B7  3000               	movlw	0
 15543  15B8  3FC0               	movwi [0]fsr1
 15544  15B9  3FC1               	movwi [1]fsr1
 15545                           
 15546                           ;locked_task.c: 173: data->holdCountX = 0;
 15547  15BA  0857               	movf	locked_Main@data,w
 15548  15BB  0086               	movwf	6
 15549  15BC  0858               	movf	locked_Main@data+1,w
 15550  15BD  0087               	movwf	7
 15551  15BE  3147               	addfsr 1,7
 15552  15BF  3000               	movlw	0
 15553  15C0  3FC0               	movwi [0]fsr1
 15554  15C1  3FC1               	movwi [1]fsr1
 15555                           
 15556                           ;locked_task.c: 174: data->holdCountY += 1;
 15557  15C2  0857               	movf	locked_Main@data,w
 15558  15C3  0086               	movwf	6
 15559  15C4  0858               	movf	locked_Main@data+1,w
 15560  15C5  0087               	movwf	7
 15561  15C6  3149               	addfsr 1,9
 15562  15C7  3001               	movlw	1
 15563  15C8  0781               	addwf	1,f
 15564  15C9  3141               	addfsr 1,1
 15565  15CA  1803               	skipnc
 15566  15CB  0A81               	incf	1,f
 15567                           
 15568                           ;locked_task.c: 175: data->noholdCount = 0;
 15569  15CC  0857               	movf	locked_Main@data,w
 15570  15CD  0086               	movwf	6
 15571  15CE  0858               	movf	locked_Main@data+1,w
 15572  15CF  0087               	movwf	7
 15573  15D0  314B               	addfsr 1,11
 15574  15D1  3000               	movlw	0
 15575  15D2  3FC0               	movwi [0]fsr1
 15576  15D3  3FC1               	movwi [1]fsr1
 15577                           
 15578                           ;locked_task.c: 176: break;
 15579  15D4  0008               	return
 15580  15D5                     l8274:	
 15581                           ;locked_task.c: 177: default:
 15582                           
 15583                           
 15584                           ;locked_task.c: 178: data->holdCountA = 0;
 15585  15D5  0857               	movf	locked_Main@data,w
 15586  15D6  0086               	movwf	6
 15587  15D7  0858               	movf	locked_Main@data+1,w
 15588  15D8  0087               	movwf	7
 15589  15D9  3143               	addfsr 1,3
 15590  15DA  3000               	movlw	0
 15591  15DB  3FC0               	movwi [0]fsr1
 15592  15DC  3FC1               	movwi [1]fsr1
 15593                           
 15594                           ;locked_task.c: 179: data->holdCountB = 0;
 15595  15DD  0857               	movf	locked_Main@data,w
 15596  15DE  0086               	movwf	6
 15597  15DF  0858               	movf	locked_Main@data+1,w
 15598  15E0  0087               	movwf	7
 15599  15E1  3145               	addfsr 1,5
 15600  15E2  3000               	movlw	0
 15601  15E3  3FC0               	movwi [0]fsr1
 15602  15E4  3FC1               	movwi [1]fsr1
 15603                           
 15604                           ;locked_task.c: 180: data->holdCountX = 0;
 15605  15E5  0857               	movf	locked_Main@data,w
 15606  15E6  0086               	movwf	6
 15607  15E7  0858               	movf	locked_Main@data+1,w
 15608  15E8  0087               	movwf	7
 15609  15E9  3147               	addfsr 1,7
 15610  15EA  3000               	movlw	0
 15611  15EB  3FC0               	movwi [0]fsr1
 15612  15EC  3FC1               	movwi [1]fsr1
 15613                           
 15614                           ;locked_task.c: 181: data->holdCountY = 0;
 15615  15ED  0857               	movf	locked_Main@data,w
 15616  15EE  0086               	movwf	6
 15617  15EF  0858               	movf	locked_Main@data+1,w
 15618  15F0  0087               	movwf	7
 15619  15F1  3149               	addfsr 1,9
 15620  15F2  3000               	movlw	0
 15621  15F3  3FC0               	movwi [0]fsr1
 15622  15F4  3FC1               	movwi [1]fsr1
 15623                           
 15624                           ;locked_task.c: 182: data->noholdCount += 1;
 15625  15F5  0857               	movf	locked_Main@data,w
 15626  15F6  0086               	movwf	6
 15627  15F7  0858               	movf	locked_Main@data+1,w
 15628  15F8  0087               	movwf	7
 15629  15F9  314B               	addfsr 1,11
 15630  15FA  3001               	movlw	1
 15631  15FB  0781               	addwf	1,f
 15632  15FC  3141               	addfsr 1,1
 15633  15FD  1803               	skipnc
 15634  15FE  0A81               	incf	1,f
 15635                           
 15636                           ;locked_task.c: 183: }
 15637  15FF  0008               	return
 15638  1600                     l8278:	
 15639  1600  0856               	movf	locked_Main@buttonPressed,w
 15640                           
 15641                           ; Switch size 1, requested type "space"
 15642                           ; Number of cases is 2, Range of values is 4 to 8
 15643                           ; switch strategies available:
 15644                           ; Name         Instructions Cycles
 15645                           ; simple_byte            7     4 (average)
 15646                           ; direct_byte           19     9 (fixed)
 15647                           ; jumptable            263     9 (fixed)
 15648                           ;	Chosen strategy is simple_byte
 15649  1601  3A04               	xorlw	4	; case 4
 15650  1602  1903               	skipnz
 15651  1603  2D70               	goto	l8252
 15652  1604  3A0C               	xorlw	12	; case 8
 15653  1605  1903               	skipnz
 15654  1606  2D7A               	goto	l8256
 15655  1607  2DD5               	goto	l8274
 15656  1608  0008               	return
 15657  1609                     __end_of_locked_Main:	
 15658                           
 15659                           	psect	text15
 15660  1609                     __ptext15:	
 15661 ;; *************** function _menu_Main *****************
 15662 ;; Defined at:
 15663 ;;		line 55 in file "menu_task.c"
 15664 ;; Parameters:    Size  Location     Type
 15665 ;;  taskData        2   50[BANK0 ] PTR void 
 15666 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 15667 ;;		 -> flashy_TaskData(30), NULL(0), 
 15668 ;; Auto vars:     Size  Location     Type
 15669 ;;  data            2   55[BANK0 ] PTR struct t_menu_taskDa
 15670 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 15671 ;;		 -> flashy_TaskData(30), NULL(0), 
 15672 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 15673 ;; Return value:  Size  Location     Type
 15674 ;;                  1    wreg      void 
 15675 ;; Registers used:
 15676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15677 ;; Tracked objects:
 15678 ;;		On entry : 0/0
 15679 ;;		On exit  : 0/0
 15680 ;;		Unchanged: 0/0
 15681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15682 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15683 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15684 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15685 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15686 ;;Total ram usage:        7 bytes
 15687 ;; Hardware stack levels used:    1
 15688 ;; Hardware stack levels required when called:   12
 15689 ;; This function calls:
 15690 ;;		_menu_clear
 15691 ;;		_menu_display_option
 15692 ;;		_menu_run_option
 15693 ;;		_nullifyBadge_buttonsGet
 15694 ;;		_slot_Setup
 15695 ;; This function is called by:
 15696 ;;		_main
 15697 ;;		_scheduler_TaskRun
 15698 ;; This function uses a non-reentrant model
 15699 ;;
 15700                           
 15701                           
 15702                           ;psect for function _menu_Main
 15703  1609                     _menu_Main:	
 15704                           
 15705                           ;menu_task.c: 56: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 15706                           
 15707                           ;incstack = 0
 15708                           ; Regs used in _menu_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15709  1609  0020               	movlb	0	; select bank0
 15710  160A  0853               	movf	menu_Main@taskData+1,w
 15711  160B  00D8               	movwf	menu_Main@data+1
 15712  160C  0852               	movf	menu_Main@taskData,w
 15713  160D  00D7               	movwf	menu_Main@data
 15714                           
 15715                           ;menu_task.c: 57: u8 buttonPressed;
 15716                           ;menu_task.c: 59: if ( currentTask != MENU_TASK ){
 15717  160E  0021               	movlb	1	; select bank1
 15718  160F  0838               	movf	_currentTask^(0+128),w
 15719  1610  0439               	iorwf	(_currentTask+1)^(0+128),w
 15720  1611  1903               	btfsc	3,2
 15721  1612  2E8D               	goto	l7656
 15722                           
 15723                           ;menu_task.c: 61: buttonPressed = nullifyBadge_buttonsGet();
 15724  1613  31A2  2250  3196   	fcall	_nullifyBadge_buttonsGet
 15725  1616  0020               	movlb	0	; select bank0
 15726  1617  00D4               	movwf	??_menu_Main
 15727  1618  0854               	movf	??_menu_Main,w
 15728  1619  00D6               	movwf	menu_Main@buttonPressed
 15729                           
 15730                           ;menu_task.c: 62: switch (buttonPressed) {
 15731  161A  2E87               	goto	l7654
 15732  161B                     l7632:	
 15733                           ;menu_task.c: 63: case 1 | 2 | 8:
 15734                           
 15735                           
 15736                           ;menu_task.c: 64: currentTask = MENU_TASK;
 15737  161B  0021               	movlb	1	; select bank1
 15738  161C  01B8               	clrf	_currentTask^(0+128)
 15739  161D  01B9               	clrf	(_currentTask+1)^(0+128)
 15740                           
 15741                           ;menu_task.c: 65: menu_clear(data);
 15742  161E  0020               	movlb	0	; select bank0
 15743  161F  0858               	movf	menu_Main@data+1,w
 15744  1620  00BA               	movwf	menu_clear@data+1
 15745  1621  0857               	movf	menu_Main@data,w
 15746  1622  00B9               	movwf	menu_clear@data
 15747  1623  31A5  258A  3196   	fcall	_menu_clear
 15748                           
 15749                           ;menu_task.c: 68: slot_Setup(slot_taskData);
 15750  1626  0021               	movlb	1	; select bank1
 15751  1627  083B               	movf	(_slot_taskData+1)^(0+128),w
 15752  1628  0020               	movlb	0	; select bank0
 15753  1629  00B0               	movwf	slot_Setup@taskData+1
 15754  162A  0021               	movlb	1	; select bank1
 15755  162B  083A               	movf	_slot_taskData^(0+128),w
 15756  162C  0020               	movlb	0	; select bank0
 15757  162D  00AF               	movwf	slot_Setup@taskData
 15758  162E  31A7  2702  3196   	fcall	_slot_Setup
 15759                           
 15760                           ;menu_task.c: 71: data->holdCountA = 1;
 15761  1631  0020               	movlb	0	; select bank0
 15762  1632  0857               	movf	menu_Main@data,w
 15763  1633  0086               	movwf	6
 15764  1634  0858               	movf	menu_Main@data+1,w
 15765  1635  0087               	movwf	7
 15766  1636  3144               	addfsr 1,4
 15767  1637  3001               	movlw	1
 15768  1638  3FC0               	movwi [0]fsr1
 15769  1639  3000               	movlw	0
 15770  163A  3FC1               	movwi [1]fsr1
 15771                           
 15772                           ;menu_task.c: 72: data->holdCountB = 1;
 15773  163B  0857               	movf	menu_Main@data,w
 15774  163C  0086               	movwf	6
 15775  163D  0858               	movf	menu_Main@data+1,w
 15776  163E  0087               	movwf	7
 15777  163F  3146               	addfsr 1,6
 15778  1640  3001               	movlw	1
 15779  1641  3FC0               	movwi [0]fsr1
 15780  1642  3000               	movlw	0
 15781  1643  3FC1               	movwi [1]fsr1
 15782                           
 15783                           ;menu_task.c: 73: data->holdCountX = 1;
 15784  1644  0857               	movf	menu_Main@data,w
 15785  1645  0086               	movwf	6
 15786  1646  0858               	movf	menu_Main@data+1,w
 15787  1647  0087               	movwf	7
 15788  1648  3148               	addfsr 1,8
 15789  1649  3001               	movlw	1
 15790  164A  3FC0               	movwi [0]fsr1
 15791  164B  3000               	movlw	0
 15792  164C  3FC1               	movwi [1]fsr1
 15793                           
 15794                           ;menu_task.c: 74: data->holdCountY = 1;
 15795  164D  0857               	movf	menu_Main@data,w
 15796  164E  0086               	movwf	6
 15797  164F  0858               	movf	menu_Main@data+1,w
 15798  1650  0087               	movwf	7
 15799  1651  314A               	addfsr 1,10
 15800  1652  3001               	movlw	1
 15801  1653  3FC0               	movwi [0]fsr1
 15802  1654  3000               	movlw	0
 15803  1655  3FC1               	movwi [1]fsr1
 15804                           
 15805                           ;menu_task.c: 76: menu_option_idx = 0;
 15806  1656  0021               	movlb	1	; select bank1
 15807  1657  01B4               	clrf	_menu_option_idx^(0+128)
 15808  1658  01B5               	clrf	(_menu_option_idx+1)^(0+128)
 15809                           
 15810                           ;menu_task.c: 77: menu_display_option(data);
 15811  1659  0020               	movlb	0	; select bank0
 15812  165A  0858               	movf	menu_Main@data+1,w
 15813  165B  00CD               	movwf	menu_display_option@data+1
 15814  165C  0857               	movf	menu_Main@data,w
 15815  165D  00CC               	movwf	menu_display_option@data
 15816  165E  3198  2067         	fcall	_menu_display_option
 15817                           
 15818                           ;menu_task.c: 78: break;
 15819  1660  0008               	return
 15820  1661                     l7650:	
 15821                           ;menu_task.c: 79: default:
 15822                           
 15823                           
 15824                           ;menu_task.c: 81: data->holdCountA = 1;
 15825  1661  0020               	movlb	0	; select bank0
 15826  1662  0857               	movf	menu_Main@data,w
 15827  1663  0086               	movwf	6
 15828  1664  0858               	movf	menu_Main@data+1,w
 15829  1665  0087               	movwf	7
 15830  1666  3144               	addfsr 1,4
 15831  1667  3001               	movlw	1
 15832  1668  3FC0               	movwi [0]fsr1
 15833  1669  3000               	movlw	0
 15834  166A  3FC1               	movwi [1]fsr1
 15835                           
 15836                           ;menu_task.c: 82: data->holdCountB = 1;
 15837  166B  0857               	movf	menu_Main@data,w
 15838  166C  0086               	movwf	6
 15839  166D  0858               	movf	menu_Main@data+1,w
 15840  166E  0087               	movwf	7
 15841  166F  3146               	addfsr 1,6
 15842  1670  3001               	movlw	1
 15843  1671  3FC0               	movwi [0]fsr1
 15844  1672  3000               	movlw	0
 15845  1673  3FC1               	movwi [1]fsr1
 15846                           
 15847                           ;menu_task.c: 83: data->holdCountX = 1;
 15848  1674  0857               	movf	menu_Main@data,w
 15849  1675  0086               	movwf	6
 15850  1676  0858               	movf	menu_Main@data+1,w
 15851  1677  0087               	movwf	7
 15852  1678  3148               	addfsr 1,8
 15853  1679  3001               	movlw	1
 15854  167A  3FC0               	movwi [0]fsr1
 15855  167B  3000               	movlw	0
 15856  167C  3FC1               	movwi [1]fsr1
 15857                           
 15858                           ;menu_task.c: 84: data->holdCountY = 1;
 15859  167D  0857               	movf	menu_Main@data,w
 15860  167E  0086               	movwf	6
 15861  167F  0858               	movf	menu_Main@data+1,w
 15862  1680  0087               	movwf	7
 15863  1681  314A               	addfsr 1,10
 15864  1682  3001               	movlw	1
 15865  1683  3FC0               	movwi [0]fsr1
 15866  1684  3000               	movlw	0
 15867  1685  3FC1               	movwi [1]fsr1
 15868                           
 15869                           ;menu_task.c: 86: }
 15870                           
 15871                           ;menu_task.c: 85: break;
 15872  1686  0008               	return
 15873  1687                     l7654:	
 15874  1687  0856               	movf	menu_Main@buttonPressed,w
 15875                           
 15876                           ; Switch size 1, requested type "space"
 15877                           ; Number of cases is 1, Range of values is 11 to 11
 15878                           ; switch strategies available:
 15879                           ; Name         Instructions Cycles
 15880                           ; simple_byte            4     3 (average)
 15881                           ; direct_byte           11     9 (fixed)
 15882                           ; jumptable            263     9 (fixed)
 15883                           ;	Chosen strategy is simple_byte
 15884  1688  3A0B               	xorlw	11	; case 11
 15885  1689  1903               	skipnz
 15886  168A  2E1B               	goto	l7632
 15887  168B  2E61               	goto	l7650
 15888                           
 15889                           ;menu_task.c: 87: return;
 15890  168C  0008               	return
 15891  168D                     l7656:	
 15892                           
 15893                           ;menu_task.c: 88: }
 15894                           ;menu_task.c: 90: buttonPressed = nullifyBadge_buttonsGet();
 15895  168D  31A2  2250  3196   	fcall	_nullifyBadge_buttonsGet
 15896  1690  0020               	movlb	0	; select bank0
 15897  1691  00D4               	movwf	??_menu_Main
 15898  1692  0854               	movf	??_menu_Main,w
 15899  1693  00D6               	movwf	menu_Main@buttonPressed
 15900                           
 15901                           ;menu_task.c: 91: switch (buttonPressed) {
 15902  1694  2FEE               	goto	l7740
 15903  1695                     l7658:	
 15904                           ;menu_task.c: 92: case 1:
 15905                           
 15906                           
 15907                           ;menu_task.c: 94: if (data->holdCountA == 0){
 15908  1695  0857               	movf	menu_Main@data,w
 15909  1696  0086               	movwf	6
 15910  1697  0858               	movf	menu_Main@data+1,w
 15911  1698  0087               	movwf	7
 15912  1699  3144               	addfsr 1,4
 15913  169A  0016               	moviw fsr1++
 15914  169B  0401               	iorwf	1,w
 15915  169C  1D03               	btfss	3,2
 15916  169D  2EAE               	goto	l7666
 15917                           
 15918                           ;menu_task.c: 96: if (menu_option_idx == 0){
 15919  169E  0021               	movlb	1	; select bank1
 15920  169F  0834               	movf	_menu_option_idx^(0+128),w
 15921  16A0  0435               	iorwf	(_menu_option_idx+1)^(0+128),w
 15922  16A1  1D03               	btfss	3,2
 15923  16A2  2EAA               	goto	l7664
 15924                           
 15925                           ;menu_task.c: 97: menu_option_idx = menu_option_size - 1;
 15926  16A3  0832               	movf	_menu_option_size^(0+128),w
 15927  16A4  3EFF               	addlw	255
 15928  16A5  00B4               	movwf	_menu_option_idx^(0+128)
 15929  16A6  30FF               	movlw	255
 15930  16A7  3D33               	addwfc	(_menu_option_size+1)^(0+128),w
 15931  16A8  00B5               	movwf	(_menu_option_idx+1)^(0+128)
 15932                           
 15933                           ;menu_task.c: 98: }
 15934  16A9  2EAE               	goto	l7666
 15935  16AA                     l7664:	
 15936                           
 15937                           ;menu_task.c: 99: else {
 15938                           ;menu_task.c: 100: menu_option_idx -= 1;
 15939  16AA  3001               	movlw	1
 15940  16AB  02B4               	subwf	_menu_option_idx^(0+128),f
 15941  16AC  3000               	movlw	0
 15942  16AD  3BB5               	subwfb	(_menu_option_idx+1)^(0+128),f
 15943  16AE                     l7666:	
 15944                           
 15945                           ;menu_task.c: 101: }
 15946                           ;menu_task.c: 102: }
 15947                           ;menu_task.c: 103: menu_display_option(data);
 15948  16AE  0020               	movlb	0	; select bank0
 15949  16AF  0858               	movf	menu_Main@data+1,w
 15950  16B0  00CD               	movwf	menu_display_option@data+1
 15951  16B1  0857               	movf	menu_Main@data,w
 15952  16B2  00CC               	movwf	menu_display_option@data
 15953  16B3  3198  2067  3196   	fcall	_menu_display_option
 15954                           
 15955                           ;menu_task.c: 104: data->holdCountA += 1;
 15956  16B6  0020               	movlb	0	; select bank0
 15957  16B7  0857               	movf	menu_Main@data,w
 15958  16B8  0086               	movwf	6
 15959  16B9  0858               	movf	menu_Main@data+1,w
 15960  16BA  0087               	movwf	7
 15961  16BB  3144               	addfsr 1,4
 15962  16BC  3001               	movlw	1
 15963  16BD  0781               	addwf	1,f
 15964  16BE  3141               	addfsr 1,1
 15965  16BF  1803               	skipnc
 15966  16C0  0A81               	incf	1,f
 15967                           
 15968                           ;menu_task.c: 105: data->holdCountB = 0;
 15969  16C1  0857               	movf	menu_Main@data,w
 15970  16C2  0086               	movwf	6
 15971  16C3  0858               	movf	menu_Main@data+1,w
 15972  16C4  0087               	movwf	7
 15973  16C5  3146               	addfsr 1,6
 15974  16C6  3000               	movlw	0
 15975  16C7  3FC0               	movwi [0]fsr1
 15976  16C8  3FC1               	movwi [1]fsr1
 15977                           
 15978                           ;menu_task.c: 106: data->holdCountX = 0;
 15979  16C9  0857               	movf	menu_Main@data,w
 15980  16CA  0086               	movwf	6
 15981  16CB  0858               	movf	menu_Main@data+1,w
 15982  16CC  0087               	movwf	7
 15983  16CD  3148               	addfsr 1,8
 15984  16CE  3000               	movlw	0
 15985  16CF  3FC0               	movwi [0]fsr1
 15986  16D0  3FC1               	movwi [1]fsr1
 15987                           
 15988                           ;menu_task.c: 107: data->holdCountY = 0;
 15989  16D1  0857               	movf	menu_Main@data,w
 15990  16D2  0086               	movwf	6
 15991  16D3  0858               	movf	menu_Main@data+1,w
 15992  16D4  0087               	movwf	7
 15993  16D5  314A               	addfsr 1,10
 15994  16D6  3000               	movlw	0
 15995  16D7  3FC0               	movwi [0]fsr1
 15996  16D8  3FC1               	movwi [1]fsr1
 15997                           
 15998                           ;menu_task.c: 108: data->noholdCount = 0;
 15999  16D9  0857               	movf	menu_Main@data,w
 16000  16DA  0086               	movwf	6
 16001  16DB  0858               	movf	menu_Main@data+1,w
 16002  16DC  0087               	movwf	7
 16003  16DD  314C               	addfsr 1,12
 16004  16DE  3000               	movlw	0
 16005  16DF  3FC0               	movwi [0]fsr1
 16006  16E0  3FC1               	movwi [1]fsr1
 16007                           
 16008                           ;menu_task.c: 109: break;
 16009  16E1  0008               	return
 16010  16E2                     l7678:	
 16011                           ;menu_task.c: 110: case 2:
 16012                           
 16013                           
 16014                           ;menu_task.c: 112: if (data->holdCountB == 0){
 16015  16E2  0857               	movf	menu_Main@data,w
 16016  16E3  0086               	movwf	6
 16017  16E4  0858               	movf	menu_Main@data+1,w
 16018  16E5  0087               	movwf	7
 16019  16E6  3146               	addfsr 1,6
 16020  16E7  0016               	moviw fsr1++
 16021  16E8  0401               	iorwf	1,w
 16022  16E9  1D03               	btfss	3,2
 16023  16EA  2F0A               	goto	l7686
 16024                           
 16025                           ;menu_task.c: 114: if (menu_option_idx == menu_option_size - 1){
 16026  16EB  0021               	movlb	1	; select bank1
 16027  16EC  0832               	movf	_menu_option_size^(0+128),w
 16028  16ED  3EFF               	addlw	255
 16029  16EE  0020               	movlb	0	; select bank0
 16030  16EF  00D4               	movwf	??_menu_Main
 16031  16F0  30FF               	movlw	255
 16032  16F1  0021               	movlb	1	; select bank1
 16033  16F2  3D33               	addwfc	(_menu_option_size+1)^(0+128),w
 16034  16F3  0020               	movlb	0	; select bank0
 16035  16F4  00D5               	movwf	??_menu_Main+1
 16036  16F5  0021               	movlb	1	; select bank1
 16037  16F6  0835               	movf	(_menu_option_idx+1)^(0+128),w
 16038  16F7  0020               	movlb	0	; select bank0
 16039  16F8  0655               	xorwf	??_menu_Main+1,w
 16040  16F9  1D03               	skipz
 16041  16FA  2EFF               	goto	u4925
 16042  16FB  0021               	movlb	1	; select bank1
 16043  16FC  0834               	movf	_menu_option_idx^(0+128),w
 16044  16FD  0020               	movlb	0	; select bank0
 16045  16FE  0654               	xorwf	??_menu_Main,w
 16046  16FF                     u4925:	
 16047  16FF  1D03               	skipz
 16048  1700  2F05               	goto	l7684
 16049                           
 16050                           ;menu_task.c: 115: menu_option_idx = 0;
 16051  1701  0021               	movlb	1	; select bank1
 16052  1702  01B4               	clrf	_menu_option_idx^(0+128)
 16053  1703  01B5               	clrf	(_menu_option_idx+1)^(0+128)
 16054                           
 16055                           ;menu_task.c: 116: }
 16056  1704  2F0A               	goto	l7686
 16057  1705                     l7684:	
 16058                           
 16059                           ;menu_task.c: 117: else {
 16060                           ;menu_task.c: 118: menu_option_idx += 1;
 16061  1705  3001               	movlw	1
 16062  1706  0021               	movlb	1	; select bank1
 16063  1707  07B4               	addwf	_menu_option_idx^(0+128),f
 16064  1708  3000               	movlw	0
 16065  1709  3DB5               	addwfc	(_menu_option_idx+1)^(0+128),f
 16066  170A                     l7686:	
 16067                           
 16068                           ;menu_task.c: 119: }
 16069                           ;menu_task.c: 120: }
 16070                           ;menu_task.c: 121: menu_display_option(data);
 16071  170A  0020               	movlb	0	; select bank0
 16072  170B  0858               	movf	menu_Main@data+1,w
 16073  170C  00CD               	movwf	menu_display_option@data+1
 16074  170D  0857               	movf	menu_Main@data,w
 16075  170E  00CC               	movwf	menu_display_option@data
 16076  170F  3198  2067  3196   	fcall	_menu_display_option
 16077                           
 16078                           ;menu_task.c: 122: data->holdCountA = 0;
 16079  1712  0020               	movlb	0	; select bank0
 16080  1713  0857               	movf	menu_Main@data,w
 16081  1714  0086               	movwf	6
 16082  1715  0858               	movf	menu_Main@data+1,w
 16083  1716  0087               	movwf	7
 16084  1717  3144               	addfsr 1,4
 16085  1718  3000               	movlw	0
 16086  1719  3FC0               	movwi [0]fsr1
 16087  171A  3FC1               	movwi [1]fsr1
 16088                           
 16089                           ;menu_task.c: 123: data->holdCountB += 1;
 16090  171B  0857               	movf	menu_Main@data,w
 16091  171C  0086               	movwf	6
 16092  171D  0858               	movf	menu_Main@data+1,w
 16093  171E  0087               	movwf	7
 16094  171F  3146               	addfsr 1,6
 16095  1720  3001               	movlw	1
 16096  1721  0781               	addwf	1,f
 16097  1722  3141               	addfsr 1,1
 16098  1723  1803               	skipnc
 16099  1724  0A81               	incf	1,f
 16100                           
 16101                           ;menu_task.c: 124: data->holdCountX = 0;
 16102  1725  0857               	movf	menu_Main@data,w
 16103  1726  0086               	movwf	6
 16104  1727  0858               	movf	menu_Main@data+1,w
 16105  1728  0087               	movwf	7
 16106  1729  3148               	addfsr 1,8
 16107  172A  3000               	movlw	0
 16108  172B  3FC0               	movwi [0]fsr1
 16109  172C  3FC1               	movwi [1]fsr1
 16110                           
 16111                           ;menu_task.c: 125: data->holdCountY = 0;
 16112  172D  0857               	movf	menu_Main@data,w
 16113  172E  0086               	movwf	6
 16114  172F  0858               	movf	menu_Main@data+1,w
 16115  1730  0087               	movwf	7
 16116  1731  314A               	addfsr 1,10
 16117  1732  3000               	movlw	0
 16118  1733  3FC0               	movwi [0]fsr1
 16119  1734  3FC1               	movwi [1]fsr1
 16120                           
 16121                           ;menu_task.c: 126: data->noholdCount = 0;
 16122  1735  0857               	movf	menu_Main@data,w
 16123  1736  0086               	movwf	6
 16124  1737  0858               	movf	menu_Main@data+1,w
 16125  1738  0087               	movwf	7
 16126  1739  314C               	addfsr 1,12
 16127  173A  3000               	movlw	0
 16128  173B  3FC0               	movwi [0]fsr1
 16129  173C  3FC1               	movwi [1]fsr1
 16130                           
 16131                           ;menu_task.c: 127: break;
 16132  173D  0008               	return
 16133  173E                     l7698:	
 16134                           ;menu_task.c: 128: case 4:
 16135                           
 16136                           
 16137                           ;menu_task.c: 129: if (data->holdCountX == 0){
 16138  173E  0857               	movf	menu_Main@data,w
 16139  173F  0086               	movwf	6
 16140  1740  0858               	movf	menu_Main@data+1,w
 16141  1741  0087               	movwf	7
 16142  1742  3148               	addfsr 1,8
 16143  1743  0016               	moviw fsr1++
 16144  1744  0401               	iorwf	1,w
 16145  1745  1D03               	btfss	3,2
 16146  1746  2F53               	goto	l7704
 16147                           
 16148                           ;menu_task.c: 131: menu_clear(data);
 16149  1747  0858               	movf	menu_Main@data+1,w
 16150  1748  00BA               	movwf	menu_clear@data+1
 16151  1749  0857               	movf	menu_Main@data,w
 16152  174A  00B9               	movwf	menu_clear@data
 16153  174B  31A5  258A  3196   	fcall	_menu_clear
 16154                           
 16155                           ;menu_task.c: 132: currentTask = FLASHY_TASK;
 16156  174E  3002               	movlw	2
 16157  174F  0021               	movlb	1	; select bank1
 16158  1750  00B8               	movwf	_currentTask^(0+128)
 16159  1751  3000               	movlw	0
 16160  1752  00B9               	movwf	(_currentTask^(0+128)+1)
 16161  1753                     l7704:	
 16162                           
 16163                           ;menu_task.c: 133: }
 16164                           ;menu_task.c: 134: data->holdCountA = 0;
 16165  1753  0020               	movlb	0	; select bank0
 16166  1754  0857               	movf	menu_Main@data,w
 16167  1755  0086               	movwf	6
 16168  1756  0858               	movf	menu_Main@data+1,w
 16169  1757  0087               	movwf	7
 16170  1758  3144               	addfsr 1,4
 16171  1759  3000               	movlw	0
 16172  175A  3FC0               	movwi [0]fsr1
 16173  175B  3FC1               	movwi [1]fsr1
 16174                           
 16175                           ;menu_task.c: 135: data->holdCountB = 0;
 16176  175C  0857               	movf	menu_Main@data,w
 16177  175D  0086               	movwf	6
 16178  175E  0858               	movf	menu_Main@data+1,w
 16179  175F  0087               	movwf	7
 16180  1760  3146               	addfsr 1,6
 16181  1761  3000               	movlw	0
 16182  1762  3FC0               	movwi [0]fsr1
 16183  1763  3FC1               	movwi [1]fsr1
 16184                           
 16185                           ;menu_task.c: 136: data->holdCountX += 1;
 16186  1764  0857               	movf	menu_Main@data,w
 16187  1765  0086               	movwf	6
 16188  1766  0858               	movf	menu_Main@data+1,w
 16189  1767  0087               	movwf	7
 16190  1768  3148               	addfsr 1,8
 16191  1769  3001               	movlw	1
 16192  176A  0781               	addwf	1,f
 16193  176B  3141               	addfsr 1,1
 16194  176C  1803               	skipnc
 16195  176D  0A81               	incf	1,f
 16196                           
 16197                           ;menu_task.c: 137: data->holdCountY = 0;
 16198  176E  0857               	movf	menu_Main@data,w
 16199  176F  0086               	movwf	6
 16200  1770  0858               	movf	menu_Main@data+1,w
 16201  1771  0087               	movwf	7
 16202  1772  314A               	addfsr 1,10
 16203  1773  3000               	movlw	0
 16204  1774  3FC0               	movwi [0]fsr1
 16205  1775  3FC1               	movwi [1]fsr1
 16206                           
 16207                           ;menu_task.c: 138: data->noholdCount = 0;
 16208  1776  0857               	movf	menu_Main@data,w
 16209  1777  0086               	movwf	6
 16210  1778  0858               	movf	menu_Main@data+1,w
 16211  1779  0087               	movwf	7
 16212  177A  314C               	addfsr 1,12
 16213  177B  3000               	movlw	0
 16214  177C  3FC0               	movwi [0]fsr1
 16215  177D  3FC1               	movwi [1]fsr1
 16216                           
 16217                           ;menu_task.c: 139: break;
 16218  177E  0008               	return
 16219  177F                     l7714:	
 16220                           ;menu_task.c: 140: case 8:
 16221                           
 16222                           
 16223                           ;menu_task.c: 141: if (data->holdCountY == 0){
 16224  177F  0857               	movf	menu_Main@data,w
 16225  1780  0086               	movwf	6
 16226  1781  0858               	movf	menu_Main@data+1,w
 16227  1782  0087               	movwf	7
 16228  1783  314A               	addfsr 1,10
 16229  1784  0016               	moviw fsr1++
 16230  1785  0401               	iorwf	1,w
 16231  1786  1D03               	btfss	3,2
 16232  1787  2F8F               	goto	l7718
 16233                           
 16234                           ;menu_task.c: 142: menu_run_option(data);
 16235  1788  0858               	movf	menu_Main@data+1,w
 16236  1789  00BC               	movwf	menu_run_option@data+1
 16237  178A  0857               	movf	menu_Main@data,w
 16238  178B  00BB               	movwf	menu_run_option@data
 16239  178C  31A3  23C2  3196   	fcall	_menu_run_option
 16240  178F                     l7718:	
 16241                           
 16242                           ;menu_task.c: 143: }
 16243                           ;menu_task.c: 144: data->holdCountA = 0;
 16244  178F  0020               	movlb	0	; select bank0
 16245  1790  0857               	movf	menu_Main@data,w
 16246  1791  0086               	movwf	6
 16247  1792  0858               	movf	menu_Main@data+1,w
 16248  1793  0087               	movwf	7
 16249  1794  3144               	addfsr 1,4
 16250  1795  3000               	movlw	0
 16251  1796  3FC0               	movwi [0]fsr1
 16252  1797  3FC1               	movwi [1]fsr1
 16253                           
 16254                           ;menu_task.c: 145: data->holdCountB = 0;
 16255  1798  0857               	movf	menu_Main@data,w
 16256  1799  0086               	movwf	6
 16257  179A  0858               	movf	menu_Main@data+1,w
 16258  179B  0087               	movwf	7
 16259  179C  3146               	addfsr 1,6
 16260  179D  3000               	movlw	0
 16261  179E  3FC0               	movwi [0]fsr1
 16262  179F  3FC1               	movwi [1]fsr1
 16263                           
 16264                           ;menu_task.c: 146: data->holdCountX = 0;
 16265  17A0  0857               	movf	menu_Main@data,w
 16266  17A1  0086               	movwf	6
 16267  17A2  0858               	movf	menu_Main@data+1,w
 16268  17A3  0087               	movwf	7
 16269  17A4  3148               	addfsr 1,8
 16270  17A5  3000               	movlw	0
 16271  17A6  3FC0               	movwi [0]fsr1
 16272  17A7  3FC1               	movwi [1]fsr1
 16273                           
 16274                           ;menu_task.c: 147: data->holdCountY += 1;
 16275  17A8  0857               	movf	menu_Main@data,w
 16276  17A9  0086               	movwf	6
 16277  17AA  0858               	movf	menu_Main@data+1,w
 16278  17AB  0087               	movwf	7
 16279  17AC  314A               	addfsr 1,10
 16280  17AD  3001               	movlw	1
 16281  17AE  0781               	addwf	1,f
 16282  17AF  3141               	addfsr 1,1
 16283  17B0  1803               	skipnc
 16284  17B1  0A81               	incf	1,f
 16285                           
 16286                           ;menu_task.c: 148: data->noholdCount = 0;
 16287  17B2  0857               	movf	menu_Main@data,w
 16288  17B3  0086               	movwf	6
 16289  17B4  0858               	movf	menu_Main@data+1,w
 16290  17B5  0087               	movwf	7
 16291  17B6  314C               	addfsr 1,12
 16292  17B7  3000               	movlw	0
 16293  17B8  3FC0               	movwi [0]fsr1
 16294  17B9  3FC1               	movwi [1]fsr1
 16295                           
 16296                           ;menu_task.c: 149: break;
 16297  17BA  0008               	return
 16298  17BB                     l7728:	
 16299                           ;menu_task.c: 151: default:
 16300                           
 16301                           ;menu_task.c: 150: case 1 | 2 | 8:
 16302                           
 16303                           
 16304                           ;menu_task.c: 152: menu_display_option(data);
 16305  17BB  0858               	movf	menu_Main@data+1,w
 16306  17BC  00CD               	movwf	menu_display_option@data+1
 16307  17BD  0857               	movf	menu_Main@data,w
 16308  17BE  00CC               	movwf	menu_display_option@data
 16309  17BF  3198  2067  3196   	fcall	_menu_display_option
 16310                           
 16311                           ;menu_task.c: 153: data->holdCountA = 0;
 16312  17C2  0020               	movlb	0	; select bank0
 16313  17C3  0857               	movf	menu_Main@data,w
 16314  17C4  0086               	movwf	6
 16315  17C5  0858               	movf	menu_Main@data+1,w
 16316  17C6  0087               	movwf	7
 16317  17C7  3144               	addfsr 1,4
 16318  17C8  3000               	movlw	0
 16319  17C9  3FC0               	movwi [0]fsr1
 16320  17CA  3FC1               	movwi [1]fsr1
 16321                           
 16322                           ;menu_task.c: 154: data->holdCountB = 0;
 16323  17CB  0857               	movf	menu_Main@data,w
 16324  17CC  0086               	movwf	6
 16325  17CD  0858               	movf	menu_Main@data+1,w
 16326  17CE  0087               	movwf	7
 16327  17CF  3146               	addfsr 1,6
 16328  17D0  3000               	movlw	0
 16329  17D1  3FC0               	movwi [0]fsr1
 16330  17D2  3FC1               	movwi [1]fsr1
 16331                           
 16332                           ;menu_task.c: 155: data->holdCountX = 0;
 16333  17D3  0857               	movf	menu_Main@data,w
 16334  17D4  0086               	movwf	6
 16335  17D5  0858               	movf	menu_Main@data+1,w
 16336  17D6  0087               	movwf	7
 16337  17D7  3148               	addfsr 1,8
 16338  17D8  3000               	movlw	0
 16339  17D9  3FC0               	movwi [0]fsr1
 16340  17DA  3FC1               	movwi [1]fsr1
 16341                           
 16342                           ;menu_task.c: 156: data->holdCountY = 0;
 16343  17DB  0857               	movf	menu_Main@data,w
 16344  17DC  0086               	movwf	6
 16345  17DD  0858               	movf	menu_Main@data+1,w
 16346  17DE  0087               	movwf	7
 16347  17DF  314A               	addfsr 1,10
 16348  17E0  3000               	movlw	0
 16349  17E1  3FC0               	movwi [0]fsr1
 16350  17E2  3FC1               	movwi [1]fsr1
 16351                           
 16352                           ;menu_task.c: 157: data->noholdCount += 1;
 16353  17E3  0857               	movf	menu_Main@data,w
 16354  17E4  0086               	movwf	6
 16355  17E5  0858               	movf	menu_Main@data+1,w
 16356  17E6  0087               	movwf	7
 16357  17E7  314C               	addfsr 1,12
 16358  17E8  3001               	movlw	1
 16359  17E9  0781               	addwf	1,f
 16360  17EA  3141               	addfsr 1,1
 16361  17EB  1803               	skipnc
 16362  17EC  0A81               	incf	1,f
 16363                           
 16364                           ;menu_task.c: 158: }
 16365  17ED  0008               	return
 16366  17EE                     l7740:	
 16367  17EE  0856               	movf	menu_Main@buttonPressed,w
 16368                           
 16369                           ; Switch size 1, requested type "space"
 16370                           ; Number of cases is 5, Range of values is 1 to 11
 16371                           ; switch strategies available:
 16372                           ; Name         Instructions Cycles
 16373                           ; simple_byte           16     9 (average)
 16374                           ; direct_byte           31     9 (fixed)
 16375                           ; jumptable            263     9 (fixed)
 16376                           ;	Chosen strategy is simple_byte
 16377  17EF  3A01               	xorlw	1	; case 1
 16378  17F0  1903               	skipnz
 16379  17F1  2E95               	goto	l7658
 16380  17F2  3A03               	xorlw	3	; case 2
 16381  17F3  1903               	skipnz
 16382  17F4  2EE2               	goto	l7678
 16383  17F5  3A06               	xorlw	6	; case 4
 16384  17F6  1903               	skipnz
 16385  17F7  2F3E               	goto	l7698
 16386  17F8  3A0C               	xorlw	12	; case 8
 16387  17F9  1903               	skipnz
 16388  17FA  2F7F               	goto	l7714
 16389  17FB  3A03               	xorlw	3	; case 11
 16390  17FC  1903               	skipnz
 16391  17FD  2FBB               	goto	l7728
 16392  17FE  2FBB               	goto	l7728
 16393  17FF  0008               	return
 16394  1800                     __end_of_menu_Main:	
 16395                           
 16396                           	psect	text16
 16397  0819                     __ptext16:	
 16398 ;; *************** function _flashy_Main *****************
 16399 ;; Defined at:
 16400 ;;		line 106 in file "flashy_task.c"
 16401 ;; Parameters:    Size  Location     Type
 16402 ;;  taskData        2   50[BANK0 ] PTR void 
 16403 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 16404 ;;		 -> flashy_TaskData(30), NULL(0), 
 16405 ;; Auto vars:     Size  Location     Type
 16406 ;;  hit_counter     6   54[BANK0 ] unsigned char [6]
 16407 ;;  data            2   62[BANK0 ] PTR struct t_flashy_task
 16408 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 16409 ;;		 -> flashy_TaskData(30), NULL(0), 
 16410 ;;  buttonPresse    2   60[BANK0 ] unsigned int 
 16411 ;; Return value:  Size  Location     Type
 16412 ;;                  1    wreg      void 
 16413 ;; Registers used:
 16414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16415 ;; Tracked objects:
 16416 ;;		On entry : 0/0
 16417 ;;		On exit  : 0/0
 16418 ;;		Unchanged: 0/0
 16419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16420 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16421 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16422 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16423 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16424 ;;Total ram usage:       14 bytes
 16425 ;; Hardware stack levels used:    1
 16426 ;; Hardware stack levels required when called:   11
 16427 ;; This function calls:
 16428 ;;		_flashy_display_option
 16429 ;;		_led_Parody
 16430 ;;		_led_circle
 16431 ;;		_led_curtain
 16432 ;;		_led_rand
 16433 ;;		_led_roundabout
 16434 ;;		_let_alternate
 16435 ;;		_marquee
 16436 ;;		_nullifyBadge_buttonsGet
 16437 ;;		_nullifyBadge_irGet
 16438 ;;		_nullifyBadge_irTxClr
 16439 ;;		_nullifyBadge_irTxRegister
 16440 ;;		_nullifyBadge_irTxRelease
 16441 ;;		_nullifyBadge_irTxSet
 16442 ;;		_nullifyBadge_segDisplayForceUpdate
 16443 ;;		_nullifyBadge_segDisplayPutStr
 16444 ;;		_nullifyBadge_userLedsSet
 16445 ;;		_sprintf
 16446 ;; This function is called by:
 16447 ;;		_main
 16448 ;;		_scheduler_TaskRun
 16449 ;; This function uses a non-reentrant model
 16450 ;;
 16451                           
 16452                           
 16453                           ;psect for function _flashy_Main
 16454  0819                     _flashy_Main:	
 16455                           
 16456                           ;flashy_task.c: 107: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskD
      +                          ata;
 16457                           
 16458                           ;incstack = 0
 16459                           ; Regs used in _flashy_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16460  0819  0020               	movlb	0	; select bank0
 16461  081A  0853               	movf	flashy_Main@taskData+1,w
 16462  081B  00DF               	movwf	flashy_Main@data+1
 16463  081C  0852               	movf	flashy_Main@taskData,w
 16464  081D  00DE               	movwf	flashy_Main@data
 16465                           
 16466                           ;flashy_task.c: 108: u16 buttonPressed;
 16467                           ;flashy_task.c: 109: char hit_counter[6];
 16468                           ;flashy_task.c: 111: if ( currentTask != FLASHY_TASK ){
 16469  081E  3002               	movlw	2
 16470  081F  0021               	movlb	1	; select bank1
 16471  0820  0638               	xorwf	_currentTask^(0+128),w
 16472  0821  0439               	iorwf	(_currentTask+1)^(0+128),w
 16473  0822  1903               	btfsc	3,2
 16474  0823  28C6               	goto	l7778
 16475                           
 16476                           ;flashy_task.c: 112: data->holdCountA = 1;
 16477  0824  0020               	movlb	0	; select bank0
 16478  0825  085E               	movf	flashy_Main@data,w
 16479  0826  0086               	movwf	6
 16480  0827  085F               	movf	flashy_Main@data+1,w
 16481  0828  0087               	movwf	7
 16482  0829  314A               	addfsr 1,10
 16483  082A  3001               	movlw	1
 16484  082B  3FC0               	movwi [0]fsr1
 16485  082C  3000               	movlw	0
 16486  082D  3FC1               	movwi [1]fsr1
 16487                           
 16488                           ;flashy_task.c: 113: data->holdCountB = 1;
 16489  082E  085E               	movf	flashy_Main@data,w
 16490  082F  0086               	movwf	6
 16491  0830  085F               	movf	flashy_Main@data+1,w
 16492  0831  0087               	movwf	7
 16493  0832  314C               	addfsr 1,12
 16494  0833  3001               	movlw	1
 16495  0834  3FC0               	movwi [0]fsr1
 16496  0835  3000               	movlw	0
 16497  0836  3FC1               	movwi [1]fsr1
 16498                           
 16499                           ;flashy_task.c: 114: data->holdCountX = 1;
 16500  0837  085E               	movf	flashy_Main@data,w
 16501  0838  0086               	movwf	6
 16502  0839  085F               	movf	flashy_Main@data+1,w
 16503  083A  0087               	movwf	7
 16504  083B  314E               	addfsr 1,14
 16505  083C  3001               	movlw	1
 16506  083D  3FC0               	movwi [0]fsr1
 16507  083E  3000               	movlw	0
 16508  083F  3FC1               	movwi [1]fsr1
 16509                           
 16510                           ;flashy_task.c: 115: data->holdCountY = 1;
 16511  0840  085E               	movf	flashy_Main@data,w
 16512  0841  0086               	movwf	6
 16513  0842  085F               	movf	flashy_Main@data+1,w
 16514  0843  0087               	movwf	7
 16515  0844  3150               	addfsr 1,16
 16516  0845  3001               	movlw	1
 16517  0846  3FC0               	movwi [0]fsr1
 16518  0847  3000               	movlw	0
 16519  0848  3FC1               	movwi [1]fsr1
 16520                           
 16521                           ;flashy_task.c: 116: data->holdCountXY = 1;
 16522  0849  085E               	movf	flashy_Main@data,w
 16523  084A  0086               	movwf	6
 16524  084B  085F               	movf	flashy_Main@data+1,w
 16525  084C  0087               	movwf	7
 16526  084D  3152               	addfsr 1,18
 16527  084E  3001               	movlw	1
 16528  084F  3FC0               	movwi [0]fsr1
 16529  0850  3000               	movlw	0
 16530  0851  3FC1               	movwi [1]fsr1
 16531                           
 16532                           ;flashy_task.c: 117: data->holdCountAY = 1;
 16533  0852  085E               	movf	flashy_Main@data,w
 16534  0853  0086               	movwf	6
 16535  0854  085F               	movf	flashy_Main@data+1,w
 16536  0855  0087               	movwf	7
 16537  0856  3154               	addfsr 1,20
 16538  0857  3001               	movlw	1
 16539  0858  3FC0               	movwi [0]fsr1
 16540  0859  3000               	movlw	0
 16541  085A  3FC1               	movwi [1]fsr1
 16542                           
 16543                           ;flashy_task.c: 118: data->holdCountAX = 1;
 16544  085B  085E               	movf	flashy_Main@data,w
 16545  085C  0086               	movwf	6
 16546  085D  085F               	movf	flashy_Main@data+1,w
 16547  085E  0087               	movwf	7
 16548  085F  3156               	addfsr 1,22
 16549  0860  3001               	movlw	1
 16550  0861  3FC0               	movwi [0]fsr1
 16551  0862  3000               	movlw	0
 16552  0863  3FC1               	movwi [1]fsr1
 16553                           
 16554                           ;flashy_task.c: 119: return;
 16555  0864  0008               	return
 16556  0865                     l7750:	
 16557                           ;flashy_task.c: 126: case SECRET_VALUE_TEST:
 16558                           
 16559                           ;flashy_task.c: 125: break;
 16560                           
 16561                           ;flashy_task.c: 124: case SECRET_VALUE_INIT:
 16562                           
 16563                           ;flashy_task.c: 120: }
 16564                           ;flashy_task.c: 123: switch (secret_value){
 16565                           
 16566                           
 16567                           ;flashy_task.c: 127: secret_value = SECRET_VALUE_INIT;
 16568  0865  0021               	movlb	1	; select bank1
 16569  0866  01C5               	clrf	_secret_value^(0+128)
 16570  0867  01C6               	clrf	(_secret_value+1)^(0+128)
 16571                           
 16572                           ;flashy_task.c: 128: data->displayTickCount = 0;
 16573  0868  0020               	movlb	0	; select bank0
 16574  0869  085E               	movf	flashy_Main@data,w
 16575  086A  0086               	movwf	6
 16576  086B  085F               	movf	flashy_Main@data+1,w
 16577  086C  0087               	movwf	7
 16578  086D  3144               	addfsr 1,4
 16579  086E  3000               	movlw	0
 16580  086F  3FC0               	movwi [0]fsr1
 16581  0870  3FC1               	movwi [1]fsr1
 16582                           
 16583                           ;flashy_task.c: 129: data->display_state = FLASHY_STATE_DISPLAY_SECRET_TEST;
 16584  0871  085E               	movf	flashy_Main@data,w
 16585  0872  3E06               	addlw	6
 16586  0873  00D4               	movwf	??_flashy_Main
 16587  0874  3000               	movlw	0
 16588  0875  3D5F               	addwfc	flashy_Main@data+1,w
 16589  0876  00D5               	movwf	??_flashy_Main+1
 16590  0877  0854               	movf	??_flashy_Main,w
 16591  0878  0086               	movwf	6
 16592  0879  0855               	movf	??_flashy_Main+1,w
 16593  087A  0087               	movwf	7
 16594  087B  3005               	movlw	5
 16595  087C  0081               	movwf	1
 16596                           
 16597                           ;flashy_task.c: 131: data->holdCountA = 1;
 16598  087D  085E               	movf	flashy_Main@data,w
 16599  087E  0086               	movwf	6
 16600  087F  085F               	movf	flashy_Main@data+1,w
 16601  0880  0087               	movwf	7
 16602  0881  314A               	addfsr 1,10
 16603  0882  3001               	movlw	1
 16604  0883  3FC0               	movwi [0]fsr1
 16605  0884  3000               	movlw	0
 16606  0885  3FC1               	movwi [1]fsr1
 16607                           
 16608                           ;flashy_task.c: 132: data->holdCountB = 1;
 16609  0886  085E               	movf	flashy_Main@data,w
 16610  0887  0086               	movwf	6
 16611  0888  085F               	movf	flashy_Main@data+1,w
 16612  0889  0087               	movwf	7
 16613  088A  314C               	addfsr 1,12
 16614  088B  3001               	movlw	1
 16615  088C  3FC0               	movwi [0]fsr1
 16616  088D  3000               	movlw	0
 16617  088E  3FC1               	movwi [1]fsr1
 16618                           
 16619                           ;flashy_task.c: 133: data->holdCountX = 1;
 16620  088F  085E               	movf	flashy_Main@data,w
 16621  0890  0086               	movwf	6
 16622  0891  085F               	movf	flashy_Main@data+1,w
 16623  0892  0087               	movwf	7
 16624  0893  314E               	addfsr 1,14
 16625  0894  3001               	movlw	1
 16626  0895  3FC0               	movwi [0]fsr1
 16627  0896  3000               	movlw	0
 16628  0897  3FC1               	movwi [1]fsr1
 16629                           
 16630                           ;flashy_task.c: 134: data->holdCountY = 1;
 16631  0898  085E               	movf	flashy_Main@data,w
 16632  0899  0086               	movwf	6
 16633  089A  085F               	movf	flashy_Main@data+1,w
 16634  089B  0087               	movwf	7
 16635  089C  3150               	addfsr 1,16
 16636  089D  3001               	movlw	1
 16637  089E  3FC0               	movwi [0]fsr1
 16638  089F  3000               	movlw	0
 16639  08A0  3FC1               	movwi [1]fsr1
 16640                           
 16641                           ;flashy_task.c: 135: data->holdCountXY = 1;
 16642  08A1  085E               	movf	flashy_Main@data,w
 16643  08A2  0086               	movwf	6
 16644  08A3  085F               	movf	flashy_Main@data+1,w
 16645  08A4  0087               	movwf	7
 16646  08A5  3152               	addfsr 1,18
 16647  08A6  3001               	movlw	1
 16648  08A7  3FC0               	movwi [0]fsr1
 16649  08A8  3000               	movlw	0
 16650  08A9  3FC1               	movwi [1]fsr1
 16651                           
 16652                           ;flashy_task.c: 136: data->holdCountAY = 1;
 16653  08AA  085E               	movf	flashy_Main@data,w
 16654  08AB  0086               	movwf	6
 16655  08AC  085F               	movf	flashy_Main@data+1,w
 16656  08AD  0087               	movwf	7
 16657  08AE  3154               	addfsr 1,20
 16658  08AF  3001               	movlw	1
 16659  08B0  3FC0               	movwi [0]fsr1
 16660  08B1  3000               	movlw	0
 16661  08B2  3FC1               	movwi [1]fsr1
 16662                           
 16663                           ;flashy_task.c: 137: data->holdCountAX = 1;
 16664  08B3  085E               	movf	flashy_Main@data,w
 16665  08B4  0086               	movwf	6
 16666  08B5  085F               	movf	flashy_Main@data+1,w
 16667  08B6  0087               	movwf	7
 16668  08B7  3156               	addfsr 1,22
 16669  08B8  3001               	movlw	1
 16670  08B9  3FC0               	movwi [0]fsr1
 16671  08BA  3000               	movlw	0
 16672  08BB  3FC1               	movwi [1]fsr1
 16673                           
 16674                           ;flashy_task.c: 138: data->noholdCount = 1;
 16675  08BC  085E               	movf	flashy_Main@data,w
 16676  08BD  0086               	movwf	6
 16677  08BE  085F               	movf	flashy_Main@data+1,w
 16678  08BF  0087               	movwf	7
 16679  08C0  315C               	addfsr 1,28
 16680  08C1  3001               	movlw	1
 16681  08C2  3FC0               	movwi [0]fsr1
 16682  08C3  3000               	movlw	0
 16683  08C4  3FC1               	movwi [1]fsr1
 16684                           
 16685                           ;flashy_task.c: 139: return;
 16686  08C5  0008               	return
 16687  08C6                     l7778:	
 16688                           ;flashy_task.c: 141: }
 16689                           
 16690                           ;flashy_task.c: 140: break;
 16691                           
 16692                           
 16693                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16694                           ; Switch size 1, requested type "space"
 16695                           ; Number of cases is 1, Range of values is 0 to 0
 16696                           ; switch strategies available:
 16697                           ; Name         Instructions Cycles
 16698                           ; simple_byte            4     3 (average)
 16699                           ; direct_byte            8     6 (fixed)
 16700                           ; jumptable            260     6 (fixed)
 16701                           ;	Chosen strategy is simple_byte
 16702  08C6  0021               	movlb	1	; select bank1
 16703  08C7  0846               	movf	(_secret_value+1)^(0+128),w
 16704  08C8  3A00               	xorlw	0	; case 0
 16705  08C9  1903               	skipnz
 16706  08CA  28CC               	goto	l8992
 16707  08CB  29C4               	goto	l7848
 16708  08CC                     l8992:	
 16709                           
 16710                           ; Switch size 1, requested type "space"
 16711                           ; Number of cases is 2, Range of values is 0 to 1
 16712                           ; switch strategies available:
 16713                           ; Name         Instructions Cycles
 16714                           ; simple_byte            7     4 (average)
 16715                           ; direct_byte           10     6 (fixed)
 16716                           ; jumptable            260     6 (fixed)
 16717                           ;	Chosen strategy is simple_byte
 16718  08CC  0845               	movf	_secret_value^(0+128),w
 16719  08CD  3A00               	xorlw	0	; case 0
 16720  08CE  1903               	skipnz
 16721  08CF  29C4               	goto	l7848
 16722  08D0  3A01               	xorlw	1	; case 1
 16723  08D1  1903               	skipnz
 16724  08D2  2865               	goto	l7750
 16725  08D3  29C4               	goto	l7848
 16726                           
 16727                           ;flashy_task.c: 144: switch (data->led_state){
 16728  08D4  29C4               	goto	l7848
 16729  08D5                     l7780:	
 16730                           ;flashy_task.c: 145: case FLASHY_STATE_LED_ROUNDABOUT:
 16731                           
 16732                           
 16733                           ;flashy_task.c: 146: if (data->delayTickCount == 0){
 16734  08D5  0020               	movlb	0	; select bank0
 16735  08D6  085E               	movf	flashy_Main@data,w
 16736  08D7  0086               	movwf	6
 16737  08D8  085F               	movf	flashy_Main@data+1,w
 16738  08D9  0087               	movwf	7
 16739  08DA  3141               	addfsr 1,1
 16740  08DB  0016               	moviw fsr1++
 16741  08DC  0401               	iorwf	1,w
 16742  08DD  1D03               	btfss	3,2
 16743  08DE  29B8               	goto	L8
 16744                           
 16745                           ;flashy_task.c: 147: led_roundabout(flashy_leds_idx);
 16746  08DF  0021               	movlb	1	; select bank1
 16747  08E0  0831               	movf	(_flashy_leds_idx+1)^(0+128),w
 16748  08E1  0020               	movlb	0	; select bank0
 16749  08E2  00B1               	movwf	led_roundabout@counter+1
 16750  08E3  0021               	movlb	1	; select bank1
 16751  08E4  0830               	movf	_flashy_leds_idx^(0+128),w
 16752  08E5  0020               	movlb	0	; select bank0
 16753  08E6  00B0               	movwf	led_roundabout@counter
 16754  08E7  31A4  247E  3188   	fcall	_led_roundabout
 16755                           
 16756                           ;flashy_task.c: 148: flashy_leds_idx += 1;
 16757  08EA  3001               	movlw	1
 16758  08EB  0021               	movlb	1	; select bank1
 16759  08EC  07B0               	addwf	_flashy_leds_idx^(0+128),f
 16760  08ED  3000               	movlw	0
 16761  08EE  3DB1               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 16762                           
 16763                           ;flashy_task.c: 149: data->delayTickCount = 35;
 16764  08EF  0020               	movlb	0	; select bank0
 16765  08F0  085E               	movf	flashy_Main@data,w
 16766  08F1  0086               	movwf	6
 16767  08F2  085F               	movf	flashy_Main@data+1,w
 16768  08F3  0087               	movwf	7
 16769  08F4  3141               	addfsr 1,1
 16770  08F5  3023               	movlw	35
 16771  08F6  3FC0               	movwi [0]fsr1
 16772  08F7  3000               	movlw	0
 16773  08F8  3FC1               	movwi [1]fsr1
 16774                           
 16775                           ;flashy_task.c: 150: }
 16776  08F9  2A5E               	goto	l7878
 16777  08FA                     l7790:	
 16778                           ;flashy_task.c: 155: case FLASHY_STATE_LED_SHOT:
 16779                           
 16780                           ;flashy_task.c: 153: }
 16781                           ;flashy_task.c: 154: break;
 16782                           
 16783                           ;flashy_task.c: 151: else {
 16784                           ;flashy_task.c: 152: data->delayTickCount -= 1;
 16785                           
 16786                           
 16787                           ;flashy_task.c: 156: if (data->delayTickCount == 0){
 16788  08FA  085E               	movf	flashy_Main@data,w
 16789  08FB  0086               	movwf	6
 16790  08FC  085F               	movf	flashy_Main@data+1,w
 16791  08FD  0087               	movwf	7
 16792  08FE  3141               	addfsr 1,1
 16793  08FF  0016               	moviw fsr1++
 16794  0900  0401               	iorwf	1,w
 16795  0901  1D03               	btfss	3,2
 16796  0902  29B8               	goto	L8
 16797                           
 16798                           ;flashy_task.c: 157: led_curtain(flashy_leds_idx);
 16799  0903  0021               	movlb	1	; select bank1
 16800  0904  0831               	movf	(_flashy_leds_idx+1)^(0+128),w
 16801  0905  0020               	movlb	0	; select bank0
 16802  0906  00B1               	movwf	led_curtain@counter+1
 16803  0907  0021               	movlb	1	; select bank1
 16804  0908  0830               	movf	_flashy_leds_idx^(0+128),w
 16805  0909  0020               	movlb	0	; select bank0
 16806  090A  00B0               	movwf	led_curtain@counter
 16807  090B  31A4  243D  3188   	fcall	_led_curtain
 16808                           
 16809                           ;flashy_task.c: 158: flashy_leds_idx += 1;
 16810  090E  3001               	movlw	1
 16811  090F  0021               	movlb	1	; select bank1
 16812  0910  07B0               	addwf	_flashy_leds_idx^(0+128),f
 16813  0911  3000               	movlw	0
 16814  0912  3DB1               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 16815                           
 16816                           ;flashy_task.c: 159: data->delayTickCount = 5;
 16817  0913  0020               	movlb	0	; select bank0
 16818  0914  085E               	movf	flashy_Main@data,w
 16819  0915  0086               	movwf	6
 16820  0916  085F               	movf	flashy_Main@data+1,w
 16821  0917  0087               	movwf	7
 16822  0918  3141               	addfsr 1,1
 16823  0919  3005               	movlw	5
 16824  091A  3FC0               	movwi [0]fsr1
 16825  091B  3000               	movlw	0
 16826  091C  3FC1               	movwi [1]fsr1
 16827                           
 16828                           ;flashy_task.c: 160: }
 16829  091D  2A5E               	goto	l7878
 16830  091E                     l7800:	
 16831                           ;flashy_task.c: 165: case FLASHY_STATE_SPARKLE:
 16832                           
 16833                           ;flashy_task.c: 163: }
 16834                           ;flashy_task.c: 164: break;
 16835                           
 16836                           ;flashy_task.c: 161: else {
 16837                           ;flashy_task.c: 162: data->delayTickCount -= 1;
 16838                           
 16839                           
 16840                           ;flashy_task.c: 166: if (data->delayTickCount < 1){
 16841  091E  085E               	movf	flashy_Main@data,w
 16842  091F  0086               	movwf	6
 16843  0920  085F               	movf	flashy_Main@data+1,w
 16844  0921  0087               	movwf	7
 16845  0922  3141               	addfsr 1,1
 16846  0923  0016               	moviw fsr1++
 16847  0924  0401               	iorwf	1,w
 16848  0925  1D03               	btfss	3,2
 16849  0926  29B7               	goto	l7844
 16850                           
 16851                           ;flashy_task.c: 167: led_rand();
 16852  0927  31A5  25D1  3188   	fcall	_led_rand
 16853                           
 16854                           ;flashy_task.c: 168: data->delayTickCount = flashy_sparkle_rate;
 16855  092A  0020               	movlb	0	; select bank0
 16856  092B  085E               	movf	flashy_Main@data,w
 16857  092C  0086               	movwf	6
 16858  092D  085F               	movf	flashy_Main@data+1,w
 16859  092E  0087               	movwf	7
 16860  092F  3141               	addfsr 1,1
 16861  0930  0021               	movlb	1	; select bank1
 16862  0931  082C               	movf	_flashy_sparkle_rate^(0+128),w
 16863  0932  3FC0               	movwi [0]fsr1
 16864  0933  082D               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 16865  0934  3FC1               	movwi [1]fsr1
 16866  0935  2A5E               	goto	l7878
 16867  0936                     l7808:	
 16868                           ;flashy_task.c: 174: case FLASHY_STATE_CIRCLE:
 16869                           
 16870                           ;flashy_task.c: 172: }
 16871                           ;flashy_task.c: 173: break;
 16872                           
 16873                           ;flashy_task.c: 170: else {
 16874                           ;flashy_task.c: 171: data->delayTickCount -= 1;
 16875                           
 16876                           ;flashy_task.c: 169: }
 16877                           
 16878                           
 16879                           ;flashy_task.c: 175: if (data->delayTickCount ==0 ){
 16880  0936  085E               	movf	flashy_Main@data,w
 16881  0937  0086               	movwf	6
 16882  0938  085F               	movf	flashy_Main@data+1,w
 16883  0939  0087               	movwf	7
 16884  093A  3141               	addfsr 1,1
 16885  093B  0016               	moviw fsr1++
 16886  093C  0401               	iorwf	1,w
 16887  093D  1D03               	btfss	3,2
 16888  093E  29B7               	goto	l7844
 16889                           
 16890                           ;flashy_task.c: 176: if (flashy_leds_idx == 1024 ){
 16891  093F  3004               	movlw	4
 16892  0940  0021               	movlb	1	; select bank1
 16893  0941  0631               	xorwf	(_flashy_leds_idx+1)^(0+128),w
 16894  0942  0430               	iorwf	_flashy_leds_idx^(0+128),w
 16895  0943  1D03               	btfss	3,2
 16896  0944  2949               	goto	l7814
 16897                           
 16898                           ;flashy_task.c: 177: flashy_leds_idx = flashy_leds_idx << 1;
 16899  0945  3530               	lslf	_flashy_leds_idx^(0+128),w
 16900  0946  00B0               	movwf	_flashy_leds_idx^(0+128)
 16901  0947  0D31               	rlf	(_flashy_leds_idx+1)^(0+128),w
 16902  0948  00B1               	movwf	(_flashy_leds_idx+1)^(0+128)
 16903  0949                     l7814:	
 16904                           
 16905                           ;flashy_task.c: 178: }
 16906                           ;flashy_task.c: 179: led_circle(flashy_leds_idx);
 16907  0949  0831               	movf	(_flashy_leds_idx+1)^(0+128),w
 16908  094A  0020               	movlb	0	; select bank0
 16909  094B  00B1               	movwf	led_circle@count+1
 16910  094C  0021               	movlb	1	; select bank1
 16911  094D  0830               	movf	_flashy_leds_idx^(0+128),w
 16912  094E  0020               	movlb	0	; select bank0
 16913  094F  00B0               	movwf	led_circle@count
 16914  0950  31AE  262E  3188   	fcall	_led_circle
 16915                           
 16916                           ;flashy_task.c: 180: if (flashy_leds_idx < 1 ){
 16917  0953  0021               	movlb	1	; select bank1
 16918  0954  0830               	movf	_flashy_leds_idx^(0+128),w
 16919  0955  0431               	iorwf	(_flashy_leds_idx+1)^(0+128),w
 16920  0956  1D03               	btfss	3,2
 16921  0957  295D               	goto	l7820
 16922                           
 16923                           ;flashy_task.c: 181: flashy_leds_idx = 1;
 16924  0958  3001               	movlw	1
 16925  0959  00B0               	movwf	_flashy_leds_idx^(0+128)
 16926  095A  3000               	movlw	0
 16927  095B  00B1               	movwf	(_flashy_leds_idx^(0+128)+1)
 16928                           
 16929                           ;flashy_task.c: 182: break;
 16930  095C  2A5E               	goto	l7878
 16931  095D                     l7820:	
 16932                           
 16933                           ;flashy_task.c: 183: }
 16934                           ;flashy_task.c: 184: flashy_leds_idx = flashy_leds_idx << 1;
 16935  095D  3530               	lslf	_flashy_leds_idx^(0+128),w
 16936  095E  00B0               	movwf	_flashy_leds_idx^(0+128)
 16937  095F  0D31               	rlf	(_flashy_leds_idx+1)^(0+128),w
 16938  0960  00B1               	movwf	(_flashy_leds_idx+1)^(0+128)
 16939                           
 16940                           ;flashy_task.c: 186: data->delayTickCount = flashy_sparkle_rate;
 16941  0961  0020               	movlb	0	; select bank0
 16942  0962  085E               	movf	flashy_Main@data,w
 16943  0963  0086               	movwf	6
 16944  0964  085F               	movf	flashy_Main@data+1,w
 16945  0965  0087               	movwf	7
 16946  0966  3141               	addfsr 1,1
 16947  0967  0021               	movlb	1	; select bank1
 16948  0968  082C               	movf	_flashy_sparkle_rate^(0+128),w
 16949  0969  3FC0               	movwi [0]fsr1
 16950  096A  082D               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 16951  096B  3FC1               	movwi [1]fsr1
 16952  096C  2A5E               	goto	l7878
 16953  096D                     l7826:	
 16954                           ;flashy_task.c: 192: case FLASHY_STATE_LED_ALT:
 16955                           
 16956                           ;flashy_task.c: 190: }
 16957                           ;flashy_task.c: 191: break;
 16958                           
 16959                           ;flashy_task.c: 188: else {
 16960                           ;flashy_task.c: 189: data->delayTickCount -= 1;
 16961                           
 16962                           ;flashy_task.c: 187: }
 16963                           
 16964                           
 16965                           ;flashy_task.c: 193: if (data->delayTickCount == 0){
 16966  096D  085E               	movf	flashy_Main@data,w
 16967  096E  0086               	movwf	6
 16968  096F  085F               	movf	flashy_Main@data+1,w
 16969  0970  0087               	movwf	7
 16970  0971  3141               	addfsr 1,1
 16971  0972  0016               	moviw fsr1++
 16972  0973  0401               	iorwf	1,w
 16973  0974  1D03               	btfss	3,2
 16974  0975  29B7               	goto	l7844
 16975                           
 16976                           ;flashy_task.c: 194: let_alternate(flashy_leds_idx);
 16977  0976  0021               	movlb	1	; select bank1
 16978  0977  0831               	movf	(_flashy_leds_idx+1)^(0+128),w
 16979  0978  0020               	movlb	0	; select bank0
 16980  0979  00B1               	movwf	let_alternate@count+1
 16981  097A  0021               	movlb	1	; select bank1
 16982  097B  0830               	movf	_flashy_leds_idx^(0+128),w
 16983  097C  0020               	movlb	0	; select bank0
 16984  097D  00B0               	movwf	let_alternate@count
 16985  097E  31AF  2763  3188   	fcall	_let_alternate
 16986                           
 16987                           ;flashy_task.c: 195: flashy_leds_idx += 1;
 16988  0981  3001               	movlw	1
 16989  0982  0021               	movlb	1	; select bank1
 16990  0983  07B0               	addwf	_flashy_leds_idx^(0+128),f
 16991  0984  3000               	movlw	0
 16992  0985  3DB1               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 16993                           
 16994                           ;flashy_task.c: 196: data->delayTickCount = flashy_sparkle_rate;
 16995  0986  0020               	movlb	0	; select bank0
 16996  0987  085E               	movf	flashy_Main@data,w
 16997  0988  0086               	movwf	6
 16998  0989  085F               	movf	flashy_Main@data+1,w
 16999  098A  0087               	movwf	7
 17000  098B  3141               	addfsr 1,1
 17001  098C  0021               	movlb	1	; select bank1
 17002  098D  082C               	movf	_flashy_sparkle_rate^(0+128),w
 17003  098E  3FC0               	movwi [0]fsr1
 17004  098F  082D               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 17005  0990  3FC1               	movwi [1]fsr1
 17006  0991  2A5E               	goto	l7878
 17007  0992                     l7836:	
 17008                           ;flashy_task.c: 202: case FLASHY_STATE_LED_PARODY:
 17009                           
 17010                           ;flashy_task.c: 200: }
 17011                           ;flashy_task.c: 201: break;
 17012                           
 17013                           ;flashy_task.c: 198: else {
 17014                           ;flashy_task.c: 199: data->delayTickCount -= 1;
 17015                           
 17016                           ;flashy_task.c: 197: }
 17017                           
 17018                           
 17019                           ;flashy_task.c: 203: if (data->delayTickCount == 0){
 17020  0992  085E               	movf	flashy_Main@data,w
 17021  0993  0086               	movwf	6
 17022  0994  085F               	movf	flashy_Main@data+1,w
 17023  0995  0087               	movwf	7
 17024  0996  3141               	addfsr 1,1
 17025  0997  0016               	moviw fsr1++
 17026  0998  0401               	iorwf	1,w
 17027  0999  1D03               	btfss	3,2
 17028  099A  29B7               	goto	l7844
 17029                           
 17030                           ;flashy_task.c: 204: led_Parody(flashy_leds_idx);
 17031  099B  0021               	movlb	1	; select bank1
 17032  099C  0831               	movf	(_flashy_leds_idx+1)^(0+128),w
 17033  099D  0020               	movlb	0	; select bank0
 17034  099E  00B1               	movwf	led_Parody@count+1
 17035  099F  0021               	movlb	1	; select bank1
 17036  09A0  0830               	movf	_flashy_leds_idx^(0+128),w
 17037  09A1  0020               	movlb	0	; select bank0
 17038  09A2  00B0               	movwf	led_Parody@count
 17039  09A3  3199  21F2  3188   	fcall	_led_Parody
 17040                           
 17041                           ;flashy_task.c: 205: flashy_leds_idx += 1;
 17042  09A6  3001               	movlw	1
 17043  09A7  0021               	movlb	1	; select bank1
 17044  09A8  07B0               	addwf	_flashy_leds_idx^(0+128),f
 17045  09A9  3000               	movlw	0
 17046  09AA  3DB1               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 17047                           
 17048                           ;flashy_task.c: 206: data->delayTickCount = flashy_sparkle_rate;
 17049  09AB  0020               	movlb	0	; select bank0
 17050  09AC  085E               	movf	flashy_Main@data,w
 17051  09AD  0086               	movwf	6
 17052  09AE  085F               	movf	flashy_Main@data+1,w
 17053  09AF  0087               	movwf	7
 17054  09B0  3141               	addfsr 1,1
 17055  09B1  0021               	movlb	1	; select bank1
 17056  09B2  082C               	movf	_flashy_sparkle_rate^(0+128),w
 17057  09B3  3FC0               	movwi [0]fsr1
 17058  09B4  082D               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 17059  09B5  3FC1               	movwi [1]fsr1
 17060                           
 17061                           ;flashy_task.c: 207: }
 17062  09B6  2A5E               	goto	l7878
 17063  09B7                     l7844:	
 17064                           
 17065                           ;flashy_task.c: 208: else {
 17066                           ;flashy_task.c: 209: data->delayTickCount -= 1;
 17067  09B7  0020               	movlb	0	; select bank0
 17068  09B8                     L8:	
 17069  09B8  085E               	movf	flashy_Main@data,w
 17070  09B9  0086               	movwf	6
 17071  09BA  085F               	movf	flashy_Main@data+1,w
 17072  09BB  0087               	movwf	7
 17073  09BC  3141               	addfsr 1,1
 17074  09BD  3001               	movlw	1
 17075  09BE  0281               	subwf	1,f
 17076  09BF  3141               	addfsr 1,1
 17077  09C0  3000               	movlw	0
 17078  09C1  3B81               	subwfb	1,f
 17079  09C2  317F               	addfsr 1,-1
 17080                           
 17081                           ;flashy_task.c: 213: }
 17082                           
 17083                           ;flashy_task.c: 210: }
 17084                           ;flashy_task.c: 211: break;
 17085  09C3  2A5E               	goto	l7878
 17086  09C4                     l7848:	
 17087  09C4  0020               	movlb	0	; select bank0
 17088  09C5  085E               	movf	flashy_Main@data,w
 17089  09C6  0086               	movwf	6
 17090  09C7  085F               	movf	flashy_Main@data+1,w
 17091  09C8  0087               	movwf	7
 17092  09C9  3143               	addfsr 1,3
 17093  09CA  0801               	movf	1,w
 17094                           
 17095                           ; Switch size 1, requested type "space"
 17096                           ; Number of cases is 6, Range of values is 0 to 5
 17097                           ; switch strategies available:
 17098                           ; Name         Instructions Cycles
 17099                           ; direct_byte           18     6 (fixed)
 17100                           ; simple_byte           19    10 (average)
 17101                           ; jumptable            260     6 (fixed)
 17102                           ;	Chosen strategy is direct_byte
 17103  09CB  0084               	movwf	4
 17104  09CC  3006               	movlw	6
 17105  09CD  0204               	subwf	4,w
 17106  09CE  1803               	skipnc
 17107  09CF  2A5E               	goto	l7878
 17108  09D0  31A8               	movlp	high S8994
 17109  09D1  3504               	lslf	4,w
 17110  09D2  3EEC               	addlw	low S8994
 17111  09D3  0082               	movwf	2
 17112                           
 17113                           ;flashy_task.c: 216: switch (data->display_state){
 17114  09D4  2A5E               	goto	l7878
 17115  09D5                     l7850:	
 17116                           ;flashy_task.c: 217: case FLASHY_STATE_DISPLAY_BLASTER:
 17117                           
 17118                           
 17119                           ;flashy_task.c: 218: nullifyBadge_segDisplayPutStr(data->badge, "PEW ");
 17120  09D5  302A               	movlw	low (STR_24| (0+32768))
 17121  09D6  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 17122  09D7  30B1               	movlw	high (STR_24| (0+32768))
 17123  09D8  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 17124  09D9  085E               	movf	flashy_Main@data,w
 17125  09DA  0086               	movwf	6
 17126  09DB  085F               	movf	flashy_Main@data+1,w
 17127  09DC  0087               	movwf	7
 17128  09DD  0801               	movf	1,w
 17129  09DE  31AE  264B  3188   	fcall	_nullifyBadge_segDisplayPutStr
 17130                           
 17131                           ;flashy_task.c: 219: nullifyBadge_segDisplayForceUpdate(data->badge);
 17132  09E1  0020               	movlb	0	; select bank0
 17133  09E2  085E               	movf	flashy_Main@data,w
 17134  09E3  0086               	movwf	6
 17135  09E4  085F               	movf	flashy_Main@data+1,w
 17136  09E5  0087               	movwf	7
 17137  09E6  0801               	movf	1,w
 17138  09E7  31AE  2603  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 17139  09EA  2A52               	goto	L11
 17140  09EB                     l7856:	
 17141                           ;flashy_task.c: 222: case FLASHY_STATE_DISPLAY_SHOT:
 17142                           
 17143                           ;flashy_task.c: 221: break;
 17144                           
 17145                           ;flashy_task.c: 220: data->displayTickCount += 1;
 17146                           
 17147                           
 17148                           ;flashy_task.c: 223: sprintf((char *)hit_counter, "%4d", deaths);
 17149  09EB  3056               	movlw	low flashy_Main@hit_counter
 17150  09EC  00AF               	movwf	sprintf@sp
 17151  09ED  3000               	movlw	high flashy_Main@hit_counter
 17152  09EE  00B0               	movwf	sprintf@sp+1
 17153  09EF  3043               	movlw	low (STR_25| (0+32768))
 17154  09F0  00B1               	movwf	sprintf@f
 17155  09F1  30B1               	movlw	high (STR_25| (0+32768))
 17156  09F2  00B2               	movwf	sprintf@f+1
 17157  09F3  0021               	movlb	1	; select bank1
 17158  09F4  0829               	movf	(_deaths+1)^(0+128),w
 17159  09F5  0020               	movlb	0	; select bank0
 17160  09F6  00B4               	movwf	?_sprintf+5
 17161  09F7  0021               	movlb	1	; select bank1
 17162  09F8  0828               	movf	_deaths^(0+128),w
 17163  09F9  0020               	movlb	0	; select bank0
 17164  09FA  00B3               	movwf	?_sprintf+4
 17165  09FB  3192  225F  3188   	fcall	_sprintf
 17166                           
 17167                           ;flashy_task.c: 225: nullifyBadge_segDisplayPutStr(data->badge, hit_counter);
 17168  09FE  3056               	movlw	low flashy_Main@hit_counter
 17169  09FF  0020               	movlb	0	; select bank0
 17170  0A00  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 17171  0A01  3000               	movlw	high flashy_Main@hit_counter
 17172  0A02  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 17173  0A03  085E               	movf	flashy_Main@data,w
 17174  0A04  0086               	movwf	6
 17175  0A05  085F               	movf	flashy_Main@data+1,w
 17176  0A06  0087               	movwf	7
 17177  0A07  0801               	movf	1,w
 17178  0A08  31AE  264B  3188   	fcall	_nullifyBadge_segDisplayPutStr
 17179                           
 17180                           ;flashy_task.c: 226: nullifyBadge_segDisplayForceUpdate(data->badge);
 17181  0A0B  0020               	movlb	0	; select bank0
 17182  0A0C  085E               	movf	flashy_Main@data,w
 17183  0A0D  0086               	movwf	6
 17184  0A0E  085F               	movf	flashy_Main@data+1,w
 17185  0A0F  0087               	movwf	7
 17186  0A10  0801               	movf	1,w
 17187  0A11  31AE  2603  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 17188                           
 17189                           ;flashy_task.c: 227: if (data->displayTickCount == 150){
 17190  0A14  0020               	movlb	0	; select bank0
 17191  0A15  085E               	movf	flashy_Main@data,w
 17192  0A16  0086               	movwf	6
 17193  0A17  085F               	movf	flashy_Main@data+1,w
 17194  0A18  0087               	movwf	7
 17195  0A19  3144               	addfsr 1,4
 17196  0A1A  0016               	moviw fsr1++
 17197  0A1B  3A96               	xorlw	150
 17198  0A1C  00D4               	movwf	??_flashy_Main
 17199  0A1D  0016               	moviw fsr1++
 17200  0A1E  04D4               	iorwf	??_flashy_Main,f
 17201  0A1F  1D03               	btfss	3,2
 17202  0A20  2A53               	goto	L10
 17203                           
 17204                           ;flashy_task.c: 228: data->displayTickCount = 0;
 17205  0A21  085E               	movf	flashy_Main@data,w
 17206  0A22  0086               	movwf	6
 17207  0A23  085F               	movf	flashy_Main@data+1,w
 17208  0A24  0087               	movwf	7
 17209  0A25  3144               	addfsr 1,4
 17210  0A26  3000               	movlw	0
 17211  0A27  3FC0               	movwi [0]fsr1
 17212  0A28  3FC1               	movwi [1]fsr1
 17213                           
 17214                           ;flashy_task.c: 229: data->display_state = 35;
 17215  0A29  085E               	movf	flashy_Main@data,w
 17216  0A2A  3E06               	addlw	6
 17217  0A2B  00D4               	movwf	??_flashy_Main
 17218  0A2C  3000               	movlw	0
 17219  0A2D  3D5F               	addwfc	flashy_Main@data+1,w
 17220  0A2E  00D5               	movwf	??_flashy_Main+1
 17221  0A2F  0854               	movf	??_flashy_Main,w
 17222  0A30  0086               	movwf	6
 17223  0A31  0855               	movf	??_flashy_Main+1,w
 17224  0A32  0087               	movwf	7
 17225  0A33  3023               	movlw	35
 17226  0A34  0081               	movwf	1
 17227  0A35  2A53               	goto	L10
 17228  0A36                     l7868:	
 17229                           ;flashy_task.c: 233: case FLASHY_STATE_DISPLAY_SECRET_TEST:
 17230                           
 17231                           ;flashy_task.c: 232: break;
 17232                           
 17233                           ;flashy_task.c: 230: }
 17234                           ;flashy_task.c: 231: data->displayTickCount += 1;
 17235                           
 17236                           
 17237                           ;flashy_task.c: 234: marquee(FLASHY_TEXT_SECRET_TEST, data->displayTickCount);
 17238  0A36  0021               	movlb	1	; select bank1
 17239  0A37  0862               	movf	(_FLASHY_TEXT_SECRET_TEST+1)^(0+128),w
 17240  0A38  0020               	movlb	0	; select bank0
 17241  0A39  00BB               	movwf	marquee@string+1
 17242  0A3A  0021               	movlb	1	; select bank1
 17243  0A3B  0861               	movf	_FLASHY_TEXT_SECRET_TEST^(0+128),w
 17244  0A3C  0020               	movlb	0	; select bank0
 17245  0A3D  00BA               	movwf	marquee@string
 17246  0A3E  085E               	movf	flashy_Main@data,w
 17247  0A3F  0086               	movwf	6
 17248  0A40  085F               	movf	flashy_Main@data+1,w
 17249  0A41  0087               	movwf	7
 17250  0A42  3144               	addfsr 1,4
 17251  0A43  3F40               	moviw [0]fsr1
 17252  0A44  00BC               	movwf	marquee@count
 17253  0A45  3F41               	moviw [1]fsr1
 17254  0A46  00BD               	movwf	marquee@count+1
 17255  0A47  319B  2338  3188   	fcall	_marquee
 17256  0A4A  2A52               	goto	L11
 17257  0A4B                     l7872:	
 17258                           ;flashy_task.c: 239: default:
 17259                           
 17260                           ;flashy_task.c: 237: case FLASHY_STATE_DISPLAY:
 17261                           
 17262                           ;flashy_task.c: 236: break;
 17263                           
 17264                           ;flashy_task.c: 235: data->displayTickCount += 1;
 17265                           
 17266                           
 17267                           ;flashy_task.c: 240: flashy_display_option(data);
 17268  0A4B  085F               	movf	flashy_Main@data+1,w
 17269  0A4C  00CD               	movwf	flashy_display_option@data+1
 17270  0A4D  085E               	movf	flashy_Main@data,w
 17271  0A4E  00CC               	movwf	flashy_display_option@data
 17272  0A4F  3192  2200  3188   	fcall	_flashy_display_option
 17273  0A52                     L11:	
 17274                           
 17275                           ;flashy_task.c: 241: data->displayTickCount += 1;
 17276  0A52  0020               	movlb	0	; select bank0
 17277  0A53                     L10:	
 17278  0A53  085E               	movf	flashy_Main@data,w
 17279  0A54  0086               	movwf	6
 17280  0A55  085F               	movf	flashy_Main@data+1,w
 17281  0A56  0087               	movwf	7
 17282  0A57  3144               	addfsr 1,4
 17283  0A58  3001               	movlw	1
 17284  0A59  0781               	addwf	1,f
 17285  0A5A  3141               	addfsr 1,1
 17286  0A5B  1803               	skipnc
 17287  0A5C  0A81               	incf	1,f
 17288                           
 17289                           ;flashy_task.c: 243: }
 17290                           
 17291                           ;flashy_task.c: 242: break;
 17292  0A5D  2A72               	goto	l7880
 17293  0A5E                     l7878:	
 17294  0A5E  0020               	movlb	0	; select bank0
 17295  0A5F  085E               	movf	flashy_Main@data,w
 17296  0A60  0086               	movwf	6
 17297  0A61  085F               	movf	flashy_Main@data+1,w
 17298  0A62  0087               	movwf	7
 17299  0A63  3146               	addfsr 1,6
 17300  0A64  0801               	movf	1,w
 17301                           
 17302                           ; Switch size 1, requested type "space"
 17303                           ; Number of cases is 4, Range of values is 0 to 5
 17304                           ; switch strategies available:
 17305                           ; Name         Instructions Cycles
 17306                           ; simple_byte           13     7 (average)
 17307                           ; direct_byte           18     6 (fixed)
 17308                           ; jumptable            260     6 (fixed)
 17309                           ;	Chosen strategy is simple_byte
 17310  0A65  3A00               	xorlw	0	; case 0
 17311  0A66  1903               	skipnz
 17312  0A67  2A4B               	goto	l7872
 17313  0A68  3A02               	xorlw	2	; case 2
 17314  0A69  1903               	skipnz
 17315  0A6A  29D5               	goto	l7850
 17316  0A6B  3A01               	xorlw	1	; case 3
 17317  0A6C  1903               	skipnz
 17318  0A6D  29EB               	goto	l7856
 17319  0A6E  3A06               	xorlw	6	; case 5
 17320  0A6F  1903               	skipnz
 17321  0A70  2A36               	goto	l7868
 17322  0A71  2A4B               	goto	l7872
 17323  0A72                     l7880:	
 17324                           
 17325                           ;flashy_task.c: 246: buttonPressed = nullifyBadge_buttonsGet();
 17326  0A72  31A2  2250  3188   	fcall	_nullifyBadge_buttonsGet
 17327  0A75  0020               	movlb	0	; select bank0
 17328  0A76  00D4               	movwf	??_flashy_Main
 17329  0A77  01D5               	clrf	??_flashy_Main+1
 17330  0A78  0854               	movf	??_flashy_Main,w
 17331  0A79  00DC               	movwf	flashy_Main@buttonPressed
 17332  0A7A  0855               	movf	??_flashy_Main+1,w
 17333  0A7B  00DD               	movwf	flashy_Main@buttonPressed+1
 17334                           
 17335                           ;flashy_task.c: 247: switch (buttonPressed) {
 17336  0A7C  2F36               	goto	l8140
 17337  0A7D                     l7882:	
 17338                           ;flashy_task.c: 248: case 4 | 8:
 17339                           
 17340                           
 17341                           ;flashy_task.c: 249: if (data->holdCountXY == 0 ){
 17342  0A7D  085E               	movf	flashy_Main@data,w
 17343  0A7E  0086               	movwf	6
 17344  0A7F  085F               	movf	flashy_Main@data+1,w
 17345  0A80  0087               	movwf	7
 17346  0A81  3152               	addfsr 1,18
 17347  0A82  0016               	moviw fsr1++
 17348  0A83  0401               	iorwf	1,w
 17349  0A84  1D03               	btfss	3,2
 17350  0A85  2A8C               	goto	l7886
 17351                           
 17352                           ;flashy_task.c: 251: data->display_state = FLASHY_STATE_DISPLAY;
 17353  0A86  085E               	movf	flashy_Main@data,w
 17354  0A87  0086               	movwf	6
 17355  0A88  085F               	movf	flashy_Main@data+1,w
 17356  0A89  0087               	movwf	7
 17357  0A8A  3146               	addfsr 1,6
 17358  0A8B  0181               	clrf	1
 17359  0A8C                     l7886:	
 17360                           
 17361                           ;flashy_task.c: 252: }
 17362                           ;flashy_task.c: 254: data->holdCountA = 0;
 17363  0A8C  085E               	movf	flashy_Main@data,w
 17364  0A8D  0086               	movwf	6
 17365  0A8E  085F               	movf	flashy_Main@data+1,w
 17366  0A8F  0087               	movwf	7
 17367  0A90  314A               	addfsr 1,10
 17368  0A91  3000               	movlw	0
 17369  0A92  3FC0               	movwi [0]fsr1
 17370  0A93  3FC1               	movwi [1]fsr1
 17371                           
 17372                           ;flashy_task.c: 255: data->holdCountB = 0;
 17373  0A94  085E               	movf	flashy_Main@data,w
 17374  0A95  0086               	movwf	6
 17375  0A96  085F               	movf	flashy_Main@data+1,w
 17376  0A97  0087               	movwf	7
 17377  0A98  314C               	addfsr 1,12
 17378  0A99  3000               	movlw	0
 17379  0A9A  3FC0               	movwi [0]fsr1
 17380  0A9B  3FC1               	movwi [1]fsr1
 17381                           
 17382                           ;flashy_task.c: 256: data->holdCountX = 0;
 17383  0A9C  085E               	movf	flashy_Main@data,w
 17384  0A9D  0086               	movwf	6
 17385  0A9E  085F               	movf	flashy_Main@data+1,w
 17386  0A9F  0087               	movwf	7
 17387  0AA0  314E               	addfsr 1,14
 17388  0AA1  3000               	movlw	0
 17389  0AA2  3FC0               	movwi [0]fsr1
 17390  0AA3  3FC1               	movwi [1]fsr1
 17391                           
 17392                           ;flashy_task.c: 257: data->holdCountY = 0;
 17393  0AA4  085E               	movf	flashy_Main@data,w
 17394  0AA5  0086               	movwf	6
 17395  0AA6  085F               	movf	flashy_Main@data+1,w
 17396  0AA7  0087               	movwf	7
 17397  0AA8  3150               	addfsr 1,16
 17398  0AA9  3000               	movlw	0
 17399  0AAA  3FC0               	movwi [0]fsr1
 17400  0AAB  3FC1               	movwi [1]fsr1
 17401                           
 17402                           ;flashy_task.c: 258: data->holdCountXY += 1;
 17403  0AAC  085E               	movf	flashy_Main@data,w
 17404  0AAD  0086               	movwf	6
 17405  0AAE  085F               	movf	flashy_Main@data+1,w
 17406  0AAF  0087               	movwf	7
 17407  0AB0  3152               	addfsr 1,18
 17408  0AB1  3001               	movlw	1
 17409  0AB2  0781               	addwf	1,f
 17410  0AB3  3141               	addfsr 1,1
 17411  0AB4  1803               	skipnc
 17412  0AB5  0A81               	incf	1,f
 17413                           
 17414                           ;flashy_task.c: 259: data->holdCountAY = 0;
 17415  0AB6  085E               	movf	flashy_Main@data,w
 17416  0AB7  0086               	movwf	6
 17417  0AB8  085F               	movf	flashy_Main@data+1,w
 17418  0AB9  0087               	movwf	7
 17419  0ABA  3154               	addfsr 1,20
 17420  0ABB  3000               	movlw	0
 17421  0ABC  3FC0               	movwi [0]fsr1
 17422  0ABD  3FC1               	movwi [1]fsr1
 17423                           
 17424                           ;flashy_task.c: 260: data->holdCountAX = 0;
 17425  0ABE  085E               	movf	flashy_Main@data,w
 17426  0ABF  0086               	movwf	6
 17427  0AC0  085F               	movf	flashy_Main@data+1,w
 17428  0AC1  0087               	movwf	7
 17429  0AC2  3156               	addfsr 1,22
 17430  0AC3  3000               	movlw	0
 17431  0AC4  3FC0               	movwi [0]fsr1
 17432  0AC5  3FC1               	movwi [1]fsr1
 17433                           
 17434                           ;flashy_task.c: 261: data->holdCountBX = 0;
 17435  0AC6  085E               	movf	flashy_Main@data,w
 17436  0AC7  0086               	movwf	6
 17437  0AC8  085F               	movf	flashy_Main@data+1,w
 17438  0AC9  0087               	movwf	7
 17439  0ACA  3158               	addfsr 1,24
 17440  0ACB  3000               	movlw	0
 17441  0ACC  3FC0               	movwi [0]fsr1
 17442  0ACD  3FC1               	movwi [1]fsr1
 17443                           
 17444                           ;flashy_task.c: 262: data->holdCountBY = 0;
 17445  0ACE  085E               	movf	flashy_Main@data,w
 17446  0ACF  0086               	movwf	6
 17447  0AD0  085F               	movf	flashy_Main@data+1,w
 17448  0AD1  0087               	movwf	7
 17449  0AD2  315A               	addfsr 1,26
 17450  0AD3  3000               	movlw	0
 17451  0AD4  3FC0               	movwi [0]fsr1
 17452  0AD5  3FC1               	movwi [1]fsr1
 17453                           
 17454                           ;flashy_task.c: 263: data->noholdCount = 0;
 17455  0AD6  085E               	movf	flashy_Main@data,w
 17456  0AD7  0086               	movwf	6
 17457  0AD8  085F               	movf	flashy_Main@data+1,w
 17458  0AD9  0087               	movwf	7
 17459  0ADA  315C               	addfsr 1,28
 17460  0ADB  3000               	movlw	0
 17461  0ADC  3FC0               	movwi [0]fsr1
 17462  0ADD  3FC1               	movwi [1]fsr1
 17463                           
 17464                           ;flashy_task.c: 264: break;
 17465  0ADE  2FC9               	goto	l8170
 17466  0ADF                     l7906:	
 17467                           ;flashy_task.c: 265: case 1 | 8:
 17468                           
 17469                           
 17470                           ;flashy_task.c: 266: if ( data->holdCountAY == 0 ){
 17471  0ADF  085E               	movf	flashy_Main@data,w
 17472  0AE0  0086               	movwf	6
 17473  0AE1  085F               	movf	flashy_Main@data+1,w
 17474  0AE2  0087               	movwf	7
 17475  0AE3  3154               	addfsr 1,20
 17476  0AE4  0016               	moviw fsr1++
 17477  0AE5  0401               	iorwf	1,w
 17478  0AE6  1D03               	btfss	3,2
 17479  0AE7  2AF8               	goto	l7912
 17480                           
 17481                           ;flashy_task.c: 267: if (flashy_sparkle_rate > 1000){
 17482  0AE8  3003               	movlw	3
 17483  0AE9  0021               	movlb	1	; select bank1
 17484  0AEA  022D               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 17485  0AEB  30E9               	movlw	233
 17486  0AEC  1903               	skipnz
 17487  0AED  022C               	subwf	_flashy_sparkle_rate^(0+128),w
 17488  0AEE  1C03               	skipc
 17489  0AEF  2AF4               	goto	l1136
 17490                           
 17491                           ;flashy_task.c: 268: flashy_sparkle_rate = 1000;
 17492  0AF0  30E8               	movlw	232
 17493  0AF1  00AC               	movwf	_flashy_sparkle_rate^(0+128)
 17494  0AF2  3003               	movlw	3
 17495  0AF3  00AD               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 17496  0AF4                     l1136:	
 17497                           
 17498                           ;flashy_task.c: 269: }
 17499                           ;flashy_task.c: 270: flashy_sparkle_rate += 5;
 17500  0AF4  3005               	movlw	5
 17501  0AF5  07AC               	addwf	_flashy_sparkle_rate^(0+128),f
 17502  0AF6  3000               	movlw	0
 17503  0AF7  3DAD               	addwfc	(_flashy_sparkle_rate+1)^(0+128),f
 17504  0AF8                     l7912:	
 17505                           
 17506                           ;flashy_task.c: 271: }
 17507                           ;flashy_task.c: 273: data->holdCountA = 0;
 17508  0AF8  0020               	movlb	0	; select bank0
 17509  0AF9  085E               	movf	flashy_Main@data,w
 17510  0AFA  0086               	movwf	6
 17511  0AFB  085F               	movf	flashy_Main@data+1,w
 17512  0AFC  0087               	movwf	7
 17513  0AFD  314A               	addfsr 1,10
 17514  0AFE  3000               	movlw	0
 17515  0AFF  3FC0               	movwi [0]fsr1
 17516  0B00  3FC1               	movwi [1]fsr1
 17517                           
 17518                           ;flashy_task.c: 274: data->holdCountB = 0;
 17519  0B01  085E               	movf	flashy_Main@data,w
 17520  0B02  0086               	movwf	6
 17521  0B03  085F               	movf	flashy_Main@data+1,w
 17522  0B04  0087               	movwf	7
 17523  0B05  314C               	addfsr 1,12
 17524  0B06  3000               	movlw	0
 17525  0B07  3FC0               	movwi [0]fsr1
 17526  0B08  3FC1               	movwi [1]fsr1
 17527                           
 17528                           ;flashy_task.c: 275: data->holdCountX = 0;
 17529  0B09  085E               	movf	flashy_Main@data,w
 17530  0B0A  0086               	movwf	6
 17531  0B0B  085F               	movf	flashy_Main@data+1,w
 17532  0B0C  0087               	movwf	7
 17533  0B0D  314E               	addfsr 1,14
 17534  0B0E  3000               	movlw	0
 17535  0B0F  3FC0               	movwi [0]fsr1
 17536  0B10  3FC1               	movwi [1]fsr1
 17537                           
 17538                           ;flashy_task.c: 276: data->holdCountY = 0;
 17539  0B11  085E               	movf	flashy_Main@data,w
 17540  0B12  0086               	movwf	6
 17541  0B13  085F               	movf	flashy_Main@data+1,w
 17542  0B14  0087               	movwf	7
 17543  0B15  3150               	addfsr 1,16
 17544  0B16  3000               	movlw	0
 17545  0B17  3FC0               	movwi [0]fsr1
 17546  0B18  3FC1               	movwi [1]fsr1
 17547                           
 17548                           ;flashy_task.c: 277: data->holdCountXY = 0;
 17549  0B19  085E               	movf	flashy_Main@data,w
 17550  0B1A  0086               	movwf	6
 17551  0B1B  085F               	movf	flashy_Main@data+1,w
 17552  0B1C  0087               	movwf	7
 17553  0B1D  3152               	addfsr 1,18
 17554  0B1E  3000               	movlw	0
 17555  0B1F  3FC0               	movwi [0]fsr1
 17556  0B20  3FC1               	movwi [1]fsr1
 17557                           
 17558                           ;flashy_task.c: 278: data->holdCountAY += 1;
 17559  0B21  085E               	movf	flashy_Main@data,w
 17560  0B22  0086               	movwf	6
 17561  0B23  085F               	movf	flashy_Main@data+1,w
 17562  0B24  0087               	movwf	7
 17563  0B25  3154               	addfsr 1,20
 17564  0B26  3001               	movlw	1
 17565  0B27  0781               	addwf	1,f
 17566  0B28  3141               	addfsr 1,1
 17567  0B29  1803               	skipnc
 17568  0B2A  0A81               	incf	1,f
 17569                           
 17570                           ;flashy_task.c: 279: data->holdCountAX = 0;
 17571  0B2B  085E               	movf	flashy_Main@data,w
 17572  0B2C  0086               	movwf	6
 17573  0B2D  085F               	movf	flashy_Main@data+1,w
 17574  0B2E  0087               	movwf	7
 17575  0B2F  3156               	addfsr 1,22
 17576  0B30  3000               	movlw	0
 17577  0B31  3FC0               	movwi [0]fsr1
 17578  0B32  3FC1               	movwi [1]fsr1
 17579                           
 17580                           ;flashy_task.c: 280: data->holdCountBX = 0;
 17581  0B33  085E               	movf	flashy_Main@data,w
 17582  0B34  0086               	movwf	6
 17583  0B35  085F               	movf	flashy_Main@data+1,w
 17584  0B36  0087               	movwf	7
 17585  0B37  3158               	addfsr 1,24
 17586  0B38  3000               	movlw	0
 17587  0B39  3FC0               	movwi [0]fsr1
 17588  0B3A  3FC1               	movwi [1]fsr1
 17589                           
 17590                           ;flashy_task.c: 281: data->holdCountBY = 0;
 17591  0B3B  085E               	movf	flashy_Main@data,w
 17592  0B3C  0086               	movwf	6
 17593  0B3D  085F               	movf	flashy_Main@data+1,w
 17594  0B3E  0087               	movwf	7
 17595  0B3F  315A               	addfsr 1,26
 17596  0B40  3000               	movlw	0
 17597  0B41  3FC0               	movwi [0]fsr1
 17598  0B42  3FC1               	movwi [1]fsr1
 17599                           
 17600                           ;flashy_task.c: 282: data->noholdCount = 0;
 17601  0B43  085E               	movf	flashy_Main@data,w
 17602  0B44  0086               	movwf	6
 17603  0B45  085F               	movf	flashy_Main@data+1,w
 17604  0B46  0087               	movwf	7
 17605  0B47  315C               	addfsr 1,28
 17606  0B48  3000               	movlw	0
 17607  0B49  3FC0               	movwi [0]fsr1
 17608  0B4A  3FC1               	movwi [1]fsr1
 17609                           
 17610                           ;flashy_task.c: 283: break;
 17611  0B4B  2FC9               	goto	l8170
 17612  0B4C                     l7932:	
 17613                           ;flashy_task.c: 284: case 1 | 4:
 17614                           
 17615                           
 17616                           ;flashy_task.c: 285: if ( data->holdCountAX == 0 ){
 17617  0B4C  085E               	movf	flashy_Main@data,w
 17618  0B4D  0086               	movwf	6
 17619  0B4E  085F               	movf	flashy_Main@data+1,w
 17620  0B4F  0087               	movwf	7
 17621  0B50  3156               	addfsr 1,22
 17622  0B51  0016               	moviw fsr1++
 17623  0B52  0401               	iorwf	1,w
 17624  0B53  1D03               	btfss	3,2
 17625  0B54  2B65               	goto	l7938
 17626                           
 17627                           ;flashy_task.c: 286: if (flashy_sparkle_rate < 5)
 17628  0B55  3000               	movlw	0
 17629  0B56  0021               	movlb	1	; select bank1
 17630  0B57  022D               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 17631  0B58  3005               	movlw	5
 17632  0B59  1903               	skipnz
 17633  0B5A  022C               	subwf	_flashy_sparkle_rate^(0+128),w
 17634  0B5B  1803               	skipnc
 17635  0B5C  2B61               	goto	l1139
 17636                           
 17637                           ;flashy_task.c: 287: flashy_sparkle_rate=5;
 17638  0B5D  3005               	movlw	5
 17639  0B5E  00AC               	movwf	_flashy_sparkle_rate^(0+128)
 17640  0B5F  3000               	movlw	0
 17641  0B60  00AD               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 17642  0B61                     l1139:	
 17643                           
 17644                           ;flashy_task.c: 288: flashy_sparkle_rate -= 5;
 17645  0B61  3005               	movlw	5
 17646  0B62  02AC               	subwf	_flashy_sparkle_rate^(0+128),f
 17647  0B63  3000               	movlw	0
 17648  0B64  3BAD               	subwfb	(_flashy_sparkle_rate+1)^(0+128),f
 17649  0B65                     l7938:	
 17650                           
 17651                           ;flashy_task.c: 289: }
 17652                           ;flashy_task.c: 291: data->holdCountA = 0;
 17653  0B65  0020               	movlb	0	; select bank0
 17654  0B66  085E               	movf	flashy_Main@data,w
 17655  0B67  0086               	movwf	6
 17656  0B68  085F               	movf	flashy_Main@data+1,w
 17657  0B69  0087               	movwf	7
 17658  0B6A  314A               	addfsr 1,10
 17659  0B6B  3000               	movlw	0
 17660  0B6C  3FC0               	movwi [0]fsr1
 17661  0B6D  3FC1               	movwi [1]fsr1
 17662                           
 17663                           ;flashy_task.c: 292: data->holdCountB = 0;
 17664  0B6E  085E               	movf	flashy_Main@data,w
 17665  0B6F  0086               	movwf	6
 17666  0B70  085F               	movf	flashy_Main@data+1,w
 17667  0B71  0087               	movwf	7
 17668  0B72  314C               	addfsr 1,12
 17669  0B73  3000               	movlw	0
 17670  0B74  3FC0               	movwi [0]fsr1
 17671  0B75  3FC1               	movwi [1]fsr1
 17672                           
 17673                           ;flashy_task.c: 293: data->holdCountX += 1;
 17674  0B76  085E               	movf	flashy_Main@data,w
 17675  0B77  0086               	movwf	6
 17676  0B78  085F               	movf	flashy_Main@data+1,w
 17677  0B79  0087               	movwf	7
 17678  0B7A  314E               	addfsr 1,14
 17679  0B7B  3001               	movlw	1
 17680  0B7C  0781               	addwf	1,f
 17681  0B7D  3141               	addfsr 1,1
 17682  0B7E  1803               	skipnc
 17683  0B7F  0A81               	incf	1,f
 17684                           
 17685                           ;flashy_task.c: 294: data->holdCountY = 0;
 17686  0B80  085E               	movf	flashy_Main@data,w
 17687  0B81  0086               	movwf	6
 17688  0B82  085F               	movf	flashy_Main@data+1,w
 17689  0B83  0087               	movwf	7
 17690  0B84  3150               	addfsr 1,16
 17691  0B85  3000               	movlw	0
 17692  0B86  3FC0               	movwi [0]fsr1
 17693  0B87  3FC1               	movwi [1]fsr1
 17694                           
 17695                           ;flashy_task.c: 295: data->holdCountXY = 0;
 17696  0B88  085E               	movf	flashy_Main@data,w
 17697  0B89  0086               	movwf	6
 17698  0B8A  085F               	movf	flashy_Main@data+1,w
 17699  0B8B  0087               	movwf	7
 17700  0B8C  3152               	addfsr 1,18
 17701  0B8D  3000               	movlw	0
 17702  0B8E  3FC0               	movwi [0]fsr1
 17703  0B8F  3FC1               	movwi [1]fsr1
 17704                           
 17705                           ;flashy_task.c: 296: data->holdCountAY = 0;
 17706  0B90  085E               	movf	flashy_Main@data,w
 17707  0B91  0086               	movwf	6
 17708  0B92  085F               	movf	flashy_Main@data+1,w
 17709  0B93  0087               	movwf	7
 17710  0B94  3154               	addfsr 1,20
 17711  0B95  3000               	movlw	0
 17712  0B96  3FC0               	movwi [0]fsr1
 17713  0B97  3FC1               	movwi [1]fsr1
 17714                           
 17715                           ;flashy_task.c: 297: data->holdCountAX += 1;
 17716  0B98  085E               	movf	flashy_Main@data,w
 17717  0B99  0086               	movwf	6
 17718  0B9A  085F               	movf	flashy_Main@data+1,w
 17719  0B9B  0087               	movwf	7
 17720  0B9C  3156               	addfsr 1,22
 17721  0B9D  3001               	movlw	1
 17722  0B9E  0781               	addwf	1,f
 17723  0B9F  3141               	addfsr 1,1
 17724  0BA0  1803               	skipnc
 17725  0BA1  0A81               	incf	1,f
 17726                           
 17727                           ;flashy_task.c: 298: data->holdCountBX = 0;
 17728  0BA2  085E               	movf	flashy_Main@data,w
 17729  0BA3  0086               	movwf	6
 17730  0BA4  085F               	movf	flashy_Main@data+1,w
 17731  0BA5  0087               	movwf	7
 17732  0BA6  3158               	addfsr 1,24
 17733  0BA7  3000               	movlw	0
 17734  0BA8  3FC0               	movwi [0]fsr1
 17735  0BA9  3FC1               	movwi [1]fsr1
 17736                           
 17737                           ;flashy_task.c: 299: data->holdCountBY = 0;
 17738  0BAA  085E               	movf	flashy_Main@data,w
 17739  0BAB  0086               	movwf	6
 17740  0BAC  085F               	movf	flashy_Main@data+1,w
 17741  0BAD  0087               	movwf	7
 17742  0BAE  315A               	addfsr 1,26
 17743  0BAF  3000               	movlw	0
 17744  0BB0  3FC0               	movwi [0]fsr1
 17745  0BB1  3FC1               	movwi [1]fsr1
 17746                           
 17747                           ;flashy_task.c: 300: data->noholdCount = 0;
 17748  0BB2  085E               	movf	flashy_Main@data,w
 17749  0BB3  0086               	movwf	6
 17750  0BB4  085F               	movf	flashy_Main@data+1,w
 17751  0BB5  0087               	movwf	7
 17752  0BB6  315C               	addfsr 1,28
 17753  0BB7  3000               	movlw	0
 17754  0BB8  3FC0               	movwi [0]fsr1
 17755  0BB9  3FC1               	movwi [1]fsr1
 17756                           
 17757                           ;flashy_task.c: 301: break;
 17758  0BBA  2FC9               	goto	l8170
 17759  0BBB                     l7958:	
 17760                           ;flashy_task.c: 302: case 2 | 8:
 17761                           
 17762                           
 17763                           ;flashy_task.c: 303: if (data->holdCountBY == 0){
 17764  0BBB  085E               	movf	flashy_Main@data,w
 17765  0BBC  0086               	movwf	6
 17766  0BBD  085F               	movf	flashy_Main@data+1,w
 17767  0BBE  0087               	movwf	7
 17768  0BBF  315A               	addfsr 1,26
 17769  0BC0  0016               	moviw fsr1++
 17770  0BC1  0401               	iorwf	1,w
 17771  0BC2  1D03               	btfss	3,2
 17772  0BC3  2BD8               	goto	l7968
 17773                           
 17774                           ;flashy_task.c: 304: if (flashy_option_idx == 0){
 17775  0BC4  0021               	movlb	1	; select bank1
 17776  0BC5  0826               	movf	_flashy_option_idx^(0+128),w
 17777  0BC6  0427               	iorwf	(_flashy_option_idx+1)^(0+128),w
 17778  0BC7  1903               	btfsc	3,2
 17779  0BC8  2BD8               	goto	l7968
 17780                           
 17781                           ;flashy_task.c: 307: else {
 17782                           ;flashy_task.c: 308: if (flashy_scroll_rate > 150){
 17783                           
 17784                           ;flashy_task.c: 306: }
 17785  0BC9  3000               	movlw	0
 17786  0BCA  022B               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 17787  0BCB  3097               	movlw	151
 17788  0BCC  1903               	skipnz
 17789  0BCD  022A               	subwf	_flashy_scroll_rate^(0+128),w
 17790  0BCE  1C03               	skipc
 17791  0BCF  2BD4               	goto	l1144
 17792                           
 17793                           ;flashy_task.c: 309: flashy_scroll_rate =150;
 17794  0BD0  3096               	movlw	150
 17795  0BD1  00AA               	movwf	_flashy_scroll_rate^(0+128)
 17796  0BD2  3000               	movlw	0
 17797  0BD3  00AB               	movwf	(_flashy_scroll_rate^(0+128)+1)
 17798  0BD4                     l1144:	
 17799                           
 17800                           ;flashy_task.c: 310: }
 17801                           ;flashy_task.c: 311: flashy_scroll_rate +=2;
 17802  0BD4  3002               	movlw	2
 17803  0BD5  07AA               	addwf	_flashy_scroll_rate^(0+128),f
 17804  0BD6  3000               	movlw	0
 17805  0BD7  3DAB               	addwfc	(_flashy_scroll_rate+1)^(0+128),f
 17806  0BD8                     l7968:	
 17807                           
 17808                           ;flashy_task.c: 312: }
 17809                           ;flashy_task.c: 314: }
 17810                           ;flashy_task.c: 315: data->holdCountA = 0;
 17811  0BD8  0020               	movlb	0	; select bank0
 17812  0BD9  085E               	movf	flashy_Main@data,w
 17813  0BDA  0086               	movwf	6
 17814  0BDB  085F               	movf	flashy_Main@data+1,w
 17815  0BDC  0087               	movwf	7
 17816  0BDD  314A               	addfsr 1,10
 17817  0BDE  3000               	movlw	0
 17818  0BDF  3FC0               	movwi [0]fsr1
 17819  0BE0  3FC1               	movwi [1]fsr1
 17820                           
 17821                           ;flashy_task.c: 316: data->holdCountB += 1;
 17822  0BE1  085E               	movf	flashy_Main@data,w
 17823  0BE2  0086               	movwf	6
 17824  0BE3  085F               	movf	flashy_Main@data+1,w
 17825  0BE4  0087               	movwf	7
 17826  0BE5  314C               	addfsr 1,12
 17827  0BE6  3001               	movlw	1
 17828  0BE7  0781               	addwf	1,f
 17829  0BE8  3141               	addfsr 1,1
 17830  0BE9  1803               	skipnc
 17831  0BEA  0A81               	incf	1,f
 17832                           
 17833                           ;flashy_task.c: 317: data->holdCountX = 0;
 17834  0BEB  085E               	movf	flashy_Main@data,w
 17835  0BEC  0086               	movwf	6
 17836  0BED  085F               	movf	flashy_Main@data+1,w
 17837  0BEE  0087               	movwf	7
 17838  0BEF  314E               	addfsr 1,14
 17839  0BF0  3000               	movlw	0
 17840  0BF1  3FC0               	movwi [0]fsr1
 17841  0BF2  3FC1               	movwi [1]fsr1
 17842                           
 17843                           ;flashy_task.c: 318: data->holdCountY += 1;
 17844  0BF3  085E               	movf	flashy_Main@data,w
 17845  0BF4  0086               	movwf	6
 17846  0BF5  085F               	movf	flashy_Main@data+1,w
 17847  0BF6  0087               	movwf	7
 17848  0BF7  3150               	addfsr 1,16
 17849  0BF8  3001               	movlw	1
 17850  0BF9  0781               	addwf	1,f
 17851  0BFA  3141               	addfsr 1,1
 17852  0BFB  1803               	skipnc
 17853  0BFC  0A81               	incf	1,f
 17854                           
 17855                           ;flashy_task.c: 319: data->holdCountXY = 0;
 17856  0BFD  085E               	movf	flashy_Main@data,w
 17857  0BFE  0086               	movwf	6
 17858  0BFF  085F               	movf	flashy_Main@data+1,w
 17859  0C00  0087               	movwf	7
 17860  0C01  3152               	addfsr 1,18
 17861  0C02  3000               	movlw	0
 17862  0C03  3FC0               	movwi [0]fsr1
 17863  0C04  3FC1               	movwi [1]fsr1
 17864                           
 17865                           ;flashy_task.c: 320: data->holdCountAY = 0;
 17866  0C05  085E               	movf	flashy_Main@data,w
 17867  0C06  0086               	movwf	6
 17868  0C07  085F               	movf	flashy_Main@data+1,w
 17869  0C08  0087               	movwf	7
 17870  0C09  3154               	addfsr 1,20
 17871  0C0A  3000               	movlw	0
 17872  0C0B  3FC0               	movwi [0]fsr1
 17873  0C0C  3FC1               	movwi [1]fsr1
 17874                           
 17875                           ;flashy_task.c: 321: data->holdCountAX = 0;
 17876  0C0D  085E               	movf	flashy_Main@data,w
 17877  0C0E  0086               	movwf	6
 17878  0C0F  085F               	movf	flashy_Main@data+1,w
 17879  0C10  0087               	movwf	7
 17880  0C11  3156               	addfsr 1,22
 17881  0C12  3000               	movlw	0
 17882  0C13  3FC0               	movwi [0]fsr1
 17883  0C14  3FC1               	movwi [1]fsr1
 17884                           
 17885                           ;flashy_task.c: 322: data->holdCountBX = 0;
 17886  0C15  085E               	movf	flashy_Main@data,w
 17887  0C16  0086               	movwf	6
 17888  0C17  085F               	movf	flashy_Main@data+1,w
 17889  0C18  0087               	movwf	7
 17890  0C19  3158               	addfsr 1,24
 17891  0C1A  3000               	movlw	0
 17892  0C1B  3FC0               	movwi [0]fsr1
 17893  0C1C  3FC1               	movwi [1]fsr1
 17894                           
 17895                           ;flashy_task.c: 323: data->holdCountBY += 1;
 17896  0C1D  085E               	movf	flashy_Main@data,w
 17897  0C1E  0086               	movwf	6
 17898  0C1F  085F               	movf	flashy_Main@data+1,w
 17899  0C20  0087               	movwf	7
 17900  0C21  315A               	addfsr 1,26
 17901  0C22  3001               	movlw	1
 17902  0C23  0781               	addwf	1,f
 17903  0C24  3141               	addfsr 1,1
 17904  0C25  1803               	skipnc
 17905  0C26  0A81               	incf	1,f
 17906                           
 17907                           ;flashy_task.c: 324: data->noholdCount = 0;
 17908  0C27  085E               	movf	flashy_Main@data,w
 17909  0C28  0086               	movwf	6
 17910  0C29  085F               	movf	flashy_Main@data+1,w
 17911  0C2A  0087               	movwf	7
 17912  0C2B  315C               	addfsr 1,28
 17913  0C2C  3000               	movlw	0
 17914  0C2D  3FC0               	movwi [0]fsr1
 17915  0C2E  3FC1               	movwi [1]fsr1
 17916                           
 17917                           ;flashy_task.c: 325: break;
 17918  0C2F  2FC9               	goto	l8170
 17919  0C30                     l7988:	
 17920                           ;flashy_task.c: 326: case 2 | 4:
 17921                           
 17922                           
 17923                           ;flashy_task.c: 327: if (data-> holdCountBX == 0){
 17924  0C30  085E               	movf	flashy_Main@data,w
 17925  0C31  0086               	movwf	6
 17926  0C32  085F               	movf	flashy_Main@data+1,w
 17927  0C33  0087               	movwf	7
 17928  0C34  3158               	addfsr 1,24
 17929  0C35  0016               	moviw fsr1++
 17930  0C36  0401               	iorwf	1,w
 17931  0C37  1D03               	btfss	3,2
 17932  0C38  2C4D               	goto	l7998
 17933                           
 17934                           ;flashy_task.c: 328: if (flashy_option_idx == 0){
 17935  0C39  0021               	movlb	1	; select bank1
 17936  0C3A  0826               	movf	_flashy_option_idx^(0+128),w
 17937  0C3B  0427               	iorwf	(_flashy_option_idx+1)^(0+128),w
 17938  0C3C  1903               	btfsc	3,2
 17939  0C3D  2C4D               	goto	l7998
 17940                           
 17941                           ;flashy_task.c: 331: else {
 17942                           ;flashy_task.c: 332: if (flashy_scroll_rate < 5){
 17943                           
 17944                           ;flashy_task.c: 330: }
 17945  0C3E  3000               	movlw	0
 17946  0C3F  022B               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 17947  0C40  3005               	movlw	5
 17948  0C41  1903               	skipnz
 17949  0C42  022A               	subwf	_flashy_scroll_rate^(0+128),w
 17950  0C43  1803               	skipnc
 17951  0C44  2C49               	goto	l1149
 17952                           
 17953                           ;flashy_task.c: 333: flashy_scroll_rate =5;
 17954  0C45  3005               	movlw	5
 17955  0C46  00AA               	movwf	_flashy_scroll_rate^(0+128)
 17956  0C47  3000               	movlw	0
 17957  0C48  00AB               	movwf	(_flashy_scroll_rate^(0+128)+1)
 17958  0C49                     l1149:	
 17959                           
 17960                           ;flashy_task.c: 334: }
 17961                           ;flashy_task.c: 335: flashy_scroll_rate -=3;
 17962  0C49  3003               	movlw	3
 17963  0C4A  02AA               	subwf	_flashy_scroll_rate^(0+128),f
 17964  0C4B  3000               	movlw	0
 17965  0C4C  3BAB               	subwfb	(_flashy_scroll_rate+1)^(0+128),f
 17966  0C4D                     l7998:	
 17967                           
 17968                           ;flashy_task.c: 336: }
 17969                           ;flashy_task.c: 338: }
 17970                           ;flashy_task.c: 339: data->holdCountA = 0;
 17971  0C4D  0020               	movlb	0	; select bank0
 17972  0C4E  085E               	movf	flashy_Main@data,w
 17973  0C4F  0086               	movwf	6
 17974  0C50  085F               	movf	flashy_Main@data+1,w
 17975  0C51  0087               	movwf	7
 17976  0C52  314A               	addfsr 1,10
 17977  0C53  3000               	movlw	0
 17978  0C54  3FC0               	movwi [0]fsr1
 17979  0C55  3FC1               	movwi [1]fsr1
 17980                           
 17981                           ;flashy_task.c: 340: data->holdCountB += 1;
 17982  0C56  085E               	movf	flashy_Main@data,w
 17983  0C57  0086               	movwf	6
 17984  0C58  085F               	movf	flashy_Main@data+1,w
 17985  0C59  0087               	movwf	7
 17986  0C5A  314C               	addfsr 1,12
 17987  0C5B  3001               	movlw	1
 17988  0C5C  0781               	addwf	1,f
 17989  0C5D  3141               	addfsr 1,1
 17990  0C5E  1803               	skipnc
 17991  0C5F  0A81               	incf	1,f
 17992                           
 17993                           ;flashy_task.c: 341: data->holdCountX += 1;
 17994  0C60  085E               	movf	flashy_Main@data,w
 17995  0C61  0086               	movwf	6
 17996  0C62  085F               	movf	flashy_Main@data+1,w
 17997  0C63  0087               	movwf	7
 17998  0C64  314E               	addfsr 1,14
 17999  0C65  3001               	movlw	1
 18000  0C66  0781               	addwf	1,f
 18001  0C67  3141               	addfsr 1,1
 18002  0C68  1803               	skipnc
 18003  0C69  0A81               	incf	1,f
 18004                           
 18005                           ;flashy_task.c: 342: data->holdCountY = 0;
 18006  0C6A  085E               	movf	flashy_Main@data,w
 18007  0C6B  0086               	movwf	6
 18008  0C6C  085F               	movf	flashy_Main@data+1,w
 18009  0C6D  0087               	movwf	7
 18010  0C6E  3150               	addfsr 1,16
 18011  0C6F  3000               	movlw	0
 18012  0C70  3FC0               	movwi [0]fsr1
 18013  0C71  3FC1               	movwi [1]fsr1
 18014                           
 18015                           ;flashy_task.c: 343: data->holdCountXY = 0;
 18016  0C72  085E               	movf	flashy_Main@data,w
 18017  0C73  0086               	movwf	6
 18018  0C74  085F               	movf	flashy_Main@data+1,w
 18019  0C75  0087               	movwf	7
 18020  0C76  3152               	addfsr 1,18
 18021  0C77  3000               	movlw	0
 18022  0C78  3FC0               	movwi [0]fsr1
 18023  0C79  3FC1               	movwi [1]fsr1
 18024                           
 18025                           ;flashy_task.c: 344: data->holdCountAY = 0;
 18026  0C7A  085E               	movf	flashy_Main@data,w
 18027  0C7B  0086               	movwf	6
 18028  0C7C  085F               	movf	flashy_Main@data+1,w
 18029  0C7D  0087               	movwf	7
 18030  0C7E  3154               	addfsr 1,20
 18031  0C7F  3000               	movlw	0
 18032  0C80  3FC0               	movwi [0]fsr1
 18033  0C81  3FC1               	movwi [1]fsr1
 18034                           
 18035                           ;flashy_task.c: 345: data->holdCountAX = 0;
 18036  0C82  085E               	movf	flashy_Main@data,w
 18037  0C83  0086               	movwf	6
 18038  0C84  085F               	movf	flashy_Main@data+1,w
 18039  0C85  0087               	movwf	7
 18040  0C86  3156               	addfsr 1,22
 18041  0C87  3000               	movlw	0
 18042  0C88  3FC0               	movwi [0]fsr1
 18043  0C89  3FC1               	movwi [1]fsr1
 18044                           
 18045                           ;flashy_task.c: 346: data->holdCountBX += 1;
 18046  0C8A  085E               	movf	flashy_Main@data,w
 18047  0C8B  0086               	movwf	6
 18048  0C8C  085F               	movf	flashy_Main@data+1,w
 18049  0C8D  0087               	movwf	7
 18050  0C8E  3158               	addfsr 1,24
 18051  0C8F  3001               	movlw	1
 18052  0C90  0781               	addwf	1,f
 18053  0C91  3141               	addfsr 1,1
 18054  0C92  1803               	skipnc
 18055  0C93  0A81               	incf	1,f
 18056                           
 18057                           ;flashy_task.c: 347: data->holdCountBY = 0;
 18058  0C94  085E               	movf	flashy_Main@data,w
 18059  0C95  0086               	movwf	6
 18060  0C96  085F               	movf	flashy_Main@data+1,w
 18061  0C97  0087               	movwf	7
 18062  0C98  315A               	addfsr 1,26
 18063  0C99  3000               	movlw	0
 18064  0C9A  3FC0               	movwi [0]fsr1
 18065  0C9B  3FC1               	movwi [1]fsr1
 18066                           
 18067                           ;flashy_task.c: 348: data->noholdCount = 0;
 18068  0C9C  085E               	movf	flashy_Main@data,w
 18069  0C9D  0086               	movwf	6
 18070  0C9E  085F               	movf	flashy_Main@data+1,w
 18071  0C9F  0087               	movwf	7
 18072  0CA0  315C               	addfsr 1,28
 18073  0CA1  3000               	movlw	0
 18074  0CA2  3FC0               	movwi [0]fsr1
 18075  0CA3  3FC1               	movwi [1]fsr1
 18076                           
 18077                           ;flashy_task.c: 349: break;
 18078  0CA4  2FC9               	goto	l8170
 18079  0CA5                     l8018:	
 18080                           ;flashy_task.c: 350: case 8:
 18081                           
 18082                           
 18083                           ;flashy_task.c: 352: if (data->holdCountY == 0 && data->blasterTickCount == 0){
 18084  0CA5  085E               	movf	flashy_Main@data,w
 18085  0CA6  0086               	movwf	6
 18086  0CA7  085F               	movf	flashy_Main@data+1,w
 18087  0CA8  0087               	movwf	7
 18088  0CA9  3150               	addfsr 1,16
 18089  0CAA  0016               	moviw fsr1++
 18090  0CAB  0401               	iorwf	1,w
 18091  0CAC  1D03               	btfss	3,2
 18092  0CAD  2CFB               	goto	l8036
 18093  0CAE  085E               	movf	flashy_Main@data,w
 18094  0CAF  0086               	movwf	6
 18095  0CB0  085F               	movf	flashy_Main@data+1,w
 18096  0CB1  0087               	movwf	7
 18097  0CB2  3147               	addfsr 1,7
 18098  0CB3  0016               	moviw fsr1++
 18099  0CB4  0401               	iorwf	1,w
 18100  0CB5  1D03               	btfss	3,2
 18101  0CB6  2CFB               	goto	l8036
 18102                           
 18103                           ;flashy_task.c: 354: nullifyBadge_userLedsSet(data->badge, 0x0);
 18104  0CB7  3000               	movlw	0
 18105  0CB8  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 18106  0CB9  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 18107  0CBA  085E               	movf	flashy_Main@data,w
 18108  0CBB  0086               	movwf	6
 18109  0CBC  085F               	movf	flashy_Main@data+1,w
 18110  0CBD  0087               	movwf	7
 18111  0CBE  0801               	movf	1,w
 18112  0CBF  31AF  2709  3188   	fcall	_nullifyBadge_userLedsSet
 18113                           
 18114                           ;flashy_task.c: 356: data->displayTickCount = 0;
 18115  0CC2  0020               	movlb	0	; select bank0
 18116  0CC3  085E               	movf	flashy_Main@data,w
 18117  0CC4  0086               	movwf	6
 18118  0CC5  085F               	movf	flashy_Main@data+1,w
 18119  0CC6  0087               	movwf	7
 18120  0CC7  3144               	addfsr 1,4
 18121  0CC8  3000               	movlw	0
 18122  0CC9  3FC0               	movwi [0]fsr1
 18123  0CCA  3FC1               	movwi [1]fsr1
 18124                           
 18125                           ;flashy_task.c: 357: data->blasterTickCount = 100;
 18126  0CCB  085E               	movf	flashy_Main@data,w
 18127  0CCC  0086               	movwf	6
 18128  0CCD  085F               	movf	flashy_Main@data+1,w
 18129  0CCE  0087               	movwf	7
 18130  0CCF  3147               	addfsr 1,7
 18131  0CD0  3064               	movlw	100
 18132  0CD1  3FC0               	movwi [0]fsr1
 18133  0CD2  3000               	movlw	0
 18134  0CD3  3FC1               	movwi [1]fsr1
 18135                           
 18136                           ;flashy_task.c: 358: data->delayTickCount = 5;
 18137  0CD4  085E               	movf	flashy_Main@data,w
 18138  0CD5  0086               	movwf	6
 18139  0CD6  085F               	movf	flashy_Main@data+1,w
 18140  0CD7  0087               	movwf	7
 18141  0CD8  3141               	addfsr 1,1
 18142  0CD9  3005               	movlw	5
 18143  0CDA  3FC0               	movwi [0]fsr1
 18144  0CDB  3000               	movlw	0
 18145  0CDC  3FC1               	movwi [1]fsr1
 18146                           
 18147                           ;flashy_task.c: 360: data->led_state = FLASHY_STATE_LED_SHOT;
 18148  0CDD  085E               	movf	flashy_Main@data,w
 18149  0CDE  3E03               	addlw	3
 18150  0CDF  00D4               	movwf	??_flashy_Main
 18151  0CE0  3000               	movlw	0
 18152  0CE1  3D5F               	addwfc	flashy_Main@data+1,w
 18153  0CE2  00D5               	movwf	??_flashy_Main+1
 18154  0CE3  0854               	movf	??_flashy_Main,w
 18155  0CE4  0086               	movwf	6
 18156  0CE5  0855               	movf	??_flashy_Main+1,w
 18157  0CE6  0087               	movwf	7
 18158  0CE7  3001               	movlw	1
 18159  0CE8  0081               	movwf	1
 18160                           
 18161                           ;flashy_task.c: 361: data->display_state = FLASHY_STATE_DISPLAY_BLASTER;
 18162  0CE9  085E               	movf	flashy_Main@data,w
 18163  0CEA  3E06               	addlw	6
 18164  0CEB  00D4               	movwf	??_flashy_Main
 18165  0CEC  3000               	movlw	0
 18166  0CED  3D5F               	addwfc	flashy_Main@data+1,w
 18167  0CEE  00D5               	movwf	??_flashy_Main+1
 18168  0CEF  0854               	movf	??_flashy_Main,w
 18169  0CF0  0086               	movwf	6
 18170  0CF1  0855               	movf	??_flashy_Main+1,w
 18171  0CF2  0087               	movwf	7
 18172  0CF3  3002               	movlw	2
 18173  0CF4  0081               	movwf	1
 18174                           
 18175                           ;flashy_task.c: 362: data->blaster_state = FLASHY_BLASTER_SHOOTING_STATE;
 18176  0CF5  085E               	movf	flashy_Main@data,w
 18177  0CF6  0086               	movwf	6
 18178  0CF7  085F               	movf	flashy_Main@data+1,w
 18179  0CF8  0087               	movwf	7
 18180  0CF9  3149               	addfsr 1,9
 18181  0CFA  0181               	clrf	1
 18182  0CFB                     l8036:	
 18183                           
 18184                           ;flashy_task.c: 363: }
 18185                           ;flashy_task.c: 365: data->holdCountA = 0;
 18186  0CFB  085E               	movf	flashy_Main@data,w
 18187  0CFC  0086               	movwf	6
 18188  0CFD  085F               	movf	flashy_Main@data+1,w
 18189  0CFE  0087               	movwf	7
 18190  0CFF  314A               	addfsr 1,10
 18191  0D00  3000               	movlw	0
 18192  0D01  3FC0               	movwi [0]fsr1
 18193  0D02  3FC1               	movwi [1]fsr1
 18194                           
 18195                           ;flashy_task.c: 366: data->holdCountB = 0;
 18196  0D03  085E               	movf	flashy_Main@data,w
 18197  0D04  0086               	movwf	6
 18198  0D05  085F               	movf	flashy_Main@data+1,w
 18199  0D06  0087               	movwf	7
 18200  0D07  314C               	addfsr 1,12
 18201  0D08  3000               	movlw	0
 18202  0D09  3FC0               	movwi [0]fsr1
 18203  0D0A  3FC1               	movwi [1]fsr1
 18204                           
 18205                           ;flashy_task.c: 367: data->holdCountX = 0;
 18206  0D0B  085E               	movf	flashy_Main@data,w
 18207  0D0C  0086               	movwf	6
 18208  0D0D  085F               	movf	flashy_Main@data+1,w
 18209  0D0E  0087               	movwf	7
 18210  0D0F  314E               	addfsr 1,14
 18211  0D10  3000               	movlw	0
 18212  0D11  3FC0               	movwi [0]fsr1
 18213  0D12  3FC1               	movwi [1]fsr1
 18214                           
 18215                           ;flashy_task.c: 368: data->holdCountY += 1;
 18216  0D13  085E               	movf	flashy_Main@data,w
 18217  0D14  0086               	movwf	6
 18218  0D15  085F               	movf	flashy_Main@data+1,w
 18219  0D16  0087               	movwf	7
 18220  0D17  3150               	addfsr 1,16
 18221  0D18  3001               	movlw	1
 18222  0D19  0781               	addwf	1,f
 18223  0D1A  3141               	addfsr 1,1
 18224  0D1B  1803               	skipnc
 18225  0D1C  0A81               	incf	1,f
 18226                           
 18227                           ;flashy_task.c: 369: data->holdCountXY = 0;
 18228  0D1D  085E               	movf	flashy_Main@data,w
 18229  0D1E  0086               	movwf	6
 18230  0D1F  085F               	movf	flashy_Main@data+1,w
 18231  0D20  0087               	movwf	7
 18232  0D21  3152               	addfsr 1,18
 18233  0D22  3000               	movlw	0
 18234  0D23  3FC0               	movwi [0]fsr1
 18235  0D24  3FC1               	movwi [1]fsr1
 18236                           
 18237                           ;flashy_task.c: 370: data->holdCountAY = 0;
 18238  0D25  085E               	movf	flashy_Main@data,w
 18239  0D26  0086               	movwf	6
 18240  0D27  085F               	movf	flashy_Main@data+1,w
 18241  0D28  0087               	movwf	7
 18242  0D29  3154               	addfsr 1,20
 18243  0D2A  3000               	movlw	0
 18244  0D2B  3FC0               	movwi [0]fsr1
 18245  0D2C  3FC1               	movwi [1]fsr1
 18246                           
 18247                           ;flashy_task.c: 371: data->holdCountAX = 0;
 18248  0D2D  085E               	movf	flashy_Main@data,w
 18249  0D2E  0086               	movwf	6
 18250  0D2F  085F               	movf	flashy_Main@data+1,w
 18251  0D30  0087               	movwf	7
 18252  0D31  3156               	addfsr 1,22
 18253  0D32  3000               	movlw	0
 18254  0D33  3FC0               	movwi [0]fsr1
 18255  0D34  3FC1               	movwi [1]fsr1
 18256                           
 18257                           ;flashy_task.c: 372: data->holdCountBX = 0;
 18258  0D35  085E               	movf	flashy_Main@data,w
 18259  0D36  0086               	movwf	6
 18260  0D37  085F               	movf	flashy_Main@data+1,w
 18261  0D38  0087               	movwf	7
 18262  0D39  3158               	addfsr 1,24
 18263  0D3A  3000               	movlw	0
 18264  0D3B  3FC0               	movwi [0]fsr1
 18265  0D3C  3FC1               	movwi [1]fsr1
 18266                           
 18267                           ;flashy_task.c: 373: data->holdCountBY = 0;
 18268  0D3D  085E               	movf	flashy_Main@data,w
 18269  0D3E  0086               	movwf	6
 18270  0D3F  085F               	movf	flashy_Main@data+1,w
 18271  0D40  0087               	movwf	7
 18272  0D41  315A               	addfsr 1,26
 18273  0D42  3000               	movlw	0
 18274  0D43  3FC0               	movwi [0]fsr1
 18275  0D44  3FC1               	movwi [1]fsr1
 18276                           
 18277                           ;flashy_task.c: 374: data->noholdCount = 0;
 18278  0D45  085E               	movf	flashy_Main@data,w
 18279  0D46  0086               	movwf	6
 18280  0D47  085F               	movf	flashy_Main@data+1,w
 18281  0D48  0087               	movwf	7
 18282  0D49  315C               	addfsr 1,28
 18283  0D4A  3000               	movlw	0
 18284  0D4B  3FC0               	movwi [0]fsr1
 18285  0D4C  3FC1               	movwi [1]fsr1
 18286                           
 18287                           ;flashy_task.c: 375: break;
 18288  0D4D  2FC9               	goto	l8170
 18289  0D4E                     l8056:	
 18290                           ;flashy_task.c: 376: case 2:
 18291                           
 18292                           
 18293                           ;flashy_task.c: 378: if (data->holdCountB == 0){
 18294  0D4E  085E               	movf	flashy_Main@data,w
 18295  0D4F  0086               	movwf	6
 18296  0D50  085F               	movf	flashy_Main@data+1,w
 18297  0D51  0087               	movwf	7
 18298  0D52  314C               	addfsr 1,12
 18299  0D53  0016               	moviw fsr1++
 18300  0D54  0401               	iorwf	1,w
 18301  0D55  1D03               	btfss	3,2
 18302  0D56  2D7C               	goto	l8066
 18303                           
 18304                           ;flashy_task.c: 379: data->display_state = FLASHY_STATE_DISPLAY;
 18305  0D57  085E               	movf	flashy_Main@data,w
 18306  0D58  0086               	movwf	6
 18307  0D59  085F               	movf	flashy_Main@data+1,w
 18308  0D5A  0087               	movwf	7
 18309  0D5B  3146               	addfsr 1,6
 18310  0D5C  0181               	clrf	1
 18311                           
 18312                           ;flashy_task.c: 380: if (flashy_option_idx == flashy_option_size - 1){
 18313  0D5D  0021               	movlb	1	; select bank1
 18314  0D5E  0824               	movf	_flashy_option_size^(0+128),w
 18315  0D5F  3EFF               	addlw	255
 18316  0D60  0020               	movlb	0	; select bank0
 18317  0D61  00D4               	movwf	??_flashy_Main
 18318  0D62  30FF               	movlw	255
 18319  0D63  0021               	movlb	1	; select bank1
 18320  0D64  3D25               	addwfc	(_flashy_option_size+1)^(0+128),w
 18321  0D65  0020               	movlb	0	; select bank0
 18322  0D66  00D5               	movwf	??_flashy_Main+1
 18323  0D67  0021               	movlb	1	; select bank1
 18324  0D68  0827               	movf	(_flashy_option_idx+1)^(0+128),w
 18325  0D69  0020               	movlb	0	; select bank0
 18326  0D6A  0655               	xorwf	??_flashy_Main+1,w
 18327  0D6B  1D03               	skipz
 18328  0D6C  2D71               	goto	u5195
 18329  0D6D  0021               	movlb	1	; select bank1
 18330  0D6E  0826               	movf	_flashy_option_idx^(0+128),w
 18331  0D6F  0020               	movlb	0	; select bank0
 18332  0D70  0654               	xorwf	??_flashy_Main,w
 18333  0D71                     u5195:	
 18334  0D71  1D03               	skipz
 18335  0D72  2D77               	goto	l8064
 18336                           
 18337                           ;flashy_task.c: 381: flashy_option_idx = 0;
 18338  0D73  0021               	movlb	1	; select bank1
 18339  0D74  01A6               	clrf	_flashy_option_idx^(0+128)
 18340  0D75  01A7               	clrf	(_flashy_option_idx+1)^(0+128)
 18341                           
 18342                           ;flashy_task.c: 382: }
 18343  0D76  2D7C               	goto	l8066
 18344  0D77                     l8064:	
 18345                           
 18346                           ;flashy_task.c: 383: else {
 18347                           ;flashy_task.c: 384: flashy_option_idx += 1;
 18348  0D77  3001               	movlw	1
 18349  0D78  0021               	movlb	1	; select bank1
 18350  0D79  07A6               	addwf	_flashy_option_idx^(0+128),f
 18351  0D7A  3000               	movlw	0
 18352  0D7B  3DA7               	addwfc	(_flashy_option_idx+1)^(0+128),f
 18353  0D7C                     l8066:	
 18354                           
 18355                           ;flashy_task.c: 385: }
 18356                           ;flashy_task.c: 386: }
 18357                           ;flashy_task.c: 387: data->holdCountA = 0;
 18358  0D7C  0020               	movlb	0	; select bank0
 18359  0D7D  085E               	movf	flashy_Main@data,w
 18360  0D7E  0086               	movwf	6
 18361  0D7F  085F               	movf	flashy_Main@data+1,w
 18362  0D80  0087               	movwf	7
 18363  0D81  314A               	addfsr 1,10
 18364  0D82  3000               	movlw	0
 18365  0D83  3FC0               	movwi [0]fsr1
 18366  0D84  3FC1               	movwi [1]fsr1
 18367                           
 18368                           ;flashy_task.c: 388: data->holdCountB += 1;
 18369  0D85  085E               	movf	flashy_Main@data,w
 18370  0D86  0086               	movwf	6
 18371  0D87  085F               	movf	flashy_Main@data+1,w
 18372  0D88  0087               	movwf	7
 18373  0D89  314C               	addfsr 1,12
 18374  0D8A  3001               	movlw	1
 18375  0D8B  0781               	addwf	1,f
 18376  0D8C  3141               	addfsr 1,1
 18377  0D8D  1803               	skipnc
 18378  0D8E  0A81               	incf	1,f
 18379                           
 18380                           ;flashy_task.c: 389: data->holdCountX = 0;
 18381  0D8F  085E               	movf	flashy_Main@data,w
 18382  0D90  0086               	movwf	6
 18383  0D91  085F               	movf	flashy_Main@data+1,w
 18384  0D92  0087               	movwf	7
 18385  0D93  314E               	addfsr 1,14
 18386  0D94  3000               	movlw	0
 18387  0D95  3FC0               	movwi [0]fsr1
 18388  0D96  3FC1               	movwi [1]fsr1
 18389                           
 18390                           ;flashy_task.c: 390: data->holdCountY = 0;
 18391  0D97  085E               	movf	flashy_Main@data,w
 18392  0D98  0086               	movwf	6
 18393  0D99  085F               	movf	flashy_Main@data+1,w
 18394  0D9A  0087               	movwf	7
 18395  0D9B  3150               	addfsr 1,16
 18396  0D9C  3000               	movlw	0
 18397  0D9D  3FC0               	movwi [0]fsr1
 18398  0D9E  3FC1               	movwi [1]fsr1
 18399                           
 18400                           ;flashy_task.c: 391: data->holdCountXY = 0;
 18401  0D9F  085E               	movf	flashy_Main@data,w
 18402  0DA0  0086               	movwf	6
 18403  0DA1  085F               	movf	flashy_Main@data+1,w
 18404  0DA2  0087               	movwf	7
 18405  0DA3  3152               	addfsr 1,18
 18406  0DA4  3000               	movlw	0
 18407  0DA5  3FC0               	movwi [0]fsr1
 18408  0DA6  3FC1               	movwi [1]fsr1
 18409                           
 18410                           ;flashy_task.c: 392: data->holdCountAY = 0;
 18411  0DA7  085E               	movf	flashy_Main@data,w
 18412  0DA8  0086               	movwf	6
 18413  0DA9  085F               	movf	flashy_Main@data+1,w
 18414  0DAA  0087               	movwf	7
 18415  0DAB  3154               	addfsr 1,20
 18416  0DAC  3000               	movlw	0
 18417  0DAD  3FC0               	movwi [0]fsr1
 18418  0DAE  3FC1               	movwi [1]fsr1
 18419                           
 18420                           ;flashy_task.c: 393: data->holdCountAX = 0;
 18421  0DAF  085E               	movf	flashy_Main@data,w
 18422  0DB0  0086               	movwf	6
 18423  0DB1  085F               	movf	flashy_Main@data+1,w
 18424  0DB2  0087               	movwf	7
 18425  0DB3  3156               	addfsr 1,22
 18426  0DB4  3000               	movlw	0
 18427  0DB5  3FC0               	movwi [0]fsr1
 18428  0DB6  3FC1               	movwi [1]fsr1
 18429                           
 18430                           ;flashy_task.c: 394: data->holdCountBX = 0;
 18431  0DB7  085E               	movf	flashy_Main@data,w
 18432  0DB8  0086               	movwf	6
 18433  0DB9  085F               	movf	flashy_Main@data+1,w
 18434  0DBA  0087               	movwf	7
 18435  0DBB  3158               	addfsr 1,24
 18436  0DBC  3000               	movlw	0
 18437  0DBD  3FC0               	movwi [0]fsr1
 18438  0DBE  3FC1               	movwi [1]fsr1
 18439                           
 18440                           ;flashy_task.c: 395: data->holdCountBY = 0;
 18441  0DBF  085E               	movf	flashy_Main@data,w
 18442  0DC0  0086               	movwf	6
 18443  0DC1  085F               	movf	flashy_Main@data+1,w
 18444  0DC2  0087               	movwf	7
 18445  0DC3  315A               	addfsr 1,26
 18446  0DC4  3000               	movlw	0
 18447  0DC5  3FC0               	movwi [0]fsr1
 18448  0DC6  3FC1               	movwi [1]fsr1
 18449                           
 18450                           ;flashy_task.c: 396: data->noholdCount = 0;
 18451  0DC7  085E               	movf	flashy_Main@data,w
 18452  0DC8  0086               	movwf	6
 18453  0DC9  085F               	movf	flashy_Main@data+1,w
 18454  0DCA  0087               	movwf	7
 18455  0DCB  315C               	addfsr 1,28
 18456  0DCC  3000               	movlw	0
 18457  0DCD  3FC0               	movwi [0]fsr1
 18458  0DCE  3FC1               	movwi [1]fsr1
 18459                           
 18460                           ;flashy_task.c: 397: break;
 18461  0DCF  2FC9               	goto	l8170
 18462  0DD0                     l8086:	
 18463                           ;flashy_task.c: 398: case 1:
 18464                           
 18465                           
 18466                           ;flashy_task.c: 399: if ( data->holdCountA == 0){
 18467  0DD0  085E               	movf	flashy_Main@data,w
 18468  0DD1  0086               	movwf	6
 18469  0DD2  085F               	movf	flashy_Main@data+1,w
 18470  0DD3  0087               	movwf	7
 18471  0DD4  314A               	addfsr 1,10
 18472  0DD5  0016               	moviw fsr1++
 18473  0DD6  0401               	iorwf	1,w
 18474  0DD7  1D03               	btfss	3,2
 18475  0DD8  2E3E               	goto	l8114
 18476                           
 18477                           ;flashy_task.c: 402: if (flashy_leds_state_track > 4){
 18478  0DD9  3000               	movlw	0
 18479  0DDA  0021               	movlb	1	; select bank1
 18480  0DDB  022F               	subwf	(_flashy_leds_state_track+1)^(0+128),w
 18481  0DDC  3005               	movlw	5
 18482  0DDD  1903               	skipnz
 18483  0DDE  022E               	subwf	_flashy_leds_state_track^(0+128),w
 18484  0DDF  1C03               	skipc
 18485  0DE0  2DE3               	goto	l8092
 18486                           
 18487                           ;flashy_task.c: 403: flashy_leds_state_track=0;
 18488  0DE1  01AE               	clrf	_flashy_leds_state_track^(0+128)
 18489  0DE2  01AF               	clrf	(_flashy_leds_state_track+1)^(0+128)
 18490  0DE3                     l8092:	
 18491                           
 18492                           ;flashy_task.c: 404: }
 18493                           ;flashy_task.c: 405: if (flashy_leds_state_track== 0){
 18494  0DE3  082E               	movf	_flashy_leds_state_track^(0+128),w
 18495  0DE4  042F               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 18496  0DE5  1D03               	btfss	3,2
 18497  0DE6  2DF4               	goto	l8096
 18498                           
 18499                           ;flashy_task.c: 406: data->led_state = FLASHY_STATE_LED_ALT;
 18500  0DE7  0020               	movlb	0	; select bank0
 18501  0DE8  085E               	movf	flashy_Main@data,w
 18502  0DE9  3E03               	addlw	3
 18503  0DEA  00D4               	movwf	??_flashy_Main
 18504  0DEB  3000               	movlw	0
 18505  0DEC  3D5F               	addwfc	flashy_Main@data+1,w
 18506  0DED  00D5               	movwf	??_flashy_Main+1
 18507  0DEE  0854               	movf	??_flashy_Main,w
 18508  0DEF  0086               	movwf	6
 18509  0DF0  0855               	movf	??_flashy_Main+1,w
 18510  0DF1  0087               	movwf	7
 18511  0DF2  3004               	movlw	4
 18512  0DF3  0081               	movwf	1
 18513  0DF4                     l8096:	
 18514                           
 18515                           ;flashy_task.c: 407: }
 18516                           ;flashy_task.c: 408: if (flashy_leds_state_track ==1){
 18517  0DF4  0021               	movlb	1	; select bank1
 18518  0DF5  032E               	decf	_flashy_leds_state_track^(0+128),w
 18519  0DF6  042F               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 18520  0DF7  1D03               	btfss	3,2
 18521  0DF8  2E06               	goto	l8100
 18522                           
 18523                           ;flashy_task.c: 409: data->led_state = FLASHY_STATE_SPARKLE;
 18524  0DF9  0020               	movlb	0	; select bank0
 18525  0DFA  085E               	movf	flashy_Main@data,w
 18526  0DFB  3E03               	addlw	3
 18527  0DFC  00D4               	movwf	??_flashy_Main
 18528  0DFD  3000               	movlw	0
 18529  0DFE  3D5F               	addwfc	flashy_Main@data+1,w
 18530  0DFF  00D5               	movwf	??_flashy_Main+1
 18531  0E00  0854               	movf	??_flashy_Main,w
 18532  0E01  0086               	movwf	6
 18533  0E02  0855               	movf	??_flashy_Main+1,w
 18534  0E03  0087               	movwf	7
 18535  0E04  3002               	movlw	2
 18536  0E05  0081               	movwf	1
 18537  0E06                     l8100:	
 18538                           
 18539                           ;flashy_task.c: 410: }
 18540                           ;flashy_task.c: 411: if (flashy_leds_state_track == 2){
 18541  0E06  3002               	movlw	2
 18542  0E07  0021               	movlb	1	; select bank1
 18543  0E08  062E               	xorwf	_flashy_leds_state_track^(0+128),w
 18544  0E09  042F               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 18545  0E0A  1D03               	btfss	3,2
 18546  0E0B  2E19               	goto	l8104
 18547                           
 18548                           ;flashy_task.c: 412: data->led_state = FLASHY_STATE_CIRCLE;
 18549  0E0C  0020               	movlb	0	; select bank0
 18550  0E0D  085E               	movf	flashy_Main@data,w
 18551  0E0E  3E03               	addlw	3
 18552  0E0F  00D4               	movwf	??_flashy_Main
 18553  0E10  3000               	movlw	0
 18554  0E11  3D5F               	addwfc	flashy_Main@data+1,w
 18555  0E12  00D5               	movwf	??_flashy_Main+1
 18556  0E13  0854               	movf	??_flashy_Main,w
 18557  0E14  0086               	movwf	6
 18558  0E15  0855               	movf	??_flashy_Main+1,w
 18559  0E16  0087               	movwf	7
 18560  0E17  3003               	movlw	3
 18561  0E18  0081               	movwf	1
 18562  0E19                     l8104:	
 18563                           
 18564                           ;flashy_task.c: 413: }
 18565                           ;flashy_task.c: 414: if (flashy_leds_state_track == 3){
 18566  0E19  3003               	movlw	3
 18567  0E1A  0021               	movlb	1	; select bank1
 18568  0E1B  062E               	xorwf	_flashy_leds_state_track^(0+128),w
 18569  0E1C  042F               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 18570  0E1D  1D03               	btfss	3,2
 18571  0E1E  2E26               	goto	l8108
 18572                           
 18573                           ;flashy_task.c: 415: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 18574  0E1F  0020               	movlb	0	; select bank0
 18575  0E20  085E               	movf	flashy_Main@data,w
 18576  0E21  0086               	movwf	6
 18577  0E22  085F               	movf	flashy_Main@data+1,w
 18578  0E23  0087               	movwf	7
 18579  0E24  3143               	addfsr 1,3
 18580  0E25  0181               	clrf	1
 18581  0E26                     l8108:	
 18582                           
 18583                           ;flashy_task.c: 416: }
 18584                           ;flashy_task.c: 417: if (flashy_leds_state_track ==4 ){
 18585  0E26  3004               	movlw	4
 18586  0E27  0021               	movlb	1	; select bank1
 18587  0E28  062E               	xorwf	_flashy_leds_state_track^(0+128),w
 18588  0E29  042F               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 18589  0E2A  1D03               	btfss	3,2
 18590  0E2B  2E39               	goto	l8112
 18591                           
 18592                           ;flashy_task.c: 418: data->led_state = FLASHY_STATE_LED_PARODY;
 18593  0E2C  0020               	movlb	0	; select bank0
 18594  0E2D  085E               	movf	flashy_Main@data,w
 18595  0E2E  3E03               	addlw	3
 18596  0E2F  00D4               	movwf	??_flashy_Main
 18597  0E30  3000               	movlw	0
 18598  0E31  3D5F               	addwfc	flashy_Main@data+1,w
 18599  0E32  00D5               	movwf	??_flashy_Main+1
 18600  0E33  0854               	movf	??_flashy_Main,w
 18601  0E34  0086               	movwf	6
 18602  0E35  0855               	movf	??_flashy_Main+1,w
 18603  0E36  0087               	movwf	7
 18604  0E37  3005               	movlw	5
 18605  0E38  0081               	movwf	1
 18606  0E39                     l8112:	
 18607                           
 18608                           ;flashy_task.c: 419: }
 18609                           ;flashy_task.c: 420: flashy_leds_state_track +=1;
 18610  0E39  3001               	movlw	1
 18611  0E3A  0021               	movlb	1	; select bank1
 18612  0E3B  07AE               	addwf	_flashy_leds_state_track^(0+128),f
 18613  0E3C  3000               	movlw	0
 18614  0E3D  3DAF               	addwfc	(_flashy_leds_state_track+1)^(0+128),f
 18615  0E3E                     l8114:	
 18616                           
 18617                           ;flashy_task.c: 421: }
 18618                           ;flashy_task.c: 423: data->holdCountA += 1;
 18619  0E3E  0020               	movlb	0	; select bank0
 18620  0E3F  085E               	movf	flashy_Main@data,w
 18621  0E40  0086               	movwf	6
 18622  0E41  085F               	movf	flashy_Main@data+1,w
 18623  0E42  0087               	movwf	7
 18624  0E43  314A               	addfsr 1,10
 18625  0E44  3001               	movlw	1
 18626  0E45  0781               	addwf	1,f
 18627  0E46  3141               	addfsr 1,1
 18628  0E47  1803               	skipnc
 18629  0E48  0A81               	incf	1,f
 18630                           
 18631                           ;flashy_task.c: 424: data->holdCountB = 0;
 18632  0E49  085E               	movf	flashy_Main@data,w
 18633  0E4A  0086               	movwf	6
 18634  0E4B  085F               	movf	flashy_Main@data+1,w
 18635  0E4C  0087               	movwf	7
 18636  0E4D  314C               	addfsr 1,12
 18637  0E4E  3000               	movlw	0
 18638  0E4F  3FC0               	movwi [0]fsr1
 18639  0E50  3FC1               	movwi [1]fsr1
 18640                           
 18641                           ;flashy_task.c: 425: data->holdCountX = 0;
 18642  0E51  085E               	movf	flashy_Main@data,w
 18643  0E52  0086               	movwf	6
 18644  0E53  085F               	movf	flashy_Main@data+1,w
 18645  0E54  0087               	movwf	7
 18646  0E55  314E               	addfsr 1,14
 18647  0E56  3000               	movlw	0
 18648  0E57  3FC0               	movwi [0]fsr1
 18649  0E58  3FC1               	movwi [1]fsr1
 18650                           
 18651                           ;flashy_task.c: 426: data->holdCountY = 0;
 18652  0E59  085E               	movf	flashy_Main@data,w
 18653  0E5A  0086               	movwf	6
 18654  0E5B  085F               	movf	flashy_Main@data+1,w
 18655  0E5C  0087               	movwf	7
 18656  0E5D  3150               	addfsr 1,16
 18657  0E5E  3000               	movlw	0
 18658  0E5F  3FC0               	movwi [0]fsr1
 18659  0E60  3FC1               	movwi [1]fsr1
 18660                           
 18661                           ;flashy_task.c: 427: data->holdCountXY = 0;
 18662  0E61  085E               	movf	flashy_Main@data,w
 18663  0E62  0086               	movwf	6
 18664  0E63  085F               	movf	flashy_Main@data+1,w
 18665  0E64  0087               	movwf	7
 18666  0E65  3152               	addfsr 1,18
 18667  0E66  3000               	movlw	0
 18668  0E67  3FC0               	movwi [0]fsr1
 18669  0E68  3FC1               	movwi [1]fsr1
 18670                           
 18671                           ;flashy_task.c: 428: data->holdCountAY = 0;
 18672  0E69  085E               	movf	flashy_Main@data,w
 18673  0E6A  0086               	movwf	6
 18674  0E6B  085F               	movf	flashy_Main@data+1,w
 18675  0E6C  0087               	movwf	7
 18676  0E6D  3154               	addfsr 1,20
 18677  0E6E  3000               	movlw	0
 18678  0E6F  3FC0               	movwi [0]fsr1
 18679  0E70  3FC1               	movwi [1]fsr1
 18680                           
 18681                           ;flashy_task.c: 429: data->holdCountAX = 0;
 18682  0E71  085E               	movf	flashy_Main@data,w
 18683  0E72  0086               	movwf	6
 18684  0E73  085F               	movf	flashy_Main@data+1,w
 18685  0E74  0087               	movwf	7
 18686  0E75  3156               	addfsr 1,22
 18687  0E76  3000               	movlw	0
 18688  0E77  3FC0               	movwi [0]fsr1
 18689  0E78  3FC1               	movwi [1]fsr1
 18690                           
 18691                           ;flashy_task.c: 430: data->holdCountBX = 0;
 18692  0E79  085E               	movf	flashy_Main@data,w
 18693  0E7A  0086               	movwf	6
 18694  0E7B  085F               	movf	flashy_Main@data+1,w
 18695  0E7C  0087               	movwf	7
 18696  0E7D  3158               	addfsr 1,24
 18697  0E7E  3000               	movlw	0
 18698  0E7F  3FC0               	movwi [0]fsr1
 18699  0E80  3FC1               	movwi [1]fsr1
 18700                           
 18701                           ;flashy_task.c: 431: data->holdCountBY = 0;
 18702  0E81  085E               	movf	flashy_Main@data,w
 18703  0E82  0086               	movwf	6
 18704  0E83  085F               	movf	flashy_Main@data+1,w
 18705  0E84  0087               	movwf	7
 18706  0E85  315A               	addfsr 1,26
 18707  0E86  3000               	movlw	0
 18708  0E87  3FC0               	movwi [0]fsr1
 18709  0E88  3FC1               	movwi [1]fsr1
 18710                           
 18711                           ;flashy_task.c: 432: data->noholdCount = 0;
 18712  0E89  085E               	movf	flashy_Main@data,w
 18713  0E8A  0086               	movwf	6
 18714  0E8B  085F               	movf	flashy_Main@data+1,w
 18715  0E8C  0087               	movwf	7
 18716  0E8D  315C               	addfsr 1,28
 18717  0E8E  3000               	movlw	0
 18718  0E8F  3FC0               	movwi [0]fsr1
 18719  0E90  3FC1               	movwi [1]fsr1
 18720                           
 18721                           ;flashy_task.c: 433: break;
 18722  0E91  2FC9               	goto	l8170
 18723  0E92                     l8134:	
 18724                           ;flashy_task.c: 434: case 0:
 18725                           
 18726                           
 18727                           ;flashy_task.c: 436: data->holdCountA = 0;
 18728  0E92  085E               	movf	flashy_Main@data,w
 18729  0E93  0086               	movwf	6
 18730  0E94  085F               	movf	flashy_Main@data+1,w
 18731  0E95  0087               	movwf	7
 18732  0E96  314A               	addfsr 1,10
 18733  0E97  3000               	movlw	0
 18734  0E98  3FC0               	movwi [0]fsr1
 18735  0E99  3FC1               	movwi [1]fsr1
 18736                           
 18737                           ;flashy_task.c: 437: data->holdCountB = 0;
 18738  0E9A  085E               	movf	flashy_Main@data,w
 18739  0E9B  0086               	movwf	6
 18740  0E9C  085F               	movf	flashy_Main@data+1,w
 18741  0E9D  0087               	movwf	7
 18742  0E9E  314C               	addfsr 1,12
 18743  0E9F  3000               	movlw	0
 18744  0EA0  3FC0               	movwi [0]fsr1
 18745  0EA1  3FC1               	movwi [1]fsr1
 18746                           
 18747                           ;flashy_task.c: 438: data->holdCountX = 0;
 18748  0EA2  085E               	movf	flashy_Main@data,w
 18749  0EA3  0086               	movwf	6
 18750  0EA4  085F               	movf	flashy_Main@data+1,w
 18751  0EA5  0087               	movwf	7
 18752  0EA6  314E               	addfsr 1,14
 18753  0EA7  3000               	movlw	0
 18754  0EA8  3FC0               	movwi [0]fsr1
 18755  0EA9  3FC1               	movwi [1]fsr1
 18756                           
 18757                           ;flashy_task.c: 439: data->holdCountY = 0;
 18758  0EAA  085E               	movf	flashy_Main@data,w
 18759  0EAB  0086               	movwf	6
 18760  0EAC  085F               	movf	flashy_Main@data+1,w
 18761  0EAD  0087               	movwf	7
 18762  0EAE  3150               	addfsr 1,16
 18763  0EAF  3000               	movlw	0
 18764  0EB0  3FC0               	movwi [0]fsr1
 18765  0EB1  3FC1               	movwi [1]fsr1
 18766                           
 18767                           ;flashy_task.c: 440: data->holdCountXY = 0;
 18768  0EB2  085E               	movf	flashy_Main@data,w
 18769  0EB3  0086               	movwf	6
 18770  0EB4  085F               	movf	flashy_Main@data+1,w
 18771  0EB5  0087               	movwf	7
 18772  0EB6  3152               	addfsr 1,18
 18773  0EB7  3000               	movlw	0
 18774  0EB8  3FC0               	movwi [0]fsr1
 18775  0EB9  3FC1               	movwi [1]fsr1
 18776                           
 18777                           ;flashy_task.c: 441: data->holdCountAY = 0;
 18778  0EBA  085E               	movf	flashy_Main@data,w
 18779  0EBB  0086               	movwf	6
 18780  0EBC  085F               	movf	flashy_Main@data+1,w
 18781  0EBD  0087               	movwf	7
 18782  0EBE  3154               	addfsr 1,20
 18783  0EBF  3000               	movlw	0
 18784  0EC0  3FC0               	movwi [0]fsr1
 18785  0EC1  3FC1               	movwi [1]fsr1
 18786                           
 18787                           ;flashy_task.c: 442: data->holdCountAX = 0;
 18788  0EC2  085E               	movf	flashy_Main@data,w
 18789  0EC3  0086               	movwf	6
 18790  0EC4  085F               	movf	flashy_Main@data+1,w
 18791  0EC5  0087               	movwf	7
 18792  0EC6  3156               	addfsr 1,22
 18793  0EC7  3000               	movlw	0
 18794  0EC8  3FC0               	movwi [0]fsr1
 18795  0EC9  3FC1               	movwi [1]fsr1
 18796                           
 18797                           ;flashy_task.c: 443: data->holdCountBX = 0;
 18798  0ECA  085E               	movf	flashy_Main@data,w
 18799  0ECB  0086               	movwf	6
 18800  0ECC  085F               	movf	flashy_Main@data+1,w
 18801  0ECD  0087               	movwf	7
 18802  0ECE  3158               	addfsr 1,24
 18803  0ECF  3000               	movlw	0
 18804  0ED0  3FC0               	movwi [0]fsr1
 18805  0ED1  3FC1               	movwi [1]fsr1
 18806                           
 18807                           ;flashy_task.c: 444: data->holdCountBY = 0;
 18808  0ED2  085E               	movf	flashy_Main@data,w
 18809  0ED3  0086               	movwf	6
 18810  0ED4  085F               	movf	flashy_Main@data+1,w
 18811  0ED5  0087               	movwf	7
 18812  0ED6  315A               	addfsr 1,26
 18813  0ED7  3000               	movlw	0
 18814  0ED8  3FC0               	movwi [0]fsr1
 18815  0ED9  3FC1               	movwi [1]fsr1
 18816                           
 18817                           ;flashy_task.c: 445: data->noholdCount += 1;
 18818  0EDA  085E               	movf	flashy_Main@data,w
 18819  0EDB  0086               	movwf	6
 18820  0EDC  085F               	movf	flashy_Main@data+1,w
 18821  0EDD  0087               	movwf	7
 18822  0EDE  315C               	addfsr 1,28
 18823  0EDF  3001               	movlw	1
 18824  0EE0  0781               	addwf	1,f
 18825  0EE1  3141               	addfsr 1,1
 18826  0EE2  1803               	skipnc
 18827  0EE3  0A81               	incf	1,f
 18828                           
 18829                           ;flashy_task.c: 446: break;
 18830  0EE4  2FC9               	goto	l8170
 18831  0EE5                     l8138:	
 18832                           ;flashy_task.c: 447: default:
 18833                           
 18834                           
 18835                           ;flashy_task.c: 448: data->holdCountA = 0;
 18836  0EE5  085E               	movf	flashy_Main@data,w
 18837  0EE6  0086               	movwf	6
 18838  0EE7  085F               	movf	flashy_Main@data+1,w
 18839  0EE8  0087               	movwf	7
 18840  0EE9  314A               	addfsr 1,10
 18841  0EEA  3000               	movlw	0
 18842  0EEB  3FC0               	movwi [0]fsr1
 18843  0EEC  3FC1               	movwi [1]fsr1
 18844                           
 18845                           ;flashy_task.c: 449: data->holdCountB = 0;
 18846  0EED  085E               	movf	flashy_Main@data,w
 18847  0EEE  0086               	movwf	6
 18848  0EEF  085F               	movf	flashy_Main@data+1,w
 18849  0EF0  0087               	movwf	7
 18850  0EF1  314C               	addfsr 1,12
 18851  0EF2  3000               	movlw	0
 18852  0EF3  3FC0               	movwi [0]fsr1
 18853  0EF4  3FC1               	movwi [1]fsr1
 18854                           
 18855                           ;flashy_task.c: 450: data->holdCountX = 0;
 18856  0EF5  085E               	movf	flashy_Main@data,w
 18857  0EF6  0086               	movwf	6
 18858  0EF7  085F               	movf	flashy_Main@data+1,w
 18859  0EF8  0087               	movwf	7
 18860  0EF9  314E               	addfsr 1,14
 18861  0EFA  3000               	movlw	0
 18862  0EFB  3FC0               	movwi [0]fsr1
 18863  0EFC  3FC1               	movwi [1]fsr1
 18864                           
 18865                           ;flashy_task.c: 451: data->holdCountY = 0;
 18866  0EFD  085E               	movf	flashy_Main@data,w
 18867  0EFE  0086               	movwf	6
 18868  0EFF  085F               	movf	flashy_Main@data+1,w
 18869  0F00  0087               	movwf	7
 18870  0F01  3150               	addfsr 1,16
 18871  0F02  3000               	movlw	0
 18872  0F03  3FC0               	movwi [0]fsr1
 18873  0F04  3FC1               	movwi [1]fsr1
 18874                           
 18875                           ;flashy_task.c: 452: data->holdCountXY = 0;
 18876  0F05  085E               	movf	flashy_Main@data,w
 18877  0F06  0086               	movwf	6
 18878  0F07  085F               	movf	flashy_Main@data+1,w
 18879  0F08  0087               	movwf	7
 18880  0F09  3152               	addfsr 1,18
 18881  0F0A  3000               	movlw	0
 18882  0F0B  3FC0               	movwi [0]fsr1
 18883  0F0C  3FC1               	movwi [1]fsr1
 18884                           
 18885                           ;flashy_task.c: 453: data->holdCountAY = 0;
 18886  0F0D  085E               	movf	flashy_Main@data,w
 18887  0F0E  0086               	movwf	6
 18888  0F0F  085F               	movf	flashy_Main@data+1,w
 18889  0F10  0087               	movwf	7
 18890  0F11  3154               	addfsr 1,20
 18891  0F12  3000               	movlw	0
 18892  0F13  3FC0               	movwi [0]fsr1
 18893  0F14  3FC1               	movwi [1]fsr1
 18894                           
 18895                           ;flashy_task.c: 454: data->holdCountAX = 0;
 18896  0F15  085E               	movf	flashy_Main@data,w
 18897  0F16  0086               	movwf	6
 18898  0F17  085F               	movf	flashy_Main@data+1,w
 18899  0F18  0087               	movwf	7
 18900  0F19  3156               	addfsr 1,22
 18901  0F1A  3000               	movlw	0
 18902  0F1B  3FC0               	movwi [0]fsr1
 18903  0F1C  3FC1               	movwi [1]fsr1
 18904                           
 18905                           ;flashy_task.c: 455: data->holdCountBX = 0;
 18906  0F1D  085E               	movf	flashy_Main@data,w
 18907  0F1E  0086               	movwf	6
 18908  0F1F  085F               	movf	flashy_Main@data+1,w
 18909  0F20  0087               	movwf	7
 18910  0F21  3158               	addfsr 1,24
 18911  0F22  3000               	movlw	0
 18912  0F23  3FC0               	movwi [0]fsr1
 18913  0F24  3FC1               	movwi [1]fsr1
 18914                           
 18915                           ;flashy_task.c: 456: data->holdCountBY = 0;
 18916  0F25  085E               	movf	flashy_Main@data,w
 18917  0F26  0086               	movwf	6
 18918  0F27  085F               	movf	flashy_Main@data+1,w
 18919  0F28  0087               	movwf	7
 18920  0F29  315A               	addfsr 1,26
 18921  0F2A  3000               	movlw	0
 18922  0F2B  3FC0               	movwi [0]fsr1
 18923  0F2C  3FC1               	movwi [1]fsr1
 18924                           
 18925                           ;flashy_task.c: 457: data->noholdCount = 0;
 18926  0F2D  085E               	movf	flashy_Main@data,w
 18927  0F2E  0086               	movwf	6
 18928  0F2F  085F               	movf	flashy_Main@data+1,w
 18929  0F30  0087               	movwf	7
 18930  0F31  315C               	addfsr 1,28
 18931  0F32  3000               	movlw	0
 18932  0F33  3FC0               	movwi [0]fsr1
 18933  0F34  3FC1               	movwi [1]fsr1
 18934                           
 18935                           ;flashy_task.c: 458: }
 18936  0F35  2FC9               	goto	l8170
 18937  0F36                     l8140:	
 18938                           
 18939                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18940                           ; Switch size 1, requested type "space"
 18941                           ; Number of cases is 1, Range of values is 0 to 0
 18942                           ; switch strategies available:
 18943                           ; Name         Instructions Cycles
 18944                           ; simple_byte            4     3 (average)
 18945                           ; direct_byte            8     6 (fixed)
 18946                           ; jumptable            260     6 (fixed)
 18947                           ;	Chosen strategy is simple_byte
 18948  0F36  085D               	movf	flashy_Main@buttonPressed+1,w
 18949  0F37  3A00               	xorlw	0	; case 0
 18950  0F38  1903               	skipnz
 18951  0F39  2F3B               	goto	l8996
 18952  0F3A  2EE5               	goto	l8138
 18953  0F3B                     l8996:	
 18954                           
 18955                           ; Switch size 1, requested type "space"
 18956                           ; Number of cases is 9, Range of values is 0 to 12
 18957                           ; switch strategies available:
 18958                           ; Name         Instructions Cycles
 18959                           ; simple_byte           28    15 (average)
 18960                           ; direct_byte           32     6 (fixed)
 18961                           ; jumptable            260     6 (fixed)
 18962                           ;	Chosen strategy is simple_byte
 18963  0F3B  085C               	movf	flashy_Main@buttonPressed,w
 18964  0F3C  3A00               	xorlw	0	; case 0
 18965  0F3D  1903               	skipnz
 18966  0F3E  2E92               	goto	l8134
 18967  0F3F  3A01               	xorlw	1	; case 1
 18968  0F40  1903               	skipnz
 18969  0F41  2DD0               	goto	l8086
 18970  0F42  3A03               	xorlw	3	; case 2
 18971  0F43  1903               	skipnz
 18972  0F44  2D4E               	goto	l8056
 18973  0F45  3A07               	xorlw	7	; case 5
 18974  0F46  1903               	skipnz
 18975  0F47  2B4C               	goto	l7932
 18976  0F48  3A03               	xorlw	3	; case 6
 18977  0F49  1903               	skipnz
 18978  0F4A  2C30               	goto	l7988
 18979  0F4B  3A0E               	xorlw	14	; case 8
 18980  0F4C  1903               	skipnz
 18981  0F4D  2CA5               	goto	l8018
 18982  0F4E  3A01               	xorlw	1	; case 9
 18983  0F4F  1903               	skipnz
 18984  0F50  2ADF               	goto	l7906
 18985  0F51  3A03               	xorlw	3	; case 10
 18986  0F52  1903               	skipnz
 18987  0F53  2BBB               	goto	l7958
 18988  0F54  3A06               	xorlw	6	; case 12
 18989  0F55  1903               	skipnz
 18990  0F56  2A7D               	goto	l7882
 18991  0F57  2EE5               	goto	l8138
 18992                           
 18993                           ;flashy_task.c: 461: switch (data->blaster_state) {
 18994  0F58  2FC9               	goto	l8170
 18995  0F59                     l8142:	
 18996                           ;flashy_task.c: 462: case FLASHY_BLASTER_SHOOTING_STATE:
 18997                           
 18998                           
 18999                           ;flashy_task.c: 464: if (data->blasterTickCount == 100) {
 19000  0F59  085E               	movf	flashy_Main@data,w
 19001  0F5A  0086               	movwf	6
 19002  0F5B  085F               	movf	flashy_Main@data+1,w
 19003  0F5C  0087               	movwf	7
 19004  0F5D  3147               	addfsr 1,7
 19005  0F5E  0016               	moviw fsr1++
 19006  0F5F  3A64               	xorlw	100
 19007  0F60  00D4               	movwf	??_flashy_Main
 19008  0F61  0016               	moviw fsr1++
 19009  0F62  04D4               	iorwf	??_flashy_Main,f
 19010  0F63  1D03               	btfss	3,2
 19011  0F64  2F70               	goto	l8148
 19012                           
 19013                           ;flashy_task.c: 465: nullifyBadge_irTxRegister(data->badge);
 19014  0F65  085E               	movf	flashy_Main@data,w
 19015  0F66  0086               	movwf	6
 19016  0F67  085F               	movf	flashy_Main@data+1,w
 19017  0F68  0087               	movwf	7
 19018  0F69  0801               	movf	1,w
 19019  0F6A  31AE  26D9  3188   	fcall	_nullifyBadge_irTxRegister
 19020                           
 19021                           ;flashy_task.c: 466: nullifyBadge_irTxSet();
 19022  0F6D  31AD  25EB  3188   	fcall	_nullifyBadge_irTxSet
 19023  0F70                     l8148:	
 19024                           
 19025                           ;flashy_task.c: 467: }
 19026                           ;flashy_task.c: 468: if (data->blasterTickCount == 100 - 1 ){
 19027  0F70  0020               	movlb	0	; select bank0
 19028  0F71  085E               	movf	flashy_Main@data,w
 19029  0F72  0086               	movwf	6
 19030  0F73  085F               	movf	flashy_Main@data+1,w
 19031  0F74  0087               	movwf	7
 19032  0F75  3147               	addfsr 1,7
 19033  0F76  0016               	moviw fsr1++
 19034  0F77  3A63               	xorlw	99
 19035  0F78  00D4               	movwf	??_flashy_Main
 19036  0F79  0016               	moviw fsr1++
 19037  0F7A  04D4               	iorwf	??_flashy_Main,f
 19038  0F7B  1D03               	btfss	3,2
 19039  0F7C  2F89               	goto	l8154
 19040                           
 19041                           ;flashy_task.c: 469: nullifyBadge_irTxClr();
 19042  0F7D  31AD  25E8  3188   	fcall	_nullifyBadge_irTxClr
 19043                           
 19044                           ;flashy_task.c: 470: nullifyBadge_irTxRelease(data->badge);
 19045  0F80  0020               	movlb	0	; select bank0
 19046  0F81  085E               	movf	flashy_Main@data,w
 19047  0F82  0086               	movwf	6
 19048  0F83  085F               	movf	flashy_Main@data+1,w
 19049  0F84  0087               	movwf	7
 19050  0F85  0801               	movf	1,w
 19051  0F86  31AE  2681  3188   	fcall	_nullifyBadge_irTxRelease
 19052  0F89                     l8154:	
 19053                           
 19054                           ;flashy_task.c: 471: }
 19055                           ;flashy_task.c: 472: if (data->blasterTickCount == 0){
 19056  0F89  0020               	movlb	0	; select bank0
 19057  0F8A  085E               	movf	flashy_Main@data,w
 19058  0F8B  0086               	movwf	6
 19059  0F8C  085F               	movf	flashy_Main@data+1,w
 19060  0F8D  0087               	movwf	7
 19061  0F8E  3147               	addfsr 1,7
 19062  0F8F  0016               	moviw fsr1++
 19063  0F90  0401               	iorwf	1,w
 19064  0F91  1D03               	btfss	3,2
 19065  0F92  2FBD               	goto	l8166
 19066                           
 19067                           ;flashy_task.c: 473: data->displayTickCount = 0;
 19068  0F93  085E               	movf	flashy_Main@data,w
 19069  0F94  0086               	movwf	6
 19070  0F95  085F               	movf	flashy_Main@data+1,w
 19071  0F96  0087               	movwf	7
 19072  0F97  3144               	addfsr 1,4
 19073  0F98  3000               	movlw	0
 19074  0F99  3FC0               	movwi [0]fsr1
 19075  0F9A  3FC1               	movwi [1]fsr1
 19076                           
 19077                           ;flashy_task.c: 474: data->delayTickCount = 5;
 19078  0F9B  085E               	movf	flashy_Main@data,w
 19079  0F9C  0086               	movwf	6
 19080  0F9D  085F               	movf	flashy_Main@data+1,w
 19081  0F9E  0087               	movwf	7
 19082  0F9F  3141               	addfsr 1,1
 19083  0FA0  3005               	movlw	5
 19084  0FA1  3FC0               	movwi [0]fsr1
 19085  0FA2  3000               	movlw	0
 19086  0FA3  3FC1               	movwi [1]fsr1
 19087                           
 19088                           ;flashy_task.c: 476: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 19089  0FA4  085E               	movf	flashy_Main@data,w
 19090  0FA5  0086               	movwf	6
 19091  0FA6  085F               	movf	flashy_Main@data+1,w
 19092  0FA7  0087               	movwf	7
 19093  0FA8  3143               	addfsr 1,3
 19094  0FA9  0181               	clrf	1
 19095                           
 19096                           ;flashy_task.c: 477: data->display_state = FLASHY_STATE_DISPLAY;
 19097  0FAA  085E               	movf	flashy_Main@data,w
 19098  0FAB  0086               	movwf	6
 19099  0FAC  085F               	movf	flashy_Main@data+1,w
 19100  0FAD  0087               	movwf	7
 19101  0FAE  3146               	addfsr 1,6
 19102  0FAF  0181               	clrf	1
 19103                           
 19104                           ;flashy_task.c: 478: data->blaster_state = FLASHY_BLASTER_IDLE_STATE;
 19105  0FB0  085E               	movf	flashy_Main@data,w
 19106  0FB1  3E09               	addlw	9
 19107  0FB2  00D4               	movwf	??_flashy_Main
 19108  0FB3  3000               	movlw	0
 19109  0FB4  3D5F               	addwfc	flashy_Main@data+1,w
 19110  0FB5  00D5               	movwf	??_flashy_Main+1
 19111  0FB6  0854               	movf	??_flashy_Main,w
 19112  0FB7  0086               	movwf	6
 19113  0FB8  0855               	movf	??_flashy_Main+1,w
 19114  0FB9  0087               	movwf	7
 19115  0FBA  3001               	movlw	1
 19116  0FBB  0081               	movwf	1
 19117                           
 19118                           ;flashy_task.c: 479: }
 19119  0FBC  2FD6               	goto	l8172
 19120  0FBD                     l8166:	
 19121                           
 19122                           ;flashy_task.c: 480: else {
 19123                           ;flashy_task.c: 481: data->blasterTickCount -= 1;
 19124  0FBD  085E               	movf	flashy_Main@data,w
 19125  0FBE  0086               	movwf	6
 19126  0FBF  085F               	movf	flashy_Main@data+1,w
 19127  0FC0  0087               	movwf	7
 19128  0FC1  3147               	addfsr 1,7
 19129  0FC2  3001               	movlw	1
 19130  0FC3  0281               	subwf	1,f
 19131  0FC4  3141               	addfsr 1,1
 19132  0FC5  3000               	movlw	0
 19133  0FC6  3B81               	subwfb	1,f
 19134  0FC7  317F               	addfsr 1,-1
 19135                           
 19136                           ;flashy_task.c: 486: }
 19137                           
 19138                           ;flashy_task.c: 485: break;
 19139                           
 19140                           ;flashy_task.c: 484: case FLASHY_BLASTER_IDLE_STATE:
 19141                           
 19142                           ;flashy_task.c: 482: }
 19143                           ;flashy_task.c: 483: break;
 19144  0FC8  2FD6               	goto	l8172
 19145  0FC9                     l8170:	
 19146  0FC9  085E               	movf	flashy_Main@data,w
 19147  0FCA  0086               	movwf	6
 19148  0FCB  085F               	movf	flashy_Main@data+1,w
 19149  0FCC  0087               	movwf	7
 19150  0FCD  3149               	addfsr 1,9
 19151  0FCE  0801               	movf	1,w
 19152                           
 19153                           ; Switch size 1, requested type "space"
 19154                           ; Number of cases is 2, Range of values is 0 to 1
 19155                           ; switch strategies available:
 19156                           ; Name         Instructions Cycles
 19157                           ; simple_byte            7     4 (average)
 19158                           ; direct_byte           10     6 (fixed)
 19159                           ; jumptable            260     6 (fixed)
 19160                           ;	Chosen strategy is simple_byte
 19161  0FCF  3A00               	xorlw	0	; case 0
 19162  0FD0  1903               	skipnz
 19163  0FD1  2F59               	goto	l8142
 19164  0FD2  3A01               	xorlw	1	; case 1
 19165  0FD3  1903               	skipnz
 19166  0FD4  2FD6               	goto	l8172
 19167  0FD5  2FD6               	goto	l8172
 19168  0FD6                     l8172:	
 19169                           
 19170                           ;flashy_task.c: 489: if (nullifyBadge_irGet() && (data->blaster_state != FLASHY_BLASTER_
      +                          SHOOTING_STATE)) {
 19171  0FD6  31AD  25F2  3188   	fcall	_nullifyBadge_irGet
 19172  0FD9  3A00               	xorlw	0
 19173  0FDA  1903               	skipnz
 19174  0FDB  0008               	return
 19175  0FDC  0020               	movlb	0	; select bank0
 19176  0FDD  085E               	movf	flashy_Main@data,w
 19177  0FDE  0086               	movwf	6
 19178  0FDF  085F               	movf	flashy_Main@data+1,w
 19179  0FE0  0087               	movwf	7
 19180  0FE1  3149               	addfsr 1,9
 19181  0FE2  0801               	movf	1,w
 19182  0FE3  1903               	btfsc	3,2
 19183  0FE4  0008               	return
 19184                           
 19185                           ;flashy_task.c: 490: data->displayTickCount = 0;
 19186  0FE5  085E               	movf	flashy_Main@data,w
 19187  0FE6  0086               	movwf	6
 19188  0FE7  085F               	movf	flashy_Main@data+1,w
 19189  0FE8  0087               	movwf	7
 19190  0FE9  3144               	addfsr 1,4
 19191  0FEA  3000               	movlw	0
 19192  0FEB  3FC0               	movwi [0]fsr1
 19193  0FEC  3FC1               	movwi [1]fsr1
 19194                           
 19195                           ;flashy_task.c: 491: deaths += 1;
 19196  0FED  3001               	movlw	1
 19197  0FEE  0021               	movlb	1	; select bank1
 19198  0FEF  07A8               	addwf	_deaths^(0+128),f
 19199  0FF0  3000               	movlw	0
 19200  0FF1  3DA9               	addwfc	(_deaths+1)^(0+128),f
 19201                           
 19202                           ;flashy_task.c: 492: data->display_state = FLASHY_STATE_DISPLAY_SHOT;
 19203  0FF2  0020               	movlb	0	; select bank0
 19204  0FF3  085E               	movf	flashy_Main@data,w
 19205  0FF4  3E06               	addlw	6
 19206  0FF5  00D4               	movwf	??_flashy_Main
 19207  0FF6  3000               	movlw	0
 19208  0FF7  3D5F               	addwfc	flashy_Main@data+1,w
 19209  0FF8  00D5               	movwf	??_flashy_Main+1
 19210  0FF9  0854               	movf	??_flashy_Main,w
 19211  0FFA  0086               	movwf	6
 19212  0FFB  0855               	movf	??_flashy_Main+1,w
 19213  0FFC  0087               	movwf	7
 19214  0FFD  3003               	movlw	3
 19215  0FFE  0081               	movwf	1
 19216  0FFF  0008               	return
 19217  1000                     __end_of_flashy_Main:	
 19218                           
 19219                           	psect	swtext1
 19220  28EC                     __pswtext1:	
 19221  28EC                     S8994:	
 19222  28EC  3188  28D5         	ljmp	l7780
 19223  28EE  3188  28FA         	ljmp	l7790
 19224  28F0  3189  291E         	ljmp	l7800
 19225  28F2  3189  2936         	ljmp	l7808
 19226  28F4  3189  296D         	ljmp	l7826
 19227  28F6  3189  2992         	ljmp	l7836
 19228                           
 19229                           	psect	text17
 19230  00D7                     __ptext17:	
 19231 ;; *************** function _slot_Main *****************
 19232 ;; Defined at:
 19233 ;;		line 96 in file "slot_task.c"
 19234 ;; Parameters:    Size  Location     Type
 19235 ;;  taskData        2   50[BANK0 ] PTR void 
 19236 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 19237 ;;		 -> flashy_TaskData(30), NULL(0), 
 19238 ;; Auto vars:     Size  Location     Type
 19239 ;;  data            2   69[BANK0 ] PTR struct t_slot_taskDa
 19240 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 19241 ;;		 -> flashy_TaskData(30), NULL(0), 
 19242 ;;  buttonPresse    1   68[BANK0 ] unsigned char 
 19243 ;; Return value:  Size  Location     Type
 19244 ;;                  1    wreg      void 
 19245 ;; Registers used:
 19246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19247 ;; Tracked objects:
 19248 ;;		On entry : 0/0
 19249 ;;		On exit  : 0/0
 19250 ;;		Unchanged: 0/0
 19251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19252 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19253 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19254 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19255 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19256 ;;Total ram usage:       21 bytes
 19257 ;; Hardware stack levels used:    1
 19258 ;; Hardware stack levels required when called:   11
 19259 ;; This function calls:
 19260 ;;		___lwmod
 19261 ;;		_marquee
 19262 ;;		_marquee_speedy
 19263 ;;		_memset
 19264 ;;		_nullifyBadge_buttonsGet
 19265 ;;		_rand
 19266 ;;		_slot_Finished_Animation
 19267 ;;		_slot_Running_Animation
 19268 ;;		_slot_Setup
 19269 ;;		_sprintf
 19270 ;;		_strlen
 19271 ;; This function is called by:
 19272 ;;		_main
 19273 ;;		_scheduler_TaskRun
 19274 ;; This function uses a non-reentrant model
 19275 ;;
 19276                           
 19277                           
 19278                           ;psect for function _slot_Main
 19279  00D7                     _slot_Main:	
 19280                           
 19281                           ;slot_task.c: 97: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 19282                           
 19283                           ;incstack = 0
 19284                           ; Regs used in _slot_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19285  00D7  0020               	movlb	0	; select bank0
 19286  00D8  0853               	movf	slot_Main@taskData+1,w
 19287  00D9  00E6               	movwf	slot_Main@data+1
 19288  00DA  0852               	movf	slot_Main@taskData,w
 19289  00DB  00E5               	movwf	slot_Main@data
 19290                           
 19291                           ;slot_task.c: 98: u8 buttonPressed;
 19292                           ;slot_task.c: 101: if ( currentTask != SLOT_TASK ){
 19293  00DC  0021               	movlb	1	; select bank1
 19294  00DD  0338               	decf	_currentTask^(0+128),w
 19295  00DE  0439               	iorwf	(_currentTask+1)^(0+128),w
 19296  00DF  1903               	btfsc	3,2
 19297  00E0  2910               	goto	l8388
 19298                           
 19299                           ;slot_task.c: 102: buttonPressed = nullifyBadge_buttonsGet();
 19300  00E1  31A2  2250  3180   	fcall	_nullifyBadge_buttonsGet
 19301  00E4  0020               	movlb	0	; select bank0
 19302  00E5  00D4               	movwf	??_slot_Main
 19303  00E6  0854               	movf	??_slot_Main,w
 19304  00E7  00E4               	movwf	slot_Main@buttonPressed
 19305                           
 19306                           ;slot_task.c: 106: data->holdCountA = 1;
 19307                           
 19308                           ;slot_task.c: 104: default:
 19309                           
 19310                           ;slot_task.c: 103: switch (buttonPressed) {
 19311  00E8  0865               	movf	slot_Main@data,w
 19312  00E9  0086               	movwf	6
 19313  00EA  0866               	movf	slot_Main@data+1,w
 19314  00EB  0087               	movwf	7
 19315  00EC  315F               	addfsr 1,31
 19316  00ED  3001               	movlw	1
 19317  00EE  3FC0               	movwi [0]fsr1
 19318  00EF  3000               	movlw	0
 19319  00F0  3FC1               	movwi [1]fsr1
 19320                           
 19321                           ;slot_task.c: 107: data->holdCountB = 1;
 19322  00F1  0865               	movf	slot_Main@data,w
 19323  00F2  3E21               	addlw	33
 19324  00F3  0086               	movwf	6
 19325  00F4  3000               	movlw	0
 19326  00F5  3D66               	addwfc	slot_Main@data+1,w
 19327  00F6  0087               	movwf	7
 19328  00F7  3001               	movlw	1
 19329  00F8  3FC0               	movwi [0]fsr1
 19330  00F9  3000               	movlw	0
 19331  00FA  3FC1               	movwi [1]fsr1
 19332                           
 19333                           ;slot_task.c: 108: data->holdCountX = 1;
 19334  00FB  0865               	movf	slot_Main@data,w
 19335  00FC  3E23               	addlw	35
 19336  00FD  0086               	movwf	6
 19337  00FE  3000               	movlw	0
 19338  00FF  3D66               	addwfc	slot_Main@data+1,w
 19339  0100  0087               	movwf	7
 19340  0101  3001               	movlw	1
 19341  0102  3FC0               	movwi [0]fsr1
 19342  0103  3000               	movlw	0
 19343  0104  3FC1               	movwi [1]fsr1
 19344                           
 19345                           ;slot_task.c: 109: data->holdCountY = 1;
 19346  0105  0865               	movf	slot_Main@data,w
 19347  0106  3E25               	addlw	37
 19348  0107  0086               	movwf	6
 19349  0108  3000               	movlw	0
 19350  0109  3D66               	addwfc	slot_Main@data+1,w
 19351  010A  0087               	movwf	7
 19352  010B  3001               	movlw	1
 19353  010C  3FC0               	movwi [0]fsr1
 19354  010D  3000               	movlw	0
 19355  010E  3FC1               	movwi [1]fsr1
 19356                           
 19357                           ;slot_task.c: 111: }
 19358                           
 19359                           ;slot_task.c: 110: break;
 19360  010F  0008               	return
 19361  0110                     l8388:	
 19362                           ;slot_task.c: 112: return;
 19363                           
 19364                           
 19365                           ;slot_task.c: 113: }
 19366                           ;slot_task.c: 115: buttonPressed = nullifyBadge_buttonsGet();
 19367  0110  31A2  2250  3180   	fcall	_nullifyBadge_buttonsGet
 19368  0113  0020               	movlb	0	; select bank0
 19369  0114  00D4               	movwf	??_slot_Main
 19370  0115  0854               	movf	??_slot_Main,w
 19371  0116  00E4               	movwf	slot_Main@buttonPressed
 19372                           
 19373                           ;slot_task.c: 119: memset(data->slot_print_buf, 0x00, 20);
 19374                           
 19375                           ;slot_task.c: 117: default:
 19376                           
 19377                           ;slot_task.c: 116: switch (buttonPressed) {
 19378  0117  0865               	movf	slot_Main@data,w
 19379  0118  3E0B               	addlw	11
 19380  0119  00F1               	movwf	memset@p1
 19381  011A  3000               	movlw	0
 19382  011B  3D66               	addwfc	slot_Main@data+1,w
 19383  011C  00F2               	movwf	memset@p1+1
 19384  011D  3000               	movlw	0
 19385  011E  00F3               	movwf	memset@c
 19386  011F  00F4               	movwf	memset@c+1
 19387  0120  3014               	movlw	20
 19388  0121  00F5               	movwf	memset@n
 19389  0122  3000               	movlw	0
 19390  0123  00F6               	movwf	memset@n+1
 19391  0124  31AF  27CF  3180   	fcall	_memset
 19392                           
 19393                           ;slot_task.c: 122: if (data->displayTickCount < 100) {
 19394  0127  0020               	movlb	0	; select bank0
 19395  0128  0865               	movf	slot_Main@data,w
 19396  0129  0086               	movwf	6
 19397  012A  0866               	movf	slot_Main@data+1,w
 19398  012B  0087               	movwf	7
 19399  012C  3143               	addfsr 1,3
 19400  012D  3F40               	moviw [0]fsr1
 19401  012E  00D4               	movwf	??_slot_Main
 19402  012F  3F41               	moviw [1]fsr1
 19403  0130  00D5               	movwf	??_slot_Main+1
 19404  0131  3000               	movlw	0
 19405  0132  0255               	subwf	??_slot_Main+1,w
 19406  0133  3064               	movlw	100
 19407  0134  1903               	skipnz
 19408  0135  0254               	subwf	??_slot_Main,w
 19409  0136  1803               	skipnc
 19410  0137  2A43               	goto	l8408
 19411                           
 19412                           ;slot_task.c: 123: slot_Running_Animation(data);
 19413  0138  0866               	movf	slot_Main@data+1,w
 19414  0139  00B3               	movwf	slot_Running_Animation@taskData+1
 19415  013A  0865               	movf	slot_Main@data,w
 19416  013B  00B2               	movwf	slot_Running_Animation@taskData
 19417  013C  31A5  2544  3180   	fcall	_slot_Running_Animation
 19418                           
 19419                           ;slot_task.c: 124: data->slot_wheel_index[0] = (u8)rand() % strlen(Slot_Wheel);
 19420  013F  30B2               	movlw	low _Slot_Wheel
 19421  0140  00F1               	movwf	strlen@s
 19422  0141  3002               	movlw	high _Slot_Wheel
 19423  0142  00F2               	movwf	strlen@s+1
 19424  0143  31A0  20D3  3180   	fcall	_strlen
 19425  0146  0872               	movf	?_strlen+1,w
 19426  0147  0020               	movlb	0	; select bank0
 19427  0148  00AC               	movwf	___lwmod@divisor+1
 19428  0149  0871               	movf	?_strlen,w
 19429  014A  00AB               	movwf	___lwmod@divisor
 19430  014B  31A5  2501  3180   	fcall	_rand
 19431  014E  0020               	movlb	0	; select bank0
 19432  014F  0824               	movf	?_rand,w
 19433  0150  00D4               	movwf	??_slot_Main
 19434  0151  01D5               	clrf	??_slot_Main+1
 19435  0152  0854               	movf	??_slot_Main,w
 19436  0153  00AD               	movwf	___lwmod@dividend
 19437  0154  0855               	movf	??_slot_Main+1,w
 19438  0155  00AE               	movwf	___lwmod@dividend+1
 19439  0156  31A1  21F4  3180   	fcall	___lwmod
 19440  0159  0020               	movlb	0	; select bank0
 19441  015A  082B               	movf	?___lwmod,w
 19442  015B  00D6               	movwf	??_slot_Main+2
 19443  015C  0865               	movf	slot_Main@data,w
 19444  015D  3E07               	addlw	7
 19445  015E  00D7               	movwf	??_slot_Main+3
 19446  015F  3000               	movlw	0
 19447  0160  3D66               	addwfc	slot_Main@data+1,w
 19448  0161  00D8               	movwf	??_slot_Main+4
 19449  0162  0857               	movf	??_slot_Main+3,w
 19450  0163  0086               	movwf	6
 19451  0164  0858               	movf	??_slot_Main+4,w
 19452  0165  0087               	movwf	7
 19453  0166  0856               	movf	??_slot_Main+2,w
 19454  0167  0081               	movwf	1
 19455                           
 19456                           ;slot_task.c: 125: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 19457  0168  30B2               	movlw	low _Slot_Wheel
 19458  0169  00F1               	movwf	strlen@s
 19459  016A  3002               	movlw	high _Slot_Wheel
 19460  016B  00F2               	movwf	strlen@s+1
 19461  016C  31A0  20D3  3180   	fcall	_strlen
 19462  016F  0872               	movf	?_strlen+1,w
 19463  0170  0020               	movlb	0	; select bank0
 19464  0171  00AC               	movwf	___lwmod@divisor+1
 19465  0172  0871               	movf	?_strlen,w
 19466  0173  00AB               	movwf	___lwmod@divisor
 19467  0174  31A5  2501  3180   	fcall	_rand
 19468  0177  0020               	movlb	0	; select bank0
 19469  0178  0824               	movf	?_rand,w
 19470  0179  00D4               	movwf	??_slot_Main
 19471  017A  01D5               	clrf	??_slot_Main+1
 19472  017B  0854               	movf	??_slot_Main,w
 19473  017C  00AD               	movwf	___lwmod@dividend
 19474  017D  0855               	movf	??_slot_Main+1,w
 19475  017E  00AE               	movwf	___lwmod@dividend+1
 19476  017F  31A1  21F4  3180   	fcall	___lwmod
 19477  0182  0020               	movlb	0	; select bank0
 19478  0183  082B               	movf	?___lwmod,w
 19479  0184  00D6               	movwf	??_slot_Main+2
 19480  0185  0865               	movf	slot_Main@data,w
 19481  0186  3E08               	addlw	8
 19482  0187  00D7               	movwf	??_slot_Main+3
 19483  0188  3000               	movlw	0
 19484  0189  3D66               	addwfc	slot_Main@data+1,w
 19485  018A  00D8               	movwf	??_slot_Main+4
 19486  018B  0857               	movf	??_slot_Main+3,w
 19487  018C  0086               	movwf	6
 19488  018D  0858               	movf	??_slot_Main+4,w
 19489  018E  0087               	movwf	7
 19490  018F  0856               	movf	??_slot_Main+2,w
 19491  0190  0081               	movwf	1
 19492                           
 19493                           ;slot_task.c: 126: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 19494  0191  30B2               	movlw	low _Slot_Wheel
 19495  0192  00F1               	movwf	strlen@s
 19496  0193  3002               	movlw	high _Slot_Wheel
 19497  0194  00F2               	movwf	strlen@s+1
 19498  0195  31A0  20D3  3180   	fcall	_strlen
 19499  0198  0872               	movf	?_strlen+1,w
 19500  0199  0020               	movlb	0	; select bank0
 19501  019A  00AC               	movwf	___lwmod@divisor+1
 19502  019B  0871               	movf	?_strlen,w
 19503  019C  00AB               	movwf	___lwmod@divisor
 19504  019D  31A5  2501  3180   	fcall	_rand
 19505  01A0  0020               	movlb	0	; select bank0
 19506  01A1  0824               	movf	?_rand,w
 19507  01A2  00D4               	movwf	??_slot_Main
 19508  01A3  01D5               	clrf	??_slot_Main+1
 19509  01A4  0854               	movf	??_slot_Main,w
 19510  01A5  00AD               	movwf	___lwmod@dividend
 19511  01A6  0855               	movf	??_slot_Main+1,w
 19512  01A7  00AE               	movwf	___lwmod@dividend+1
 19513  01A8  31A1  21F4  3180   	fcall	___lwmod
 19514  01AB  0020               	movlb	0	; select bank0
 19515  01AC  082B               	movf	?___lwmod,w
 19516  01AD  00D6               	movwf	??_slot_Main+2
 19517  01AE  0865               	movf	slot_Main@data,w
 19518  01AF  3E09               	addlw	9
 19519  01B0  00D7               	movwf	??_slot_Main+3
 19520  01B1  3000               	movlw	0
 19521  01B2  3D66               	addwfc	slot_Main@data+1,w
 19522  01B3  00D8               	movwf	??_slot_Main+4
 19523  01B4  0857               	movf	??_slot_Main+3,w
 19524  01B5  0086               	movwf	6
 19525  01B6  0858               	movf	??_slot_Main+4,w
 19526  01B7  0087               	movwf	7
 19527  01B8  0856               	movf	??_slot_Main+2,w
 19528  01B9  0081               	movwf	1
 19529                           
 19530                           ;slot_task.c: 127: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 19531  01BA  30B2               	movlw	low _Slot_Wheel
 19532  01BB  00F1               	movwf	strlen@s
 19533  01BC  3002               	movlw	high _Slot_Wheel
 19534  01BD  00F2               	movwf	strlen@s+1
 19535  01BE  31A0  20D3  3180   	fcall	_strlen
 19536  01C1  0872               	movf	?_strlen+1,w
 19537  01C2  0020               	movlb	0	; select bank0
 19538  01C3  00AC               	movwf	___lwmod@divisor+1
 19539  01C4  0871               	movf	?_strlen,w
 19540  01C5  00AB               	movwf	___lwmod@divisor
 19541  01C6  31A5  2501  3180   	fcall	_rand
 19542  01C9  0020               	movlb	0	; select bank0
 19543  01CA  0824               	movf	?_rand,w
 19544  01CB  00D4               	movwf	??_slot_Main
 19545  01CC  01D5               	clrf	??_slot_Main+1
 19546  01CD  0854               	movf	??_slot_Main,w
 19547  01CE  00AD               	movwf	___lwmod@dividend
 19548  01CF  0855               	movf	??_slot_Main+1,w
 19549  01D0  00AE               	movwf	___lwmod@dividend+1
 19550  01D1  31A1  21F4  3180   	fcall	___lwmod
 19551  01D4  0020               	movlb	0	; select bank0
 19552  01D5  082B               	movf	?___lwmod,w
 19553  01D6  00D6               	movwf	??_slot_Main+2
 19554  01D7  0865               	movf	slot_Main@data,w
 19555  01D8  3E0A               	addlw	10
 19556  01D9  00D7               	movwf	??_slot_Main+3
 19557  01DA  3000               	movlw	0
 19558  01DB  3D66               	addwfc	slot_Main@data+1,w
 19559  01DC  00D8               	movwf	??_slot_Main+4
 19560  01DD  0857               	movf	??_slot_Main+3,w
 19561  01DE  0086               	movwf	6
 19562  01DF  0858               	movf	??_slot_Main+4,w
 19563  01E0  0087               	movwf	7
 19564  01E1  0856               	movf	??_slot_Main+2,w
 19565  01E2  0081               	movwf	1
 19566                           
 19567                           ;slot_task.c: 128: sprintf(data->slot_print_buf, "%c%c%c%c", Slot_Wheel[data->slot_wheel
      +                          _index[0]], Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]]
      +                          , Slot_Wheel[data->slot_wheel_index[3]]);
 19568  01E3  0865               	movf	slot_Main@data,w
 19569  01E4  3E0B               	addlw	11
 19570  01E5  00AF               	movwf	sprintf@sp
 19571  01E6  3000               	movlw	0
 19572  01E7  3D66               	addwfc	slot_Main@data+1,w
 19573  01E8  00B0               	movwf	sprintf@sp+1
 19574  01E9  30A8               	movlw	low (STR_48| (0+32768))
 19575  01EA  00B1               	movwf	sprintf@f
 19576  01EB  30B0               	movlw	high (STR_48| (0+32768))
 19577  01EC  00B2               	movwf	sprintf@f+1
 19578  01ED  0865               	movf	slot_Main@data,w
 19579  01EE  0086               	movwf	6
 19580  01EF  0866               	movf	slot_Main@data+1,w
 19581  01F0  0087               	movwf	7
 19582  01F1  3147               	addfsr 1,7
 19583  01F2  0801               	movf	1,w
 19584  01F3  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19585  01F4  0086               	movwf	6
 19586  01F5  3002               	movlw	2	; select bank5/6
 19587  01F6  0087               	movwf	7
 19588  01F7  0801               	movf	1,w
 19589  01F8  00D4               	movwf	??_slot_Main
 19590  01F9  01D5               	clrf	??_slot_Main+1
 19591  01FA  0854               	movf	??_slot_Main,w
 19592  01FB  00B3               	movwf	?_sprintf+4
 19593  01FC  0855               	movf	??_slot_Main+1,w
 19594  01FD  00B4               	movwf	?_sprintf+5
 19595  01FE  0865               	movf	slot_Main@data,w
 19596  01FF  0086               	movwf	6
 19597  0200  0866               	movf	slot_Main@data+1,w
 19598  0201  0087               	movwf	7
 19599  0202  3148               	addfsr 1,8
 19600  0203  0801               	movf	1,w
 19601  0204  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19602  0205  0086               	movwf	6
 19603  0206  3002               	movlw	2	; select bank5/6
 19604  0207  0087               	movwf	7
 19605  0208  0801               	movf	1,w
 19606  0209  00D6               	movwf	??_slot_Main+2
 19607  020A  01D7               	clrf	??_slot_Main+3
 19608  020B  0856               	movf	??_slot_Main+2,w
 19609  020C  00B5               	movwf	?_sprintf+6
 19610  020D  0857               	movf	??_slot_Main+3,w
 19611  020E  00B6               	movwf	?_sprintf+7
 19612  020F  0865               	movf	slot_Main@data,w
 19613  0210  0086               	movwf	6
 19614  0211  0866               	movf	slot_Main@data+1,w
 19615  0212  0087               	movwf	7
 19616  0213  3149               	addfsr 1,9
 19617  0214  0801               	movf	1,w
 19618  0215  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19619  0216  0086               	movwf	6
 19620  0217  3002               	movlw	2	; select bank5/6
 19621  0218  0087               	movwf	7
 19622  0219  0801               	movf	1,w
 19623  021A  00D8               	movwf	??_slot_Main+4
 19624  021B  01D9               	clrf	??_slot_Main+5
 19625  021C  0858               	movf	??_slot_Main+4,w
 19626  021D  00B7               	movwf	?_sprintf+8
 19627  021E  0859               	movf	??_slot_Main+5,w
 19628  021F  00B8               	movwf	?_sprintf+9
 19629  0220  0865               	movf	slot_Main@data,w
 19630  0221  0086               	movwf	6
 19631  0222  0866               	movf	slot_Main@data+1,w
 19632  0223  0087               	movwf	7
 19633  0224  314A               	addfsr 1,10
 19634  0225  0801               	movf	1,w
 19635  0226  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19636  0227  0086               	movwf	6
 19637  0228  3002               	movlw	2	; select bank5/6
 19638  0229  0087               	movwf	7
 19639  022A  0801               	movf	1,w
 19640  022B  00DA               	movwf	??_slot_Main+6
 19641  022C  01DB               	clrf	??_slot_Main+7
 19642  022D  085A               	movf	??_slot_Main+6,w
 19643  022E  00B9               	movwf	?_sprintf+10
 19644  022F  085B               	movf	??_slot_Main+7,w
 19645  0230  00BA               	movwf	?_sprintf+11
 19646  0231  3192  225F  3180   	fcall	_sprintf
 19647                           
 19648                           ;slot_task.c: 129: marquee(data->slot_print_buf, 1);}
 19649  0234  0020               	movlb	0	; select bank0
 19650  0235  0865               	movf	slot_Main@data,w
 19651  0236  3E0B               	addlw	11
 19652  0237  00BA               	movwf	marquee@string
 19653  0238  3000               	movlw	0
 19654  0239  3D66               	addwfc	slot_Main@data+1,w
 19655  023A  00BB               	movwf	marquee@string+1
 19656  023B  3001               	movlw	1
 19657  023C  00BC               	movwf	marquee@count
 19658  023D  3000               	movlw	0
 19659  023E  00BD               	movwf	marquee@count+1
 19660  023F  319B  2338  3180   	fcall	_marquee
 19661  0242  2E0F               	goto	l8472
 19662  0243                     l8408:	
 19663                           
 19664                           ;slot_task.c: 130: else if (data->displayTickCount < 200) {
 19665  0243  0020               	movlb	0	; select bank0
 19666  0244  0865               	movf	slot_Main@data,w
 19667  0245  0086               	movwf	6
 19668  0246  0866               	movf	slot_Main@data+1,w
 19669  0247  0087               	movwf	7
 19670  0248  3143               	addfsr 1,3
 19671  0249  3F40               	moviw [0]fsr1
 19672  024A  00D4               	movwf	??_slot_Main
 19673  024B  3F41               	moviw [1]fsr1
 19674  024C  00D5               	movwf	??_slot_Main+1
 19675  024D  3000               	movlw	0
 19676  024E  0255               	subwf	??_slot_Main+1,w
 19677  024F  30C8               	movlw	200
 19678  0250  1903               	skipnz
 19679  0251  0254               	subwf	??_slot_Main,w
 19680  0252  1803               	skipnc
 19681  0253  2B38               	goto	l8422
 19682                           
 19683                           ;slot_task.c: 131: slot_Running_Animation(data);
 19684  0254  0866               	movf	slot_Main@data+1,w
 19685  0255  00B3               	movwf	slot_Running_Animation@taskData+1
 19686  0256  0865               	movf	slot_Main@data,w
 19687  0257  00B2               	movwf	slot_Running_Animation@taskData
 19688  0258  31A5  2544  3180   	fcall	_slot_Running_Animation
 19689                           
 19690                           ;slot_task.c: 132: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 19691  025B  30B2               	movlw	low _Slot_Wheel
 19692  025C  00F1               	movwf	strlen@s
 19693  025D  3002               	movlw	high _Slot_Wheel
 19694  025E  00F2               	movwf	strlen@s+1
 19695  025F  31A0  20D3  3180   	fcall	_strlen
 19696  0262  0872               	movf	?_strlen+1,w
 19697  0263  0020               	movlb	0	; select bank0
 19698  0264  00AC               	movwf	___lwmod@divisor+1
 19699  0265  0871               	movf	?_strlen,w
 19700  0266  00AB               	movwf	___lwmod@divisor
 19701  0267  31A5  2501  3180   	fcall	_rand
 19702  026A  0020               	movlb	0	; select bank0
 19703  026B  0824               	movf	?_rand,w
 19704  026C  00D4               	movwf	??_slot_Main
 19705  026D  01D5               	clrf	??_slot_Main+1
 19706  026E  0854               	movf	??_slot_Main,w
 19707  026F  00AD               	movwf	___lwmod@dividend
 19708  0270  0855               	movf	??_slot_Main+1,w
 19709  0271  00AE               	movwf	___lwmod@dividend+1
 19710  0272  31A1  21F4  3180   	fcall	___lwmod
 19711  0275  0020               	movlb	0	; select bank0
 19712  0276  082B               	movf	?___lwmod,w
 19713  0277  00D6               	movwf	??_slot_Main+2
 19714  0278  0865               	movf	slot_Main@data,w
 19715  0279  3E08               	addlw	8
 19716  027A  00D7               	movwf	??_slot_Main+3
 19717  027B  3000               	movlw	0
 19718  027C  3D66               	addwfc	slot_Main@data+1,w
 19719  027D  00D8               	movwf	??_slot_Main+4
 19720  027E  0857               	movf	??_slot_Main+3,w
 19721  027F  0086               	movwf	6
 19722  0280  0858               	movf	??_slot_Main+4,w
 19723  0281  0087               	movwf	7
 19724  0282  0856               	movf	??_slot_Main+2,w
 19725  0283  0081               	movwf	1
 19726                           
 19727                           ;slot_task.c: 133: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 19728  0284  30B2               	movlw	low _Slot_Wheel
 19729  0285  00F1               	movwf	strlen@s
 19730  0286  3002               	movlw	high _Slot_Wheel
 19731  0287  00F2               	movwf	strlen@s+1
 19732  0288  31A0  20D3  3180   	fcall	_strlen
 19733  028B  0872               	movf	?_strlen+1,w
 19734  028C  0020               	movlb	0	; select bank0
 19735  028D  00AC               	movwf	___lwmod@divisor+1
 19736  028E  0871               	movf	?_strlen,w
 19737  028F  00AB               	movwf	___lwmod@divisor
 19738  0290  31A5  2501  3180   	fcall	_rand
 19739  0293  0020               	movlb	0	; select bank0
 19740  0294  0824               	movf	?_rand,w
 19741  0295  00D4               	movwf	??_slot_Main
 19742  0296  01D5               	clrf	??_slot_Main+1
 19743  0297  0854               	movf	??_slot_Main,w
 19744  0298  00AD               	movwf	___lwmod@dividend
 19745  0299  0855               	movf	??_slot_Main+1,w
 19746  029A  00AE               	movwf	___lwmod@dividend+1
 19747  029B  31A1  21F4  3180   	fcall	___lwmod
 19748  029E  0020               	movlb	0	; select bank0
 19749  029F  082B               	movf	?___lwmod,w
 19750  02A0  00D6               	movwf	??_slot_Main+2
 19751  02A1  0865               	movf	slot_Main@data,w
 19752  02A2  3E09               	addlw	9
 19753  02A3  00D7               	movwf	??_slot_Main+3
 19754  02A4  3000               	movlw	0
 19755  02A5  3D66               	addwfc	slot_Main@data+1,w
 19756  02A6  00D8               	movwf	??_slot_Main+4
 19757  02A7  0857               	movf	??_slot_Main+3,w
 19758  02A8  0086               	movwf	6
 19759  02A9  0858               	movf	??_slot_Main+4,w
 19760  02AA  0087               	movwf	7
 19761  02AB  0856               	movf	??_slot_Main+2,w
 19762  02AC  0081               	movwf	1
 19763                           
 19764                           ;slot_task.c: 134: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 19765  02AD  30B2               	movlw	low _Slot_Wheel
 19766  02AE  00F1               	movwf	strlen@s
 19767  02AF  3002               	movlw	high _Slot_Wheel
 19768  02B0  00F2               	movwf	strlen@s+1
 19769  02B1  31A0  20D3  3180   	fcall	_strlen
 19770  02B4  0872               	movf	?_strlen+1,w
 19771  02B5  0020               	movlb	0	; select bank0
 19772  02B6  00AC               	movwf	___lwmod@divisor+1
 19773  02B7  0871               	movf	?_strlen,w
 19774  02B8  00AB               	movwf	___lwmod@divisor
 19775  02B9  31A5  2501  3180   	fcall	_rand
 19776  02BC  0020               	movlb	0	; select bank0
 19777  02BD  0824               	movf	?_rand,w
 19778  02BE  00D4               	movwf	??_slot_Main
 19779  02BF  01D5               	clrf	??_slot_Main+1
 19780  02C0  0854               	movf	??_slot_Main,w
 19781  02C1  00AD               	movwf	___lwmod@dividend
 19782  02C2  0855               	movf	??_slot_Main+1,w
 19783  02C3  00AE               	movwf	___lwmod@dividend+1
 19784  02C4  31A1  21F4  3180   	fcall	___lwmod
 19785  02C7  0020               	movlb	0	; select bank0
 19786  02C8  082B               	movf	?___lwmod,w
 19787  02C9  00D6               	movwf	??_slot_Main+2
 19788  02CA  0865               	movf	slot_Main@data,w
 19789  02CB  3E0A               	addlw	10
 19790  02CC  00D7               	movwf	??_slot_Main+3
 19791  02CD  3000               	movlw	0
 19792  02CE  3D66               	addwfc	slot_Main@data+1,w
 19793  02CF  00D8               	movwf	??_slot_Main+4
 19794  02D0  0857               	movf	??_slot_Main+3,w
 19795  02D1  0086               	movwf	6
 19796  02D2  0858               	movf	??_slot_Main+4,w
 19797  02D3  0087               	movwf	7
 19798  02D4  0856               	movf	??_slot_Main+2,w
 19799  02D5  0081               	movwf	1
 19800                           
 19801                           ;slot_task.c: 135: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]], Slot_Whe
      +                          el[data->slot_wheel_index[3]]);
 19802  02D6  0865               	movf	slot_Main@data,w
 19803  02D7  3E0B               	addlw	11
 19804  02D8  00AF               	movwf	sprintf@sp
 19805  02D9  3000               	movlw	0
 19806  02DA  3D66               	addwfc	slot_Main@data+1,w
 19807  02DB  00B0               	movwf	sprintf@sp+1
 19808  02DC  30A8               	movlw	low (STR_48| (0+32768))
 19809  02DD  00B1               	movwf	sprintf@f
 19810  02DE  30B0               	movlw	high (STR_48| (0+32768))
 19811  02DF  00B2               	movwf	sprintf@f+1
 19812  02E0  357C               	lslf	_Shot_Index,w
 19813  02E1  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 19814  02E2  0086               	movwf	6
 19815  02E3  0187               	clrf	7
 19816  02E4  3F40               	moviw [0]fsr1
 19817  02E5  00D4               	movwf	??_slot_Main
 19818  02E6  3F41               	moviw [1]fsr1
 19819  02E7  00D5               	movwf	??_slot_Main+1
 19820  02E8  0854               	movf	??_slot_Main,w
 19821  02E9  0084               	movwf	4
 19822  02EA  0855               	movf	??_slot_Main+1,w
 19823  02EB  0085               	movwf	5
 19824  02EC  0800               	movf	0,w	;code access
 19825  02ED  00D6               	movwf	??_slot_Main+2
 19826  02EE  01D7               	clrf	??_slot_Main+3
 19827  02EF  0856               	movf	??_slot_Main+2,w
 19828  02F0  00B3               	movwf	?_sprintf+4
 19829  02F1  0857               	movf	??_slot_Main+3,w
 19830  02F2  00B4               	movwf	?_sprintf+5
 19831  02F3  0865               	movf	slot_Main@data,w
 19832  02F4  0086               	movwf	6
 19833  02F5  0866               	movf	slot_Main@data+1,w
 19834  02F6  0087               	movwf	7
 19835  02F7  3148               	addfsr 1,8
 19836  02F8  0801               	movf	1,w
 19837  02F9  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19838  02FA  0086               	movwf	6
 19839  02FB  3002               	movlw	2	; select bank5/6
 19840  02FC  0087               	movwf	7
 19841  02FD  0801               	movf	1,w
 19842  02FE  00D8               	movwf	??_slot_Main+4
 19843  02FF  01D9               	clrf	??_slot_Main+5
 19844  0300  0858               	movf	??_slot_Main+4,w
 19845  0301  00B5               	movwf	?_sprintf+6
 19846  0302  0859               	movf	??_slot_Main+5,w
 19847  0303  00B6               	movwf	?_sprintf+7
 19848  0304  0865               	movf	slot_Main@data,w
 19849  0305  0086               	movwf	6
 19850  0306  0866               	movf	slot_Main@data+1,w
 19851  0307  0087               	movwf	7
 19852  0308  3149               	addfsr 1,9
 19853  0309  0801               	movf	1,w
 19854  030A  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19855  030B  0086               	movwf	6
 19856  030C  3002               	movlw	2	; select bank5/6
 19857  030D  0087               	movwf	7
 19858  030E  0801               	movf	1,w
 19859  030F  00DA               	movwf	??_slot_Main+6
 19860  0310  01DB               	clrf	??_slot_Main+7
 19861  0311  085A               	movf	??_slot_Main+6,w
 19862  0312  00B7               	movwf	?_sprintf+8
 19863  0313  085B               	movf	??_slot_Main+7,w
 19864  0314  00B8               	movwf	?_sprintf+9
 19865  0315  0865               	movf	slot_Main@data,w
 19866  0316  0086               	movwf	6
 19867  0317  0866               	movf	slot_Main@data+1,w
 19868  0318  0087               	movwf	7
 19869  0319  314A               	addfsr 1,10
 19870  031A  0801               	movf	1,w
 19871  031B  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19872  031C  0086               	movwf	6
 19873  031D  3002               	movlw	2	; select bank5/6
 19874  031E  0087               	movwf	7
 19875  031F  0801               	movf	1,w
 19876  0320  00DC               	movwf	??_slot_Main+8
 19877  0321  01DD               	clrf	??_slot_Main+9
 19878  0322  085C               	movf	??_slot_Main+8,w
 19879  0323  00B9               	movwf	?_sprintf+10
 19880  0324  085D               	movf	??_slot_Main+9,w
 19881  0325  00BA               	movwf	?_sprintf+11
 19882  0326  3192  225F  3180   	fcall	_sprintf
 19883                           
 19884                           ;slot_task.c: 136: marquee(data->slot_print_buf, 1);}
 19885  0329  0020               	movlb	0	; select bank0
 19886  032A  0865               	movf	slot_Main@data,w
 19887  032B  3E0B               	addlw	11
 19888  032C  00BA               	movwf	marquee@string
 19889  032D  3000               	movlw	0
 19890  032E  3D66               	addwfc	slot_Main@data+1,w
 19891  032F  00BB               	movwf	marquee@string+1
 19892  0330  3001               	movlw	1
 19893  0331  00BC               	movwf	marquee@count
 19894  0332  3000               	movlw	0
 19895  0333  00BD               	movwf	marquee@count+1
 19896  0334  319B  2338  3180   	fcall	_marquee
 19897  0337  2E0F               	goto	l8472
 19898  0338                     l8422:	
 19899                           
 19900                           ;slot_task.c: 137: else if (data->displayTickCount < 300) {
 19901  0338  0020               	movlb	0	; select bank0
 19902  0339  0865               	movf	slot_Main@data,w
 19903  033A  0086               	movwf	6
 19904  033B  0866               	movf	slot_Main@data+1,w
 19905  033C  0087               	movwf	7
 19906  033D  3143               	addfsr 1,3
 19907  033E  3F40               	moviw [0]fsr1
 19908  033F  00D4               	movwf	??_slot_Main
 19909  0340  3F41               	moviw [1]fsr1
 19910  0341  00D5               	movwf	??_slot_Main+1
 19911  0342  3001               	movlw	1
 19912  0343  0255               	subwf	??_slot_Main+1,w
 19913  0344  302C               	movlw	44
 19914  0345  1903               	skipnz
 19915  0346  0254               	subwf	??_slot_Main,w
 19916  0347  1803               	skipnc
 19917  0348  2C09               	goto	l8434
 19918                           
 19919                           ;slot_task.c: 138: slot_Running_Animation(data);
 19920  0349  0866               	movf	slot_Main@data+1,w
 19921  034A  00B3               	movwf	slot_Running_Animation@taskData+1
 19922  034B  0865               	movf	slot_Main@data,w
 19923  034C  00B2               	movwf	slot_Running_Animation@taskData
 19924  034D  31A5  2544  3180   	fcall	_slot_Running_Animation
 19925                           
 19926                           ;slot_task.c: 139: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 19927  0350  30B2               	movlw	low _Slot_Wheel
 19928  0351  00F1               	movwf	strlen@s
 19929  0352  3002               	movlw	high _Slot_Wheel
 19930  0353  00F2               	movwf	strlen@s+1
 19931  0354  31A0  20D3  3180   	fcall	_strlen
 19932  0357  0872               	movf	?_strlen+1,w
 19933  0358  0020               	movlb	0	; select bank0
 19934  0359  00AC               	movwf	___lwmod@divisor+1
 19935  035A  0871               	movf	?_strlen,w
 19936  035B  00AB               	movwf	___lwmod@divisor
 19937  035C  31A5  2501  3180   	fcall	_rand
 19938  035F  0020               	movlb	0	; select bank0
 19939  0360  0824               	movf	?_rand,w
 19940  0361  00D4               	movwf	??_slot_Main
 19941  0362  01D5               	clrf	??_slot_Main+1
 19942  0363  0854               	movf	??_slot_Main,w
 19943  0364  00AD               	movwf	___lwmod@dividend
 19944  0365  0855               	movf	??_slot_Main+1,w
 19945  0366  00AE               	movwf	___lwmod@dividend+1
 19946  0367  31A1  21F4  3180   	fcall	___lwmod
 19947  036A  0020               	movlb	0	; select bank0
 19948  036B  082B               	movf	?___lwmod,w
 19949  036C  00D6               	movwf	??_slot_Main+2
 19950  036D  0865               	movf	slot_Main@data,w
 19951  036E  3E09               	addlw	9
 19952  036F  00D7               	movwf	??_slot_Main+3
 19953  0370  3000               	movlw	0
 19954  0371  3D66               	addwfc	slot_Main@data+1,w
 19955  0372  00D8               	movwf	??_slot_Main+4
 19956  0373  0857               	movf	??_slot_Main+3,w
 19957  0374  0086               	movwf	6
 19958  0375  0858               	movf	??_slot_Main+4,w
 19959  0376  0087               	movwf	7
 19960  0377  0856               	movf	??_slot_Main+2,w
 19961  0378  0081               	movwf	1
 19962                           
 19963                           ;slot_task.c: 140: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 19964  0379  30B2               	movlw	low _Slot_Wheel
 19965  037A  00F1               	movwf	strlen@s
 19966  037B  3002               	movlw	high _Slot_Wheel
 19967  037C  00F2               	movwf	strlen@s+1
 19968  037D  31A0  20D3  3180   	fcall	_strlen
 19969  0380  0872               	movf	?_strlen+1,w
 19970  0381  0020               	movlb	0	; select bank0
 19971  0382  00AC               	movwf	___lwmod@divisor+1
 19972  0383  0871               	movf	?_strlen,w
 19973  0384  00AB               	movwf	___lwmod@divisor
 19974  0385  31A5  2501  3180   	fcall	_rand
 19975  0388  0020               	movlb	0	; select bank0
 19976  0389  0824               	movf	?_rand,w
 19977  038A  00D4               	movwf	??_slot_Main
 19978  038B  01D5               	clrf	??_slot_Main+1
 19979  038C  0854               	movf	??_slot_Main,w
 19980  038D  00AD               	movwf	___lwmod@dividend
 19981  038E  0855               	movf	??_slot_Main+1,w
 19982  038F  00AE               	movwf	___lwmod@dividend+1
 19983  0390  31A1  21F4  3180   	fcall	___lwmod
 19984  0393  0020               	movlb	0	; select bank0
 19985  0394  082B               	movf	?___lwmod,w
 19986  0395  00D6               	movwf	??_slot_Main+2
 19987  0396  0865               	movf	slot_Main@data,w
 19988  0397  3E0A               	addlw	10
 19989  0398  00D7               	movwf	??_slot_Main+3
 19990  0399  3000               	movlw	0
 19991  039A  3D66               	addwfc	slot_Main@data+1,w
 19992  039B  00D8               	movwf	??_slot_Main+4
 19993  039C  0857               	movf	??_slot_Main+3,w
 19994  039D  0086               	movwf	6
 19995  039E  0858               	movf	??_slot_Main+4,w
 19996  039F  0087               	movwf	7
 19997  03A0  0856               	movf	??_slot_Main+2,w
 19998  03A1  0081               	movwf	1
 19999                           
 20000                           ;slot_task.c: 141: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Slot_Wheel[data->slot_wheel_index[2]], Slot_Wheel[data->s
      +                          lot_wheel_index[3]]);
 20001  03A2  0865               	movf	slot_Main@data,w
 20002  03A3  3E0B               	addlw	11
 20003  03A4  00AF               	movwf	sprintf@sp
 20004  03A5  3000               	movlw	0
 20005  03A6  3D66               	addwfc	slot_Main@data+1,w
 20006  03A7  00B0               	movwf	sprintf@sp+1
 20007  03A8  30A8               	movlw	low (STR_48| (0+32768))
 20008  03A9  00B1               	movwf	sprintf@f
 20009  03AA  30B0               	movlw	high (STR_48| (0+32768))
 20010  03AB  00B2               	movwf	sprintf@f+1
 20011  03AC  357C               	lslf	_Shot_Index,w
 20012  03AD  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20013  03AE  0086               	movwf	6
 20014  03AF  0187               	clrf	7
 20015  03B0  3F40               	moviw [0]fsr1
 20016  03B1  00D4               	movwf	??_slot_Main
 20017  03B2  3F41               	moviw [1]fsr1
 20018  03B3  00D5               	movwf	??_slot_Main+1
 20019  03B4  0854               	movf	??_slot_Main,w
 20020  03B5  0084               	movwf	4
 20021  03B6  0855               	movf	??_slot_Main+1,w
 20022  03B7  0085               	movwf	5
 20023  03B8  0800               	movf	0,w	;code access
 20024  03B9  00D6               	movwf	??_slot_Main+2
 20025  03BA  01D7               	clrf	??_slot_Main+3
 20026  03BB  0856               	movf	??_slot_Main+2,w
 20027  03BC  00B3               	movwf	?_sprintf+4
 20028  03BD  0857               	movf	??_slot_Main+3,w
 20029  03BE  00B4               	movwf	?_sprintf+5
 20030  03BF  357C               	lslf	_Shot_Index,w
 20031  03C0  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20032  03C1  0086               	movwf	6
 20033  03C2  0187               	clrf	7
 20034  03C3  3F40               	moviw [0]fsr1
 20035  03C4  00D8               	movwf	??_slot_Main+4
 20036  03C5  3F41               	moviw [1]fsr1
 20037  03C6  00D9               	movwf	??_slot_Main+5
 20038  03C7  3001               	movlw	1
 20039  03C8  0758               	addwf	??_slot_Main+4,w
 20040  03C9  0084               	movwf	4
 20041  03CA  0859               	movf	??_slot_Main+5,w
 20042  03CB  1803               	skipnc
 20043  03CC  0A59               	incf	??_slot_Main+5,w
 20044  03CD  0085               	movwf	5
 20045  03CE  0800               	movf	0,w	;code access
 20046  03CF  00DA               	movwf	??_slot_Main+6
 20047  03D0  01DB               	clrf	??_slot_Main+7
 20048  03D1  085A               	movf	??_slot_Main+6,w
 20049  03D2  00B5               	movwf	?_sprintf+6
 20050  03D3  085B               	movf	??_slot_Main+7,w
 20051  03D4  00B6               	movwf	?_sprintf+7
 20052  03D5  0865               	movf	slot_Main@data,w
 20053  03D6  0086               	movwf	6
 20054  03D7  0866               	movf	slot_Main@data+1,w
 20055  03D8  0087               	movwf	7
 20056  03D9  3149               	addfsr 1,9
 20057  03DA  0801               	movf	1,w
 20058  03DB  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 20059  03DC  0086               	movwf	6
 20060  03DD  3002               	movlw	2	; select bank5/6
 20061  03DE  0087               	movwf	7
 20062  03DF  0801               	movf	1,w
 20063  03E0  00DC               	movwf	??_slot_Main+8
 20064  03E1  01DD               	clrf	??_slot_Main+9
 20065  03E2  085C               	movf	??_slot_Main+8,w
 20066  03E3  00B7               	movwf	?_sprintf+8
 20067  03E4  085D               	movf	??_slot_Main+9,w
 20068  03E5  00B8               	movwf	?_sprintf+9
 20069  03E6  0865               	movf	slot_Main@data,w
 20070  03E7  0086               	movwf	6
 20071  03E8  0866               	movf	slot_Main@data+1,w
 20072  03E9  0087               	movwf	7
 20073  03EA  314A               	addfsr 1,10
 20074  03EB  0801               	movf	1,w
 20075  03EC  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 20076  03ED  0086               	movwf	6
 20077  03EE  3002               	movlw	2	; select bank5/6
 20078  03EF  0087               	movwf	7
 20079  03F0  0801               	movf	1,w
 20080  03F1  00DE               	movwf	??_slot_Main+10
 20081  03F2  01DF               	clrf	??_slot_Main+11
 20082  03F3  085E               	movf	??_slot_Main+10,w
 20083  03F4  00B9               	movwf	?_sprintf+10
 20084  03F5  085F               	movf	??_slot_Main+11,w
 20085  03F6  00BA               	movwf	?_sprintf+11
 20086  03F7  3192  225F  3180   	fcall	_sprintf
 20087                           
 20088                           ;slot_task.c: 142: marquee(data->slot_print_buf, 1);}
 20089  03FA  0020               	movlb	0	; select bank0
 20090  03FB  0865               	movf	slot_Main@data,w
 20091  03FC  3E0B               	addlw	11
 20092  03FD  00BA               	movwf	marquee@string
 20093  03FE  3000               	movlw	0
 20094  03FF  3D66               	addwfc	slot_Main@data+1,w
 20095  0400  00BB               	movwf	marquee@string+1
 20096  0401  3001               	movlw	1
 20097  0402  00BC               	movwf	marquee@count
 20098  0403  3000               	movlw	0
 20099  0404  00BD               	movwf	marquee@count+1
 20100  0405  319B  2338  3180   	fcall	_marquee
 20101  0408  2E0F               	goto	l8472
 20102  0409                     l8434:	
 20103                           
 20104                           ;slot_task.c: 143: else if (data->displayTickCount < 400) {
 20105  0409  0020               	movlb	0	; select bank0
 20106  040A  0865               	movf	slot_Main@data,w
 20107  040B  0086               	movwf	6
 20108  040C  0866               	movf	slot_Main@data+1,w
 20109  040D  0087               	movwf	7
 20110  040E  3143               	addfsr 1,3
 20111  040F  3F40               	moviw [0]fsr1
 20112  0410  00D4               	movwf	??_slot_Main
 20113  0411  3F41               	moviw [1]fsr1
 20114  0412  00D5               	movwf	??_slot_Main+1
 20115  0413  3001               	movlw	1
 20116  0414  0255               	subwf	??_slot_Main+1,w
 20117  0415  3090               	movlw	144
 20118  0416  1903               	skipnz
 20119  0417  0254               	subwf	??_slot_Main,w
 20120  0418  1803               	skipnc
 20121  0419  2CB6               	goto	l8444
 20122                           
 20123                           ;slot_task.c: 144: slot_Running_Animation(data);
 20124  041A  0866               	movf	slot_Main@data+1,w
 20125  041B  00B3               	movwf	slot_Running_Animation@taskData+1
 20126  041C  0865               	movf	slot_Main@data,w
 20127  041D  00B2               	movwf	slot_Running_Animation@taskData
 20128  041E  31A5  2544  3180   	fcall	_slot_Running_Animation
 20129                           
 20130                           ;slot_task.c: 145: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 20131  0421  30B2               	movlw	low _Slot_Wheel
 20132  0422  00F1               	movwf	strlen@s
 20133  0423  3002               	movlw	high _Slot_Wheel
 20134  0424  00F2               	movwf	strlen@s+1
 20135  0425  31A0  20D3  3180   	fcall	_strlen
 20136  0428  0872               	movf	?_strlen+1,w
 20137  0429  0020               	movlb	0	; select bank0
 20138  042A  00AC               	movwf	___lwmod@divisor+1
 20139  042B  0871               	movf	?_strlen,w
 20140  042C  00AB               	movwf	___lwmod@divisor
 20141  042D  31A5  2501  3180   	fcall	_rand
 20142  0430  0020               	movlb	0	; select bank0
 20143  0431  0824               	movf	?_rand,w
 20144  0432  00D4               	movwf	??_slot_Main
 20145  0433  01D5               	clrf	??_slot_Main+1
 20146  0434  0854               	movf	??_slot_Main,w
 20147  0435  00AD               	movwf	___lwmod@dividend
 20148  0436  0855               	movf	??_slot_Main+1,w
 20149  0437  00AE               	movwf	___lwmod@dividend+1
 20150  0438  31A1  21F4  3180   	fcall	___lwmod
 20151  043B  0020               	movlb	0	; select bank0
 20152  043C  082B               	movf	?___lwmod,w
 20153  043D  00D6               	movwf	??_slot_Main+2
 20154  043E  0865               	movf	slot_Main@data,w
 20155  043F  3E0A               	addlw	10
 20156  0440  00D7               	movwf	??_slot_Main+3
 20157  0441  3000               	movlw	0
 20158  0442  3D66               	addwfc	slot_Main@data+1,w
 20159  0443  00D8               	movwf	??_slot_Main+4
 20160  0444  0857               	movf	??_slot_Main+3,w
 20161  0445  0086               	movwf	6
 20162  0446  0858               	movf	??_slot_Main+4,w
 20163  0447  0087               	movwf	7
 20164  0448  0856               	movf	??_slot_Main+2,w
 20165  0449  0081               	movwf	1
 20166                           
 20167                           ;slot_task.c: 146: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Slot_Wheel[data->slot_wheel_
      +                          index[3]]);
 20168  044A  0865               	movf	slot_Main@data,w
 20169  044B  3E0B               	addlw	11
 20170  044C  00AF               	movwf	sprintf@sp
 20171  044D  3000               	movlw	0
 20172  044E  3D66               	addwfc	slot_Main@data+1,w
 20173  044F  00B0               	movwf	sprintf@sp+1
 20174  0450  30A8               	movlw	low (STR_48| (0+32768))
 20175  0451  00B1               	movwf	sprintf@f
 20176  0452  30B0               	movlw	high (STR_48| (0+32768))
 20177  0453  00B2               	movwf	sprintf@f+1
 20178  0454  357C               	lslf	_Shot_Index,w
 20179  0455  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20180  0456  0086               	movwf	6
 20181  0457  0187               	clrf	7
 20182  0458  3F40               	moviw [0]fsr1
 20183  0459  00D4               	movwf	??_slot_Main
 20184  045A  3F41               	moviw [1]fsr1
 20185  045B  00D5               	movwf	??_slot_Main+1
 20186  045C  0854               	movf	??_slot_Main,w
 20187  045D  0084               	movwf	4
 20188  045E  0855               	movf	??_slot_Main+1,w
 20189  045F  0085               	movwf	5
 20190  0460  0800               	movf	0,w	;code access
 20191  0461  00D6               	movwf	??_slot_Main+2
 20192  0462  01D7               	clrf	??_slot_Main+3
 20193  0463  0856               	movf	??_slot_Main+2,w
 20194  0464  00B3               	movwf	?_sprintf+4
 20195  0465  0857               	movf	??_slot_Main+3,w
 20196  0466  00B4               	movwf	?_sprintf+5
 20197  0467  357C               	lslf	_Shot_Index,w
 20198  0468  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20199  0469  0086               	movwf	6
 20200  046A  0187               	clrf	7
 20201  046B  3F40               	moviw [0]fsr1
 20202  046C  00D8               	movwf	??_slot_Main+4
 20203  046D  3F41               	moviw [1]fsr1
 20204  046E  00D9               	movwf	??_slot_Main+5
 20205  046F  3001               	movlw	1
 20206  0470  0758               	addwf	??_slot_Main+4,w
 20207  0471  0084               	movwf	4
 20208  0472  0859               	movf	??_slot_Main+5,w
 20209  0473  1803               	skipnc
 20210  0474  0A59               	incf	??_slot_Main+5,w
 20211  0475  0085               	movwf	5
 20212  0476  0800               	movf	0,w	;code access
 20213  0477  00DA               	movwf	??_slot_Main+6
 20214  0478  01DB               	clrf	??_slot_Main+7
 20215  0479  085A               	movf	??_slot_Main+6,w
 20216  047A  00B5               	movwf	?_sprintf+6
 20217  047B  085B               	movf	??_slot_Main+7,w
 20218  047C  00B6               	movwf	?_sprintf+7
 20219  047D  357C               	lslf	_Shot_Index,w
 20220  047E  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20221  047F  0086               	movwf	6
 20222  0480  0187               	clrf	7
 20223  0481  3F40               	moviw [0]fsr1
 20224  0482  00DC               	movwf	??_slot_Main+8
 20225  0483  3F41               	moviw [1]fsr1
 20226  0484  00DD               	movwf	??_slot_Main+9
 20227  0485  3002               	movlw	2
 20228  0486  075C               	addwf	??_slot_Main+8,w
 20229  0487  0084               	movwf	4
 20230  0488  085D               	movf	??_slot_Main+9,w
 20231  0489  1803               	skipnc
 20232  048A  0A5D               	incf	??_slot_Main+9,w
 20233  048B  0085               	movwf	5
 20234  048C  0800               	movf	0,w	;code access
 20235  048D  00DE               	movwf	??_slot_Main+10
 20236  048E  01DF               	clrf	??_slot_Main+11
 20237  048F  085E               	movf	??_slot_Main+10,w
 20238  0490  00B7               	movwf	?_sprintf+8
 20239  0491  085F               	movf	??_slot_Main+11,w
 20240  0492  00B8               	movwf	?_sprintf+9
 20241  0493  0865               	movf	slot_Main@data,w
 20242  0494  0086               	movwf	6
 20243  0495  0866               	movf	slot_Main@data+1,w
 20244  0496  0087               	movwf	7
 20245  0497  314A               	addfsr 1,10
 20246  0498  0801               	movf	1,w
 20247  0499  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 20248  049A  0086               	movwf	6
 20249  049B  3002               	movlw	2	; select bank5/6
 20250  049C  0087               	movwf	7
 20251  049D  0801               	movf	1,w
 20252  049E  00E0               	movwf	??_slot_Main+12
 20253  049F  01E1               	clrf	??_slot_Main+13
 20254  04A0  0860               	movf	??_slot_Main+12,w
 20255  04A1  00B9               	movwf	?_sprintf+10
 20256  04A2  0861               	movf	??_slot_Main+13,w
 20257  04A3  00BA               	movwf	?_sprintf+11
 20258  04A4  3192  225F  3180   	fcall	_sprintf
 20259                           
 20260                           ;slot_task.c: 148: marquee(data->slot_print_buf, 1);}
 20261  04A7  0020               	movlb	0	; select bank0
 20262  04A8  0865               	movf	slot_Main@data,w
 20263  04A9  3E0B               	addlw	11
 20264  04AA  00BA               	movwf	marquee@string
 20265  04AB  3000               	movlw	0
 20266  04AC  3D66               	addwfc	slot_Main@data+1,w
 20267  04AD  00BB               	movwf	marquee@string+1
 20268  04AE  3001               	movlw	1
 20269  04AF  00BC               	movwf	marquee@count
 20270  04B0  3000               	movlw	0
 20271  04B1  00BD               	movwf	marquee@count+1
 20272  04B2  319B  2338  3180   	fcall	_marquee
 20273  04B5  2E0F               	goto	l8472
 20274  04B6                     l8444:	
 20275                           
 20276                           ;slot_task.c: 149: else if (data->displayTickCount < 500) {
 20277  04B6  0020               	movlb	0	; select bank0
 20278  04B7  0865               	movf	slot_Main@data,w
 20279  04B8  0086               	movwf	6
 20280  04B9  0866               	movf	slot_Main@data+1,w
 20281  04BA  0087               	movwf	7
 20282  04BB  3143               	addfsr 1,3
 20283  04BC  3F40               	moviw [0]fsr1
 20284  04BD  00D4               	movwf	??_slot_Main
 20285  04BE  3F41               	moviw [1]fsr1
 20286  04BF  00D5               	movwf	??_slot_Main+1
 20287  04C0  3001               	movlw	1
 20288  04C1  0255               	subwf	??_slot_Main+1,w
 20289  04C2  30F4               	movlw	244
 20290  04C3  1903               	skipnz
 20291  04C4  0254               	subwf	??_slot_Main,w
 20292  04C5  1803               	skipnc
 20293  04C6  2D6B               	goto	l8452
 20294                           
 20295                           ;slot_task.c: 150: slot_Finished_Animation(data);
 20296  04C7  0866               	movf	slot_Main@data+1,w
 20297  04C8  00BE               	movwf	slot_Finished_Animation@taskData+1
 20298  04C9  0865               	movf	slot_Main@data,w
 20299  04CA  00BD               	movwf	slot_Finished_Animation@taskData
 20300  04CB  31A1  217B  3180   	fcall	_slot_Finished_Animation
 20301                           
 20302                           ;slot_task.c: 151: if ( data->displayTickCount % 50 <= 25 ) {
 20303  04CE  3032               	movlw	50
 20304  04CF  0020               	movlb	0	; select bank0
 20305  04D0  00AB               	movwf	___lwmod@divisor
 20306  04D1  3000               	movlw	0
 20307  04D2  00AC               	movwf	___lwmod@divisor+1
 20308  04D3  0865               	movf	slot_Main@data,w
 20309  04D4  0086               	movwf	6
 20310  04D5  0866               	movf	slot_Main@data+1,w
 20311  04D6  0087               	movwf	7
 20312  04D7  3143               	addfsr 1,3
 20313  04D8  3F40               	moviw [0]fsr1
 20314  04D9  00AD               	movwf	___lwmod@dividend
 20315  04DA  3F41               	moviw [1]fsr1
 20316  04DB  00AE               	movwf	___lwmod@dividend+1
 20317  04DC  31A1  21F4  3180   	fcall	___lwmod
 20318  04DF  3000               	movlw	0
 20319  04E0  0020               	movlb	0	; select bank0
 20320  04E1  022C               	subwf	?___lwmod+1,w
 20321  04E2  301A               	movlw	26
 20322  04E3  1903               	skipnz
 20323  04E4  022B               	subwf	?___lwmod,w
 20324  04E5  1803               	skipnc
 20325  04E6  2CF9               	goto	l8450
 20326                           
 20327                           ;slot_task.c: 152: memset(data->slot_print_buf, 0x20, 4);
 20328  04E7  0865               	movf	slot_Main@data,w
 20329  04E8  3E0B               	addlw	11
 20330  04E9  00F1               	movwf	memset@p1
 20331  04EA  3000               	movlw	0
 20332  04EB  3D66               	addwfc	slot_Main@data+1,w
 20333  04EC  00F2               	movwf	memset@p1+1
 20334  04ED  3020               	movlw	32
 20335  04EE  00F3               	movwf	memset@c
 20336  04EF  3000               	movlw	0
 20337  04F0  00F4               	movwf	memset@c+1
 20338  04F1  3004               	movlw	4
 20339  04F2  00F5               	movwf	memset@n
 20340  04F3  3000               	movlw	0
 20341  04F4  00F6               	movwf	memset@n+1
 20342  04F5  31AF  27CF  3180   	fcall	_memset
 20343                           
 20344                           ;slot_task.c: 153: }
 20345  04F8  2D5C               	goto	l1421
 20346  04F9                     l8450:	
 20347                           
 20348                           ;slot_task.c: 154: else {
 20349                           ;slot_task.c: 155: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Shot_Options[Shot_Index][3])
      +                          ;
 20350  04F9  0020               	movlb	0	; select bank0
 20351  04FA  0865               	movf	slot_Main@data,w
 20352  04FB  3E0B               	addlw	11
 20353  04FC  00AF               	movwf	sprintf@sp
 20354  04FD  3000               	movlw	0
 20355  04FE  3D66               	addwfc	slot_Main@data+1,w
 20356  04FF  00B0               	movwf	sprintf@sp+1
 20357  0500  30A8               	movlw	low (STR_48| (0+32768))
 20358  0501  00B1               	movwf	sprintf@f
 20359  0502  30B0               	movlw	high (STR_48| (0+32768))
 20360  0503  00B2               	movwf	sprintf@f+1
 20361  0504  357C               	lslf	_Shot_Index,w
 20362  0505  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20363  0506  0086               	movwf	6
 20364  0507  0187               	clrf	7
 20365  0508  3F40               	moviw [0]fsr1
 20366  0509  00D4               	movwf	??_slot_Main
 20367  050A  3F41               	moviw [1]fsr1
 20368  050B  00D5               	movwf	??_slot_Main+1
 20369  050C  0854               	movf	??_slot_Main,w
 20370  050D  0084               	movwf	4
 20371  050E  0855               	movf	??_slot_Main+1,w
 20372  050F  0085               	movwf	5
 20373  0510  0800               	movf	0,w	;code access
 20374  0511  00D6               	movwf	??_slot_Main+2
 20375  0512  01D7               	clrf	??_slot_Main+3
 20376  0513  0856               	movf	??_slot_Main+2,w
 20377  0514  00B3               	movwf	?_sprintf+4
 20378  0515  0857               	movf	??_slot_Main+3,w
 20379  0516  00B4               	movwf	?_sprintf+5
 20380  0517  357C               	lslf	_Shot_Index,w
 20381  0518  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20382  0519  0086               	movwf	6
 20383  051A  0187               	clrf	7
 20384  051B  3F40               	moviw [0]fsr1
 20385  051C  00D8               	movwf	??_slot_Main+4
 20386  051D  3F41               	moviw [1]fsr1
 20387  051E  00D9               	movwf	??_slot_Main+5
 20388  051F  3001               	movlw	1
 20389  0520  0758               	addwf	??_slot_Main+4,w
 20390  0521  0084               	movwf	4
 20391  0522  0859               	movf	??_slot_Main+5,w
 20392  0523  1803               	skipnc
 20393  0524  0A59               	incf	??_slot_Main+5,w
 20394  0525  0085               	movwf	5
 20395  0526  0800               	movf	0,w	;code access
 20396  0527  00DA               	movwf	??_slot_Main+6
 20397  0528  01DB               	clrf	??_slot_Main+7
 20398  0529  085A               	movf	??_slot_Main+6,w
 20399  052A  00B5               	movwf	?_sprintf+6
 20400  052B  085B               	movf	??_slot_Main+7,w
 20401  052C  00B6               	movwf	?_sprintf+7
 20402  052D  357C               	lslf	_Shot_Index,w
 20403  052E  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20404  052F  0086               	movwf	6
 20405  0530  0187               	clrf	7
 20406  0531  3F40               	moviw [0]fsr1
 20407  0532  00DC               	movwf	??_slot_Main+8
 20408  0533  3F41               	moviw [1]fsr1
 20409  0534  00DD               	movwf	??_slot_Main+9
 20410  0535  3002               	movlw	2
 20411  0536  075C               	addwf	??_slot_Main+8,w
 20412  0537  0084               	movwf	4
 20413  0538  085D               	movf	??_slot_Main+9,w
 20414  0539  1803               	skipnc
 20415  053A  0A5D               	incf	??_slot_Main+9,w
 20416  053B  0085               	movwf	5
 20417  053C  0800               	movf	0,w	;code access
 20418  053D  00DE               	movwf	??_slot_Main+10
 20419  053E  01DF               	clrf	??_slot_Main+11
 20420  053F  085E               	movf	??_slot_Main+10,w
 20421  0540  00B7               	movwf	?_sprintf+8
 20422  0541  085F               	movf	??_slot_Main+11,w
 20423  0542  00B8               	movwf	?_sprintf+9
 20424  0543  357C               	lslf	_Shot_Index,w
 20425  0544  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20426  0545  0086               	movwf	6
 20427  0546  0187               	clrf	7
 20428  0547  3F40               	moviw [0]fsr1
 20429  0548  00E0               	movwf	??_slot_Main+12
 20430  0549  3F41               	moviw [1]fsr1
 20431  054A  00E1               	movwf	??_slot_Main+13
 20432  054B  3003               	movlw	3
 20433  054C  0760               	addwf	??_slot_Main+12,w
 20434  054D  0084               	movwf	4
 20435  054E  0861               	movf	??_slot_Main+13,w
 20436  054F  1803               	skipnc
 20437  0550  0A61               	incf	??_slot_Main+13,w
 20438  0551  0085               	movwf	5
 20439  0552  0800               	movf	0,w	;code access
 20440  0553  00E2               	movwf	??_slot_Main+14
 20441  0554  01E3               	clrf	??_slot_Main+15
 20442  0555  0862               	movf	??_slot_Main+14,w
 20443  0556  00B9               	movwf	?_sprintf+10
 20444  0557  0863               	movf	??_slot_Main+15,w
 20445  0558  00BA               	movwf	?_sprintf+11
 20446  0559  3192  225F  3180   	fcall	_sprintf
 20447  055C                     l1421:	
 20448                           
 20449                           ;slot_task.c: 156: }
 20450                           ;slot_task.c: 157: marquee(data->slot_print_buf, 1);
 20451  055C  0020               	movlb	0	; select bank0
 20452  055D  0865               	movf	slot_Main@data,w
 20453  055E  3E0B               	addlw	11
 20454  055F  00BA               	movwf	marquee@string
 20455  0560  3000               	movlw	0
 20456  0561  3D66               	addwfc	slot_Main@data+1,w
 20457  0562  00BB               	movwf	marquee@string+1
 20458  0563  3001               	movlw	1
 20459  0564  00BC               	movwf	marquee@count
 20460  0565  3000               	movlw	0
 20461  0566  00BD               	movwf	marquee@count+1
 20462  0567  319B  2338  3180   	fcall	_marquee
 20463                           
 20464                           ;slot_task.c: 158: }
 20465  056A  2E0F               	goto	l8472
 20466  056B                     l8452:	
 20467                           
 20468                           ;slot_task.c: 159: else {
 20469                           ;slot_task.c: 160: slot_Finished_Animation(data);
 20470  056B  0020               	movlb	0	; select bank0
 20471  056C  0866               	movf	slot_Main@data+1,w
 20472  056D  00BE               	movwf	slot_Finished_Animation@taskData+1
 20473  056E  0865               	movf	slot_Main@data,w
 20474  056F  00BD               	movwf	slot_Finished_Animation@taskData
 20475  0570  31A1  217B  3180   	fcall	_slot_Finished_Animation
 20476                           
 20477                           ;slot_task.c: 161: if ( data->displayTickCount % 50 <= 25 ) {
 20478  0573  3032               	movlw	50
 20479  0574  0020               	movlb	0	; select bank0
 20480  0575  00AB               	movwf	___lwmod@divisor
 20481  0576  3000               	movlw	0
 20482  0577  00AC               	movwf	___lwmod@divisor+1
 20483  0578  0865               	movf	slot_Main@data,w
 20484  0579  0086               	movwf	6
 20485  057A  0866               	movf	slot_Main@data+1,w
 20486  057B  0087               	movwf	7
 20487  057C  3143               	addfsr 1,3
 20488  057D  3F40               	moviw [0]fsr1
 20489  057E  00AD               	movwf	___lwmod@dividend
 20490  057F  3F41               	moviw [1]fsr1
 20491  0580  00AE               	movwf	___lwmod@dividend+1
 20492  0581  31A1  21F4  3180   	fcall	___lwmod
 20493  0584  3000               	movlw	0
 20494  0585  0020               	movlb	0	; select bank0
 20495  0586  022C               	subwf	?___lwmod+1,w
 20496  0587  301A               	movlw	26
 20497  0588  1903               	skipnz
 20498  0589  022B               	subwf	?___lwmod,w
 20499  058A  1803               	skipnc
 20500  058B  2D9E               	goto	l8456
 20501                           
 20502                           ;slot_task.c: 162: memset(data->slot_print_buf, 0x20, 4);
 20503  058C  0865               	movf	slot_Main@data,w
 20504  058D  3E0B               	addlw	11
 20505  058E  00F1               	movwf	memset@p1
 20506  058F  3000               	movlw	0
 20507  0590  3D66               	addwfc	slot_Main@data+1,w
 20508  0591  00F2               	movwf	memset@p1+1
 20509  0592  3020               	movlw	32
 20510  0593  00F3               	movwf	memset@c
 20511  0594  3000               	movlw	0
 20512  0595  00F4               	movwf	memset@c+1
 20513  0596  3004               	movlw	4
 20514  0597  00F5               	movwf	memset@n
 20515  0598  3000               	movlw	0
 20516  0599  00F6               	movwf	memset@n+1
 20517  059A  31AF  27CF  3180   	fcall	_memset
 20518                           
 20519                           ;slot_task.c: 163: }
 20520  059D  2DB5               	goto	l1424
 20521  059E                     l8456:	
 20522                           
 20523                           ;slot_task.c: 164: else {
 20524                           ;slot_task.c: 165: sprintf(data->slot_print_buf, "%s", Shot_Options_Long[Shot_Index]);
 20525  059E  0020               	movlb	0	; select bank0
 20526  059F  0865               	movf	slot_Main@data,w
 20527  05A0  3E0B               	addlw	11
 20528  05A1  00AF               	movwf	sprintf@sp
 20529  05A2  3000               	movlw	0
 20530  05A3  3D66               	addwfc	slot_Main@data+1,w
 20531  05A4  00B0               	movwf	sprintf@sp+1
 20532  05A5  3047               	movlw	low (STR_53| (0+32768))
 20533  05A6  00B1               	movwf	sprintf@f
 20534  05A7  30B1               	movlw	high (STR_53| (0+32768))
 20535  05A8  00B2               	movwf	sprintf@f+1
 20536  05A9  357C               	lslf	_Shot_Index,w
 20537  05AA  3EA0               	addlw	(low (_Shot_Options_Long| (0+512)))& (0+255)
 20538  05AB  0086               	movwf	6
 20539  05AC  3002               	movlw	2	; select bank5/6
 20540  05AD  0087               	movwf	7
 20541  05AE  3F40               	moviw [0]fsr1
 20542  05AF  00B3               	movwf	low ((?_sprintf| 0+4))
 20543  05B0  3F41               	moviw [1]fsr1
 20544  05B1  00B4               	movwf	(low ((?_sprintf| 0+4))+1)
 20545  05B2  3192  225F  3180   	fcall	_sprintf
 20546  05B5                     l1424:	
 20547                           
 20548                           ;slot_task.c: 166: }
 20549                           ;slot_task.c: 168: marquee_speedy(data->slot_print_buf, data->displayTickCount, 20);
 20550  05B5  0020               	movlb	0	; select bank0
 20551  05B6  0865               	movf	slot_Main@data,w
 20552  05B7  3E0B               	addlw	11
 20553  05B8  00BA               	movwf	marquee_speedy@string
 20554  05B9  3000               	movlw	0
 20555  05BA  3D66               	addwfc	slot_Main@data+1,w
 20556  05BB  00BB               	movwf	marquee_speedy@string+1
 20557  05BC  0865               	movf	slot_Main@data,w
 20558  05BD  0086               	movwf	6
 20559  05BE  0866               	movf	slot_Main@data+1,w
 20560  05BF  0087               	movwf	7
 20561  05C0  3143               	addfsr 1,3
 20562  05C1  3F40               	moviw [0]fsr1
 20563  05C2  00BC               	movwf	marquee_speedy@count
 20564  05C3  3F41               	moviw [1]fsr1
 20565  05C4  00BD               	movwf	marquee_speedy@count+1
 20566  05C5  3014               	movlw	20
 20567  05C6  00BE               	movwf	marquee_speedy@multiplier
 20568  05C7  3000               	movlw	0
 20569  05C8  00BF               	movwf	marquee_speedy@multiplier+1
 20570  05C9  319A  22C5  3180   	fcall	_marquee_speedy
 20571                           
 20572                           ;slot_task.c: 169: if (data->displayTickCount == 500 + (50 * 10)) {
 20573  05CC  0020               	movlb	0	; select bank0
 20574  05CD  0865               	movf	slot_Main@data,w
 20575  05CE  0086               	movwf	6
 20576  05CF  0866               	movf	slot_Main@data+1,w
 20577  05D0  0087               	movwf	7
 20578  05D1  3143               	addfsr 1,3
 20579  05D2  0016               	moviw fsr1++
 20580  05D3  3AE8               	xorlw	232
 20581  05D4  00D4               	movwf	??_slot_Main
 20582  05D5  0016               	moviw fsr1++
 20583  05D6  3A03               	xorlw	3
 20584  05D7  04D4               	iorwf	??_slot_Main,f
 20585  05D8  1D03               	btfss	3,2
 20586  05D9  2E0F               	goto	l8472
 20587                           
 20588                           ;slot_task.c: 170: currentTask = MENU_TASK;
 20589  05DA  0021               	movlb	1	; select bank1
 20590  05DB  01B8               	clrf	_currentTask^(0+128)
 20591  05DC  01B9               	clrf	(_currentTask+1)^(0+128)
 20592                           
 20593                           ;slot_task.c: 173: slot_Setup(slot_taskData);
 20594  05DD  083B               	movf	(_slot_taskData+1)^(0+128),w
 20595  05DE  0020               	movlb	0	; select bank0
 20596  05DF  00B0               	movwf	slot_Setup@taskData+1
 20597  05E0  0021               	movlb	1	; select bank1
 20598  05E1  083A               	movf	_slot_taskData^(0+128),w
 20599  05E2  0020               	movlb	0	; select bank0
 20600  05E3  00AF               	movwf	slot_Setup@taskData
 20601  05E4  31A7  2702         	fcall	_slot_Setup
 20602                           
 20603                           ;slot_task.c: 176: data->holdCountA = 1;
 20604  05E6  0020               	movlb	0	; select bank0
 20605  05E7  0865               	movf	slot_Main@data,w
 20606  05E8  0086               	movwf	6
 20607  05E9  0866               	movf	slot_Main@data+1,w
 20608  05EA  0087               	movwf	7
 20609  05EB  315F               	addfsr 1,31
 20610  05EC  3001               	movlw	1
 20611  05ED  3FC0               	movwi [0]fsr1
 20612  05EE  3000               	movlw	0
 20613  05EF  3FC1               	movwi [1]fsr1
 20614                           
 20615                           ;slot_task.c: 177: data->holdCountB = 1;
 20616  05F0  0865               	movf	slot_Main@data,w
 20617  05F1  3E21               	addlw	33
 20618  05F2  0086               	movwf	6
 20619  05F3  3000               	movlw	0
 20620  05F4  3D66               	addwfc	slot_Main@data+1,w
 20621  05F5  0087               	movwf	7
 20622  05F6  3001               	movlw	1
 20623  05F7  3FC0               	movwi [0]fsr1
 20624  05F8  3000               	movlw	0
 20625  05F9  3FC1               	movwi [1]fsr1
 20626                           
 20627                           ;slot_task.c: 178: data->holdCountX = 1;
 20628  05FA  0865               	movf	slot_Main@data,w
 20629  05FB  3E23               	addlw	35
 20630  05FC  0086               	movwf	6
 20631  05FD  3000               	movlw	0
 20632  05FE  3D66               	addwfc	slot_Main@data+1,w
 20633  05FF  0087               	movwf	7
 20634  0600  3001               	movlw	1
 20635  0601  3FC0               	movwi [0]fsr1
 20636  0602  3000               	movlw	0
 20637  0603  3FC1               	movwi [1]fsr1
 20638                           
 20639                           ;slot_task.c: 179: data->holdCountY = 1;
 20640  0604  0865               	movf	slot_Main@data,w
 20641  0605  3E25               	addlw	37
 20642  0606  0086               	movwf	6
 20643  0607  3000               	movlw	0
 20644  0608  3D66               	addwfc	slot_Main@data+1,w
 20645  0609  0087               	movwf	7
 20646  060A  3001               	movlw	1
 20647  060B  3FC0               	movwi [0]fsr1
 20648  060C  3000               	movlw	0
 20649  060D  3FC1               	movwi [1]fsr1
 20650                           
 20651                           ;slot_task.c: 180: break;
 20652  060E  0008               	return
 20653  060F                     l8472:	
 20654                           
 20655                           ;slot_task.c: 181: }
 20656                           ;slot_task.c: 182: }
 20657                           ;slot_task.c: 184: data->displayTickCount += 1;
 20658  060F  0020               	movlb	0	; select bank0
 20659  0610  0865               	movf	slot_Main@data,w
 20660  0611  0086               	movwf	6
 20661  0612  0866               	movf	slot_Main@data+1,w
 20662  0613  0087               	movwf	7
 20663  0614  3143               	addfsr 1,3
 20664  0615  3001               	movlw	1
 20665  0616  0781               	addwf	1,f
 20666  0617  3141               	addfsr 1,1
 20667  0618  1803               	skipnc
 20668  0619  0A81               	incf	1,f
 20669                           
 20670                           ;slot_task.c: 185: data->holdCountA = 0;
 20671  061A  0865               	movf	slot_Main@data,w
 20672  061B  0086               	movwf	6
 20673  061C  0866               	movf	slot_Main@data+1,w
 20674  061D  0087               	movwf	7
 20675  061E  315F               	addfsr 1,31
 20676  061F  3000               	movlw	0
 20677  0620  3FC0               	movwi [0]fsr1
 20678  0621  3FC1               	movwi [1]fsr1
 20679                           
 20680                           ;slot_task.c: 186: data->holdCountB = 0;
 20681  0622  0865               	movf	slot_Main@data,w
 20682  0623  3E21               	addlw	33
 20683  0624  0086               	movwf	6
 20684  0625  3000               	movlw	0
 20685  0626  3D66               	addwfc	slot_Main@data+1,w
 20686  0627  0087               	movwf	7
 20687  0628  3000               	movlw	0
 20688  0629  3FC0               	movwi [0]fsr1
 20689  062A  3FC1               	movwi [1]fsr1
 20690                           
 20691                           ;slot_task.c: 187: data->holdCountX = 0;
 20692  062B  0865               	movf	slot_Main@data,w
 20693  062C  3E23               	addlw	35
 20694  062D  0086               	movwf	6
 20695  062E  3000               	movlw	0
 20696  062F  3D66               	addwfc	slot_Main@data+1,w
 20697  0630  0087               	movwf	7
 20698  0631  3000               	movlw	0
 20699  0632  3FC0               	movwi [0]fsr1
 20700  0633  3FC1               	movwi [1]fsr1
 20701                           
 20702                           ;slot_task.c: 188: data->holdCountY = 0;
 20703  0634  0865               	movf	slot_Main@data,w
 20704  0635  3E25               	addlw	37
 20705  0636  0086               	movwf	6
 20706  0637  3000               	movlw	0
 20707  0638  3D66               	addwfc	slot_Main@data+1,w
 20708  0639  0087               	movwf	7
 20709  063A  3000               	movlw	0
 20710  063B  3FC0               	movwi [0]fsr1
 20711  063C  3FC1               	movwi [1]fsr1
 20712                           
 20713                           ;slot_task.c: 189: data->noholdCount += 1;
 20714  063D  0865               	movf	slot_Main@data,w
 20715  063E  3E27               	addlw	39
 20716  063F  0086               	movwf	6
 20717  0640  3000               	movlw	0
 20718  0641  3D66               	addwfc	slot_Main@data+1,w
 20719  0642  0087               	movwf	7
 20720  0643  3001               	movlw	1
 20721  0644  0781               	addwf	1,f
 20722  0645  3141               	addfsr 1,1
 20723  0646  1803               	skipnc
 20724  0647  0A81               	incf	1,f
 20725                           
 20726                           ;slot_task.c: 190: }
 20727  0648  0008               	return
 20728  0649                     __end_of_slot_Main:	
 20729                           
 20730                           	psect	text18
 20731  2544                     __ptext18:	
 20732 ;; *************** function _slot_Running_Animation *****************
 20733 ;; Defined at:
 20734 ;;		line 64 in file "slot_task.c"
 20735 ;; Parameters:    Size  Location     Type
 20736 ;;  taskData        2   18[BANK0 ] PTR void 
 20737 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 20738 ;;		 -> flashy_TaskData(30), NULL(0), 
 20739 ;; Auto vars:     Size  Location     Type
 20740 ;;  data            2   22[BANK0 ] PTR struct t_slot_taskDa
 20741 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 20742 ;;		 -> flashy_TaskData(30), NULL(0), 
 20743 ;; Return value:  Size  Location     Type
 20744 ;;                  1    wreg      void 
 20745 ;; Registers used:
 20746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20747 ;; Tracked objects:
 20748 ;;		On entry : 0/0
 20749 ;;		On exit  : 0/0
 20750 ;;		Unchanged: 0/0
 20751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20752 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20754 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20755 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20756 ;;Total ram usage:        6 bytes
 20757 ;; Hardware stack levels used:    1
 20758 ;; Hardware stack levels required when called:   10
 20759 ;; This function calls:
 20760 ;;		_led_circle
 20761 ;; This function is called by:
 20762 ;;		_slot_Main
 20763 ;; This function uses a non-reentrant model
 20764 ;;
 20765                           
 20766                           
 20767                           ;psect for function _slot_Running_Animation
 20768  2544                     _slot_Running_Animation:	
 20769                           
 20770                           ;slot_task.c: 65: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 20771                           
 20772                           ;incstack = 0
 20773                           ; Regs used in _slot_Running_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 20774  2544  0020               	movlb	0	; select bank0
 20775  2545  0833               	movf	slot_Running_Animation@taskData+1,w
 20776  2546  00B7               	movwf	slot_Running_Animation@data+1
 20777  2547  0832               	movf	slot_Running_Animation@taskData,w
 20778  2548  00B6               	movwf	slot_Running_Animation@data
 20779                           
 20780                           ;slot_task.c: 66: if (data->delayTickCount ==0 ){
 20781  2549  0836               	movf	slot_Running_Animation@data,w
 20782  254A  0086               	movwf	6
 20783  254B  0837               	movf	slot_Running_Animation@data+1,w
 20784  254C  0087               	movwf	7
 20785  254D  3145               	addfsr 1,5
 20786  254E  0016               	moviw fsr1++
 20787  254F  0401               	iorwf	1,w
 20788  2550  1D03               	btfss	3,2
 20789  2551  2D7E               	goto	l7604
 20790                           
 20791                           ;slot_task.c: 67: if (Leds_idx == 1024 ){
 20792  2552  3004               	movlw	4
 20793  2553  0021               	movlb	1	; select bank1
 20794  2554  065E               	xorwf	(_Leds_idx+1)^(0+128),w
 20795  2555  045D               	iorwf	_Leds_idx^(0+128),w
 20796  2556  1D03               	btfss	3,2
 20797  2557  2D5C               	goto	l7596
 20798                           
 20799                           ;slot_task.c: 68: Leds_idx = Leds_idx << 1;
 20800  2558  355D               	lslf	_Leds_idx^(0+128),w
 20801  2559  00DD               	movwf	_Leds_idx^(0+128)
 20802  255A  0D5E               	rlf	(_Leds_idx+1)^(0+128),w
 20803  255B  00DE               	movwf	(_Leds_idx+1)^(0+128)
 20804  255C                     l7596:	
 20805                           
 20806                           ;slot_task.c: 69: }
 20807                           ;slot_task.c: 70: led_circle(Leds_idx);
 20808  255C  085E               	movf	(_Leds_idx+1)^(0+128),w
 20809  255D  0020               	movlb	0	; select bank0
 20810  255E  00B1               	movwf	led_circle@count+1
 20811  255F  0021               	movlb	1	; select bank1
 20812  2560  085D               	movf	_Leds_idx^(0+128),w
 20813  2561  0020               	movlb	0	; select bank0
 20814  2562  00B0               	movwf	led_circle@count
 20815  2563  31AE  262E  31A5   	fcall	_led_circle
 20816                           
 20817                           ;slot_task.c: 71: if (Leds_idx < 1 ){
 20818  2566  0021               	movlb	1	; select bank1
 20819  2567  085D               	movf	_Leds_idx^(0+128),w
 20820  2568  045E               	iorwf	(_Leds_idx+1)^(0+128),w
 20821  2569  1D03               	btfss	3,2
 20822  256A  2D6F               	goto	l1394
 20823                           
 20824                           ;slot_task.c: 72: Leds_idx = 1;
 20825  256B  3001               	movlw	1
 20826  256C  00DD               	movwf	_Leds_idx^(0+128)
 20827  256D  3000               	movlw	0
 20828  256E  00DE               	movwf	(_Leds_idx^(0+128)+1)
 20829  256F                     l1394:	
 20830                           
 20831                           ;slot_task.c: 73: }
 20832                           ;slot_task.c: 74: Leds_idx = Leds_idx << 1;
 20833  256F  355D               	lslf	_Leds_idx^(0+128),w
 20834  2570  00DD               	movwf	_Leds_idx^(0+128)
 20835  2571  0D5E               	rlf	(_Leds_idx+1)^(0+128),w
 20836  2572  00DE               	movwf	(_Leds_idx+1)^(0+128)
 20837                           
 20838                           ;slot_task.c: 76: data->delayTickCount = 10;
 20839  2573  0020               	movlb	0	; select bank0
 20840  2574  0836               	movf	slot_Running_Animation@data,w
 20841  2575  0086               	movwf	6
 20842  2576  0837               	movf	slot_Running_Animation@data+1,w
 20843  2577  0087               	movwf	7
 20844  2578  3145               	addfsr 1,5
 20845  2579  300A               	movlw	10
 20846  257A  3FC0               	movwi [0]fsr1
 20847  257B  3000               	movlw	0
 20848  257C  3FC1               	movwi [1]fsr1
 20849                           
 20850                           ;slot_task.c: 77: }
 20851  257D  0008               	return
 20852  257E                     l7604:	
 20853                           
 20854                           ;slot_task.c: 78: else {
 20855                           ;slot_task.c: 79: data->delayTickCount -= 1;
 20856  257E  0836               	movf	slot_Running_Animation@data,w
 20857  257F  0086               	movwf	6
 20858  2580  0837               	movf	slot_Running_Animation@data+1,w
 20859  2581  0087               	movwf	7
 20860  2582  3145               	addfsr 1,5
 20861  2583  3001               	movlw	1
 20862  2584  0281               	subwf	1,f
 20863  2585  3141               	addfsr 1,1
 20864  2586  3000               	movlw	0
 20865  2587  3B81               	subwfb	1,f
 20866  2588  317F               	addfsr 1,-1
 20867  2589  0008               	return
 20868  258A                     __end_of_slot_Running_Animation:	
 20869                           
 20870                           	psect	text19
 20871  217B                     __ptext19:	
 20872 ;; *************** function _slot_Finished_Animation *****************
 20873 ;; Defined at:
 20874 ;;		line 84 in file "slot_task.c"
 20875 ;; Parameters:    Size  Location     Type
 20876 ;;  taskData        2   29[BANK0 ] PTR void 
 20877 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 20878 ;;		 -> flashy_TaskData(30), NULL(0), 
 20879 ;; Auto vars:     Size  Location     Type
 20880 ;;  data            2   33[BANK0 ] PTR struct t_slot_taskDa
 20881 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 20882 ;;		 -> flashy_TaskData(30), NULL(0), 
 20883 ;; Return value:  Size  Location     Type
 20884 ;;                  1    wreg      void 
 20885 ;; Registers used:
 20886 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20887 ;; Tracked objects:
 20888 ;;		On entry : 0/0
 20889 ;;		On exit  : 0/0
 20890 ;;		Unchanged: 0/0
 20891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20892 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20893 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20894 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20895 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20896 ;;Total ram usage:        6 bytes
 20897 ;; Hardware stack levels used:    1
 20898 ;; Hardware stack levels required when called:   10
 20899 ;; This function calls:
 20900 ;;		_led_rand
 20901 ;; This function is called by:
 20902 ;;		_slot_Main
 20903 ;; This function uses a non-reentrant model
 20904 ;;
 20905                           
 20906                           
 20907                           ;psect for function _slot_Finished_Animation
 20908  217B                     _slot_Finished_Animation:	
 20909                           
 20910                           ;slot_task.c: 85: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 20911                           
 20912                           ;incstack = 0
 20913                           ; Regs used in _slot_Finished_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 20914  217B  0020               	movlb	0	; select bank0
 20915  217C  083E               	movf	slot_Finished_Animation@taskData+1,w
 20916  217D  00C2               	movwf	slot_Finished_Animation@data+1
 20917  217E  083D               	movf	slot_Finished_Animation@taskData,w
 20918  217F  00C1               	movwf	slot_Finished_Animation@data
 20919                           
 20920                           ;slot_task.c: 86: if (data->delayTickCount < 1){
 20921  2180  0841               	movf	slot_Finished_Animation@data,w
 20922  2181  0086               	movwf	6
 20923  2182  0842               	movf	slot_Finished_Animation@data+1,w
 20924  2183  0087               	movwf	7
 20925  2184  3145               	addfsr 1,5
 20926  2185  0016               	moviw fsr1++
 20927  2186  0401               	iorwf	1,w
 20928  2187  1D03               	btfss	3,2
 20929  2188  2996               	goto	l7614
 20930                           
 20931                           ;slot_task.c: 87: led_rand();
 20932  2189  31A5  25D1         	fcall	_led_rand
 20933                           
 20934                           ;slot_task.c: 88: data->delayTickCount = 10;
 20935  218B  0020               	movlb	0	; select bank0
 20936  218C  0841               	movf	slot_Finished_Animation@data,w
 20937  218D  0086               	movwf	6
 20938  218E  0842               	movf	slot_Finished_Animation@data+1,w
 20939  218F  0087               	movwf	7
 20940  2190  3145               	addfsr 1,5
 20941  2191  300A               	movlw	10
 20942  2192  3FC0               	movwi [0]fsr1
 20943  2193  3000               	movlw	0
 20944  2194  3FC1               	movwi [1]fsr1
 20945                           
 20946                           ;slot_task.c: 89: }
 20947  2195  0008               	return
 20948  2196                     l7614:	
 20949                           
 20950                           ;slot_task.c: 90: else {
 20951                           ;slot_task.c: 91: data->delayTickCount -= 1;
 20952  2196  0841               	movf	slot_Finished_Animation@data,w
 20953  2197  0086               	movwf	6
 20954  2198  0842               	movf	slot_Finished_Animation@data+1,w
 20955  2199  0087               	movwf	7
 20956  219A  3145               	addfsr 1,5
 20957  219B  3001               	movlw	1
 20958  219C  0281               	subwf	1,f
 20959  219D  3141               	addfsr 1,1
 20960  219E  3000               	movlw	0
 20961  219F  3B81               	subwfb	1,f
 20962  21A0  317F               	addfsr 1,-1
 20963  21A1  0008               	return
 20964  21A2                     __end_of_slot_Finished_Animation:	
 20965                           
 20966                           	psect	text20
 20967  22B3                     __ptext20:	
 20968 ;; *************** function _secret_clear *****************
 20969 ;; Defined at:
 20970 ;;		line 178 in file "secret_task.c"
 20971 ;; Parameters:    Size  Location     Type
 20972 ;;  data            2    1[COMMON] PTR struct t_secret_task
 20973 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 20974 ;;		 -> flashy_TaskData(30), NULL(0), 
 20975 ;; Auto vars:     Size  Location     Type
 20976 ;;		None
 20977 ;; Return value:  Size  Location     Type
 20978 ;;                  1    wreg      void 
 20979 ;; Registers used:
 20980 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20981 ;; Tracked objects:
 20982 ;;		On entry : 0/0
 20983 ;;		On exit  : 0/0
 20984 ;;		Unchanged: 0/0
 20985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20986 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20989 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20990 ;;Total ram usage:        2 bytes
 20991 ;; Hardware stack levels used:    1
 20992 ;; Hardware stack levels required when called:    4
 20993 ;; This function calls:
 20994 ;;		Nothing
 20995 ;; This function is called by:
 20996 ;;		_secret_Main
 20997 ;; This function uses a non-reentrant model
 20998 ;;
 20999                           
 21000                           
 21001                           ;psect for function _secret_clear
 21002  22B3                     _secret_clear:	
 21003                           
 21004                           ;secret_task.c: 180: data->delayTickCount = 300;
 21005                           
 21006                           ;incstack = 0
 21007                           ; Regs used in _secret_clear: [wreg+fsr1l+fsr1h+status,2+status,0]
 21008  22B3  0871               	movf	secret_clear@data,w
 21009  22B4  0086               	movwf	6
 21010  22B5  0872               	movf	secret_clear@data+1,w
 21011  22B6  0087               	movwf	7
 21012  22B7  3142               	addfsr 1,2
 21013  22B8  302C               	movlw	44
 21014  22B9  3FC0               	movwi [0]fsr1
 21015  22BA  3001               	movlw	1
 21016  22BB  3FC1               	movwi [1]fsr1
 21017                           
 21018                           ;secret_task.c: 181: data->holdCountA = 0;
 21019  22BC  0871               	movf	secret_clear@data,w
 21020  22BD  0086               	movwf	6
 21021  22BE  0872               	movf	secret_clear@data+1,w
 21022  22BF  0087               	movwf	7
 21023  22C0  3144               	addfsr 1,4
 21024  22C1  3000               	movlw	0
 21025  22C2  3FC0               	movwi [0]fsr1
 21026  22C3  3FC1               	movwi [1]fsr1
 21027                           
 21028                           ;secret_task.c: 182: data->holdCountB = 0;
 21029  22C4  0871               	movf	secret_clear@data,w
 21030  22C5  0086               	movwf	6
 21031  22C6  0872               	movf	secret_clear@data+1,w
 21032  22C7  0087               	movwf	7
 21033  22C8  3146               	addfsr 1,6
 21034  22C9  3000               	movlw	0
 21035  22CA  3FC0               	movwi [0]fsr1
 21036  22CB  3FC1               	movwi [1]fsr1
 21037                           
 21038                           ;secret_task.c: 183: data->holdCountX = 0;
 21039  22CC  0871               	movf	secret_clear@data,w
 21040  22CD  0086               	movwf	6
 21041  22CE  0872               	movf	secret_clear@data+1,w
 21042  22CF  0087               	movwf	7
 21043  22D0  3148               	addfsr 1,8
 21044  22D1  3000               	movlw	0
 21045  22D2  3FC0               	movwi [0]fsr1
 21046  22D3  3FC1               	movwi [1]fsr1
 21047                           
 21048                           ;secret_task.c: 184: data->holdCountY = 0;
 21049  22D4  0871               	movf	secret_clear@data,w
 21050  22D5  0086               	movwf	6
 21051  22D6  0872               	movf	secret_clear@data+1,w
 21052  22D7  0087               	movwf	7
 21053  22D8  314A               	addfsr 1,10
 21054  22D9  3000               	movlw	0
 21055  22DA  3FC0               	movwi [0]fsr1
 21056  22DB  3FC1               	movwi [1]fsr1
 21057                           
 21058                           ;secret_task.c: 185: data->noholdCount = 0;
 21059  22DC  0871               	movf	secret_clear@data,w
 21060  22DD  0086               	movwf	6
 21061  22DE  0872               	movf	secret_clear@data+1,w
 21062  22DF  0087               	movwf	7
 21063  22E0  314C               	addfsr 1,12
 21064  22E1  3000               	movlw	0
 21065  22E2  3FC0               	movwi [0]fsr1
 21066  22E3  3FC1               	movwi [1]fsr1
 21067  22E4  0008               	return
 21068  22E5                     __end_of_secret_clear:	
 21069                           
 21070                           	psect	text21
 21071  1CAD                     __ptext21:	
 21072 ;; *************** function _secret_check *****************
 21073 ;; Defined at:
 21074 ;;		line 69 in file "secret_task.c"
 21075 ;; Parameters:    Size  Location     Type
 21076 ;;  data            2    7[COMMON] PTR struct t_secret_task
 21077 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 21078 ;;		 -> flashy_TaskData(30), NULL(0), 
 21079 ;;  buttonPresse    1    9[COMMON] unsigned char 
 21080 ;; Auto vars:     Size  Location     Type
 21081 ;;  i               2    8[BANK0 ] unsigned int 
 21082 ;;  hit_counter     6    0        unsigned char [6]
 21083 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 21084 ;;  size            2    3[BANK0 ] unsigned int 
 21085 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 21086 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), 
 21087 ;; Return value:  Size  Location     Type
 21088 ;;                  1    wreg      unsigned char 
 21089 ;; Registers used:
 21090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21091 ;; Tracked objects:
 21092 ;;		On entry : 0/0
 21093 ;;		On exit  : 0/0
 21094 ;;		Unchanged: 0/0
 21095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21096 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21097 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21098 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21099 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21100 ;;Total ram usage:       13 bytes
 21101 ;; Hardware stack levels used:    1
 21102 ;; Hardware stack levels required when called:    5
 21103 ;; This function calls:
 21104 ;;		___bmul
 21105 ;;		_strlen
 21106 ;; This function is called by:
 21107 ;;		_secret_Main
 21108 ;; This function uses a non-reentrant model
 21109 ;;
 21110                           
 21111                           
 21112                           ;psect for function _secret_check
 21113  1CAD                     _secret_check:	
 21114                           
 21115                           ;secret_task.c: 70: u8 *inputs;
 21116                           ;secret_task.c: 71: u16 size = sizeof(secret_inputs) / sizeof(secret_inputs[0]);
 21117                           
 21118                           ;incstack = 0
 21119                           ; Regs used in _secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21120  1CAD  3001               	movlw	1
 21121  1CAE  0020               	movlb	0	; select bank0
 21122  1CAF  00A3               	movwf	secret_check@size
 21123  1CB0  3000               	movlw	0
 21124  1CB1  00A4               	movwf	secret_check@size+1
 21125                           
 21126                           ;secret_task.c: 72: u16 currents_size;
 21127                           ;secret_task.c: 73: char hit_counter[6];
 21128                           ;secret_task.c: 75: for (u16 i = 0; i < size; i++){
 21129  1CB2  01A8               	clrf	secret_check@i
 21130  1CB3  01A9               	clrf	secret_check@i+1
 21131  1CB4                     l7570:	
 21132  1CB4  0824               	movf	secret_check@size+1,w
 21133  1CB5  0229               	subwf	secret_check@i+1,w
 21134  1CB6  1D03               	skipz
 21135  1CB7  2CBA               	goto	u4835
 21136  1CB8  0823               	movf	secret_check@size,w
 21137  1CB9  0228               	subwf	secret_check@i,w
 21138  1CBA                     u4835:	
 21139  1CBA  1803               	btfsc	3,0
 21140  1CBB  2D66               	goto	l7572
 21141                           
 21142                           ;secret_task.c: 76: inputs = secret_inputs[i].inputs;
 21143  1CBC  3019               	movlw	25
 21144  1CBD  00A0               	movwf	??_secret_check
 21145  1CBE  0820               	movf	??_secret_check,w
 21146  1CBF  00F1               	movwf	___bmul@multiplicand
 21147  1CC0  0828               	movf	secret_check@i,w
 21148  1CC1  31AF  271A  319C   	fcall	___bmul
 21149  1CC4  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 21150  1CC5  0020               	movlb	0	; select bank0
 21151  1CC6  00A1               	movwf	??_secret_check+1
 21152  1CC7  0821               	movf	??_secret_check+1,w
 21153  1CC8  00A7               	movwf	secret_check@inputs
 21154                           
 21155                           ;secret_task.c: 78: if (buttonPressed == inputs[secret_inputs[i].idx]){
 21156  1CC9  3019               	movlw	25
 21157  1CCA  00A0               	movwf	??_secret_check
 21158  1CCB  0820               	movf	??_secret_check,w
 21159  1CCC  00F1               	movwf	___bmul@multiplicand
 21160  1CCD  0828               	movf	secret_check@i,w
 21161  1CCE  31AF  271A  319C   	fcall	___bmul
 21162  1CD1  3E14               	addlw	20
 21163  1CD2  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 21164  1CD3  0086               	movwf	6
 21165  1CD4  3002               	movlw	2	; select bank4/5
 21166  1CD5  0087               	movwf	7
 21167  1CD6  0801               	movf	1,w
 21168  1CD7  0020               	movlb	0	; select bank0
 21169  1CD8  0727               	addwf	secret_check@inputs,w
 21170  1CD9  00A1               	movwf	??_secret_check+1
 21171  1CDA  0821               	movf	??_secret_check+1,w
 21172  1CDB  0086               	movwf	6
 21173  1CDC  3002               	movlw	2	; select bank4/5
 21174  1CDD  0087               	movwf	7
 21175  1CDE  0801               	movf	1,w
 21176  1CDF  0679               	xorwf	secret_check@buttonPressed,w
 21177  1CE0  1D03               	skipz
 21178  1CE1  2D4F               	goto	l7566
 21179                           
 21180                           ;secret_task.c: 79: currents_size = strlen((const char *)inputs);
 21181  1CE2  0827               	movf	secret_check@inputs,w
 21182  1CE3  00F1               	movwf	strlen@s
 21183  1CE4  3002               	movlw	2
 21184  1CE5  00F2               	movwf	strlen@s+1
 21185  1CE6  31A0  20D3  319C   	fcall	_strlen
 21186  1CE9  0872               	movf	?_strlen+1,w
 21187  1CEA  0020               	movlb	0	; select bank0
 21188  1CEB  00A6               	movwf	secret_check@currents_size+1
 21189  1CEC  0871               	movf	?_strlen,w
 21190  1CED  00A5               	movwf	secret_check@currents_size
 21191                           
 21192                           ;secret_task.c: 80: secret_inputs[i].idx++;
 21193  1CEE  3019               	movlw	25
 21194  1CEF  00A0               	movwf	??_secret_check
 21195  1CF0  0820               	movf	??_secret_check,w
 21196  1CF1  00F1               	movwf	___bmul@multiplicand
 21197  1CF2  0828               	movf	secret_check@i,w
 21198  1CF3  31AF  271A  319C   	fcall	___bmul
 21199  1CF6  3E14               	addlw	20
 21200  1CF7  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 21201  1CF8  0086               	movwf	6
 21202  1CF9  3002               	movlw	2	; select bank4/5
 21203  1CFA  0087               	movwf	7
 21204  1CFB  3001               	movlw	1
 21205  1CFC  0781               	addwf	1,f
 21206  1CFD  3141               	addfsr 1,1
 21207  1CFE  1803               	skipnc
 21208  1CFF  0A81               	incf	1,f
 21209                           
 21210                           ;secret_task.c: 82: if (secret_inputs[i].idx == currents_size) {
 21211  1D00  3019               	movlw	25
 21212  1D01  0020               	movlb	0	; select bank0
 21213  1D02  00A0               	movwf	??_secret_check
 21214  1D03  0820               	movf	??_secret_check,w
 21215  1D04  00F1               	movwf	___bmul@multiplicand
 21216  1D05  0828               	movf	secret_check@i,w
 21217  1D06  31AF  271A  319C   	fcall	___bmul
 21218  1D09  3E14               	addlw	20
 21219  1D0A  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 21220  1D0B  0086               	movwf	6
 21221  1D0C  3002               	movlw	2	; select bank4/5
 21222  1D0D  0087               	movwf	7
 21223  1D0E  3F40               	moviw [0]fsr1
 21224  1D0F  0020               	movlb	0	; select bank0
 21225  1D10  00A1               	movwf	??_secret_check+1
 21226  1D11  3F41               	moviw [1]fsr1
 21227  1D12  00A2               	movwf	??_secret_check+2
 21228  1D13  0826               	movf	secret_check@currents_size+1,w
 21229  1D14  0622               	xorwf	??_secret_check+2,w
 21230  1D15  1D03               	skipz
 21231  1D16  2D19               	goto	u4825
 21232  1D17  0825               	movf	secret_check@currents_size,w
 21233  1D18  0621               	xorwf	??_secret_check+1,w
 21234  1D19                     u4825:	
 21235  1D19  1D03               	skipz
 21236  1D1A  2D60               	goto	l7568
 21237                           
 21238                           ;secret_task.c: 84: secret_inputs[i].idx = 0;
 21239  1D1B  3019               	movlw	25
 21240  1D1C  00A0               	movwf	??_secret_check
 21241  1D1D  0820               	movf	??_secret_check,w
 21242  1D1E  00F1               	movwf	___bmul@multiplicand
 21243  1D1F  0828               	movf	secret_check@i,w
 21244  1D20  31AF  271A  319C   	fcall	___bmul
 21245  1D23  3E14               	addlw	20
 21246  1D24  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 21247  1D25  0086               	movwf	6
 21248  1D26  3002               	movlw	2	; select bank4/5
 21249  1D27  0087               	movwf	7
 21250  1D28  3000               	movlw	0
 21251  1D29  3FC0               	movwi [0]fsr1
 21252  1D2A  3FC1               	movwi [1]fsr1
 21253                           
 21254                           ;secret_task.c: 87: *(secret_inputs[i].variable) = (u16) secret_inputs[i].value;
 21255  1D2B  3019               	movlw	25
 21256  1D2C  0020               	movlb	0	; select bank0
 21257  1D2D  00A0               	movwf	??_secret_check
 21258  1D2E  0820               	movf	??_secret_check,w
 21259  1D2F  00F1               	movwf	___bmul@multiplicand
 21260  1D30  0828               	movf	secret_check@i,w
 21261  1D31  31AF  271A  319C   	fcall	___bmul
 21262  1D34  3E17               	addlw	23
 21263  1D35  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 21264  1D36  0086               	movwf	6
 21265  1D37  3002               	movlw	2	; select bank4/5
 21266  1D38  0087               	movwf	7
 21267  1D39  3019               	movlw	25
 21268  1D3A  0020               	movlb	0	; select bank0
 21269  1D3B  00A1               	movwf	??_secret_check+1
 21270  1D3C  0821               	movf	??_secret_check+1,w
 21271  1D3D  00F1               	movwf	___bmul@multiplicand
 21272  1D3E  0828               	movf	secret_check@i,w
 21273  1D3F  31AF  271A         	fcall	___bmul
 21274  1D41  3E16               	addlw	22
 21275  1D42  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 21276  1D43  0084               	movwf	4
 21277  1D44  3002               	movlw	2	; select bank4/5
 21278  1D45  0085               	movwf	5
 21279  1D46  0800               	movf	0,w
 21280  1D47  0084               	movwf	4
 21281  1D48  0185               	clrf	5
 21282  1D49  3F40               	moviw [0]fsr1
 21283  1D4A  3F80               	movwi [0]fsr0
 21284  1D4B  3F41               	moviw [1]fsr1
 21285  1D4C  3F81               	movwi [1]fsr0
 21286                           
 21287                           ;secret_task.c: 89: return 1;
 21288  1D4D  3001               	movlw	1
 21289  1D4E  0008               	return
 21290  1D4F                     l7566:	
 21291                           ;secret_task.c: 90: }
 21292                           ;secret_task.c: 91: } else {
 21293                           
 21294                           
 21295                           ;secret_task.c: 93: secret_inputs[i].idx = 0;
 21296  1D4F  3019               	movlw	25
 21297  1D50  0020               	movlb	0	; select bank0
 21298  1D51  00A0               	movwf	??_secret_check
 21299  1D52  0820               	movf	??_secret_check,w
 21300  1D53  00F1               	movwf	___bmul@multiplicand
 21301  1D54  0828               	movf	secret_check@i,w
 21302  1D55  31AF  271A  319C   	fcall	___bmul
 21303  1D58  3E14               	addlw	20
 21304  1D59  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 21305  1D5A  0086               	movwf	6
 21306  1D5B  3002               	movlw	2	; select bank4/5
 21307  1D5C  0087               	movwf	7
 21308  1D5D  3000               	movlw	0
 21309  1D5E  3FC0               	movwi [0]fsr1
 21310  1D5F  3FC1               	movwi [1]fsr1
 21311  1D60                     l7568:	
 21312  1D60  3001               	movlw	1
 21313  1D61  0020               	movlb	0	; select bank0
 21314  1D62  07A8               	addwf	secret_check@i,f
 21315  1D63  3000               	movlw	0
 21316  1D64  3DA9               	addwfc	secret_check@i+1,f
 21317  1D65  2CB4               	goto	l7570
 21318  1D66                     l7572:	
 21319                           
 21320                           ;secret_task.c: 94: }
 21321                           ;secret_task.c: 95: }
 21322                           ;secret_task.c: 96: return 0;
 21323  1D66  3000               	movlw	0
 21324  1D67  0008               	return
 21325  1D68                     __end_of_secret_check:	
 21326                           
 21327                           	psect	text22
 21328  2F1A                     __ptext22:	
 21329 ;; *************** function ___bmul *****************
 21330 ;; Defined at:
 21331 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul8.c"
 21332 ;; Parameters:    Size  Location     Type
 21333 ;;  multiplier      1    wreg     unsigned char 
 21334 ;;  multiplicand    1    1[COMMON] unsigned char 
 21335 ;; Auto vars:     Size  Location     Type
 21336 ;;  multiplier      1    4[COMMON] unsigned char 
 21337 ;;  product         1    3[COMMON] unsigned char 
 21338 ;; Return value:  Size  Location     Type
 21339 ;;                  1    wreg      unsigned char 
 21340 ;; Registers used:
 21341 ;;		wreg, status,2, status,0
 21342 ;; Tracked objects:
 21343 ;;		On entry : 0/0
 21344 ;;		On exit  : 0/0
 21345 ;;		Unchanged: 0/0
 21346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21347 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21348 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21349 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21350 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21351 ;;Total ram usage:        4 bytes
 21352 ;; Hardware stack levels used:    1
 21353 ;; Hardware stack levels required when called:    4
 21354 ;; This function calls:
 21355 ;;		Nothing
 21356 ;; This function is called by:
 21357 ;;		_secret_check
 21358 ;; This function uses a non-reentrant model
 21359 ;;
 21360                           
 21361                           
 21362                           ;psect for function ___bmul
 21363  2F1A                     ___bmul:	
 21364                           
 21365                           ;incstack = 0
 21366                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 21367                           ;___bmul@multiplier stored from wreg
 21368  2F1A  00F4               	movwf	___bmul@multiplier
 21369  2F1B  01F3               	clrf	___bmul@product
 21370  2F1C                     l7242:	
 21371  2F1C  1C74               	btfss	___bmul@multiplier,0
 21372  2F1D  2F22               	goto	l7246
 21373  2F1E  0871               	movf	___bmul@multiplicand,w
 21374  2F1F  00F2               	movwf	??___bmul
 21375  2F20  0872               	movf	??___bmul,w
 21376  2F21  07F3               	addwf	___bmul@product,f
 21377  2F22                     l7246:	
 21378  2F22  1003               	clrc
 21379  2F23  0DF1               	rlf	___bmul@multiplicand,f
 21380  2F24  1003               	clrc
 21381  2F25  0CF4               	rrf	___bmul@multiplier,f
 21382  2F26  0874               	movf	___bmul@multiplier,w
 21383  2F27  1D03               	btfss	3,2
 21384  2F28  2F1C               	goto	l7242
 21385  2F29  0873               	movf	___bmul@product,w
 21386  2F2A  0008               	return
 21387  2F2B                     __end_of___bmul:	
 21388                           
 21389                           	psect	text23
 21390  23C2                     __ptext23:	
 21391 ;; *************** function _menu_run_option *****************
 21392 ;; Defined at:
 21393 ;;		line 181 in file "menu_task.c"
 21394 ;; Parameters:    Size  Location     Type
 21395 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 21396 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 21397 ;;		 -> flashy_TaskData(30), NULL(0), 
 21398 ;; Auto vars:     Size  Location     Type
 21399 ;;		None
 21400 ;; Return value:  Size  Location     Type
 21401 ;;                  1    wreg      void 
 21402 ;; Registers used:
 21403 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21404 ;; Tracked objects:
 21405 ;;		On entry : 0/0
 21406 ;;		On exit  : 0/0
 21407 ;;		Unchanged: 0/0
 21408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21409 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21412 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21413 ;;Total ram usage:        2 bytes
 21414 ;; Hardware stack levels used:    1
 21415 ;; Hardware stack levels required when called:   11
 21416 ;; This function calls:
 21417 ;;		_menu_clear
 21418 ;; This function is called by:
 21419 ;;		_menu_Main
 21420 ;; This function uses a non-reentrant model
 21421 ;;
 21422                           
 21423                           
 21424                           ;psect for function _menu_run_option
 21425  23C2                     _menu_run_option:	
 21426                           
 21427                           ;menu_task.c: 182: switch (menu_option_idx){
 21428                           
 21429                           ;incstack = 0
 21430                           ; Regs used in _menu_run_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21431  23C2  2BEA               	goto	l7358
 21432  23C3                     l7344:	
 21433                           ;menu_task.c: 183: case 1:
 21434                           
 21435                           
 21436                           ;menu_task.c: 184: menu_clear(data);
 21437  23C3  0020               	movlb	0	; select bank0
 21438  23C4  083C               	movf	menu_run_option@data+1,w
 21439  23C5  00BA               	movwf	menu_clear@data+1
 21440  23C6  083B               	movf	menu_run_option@data,w
 21441  23C7  00B9               	movwf	menu_clear@data
 21442  23C8  31A5  258A         	fcall	_menu_clear
 21443                           
 21444                           ;menu_task.c: 185: currentTask = SLOT_TASK;
 21445  23CA  3001               	movlw	1
 21446  23CB  0021               	movlb	1	; select bank1
 21447  23CC  00B8               	movwf	_currentTask^(0+128)
 21448  23CD  3000               	movlw	0
 21449  23CE  00B9               	movwf	(_currentTask^(0+128)+1)
 21450                           
 21451                           ;menu_task.c: 186: break;
 21452  23CF  0008               	return
 21453  23D0                     l7348:	
 21454                           ;menu_task.c: 187: case 2:
 21455                           
 21456                           
 21457                           ;menu_task.c: 188: menu_clear(data);
 21458  23D0  0020               	movlb	0	; select bank0
 21459  23D1  083C               	movf	menu_run_option@data+1,w
 21460  23D2  00BA               	movwf	menu_clear@data+1
 21461  23D3  083B               	movf	menu_run_option@data,w
 21462  23D4  00B9               	movwf	menu_clear@data
 21463  23D5  31A5  258A         	fcall	_menu_clear
 21464                           
 21465                           ;menu_task.c: 189: currentTask = LOCKED_TASK;
 21466  23D7  3003               	movlw	3
 21467  23D8  0021               	movlb	1	; select bank1
 21468  23D9  00B8               	movwf	_currentTask^(0+128)
 21469  23DA  3000               	movlw	0
 21470  23DB  00B9               	movwf	(_currentTask^(0+128)+1)
 21471                           
 21472                           ;menu_task.c: 190: break;
 21473  23DC  0008               	return
 21474  23DD                     l7352:	
 21475                           ;menu_task.c: 191: case 3:
 21476                           
 21477                           
 21478                           ;menu_task.c: 192: menu_clear(data);
 21479  23DD  0020               	movlb	0	; select bank0
 21480  23DE  083C               	movf	menu_run_option@data+1,w
 21481  23DF  00BA               	movwf	menu_clear@data+1
 21482  23E0  083B               	movf	menu_run_option@data,w
 21483  23E1  00B9               	movwf	menu_clear@data
 21484  23E2  31A5  258A         	fcall	_menu_clear
 21485                           
 21486                           ;menu_task.c: 193: currentTask = FLASHY_TASK;
 21487  23E4  3002               	movlw	2
 21488  23E5  0021               	movlb	1	; select bank1
 21489  23E6  00B8               	movwf	_currentTask^(0+128)
 21490  23E7  3000               	movlw	0
 21491  23E8  00B9               	movwf	(_currentTask^(0+128)+1)
 21492                           
 21493                           ;menu_task.c: 195: }
 21494                           
 21495                           ;menu_task.c: 194: break;
 21496  23E9  0008               	return
 21497  23EA                     l7358:	
 21498                           
 21499                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21500                           ; Switch size 1, requested type "space"
 21501                           ; Number of cases is 1, Range of values is 0 to 0
 21502                           ; switch strategies available:
 21503                           ; Name         Instructions Cycles
 21504                           ; simple_byte            4     3 (average)
 21505                           ; direct_byte            8     6 (fixed)
 21506                           ; jumptable            260     6 (fixed)
 21507                           ;	Chosen strategy is simple_byte
 21508  23EA  0021               	movlb	1	; select bank1
 21509  23EB  0835               	movf	(_menu_option_idx+1)^(0+128),w
 21510  23EC  3A00               	xorlw	0	; case 0
 21511  23ED  1903               	skipnz
 21512  23EE  2BF0               	goto	l8998
 21513  23EF  2BFB               	goto	l999
 21514  23F0                     l8998:	
 21515                           
 21516                           ; Switch size 1, requested type "space"
 21517                           ; Number of cases is 3, Range of values is 1 to 3
 21518                           ; switch strategies available:
 21519                           ; Name         Instructions Cycles
 21520                           ; simple_byte           10     6 (average)
 21521                           ; direct_byte           15     9 (fixed)
 21522                           ; jumptable            263     9 (fixed)
 21523                           ;	Chosen strategy is simple_byte
 21524  23F0  0834               	movf	_menu_option_idx^(0+128),w
 21525  23F1  3A01               	xorlw	1	; case 1
 21526  23F2  1903               	skipnz
 21527  23F3  2BC3               	goto	l7344
 21528  23F4  3A03               	xorlw	3	; case 2
 21529  23F5  1903               	skipnz
 21530  23F6  2BD0               	goto	l7348
 21531  23F7  3A01               	xorlw	1	; case 3
 21532  23F8  1903               	skipnz
 21533  23F9  2BDD               	goto	l7352
 21534  23FA  2BFB               	goto	l999
 21535  23FB                     l999:	
 21536  23FB  0008               	return
 21537  23FC                     __end_of_menu_run_option:	
 21538                           
 21539                           	psect	text24
 21540  258A                     __ptext24:	
 21541 ;; *************** function _menu_clear *****************
 21542 ;; Defined at:
 21543 ;;		line 198 in file "menu_task.c"
 21544 ;; Parameters:    Size  Location     Type
 21545 ;;  data            2   25[BANK0 ] PTR struct t_menu_taskDa
 21546 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 21547 ;;		 -> flashy_TaskData(30), NULL(0), 
 21548 ;; Auto vars:     Size  Location     Type
 21549 ;;		None
 21550 ;; Return value:  Size  Location     Type
 21551 ;;                  1    wreg      void 
 21552 ;; Registers used:
 21553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21554 ;; Tracked objects:
 21555 ;;		On entry : 0/0
 21556 ;;		On exit  : 0/0
 21557 ;;		Unchanged: 0/0
 21558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21559 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21562 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21563 ;;Total ram usage:        2 bytes
 21564 ;; Hardware stack levels used:    1
 21565 ;; Hardware stack levels required when called:   10
 21566 ;; This function calls:
 21567 ;;		_nullifyBadge_segDisplayErase
 21568 ;;		_nullifyBadge_userLedsClr
 21569 ;; This function is called by:
 21570 ;;		_menu_Main
 21571 ;;		_menu_run_option
 21572 ;; This function uses a non-reentrant model
 21573 ;;
 21574                           
 21575                           
 21576                           ;psect for function _menu_clear
 21577  258A                     _menu_clear:	
 21578                           
 21579                           ;menu_task.c: 200: data->delayTickCount = 50;
 21580                           
 21581                           ;incstack = 0
 21582                           ; Regs used in _menu_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21583  258A  0020               	movlb	0	; select bank0
 21584  258B  0839               	movf	menu_clear@data,w
 21585  258C  0086               	movwf	6
 21586  258D  083A               	movf	menu_clear@data+1,w
 21587  258E  0087               	movwf	7
 21588  258F  3142               	addfsr 1,2
 21589  2590  3032               	movlw	50
 21590  2591  3FC0               	movwi [0]fsr1
 21591  2592  3000               	movlw	0
 21592  2593  3FC1               	movwi [1]fsr1
 21593                           
 21594                           ;menu_task.c: 201: data->holdCountA = 0;
 21595  2594  0839               	movf	menu_clear@data,w
 21596  2595  0086               	movwf	6
 21597  2596  083A               	movf	menu_clear@data+1,w
 21598  2597  0087               	movwf	7
 21599  2598  3144               	addfsr 1,4
 21600  2599  3000               	movlw	0
 21601  259A  3FC0               	movwi [0]fsr1
 21602  259B  3FC1               	movwi [1]fsr1
 21603                           
 21604                           ;menu_task.c: 202: data->holdCountB = 0;
 21605  259C  0839               	movf	menu_clear@data,w
 21606  259D  0086               	movwf	6
 21607  259E  083A               	movf	menu_clear@data+1,w
 21608  259F  0087               	movwf	7
 21609  25A0  3146               	addfsr 1,6
 21610  25A1  3000               	movlw	0
 21611  25A2  3FC0               	movwi [0]fsr1
 21612  25A3  3FC1               	movwi [1]fsr1
 21613                           
 21614                           ;menu_task.c: 203: data->holdCountX = 0;
 21615  25A4  0839               	movf	menu_clear@data,w
 21616  25A5  0086               	movwf	6
 21617  25A6  083A               	movf	menu_clear@data+1,w
 21618  25A7  0087               	movwf	7
 21619  25A8  3148               	addfsr 1,8
 21620  25A9  3000               	movlw	0
 21621  25AA  3FC0               	movwi [0]fsr1
 21622  25AB  3FC1               	movwi [1]fsr1
 21623                           
 21624                           ;menu_task.c: 204: data->holdCountY = 0;
 21625  25AC  0839               	movf	menu_clear@data,w
 21626  25AD  0086               	movwf	6
 21627  25AE  083A               	movf	menu_clear@data+1,w
 21628  25AF  0087               	movwf	7
 21629  25B0  314A               	addfsr 1,10
 21630  25B1  3000               	movlw	0
 21631  25B2  3FC0               	movwi [0]fsr1
 21632  25B3  3FC1               	movwi [1]fsr1
 21633                           
 21634                           ;menu_task.c: 205: data->noholdCount = 0;
 21635  25B4  0839               	movf	menu_clear@data,w
 21636  25B5  0086               	movwf	6
 21637  25B6  083A               	movf	menu_clear@data+1,w
 21638  25B7  0087               	movwf	7
 21639  25B8  314C               	addfsr 1,12
 21640  25B9  3000               	movlw	0
 21641  25BA  3FC0               	movwi [0]fsr1
 21642  25BB  3FC1               	movwi [1]fsr1
 21643                           
 21644                           ;menu_task.c: 207: menu_option_idx = 0;
 21645  25BC  0021               	movlb	1	; select bank1
 21646  25BD  01B4               	clrf	_menu_option_idx^(0+128)
 21647  25BE  01B5               	clrf	(_menu_option_idx+1)^(0+128)
 21648                           
 21649                           ;menu_task.c: 210: nullifyBadge_userLedsClr(data->badge);
 21650  25BF  0020               	movlb	0	; select bank0
 21651  25C0  0839               	movf	menu_clear@data,w
 21652  25C1  0086               	movwf	6
 21653  25C2  083A               	movf	menu_clear@data+1,w
 21654  25C3  0087               	movwf	7
 21655  25C4  0801               	movf	1,w
 21656  25C5  31AE  260F  31A5   	fcall	_nullifyBadge_userLedsClr
 21657                           
 21658                           ;menu_task.c: 211: nullifyBadge_segDisplayErase(data->badge);
 21659  25C8  0020               	movlb	0	; select bank0
 21660  25C9  0839               	movf	menu_clear@data,w
 21661  25CA  0086               	movwf	6
 21662  25CB  083A               	movf	menu_clear@data+1,w
 21663  25CC  0087               	movwf	7
 21664  25CD  0801               	movf	1,w
 21665  25CE  31AE  2609         	fcall	_nullifyBadge_segDisplayErase
 21666  25D0  0008               	return
 21667  25D1                     __end_of_menu_clear:	
 21668                           
 21669                           	psect	text25
 21670  1867                     __ptext25:	
 21671 ;; *************** function _menu_display_option *****************
 21672 ;; Defined at:
 21673 ;;		line 162 in file "menu_task.c"
 21674 ;; Parameters:    Size  Location     Type
 21675 ;;  data            2   44[BANK0 ] PTR struct t_menu_taskDa
 21676 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 21677 ;;		 -> flashy_TaskData(30), NULL(0), 
 21678 ;; Auto vars:     Size  Location     Type
 21679 ;;  led             2   48[BANK0 ] unsigned int 
 21680 ;;  size            2   46[BANK0 ] unsigned int 
 21681 ;; Return value:  Size  Location     Type
 21682 ;;                  1    wreg      void 
 21683 ;; Registers used:
 21684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21685 ;; Tracked objects:
 21686 ;;		On entry : 0/0
 21687 ;;		On exit  : 0/0
 21688 ;;		Unchanged: 0/0
 21689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21690 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21691 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21693 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21694 ;;Total ram usage:        6 bytes
 21695 ;; Hardware stack levels used:    1
 21696 ;; Hardware stack levels required when called:   10
 21697 ;; This function calls:
 21698 ;;		___lwmod
 21699 ;;		_marquee
 21700 ;;		_nullifyBadge_segDisplayForceUpdate
 21701 ;;		_nullifyBadge_segDisplayPutStr
 21702 ;;		_nullifyBadge_userLedsSet
 21703 ;; This function is called by:
 21704 ;;		_menu_Main
 21705 ;; This function uses a non-reentrant model
 21706 ;;
 21707                           
 21708                           
 21709                           ;psect for function _menu_display_option
 21710  1867                     _menu_display_option:	
 21711                           
 21712                           ;menu_task.c: 163: u16 size = sizeof(menu_options_leds)/sizeof(menu_options_leds[0]);
 21713                           
 21714                           ;incstack = 0
 21715                           ; Regs used in _menu_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21716  1867  3005               	movlw	5
 21717  1868  0020               	movlb	0	; select bank0
 21718  1869  00CE               	movwf	menu_display_option@size
 21719  186A  3000               	movlw	0
 21720  186B  00CF               	movwf	menu_display_option@size+1
 21721                           
 21722                           ;menu_task.c: 164: u16 led = menu_options_leds[menu_option_idx % size];
 21723  186C  084F               	movf	menu_display_option@size+1,w
 21724  186D  00AC               	movwf	___lwmod@divisor+1
 21725  186E  084E               	movf	menu_display_option@size,w
 21726  186F  00AB               	movwf	___lwmod@divisor
 21727  1870  0021               	movlb	1	; select bank1
 21728  1871  0835               	movf	(_menu_option_idx+1)^(0+128),w
 21729  1872  0020               	movlb	0	; select bank0
 21730  1873  00AE               	movwf	___lwmod@dividend+1
 21731  1874  0021               	movlb	1	; select bank1
 21732  1875  0834               	movf	_menu_option_idx^(0+128),w
 21733  1876  0020               	movlb	0	; select bank0
 21734  1877  00AD               	movwf	___lwmod@dividend
 21735  1878  31A1  21F4  3198   	fcall	___lwmod
 21736  187B  0020               	movlb	0	; select bank0
 21737  187C  082B               	movf	?___lwmod,w
 21738  187D  0709               	addwf	9,w
 21739  187E  3EAC               	addlw	(low (_menu_options_leds| (0+256)))& (0+255)
 21740  187F  0086               	movwf	6
 21741  1880  3001               	movlw	1	; select bank3/4
 21742  1881  0087               	movwf	7
 21743  1882  3F40               	moviw [0]fsr1
 21744  1883  00D0               	movwf	menu_display_option@led
 21745  1884  3F41               	moviw [1]fsr1
 21746  1885  00D1               	movwf	menu_display_option@led+1
 21747                           
 21748                           ;menu_task.c: 170: nullifyBadge_userLedsSet(data->badge, led);
 21749  1886  0851               	movf	menu_display_option@led+1,w
 21750  1887  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 21751  1888  0850               	movf	menu_display_option@led,w
 21752  1889  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 21753  188A  084C               	movf	menu_display_option@data,w
 21754  188B  0086               	movwf	6
 21755  188C  084D               	movf	menu_display_option@data+1,w
 21756  188D  0087               	movwf	7
 21757  188E  0801               	movf	1,w
 21758  188F  31AF  2709  3198   	fcall	_nullifyBadge_userLedsSet
 21759                           
 21760                           ;menu_task.c: 172: if (menu_option_idx == 0){
 21761  1892  0021               	movlb	1	; select bank1
 21762  1893  0834               	movf	_menu_option_idx^(0+128),w
 21763  1894  0435               	iorwf	(_menu_option_idx+1)^(0+128),w
 21764  1895  1D03               	btfss	3,2
 21765  1896  28B2               	goto	l7340
 21766                           
 21767                           ;menu_task.c: 173: nullifyBadge_segDisplayPutStr(data->badge, menu_option[menu_option_id
      +                          x]);
 21768  1897  3534               	lslf	_menu_option_idx^(0+128),w
 21769  1898  3EB6               	addlw	(low (_menu_option| (0+256)))& (0+255)
 21770  1899  0086               	movwf	6
 21771  189A  3001               	movlw	1	; select bank3/4
 21772  189B  0087               	movwf	7
 21773  189C  3F40               	moviw [0]fsr1
 21774  189D  0020               	movlb	0	; select bank0
 21775  189E  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21776  189F  3F41               	moviw [1]fsr1
 21777  18A0  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21778  18A1  084C               	movf	menu_display_option@data,w
 21779  18A2  0086               	movwf	6
 21780  18A3  084D               	movf	menu_display_option@data+1,w
 21781  18A4  0087               	movwf	7
 21782  18A5  0801               	movf	1,w
 21783  18A6  31AE  264B  3198   	fcall	_nullifyBadge_segDisplayPutStr
 21784                           
 21785                           ;menu_task.c: 174: nullifyBadge_segDisplayForceUpdate(data->badge);
 21786  18A9  0020               	movlb	0	; select bank0
 21787  18AA  084C               	movf	menu_display_option@data,w
 21788  18AB  0086               	movwf	6
 21789  18AC  084D               	movf	menu_display_option@data+1,w
 21790  18AD  0087               	movwf	7
 21791  18AE  0801               	movf	1,w
 21792  18AF  31AE  2603         	fcall	_nullifyBadge_segDisplayForceUpdate
 21793                           
 21794                           ;menu_task.c: 175: }
 21795  18B1  0008               	return
 21796  18B2                     l7340:	
 21797                           
 21798                           ;menu_task.c: 176: else {
 21799                           ;menu_task.c: 177: marquee(menu_option[menu_option_idx], data->noholdCount);
 21800  18B2  0021               	movlb	1	; select bank1
 21801  18B3  3534               	lslf	_menu_option_idx^(0+128),w
 21802  18B4  3EB6               	addlw	(low (_menu_option| (0+256)))& (0+255)
 21803  18B5  0086               	movwf	6
 21804  18B6  3001               	movlw	1	; select bank3/4
 21805  18B7  0087               	movwf	7
 21806  18B8  3F40               	moviw [0]fsr1
 21807  18B9  0020               	movlb	0	; select bank0
 21808  18BA  00BA               	movwf	marquee@string
 21809  18BB  3F41               	moviw [1]fsr1
 21810  18BC  00BB               	movwf	marquee@string+1
 21811  18BD  084C               	movf	menu_display_option@data,w
 21812  18BE  0086               	movwf	6
 21813  18BF  084D               	movf	menu_display_option@data+1,w
 21814  18C0  0087               	movwf	7
 21815  18C1  314C               	addfsr 1,12
 21816  18C2  3F40               	moviw [0]fsr1
 21817  18C3  00BC               	movwf	marquee@count
 21818  18C4  3F41               	moviw [1]fsr1
 21819  18C5  00BD               	movwf	marquee@count+1
 21820  18C6  319B  2338         	fcall	_marquee
 21821  18C8  0008               	return
 21822  18C9                     __end_of_menu_display_option:	
 21823                           
 21824                           	psect	text26
 21825  2702                     __ptext26:	
 21826 ;; *************** function _slot_Setup *****************
 21827 ;; Defined at:
 21828 ;;		line 48 in file "slot_task.c"
 21829 ;; Parameters:    Size  Location     Type
 21830 ;;  taskData        2   15[BANK0 ] PTR void 
 21831 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 21832 ;;		 -> flashy_TaskData(30), NULL(0), 
 21833 ;; Auto vars:     Size  Location     Type
 21834 ;;  data            2   20[BANK0 ] PTR struct t_slot_taskDa
 21835 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 21836 ;;		 -> flashy_TaskData(30), NULL(0), 
 21837 ;; Return value:  Size  Location     Type
 21838 ;;                  1    wreg      void 
 21839 ;; Registers used:
 21840 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21841 ;; Tracked objects:
 21842 ;;		On entry : 0/0
 21843 ;;		On exit  : 0/0
 21844 ;;		Unchanged: 0/0
 21845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21846 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21847 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21848 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21849 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21850 ;;Total ram usage:        7 bytes
 21851 ;; Hardware stack levels used:    1
 21852 ;; Hardware stack levels required when called:    6
 21853 ;; This function calls:
 21854 ;;		___lwmod
 21855 ;;		_memset
 21856 ;;		_rand
 21857 ;; This function is called by:
 21858 ;;		_menu_Main
 21859 ;;		_locked_Main
 21860 ;;		_slot_Init
 21861 ;;		_slot_Main
 21862 ;; This function uses a non-reentrant model
 21863 ;;
 21864                           
 21865                           
 21866                           ;psect for function _slot_Setup
 21867  2702                     _slot_Setup:	
 21868                           
 21869                           ;slot_task.c: 49: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 21870                           
 21871                           ;incstack = 0
 21872                           ; Regs used in _slot_Setup: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21873  2702  0020               	movlb	0	; select bank0
 21874  2703  0830               	movf	slot_Setup@taskData+1,w
 21875  2704  00B5               	movwf	slot_Setup@data+1
 21876  2705  082F               	movf	slot_Setup@taskData,w
 21877  2706  00B4               	movwf	slot_Setup@data
 21878                           
 21879                           ;slot_task.c: 50: slot_taskData = data;
 21880  2707  0835               	movf	slot_Setup@data+1,w
 21881  2708  0021               	movlb	1	; select bank1
 21882  2709  00BB               	movwf	(_slot_taskData+1)^(0+128)
 21883  270A  0020               	movlb	0	; select bank0
 21884  270B  0834               	movf	slot_Setup@data,w
 21885  270C  0021               	movlb	1	; select bank1
 21886  270D  00BA               	movwf	_slot_taskData^(0+128)
 21887                           
 21888                           ;slot_task.c: 51: data->displayTickCount = 0;
 21889  270E  0020               	movlb	0	; select bank0
 21890  270F  0834               	movf	slot_Setup@data,w
 21891  2710  0086               	movwf	6
 21892  2711  0835               	movf	slot_Setup@data+1,w
 21893  2712  0087               	movwf	7
 21894  2713  3143               	addfsr 1,3
 21895  2714  3000               	movlw	0
 21896  2715  3FC0               	movwi [0]fsr1
 21897  2716  3FC1               	movwi [1]fsr1
 21898                           
 21899                           ;slot_task.c: 52: data->delayTickCount = 0;
 21900  2717  0834               	movf	slot_Setup@data,w
 21901  2718  0086               	movwf	6
 21902  2719  0835               	movf	slot_Setup@data+1,w
 21903  271A  0087               	movwf	7
 21904  271B  3145               	addfsr 1,5
 21905  271C  3000               	movlw	0
 21906  271D  3FC0               	movwi [0]fsr1
 21907  271E  3FC1               	movwi [1]fsr1
 21908                           
 21909                           ;slot_task.c: 53: memset(data->slot_print_buf, 0x00, 20);
 21910  271F  0834               	movf	slot_Setup@data,w
 21911  2720  3E0B               	addlw	11
 21912  2721  00F1               	movwf	memset@p1
 21913  2722  3000               	movlw	0
 21914  2723  3D35               	addwfc	slot_Setup@data+1,w
 21915  2724  00F2               	movwf	memset@p1+1
 21916  2725  3000               	movlw	0
 21917  2726  00F3               	movwf	memset@c
 21918  2727  00F4               	movwf	memset@c+1
 21919  2728  3014               	movlw	20
 21920  2729  00F5               	movwf	memset@n
 21921  272A  3000               	movlw	0
 21922  272B  00F6               	movwf	memset@n+1
 21923  272C  31AF  27CF  31A7   	fcall	_memset
 21924                           
 21925                           ;slot_task.c: 54: if (!badge_locked) {
 21926  272F  0021               	movlb	1	; select bank1
 21927  2730  0844               	movf	_badge_locked^(0+128),w
 21928  2731  1D03               	btfss	3,2
 21929  2732  2F4B               	goto	l7326
 21930                           
 21931                           ;slot_task.c: 55: Shot_Index = (u8)rand() % (sizeof(Shot_Options)/sizeof(Shot_Options[0]
      +                          ));
 21932  2733  3009               	movlw	9
 21933  2734  0020               	movlb	0	; select bank0
 21934  2735  00AB               	movwf	___lwmod@divisor
 21935  2736  3000               	movlw	0
 21936  2737  00AC               	movwf	___lwmod@divisor+1
 21937  2738  31A5  2501  31A7   	fcall	_rand
 21938  273B  0020               	movlb	0	; select bank0
 21939  273C  0824               	movf	?_rand,w
 21940  273D  00B1               	movwf	??_slot_Setup
 21941  273E  01B2               	clrf	??_slot_Setup+1
 21942  273F  0831               	movf	??_slot_Setup,w
 21943  2740  00AD               	movwf	___lwmod@dividend
 21944  2741  0832               	movf	??_slot_Setup+1,w
 21945  2742  00AE               	movwf	___lwmod@dividend+1
 21946  2743  31A1  21F4  31A7   	fcall	___lwmod
 21947  2746  0020               	movlb	0	; select bank0
 21948  2747  082B               	movf	?___lwmod,w
 21949  2748  00B3               	movwf	??_slot_Setup+2
 21950  2749  0833               	movf	??_slot_Setup+2,w
 21951  274A  2F4F               	goto	L13
 21952  274B                     l7326:	
 21953                           ;slot_task.c: 56: }
 21954                           
 21955                           
 21956                           ;slot_task.c: 57: else {
 21957                           ;slot_task.c: 58: Shot_Index = ((sizeof(Shot_Options)/sizeof(Shot_Options[0]))-1);
 21958  274B  3008               	movlw	8
 21959  274C  0020               	movlb	0	; select bank0
 21960  274D  00B1               	movwf	??_slot_Setup
 21961  274E  0831               	movf	??_slot_Setup,w
 21962  274F                     L13:	
 21963  274F  00FC               	movwf	_Shot_Index
 21964                           
 21965                           ;slot_task.c: 59: }
 21966                           ;slot_task.c: 61: Leds_idx = 1;
 21967  2750  3001               	movlw	1
 21968  2751  0021               	movlb	1	; select bank1
 21969  2752  00DD               	movwf	_Leds_idx^(0+128)
 21970  2753  3000               	movlw	0
 21971  2754  00DE               	movwf	(_Leds_idx^(0+128)+1)
 21972  2755  0008               	return
 21973  2756                     __end_of_slot_Setup:	
 21974                           
 21975                           	psect	text27
 21976  2F50                     __ptext27:	
 21977 ;; *************** function _locked_unlock_leds *****************
 21978 ;; Defined at:
 21979 ;;		line 37 in file "locked_task.c"
 21980 ;; Parameters:    Size  Location     Type
 21981 ;;		None
 21982 ;; Auto vars:     Size  Location     Type
 21983 ;;		None
 21984 ;; Return value:  Size  Location     Type
 21985 ;;                  2  1226[None  ] unsigned int 
 21986 ;; Registers used:
 21987 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21988 ;; Tracked objects:
 21989 ;;		On entry : 0/0
 21990 ;;		On exit  : 0/0
 21991 ;;		Unchanged: 0/0
 21992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21995 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21996 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21997 ;;Total ram usage:        2 bytes
 21998 ;; Hardware stack levels used:    1
 21999 ;; Hardware stack levels required when called:    4
 22000 ;; This function calls:
 22001 ;;		Nothing
 22002 ;; This function is called by:
 22003 ;;		_locked_Main
 22004 ;; This function uses a non-reentrant model
 22005 ;;
 22006                           
 22007                           
 22008                           ;psect for function _locked_unlock_leds
 22009  2F50                     _locked_unlock_leds:	
 22010                           
 22011                           ;locked_task.c: 38: locked_locking_leds_idx = 0;
 22012                           
 22013                           ;incstack = 0
 22014                           ; Regs used in _locked_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 22015  2F50  0021               	movlb	1	; select bank1
 22016  2F51  01A2               	clrf	_locked_locking_leds_idx^(0+128)
 22017  2F52  01A3               	clrf	(_locked_locking_leds_idx+1)^(0+128)
 22018                           
 22019                           ;locked_task.c: 39: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 22020  2F53  3522               	lslf	_locked_locking_leds_idx^(0+128),w
 22021  2F54  3EA0               	addlw	(low (_locked_locking_leds| (0+256)))& (0+255)
 22022  2F55  0086               	movwf	6
 22023  2F56  3001               	movlw	1	; select bank3/4
 22024  2F57  0087               	movwf	7
 22025  2F58  3F40               	moviw [0]fsr1
 22026  2F59  00F1               	movwf	??_locked_unlock_leds
 22027  2F5A  3F41               	moviw [1]fsr1
 22028  2F5B  00F2               	movwf	??_locked_unlock_leds+1
 22029  2F5C  085F               	movf	_locked_lock_base_leds^(0+128),w
 22030  2F5D  0471               	iorwf	??_locked_unlock_leds,w
 22031  2F5E  00A0               	movwf	_locked_leds^(0+128)
 22032  2F5F  0860               	movf	(_locked_lock_base_leds+1)^(0+128),w
 22033  2F60  0472               	iorwf	??_locked_unlock_leds+1,w
 22034  2F61  00A1               	movwf	(_locked_leds+1)^(0+128)
 22035  2F62  0008               	return
 22036  2F63                     __end_of_locked_unlock_leds:	
 22037                           ;locked_task.c: 40: return locked_leds;
 22038                           ;	Return value of _locked_unlock_leds is never used
 22039                           
 22040                           
 22041                           	psect	text28
 22042  202A                     __ptext28:	
 22043 ;; *************** function _locked_lock_leds *****************
 22044 ;; Defined at:
 22045 ;;		line 29 in file "locked_task.c"
 22046 ;; Parameters:    Size  Location     Type
 22047 ;;		None
 22048 ;; Auto vars:     Size  Location     Type
 22049 ;;  size            2    3[COMMON] unsigned int 
 22050 ;; Return value:  Size  Location     Type
 22051 ;;                  2  1223[None  ] unsigned int 
 22052 ;; Registers used:
 22053 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 22054 ;; Tracked objects:
 22055 ;;		On entry : 0/0
 22056 ;;		On exit  : 0/0
 22057 ;;		Unchanged: 0/0
 22058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22060 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22062 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22063 ;;Total ram usage:        4 bytes
 22064 ;; Hardware stack levels used:    1
 22065 ;; Hardware stack levels required when called:    4
 22066 ;; This function calls:
 22067 ;;		Nothing
 22068 ;; This function is called by:
 22069 ;;		_locked_Init
 22070 ;;		_locked_Main
 22071 ;; This function uses a non-reentrant model
 22072 ;;
 22073                           
 22074                           
 22075                           ;psect for function _locked_lock_leds
 22076  202A                     _locked_lock_leds:	
 22077                           
 22078                           ;locked_task.c: 30: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 22079                           
 22080                           ;incstack = 0
 22081                           ; Regs used in _locked_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 22082  202A  3006               	movlw	6
 22083  202B  00F3               	movwf	locked_lock_leds@size
 22084  202C  3000               	movlw	0
 22085  202D  00F4               	movwf	locked_lock_leds@size+1
 22086                           
 22087                           ;locked_task.c: 31: locked_locking_leds_idx = size - 1;
 22088  202E  0873               	movf	locked_lock_leds@size,w
 22089  202F  3EFF               	addlw	255
 22090  2030  0021               	movlb	1	; select bank1
 22091  2031  00A2               	movwf	_locked_locking_leds_idx^(0+128)
 22092  2032  30FF               	movlw	255
 22093  2033  3D74               	addwfc	locked_lock_leds@size+1,w
 22094  2034  00A3               	movwf	(_locked_locking_leds_idx+1)^(0+128)
 22095                           
 22096                           ;locked_task.c: 32: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 22097  2035  3522               	lslf	_locked_locking_leds_idx^(0+128),w
 22098  2036  3EA0               	addlw	(low (_locked_locking_leds| (0+256)))& (0+255)
 22099  2037  0086               	movwf	6
 22100  2038  3001               	movlw	1	; select bank3/4
 22101  2039  0087               	movwf	7
 22102  203A  3F40               	moviw [0]fsr1
 22103  203B  00F1               	movwf	??_locked_lock_leds
 22104  203C  3F41               	moviw [1]fsr1
 22105  203D  00F2               	movwf	??_locked_lock_leds+1
 22106  203E  085F               	movf	_locked_lock_base_leds^(0+128),w
 22107  203F  0471               	iorwf	??_locked_lock_leds,w
 22108  2040  00A0               	movwf	_locked_leds^(0+128)
 22109  2041  0860               	movf	(_locked_lock_base_leds+1)^(0+128),w
 22110  2042  0472               	iorwf	??_locked_lock_leds+1,w
 22111  2043  00A1               	movwf	(_locked_leds+1)^(0+128)
 22112  2044  0008               	return
 22113  2045                     __end_of_locked_lock_leds:	
 22114                           ;locked_task.c: 33: return locked_leds;
 22115                           ;	Return value of _locked_lock_leds is never used
 22116                           
 22117                           
 22118                           	psect	text29
 22119  2FE7                     __ptext29:	
 22120 ;; *************** function _locked_get_unlock_leds *****************
 22121 ;; Defined at:
 22122 ;;		line 54 in file "locked_task.c"
 22123 ;; Parameters:    Size  Location     Type
 22124 ;;		None
 22125 ;; Auto vars:     Size  Location     Type
 22126 ;;  leds            2    3[COMMON] unsigned int 
 22127 ;; Return value:  Size  Location     Type
 22128 ;;                  2    1[COMMON] unsigned int 
 22129 ;; Registers used:
 22130 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 22131 ;; Tracked objects:
 22132 ;;		On entry : 0/0
 22133 ;;		On exit  : 0/0
 22134 ;;		Unchanged: 0/0
 22135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22136 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22137 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22139 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22140 ;;Total ram usage:        4 bytes
 22141 ;; Hardware stack levels used:    1
 22142 ;; Hardware stack levels required when called:    4
 22143 ;; This function calls:
 22144 ;;		Nothing
 22145 ;; This function is called by:
 22146 ;;		_locked_Main
 22147 ;; This function uses a non-reentrant model
 22148 ;;
 22149                           
 22150                           
 22151                           ;psect for function _locked_get_unlock_leds
 22152  2FE7                     _locked_get_unlock_leds:	
 22153                           
 22154                           ;locked_task.c: 55: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 22155                           
 22156                           ;incstack = 0
 22157                           ; Regs used in _locked_get_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 22158  2FE7  0021               	movlb	1	; select bank1
 22159  2FE8  3522               	lslf	_locked_locking_leds_idx^(0+128),w
 22160  2FE9  3EA0               	addlw	(low (_locked_locking_leds| (0+256)))& (0+255)
 22161  2FEA  0086               	movwf	6
 22162  2FEB  3001               	movlw	1	; select bank3/4
 22163  2FEC  0087               	movwf	7
 22164  2FED  3F40               	moviw [0]fsr1
 22165  2FEE  00F3               	movwf	locked_get_unlock_leds@leds
 22166  2FEF  3F41               	moviw [1]fsr1
 22167  2FF0  00F4               	movwf	locked_get_unlock_leds@leds+1
 22168                           
 22169                           ;locked_task.c: 58: if (locked_locking_leds_idx > 0){
 22170  2FF1  0822               	movf	_locked_locking_leds_idx^(0+128),w
 22171  2FF2  0423               	iorwf	(_locked_locking_leds_idx+1)^(0+128),w
 22172  2FF3  1903               	btfsc	3,2
 22173  2FF4  2FF9               	goto	l1234
 22174                           
 22175                           ;locked_task.c: 59: locked_locking_leds_idx -= 1;
 22176  2FF5  3001               	movlw	1
 22177  2FF6  02A2               	subwf	_locked_locking_leds_idx^(0+128),f
 22178  2FF7  3000               	movlw	0
 22179  2FF8  3BA3               	subwfb	(_locked_locking_leds_idx+1)^(0+128),f
 22180  2FF9                     l1234:	
 22181                           
 22182                           ;locked_task.c: 60: }
 22183                           ;locked_task.c: 61: return locked_lock_base_leds | leds;
 22184  2FF9  0873               	movf	locked_get_unlock_leds@leds,w
 22185  2FFA  045F               	iorwf	_locked_lock_base_leds^(0+128),w
 22186  2FFB  00F1               	movwf	?_locked_get_unlock_leds
 22187  2FFC  0874               	movf	locked_get_unlock_leds@leds+1,w
 22188  2FFD  0460               	iorwf	(_locked_lock_base_leds+1)^(0+128),w
 22189  2FFE  00F2               	movwf	?_locked_get_unlock_leds+1
 22190  2FFF  0008               	return
 22191  3000                     __end_of_locked_get_unlock_leds:	
 22192                           
 22193                           	psect	text30
 22194  2130                     __ptext30:	
 22195 ;; *************** function _locked_get_lock_leds *****************
 22196 ;; Defined at:
 22197 ;;		line 43 in file "locked_task.c"
 22198 ;; Parameters:    Size  Location     Type
 22199 ;;		None
 22200 ;; Auto vars:     Size  Location     Type
 22201 ;;  leds            2    7[COMMON] unsigned int 
 22202 ;;  size            2    5[COMMON] unsigned int 
 22203 ;; Return value:  Size  Location     Type
 22204 ;;                  2    1[COMMON] unsigned int 
 22205 ;; Registers used:
 22206 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 22207 ;; Tracked objects:
 22208 ;;		On entry : 0/0
 22209 ;;		On exit  : 0/0
 22210 ;;		Unchanged: 0/0
 22211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22212 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22213 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22214 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22215 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22216 ;;Total ram usage:        8 bytes
 22217 ;; Hardware stack levels used:    1
 22218 ;; Hardware stack levels required when called:    4
 22219 ;; This function calls:
 22220 ;;		Nothing
 22221 ;; This function is called by:
 22222 ;;		_locked_Main
 22223 ;; This function uses a non-reentrant model
 22224 ;;
 22225                           
 22226                           
 22227                           ;psect for function _locked_get_lock_leds
 22228  2130                     _locked_get_lock_leds:	
 22229                           
 22230                           ;locked_task.c: 44: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 22231                           
 22232                           ;incstack = 0
 22233                           ; Regs used in _locked_get_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 22234  2130  3006               	movlw	6
 22235  2131  00F5               	movwf	locked_get_lock_leds@size
 22236  2132  3000               	movlw	0
 22237  2133  00F6               	movwf	locked_get_lock_leds@size+1
 22238                           
 22239                           ;locked_task.c: 45: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 22240  2134  0021               	movlb	1	; select bank1
 22241  2135  3522               	lslf	_locked_locking_leds_idx^(0+128),w
 22242  2136  3EA0               	addlw	(low (_locked_locking_leds| (0+256)))& (0+255)
 22243  2137  0086               	movwf	6
 22244  2138  3001               	movlw	1	; select bank3/4
 22245  2139  0087               	movwf	7
 22246  213A  3F40               	moviw [0]fsr1
 22247  213B  00F7               	movwf	locked_get_lock_leds@leds
 22248  213C  3F41               	moviw [1]fsr1
 22249  213D  00F8               	movwf	locked_get_lock_leds@leds+1
 22250                           
 22251                           ;locked_task.c: 48: if (locked_locking_leds_idx < size - 1){
 22252  213E  0875               	movf	locked_get_lock_leds@size,w
 22253  213F  3EFF               	addlw	255
 22254  2140  00F3               	movwf	??_locked_get_lock_leds
 22255  2141  30FF               	movlw	255
 22256  2142  3D76               	addwfc	locked_get_lock_leds@size+1,w
 22257  2143  00F4               	movwf	??_locked_get_lock_leds+1
 22258  2144  0874               	movf	??_locked_get_lock_leds+1,w
 22259  2145  0223               	subwf	(_locked_locking_leds_idx+1)^(0+128),w
 22260  2146  1D03               	skipz
 22261  2147  294A               	goto	u4795
 22262  2148  0873               	movf	??_locked_get_lock_leds,w
 22263  2149  0222               	subwf	_locked_locking_leds_idx^(0+128),w
 22264  214A                     u4795:	
 22265  214A  1803               	skipnc
 22266  214B  2950               	goto	l1230
 22267                           
 22268                           ;locked_task.c: 49: locked_locking_leds_idx += 1;
 22269  214C  3001               	movlw	1
 22270  214D  07A2               	addwf	_locked_locking_leds_idx^(0+128),f
 22271  214E  3000               	movlw	0
 22272  214F  3DA3               	addwfc	(_locked_locking_leds_idx+1)^(0+128),f
 22273  2150                     l1230:	
 22274                           
 22275                           ;locked_task.c: 50: }
 22276                           ;locked_task.c: 51: return leds;
 22277  2150  0878               	movf	locked_get_lock_leds@leds+1,w
 22278  2151  00F2               	movwf	?_locked_get_lock_leds+1
 22279  2152  0877               	movf	locked_get_lock_leds@leds,w
 22280  2153  00F1               	movwf	?_locked_get_lock_leds
 22281  2154  0008               	return
 22282  2155                     __end_of_locked_get_lock_leds:	
 22283                           
 22284                           	psect	text31
 22285  24BF                     __ptext31:	
 22286 ;; *************** function _locked_clear *****************
 22287 ;; Defined at:
 22288 ;;		line 186 in file "locked_task.c"
 22289 ;; Parameters:    Size  Location     Type
 22290 ;;  data            2   25[BANK0 ] PTR struct t_locked_task
 22291 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 22292 ;;		 -> flashy_TaskData(30), NULL(0), 
 22293 ;; Auto vars:     Size  Location     Type
 22294 ;;		None
 22295 ;; Return value:  Size  Location     Type
 22296 ;;                  1    wreg      void 
 22297 ;; Registers used:
 22298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22299 ;; Tracked objects:
 22300 ;;		On entry : 0/0
 22301 ;;		On exit  : 0/0
 22302 ;;		Unchanged: 0/0
 22303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22304 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22307 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22308 ;;Total ram usage:        2 bytes
 22309 ;; Hardware stack levels used:    1
 22310 ;; Hardware stack levels required when called:   10
 22311 ;; This function calls:
 22312 ;;		_nullifyBadge_segDisplayErase
 22313 ;;		_nullifyBadge_userLedsClr
 22314 ;; This function is called by:
 22315 ;;		_locked_Main
 22316 ;; This function uses a non-reentrant model
 22317 ;;
 22318                           
 22319                           
 22320                           ;psect for function _locked_clear
 22321  24BF                     _locked_clear:	
 22322                           
 22323                           ;locked_task.c: 188: data->delayTickCount = 0;
 22324                           
 22325                           ;incstack = 0
 22326                           ; Regs used in _locked_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22327  24BF  0020               	movlb	0	; select bank0
 22328  24C0  0839               	movf	locked_clear@data,w
 22329  24C1  0086               	movwf	6
 22330  24C2  083A               	movf	locked_clear@data+1,w
 22331  24C3  0087               	movwf	7
 22332  24C4  3141               	addfsr 1,1
 22333  24C5  3000               	movlw	0
 22334  24C6  3FC0               	movwi [0]fsr1
 22335  24C7  3FC1               	movwi [1]fsr1
 22336                           
 22337                           ;locked_task.c: 189: data->holdCountA = 0;
 22338  24C8  0839               	movf	locked_clear@data,w
 22339  24C9  0086               	movwf	6
 22340  24CA  083A               	movf	locked_clear@data+1,w
 22341  24CB  0087               	movwf	7
 22342  24CC  3143               	addfsr 1,3
 22343  24CD  3000               	movlw	0
 22344  24CE  3FC0               	movwi [0]fsr1
 22345  24CF  3FC1               	movwi [1]fsr1
 22346                           
 22347                           ;locked_task.c: 190: data->holdCountB = 0;
 22348  24D0  0839               	movf	locked_clear@data,w
 22349  24D1  0086               	movwf	6
 22350  24D2  083A               	movf	locked_clear@data+1,w
 22351  24D3  0087               	movwf	7
 22352  24D4  3145               	addfsr 1,5
 22353  24D5  3000               	movlw	0
 22354  24D6  3FC0               	movwi [0]fsr1
 22355  24D7  3FC1               	movwi [1]fsr1
 22356                           
 22357                           ;locked_task.c: 191: data->holdCountX = 0;
 22358  24D8  0839               	movf	locked_clear@data,w
 22359  24D9  0086               	movwf	6
 22360  24DA  083A               	movf	locked_clear@data+1,w
 22361  24DB  0087               	movwf	7
 22362  24DC  3147               	addfsr 1,7
 22363  24DD  3000               	movlw	0
 22364  24DE  3FC0               	movwi [0]fsr1
 22365  24DF  3FC1               	movwi [1]fsr1
 22366                           
 22367                           ;locked_task.c: 192: data->holdCountY = 0;
 22368  24E0  0839               	movf	locked_clear@data,w
 22369  24E1  0086               	movwf	6
 22370  24E2  083A               	movf	locked_clear@data+1,w
 22371  24E3  0087               	movwf	7
 22372  24E4  3149               	addfsr 1,9
 22373  24E5  3000               	movlw	0
 22374  24E6  3FC0               	movwi [0]fsr1
 22375  24E7  3FC1               	movwi [1]fsr1
 22376                           
 22377                           ;locked_task.c: 193: data->noholdCount = 0;
 22378  24E8  0839               	movf	locked_clear@data,w
 22379  24E9  0086               	movwf	6
 22380  24EA  083A               	movf	locked_clear@data+1,w
 22381  24EB  0087               	movwf	7
 22382  24EC  314B               	addfsr 1,11
 22383  24ED  3000               	movlw	0
 22384  24EE  3FC0               	movwi [0]fsr1
 22385  24EF  3FC1               	movwi [1]fsr1
 22386                           
 22387                           ;locked_task.c: 196: nullifyBadge_userLedsClr(data->badge);
 22388  24F0  0839               	movf	locked_clear@data,w
 22389  24F1  0086               	movwf	6
 22390  24F2  083A               	movf	locked_clear@data+1,w
 22391  24F3  0087               	movwf	7
 22392  24F4  0801               	movf	1,w
 22393  24F5  31AE  260F  31A4   	fcall	_nullifyBadge_userLedsClr
 22394                           
 22395                           ;locked_task.c: 197: nullifyBadge_segDisplayErase(data->badge);
 22396  24F8  0020               	movlb	0	; select bank0
 22397  24F9  0839               	movf	locked_clear@data,w
 22398  24FA  0086               	movwf	6
 22399  24FB  083A               	movf	locked_clear@data+1,w
 22400  24FC  0087               	movwf	7
 22401  24FD  0801               	movf	1,w
 22402  24FE  31AE  2609         	fcall	_nullifyBadge_segDisplayErase
 22403  2500  0008               	return
 22404  2501                     __end_of_locked_clear:	
 22405                           
 22406                           	psect	text32
 22407  2E0F                     __ptext32:	
 22408 ;; *************** function _nullifyBadge_userLedsClr *****************
 22409 ;; Defined at:
 22410 ;;		line 177 in file "nullifyBadge.c"
 22411 ;; Parameters:    Size  Location     Type
 22412 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 22413 ;;		 -> badge_inst(18), 
 22414 ;; Auto vars:     Size  Location     Type
 22415 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 22416 ;;		 -> badge_inst(18), 
 22417 ;; Return value:  Size  Location     Type
 22418 ;;                  1    wreg      void 
 22419 ;; Registers used:
 22420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22421 ;; Tracked objects:
 22422 ;;		On entry : 0/0
 22423 ;;		On exit  : 0/0
 22424 ;;		Unchanged: 0/0
 22425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22427 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22429 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22430 ;;Total ram usage:        1 bytes
 22431 ;; Hardware stack levels used:    1
 22432 ;; Hardware stack levels required when called:    8
 22433 ;; This function calls:
 22434 ;;		_displayL2_ClrUserLeds
 22435 ;; This function is called by:
 22436 ;;		_menu_Init
 22437 ;;		_menu_clear
 22438 ;;		_menu_Exit
 22439 ;;		_flashy_Init
 22440 ;;		_flashy_Exit
 22441 ;;		_locked_Init
 22442 ;;		_locked_clear
 22443 ;;		_locked_Exit
 22444 ;;		_secret_Init
 22445 ;;		_secret_Exit
 22446 ;;		_slot_Init
 22447 ;;		_slot_Exit
 22448 ;; This function uses a non-reentrant model
 22449 ;;
 22450                           
 22451                           
 22452                           ;psect for function _nullifyBadge_userLedsClr
 22453  2E0F                     _nullifyBadge_userLedsClr:	
 22454                           
 22455                           ;incstack = 0
 22456                           ; Regs used in _nullifyBadge_userLedsClr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 22457                           ;nullifyBadge_userLedsClr@badge stored from wreg
 22458  2E0F  0020               	movlb	0	; select bank0
 22459  2E10  00AB               	movwf	nullifyBadge_userLedsClr@badge
 22460                           
 22461                           ;nullifyBadge.c: 178: displayL2_ClrUserLeds(&badge->display);
 22462  2E11  082B               	movf	nullifyBadge_userLedsClr@badge,w
 22463  2E12  31AE  26CB         	fcall	_displayL2_ClrUserLeds
 22464  2E14  0008               	return
 22465  2E15                     __end_of_nullifyBadge_userLedsClr:	
 22466                           
 22467                           	psect	text33
 22468  2ECB                     __ptext33:	
 22469 ;; *************** function _displayL2_ClrUserLeds *****************
 22470 ;; Defined at:
 22471 ;;		line 94 in file "nullifyBadge_displayL2.c"
 22472 ;; Parameters:    Size  Location     Type
 22473 ;;  display         1    wreg     PTR struct t_nullifyDisp
 22474 ;;		 -> badge_inst(18), 
 22475 ;; Auto vars:     Size  Location     Type
 22476 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 22477 ;;		 -> badge_inst(18), 
 22478 ;; Return value:  Size  Location     Type
 22479 ;;                  1    wreg      void 
 22480 ;; Registers used:
 22481 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22482 ;; Tracked objects:
 22483 ;;		On entry : 0/0
 22484 ;;		On exit  : 0/0
 22485 ;;		Unchanged: 0/0
 22486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22488 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22490 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22491 ;;Total ram usage:        1 bytes
 22492 ;; Hardware stack levels used:    1
 22493 ;; Hardware stack levels required when called:    7
 22494 ;; This function calls:
 22495 ;;		_displayL1_SetUserLed
 22496 ;;		_displayL1_Update
 22497 ;; This function is called by:
 22498 ;;		_nullifyBadge_userLedsClr
 22499 ;; This function uses a non-reentrant model
 22500 ;;
 22501                           
 22502                           
 22503                           ;psect for function _displayL2_ClrUserLeds
 22504  2ECB                     _displayL2_ClrUserLeds:	
 22505                           
 22506                           ;incstack = 0
 22507                           ; Regs used in _displayL2_ClrUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 22508                           ;displayL2_ClrUserLeds@display stored from wreg
 22509  2ECB  00FB               	movwf	displayL2_ClrUserLeds@display
 22510                           
 22511                           ;nullifyBadge_displayL2.c: 95: displayL1_SetUserLed(&display->display_l1, 0);
 22512  2ECC  3000               	movlw	0
 22513  2ECD  00F1               	movwf	displayL1_SetUserLed@userLedVect
 22514  2ECE  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 22515  2ECF  087B               	movf	displayL2_ClrUserLeds@display,w
 22516  2ED0  3E07               	addlw	7
 22517  2ED1  31AF  272B  31AE   	fcall	_displayL1_SetUserLed
 22518                           
 22519                           ;nullifyBadge_displayL2.c: 96: displayL1_Update(&display->display_l1);
 22520  2ED4  087B               	movf	displayL2_ClrUserLeds@display,w
 22521  2ED5  3E07               	addlw	7
 22522  2ED6  31AE  26F8         	fcall	_displayL1_Update
 22523  2ED8  0008               	return
 22524  2ED9                     __end_of_displayL2_ClrUserLeds:	
 22525                           
 22526                           	psect	text34
 22527  2E09                     __ptext34:	
 22528 ;; *************** function _nullifyBadge_segDisplayErase *****************
 22529 ;; Defined at:
 22530 ;;		line 123 in file "nullifyBadge.c"
 22531 ;; Parameters:    Size  Location     Type
 22532 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 22533 ;;		 -> badge_inst(18), 
 22534 ;; Auto vars:     Size  Location     Type
 22535 ;;  badge           1   24[BANK0 ] PTR struct t_nullifyBadg
 22536 ;;		 -> badge_inst(18), 
 22537 ;; Return value:  Size  Location     Type
 22538 ;;                  1    wreg      void 
 22539 ;; Registers used:
 22540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22541 ;; Tracked objects:
 22542 ;;		On entry : 0/0
 22543 ;;		On exit  : 0/0
 22544 ;;		Unchanged: 0/0
 22545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22549 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22550 ;;Total ram usage:        1 bytes
 22551 ;; Hardware stack levels used:    1
 22552 ;; Hardware stack levels required when called:    9
 22553 ;; This function calls:
 22554 ;;		_displayL2_EraseSegDisplay
 22555 ;; This function is called by:
 22556 ;;		_menu_Init
 22557 ;;		_menu_clear
 22558 ;;		_menu_Exit
 22559 ;;		_flashy_Init
 22560 ;;		_flashy_Exit
 22561 ;;		_locked_Init
 22562 ;;		_locked_clear
 22563 ;;		_locked_Exit
 22564 ;;		_secret_Init
 22565 ;;		_secret_Exit
 22566 ;;		_slot_Init
 22567 ;;		_slot_Exit
 22568 ;;		_fadeDisplay_Init
 22569 ;;		_fadeDisplay_Exit
 22570 ;; This function uses a non-reentrant model
 22571 ;;
 22572                           
 22573                           
 22574                           ;psect for function _nullifyBadge_segDisplayErase
 22575  2E09                     _nullifyBadge_segDisplayErase:	
 22576                           
 22577                           ;incstack = 0
 22578                           ; Regs used in _nullifyBadge_segDisplayErase: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 22579                           ;nullifyBadge_segDisplayErase@badge stored from wreg
 22580  2E09  0020               	movlb	0	; select bank0
 22581  2E0A  00B8               	movwf	nullifyBadge_segDisplayErase@badge
 22582                           
 22583                           ;nullifyBadge.c: 124: displayL2_EraseSegDisplay(&badge->display);
 22584  2E0B  0838               	movf	nullifyBadge_segDisplayErase@badge,w
 22585  2E0C  31AE  26E8         	fcall	_displayL2_EraseSegDisplay
 22586  2E0E  0008               	return
 22587  2E0F                     __end_of_nullifyBadge_segDisplayErase:	
 22588                           
 22589                           	psect	text35
 22590  2EE8                     __ptext35:	
 22591 ;; *************** function _displayL2_EraseSegDisplay *****************
 22592 ;; Defined at:
 22593 ;;		line 83 in file "nullifyBadge_displayL2.c"
 22594 ;; Parameters:    Size  Location     Type
 22595 ;;  display         1    wreg     PTR struct t_nullifyDisp
 22596 ;;		 -> badge_inst(18), 
 22597 ;; Auto vars:     Size  Location     Type
 22598 ;;  display         1   23[BANK0 ] PTR struct t_nullifyDisp
 22599 ;;		 -> badge_inst(18), 
 22600 ;; Return value:  Size  Location     Type
 22601 ;;                  1    wreg      void 
 22602 ;; Registers used:
 22603 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22604 ;; Tracked objects:
 22605 ;;		On entry : 0/0
 22606 ;;		On exit  : 0/0
 22607 ;;		Unchanged: 0/0
 22608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22610 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22612 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22613 ;;Total ram usage:        1 bytes
 22614 ;; Hardware stack levels used:    1
 22615 ;; Hardware stack levels required when called:    8
 22616 ;; This function calls:
 22617 ;;		_displayL1_Update
 22618 ;;		_displayL2_PutStr
 22619 ;; This function is called by:
 22620 ;;		_nullifyBadge_segDisplayErase
 22621 ;; This function uses a non-reentrant model
 22622 ;;
 22623                           
 22624                           
 22625                           ;psect for function _displayL2_EraseSegDisplay
 22626  2EE8                     _displayL2_EraseSegDisplay:	
 22627                           
 22628                           ;incstack = 0
 22629                           ; Regs used in _displayL2_EraseSegDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22630                           ;displayL2_EraseSegDisplay@display stored from wreg
 22631  2EE8  0020               	movlb	0	; select bank0
 22632  2EE9  00B7               	movwf	displayL2_EraseSegDisplay@display
 22633                           
 22634                           ;nullifyBadge_displayL2.c: 84: displayL2_PutStr(display, "    ");
 22635  2EEA  3058               	movlw	low ((STR_22+35)| (0+32768))
 22636  2EEB  00B0               	movwf	displayL2_PutStr@str
 22637  2EEC  30A8               	movlw	high ((STR_22+35)| (0+32768))
 22638  2EED  00B1               	movwf	displayL2_PutStr@str+1
 22639  2EEE  0837               	movf	displayL2_EraseSegDisplay@display,w
 22640  2EEF  31A1  21CA  31AE   	fcall	_displayL2_PutStr
 22641                           
 22642                           ;nullifyBadge_displayL2.c: 85: displayL1_Update(&display->display_l1);
 22643  2EF2  0020               	movlb	0	; select bank0
 22644  2EF3  0837               	movf	displayL2_EraseSegDisplay@display,w
 22645  2EF4  3E07               	addlw	7
 22646  2EF5  31AE  26F8         	fcall	_displayL1_Update
 22647  2EF7  0008               	return
 22648  2EF8                     __end_of_displayL2_EraseSegDisplay:	
 22649                           
 22650                           	psect	text36
 22651  125F                     __ptext36:	
 22652 ;; *************** function _sprintf *****************
 22653 ;; Defined at:
 22654 ;;		line 492 in file "/Applications/microchip/xc8/v1.42/sources/common/doprnt.c"
 22655 ;; Parameters:    Size  Location     Type
 22656 ;;  sp              2   15[BANK0 ] PTR unsigned char 
 22657 ;;		 -> flashy_Main@hit_counter(6), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 22658 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 22659 ;;  f               2   17[BANK0 ] PTR const unsigned char 
 22660 ;;		 -> STR_53(3), STR_52(9), STR_51(9), STR_50(9), 
 22661 ;;		 -> STR_49(9), STR_48(9), STR_25(4), 
 22662 ;; Auto vars:     Size  Location     Type
 22663 ;;  tmpval          4    0        struct .
 22664 ;;  width           2   40[BANK0 ] int 
 22665 ;;  len             2   38[BANK0 ] unsigned int 
 22666 ;;  val             2   36[BANK0 ] unsigned int 
 22667 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
 22668 ;;		 -> STR_54(7), sprintf@c(1), STR_47(9), STR_46(13), 
 22669 ;;		 -> STR_45(12), STR_44(8), STR_43(11), STR_42(11), 
 22670 ;;		 -> STR_41(9), STR_40(8), STR_39(8), 
 22671 ;;  c               1   42[BANK0 ] char 
 22672 ;;  ap              1   35[BANK0 ] PTR void [1]
 22673 ;;		 -> ?_sprintf(2), 
 22674 ;;  flag            1   32[BANK0 ] unsigned char 
 22675 ;;  prec            1   31[BANK0 ] char 
 22676 ;; Return value:  Size  Location     Type
 22677 ;;                  2   15[BANK0 ] int 
 22678 ;; Registers used:
 22679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22680 ;; Tracked objects:
 22681 ;;		On entry : 0/0
 22682 ;;		On exit  : 0/0
 22683 ;;		Unchanged: 0/0
 22684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22685 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22686 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22687 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22688 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22689 ;;Total ram usage:       28 bytes
 22690 ;; Hardware stack levels used:    1
 22691 ;; Hardware stack levels required when called:    5
 22692 ;; This function calls:
 22693 ;;		___lwdiv
 22694 ;;		___lwmod
 22695 ;;		___wmul
 22696 ;;		_isdigit
 22697 ;; This function is called by:
 22698 ;;		_flashy_Main
 22699 ;;		_slot_Main
 22700 ;; This function uses a non-reentrant model
 22701 ;;
 22702                           
 22703                           
 22704                           ;psect for function _sprintf
 22705  125F                     _sprintf:	
 22706                           
 22707                           ;doprnt.c: 494: va_list ap;
 22708                           ;doprnt.c: 499: signed char c;
 22709                           ;doprnt.c: 501: int width;
 22710                           ;doprnt.c: 506: signed char prec;
 22711                           ;doprnt.c: 508: unsigned char flag;
 22712                           ;doprnt.c: 523: union {
 22713                           ;doprnt.c: 524: unsigned long vd;
 22714                           ;doprnt.c: 525: double integ;
 22715                           ;doprnt.c: 526: } tmpval;
 22716                           ;doprnt.c: 528: unsigned int val;
 22717                           ;doprnt.c: 529: unsigned len;
 22718                           ;doprnt.c: 530: const char * cp;
 22719                           ;doprnt.c: 533: *ap = __va_start();
 22720                           
 22721                           ;incstack = 0
 22722                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22723  125F  3033               	movlw	(low ((?_sprintf| 0+4)))& (0+255)
 22724  1260  0020               	movlb	0	; select bank0
 22725  1261  00BB               	movwf	??_sprintf
 22726  1262  083B               	movf	??_sprintf,w
 22727  1263  00C3               	movwf	sprintf@ap
 22728  1264                     l7500:	
 22729                           ;doprnt.c: 536: while(c = *f++) {
 22730                           
 22731  1264  0832               	movf	sprintf@f+1,w
 22732  1265  00BC               	movwf	??_sprintf+1
 22733  1266  0831               	movf	sprintf@f,w
 22734  1267  00BB               	movwf	??_sprintf
 22735  1268  0AB1               	incf	sprintf@f,f
 22736  1269  1903               	skipnz
 22737  126A  0AB2               	incf	sprintf@f+1,f
 22738  126B  083B               	movf	??_sprintf,w
 22739  126C  0084               	movwf	4
 22740  126D  083C               	movf	??_sprintf+1,w
 22741  126E  0085               	movwf	5
 22742  126F  0800               	movf	0,w	;code access
 22743  1270  00BD               	movwf	??_sprintf+2
 22744  1271  083D               	movf	??_sprintf+2,w
 22745  1272  00CA               	movwf	sprintf@c
 22746  1273  084A               	movf	sprintf@c,w
 22747  1274  1903               	btfsc	3,2
 22748  1275  2C25               	goto	l7502
 22749                           
 22750                           ;doprnt.c: 538: if(c != '%')
 22751  1276  3025               	movlw	37
 22752  1277  064A               	xorwf	sprintf@c,w
 22753  1278  1903               	btfsc	3,2
 22754  1279  2A85               	goto	l7384
 22755                           
 22756                           ;doprnt.c: 540: {
 22757                           ;doprnt.c: 541: ((*sp++ = (c)));
 22758  127A  082F               	movf	sprintf@sp,w
 22759  127B  0086               	movwf	6
 22760  127C  0830               	movf	sprintf@sp+1,w
 22761  127D  0087               	movwf	7
 22762  127E  084A               	movf	sprintf@c,w
 22763  127F  0081               	movwf	1
 22764  1280  3001               	movlw	1
 22765  1281  07AF               	addwf	sprintf@sp,f
 22766  1282  3000               	movlw	0
 22767  1283  3DB0               	addwfc	sprintf@sp+1,f
 22768                           
 22769                           ;doprnt.c: 542: continue;
 22770  1284  2A64               	goto	l7500
 22771  1285                     l7384:	
 22772                           
 22773                           ;doprnt.c: 543: }
 22774                           ;doprnt.c: 546: width = 0;
 22775  1285  01C8               	clrf	sprintf@width
 22776  1286  01C9               	clrf	sprintf@width+1
 22777                           
 22778                           ;doprnt.c: 548: flag = 0;
 22779  1287  01C0               	clrf	sprintf@flag
 22780                           
 22781                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 22782  1288  0831               	movf	sprintf@f,w
 22783  1289  0084               	movwf	4
 22784  128A  0832               	movf	sprintf@f+1,w
 22785  128B  0085               	movwf	5
 22786  128C  0800               	movf	0,w	;code access
 22787  128D  31AE  26BD  3192   	fcall	_isdigit
 22788  1290  1C03               	btfss	3,0
 22789  1291  2B3E               	goto	l7442
 22790                           
 22791                           ;doprnt.c: 598: width = 0;
 22792  1292  0020               	movlb	0	; select bank0
 22793  1293  01C8               	clrf	sprintf@width
 22794  1294  01C9               	clrf	sprintf@width+1
 22795  1295                     l7390:	
 22796                           ;doprnt.c: 599: do {
 22797                           
 22798                           
 22799                           ;doprnt.c: 600: width *= 10;
 22800  1295  300A               	movlw	10
 22801  1296  00F1               	movwf	___wmul@multiplier
 22802  1297  3000               	movlw	0
 22803  1298  00F2               	movwf	___wmul@multiplier+1
 22804  1299  0020               	movlb	0	; select bank0
 22805  129A  0849               	movf	sprintf@width+1,w
 22806  129B  00F4               	movwf	___wmul@multiplicand+1
 22807  129C  0848               	movf	sprintf@width,w
 22808  129D  00F3               	movwf	___wmul@multiplicand
 22809  129E  31A0  200F  3192   	fcall	___wmul
 22810  12A1  0872               	movf	?___wmul+1,w
 22811  12A2  0020               	movlb	0	; select bank0
 22812  12A3  00C9               	movwf	sprintf@width+1
 22813  12A4  0871               	movf	?___wmul,w
 22814  12A5  00C8               	movwf	sprintf@width
 22815                           
 22816                           ;doprnt.c: 601: width += *f++ - '0';
 22817  12A6  0831               	movf	sprintf@f,w
 22818  12A7  0084               	movwf	4
 22819  12A8  0832               	movf	sprintf@f+1,w
 22820  12A9  0085               	movwf	5
 22821  12AA  0800               	movf	0,w	;code access
 22822  12AB  3ED0               	addlw	208
 22823  12AC  00BB               	movwf	??_sprintf
 22824  12AD  30FF               	movlw	255
 22825  12AE  1803               	skipnc
 22826  12AF  3000               	movlw	0
 22827  12B0  00BC               	movwf	??_sprintf+1
 22828  12B1  083B               	movf	??_sprintf,w
 22829  12B2  07C8               	addwf	sprintf@width,f
 22830  12B3  083C               	movf	??_sprintf+1,w
 22831  12B4  3DC9               	addwfc	sprintf@width+1,f
 22832  12B5  3001               	movlw	1
 22833  12B6  07B1               	addwf	sprintf@f,f
 22834  12B7  3000               	movlw	0
 22835  12B8  3DB2               	addwfc	sprintf@f+1,f
 22836                           
 22837                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22838  12B9  0831               	movf	sprintf@f,w
 22839  12BA  0084               	movwf	4
 22840  12BB  0832               	movf	sprintf@f+1,w
 22841  12BC  0085               	movwf	5
 22842  12BD  0800               	movf	0,w	;code access
 22843  12BE  31AE  26BD  3192   	fcall	_isdigit
 22844  12C1  1C03               	btfss	3,0
 22845  12C2  2B3E               	goto	l7442
 22846  12C3  2A95               	goto	l7390
 22847  12C4                     l7398:	
 22848                           ;doprnt.c: 728: case 's':
 22849                           
 22850                           ;doprnt.c: 698: case 'i':
 22851                           ;doprnt.c: 699: break;
 22852                           
 22853                           ;doprnt.c: 697: case 'd':
 22854                           
 22855                           ;doprnt.c: 638: goto alldone;
 22856                           
 22857                           ;doprnt.c: 637: case 0:
 22858                           
 22859                           ;doprnt.c: 608: }
 22860                           ;doprnt.c: 635: switch(c = *f++) {
 22861                           
 22862                           
 22863                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22864  12C4  0020               	movlb	0	; select bank0
 22865  12C5  0843               	movf	sprintf@ap,w
 22866  12C6  0086               	movwf	6
 22867  12C7  0187               	clrf	7
 22868  12C8  3F40               	moviw [0]fsr1
 22869  12C9  00C1               	movwf	sprintf@cp
 22870  12CA  3F41               	moviw [1]fsr1
 22871  12CB  00C2               	movwf	sprintf@cp+1
 22872  12CC  3002               	movlw	2
 22873  12CD  00BB               	movwf	??_sprintf
 22874  12CE  083B               	movf	??_sprintf,w
 22875  12CF  07C3               	addwf	sprintf@ap,f
 22876                           
 22877                           ;doprnt.c: 740: if(!cp)
 22878  12D0  0841               	movf	sprintf@cp,w
 22879  12D1  0442               	iorwf	sprintf@cp+1,w
 22880  12D2  1D03               	btfss	3,2
 22881  12D3  2AD8               	goto	l7406
 22882                           
 22883                           ;doprnt.c: 741: cp = "(null)";
 22884  12D4  30DA               	movlw	low (STR_54| (0+32768))
 22885  12D5  00C1               	movwf	sprintf@cp
 22886  12D6  30B0               	movlw	high (STR_54| (0+32768))
 22887  12D7  00C2               	movwf	sprintf@cp+1
 22888  12D8                     l7406:	
 22889                           
 22890                           ;doprnt.c: 745: len = 0;
 22891  12D8  01C6               	clrf	sprintf@len
 22892  12D9  01C7               	clrf	sprintf@len+1
 22893  12DA                     l7410:	
 22894                           ;doprnt.c: 746: while(cp[len])
 22895                           
 22896  12DA  0841               	movf	sprintf@cp,w
 22897  12DB  0746               	addwf	sprintf@len,w
 22898  12DC  0084               	movwf	4
 22899  12DD  0842               	movf	sprintf@cp+1,w
 22900  12DE  3D47               	addwfc	sprintf@len+1,w
 22901  12DF  0085               	movwf	5
 22902  12E0  0012               	moviw fsr0++
 22903  12E1  1903               	btfsc	3,2
 22904  12E2  2AE8               	goto	l7412
 22905                           
 22906                           ;doprnt.c: 747: len++;
 22907  12E3  3001               	movlw	1
 22908  12E4  07C6               	addwf	sprintf@len,f
 22909  12E5  3000               	movlw	0
 22910  12E6  3DC7               	addwfc	sprintf@len+1,f
 22911  12E7  2ADA               	goto	l7410
 22912  12E8                     l7412:	
 22913                           ;doprnt.c: 750: dostring:
 22914                           
 22915                           
 22916                           ;doprnt.c: 757: if(width > len)
 22917  12E8  0849               	movf	sprintf@width+1,w
 22918  12E9  0247               	subwf	sprintf@len+1,w
 22919  12EA  1D03               	skipz
 22920  12EB  2AEE               	goto	u4645
 22921  12EC  0848               	movf	sprintf@width,w
 22922  12ED  0246               	subwf	sprintf@len,w
 22923  12EE                     u4645:	
 22924  12EE  1803               	skipnc
 22925  12EF  2AF5               	goto	l7416
 22926                           
 22927                           ;doprnt.c: 758: width -= len;
 22928  12F0  0846               	movf	sprintf@len,w
 22929  12F1  02C8               	subwf	sprintf@width,f
 22930  12F2  0847               	movf	sprintf@len+1,w
 22931  12F3  3BC9               	subwfb	sprintf@width+1,f
 22932  12F4  2AF7               	goto	l7422
 22933  12F5                     l7416:	
 22934                           
 22935                           ;doprnt.c: 759: else
 22936                           ;doprnt.c: 760: width = 0;
 22937  12F5  01C8               	clrf	sprintf@width
 22938  12F6  01C9               	clrf	sprintf@width+1
 22939  12F7                     l7422:	
 22940                           ;doprnt.c: 764: while(width--)
 22941                           
 22942  12F7  30FF               	movlw	255
 22943  12F8  07C8               	addwf	sprintf@width,f
 22944  12F9  30FF               	movlw	255
 22945  12FA  3DC9               	addwfc	sprintf@width+1,f
 22946  12FB  0A48               	incf	sprintf@width,w
 22947  12FC  1903               	btfsc	3,2
 22948  12FD  0A49               	incf	sprintf@width+1,w
 22949  12FE  1903               	btfsc	3,2
 22950  12FF  2B1F               	goto	l7430
 22951                           
 22952                           ;doprnt.c: 765: ((*sp++ = (' ')));
 22953  1300  082F               	movf	sprintf@sp,w
 22954  1301  0086               	movwf	6
 22955  1302  0830               	movf	sprintf@sp+1,w
 22956  1303  0087               	movwf	7
 22957  1304  3020               	movlw	32
 22958  1305  0081               	movwf	1
 22959  1306  3001               	movlw	1
 22960  1307  07AF               	addwf	sprintf@sp,f
 22961  1308  3000               	movlw	0
 22962  1309  3DB0               	addwfc	sprintf@sp+1,f
 22963  130A  2AF7               	goto	l7422
 22964  130B                     l7424:	
 22965                           ;doprnt.c: 767: while(len--)
 22966                           
 22967                           
 22968                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 22969  130B  0841               	movf	sprintf@cp,w
 22970  130C  0084               	movwf	4
 22971  130D  0842               	movf	sprintf@cp+1,w
 22972  130E  0085               	movwf	5
 22973  130F  0800               	movf	0,w	;code access
 22974  1310  00BB               	movwf	??_sprintf
 22975  1311  082F               	movf	sprintf@sp,w
 22976  1312  0086               	movwf	6
 22977  1313  0830               	movf	sprintf@sp+1,w
 22978  1314  0087               	movwf	7
 22979  1315  083B               	movf	??_sprintf,w
 22980  1316  0081               	movwf	1
 22981  1317  3001               	movlw	1
 22982  1318  07C1               	addwf	sprintf@cp,f
 22983  1319  3000               	movlw	0
 22984  131A  3DC2               	addwfc	sprintf@cp+1,f
 22985  131B  3001               	movlw	1
 22986  131C  07AF               	addwf	sprintf@sp,f
 22987  131D  3000               	movlw	0
 22988  131E  3DB0               	addwfc	sprintf@sp+1,f
 22989  131F                     l7430:	
 22990  131F  3001               	movlw	1
 22991  1320  02C6               	subwf	sprintf@len,f
 22992  1321  3000               	movlw	0
 22993  1322  3BC7               	subwfb	sprintf@len+1,f
 22994  1323  0A46               	incf	sprintf@len,w
 22995  1324  1D03               	skipz
 22996  1325  2B0B               	goto	l7424
 22997  1326  0A47               	incf	sprintf@len+1,w
 22998  1327  1903               	btfsc	3,2
 22999  1328  2A64               	goto	l7500
 23000  1329  2B0B               	goto	l7424
 23001  132A                     l7432:	
 23002                           ;doprnt.c: 784: case 'c':
 23003                           
 23004                           ;doprnt.c: 774: continue;
 23005                           
 23006                           
 23007                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 23008  132A  0843               	movf	sprintf@ap,w
 23009  132B  0086               	movwf	6
 23010  132C  0187               	clrf	7
 23011  132D  0801               	movf	1,w
 23012  132E  00BB               	movwf	??_sprintf
 23013  132F  083B               	movf	??_sprintf,w
 23014  1330  00CA               	movwf	sprintf@c
 23015  1331  3002               	movlw	2
 23016  1332  00BB               	movwf	??_sprintf
 23017  1333  083B               	movf	??_sprintf,w
 23018  1334  07C3               	addwf	sprintf@ap,f
 23019  1335                     l7436:	
 23020                           ;doprnt.c: 802: default:
 23021                           
 23022                           
 23023                           ;doprnt.c: 805: cp = (char *)&c;
 23024  1335  304A               	movlw	low sprintf@c
 23025  1336  00C1               	movwf	sprintf@cp
 23026  1337  3000               	movlw	high sprintf@c
 23027  1338  00C2               	movwf	sprintf@cp+1
 23028                           
 23029                           ;doprnt.c: 806: len = 1;
 23030  1339  3001               	movlw	1
 23031  133A  00C6               	movwf	sprintf@len
 23032  133B  3000               	movlw	0
 23033  133C  00C7               	movwf	sprintf@len+1
 23034                           
 23035                           ;doprnt.c: 807: goto dostring;
 23036  133D  2AE8               	goto	l7412
 23037  133E                     l7442:	
 23038                           ;doprnt.c: 822: }
 23039                           
 23040  133E  0020               	movlb	0	; select bank0
 23041  133F  0832               	movf	sprintf@f+1,w
 23042  1340  00BC               	movwf	??_sprintf+1
 23043  1341  0831               	movf	sprintf@f,w
 23044  1342  00BB               	movwf	??_sprintf
 23045  1343  0AB1               	incf	sprintf@f,f
 23046  1344  1903               	skipnz
 23047  1345  0AB2               	incf	sprintf@f+1,f
 23048  1346  083B               	movf	??_sprintf,w
 23049  1347  0084               	movwf	4
 23050  1348  083C               	movf	??_sprintf+1,w
 23051  1349  0085               	movwf	5
 23052  134A  0800               	movf	0,w	;code access
 23053  134B  00CA               	movwf	sprintf@c
 23054                           
 23055                           ; Switch size 1, requested type "space"
 23056                           ; Number of cases is 5, Range of values is 0 to 115
 23057                           ; switch strategies available:
 23058                           ; Name         Instructions Cycles
 23059                           ; simple_byte           16     9 (average)
 23060                           ; direct_byte          238     6 (fixed)
 23061                           ; jumptable            260     6 (fixed)
 23062                           ;	Chosen strategy is simple_byte
 23063  134C  3A00               	xorlw	0	; case 0
 23064  134D  1903               	skipnz
 23065  134E  2C25               	goto	l7502
 23066  134F  3A63               	xorlw	99	; case 99
 23067  1350  1903               	skipnz
 23068  1351  2B2A               	goto	l7432
 23069  1352  3A07               	xorlw	7	; case 100
 23070  1353  1903               	skipnz
 23071  1354  2B5C               	goto	l7444
 23072  1355  3A0D               	xorlw	13	; case 105
 23073  1356  1903               	skipnz
 23074  1357  2B5C               	goto	l7444
 23075  1358  3A1A               	xorlw	26	; case 115
 23076  1359  1903               	skipnz
 23077  135A  2AC4               	goto	l7398
 23078  135B  2B35               	goto	l7436
 23079  135C                     l7444:	
 23080                           
 23081                           ;doprnt.c: 1253: {
 23082                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 23083  135C  0020               	movlb	0	; select bank0
 23084  135D  0843               	movf	sprintf@ap,w
 23085  135E  0086               	movwf	6
 23086  135F  0187               	clrf	7
 23087  1360  3F40               	moviw [0]fsr1
 23088  1361  00C4               	movwf	sprintf@val
 23089  1362  3F41               	moviw [1]fsr1
 23090  1363  00C5               	movwf	sprintf@val+1
 23091  1364  3002               	movlw	2
 23092  1365  00BB               	movwf	??_sprintf
 23093  1366  083B               	movf	??_sprintf,w
 23094  1367  07C3               	addwf	sprintf@ap,f
 23095                           
 23096                           ;doprnt.c: 1261: if((int)val < 0) {
 23097  1368  1FC5               	btfss	sprintf@val+1,7
 23098  1369  2B73               	goto	l7454
 23099                           
 23100                           ;doprnt.c: 1262: flag |= 0x03;
 23101  136A  3003               	movlw	3
 23102  136B  00BB               	movwf	??_sprintf
 23103  136C  083B               	movf	??_sprintf,w
 23104  136D  04C0               	iorwf	sprintf@flag,f
 23105                           
 23106                           ;doprnt.c: 1263: val = -val;
 23107  136E  09C4               	comf	sprintf@val,f
 23108  136F  09C5               	comf	sprintf@val+1,f
 23109  1370  0AC4               	incf	sprintf@val,f
 23110  1371  1903               	skipnz
 23111  1372  0AC5               	incf	sprintf@val+1,f
 23112  1373                     l7454:	
 23113                           
 23114                           ;doprnt.c: 1264: }
 23115                           ;doprnt.c: 1266: }
 23116                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 23117  1373  01CA               	clrf	sprintf@c
 23118  1374  0ACA               	incf	sprintf@c,f
 23119  1375  3005               	movlw	5
 23120  1376  064A               	xorwf	sprintf@c,w
 23121  1377  1903               	btfsc	3,2
 23122  1378  2B98               	goto	l7466
 23123  1379                     l7460:	
 23124                           
 23125                           ;doprnt.c: 1306: if(val < dpowers[c])
 23126  1379  084A               	movf	sprintf@c,w
 23127  137A  00BB               	movwf	??_sprintf
 23128  137B  01BC               	clrf	??_sprintf+1
 23129  137C  35BB               	lslf	??_sprintf,f
 23130  137D  0DBC               	rlf	??_sprintf+1,f
 23131  137E  3000               	movlw	low (_dpowers| (0+32768))
 23132  137F  073B               	addwf	??_sprintf,w
 23133  1380  0084               	movwf	4
 23134  1381  30A8               	movlw	high (_dpowers| (0+32768))
 23135  1382  3D3C               	addwfc	??_sprintf+1,w
 23136  1383  0085               	movwf	5
 23137  1384  3F00               	moviw [0]fsr0
 23138  1385  00BD               	movwf	??_sprintf+2
 23139  1386  3F01               	moviw [1]fsr0
 23140  1387  00BE               	movwf	??_sprintf+3
 23141  1388  083E               	movf	??_sprintf+3,w
 23142  1389  0245               	subwf	sprintf@val+1,w
 23143  138A  1D03               	skipz
 23144  138B  2B8E               	goto	u4695
 23145  138C  083D               	movf	??_sprintf+2,w
 23146  138D  0244               	subwf	sprintf@val,w
 23147  138E                     u4695:	
 23148  138E  1C03               	btfss	3,0
 23149  138F  2B98               	goto	l7466
 23150                           
 23151                           ;doprnt.c: 1307: break;
 23152  1390  3001               	movlw	1
 23153  1391  00BB               	movwf	??_sprintf
 23154  1392  083B               	movf	??_sprintf,w
 23155  1393  07CA               	addwf	sprintf@c,f
 23156  1394  3005               	movlw	5
 23157  1395  064A               	xorwf	sprintf@c,w
 23158  1396  1D03               	btfss	3,2
 23159  1397  2B79               	goto	l7460
 23160  1398                     l7466:	
 23161                           
 23162                           ;doprnt.c: 1345: if(width && flag & 0x03)
 23163  1398  0848               	movf	sprintf@width,w
 23164  1399  0449               	iorwf	sprintf@width+1,w
 23165  139A  1903               	btfsc	3,2
 23166  139B  2BA4               	goto	l1472
 23167  139C  0840               	movf	sprintf@flag,w
 23168  139D  3903               	andlw	3
 23169  139E  1903               	btfsc	3,2
 23170  139F  2BA4               	goto	l1472
 23171                           
 23172                           ;doprnt.c: 1346: width--;
 23173  13A0  30FF               	movlw	255
 23174  13A1  07C8               	addwf	sprintf@width,f
 23175  13A2  30FF               	movlw	255
 23176  13A3  3DC9               	addwfc	sprintf@width+1,f
 23177  13A4                     l1472:	
 23178                           
 23179                           ;doprnt.c: 1381: if(width > c)
 23180  13A4  084A               	movf	sprintf@c,w
 23181  13A5  00BB               	movwf	??_sprintf
 23182  13A6  01BC               	clrf	??_sprintf+1
 23183  13A7  1BBB               	btfsc	??_sprintf,7
 23184  13A8  03BC               	decf	??_sprintf+1,f
 23185  13A9  083C               	movf	??_sprintf+1,w
 23186  13AA  3A80               	xorlw	128
 23187  13AB  00BD               	movwf	??_sprintf+2
 23188  13AC  0849               	movf	sprintf@width+1,w
 23189  13AD  3A80               	xorlw	128
 23190  13AE  023D               	subwf	??_sprintf+2,w
 23191  13AF  1D03               	skipz
 23192  13B0  2BB3               	goto	u4735
 23193  13B1  0848               	movf	sprintf@width,w
 23194  13B2  023B               	subwf	??_sprintf,w
 23195  13B3                     u4735:	
 23196  13B3  1803               	skipnc
 23197  13B4  2BC0               	goto	l7474
 23198                           
 23199                           ;doprnt.c: 1382: width -= c;
 23200  13B5  0020               	movlb	0	; select bank0
 23201  13B6  084A               	movf	sprintf@c,w
 23202  13B7  00BB               	movwf	??_sprintf
 23203  13B8  01BC               	clrf	??_sprintf+1
 23204  13B9  1BBB               	btfsc	??_sprintf,7
 23205  13BA  03BC               	decf	??_sprintf+1,f
 23206  13BB  083B               	movf	??_sprintf,w
 23207  13BC  02C8               	subwf	sprintf@width,f
 23208  13BD  083C               	movf	??_sprintf+1,w
 23209  13BE  3BC9               	subwfb	sprintf@width+1,f
 23210  13BF  2BC3               	goto	l7476
 23211  13C0                     l7474:	
 23212                           
 23213                           ;doprnt.c: 1383: else
 23214                           ;doprnt.c: 1384: width = 0;
 23215  13C0  0020               	movlb	0	; select bank0
 23216  13C1  01C8               	clrf	sprintf@width
 23217  13C2  01C9               	clrf	sprintf@width+1
 23218  13C3                     l7476:	
 23219                           
 23220                           ;doprnt.c: 1422: {
 23221                           ;doprnt.c: 1424: if(width
 23222                           ;doprnt.c: 1428: )
 23223  13C3  0848               	movf	sprintf@width,w
 23224  13C4  0449               	iorwf	sprintf@width+1,w
 23225  13C5  1903               	btfsc	3,2
 23226  13C6  2BD9               	goto	l7484
 23227  13C7                     l7478:	
 23228                           ;doprnt.c: 1429: do
 23229                           
 23230                           
 23231                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 23232  13C7  082F               	movf	sprintf@sp,w
 23233  13C8  0086               	movwf	6
 23234  13C9  0830               	movf	sprintf@sp+1,w
 23235  13CA  0087               	movwf	7
 23236  13CB  3020               	movlw	32
 23237  13CC  0081               	movwf	1
 23238  13CD  3001               	movlw	1
 23239  13CE  07AF               	addwf	sprintf@sp,f
 23240  13CF  3000               	movlw	0
 23241  13D0  3DB0               	addwfc	sprintf@sp+1,f
 23242                           
 23243                           ;doprnt.c: 1431: while(--width);
 23244  13D1  30FF               	movlw	255
 23245  13D2  07C8               	addwf	sprintf@width,f
 23246  13D3  30FF               	movlw	255
 23247  13D4  3DC9               	addwfc	sprintf@width+1,f
 23248  13D5  0848               	movf	sprintf@width,w
 23249  13D6  0449               	iorwf	sprintf@width+1,w
 23250  13D7  1D03               	btfss	3,2
 23251  13D8  2BC7               	goto	l7478
 23252  13D9                     l7484:	
 23253                           
 23254                           ;doprnt.c: 1438: if(flag & 0x03)
 23255  13D9  0840               	movf	sprintf@flag,w
 23256  13DA  3903               	andlw	3
 23257  13DB  1903               	btfsc	3,2
 23258  13DC  2BE7               	goto	l7490
 23259                           
 23260                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 23261  13DD  082F               	movf	sprintf@sp,w
 23262  13DE  0086               	movwf	6
 23263  13DF  0830               	movf	sprintf@sp+1,w
 23264  13E0  0087               	movwf	7
 23265  13E1  302D               	movlw	45
 23266  13E2  0081               	movwf	1
 23267  13E3  3001               	movlw	1
 23268  13E4  07AF               	addwf	sprintf@sp,f
 23269  13E5  3000               	movlw	0
 23270  13E6  3DB0               	addwfc	sprintf@sp+1,f
 23271  13E7                     l7490:	
 23272                           
 23273                           ;doprnt.c: 1469: }
 23274                           ;doprnt.c: 1472: prec = c;
 23275  13E7  084A               	movf	sprintf@c,w
 23276  13E8  00BB               	movwf	??_sprintf
 23277  13E9  083B               	movf	??_sprintf,w
 23278  13EA  00BF               	movwf	sprintf@prec
 23279  13EB                     l7498:	
 23280                           ;doprnt.c: 1474: while(prec--) {
 23281                           
 23282  13EB  30FF               	movlw	255
 23283  13EC  00BB               	movwf	??_sprintf
 23284  13ED  083B               	movf	??_sprintf,w
 23285  13EE  07BF               	addwf	sprintf@prec,f
 23286  13EF  0A3F               	incf	sprintf@prec,w
 23287  13F0  1903               	btfsc	3,2
 23288  13F1  2A64               	goto	l7500
 23289                           
 23290                           ;doprnt.c: 1478: {
 23291                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 23292  13F2  300A               	movlw	10
 23293  13F3  00AB               	movwf	___lwmod@divisor
 23294  13F4  3000               	movlw	0
 23295  13F5  00AC               	movwf	___lwmod@divisor+1
 23296  13F6  083F               	movf	sprintf@prec,w
 23297  13F7  00BB               	movwf	??_sprintf
 23298  13F8  01BC               	clrf	??_sprintf+1
 23299  13F9  35BB               	lslf	??_sprintf,f
 23300  13FA  0DBC               	rlf	??_sprintf+1,f
 23301  13FB  3000               	movlw	low (_dpowers| (0+32768))
 23302  13FC  073B               	addwf	??_sprintf,w
 23303  13FD  0084               	movwf	4
 23304  13FE  30A8               	movlw	high (_dpowers| (0+32768))
 23305  13FF  3D3C               	addwfc	??_sprintf+1,w
 23306  1400  0085               	movwf	5
 23307  1401  3F00               	moviw [0]fsr0
 23308  1402  00F1               	movwf	___lwdiv@divisor
 23309  1403  3F01               	moviw [1]fsr0
 23310  1404  00F2               	movwf	___lwdiv@divisor+1
 23311  1405  0845               	movf	sprintf@val+1,w
 23312  1406  00F4               	movwf	___lwdiv@dividend+1
 23313  1407  0844               	movf	sprintf@val,w
 23314  1408  00F3               	movwf	___lwdiv@dividend
 23315  1409  31A2  22E5  3192   	fcall	___lwdiv
 23316  140C  0872               	movf	?___lwdiv+1,w
 23317  140D  0020               	movlb	0	; select bank0
 23318  140E  00AE               	movwf	___lwmod@dividend+1
 23319  140F  0871               	movf	?___lwdiv,w
 23320  1410  00AD               	movwf	___lwmod@dividend
 23321  1411  31A1  21F4  3192   	fcall	___lwmod
 23322  1414  0020               	movlb	0	; select bank0
 23323  1415  082B               	movf	?___lwmod,w
 23324  1416  3E30               	addlw	48
 23325  1417  00BD               	movwf	??_sprintf+2
 23326  1418  083D               	movf	??_sprintf+2,w
 23327  1419  00CA               	movwf	sprintf@c
 23328                           
 23329                           ;doprnt.c: 1523: }
 23330                           ;doprnt.c: 1524: ((*sp++ = (c)));
 23331  141A  082F               	movf	sprintf@sp,w
 23332  141B  0086               	movwf	6
 23333  141C  0830               	movf	sprintf@sp+1,w
 23334  141D  0087               	movwf	7
 23335  141E  084A               	movf	sprintf@c,w
 23336  141F  0081               	movwf	1
 23337  1420  3001               	movlw	1
 23338  1421  07AF               	addwf	sprintf@sp,f
 23339  1422  3000               	movlw	0
 23340  1423  3DB0               	addwfc	sprintf@sp+1,f
 23341  1424  2BEB               	goto	l7498
 23342  1425                     l7502:	
 23343                           ;doprnt.c: 1525: }
 23344                           ;doprnt.c: 1533: }
 23345                           ;doprnt.c: 1535: alldone:
 23346                           
 23347                           
 23348                           ;doprnt.c: 1538: *sp = 0;
 23349  1425  0020               	movlb	0	; select bank0
 23350  1426  082F               	movf	sprintf@sp,w
 23351  1427  0086               	movwf	6
 23352  1428  0830               	movf	sprintf@sp+1,w
 23353  1429  0087               	movwf	7
 23354  142A  0181               	clrf	1
 23355  142B  0008               	return
 23356  142C                     __end_of_sprintf:	
 23357                           ;doprnt.c: 1540: return 0;
 23358                           ;	Return value of _sprintf is never used
 23359                           
 23360                           
 23361                           	psect	text37
 23362  2EBD                     __ptext37:	
 23363 ;; *************** function _isdigit *****************
 23364 ;; Defined at:
 23365 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/isdigit.c"
 23366 ;; Parameters:    Size  Location     Type
 23367 ;;  c               1    wreg     unsigned char 
 23368 ;; Auto vars:     Size  Location     Type
 23369 ;;  c               1    2[COMMON] unsigned char 
 23370 ;; Return value:  Size  Location     Type
 23371 ;;		None               void
 23372 ;; Registers used:
 23373 ;;		wreg, status,2, status,0
 23374 ;; Tracked objects:
 23375 ;;		On entry : 0/0
 23376 ;;		On exit  : 0/0
 23377 ;;		Unchanged: 0/0
 23378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23380 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23382 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23383 ;;Total ram usage:        2 bytes
 23384 ;; Hardware stack levels used:    1
 23385 ;; Hardware stack levels required when called:    4
 23386 ;; This function calls:
 23387 ;;		Nothing
 23388 ;; This function is called by:
 23389 ;;		_sprintf
 23390 ;; This function uses a non-reentrant model
 23391 ;;
 23392                           
 23393                           
 23394                           ;psect for function _isdigit
 23395  2EBD                     _isdigit:	
 23396                           
 23397                           ;incstack = 0
 23398                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 23399                           ;isdigit@c stored from wreg
 23400  2EBD  00F2               	movwf	isdigit@c
 23401  2EBE  01F1               	clrf	_isdigit$3264
 23402  2EBF  303A               	movlw	58
 23403  2EC0  0272               	subwf	isdigit@c,w
 23404  2EC1  1803               	skipnc
 23405  2EC2  2EC9               	goto	l7222
 23406  2EC3  3030               	movlw	48
 23407  2EC4  0272               	subwf	isdigit@c,w
 23408  2EC5  1C03               	skipc
 23409  2EC6  2EC9               	goto	l7222
 23410  2EC7  01F1               	clrf	_isdigit$3264
 23411  2EC8  0AF1               	incf	_isdigit$3264,f
 23412  2EC9                     l7222:	
 23413  2EC9  0C71               	rrf	_isdigit$3264,w
 23414  2ECA  0008               	return
 23415  2ECB                     __end_of_isdigit:	
 23416                           
 23417                           	psect	text38
 23418  200F                     __ptext38:	
 23419 ;; *************** function ___wmul *****************
 23420 ;; Defined at:
 23421 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
 23422 ;; Parameters:    Size  Location     Type
 23423 ;;  multiplier      2    1[COMMON] unsigned int 
 23424 ;;  multiplicand    2    3[COMMON] unsigned int 
 23425 ;; Auto vars:     Size  Location     Type
 23426 ;;  product         2    5[COMMON] unsigned int 
 23427 ;; Return value:  Size  Location     Type
 23428 ;;                  2    1[COMMON] unsigned int 
 23429 ;; Registers used:
 23430 ;;		wreg, status,2, status,0
 23431 ;; Tracked objects:
 23432 ;;		On entry : 0/0
 23433 ;;		On exit  : 0/0
 23434 ;;		Unchanged: 0/0
 23435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23436 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23437 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23439 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23440 ;;Total ram usage:        6 bytes
 23441 ;; Hardware stack levels used:    1
 23442 ;; Hardware stack levels required when called:    4
 23443 ;; This function calls:
 23444 ;;		Nothing
 23445 ;; This function is called by:
 23446 ;;		_secret_check
 23447 ;;		_sprintf
 23448 ;; This function uses a non-reentrant model
 23449 ;;
 23450                           
 23451                           
 23452                           ;psect for function ___wmul
 23453  200F                     ___wmul:	
 23454                           
 23455                           ;incstack = 0
 23456                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 23457  200F  01F5               	clrf	___wmul@product
 23458  2010  01F6               	clrf	___wmul@product+1
 23459  2011                     l7228:	
 23460  2011  1C71               	btfss	___wmul@multiplier,0
 23461  2012  2817               	goto	l1565
 23462  2013  0873               	movf	___wmul@multiplicand,w
 23463  2014  07F5               	addwf	___wmul@product,f
 23464  2015  0874               	movf	___wmul@multiplicand+1,w
 23465  2016  3DF6               	addwfc	___wmul@product+1,f
 23466  2017                     l1565:	
 23467  2017  3001               	movlw	1
 23468  2018                     u4445:	
 23469  2018  35F3               	lslf	___wmul@multiplicand,f
 23470  2019  0DF4               	rlf	___wmul@multiplicand+1,f
 23471  201A  0B89               	decfsz	9,f
 23472  201B  2818               	goto	u4445
 23473  201C  3001               	movlw	1
 23474  201D                     u4455:	
 23475  201D  36F2               	lsrf	___wmul@multiplier+1,f
 23476  201E  0CF1               	rrf	___wmul@multiplier,f
 23477  201F  0B89               	decfsz	9,f
 23478  2020  281D               	goto	u4455
 23479  2021  0871               	movf	___wmul@multiplier,w
 23480  2022  0472               	iorwf	___wmul@multiplier+1,w
 23481  2023  1D03               	btfss	3,2
 23482  2024  2811               	goto	l7228
 23483  2025  0876               	movf	___wmul@product+1,w
 23484  2026  00F2               	movwf	?___wmul+1
 23485  2027  0875               	movf	___wmul@product,w
 23486  2028  00F1               	movwf	?___wmul
 23487  2029  0008               	return
 23488  202A                     __end_of___wmul:	
 23489                           
 23490                           	psect	text39
 23491  2DEB                     __ptext39:	
 23492 ;; *************** function _nullifyBadge_irTxSet *****************
 23493 ;; Defined at:
 23494 ;;		line 264 in file "nullifyBadge.c"
 23495 ;; Parameters:    Size  Location     Type
 23496 ;;		None
 23497 ;; Auto vars:     Size  Location     Type
 23498 ;;		None
 23499 ;; Return value:  Size  Location     Type
 23500 ;;                  1    wreg      void 
 23501 ;; Registers used:
 23502 ;;		None
 23503 ;; Tracked objects:
 23504 ;;		On entry : 0/0
 23505 ;;		On exit  : 0/0
 23506 ;;		Unchanged: 0/0
 23507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23512 ;;Total ram usage:        0 bytes
 23513 ;; Hardware stack levels used:    1
 23514 ;; Hardware stack levels required when called:    4
 23515 ;; This function calls:
 23516 ;;		Nothing
 23517 ;; This function is called by:
 23518 ;;		_flashy_Main
 23519 ;; This function uses a non-reentrant model
 23520 ;;
 23521                           
 23522                           
 23523                           ;psect for function _nullifyBadge_irTxSet
 23524  2DEB                     _nullifyBadge_irTxSet:	
 23525                           
 23526                           ;incstack = 0
 23527                           ; Regs used in _nullifyBadge_irTxSet: []
 23528                           ;nullifyBadge.c: 266: do { LATBbits.LATB7 = 0; } while(0);
 23529  2DEB  0022               	movlb	2	; select bank2
 23530  2DEC  138D               	bcf	13,7	;volatile
 23531  2DED  0008               	return
 23532  2DEE                     __end_of_nullifyBadge_irTxSet:	
 23533                           
 23534                           	psect	text40
 23535  2E81                     __ptext40:	
 23536 ;; *************** function _nullifyBadge_irTxRelease *****************
 23537 ;; Defined at:
 23538 ;;		line 254 in file "nullifyBadge.c"
 23539 ;; Parameters:    Size  Location     Type
 23540 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 23541 ;;		 -> badge_inst(18), 
 23542 ;; Auto vars:     Size  Location     Type
 23543 ;;  badge           1    2[COMMON] PTR struct t_nullifyBadg
 23544 ;;		 -> badge_inst(18), 
 23545 ;; Return value:  Size  Location     Type
 23546 ;;                  1    wreg      void 
 23547 ;; Registers used:
 23548 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 23549 ;; Tracked objects:
 23550 ;;		On entry : 0/0
 23551 ;;		On exit  : 0/0
 23552 ;;		Unchanged: 0/0
 23553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23555 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23556 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23557 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23558 ;;Total ram usage:        2 bytes
 23559 ;; Hardware stack levels used:    1
 23560 ;; Hardware stack levels required when called:    4
 23561 ;; This function calls:
 23562 ;;		Nothing
 23563 ;; This function is called by:
 23564 ;;		_flashy_Main
 23565 ;; This function uses a non-reentrant model
 23566 ;;
 23567                           
 23568                           
 23569                           ;psect for function _nullifyBadge_irTxRelease
 23570  2E81                     _nullifyBadge_irTxRelease:	
 23571                           
 23572                           ;incstack = 0
 23573                           ; Regs used in _nullifyBadge_irTxRelease: [wreg+fsr1l+fsr1h+status,2+status,0]
 23574                           ;nullifyBadge_irTxRelease@badge stored from wreg
 23575  2E81  00F2               	movwf	nullifyBadge_irTxRelease@badge
 23576                           
 23577                           ;nullifyBadge.c: 255: badge->registeredHw &= ~(1 << HW_IR_TX);
 23578  2E82  30FB               	movlw	251
 23579  2E83  00F1               	movwf	??_nullifyBadge_irTxRelease
 23580  2E84  0872               	movf	nullifyBadge_irTxRelease@badge,w
 23581  2E85  3E11               	addlw	17
 23582  2E86  0086               	movwf	6
 23583  2E87  3001               	movlw	1	; select bank2/3
 23584  2E88  0087               	movwf	7
 23585  2E89  0871               	movf	??_nullifyBadge_irTxRelease,w
 23586  2E8A  0581               	andwf	1,f
 23587  2E8B  0008               	return
 23588  2E8C                     __end_of_nullifyBadge_irTxRelease:	
 23589                           
 23590                           	psect	text41
 23591  2ED9                     __ptext41:	
 23592 ;; *************** function _nullifyBadge_irTxRegister *****************
 23593 ;; Defined at:
 23594 ;;		line 242 in file "nullifyBadge.c"
 23595 ;; Parameters:    Size  Location     Type
 23596 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 23597 ;;		 -> badge_inst(18), 
 23598 ;; Auto vars:     Size  Location     Type
 23599 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 23600 ;;		 -> badge_inst(18), 
 23601 ;; Return value:  Size  Location     Type
 23602 ;;                  1    wreg      char 
 23603 ;; Registers used:
 23604 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 23605 ;; Tracked objects:
 23606 ;;		On entry : 0/0
 23607 ;;		On exit  : 0/0
 23608 ;;		Unchanged: 0/0
 23609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23611 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23613 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23614 ;;Total ram usage:        1 bytes
 23615 ;; Hardware stack levels used:    1
 23616 ;; Hardware stack levels required when called:    4
 23617 ;; This function calls:
 23618 ;;		Nothing
 23619 ;; This function is called by:
 23620 ;;		_flashy_Main
 23621 ;; This function uses a non-reentrant model
 23622 ;;
 23623                           
 23624                           
 23625                           ;psect for function _nullifyBadge_irTxRegister
 23626  2ED9                     _nullifyBadge_irTxRegister:	
 23627                           
 23628                           ;incstack = 0
 23629                           ; Regs used in _nullifyBadge_irTxRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 23630                           ;nullifyBadge_irTxRegister@badge stored from wreg
 23631  2ED9  00F1               	movwf	nullifyBadge_irTxRegister@badge
 23632                           
 23633                           ;nullifyBadge.c: 243: if (badge->registeredHw & HW_IR_TX) {
 23634  2EDA  0871               	movf	nullifyBadge_irTxRegister@badge,w
 23635  2EDB  3E11               	addlw	17
 23636  2EDC  0086               	movwf	6
 23637  2EDD  3001               	movlw	1	; select bank2/3
 23638  2EDE  0087               	movwf	7
 23639  2EDF  1881               	btfsc	1,1
 23640  2EE0  0008               	return
 23641                           
 23642                           ;nullifyBadge.c: 246: else {
 23643                           ;nullifyBadge.c: 247: badge->registeredHw |= (1 << HW_IR_TX);
 23644                           
 23645                           ;nullifyBadge.c: 245: }
 23646                           
 23647                           ;nullifyBadge.c: 244: return -1;
 23648                           ;	Return value of _nullifyBadge_irTxRegister is never used
 23649  2EE1  0871               	movf	nullifyBadge_irTxRegister@badge,w
 23650  2EE2  3E11               	addlw	17
 23651  2EE3  0086               	movwf	6
 23652  2EE4  3001               	movlw	1	; select bank2/3
 23653  2EE5  0087               	movwf	7
 23654  2EE6  1501               	bsf	1,2
 23655                           
 23656                           ;nullifyBadge.c: 248: return 0;
 23657                           ;	Return value of _nullifyBadge_irTxRegister is never used
 23658  2EE7  0008               	return
 23659  2EE8                     __end_of_nullifyBadge_irTxRegister:	
 23660                           
 23661                           	psect	text42
 23662  2DE8                     __ptext42:	
 23663 ;; *************** function _nullifyBadge_irTxClr *****************
 23664 ;; Defined at:
 23665 ;;		line 270 in file "nullifyBadge.c"
 23666 ;; Parameters:    Size  Location     Type
 23667 ;;		None
 23668 ;; Auto vars:     Size  Location     Type
 23669 ;;		None
 23670 ;; Return value:  Size  Location     Type
 23671 ;;                  1    wreg      void 
 23672 ;; Registers used:
 23673 ;;		None
 23674 ;; Tracked objects:
 23675 ;;		On entry : 0/0
 23676 ;;		On exit  : 0/0
 23677 ;;		Unchanged: 0/0
 23678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23683 ;;Total ram usage:        0 bytes
 23684 ;; Hardware stack levels used:    1
 23685 ;; Hardware stack levels required when called:    4
 23686 ;; This function calls:
 23687 ;;		Nothing
 23688 ;; This function is called by:
 23689 ;;		_flashy_Main
 23690 ;; This function uses a non-reentrant model
 23691 ;;
 23692                           
 23693                           
 23694                           ;psect for function _nullifyBadge_irTxClr
 23695  2DE8                     _nullifyBadge_irTxClr:	
 23696                           
 23697                           ;incstack = 0
 23698                           ; Regs used in _nullifyBadge_irTxClr: []
 23699                           ;nullifyBadge.c: 272: do { LATBbits.LATB7 = 1; } while(0);
 23700  2DE8  0022               	movlb	2	; select bank2
 23701  2DE9  178D               	bsf	13,7	;volatile
 23702  2DEA  0008               	return
 23703  2DEB                     __end_of_nullifyBadge_irTxClr:	
 23704                           
 23705                           	psect	text43
 23706  2DF2                     __ptext43:	
 23707 ;; *************** function _nullifyBadge_irGet *****************
 23708 ;; Defined at:
 23709 ;;		line 232 in file "nullifyBadge.c"
 23710 ;; Parameters:    Size  Location     Type
 23711 ;;		None
 23712 ;; Auto vars:     Size  Location     Type
 23713 ;;		None
 23714 ;; Return value:  Size  Location     Type
 23715 ;;                  1    wreg      unsigned char 
 23716 ;; Registers used:
 23717 ;;		wreg, status,2, status,0
 23718 ;; Tracked objects:
 23719 ;;		On entry : 0/0
 23720 ;;		On exit  : 0/0
 23721 ;;		Unchanged: 0/0
 23722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23727 ;;Total ram usage:        0 bytes
 23728 ;; Hardware stack levels used:    1
 23729 ;; Hardware stack levels required when called:    4
 23730 ;; This function calls:
 23731 ;;		Nothing
 23732 ;; This function is called by:
 23733 ;;		_flashy_Main
 23734 ;; This function uses a non-reentrant model
 23735 ;;
 23736                           
 23737                           
 23738                           ;psect for function _nullifyBadge_irGet
 23739  2DF2                     _nullifyBadge_irGet:	
 23740                           
 23741                           ;nullifyBadge.c: 233: return PORTBbits.RB5;
 23742                           
 23743                           ;incstack = 0
 23744                           ; Regs used in _nullifyBadge_irGet: [wreg+status,2+status,0]
 23745  2DF2  0020               	movlb	0	; select bank0
 23746  2DF3  0E0D               	swapf	13,w	;volatile
 23747  2DF4  0C89               	rrf	9,f
 23748  2DF5  3901               	andlw	1
 23749  2DF6  0008               	return
 23750  2DF7                     __end_of_nullifyBadge_irGet:	
 23751                           
 23752                           	psect	text44
 23753  2250                     __ptext44:	
 23754 ;; *************** function _nullifyBadge_buttonsGet *****************
 23755 ;; Defined at:
 23756 ;;		line 187 in file "nullifyBadge.c"
 23757 ;; Parameters:    Size  Location     Type
 23758 ;;		None
 23759 ;; Auto vars:     Size  Location     Type
 23760 ;;  retVal          1    3[COMMON] unsigned char 
 23761 ;; Return value:  Size  Location     Type
 23762 ;;                  1    wreg      unsigned char 
 23763 ;; Registers used:
 23764 ;;		wreg, status,2, status,0
 23765 ;; Tracked objects:
 23766 ;;		On entry : 0/0
 23767 ;;		On exit  : 0/0
 23768 ;;		Unchanged: 0/0
 23769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23771 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23772 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23773 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23774 ;;Total ram usage:        3 bytes
 23775 ;; Hardware stack levels used:    1
 23776 ;; Hardware stack levels required when called:    4
 23777 ;; This function calls:
 23778 ;;		Nothing
 23779 ;; This function is called by:
 23780 ;;		_menu_Main
 23781 ;;		_flashy_Main
 23782 ;;		_locked_Main
 23783 ;;		_secret_Main
 23784 ;;		_slot_Main
 23785 ;; This function uses a non-reentrant model
 23786 ;;
 23787                           
 23788                           
 23789                           ;psect for function _nullifyBadge_buttonsGet
 23790  2250                     _nullifyBadge_buttonsGet:	
 23791                           
 23792                           ;nullifyBadge.c: 188: u8 retVal = 0x0F;
 23793                           
 23794                           ;incstack = 0
 23795                           ; Regs used in _nullifyBadge_buttonsGet: [wreg+status,2+status,0]
 23796  2250  300F               	movlw	15
 23797  2251  00F1               	movwf	??_nullifyBadge_buttonsGet
 23798  2252  0871               	movf	??_nullifyBadge_buttonsGet,w
 23799  2253  00F3               	movwf	nullifyBadge_buttonsGet@retVal
 23800                           
 23801                           ;nullifyBadge.c: 190: retVal &= ~(PORTCbits.RC5 << 0);
 23802  2254  0020               	movlb	0	; select bank0
 23803  2255  0E0E               	swapf	14,w	;volatile
 23804  2256  0C89               	rrf	9,f
 23805  2257  3901               	andlw	1
 23806  2258  3AFF               	xorlw	255
 23807  2259  00F1               	movwf	??_nullifyBadge_buttonsGet
 23808  225A  0871               	movf	??_nullifyBadge_buttonsGet,w
 23809  225B  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 23810                           
 23811                           ;nullifyBadge.c: 191: retVal &= ~(PORTAbits.RA2 << 1);
 23812  225C  0C0C               	rrf	12,w	;volatile
 23813  225D  0C89               	rrf	9,f
 23814  225E  3901               	andlw	1
 23815  225F  0709               	addwf	9,w
 23816  2260  3AFF               	xorlw	255
 23817  2261  00F1               	movwf	??_nullifyBadge_buttonsGet
 23818  2262  0871               	movf	??_nullifyBadge_buttonsGet,w
 23819  2263  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 23820                           
 23821                           ;nullifyBadge.c: 192: retVal &= ~(PORTAbits.RA4 << 2);
 23822  2264  0E0C               	swapf	12,w	;volatile
 23823  2265  3901               	andlw	1
 23824  2266  00F1               	movwf	??_nullifyBadge_buttonsGet
 23825  2267  3001               	movlw	1
 23826  2268                     u4525:	
 23827  2268  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 23828  2269  3EFF               	addlw	-1
 23829  226A  1D03               	skipz
 23830  226B  2A68               	goto	u4525
 23831  226C  3571               	lslf	??_nullifyBadge_buttonsGet,w
 23832  226D  3AFF               	xorlw	255
 23833  226E  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 23834  226F  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 23835  2270  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 23836                           
 23837                           ;nullifyBadge.c: 193: retVal &= ~(PORTAbits.RA5 << 3);
 23838  2271  0E0C               	swapf	12,w	;volatile
 23839  2272  0C89               	rrf	9,f
 23840  2273  3901               	andlw	1
 23841  2274  00F1               	movwf	??_nullifyBadge_buttonsGet
 23842  2275  3002               	movlw	2
 23843  2276                     u4535:	
 23844  2276  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 23845  2277  3EFF               	addlw	-1
 23846  2278  1D03               	skipz
 23847  2279  2A76               	goto	u4535
 23848  227A  3571               	lslf	??_nullifyBadge_buttonsGet,w
 23849  227B  3AFF               	xorlw	255
 23850  227C  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 23851  227D  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 23852  227E  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 23853                           
 23854                           ;nullifyBadge.c: 195: return retVal;
 23855  227F  0873               	movf	nullifyBadge_buttonsGet@retVal,w
 23856  2280  0008               	return
 23857  2281                     __end_of_nullifyBadge_buttonsGet:	
 23858                           
 23859                           	psect	text45
 23860  2F63                     __ptext45:	
 23861 ;; *************** function _let_alternate *****************
 23862 ;; Defined at:
 23863 ;;		line 191 in file "main.c"
 23864 ;; Parameters:    Size  Location     Type
 23865 ;;  count           2   16[BANK0 ] unsigned int 
 23866 ;; Auto vars:     Size  Location     Type
 23867 ;;		None
 23868 ;; Return value:  Size  Location     Type
 23869 ;;                  1    wreg      void 
 23870 ;; Registers used:
 23871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23872 ;; Tracked objects:
 23873 ;;		On entry : 0/0
 23874 ;;		On exit  : 0/0
 23875 ;;		Unchanged: 0/0
 23876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23877 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23880 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23881 ;;Total ram usage:        2 bytes
 23882 ;; Hardware stack levels used:    1
 23883 ;; Hardware stack levels required when called:    9
 23884 ;; This function calls:
 23885 ;;		_nullifyBadge_userLedsSet
 23886 ;; This function is called by:
 23887 ;;		_flashy_Main
 23888 ;; This function uses a non-reentrant model
 23889 ;;
 23890                           
 23891                           
 23892                           ;psect for function _let_alternate
 23893  2F63                     _let_alternate:	
 23894                           
 23895                           ;main.c: 192: if(count %2 == 1){
 23896                           
 23897                           ;incstack = 0
 23898                           ; Regs used in _let_alternate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 23899  2F63  0020               	movlb	0	; select bank0
 23900  2F64  1C30               	btfss	let_alternate@count,0
 23901  2F65  2F6E               	goto	l7270
 23902                           
 23903                           ;main.c: 193: nullifyBadge_userLedsSet(&badge_inst,43349);
 23904  2F66  3055               	movlw	85
 23905  2F67  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 23906  2F68  30A9               	movlw	169
 23907  2F69  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 23908  2F6A  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 23909  2F6B  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 23910                           
 23911                           ;main.c: 194: }
 23912  2F6D  0008               	return
 23913  2F6E                     l7270:	
 23914                           
 23915                           ;main.c: 195: else{
 23916                           ;main.c: 196: nullifyBadge_userLedsSet(&badge_inst,21162);
 23917  2F6E  30AA               	movlw	170
 23918  2F6F  0020               	movlb	0	; select bank0
 23919  2F70  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 23920  2F71  3052               	movlw	82
 23921  2F72  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 23922  2F73  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 23923  2F74  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 23924  2F76  0008               	return
 23925  2F77                     __end_of_let_alternate:	
 23926                           
 23927                           	psect	text46
 23928  247E                     __ptext46:	
 23929 ;; *************** function _led_roundabout *****************
 23930 ;; Defined at:
 23931 ;;		line 156 in file "main.c"
 23932 ;; Parameters:    Size  Location     Type
 23933 ;;  counter         2   16[BANK0 ] unsigned int 
 23934 ;; Auto vars:     Size  Location     Type
 23935 ;;  size            2   22[BANK0 ] unsigned int 
 23936 ;;  leds            2   20[BANK0 ] unsigned int 
 23937 ;; Return value:  Size  Location     Type
 23938 ;;                  1    wreg      void 
 23939 ;; Registers used:
 23940 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23941 ;; Tracked objects:
 23942 ;;		On entry : 0/0
 23943 ;;		On exit  : 0/0
 23944 ;;		Unchanged: 0/0
 23945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23946 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23947 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23948 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23949 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23950 ;;Total ram usage:        8 bytes
 23951 ;; Hardware stack levels used:    1
 23952 ;; Hardware stack levels required when called:    9
 23953 ;; This function calls:
 23954 ;;		___lwmod
 23955 ;;		_nullifyBadge_userLedsSet
 23956 ;; This function is called by:
 23957 ;;		_flashy_Main
 23958 ;; This function uses a non-reentrant model
 23959 ;;
 23960                           
 23961                           
 23962                           ;psect for function _led_roundabout
 23963  247E                     _led_roundabout:	
 23964                           
 23965                           ;main.c: 157: u16 size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 23966                           
 23967                           ;incstack = 0
 23968                           ; Regs used in _led_roundabout: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 23969  247E  300E               	movlw	14
 23970  247F  0020               	movlb	0	; select bank0
 23971  2480  00B6               	movwf	led_roundabout@size
 23972  2481  3000               	movlw	0
 23973  2482  00B7               	movwf	led_roundabout@size+1
 23974                           
 23975                           ;main.c: 158: u16 leds = roundabout_leds[counter % size];
 23976  2483  0837               	movf	led_roundabout@size+1,w
 23977  2484  00AC               	movwf	___lwmod@divisor+1
 23978  2485  0836               	movf	led_roundabout@size,w
 23979  2486  00AB               	movwf	___lwmod@divisor
 23980  2487  0831               	movf	led_roundabout@counter+1,w
 23981  2488  00AE               	movwf	___lwmod@dividend+1
 23982  2489  0830               	movf	led_roundabout@counter,w
 23983  248A  00AD               	movwf	___lwmod@dividend
 23984  248B  31A1  21F4  31A4   	fcall	___lwmod
 23985  248E  0020               	movlb	0	; select bank0
 23986  248F  082B               	movf	?___lwmod,w
 23987  2490  0709               	addwf	9,w
 23988  2491  3E3C               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 23989  2492  0086               	movwf	6
 23990  2493  3003               	movlw	3	; select bank6/7
 23991  2494  0087               	movwf	7
 23992  2495  3F40               	moviw [0]fsr1
 23993  2496  00B4               	movwf	led_roundabout@leds
 23994  2497  3F41               	moviw [1]fsr1
 23995  2498  00B5               	movwf	led_roundabout@leds+1
 23996                           
 23997                           ;main.c: 160: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 23998  2499  300E               	movlw	14
 23999  249A  00B6               	movwf	led_roundabout@size
 24000  249B  3000               	movlw	0
 24001  249C  00B7               	movwf	led_roundabout@size+1
 24002                           
 24003                           ;main.c: 161: leds |= roundabout_leds_inverse[counter % size];
 24004  249D  0837               	movf	led_roundabout@size+1,w
 24005  249E  00AC               	movwf	___lwmod@divisor+1
 24006  249F  0836               	movf	led_roundabout@size,w
 24007  24A0  00AB               	movwf	___lwmod@divisor
 24008  24A1  0831               	movf	led_roundabout@counter+1,w
 24009  24A2  00AE               	movwf	___lwmod@dividend+1
 24010  24A3  0830               	movf	led_roundabout@counter,w
 24011  24A4  00AD               	movwf	___lwmod@dividend
 24012  24A5  31A1  21F4  31A4   	fcall	___lwmod
 24013  24A8  0020               	movlb	0	; select bank0
 24014  24A9  082B               	movf	?___lwmod,w
 24015  24AA  0709               	addwf	9,w
 24016  24AB  3EBC               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 24017  24AC  0086               	movwf	6
 24018  24AD  3003               	movlw	3	; select bank7/8
 24019  24AE  0087               	movwf	7
 24020  24AF  3F40               	moviw [0]fsr1
 24021  24B0  00B2               	movwf	??_led_roundabout
 24022  24B1  3F41               	moviw [1]fsr1
 24023  24B2  00B3               	movwf	??_led_roundabout+1
 24024  24B3  0832               	movf	??_led_roundabout,w
 24025  24B4  04B4               	iorwf	led_roundabout@leds,f
 24026  24B5  0833               	movf	??_led_roundabout+1,w
 24027  24B6  04B5               	iorwf	led_roundabout@leds+1,f
 24028                           
 24029                           ;main.c: 163: nullifyBadge_userLedsSet(&badge_inst, leds);
 24030  24B7  0835               	movf	led_roundabout@leds+1,w
 24031  24B8  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 24032  24B9  0834               	movf	led_roundabout@leds,w
 24033  24BA  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 24034  24BB  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 24035  24BC  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 24036  24BE  0008               	return
 24037  24BF                     __end_of_led_roundabout:	
 24038                           
 24039                           	psect	text47
 24040  25D1                     __ptext47:	
 24041 ;; *************** function _led_rand *****************
 24042 ;; Defined at:
 24043 ;;		line 176 in file "main.c"
 24044 ;; Parameters:    Size  Location     Type
 24045 ;;		None
 24046 ;; Auto vars:     Size  Location     Type
 24047 ;;  spark           2   27[BANK0 ] unsigned int 
 24048 ;; Return value:  Size  Location     Type
 24049 ;;                  1    wreg      void 
 24050 ;; Registers used:
 24051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24052 ;; Tracked objects:
 24053 ;;		On entry : 0/0
 24054 ;;		On exit  : 0/0
 24055 ;;		Unchanged: 0/0
 24056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24058 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24059 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24060 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24061 ;;Total ram usage:       10 bytes
 24062 ;; Hardware stack levels used:    1
 24063 ;; Hardware stack levels required when called:    9
 24064 ;; This function calls:
 24065 ;;		___almod
 24066 ;;		_nullifyBadge_userLedsSet
 24067 ;;		_rand
 24068 ;; This function is called by:
 24069 ;;		_flashy_Main
 24070 ;;		_slot_Finished_Animation
 24071 ;; This function uses a non-reentrant model
 24072 ;;
 24073                           
 24074                           
 24075                           ;psect for function _led_rand
 24076  25D1                     _led_rand:	
 24077                           
 24078                           ;main.c: 178: u16 spark = rand() % 65535;
 24079                           
 24080                           ;incstack = 0
 24081                           ; Regs used in _led_rand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 24082  25D1  3000               	movlw	0
 24083  25D2  0020               	movlb	0	; select bank0
 24084  25D3  00AE               	movwf	___almod@divisor+3
 24085  25D4  3000               	movlw	0
 24086  25D5  00AD               	movwf	___almod@divisor+2
 24087  25D6  30FF               	movlw	255
 24088  25D7  00AC               	movwf	___almod@divisor+1
 24089  25D8  30FF               	movlw	255
 24090  25D9  00AB               	movwf	___almod@divisor
 24091  25DA  31A5  2501  31A5   	fcall	_rand
 24092  25DD  0020               	movlb	0	; select bank0
 24093  25DE  0824               	movf	?_rand,w
 24094  25DF  00AF               	movwf	___almod@dividend
 24095  25E0  0825               	movf	?_rand+1,w
 24096  25E1  00B0               	movwf	___almod@dividend+1
 24097  25E2  0D89               	rlf	9,f
 24098  25E3  3B89               	subwfb	9,f
 24099  25E4  0989               	comf	9,f
 24100  25E5  00B1               	movwf	___almod@dividend+2
 24101  25E6  00B2               	movwf	___almod@dividend+3
 24102  25E7  319A  2257  31A5   	fcall	___almod
 24103  25EA  0020               	movlb	0	; select bank0
 24104  25EB  082C               	movf	?___almod+1,w
 24105  25EC  00BC               	movwf	led_rand@spark+1
 24106  25ED  082B               	movf	?___almod,w
 24107  25EE  00BB               	movwf	led_rand@spark
 24108                           
 24109                           ;main.c: 179: if ( (spark | 64511) == 65535 ){
 24110  25EF  30FF               	movlw	255
 24111  25F0  00B3               	movwf	??_led_rand
 24112  25F1  30FB               	movlw	251
 24113  25F2  00B4               	movwf	??_led_rand+1
 24114  25F3  3000               	movlw	0
 24115  25F4  00B5               	movwf	??_led_rand+2
 24116  25F5  3000               	movlw	0
 24117  25F6  00B6               	movwf	??_led_rand+3
 24118  25F7  083B               	movf	led_rand@spark,w
 24119  25F8  00B7               	movwf	??_led_rand+4
 24120  25F9  083C               	movf	led_rand@spark+1,w
 24121  25FA  00B8               	movwf	??_led_rand+5
 24122  25FB  01B9               	clrf	??_led_rand+6
 24123  25FC  01BA               	clrf	??_led_rand+7
 24124  25FD  0837               	movf	??_led_rand+4,w
 24125  25FE  04B3               	iorwf	??_led_rand,f
 24126  25FF  0838               	movf	??_led_rand+5,w
 24127  2600  04B4               	iorwf	??_led_rand+1,f
 24128  2601  0839               	movf	??_led_rand+6,w
 24129  2602  04B5               	iorwf	??_led_rand+2,f
 24130  2603  083A               	movf	??_led_rand+7,w
 24131  2604  04B6               	iorwf	??_led_rand+3,f
 24132  2605  0A33               	incf	??_led_rand,w
 24133  2606  1D03               	skipz
 24134  2607  2E11               	goto	l7184
 24135  2608  0A34               	incf	??_led_rand+1,w
 24136  2609  0435               	iorwf	??_led_rand+2,w
 24137  260A  0436               	iorwf	??_led_rand+3,w
 24138  260B  1D03               	btfss	3,2
 24139  260C  2E11               	goto	l7184
 24140                           
 24141                           ;main.c: 180: spark ^= 1024 ;
 24142  260D  3000               	movlw	0
 24143  260E  06BB               	xorwf	led_rand@spark,f
 24144  260F  3004               	movlw	4
 24145  2610  06BC               	xorwf	led_rand@spark+1,f
 24146  2611                     l7184:	
 24147                           
 24148                           ;main.c: 181: }
 24149                           ;main.c: 182: nullifyBadge_userLedsSet(&badge_inst,spark);
 24150  2611  083C               	movf	led_rand@spark+1,w
 24151  2612  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 24152  2613  083B               	movf	led_rand@spark,w
 24153  2614  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 24154  2615  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 24155  2616  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 24156  2618  0008               	return
 24157  2619                     __end_of_led_rand:	
 24158                           
 24159                           	psect	text48
 24160  2501                     __ptext48:	
 24161 ;; *************** function _rand *****************
 24162 ;; Defined at:
 24163 ;;		line 12 in file "/Applications/microchip/xc8/v1.42/sources/common/rand.c"
 24164 ;; Parameters:    Size  Location     Type
 24165 ;;		None
 24166 ;; Auto vars:     Size  Location     Type
 24167 ;;		None
 24168 ;; Return value:  Size  Location     Type
 24169 ;;                  2    4[BANK0 ] int 
 24170 ;; Registers used:
 24171 ;;		wreg, status,2, status,0, pclath, cstack
 24172 ;; Tracked objects:
 24173 ;;		On entry : 0/0
 24174 ;;		On exit  : 0/0
 24175 ;;		Unchanged: 0/0
 24176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24177 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24179 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24180 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24181 ;;Total ram usage:        7 bytes
 24182 ;; Hardware stack levels used:    1
 24183 ;; Hardware stack levels required when called:    5
 24184 ;; This function calls:
 24185 ;;		___lmul
 24186 ;; This function is called by:
 24187 ;;		_led_rand
 24188 ;;		_slot_Setup
 24189 ;;		_slot_Main
 24190 ;; This function uses a non-reentrant model
 24191 ;;
 24192                           
 24193                           
 24194                           ;psect for function _rand
 24195  2501                     _rand:	
 24196                           
 24197                           ;incstack = 0
 24198                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 24199  2501  0021               	movlb	1	; select bank1
 24200  2502  085C               	movf	(_randx+3)^(0+128),w
 24201  2503  00F4               	movwf	___lmul@multiplier+3
 24202  2504  085B               	movf	(_randx+2)^(0+128),w
 24203  2505  00F3               	movwf	___lmul@multiplier+2
 24204  2506  085A               	movf	(_randx+1)^(0+128),w
 24205  2507  00F2               	movwf	___lmul@multiplier+1
 24206  2508  0859               	movf	_randx^(0+128),w
 24207  2509  00F1               	movwf	___lmul@multiplier
 24208  250A  3041               	movlw	65
 24209  250B  00F8               	movwf	___lmul@multiplicand+3
 24210  250C  30C6               	movlw	198
 24211  250D  00F7               	movwf	___lmul@multiplicand+2
 24212  250E  304E               	movlw	78
 24213  250F  00F6               	movwf	___lmul@multiplicand+1
 24214  2510  306D               	movlw	109
 24215  2511  00F5               	movwf	___lmul@multiplicand
 24216  2512  31A2  2281  31A5   	fcall	___lmul
 24217  2515  0874               	movf	?___lmul+3,w
 24218  2516  0021               	movlb	1	; select bank1
 24219  2517  00DC               	movwf	(_randx+3)^(0+128)
 24220  2518  0873               	movf	?___lmul+2,w
 24221  2519  00DB               	movwf	(_randx+2)^(0+128)
 24222  251A  0872               	movf	?___lmul+1,w
 24223  251B  00DA               	movwf	(_randx+1)^(0+128)
 24224  251C  0871               	movf	?___lmul,w
 24225  251D  00D9               	movwf	_randx^(0+128)
 24226  251E  3039               	movlw	57
 24227  251F  07D9               	addwf	_randx^(0+128),f
 24228  2520  3030               	movlw	48
 24229  2521  3DDA               	addwfc	(_randx+1)^(0+128),f
 24230  2522  3000               	movlw	0
 24231  2523  3DDB               	addwfc	(_randx+2)^(0+128),f
 24232  2524  3000               	movlw	0
 24233  2525  3DDC               	addwfc	(_randx+3)^(0+128),f
 24234  2526  0859               	movf	_randx^(0+128),w
 24235  2527  0020               	movlb	0	; select bank0
 24236  2528  00A6               	movwf	??_rand
 24237  2529  0021               	movlb	1	; select bank1
 24238  252A  085A               	movf	(_randx+1)^(0+128),w
 24239  252B  0020               	movlb	0	; select bank0
 24240  252C  00A7               	movwf	??_rand+1
 24241  252D  0021               	movlb	1	; select bank1
 24242  252E  085B               	movf	(_randx+2)^(0+128),w
 24243  252F  0020               	movlb	0	; select bank0
 24244  2530  00A8               	movwf	??_rand+2
 24245  2531  0021               	movlb	1	; select bank1
 24246  2532  085C               	movf	(_randx+3)^(0+128),w
 24247  2533  0020               	movlb	0	; select bank0
 24248  2534  00A9               	movwf	??_rand+3
 24249  2535  3010               	movlw	16
 24250  2536  00AA               	movwf	??_rand+4
 24251  2537                     u4105:	
 24252  2537  37A9               	asrf	??_rand+3,f
 24253  2538  0CA8               	rrf	??_rand+2,f
 24254  2539  0CA7               	rrf	??_rand+1,f
 24255  253A  0CA6               	rrf	??_rand,f
 24256  253B  0BAA               	decfsz	??_rand+4,f
 24257  253C  2D37               	goto	u4105
 24258  253D  30FF               	movlw	255
 24259  253E  0526               	andwf	??_rand,w
 24260  253F  00A4               	movwf	?_rand
 24261  2540  307F               	movlw	127
 24262  2541  0527               	andwf	??_rand+1,w
 24263  2542  00A5               	movwf	?_rand+1
 24264  2543  0008               	return
 24265  2544                     __end_of_rand:	
 24266                           
 24267                           	psect	text49
 24268  2281                     __ptext49:	
 24269 ;; *************** function ___lmul *****************
 24270 ;; Defined at:
 24271 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul32.c"
 24272 ;; Parameters:    Size  Location     Type
 24273 ;;  multiplier      4    1[COMMON] unsigned long 
 24274 ;;  multiplicand    4    5[COMMON] unsigned long 
 24275 ;; Auto vars:     Size  Location     Type
 24276 ;;  product         4    0[BANK0 ] unsigned long 
 24277 ;; Return value:  Size  Location     Type
 24278 ;;                  4    1[COMMON] unsigned long 
 24279 ;; Registers used:
 24280 ;;		wreg, status,2, status,0
 24281 ;; Tracked objects:
 24282 ;;		On entry : 0/0
 24283 ;;		On exit  : 0/0
 24284 ;;		Unchanged: 0/0
 24285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24286 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24287 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24289 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24290 ;;Total ram usage:       12 bytes
 24291 ;; Hardware stack levels used:    1
 24292 ;; Hardware stack levels required when called:    4
 24293 ;; This function calls:
 24294 ;;		Nothing
 24295 ;; This function is called by:
 24296 ;;		_rand
 24297 ;; This function uses a non-reentrant model
 24298 ;;
 24299                           
 24300                           
 24301                           ;psect for function ___lmul
 24302  2281                     ___lmul:	
 24303                           
 24304                           ;incstack = 0
 24305                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 24306  2281  3000               	movlw	0
 24307  2282  0020               	movlb	0	; select bank0
 24308  2283  00A3               	movwf	___lmul@product+3
 24309  2284  3000               	movlw	0
 24310  2285  00A2               	movwf	___lmul@product+2
 24311  2286  3000               	movlw	0
 24312  2287  00A1               	movwf	___lmul@product+1
 24313  2288  3000               	movlw	0
 24314  2289  00A0               	movwf	___lmul@product
 24315  228A                     l7008:	
 24316  228A  1C71               	btfss	___lmul@multiplier,0
 24317  228B  2A95               	goto	l7012
 24318  228C  0875               	movf	___lmul@multiplicand,w
 24319  228D  0020               	movlb	0	; select bank0
 24320  228E  07A0               	addwf	___lmul@product,f
 24321  228F  0876               	movf	___lmul@multiplicand+1,w
 24322  2290  3DA1               	addwfc	___lmul@product+1,f
 24323  2291  0877               	movf	___lmul@multiplicand+2,w
 24324  2292  3DA2               	addwfc	___lmul@product+2,f
 24325  2293  0878               	movf	___lmul@multiplicand+3,w
 24326  2294  3DA3               	addwfc	___lmul@product+3,f
 24327  2295                     l7012:	
 24328  2295  3001               	movlw	1
 24329  2296                     u4055:	
 24330  2296  35F5               	lslf	___lmul@multiplicand,f
 24331  2297  0DF6               	rlf	___lmul@multiplicand+1,f
 24332  2298  0DF7               	rlf	___lmul@multiplicand+2,f
 24333  2299  0DF8               	rlf	___lmul@multiplicand+3,f
 24334  229A  0B89               	decfsz	9,f
 24335  229B  2A96               	goto	u4055
 24336  229C  3001               	movlw	1
 24337  229D                     u4065:	
 24338  229D  36F4               	lsrf	___lmul@multiplier+3,f
 24339  229E  0CF3               	rrf	___lmul@multiplier+2,f
 24340  229F  0CF2               	rrf	___lmul@multiplier+1,f
 24341  22A0  0CF1               	rrf	___lmul@multiplier,f
 24342  22A1  0B89               	decfsz	9,f
 24343  22A2  2A9D               	goto	u4065
 24344  22A3  0874               	movf	___lmul@multiplier+3,w
 24345  22A4  0473               	iorwf	___lmul@multiplier+2,w
 24346  22A5  0472               	iorwf	___lmul@multiplier+1,w
 24347  22A6  0471               	iorwf	___lmul@multiplier,w
 24348  22A7  1D03               	skipz
 24349  22A8  2A8A               	goto	l7008
 24350  22A9  0020               	movlb	0	; select bank0
 24351  22AA  0823               	movf	___lmul@product+3,w
 24352  22AB  00F4               	movwf	?___lmul+3
 24353  22AC  0822               	movf	___lmul@product+2,w
 24354  22AD  00F3               	movwf	?___lmul+2
 24355  22AE  0821               	movf	___lmul@product+1,w
 24356  22AF  00F2               	movwf	?___lmul+1
 24357  22B0  0820               	movf	___lmul@product,w
 24358  22B1  00F1               	movwf	?___lmul
 24359  22B2  0008               	return
 24360  22B3                     __end_of___lmul:	
 24361                           
 24362                           	psect	text50
 24363  1A57                     __ptext50:	
 24364 ;; *************** function ___almod *****************
 24365 ;; Defined at:
 24366 ;;		line 5 in file "/Applications/microchip/xc8/v1.42/sources/common/almod.c"
 24367 ;; Parameters:    Size  Location     Type
 24368 ;;  divisor         4   11[BANK0 ] long 
 24369 ;;  dividend        4   15[BANK0 ] long 
 24370 ;; Auto vars:     Size  Location     Type
 24371 ;;  sign            1   11[COMMON] unsigned char 
 24372 ;;  counter         1   10[COMMON] unsigned char 
 24373 ;; Return value:  Size  Location     Type
 24374 ;;                  4   11[BANK0 ] long 
 24375 ;; Registers used:
 24376 ;;		wreg, status,2, status,0
 24377 ;; Tracked objects:
 24378 ;;		On entry : 0/0
 24379 ;;		On exit  : 0/0
 24380 ;;		Unchanged: 0/0
 24381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24382 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24383 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24384 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24385 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24386 ;;Total ram usage:       11 bytes
 24387 ;; Hardware stack levels used:    1
 24388 ;; Hardware stack levels required when called:    4
 24389 ;; This function calls:
 24390 ;;		Nothing
 24391 ;; This function is called by:
 24392 ;;		_led_rand
 24393 ;; This function uses a non-reentrant model
 24394 ;;
 24395                           
 24396                           
 24397                           ;psect for function ___almod
 24398  1A57                     ___almod:	
 24399                           
 24400                           ;incstack = 0
 24401                           ; Regs used in ___almod: [wreg+status,2+status,0]
 24402  1A57  01FB               	clrf	___almod@sign
 24403  1A58  0020               	movlb	0	; select bank0
 24404  1A59  1FB2               	btfss	___almod@dividend+3,7
 24405  1A5A  2A68               	goto	l1633
 24406  1A5B  09AF               	comf	___almod@dividend,f
 24407  1A5C  09B0               	comf	___almod@dividend+1,f
 24408  1A5D  09B1               	comf	___almod@dividend+2,f
 24409  1A5E  09B2               	comf	___almod@dividend+3,f
 24410  1A5F  0AAF               	incf	___almod@dividend,f
 24411  1A60  1903               	skipnz
 24412  1A61  0AB0               	incf	___almod@dividend+1,f
 24413  1A62  1903               	skipnz
 24414  1A63  0AB1               	incf	___almod@dividend+2,f
 24415  1A64  1903               	skipnz
 24416  1A65  0AB2               	incf	___almod@dividend+3,f
 24417  1A66  01FB               	clrf	___almod@sign
 24418  1A67  0AFB               	incf	___almod@sign,f
 24419  1A68                     l1633:	
 24420  1A68  1FAE               	btfss	___almod@divisor+3,7
 24421  1A69  2A75               	goto	l7060
 24422  1A6A  09AB               	comf	___almod@divisor,f
 24423  1A6B  09AC               	comf	___almod@divisor+1,f
 24424  1A6C  09AD               	comf	___almod@divisor+2,f
 24425  1A6D  09AE               	comf	___almod@divisor+3,f
 24426  1A6E  0AAB               	incf	___almod@divisor,f
 24427  1A6F  1903               	skipnz
 24428  1A70  0AAC               	incf	___almod@divisor+1,f
 24429  1A71  1903               	skipnz
 24430  1A72  0AAD               	incf	___almod@divisor+2,f
 24431  1A73  1903               	skipnz
 24432  1A74  0AAE               	incf	___almod@divisor+3,f
 24433  1A75                     l7060:	
 24434  1A75  082E               	movf	___almod@divisor+3,w
 24435  1A76  042D               	iorwf	___almod@divisor+2,w
 24436  1A77  042C               	iorwf	___almod@divisor+1,w
 24437  1A78  042B               	iorwf	___almod@divisor,w
 24438  1A79  1903               	skipnz
 24439  1A7A  2AAE               	goto	l7076
 24440  1A7B  01FA               	clrf	___almod@counter
 24441  1A7C  0AFA               	incf	___almod@counter,f
 24442  1A7D                     l7066:	
 24443  1A7D  1BAE               	btfsc	___almod@divisor+3,7
 24444  1A7E  2A8B               	goto	l7068
 24445  1A7F  3001               	movlw	1
 24446  1A80                     u4145:	
 24447  1A80  35AB               	lslf	___almod@divisor,f
 24448  1A81  0DAC               	rlf	___almod@divisor+1,f
 24449  1A82  0DAD               	rlf	___almod@divisor+2,f
 24450  1A83  0DAE               	rlf	___almod@divisor+3,f
 24451  1A84  0B89               	decfsz	9,f
 24452  1A85  2A80               	goto	u4145
 24453  1A86  3001               	movlw	1
 24454  1A87  00F9               	movwf	??___almod
 24455  1A88  0879               	movf	??___almod,w
 24456  1A89  07FA               	addwf	___almod@counter,f
 24457  1A8A  2A7D               	goto	l7066
 24458  1A8B                     l7068:	
 24459  1A8B  082E               	movf	___almod@divisor+3,w
 24460  1A8C  0232               	subwf	___almod@dividend+3,w
 24461  1A8D  1D03               	skipz
 24462  1A8E  2A99               	goto	u4165
 24463  1A8F  082D               	movf	___almod@divisor+2,w
 24464  1A90  0231               	subwf	___almod@dividend+2,w
 24465  1A91  1D03               	skipz
 24466  1A92  2A99               	goto	u4165
 24467  1A93  082C               	movf	___almod@divisor+1,w
 24468  1A94  0230               	subwf	___almod@dividend+1,w
 24469  1A95  1D03               	skipz
 24470  1A96  2A99               	goto	u4165
 24471  1A97  082B               	movf	___almod@divisor,w
 24472  1A98  022F               	subwf	___almod@dividend,w
 24473  1A99                     u4165:	
 24474  1A99  1C03               	skipc
 24475  1A9A  2AA3               	goto	l7072
 24476  1A9B  082B               	movf	___almod@divisor,w
 24477  1A9C  02AF               	subwf	___almod@dividend,f
 24478  1A9D  082C               	movf	___almod@divisor+1,w
 24479  1A9E  3BB0               	subwfb	___almod@dividend+1,f
 24480  1A9F  082D               	movf	___almod@divisor+2,w
 24481  1AA0  3BB1               	subwfb	___almod@dividend+2,f
 24482  1AA1  082E               	movf	___almod@divisor+3,w
 24483  1AA2  3BB2               	subwfb	___almod@dividend+3,f
 24484  1AA3                     l7072:	
 24485  1AA3  3001               	movlw	1
 24486  1AA4                     u4175:	
 24487  1AA4  36AE               	lsrf	___almod@divisor+3,f
 24488  1AA5  0CAD               	rrf	___almod@divisor+2,f
 24489  1AA6  0CAC               	rrf	___almod@divisor+1,f
 24490  1AA7  0CAB               	rrf	___almod@divisor,f
 24491  1AA8  0B89               	decfsz	9,f
 24492  1AA9  2AA4               	goto	u4175
 24493  1AAA  3001               	movlw	1
 24494  1AAB  02FA               	subwf	___almod@counter,f
 24495  1AAC  1D03               	btfss	3,2
 24496  1AAD  2A8B               	goto	l7068
 24497  1AAE                     l7076:	
 24498  1AAE  087B               	movf	___almod@sign,w
 24499  1AAF  1903               	btfsc	3,2
 24500  1AB0  2ABC               	goto	l7080
 24501  1AB1  09AF               	comf	___almod@dividend,f
 24502  1AB2  09B0               	comf	___almod@dividend+1,f
 24503  1AB3  09B1               	comf	___almod@dividend+2,f
 24504  1AB4  09B2               	comf	___almod@dividend+3,f
 24505  1AB5  0AAF               	incf	___almod@dividend,f
 24506  1AB6  1903               	skipnz
 24507  1AB7  0AB0               	incf	___almod@dividend+1,f
 24508  1AB8  1903               	skipnz
 24509  1AB9  0AB1               	incf	___almod@dividend+2,f
 24510  1ABA  1903               	skipnz
 24511  1ABB  0AB2               	incf	___almod@dividend+3,f
 24512  1ABC                     l7080:	
 24513  1ABC  0832               	movf	___almod@dividend+3,w
 24514  1ABD  00AE               	movwf	?___almod+3
 24515  1ABE  0831               	movf	___almod@dividend+2,w
 24516  1ABF  00AD               	movwf	?___almod+2
 24517  1AC0  0830               	movf	___almod@dividend+1,w
 24518  1AC1  00AC               	movwf	?___almod+1
 24519  1AC2  082F               	movf	___almod@dividend,w
 24520  1AC3  00AB               	movwf	?___almod
 24521  1AC4  0008               	return
 24522  1AC5                     __end_of___almod:	
 24523                           
 24524                           	psect	text51
 24525  243D                     __ptext51:	
 24526 ;; *************** function _led_curtain *****************
 24527 ;; Defined at:
 24528 ;;		line 166 in file "main.c"
 24529 ;; Parameters:    Size  Location     Type
 24530 ;;  counter         2   16[BANK0 ] unsigned int 
 24531 ;; Auto vars:     Size  Location     Type
 24532 ;;  size            2   22[BANK0 ] unsigned int 
 24533 ;;  leds            2   20[BANK0 ] unsigned int 
 24534 ;; Return value:  Size  Location     Type
 24535 ;;                  1    wreg      void 
 24536 ;; Registers used:
 24537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24538 ;; Tracked objects:
 24539 ;;		On entry : 0/0
 24540 ;;		On exit  : 0/0
 24541 ;;		Unchanged: 0/0
 24542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24543 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24544 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24545 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24546 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24547 ;;Total ram usage:        8 bytes
 24548 ;; Hardware stack levels used:    1
 24549 ;; Hardware stack levels required when called:    9
 24550 ;; This function calls:
 24551 ;;		___lwmod
 24552 ;;		_nullifyBadge_userLedsSet
 24553 ;; This function is called by:
 24554 ;;		_flashy_Main
 24555 ;; This function uses a non-reentrant model
 24556 ;;
 24557                           
 24558                           
 24559                           ;psect for function _led_curtain
 24560  243D                     _led_curtain:	
 24561                           
 24562                           ;main.c: 167: u16 size = sizeof(curtain_leds) / sizeof(curtain_leds[0]);
 24563                           
 24564                           ;incstack = 0
 24565                           ; Regs used in _led_curtain: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 24566  243D  300E               	movlw	14
 24567  243E  0020               	movlb	0	; select bank0
 24568  243F  00B6               	movwf	led_curtain@size
 24569  2440  3000               	movlw	0
 24570  2441  00B7               	movwf	led_curtain@size+1
 24571                           
 24572                           ;main.c: 168: u16 leds = curtain_leds[counter % size];
 24573  2442  0837               	movf	led_curtain@size+1,w
 24574  2443  00AC               	movwf	___lwmod@divisor+1
 24575  2444  0836               	movf	led_curtain@size,w
 24576  2445  00AB               	movwf	___lwmod@divisor
 24577  2446  0831               	movf	led_curtain@counter+1,w
 24578  2447  00AE               	movwf	___lwmod@dividend+1
 24579  2448  0830               	movf	led_curtain@counter,w
 24580  2449  00AD               	movwf	___lwmod@dividend
 24581  244A  31A1  21F4  31A4   	fcall	___lwmod
 24582  244D  0020               	movlb	0	; select bank0
 24583  244E  082B               	movf	?___lwmod,w
 24584  244F  0709               	addwf	9,w
 24585  2450  3EA0               	addlw	(low (_curtain_leds| (0+768)))& (0+255)
 24586  2451  0086               	movwf	6
 24587  2452  3003               	movlw	3	; select bank7/8
 24588  2453  0087               	movwf	7
 24589  2454  3F40               	moviw [0]fsr1
 24590  2455  00B4               	movwf	led_curtain@leds
 24591  2456  3F41               	moviw [1]fsr1
 24592  2457  00B5               	movwf	led_curtain@leds+1
 24593                           
 24594                           ;main.c: 170: size = sizeof(curtain_leds_inverse) / sizeof(curtain_leds_inverse[0]);
 24595  2458  300E               	movlw	14
 24596  2459  00B6               	movwf	led_curtain@size
 24597  245A  3000               	movlw	0
 24598  245B  00B7               	movwf	led_curtain@size+1
 24599                           
 24600                           ;main.c: 171: leds |= curtain_leds_inverse[counter % size];
 24601  245C  0837               	movf	led_curtain@size+1,w
 24602  245D  00AC               	movwf	___lwmod@divisor+1
 24603  245E  0836               	movf	led_curtain@size,w
 24604  245F  00AB               	movwf	___lwmod@divisor
 24605  2460  0831               	movf	led_curtain@counter+1,w
 24606  2461  00AE               	movwf	___lwmod@dividend+1
 24607  2462  0830               	movf	led_curtain@counter,w
 24608  2463  00AD               	movwf	___lwmod@dividend
 24609  2464  31A1  21F4  31A4   	fcall	___lwmod
 24610  2467  0020               	movlb	0	; select bank0
 24611  2468  082B               	movf	?___lwmod,w
 24612  2469  0709               	addwf	9,w
 24613  246A  3E3E               	addlw	(low (_curtain_leds_inverse| (0+1024)))& (0+255)
 24614  246B  0086               	movwf	6
 24615  246C  3004               	movlw	4	; select bank8/9
 24616  246D  0087               	movwf	7
 24617  246E  3F40               	moviw [0]fsr1
 24618  246F  00B2               	movwf	??_led_curtain
 24619  2470  3F41               	moviw [1]fsr1
 24620  2471  00B3               	movwf	??_led_curtain+1
 24621  2472  0832               	movf	??_led_curtain,w
 24622  2473  04B4               	iorwf	led_curtain@leds,f
 24623  2474  0833               	movf	??_led_curtain+1,w
 24624  2475  04B5               	iorwf	led_curtain@leds+1,f
 24625                           
 24626                           ;main.c: 173: nullifyBadge_userLedsSet(&badge_inst, leds);
 24627  2476  0835               	movf	led_curtain@leds+1,w
 24628  2477  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 24629  2478  0834               	movf	led_curtain@leds,w
 24630  2479  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 24631  247A  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 24632  247B  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 24633  247D  0008               	return
 24634  247E                     __end_of_led_curtain:	
 24635                           
 24636                           	psect	text52
 24637  2E2E                     __ptext52:	
 24638 ;; *************** function _led_circle *****************
 24639 ;; Defined at:
 24640 ;;		line 185 in file "main.c"
 24641 ;; Parameters:    Size  Location     Type
 24642 ;;  count           2   16[BANK0 ] unsigned int 
 24643 ;; Auto vars:     Size  Location     Type
 24644 ;;		None
 24645 ;; Return value:  Size  Location     Type
 24646 ;;                  1    wreg      void 
 24647 ;; Registers used:
 24648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24649 ;; Tracked objects:
 24650 ;;		On entry : 0/0
 24651 ;;		On exit  : 0/0
 24652 ;;		Unchanged: 0/0
 24653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24654 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24657 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24658 ;;Total ram usage:        2 bytes
 24659 ;; Hardware stack levels used:    1
 24660 ;; Hardware stack levels required when called:    9
 24661 ;; This function calls:
 24662 ;;		_nullifyBadge_userLedsSet
 24663 ;; This function is called by:
 24664 ;;		_flashy_Main
 24665 ;;		_slot_Running_Animation
 24666 ;; This function uses a non-reentrant model
 24667 ;;
 24668                           
 24669                           
 24670                           ;psect for function _led_circle
 24671  2E2E                     _led_circle:	
 24672                           
 24673                           ;main.c: 187: nullifyBadge_userLedsSet(&badge_inst,count);
 24674                           
 24675                           ;incstack = 0
 24676                           ; Regs used in _led_circle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 24677  2E2E  0020               	movlb	0	; select bank0
 24678  2E2F  0831               	movf	led_circle@count+1,w
 24679  2E30  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 24680  2E31  0830               	movf	led_circle@count,w
 24681  2E32  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 24682  2E33  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 24683  2E34  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 24684  2E36  0008               	return
 24685  2E37                     __end_of_led_circle:	
 24686                           
 24687                           	psect	text53
 24688  19F2                     __ptext53:	
 24689 ;; *************** function _led_Parody *****************
 24690 ;; Defined at:
 24691 ;;		line 200 in file "main.c"
 24692 ;; Parameters:    Size  Location     Type
 24693 ;;  count           2   16[BANK0 ] unsigned int 
 24694 ;; Auto vars:     Size  Location     Type
 24695 ;;  size            2   22[BANK0 ] unsigned int 
 24696 ;;  leds            2   20[BANK0 ] unsigned int 
 24697 ;; Return value:  Size  Location     Type
 24698 ;;                  1    wreg      void 
 24699 ;; Registers used:
 24700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24701 ;; Tracked objects:
 24702 ;;		On entry : 0/0
 24703 ;;		On exit  : 0/0
 24704 ;;		Unchanged: 0/0
 24705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24706 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24707 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24708 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24709 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24710 ;;Total ram usage:        8 bytes
 24711 ;; Hardware stack levels used:    1
 24712 ;; Hardware stack levels required when called:    9
 24713 ;; This function calls:
 24714 ;;		___lwmod
 24715 ;;		_nullifyBadge_userLedsSet
 24716 ;; This function is called by:
 24717 ;;		_flashy_Main
 24718 ;; This function uses a non-reentrant model
 24719 ;;
 24720                           
 24721                           
 24722                           ;psect for function _led_Parody
 24723  19F2                     _led_Parody:	
 24724                           
 24725                           ;main.c: 201: u16 size;
 24726                           ;main.c: 202: u16 leds;
 24727                           ;main.c: 204: if (count % 30 == 0){
 24728                           
 24729                           ;incstack = 0
 24730                           ; Regs used in _led_Parody: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 24731  19F2  301E               	movlw	30
 24732  19F3  0020               	movlb	0	; select bank0
 24733  19F4  00AB               	movwf	___lwmod@divisor
 24734  19F5  3000               	movlw	0
 24735  19F6  00AC               	movwf	___lwmod@divisor+1
 24736  19F7  0831               	movf	led_Parody@count+1,w
 24737  19F8  00AE               	movwf	___lwmod@dividend+1
 24738  19F9  0830               	movf	led_Parody@count,w
 24739  19FA  00AD               	movwf	___lwmod@dividend
 24740  19FB  31A1  21F4  3199   	fcall	___lwmod
 24741  19FE  0020               	movlb	0	; select bank0
 24742  19FF  082B               	movf	?___lwmod,w
 24743  1A00  042C               	iorwf	?___lwmod+1,w
 24744  1A01  1D03               	btfss	3,2
 24745  1A02  2A08               	goto	l615
 24746                           
 24747                           ;main.c: 205: oddeven ^= 1 ;
 24748  1A03  3001               	movlw	1
 24749  1A04  0021               	movlb	1	; select bank1
 24750  1A05  06B6               	xorwf	_oddeven^(0+128),f
 24751  1A06  3000               	movlw	0
 24752  1A07  06B7               	xorwf	(_oddeven+1)^(0+128),f
 24753  1A08                     l615:	
 24754                           
 24755                           ;main.c: 206: }
 24756                           ;main.c: 208: if(count %2 == oddeven){
 24757  1A08  3001               	movlw	1
 24758  1A09  0020               	movlb	0	; select bank0
 24759  1A0A  0530               	andwf	led_Parody@count,w
 24760  1A0B  00B2               	movwf	??_led_Parody
 24761  1A0C  3000               	movlw	0
 24762  1A0D  0531               	andwf	led_Parody@count+1,w
 24763  1A0E  00B3               	movwf	??_led_Parody+1
 24764  1A0F  0021               	movlb	1	; select bank1
 24765  1A10  0837               	movf	(_oddeven+1)^(0+128),w
 24766  1A11  0020               	movlb	0	; select bank0
 24767  1A12  0633               	xorwf	??_led_Parody+1,w
 24768  1A13  1D03               	skipz
 24769  1A14  2A19               	goto	u4515
 24770  1A15  0021               	movlb	1	; select bank1
 24771  1A16  0836               	movf	_oddeven^(0+128),w
 24772  1A17  0020               	movlb	0	; select bank0
 24773  1A18  0632               	xorwf	??_led_Parody,w
 24774  1A19                     u4515:	
 24775  1A19  1D03               	skipz
 24776  1A1A  2A35               	goto	l7280
 24777                           
 24778                           ;main.c: 210: size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 24779  1A1B  300E               	movlw	14
 24780  1A1C  00B6               	movwf	led_Parody@size
 24781  1A1D  3000               	movlw	0
 24782  1A1E  00B7               	movwf	led_Parody@size+1
 24783                           
 24784                           ;main.c: 211: leds = roundabout_leds[count % size];
 24785  1A1F  0837               	movf	led_Parody@size+1,w
 24786  1A20  00AC               	movwf	___lwmod@divisor+1
 24787  1A21  0836               	movf	led_Parody@size,w
 24788  1A22  00AB               	movwf	___lwmod@divisor
 24789  1A23  0831               	movf	led_Parody@count+1,w
 24790  1A24  00AE               	movwf	___lwmod@dividend+1
 24791  1A25  0830               	movf	led_Parody@count,w
 24792  1A26  00AD               	movwf	___lwmod@dividend
 24793  1A27  31A1  21F4  3199   	fcall	___lwmod
 24794  1A2A  0020               	movlb	0	; select bank0
 24795  1A2B  082B               	movf	?___lwmod,w
 24796  1A2C  0709               	addwf	9,w
 24797  1A2D  3E3C               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 24798  1A2E  0086               	movwf	6
 24799  1A2F  3003               	movlw	3	; select bank6/7
 24800  1A30  0087               	movwf	7
 24801  1A31  3F40               	moviw [0]fsr1
 24802  1A32  00B4               	movwf	led_Parody@leds
 24803  1A33  3F41               	moviw [1]fsr1
 24804  1A34  2A4E               	goto	L14
 24805  1A35                     l7280:	
 24806                           ;main.c: 212: }
 24807                           
 24808                           
 24809                           ;main.c: 213: else{
 24810                           ;main.c: 214: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 24811  1A35  300E               	movlw	14
 24812  1A36  00B6               	movwf	led_Parody@size
 24813  1A37  3000               	movlw	0
 24814  1A38  00B7               	movwf	led_Parody@size+1
 24815                           
 24816                           ;main.c: 215: leds = roundabout_leds_inverse[count % size];
 24817  1A39  0837               	movf	led_Parody@size+1,w
 24818  1A3A  00AC               	movwf	___lwmod@divisor+1
 24819  1A3B  0836               	movf	led_Parody@size,w
 24820  1A3C  00AB               	movwf	___lwmod@divisor
 24821  1A3D  0831               	movf	led_Parody@count+1,w
 24822  1A3E  00AE               	movwf	___lwmod@dividend+1
 24823  1A3F  0830               	movf	led_Parody@count,w
 24824  1A40  00AD               	movwf	___lwmod@dividend
 24825  1A41  31A1  21F4  3199   	fcall	___lwmod
 24826  1A44  0020               	movlb	0	; select bank0
 24827  1A45  082B               	movf	?___lwmod,w
 24828  1A46  0709               	addwf	9,w
 24829  1A47  3EBC               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 24830  1A48  0086               	movwf	6
 24831  1A49  3003               	movlw	3	; select bank7/8
 24832  1A4A  0087               	movwf	7
 24833  1A4B  3F40               	moviw [0]fsr1
 24834  1A4C  00B4               	movwf	led_Parody@leds
 24835  1A4D  3F41               	moviw [1]fsr1
 24836  1A4E                     L14:	
 24837  1A4E  00B5               	movwf	led_Parody@leds+1
 24838                           
 24839                           ;main.c: 216: }
 24840                           ;main.c: 217: nullifyBadge_userLedsSet(&badge_inst, leds);
 24841  1A4F  0835               	movf	led_Parody@leds+1,w
 24842  1A50  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 24843  1A51  0834               	movf	led_Parody@leds,w
 24844  1A52  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 24845  1A53  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 24846  1A54  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 24847  1A56  0008               	return
 24848  1A57                     __end_of_led_Parody:	
 24849                           
 24850                           	psect	text54
 24851  2F09                     __ptext54:	
 24852 ;; *************** function _nullifyBadge_userLedsSet *****************
 24853 ;; Defined at:
 24854 ;;		line 164 in file "nullifyBadge.c"
 24855 ;; Parameters:    Size  Location     Type
 24856 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 24857 ;;		 -> badge_inst(18), 
 24858 ;;  userLedData     2   13[BANK0 ] unsigned int 
 24859 ;; Auto vars:     Size  Location     Type
 24860 ;;  badge           1   15[BANK0 ] PTR struct t_nullifyBadg
 24861 ;;		 -> badge_inst(18), 
 24862 ;; Return value:  Size  Location     Type
 24863 ;;                  1    wreg      void 
 24864 ;; Registers used:
 24865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24866 ;; Tracked objects:
 24867 ;;		On entry : 0/0
 24868 ;;		On exit  : 0/0
 24869 ;;		Unchanged: 0/0
 24870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24871 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24874 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24875 ;;Total ram usage:        3 bytes
 24876 ;; Hardware stack levels used:    1
 24877 ;; Hardware stack levels required when called:    8
 24878 ;; This function calls:
 24879 ;;		_displayL2_SetUserLeds
 24880 ;; This function is called by:
 24881 ;;		_led_roundabout
 24882 ;;		_led_curtain
 24883 ;;		_led_rand
 24884 ;;		_led_circle
 24885 ;;		_let_alternate
 24886 ;;		_led_Parody
 24887 ;;		_menu_display_option
 24888 ;;		_flashy_Main
 24889 ;;		_locked_Main
 24890 ;; This function uses a non-reentrant model
 24891 ;;
 24892                           
 24893                           
 24894                           ;psect for function _nullifyBadge_userLedsSet
 24895  2F09                     _nullifyBadge_userLedsSet:	
 24896                           
 24897                           ;incstack = 0
 24898                           ; Regs used in _nullifyBadge_userLedsSet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 24899                           ;nullifyBadge_userLedsSet@badge stored from wreg
 24900  2F09  0020               	movlb	0	; select bank0
 24901  2F0A  00AF               	movwf	nullifyBadge_userLedsSet@badge
 24902                           
 24903                           ;nullifyBadge.c: 165: if (badge_locked) {
 24904  2F0B  0021               	movlb	1	; select bank1
 24905  2F0C  0844               	movf	_badge_locked^(0+128),w
 24906  2F0D  1903               	btfsc	3,2
 24907  2F0E  2F11               	goto	l7040
 24908                           
 24909                           ;nullifyBadge.c: 166: userLedData |= 1024;
 24910  2F0F  0020               	movlb	0	; select bank0
 24911  2F10  152E               	bsf	nullifyBadge_userLedsSet@userLedData+1,2
 24912  2F11                     l7040:	
 24913                           
 24914                           ;nullifyBadge.c: 167: }
 24915                           ;nullifyBadge.c: 168: displayL2_SetUserLeds(&badge->display, userLedData);
 24916  2F11  0020               	movlb	0	; select bank0
 24917  2F12  082E               	movf	nullifyBadge_userLedsSet@userLedData+1,w
 24918  2F13  00AC               	movwf	displayL2_SetUserLeds@userLedData+1
 24919  2F14  082D               	movf	nullifyBadge_userLedsSet@userLedData,w
 24920  2F15  00AB               	movwf	displayL2_SetUserLeds@userLedData
 24921  2F16  082F               	movf	nullifyBadge_userLedsSet@badge,w
 24922  2F17  31A0  20F1         	fcall	_displayL2_SetUserLeds
 24923  2F19  0008               	return
 24924  2F1A                     __end_of_nullifyBadge_userLedsSet:	
 24925                           
 24926                           	psect	text55
 24927  20F1                     __ptext55:	
 24928 ;; *************** function _displayL2_SetUserLeds *****************
 24929 ;; Defined at:
 24930 ;;		line 88 in file "nullifyBadge_displayL2.c"
 24931 ;; Parameters:    Size  Location     Type
 24932 ;;  display         1    wreg     PTR struct t_nullifyDisp
 24933 ;;		 -> badge_inst(18), 
 24934 ;;  userLedData     2   11[BANK0 ] unsigned int 
 24935 ;; Auto vars:     Size  Location     Type
 24936 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 24937 ;;		 -> badge_inst(18), 
 24938 ;; Return value:  Size  Location     Type
 24939 ;;                  1    wreg      void 
 24940 ;; Registers used:
 24941 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24942 ;; Tracked objects:
 24943 ;;		On entry : 0/0
 24944 ;;		On exit  : 0/0
 24945 ;;		Unchanged: 0/0
 24946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24947 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24950 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24951 ;;Total ram usage:        3 bytes
 24952 ;; Hardware stack levels used:    1
 24953 ;; Hardware stack levels required when called:    7
 24954 ;; This function calls:
 24955 ;;		_displayL1_SetUserLed
 24956 ;;		_displayL1_Update
 24957 ;; This function is called by:
 24958 ;;		_nullifyBadge_userLedsSet
 24959 ;;		_nullifyBadge_userLedsSetForce
 24960 ;; This function uses a non-reentrant model
 24961 ;;
 24962                           
 24963                           
 24964                           ;psect for function _displayL2_SetUserLeds
 24965  20F1                     _displayL2_SetUserLeds:	
 24966                           
 24967                           ;incstack = 0
 24968                           ; Regs used in _displayL2_SetUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 24969                           ;displayL2_SetUserLeds@display stored from wreg
 24970  20F1  00FB               	movwf	displayL2_SetUserLeds@display
 24971                           
 24972                           ;nullifyBadge_displayL2.c: 89: display->ledVect = userLedData;
 24973  20F2  087B               	movf	displayL2_SetUserLeds@display,w
 24974  20F3  3E05               	addlw	5
 24975  20F4  0086               	movwf	6
 24976  20F5  3001               	movlw	1	; select bank2/3
 24977  20F6  0087               	movwf	7
 24978  20F7  0020               	movlb	0	; select bank0
 24979  20F8  082B               	movf	displayL2_SetUserLeds@userLedData,w
 24980  20F9  3FC0               	movwi [0]fsr1
 24981  20FA  082C               	movf	displayL2_SetUserLeds@userLedData+1,w
 24982  20FB  3FC1               	movwi [1]fsr1
 24983                           
 24984                           ;nullifyBadge_displayL2.c: 90: displayL1_SetUserLed(&display->display_l1, display->ledVe
      +                          ct);
 24985  20FC  087B               	movf	displayL2_SetUserLeds@display,w
 24986  20FD  3E05               	addlw	5
 24987  20FE  0086               	movwf	6
 24988  20FF  3001               	movlw	1	; select bank2/3
 24989  2100  0087               	movwf	7
 24990  2101  3F40               	moviw [0]fsr1
 24991  2102  00F1               	movwf	displayL1_SetUserLed@userLedVect
 24992  2103  3F41               	moviw [1]fsr1
 24993  2104  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 24994  2105  087B               	movf	displayL2_SetUserLeds@display,w
 24995  2106  3E07               	addlw	7
 24996  2107  31AF  272B  31A0   	fcall	_displayL1_SetUserLed
 24997                           
 24998                           ;nullifyBadge_displayL2.c: 91: displayL1_Update(&display->display_l1);
 24999  210A  087B               	movf	displayL2_SetUserLeds@display,w
 25000  210B  3E07               	addlw	7
 25001  210C  31AE  26F8         	fcall	_displayL1_Update
 25002  210E  0008               	return
 25003  210F                     __end_of_displayL2_SetUserLeds:	
 25004                           
 25005                           	psect	text56
 25006  2F2B                     __ptext56:	
 25007 ;; *************** function _displayL1_SetUserLed *****************
 25008 ;; Defined at:
 25009 ;;		line 71 in file "nullifyBadge_displayL1.c"
 25010 ;; Parameters:    Size  Location     Type
 25011 ;;  display         1    wreg     PTR struct t_nullifyDisp
 25012 ;;		 -> badge_inst(18), 
 25013 ;;  userLedVect     2    1[COMMON] unsigned int 
 25014 ;; Auto vars:     Size  Location     Type
 25015 ;;  display         1    4[COMMON] PTR struct t_nullifyDisp
 25016 ;;		 -> badge_inst(18), 
 25017 ;; Return value:  Size  Location     Type
 25018 ;;                  1    wreg      void 
 25019 ;; Registers used:
 25020 ;;		wreg, fsr1l, fsr1h, status,2
 25021 ;; Tracked objects:
 25022 ;;		On entry : 0/0
 25023 ;;		On exit  : 0/0
 25024 ;;		Unchanged: 0/0
 25025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25026 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25027 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25028 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25029 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25030 ;;Total ram usage:        4 bytes
 25031 ;; Hardware stack levels used:    1
 25032 ;; Hardware stack levels required when called:    4
 25033 ;; This function calls:
 25034 ;;		Nothing
 25035 ;; This function is called by:
 25036 ;;		_displayL2_SetUserLeds
 25037 ;;		_displayL2_ClrUserLeds
 25038 ;; This function uses a non-reentrant model
 25039 ;;
 25040                           
 25041                           
 25042                           ;psect for function _displayL1_SetUserLed
 25043  2F2B                     _displayL1_SetUserLed:	
 25044                           
 25045                           ;incstack = 0
 25046                           ; Regs used in _displayL1_SetUserLed: [wreg+fsr1l+fsr1h+status,2]
 25047                           ;displayL1_SetUserLed@display stored from wreg
 25048  2F2B  00F4               	movwf	displayL1_SetUserLed@display
 25049                           
 25050                           ;nullifyBadge_displayL1.c: 73: display->displayVect[0] = (u8) (userLedVect >> 8);
 25051  2F2C  0872               	movf	displayL1_SetUserLed@userLedVect+1,w
 25052  2F2D  00F3               	movwf	??_displayL1_SetUserLed
 25053  2F2E  0874               	movf	displayL1_SetUserLed@display,w
 25054  2F2F  0086               	movwf	6
 25055  2F30  3001               	movlw	1	; select bank2/3
 25056  2F31  0087               	movwf	7
 25057  2F32  0873               	movf	??_displayL1_SetUserLed,w
 25058  2F33  0081               	movwf	1
 25059                           
 25060                           ;nullifyBadge_displayL1.c: 74: display->displayVect[1] = (u8) (userLedVect & 0xFF);
 25061  2F34  0871               	movf	displayL1_SetUserLed@userLedVect,w
 25062  2F35  00F3               	movwf	??_displayL1_SetUserLed
 25063  2F36  0A74               	incf	displayL1_SetUserLed@display,w
 25064  2F37  0086               	movwf	6
 25065  2F38  3001               	movlw	1	; select bank2/3
 25066  2F39  0087               	movwf	7
 25067  2F3A  0873               	movf	??_displayL1_SetUserLed,w
 25068  2F3B  0081               	movwf	1
 25069  2F3C  0008               	return
 25070  2F3D                     __end_of_displayL1_SetUserLed:	
 25071                           
 25072                           	psect	text57
 25073  1200                     __ptext57:	
 25074 ;; *************** function _flashy_display_option *****************
 25075 ;; Defined at:
 25076 ;;		line 89 in file "flashy_task.c"
 25077 ;; Parameters:    Size  Location     Type
 25078 ;;  data            2   44[BANK0 ] PTR struct t_flashy_task
 25079 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 25080 ;;		 -> flashy_TaskData(30), NULL(0), 
 25081 ;; Auto vars:     Size  Location     Type
 25082 ;;		None
 25083 ;; Return value:  Size  Location     Type
 25084 ;;                  1    wreg      void 
 25085 ;; Registers used:
 25086 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25087 ;; Tracked objects:
 25088 ;;		On entry : 0/0
 25089 ;;		On exit  : 0/0
 25090 ;;		Unchanged: 0/0
 25091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25092 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25095 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25096 ;;Total ram usage:        2 bytes
 25097 ;; Hardware stack levels used:    1
 25098 ;; Hardware stack levels required when called:   10
 25099 ;; This function calls:
 25100 ;;		_marquee
 25101 ;;		_marquee_speedy
 25102 ;;		_nullifyBadge_segDisplayForceUpdate
 25103 ;;		_nullifyBadge_segDisplayPutStr
 25104 ;; This function is called by:
 25105 ;;		_flashy_Main
 25106 ;; This function uses a non-reentrant model
 25107 ;;
 25108                           
 25109                           
 25110                           ;psect for function _flashy_display_option
 25111  1200                     _flashy_display_option:	
 25112                           
 25113                           ;flashy_task.c: 90: if (flashy_option_idx == 0){
 25114                           
 25115                           ;incstack = 0
 25116                           ; Regs used in _flashy_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25117  1200  0021               	movlb	1	; select bank1
 25118  1201  0826               	movf	_flashy_option_idx^(0+128),w
 25119  1202  0427               	iorwf	(_flashy_option_idx+1)^(0+128),w
 25120  1203  1D03               	btfss	3,2
 25121  1204  2A20               	goto	l7370
 25122                           
 25123                           ;flashy_task.c: 91: nullifyBadge_segDisplayPutStr(data->badge, flashy_option[flashy_opti
      +                          on_idx]);
 25124  1205  3526               	lslf	_flashy_option_idx^(0+128),w
 25125  1206  3E20               	addlw	(low (_flashy_option| (0+768)))& (0+255)
 25126  1207  0086               	movwf	6
 25127  1208  3003               	movlw	3	; select bank6/7
 25128  1209  0087               	movwf	7
 25129  120A  3F40               	moviw [0]fsr1
 25130  120B  0020               	movlb	0	; select bank0
 25131  120C  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 25132  120D  3F41               	moviw [1]fsr1
 25133  120E  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 25134  120F  084C               	movf	flashy_display_option@data,w
 25135  1210  0086               	movwf	6
 25136  1211  084D               	movf	flashy_display_option@data+1,w
 25137  1212  0087               	movwf	7
 25138  1213  0801               	movf	1,w
 25139  1214  31AE  264B  3192   	fcall	_nullifyBadge_segDisplayPutStr
 25140                           
 25141                           ;flashy_task.c: 92: nullifyBadge_segDisplayForceUpdate(data->badge);
 25142  1217  0020               	movlb	0	; select bank0
 25143  1218  084C               	movf	flashy_display_option@data,w
 25144  1219  0086               	movwf	6
 25145  121A  084D               	movf	flashy_display_option@data+1,w
 25146  121B  0087               	movwf	7
 25147  121C  0801               	movf	1,w
 25148  121D  31AE  2603         	fcall	_nullifyBadge_segDisplayForceUpdate
 25149                           
 25150                           ;flashy_task.c: 93: }
 25151  121F  0008               	return
 25152  1220                     l7370:	
 25153                           
 25154                           ;flashy_task.c: 94: else {
 25155                           ;flashy_task.c: 95: if (data->display_state==FLASHY_STATE_DISPLAY ){
 25156  1220  0020               	movlb	0	; select bank0
 25157  1221  084C               	movf	flashy_display_option@data,w
 25158  1222  0086               	movwf	6
 25159  1223  084D               	movf	flashy_display_option@data+1,w
 25160  1224  0087               	movwf	7
 25161  1225  3146               	addfsr 1,6
 25162  1226  0801               	movf	1,w
 25163  1227  1D03               	btfss	3,2
 25164  1228  2A48               	goto	l7374
 25165                           
 25166                           ;flashy_task.c: 97: marquee_speedy(flashy_option[flashy_option_idx], data->noholdCount, 
      +                          flashy_scroll_rate);
 25167  1229  0021               	movlb	1	; select bank1
 25168  122A  3526               	lslf	_flashy_option_idx^(0+128),w
 25169  122B  3E20               	addlw	(low (_flashy_option| (0+768)))& (0+255)
 25170  122C  0086               	movwf	6
 25171  122D  3003               	movlw	3	; select bank6/7
 25172  122E  0087               	movwf	7
 25173  122F  3F40               	moviw [0]fsr1
 25174  1230  0020               	movlb	0	; select bank0
 25175  1231  00BA               	movwf	marquee_speedy@string
 25176  1232  3F41               	moviw [1]fsr1
 25177  1233  00BB               	movwf	marquee_speedy@string+1
 25178  1234  084C               	movf	flashy_display_option@data,w
 25179  1235  0086               	movwf	6
 25180  1236  084D               	movf	flashy_display_option@data+1,w
 25181  1237  0087               	movwf	7
 25182  1238  315C               	addfsr 1,28
 25183  1239  3F40               	moviw [0]fsr1
 25184  123A  00BC               	movwf	marquee_speedy@count
 25185  123B  3F41               	moviw [1]fsr1
 25186  123C  00BD               	movwf	marquee_speedy@count+1
 25187  123D  0021               	movlb	1	; select bank1
 25188  123E  082B               	movf	(_flashy_scroll_rate+1)^(0+128),w
 25189  123F  0020               	movlb	0	; select bank0
 25190  1240  00BF               	movwf	marquee_speedy@multiplier+1
 25191  1241  0021               	movlb	1	; select bank1
 25192  1242  082A               	movf	_flashy_scroll_rate^(0+128),w
 25193  1243  0020               	movlb	0	; select bank0
 25194  1244  00BE               	movwf	marquee_speedy@multiplier
 25195  1245  319A  22C5         	fcall	_marquee_speedy
 25196                           
 25197                           ;flashy_task.c: 98: }
 25198  1247  0008               	return
 25199  1248                     l7374:	
 25200                           
 25201                           ;flashy_task.c: 99: else{
 25202                           ;flashy_task.c: 100: marquee(flashy_option[flashy_option_idx], data->noholdCount);
 25203  1248  0021               	movlb	1	; select bank1
 25204  1249  3526               	lslf	_flashy_option_idx^(0+128),w
 25205  124A  3E20               	addlw	(low (_flashy_option| (0+768)))& (0+255)
 25206  124B  0086               	movwf	6
 25207  124C  3003               	movlw	3	; select bank6/7
 25208  124D  0087               	movwf	7
 25209  124E  3F40               	moviw [0]fsr1
 25210  124F  0020               	movlb	0	; select bank0
 25211  1250  00BA               	movwf	marquee@string
 25212  1251  3F41               	moviw [1]fsr1
 25213  1252  00BB               	movwf	marquee@string+1
 25214  1253  084C               	movf	flashy_display_option@data,w
 25215  1254  0086               	movwf	6
 25216  1255  084D               	movf	flashy_display_option@data+1,w
 25217  1256  0087               	movwf	7
 25218  1257  315C               	addfsr 1,28
 25219  1258  3F40               	moviw [0]fsr1
 25220  1259  00BC               	movwf	marquee@count
 25221  125A  3F41               	moviw [1]fsr1
 25222  125B  00BD               	movwf	marquee@count+1
 25223  125C  319B  2338         	fcall	_marquee
 25224  125E  0008               	return
 25225  125F                     __end_of_flashy_display_option:	
 25226                           
 25227                           	psect	text58
 25228  1AC5                     __ptext58:	
 25229 ;; *************** function _marquee_speedy *****************
 25230 ;; Defined at:
 25231 ;;		line 130 in file "main.c"
 25232 ;; Parameters:    Size  Location     Type
 25233 ;;  string          2   26[BANK0 ] PTR unsigned char 
 25234 ;;		 -> STR_23(43), STR_22(40), STR_21(27), STR_20(25), 
 25235 ;;		 -> STR_19(30), STR_18(35), STR_17(22), STR_16(26), 
 25236 ;;		 -> STR_15(21), STR_14(19), STR_13(6), STR_12(8), 
 25237 ;;		 -> STR_11(9), STR_10(5), secret_TaskData(14), locked_TaskData(14), 
 25238 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25239 ;;  count           2   28[BANK0 ] unsigned int 
 25240 ;;  multiplier      2   30[BANK0 ] unsigned int 
 25241 ;; Auto vars:     Size  Location     Type
 25242 ;;  j               2   42[BANK0 ] unsigned int 
 25243 ;;  display_stri    5   33[BANK0 ] unsigned char [5]
 25244 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 25245 ;;  i               2   38[BANK0 ] unsigned int 
 25246 ;; Return value:  Size  Location     Type
 25247 ;;                  1    wreg      void 
 25248 ;; Registers used:
 25249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25250 ;; Tracked objects:
 25251 ;;		On entry : 0/0
 25252 ;;		On exit  : 0/0
 25253 ;;		Unchanged: 0/0
 25254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25255 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25256 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25258 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25259 ;;Total ram usage:       18 bytes
 25260 ;; Hardware stack levels used:    1
 25261 ;; Hardware stack levels required when called:    9
 25262 ;; This function calls:
 25263 ;;		___lwdiv
 25264 ;;		___lwmod
 25265 ;;		_nullifyBadge_segDisplayForceUpdate
 25266 ;;		_nullifyBadge_segDisplayPutStr
 25267 ;;		_strlen
 25268 ;; This function is called by:
 25269 ;;		_flashy_display_option
 25270 ;;		_slot_Main
 25271 ;; This function uses a non-reentrant model
 25272 ;;
 25273                           
 25274                           
 25275                           ;psect for function _marquee_speedy
 25276  1AC5                     _marquee_speedy:	
 25277                           
 25278                           ;main.c: 131: u16 string_length = strlen((const char *) string);
 25279                           
 25280                           ;incstack = 0
 25281                           ; Regs used in _marquee_speedy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25282  1AC5  0020               	movlb	0	; select bank0
 25283  1AC6  083B               	movf	marquee_speedy@string+1,w
 25284  1AC7  00F2               	movwf	strlen@s+1
 25285  1AC8  083A               	movf	marquee_speedy@string,w
 25286  1AC9  00F1               	movwf	strlen@s
 25287  1ACA  31A0  20D3  319A   	fcall	_strlen
 25288  1ACD  0872               	movf	?_strlen+1,w
 25289  1ACE  0020               	movlb	0	; select bank0
 25290  1ACF  00C9               	movwf	marquee_speedy@string_length+1
 25291  1AD0  0871               	movf	?_strlen,w
 25292  1AD1  00C8               	movwf	marquee_speedy@string_length
 25293                           
 25294                           ;main.c: 132: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 25295  1AD2  30C3               	movlw	low marquee_speedy@F14045
 25296  1AD3  0086               	movwf	6
 25297  1AD4  3001               	movlw	high marquee_speedy@F14045
 25298  1AD5  0087               	movwf	7
 25299  1AD6  3041               	movlw	low marquee_speedy@display_string
 25300  1AD7  0084               	movwf	4
 25301  1AD8  3000               	movlw	high marquee_speedy@display_string
 25302  1AD9  0085               	movwf	5
 25303  1ADA  3005               	movlw	5
 25304  1ADB  00C0               	movwf	??_marquee_speedy
 25305  1ADC                     u4330:	
 25306  1ADC  0016               	moviw fsr1++
 25307  1ADD  001A               	movwi fsr0++
 25308  1ADE  0BC0               	decfsz	??_marquee_speedy,f
 25309  1ADF  2ADC               	goto	u4330
 25310                           
 25311                           ;main.c: 133: u16 i = (count / multiplier) % string_length;
 25312  1AE0  0849               	movf	marquee_speedy@string_length+1,w
 25313  1AE1  00AC               	movwf	___lwmod@divisor+1
 25314  1AE2  0848               	movf	marquee_speedy@string_length,w
 25315  1AE3  00AB               	movwf	___lwmod@divisor
 25316  1AE4  083F               	movf	marquee_speedy@multiplier+1,w
 25317  1AE5  00F2               	movwf	___lwdiv@divisor+1
 25318  1AE6  083E               	movf	marquee_speedy@multiplier,w
 25319  1AE7  00F1               	movwf	___lwdiv@divisor
 25320  1AE8  083D               	movf	marquee_speedy@count+1,w
 25321  1AE9  00F4               	movwf	___lwdiv@dividend+1
 25322  1AEA  083C               	movf	marquee_speedy@count,w
 25323  1AEB  00F3               	movwf	___lwdiv@dividend
 25324  1AEC  31A2  22E5  319A   	fcall	___lwdiv
 25325  1AEF  0872               	movf	?___lwdiv+1,w
 25326  1AF0  0020               	movlb	0	; select bank0
 25327  1AF1  00AE               	movwf	___lwmod@dividend+1
 25328  1AF2  0871               	movf	?___lwdiv,w
 25329  1AF3  00AD               	movwf	___lwmod@dividend
 25330  1AF4  31A1  21F4  319A   	fcall	___lwmod
 25331  1AF7  0020               	movlb	0	; select bank0
 25332  1AF8  082C               	movf	?___lwmod+1,w
 25333  1AF9  00C7               	movwf	marquee_speedy@i+1
 25334  1AFA  082B               	movf	?___lwmod,w
 25335  1AFB  00C6               	movwf	marquee_speedy@i
 25336                           
 25337                           ;main.c: 135: for (u16 j=0; j < 4; j++){
 25338  1AFC  01CA               	clrf	marquee_speedy@j
 25339  1AFD  01CB               	clrf	marquee_speedy@j+1
 25340  1AFE  3000               	movlw	0
 25341  1AFF  024B               	subwf	marquee_speedy@j+1,w
 25342  1B00  3004               	movlw	4
 25343  1B01  1903               	skipnz
 25344  1B02  024A               	subwf	marquee_speedy@j,w
 25345  1B03  1803               	btfsc	3,0
 25346  1B04  2B2C               	goto	l7150
 25347  1B05                     l7144:	
 25348                           
 25349                           ;main.c: 136: display_string[j] = string[(i + j) % string_length];
 25350  1B05  0849               	movf	marquee_speedy@string_length+1,w
 25351  1B06  00AC               	movwf	___lwmod@divisor+1
 25352  1B07  0848               	movf	marquee_speedy@string_length,w
 25353  1B08  00AB               	movwf	___lwmod@divisor
 25354  1B09  084A               	movf	marquee_speedy@j,w
 25355  1B0A  0746               	addwf	marquee_speedy@i,w
 25356  1B0B  00AD               	movwf	___lwmod@dividend
 25357  1B0C  084B               	movf	marquee_speedy@j+1,w
 25358  1B0D  3D47               	addwfc	marquee_speedy@i+1,w
 25359  1B0E  00AE               	movwf	___lwmod@dividend+1
 25360  1B0F  31A1  21F4  319A   	fcall	___lwmod
 25361  1B12  0020               	movlb	0	; select bank0
 25362  1B13  083A               	movf	marquee_speedy@string,w
 25363  1B14  072B               	addwf	?___lwmod,w
 25364  1B15  0084               	movwf	4
 25365  1B16  083B               	movf	marquee_speedy@string+1,w
 25366  1B17  3D2C               	addwfc	?___lwmod+1,w
 25367  1B18  0085               	movwf	5
 25368  1B19  0800               	movf	0,w	;code access
 25369  1B1A  00C0               	movwf	??_marquee_speedy
 25370  1B1B  084A               	movf	marquee_speedy@j,w
 25371  1B1C  3E41               	addlw	(low (marquee_speedy@display_string| 0))& (0+255)
 25372  1B1D  0086               	movwf	6
 25373  1B1E  0187               	clrf	7
 25374  1B1F  0840               	movf	??_marquee_speedy,w
 25375  1B20  0081               	movwf	1
 25376  1B21  3001               	movlw	1
 25377  1B22  07CA               	addwf	marquee_speedy@j,f
 25378  1B23  3000               	movlw	0
 25379  1B24  3DCB               	addwfc	marquee_speedy@j+1,f
 25380  1B25  3000               	movlw	0
 25381  1B26  024B               	subwf	marquee_speedy@j+1,w
 25382  1B27  3004               	movlw	4
 25383  1B28  1903               	skipnz
 25384  1B29  024A               	subwf	marquee_speedy@j,w
 25385  1B2A  1C03               	skipc
 25386  1B2B  2B05               	goto	l7144
 25387  1B2C                     l7150:	
 25388                           
 25389                           ;main.c: 137: }
 25390                           ;main.c: 138: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 25391  1B2C  3041               	movlw	low marquee_speedy@display_string
 25392  1B2D  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 25393  1B2E  3000               	movlw	high marquee_speedy@display_string
 25394  1B2F  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 25395  1B30  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 25396  1B31  31AE  264B  319A   	fcall	_nullifyBadge_segDisplayPutStr
 25397                           
 25398                           ;main.c: 139: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 25399  1B34  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 25400  1B35  31AE  2603         	fcall	_nullifyBadge_segDisplayForceUpdate
 25401  1B37  0008               	return
 25402  1B38                     __end_of_marquee_speedy:	
 25403                           
 25404                           	psect	text59
 25405  1B38                     __ptext59:	
 25406 ;; *************** function _marquee *****************
 25407 ;; Defined at:
 25408 ;;		line 143 in file "main.c"
 25409 ;; Parameters:    Size  Location     Type
 25410 ;;  string          2   26[BANK0 ] PTR unsigned char 
 25411 ;;		 -> STR_29(5), STR_28(5), STR_27(11), STR_26(13), 
 25412 ;;		 -> STR_23(43), STR_22(40), STR_21(27), STR_20(25), 
 25413 ;;		 -> STR_19(30), STR_18(35), STR_17(22), STR_16(26), 
 25414 ;;		 -> STR_15(21), STR_14(19), STR_13(6), STR_12(8), 
 25415 ;;		 -> STR_11(9), STR_10(5), STR_9(18), STR_7(6), 
 25416 ;;		 -> STR_6(10), STR_5(6), STR_4(5), secret_TaskData(14), 
 25417 ;;		 -> locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), 
 25418 ;;		 -> NULL(0), 
 25419 ;;  count           2   28[BANK0 ] unsigned int 
 25420 ;; Auto vars:     Size  Location     Type
 25421 ;;  j               2   42[BANK0 ] unsigned int 
 25422 ;;  display_stri    5   31[BANK0 ] unsigned char [5]
 25423 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 25424 ;;  i               2   38[BANK0 ] unsigned int 
 25425 ;;  multiplier      2   36[BANK0 ] unsigned int 
 25426 ;; Return value:  Size  Location     Type
 25427 ;;                  1    wreg      void 
 25428 ;; Registers used:
 25429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25430 ;; Tracked objects:
 25431 ;;		On entry : 0/0
 25432 ;;		On exit  : 0/0
 25433 ;;		Unchanged: 0/0
 25434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25435 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25436 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25438 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25439 ;;Total ram usage:       18 bytes
 25440 ;; Hardware stack levels used:    1
 25441 ;; Hardware stack levels required when called:    9
 25442 ;; This function calls:
 25443 ;;		___lwdiv
 25444 ;;		___lwmod
 25445 ;;		_nullifyBadge_segDisplayForceUpdate
 25446 ;;		_nullifyBadge_segDisplayPutStr
 25447 ;;		_strlen
 25448 ;; This function is called by:
 25449 ;;		_menu_display_option
 25450 ;;		_flashy_display_option
 25451 ;;		_flashy_Main
 25452 ;;		_locked_Main
 25453 ;;		_slot_Main
 25454 ;; This function uses a non-reentrant model
 25455 ;;
 25456                           
 25457                           
 25458                           ;psect for function _marquee
 25459  1B38                     _marquee:	
 25460                           
 25461                           ;main.c: 144: u16 multiplier = 50;
 25462                           
 25463                           ;incstack = 0
 25464                           ; Regs used in _marquee: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25465  1B38  3032               	movlw	50
 25466  1B39  0020               	movlb	0	; select bank0
 25467  1B3A  00C4               	movwf	marquee@multiplier
 25468  1B3B  3000               	movlw	0
 25469  1B3C  00C5               	movwf	marquee@multiplier+1
 25470                           
 25471                           ;main.c: 145: u16 string_length = strlen((const char *) string);
 25472  1B3D  083B               	movf	marquee@string+1,w
 25473  1B3E  00F2               	movwf	strlen@s+1
 25474  1B3F  083A               	movf	marquee@string,w
 25475  1B40  00F1               	movwf	strlen@s
 25476  1B41  31A0  20D3  319B   	fcall	_strlen
 25477  1B44  0872               	movf	?_strlen+1,w
 25478  1B45  0020               	movlb	0	; select bank0
 25479  1B46  00C9               	movwf	marquee@string_length+1
 25480  1B47  0871               	movf	?_strlen,w
 25481  1B48  00C8               	movwf	marquee@string_length
 25482                           
 25483                           ;main.c: 146: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 25484  1B49  30BE               	movlw	low marquee@F14054
 25485  1B4A  0086               	movwf	6
 25486  1B4B  3001               	movlw	high marquee@F14054
 25487  1B4C  0087               	movwf	7
 25488  1B4D  303F               	movlw	low marquee@display_string
 25489  1B4E  0084               	movwf	4
 25490  1B4F  3000               	movlw	high marquee@display_string
 25491  1B50  0085               	movwf	5
 25492  1B51  3005               	movlw	5
 25493  1B52  00BE               	movwf	??_marquee
 25494  1B53                     u4360:	
 25495  1B53  0016               	moviw fsr1++
 25496  1B54  001A               	movwi fsr0++
 25497  1B55  0BBE               	decfsz	??_marquee,f
 25498  1B56  2B53               	goto	u4360
 25499                           
 25500                           ;main.c: 147: u16 i = (count / multiplier) % string_length;
 25501  1B57  0849               	movf	marquee@string_length+1,w
 25502  1B58  00AC               	movwf	___lwmod@divisor+1
 25503  1B59  0848               	movf	marquee@string_length,w
 25504  1B5A  00AB               	movwf	___lwmod@divisor
 25505  1B5B  0845               	movf	marquee@multiplier+1,w
 25506  1B5C  00F2               	movwf	___lwdiv@divisor+1
 25507  1B5D  0844               	movf	marquee@multiplier,w
 25508  1B5E  00F1               	movwf	___lwdiv@divisor
 25509  1B5F  083D               	movf	marquee@count+1,w
 25510  1B60  00F4               	movwf	___lwdiv@dividend+1
 25511  1B61  083C               	movf	marquee@count,w
 25512  1B62  00F3               	movwf	___lwdiv@dividend
 25513  1B63  31A2  22E5  319B   	fcall	___lwdiv
 25514  1B66  0872               	movf	?___lwdiv+1,w
 25515  1B67  0020               	movlb	0	; select bank0
 25516  1B68  00AE               	movwf	___lwmod@dividend+1
 25517  1B69  0871               	movf	?___lwdiv,w
 25518  1B6A  00AD               	movwf	___lwmod@dividend
 25519  1B6B  31A1  21F4  319B   	fcall	___lwmod
 25520  1B6E  0020               	movlb	0	; select bank0
 25521  1B6F  082C               	movf	?___lwmod+1,w
 25522  1B70  00C7               	movwf	marquee@i+1
 25523  1B71  082B               	movf	?___lwmod,w
 25524  1B72  00C6               	movwf	marquee@i
 25525                           
 25526                           ;main.c: 149: for (u16 j=0; j < 4; j++){
 25527  1B73  01CA               	clrf	marquee@j
 25528  1B74  01CB               	clrf	marquee@j+1
 25529  1B75  3000               	movlw	0
 25530  1B76  024B               	subwf	marquee@j+1,w
 25531  1B77  3004               	movlw	4
 25532  1B78  1903               	skipnz
 25533  1B79  024A               	subwf	marquee@j,w
 25534  1B7A  1803               	btfsc	3,0
 25535  1B7B  2BA3               	goto	l7174
 25536  1B7C                     l7168:	
 25537                           
 25538                           ;main.c: 150: display_string[j] = string[(i + j) % string_length];
 25539  1B7C  0849               	movf	marquee@string_length+1,w
 25540  1B7D  00AC               	movwf	___lwmod@divisor+1
 25541  1B7E  0848               	movf	marquee@string_length,w
 25542  1B7F  00AB               	movwf	___lwmod@divisor
 25543  1B80  084A               	movf	marquee@j,w
 25544  1B81  0746               	addwf	marquee@i,w
 25545  1B82  00AD               	movwf	___lwmod@dividend
 25546  1B83  084B               	movf	marquee@j+1,w
 25547  1B84  3D47               	addwfc	marquee@i+1,w
 25548  1B85  00AE               	movwf	___lwmod@dividend+1
 25549  1B86  31A1  21F4  319B   	fcall	___lwmod
 25550  1B89  0020               	movlb	0	; select bank0
 25551  1B8A  083A               	movf	marquee@string,w
 25552  1B8B  072B               	addwf	?___lwmod,w
 25553  1B8C  0084               	movwf	4
 25554  1B8D  083B               	movf	marquee@string+1,w
 25555  1B8E  3D2C               	addwfc	?___lwmod+1,w
 25556  1B8F  0085               	movwf	5
 25557  1B90  0800               	movf	0,w	;code access
 25558  1B91  00BE               	movwf	??_marquee
 25559  1B92  084A               	movf	marquee@j,w
 25560  1B93  3E3F               	addlw	(low (marquee@display_string| 0))& (0+255)
 25561  1B94  0086               	movwf	6
 25562  1B95  0187               	clrf	7
 25563  1B96  083E               	movf	??_marquee,w
 25564  1B97  0081               	movwf	1
 25565  1B98  3001               	movlw	1
 25566  1B99  07CA               	addwf	marquee@j,f
 25567  1B9A  3000               	movlw	0
 25568  1B9B  3DCB               	addwfc	marquee@j+1,f
 25569  1B9C  3000               	movlw	0
 25570  1B9D  024B               	subwf	marquee@j+1,w
 25571  1B9E  3004               	movlw	4
 25572  1B9F  1903               	skipnz
 25573  1BA0  024A               	subwf	marquee@j,w
 25574  1BA1  1C03               	skipc
 25575  1BA2  2B7C               	goto	l7168
 25576  1BA3                     l7174:	
 25577                           
 25578                           ;main.c: 151: }
 25579                           ;main.c: 152: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 25580  1BA3  303F               	movlw	low marquee@display_string
 25581  1BA4  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 25582  1BA5  3000               	movlw	high marquee@display_string
 25583  1BA6  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 25584  1BA7  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 25585  1BA8  31AE  264B  319B   	fcall	_nullifyBadge_segDisplayPutStr
 25586                           
 25587                           ;main.c: 153: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 25588  1BAB  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 25589  1BAC  31AE  2603         	fcall	_nullifyBadge_segDisplayForceUpdate
 25590  1BAE  0008               	return
 25591  1BAF                     __end_of_marquee:	
 25592                           
 25593                           	psect	text60
 25594  20D3                     __ptext60:	
 25595 ;; *************** function _strlen *****************
 25596 ;; Defined at:
 25597 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/strlen.c"
 25598 ;; Parameters:    Size  Location     Type
 25599 ;;  s               2    1[COMMON] PTR const unsigned char 
 25600 ;;		 -> Slot_Wheel(55), secret_inputs.inputs(20), secret_inputs(25), STR_29(5), 
 25601 ;;		 -> STR_28(5), STR_27(11), STR_26(13), STR_23(43), 
 25602 ;;		 -> STR_22(40), STR_21(27), STR_20(25), STR_19(30), 
 25603 ;;		 -> STR_18(35), STR_17(22), STR_16(26), STR_15(21), 
 25604 ;;		 -> STR_14(19), STR_13(6), STR_12(8), STR_11(9), 
 25605 ;;		 -> STR_10(5), STR_9(18), STR_7(6), STR_6(10), 
 25606 ;;		 -> STR_5(6), STR_4(5), secret_TaskData(14), locked_TaskData(14), 
 25607 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25608 ;; Auto vars:     Size  Location     Type
 25609 ;;  cp              2    5[COMMON] PTR const unsigned char 
 25610 ;;		 -> Slot_Wheel(55), secret_inputs.inputs(20), secret_inputs(25), STR_29(5), 
 25611 ;;		 -> STR_28(5), STR_27(11), STR_26(13), STR_23(43), 
 25612 ;;		 -> STR_22(40), STR_21(27), STR_20(25), STR_19(30), 
 25613 ;;		 -> STR_18(35), STR_17(22), STR_16(26), STR_15(21), 
 25614 ;;		 -> STR_14(19), STR_13(6), STR_12(8), STR_11(9), 
 25615 ;;		 -> STR_10(5), STR_9(18), STR_7(6), STR_6(10), 
 25616 ;;		 -> STR_5(6), STR_4(5), secret_TaskData(14), locked_TaskData(14), 
 25617 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25618 ;; Return value:  Size  Location     Type
 25619 ;;                  2    1[COMMON] unsigned int 
 25620 ;; Registers used:
 25621 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 25622 ;; Tracked objects:
 25623 ;;		On entry : 0/0
 25624 ;;		On exit  : 0/0
 25625 ;;		Unchanged: 0/0
 25626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25627 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25628 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25629 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25630 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25631 ;;Total ram usage:        6 bytes
 25632 ;; Hardware stack levels used:    1
 25633 ;; Hardware stack levels required when called:    4
 25634 ;; This function calls:
 25635 ;;		Nothing
 25636 ;; This function is called by:
 25637 ;;		_marquee_speedy
 25638 ;;		_marquee
 25639 ;;		_secret_check
 25640 ;;		_slot_Main
 25641 ;; This function uses a non-reentrant model
 25642 ;;
 25643                           
 25644                           
 25645                           ;psect for function _strlen
 25646  20D3                     _strlen:	
 25647                           
 25648                           ;incstack = 0
 25649                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 25650  20D3  0872               	movf	strlen@s+1,w
 25651  20D4  00F6               	movwf	strlen@cp+1
 25652  20D5  0871               	movf	strlen@s,w
 25653  20D6  00F5               	movwf	strlen@cp
 25654  20D7                     l7026:	
 25655  20D7  0875               	movf	strlen@cp,w
 25656  20D8  0084               	movwf	4
 25657  20D9  0876               	movf	strlen@cp+1,w
 25658  20DA  0085               	movwf	5
 25659  20DB  0012               	moviw fsr0++
 25660  20DC  1903               	btfsc	3,2
 25661  20DD  28E3               	goto	l7028
 25662  20DE  3001               	movlw	1
 25663  20DF  07F5               	addwf	strlen@cp,f
 25664  20E0  3000               	movlw	0
 25665  20E1  3DF6               	addwfc	strlen@cp+1,f
 25666  20E2  28D7               	goto	l7026
 25667  20E3                     l7028:	
 25668  20E3  0971               	comf	strlen@s,w
 25669  20E4  00F3               	movwf	??_strlen
 25670  20E5  0972               	comf	strlen@s+1,w
 25671  20E6  00F4               	movwf	??_strlen+1
 25672  20E7  0AF3               	incf	??_strlen,f
 25673  20E8  1903               	skipnz
 25674  20E9  0AF4               	incf	??_strlen+1,f
 25675  20EA  0875               	movf	strlen@cp,w
 25676  20EB  0773               	addwf	??_strlen,w
 25677  20EC  00F1               	movwf	?_strlen
 25678  20ED  0876               	movf	strlen@cp+1,w
 25679  20EE  3D74               	addwfc	??_strlen+1,w
 25680  20EF  00F2               	movwf	?_strlen+1
 25681  20F0  0008               	return
 25682  20F1                     __end_of_strlen:	
 25683                           
 25684                           	psect	text61
 25685  2E4B                     __ptext61:	
 25686 ;; *************** function _nullifyBadge_segDisplayPutStr *****************
 25687 ;; Defined at:
 25688 ;;		line 113 in file "nullifyBadge.c"
 25689 ;; Parameters:    Size  Location     Type
 25690 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 25691 ;;		 -> badge_inst(18), 
 25692 ;;  str             2   23[BANK0 ] PTR unsigned char 
 25693 ;;		 -> flashy_Main@hit_counter(6), STR_24(5), STR_23(43), STR_22(40), 
 25694 ;;		 -> STR_21(27), STR_20(25), STR_19(30), STR_18(35), 
 25695 ;;		 -> STR_17(22), STR_16(26), STR_15(21), STR_14(19), 
 25696 ;;		 -> STR_13(6), STR_12(8), STR_11(9), STR_10(5), 
 25697 ;;		 -> STR_7(6), STR_6(10), STR_5(6), STR_4(5), 
 25698 ;;		 -> marquee@display_string(5), marquee_speedy@display_string(5), 
 25699 ;; Auto vars:     Size  Location     Type
 25700 ;;  badge           1   25[BANK0 ] PTR struct t_nullifyBadg
 25701 ;;		 -> badge_inst(18), 
 25702 ;; Return value:  Size  Location     Type
 25703 ;;                  1    wreg      void 
 25704 ;; Registers used:
 25705 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25706 ;; Tracked objects:
 25707 ;;		On entry : 0/0
 25708 ;;		On exit  : 0/0
 25709 ;;		Unchanged: 0/0
 25710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25711 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25714 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25715 ;;Total ram usage:        3 bytes
 25716 ;; Hardware stack levels used:    1
 25717 ;; Hardware stack levels required when called:    8
 25718 ;; This function calls:
 25719 ;;		_displayL2_PutStr
 25720 ;; This function is called by:
 25721 ;;		_marquee_speedy
 25722 ;;		_marquee
 25723 ;;		_menu_display_option
 25724 ;;		_flashy_display_option
 25725 ;;		_flashy_Main
 25726 ;; This function uses a non-reentrant model
 25727 ;;
 25728                           
 25729                           
 25730                           ;psect for function _nullifyBadge_segDisplayPutStr
 25731  2E4B                     _nullifyBadge_segDisplayPutStr:	
 25732                           
 25733                           ;incstack = 0
 25734                           ; Regs used in _nullifyBadge_segDisplayPutStr: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 25735                           ;nullifyBadge_segDisplayPutStr@badge stored from wreg
 25736  2E4B  0020               	movlb	0	; select bank0
 25737  2E4C  00B9               	movwf	nullifyBadge_segDisplayPutStr@badge
 25738                           
 25739                           ;nullifyBadge.c: 114: displayL2_PutStr(&badge->display, str);
 25740  2E4D  0838               	movf	nullifyBadge_segDisplayPutStr@str+1,w
 25741  2E4E  00B1               	movwf	displayL2_PutStr@str+1
 25742  2E4F  0837               	movf	nullifyBadge_segDisplayPutStr@str,w
 25743  2E50  00B0               	movwf	displayL2_PutStr@str
 25744  2E51  0839               	movf	nullifyBadge_segDisplayPutStr@badge,w
 25745  2E52  31A1  21CA         	fcall	_displayL2_PutStr
 25746  2E54  0008               	return
 25747  2E55                     __end_of_nullifyBadge_segDisplayPutStr:	
 25748                           
 25749                           	psect	text62
 25750  21CA                     __ptext62:	
 25751 ;; *************** function _displayL2_PutStr *****************
 25752 ;; Defined at:
 25753 ;;		line 55 in file "nullifyBadge_displayL2.c"
 25754 ;; Parameters:    Size  Location     Type
 25755 ;;  display         1    wreg     PTR struct t_nullifyDisp
 25756 ;;		 -> badge_inst(18), 
 25757 ;;  str             2   16[BANK0 ] PTR unsigned char 
 25758 ;;		 -> flashy_Main@hit_counter(6), STR_24(5), STR_23(43), STR_22(40), 
 25759 ;;		 -> STR_21(27), STR_20(25), STR_19(30), STR_18(35), 
 25760 ;;		 -> STR_17(22), STR_16(26), STR_15(21), STR_14(19), 
 25761 ;;		 -> STR_13(6), STR_12(8), STR_11(9), STR_10(5), 
 25762 ;;		 -> STR_7(6), STR_6(10), STR_5(6), STR_4(5), 
 25763 ;;		 -> STR_3(5), marquee@display_string(5), marquee_speedy@display_string(5), 
 25764 ;; Auto vars:     Size  Location     Type
 25765 ;;  display         1   21[BANK0 ] PTR struct t_nullifyDisp
 25766 ;;		 -> badge_inst(18), 
 25767 ;;  k               1   22[BANK0 ] unsigned char 
 25768 ;; Return value:  Size  Location     Type
 25769 ;;                  1    wreg      void 
 25770 ;; Registers used:
 25771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25772 ;; Tracked objects:
 25773 ;;		On entry : 0/0
 25774 ;;		On exit  : 0/0
 25775 ;;		Unchanged: 0/0
 25776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25777 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25778 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25779 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25780 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25781 ;;Total ram usage:        7 bytes
 25782 ;; Hardware stack levels used:    1
 25783 ;; Hardware stack levels required when called:    7
 25784 ;; This function calls:
 25785 ;;		_displayL2_PutChar
 25786 ;; This function is called by:
 25787 ;;		_nullifyBadge_segDisplayPutStr
 25788 ;;		_displayL2_EraseSegDisplay
 25789 ;; This function uses a non-reentrant model
 25790 ;;
 25791                           
 25792                           
 25793                           ;psect for function _displayL2_PutStr
 25794  21CA                     _displayL2_PutStr:	
 25795                           
 25796                           ;incstack = 0
 25797                           ; Regs used in _displayL2_PutStr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25798                           ;displayL2_PutStr@display stored from wreg
 25799  21CA  0020               	movlb	0	; select bank0
 25800  21CB  00B5               	movwf	displayL2_PutStr@display
 25801                           
 25802                           ;nullifyBadge_displayL2.c: 57: u8 k = 0;
 25803  21CC  01B6               	clrf	displayL2_PutStr@k
 25804  21CD                     l6980:	
 25805                           ;nullifyBadge_displayL2.c: 59: while (str[k] != '\0') {
 25806                           
 25807  21CD  0831               	movf	displayL2_PutStr@str+1,w
 25808  21CE  00B3               	movwf	??_displayL2_PutStr+1
 25809  21CF  0830               	movf	displayL2_PutStr@str,w
 25810  21D0  00B2               	movwf	??_displayL2_PutStr
 25811  21D1  0836               	movf	displayL2_PutStr@k,w
 25812  21D2  0732               	addwf	??_displayL2_PutStr,w
 25813  21D3  0084               	movwf	4
 25814  21D4  0833               	movf	??_displayL2_PutStr+1,w
 25815  21D5  1803               	skipnc
 25816  21D6  0A33               	incf	??_displayL2_PutStr+1,w
 25817  21D7  0085               	movwf	5
 25818  21D8  0012               	moviw fsr0++
 25819  21D9  1903               	btfsc	3,2
 25820  21DA  0008               	return
 25821                           
 25822                           ;nullifyBadge_displayL2.c: 60: displayL2_PutChar(display, str[k]);
 25823  21DB  0831               	movf	displayL2_PutStr@str+1,w
 25824  21DC  00B3               	movwf	??_displayL2_PutStr+1
 25825  21DD  0830               	movf	displayL2_PutStr@str,w
 25826  21DE  00B2               	movwf	??_displayL2_PutStr
 25827  21DF  0836               	movf	displayL2_PutStr@k,w
 25828  21E0  0732               	addwf	??_displayL2_PutStr,w
 25829  21E1  0084               	movwf	4
 25830  21E2  0833               	movf	??_displayL2_PutStr+1,w
 25831  21E3  1803               	skipnc
 25832  21E4  0A33               	incf	??_displayL2_PutStr+1,w
 25833  21E5  0085               	movwf	5
 25834  21E6  0800               	movf	0,w	;code access
 25835  21E7  00B4               	movwf	??_displayL2_PutStr+2
 25836  21E8  0834               	movf	??_displayL2_PutStr+2,w
 25837  21E9  00AA               	movwf	displayL2_PutChar@c
 25838  21EA  0835               	movf	displayL2_PutStr@display,w
 25839  21EB  31A6  26B0  31A1   	fcall	_displayL2_PutChar
 25840                           
 25841                           ;nullifyBadge_displayL2.c: 61: k++;
 25842  21EE  3001               	movlw	1
 25843  21EF  0020               	movlb	0	; select bank0
 25844  21F0  00B2               	movwf	??_displayL2_PutStr
 25845  21F1  0832               	movf	??_displayL2_PutStr,w
 25846  21F2  07B6               	addwf	displayL2_PutStr@k,f
 25847  21F3  29CD               	goto	l6980
 25848  21F4                     __end_of_displayL2_PutStr:	
 25849                           
 25850                           	psect	text63
 25851  26B0                     __ptext63:	
 25852 ;; *************** function _displayL2_PutChar *****************
 25853 ;; Defined at:
 25854 ;;		line 38 in file "nullifyBadge_displayL2.c"
 25855 ;; Parameters:    Size  Location     Type
 25856 ;;  display         1    wreg     PTR struct t_nullifyDisp
 25857 ;;		 -> badge_inst(18), 
 25858 ;;  c               1   10[BANK0 ] unsigned char 
 25859 ;; Auto vars:     Size  Location     Type
 25860 ;;  display         1   15[BANK0 ] PTR struct t_nullifyDisp
 25861 ;;		 -> badge_inst(18), 
 25862 ;;  k               1   14[BANK0 ] unsigned char 
 25863 ;; Return value:  Size  Location     Type
 25864 ;;                  1    wreg      void 
 25865 ;; Registers used:
 25866 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25867 ;; Tracked objects:
 25868 ;;		On entry : 0/0
 25869 ;;		On exit  : 0/0
 25870 ;;		Unchanged: 0/0
 25871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25872 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25873 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25874 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25875 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25876 ;;Total ram usage:        6 bytes
 25877 ;; Hardware stack levels used:    1
 25878 ;; Hardware stack levels required when called:    6
 25879 ;; This function calls:
 25880 ;;		_displayL1_SetSegChar
 25881 ;; This function is called by:
 25882 ;;		_displayL2_PutStr
 25883 ;;		_nullifyBadge_segDisplayPutChar
 25884 ;; This function uses a non-reentrant model
 25885 ;;
 25886                           
 25887                           
 25888                           ;psect for function _displayL2_PutChar
 25889  26B0                     _displayL2_PutChar:	
 25890                           
 25891                           ;incstack = 0
 25892                           ; Regs used in _displayL2_PutChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 25893                           ;displayL2_PutChar@display stored from wreg
 25894  26B0  0020               	movlb	0	; select bank0
 25895  26B1  00AF               	movwf	displayL2_PutChar@display
 25896                           
 25897                           ;nullifyBadge_displayL2.c: 40: display->charVect[0] = display->charVect[1];
 25898  26B2  0A2F               	incf	displayL2_PutChar@display,w
 25899  26B3  0086               	movwf	6
 25900  26B4  3001               	movlw	1	; select bank2/3
 25901  26B5  0087               	movwf	7
 25902  26B6  0801               	movf	1,w
 25903  26B7  00AB               	movwf	??_displayL2_PutChar
 25904  26B8  082F               	movf	displayL2_PutChar@display,w
 25905  26B9  0086               	movwf	6
 25906  26BA  3001               	movlw	1	; select bank2/3
 25907  26BB  0087               	movwf	7
 25908  26BC  082B               	movf	??_displayL2_PutChar,w
 25909  26BD  0081               	movwf	1
 25910                           
 25911                           ;nullifyBadge_displayL2.c: 41: display->charVect[1] = display->charVect[2];
 25912  26BE  082F               	movf	displayL2_PutChar@display,w
 25913  26BF  3E02               	addlw	2
 25914  26C0  0086               	movwf	6
 25915  26C1  3001               	movlw	1	; select bank2/3
 25916  26C2  0087               	movwf	7
 25917  26C3  0801               	movf	1,w
 25918  26C4  00AB               	movwf	??_displayL2_PutChar
 25919  26C5  0A2F               	incf	displayL2_PutChar@display,w
 25920  26C6  0086               	movwf	6
 25921  26C7  3001               	movlw	1	; select bank2/3
 25922  26C8  0087               	movwf	7
 25923  26C9  082B               	movf	??_displayL2_PutChar,w
 25924  26CA  0081               	movwf	1
 25925                           
 25926                           ;nullifyBadge_displayL2.c: 42: display->charVect[2] = display->charVect[3];
 25927  26CB  082F               	movf	displayL2_PutChar@display,w
 25928  26CC  3E03               	addlw	3
 25929  26CD  0086               	movwf	6
 25930  26CE  3001               	movlw	1	; select bank2/3
 25931  26CF  0087               	movwf	7
 25932  26D0  0801               	movf	1,w
 25933  26D1  00AB               	movwf	??_displayL2_PutChar
 25934  26D2  082F               	movf	displayL2_PutChar@display,w
 25935  26D3  3E02               	addlw	2
 25936  26D4  0086               	movwf	6
 25937  26D5  3001               	movlw	1	; select bank2/3
 25938  26D6  0087               	movwf	7
 25939  26D7  082B               	movf	??_displayL2_PutChar,w
 25940  26D8  0081               	movwf	1
 25941                           
 25942                           ;nullifyBadge_displayL2.c: 45: display->charVect[3] = c;
 25943  26D9  082A               	movf	displayL2_PutChar@c,w
 25944  26DA  00AB               	movwf	??_displayL2_PutChar
 25945  26DB  082F               	movf	displayL2_PutChar@display,w
 25946  26DC  3E03               	addlw	3
 25947  26DD  0086               	movwf	6
 25948  26DE  3001               	movlw	1	; select bank2/3
 25949  26DF  0087               	movwf	7
 25950  26E0  082B               	movf	??_displayL2_PutChar,w
 25951  26E1  0081               	movwf	1
 25952                           
 25953                           ;nullifyBadge_displayL2.c: 48: u8 k = 0;
 25954  26E2  01AE               	clrf	displayL2_PutChar@k
 25955                           
 25956                           ;nullifyBadge_displayL2.c: 49: for (k = 0; k < 4; k++) {
 25957  26E3  01AE               	clrf	displayL2_PutChar@k
 25958  26E4                     L15:	
 25959  26E4  3004               	movlw	4
 25960  26E5  022E               	subwf	displayL2_PutChar@k,w
 25961  26E6  1803               	btfsc	3,0
 25962  26E7  0008               	return
 25963                           
 25964                           ;nullifyBadge_displayL2.c: 50: displayL1_SetSegChar(&display->display_l1, display->charV
      +                          ect[k], k);
 25965  26E8  082E               	movf	displayL2_PutChar@k,w
 25966  26E9  072F               	addwf	displayL2_PutChar@display,w
 25967  26EA  00AB               	movwf	??_displayL2_PutChar
 25968  26EB  082B               	movf	??_displayL2_PutChar,w
 25969  26EC  0086               	movwf	6
 25970  26ED  3001               	movlw	1	; select bank2/3
 25971  26EE  0087               	movwf	7
 25972  26EF  0801               	movf	1,w
 25973  26F0  00AC               	movwf	??_displayL2_PutChar+1
 25974  26F1  082C               	movf	??_displayL2_PutChar+1,w
 25975  26F2  00A0               	movwf	displayL1_SetSegChar@c
 25976  26F3  082E               	movf	displayL2_PutChar@k,w
 25977  26F4  00AD               	movwf	??_displayL2_PutChar+2
 25978  26F5  082D               	movf	??_displayL2_PutChar+2,w
 25979  26F6  00A1               	movwf	displayL1_SetSegChar@charPos
 25980  26F7  082F               	movf	displayL2_PutChar@display,w
 25981  26F8  3E07               	addlw	7
 25982  26F9  31A3  23FC  31A6   	fcall	_displayL1_SetSegChar
 25983  26FC  3001               	movlw	1
 25984  26FD  0020               	movlb	0	; select bank0
 25985  26FE  00AB               	movwf	??_displayL2_PutChar
 25986  26FF  082B               	movf	??_displayL2_PutChar,w
 25987  2700  07AE               	addwf	displayL2_PutChar@k,f
 25988  2701  2EE4               	goto	L15
 25989  2702                     __end_of_displayL2_PutChar:	
 25990                           
 25991                           	psect	text64
 25992  23FC                     __ptext64:	
 25993 ;; *************** function _displayL1_SetSegChar *****************
 25994 ;; Defined at:
 25995 ;;		line 18 in file "nullifyBadge_displayL1.c"
 25996 ;; Parameters:    Size  Location     Type
 25997 ;;  display         1    wreg     PTR struct t_nullifyDisp
 25998 ;;		 -> badge_inst(18), 
 25999 ;;  c               1    0[BANK0 ] unsigned char 
 26000 ;;  charPos         1    1[BANK0 ] unsigned char 
 26001 ;; Auto vars:     Size  Location     Type
 26002 ;;  display         1    7[BANK0 ] PTR struct t_nullifyDisp
 26003 ;;		 -> badge_inst(18), 
 26004 ;;  charData        2    8[BANK0 ] unsigned int 
 26005 ;;  dispDataVect    1    6[BANK0 ] unsigned char 
 26006 ;; Return value:  Size  Location     Type
 26007 ;;                  1    wreg      void 
 26008 ;; Registers used:
 26009 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26010 ;; Tracked objects:
 26011 ;;		On entry : 0/0
 26012 ;;		On exit  : 0/0
 26013 ;;		Unchanged: 0/0
 26014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26015 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26016 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26017 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26018 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26019 ;;Total ram usage:       10 bytes
 26020 ;; Hardware stack levels used:    1
 26021 ;; Hardware stack levels required when called:    5
 26022 ;; This function calls:
 26023 ;;		_displayCharReverse
 26024 ;; This function is called by:
 26025 ;;		_displayL2_PutChar
 26026 ;;		_nullifyBadge_segDisplayPutCharPos
 26027 ;;		_displayL2_PrintChar
 26028 ;; This function uses a non-reentrant model
 26029 ;;
 26030                           
 26031                           
 26032                           ;psect for function _displayL1_SetSegChar
 26033  23FC                     _displayL1_SetSegChar:	
 26034                           
 26035                           ;incstack = 0
 26036                           ; Regs used in _displayL1_SetSegChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 26037                           ;displayL1_SetSegChar@display stored from wreg
 26038  23FC  0020               	movlb	0	; select bank0
 26039  23FD  00A7               	movwf	displayL1_SetSegChar@display
 26040                           
 26041                           ;nullifyBadge_displayL1.c: 23: u16 charData = asciiCharTableLookup[(u8) c];
 26042  23FE  0820               	movf	displayL1_SetSegChar@c,w
 26043  23FF  00A2               	movwf	??_displayL1_SetSegChar
 26044  2400  01A3               	clrf	??_displayL1_SetSegChar+1
 26045  2401  35A2               	lslf	??_displayL1_SetSegChar,f
 26046  2402  0DA3               	rlf	??_displayL1_SetSegChar+1,f
 26047  2403  30F0               	movlw	240
 26048  2404  00A4               	movwf	??_displayL1_SetSegChar+2
 26049  2405  3026               	movlw	38
 26050  2406  00A5               	movwf	??_displayL1_SetSegChar+3
 26051  2407  0822               	movf	??_displayL1_SetSegChar,w
 26052  2408  0724               	addwf	??_displayL1_SetSegChar+2,w
 26053  2409  0086               	movwf	6
 26054  240A  0823               	movf	??_displayL1_SetSegChar+1,w
 26055  240B  3D25               	addwfc	??_displayL1_SetSegChar+3,w
 26056  240C  0087               	movwf	7
 26057  240D  3F40               	moviw [0]fsr1
 26058  240E  00A8               	movwf	displayL1_SetSegChar@charData
 26059  240F  3F41               	moviw [1]fsr1
 26060  2410  00A9               	movwf	displayL1_SetSegChar@charData+1
 26061                           
 26062                           ;nullifyBadge_displayL1.c: 29: if (charPos & 0x1) {
 26063  2411  1C21               	btfss	displayL1_SetSegChar@charPos,0
 26064  2412  2C1E               	goto	l6918
 26065                           
 26066                           ;nullifyBadge_displayL1.c: 30: charData = displayCharReverse(charData);
 26067  2413  0829               	movf	displayL1_SetSegChar@charData+1,w
 26068  2414  00F2               	movwf	displayCharReverse@cVal+1
 26069  2415  0828               	movf	displayL1_SetSegChar@charData,w
 26070  2416  00F1               	movwf	displayCharReverse@cVal
 26071  2417  31A2  2221         	fcall	_displayCharReverse
 26072  2419  0872               	movf	?_displayCharReverse+1,w
 26073  241A  0020               	movlb	0	; select bank0
 26074  241B  00A9               	movwf	displayL1_SetSegChar@charData+1
 26075  241C  0871               	movf	?_displayCharReverse,w
 26076  241D  00A8               	movwf	displayL1_SetSegChar@charData
 26077  241E                     l6918:	
 26078                           
 26079                           ;nullifyBadge_displayL1.c: 31: }
 26080                           ;nullifyBadge_displayL1.c: 61: u8 dispDataVectBaseIdx = 8 - ( charPos << 1 );
 26081  241E  3521               	lslf	displayL1_SetSegChar@charPos,w
 26082  241F  3AFF               	xorlw	255
 26083  2420  3E01               	addlw	1
 26084  2421  3E08               	addlw	8
 26085  2422  00A2               	movwf	??_displayL1_SetSegChar
 26086  2423  0822               	movf	??_displayL1_SetSegChar,w
 26087  2424  00A6               	movwf	displayL1_SetSegChar@dispDataVectBaseIdx
 26088                           
 26089                           ;nullifyBadge_displayL1.c: 64: display->displayVect[dispDataVectBaseIdx] = (u8) (charDat
      +                          a >> 8);
 26090  2425  0829               	movf	displayL1_SetSegChar@charData+1,w
 26091  2426  00A2               	movwf	??_displayL1_SetSegChar
 26092  2427  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 26093  2428  0727               	addwf	displayL1_SetSegChar@display,w
 26094  2429  00A3               	movwf	??_displayL1_SetSegChar+1
 26095  242A  0823               	movf	??_displayL1_SetSegChar+1,w
 26096  242B  0086               	movwf	6
 26097  242C  3001               	movlw	1	; select bank2/3
 26098  242D  0087               	movwf	7
 26099  242E  0822               	movf	??_displayL1_SetSegChar,w
 26100  242F  0081               	movwf	1
 26101                           
 26102                           ;nullifyBadge_displayL1.c: 67: display->displayVect[dispDataVectBaseIdx+1] = (u8) (charD
      +                          ata & 0xFF);
 26103  2430  0828               	movf	displayL1_SetSegChar@charData,w
 26104  2431  00A2               	movwf	??_displayL1_SetSegChar
 26105  2432  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 26106  2433  3E01               	addlw	1
 26107  2434  0727               	addwf	displayL1_SetSegChar@display,w
 26108  2435  00A3               	movwf	??_displayL1_SetSegChar+1
 26109  2436  0823               	movf	??_displayL1_SetSegChar+1,w
 26110  2437  0086               	movwf	6
 26111  2438  3001               	movlw	1	; select bank2/3
 26112  2439  0087               	movwf	7
 26113  243A  0822               	movf	??_displayL1_SetSegChar,w
 26114  243B  0081               	movwf	1
 26115  243C  0008               	return
 26116  243D                     __end_of_displayL1_SetSegChar:	
 26117                           
 26118                           	psect	text65
 26119  2221                     __ptext65:	
 26120 ;; *************** function _displayCharReverse *****************
 26121 ;; Defined at:
 26122 ;;		line 105 in file "nullifyBadge_displayL1.c"
 26123 ;; Parameters:    Size  Location     Type
 26124 ;;  cVal            2    1[COMMON] unsigned int 
 26125 ;; Auto vars:     Size  Location     Type
 26126 ;;  k               1   11[COMMON] unsigned char 
 26127 ;;  retValUpperR    1   10[COMMON] unsigned char 
 26128 ;;  retValUpper     1    9[COMMON] unsigned char 
 26129 ;;  retValLower     1    8[COMMON] unsigned char 
 26130 ;; Return value:  Size  Location     Type
 26131 ;;                  2    1[COMMON] unsigned int 
 26132 ;; Registers used:
 26133 ;;		wreg, status,2, status,0
 26134 ;; Tracked objects:
 26135 ;;		On entry : 0/0
 26136 ;;		On exit  : 0/0
 26137 ;;		Unchanged: 0/0
 26138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26139 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26140 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26141 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26142 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26143 ;;Total ram usage:       11 bytes
 26144 ;; Hardware stack levels used:    1
 26145 ;; Hardware stack levels required when called:    4
 26146 ;; This function calls:
 26147 ;;		Nothing
 26148 ;; This function is called by:
 26149 ;;		_displayL1_SetSegChar
 26150 ;; This function uses a non-reentrant model
 26151 ;;
 26152                           
 26153                           
 26154                           ;psect for function _displayCharReverse
 26155  2221                     _displayCharReverse:	
 26156                           
 26157                           ;nullifyBadge_displayL1.c: 106: u8 retValUpper, retValLower, retValUpperRev;
 26158                           ;nullifyBadge_displayL1.c: 108: u8 k;
 26159                           ;nullifyBadge_displayL1.c: 111: retValUpper = cVal >> 8;
 26160                           
 26161                           ;incstack = 0
 26162                           ; Regs used in _displayCharReverse: [wreg+status,2+status,0]
 26163  2221  0872               	movf	displayCharReverse@cVal+1,w
 26164  2222  00F3               	movwf	??_displayCharReverse
 26165  2223  0873               	movf	??_displayCharReverse,w
 26166  2224  00F9               	movwf	displayCharReverse@retValUpper
 26167                           
 26168                           ;nullifyBadge_displayL1.c: 112: retValLower = cVal & 0xFF;
 26169  2225  0871               	movf	displayCharReverse@cVal,w
 26170  2226  00F3               	movwf	??_displayCharReverse
 26171  2227  0873               	movf	??_displayCharReverse,w
 26172  2228  00F8               	movwf	displayCharReverse@retValLower
 26173                           
 26174                           ;nullifyBadge_displayL1.c: 115: retValUpperRev = 0;
 26175  2229  01FA               	clrf	displayCharReverse@retValUpperRev
 26176                           
 26177                           ;nullifyBadge_displayL1.c: 117: for (k = 0; k < 7; k++) {
 26178  222A  01FB               	clrf	displayCharReverse@k
 26179  222B  3007               	movlw	7
 26180  222C  027B               	subwf	displayCharReverse@k,w
 26181  222D  1803               	btfsc	3,0
 26182  222E  2A40               	goto	l6900
 26183  222F                     l6892:	
 26184                           
 26185                           ;nullifyBadge_displayL1.c: 118: retValUpperRev |= (retValUpper & 0x1);
 26186  222F  0879               	movf	displayCharReverse@retValUpper,w
 26187  2230  3901               	andlw	1
 26188  2231  00F3               	movwf	??_displayCharReverse
 26189  2232  0873               	movf	??_displayCharReverse,w
 26190  2233  04FA               	iorwf	displayCharReverse@retValUpperRev,f
 26191                           
 26192                           ;nullifyBadge_displayL1.c: 119: retValUpper >>= 1;
 26193  2234  1003               	clrc
 26194  2235  0CF9               	rrf	displayCharReverse@retValUpper,f
 26195                           
 26196                           ;nullifyBadge_displayL1.c: 120: retValUpperRev <<= 1;
 26197  2236  1003               	clrc
 26198  2237  0DFA               	rlf	displayCharReverse@retValUpperRev,f
 26199  2238  3001               	movlw	1
 26200  2239  00F3               	movwf	??_displayCharReverse
 26201  223A  0873               	movf	??_displayCharReverse,w
 26202  223B  07FB               	addwf	displayCharReverse@k,f
 26203  223C  3007               	movlw	7
 26204  223D  027B               	subwf	displayCharReverse@k,w
 26205  223E  1C03               	skipc
 26206  223F  2A2F               	goto	l6892
 26207  2240                     l6900:	
 26208                           
 26209                           ;nullifyBadge_displayL1.c: 121: }
 26210                           ;nullifyBadge_displayL1.c: 123: return (retValLower << 8) | (retValUpperRev);
 26211  2240  087A               	movf	displayCharReverse@retValUpperRev,w
 26212  2241  00F3               	movwf	??_displayCharReverse
 26213  2242  01F4               	clrf	??_displayCharReverse+1
 26214  2243  0878               	movf	displayCharReverse@retValLower,w
 26215  2244  00F5               	movwf	??_displayCharReverse+2
 26216  2245  01F6               	clrf	??_displayCharReverse+3
 26217  2246  0875               	movf	??_displayCharReverse+2,w
 26218  2247  00F6               	movwf	??_displayCharReverse+3
 26219  2248  01F5               	clrf	??_displayCharReverse+2
 26220  2249  0873               	movf	??_displayCharReverse,w
 26221  224A  0475               	iorwf	??_displayCharReverse+2,w
 26222  224B  00F1               	movwf	?_displayCharReverse
 26223  224C  0874               	movf	??_displayCharReverse+1,w
 26224  224D  0476               	iorwf	??_displayCharReverse+3,w
 26225  224E  00F2               	movwf	?_displayCharReverse+1
 26226  224F  0008               	return
 26227  2250                     __end_of_displayCharReverse:	
 26228                           
 26229                           	psect	text66
 26230  2E03                     __ptext66:	
 26231 ;; *************** function _nullifyBadge_segDisplayForceUpdate *****************
 26232 ;; Defined at:
 26233 ;;		line 108 in file "nullifyBadge.c"
 26234 ;; Parameters:    Size  Location     Type
 26235 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 26236 ;;		 -> badge_inst(18), 
 26237 ;; Auto vars:     Size  Location     Type
 26238 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 26239 ;;		 -> badge_inst(18), 
 26240 ;; Return value:  Size  Location     Type
 26241 ;;                  1    wreg      void 
 26242 ;; Registers used:
 26243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26244 ;; Tracked objects:
 26245 ;;		On entry : 0/0
 26246 ;;		On exit  : 0/0
 26247 ;;		Unchanged: 0/0
 26248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26250 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26252 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26253 ;;Total ram usage:        1 bytes
 26254 ;; Hardware stack levels used:    1
 26255 ;; Hardware stack levels required when called:    8
 26256 ;; This function calls:
 26257 ;;		_displayL2_ForceUpdate
 26258 ;; This function is called by:
 26259 ;;		_marquee_speedy
 26260 ;;		_marquee
 26261 ;;		_menu_display_option
 26262 ;;		_flashy_display_option
 26263 ;;		_flashy_Main
 26264 ;; This function uses a non-reentrant model
 26265 ;;
 26266                           
 26267                           
 26268                           ;psect for function _nullifyBadge_segDisplayForceUpdate
 26269  2E03                     _nullifyBadge_segDisplayForceUpdate:	
 26270                           
 26271                           ;incstack = 0
 26272                           ; Regs used in _nullifyBadge_segDisplayForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+
      +                          pclath+cstack]
 26273                           ;nullifyBadge_segDisplayForceUpdate@badge stored from wreg
 26274  2E03  0020               	movlb	0	; select bank0
 26275  2E04  00AB               	movwf	nullifyBadge_segDisplayForceUpdate@badge
 26276                           
 26277                           ;nullifyBadge.c: 109: displayL2_ForceUpdate(&badge->display);
 26278  2E05  082B               	movf	nullifyBadge_segDisplayForceUpdate@badge,w
 26279  2E06  31AD  25FD         	fcall	_displayL2_ForceUpdate
 26280  2E08  0008               	return
 26281  2E09                     __end_of_nullifyBadge_segDisplayForceUpdate:	
 26282                           
 26283                           	psect	text67
 26284  2DFD                     __ptext67:	
 26285 ;; *************** function _displayL2_ForceUpdate *****************
 26286 ;; Defined at:
 26287 ;;		line 79 in file "nullifyBadge_displayL2.c"
 26288 ;; Parameters:    Size  Location     Type
 26289 ;;  display         1    wreg     PTR struct t_nullifyDisp
 26290 ;;		 -> badge_inst(18), 
 26291 ;; Auto vars:     Size  Location     Type
 26292 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 26293 ;;		 -> badge_inst(18), 
 26294 ;; Return value:  Size  Location     Type
 26295 ;;                  1    wreg      void 
 26296 ;; Registers used:
 26297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26298 ;; Tracked objects:
 26299 ;;		On entry : 0/0
 26300 ;;		On exit  : 0/0
 26301 ;;		Unchanged: 0/0
 26302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26304 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26306 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26307 ;;Total ram usage:        1 bytes
 26308 ;; Hardware stack levels used:    1
 26309 ;; Hardware stack levels required when called:    7
 26310 ;; This function calls:
 26311 ;;		_displayL1_Update
 26312 ;; This function is called by:
 26313 ;;		_nullifyBadge_segDisplayForceUpdate
 26314 ;; This function uses a non-reentrant model
 26315 ;;
 26316                           
 26317                           
 26318                           ;psect for function _displayL2_ForceUpdate
 26319  2DFD                     _displayL2_ForceUpdate:	
 26320                           
 26321                           ;incstack = 0
 26322                           ; Regs used in _displayL2_ForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 26323                           ;displayL2_ForceUpdate@display stored from wreg
 26324  2DFD  00FB               	movwf	displayL2_ForceUpdate@display
 26325                           
 26326                           ;nullifyBadge_displayL2.c: 80: displayL1_Update(&display->display_l1);
 26327  2DFE  087B               	movf	displayL2_ForceUpdate@display,w
 26328  2DFF  3E07               	addlw	7
 26329  2E00  31AE  26F8         	fcall	_displayL1_Update
 26330  2E02  0008               	return
 26331  2E03                     __end_of_displayL2_ForceUpdate:	
 26332                           
 26333                           	psect	text68
 26334  21F4                     __ptext68:	
 26335 ;; *************** function ___lwmod *****************
 26336 ;; Defined at:
 26337 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwmod.c"
 26338 ;; Parameters:    Size  Location     Type
 26339 ;;  divisor         2   11[BANK0 ] unsigned int 
 26340 ;;  dividend        2   13[BANK0 ] unsigned int 
 26341 ;; Auto vars:     Size  Location     Type
 26342 ;;  counter         1   10[COMMON] unsigned char 
 26343 ;; Return value:  Size  Location     Type
 26344 ;;                  2   11[BANK0 ] unsigned int 
 26345 ;; Registers used:
 26346 ;;		wreg, status,2, status,0
 26347 ;; Tracked objects:
 26348 ;;		On entry : 0/0
 26349 ;;		On exit  : 0/0
 26350 ;;		Unchanged: 0/0
 26351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26352 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26353 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26354 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26355 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26356 ;;Total ram usage:        6 bytes
 26357 ;; Hardware stack levels used:    1
 26358 ;; Hardware stack levels required when called:    4
 26359 ;; This function calls:
 26360 ;;		Nothing
 26361 ;; This function is called by:
 26362 ;;		_marquee_speedy
 26363 ;;		_marquee
 26364 ;;		_led_roundabout
 26365 ;;		_led_curtain
 26366 ;;		_led_Parody
 26367 ;;		_menu_display_option
 26368 ;;		_locked_Main
 26369 ;;		_slot_Setup
 26370 ;;		_slot_Main
 26371 ;;		_sprintf
 26372 ;; This function uses a non-reentrant model
 26373 ;;
 26374                           
 26375                           
 26376                           ;psect for function ___lwmod
 26377  21F4                     ___lwmod:	
 26378                           
 26379                           ;incstack = 0
 26380                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 26381  21F4  0020               	movlb	0	; select bank0
 26382  21F5  082B               	movf	___lwmod@divisor,w
 26383  21F6  042C               	iorwf	___lwmod@divisor+1,w
 26384  21F7  1903               	btfsc	3,2
 26385  21F8  2A1C               	goto	l7128
 26386  21F9  01FA               	clrf	___lwmod@counter
 26387  21FA  0AFA               	incf	___lwmod@counter,f
 26388  21FB                     l7118:	
 26389  21FB  1BAC               	btfsc	___lwmod@divisor+1,7
 26390  21FC  2A07               	goto	l7120
 26391  21FD  3001               	movlw	1
 26392  21FE                     u4285:	
 26393  21FE  35AB               	lslf	___lwmod@divisor,f
 26394  21FF  0DAC               	rlf	___lwmod@divisor+1,f
 26395  2200  0B89               	decfsz	9,f
 26396  2201  29FE               	goto	u4285
 26397  2202  3001               	movlw	1
 26398  2203  00F9               	movwf	??___lwmod
 26399  2204  0879               	movf	??___lwmod,w
 26400  2205  07FA               	addwf	___lwmod@counter,f
 26401  2206  29FB               	goto	l7118
 26402  2207                     l7120:	
 26403  2207  082C               	movf	___lwmod@divisor+1,w
 26404  2208  022E               	subwf	___lwmod@dividend+1,w
 26405  2209  1D03               	skipz
 26406  220A  2A0D               	goto	u4305
 26407  220B  082B               	movf	___lwmod@divisor,w
 26408  220C  022D               	subwf	___lwmod@dividend,w
 26409  220D                     u4305:	
 26410  220D  1C03               	skipc
 26411  220E  2A13               	goto	l7124
 26412  220F  082B               	movf	___lwmod@divisor,w
 26413  2210  02AD               	subwf	___lwmod@dividend,f
 26414  2211  082C               	movf	___lwmod@divisor+1,w
 26415  2212  3BAE               	subwfb	___lwmod@dividend+1,f
 26416  2213                     l7124:	
 26417  2213  3001               	movlw	1
 26418  2214                     u4315:	
 26419  2214  36AC               	lsrf	___lwmod@divisor+1,f
 26420  2215  0CAB               	rrf	___lwmod@divisor,f
 26421  2216  0B89               	decfsz	9,f
 26422  2217  2A14               	goto	u4315
 26423  2218  3001               	movlw	1
 26424  2219  02FA               	subwf	___lwmod@counter,f
 26425  221A  1D03               	btfss	3,2
 26426  221B  2A07               	goto	l7120
 26427  221C                     l7128:	
 26428  221C  082E               	movf	___lwmod@dividend+1,w
 26429  221D  00AC               	movwf	?___lwmod+1
 26430  221E  082D               	movf	___lwmod@dividend,w
 26431  221F  00AB               	movwf	?___lwmod
 26432  2220  0008               	return
 26433  2221                     __end_of___lwmod:	
 26434                           
 26435                           	psect	text69
 26436  22E5                     __ptext69:	
 26437 ;; *************** function ___lwdiv *****************
 26438 ;; Defined at:
 26439 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwdiv.c"
 26440 ;; Parameters:    Size  Location     Type
 26441 ;;  divisor         2    1[COMMON] unsigned int 
 26442 ;;  dividend        2    3[COMMON] unsigned int 
 26443 ;; Auto vars:     Size  Location     Type
 26444 ;;  quotient        2    7[COMMON] unsigned int 
 26445 ;;  counter         1    6[COMMON] unsigned char 
 26446 ;; Return value:  Size  Location     Type
 26447 ;;                  2    1[COMMON] unsigned int 
 26448 ;; Registers used:
 26449 ;;		wreg, status,2, status,0
 26450 ;; Tracked objects:
 26451 ;;		On entry : 0/0
 26452 ;;		On exit  : 0/0
 26453 ;;		Unchanged: 0/0
 26454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26455 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26456 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26457 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26458 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26459 ;;Total ram usage:        8 bytes
 26460 ;; Hardware stack levels used:    1
 26461 ;; Hardware stack levels required when called:    4
 26462 ;; This function calls:
 26463 ;;		Nothing
 26464 ;; This function is called by:
 26465 ;;		_marquee_speedy
 26466 ;;		_marquee
 26467 ;;		_sprintf
 26468 ;; This function uses a non-reentrant model
 26469 ;;
 26470                           
 26471                           
 26472                           ;psect for function ___lwdiv
 26473  22E5                     ___lwdiv:	
 26474                           
 26475                           ;incstack = 0
 26476                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 26477  22E5  01F7               	clrf	___lwdiv@quotient
 26478  22E6  01F8               	clrf	___lwdiv@quotient+1
 26479  22E7  0871               	movf	___lwdiv@divisor,w
 26480  22E8  0472               	iorwf	___lwdiv@divisor+1,w
 26481  22E9  1903               	btfsc	3,2
 26482  22EA  2B14               	goto	l7106
 26483  22EB  01F6               	clrf	___lwdiv@counter
 26484  22EC  0AF6               	incf	___lwdiv@counter,f
 26485  22ED                     l7094:	
 26486  22ED  1BF2               	btfsc	___lwdiv@divisor+1,7
 26487  22EE  2AF9               	goto	l7096
 26488  22EF  3001               	movlw	1
 26489  22F0                     u4215:	
 26490  22F0  35F1               	lslf	___lwdiv@divisor,f
 26491  22F1  0DF2               	rlf	___lwdiv@divisor+1,f
 26492  22F2  0B89               	decfsz	9,f
 26493  22F3  2AF0               	goto	u4215
 26494  22F4  3001               	movlw	1
 26495  22F5  00F5               	movwf	??___lwdiv
 26496  22F6  0875               	movf	??___lwdiv,w
 26497  22F7  07F6               	addwf	___lwdiv@counter,f
 26498  22F8  2AED               	goto	l7094
 26499  22F9                     l7096:	
 26500  22F9  3001               	movlw	1
 26501  22FA                     u4235:	
 26502  22FA  35F7               	lslf	___lwdiv@quotient,f
 26503  22FB  0DF8               	rlf	___lwdiv@quotient+1,f
 26504  22FC  0B89               	decfsz	9,f
 26505  22FD  2AFA               	goto	u4235
 26506  22FE  0872               	movf	___lwdiv@divisor+1,w
 26507  22FF  0274               	subwf	___lwdiv@dividend+1,w
 26508  2300  1D03               	skipz
 26509  2301  2B04               	goto	u4245
 26510  2302  0871               	movf	___lwdiv@divisor,w
 26511  2303  0273               	subwf	___lwdiv@dividend,w
 26512  2304                     u4245:	
 26513  2304  1C03               	skipc
 26514  2305  2B0B               	goto	l7102
 26515  2306  0871               	movf	___lwdiv@divisor,w
 26516  2307  02F3               	subwf	___lwdiv@dividend,f
 26517  2308  0872               	movf	___lwdiv@divisor+1,w
 26518  2309  3BF4               	subwfb	___lwdiv@dividend+1,f
 26519  230A  1477               	bsf	___lwdiv@quotient,0
 26520  230B                     l7102:	
 26521  230B  3001               	movlw	1
 26522  230C                     u4255:	
 26523  230C  36F2               	lsrf	___lwdiv@divisor+1,f
 26524  230D  0CF1               	rrf	___lwdiv@divisor,f
 26525  230E  0B89               	decfsz	9,f
 26526  230F  2B0C               	goto	u4255
 26527  2310  3001               	movlw	1
 26528  2311  02F6               	subwf	___lwdiv@counter,f
 26529  2312  1D03               	btfss	3,2
 26530  2313  2AF9               	goto	l7096
 26531  2314                     l7106:	
 26532  2314  0878               	movf	___lwdiv@quotient+1,w
 26533  2315  00F2               	movwf	?___lwdiv+1
 26534  2316  0877               	movf	___lwdiv@quotient,w
 26535  2317  00F1               	movwf	?___lwdiv
 26536  2318  0008               	return
 26537  2319                     __end_of___lwdiv:	
 26538                           
 26539                           	psect	text70
 26540  2098                     __ptext70:	
 26541 ;; *************** function _TMR0_Read16bitTimer *****************
 26542 ;; Defined at:
 26543 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 26544 ;; Parameters:    Size  Location     Type
 26545 ;;		None
 26546 ;; Auto vars:     Size  Location     Type
 26547 ;;  readVal         2    8[COMMON] unsigned int 
 26548 ;;  readValHigh     1   11[COMMON] unsigned char 
 26549 ;;  readValLow      1   10[COMMON] unsigned char 
 26550 ;; Return value:  Size  Location     Type
 26551 ;;                  2    1[COMMON] unsigned int 
 26552 ;; Registers used:
 26553 ;;		wreg, status,2, status,0
 26554 ;; Tracked objects:
 26555 ;;		On entry : 0/0
 26556 ;;		On exit  : 0/0
 26557 ;;		Unchanged: 0/0
 26558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26559 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26560 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26561 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26562 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26563 ;;Total ram usage:       11 bytes
 26564 ;; Hardware stack levels used:    1
 26565 ;; Hardware stack levels required when called:    4
 26566 ;; This function calls:
 26567 ;;		Nothing
 26568 ;; This function is called by:
 26569 ;;		_scheduler_TaskRun
 26570 ;;		_schedulerExecute
 26571 ;; This function uses a non-reentrant model
 26572 ;;
 26573                           
 26574                           
 26575                           ;psect for function _TMR0_Read16bitTimer
 26576  2098                     _TMR0_Read16bitTimer:	
 26577                           
 26578                           ;tmr0.c: 111: uint16_t readVal;
 26579                           ;tmr0.c: 112: uint8_t readValLow;
 26580                           ;tmr0.c: 113: uint8_t readValHigh;
 26581                           ;tmr0.c: 115: readValLow = TMR0L;
 26582                           
 26583                           ;incstack = 0
 26584                           ; Regs used in _TMR0_Read16bitTimer: [wreg+status,2+status,0]
 26585  2098  0020               	movlb	0	; select bank0
 26586  2099  0815               	movf	21,w	;volatile
 26587  209A  00F3               	movwf	??_TMR0_Read16bitTimer
 26588  209B  0873               	movf	??_TMR0_Read16bitTimer,w
 26589  209C  00FA               	movwf	TMR0_Read16bitTimer@readValLow
 26590                           
 26591                           ;tmr0.c: 116: readValHigh = TMR0H;
 26592  209D  0816               	movf	22,w	;volatile
 26593  209E  00F3               	movwf	??_TMR0_Read16bitTimer
 26594  209F  0873               	movf	??_TMR0_Read16bitTimer,w
 26595  20A0  00FB               	movwf	TMR0_Read16bitTimer@readValHigh
 26596                           
 26597                           ;tmr0.c: 117: readVal = ((uint16_t)readValHigh << 8) + readValLow;
 26598  20A1  087A               	movf	TMR0_Read16bitTimer@readValLow,w
 26599  20A2  00F3               	movwf	??_TMR0_Read16bitTimer
 26600  20A3  01F4               	clrf	??_TMR0_Read16bitTimer+1
 26601  20A4  087B               	movf	TMR0_Read16bitTimer@readValHigh,w
 26602  20A5  00F5               	movwf	??_TMR0_Read16bitTimer+2
 26603  20A6  01F6               	clrf	??_TMR0_Read16bitTimer+3
 26604  20A7  0875               	movf	??_TMR0_Read16bitTimer+2,w
 26605  20A8  00F6               	movwf	??_TMR0_Read16bitTimer+3
 26606  20A9  01F5               	clrf	??_TMR0_Read16bitTimer+2
 26607  20AA  0873               	movf	??_TMR0_Read16bitTimer,w
 26608  20AB  0775               	addwf	??_TMR0_Read16bitTimer+2,w
 26609  20AC  00F8               	movwf	TMR0_Read16bitTimer@readVal
 26610  20AD  0874               	movf	??_TMR0_Read16bitTimer+1,w
 26611  20AE  3D76               	addwfc	??_TMR0_Read16bitTimer+3,w
 26612  20AF  00F9               	movwf	TMR0_Read16bitTimer@readVal+1
 26613                           
 26614                           ;tmr0.c: 119: return readVal;
 26615  20B0  0879               	movf	TMR0_Read16bitTimer@readVal+1,w
 26616  20B1  00F2               	movwf	?_TMR0_Read16bitTimer+1
 26617  20B2  0878               	movf	TMR0_Read16bitTimer@readVal,w
 26618  20B3  00F1               	movwf	?_TMR0_Read16bitTimer
 26619  20B4  0008               	return
 26620  20B5                     __end_of_TMR0_Read16bitTimer:	
 26621                           
 26622                           	psect	text71
 26623  27AB                     __ptext71:	
 26624 ;; *************** function _nullifyBadge_platformInit *****************
 26625 ;; Defined at:
 26626 ;;		line 13 in file "nullifyBadge.c"
 26627 ;; Parameters:    Size  Location     Type
 26628 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 26629 ;;		 -> badge_inst(18), 
 26630 ;; Auto vars:     Size  Location     Type
 26631 ;;  badge           1   12[BANK0 ] PTR struct t_nullifyBadg
 26632 ;;		 -> badge_inst(18), 
 26633 ;; Return value:  Size  Location     Type
 26634 ;;                  1    wreg      void 
 26635 ;; Registers used:
 26636 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26637 ;; Tracked objects:
 26638 ;;		On entry : 0/0
 26639 ;;		On exit  : 0/0
 26640 ;;		Unchanged: 0/0
 26641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26645 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26646 ;;Total ram usage:        1 bytes
 26647 ;; Hardware stack levels used:    1
 26648 ;; Hardware stack levels required when called:    9
 26649 ;; This function calls:
 26650 ;;		_OSCILLATOR_Initialize
 26651 ;;		_PIN_MANAGER_Initialize
 26652 ;;		_PWM1_Initialize
 26653 ;;		_PWM1_LoadDutyValue
 26654 ;;		_PWM2_Initialize
 26655 ;;		_PWM2_LoadDutyValue
 26656 ;;		_PWM5_Initialize
 26657 ;;		_PWM5_LoadDutyValue
 26658 ;;		_PWM6_Initialize
 26659 ;;		_PWM6_LoadDutyValue
 26660 ;;		_SPI1_Initialize
 26661 ;;		_SYSTEM_Initialize
 26662 ;;		_TMR0_Initialize
 26663 ;;		_TMR2_Initialize
 26664 ;;		_TMR4_Initialize
 26665 ;;		_displayL2_Initialize
 26666 ;; This function is called by:
 26667 ;;		_main
 26668 ;; This function uses a non-reentrant model
 26669 ;;
 26670                           
 26671                           
 26672                           ;psect for function _nullifyBadge_platformInit
 26673  27AB                     _nullifyBadge_platformInit:	
 26674                           
 26675                           ;incstack = 0
 26676                           ; Regs used in _nullifyBadge_platformInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26677                           ;nullifyBadge_platformInit@badge stored from wreg
 26678  27AB  0020               	movlb	0	; select bank0
 26679  27AC  00AC               	movwf	nullifyBadge_platformInit@badge
 26680                           
 26681                           ;nullifyBadge.c: 15: SYSTEM_Initialize();
 26682  27AD  31A1  210F  31A7   	fcall	_SYSTEM_Initialize
 26683                           
 26684                           ;nullifyBadge.c: 16: OSCILLATOR_Initialize();
 26685  27B0  31AE  2637  31A7   	fcall	_OSCILLATOR_Initialize
 26686                           
 26687                           ;nullifyBadge.c: 19: TMR0_Initialize();
 26688  27B3  31A0  20B5  31A7   	fcall	_TMR0_Initialize
 26689                           
 26690                           ;nullifyBadge.c: 20: TMR2_Initialize();
 26691  27B6  31AE  2641  31A7   	fcall	_TMR2_Initialize
 26692                           
 26693                           ;nullifyBadge.c: 21: TMR4_Initialize();
 26694  27B9  31AE  2676  31A7   	fcall	_TMR4_Initialize
 26695                           
 26696                           ;nullifyBadge.c: 23: PIN_MANAGER_Initialize();
 26697  27BC  31A7  2756  31A7   	fcall	_PIN_MANAGER_Initialize
 26698                           
 26699                           ;nullifyBadge.c: 24: PWM1_Initialize();
 26700  27BF  31AE  2660  31A7   	fcall	_PWM1_Initialize
 26701                           
 26702                           ;nullifyBadge.c: 26: PWM2_Initialize();
 26703  27C2  31AE  266B  31A7   	fcall	_PWM2_Initialize
 26704                           
 26705                           ;nullifyBadge.c: 27: PWM5_Initialize();
 26706  27C5  31AE  268C  31A7   	fcall	_PWM5_Initialize
 26707                           
 26708                           ;nullifyBadge.c: 28: PWM6_Initialize();
 26709  27C8  31AE  2698  31A7   	fcall	_PWM6_Initialize
 26710                           
 26711                           ;nullifyBadge.c: 29: SPI1_Initialize();
 26712  27CB  31AE  2615  31A7   	fcall	_SPI1_Initialize
 26713                           
 26714                           ;nullifyBadge.c: 32: PWM1_LoadDutyValue(128);
 26715  27CE  3080               	movlw	128
 26716  27CF  00F1               	movwf	PWM1_LoadDutyValue@dutyValue
 26717  27D0  3000               	movlw	0
 26718  27D1  00F2               	movwf	PWM1_LoadDutyValue@dutyValue+1
 26719  27D2  31AF  2777  31A7   	fcall	_PWM1_LoadDutyValue
 26720                           
 26721                           ;nullifyBadge.c: 44: do { LATBbits.LATB7 = 1; } while(0);
 26722  27D5  0022               	movlb	2	; select bank2
 26723  27D6  178D               	bsf	13,7	;volatile
 26724                           
 26725                           ;nullifyBadge.c: 45: PWM2_LoadDutyValue(192);
 26726  27D7  30C0               	movlw	192
 26727  27D8  00F1               	movwf	PWM2_LoadDutyValue@dutyValue
 26728  27D9  3000               	movlw	0
 26729  27DA  00F2               	movwf	PWM2_LoadDutyValue@dutyValue+1
 26730  27DB  31AF  278D  31A7   	fcall	_PWM2_LoadDutyValue
 26731                           
 26732                           ;nullifyBadge.c: 50: PWM5_LoadDutyValue(gamma_table_256x1k[128]);
 26733  27DE  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 26734  27DF  0084               	movwf	4
 26735  27E0  3091               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 26736  27E1  0085               	movwf	5
 26737  27E2  3F00               	moviw [0]fsr0
 26738  27E3  00F1               	movwf	PWM5_LoadDutyValue@dutyValue
 26739  27E4  3F01               	moviw [1]fsr0
 26740  27E5  00F2               	movwf	PWM5_LoadDutyValue@dutyValue+1
 26741  27E6  31AF  27A3  31A7   	fcall	_PWM5_LoadDutyValue
 26742                           
 26743                           ;nullifyBadge.c: 51: PWM6_LoadDutyValue(gamma_table_256x1k[128]);
 26744  27E9  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 26745  27EA  0084               	movwf	4
 26746  27EB  3091               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 26747  27EC  0085               	movwf	5
 26748  27ED  3F00               	moviw [0]fsr0
 26749  27EE  00F1               	movwf	PWM6_LoadDutyValue@dutyValue
 26750  27EF  3F01               	moviw [1]fsr0
 26751  27F0  00F2               	movwf	PWM6_LoadDutyValue@dutyValue+1
 26752  27F1  31AF  27B9  31A7   	fcall	_PWM6_LoadDutyValue
 26753                           
 26754                           ;nullifyBadge.c: 54: displayL2_Initialize(&badge->display);
 26755  27F4  0020               	movlb	0	; select bank0
 26756  27F5  082C               	movf	nullifyBadge_platformInit@badge,w
 26757  27F6  31A1  2155         	fcall	_displayL2_Initialize
 26758                           
 26759                           ;nullifyBadge.c: 57: badge->registeredHw = 0x0;
 26760  27F8  0020               	movlb	0	; select bank0
 26761  27F9  082C               	movf	nullifyBadge_platformInit@badge,w
 26762  27FA  3E11               	addlw	17
 26763  27FB  0086               	movwf	6
 26764  27FC  3001               	movlw	1	; select bank2/3
 26765  27FD  0087               	movwf	7
 26766  27FE  0181               	clrf	1
 26767  27FF  0008               	return
 26768  2800                     __end_of_nullifyBadge_platformInit:	
 26769                           
 26770                           	psect	text72
 26771  2155                     __ptext72:	
 26772 ;; *************** function _displayL2_Initialize *****************
 26773 ;; Defined at:
 26774 ;;		line 12 in file "nullifyBadge_displayL2.c"
 26775 ;; Parameters:    Size  Location     Type
 26776 ;;  display         1    wreg     PTR struct t_nullifyDisp
 26777 ;;		 -> badge_inst(18), 
 26778 ;; Auto vars:     Size  Location     Type
 26779 ;;  display         1   11[BANK0 ] PTR struct t_nullifyDisp
 26780 ;;		 -> badge_inst(18), 
 26781 ;; Return value:  Size  Location     Type
 26782 ;;                  1    wreg      void 
 26783 ;; Registers used:
 26784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26785 ;; Tracked objects:
 26786 ;;		On entry : 0/0
 26787 ;;		On exit  : 0/0
 26788 ;;		Unchanged: 0/0
 26789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26793 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26794 ;;Total ram usage:        1 bytes
 26795 ;; Hardware stack levels used:    1
 26796 ;; Hardware stack levels required when called:    8
 26797 ;; This function calls:
 26798 ;;		_displayL1_Initialize
 26799 ;;		_memset
 26800 ;; This function is called by:
 26801 ;;		_nullifyBadge_platformInit
 26802 ;; This function uses a non-reentrant model
 26803 ;;
 26804                           
 26805                           
 26806                           ;psect for function _displayL2_Initialize
 26807  2155                     _displayL2_Initialize:	
 26808                           
 26809                           ;incstack = 0
 26810                           ; Regs used in _displayL2_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 26811                           ;displayL2_Initialize@display stored from wreg
 26812  2155  0020               	movlb	0	; select bank0
 26813  2156  00AB               	movwf	displayL2_Initialize@display
 26814                           
 26815                           ;nullifyBadge_displayL2.c: 13: displayL1_Initialize(&display->display_l1);
 26816  2157  082B               	movf	displayL2_Initialize@display,w
 26817  2158  3E07               	addlw	7
 26818  2159  31AF  273D  31A1   	fcall	_displayL1_Initialize
 26819                           
 26820                           ;nullifyBadge_displayL2.c: 14: memset(display->charVect, ' ', sizeof(display->charVect))
      +                          ;
 26821  215C  0020               	movlb	0	; select bank0
 26822  215D  082B               	movf	displayL2_Initialize@display,w
 26823  215E  00F1               	movwf	memset@p1
 26824  215F  3001               	movlw	1
 26825  2160  00F2               	movwf	memset@p1+1
 26826  2161  3020               	movlw	32
 26827  2162  00F3               	movwf	memset@c
 26828  2163  3000               	movlw	0
 26829  2164  00F4               	movwf	memset@c+1
 26830  2165  3004               	movlw	4
 26831  2166  00F5               	movwf	memset@n
 26832  2167  3000               	movlw	0
 26833  2168  00F6               	movwf	memset@n+1
 26834  2169  31AF  27CF         	fcall	_memset
 26835                           
 26836                           ;nullifyBadge_displayL2.c: 15: display->dpVect = 0;
 26837  216B  0020               	movlb	0	; select bank0
 26838  216C  082B               	movf	displayL2_Initialize@display,w
 26839  216D  3E04               	addlw	4
 26840  216E  0086               	movwf	6
 26841  216F  3001               	movlw	1	; select bank2/3
 26842  2170  0087               	movwf	7
 26843  2171  0181               	clrf	1
 26844                           
 26845                           ;nullifyBadge_displayL2.c: 16: display->ledVect = 0;
 26846  2172  082B               	movf	displayL2_Initialize@display,w
 26847  2173  3E05               	addlw	5
 26848  2174  0086               	movwf	6
 26849  2175  3001               	movlw	1	; select bank2/3
 26850  2176  0087               	movwf	7
 26851  2177  3000               	movlw	0
 26852  2178  3FC0               	movwi [0]fsr1
 26853  2179  3FC1               	movwi [1]fsr1
 26854  217A  0008               	return
 26855  217B                     __end_of_displayL2_Initialize:	
 26856                           
 26857                           	psect	text73
 26858  2F3D                     __ptext73:	
 26859 ;; *************** function _displayL1_Initialize *****************
 26860 ;; Defined at:
 26861 ;;		line 13 in file "nullifyBadge_displayL1.c"
 26862 ;; Parameters:    Size  Location     Type
 26863 ;;  display         1    wreg     PTR struct t_nullifyDisp
 26864 ;;		 -> badge_inst(18), 
 26865 ;; Auto vars:     Size  Location     Type
 26866 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 26867 ;;		 -> badge_inst(18), 
 26868 ;; Return value:  Size  Location     Type
 26869 ;;                  1    wreg      void 
 26870 ;; Registers used:
 26871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26872 ;; Tracked objects:
 26873 ;;		On entry : 0/0
 26874 ;;		On exit  : 0/0
 26875 ;;		Unchanged: 0/0
 26876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26880 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26881 ;;Total ram usage:        1 bytes
 26882 ;; Hardware stack levels used:    1
 26883 ;; Hardware stack levels required when called:    7
 26884 ;; This function calls:
 26885 ;;		_displayL1_Update
 26886 ;;		_memset
 26887 ;; This function is called by:
 26888 ;;		_displayL2_Initialize
 26889 ;; This function uses a non-reentrant model
 26890 ;;
 26891                           
 26892                           
 26893                           ;psect for function _displayL1_Initialize
 26894  2F3D                     _displayL1_Initialize:	
 26895                           
 26896                           ;incstack = 0
 26897                           ; Regs used in _displayL1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 26898                           ;displayL1_Initialize@display stored from wreg
 26899  2F3D  00FB               	movwf	displayL1_Initialize@display
 26900                           
 26901                           ;nullifyBadge_displayL1.c: 14: memset(display->displayVect, 0, sizeof(struct t_nullifyDi
      +                          splay_l1));
 26902  2F3E  087B               	movf	displayL1_Initialize@display,w
 26903  2F3F  00F1               	movwf	memset@p1
 26904  2F40  3001               	movlw	1
 26905  2F41  00F2               	movwf	memset@p1+1
 26906  2F42  3000               	movlw	0
 26907  2F43  00F3               	movwf	memset@c
 26908  2F44  00F4               	movwf	memset@c+1
 26909  2F45  300A               	movlw	10
 26910  2F46  00F5               	movwf	memset@n
 26911  2F47  3000               	movlw	0
 26912  2F48  00F6               	movwf	memset@n+1
 26913  2F49  31AF  27CF  31AF   	fcall	_memset
 26914                           
 26915                           ;nullifyBadge_displayL1.c: 15: displayL1_Update(display);
 26916  2F4C  087B               	movf	displayL1_Initialize@display,w
 26917  2F4D  31AE  26F8         	fcall	_displayL1_Update
 26918  2F4F  0008               	return
 26919  2F50                     __end_of_displayL1_Initialize:	
 26920                           
 26921                           	psect	text74
 26922  2FCF                     __ptext74:	
 26923 ;; *************** function _memset *****************
 26924 ;; Defined at:
 26925 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/memset.c"
 26926 ;; Parameters:    Size  Location     Type
 26927 ;;  p1              2    1[COMMON] PTR void 
 26928 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 26929 ;;		 -> flashy_TaskData(30), badge_inst(18), NULL(0), 
 26930 ;;  c               2    3[COMMON] int 
 26931 ;;  n               2    5[COMMON] unsigned int 
 26932 ;; Auto vars:     Size  Location     Type
 26933 ;;  p               2    7[COMMON] PTR unsigned char 
 26934 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 26935 ;;		 -> flashy_TaskData(30), badge_inst(18), NULL(0), 
 26936 ;; Return value:  Size  Location     Type
 26937 ;;                  2    1[COMMON] PTR void 
 26938 ;; Registers used:
 26939 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26940 ;; Tracked objects:
 26941 ;;		On entry : 0/0
 26942 ;;		On exit  : 0/0
 26943 ;;		Unchanged: 0/0
 26944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26945 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26946 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26948 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26949 ;;Total ram usage:        8 bytes
 26950 ;; Hardware stack levels used:    1
 26951 ;; Hardware stack levels required when called:    4
 26952 ;; This function calls:
 26953 ;;		Nothing
 26954 ;; This function is called by:
 26955 ;;		_displayL1_Initialize
 26956 ;;		_displayL2_Initialize
 26957 ;;		_slot_Setup
 26958 ;;		_slot_Main
 26959 ;; This function uses a non-reentrant model
 26960 ;;
 26961                           
 26962                           
 26963                           ;psect for function _memset
 26964  2FCF                     _memset:	
 26965                           
 26966                           ;incstack = 0
 26967                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 26968  2FCF  0872               	movf	memset@p1+1,w
 26969  2FD0  00F8               	movwf	memset@p+1
 26970  2FD1  0871               	movf	memset@p1,w
 26971  2FD2  00F7               	movwf	memset@p
 26972  2FD3                     l7194:	
 26973  2FD3  3001               	movlw	1
 26974  2FD4  02F5               	subwf	memset@n,f
 26975  2FD5  3000               	movlw	0
 26976  2FD6  3BF6               	subwfb	memset@n+1,f
 26977  2FD7  0A75               	incf	memset@n,w
 26978  2FD8  1903               	btfsc	3,2
 26979  2FD9  0A76               	incf	memset@n+1,w
 26980  2FDA  1903               	btfsc	3,2
 26981  2FDB  0008               	return
 26982  2FDC  0877               	movf	memset@p,w
 26983  2FDD  0086               	movwf	6
 26984  2FDE  0878               	movf	memset@p+1,w
 26985  2FDF  0087               	movwf	7
 26986  2FE0  0873               	movf	memset@c,w
 26987  2FE1  0081               	movwf	1
 26988  2FE2  3001               	movlw	1
 26989  2FE3  07F7               	addwf	memset@p,f
 26990  2FE4  3000               	movlw	0
 26991  2FE5  3DF8               	addwfc	memset@p+1,f
 26992  2FE6  2FD3               	goto	l7194
 26993  2FE7                     __end_of_memset:	
 26994                           ;	Return value of _memset is never used
 26995                           
 26996                           
 26997                           	psect	text75
 26998  2EF8                     __ptext75:	
 26999 ;; *************** function _displayL1_Update *****************
 27000 ;; Defined at:
 27001 ;;		line 97 in file "nullifyBadge_displayL1.c"
 27002 ;; Parameters:    Size  Location     Type
 27003 ;;  display         1    wreg     PTR struct t_nullifyDisp
 27004 ;;		 -> badge_inst(18), 
 27005 ;; Auto vars:     Size  Location     Type
 27006 ;;  display         1   10[BANK0 ] PTR struct t_nullifyDisp
 27007 ;;		 -> badge_inst(18), 
 27008 ;;  tmpRxBuf       10    0[BANK0 ] unsigned char [10]
 27009 ;; Return value:  Size  Location     Type
 27010 ;;                  1    wreg      void 
 27011 ;; Registers used:
 27012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27013 ;; Tracked objects:
 27014 ;;		On entry : 0/0
 27015 ;;		On exit  : 0/0
 27016 ;;		Unchanged: 0/0
 27017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27019 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27020 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27021 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27022 ;;Total ram usage:       13 bytes
 27023 ;; Hardware stack levels used:    1
 27024 ;; Hardware stack levels required when called:    6
 27025 ;; This function calls:
 27026 ;;		_SPI1_Exchange8bitBuffer
 27027 ;; This function is called by:
 27028 ;;		_displayL1_Initialize
 27029 ;;		_displayL2_ForceUpdate
 27030 ;;		_displayL2_EraseSegDisplay
 27031 ;;		_displayL2_SetUserLeds
 27032 ;;		_displayL2_ClrUserLeds
 27033 ;;		_displayL2_PrintChar
 27034 ;;		_displayL2_PrintStr
 27035 ;; This function uses a non-reentrant model
 27036 ;;
 27037                           
 27038                           
 27039                           ;psect for function _displayL1_Update
 27040  2EF8                     _displayL1_Update:	
 27041                           
 27042                           ;incstack = 0
 27043                           ; Regs used in _displayL1_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 27044                           ;displayL1_Update@display stored from wreg
 27045  2EF8  0020               	movlb	0	; select bank0
 27046  2EF9  00AA               	movwf	displayL1_Update@display
 27047                           
 27048                           ;nullifyBadge_displayL1.c: 98: u8 tmpRxBuf[10];
 27049                           ;nullifyBadge_displayL1.c: 100: SPI1_Exchange8bitBuffer(display->displayVect, 10, tmpRxB
      +                          uf);
 27050  2EFA  300A               	movlw	10
 27051  2EFB  00F9               	movwf	??_displayL1_Update
 27052  2EFC  0879               	movf	??_displayL1_Update,w
 27053  2EFD  00F2               	movwf	SPI1_Exchange8bitBuffer@bufLen
 27054  2EFE  3020               	movlw	(low (displayL1_Update@tmpRxBuf| 0))& (0+255)
 27055  2EFF  00FA               	movwf	??_displayL1_Update+1
 27056  2F00  087A               	movf	??_displayL1_Update+1,w
 27057  2F01  00F3               	movwf	SPI1_Exchange8bitBuffer@dataOut
 27058  2F02  082A               	movf	displayL1_Update@display,w
 27059  2F03  31A6  2662         	fcall	_SPI1_Exchange8bitBuffer
 27060                           
 27061                           ;nullifyBadge_displayL1.c: 101: do { LATCbits.LATC7 = 1; } while(0);
 27062  2F05  0022               	movlb	2	; select bank2
 27063  2F06  178E               	bsf	14,7	;volatile
 27064                           
 27065                           ;nullifyBadge_displayL1.c: 102: do { LATCbits.LATC7 = 0; } while(0);
 27066  2F07  138E               	bcf	14,7	;volatile
 27067  2F08  0008               	return
 27068  2F09                     __end_of_displayL1_Update:	
 27069                           
 27070                           	psect	text76
 27071  2662                     __ptext76:	
 27072 ;; *************** function _SPI1_Exchange8bitBuffer *****************
 27073 ;; Defined at:
 27074 ;;		line 91 in file "mcc_generated_files/spi1.c"
 27075 ;; Parameters:    Size  Location     Type
 27076 ;;  dataIn          1    wreg     PTR unsigned char 
 27077 ;;		 -> badge_inst(18), 
 27078 ;;  bufLen          1    2[COMMON] unsigned char 
 27079 ;;  dataOut         1    3[COMMON] PTR unsigned char 
 27080 ;;		 -> displayL1_Update@tmpRxBuf(10), 
 27081 ;; Auto vars:     Size  Location     Type
 27082 ;;  dataIn          1    7[COMMON] PTR unsigned char 
 27083 ;;		 -> badge_inst(18), 
 27084 ;;  bytesWritten    1    8[COMMON] unsigned char 
 27085 ;; Return value:  Size  Location     Type
 27086 ;;                  1    wreg      unsigned char 
 27087 ;; Registers used:
 27088 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27089 ;; Tracked objects:
 27090 ;;		On entry : 0/0
 27091 ;;		On exit  : 0/0
 27092 ;;		Unchanged: 0/0
 27093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27094 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27095 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27096 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27097 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27098 ;;Total ram usage:        7 bytes
 27099 ;; Hardware stack levels used:    1
 27100 ;; Hardware stack levels required when called:    5
 27101 ;; This function calls:
 27102 ;;		_SPI1_Exchange8bit
 27103 ;; This function is called by:
 27104 ;;		_displayL1_Update
 27105 ;; This function uses a non-reentrant model
 27106 ;;
 27107                           
 27108                           
 27109                           ;psect for function _SPI1_Exchange8bitBuffer
 27110  2662                     _SPI1_Exchange8bitBuffer:	
 27111                           
 27112                           ;incstack = 0
 27113                           ; Regs used in _SPI1_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 27114                           ;SPI1_Exchange8bitBuffer@dataIn stored from wreg
 27115  2662  00F7               	movwf	SPI1_Exchange8bitBuffer@dataIn
 27116                           
 27117                           ;spi1.c: 93: uint8_t bytesWritten = 0;
 27118  2663  01F8               	clrf	SPI1_Exchange8bitBuffer@bytesWritten
 27119                           
 27120                           ;spi1.c: 95: if(bufLen != 0)
 27121  2664  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 27122  2665  1903               	btfsc	3,2
 27123  2666  0008               	return
 27124                           
 27125                           ;spi1.c: 96: {
 27126                           ;spi1.c: 97: if(dataIn != (0))
 27127  2667  0877               	movf	SPI1_Exchange8bitBuffer@dataIn,w
 27128  2668  1D03               	btfss	3,2
 27129  2669  2E92               	goto	l6940
 27130  266A  2E97               	goto	l6942
 27131  266B                     l6932:	
 27132                           ;spi1.c: 98: {
 27133                           ;spi1.c: 99: while(bytesWritten < bufLen)
 27134                           
 27135                           
 27136                           ;spi1.c: 100: {
 27137                           ;spi1.c: 101: if(dataOut == (0))
 27138  266B  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 27139  266C  1D03               	btfss	3,2
 27140  266D  2E7A               	goto	l6936
 27141                           
 27142                           ;spi1.c: 102: {
 27143                           ;spi1.c: 103: SPI1_Exchange8bit(dataIn[bytesWritten]);
 27144  266E  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 27145  266F  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 27146  2670  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 27147  2671  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 27148  2672  0086               	movwf	6
 27149  2673  3001               	movlw	1	; select bank2/3
 27150  2674  0087               	movwf	7
 27151  2675  0801               	movf	1,w
 27152  2676  31AE  2625  31A6   	fcall	_SPI1_Exchange8bit
 27153                           
 27154                           ;spi1.c: 104: }
 27155  2679  2E8E               	goto	l6938
 27156  267A                     l6936:	
 27157                           
 27158                           ;spi1.c: 105: else
 27159                           ;spi1.c: 106: {
 27160                           ;spi1.c: 107: dataOut[bytesWritten] = SPI1_Exchange8bit(dataIn[bytesWritten]);
 27161  267A  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 27162  267B  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 27163  267C  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 27164  267D  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 27165  267E  0086               	movwf	6
 27166  267F  3001               	movlw	1	; select bank2/3
 27167  2680  0087               	movwf	7
 27168  2681  0801               	movf	1,w
 27169  2682  31AE  2625  31A6   	fcall	_SPI1_Exchange8bit
 27170  2685  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 27171  2686  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 27172  2687  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 27173  2688  00F6               	movwf	??_SPI1_Exchange8bitBuffer+2
 27174  2689  0876               	movf	??_SPI1_Exchange8bitBuffer+2,w
 27175  268A  0086               	movwf	6
 27176  268B  0187               	clrf	7
 27177  268C  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 27178  268D  0081               	movwf	1
 27179  268E                     l6938:	
 27180                           
 27181                           ;spi1.c: 108: }
 27182                           ;spi1.c: 110: bytesWritten++;
 27183  268E  3001               	movlw	1
 27184  268F  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 27185  2690  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 27186  2691  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 27187  2692                     l6940:	
 27188  2692  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 27189  2693  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 27190  2694  1803               	btfsc	3,0
 27191  2695  0008               	return
 27192  2696  2E6B               	goto	l6932
 27193  2697                     l6942:	
 27194                           ;spi1.c: 111: }
 27195                           ;spi1.c: 112: }
 27196                           
 27197                           
 27198                           ;spi1.c: 113: else
 27199                           ;spi1.c: 114: {
 27200                           ;spi1.c: 115: if(dataOut != (0))
 27201  2697  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 27202  2698  1903               	btfsc	3,2
 27203  2699  0008               	return
 27204  269A                     l6950:	
 27205  269A  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 27206  269B  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 27207  269C  1803               	btfsc	3,0
 27208  269D  0008               	return
 27209                           
 27210                           ;spi1.c: 118: {
 27211                           ;spi1.c: 119: dataOut[bytesWritten] = SPI1_Exchange8bit(0x0);
 27212                           
 27213                           ;spi1.c: 116: {
 27214                           ;spi1.c: 117: while(bytesWritten < bufLen )
 27215  269E  3000               	movlw	0
 27216  269F  31AE  2625  31A6   	fcall	_SPI1_Exchange8bit
 27217  26A2  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 27218  26A3  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 27219  26A4  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 27220  26A5  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 27221  26A6  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 27222  26A7  0086               	movwf	6
 27223  26A8  0187               	clrf	7
 27224  26A9  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 27225  26AA  0081               	movwf	1
 27226                           
 27227                           ;spi1.c: 121: bytesWritten++;
 27228  26AB  3001               	movlw	1
 27229  26AC  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 27230  26AD  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 27231  26AE  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 27232  26AF  2E9A               	goto	l6950
 27233  26B0                     __end_of_SPI1_Exchange8bitBuffer:	
 27234                           ;spi1.c: 122: }
 27235                           ;spi1.c: 123: }
 27236                           ;spi1.c: 124: }
 27237                           ;spi1.c: 125: }
 27238                           ;spi1.c: 127: return bytesWritten;
 27239                           ;	Return value of _SPI1_Exchange8bitBuffer is never used
 27240                           
 27241                           
 27242                           	psect	text77
 27243  2E25                     __ptext77:	
 27244 ;; *************** function _SPI1_Exchange8bit *****************
 27245 ;; Defined at:
 27246 ;;		line 77 in file "mcc_generated_files/spi1.c"
 27247 ;; Parameters:    Size  Location     Type
 27248 ;;  data            1    wreg     unsigned char 
 27249 ;; Auto vars:     Size  Location     Type
 27250 ;;  data            1    1[COMMON] unsigned char 
 27251 ;; Return value:  Size  Location     Type
 27252 ;;                  1    wreg      unsigned char 
 27253 ;; Registers used:
 27254 ;;		wreg
 27255 ;; Tracked objects:
 27256 ;;		On entry : 0/0
 27257 ;;		On exit  : 0/0
 27258 ;;		Unchanged: 0/0
 27259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27261 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27263 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27264 ;;Total ram usage:        1 bytes
 27265 ;; Hardware stack levels used:    1
 27266 ;; Hardware stack levels required when called:    4
 27267 ;; This function calls:
 27268 ;;		Nothing
 27269 ;; This function is called by:
 27270 ;;		_SPI1_Exchange8bitBuffer
 27271 ;; This function uses a non-reentrant model
 27272 ;;
 27273                           
 27274                           
 27275                           ;psect for function _SPI1_Exchange8bit
 27276  2E25                     _SPI1_Exchange8bit:	
 27277                           
 27278                           ;incstack = 0
 27279                           ; Regs used in _SPI1_Exchange8bit: [wreg]
 27280                           ;SPI1_Exchange8bit@data stored from wreg
 27281  2E25  00F1               	movwf	SPI1_Exchange8bit@data
 27282                           
 27283                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
 27284  2E26  0024               	movlb	4	; select bank4
 27285  2E27  1395               	bcf	21,7	;volatile
 27286                           
 27287                           ;spi1.c: 82: SSP1BUF = data;
 27288  2E28  0871               	movf	SPI1_Exchange8bit@data,w
 27289  2E29  0091               	movwf	17	;volatile
 27290  2E2A                     l18:	
 27291                           ;spi1.c: 85: {
 27292                           
 27293                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
 27294                           
 27295  2E2A  1C14               	btfss	20,0	;volatile
 27296  2E2B  2E2A               	goto	l18
 27297                           
 27298                           ;spi1.c: 86: }
 27299                           ;spi1.c: 88: return (SSP1BUF);
 27300  2E2C  0811               	movf	17,w	;volatile
 27301  2E2D  0008               	return
 27302  2E2E                     __end_of_SPI1_Exchange8bit:	
 27303                           
 27304                           	psect	text78
 27305  210F                     __ptext78:	
 27306 ;; *************** function _SYSTEM_Initialize *****************
 27307 ;; Defined at:
 27308 ;;		line 76 in file "mcc_generated_files/mcc.c"
 27309 ;; Parameters:    Size  Location     Type
 27310 ;;		None
 27311 ;; Auto vars:     Size  Location     Type
 27312 ;;		None
 27313 ;; Return value:  Size  Location     Type
 27314 ;;                  1    wreg      void 
 27315 ;; Registers used:
 27316 ;;		wreg, status,2, status,0, pclath, cstack
 27317 ;; Tracked objects:
 27318 ;;		On entry : 0/0
 27319 ;;		On exit  : 0/0
 27320 ;;		Unchanged: 0/0
 27321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27326 ;;Total ram usage:        0 bytes
 27327 ;; Hardware stack levels used:    1
 27328 ;; Hardware stack levels required when called:    6
 27329 ;; This function calls:
 27330 ;;		_OSCILLATOR_Initialize
 27331 ;;		_PIN_MANAGER_Initialize
 27332 ;;		_PWM1_Initialize
 27333 ;;		_PWM2_Initialize
 27334 ;;		_PWM5_Initialize
 27335 ;;		_PWM6_Initialize
 27336 ;;		_SPI1_Initialize
 27337 ;;		_TMR0_Initialize
 27338 ;;		_TMR2_Initialize
 27339 ;;		_TMR4_Initialize
 27340 ;;		_WDT_Initialize
 27341 ;; This function is called by:
 27342 ;;		_nullifyBadge_platformInit
 27343 ;; This function uses a non-reentrant model
 27344 ;;
 27345                           
 27346                           
 27347                           ;psect for function _SYSTEM_Initialize
 27348  210F                     _SYSTEM_Initialize:	
 27349                           
 27350                           ;mcc.c: 79: PIN_MANAGER_Initialize();
 27351                           
 27352                           ;incstack = 0
 27353                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 27354  210F  31A7  2756  31A1   	fcall	_PIN_MANAGER_Initialize
 27355                           
 27356                           ;mcc.c: 80: OSCILLATOR_Initialize();
 27357  2112  31AE  2637  31A1   	fcall	_OSCILLATOR_Initialize
 27358                           
 27359                           ;mcc.c: 81: WDT_Initialize();
 27360  2115  31AD  25EE  31A1   	fcall	_WDT_Initialize
 27361                           
 27362                           ;mcc.c: 82: SPI1_Initialize();
 27363  2118  31AE  2615  31A1   	fcall	_SPI1_Initialize
 27364                           
 27365                           ;mcc.c: 83: PWM6_Initialize();
 27366  211B  31AE  2698  31A1   	fcall	_PWM6_Initialize
 27367                           
 27368                           ;mcc.c: 84: PWM1_Initialize();
 27369  211E  31AE  2660  31A1   	fcall	_PWM1_Initialize
 27370                           
 27371                           ;mcc.c: 85: PWM2_Initialize();
 27372  2121  31AE  266B  31A1   	fcall	_PWM2_Initialize
 27373                           
 27374                           ;mcc.c: 86: TMR4_Initialize();
 27375  2124  31AE  2676  31A1   	fcall	_TMR4_Initialize
 27376                           
 27377                           ;mcc.c: 87: TMR2_Initialize();
 27378  2127  31AE  2641  31A1   	fcall	_TMR2_Initialize
 27379                           
 27380                           ;mcc.c: 88: PWM5_Initialize();
 27381  212A  31AE  268C  31A1   	fcall	_PWM5_Initialize
 27382                           
 27383                           ;mcc.c: 89: TMR0_Initialize();
 27384  212D  31A0  20B5         	fcall	_TMR0_Initialize
 27385  212F  0008               	return
 27386  2130                     __end_of_SYSTEM_Initialize:	
 27387                           
 27388                           	psect	text79
 27389  2DEE                     __ptext79:	
 27390 ;; *************** function _WDT_Initialize *****************
 27391 ;; Defined at:
 27392 ;;		line 110 in file "mcc_generated_files/mcc.c"
 27393 ;; Parameters:    Size  Location     Type
 27394 ;;		None
 27395 ;; Auto vars:     Size  Location     Type
 27396 ;;		None
 27397 ;; Return value:  Size  Location     Type
 27398 ;;                  1    wreg      void 
 27399 ;; Registers used:
 27400 ;;		wreg
 27401 ;; Tracked objects:
 27402 ;;		On entry : 0/0
 27403 ;;		On exit  : 0/0
 27404 ;;		Unchanged: 0/0
 27405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27410 ;;Total ram usage:        0 bytes
 27411 ;; Hardware stack levels used:    1
 27412 ;; Hardware stack levels required when called:    4
 27413 ;; This function calls:
 27414 ;;		Nothing
 27415 ;; This function is called by:
 27416 ;;		_SYSTEM_Initialize
 27417 ;; This function uses a non-reentrant model
 27418 ;;
 27419                           
 27420                           
 27421                           ;psect for function _WDT_Initialize
 27422  2DEE                     _WDT_Initialize:	
 27423                           
 27424                           ;mcc.c: 113: WDTCON = 0x16;
 27425                           
 27426                           ;incstack = 0
 27427                           ; Regs used in _WDT_Initialize: [wreg]
 27428  2DEE  3016               	movlw	22
 27429  2DEF  0021               	movlb	1	; select bank1
 27430  2DF0  0097               	movwf	23	;volatile
 27431  2DF1  0008               	return
 27432  2DF2                     __end_of_WDT_Initialize:	
 27433                           
 27434                           	psect	text80
 27435  2E76                     __ptext80:	
 27436 ;; *************** function _TMR4_Initialize *****************
 27437 ;; Defined at:
 27438 ;;		line 63 in file "mcc_generated_files/tmr4.c"
 27439 ;; Parameters:    Size  Location     Type
 27440 ;;		None
 27441 ;; Auto vars:     Size  Location     Type
 27442 ;;		None
 27443 ;; Return value:  Size  Location     Type
 27444 ;;                  1    wreg      void 
 27445 ;; Registers used:
 27446 ;;		wreg, status,2, status,0, pclath, cstack
 27447 ;; Tracked objects:
 27448 ;;		On entry : 0/0
 27449 ;;		On exit  : 0/0
 27450 ;;		Unchanged: 0/0
 27451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27456 ;;Total ram usage:        0 bytes
 27457 ;; Hardware stack levels used:    1
 27458 ;; Hardware stack levels required when called:    5
 27459 ;; This function calls:
 27460 ;;		_TMR4_StartTimer
 27461 ;; This function is called by:
 27462 ;;		_SYSTEM_Initialize
 27463 ;;		_nullifyBadge_platformInit
 27464 ;; This function uses a non-reentrant model
 27465 ;;
 27466                           
 27467                           
 27468                           ;psect for function _TMR4_Initialize
 27469  2E76                     _TMR4_Initialize:	
 27470                           
 27471                           ;tmr4.c: 68: T4CON = 0x7B;
 27472                           
 27473                           ;incstack = 0
 27474                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 27475  2E76  307B               	movlw	123
 27476  2E77  0028               	movlb	8	; select bank8
 27477  2E78  0097               	movwf	23	;volatile
 27478                           
 27479                           ;tmr4.c: 71: PR4 = 0xFF;
 27480  2E79  30FF               	movlw	255
 27481  2E7A  0096               	movwf	22	;volatile
 27482                           
 27483                           ;tmr4.c: 74: TMR4 = 0x00;
 27484  2E7B  0195               	clrf	21	;volatile
 27485                           
 27486                           ;tmr4.c: 77: PIR2bits.TMR4IF = 0;
 27487  2E7C  0020               	movlb	0	; select bank0
 27488  2E7D  1092               	bcf	18,1	;volatile
 27489                           
 27490                           ;tmr4.c: 80: TMR4_StartTimer();
 27491  2E7E  31AD  25E5         	fcall	_TMR4_StartTimer
 27492  2E80  0008               	return
 27493  2E81                     __end_of_TMR4_Initialize:	
 27494                           
 27495                           	psect	text81
 27496  2DE5                     __ptext81:	
 27497 ;; *************** function _TMR4_StartTimer *****************
 27498 ;; Defined at:
 27499 ;;		line 83 in file "mcc_generated_files/tmr4.c"
 27500 ;; Parameters:    Size  Location     Type
 27501 ;;		None
 27502 ;; Auto vars:     Size  Location     Type
 27503 ;;		None
 27504 ;; Return value:  Size  Location     Type
 27505 ;;                  1    wreg      void 
 27506 ;; Registers used:
 27507 ;;		None
 27508 ;; Tracked objects:
 27509 ;;		On entry : 0/0
 27510 ;;		On exit  : 0/0
 27511 ;;		Unchanged: 0/0
 27512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27517 ;;Total ram usage:        0 bytes
 27518 ;; Hardware stack levels used:    1
 27519 ;; Hardware stack levels required when called:    4
 27520 ;; This function calls:
 27521 ;;		Nothing
 27522 ;; This function is called by:
 27523 ;;		_TMR4_Initialize
 27524 ;; This function uses a non-reentrant model
 27525 ;;
 27526                           
 27527                           
 27528                           ;psect for function _TMR4_StartTimer
 27529  2DE5                     _TMR4_StartTimer:	
 27530                           
 27531                           ;tmr4.c: 86: T4CONbits.TMR4ON = 1;
 27532                           
 27533                           ;incstack = 0
 27534                           ; Regs used in _TMR4_StartTimer: []
 27535  2DE5  0028               	movlb	8	; select bank8
 27536  2DE6  1517               	bsf	23,2	;volatile
 27537  2DE7  0008               	return
 27538  2DE8                     __end_of_TMR4_StartTimer:	
 27539                           
 27540                           	psect	text82
 27541  2E41                     __ptext82:	
 27542 ;; *************** function _TMR2_Initialize *****************
 27543 ;; Defined at:
 27544 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 27545 ;; Parameters:    Size  Location     Type
 27546 ;;		None
 27547 ;; Auto vars:     Size  Location     Type
 27548 ;;		None
 27549 ;; Return value:  Size  Location     Type
 27550 ;;                  1    wreg      void 
 27551 ;; Registers used:
 27552 ;;		wreg, status,2, status,0, pclath, cstack
 27553 ;; Tracked objects:
 27554 ;;		On entry : 0/0
 27555 ;;		On exit  : 0/0
 27556 ;;		Unchanged: 0/0
 27557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27562 ;;Total ram usage:        0 bytes
 27563 ;; Hardware stack levels used:    1
 27564 ;; Hardware stack levels required when called:    5
 27565 ;; This function calls:
 27566 ;;		_TMR2_StartTimer
 27567 ;; This function is called by:
 27568 ;;		_SYSTEM_Initialize
 27569 ;;		_nullifyBadge_platformInit
 27570 ;; This function uses a non-reentrant model
 27571 ;;
 27572                           
 27573                           
 27574                           ;psect for function _TMR2_Initialize
 27575  2E41                     _TMR2_Initialize:	
 27576                           
 27577                           ;tmr2.c: 68: T2CON = 0x01;
 27578                           
 27579                           ;incstack = 0
 27580                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 27581  2E41  3001               	movlw	1
 27582  2E42  0020               	movlb	0	; select bank0
 27583  2E43  009F               	movwf	31	;volatile
 27584                           
 27585                           ;tmr2.c: 71: PR2 = 0x4A;
 27586  2E44  304A               	movlw	74
 27587  2E45  009E               	movwf	30	;volatile
 27588                           
 27589                           ;tmr2.c: 74: TMR2 = 0x00;
 27590  2E46  019D               	clrf	29	;volatile
 27591                           
 27592                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 27593  2E47  1091               	bcf	17,1	;volatile
 27594                           
 27595                           ;tmr2.c: 80: TMR2_StartTimer();
 27596  2E48  31AD  25E2         	fcall	_TMR2_StartTimer
 27597  2E4A  0008               	return
 27598  2E4B                     __end_of_TMR2_Initialize:	
 27599                           
 27600                           	psect	text83
 27601  2DE2                     __ptext83:	
 27602 ;; *************** function _TMR2_StartTimer *****************
 27603 ;; Defined at:
 27604 ;;		line 83 in file "mcc_generated_files/tmr2.c"
 27605 ;; Parameters:    Size  Location     Type
 27606 ;;		None
 27607 ;; Auto vars:     Size  Location     Type
 27608 ;;		None
 27609 ;; Return value:  Size  Location     Type
 27610 ;;                  1    wreg      void 
 27611 ;; Registers used:
 27612 ;;		None
 27613 ;; Tracked objects:
 27614 ;;		On entry : 0/0
 27615 ;;		On exit  : 0/0
 27616 ;;		Unchanged: 0/0
 27617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27622 ;;Total ram usage:        0 bytes
 27623 ;; Hardware stack levels used:    1
 27624 ;; Hardware stack levels required when called:    4
 27625 ;; This function calls:
 27626 ;;		Nothing
 27627 ;; This function is called by:
 27628 ;;		_TMR2_Initialize
 27629 ;; This function uses a non-reentrant model
 27630 ;;
 27631                           
 27632                           
 27633                           ;psect for function _TMR2_StartTimer
 27634  2DE2                     _TMR2_StartTimer:	
 27635                           
 27636                           ;tmr2.c: 86: T2CONbits.TMR2ON = 1;
 27637                           
 27638                           ;incstack = 0
 27639                           ; Regs used in _TMR2_StartTimer: []
 27640  2DE2  0020               	movlb	0	; select bank0
 27641  2DE3  151F               	bsf	31,2	;volatile
 27642  2DE4  0008               	return
 27643  2DE5                     __end_of_TMR2_StartTimer:	
 27644                           
 27645                           	psect	text84
 27646  20B5                     __ptext84:	
 27647 ;; *************** function _TMR0_Initialize *****************
 27648 ;; Defined at:
 27649 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 27650 ;; Parameters:    Size  Location     Type
 27651 ;;		None
 27652 ;; Auto vars:     Size  Location     Type
 27653 ;;		None
 27654 ;; Return value:  Size  Location     Type
 27655 ;;                  1    wreg      void 
 27656 ;; Registers used:
 27657 ;;		wreg, status,2, status,0, pclath, cstack
 27658 ;; Tracked objects:
 27659 ;;		On entry : 0/0
 27660 ;;		On exit  : 0/0
 27661 ;;		Unchanged: 0/0
 27662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27667 ;;Total ram usage:        0 bytes
 27668 ;; Hardware stack levels used:    1
 27669 ;; Hardware stack levels required when called:    5
 27670 ;; This function calls:
 27671 ;;		_TMR0_SetInterruptHandler
 27672 ;;		_TMR0_StartTimer
 27673 ;; This function is called by:
 27674 ;;		_SYSTEM_Initialize
 27675 ;;		_nullifyBadge_platformInit
 27676 ;; This function uses a non-reentrant model
 27677 ;;
 27678                           
 27679                           
 27680                           ;psect for function _TMR0_Initialize
 27681  20B5                     _TMR0_Initialize:	
 27682                           
 27683                           ;tmr0.c: 70: T0CON0 = 0x10;
 27684                           
 27685                           ;incstack = 0
 27686                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 27687  20B5  3010               	movlw	16
 27688  20B6  0020               	movlb	0	; select bank0
 27689  20B7  0097               	movwf	23	;volatile
 27690                           
 27691                           ;tmr0.c: 73: T0CON1 = 0x4D;
 27692  20B8  304D               	movlw	77
 27693  20B9  0098               	movwf	24	;volatile
 27694                           
 27695                           ;tmr0.c: 76: TMR0H = 0xFF;
 27696  20BA  30FF               	movlw	255
 27697  20BB  0096               	movwf	22	;volatile
 27698                           
 27699                           ;tmr0.c: 79: TMR0L = 0xFF;
 27700  20BC  30FF               	movlw	255
 27701  20BD  0095               	movwf	21	;volatile
 27702                           
 27703                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 27704  20BE  0816               	movf	22,w	;volatile
 27705  20BF  0021               	movlb	1	; select bank1
 27706  20C0  00BF               	movwf	(_timer0ReloadVal16bit+1)^(0+128)	;volatile
 27707  20C1  0020               	movlb	0	; select bank0
 27708  20C2  0815               	movf	21,w	;volatile
 27709  20C3  0021               	movlb	1	; select bank1
 27710  20C4  00BE               	movwf	_timer0ReloadVal16bit^(0+128)	;volatile
 27711                           
 27712                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
 27713  20C5  0020               	movlb	0	; select bank0
 27714  20C6  1290               	bcf	16,5	;volatile
 27715                           
 27716                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
 27717  20C7  0021               	movlb	1	; select bank1
 27718  20C8  1690               	bsf	16,5	;volatile
 27719                           
 27720                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 27721  20C9  30DE               	movlw	low _TMR0_DefaultInterruptHandler
 27722  20CA  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 27723  20CB  302D               	movlw	high _TMR0_DefaultInterruptHandler
 27724  20CC  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 27725  20CD  31AD  25F7  31A0   	fcall	_TMR0_SetInterruptHandler
 27726                           
 27727                           ;tmr0.c: 94: TMR0_StartTimer();
 27728  20D0  31AD  25DF         	fcall	_TMR0_StartTimer
 27729  20D2  0008               	return
 27730  20D3                     __end_of_TMR0_Initialize:	
 27731                           
 27732                           	psect	text85
 27733  2DDF                     __ptext85:	
 27734 ;; *************** function _TMR0_StartTimer *****************
 27735 ;; Defined at:
 27736 ;;		line 97 in file "mcc_generated_files/tmr0.c"
 27737 ;; Parameters:    Size  Location     Type
 27738 ;;		None
 27739 ;; Auto vars:     Size  Location     Type
 27740 ;;		None
 27741 ;; Return value:  Size  Location     Type
 27742 ;;                  1    wreg      void 
 27743 ;; Registers used:
 27744 ;;		None
 27745 ;; Tracked objects:
 27746 ;;		On entry : 0/0
 27747 ;;		On exit  : 0/0
 27748 ;;		Unchanged: 0/0
 27749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27754 ;;Total ram usage:        0 bytes
 27755 ;; Hardware stack levels used:    1
 27756 ;; Hardware stack levels required when called:    4
 27757 ;; This function calls:
 27758 ;;		Nothing
 27759 ;; This function is called by:
 27760 ;;		_TMR0_Initialize
 27761 ;; This function uses a non-reentrant model
 27762 ;;
 27763                           
 27764                           
 27765                           ;psect for function _TMR0_StartTimer
 27766  2DDF                     _TMR0_StartTimer:	
 27767                           
 27768                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
 27769                           
 27770                           ;incstack = 0
 27771                           ; Regs used in _TMR0_StartTimer: []
 27772  2DDF  0020               	movlb	0	; select bank0
 27773  2DE0  1797               	bsf	23,7	;volatile
 27774  2DE1  0008               	return
 27775  2DE2                     __end_of_TMR0_StartTimer:	
 27776                           
 27777                           	psect	text86
 27778  2DF7                     __ptext86:	
 27779 ;; *************** function _TMR0_SetInterruptHandler *****************
 27780 ;; Defined at:
 27781 ;;		line 161 in file "mcc_generated_files/tmr0.c"
 27782 ;; Parameters:    Size  Location     Type
 27783 ;;  InterruptHan    2    1[COMMON] PTR void 
 27784 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 27785 ;; Auto vars:     Size  Location     Type
 27786 ;;		None
 27787 ;; Return value:  Size  Location     Type
 27788 ;;                  1    wreg      void 
 27789 ;; Registers used:
 27790 ;;		wreg
 27791 ;; Tracked objects:
 27792 ;;		On entry : 0/0
 27793 ;;		On exit  : 0/0
 27794 ;;		Unchanged: 0/0
 27795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27799 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27800 ;;Total ram usage:        2 bytes
 27801 ;; Hardware stack levels used:    1
 27802 ;; Hardware stack levels required when called:    4
 27803 ;; This function calls:
 27804 ;;		Nothing
 27805 ;; This function is called by:
 27806 ;;		_TMR0_Initialize
 27807 ;; This function uses a non-reentrant model
 27808 ;;
 27809                           
 27810                           
 27811                           ;psect for function _TMR0_SetInterruptHandler
 27812  2DF7                     _TMR0_SetInterruptHandler:	
 27813                           
 27814                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
 27815                           
 27816                           ;incstack = 0
 27817                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 27818  2DF7  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 27819  2DF8  0021               	movlb	1	; select bank1
 27820  2DF9  00BD               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 27821  2DFA  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 27822  2DFB  00BC               	movwf	_TMR0_InterruptHandler^(0+128)
 27823  2DFC  0008               	return
 27824  2DFD                     __end_of_TMR0_SetInterruptHandler:	
 27825                           
 27826                           	psect	text87
 27827  2E15                     __ptext87:	
 27828 ;; *************** function _SPI1_Initialize *****************
 27829 ;; Defined at:
 27830 ;;		line 63 in file "mcc_generated_files/spi1.c"
 27831 ;; Parameters:    Size  Location     Type
 27832 ;;		None
 27833 ;; Auto vars:     Size  Location     Type
 27834 ;;		None
 27835 ;; Return value:  Size  Location     Type
 27836 ;;                  1    wreg      void 
 27837 ;; Registers used:
 27838 ;;		wreg
 27839 ;; Tracked objects:
 27840 ;;		On entry : 0/0
 27841 ;;		On exit  : 0/0
 27842 ;;		Unchanged: 0/0
 27843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27848 ;;Total ram usage:        0 bytes
 27849 ;; Hardware stack levels used:    1
 27850 ;; Hardware stack levels required when called:    4
 27851 ;; This function calls:
 27852 ;;		Nothing
 27853 ;; This function is called by:
 27854 ;;		_SYSTEM_Initialize
 27855 ;;		_nullifyBadge_platformInit
 27856 ;; This function uses a non-reentrant model
 27857 ;;
 27858                           
 27859                           
 27860                           ;psect for function _SPI1_Initialize
 27861  2E15                     _SPI1_Initialize:	
 27862                           
 27863                           ;spi1.c: 68: SSP1STAT = 0x40;
 27864                           
 27865                           ;incstack = 0
 27866                           ; Regs used in _SPI1_Initialize: [wreg]
 27867  2E15  3040               	movlw	64
 27868  2E16  0024               	movlb	4	; select bank4
 27869  2E17  0094               	movwf	20	;volatile
 27870                           
 27871                           ;spi1.c: 71: SSP1CON1 = 0x22;
 27872  2E18  3022               	movlw	34
 27873  2E19  0095               	movwf	21	;volatile
 27874                           
 27875                           ;spi1.c: 74: SSP1ADD = 0x01;
 27876  2E1A  3001               	movlw	1
 27877  2E1B  0092               	movwf	18	;volatile
 27878  2E1C  0008               	return
 27879  2E1D                     __end_of_SPI1_Initialize:	
 27880                           
 27881                           	psect	text88
 27882  2E98                     __ptext88:	
 27883 ;; *************** function _PWM6_Initialize *****************
 27884 ;; Defined at:
 27885 ;;		line 57 in file "mcc_generated_files/pwm6.c"
 27886 ;; Parameters:    Size  Location     Type
 27887 ;;		None
 27888 ;; Auto vars:     Size  Location     Type
 27889 ;;		None
 27890 ;; Return value:  Size  Location     Type
 27891 ;;                  1    wreg      void 
 27892 ;; Registers used:
 27893 ;;		wreg, status,2, status,0
 27894 ;; Tracked objects:
 27895 ;;		On entry : 0/0
 27896 ;;		On exit  : 0/0
 27897 ;;		Unchanged: 0/0
 27898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27903 ;;Total ram usage:        0 bytes
 27904 ;; Hardware stack levels used:    1
 27905 ;; Hardware stack levels required when called:    4
 27906 ;; This function calls:
 27907 ;;		Nothing
 27908 ;; This function is called by:
 27909 ;;		_SYSTEM_Initialize
 27910 ;;		_nullifyBadge_platformInit
 27911 ;; This function uses a non-reentrant model
 27912 ;;
 27913                           
 27914                           
 27915                           ;psect for function _PWM6_Initialize
 27916  2E98                     _PWM6_Initialize:	
 27917                           
 27918                           ;pwm6.c: 61: PWM6CON = 0x90;
 27919                           
 27920                           ;incstack = 0
 27921                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 27922  2E98  3090               	movlw	144
 27923  2E99  002C               	movlb	12	; select bank12
 27924  2E9A  009C               	movwf	28	;volatile
 27925                           
 27926                           ;pwm6.c: 64: PWM6DCH = 0x7F;
 27927  2E9B  307F               	movlw	127
 27928  2E9C  009B               	movwf	27	;volatile
 27929                           
 27930                           ;pwm6.c: 67: PWM6DCL = 0xC0;
 27931  2E9D  30C0               	movlw	192
 27932  2E9E  009A               	movwf	26	;volatile
 27933                           
 27934                           ;pwm6.c: 71: PWMTMRSbits.P6TSEL = 0x2;
 27935  2E9F  081F               	movf	31,w	;volatile
 27936  2EA0  39F3               	andlw	-13
 27937  2EA1  3808               	iorlw	8
 27938  2EA2  009F               	movwf	31	;volatile
 27939  2EA3  0008               	return
 27940  2EA4                     __end_of_PWM6_Initialize:	
 27941                           
 27942                           	psect	text89
 27943  2E8C                     __ptext89:	
 27944 ;; *************** function _PWM5_Initialize *****************
 27945 ;; Defined at:
 27946 ;;		line 57 in file "mcc_generated_files/pwm5.c"
 27947 ;; Parameters:    Size  Location     Type
 27948 ;;		None
 27949 ;; Auto vars:     Size  Location     Type
 27950 ;;		None
 27951 ;; Return value:  Size  Location     Type
 27952 ;;                  1    wreg      void 
 27953 ;; Registers used:
 27954 ;;		wreg, status,2, status,0
 27955 ;; Tracked objects:
 27956 ;;		On entry : 0/0
 27957 ;;		On exit  : 0/0
 27958 ;;		Unchanged: 0/0
 27959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27964 ;;Total ram usage:        0 bytes
 27965 ;; Hardware stack levels used:    1
 27966 ;; Hardware stack levels required when called:    4
 27967 ;; This function calls:
 27968 ;;		Nothing
 27969 ;; This function is called by:
 27970 ;;		_SYSTEM_Initialize
 27971 ;;		_nullifyBadge_platformInit
 27972 ;; This function uses a non-reentrant model
 27973 ;;
 27974                           
 27975                           
 27976                           ;psect for function _PWM5_Initialize
 27977  2E8C                     _PWM5_Initialize:	
 27978                           
 27979                           ;pwm5.c: 61: PWM5CON = 0x90;
 27980                           
 27981                           ;incstack = 0
 27982                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
 27983  2E8C  3090               	movlw	144
 27984  2E8D  002C               	movlb	12	; select bank12
 27985  2E8E  0099               	movwf	25	;volatile
 27986                           
 27987                           ;pwm5.c: 64: PWM5DCH = 0x7F;
 27988  2E8F  307F               	movlw	127
 27989  2E90  0098               	movwf	24	;volatile
 27990                           
 27991                           ;pwm5.c: 67: PWM5DCL = 0xC0;
 27992  2E91  30C0               	movlw	192
 27993  2E92  0097               	movwf	23	;volatile
 27994                           
 27995                           ;pwm5.c: 71: PWMTMRSbits.P5TSEL = 0x2;
 27996  2E93  081F               	movf	31,w	;volatile
 27997  2E94  39FC               	andlw	-4
 27998  2E95  3802               	iorlw	2
 27999  2E96  009F               	movwf	31	;volatile
 28000  2E97  0008               	return
 28001  2E98                     __end_of_PWM5_Initialize:	
 28002                           
 28003                           	psect	text90
 28004  2E6B                     __ptext90:	
 28005 ;; *************** function _PWM2_Initialize *****************
 28006 ;; Defined at:
 28007 ;;		line 63 in file "mcc_generated_files/pwm2.c"
 28008 ;; Parameters:    Size  Location     Type
 28009 ;;		None
 28010 ;; Auto vars:     Size  Location     Type
 28011 ;;		None
 28012 ;; Return value:  Size  Location     Type
 28013 ;;                  1    wreg      void 
 28014 ;; Registers used:
 28015 ;;		wreg, status,2, status,0
 28016 ;; Tracked objects:
 28017 ;;		On entry : 0/0
 28018 ;;		On exit  : 0/0
 28019 ;;		Unchanged: 0/0
 28020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28025 ;;Total ram usage:        0 bytes
 28026 ;; Hardware stack levels used:    1
 28027 ;; Hardware stack levels required when called:    4
 28028 ;; This function calls:
 28029 ;;		Nothing
 28030 ;; This function is called by:
 28031 ;;		_SYSTEM_Initialize
 28032 ;;		_nullifyBadge_platformInit
 28033 ;; This function uses a non-reentrant model
 28034 ;;
 28035                           
 28036                           
 28037                           ;psect for function _PWM2_Initialize
 28038  2E6B                     _PWM2_Initialize:	
 28039                           
 28040                           ;pwm2.c: 68: CCP2CON = 0x8F;
 28041                           
 28042                           ;incstack = 0
 28043                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
 28044  2E6B  308F               	movlw	143
 28045  2E6C  0025               	movlb	5	; select bank5
 28046  2E6D  0097               	movwf	23	;volatile
 28047                           
 28048                           ;pwm2.c: 71: CCPR2H = 0x00;
 28049  2E6E  0196               	clrf	22	;volatile
 28050                           
 28051                           ;pwm2.c: 74: CCPR2L = 0xE0;
 28052  2E6F  30E0               	movlw	224
 28053  2E70  0095               	movwf	21	;volatile
 28054                           
 28055                           ;pwm2.c: 77: CCPTMRSbits.C2TSEL = 0x1;
 28056  2E71  081F               	movf	31,w	;volatile
 28057  2E72  39F3               	andlw	-13
 28058  2E73  3804               	iorlw	4
 28059  2E74  009F               	movwf	31	;volatile
 28060  2E75  0008               	return
 28061  2E76                     __end_of_PWM2_Initialize:	
 28062                           
 28063                           	psect	text91
 28064  2E60                     __ptext91:	
 28065 ;; *************** function _PWM1_Initialize *****************
 28066 ;; Defined at:
 28067 ;;		line 63 in file "mcc_generated_files/pwm1.c"
 28068 ;; Parameters:    Size  Location     Type
 28069 ;;		None
 28070 ;; Auto vars:     Size  Location     Type
 28071 ;;		None
 28072 ;; Return value:  Size  Location     Type
 28073 ;;                  1    wreg      void 
 28074 ;; Registers used:
 28075 ;;		wreg, status,2, status,0
 28076 ;; Tracked objects:
 28077 ;;		On entry : 0/0
 28078 ;;		On exit  : 0/0
 28079 ;;		Unchanged: 0/0
 28080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28085 ;;Total ram usage:        0 bytes
 28086 ;; Hardware stack levels used:    1
 28087 ;; Hardware stack levels required when called:    4
 28088 ;; This function calls:
 28089 ;;		Nothing
 28090 ;; This function is called by:
 28091 ;;		_SYSTEM_Initialize
 28092 ;;		_nullifyBadge_platformInit
 28093 ;; This function uses a non-reentrant model
 28094 ;;
 28095                           
 28096                           
 28097                           ;psect for function _PWM1_Initialize
 28098  2E60                     _PWM1_Initialize:	
 28099                           
 28100                           ;pwm1.c: 68: CCP1CON = 0x8F;
 28101                           
 28102                           ;incstack = 0
 28103                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 28104  2E60  308F               	movlw	143
 28105  2E61  0025               	movlb	5	; select bank5
 28106  2E62  0093               	movwf	19	;volatile
 28107                           
 28108                           ;pwm1.c: 71: CCPR1H = 0x00;
 28109  2E63  0192               	clrf	18	;volatile
 28110                           
 28111                           ;pwm1.c: 74: CCPR1L = 0x95;
 28112  2E64  3095               	movlw	149
 28113  2E65  0091               	movwf	17	;volatile
 28114                           
 28115                           ;pwm1.c: 77: CCPTMRSbits.C1TSEL = 0x1;
 28116  2E66  081F               	movf	31,w	;volatile
 28117  2E67  39FC               	andlw	-4
 28118  2E68  3801               	iorlw	1
 28119  2E69  009F               	movwf	31	;volatile
 28120  2E6A  0008               	return
 28121  2E6B                     __end_of_PWM1_Initialize:	
 28122                           
 28123                           	psect	text92
 28124  2756                     __ptext92:	
 28125 ;; *************** function _PIN_MANAGER_Initialize *****************
 28126 ;; Defined at:
 28127 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 28128 ;; Parameters:    Size  Location     Type
 28129 ;;		None
 28130 ;; Auto vars:     Size  Location     Type
 28131 ;;  state           1    1[COMMON] unsigned char 
 28132 ;; Return value:  Size  Location     Type
 28133 ;;                  1    wreg      void 
 28134 ;; Registers used:
 28135 ;;		wreg, status,2, status,0
 28136 ;; Tracked objects:
 28137 ;;		On entry : 0/0
 28138 ;;		On exit  : 0/0
 28139 ;;		Unchanged: 0/0
 28140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28142 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28144 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28145 ;;Total ram usage:        1 bytes
 28146 ;; Hardware stack levels used:    1
 28147 ;; Hardware stack levels required when called:    4
 28148 ;; This function calls:
 28149 ;;		Nothing
 28150 ;; This function is called by:
 28151 ;;		_SYSTEM_Initialize
 28152 ;;		_nullifyBadge_platformInit
 28153 ;; This function uses a non-reentrant model
 28154 ;;
 28155                           
 28156                           
 28157                           ;psect for function _PIN_MANAGER_Initialize
 28158  2756                     _PIN_MANAGER_Initialize:	
 28159                           
 28160                           ;pin_manager.c: 56: LATA = 0x00;
 28161                           
 28162                           ;incstack = 0
 28163                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 28164  2756  0022               	movlb	2	; select bank2
 28165  2757  018C               	clrf	12	;volatile
 28166                           
 28167                           ;pin_manager.c: 57: LATB = 0x80;
 28168  2758  3080               	movlw	128
 28169  2759  008D               	movwf	13	;volatile
 28170                           
 28171                           ;pin_manager.c: 58: LATC = 0x1A;
 28172  275A  301A               	movlw	26
 28173  275B  008E               	movwf	14	;volatile
 28174                           
 28175                           ;pin_manager.c: 63: TRISA = 0x37;
 28176  275C  3037               	movlw	55
 28177  275D  0021               	movlb	1	; select bank1
 28178  275E  008C               	movwf	12	;volatile
 28179                           
 28180                           ;pin_manager.c: 64: TRISB = 0x30;
 28181  275F  3030               	movlw	48
 28182  2760  008D               	movwf	13	;volatile
 28183                           
 28184                           ;pin_manager.c: 65: TRISC = 0x60;
 28185  2761  3060               	movlw	96
 28186  2762  008E               	movwf	14	;volatile
 28187                           
 28188                           ;pin_manager.c: 70: ANSELC = 0x40;
 28189  2763  3040               	movlw	64
 28190  2764  0023               	movlb	3	; select bank3
 28191  2765  008E               	movwf	14	;volatile
 28192                           
 28193                           ;pin_manager.c: 71: ANSELB = 0x00;
 28194  2766  018D               	clrf	13	;volatile
 28195                           
 28196                           ;pin_manager.c: 72: ANSELA = 0x03;
 28197  2767  3003               	movlw	3
 28198  2768  008C               	movwf	12	;volatile
 28199                           
 28200                           ;pin_manager.c: 77: WPUB = 0x00;
 28201  2769  0024               	movlb	4	; select bank4
 28202  276A  018D               	clrf	13	;volatile
 28203                           
 28204                           ;pin_manager.c: 78: WPUA = 0x00;
 28205  276B  018C               	clrf	12	;volatile
 28206                           
 28207                           ;pin_manager.c: 79: WPUC = 0x00;
 28208  276C  018E               	clrf	14	;volatile
 28209                           
 28210                           ;pin_manager.c: 84: ODCONA = 0x00;
 28211  276D  0025               	movlb	5	; select bank5
 28212  276E  018C               	clrf	12	;volatile
 28213                           
 28214                           ;pin_manager.c: 85: ODCONB = 0x00;
 28215  276F  018D               	clrf	13	;volatile
 28216                           
 28217                           ;pin_manager.c: 86: ODCONC = 0x00;
 28218  2770  018E               	clrf	14	;volatile
 28219                           
 28220                           ;pin_manager.c: 93: bool state = GIE;
 28221  2771  3000               	movlw	0
 28222  2772  1B8B               	btfsc	11,7	;volatile
 28223  2773  3001               	movlw	1
 28224  2774  00F1               	movwf	PIN_MANAGER_Initialize@state
 28225                           
 28226                           ;pin_manager.c: 94: GIE = 0;
 28227  2775  138B               	bcf	11,7	;volatile
 28228                           
 28229                           ;pin_manager.c: 95: PPSLOCK = 0x55;
 28230  2776  3055               	movlw	85
 28231  2777  003C               	movlb	28	; select bank28
 28232  2778  008F               	movwf	15	;volatile
 28233                           
 28234                           ;pin_manager.c: 96: PPSLOCK = 0xAA;
 28235  2779  30AA               	movlw	170
 28236  277A  008F               	movwf	15	;volatile
 28237                           
 28238                           ;pin_manager.c: 97: PPSLOCKbits.PPSLOCKED = 0x00;
 28239  277B  100F               	bcf	15,0	;volatile
 28240                           
 28241                           ;pin_manager.c: 99: RC1PPSbits.RC1PPS = 0x0D;
 28242  277C  003D               	movlb	29	; select bank29
 28243  277D  0821               	movf	33,w	;volatile
 28244  277E  39E0               	andlw	-32
 28245  277F  380D               	iorlw	13
 28246  2780  00A1               	movwf	33	;volatile
 28247                           
 28248                           ;pin_manager.c: 100: SSP1DATPPSbits.SSP1DATPPS = 0x0C;
 28249  2781  003C               	movlb	28	; select bank28
 28250  2782  0821               	movf	33,w	;volatile
 28251  2783  39E0               	andlw	-32
 28252  2784  380C               	iorlw	12
 28253  2785  00A1               	movwf	33	;volatile
 28254                           
 28255                           ;pin_manager.c: 101: SSP1CLKPPSbits.SSP1CLKPPS = 0x0E;
 28256  2786  0820               	movf	32,w	;volatile
 28257  2787  39E0               	andlw	-32
 28258  2788  380E               	iorlw	14
 28259  2789  00A0               	movwf	32	;volatile
 28260                           
 28261                           ;pin_manager.c: 102: RC4PPSbits.RC4PPS = 0x02;
 28262  278A  003D               	movlb	29	; select bank29
 28263  278B  0824               	movf	36,w	;volatile
 28264  278C  39E0               	andlw	-32
 28265  278D  3802               	iorlw	2
 28266  278E  00A4               	movwf	36	;volatile
 28267                           
 28268                           ;pin_manager.c: 103: RC0PPSbits.RC0PPS = 0x0C;
 28269  278F  0820               	movf	32,w	;volatile
 28270  2790  39E0               	andlw	-32
 28271  2791  380C               	iorlw	12
 28272  2792  00A0               	movwf	32	;volatile
 28273                           
 28274                           ;pin_manager.c: 104: RC3PPSbits.RC3PPS = 0x03;
 28275  2793  0823               	movf	35,w	;volatile
 28276  2794  39E0               	andlw	-32
 28277  2795  3803               	iorlw	3
 28278  2796  00A3               	movwf	35	;volatile
 28279                           
 28280                           ;pin_manager.c: 105: RB6PPSbits.RB6PPS = 0x18;
 28281  2797  081E               	movf	30,w	;volatile
 28282  2798  39E0               	andlw	-32
 28283  2799  3818               	iorlw	24
 28284  279A  009E               	movwf	30	;volatile
 28285                           
 28286                           ;pin_manager.c: 106: RC2PPSbits.RC2PPS = 0x19;
 28287  279B  0822               	movf	34,w	;volatile
 28288  279C  39E0               	andlw	-32
 28289  279D  3819               	iorlw	25
 28290  279E  00A2               	movwf	34	;volatile
 28291                           
 28292                           ;pin_manager.c: 108: PPSLOCK = 0x55;
 28293  279F  3055               	movlw	85
 28294  27A0  003C               	movlb	28	; select bank28
 28295  27A1  008F               	movwf	15	;volatile
 28296                           
 28297                           ;pin_manager.c: 109: PPSLOCK = 0xAA;
 28298  27A2  30AA               	movlw	170
 28299  27A3  008F               	movwf	15	;volatile
 28300                           
 28301                           ;pin_manager.c: 110: PPSLOCKbits.PPSLOCKED = 0x01;
 28302  27A4  140F               	bsf	15,0	;volatile
 28303                           
 28304                           ;pin_manager.c: 112: GIE = state;
 28305  27A5  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 28306  27A6  2FA9               	goto	u2960
 28307  27A7  178B               	bsf	11,7	;volatile
 28308  27A8  0008               	return
 28309  27A9                     u2960:	
 28310  27A9  138B               	bcf	11,7	;volatile
 28311  27AA  0008               	return
 28312  27AB                     __end_of_PIN_MANAGER_Initialize:	
 28313                           
 28314                           	psect	text93
 28315  2E37                     __ptext93:	
 28316 ;; *************** function _OSCILLATOR_Initialize *****************
 28317 ;; Defined at:
 28318 ;;		line 92 in file "mcc_generated_files/mcc.c"
 28319 ;; Parameters:    Size  Location     Type
 28320 ;;		None
 28321 ;; Auto vars:     Size  Location     Type
 28322 ;;		None
 28323 ;; Return value:  Size  Location     Type
 28324 ;;                  1    wreg      void 
 28325 ;; Registers used:
 28326 ;;		wreg, status,2
 28327 ;; Tracked objects:
 28328 ;;		On entry : 0/0
 28329 ;;		On exit  : 0/0
 28330 ;;		Unchanged: 0/0
 28331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28336 ;;Total ram usage:        0 bytes
 28337 ;; Hardware stack levels used:    1
 28338 ;; Hardware stack levels required when called:    4
 28339 ;; This function calls:
 28340 ;;		Nothing
 28341 ;; This function is called by:
 28342 ;;		_SYSTEM_Initialize
 28343 ;;		_nullifyBadge_platformInit
 28344 ;; This function uses a non-reentrant model
 28345 ;;
 28346                           
 28347                           
 28348                           ;psect for function _OSCILLATOR_Initialize
 28349  2E37                     _OSCILLATOR_Initialize:	
 28350                           
 28351                           ;mcc.c: 95: OSCCON1 = 0x00;
 28352                           
 28353                           ;incstack = 0
 28354                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 28355  2E37  0032               	movlb	18	; select bank18
 28356  2E38  0199               	clrf	25	;volatile
 28357                           
 28358                           ;mcc.c: 97: OSCCON3 = 0x00;
 28359  2E39  019B               	clrf	27	;volatile
 28360                           
 28361                           ;mcc.c: 99: OSCEN = 0x00;
 28362  2E3A  019D               	clrf	29	;volatile
 28363                           
 28364                           ;mcc.c: 101: OSCFRQ = 0x06;
 28365  2E3B  3006               	movlw	6
 28366  2E3C  009F               	movwf	31	;volatile
 28367                           
 28368                           ;mcc.c: 103: OSCTUNE = 0x00;
 28369  2E3D  019E               	clrf	30	;volatile
 28370  2E3E                     l208:	
 28371                           ;mcc.c: 106: {
 28372                           
 28373                           ;mcc.c: 105: while(PLLR == 0)
 28374                           
 28375  2E3E  181C               	btfsc	28,0	;volatile
 28376  2E3F  0008               	return
 28377  2E40  2E3E               	goto	l208
 28378  2E41                     __end_of_OSCILLATOR_Initialize:	
 28379                           
 28380                           	psect	text94
 28381  2FB9                     __ptext94:	
 28382 ;; *************** function _PWM6_LoadDutyValue *****************
 28383 ;; Defined at:
 28384 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 28385 ;; Parameters:    Size  Location     Type
 28386 ;;  dutyValue       2    1[COMMON] unsigned int 
 28387 ;; Auto vars:     Size  Location     Type
 28388 ;;		None
 28389 ;; Return value:  Size  Location     Type
 28390 ;;                  1    wreg      void 
 28391 ;; Registers used:
 28392 ;;		wreg, status,2, status,0
 28393 ;; Tracked objects:
 28394 ;;		On entry : 0/0
 28395 ;;		On exit  : 0/0
 28396 ;;		Unchanged: 0/0
 28397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28398 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28400 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28401 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28402 ;;Total ram usage:        4 bytes
 28403 ;; Hardware stack levels used:    1
 28404 ;; Hardware stack levels required when called:    4
 28405 ;; This function calls:
 28406 ;;		Nothing
 28407 ;; This function is called by:
 28408 ;;		_nullifyBadge_platformInit
 28409 ;;		_nullifyBadge_userLedsSetBrightness
 28410 ;; This function uses a non-reentrant model
 28411 ;;
 28412                           
 28413                           
 28414                           ;psect for function _PWM6_LoadDutyValue
 28415  2FB9                     _PWM6_LoadDutyValue:	
 28416                           
 28417                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 28418                           
 28419                           ;incstack = 0
 28420                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 28421  2FB9  0872               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 28422  2FBA  00F4               	movwf	??_PWM6_LoadDutyValue+1
 28423  2FBB  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 28424  2FBC  00F3               	movwf	??_PWM6_LoadDutyValue
 28425  2FBD  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 28426  2FBE  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 28427  2FBF  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 28428  2FC0  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 28429  2FC1  0873               	movf	??_PWM6_LoadDutyValue,w
 28430  2FC2  002C               	movlb	12	; select bank12
 28431  2FC3  009B               	movwf	27	;volatile
 28432                           
 28433                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 28434  2FC4  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 28435  2FC5  3903               	andlw	3
 28436  2FC6  00F3               	movwf	??_PWM6_LoadDutyValue
 28437  2FC7  3005               	movlw	5
 28438  2FC8                     u3675:	
 28439  2FC8  35F3               	lslf	??_PWM6_LoadDutyValue,f
 28440  2FC9  3EFF               	addlw	-1
 28441  2FCA  1D03               	skipz
 28442  2FCB  2FC8               	goto	u3675
 28443  2FCC  3573               	lslf	??_PWM6_LoadDutyValue,w
 28444  2FCD  009A               	movwf	26	;volatile
 28445  2FCE  0008               	return
 28446  2FCF                     __end_of_PWM6_LoadDutyValue:	
 28447                           
 28448                           	psect	text95
 28449  2FA3                     __ptext95:	
 28450 ;; *************** function _PWM5_LoadDutyValue *****************
 28451 ;; Defined at:
 28452 ;;		line 74 in file "mcc_generated_files/pwm5.c"
 28453 ;; Parameters:    Size  Location     Type
 28454 ;;  dutyValue       2    1[COMMON] unsigned int 
 28455 ;; Auto vars:     Size  Location     Type
 28456 ;;		None
 28457 ;; Return value:  Size  Location     Type
 28458 ;;                  1    wreg      void 
 28459 ;; Registers used:
 28460 ;;		wreg, status,2, status,0
 28461 ;; Tracked objects:
 28462 ;;		On entry : 0/0
 28463 ;;		On exit  : 0/0
 28464 ;;		Unchanged: 0/0
 28465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28466 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28468 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28469 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28470 ;;Total ram usage:        4 bytes
 28471 ;; Hardware stack levels used:    1
 28472 ;; Hardware stack levels required when called:    4
 28473 ;; This function calls:
 28474 ;;		Nothing
 28475 ;; This function is called by:
 28476 ;;		_nullifyBadge_platformInit
 28477 ;;		_fadeDisplay_Init
 28478 ;;		_nullifyBadge_segDisplaySetBrightness
 28479 ;; This function uses a non-reentrant model
 28480 ;;
 28481                           
 28482                           
 28483                           ;psect for function _PWM5_LoadDutyValue
 28484  2FA3                     _PWM5_LoadDutyValue:	
 28485                           
 28486                           ;pwm5.c: 77: PWM5DCH = (dutyValue & 0x03FC)>>2;
 28487                           
 28488                           ;incstack = 0
 28489                           ; Regs used in _PWM5_LoadDutyValue: [wreg+status,2+status,0]
 28490  2FA3  0872               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 28491  2FA4  00F4               	movwf	??_PWM5_LoadDutyValue+1
 28492  2FA5  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 28493  2FA6  00F3               	movwf	??_PWM5_LoadDutyValue
 28494  2FA7  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 28495  2FA8  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 28496  2FA9  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 28497  2FAA  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 28498  2FAB  0873               	movf	??_PWM5_LoadDutyValue,w
 28499  2FAC  002C               	movlb	12	; select bank12
 28500  2FAD  0098               	movwf	24	;volatile
 28501                           
 28502                           ;pwm5.c: 80: PWM5DCL = (dutyValue & 0x0003)<<6;
 28503  2FAE  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 28504  2FAF  3903               	andlw	3
 28505  2FB0  00F3               	movwf	??_PWM5_LoadDutyValue
 28506  2FB1  3005               	movlw	5
 28507  2FB2                     u3665:	
 28508  2FB2  35F3               	lslf	??_PWM5_LoadDutyValue,f
 28509  2FB3  3EFF               	addlw	-1
 28510  2FB4  1D03               	skipz
 28511  2FB5  2FB2               	goto	u3665
 28512  2FB6  3573               	lslf	??_PWM5_LoadDutyValue,w
 28513  2FB7  0097               	movwf	23	;volatile
 28514  2FB8  0008               	return
 28515  2FB9                     __end_of_PWM5_LoadDutyValue:	
 28516                           
 28517                           	psect	text96
 28518  2F8D                     __ptext96:	
 28519 ;; *************** function _PWM2_LoadDutyValue *****************
 28520 ;; Defined at:
 28521 ;;		line 80 in file "mcc_generated_files/pwm2.c"
 28522 ;; Parameters:    Size  Location     Type
 28523 ;;  dutyValue       2    1[COMMON] unsigned int 
 28524 ;; Auto vars:     Size  Location     Type
 28525 ;;		None
 28526 ;; Return value:  Size  Location     Type
 28527 ;;                  1    wreg      void 
 28528 ;; Registers used:
 28529 ;;		wreg, status,2
 28530 ;; Tracked objects:
 28531 ;;		On entry : 0/0
 28532 ;;		On exit  : 0/0
 28533 ;;		Unchanged: 0/0
 28534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28535 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28538 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28539 ;;Total ram usage:        2 bytes
 28540 ;; Hardware stack levels used:    1
 28541 ;; Hardware stack levels required when called:    4
 28542 ;; This function calls:
 28543 ;;		Nothing
 28544 ;; This function is called by:
 28545 ;;		_nullifyBadge_platformInit
 28546 ;; This function uses a non-reentrant model
 28547 ;;
 28548                           
 28549                           
 28550                           ;psect for function _PWM2_LoadDutyValue
 28551  2F8D                     _PWM2_LoadDutyValue:	
 28552                           
 28553                           ;pwm2.c: 82: dutyValue &= 0x03FF;
 28554                           
 28555                           ;incstack = 0
 28556                           ; Regs used in _PWM2_LoadDutyValue: [wreg+status,2]
 28557  2F8D  30FF               	movlw	255
 28558  2F8E  05F1               	andwf	PWM2_LoadDutyValue@dutyValue,f
 28559  2F8F  3003               	movlw	3
 28560  2F90  05F2               	andwf	PWM2_LoadDutyValue@dutyValue+1,f
 28561                           
 28562                           ;pwm2.c: 85: if(CCP2CONbits.CCP2FMT)
 28563  2F91  0025               	movlb	5	; select bank5
 28564  2F92  1E17               	btfss	23,4	;volatile
 28565  2F93  2F9E               	goto	l6314
 28566                           
 28567                           ;pwm2.c: 86: {
 28568                           ;pwm2.c: 87: dutyValue <<= 6;
 28569  2F94  3006               	movlw	6
 28570  2F95                     u3715:	
 28571  2F95  35F1               	lslf	PWM2_LoadDutyValue@dutyValue,f
 28572  2F96  0DF2               	rlf	PWM2_LoadDutyValue@dutyValue+1,f
 28573  2F97  0B89               	decfsz	9,f
 28574  2F98  2F95               	goto	u3715
 28575                           
 28576                           ;pwm2.c: 88: CCPR2H = dutyValue >> 8;
 28577  2F99  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 28578  2F9A  0096               	movwf	22	;volatile
 28579                           
 28580                           ;pwm2.c: 89: CCPR2L = dutyValue;
 28581  2F9B  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 28582  2F9C  0095               	movwf	21	;volatile
 28583                           
 28584                           ;pwm2.c: 90: }
 28585  2F9D  0008               	return
 28586  2F9E                     l6314:	
 28587                           
 28588                           ;pwm2.c: 91: else
 28589                           ;pwm2.c: 92: {
 28590                           ;pwm2.c: 93: CCPR2H = dutyValue >> 8;
 28591  2F9E  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 28592  2F9F  0096               	movwf	22	;volatile
 28593                           
 28594                           ;pwm2.c: 94: CCPR2L = dutyValue;
 28595  2FA0  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 28596  2FA1  0095               	movwf	21	;volatile
 28597  2FA2  0008               	return
 28598  2FA3                     __end_of_PWM2_LoadDutyValue:	
 28599                           
 28600                           	psect	text97
 28601  2F77                     __ptext97:	
 28602 ;; *************** function _PWM1_LoadDutyValue *****************
 28603 ;; Defined at:
 28604 ;;		line 80 in file "mcc_generated_files/pwm1.c"
 28605 ;; Parameters:    Size  Location     Type
 28606 ;;  dutyValue       2    1[COMMON] unsigned int 
 28607 ;; Auto vars:     Size  Location     Type
 28608 ;;		None
 28609 ;; Return value:  Size  Location     Type
 28610 ;;                  1    wreg      void 
 28611 ;; Registers used:
 28612 ;;		wreg, status,2
 28613 ;; Tracked objects:
 28614 ;;		On entry : 0/0
 28615 ;;		On exit  : 0/0
 28616 ;;		Unchanged: 0/0
 28617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28618 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28621 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28622 ;;Total ram usage:        2 bytes
 28623 ;; Hardware stack levels used:    1
 28624 ;; Hardware stack levels required when called:    4
 28625 ;; This function calls:
 28626 ;;		Nothing
 28627 ;; This function is called by:
 28628 ;;		_nullifyBadge_platformInit
 28629 ;; This function uses a non-reentrant model
 28630 ;;
 28631                           
 28632                           
 28633                           ;psect for function _PWM1_LoadDutyValue
 28634  2F77                     _PWM1_LoadDutyValue:	
 28635                           
 28636                           ;pwm1.c: 82: dutyValue &= 0x03FF;
 28637                           
 28638                           ;incstack = 0
 28639                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2]
 28640  2F77  30FF               	movlw	255
 28641  2F78  05F1               	andwf	PWM1_LoadDutyValue@dutyValue,f
 28642  2F79  3003               	movlw	3
 28643  2F7A  05F2               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
 28644                           
 28645                           ;pwm1.c: 85: if(CCP1CONbits.CCP1FMT)
 28646  2F7B  0025               	movlb	5	; select bank5
 28647  2F7C  1E13               	btfss	19,4	;volatile
 28648  2F7D  2F88               	goto	l6298
 28649                           
 28650                           ;pwm1.c: 86: {
 28651                           ;pwm1.c: 87: dutyValue <<= 6;
 28652  2F7E  3006               	movlw	6
 28653  2F7F                     u3695:	
 28654  2F7F  35F1               	lslf	PWM1_LoadDutyValue@dutyValue,f
 28655  2F80  0DF2               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
 28656  2F81  0B89               	decfsz	9,f
 28657  2F82  2F7F               	goto	u3695
 28658                           
 28659                           ;pwm1.c: 88: CCPR1H = dutyValue >> 8;
 28660  2F83  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 28661  2F84  0092               	movwf	18	;volatile
 28662                           
 28663                           ;pwm1.c: 89: CCPR1L = dutyValue;
 28664  2F85  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 28665  2F86  0091               	movwf	17	;volatile
 28666                           
 28667                           ;pwm1.c: 90: }
 28668  2F87  0008               	return
 28669  2F88                     l6298:	
 28670                           
 28671                           ;pwm1.c: 91: else
 28672                           ;pwm1.c: 92: {
 28673                           ;pwm1.c: 93: CCPR1H = dutyValue >> 8;
 28674  2F88  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 28675  2F89  0092               	movwf	18	;volatile
 28676                           
 28677                           ;pwm1.c: 94: CCPR1L = dutyValue;
 28678  2F8A  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 28679  2F8B  0091               	movwf	17	;volatile
 28680  2F8C  0008               	return
 28681  2F8D                     __end_of_PWM1_LoadDutyValue:	
 28682                           
 28683                           	psect	intentry
 28684  0004                     __pintentry:	
 28685 ;; *************** function _INTERRUPT_InterruptManager *****************
 28686 ;; Defined at:
 28687 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 28688 ;; Parameters:    Size  Location     Type
 28689 ;;		None
 28690 ;; Auto vars:     Size  Location     Type
 28691 ;;		None
 28692 ;; Return value:  Size  Location     Type
 28693 ;;                  1    wreg      void 
 28694 ;; Registers used:
 28695 ;;		wreg, status,2, status,0, pclath, cstack
 28696 ;; Tracked objects:
 28697 ;;		On entry : 0/0
 28698 ;;		On exit  : 0/0
 28699 ;;		Unchanged: 0/0
 28700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28704 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28705 ;;Total ram usage:        1 bytes
 28706 ;; Hardware stack levels used:    1
 28707 ;; Hardware stack levels required when called:    3
 28708 ;; This function calls:
 28709 ;;		_TMR0_ISR
 28710 ;; This function is called by:
 28711 ;;		Interrupt level 1
 28712 ;; This function uses a non-reentrant model
 28713 ;;
 28714                           
 28715  0004                     _INTERRUPT_InterruptManager:	
 28716                           
 28717                           ;incstack = 0
 28718  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 28719                           
 28720                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 28721  0005  3180               	pagesel	$
 28722  0006  0020               	movlb	0	; select bank0
 28723  0007  087F               	movf	127,w
 28724  0008  00F0               	movwf	??_INTERRUPT_InterruptManager
 28725                           
 28726                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 28727  0009  0021               	movlb	1	; select bank1
 28728  000A  1E90               	btfss	16,5	;volatile
 28729  000B  2811               	goto	i1l363
 28730  000C  0020               	movlb	0	; select bank0
 28731  000D  1E90               	btfss	16,5	;volatile
 28732  000E  2811               	goto	i1l363
 28733                           
 28734                           ;interrupt_manager.c: 55: {
 28735                           ;interrupt_manager.c: 56: TMR0_ISR();
 28736  000F  31AE  26B0         	fcall	_TMR0_ISR
 28737  0011                     i1l363:	
 28738                           ;interrupt_manager.c: 58: else
 28739                           ;interrupt_manager.c: 59: {
 28740                           
 28741                           ;interrupt_manager.c: 57: }
 28742                           
 28743  0011  0870               	movf	??_INTERRUPT_InterruptManager,w
 28744  0012  0020               	movlb	0	; select bank0
 28745  0013  00FF               	movwf	127
 28746  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 28747  0015  0009               	retfie
 28748  0016                     __end_of_INTERRUPT_InterruptManager:	
 28749                           
 28750                           	psect	text99
 28751  2EB0                     __ptext99:	
 28752 ;; *************** function _TMR0_ISR *****************
 28753 ;; Defined at:
 28754 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 28755 ;; Parameters:    Size  Location     Type
 28756 ;;		None
 28757 ;; Auto vars:     Size  Location     Type
 28758 ;;		None
 28759 ;; Return value:  Size  Location     Type
 28760 ;;                  1    wreg      void 
 28761 ;; Registers used:
 28762 ;;		wreg, status,2, status,0, pclath, cstack
 28763 ;; Tracked objects:
 28764 ;;		On entry : 0/0
 28765 ;;		On exit  : 0/0
 28766 ;;		Unchanged: 0/0
 28767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28772 ;;Total ram usage:        0 bytes
 28773 ;; Hardware stack levels used:    1
 28774 ;; Hardware stack levels required when called:    2
 28775 ;; This function calls:
 28776 ;;		_TMR0_CallBack
 28777 ;; This function is called by:
 28778 ;;		_INTERRUPT_InterruptManager
 28779 ;; This function uses a non-reentrant model
 28780 ;;
 28781                           
 28782                           
 28783                           ;psect for function _TMR0_ISR
 28784  2EB0                     _TMR0_ISR:	
 28785                           
 28786                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
 28787                           
 28788                           ;incstack = 0
 28789                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 28790  2EB0  0020               	movlb	0	; select bank0
 28791  2EB1  1290               	bcf	16,5	;volatile
 28792                           
 28793                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
 28794  2EB2  0021               	movlb	1	; select bank1
 28795  2EB3  083F               	movf	(_timer0ReloadVal16bit+1)^(0+128),w	;volatile
 28796  2EB4  0020               	movlb	0	; select bank0
 28797  2EB5  0096               	movwf	22	;volatile
 28798                           
 28799                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
 28800  2EB6  0021               	movlb	1	; select bank1
 28801  2EB7  083E               	movf	_timer0ReloadVal16bit^(0+128),w	;volatile
 28802  2EB8  0020               	movlb	0	; select bank0
 28803  2EB9  0095               	movwf	21	;volatile
 28804                           
 28805                           ;tmr0.c: 146: TMR0_CallBack();
 28806  2EBA  31AE  2655         	fcall	_TMR0_CallBack
 28807  2EBC  0008               	return
 28808  2EBD                     __end_of_TMR0_ISR:	
 28809                           
 28810                           	psect	text100
 28811  2E55                     __ptext100:	
 28812 ;; *************** function _TMR0_CallBack *****************
 28813 ;; Defined at:
 28814 ;;		line 151 in file "mcc_generated_files/tmr0.c"
 28815 ;; Parameters:    Size  Location     Type
 28816 ;;		None
 28817 ;; Auto vars:     Size  Location     Type
 28818 ;;		None
 28819 ;; Return value:  Size  Location     Type
 28820 ;;                  1    wreg      void 
 28821 ;; Registers used:
 28822 ;;		wreg, status,2, status,0, pclath, cstack
 28823 ;; Tracked objects:
 28824 ;;		On entry : 0/0
 28825 ;;		On exit  : 0/0
 28826 ;;		Unchanged: 0/0
 28827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28832 ;;Total ram usage:        0 bytes
 28833 ;; Hardware stack levels used:    1
 28834 ;; Hardware stack levels required when called:    1
 28835 ;; This function calls:
 28836 ;;		Absolute function
 28837 ;;		_TMR0_DefaultInterruptHandler
 28838 ;; This function is called by:
 28839 ;;		_TMR0_ISR
 28840 ;; This function uses a non-reentrant model
 28841 ;;
 28842                           
 28843                           
 28844                           ;psect for function _TMR0_CallBack
 28845  2E55                     _TMR0_CallBack:	
 28846                           
 28847                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
 28848                           
 28849                           ;incstack = 0
 28850                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 28851  2E55  0021               	movlb	1	; select bank1
 28852  2E56  083C               	movf	_TMR0_InterruptHandler^(0+128),w
 28853  2E57  043D               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 28854  2E58  1903               	btfsc	3,2
 28855  2E59  0008               	return
 28856                           
 28857                           ;tmr0.c: 156: {
 28858                           ;tmr0.c: 157: TMR0_InterruptHandler();
 28859  2E5A  083D               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 28860  2E5B  008A               	movwf	10
 28861  2E5C  083C               	movf	_TMR0_InterruptHandler^(0+128),w
 28862  2E5D  000A               	callw
 28863  2E5E  31AE               	pagesel	$
 28864  2E5F  0008               	return
 28865  2E60                     __end_of_TMR0_CallBack:	
 28866                           
 28867                           	psect	text101
 28868  2DDE                     __ptext101:	
 28869 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 28870 ;; Defined at:
 28871 ;;		line 165 in file "mcc_generated_files/tmr0.c"
 28872 ;; Parameters:    Size  Location     Type
 28873 ;;		None
 28874 ;; Auto vars:     Size  Location     Type
 28875 ;;		None
 28876 ;; Return value:  Size  Location     Type
 28877 ;;                  1    wreg      void 
 28878 ;; Registers used:
 28879 ;;		None
 28880 ;; Tracked objects:
 28881 ;;		On entry : 0/0
 28882 ;;		On exit  : 0/0
 28883 ;;		Unchanged: 0/0
 28884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28889 ;;Total ram usage:        0 bytes
 28890 ;; Hardware stack levels used:    1
 28891 ;; This function calls:
 28892 ;;		Nothing
 28893 ;; This function is called by:
 28894 ;;		_TMR0_Initialize
 28895 ;;		_TMR0_CallBack
 28896 ;; This function uses a non-reentrant model
 28897 ;;
 28898                           
 28899                           
 28900                           ;psect for function _TMR0_DefaultInterruptHandler
 28901  2DDE                     _TMR0_DefaultInterruptHandler:	
 28902                           
 28903                           ;incstack = 0
 28904                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 28905  2DDE  0008               	return
 28906  2DDF                     __end_of_TMR0_DefaultInterruptHandler:	
 28907  007E                     btemp	set	126	;btemp
 28908  007E                     int$flags	set	126
 28909  007E                     wtemp0	set	126


Data Sizes:
    Strings     556
    Constant    522
    Data        564
    BSS         253
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     79      79
    BANK1            80      8      75
    BANK2            80      0      67
    BANK3            80      0      76
    BANK4            80      0      67
    BANK5            80      0      73
    BANK6            80      0      56
    BANK7            80      0      56
    BANK8            80      0      58
    BANK9            80      0      40
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           16      0       0
    BANK23            0      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    menu_run_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    schedulerInst.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    schedulerInst.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    schedulerInst.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    schedulerInst.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    schedulerExecute$3719	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    secret_check@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    S902$3$0	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    S902$2$0	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    S902$4$0	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 55
		 -> Slot_Wheel(BANK5[55]), secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_29(CODE[5]), 
		 -> STR_28(CODE[5]), STR_27(CODE[11]), STR_26(CODE[13]), STR_23(CODE[43]), 
		 -> STR_22(CODE[40]), STR_21(CODE[27]), STR_20(CODE[25]), STR_19(CODE[30]), 
		 -> STR_18(CODE[35]), STR_17(CODE[22]), STR_16(CODE[26]), STR_15(CODE[21]), 
		 -> STR_14(CODE[19]), STR_13(CODE[6]), STR_12(CODE[8]), STR_11(CODE[9]), 
		 -> STR_10(CODE[5]), STR_9(CODE[18]), STR_7(CODE[6]), STR_6(CODE[10]), 
		 -> STR_5(CODE[6]), STR_4(CODE[5]), secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), 
		 -> slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 55
		 -> Slot_Wheel(BANK5[55]), secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_29(CODE[5]), 
		 -> STR_28(CODE[5]), STR_27(CODE[11]), STR_26(CODE[13]), STR_23(CODE[43]), 
		 -> STR_22(CODE[40]), STR_21(CODE[27]), STR_20(CODE[25]), STR_19(CODE[30]), 
		 -> STR_18(CODE[35]), STR_17(CODE[22]), STR_16(CODE[26]), STR_15(CODE[21]), 
		 -> STR_14(CODE[19]), STR_13(CODE[6]), STR_12(CODE[8]), STR_11(CODE[9]), 
		 -> STR_10(CODE[5]), STR_9(CODE[18]), STR_7(CODE[6]), STR_6(CODE[10]), 
		 -> STR_5(CODE[6]), STR_4(CODE[5]), secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), 
		 -> slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_54(CODE[7]), sprintf@c(BANK0[1]), STR_47(CODE[9]), STR_46(CODE[13]), 
		 -> STR_45(CODE[12]), STR_44(CODE[8]), STR_43(CODE[11]), STR_42(CODE[11]), 
		 -> STR_41(CODE[9]), STR_40(CODE[8]), STR_39(CODE[8]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_53(CODE[3]), STR_52(CODE[9]), STR_51(CODE[9]), STR_50(CODE[9]), 
		 -> STR_49(CODE[9]), STR_48(CODE[9]), STR_25(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 41
		 -> flashy_Main@hit_counter(BANK0[6]), secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), 
		 -> menu_TaskData(BANK4[14]), flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    slot_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Main@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Finished_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Running_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Running_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Running_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Setup@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Setup@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Setup@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    S2252t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Init@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    Shot_Options_Long	PTR unsigned char [9] size(2) Largest target is 13
		 -> STR_47(CODE[9]), STR_46(CODE[13]), STR_45(CODE[12]), STR_44(CODE[8]), 
		 -> STR_43(CODE[11]), STR_42(CODE[11]), STR_41(CODE[9]), STR_40(CODE[8]), 
		 -> STR_39(CODE[8]), 

    Shot_Options	PTR unsigned char [9] size(2) Largest target is 5
		 -> STR_38(CODE[5]), STR_37(CODE[5]), STR_36(CODE[5]), STR_35(CODE[5]), 
		 -> STR_34(CODE[5]), STR_33(CODE[5]), STR_32(CODE[5]), STR_31(CODE[5]), 
		 -> STR_30(CODE[5]), 

    secret_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    secret_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Main@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    secret_Main@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), 

    secret_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Init@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    secret_Init@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    S2709secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    locked_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    locked_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Main@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    locked_Main@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    locked_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Init@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    locked_Init@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_Main@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_display_option@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Init@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_Init@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_option	PTR unsigned char [14] size(2) Largest target is 43
		 -> STR_23(CODE[43]), STR_22(CODE[40]), STR_21(CODE[27]), STR_20(CODE[25]), 
		 -> STR_19(CODE[30]), STR_18(CODE[35]), STR_17(CODE[22]), STR_16(CODE[26]), 
		 -> STR_15(CODE[21]), STR_14(CODE[19]), STR_13(CODE[6]), STR_12(CODE[8]), 
		 -> STR_11(CODE[9]), STR_10(CODE[5]), 

    FLASHY_TEXT_SECRET_TEST	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_9(CODE[18]), 

    FLASHY_TEXT	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_8(CODE[5]), 

    menu_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_run_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_display_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_taskData	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_Main@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_Main@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_Init@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_Init@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_option	PTR unsigned char [4] size(2) Largest target is 10
		 -> STR_7(CODE[6]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 

    displayL2_ClrUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_SetUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_EraseSegDisplay@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_ForceUpdate@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutStr@str	PTR unsigned char  size(2) Largest target is 43
		 -> flashy_Main@hit_counter(BANK0[6]), STR_24(CODE[5]), STR_23(CODE[43]), STR_22(CODE[40]), 
		 -> STR_21(CODE[27]), STR_20(CODE[25]), STR_19(CODE[30]), STR_18(CODE[35]), 
		 -> STR_17(CODE[22]), STR_16(CODE[26]), STR_15(CODE[21]), STR_14(CODE[19]), 
		 -> STR_13(CODE[6]), STR_12(CODE[8]), STR_11(CODE[9]), STR_10(CODE[5]), 
		 -> STR_7(CODE[6]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    displayL2_PutStr@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutChar@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_Initialize@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_Update@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetUserLed@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetSegChar@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    sp__memset	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    displayL1_Initialize@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRelease@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsClr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsSet@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayErase@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayPutStr@str	PTR unsigned char  size(2) Largest target is 43
		 -> flashy_Main@hit_counter(BANK0[6]), STR_24(CODE[5]), STR_23(CODE[43]), STR_22(CODE[40]), 
		 -> STR_21(CODE[27]), STR_20(CODE[25]), STR_19(CODE[30]), STR_18(CODE[35]), 
		 -> STR_17(CODE[22]), STR_16(CODE[26]), STR_15(CODE[21]), STR_14(CODE[19]), 
		 -> STR_13(CODE[6]), STR_12(CODE[8]), STR_11(CODE[9]), STR_10(CODE[5]), 
		 -> STR_7(CODE[6]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    nullifyBadge_segDisplayPutStr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayForceUpdate@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_platformInit@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    marquee@string	PTR unsigned char  size(2) Largest target is 43
		 -> STR_29(CODE[5]), STR_28(CODE[5]), STR_27(CODE[11]), STR_26(CODE[13]), 
		 -> STR_23(CODE[43]), STR_22(CODE[40]), STR_21(CODE[27]), STR_20(CODE[25]), 
		 -> STR_19(CODE[30]), STR_18(CODE[35]), STR_17(CODE[22]), STR_16(CODE[26]), 
		 -> STR_15(CODE[21]), STR_14(CODE[19]), STR_13(CODE[6]), STR_12(CODE[8]), 
		 -> STR_11(CODE[9]), STR_10(CODE[5]), STR_9(CODE[18]), STR_7(CODE[6]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), secret_TaskData(BANK4[14]), 
		 -> locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), flashy_TaskData(BANK8[30]), 
		 -> NULL(NULL[0]), 

    marquee_speedy@string	PTR unsigned char  size(2) Largest target is 43
		 -> STR_23(CODE[43]), STR_22(CODE[40]), STR_21(CODE[27]), STR_20(CODE[25]), 
		 -> STR_19(CODE[30]), STR_18(CODE[35]), STR_17(CODE[22]), STR_16(CODE[26]), 
		 -> STR_15(CODE[21]), STR_14(CODE[19]), STR_13(CODE[6]), STR_12(CODE[8]), 
		 -> STR_11(CODE[9]), STR_10(CODE[5]), secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), 
		 -> slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    schedulerInst.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    S1170t_secret_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1161t_locked_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1067t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1136t_menu_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1118t_flashy_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    secret_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    secret_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    secret_task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    locked_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    locked_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    locked_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    locked_task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    slot_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    slot_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    slot_task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    menu_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    menu_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    menu_task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    flashy_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    flashy_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    flashy_task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    fadeDisplay_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    S1013t_fadeDisplay_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    schedulerExecute@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    schedulerExecute@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    schedulerExecute@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskRemove@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    scheduler_TaskRemove@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    scheduler_TaskRemove@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    scheduler_TaskRemove@task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    scheduler_TaskRemove@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), 

    scheduler_TaskAdd@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskInit@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    scheduler_TaskInit@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    scheduler_TaskInit@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    scheduler_TaskInit@task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    scheduler_TaskInit@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), 

    S923t_scheduler$tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    S902t_schedulerTask$taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    scheduler_TaskRun@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    S902t_schedulerTask$taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    scheduler_TaskRun@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    S902t_schedulerTask$taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    scheduler_TaskRun@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    S902t_schedulerTask$taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    SPI1_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 10
		 -> displayL1_Update@tmpRxBuf(BANK0[10]), 

    SPI1_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 


Critical Paths under _main in COMMON

    _schedulerExecute->_TMR0_Read16bitTimer
    _scheduler_TaskRun->_TMR0_Read16bitTimer
    _secret_check->_strlen
    _slot_Setup->___lwmod
    _nullifyBadge_userLedsClr->_displayL2_ClrUserLeds
    _displayL2_ClrUserLeds->_displayL1_Update
    _sprintf->___lwmod
    _led_rand->___almod
    _rand->___lmul
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _displayL1_SetSegChar->_displayCharReverse
    _nullifyBadge_segDisplayForceUpdate->_displayL2_ForceUpdate
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->___lwdiv
    _displayL2_Initialize->_displayL1_Initialize
    _displayL1_Initialize->_displayL1_Update
    _displayL1_Update->_SPI1_Exchange8bitBuffer
    _SPI1_Exchange8bitBuffer->_SPI1_Exchange8bit
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_schedulerExecute
    _scheduler_TaskAdd->_flashy_Init
    _scheduler_TaskAdd->_locked_Init
    _scheduler_TaskAdd->_menu_Init
    _scheduler_TaskAdd->_secret_Init
    _scheduler_TaskAdd->_slot_Init
    _slot_Init->_nullifyBadge_segDisplayErase
    _secret_Init->_nullifyBadge_segDisplayErase
    _menu_Init->_nullifyBadge_segDisplayErase
    _locked_Init->_nullifyBadge_segDisplayErase
    _flashy_Init->_nullifyBadge_segDisplayErase
    _schedulerExecute->_scheduler_TaskRun
    _scheduler_TaskRun->_slot_Main
    _slot_Running_Animation->_led_circle
    _slot_Finished_Animation->_led_rand
    _menu_Main->_menu_display_option
    _menu_run_option->_menu_clear
    _menu_clear->_nullifyBadge_segDisplayErase
    _menu_display_option->_marquee
    _slot_Setup->___lwmod
    _locked_clear->_nullifyBadge_segDisplayErase
    _displayL2_ClrUserLeds->_displayL1_Update
    _nullifyBadge_segDisplayErase->_displayL2_EraseSegDisplay
    _displayL2_EraseSegDisplay->_displayL2_PutStr
    _sprintf->___lwmod
    _let_alternate->_nullifyBadge_userLedsSet
    _led_roundabout->_nullifyBadge_userLedsSet
    _led_rand->___almod
    _rand->___lmul
    ___almod->_rand
    _led_curtain->_nullifyBadge_userLedsSet
    _led_circle->_nullifyBadge_userLedsSet
    _led_Parody->_nullifyBadge_userLedsSet
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _flashy_display_option->_marquee
    _flashy_display_option->_marquee_speedy
    _marquee_speedy->_nullifyBadge_segDisplayPutStr
    _marquee->_nullifyBadge_segDisplayPutStr
    _nullifyBadge_segDisplayPutStr->_displayL2_PutStr
    _displayL2_PutStr->_displayL2_PutChar
    _displayL2_PutChar->_displayL1_SetSegChar
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->_rand
    _nullifyBadge_platformInit->_displayL2_Initialize
    _displayL1_Initialize->_displayL1_Update

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_schedulerExecute

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  325035
                                             78 BANK0      1     1      0
          _nullifyBadge_platformInit
                   _schedulerExecute
                     _scheduler_Init
                  _scheduler_TaskAdd
                 _scheduler_TaskInit
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskInit                                   1     1      0     319
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskAdd                                    9     8      1   43422
                                             29 BANK0      9     8      1
                   Absolute function *
                        _flashy_Init *
                        _locked_Init *
                          _menu_Init *
                        _secret_Init *
                          _slot_Init *
 ---------------------------------------------------------------------------------
 (2) _slot_Init                                            4     2      2   14353
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (2) _secret_Init                                          4     2      2    6984
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _menu_Init                                            4     2      2    6919
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _locked_Init                                          4     2      2    6984
                                             25 BANK0      4     2      2
                   _locked_lock_leds
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _flashy_Init                                          4     2      2    7074
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsRegister                        1     1      0     209
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayRegister                      1     1      0     220
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_Init                                       3     3      0     145
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _schedulerExecute                                    14    14      0  275752
                                             72 BANK0      6     6      0
                                              0 BANK1      8     8      0
                _TMR0_Read16bitTimer
                  _scheduler_TaskRun
 ---------------------------------------------------------------------------------
 (2) _scheduler_TaskRun                                    1     1      0  275196
                                             71 BANK0      1     1      0
                   Absolute function *
                _TMR0_Read16bitTimer
                        _flashy_Main *
                        _locked_Main *
                          _menu_Main *
                        _secret_Main *
                          _slot_Main *
 ---------------------------------------------------------------------------------
 (3) _slot_Main                                           21    19      2   67882
                                             50 BANK0     21    19      2
                            ___lwmod
                            _marquee
                     _marquee_speedy
                             _memset
            _nullifyBadge_buttonsGet
                               _rand
            _slot_Finished_Animation
             _slot_Running_Animation
                         _slot_Setup
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _slot_Running_Animation                               6     4      2    3731
                                             18 BANK0      6     4      2
                         _led_circle
 ---------------------------------------------------------------------------------
 (4) _slot_Finished_Animation                              6     4      2    4417
                                             29 BANK0      6     4      2
                           _led_rand
 ---------------------------------------------------------------------------------
 (3) _secret_Main                                          8     6      2    4670
                                             50 BANK0      8     6      2
            _nullifyBadge_buttonsGet
                       _secret_check
                       _secret_clear
 ---------------------------------------------------------------------------------
 (4) _secret_clear                                         2     0      2     286
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (4) _secret_check                                        19    16      3    2671
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1      28
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _menu_Main                                            7     5      2   50835
                                             50 BANK0      7     5      2
                         _menu_clear
                _menu_display_option
                    _menu_run_option
            _nullifyBadge_buttonsGet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (4) _menu_run_option                                      2     0      2    6787
                                             27 BANK0      2     0      2
                         _menu_clear
 ---------------------------------------------------------------------------------
 (5) _menu_clear                                           2     0      2    6644
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (4) _menu_display_option                                  6     4      2   28489
                                             44 BANK0      6     4      2
                            ___lwmod
                            _marquee
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (3) _locked_Main                                          7     5      2   38656
                                             50 BANK0      7     5      2
                            ___lwmod
                       _locked_clear
               _locked_get_lock_leds
             _locked_get_unlock_leds
                   _locked_lock_leds
                 _locked_unlock_leds
                            _marquee
            _nullifyBadge_buttonsGet
           _nullifyBadge_userLedsSet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (3) _slot_Setup                                           7     5      2    7403
                                             15 BANK0      7     5      2
                            ___lwmod
                             _memset
                               _rand
 ---------------------------------------------------------------------------------
 (4) _locked_unlock_leds                                   2     2      0       0
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _locked_lock_leds                                     4     4      0      34
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _locked_get_unlock_leds                               4     2      2      34
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _locked_get_lock_leds                                 8     6      2      68
                                              1 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (4) _locked_clear                                         2     0      2    6444
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsClr                             1     1      0    2022
                                             11 BANK0      1     1      0
              _displayL2_ClrUserLeds
 ---------------------------------------------------------------------------------
 (4) _displayL2_ClrUserLeds                                1     1      0    1559
                                             11 COMMON     1     1      0
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayErase                         1     1      0    4124
                                             24 BANK0      1     1      0
          _displayL2_EraseSegDisplay
 ---------------------------------------------------------------------------------
 (4) _displayL2_EraseSegDisplay                            1     1      0    3589
                                             23 BANK0      1     1      0
                   _displayL1_Update
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (3) _flashy_Main                                         14    12      2  112922
                                             50 BANK0     14    12      2
              _flashy_display_option
                         _led_Parody
                         _led_circle
                        _led_curtain
                           _led_rand
                     _led_roundabout
                      _let_alternate
                            _marquee
            _nullifyBadge_buttonsGet
                 _nullifyBadge_irGet
               _nullifyBadge_irTxClr
          _nullifyBadge_irTxRegister
           _nullifyBadge_irTxRelease
               _nullifyBadge_irTxSet
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             32    20     12   13521
                                             15 BANK0     28    16     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    4442
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxSet                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRelease                             2     2      0      67
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRegister                            1     1      0      98
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxClr                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irGet                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_buttonsGet                              3     3      0      46
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _let_alternate                                        2     0      2    3314
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_roundabout                                       8     6      2    8722
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_rand                                            10    10      0    4190
                                             19 BANK0     10    10      0
                            ___almod
           _nullifyBadge_userLedsSet
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 7     5      2     316
                                              4 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     316
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) ___almod                                             11     3      8     613
                                              9 COMMON     3     3      0
                                             11 BANK0      8     0      8
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) _led_curtain                                          8     6      2    8722
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_circle                                           2     0      2    3404
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_Parody                                           8     6      2    8784
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (6) _nullifyBadge_userLedsSet                             3     1      2    3193
                                             13 BANK0      3     1      2
              _displayL2_SetUserLeds
 ---------------------------------------------------------------------------------
 (7) _displayL2_SetUserLeds                                3     1      2    1868
                                             11 COMMON     1     1      0
                                             11 BANK0      2     0      2
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (5) _displayL1_SetUserLed                                 4     2      2     376
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _flashy_display_option                                2     0      2   33223
                                             44 BANK0      2     0      2
                            _marquee
                     _marquee_speedy
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
 ---------------------------------------------------------------------------------
 (4) _marquee_speedy                                      18    12      6   13386
                                             26 BANK0     18    12      6
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _marquee                                             18    14      4   15009
                                             26 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2    1300
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayPutStr                        3     1      2    3224
                                             23 BANK0      3     1      2
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (5) _displayL2_PutStr                                     7     5      2    2406
                                             16 BANK0      7     5      2
                  _displayL2_PutChar
 ---------------------------------------------------------------------------------
 (6) _displayL2_PutChar                                    6     5      1    1993
                                             10 BANK0      6     5      1
               _displayL1_SetSegChar
 ---------------------------------------------------------------------------------
 (7) _displayL1_SetSegChar                                10     8      2    1298
                                              0 BANK0     10     8      2
                 _displayCharReverse
 ---------------------------------------------------------------------------------
 (8) _displayCharReverse                                  11     9      2     331
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayForceUpdate                   1     1      0    1399
                                             11 BANK0      1     1      0
              _displayL2_ForceUpdate
 ---------------------------------------------------------------------------------
 (6) _displayL2_ForceUpdate                                1     1      0    1152
                                             11 COMMON     1     1      0
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4    5272
                                              9 COMMON     2     2      0
                                             11 BANK0      4     0      4
                            ___lwdiv (ARG)
                               _rand (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4    1221
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _TMR0_Read16bitTimer                                 11     9      2     102
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (1) _nullifyBadge_platformInit                            1     1      0    5397
                                             12 BANK0      1     1      0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                 _PWM1_LoadDutyValue
                    _PWM2_Initialize
                 _PWM2_LoadDutyValue
                    _PWM5_Initialize
                 _PWM5_LoadDutyValue
                    _PWM6_Initialize
                 _PWM6_LoadDutyValue
                    _SPI1_Initialize
                  _SYSTEM_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
               _displayL2_Initialize
 ---------------------------------------------------------------------------------
 (2) _displayL2_Initialize                                 1     1      0    4257
                                             11 BANK0      1     1      0
               _displayL1_Initialize
                             _memset
 ---------------------------------------------------------------------------------
 (3) _displayL1_Initialize                                 1     1      0    2640
                                             11 COMMON     1     1      0
                   _displayL1_Update
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    1457
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (5) _displayL1_Update                                    13    13      0    1085
                                              9 COMMON     2     2      0
                                              0 BANK0     11    11      0
            _SPI1_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bitBuffer                              7     5      2     759
                                              2 COMMON     7     5      2
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     121
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM5_Initialize
                    _PWM6_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      98
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM6_LoadDutyValue                                   4     2      2     196
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM5_LoadDutyValue                                   4     2      2     272
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_LoadDutyValue                                   2     0      2     166
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM1_LoadDutyValue                                   2     0      2     166
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          1     1      0       0
                                              0 COMMON     1     1      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (13) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (14) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _nullifyBadge_platformInit
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM1_LoadDutyValue
     _PWM2_Initialize
     _PWM2_LoadDutyValue
     _PWM5_Initialize
     _PWM5_LoadDutyValue
     _PWM6_Initialize
     _PWM6_LoadDutyValue
     _SPI1_Initialize
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _PWM1_Initialize
       _PWM2_Initialize
       _PWM5_Initialize
       _PWM6_Initialize
       _SPI1_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
         _TMR0_StartTimer
       _TMR2_Initialize
         _TMR2_StartTimer
       _TMR4_Initialize
         _TMR4_StartTimer
       _WDT_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
     _TMR4_Initialize
       _TMR4_StartTimer
     _displayL2_Initialize
       _displayL1_Initialize
         _displayL1_Update
           _SPI1_Exchange8bitBuffer
             _SPI1_Exchange8bit
         _memset
       _memset
   _schedulerExecute
     _TMR0_Read16bitTimer
     _scheduler_TaskRun
       Absolute function(Fake) *
       _TMR0_Read16bitTimer *
       _flashy_Main *
         _flashy_display_option
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_circle
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_rand
           ___almod
             _rand (ARG)
               ___lmul
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _rand
             ___lmul
         _led_roundabout
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _let_alternate
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_irGet
         _nullifyBadge_irTxClr
         _nullifyBadge_irTxRegister
         _nullifyBadge_irTxRelease
         _nullifyBadge_irTxSet
         _nullifyBadge_segDisplayForceUpdate
           _displayL2_ForceUpdate
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _nullifyBadge_segDisplayPutStr
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
       _locked_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _locked_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _locked_get_lock_leds
         _locked_get_unlock_leds
         _locked_lock_leds
         _locked_unlock_leds
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _menu_Main *
         _menu_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_display_option
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_run_option
           _menu_clear
             _nullifyBadge_segDisplayErase
               _displayL2_EraseSegDisplay
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
                 _displayL2_PutStr
                   _displayL2_PutChar
                     _displayL1_SetSegChar
                       _displayCharReverse
             _nullifyBadge_userLedsClr
               _displayL2_ClrUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _nullifyBadge_buttonsGet
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _secret_Main *
         _nullifyBadge_buttonsGet
         _secret_check
           ___bmul
           _strlen
         _secret_clear
       _slot_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _marquee_speedy
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _memset
         _nullifyBadge_buttonsGet
         _rand
           ___lmul
         _slot_Finished_Animation
           _led_rand
             ___almod
               _rand (ARG)
                 ___lmul
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _rand
               ___lmul
         _slot_Running_Animation
           _led_circle
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
         _strlen
   _scheduler_Init
   _scheduler_TaskAdd
     Absolute function(Fake) *
     _flashy_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _locked_Init *
       _locked_lock_leds
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _menu_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _secret_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _slot_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
       _slot_Setup
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _memset
         _rand
           ___lmul
   _scheduler_TaskInit

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      43       9       83.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      43      13       83.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     294      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      49      16       91.2%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      38      18       70.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      38      20       70.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      3A      22       72.5%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      28      24       50.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     294      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              10      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23               0      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24               0      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25               0      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Jul 25 07:17:45 2017

                          _SPI1_Exchange8bit 2E25                                            pc 0002  
           __size_of_slot_Finished_Animation 0027                               ___bmul@product 0073  
                 __end_of_gamma_table_256x1k 1200                           ?_SPI1_Exchange8bit 0070  
                                __CFG_CP$OFF 0000                                           l18 2E2A  
                      _displayL2_ClrUserLeds 2ECB                          ___wmul@multiplicand 0073  
                   marquee_speedy@multiplier 003E                                 ?_led_curtain 0030  
              nullifyBadge_buttonsGet@retVal 0073                  __size_of_PWM6_LoadDutyValue 0016  
                                __CFG_LVP$ON 0000                   ??_nullifyBadge_userLedsClr 007C  
                 ??_nullifyBadge_userLedsSet 007C                                          l208 2E3E  
                                        l615 1A08                                          _GIE 005F  
                                        l999 23FB                               led_Parody@leds 0034  
            ??_nullifyBadge_segDisplayPutStr 007C                                          _PR2 001E  
                                        _PR4 0416                                 __CFG_CPD$OFF 0000  
                             _scheduler_Init 2045                               led_Parody@size 0036  
                        ??_SPI1_Exchange8bit 0071                     ??_slot_Running_Animation 0034  
                         _locked_unlock_leds 2F50                  marquee_speedy@string_length 0048  
                            _TMR2_Initialize 2E41               SPI1_Exchange8bitBuffer@dataOut 0073  
                   displayL1_Update@tmpRxBuf 0020                                          wreg 0009  
                              _slot_taskData 00BA                 marquee_speedy@display_string 0041  
                displayL1_Initialize@display 007B                                         S8994 28EC  
        nullifyBadge_userLedsSet@userLedData 002D                              led_curtain@leds 0034  
                    secret_Main@secret_found 0056                              led_curtain@size 0036  
                       _displayL1_Initialize 2F3D                  slot_Finished_Animation@data 0041  
                                       l1230 2150                                         l1144 0BD4  
                                       l1136 0AF4                                         l1234 2FF9  
                                       l1139 0B61                                         l1421 055C  
                                       l1149 0C49                                         l1254 152C  
                                       l1424 05B5                                         l1472 13A4  
                                       l1633 1A68                                         l1394 256F  
                                       l1565 2017                                         l7012 2295  
                                       l7102 230B                                         l7120 2207  
                                       l7040 2F11                                         l7008 228A  
                                       l6314 2F9E                                         l7106 2314  
                                       l7026 20D7                                         l7124 2213  
                                       l7028 20E3                                         l7060 1A75  
                                       l8100 0E06                                         l7118 21FB  
                                       l7150 1B2C                                         l7222 2EC9  
                                       l7128 221C                                         l7144 1B05  
                                       l7080 1ABC                                         l7072 1AA3  
                                       l8112 0E39                                         l8104 0E19  
                                       l7066 1A7D                                         l7410 12DA  
                                       l7242 2F1C                                         l8114 0E3E  
                                       l8018 0CA5                                         l8202 145D  
                                       l7068 1A8B                                         l7076 1AAE  
                                       l7228 2011                                         l7412 12E8  
                                       l7500 1264                                         l7340 18B2  
                                       l8108 0E26                                         l8036 0CFB  
                                       l8140 0F36                                         l8220 14BD  
                                       l8212 149A                                         l7094 22ED  
                                       l7174 1BA3                                         l7270 2F6E  
                                       l7430 131F                                         l7422 12F7  
                                       l7406 12D8                                         l7502 1425  
                                       l7326 274B                                         l7246 2F22  
                                       l8142 0F59                                         l8134 0E92  
                                       l7096 22F9                                         l7168 1B7C  
                                       l7280 1A35                                         l7184 2611  
                                       l7432 132A                                         l7424 130B  
                                       l7416 12F5                                         l7352 23DD  
                                       l7344 23C3                                         l8064 0D77  
                                       l8056 0D4E                                         l8232 150A  
                                       l8320 1EEE                                         l8304 1EA2  
                                       l6298 2F88                                         l7194 2FD3  
                                       l7370 1220                                         l7442 133E  
                                       l8154 0F89                                         l8138 0EE5  
                                       l8066 0D7C                                         l8170 0FC9  
                                       l8234 1515                                         l8226 14ED  
                                       l6900 2240                                         l7460 1379  
                                       l7436 1335                                         l7444 135C  
                                       l7348 23D0                                         l7604 257E  
                                       l8172 0FD6                                         l8148 0F70  
                                       l8092 0DE3                                         l8252 1570  
                                       l8340 1F52                                         l8324 1F06  
                                       l8308 1EBA                                         l7374 1248  
                                       l7454 1373                                         l7390 1295  
                                       l7358 23EA                                         l7614 2196  
                                       l8422 0338                                         l8166 0FBD  
                                       l8086 0DD0                                         l8246 1544  
                                       l7384 1285                                         l8408 0243  
                                       l8096 0DF4                                         l7800 091E  
                                       l7704 1753                                         l7632 161B  
                                       l8264 159D                                         l8256 157A  
                                       l8248 1558                                         l8352 1F86  
                                       l8336 1F3A                                         l7490 13E7  
                                       l7474 13C0                                         l7466 1398  
                                       l7570 1CB4                                         l8450 04F9  
                                       l8434 0409                                         l7714 177F  
                                       l7650 1661                                         l8274 15D5  
                                       l8266 15AA                                         l6932 266B  
                                       l6940 2692                                         l7484 13D9  
                                       l7476 13C3                                         l7572 1D66  
                                       l8452 056B                                         l8444 04B6  
                                       l7820 095D                                         l7740 17EE  
                                       l8356 1F9E                                         l8292 1E6B  
                                       l8372 1FE3                                         l6950 269A  
                                       l6942 2697                                         l6918 241E  
                                       l7478 13C7                                         l7398 12C4  
                                       l7566 1D4F                                         l7814 0949  
                                       l7750 0865                                         l7718 178F  
                                       l7654 1687                                         l8278 1600  
                                       l8374 1FF5                                         l8286 1E51  
                                       l6936 267A                                         l7568 1D60  
                                       l8456 059E                                         l8472 060F  
                                       l7912 0AF8                                         l7808 0936  
                                       l7728 17BB                                         l7664 16AA  
                                       l7656 168D                                         l8368 1FD2  
                                       l6938 268E                                         l7498 13EB  
                                       l7906 0ADF                                         l7850 09D5  
                                       l7826 096D                                         l7666 16AE  
                                       l7658 1695                                         l8642 1BB6  
                                       l6892 222F                                         l6980 21CD  
                                       l7596 255C                                         l8388 0110  
                                       l7932 0B4C                                         l7844 09B7  
                                       l7836 0992                                         l7780 08D5  
                                       l7684 1705                                         l8652 1C19  
                                       l7790 08FA                                         l7686 170A  
                                       l7678 16E2                                         l7872 0A4B  
                                       l7856 09EB                                         l7880 0A72  
                                       l7848 09C4                                         l8680 1CA6  
                                       l8648 1C0E                                         l8656 1C21  
                                       l7938 0B65                                         l7882 0A7D  
                                       l7778 08C6                                         l7698 173E  
                                       l8842 1E3E                                         l7868 0A36  
                                       l7958 0BBB                                         l7886 0A8C  
                                       l7878 0A5E                                         l7968 0BD8  
                                       l7988 0C30                                         l7998 0C4D  
                                       STR_1 313E                                         l8992 08CC  
                                       STR_2 3139                          ?_locked_unlock_leds 0070  
                                       STR_3 2858                                         STR_4 3134  
                                       STR_5 30ED                                         l8996 0F3B  
                                       STR_6 308C                                         STR_7 30E7  
                                       l8998 23F0                                         STR_8 312F  
                                       STR_9 303E                      __end_of_PWM1_Initialize 2E6B  
                                       _LATA 010C                                         _LATB 010D  
                                       _LATC 010E                                         u4105 2537  
                                       u4215 22F0                                         u4055 2296  
                                       u4305 220D                                         u4145 1A80  
                                       u4065 229D                                         u4330 1ADC  
                                       u4235 22FA                                         u4315 2214  
                                       u4245 2304                                         u4165 1A99  
                                       u4255 230C                                         u4175 1AA4  
                                       u4360 1B53                                         u3715 2F95  
                                       u4515 1A19                              led_Parody@count 0030  
                                       u4285 21FE                                         u4525 2268  
                                       u4445 2018                                         u4535 2276  
                                       u4455 201D                                         u2960 27A9  
                                       u3665 2FB2                                         u3675 2FC8  
                                       u5195 0D71                                         u4645 12EE  
                                       u5614 1C44                                         u3695 2F7F  
                                       u4735 13B3                                         u5615 1C42  
                                       u4825 1D19                                         u5554 1BC7  
                                       u4835 1CBA                                         u5635 1C98  
                                       u5555 1BC5                                         u4925 16FF  
                                       u5574 1BE6                                         u4695 138E  
                                       u5575 1BE4                                         u4795 214A  
                                       _PLLR 48E0                                         _TMR2 001D  
                                       _TMR4 0415                                         _WPUA 020C  
                                       _WPUB 020D                                         _WPUC 020E  
                               __CFG_WRT$OFF 0000                                __CFG_FCMEN$ON 0000  
                                       _main 1D68                                         _rand 2501  
                            _TMR0_StartTimer 2DDF                                         fsr0h 0005  
                                       fsr1h 0007                                         indf0 0000  
                                       fsr0l 0004                                         indf1 0001  
                                       fsr1l 0006                                         btemp 007E  
                              __CFG_BOREN$ON 0000                             ??_marquee_speedy 0040  
                              __CFG_BORV$LOW 0000                                         start 0016  
                  __end_of_SPI1_Exchange8bit 2E2E                          _menu_display_option 1867  
                            _PWM5_Initialize 2E8C                          locked_Main@taskData 0052  
               displayL2_ClrUserLeds@display 007B                      displayL2_PutStr@display 0035  
                              __CFG_CSWEN$ON 0000                            ___bmul@multiplier 0074  
                              __CFG_MCLRE$ON 0000                         _displayL1_SetSegChar 23FC  
                 __end_of_PWM5_LoadDutyValue 2FB9                          menu_run_option@data 003B  
                       _displayL2_Initialize 2155                         ??_locked_unlock_leds 0071  
                    __end_of_PWM2_Initialize 2E76                      __end_of_TMR0_Initialize 20D3  
             ??_TMR0_DefaultInterruptHandler 0070               __size_of_OSCILLATOR_Initialize 000A  
                     __end_of_scheduler_Init 2060                         _displayL1_SetUserLed 2F2B  
                      marquee@display_string 003F                __end_of_OSCILLATOR_Initialize 2E41  
                    ?_locked_get_unlock_leds 0071                      _locked_locking_leds_idx 00A2  
                            __end_of___almod 1AC5                                        ?_main 0070  
                                      ?_rand 0024                                        STR_10 312F  
                                      STR_11 30B1                                        STR_20 28D3  
                                      STR_12 30D2                                        STR_21 289E  
                                      STR_13 30E1                                        STR_22 2835  
                                      STR_14 302B                                        STR_30 3116  
                                      STR_23 280A                                        STR_15 3016  
                                      STR_31 310C                                        STR_24 312A  
                                      STR_16 28B9                                        STR_40 30C2  
                                      STR_32 30F3                                        STR_25 3143  
                                      STR_17 3000                                        STR_41 3096  
                                      STR_33 311B                                __CFG_WDTE$OFF 0000  
                                      STR_50 30A8                                        STR_26 305D  
                                      STR_18 285D                                        STR_42 3081  
                                      STR_34 30F8                                        STR_27 305F  
                                      STR_51 30A8                                        STR_19 2880  
                                      STR_43 3076                                        STR_35 3102  
                                      STR_52 30A8                                        STR_28 3125  
                                      STR_44 30BA                                        STR_36 3107  
                                      STR_53 3147                                        STR_29 3120  
                                      STR_45 306A                                        STR_37 30FD  
                                      STR_54 30DA                                        STR_46 3050  
                                      STR_38 3111                                        STR_47 309F  
                                      STR_39 30CA                                        STR_48 30A8  
                                      STR_49 30A8                             _schedulerExecute 1C29  
                                      _T2CON 001F                      _flashy_leds_state_track 00AE  
                                      _T4CON 0417                               __CFG_DEBUG$OFF 0000  
                            __end_of___lwdiv 2319                              __end_of___lwmod 2221  
                                      i1l363 0011                                        _OSCEN 091D  
                                      _TMR0H 0016                                        _TMR0L 0015  
                             _led_roundabout 247E                         ?_menu_display_option 004C  
             nullifyBadge_irTxRegister@badge 0071                   __end_of_scheduler_TaskInit 23C2  
                                      _TRISA 008C                                        _TRISB 008D  
                                      _TRISC 008E             __size_of_nullifyBadge_buttonsGet 0031  
          __size_of_TMR0_SetInterruptHandler 0006                              _TMR4_Initialize 2E76  
                            _PWM6_Initialize 2E98                          ___lmul@multiplicand 0075  
                  ?_TMR0_SetInterruptHandler 0071                        _displayL2_ForceUpdate 2DFD  
                     ??_locked_get_lock_leds 0073                             __end_of_TMR0_ISR 2EBD  
                               _badge_locked 00C4                                 ?_locked_Main 0052  
                               ?_locked_Init 0039                        ?_displayL1_Initialize 0070  
                            __end_of_dpowers 280A                      _SPI1_Exchange8bitBuffer 2662  
                             _WDT_Initialize 2DEE                              __end_of_isdigit 2ECB  
                            __end_of_marquee 1BAF                                        _randx 00D9  
                                      pclath 000A           __size_of_nullifyBadge_platformInit 0055  
                                      status 0003                                        wtemp0 007E  
                            __end_of_sprintf 142C                              _TMR2_StartTimer 2DE2  
          __size_of_nullifyBadge_irTxRelease 000B                             _menu_option_size 00B2  
                  ?_nullifyBadge_irTxRelease 0070                     __size_of_SPI1_Initialize 0008  
                     menu_Main@buttonPressed 0056                 displayL1_SetSegChar@charData 0028  
                      ?_displayL1_SetSegChar 0020                              __initialization 0018  
                          ?_displayL1_Update 0070                                 __end_of_main 1E43  
                               __end_of_rand 2544                        ?_displayL2_Initialize 0070  
                          ?_displayL2_PutStr 0030                       __size_of_let_alternate 0014  
                     ?_displayL2_ClrUserLeds 0070               __end_of_locked_get_unlock_leds 3000  
                         ??_displayL1_Update 0079                      __end_of_TMR2_Initialize 2E4B  
                      ?_displayL1_SetUserLed 0071                  ?_INTERRUPT_InterruptManager 0070  
                         ??_displayL2_PutStr 0032             displayCharReverse@retValUpperRev 007A  
                            ?_scheduler_Init 0070                       __end_of_led_roundabout 24BF  
                                     ??_main 006E                                       ??_rand 0026  
                              slot_Main@data 0065                         _nullifyBadge_irTxClr 2DE8  
                      ??_menu_display_option 007C                         _nullifyBadge_irTxSet 2DEB  
                               ?_secret_Main 0052                                 ?_secret_Init 0039  
            __size_of_slot_Running_Animation 0046                       __end_of_WDT_Initialize 2DF2  
                              slot_Init@data 003B        __end_of_nullifyBadge_segDisplayPutStr 2E55  
     __size_of_nullifyBadge_segDisplayPutStr 000A                _nullifyBadge_segDisplayPutStr 2E4B  
                    __end_of_TMR0_StartTimer 2DE2                              scheduler_Init@k 0073  
             nullifyBadge_platformInit@badge 002C                                       _CCPR1H 0292  
                                     _CCPR2H 0296                                       _CCPR1L 0291  
                                     _CCPR2L 0295                                       _ANSELA 018C  
                                     _ANSELB 018D                                       _ANSELC 018E  
                                     _T0CON0 0017                                       _T0CON1 0018  
                           ?_PWM1_Initialize 0070                                       _ODCONA 028C  
                                     _ODCONB 028D                                       _ODCONC 028E  
                    __end_of_PWM5_Initialize 2E98                  __end_of_TMR0_Read16bitTimer 20B5  
                                     _OSCFRQ 091F                                       _WDTCON 0097  
                            _TMR4_StartTimer 2DE5                        SPI1_Exchange8bit@data 0071  
                          _scheduler_TaskAdd 1BAF                     __size_of_menu_run_option 003A  
                   __end_of_locked_lock_leds 2045            __end_of_nullifyBadge_platformInit 2800  
                 __size_of_SPI1_Exchange8bit 0009                            _scheduler_TaskRun 07DF  
                             __CFG_PWRTE$OFF 0000                           ?_scheduler_TaskAdd 003D  
                         ?_scheduler_TaskRun 0070                      _slot_Finished_Animation 217B  
                                     ___bmul 2F1A                             __end_of_led_rand 2619  
                                     ___lmul 2281                                    ??___almod 0079  
                   locked_get_lock_leds@leds 0077                                   _Shot_Index 007C  
                                     ___wmul 200F                               __CFG_STVREN$ON 0000  
                   locked_get_lock_leds@size 0075                                       _deaths 00A8  
                       __size_of_flashy_Main 07E7                         __size_of_flashy_Init 0096  
                                  ??___lwdiv 0075                                    ??___lwmod 0079  
                      _flashy_display_option 1200                             ?_TMR0_Initialize 0070  
                           ?_PWM2_Initialize 0070                                ?_locked_clear 0039  
                                     _memset 2FCF                      __end_of_PWM6_Initialize 2EA4  
                    __end_of_TMR4_Initialize 2E81                          ??_scheduler_TaskAdd 003E  
           nullifyBadge_segDisplayPutStr@str 0037             __end_of_nullifyBadge_userLedsClr 2E15  
           __end_of_nullifyBadge_userLedsSet 2F1A                          ??_scheduler_TaskRun 007C  
                            ?_led_roundabout 0030                        ?_nullifyBadge_irTxClr 0070  
                      ?_nullifyBadge_irTxSet 0070                                       _strlen 20D3  
                               __pdataBIGRAM 26F0                         __size_of_led_curtain 0041  
                                 _Slot_Wheel 02B2                       ?_displayL2_ForceUpdate 0070  
                                  ??_isdigit 0071                                    ??_marquee 003E  
                  ??_SPI1_Exchange8bitBuffer 0074                              ?_WDT_Initialize 0070  
                     ??_displayL1_Initialize 007B                        _displayL2_SetUserLeds 20F1  
              TMR0_Read16bitTimer@readValLow 007A                        __end_of_TMR0_CallBack 2E60  
                              _let_alternate 2F63                      __end_of_TMR2_StartTimer 2DE5  
   TMR0_SetInterruptHandler@InterruptHandler 0071                                    ??_sprintf 003B  
                 ?_displayL2_EraseSegDisplay 0070                   __end_of_nullifyBadge_irGet 2DF7  
                       locked_lock_leds@size 0073                            _SYSTEM_Initialize 210F  
           displayL2_EraseSegDisplay@display 0037                   ?_nullifyBadge_irTxRegister 0070  
                          _menu_options_leds 01AC                    __end_of_scheduler_TaskAdd 1C29  
                    __end_of__initialization 00D3                    secret_check@buttonPressed 0079  
                  __end_of_scheduler_TaskRun 0800                       menu_display_option@led 0050  
                    _roundabout_leds_inverse 03BC                           ?_SYSTEM_Initialize 0070  
                 __end_of_PWM2_LoadDutyValue 2FA3                       _slot_Running_Animation 2544  
                     ??_displayL1_SetSegChar 0022                  PWM1_LoadDutyValue@dutyValue 0071  
                  secret_check@currents_size 0025                          ___bmul@multiplicand 0071  
                              led_rand@spark 003B                       ??_displayL2_Initialize 007C  
                          _displayL2_PutChar 26B0                               __pcstackCOMMON 0070  
                displayL1_SetSegChar@charPos 0021                  __size_of_displayCharReverse 002F  
                               __pidataBANK1 207C                                 __pidataBANK2 0002  
                               __pidataBANK3 21A2                                 __pidataBANK4 0800  
                               __pidataBANK5 2619                                 __pidataBANK6 2351  
                               __pidataBANK7 2319                                 __pidataBANK8 2060  
                        ??_SYSTEM_Initialize 0073                                    ?_TMR0_ISR 0070  
                     ??_displayL1_SetUserLed 0073                           ?_displayL2_PutChar 002A  
                                 _badge_inst 01DA                               ??_locked_clear 007C  
                          ??_SPI1_Initialize 0071                  displayL1_SetSegChar@display 0027  
                         _PWM1_LoadDutyValue 2F77                        scheduler_TaskAdd@task 003D  
                           ?_TMR2_Initialize 0070                          locked_Init@taskData 0039  
                        _flashy_sparkle_rate 00AC         __end_of_nullifyBadge_segDisplayErase 2E0F  
      __size_of_nullifyBadge_segDisplayErase 0006                 _nullifyBadge_segDisplayErase 2E09  
                    _nullifyBadge_buttonsGet 2250                          ??_displayL2_PutChar 002B  
                        ?_PWM1_LoadDutyValue 0071                               ?_let_alternate 0030  
                         _gamma_table_256x1k 1000                             ?_TMR0_StartTimer 0070  
                    __end_of_TMR4_StartTimer 2DE8                    __end_of_SYSTEM_Initialize 2130  
                         led_curtain@counter 0030                                 sprintf@width 0048  
                              _menu_TaskData 023C                                   __pbssBANK1 00A0  
                                 __pbssBANK2 0120                                   __pbssBANK3 01C8  
                                 __pbssBANK4 0220                                   __pbssBANK8 0420  
                                 __pbssBANK9 04A0                         __size_of_locked_Main 01DD  
                       __size_of_locked_Init 0063                          secret_Main@taskData 0052  
                           ?_PWM5_Initialize 0070               ?_nullifyBadge_segDisplayPutStr 0037  
                          _flashy_option_idx 00A6                     __end_of_schedulerExecute 1CAD  
                      _TMR4_InterruptHandler 00C0           nullifyBadge_userLedsRegister@badge 0071  
                         __size_of_menu_Main 01F7                           __size_of_menu_Init 0062  
                  __end_of_displayL2_PutChar 2702                    ??_slot_Finished_Animation 003F  
                              ?_secret_check 0077                         ??_PWM1_LoadDutyValue 0073  
                              ?_secret_clear 0071                               _SSP1DATPPSbits 0E21  
                            _secret_TaskData 0220                                   __pmaintext 1D68  
                                    ?___bmul 0071             __end_of_TMR0_SetInterruptHandler 2DFD  
                                    ?___lmul 0071                       ?_flashy_display_option 004C  
                                    ?___wmul 0071                        scheduler_TaskRun@task 0067  
                                 ??_TMR0_ISR 0070                              __CFG_PPS1WAY$ON 0000  
                 __end_of_PWM6_LoadDutyValue 2FCF                                   __pintentry 0004  
                          ??_menu_run_option 007C                                      _CCP1CON 0293  
                                    _CCP2CON 0297                                      ?_memset 0071  
                             ___lmul@product 0020                       ??_nullifyBadge_irTxClr 0071  
                           ?_TMR4_Initialize 0070                             ?_PWM6_Initialize 0070  
                     ??_nullifyBadge_irTxSet 0071                               _SSP1CLKPPSbits 0E20  
                        __CFG_RSTOSC$HFINT32 0000                                      ?_strlen 0071  
                                 _led_Parody 19F2                ?_nullifyBadge_segDisplayErase 0070  
                     ?_displayL2_SetUserLeds 002B                           _PWM5_LoadDutyValue 2FA3  
                                    _OSCCON1 0919                     displayL2_PutChar@display 002F  
                                    _OSCCON3 091B                           __size_of_slot_Main 0572  
                         __size_of_slot_Init 0064                                      _NVMADRH 0892  
                                    _NVMADRL 0891                                      _NVMDATH 0894  
                                    _OSCTUNE 091E                                      _NVMDATL 0893  
                                    _NVMCON2 0896                                      _PWM5DCH 0618  
                                    _PWM5DCL 0617                                      _PWM6DCH 061B  
                                    _PWM6DCL 061A                                      _PWM5CON 0619  
                                    _PWM6CON 061C                                      _SSP1ADD 0212  
                       __size_of_secret_Main 01BD                                      _PPSLOCK 0E0F  
                                    _SSP1BUF 0211                                   _led_circle 2E2E  
                       __size_of_secret_Init 005B                             ?_TMR2_StartTimer 0070  
                                  ?_led_rand 0070                          ?_PWM5_LoadDutyValue 0071  
                    _FLASHY_TEXT_SECRET_TEST 00E1                     flashy_Main@buttonPressed 005C  
                 __size_of_scheduler_TaskAdd 007A            __size_of_nullifyBadge_userLedsClr 0006  
                 __size_of_scheduler_TaskRun 0021            __size_of_nullifyBadge_userLedsSet 0011  
                         _scheduler_TaskInit 2389                    ?_nullifyBadge_userLedsClr 0070  
                  ?_nullifyBadge_userLedsSet 002D                               ??_secret_check 0020  
                             ??_secret_clear 0073                      ??_displayL2_ClrUserLeds 007B  
               displayL2_SetUserLeds@display 007B                             ??_scheduler_Init 0071  
                        ?_scheduler_TaskInit 0070                              __size_of___bmul 0011  
                                    ___almod 1A57                              __size_of___lmul 0032  
                            __size_of___wmul 001B              ??_nullifyBadge_userLedsRegister 0071  
                                    ___lwdiv 22E5                           scheduler_TaskAdd@k 0045  
                                    ___lwmod 21F4                         ??_PWM5_LoadDutyValue 0073  
                __size_of_locked_unlock_leds 0013                    ??_nullifyBadge_buttonsGet 0071  
                            _roundabout_leds 033C                      scheduler_Init@scheduler 0072  
                            __size_of_memset 0018                        displayL1_SetSegChar@c 0020  
                            _locked_TaskData 022E                                   _menu_clear 258A  
                                    __ptext1 2389                                      __ptext2 1BAF  
                                    __ptext3 180C                                      __ptext4 192B  
                                    __ptext5 18C9                                      __ptext6 0749  
                                    __ptext7 198E                                      __ptext8 2000  
                                    __ptext9 2E1D                              __size_of_strlen 001E  
            __end_of_slot_Finished_Animation 21A2                                      _dpowers 2800  
                             slot_Setup@data 0034                        _OSCILLATOR_Initialize 2E37  
                                    _oddeven 00B6                                    _T2CONbits 001F  
                          __end_of_menu_Main 1800                            __end_of_menu_Init 192B  
                                    _isdigit 2EBD                              ??_let_alternate 007C  
                                    _marquee 1B38                                    _T4CONbits 0417  
                   ??_PIN_MANAGER_Initialize 0071      nullifyBadge_segDisplayForceUpdate@badge 002B  
                  __size_of_displayL1_Update 0011                         ??_scheduler_TaskInit 0071  
                  __size_of_displayL2_PutStr 002A                   __size_of_SYSTEM_Initialize 0021  
                                    _sprintf 125F                                      clrloop0 2EA5  
                           ?_TMR4_StartTimer 0070                __size_of_locked_get_lock_leds 0025  
                        displayL2_PutStr@str 0030                                   ??_led_rand 0033  
                       end_of_initialization 00D3                         __end_of_locked_clear 2501  
                                    init_ram 1800                                      memset@c 0073  
                                    memset@n 0075                                      memset@p 0077  
                              secret_check@i 0028                                      initloop 1801  
                               marquee@count 003C                   __size_of_displayL2_PutChar 0052  
                          ?_locked_lock_leds 0070                            __end_of_slot_Main 0649  
                          __end_of_slot_Init 19F2                             ??_led_roundabout 0032  
                         ??_locked_lock_leds 0071               TMR0_Read16bitTimer@readValHigh 007B  
                __end_of_menu_display_option 18C9                       slot_Main@buttonPressed 0064  
                                    strlen@s 0071                      ??_displayL2_ForceUpdate 007B  
                    __size_of_marquee_speedy 0073                           secret_check@inputs 0027  
                           ??_WDT_Initialize 0071                     _TMR0_SetInterruptHandler 2DF7  
                                  _PORTAbits 000C                                    _PORTBbits 000D  
                                  _PORTCbits 000E                nullifyBadge_userLedsClr@badge 002B  
                                ?_led_Parody 0030                                   _slot_Setup 2702  
                    displayL1_Update@display 002A                                  ?_led_circle 0030  
                    menu_display_option@data 004C               ??_nullifyBadge_segDisplayErase 007C  
                    menu_display_option@size 004E                             __CFG_FEXTOSC$OFF 0000  
                ??_displayL2_EraseSegDisplay 007C              __end_of_nullifyBadge_buttonsGet 2281  
                              _schedulerInst 01C8                     _nullifyBadge_irTxRelease 2E81  
                    ?_slot_Running_Animation 0032                  ??_nullifyBadge_irTxRegister 0071  
                                _CCP1CONbits 0293                              _SPI1_Initialize 2E15  
                                _CCP2CONbits 0297                            slot_Main@taskData 0052  
                              ??_flashy_Main 0054                                ??_flashy_Init 007C  
                 ?_nullifyBadge_platformInit 0070                 __size_of_TMR0_Read16bitTimer 001D  
                   __size_of_PWM1_Initialize 000B                          secret_Init@taskData 0039  
                       _timer0ReloadVal16bit 00BE                           _nullifyBadge_irGet 2DF2  
                            flashy_Main@data 005E                               __end_of___bmul 2F2B  
              nullifyBadge_userLedsSet@badge 002F                               __end_of___lmul 22B3  
                              __pidataBIGRAM 0649                                ??_led_curtain 0032  
                             __end_of___wmul 202A              slot_Finished_Animation@taskData 003D  
                     flashy_Main@hit_counter 0056                            __size_of_TMR0_ISR 000D  
                         _PWM2_LoadDutyValue 2F8D                                  ?_menu_clear 0039  
                     ?_OSCILLATOR_Initialize 0070                               __end_of_memset 2FE7  
                        ?_nullifyBadge_irGet 0070                              flashy_Init@data 003B  
      __end_of_nullifyBadge_userLedsRegister 200F       __size_of_nullifyBadge_userLedsRegister 000F  
              _nullifyBadge_userLedsRegister 2000                         __end_of_secret_check 1D68  
                            _menu_option_idx 00B4                         __end_of_secret_clear 22E5  
                             __end_of_strlen 20F1                          start_initialization 0018  
                   __size_of_PWM2_Initialize 000B                     __size_of_TMR0_Initialize 001E  
                        ?_PWM2_LoadDutyValue 0071              __size_of_PIN_MANAGER_Initialize 0055  
                       marquee_speedy@F14045 01C3                __size_of_displayL1_Initialize 0013  
             __end_of_slot_Running_Animation 258A                         ??_nullifyBadge_irGet 0071  
                            _menu_run_option 23C2                            ?_schedulerExecute 0070  
                    ??_flashy_display_option 007C                   __end_of_displayCharReverse 2250  
                   ??_locked_get_unlock_leds 0073                          __size_of_led_Parody 0065  
                         led_roundabout@leds 0034                             __CFG_LPBOREN$OFF 0000  
                         led_roundabout@size 0036                           _flashy_scroll_rate 00AA  
                       ??_PWM2_LoadDutyValue 0073                                _secret_inputs 024A  
                         ??_schedulerExecute 0068                    flashy_display_option@data 004C  
              __size_of_displayL1_SetSegChar 0041                                     ??___bmul 0072  
                PWM2_LoadDutyValue@dutyValue 0071                                     ??___lmul 0079  
                 slot_Running_Animation@data 0036                                     ??___wmul 0075  
                  _displayL2_EraseSegDisplay 2EE8                                  _CCPTMRSbits 029F  
                        __size_of_led_circle 0009                __size_of_displayL2_Initialize 0026  
                     __size_of_TMR0_CallBack 000B                                  __pdataBANK1 00C7  
                                __pdataBANK2 0161                                  __pdataBANK3 01A0  
                                __pdataBANK4 024A                                  __pdataBANK5 02A0  
                                __pdataBANK6 0320                                  __pdataBANK7 03A0  
                                __pdataBANK8 043E                                     ??_memset 0077  
                  _nullifyBadge_irTxRegister 2ED9                __size_of_displayL1_SetUserLed 0012  
                        __end_of_flashy_Main 1000                          __end_of_flashy_Init 07DF  
                   ?_SPI1_Exchange8bitBuffer 0072                      ??_displayL2_SetUserLeds 007B  
                           secret_check@data 0077                                     ??_strlen 0073  
                           secret_check@size 0023                    schedulerExecute@scheduler 00E9  
         nullifyBadge_segDisplayPutStr@badge 0039                  PWM5_LoadDutyValue@dutyValue 0071  
                       marquee_speedy@string 003A                                  __pbssCOMMON 007C  
                                ?_slot_Setup 002F                    schedulerExecute@tickDelta 00E7  
                                  ___latbits 0003                          __end_of_led_curtain 247E  
                              __pcstackBANK0 0020                                __pcstackBANK1 00E3  
                      __size_of_locked_clear 0042                             _displayL1_Update 2EF8  
                         _PWM6_LoadDutyValue 2FB9                     __size_of_TMR2_Initialize 000A  
                              ??_locked_Main 0054                             _displayL2_PutStr 21CA  
                              ??_locked_Init 007C                       scheduler_TaskInit@task 0071  
                           secret_clear@data 0071                      __end_of_SPI1_Initialize 2E1D  
                               _isdigit$3264 0071                         _asciiCharTableLookup 26F0  
                      _locked_lock_base_leds 00DF                           _flashy_option_size 00A4  
                               _curtain_leds 03A0                          ?_PWM6_LoadDutyValue 0071  
           displayL2_SetUserLeds@userLedData 002B                                  sprintf@flag 0040  
                          __size_of_led_rand 0048                                  sprintf@prec 003F  
                        __size_of_menu_clear 0047                        _TMR0_InterruptHandler 00BC  
                   __size_of_TMR0_StartTimer 0003                  __size_of_PWM1_LoadDutyValue 0016  
                           ___lwdiv@dividend 0073                       _PIN_MANAGER_Initialize 2756  
                                _FLASHY_TEXT 0161                     __size_of_PWM5_Initialize 000C  
                          menu_Main@taskData 0052               __size_of_displayL2_ClrUserLeds 000E  
              __end_of_displayL2_ClrUserLeds 2ED9                  displayL1_SetUserLed@display 0074  
                                   ?___almod 002B                                    __ptext100 2E55  
                                  __ptext101 2DDE                            schedulerExecute@k 00EA  
                                   ?___lwdiv 0071                                     ?___lwmod 002B  
                             _marquee_speedy 1AC5                         ??_PWM6_LoadDutyValue 0073  
                               _locked_clear 24BF                            ??_PWM1_Initialize 0071  
               ??_INTERRUPT_InterruptManager 0070                             ___almod@dividend 002F  
                          marquee@multiplier 0044                                    __pswtext1 28EC  
                     displayCharReverse@cVal 0071                __size_of_nullifyBadge_irTxClr 0003  
              __size_of_nullifyBadge_irTxSet 0003                                ??_secret_Main 0054  
                              ??_secret_Init 007C                          _locked_locking_leds 01A0  
                                   ?_isdigit 0070                                     ?_marquee 003A  
                   __size_of_PWM6_Initialize 000C                     __size_of_TMR4_Initialize 000B  
             ?_nullifyBadge_userLedsRegister 0070                  displayL2_Initialize@display 002B  
                    __end_of_menu_run_option 23FC                             ___lwdiv@quotient 0077  
                            secret_Main@data 0058                                    _menu_Main 1609  
                                  _menu_Init 18C9                nullifyBadge_irTxRelease@badge 0072  
                                  _menu_Exit 0000                                     ?_sprintf 002F  
                        flashy_Main@taskData 0052                                _TMR0_CallBack 2E55  
                         displayL2_PutChar@c 002A                           displayL2_PutChar@k 002E  
                                  _menu_task 0147      displayL1_SetSegChar@dispDataVectBaseIdx 0026  
                   ?_slot_Finished_Animation 003D                            ??_TMR0_Initialize 0073  
                          ??_PWM2_Initialize 0071                              secret_Init@data 003B  
              SPI1_Exchange8bitBuffer@dataIn 0077                               ___wmul@product 0075  
                        __end_of_locked_Main 1609                          __end_of_locked_Init 198E  
                                   _LATBbits 010D                                     _LATCbits 010E  
              SPI1_Exchange8bitBuffer@bufLen 0072                                    clear_ram0 2EA4  
                                   _PIE0bits 0090                     __size_of_TMR2_StartTimer 0003  
        __size_of_INTERRUPT_InterruptManager 0012                   ??_TMR0_SetInterruptHandler 0073  
            __size_of_locked_get_unlock_leds 0019                                     _PIR0bits 0010  
                                   _PIR1bits 0011                                     _PIR2bits 0012  
                                _flashy_Main 0819                                  _flashy_Init 0749  
                                _flashy_Exit 0000                          __size_of_slot_Setup 0054  
                 TMR0_Read16bitTimer@readVal 0078                   __end_of_locked_unlock_leds 2F63  
                 scheduler_TaskAdd@scheduler 0044              __end_of_SPI1_Exchange8bitBuffer 26B0  
               __end_of_locked_get_lock_leds 2155                       __end_of_marquee_speedy 1B38  
                                _flashy_task 0154                                     _SSP1CON1 0215  
                                   _TMR0_ISR 2EB0                                     _SSP1STAT 0214  
                          slot_Init@taskData 0039                  __size_of_PWM5_LoadDutyValue 0016  
                      __size_of_secret_check 00BB                                    _slot_Main 00D7  
                      __size_of_secret_clear 0032                                    _slot_Init 198E  
                                  _slot_Exit 0000                                  _led_curtain 243D  
            displayL1_SetUserLed@userLedVect 0071                              _flashy_TaskData 0420  
                                  _slot_task 013A            schedulerExecute@currentSystemTick 00E3  
                          ___wmul@multiplier 0071               __size_of_displayL2_ForceUpdate 0006  
              __end_of_displayL2_ForceUpdate 2E03                            _Shot_Options_Long 02A0  
                               ??_led_Parody 0032                   ??_nullifyBadge_irTxRelease 0071  
                  __size_of_locked_lock_leds 001B            nullifyBadge_segDisplayErase@badge 0038  
                   locked_Main@buttonPressed 0056                          _TMR0_Read16bitTimer 2098  
                      __end_of_let_alternate 2F77                                 ??_led_circle 007C  
                            led_circle@count 0030                  __size_of_scheduler_TaskInit 0039  
                             ?_TMR0_CallBack 0070                                   ?_menu_Main 0052  
                                 ?_menu_Init 0039                             ?_SPI1_Initialize 0070  
                   _nullifyBadge_userLedsClr 2E0F                            ___lmul@multiplier 0071  
                      led_roundabout@counter 0030                     _nullifyBadge_userLedsSet 2F09  
                        __end_of_secret_Main 2000                          __end_of_secret_Init 1867  
                                   _Leds_idx 00DD                            ??_TMR2_Initialize 0071  
                   secret_Main@buttonPressed 0057                   locked_get_unlock_leds@leds 0073  
                   __size_of_TMR4_StartTimer 0003                                 _secret_check 1CAD  
                               _secret_clear 22B3                         ?_TMR0_Read16bitTimer 0071  
                         __end_of_led_Parody 1A57                              marquee_speedy@i 0046  
                            marquee_speedy@j 004A                  ??_nullifyBadge_platformInit 007C  
                   ?_nullifyBadge_buttonsGet 0070                                 _secret_value 00C5  
                            _flashy_leds_idx 00B0   __end_of_nullifyBadge_segDisplayForceUpdate 2E09  
__size_of_nullifyBadge_segDisplayForceUpdate 0006         ??_nullifyBadge_segDisplayForceUpdate 007C  
        ?_nullifyBadge_segDisplayForceUpdate 0070           _nullifyBadge_segDisplayForceUpdate 2E03  
                            ?_marquee_speedy 003A                      ??_OSCILLATOR_Initialize 0071  
                        marquee_speedy@count 003C                            ??_TMR0_StartTimer 0071  
                           __size_of___almod 006E                           __end_of_led_circle 2E37  
                                 ?_slot_Main 0052                                   ?_slot_Init 0039  
                           __size_of___lwdiv 0034                             __size_of___lwmod 002D  
                               ??_menu_clear 007C                            ??_PWM5_Initialize 0071  
                    __size_of_scheduler_Init 001B                                   sprintf@len 0046  
                                _currentTask 00B8                                   sprintf@val 0044  
               __size_of_menu_display_option 0062           __size_of_displayL2_EraseSegDisplay 0010  
                                 _T0CON0bits 0017                       _locked_get_unlock_leds 2FE7  
                           __size_of_isdigit 000E                             __size_of_marquee 0077  
                            ___lwdiv@divisor 0071                              ___lwdiv@counter 0076  
                               _Shot_Options 00C7                          displayCharReverse@k 007B  
         __size_of_nullifyBadge_irTxRegister 000F                                     __ptext10 2045  
                                   __ptext11 1C29                                     __ptext20 22B3  
                                   __ptext12 07DF                                     __ptext21 1CAD  
                                   __ptext13 1E43                                     __ptext30 2130  
                                   __ptext22 2F1A                                     __ptext14 142C  
                                   __ptext31 24BF                                     __ptext23 23C2  
                                   __ptext15 1609                                     __ptext40 2E81  
                                   __ptext32 2E0F                                     __ptext24 258A  
                                   __ptext16 0819                                     __ptext41 2ED9  
                                   __ptext33 2ECB                                     __ptext25 1867  
                                   __ptext17 00D7                                     __ptext50 1A57  
                                   __ptext42 2DE8                                     __ptext34 2E09  
                                   __ptext26 2702                                     __ptext18 2544  
                                   __ptext51 243D                                     __ptext43 2DF2  
                                   __ptext35 2EE8                                     __ptext27 2F50  
                                   __ptext19 217B                                     __ptext60 20D3  
                                   __ptext52 2E2E                                     __ptext44 2250  
                                   __ptext36 125F                                     __ptext28 202A  
                                   __ptext61 2E4B                                     __ptext53 19F2  
                                   __ptext45 2F63                                     __ptext37 2EBD  
                                   __ptext29 2FE7                                     __ptext70 2098  
                                   __ptext62 21CA                                     __ptext54 2F09  
                                   __ptext46 247E                                     __ptext38 200F  
                                   __ptext71 27AB                                     __ptext63 26B0  
                                   __ptext55 20F1                                     __ptext47 25D1  
                                   __ptext39 2DEB                                     __ptext80 2E76  
                                   __ptext72 2155                                     __ptext64 23FC  
                                   __ptext56 2F2B                                     __ptext48 2501  
                                   __ptext81 2DE5                                     __ptext73 2F3D  
                                   __ptext65 2221                                     __ptext57 1200  
                                   __ptext49 2281                                     __ptext90 2E6B  
                                   __ptext82 2E41                                     __ptext74 2FCF  
                                   __ptext66 2E03                                     __ptext58 1AC5  
                                   __ptext91 2E60                                     __ptext83 2DE2  
                                   __ptext75 2EF8                                     __ptext67 2DFD  
                                   __ptext59 1B38                                     __ptext92 2756  
                                   __ptext84 20B5                                     __ptext76 2662  
                                   __ptext68 21F4                                     __ptext93 2E37  
                                   __ptext85 2DDF                                     __ptext77 2E25  
                                   __ptext69 22E5                                     __ptext94 2FB9  
                                   __ptext86 2DF7                                     __ptext78 210F  
                                   __ptext95 2FA3                                     __ptext87 2E15  
                                   __ptext79 2DEE                                     __ptext96 2F8D  
                                   __ptext88 2E98                                     __ptext97 2F77  
                                   __ptext89 2E8C                                     __ptext99 2EB0  
                                _locked_Main 142C                                  _locked_Init 192B  
                         slot_Setup@taskData 002F                                  _locked_Exit 0000  
                               _SSP1CON1bits 0215                             ?_menu_run_option 003B  
                                _locked_leds 00A0                                  _locked_task 012D  
                            ___almod@divisor 002B                                     _led_rand 25D1  
                           __size_of_sprintf 01CD                              ___almod@counter 007A  
             slot_Running_Animation@taskData 0032                                  _menu_option 01B6  
    __end_of_nullifyBadge_segDisplayRegister 2E25     __size_of_nullifyBadge_segDisplayRegister 0008  
          ??_nullifyBadge_segDisplayRegister 0071             ?_nullifyBadge_segDisplayRegister 0070  
            _nullifyBadge_segDisplayRegister 2E1D                         marquee@string_length 0048  
                              menu_Main@data 0057                            ??_TMR4_Initialize 0071  
                          ??_PWM6_Initialize 0071                                __size_of_main 00DB  
                              __size_of_rand 0043         __end_of_TMR0_DefaultInterruptHandler 2DDF  
      __size_of_TMR0_DefaultInterruptHandler 0001                 _TMR0_DefaultInterruptHandler 2DDE  
                         __end_of_menu_clear 25D1                            displayL2_PutStr@k 0036  
                      ??_TMR0_Read16bitTimer 0073                                   _RC0PPSbits 0EA0  
                              marquee@F14054 01BE                                   _RC1PPSbits 0EA1  
                              menu_Init@data 003B                     __end_of_displayL1_Update 2F09  
                         let_alternate@count 0030                                   _RC2PPSbits 0EA2  
             __size_of_flashy_display_option 005F                     __end_of_displayL2_PutStr 21F4  
              __end_of_flashy_display_option 125F                                   _RC3PPSbits 0EA3  
               __end_of_displayL1_Initialize 2F50                         _curtain_leds_inverse 043E  
                                 _RC4PPSbits 0EA4                                   _RB6PPSbits 0E9E  
                                   int$flags 007E                 displayL2_ForceUpdate@display 007B  
                            locked_Main@data 0057                            ??_TMR2_StartTimer 0071  
         __end_of_INTERRUPT_InterruptManager 0016                   _INTERRUPT_InterruptManager 0004  
                               _SSP1STATbits 0214         nullifyBadge_segDisplayRegister@badge 0071  
                PIN_MANAGER_Initialize@state 0071           schedulerExecute@taskLastSystemTick 00E5  
                         _displayCharReverse 2221                            menu_Init@taskData 0039  
                  __size_of_schedulerExecute 0084               __size_of_displayL2_SetUserLeds 001E  
                            locked_Init@data 003B                __end_of_displayL2_SetUserLeds 210F  
              displayCharReverse@retValLower 0078                displayCharReverse@retValUpper 0079  
                                 _INTCONbits 000B                                  _secret_Main 1E43  
                    __size_of_led_roundabout 0041                                  _secret_Init 180C  
                               ??_slot_Setup 0031                                  _secret_Exit 0000  
                            ??_TMR0_CallBack 0070                                  _NVMCON1bits 0895  
                  _nullifyBadge_platformInit 27AB                 __end_of_displayL1_SetSegChar 243D  
                                _secret_task 0120                               __pstringtext10 3016  
                             __pstringtext11 302B                               __pstringtext20 309F  
                             __pstringtext12 303E                               __pstringtext21 30A8  
                             __pstringtext13 3050                               __pstringtext30 30ED  
                             __pstringtext22 30B1                               __pstringtext14 305D  
                             __pstringtext31 30F3                               __pstringtext23 30BA  
                             __pstringtext15 306A                               __pstringtext40 3120  
                             __pstringtext32 30F8                               __pstringtext24 30C2  
                             __pstringtext16 3076                               __pstringtext41 3125  
                             __pstringtext33 30FD                               __pstringtext25 30CA  
                             __pstringtext17 3081                               __pstringtext42 312A  
                             __pstringtext34 3102                               __pstringtext26 30D2  
                             __pstringtext18 308C                               __pstringtext43 312F  
                             __pstringtext35 3107                               __pstringtext27 30DA  
                             __pstringtext19 3096                               __pstringtext44 3134  
                             __pstringtext36 310C                               __pstringtext28 30E1  
                             __pstringtext45 3139                               __pstringtext37 3111  
                             __pstringtext29 30E7                               __pstringtext46 313E  
                             __pstringtext38 3116                               __pstringtext47 3143  
                             __pstringtext39 311B                               __pstringtext48 3147  
                             __pstringtext49 0000            __end_of_displayL2_EraseSegDisplay 2EF8  
                                   isdigit@c 0072                                     marquee@i 0046  
                                   marquee@j 004A                                     memset@p1 0071  
               __end_of_displayL2_Initialize 217B                          ?_displayCharReverse 0071  
                                ??_menu_Main 0054                                  ??_menu_Init 007C  
                    __size_of_WDT_Initialize 0004                         _locked_get_lock_leds 2130  
          __end_of_nullifyBadge_irTxRegister 2EE8             __size_of_SPI1_Exchange8bitBuffer 004E  
               __end_of_displayL1_SetUserLed 2F3D                                     intlevel1 0000  
                                  sprintf@ap 0043                                    sprintf@cp 0041  
                                  sprintf@sp 002F                             ___lwmod@dividend 002D  
                    ?_PIN_MANAGER_Initialize 0070                                marquee@string 003A  
                __size_of_nullifyBadge_irGet 0005                            __CFG_CLKOUTEN$OFF 0000  
        SPI1_Exchange8bitBuffer@bytesWritten 0078                                  _PPSLOCKbits 0E0F  
                            _PWM1_Initialize 2E60                          flashy_Init@taskData 0039  
                             menu_clear@data 0039                ?_TMR0_DefaultInterruptHandler 0070  
                __size_of_PWM2_LoadDutyValue 0016                         ??_displayCharReverse 0073  
                         __end_of_slot_Setup 2756                            ??_TMR4_StartTimer 0071  
                                ??_slot_Main 0054                                  ??_slot_Init 007C  
                              __pstringtext1 1000                                __pstringtext2 2800  
                              __pstringtext3 2835                                __pstringtext4 285D  
                              __pstringtext5 2880                                __pstringtext6 289E  
                              __pstringtext7 28B9                                __pstringtext8 28D3  
                              __pstringtext9 3000             __end_of_nullifyBadge_irTxRelease 2E8C  
                                   sprintf@c 004A                                     sprintf@f 0031  
                              _flashy_option 0320                             _locked_lock_leds 202A  
                            ___lwmod@divisor 002B                              _TMR0_Initialize 20B5  
                            _PWM2_Initialize 2E6B                                     strlen@cp 0075  
                              _slot_TaskData 04A0                              ___lwmod@counter 007A  
                PWM6_LoadDutyValue@dutyValue 0071                        ?_locked_get_lock_leds 0071  
             __end_of_PIN_MANAGER_Initialize 27AB                             locked_clear@data 0039  
                               ___almod@sign 007B                                  _PWMTMRSbits 061F  
               __end_of_nullifyBadge_irTxClr 2DEB                 __end_of_nullifyBadge_irTxSet 2DEE  
                 __end_of_PWM1_LoadDutyValue 2F8D                        _TMR2_InterruptHandler 00C2  
                               ?_flashy_Main 0052                                 ?_flashy_Init 0039  
