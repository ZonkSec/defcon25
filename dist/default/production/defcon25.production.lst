

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Jul 26 08:12:39 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16LF18346
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBANK10,global,class=CODE,delta=2
    13                           	psect	idataBIGRAM,global,class=CODE,delta=2
    14                           	psect	stringtext1,global,class=STRCODE,delta=2
    15                           	psect	stringtext2,global,class=STRCODE,delta=2
    16                           	psect	stringtext3,global,class=STRCODE,delta=2
    17                           	psect	stringtext4,global,class=STRCODE,delta=2
    18                           	psect	stringtext5,global,class=STRCODE,delta=2
    19                           	psect	stringtext6,global,class=STRCODE,delta=2
    20                           	psect	stringtext7,global,class=STRCODE,delta=2
    21                           	psect	stringtext8,global,class=STRCODE,delta=2
    22                           	psect	stringtext9,global,class=STRCODE,delta=2
    23                           	psect	stringtext10,global,class=STRCODE,delta=2
    24                           	psect	stringtext11,global,class=STRCODE,delta=2
    25                           	psect	stringtext12,global,class=STRCODE,delta=2
    26                           	psect	stringtext13,global,class=STRCODE,delta=2
    27                           	psect	stringtext14,global,class=STRCODE,delta=2
    28                           	psect	stringtext15,global,class=STRCODE,delta=2
    29                           	psect	stringtext16,global,class=STRCODE,delta=2
    30                           	psect	stringtext17,global,class=STRCODE,delta=2
    31                           	psect	stringtext18,global,class=STRCODE,delta=2
    32                           	psect	stringtext19,global,class=STRCODE,delta=2
    33                           	psect	stringtext20,global,class=STRCODE,delta=2
    34                           	psect	stringtext21,global,class=STRCODE,delta=2
    35                           	psect	stringtext22,global,class=STRCODE,delta=2
    36                           	psect	stringtext23,global,class=STRCODE,delta=2
    37                           	psect	stringtext24,global,class=STRCODE,delta=2
    38                           	psect	stringtext25,global,class=STRCODE,delta=2
    39                           	psect	stringtext26,global,class=STRCODE,delta=2
    40                           	psect	stringtext27,global,class=STRCODE,delta=2
    41                           	psect	stringtext28,global,class=STRCODE,delta=2
    42                           	psect	stringtext29,global,class=STRCODE,delta=2
    43                           	psect	stringtext30,global,class=STRCODE,delta=2
    44                           	psect	stringtext31,global,class=STRCODE,delta=2
    45                           	psect	stringtext32,global,class=STRCODE,delta=2
    46                           	psect	stringtext33,global,class=STRCODE,delta=2
    47                           	psect	stringtext34,global,class=STRCODE,delta=2
    48                           	psect	stringtext35,global,class=STRCODE,delta=2
    49                           	psect	stringtext36,global,class=STRCODE,delta=2
    50                           	psect	stringtext37,global,class=STRCODE,delta=2
    51                           	psect	stringtext38,global,class=STRCODE,delta=2
    52                           	psect	stringtext39,global,class=STRCODE,delta=2
    53                           	psect	stringtext40,global,class=STRCODE,delta=2
    54                           	psect	stringtext41,global,class=STRCODE,delta=2
    55                           	psect	stringtext42,global,class=STRCODE,delta=2
    56                           	psect	stringtext43,global,class=STRCODE,delta=2
    57                           	psect	stringtext44,global,class=STRCODE,delta=2
    58                           	psect	stringtext45,global,class=STRCODE,delta=2
    59                           	psect	stringtext46,global,class=STRCODE,delta=2
    60                           	psect	stringtext47,global,class=STRCODE,delta=2
    61                           	psect	stringtext48,global,class=STRCODE,delta=2
    62                           	psect	stringtext49,global,class=STRCODE,delta=2
    63                           	psect	stringtext50,global,class=STRCODE,delta=2
    64                           	psect	stringtext51,global,class=STRCODE,delta=2
    65                           	psect	stringtext52,global,class=STRCODE,delta=2
    66                           	psect	stringtext53,global,class=STRCODE,delta=2
    67                           	psect	stringtext54,global,class=STRCODE,delta=2
    68                           	psect	stringtext55,global,class=STRCODE,delta=2
    69                           	psect	stringtext56,global,class=STRCODE,delta=2
    70                           	psect	stringtext57,global,class=STRCODE,delta=2
    71                           	psect	stringtext58,global,class=STRCODE,delta=2
    72                           	psect	stringtext59,global,class=STRCODE,delta=2
    73                           	psect	stringtext60,global,class=STRCODE,delta=2
    74                           	psect	stringtext61,global,class=STRCODE,delta=2
    75                           	psect	stringtext62,global,class=STRCODE,delta=2
    76                           	psect	stringtext63,global,class=STRCODE,delta=2
    77                           	psect	stringtext64,global,class=STRCODE,delta=2
    78                           	psect	stringtext65,global,class=STRCODE,delta=2
    79                           	psect	stringtext66,global,class=STRCODE,delta=2
    80                           	psect	stringtext67,global,class=STRCODE,delta=2
    81                           	psect	stringtext68,global,class=STRCODE,delta=2
    82                           	psect	stringtext69,global,class=STRCODE,delta=2
    83                           	psect	stringtext70,global,class=STRCODE,delta=2
    84                           	psect	stringtext71,global,class=STRCODE,delta=2
    85                           	psect	stringtext72,global,class=STRCODE,delta=2
    86                           	psect	stringtext73,global,class=STRCODE,delta=2
    87                           	psect	stringtext74,global,class=STRCODE,delta=2
    88                           	psect	stringtext75,global,class=STRCODE,delta=2
    89                           	psect	stringtext76,global,class=STRCODE,delta=2
    90                           	psect	stringtext77,global,class=STRCODE,delta=2
    91                           	psect	cinit,global,class=CODE,merge=1,delta=2
    92                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    93                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    94                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    95                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    96                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    97                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    98                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    99                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
   100                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
   101                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
   102                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
   103                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
   104                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
   105                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
   106                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
   107                           	psect	bssBANK11,global,class=BANK11,space=1,delta=1
   108                           	psect	inittext,global,class=CODE,delta=2
   109                           	psect	clrtext,global,class=CODE,delta=2
   110                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
   111                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
   112                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   113                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   114                           	psect	text1,local,class=CODE,merge=1,delta=2
   115                           	psect	text2,local,class=CODE,merge=1,delta=2
   116                           	psect	text3,local,class=CODE,merge=1,delta=2
   117                           	psect	text4,local,class=CODE,merge=1,delta=2
   118                           	psect	text5,local,class=CODE,merge=1,delta=2
   119                           	psect	text6,local,class=CODE,merge=1,delta=2
   120                           	psect	text7,local,class=CODE,merge=1,delta=2
   121                           	psect	text8,local,class=CODE,merge=1,delta=2
   122                           	psect	text9,local,class=CODE,merge=1,delta=2
   123                           	psect	text10,local,class=CODE,merge=1,delta=2
   124                           	psect	text11,local,class=CODE,merge=1,delta=2
   125                           	psect	text12,local,class=CODE,merge=1,delta=2
   126                           	psect	text13,local,class=CODE,merge=1,delta=2
   127                           	psect	text14,local,class=CODE,merge=1,delta=2
   128                           	psect	text15,local,class=CODE,merge=1,delta=2
   129                           	psect	text16,local,class=CODE,merge=1,delta=2
   130                           	psect	text17,local,class=CODE,merge=1,delta=2
   131                           	psect	text18,local,class=CODE,merge=1,delta=2
   132                           	psect	swtext1,local,class=CONST,delta=2
   133                           	psect	text19,local,class=CODE,merge=1,delta=2
   134                           	psect	text20,local,class=CODE,merge=1,delta=2
   135                           	psect	text21,local,class=CODE,merge=1,delta=2
   136                           	psect	text22,local,class=CODE,merge=1,delta=2
   137                           	psect	text23,local,class=CODE,merge=1,delta=2
   138                           	psect	text24,local,class=CODE,merge=1,delta=2
   139                           	psect	text25,local,class=CODE,merge=1,delta=2
   140                           	psect	text26,local,class=CODE,merge=1,delta=2
   141                           	psect	text27,local,class=CODE,merge=1,delta=2
   142                           	psect	text28,local,class=CODE,merge=1,delta=2
   143                           	psect	text29,local,class=CODE,merge=1,delta=2
   144                           	psect	text30,local,class=CODE,merge=1,delta=2
   145                           	psect	text31,local,class=CODE,merge=1,delta=2
   146                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
   147                           	psect	text33,local,class=CODE,merge=1,delta=2
   148                           	psect	text34,local,class=CODE,merge=1,delta=2
   149                           	psect	text35,local,class=CODE,merge=1,delta=2
   150                           	psect	text36,local,class=CODE,merge=1,delta=2
   151                           	psect	text37,local,class=CODE,merge=1,delta=2
   152                           	psect	text38,local,class=CODE,merge=1,delta=2
   153                           	psect	text39,local,class=CODE,merge=1,delta=2
   154                           	psect	text40,local,class=CODE,merge=1,delta=2
   155                           	psect	text41,local,class=CODE,merge=1,delta=2
   156                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
   157                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
   158                           	psect	text44,local,class=CODE,merge=1,delta=2
   159                           	psect	text45,local,class=CODE,merge=1,delta=2
   160                           	psect	text46,local,class=CODE,merge=1,delta=2
   161                           	psect	text47,local,class=CODE,merge=1,delta=2
   162                           	psect	text48,local,class=CODE,merge=1,delta=2
   163                           	psect	text49,local,class=CODE,merge=1,delta=2
   164                           	psect	text50,local,class=CODE,merge=1,delta=2
   165                           	psect	text51,local,class=CODE,merge=1,delta=2
   166                           	psect	text52,local,class=CODE,merge=1,delta=2
   167                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
   168                           	psect	text54,local,class=CODE,merge=1,delta=2,group=2
   169                           	psect	text55,local,class=CODE,merge=1,delta=2,group=2
   170                           	psect	text56,local,class=CODE,merge=1,delta=2
   171                           	psect	text57,local,class=CODE,merge=1,delta=2
   172                           	psect	text58,local,class=CODE,merge=1,delta=2
   173                           	psect	text59,local,class=CODE,merge=1,delta=2
   174                           	psect	text60,local,class=CODE,merge=1,delta=2
   175                           	psect	text61,local,class=CODE,merge=1,delta=2
   176                           	psect	text62,local,class=CODE,merge=1,delta=2
   177                           	psect	text63,local,class=CODE,merge=1,delta=2
   178                           	psect	text64,local,class=CODE,merge=1,delta=2
   179                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
   180                           	psect	text66,local,class=CODE,merge=1,delta=2
   181                           	psect	text67,local,class=CODE,merge=1,delta=2
   182                           	psect	text68,local,class=CODE,merge=1,delta=2
   183                           	psect	text69,local,class=CODE,merge=1,delta=2
   184                           	psect	text70,local,class=CODE,merge=1,delta=2
   185                           	psect	text71,local,class=CODE,merge=1,delta=2
   186                           	psect	text72,local,class=CODE,merge=1,delta=2
   187                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   188                           	psect	text74,local,class=CODE,merge=1,delta=2,group=2
   189                           	psect	text75,local,class=CODE,merge=1,delta=2
   190                           	psect	text76,local,class=CODE,merge=1,delta=2
   191                           	psect	text77,local,class=CODE,merge=1,delta=2
   192                           	psect	text78,local,class=CODE,merge=1,delta=2
   193                           	psect	text79,local,class=CODE,merge=1,delta=2,group=2
   194                           	psect	text80,local,class=CODE,merge=1,delta=2
   195                           	psect	text81,local,class=CODE,merge=1,delta=2
   196                           	psect	text82,local,class=CODE,merge=1,delta=2
   197                           	psect	text83,local,class=CODE,merge=1,delta=2
   198                           	psect	text84,local,class=CODE,merge=1,delta=2
   199                           	psect	text85,local,class=CODE,merge=1,delta=2
   200                           	psect	text86,local,class=CODE,merge=1,delta=2
   201                           	psect	text87,local,class=CODE,merge=1,delta=2
   202                           	psect	text88,local,class=CODE,merge=1,delta=2
   203                           	psect	text89,local,class=CODE,merge=1,delta=2
   204                           	psect	text90,local,class=CODE,merge=1,delta=2
   205                           	psect	text91,local,class=CODE,merge=1,delta=2
   206                           	psect	text92,local,class=CODE,merge=1,delta=2
   207                           	psect	text93,local,class=CODE,merge=1,delta=2
   208                           	psect	text94,local,class=CODE,merge=1,delta=2
   209                           	psect	text95,local,class=CODE,merge=1,delta=2
   210                           	psect	text96,local,class=CODE,merge=1,delta=2
   211                           	psect	text97,local,class=CODE,merge=1,delta=2
   212                           	psect	text98,local,class=CODE,merge=1,delta=2
   213                           	psect	text99,local,class=CODE,merge=1,delta=2
   214                           	psect	text100,local,class=CODE,merge=1,delta=2
   215                           	psect	text101,local,class=CODE,merge=1,delta=2
   216                           	psect	text102,local,class=CODE,merge=1,delta=2
   217                           	psect	intentry,global,class=CODE,delta=2
   218                           	psect	text104,local,class=CODE,merge=1,delta=2
   219                           	psect	text105,local,class=CODE,merge=1,delta=2
   220                           	psect	text106,local,class=CODE,merge=1,delta=2
   221                           	dabs	1,0xCA0,32
   222                           	dabs	1,0xC20,80
   223                           	dabs	1,0xBA0,80
   224                           	dabs	1,0xB30,64
   225                           	dabs	1,0x26F0,0,_asciiCharTableLookup
   226                           	dabs	1,0x7E,2
   227  0000                     
   228                           ; Version 1.42
   229                           ; Generated 13/04/2017 GMT
   230                           ; 
   231                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   232                           ; All rights reserved.
   233                           ; 
   234                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   235                           ; 
   236                           ; Redistribution and use in source and binary forms, with or without modification, are
   237                           ; permitted provided that the following conditions are met:
   238                           ; 
   239                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   240                           ;        conditions and the following disclaimer.
   241                           ; 
   242                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   243                           ;        of conditions and the following disclaimer in the documentation and/or other
   244                           ;        materials provided with the distribution.
   245                           ; 
   246                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   247                           ;        software without specific prior written permission.
   248                           ; 
   249                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   250                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   251                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   252                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   253                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   254                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   255                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   256                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   257                           ; 
   258                           ; 
   259                           ; Code-generator required, PIC16LF18346 Definitions
   260                           ; 
   261                           ; SFR Addresses
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000D                     	;# 
   276  000E                     	;# 
   277  0010                     	;# 
   278  0011                     	;# 
   279  0012                     	;# 
   280  0013                     	;# 
   281  0014                     	;# 
   282  0015                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001C                     	;# 
   293  001D                     	;# 
   294  001E                     	;# 
   295  001F                     	;# 
   296  008C                     	;# 
   297  008D                     	;# 
   298  008E                     	;# 
   299  0090                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0093                     	;# 
   303  0094                     	;# 
   304  0097                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  009F                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  0111                     	;# 
   315  0112                     	;# 
   316  0113                     	;# 
   317  0114                     	;# 
   318  0115                     	;# 
   319  0116                     	;# 
   320  0117                     	;# 
   321  0118                     	;# 
   322  0119                     	;# 
   323  018C                     	;# 
   324  018D                     	;# 
   325  018E                     	;# 
   326  0199                     	;# 
   327  0199                     	;# 
   328  0199                     	;# 
   329  019A                     	;# 
   330  019A                     	;# 
   331  019A                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019C                     	;# 
   340  019D                     	;# 
   341  019D                     	;# 
   342  019D                     	;# 
   343  019E                     	;# 
   344  019E                     	;# 
   345  019E                     	;# 
   346  019F                     	;# 
   347  019F                     	;# 
   348  019F                     	;# 
   349  019F                     	;# 
   350  019F                     	;# 
   351  020C                     	;# 
   352  020D                     	;# 
   353  020E                     	;# 
   354  0211                     	;# 
   355  0211                     	;# 
   356  0212                     	;# 
   357  0212                     	;# 
   358  0213                     	;# 
   359  0213                     	;# 
   360  0214                     	;# 
   361  0214                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0216                     	;# 
   367  0216                     	;# 
   368  0217                     	;# 
   369  0217                     	;# 
   370  0219                     	;# 
   371  021A                     	;# 
   372  021B                     	;# 
   373  021C                     	;# 
   374  021D                     	;# 
   375  021D                     	;# 
   376  021E                     	;# 
   377  021F                     	;# 
   378  028C                     	;# 
   379  028D                     	;# 
   380  028E                     	;# 
   381  0291                     	;# 
   382  0291                     	;# 
   383  0292                     	;# 
   384  0293                     	;# 
   385  0294                     	;# 
   386  0295                     	;# 
   387  0295                     	;# 
   388  0296                     	;# 
   389  0297                     	;# 
   390  0298                     	;# 
   391  029F                     	;# 
   392  030C                     	;# 
   393  030D                     	;# 
   394  030E                     	;# 
   395  0311                     	;# 
   396  0311                     	;# 
   397  0312                     	;# 
   398  0313                     	;# 
   399  0314                     	;# 
   400  0315                     	;# 
   401  0315                     	;# 
   402  0316                     	;# 
   403  0317                     	;# 
   404  0318                     	;# 
   405  038C                     	;# 
   406  038D                     	;# 
   407  038E                     	;# 
   408  0391                     	;# 
   409  0392                     	;# 
   410  0393                     	;# 
   411  0394                     	;# 
   412  0395                     	;# 
   413  0396                     	;# 
   414  0397                     	;# 
   415  0398                     	;# 
   416  0399                     	;# 
   417  039A                     	;# 
   418  039C                     	;# 
   419  039D                     	;# 
   420  039E                     	;# 
   421  039F                     	;# 
   422  0411                     	;# 
   423  0411                     	;# 
   424  0412                     	;# 
   425  0413                     	;# 
   426  0414                     	;# 
   427  0415                     	;# 
   428  0416                     	;# 
   429  0417                     	;# 
   430  0418                     	;# 
   431  0418                     	;# 
   432  0419                     	;# 
   433  041A                     	;# 
   434  041B                     	;# 
   435  041C                     	;# 
   436  041D                     	;# 
   437  041E                     	;# 
   438  041F                     	;# 
   439  0498                     	;# 
   440  0498                     	;# 
   441  0499                     	;# 
   442  049A                     	;# 
   443  049B                     	;# 
   444  049B                     	;# 
   445  049C                     	;# 
   446  049D                     	;# 
   447  049E                     	;# 
   448  049F                     	;# 
   449  0617                     	;# 
   450  0618                     	;# 
   451  0619                     	;# 
   452  0619                     	;# 
   453  061A                     	;# 
   454  061B                     	;# 
   455  061C                     	;# 
   456  061C                     	;# 
   457  061F                     	;# 
   458  0691                     	;# 
   459  0692                     	;# 
   460  0693                     	;# 
   461  0694                     	;# 
   462  0695                     	;# 
   463  0696                     	;# 
   464  0697                     	;# 
   465  0698                     	;# 
   466  0699                     	;# 
   467  0711                     	;# 
   468  0712                     	;# 
   469  0713                     	;# 
   470  0714                     	;# 
   471  0715                     	;# 
   472  0716                     	;# 
   473  0717                     	;# 
   474  0718                     	;# 
   475  0719                     	;# 
   476  0891                     	;# 
   477  0891                     	;# 
   478  0891                     	;# 
   479  0891                     	;# 
   480  0891                     	;# 
   481  0891                     	;# 
   482  0892                     	;# 
   483  0892                     	;# 
   484  0892                     	;# 
   485  0893                     	;# 
   486  0893                     	;# 
   487  0893                     	;# 
   488  0893                     	;# 
   489  0893                     	;# 
   490  0893                     	;# 
   491  0894                     	;# 
   492  0894                     	;# 
   493  0894                     	;# 
   494  0895                     	;# 
   495  0895                     	;# 
   496  0895                     	;# 
   497  0896                     	;# 
   498  0896                     	;# 
   499  0896                     	;# 
   500  089B                     	;# 
   501  0911                     	;# 
   502  0912                     	;# 
   503  0913                     	;# 
   504  0914                     	;# 
   505  0915                     	;# 
   506  0916                     	;# 
   507  0918                     	;# 
   508  0919                     	;# 
   509  091A                     	;# 
   510  091B                     	;# 
   511  091C                     	;# 
   512  091D                     	;# 
   513  091E                     	;# 
   514  091F                     	;# 
   515  0E0F                     	;# 
   516  0E10                     	;# 
   517  0E11                     	;# 
   518  0E12                     	;# 
   519  0E13                     	;# 
   520  0E14                     	;# 
   521  0E15                     	;# 
   522  0E16                     	;# 
   523  0E17                     	;# 
   524  0E18                     	;# 
   525  0E19                     	;# 
   526  0E1A                     	;# 
   527  0E1B                     	;# 
   528  0E1C                     	;# 
   529  0E1D                     	;# 
   530  0E1E                     	;# 
   531  0E1F                     	;# 
   532  0E20                     	;# 
   533  0E21                     	;# 
   534  0E22                     	;# 
   535  0E24                     	;# 
   536  0E25                     	;# 
   537  0E28                     	;# 
   538  0E29                     	;# 
   539  0E2A                     	;# 
   540  0E2B                     	;# 
   541  0E2C                     	;# 
   542  0E2D                     	;# 
   543  0E2E                     	;# 
   544  0E2F                     	;# 
   545  0E90                     	;# 
   546  0E91                     	;# 
   547  0E92                     	;# 
   548  0E94                     	;# 
   549  0E95                     	;# 
   550  0E9C                     	;# 
   551  0E9D                     	;# 
   552  0E9E                     	;# 
   553  0E9F                     	;# 
   554  0EA0                     	;# 
   555  0EA1                     	;# 
   556  0EA2                     	;# 
   557  0EA3                     	;# 
   558  0EA4                     	;# 
   559  0EA5                     	;# 
   560  0EA6                     	;# 
   561  0EA7                     	;# 
   562  0F0F                     	;# 
   563  0F10                     	;# 
   564  0F11                     	;# 
   565  0F12                     	;# 
   566  0F13                     	;# 
   567  0F14                     	;# 
   568  0F15                     	;# 
   569  0F16                     	;# 
   570  0F17                     	;# 
   571  0F18                     	;# 
   572  0F19                     	;# 
   573  0F1A                     	;# 
   574  0F1B                     	;# 
   575  0F1C                     	;# 
   576  0F1D                     	;# 
   577  0F1E                     	;# 
   578  0F1F                     	;# 
   579  0F20                     	;# 
   580  0F21                     	;# 
   581  0F22                     	;# 
   582  0F23                     	;# 
   583  0F24                     	;# 
   584  0F25                     	;# 
   585  0F26                     	;# 
   586  0F27                     	;# 
   587  0F28                     	;# 
   588  0F29                     	;# 
   589  0F2A                     	;# 
   590  0F2B                     	;# 
   591  0F2C                     	;# 
   592  0F2D                     	;# 
   593  0F2E                     	;# 
   594  0F2F                     	;# 
   595  0F30                     	;# 
   596  0F31                     	;# 
   597  0F32                     	;# 
   598  0F33                     	;# 
   599  0F34                     	;# 
   600  0F35                     	;# 
   601  0F36                     	;# 
   602  0F37                     	;# 
   603  0FE4                     	;# 
   604  0FE5                     	;# 
   605  0FE6                     	;# 
   606  0FE7                     	;# 
   607  0FE8                     	;# 
   608  0FE9                     	;# 
   609  0FEA                     	;# 
   610  0FEB                     	;# 
   611  0FED                     	;# 
   612  0FEE                     	;# 
   613  0FEF                     	;# 
   614  0000                     	;# 
   615  0001                     	;# 
   616  0002                     	;# 
   617  0003                     	;# 
   618  0004                     	;# 
   619  0005                     	;# 
   620  0006                     	;# 
   621  0007                     	;# 
   622  0008                     	;# 
   623  0009                     	;# 
   624  000A                     	;# 
   625  000B                     	;# 
   626  000C                     	;# 
   627  000D                     	;# 
   628  000E                     	;# 
   629  0010                     	;# 
   630  0011                     	;# 
   631  0012                     	;# 
   632  0013                     	;# 
   633  0014                     	;# 
   634  0015                     	;# 
   635  0015                     	;# 
   636  0016                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  0019                     	;# 
   642  001A                     	;# 
   643  001B                     	;# 
   644  001C                     	;# 
   645  001D                     	;# 
   646  001E                     	;# 
   647  001F                     	;# 
   648  008C                     	;# 
   649  008D                     	;# 
   650  008E                     	;# 
   651  0090                     	;# 
   652  0091                     	;# 
   653  0092                     	;# 
   654  0093                     	;# 
   655  0094                     	;# 
   656  0097                     	;# 
   657  009B                     	;# 
   658  009B                     	;# 
   659  009C                     	;# 
   660  009D                     	;# 
   661  009E                     	;# 
   662  009F                     	;# 
   663  010C                     	;# 
   664  010D                     	;# 
   665  010E                     	;# 
   666  0111                     	;# 
   667  0112                     	;# 
   668  0113                     	;# 
   669  0114                     	;# 
   670  0115                     	;# 
   671  0116                     	;# 
   672  0117                     	;# 
   673  0118                     	;# 
   674  0119                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  018E                     	;# 
   678  0199                     	;# 
   679  0199                     	;# 
   680  0199                     	;# 
   681  019A                     	;# 
   682  019A                     	;# 
   683  019A                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019B                     	;# 
   688  019B                     	;# 
   689  019C                     	;# 
   690  019C                     	;# 
   691  019C                     	;# 
   692  019D                     	;# 
   693  019D                     	;# 
   694  019D                     	;# 
   695  019E                     	;# 
   696  019E                     	;# 
   697  019E                     	;# 
   698  019F                     	;# 
   699  019F                     	;# 
   700  019F                     	;# 
   701  019F                     	;# 
   702  019F                     	;# 
   703  020C                     	;# 
   704  020D                     	;# 
   705  020E                     	;# 
   706  0211                     	;# 
   707  0211                     	;# 
   708  0212                     	;# 
   709  0212                     	;# 
   710  0213                     	;# 
   711  0213                     	;# 
   712  0214                     	;# 
   713  0214                     	;# 
   714  0215                     	;# 
   715  0215                     	;# 
   716  0215                     	;# 
   717  0215                     	;# 
   718  0216                     	;# 
   719  0216                     	;# 
   720  0217                     	;# 
   721  0217                     	;# 
   722  0219                     	;# 
   723  021A                     	;# 
   724  021B                     	;# 
   725  021C                     	;# 
   726  021D                     	;# 
   727  021D                     	;# 
   728  021E                     	;# 
   729  021F                     	;# 
   730  028C                     	;# 
   731  028D                     	;# 
   732  028E                     	;# 
   733  0291                     	;# 
   734  0291                     	;# 
   735  0292                     	;# 
   736  0293                     	;# 
   737  0294                     	;# 
   738  0295                     	;# 
   739  0295                     	;# 
   740  0296                     	;# 
   741  0297                     	;# 
   742  0298                     	;# 
   743  029F                     	;# 
   744  030C                     	;# 
   745  030D                     	;# 
   746  030E                     	;# 
   747  0311                     	;# 
   748  0311                     	;# 
   749  0312                     	;# 
   750  0313                     	;# 
   751  0314                     	;# 
   752  0315                     	;# 
   753  0315                     	;# 
   754  0316                     	;# 
   755  0317                     	;# 
   756  0318                     	;# 
   757  038C                     	;# 
   758  038D                     	;# 
   759  038E                     	;# 
   760  0391                     	;# 
   761  0392                     	;# 
   762  0393                     	;# 
   763  0394                     	;# 
   764  0395                     	;# 
   765  0396                     	;# 
   766  0397                     	;# 
   767  0398                     	;# 
   768  0399                     	;# 
   769  039A                     	;# 
   770  039C                     	;# 
   771  039D                     	;# 
   772  039E                     	;# 
   773  039F                     	;# 
   774  0411                     	;# 
   775  0411                     	;# 
   776  0412                     	;# 
   777  0413                     	;# 
   778  0414                     	;# 
   779  0415                     	;# 
   780  0416                     	;# 
   781  0417                     	;# 
   782  0418                     	;# 
   783  0418                     	;# 
   784  0419                     	;# 
   785  041A                     	;# 
   786  041B                     	;# 
   787  041C                     	;# 
   788  041D                     	;# 
   789  041E                     	;# 
   790  041F                     	;# 
   791  0498                     	;# 
   792  0498                     	;# 
   793  0499                     	;# 
   794  049A                     	;# 
   795  049B                     	;# 
   796  049B                     	;# 
   797  049C                     	;# 
   798  049D                     	;# 
   799  049E                     	;# 
   800  049F                     	;# 
   801  0617                     	;# 
   802  0618                     	;# 
   803  0619                     	;# 
   804  0619                     	;# 
   805  061A                     	;# 
   806  061B                     	;# 
   807  061C                     	;# 
   808  061C                     	;# 
   809  061F                     	;# 
   810  0691                     	;# 
   811  0692                     	;# 
   812  0693                     	;# 
   813  0694                     	;# 
   814  0695                     	;# 
   815  0696                     	;# 
   816  0697                     	;# 
   817  0698                     	;# 
   818  0699                     	;# 
   819  0711                     	;# 
   820  0712                     	;# 
   821  0713                     	;# 
   822  0714                     	;# 
   823  0715                     	;# 
   824  0716                     	;# 
   825  0717                     	;# 
   826  0718                     	;# 
   827  0719                     	;# 
   828  0891                     	;# 
   829  0891                     	;# 
   830  0891                     	;# 
   831  0891                     	;# 
   832  0891                     	;# 
   833  0891                     	;# 
   834  0892                     	;# 
   835  0892                     	;# 
   836  0892                     	;# 
   837  0893                     	;# 
   838  0893                     	;# 
   839  0893                     	;# 
   840  0893                     	;# 
   841  0893                     	;# 
   842  0893                     	;# 
   843  0894                     	;# 
   844  0894                     	;# 
   845  0894                     	;# 
   846  0895                     	;# 
   847  0895                     	;# 
   848  0895                     	;# 
   849  0896                     	;# 
   850  0896                     	;# 
   851  0896                     	;# 
   852  089B                     	;# 
   853  0911                     	;# 
   854  0912                     	;# 
   855  0913                     	;# 
   856  0914                     	;# 
   857  0915                     	;# 
   858  0916                     	;# 
   859  0918                     	;# 
   860  0919                     	;# 
   861  091A                     	;# 
   862  091B                     	;# 
   863  091C                     	;# 
   864  091D                     	;# 
   865  091E                     	;# 
   866  091F                     	;# 
   867  0E0F                     	;# 
   868  0E10                     	;# 
   869  0E11                     	;# 
   870  0E12                     	;# 
   871  0E13                     	;# 
   872  0E14                     	;# 
   873  0E15                     	;# 
   874  0E16                     	;# 
   875  0E17                     	;# 
   876  0E18                     	;# 
   877  0E19                     	;# 
   878  0E1A                     	;# 
   879  0E1B                     	;# 
   880  0E1C                     	;# 
   881  0E1D                     	;# 
   882  0E1E                     	;# 
   883  0E1F                     	;# 
   884  0E20                     	;# 
   885  0E21                     	;# 
   886  0E22                     	;# 
   887  0E24                     	;# 
   888  0E25                     	;# 
   889  0E28                     	;# 
   890  0E29                     	;# 
   891  0E2A                     	;# 
   892  0E2B                     	;# 
   893  0E2C                     	;# 
   894  0E2D                     	;# 
   895  0E2E                     	;# 
   896  0E2F                     	;# 
   897  0E90                     	;# 
   898  0E91                     	;# 
   899  0E92                     	;# 
   900  0E94                     	;# 
   901  0E95                     	;# 
   902  0E9C                     	;# 
   903  0E9D                     	;# 
   904  0E9E                     	;# 
   905  0E9F                     	;# 
   906  0EA0                     	;# 
   907  0EA1                     	;# 
   908  0EA2                     	;# 
   909  0EA3                     	;# 
   910  0EA4                     	;# 
   911  0EA5                     	;# 
   912  0EA6                     	;# 
   913  0EA7                     	;# 
   914  0F0F                     	;# 
   915  0F10                     	;# 
   916  0F11                     	;# 
   917  0F12                     	;# 
   918  0F13                     	;# 
   919  0F14                     	;# 
   920  0F15                     	;# 
   921  0F16                     	;# 
   922  0F17                     	;# 
   923  0F18                     	;# 
   924  0F19                     	;# 
   925  0F1A                     	;# 
   926  0F1B                     	;# 
   927  0F1C                     	;# 
   928  0F1D                     	;# 
   929  0F1E                     	;# 
   930  0F1F                     	;# 
   931  0F20                     	;# 
   932  0F21                     	;# 
   933  0F22                     	;# 
   934  0F23                     	;# 
   935  0F24                     	;# 
   936  0F25                     	;# 
   937  0F26                     	;# 
   938  0F27                     	;# 
   939  0F28                     	;# 
   940  0F29                     	;# 
   941  0F2A                     	;# 
   942  0F2B                     	;# 
   943  0F2C                     	;# 
   944  0F2D                     	;# 
   945  0F2E                     	;# 
   946  0F2F                     	;# 
   947  0F30                     	;# 
   948  0F31                     	;# 
   949  0F32                     	;# 
   950  0F33                     	;# 
   951  0F34                     	;# 
   952  0F35                     	;# 
   953  0F36                     	;# 
   954  0F37                     	;# 
   955  0FE4                     	;# 
   956  0FE5                     	;# 
   957  0FE6                     	;# 
   958  0FE7                     	;# 
   959  0FE8                     	;# 
   960  0FE9                     	;# 
   961  0FEA                     	;# 
   962  0FEB                     	;# 
   963  0FED                     	;# 
   964  0FEE                     	;# 
   965  0FEF                     	;# 
   966  0000                     	;# 
   967  0001                     	;# 
   968  0002                     	;# 
   969  0003                     	;# 
   970  0004                     	;# 
   971  0005                     	;# 
   972  0006                     	;# 
   973  0007                     	;# 
   974  0008                     	;# 
   975  0009                     	;# 
   976  000A                     	;# 
   977  000B                     	;# 
   978  000C                     	;# 
   979  000D                     	;# 
   980  000E                     	;# 
   981  0010                     	;# 
   982  0011                     	;# 
   983  0012                     	;# 
   984  0013                     	;# 
   985  0014                     	;# 
   986  0015                     	;# 
   987  0015                     	;# 
   988  0016                     	;# 
   989  0016                     	;# 
   990  0017                     	;# 
   991  0018                     	;# 
   992  0019                     	;# 
   993  0019                     	;# 
   994  001A                     	;# 
   995  001B                     	;# 
   996  001C                     	;# 
   997  001D                     	;# 
   998  001E                     	;# 
   999  001F                     	;# 
  1000  008C                     	;# 
  1001  008D                     	;# 
  1002  008E                     	;# 
  1003  0090                     	;# 
  1004  0091                     	;# 
  1005  0092                     	;# 
  1006  0093                     	;# 
  1007  0094                     	;# 
  1008  0097                     	;# 
  1009  009B                     	;# 
  1010  009B                     	;# 
  1011  009C                     	;# 
  1012  009D                     	;# 
  1013  009E                     	;# 
  1014  009F                     	;# 
  1015  010C                     	;# 
  1016  010D                     	;# 
  1017  010E                     	;# 
  1018  0111                     	;# 
  1019  0112                     	;# 
  1020  0113                     	;# 
  1021  0114                     	;# 
  1022  0115                     	;# 
  1023  0116                     	;# 
  1024  0117                     	;# 
  1025  0118                     	;# 
  1026  0119                     	;# 
  1027  018C                     	;# 
  1028  018D                     	;# 
  1029  018E                     	;# 
  1030  0199                     	;# 
  1031  0199                     	;# 
  1032  0199                     	;# 
  1033  019A                     	;# 
  1034  019A                     	;# 
  1035  019A                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019B                     	;# 
  1041  019C                     	;# 
  1042  019C                     	;# 
  1043  019C                     	;# 
  1044  019D                     	;# 
  1045  019D                     	;# 
  1046  019D                     	;# 
  1047  019E                     	;# 
  1048  019E                     	;# 
  1049  019E                     	;# 
  1050  019F                     	;# 
  1051  019F                     	;# 
  1052  019F                     	;# 
  1053  019F                     	;# 
  1054  019F                     	;# 
  1055  020C                     	;# 
  1056  020D                     	;# 
  1057  020E                     	;# 
  1058  0211                     	;# 
  1059  0211                     	;# 
  1060  0212                     	;# 
  1061  0212                     	;# 
  1062  0213                     	;# 
  1063  0213                     	;# 
  1064  0214                     	;# 
  1065  0214                     	;# 
  1066  0215                     	;# 
  1067  0215                     	;# 
  1068  0215                     	;# 
  1069  0215                     	;# 
  1070  0216                     	;# 
  1071  0216                     	;# 
  1072  0217                     	;# 
  1073  0217                     	;# 
  1074  0219                     	;# 
  1075  021A                     	;# 
  1076  021B                     	;# 
  1077  021C                     	;# 
  1078  021D                     	;# 
  1079  021D                     	;# 
  1080  021E                     	;# 
  1081  021F                     	;# 
  1082  028C                     	;# 
  1083  028D                     	;# 
  1084  028E                     	;# 
  1085  0291                     	;# 
  1086  0291                     	;# 
  1087  0292                     	;# 
  1088  0293                     	;# 
  1089  0294                     	;# 
  1090  0295                     	;# 
  1091  0295                     	;# 
  1092  0296                     	;# 
  1093  0297                     	;# 
  1094  0298                     	;# 
  1095  029F                     	;# 
  1096  030C                     	;# 
  1097  030D                     	;# 
  1098  030E                     	;# 
  1099  0311                     	;# 
  1100  0311                     	;# 
  1101  0312                     	;# 
  1102  0313                     	;# 
  1103  0314                     	;# 
  1104  0315                     	;# 
  1105  0315                     	;# 
  1106  0316                     	;# 
  1107  0317                     	;# 
  1108  0318                     	;# 
  1109  038C                     	;# 
  1110  038D                     	;# 
  1111  038E                     	;# 
  1112  0391                     	;# 
  1113  0392                     	;# 
  1114  0393                     	;# 
  1115  0394                     	;# 
  1116  0395                     	;# 
  1117  0396                     	;# 
  1118  0397                     	;# 
  1119  0398                     	;# 
  1120  0399                     	;# 
  1121  039A                     	;# 
  1122  039C                     	;# 
  1123  039D                     	;# 
  1124  039E                     	;# 
  1125  039F                     	;# 
  1126  0411                     	;# 
  1127  0411                     	;# 
  1128  0412                     	;# 
  1129  0413                     	;# 
  1130  0414                     	;# 
  1131  0415                     	;# 
  1132  0416                     	;# 
  1133  0417                     	;# 
  1134  0418                     	;# 
  1135  0418                     	;# 
  1136  0419                     	;# 
  1137  041A                     	;# 
  1138  041B                     	;# 
  1139  041C                     	;# 
  1140  041D                     	;# 
  1141  041E                     	;# 
  1142  041F                     	;# 
  1143  0498                     	;# 
  1144  0498                     	;# 
  1145  0499                     	;# 
  1146  049A                     	;# 
  1147  049B                     	;# 
  1148  049B                     	;# 
  1149  049C                     	;# 
  1150  049D                     	;# 
  1151  049E                     	;# 
  1152  049F                     	;# 
  1153  0617                     	;# 
  1154  0618                     	;# 
  1155  0619                     	;# 
  1156  0619                     	;# 
  1157  061A                     	;# 
  1158  061B                     	;# 
  1159  061C                     	;# 
  1160  061C                     	;# 
  1161  061F                     	;# 
  1162  0691                     	;# 
  1163  0692                     	;# 
  1164  0693                     	;# 
  1165  0694                     	;# 
  1166  0695                     	;# 
  1167  0696                     	;# 
  1168  0697                     	;# 
  1169  0698                     	;# 
  1170  0699                     	;# 
  1171  0711                     	;# 
  1172  0712                     	;# 
  1173  0713                     	;# 
  1174  0714                     	;# 
  1175  0715                     	;# 
  1176  0716                     	;# 
  1177  0717                     	;# 
  1178  0718                     	;# 
  1179  0719                     	;# 
  1180  0891                     	;# 
  1181  0891                     	;# 
  1182  0891                     	;# 
  1183  0891                     	;# 
  1184  0891                     	;# 
  1185  0891                     	;# 
  1186  0892                     	;# 
  1187  0892                     	;# 
  1188  0892                     	;# 
  1189  0893                     	;# 
  1190  0893                     	;# 
  1191  0893                     	;# 
  1192  0893                     	;# 
  1193  0893                     	;# 
  1194  0893                     	;# 
  1195  0894                     	;# 
  1196  0894                     	;# 
  1197  0894                     	;# 
  1198  0895                     	;# 
  1199  0895                     	;# 
  1200  0895                     	;# 
  1201  0896                     	;# 
  1202  0896                     	;# 
  1203  0896                     	;# 
  1204  089B                     	;# 
  1205  0911                     	;# 
  1206  0912                     	;# 
  1207  0913                     	;# 
  1208  0914                     	;# 
  1209  0915                     	;# 
  1210  0916                     	;# 
  1211  0918                     	;# 
  1212  0919                     	;# 
  1213  091A                     	;# 
  1214  091B                     	;# 
  1215  091C                     	;# 
  1216  091D                     	;# 
  1217  091E                     	;# 
  1218  091F                     	;# 
  1219  0E0F                     	;# 
  1220  0E10                     	;# 
  1221  0E11                     	;# 
  1222  0E12                     	;# 
  1223  0E13                     	;# 
  1224  0E14                     	;# 
  1225  0E15                     	;# 
  1226  0E16                     	;# 
  1227  0E17                     	;# 
  1228  0E18                     	;# 
  1229  0E19                     	;# 
  1230  0E1A                     	;# 
  1231  0E1B                     	;# 
  1232  0E1C                     	;# 
  1233  0E1D                     	;# 
  1234  0E1E                     	;# 
  1235  0E1F                     	;# 
  1236  0E20                     	;# 
  1237  0E21                     	;# 
  1238  0E22                     	;# 
  1239  0E24                     	;# 
  1240  0E25                     	;# 
  1241  0E28                     	;# 
  1242  0E29                     	;# 
  1243  0E2A                     	;# 
  1244  0E2B                     	;# 
  1245  0E2C                     	;# 
  1246  0E2D                     	;# 
  1247  0E2E                     	;# 
  1248  0E2F                     	;# 
  1249  0E90                     	;# 
  1250  0E91                     	;# 
  1251  0E92                     	;# 
  1252  0E94                     	;# 
  1253  0E95                     	;# 
  1254  0E9C                     	;# 
  1255  0E9D                     	;# 
  1256  0E9E                     	;# 
  1257  0E9F                     	;# 
  1258  0EA0                     	;# 
  1259  0EA1                     	;# 
  1260  0EA2                     	;# 
  1261  0EA3                     	;# 
  1262  0EA4                     	;# 
  1263  0EA5                     	;# 
  1264  0EA6                     	;# 
  1265  0EA7                     	;# 
  1266  0F0F                     	;# 
  1267  0F10                     	;# 
  1268  0F11                     	;# 
  1269  0F12                     	;# 
  1270  0F13                     	;# 
  1271  0F14                     	;# 
  1272  0F15                     	;# 
  1273  0F16                     	;# 
  1274  0F17                     	;# 
  1275  0F18                     	;# 
  1276  0F19                     	;# 
  1277  0F1A                     	;# 
  1278  0F1B                     	;# 
  1279  0F1C                     	;# 
  1280  0F1D                     	;# 
  1281  0F1E                     	;# 
  1282  0F1F                     	;# 
  1283  0F20                     	;# 
  1284  0F21                     	;# 
  1285  0F22                     	;# 
  1286  0F23                     	;# 
  1287  0F24                     	;# 
  1288  0F25                     	;# 
  1289  0F26                     	;# 
  1290  0F27                     	;# 
  1291  0F28                     	;# 
  1292  0F29                     	;# 
  1293  0F2A                     	;# 
  1294  0F2B                     	;# 
  1295  0F2C                     	;# 
  1296  0F2D                     	;# 
  1297  0F2E                     	;# 
  1298  0F2F                     	;# 
  1299  0F30                     	;# 
  1300  0F31                     	;# 
  1301  0F32                     	;# 
  1302  0F33                     	;# 
  1303  0F34                     	;# 
  1304  0F35                     	;# 
  1305  0F36                     	;# 
  1306  0F37                     	;# 
  1307  0FE4                     	;# 
  1308  0FE5                     	;# 
  1309  0FE6                     	;# 
  1310  0FE7                     	;# 
  1311  0FE8                     	;# 
  1312  0FE9                     	;# 
  1313  0FEA                     	;# 
  1314  0FEB                     	;# 
  1315  0FED                     	;# 
  1316  0FEE                     	;# 
  1317  0FEF                     	;# 
  1318  0000                     	;# 
  1319  0001                     	;# 
  1320  0002                     	;# 
  1321  0003                     	;# 
  1322  0004                     	;# 
  1323  0005                     	;# 
  1324  0006                     	;# 
  1325  0007                     	;# 
  1326  0008                     	;# 
  1327  0009                     	;# 
  1328  000A                     	;# 
  1329  000B                     	;# 
  1330  000C                     	;# 
  1331  000D                     	;# 
  1332  000E                     	;# 
  1333  0010                     	;# 
  1334  0011                     	;# 
  1335  0012                     	;# 
  1336  0013                     	;# 
  1337  0014                     	;# 
  1338  0015                     	;# 
  1339  0015                     	;# 
  1340  0016                     	;# 
  1341  0016                     	;# 
  1342  0017                     	;# 
  1343  0018                     	;# 
  1344  0019                     	;# 
  1345  0019                     	;# 
  1346  001A                     	;# 
  1347  001B                     	;# 
  1348  001C                     	;# 
  1349  001D                     	;# 
  1350  001E                     	;# 
  1351  001F                     	;# 
  1352  008C                     	;# 
  1353  008D                     	;# 
  1354  008E                     	;# 
  1355  0090                     	;# 
  1356  0091                     	;# 
  1357  0092                     	;# 
  1358  0093                     	;# 
  1359  0094                     	;# 
  1360  0097                     	;# 
  1361  009B                     	;# 
  1362  009B                     	;# 
  1363  009C                     	;# 
  1364  009D                     	;# 
  1365  009E                     	;# 
  1366  009F                     	;# 
  1367  010C                     	;# 
  1368  010D                     	;# 
  1369  010E                     	;# 
  1370  0111                     	;# 
  1371  0112                     	;# 
  1372  0113                     	;# 
  1373  0114                     	;# 
  1374  0115                     	;# 
  1375  0116                     	;# 
  1376  0117                     	;# 
  1377  0118                     	;# 
  1378  0119                     	;# 
  1379  018C                     	;# 
  1380  018D                     	;# 
  1381  018E                     	;# 
  1382  0199                     	;# 
  1383  0199                     	;# 
  1384  0199                     	;# 
  1385  019A                     	;# 
  1386  019A                     	;# 
  1387  019A                     	;# 
  1388  019B                     	;# 
  1389  019B                     	;# 
  1390  019B                     	;# 
  1391  019B                     	;# 
  1392  019B                     	;# 
  1393  019C                     	;# 
  1394  019C                     	;# 
  1395  019C                     	;# 
  1396  019D                     	;# 
  1397  019D                     	;# 
  1398  019D                     	;# 
  1399  019E                     	;# 
  1400  019E                     	;# 
  1401  019E                     	;# 
  1402  019F                     	;# 
  1403  019F                     	;# 
  1404  019F                     	;# 
  1405  019F                     	;# 
  1406  019F                     	;# 
  1407  020C                     	;# 
  1408  020D                     	;# 
  1409  020E                     	;# 
  1410  0211                     	;# 
  1411  0211                     	;# 
  1412  0212                     	;# 
  1413  0212                     	;# 
  1414  0213                     	;# 
  1415  0213                     	;# 
  1416  0214                     	;# 
  1417  0214                     	;# 
  1418  0215                     	;# 
  1419  0215                     	;# 
  1420  0215                     	;# 
  1421  0215                     	;# 
  1422  0216                     	;# 
  1423  0216                     	;# 
  1424  0217                     	;# 
  1425  0217                     	;# 
  1426  0219                     	;# 
  1427  021A                     	;# 
  1428  021B                     	;# 
  1429  021C                     	;# 
  1430  021D                     	;# 
  1431  021D                     	;# 
  1432  021E                     	;# 
  1433  021F                     	;# 
  1434  028C                     	;# 
  1435  028D                     	;# 
  1436  028E                     	;# 
  1437  0291                     	;# 
  1438  0291                     	;# 
  1439  0292                     	;# 
  1440  0293                     	;# 
  1441  0294                     	;# 
  1442  0295                     	;# 
  1443  0295                     	;# 
  1444  0296                     	;# 
  1445  0297                     	;# 
  1446  0298                     	;# 
  1447  029F                     	;# 
  1448  030C                     	;# 
  1449  030D                     	;# 
  1450  030E                     	;# 
  1451  0311                     	;# 
  1452  0311                     	;# 
  1453  0312                     	;# 
  1454  0313                     	;# 
  1455  0314                     	;# 
  1456  0315                     	;# 
  1457  0315                     	;# 
  1458  0316                     	;# 
  1459  0317                     	;# 
  1460  0318                     	;# 
  1461  038C                     	;# 
  1462  038D                     	;# 
  1463  038E                     	;# 
  1464  0391                     	;# 
  1465  0392                     	;# 
  1466  0393                     	;# 
  1467  0394                     	;# 
  1468  0395                     	;# 
  1469  0396                     	;# 
  1470  0397                     	;# 
  1471  0398                     	;# 
  1472  0399                     	;# 
  1473  039A                     	;# 
  1474  039C                     	;# 
  1475  039D                     	;# 
  1476  039E                     	;# 
  1477  039F                     	;# 
  1478  0411                     	;# 
  1479  0411                     	;# 
  1480  0412                     	;# 
  1481  0413                     	;# 
  1482  0414                     	;# 
  1483  0415                     	;# 
  1484  0416                     	;# 
  1485  0417                     	;# 
  1486  0418                     	;# 
  1487  0418                     	;# 
  1488  0419                     	;# 
  1489  041A                     	;# 
  1490  041B                     	;# 
  1491  041C                     	;# 
  1492  041D                     	;# 
  1493  041E                     	;# 
  1494  041F                     	;# 
  1495  0498                     	;# 
  1496  0498                     	;# 
  1497  0499                     	;# 
  1498  049A                     	;# 
  1499  049B                     	;# 
  1500  049B                     	;# 
  1501  049C                     	;# 
  1502  049D                     	;# 
  1503  049E                     	;# 
  1504  049F                     	;# 
  1505  0617                     	;# 
  1506  0618                     	;# 
  1507  0619                     	;# 
  1508  0619                     	;# 
  1509  061A                     	;# 
  1510  061B                     	;# 
  1511  061C                     	;# 
  1512  061C                     	;# 
  1513  061F                     	;# 
  1514  0691                     	;# 
  1515  0692                     	;# 
  1516  0693                     	;# 
  1517  0694                     	;# 
  1518  0695                     	;# 
  1519  0696                     	;# 
  1520  0697                     	;# 
  1521  0698                     	;# 
  1522  0699                     	;# 
  1523  0711                     	;# 
  1524  0712                     	;# 
  1525  0713                     	;# 
  1526  0714                     	;# 
  1527  0715                     	;# 
  1528  0716                     	;# 
  1529  0717                     	;# 
  1530  0718                     	;# 
  1531  0719                     	;# 
  1532  0891                     	;# 
  1533  0891                     	;# 
  1534  0891                     	;# 
  1535  0891                     	;# 
  1536  0891                     	;# 
  1537  0891                     	;# 
  1538  0892                     	;# 
  1539  0892                     	;# 
  1540  0892                     	;# 
  1541  0893                     	;# 
  1542  0893                     	;# 
  1543  0893                     	;# 
  1544  0893                     	;# 
  1545  0893                     	;# 
  1546  0893                     	;# 
  1547  0894                     	;# 
  1548  0894                     	;# 
  1549  0894                     	;# 
  1550  0895                     	;# 
  1551  0895                     	;# 
  1552  0895                     	;# 
  1553  0896                     	;# 
  1554  0896                     	;# 
  1555  0896                     	;# 
  1556  089B                     	;# 
  1557  0911                     	;# 
  1558  0912                     	;# 
  1559  0913                     	;# 
  1560  0914                     	;# 
  1561  0915                     	;# 
  1562  0916                     	;# 
  1563  0918                     	;# 
  1564  0919                     	;# 
  1565  091A                     	;# 
  1566  091B                     	;# 
  1567  091C                     	;# 
  1568  091D                     	;# 
  1569  091E                     	;# 
  1570  091F                     	;# 
  1571  0E0F                     	;# 
  1572  0E10                     	;# 
  1573  0E11                     	;# 
  1574  0E12                     	;# 
  1575  0E13                     	;# 
  1576  0E14                     	;# 
  1577  0E15                     	;# 
  1578  0E16                     	;# 
  1579  0E17                     	;# 
  1580  0E18                     	;# 
  1581  0E19                     	;# 
  1582  0E1A                     	;# 
  1583  0E1B                     	;# 
  1584  0E1C                     	;# 
  1585  0E1D                     	;# 
  1586  0E1E                     	;# 
  1587  0E1F                     	;# 
  1588  0E20                     	;# 
  1589  0E21                     	;# 
  1590  0E22                     	;# 
  1591  0E24                     	;# 
  1592  0E25                     	;# 
  1593  0E28                     	;# 
  1594  0E29                     	;# 
  1595  0E2A                     	;# 
  1596  0E2B                     	;# 
  1597  0E2C                     	;# 
  1598  0E2D                     	;# 
  1599  0E2E                     	;# 
  1600  0E2F                     	;# 
  1601  0E90                     	;# 
  1602  0E91                     	;# 
  1603  0E92                     	;# 
  1604  0E94                     	;# 
  1605  0E95                     	;# 
  1606  0E9C                     	;# 
  1607  0E9D                     	;# 
  1608  0E9E                     	;# 
  1609  0E9F                     	;# 
  1610  0EA0                     	;# 
  1611  0EA1                     	;# 
  1612  0EA2                     	;# 
  1613  0EA3                     	;# 
  1614  0EA4                     	;# 
  1615  0EA5                     	;# 
  1616  0EA6                     	;# 
  1617  0EA7                     	;# 
  1618  0F0F                     	;# 
  1619  0F10                     	;# 
  1620  0F11                     	;# 
  1621  0F12                     	;# 
  1622  0F13                     	;# 
  1623  0F14                     	;# 
  1624  0F15                     	;# 
  1625  0F16                     	;# 
  1626  0F17                     	;# 
  1627  0F18                     	;# 
  1628  0F19                     	;# 
  1629  0F1A                     	;# 
  1630  0F1B                     	;# 
  1631  0F1C                     	;# 
  1632  0F1D                     	;# 
  1633  0F1E                     	;# 
  1634  0F1F                     	;# 
  1635  0F20                     	;# 
  1636  0F21                     	;# 
  1637  0F22                     	;# 
  1638  0F23                     	;# 
  1639  0F24                     	;# 
  1640  0F25                     	;# 
  1641  0F26                     	;# 
  1642  0F27                     	;# 
  1643  0F28                     	;# 
  1644  0F29                     	;# 
  1645  0F2A                     	;# 
  1646  0F2B                     	;# 
  1647  0F2C                     	;# 
  1648  0F2D                     	;# 
  1649  0F2E                     	;# 
  1650  0F2F                     	;# 
  1651  0F30                     	;# 
  1652  0F31                     	;# 
  1653  0F32                     	;# 
  1654  0F33                     	;# 
  1655  0F34                     	;# 
  1656  0F35                     	;# 
  1657  0F36                     	;# 
  1658  0F37                     	;# 
  1659  0FE4                     	;# 
  1660  0FE5                     	;# 
  1661  0FE6                     	;# 
  1662  0FE7                     	;# 
  1663  0FE8                     	;# 
  1664  0FE9                     	;# 
  1665  0FEA                     	;# 
  1666  0FEB                     	;# 
  1667  0FED                     	;# 
  1668  0FEE                     	;# 
  1669  0FEF                     	;# 
  1670  0000                     	;# 
  1671  0001                     	;# 
  1672  0002                     	;# 
  1673  0003                     	;# 
  1674  0004                     	;# 
  1675  0005                     	;# 
  1676  0006                     	;# 
  1677  0007                     	;# 
  1678  0008                     	;# 
  1679  0009                     	;# 
  1680  000A                     	;# 
  1681  000B                     	;# 
  1682  000C                     	;# 
  1683  000D                     	;# 
  1684  000E                     	;# 
  1685  0010                     	;# 
  1686  0011                     	;# 
  1687  0012                     	;# 
  1688  0013                     	;# 
  1689  0014                     	;# 
  1690  0015                     	;# 
  1691  0015                     	;# 
  1692  0016                     	;# 
  1693  0016                     	;# 
  1694  0017                     	;# 
  1695  0018                     	;# 
  1696  0019                     	;# 
  1697  0019                     	;# 
  1698  001A                     	;# 
  1699  001B                     	;# 
  1700  001C                     	;# 
  1701  001D                     	;# 
  1702  001E                     	;# 
  1703  001F                     	;# 
  1704  008C                     	;# 
  1705  008D                     	;# 
  1706  008E                     	;# 
  1707  0090                     	;# 
  1708  0091                     	;# 
  1709  0092                     	;# 
  1710  0093                     	;# 
  1711  0094                     	;# 
  1712  0097                     	;# 
  1713  009B                     	;# 
  1714  009B                     	;# 
  1715  009C                     	;# 
  1716  009D                     	;# 
  1717  009E                     	;# 
  1718  009F                     	;# 
  1719  010C                     	;# 
  1720  010D                     	;# 
  1721  010E                     	;# 
  1722  0111                     	;# 
  1723  0112                     	;# 
  1724  0113                     	;# 
  1725  0114                     	;# 
  1726  0115                     	;# 
  1727  0116                     	;# 
  1728  0117                     	;# 
  1729  0118                     	;# 
  1730  0119                     	;# 
  1731  018C                     	;# 
  1732  018D                     	;# 
  1733  018E                     	;# 
  1734  0199                     	;# 
  1735  0199                     	;# 
  1736  0199                     	;# 
  1737  019A                     	;# 
  1738  019A                     	;# 
  1739  019A                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019B                     	;# 
  1745  019C                     	;# 
  1746  019C                     	;# 
  1747  019C                     	;# 
  1748  019D                     	;# 
  1749  019D                     	;# 
  1750  019D                     	;# 
  1751  019E                     	;# 
  1752  019E                     	;# 
  1753  019E                     	;# 
  1754  019F                     	;# 
  1755  019F                     	;# 
  1756  019F                     	;# 
  1757  019F                     	;# 
  1758  019F                     	;# 
  1759  020C                     	;# 
  1760  020D                     	;# 
  1761  020E                     	;# 
  1762  0211                     	;# 
  1763  0211                     	;# 
  1764  0212                     	;# 
  1765  0212                     	;# 
  1766  0213                     	;# 
  1767  0213                     	;# 
  1768  0214                     	;# 
  1769  0214                     	;# 
  1770  0215                     	;# 
  1771  0215                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0216                     	;# 
  1775  0216                     	;# 
  1776  0217                     	;# 
  1777  0217                     	;# 
  1778  0219                     	;# 
  1779  021A                     	;# 
  1780  021B                     	;# 
  1781  021C                     	;# 
  1782  021D                     	;# 
  1783  021D                     	;# 
  1784  021E                     	;# 
  1785  021F                     	;# 
  1786  028C                     	;# 
  1787  028D                     	;# 
  1788  028E                     	;# 
  1789  0291                     	;# 
  1790  0291                     	;# 
  1791  0292                     	;# 
  1792  0293                     	;# 
  1793  0294                     	;# 
  1794  0295                     	;# 
  1795  0295                     	;# 
  1796  0296                     	;# 
  1797  0297                     	;# 
  1798  0298                     	;# 
  1799  029F                     	;# 
  1800  030C                     	;# 
  1801  030D                     	;# 
  1802  030E                     	;# 
  1803  0311                     	;# 
  1804  0311                     	;# 
  1805  0312                     	;# 
  1806  0313                     	;# 
  1807  0314                     	;# 
  1808  0315                     	;# 
  1809  0315                     	;# 
  1810  0316                     	;# 
  1811  0317                     	;# 
  1812  0318                     	;# 
  1813  038C                     	;# 
  1814  038D                     	;# 
  1815  038E                     	;# 
  1816  0391                     	;# 
  1817  0392                     	;# 
  1818  0393                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0397                     	;# 
  1823  0398                     	;# 
  1824  0399                     	;# 
  1825  039A                     	;# 
  1826  039C                     	;# 
  1827  039D                     	;# 
  1828  039E                     	;# 
  1829  039F                     	;# 
  1830  0411                     	;# 
  1831  0411                     	;# 
  1832  0412                     	;# 
  1833  0413                     	;# 
  1834  0414                     	;# 
  1835  0415                     	;# 
  1836  0416                     	;# 
  1837  0417                     	;# 
  1838  0418                     	;# 
  1839  0418                     	;# 
  1840  0419                     	;# 
  1841  041A                     	;# 
  1842  041B                     	;# 
  1843  041C                     	;# 
  1844  041D                     	;# 
  1845  041E                     	;# 
  1846  041F                     	;# 
  1847  0498                     	;# 
  1848  0498                     	;# 
  1849  0499                     	;# 
  1850  049A                     	;# 
  1851  049B                     	;# 
  1852  049B                     	;# 
  1853  049C                     	;# 
  1854  049D                     	;# 
  1855  049E                     	;# 
  1856  049F                     	;# 
  1857  0617                     	;# 
  1858  0618                     	;# 
  1859  0619                     	;# 
  1860  0619                     	;# 
  1861  061A                     	;# 
  1862  061B                     	;# 
  1863  061C                     	;# 
  1864  061C                     	;# 
  1865  061F                     	;# 
  1866  0691                     	;# 
  1867  0692                     	;# 
  1868  0693                     	;# 
  1869  0694                     	;# 
  1870  0695                     	;# 
  1871  0696                     	;# 
  1872  0697                     	;# 
  1873  0698                     	;# 
  1874  0699                     	;# 
  1875  0711                     	;# 
  1876  0712                     	;# 
  1877  0713                     	;# 
  1878  0714                     	;# 
  1879  0715                     	;# 
  1880  0716                     	;# 
  1881  0717                     	;# 
  1882  0718                     	;# 
  1883  0719                     	;# 
  1884  0891                     	;# 
  1885  0891                     	;# 
  1886  0891                     	;# 
  1887  0891                     	;# 
  1888  0891                     	;# 
  1889  0891                     	;# 
  1890  0892                     	;# 
  1891  0892                     	;# 
  1892  0892                     	;# 
  1893  0893                     	;# 
  1894  0893                     	;# 
  1895  0893                     	;# 
  1896  0893                     	;# 
  1897  0893                     	;# 
  1898  0893                     	;# 
  1899  0894                     	;# 
  1900  0894                     	;# 
  1901  0894                     	;# 
  1902  0895                     	;# 
  1903  0895                     	;# 
  1904  0895                     	;# 
  1905  0896                     	;# 
  1906  0896                     	;# 
  1907  0896                     	;# 
  1908  089B                     	;# 
  1909  0911                     	;# 
  1910  0912                     	;# 
  1911  0913                     	;# 
  1912  0914                     	;# 
  1913  0915                     	;# 
  1914  0916                     	;# 
  1915  0918                     	;# 
  1916  0919                     	;# 
  1917  091A                     	;# 
  1918  091B                     	;# 
  1919  091C                     	;# 
  1920  091D                     	;# 
  1921  091E                     	;# 
  1922  091F                     	;# 
  1923  0E0F                     	;# 
  1924  0E10                     	;# 
  1925  0E11                     	;# 
  1926  0E12                     	;# 
  1927  0E13                     	;# 
  1928  0E14                     	;# 
  1929  0E15                     	;# 
  1930  0E16                     	;# 
  1931  0E17                     	;# 
  1932  0E18                     	;# 
  1933  0E19                     	;# 
  1934  0E1A                     	;# 
  1935  0E1B                     	;# 
  1936  0E1C                     	;# 
  1937  0E1D                     	;# 
  1938  0E1E                     	;# 
  1939  0E1F                     	;# 
  1940  0E20                     	;# 
  1941  0E21                     	;# 
  1942  0E22                     	;# 
  1943  0E24                     	;# 
  1944  0E25                     	;# 
  1945  0E28                     	;# 
  1946  0E29                     	;# 
  1947  0E2A                     	;# 
  1948  0E2B                     	;# 
  1949  0E2C                     	;# 
  1950  0E2D                     	;# 
  1951  0E2E                     	;# 
  1952  0E2F                     	;# 
  1953  0E90                     	;# 
  1954  0E91                     	;# 
  1955  0E92                     	;# 
  1956  0E94                     	;# 
  1957  0E95                     	;# 
  1958  0E9C                     	;# 
  1959  0E9D                     	;# 
  1960  0E9E                     	;# 
  1961  0E9F                     	;# 
  1962  0EA0                     	;# 
  1963  0EA1                     	;# 
  1964  0EA2                     	;# 
  1965  0EA3                     	;# 
  1966  0EA4                     	;# 
  1967  0EA5                     	;# 
  1968  0EA6                     	;# 
  1969  0EA7                     	;# 
  1970  0F0F                     	;# 
  1971  0F10                     	;# 
  1972  0F11                     	;# 
  1973  0F12                     	;# 
  1974  0F13                     	;# 
  1975  0F14                     	;# 
  1976  0F15                     	;# 
  1977  0F16                     	;# 
  1978  0F17                     	;# 
  1979  0F18                     	;# 
  1980  0F19                     	;# 
  1981  0F1A                     	;# 
  1982  0F1B                     	;# 
  1983  0F1C                     	;# 
  1984  0F1D                     	;# 
  1985  0F1E                     	;# 
  1986  0F1F                     	;# 
  1987  0F20                     	;# 
  1988  0F21                     	;# 
  1989  0F22                     	;# 
  1990  0F23                     	;# 
  1991  0F24                     	;# 
  1992  0F25                     	;# 
  1993  0F26                     	;# 
  1994  0F27                     	;# 
  1995  0F28                     	;# 
  1996  0F29                     	;# 
  1997  0F2A                     	;# 
  1998  0F2B                     	;# 
  1999  0F2C                     	;# 
  2000  0F2D                     	;# 
  2001  0F2E                     	;# 
  2002  0F2F                     	;# 
  2003  0F30                     	;# 
  2004  0F31                     	;# 
  2005  0F32                     	;# 
  2006  0F33                     	;# 
  2007  0F34                     	;# 
  2008  0F35                     	;# 
  2009  0F36                     	;# 
  2010  0F37                     	;# 
  2011  0FE4                     	;# 
  2012  0FE5                     	;# 
  2013  0FE6                     	;# 
  2014  0FE7                     	;# 
  2015  0FE8                     	;# 
  2016  0FE9                     	;# 
  2017  0FEA                     	;# 
  2018  0FEB                     	;# 
  2019  0FED                     	;# 
  2020  0FEE                     	;# 
  2021  0FEF                     	;# 
  2022  0000                     	;# 
  2023  0001                     	;# 
  2024  0002                     	;# 
  2025  0003                     	;# 
  2026  0004                     	;# 
  2027  0005                     	;# 
  2028  0006                     	;# 
  2029  0007                     	;# 
  2030  0008                     	;# 
  2031  0009                     	;# 
  2032  000A                     	;# 
  2033  000B                     	;# 
  2034  000C                     	;# 
  2035  000D                     	;# 
  2036  000E                     	;# 
  2037  0010                     	;# 
  2038  0011                     	;# 
  2039  0012                     	;# 
  2040  0013                     	;# 
  2041  0014                     	;# 
  2042  0015                     	;# 
  2043  0015                     	;# 
  2044  0016                     	;# 
  2045  0016                     	;# 
  2046  0017                     	;# 
  2047  0018                     	;# 
  2048  0019                     	;# 
  2049  0019                     	;# 
  2050  001A                     	;# 
  2051  001B                     	;# 
  2052  001C                     	;# 
  2053  001D                     	;# 
  2054  001E                     	;# 
  2055  001F                     	;# 
  2056  008C                     	;# 
  2057  008D                     	;# 
  2058  008E                     	;# 
  2059  0090                     	;# 
  2060  0091                     	;# 
  2061  0092                     	;# 
  2062  0093                     	;# 
  2063  0094                     	;# 
  2064  0097                     	;# 
  2065  009B                     	;# 
  2066  009B                     	;# 
  2067  009C                     	;# 
  2068  009D                     	;# 
  2069  009E                     	;# 
  2070  009F                     	;# 
  2071  010C                     	;# 
  2072  010D                     	;# 
  2073  010E                     	;# 
  2074  0111                     	;# 
  2075  0112                     	;# 
  2076  0113                     	;# 
  2077  0114                     	;# 
  2078  0115                     	;# 
  2079  0116                     	;# 
  2080  0117                     	;# 
  2081  0118                     	;# 
  2082  0119                     	;# 
  2083  018C                     	;# 
  2084  018D                     	;# 
  2085  018E                     	;# 
  2086  0199                     	;# 
  2087  0199                     	;# 
  2088  0199                     	;# 
  2089  019A                     	;# 
  2090  019A                     	;# 
  2091  019A                     	;# 
  2092  019B                     	;# 
  2093  019B                     	;# 
  2094  019B                     	;# 
  2095  019B                     	;# 
  2096  019B                     	;# 
  2097  019C                     	;# 
  2098  019C                     	;# 
  2099  019C                     	;# 
  2100  019D                     	;# 
  2101  019D                     	;# 
  2102  019D                     	;# 
  2103  019E                     	;# 
  2104  019E                     	;# 
  2105  019E                     	;# 
  2106  019F                     	;# 
  2107  019F                     	;# 
  2108  019F                     	;# 
  2109  019F                     	;# 
  2110  019F                     	;# 
  2111  020C                     	;# 
  2112  020D                     	;# 
  2113  020E                     	;# 
  2114  0211                     	;# 
  2115  0211                     	;# 
  2116  0212                     	;# 
  2117  0212                     	;# 
  2118  0213                     	;# 
  2119  0213                     	;# 
  2120  0214                     	;# 
  2121  0214                     	;# 
  2122  0215                     	;# 
  2123  0215                     	;# 
  2124  0215                     	;# 
  2125  0215                     	;# 
  2126  0216                     	;# 
  2127  0216                     	;# 
  2128  0217                     	;# 
  2129  0217                     	;# 
  2130  0219                     	;# 
  2131  021A                     	;# 
  2132  021B                     	;# 
  2133  021C                     	;# 
  2134  021D                     	;# 
  2135  021D                     	;# 
  2136  021E                     	;# 
  2137  021F                     	;# 
  2138  028C                     	;# 
  2139  028D                     	;# 
  2140  028E                     	;# 
  2141  0291                     	;# 
  2142  0291                     	;# 
  2143  0292                     	;# 
  2144  0293                     	;# 
  2145  0294                     	;# 
  2146  0295                     	;# 
  2147  0295                     	;# 
  2148  0296                     	;# 
  2149  0297                     	;# 
  2150  0298                     	;# 
  2151  029F                     	;# 
  2152  030C                     	;# 
  2153  030D                     	;# 
  2154  030E                     	;# 
  2155  0311                     	;# 
  2156  0311                     	;# 
  2157  0312                     	;# 
  2158  0313                     	;# 
  2159  0314                     	;# 
  2160  0315                     	;# 
  2161  0315                     	;# 
  2162  0316                     	;# 
  2163  0317                     	;# 
  2164  0318                     	;# 
  2165  038C                     	;# 
  2166  038D                     	;# 
  2167  038E                     	;# 
  2168  0391                     	;# 
  2169  0392                     	;# 
  2170  0393                     	;# 
  2171  0394                     	;# 
  2172  0395                     	;# 
  2173  0396                     	;# 
  2174  0397                     	;# 
  2175  0398                     	;# 
  2176  0399                     	;# 
  2177  039A                     	;# 
  2178  039C                     	;# 
  2179  039D                     	;# 
  2180  039E                     	;# 
  2181  039F                     	;# 
  2182  0411                     	;# 
  2183  0411                     	;# 
  2184  0412                     	;# 
  2185  0413                     	;# 
  2186  0414                     	;# 
  2187  0415                     	;# 
  2188  0416                     	;# 
  2189  0417                     	;# 
  2190  0418                     	;# 
  2191  0418                     	;# 
  2192  0419                     	;# 
  2193  041A                     	;# 
  2194  041B                     	;# 
  2195  041C                     	;# 
  2196  041D                     	;# 
  2197  041E                     	;# 
  2198  041F                     	;# 
  2199  0498                     	;# 
  2200  0498                     	;# 
  2201  0499                     	;# 
  2202  049A                     	;# 
  2203  049B                     	;# 
  2204  049B                     	;# 
  2205  049C                     	;# 
  2206  049D                     	;# 
  2207  049E                     	;# 
  2208  049F                     	;# 
  2209  0617                     	;# 
  2210  0618                     	;# 
  2211  0619                     	;# 
  2212  0619                     	;# 
  2213  061A                     	;# 
  2214  061B                     	;# 
  2215  061C                     	;# 
  2216  061C                     	;# 
  2217  061F                     	;# 
  2218  0691                     	;# 
  2219  0692                     	;# 
  2220  0693                     	;# 
  2221  0694                     	;# 
  2222  0695                     	;# 
  2223  0696                     	;# 
  2224  0697                     	;# 
  2225  0698                     	;# 
  2226  0699                     	;# 
  2227  0711                     	;# 
  2228  0712                     	;# 
  2229  0713                     	;# 
  2230  0714                     	;# 
  2231  0715                     	;# 
  2232  0716                     	;# 
  2233  0717                     	;# 
  2234  0718                     	;# 
  2235  0719                     	;# 
  2236  0891                     	;# 
  2237  0891                     	;# 
  2238  0891                     	;# 
  2239  0891                     	;# 
  2240  0891                     	;# 
  2241  0891                     	;# 
  2242  0892                     	;# 
  2243  0892                     	;# 
  2244  0892                     	;# 
  2245  0893                     	;# 
  2246  0893                     	;# 
  2247  0893                     	;# 
  2248  0893                     	;# 
  2249  0893                     	;# 
  2250  0893                     	;# 
  2251  0894                     	;# 
  2252  0894                     	;# 
  2253  0894                     	;# 
  2254  0895                     	;# 
  2255  0895                     	;# 
  2256  0895                     	;# 
  2257  0896                     	;# 
  2258  0896                     	;# 
  2259  0896                     	;# 
  2260  089B                     	;# 
  2261  0911                     	;# 
  2262  0912                     	;# 
  2263  0913                     	;# 
  2264  0914                     	;# 
  2265  0915                     	;# 
  2266  0916                     	;# 
  2267  0918                     	;# 
  2268  0919                     	;# 
  2269  091A                     	;# 
  2270  091B                     	;# 
  2271  091C                     	;# 
  2272  091D                     	;# 
  2273  091E                     	;# 
  2274  091F                     	;# 
  2275  0E0F                     	;# 
  2276  0E10                     	;# 
  2277  0E11                     	;# 
  2278  0E12                     	;# 
  2279  0E13                     	;# 
  2280  0E14                     	;# 
  2281  0E15                     	;# 
  2282  0E16                     	;# 
  2283  0E17                     	;# 
  2284  0E18                     	;# 
  2285  0E19                     	;# 
  2286  0E1A                     	;# 
  2287  0E1B                     	;# 
  2288  0E1C                     	;# 
  2289  0E1D                     	;# 
  2290  0E1E                     	;# 
  2291  0E1F                     	;# 
  2292  0E20                     	;# 
  2293  0E21                     	;# 
  2294  0E22                     	;# 
  2295  0E24                     	;# 
  2296  0E25                     	;# 
  2297  0E28                     	;# 
  2298  0E29                     	;# 
  2299  0E2A                     	;# 
  2300  0E2B                     	;# 
  2301  0E2C                     	;# 
  2302  0E2D                     	;# 
  2303  0E2E                     	;# 
  2304  0E2F                     	;# 
  2305  0E90                     	;# 
  2306  0E91                     	;# 
  2307  0E92                     	;# 
  2308  0E94                     	;# 
  2309  0E95                     	;# 
  2310  0E9C                     	;# 
  2311  0E9D                     	;# 
  2312  0E9E                     	;# 
  2313  0E9F                     	;# 
  2314  0EA0                     	;# 
  2315  0EA1                     	;# 
  2316  0EA2                     	;# 
  2317  0EA3                     	;# 
  2318  0EA4                     	;# 
  2319  0EA5                     	;# 
  2320  0EA6                     	;# 
  2321  0EA7                     	;# 
  2322  0F0F                     	;# 
  2323  0F10                     	;# 
  2324  0F11                     	;# 
  2325  0F12                     	;# 
  2326  0F13                     	;# 
  2327  0F14                     	;# 
  2328  0F15                     	;# 
  2329  0F16                     	;# 
  2330  0F17                     	;# 
  2331  0F18                     	;# 
  2332  0F19                     	;# 
  2333  0F1A                     	;# 
  2334  0F1B                     	;# 
  2335  0F1C                     	;# 
  2336  0F1D                     	;# 
  2337  0F1E                     	;# 
  2338  0F1F                     	;# 
  2339  0F20                     	;# 
  2340  0F21                     	;# 
  2341  0F22                     	;# 
  2342  0F23                     	;# 
  2343  0F24                     	;# 
  2344  0F25                     	;# 
  2345  0F26                     	;# 
  2346  0F27                     	;# 
  2347  0F28                     	;# 
  2348  0F29                     	;# 
  2349  0F2A                     	;# 
  2350  0F2B                     	;# 
  2351  0F2C                     	;# 
  2352  0F2D                     	;# 
  2353  0F2E                     	;# 
  2354  0F2F                     	;# 
  2355  0F30                     	;# 
  2356  0F31                     	;# 
  2357  0F32                     	;# 
  2358  0F33                     	;# 
  2359  0F34                     	;# 
  2360  0F35                     	;# 
  2361  0F36                     	;# 
  2362  0F37                     	;# 
  2363  0FE4                     	;# 
  2364  0FE5                     	;# 
  2365  0FE6                     	;# 
  2366  0FE7                     	;# 
  2367  0FE8                     	;# 
  2368  0FE9                     	;# 
  2369  0FEA                     	;# 
  2370  0FEB                     	;# 
  2371  0FED                     	;# 
  2372  0FEE                     	;# 
  2373  0FEF                     	;# 
  2374  0000                     	;# 
  2375  0001                     	;# 
  2376  0002                     	;# 
  2377  0003                     	;# 
  2378  0004                     	;# 
  2379  0005                     	;# 
  2380  0006                     	;# 
  2381  0007                     	;# 
  2382  0008                     	;# 
  2383  0009                     	;# 
  2384  000A                     	;# 
  2385  000B                     	;# 
  2386  000C                     	;# 
  2387  000D                     	;# 
  2388  000E                     	;# 
  2389  0010                     	;# 
  2390  0011                     	;# 
  2391  0012                     	;# 
  2392  0013                     	;# 
  2393  0014                     	;# 
  2394  0015                     	;# 
  2395  0015                     	;# 
  2396  0016                     	;# 
  2397  0016                     	;# 
  2398  0017                     	;# 
  2399  0018                     	;# 
  2400  0019                     	;# 
  2401  0019                     	;# 
  2402  001A                     	;# 
  2403  001B                     	;# 
  2404  001C                     	;# 
  2405  001D                     	;# 
  2406  001E                     	;# 
  2407  001F                     	;# 
  2408  008C                     	;# 
  2409  008D                     	;# 
  2410  008E                     	;# 
  2411  0090                     	;# 
  2412  0091                     	;# 
  2413  0092                     	;# 
  2414  0093                     	;# 
  2415  0094                     	;# 
  2416  0097                     	;# 
  2417  009B                     	;# 
  2418  009B                     	;# 
  2419  009C                     	;# 
  2420  009D                     	;# 
  2421  009E                     	;# 
  2422  009F                     	;# 
  2423  010C                     	;# 
  2424  010D                     	;# 
  2425  010E                     	;# 
  2426  0111                     	;# 
  2427  0112                     	;# 
  2428  0113                     	;# 
  2429  0114                     	;# 
  2430  0115                     	;# 
  2431  0116                     	;# 
  2432  0117                     	;# 
  2433  0118                     	;# 
  2434  0119                     	;# 
  2435  018C                     	;# 
  2436  018D                     	;# 
  2437  018E                     	;# 
  2438  0199                     	;# 
  2439  0199                     	;# 
  2440  0199                     	;# 
  2441  019A                     	;# 
  2442  019A                     	;# 
  2443  019A                     	;# 
  2444  019B                     	;# 
  2445  019B                     	;# 
  2446  019B                     	;# 
  2447  019B                     	;# 
  2448  019B                     	;# 
  2449  019C                     	;# 
  2450  019C                     	;# 
  2451  019C                     	;# 
  2452  019D                     	;# 
  2453  019D                     	;# 
  2454  019D                     	;# 
  2455  019E                     	;# 
  2456  019E                     	;# 
  2457  019E                     	;# 
  2458  019F                     	;# 
  2459  019F                     	;# 
  2460  019F                     	;# 
  2461  019F                     	;# 
  2462  019F                     	;# 
  2463  020C                     	;# 
  2464  020D                     	;# 
  2465  020E                     	;# 
  2466  0211                     	;# 
  2467  0211                     	;# 
  2468  0212                     	;# 
  2469  0212                     	;# 
  2470  0213                     	;# 
  2471  0213                     	;# 
  2472  0214                     	;# 
  2473  0214                     	;# 
  2474  0215                     	;# 
  2475  0215                     	;# 
  2476  0215                     	;# 
  2477  0215                     	;# 
  2478  0216                     	;# 
  2479  0216                     	;# 
  2480  0217                     	;# 
  2481  0217                     	;# 
  2482  0219                     	;# 
  2483  021A                     	;# 
  2484  021B                     	;# 
  2485  021C                     	;# 
  2486  021D                     	;# 
  2487  021D                     	;# 
  2488  021E                     	;# 
  2489  021F                     	;# 
  2490  028C                     	;# 
  2491  028D                     	;# 
  2492  028E                     	;# 
  2493  0291                     	;# 
  2494  0291                     	;# 
  2495  0292                     	;# 
  2496  0293                     	;# 
  2497  0294                     	;# 
  2498  0295                     	;# 
  2499  0295                     	;# 
  2500  0296                     	;# 
  2501  0297                     	;# 
  2502  0298                     	;# 
  2503  029F                     	;# 
  2504  030C                     	;# 
  2505  030D                     	;# 
  2506  030E                     	;# 
  2507  0311                     	;# 
  2508  0311                     	;# 
  2509  0312                     	;# 
  2510  0313                     	;# 
  2511  0314                     	;# 
  2512  0315                     	;# 
  2513  0315                     	;# 
  2514  0316                     	;# 
  2515  0317                     	;# 
  2516  0318                     	;# 
  2517  038C                     	;# 
  2518  038D                     	;# 
  2519  038E                     	;# 
  2520  0391                     	;# 
  2521  0392                     	;# 
  2522  0393                     	;# 
  2523  0394                     	;# 
  2524  0395                     	;# 
  2525  0396                     	;# 
  2526  0397                     	;# 
  2527  0398                     	;# 
  2528  0399                     	;# 
  2529  039A                     	;# 
  2530  039C                     	;# 
  2531  039D                     	;# 
  2532  039E                     	;# 
  2533  039F                     	;# 
  2534  0411                     	;# 
  2535  0411                     	;# 
  2536  0412                     	;# 
  2537  0413                     	;# 
  2538  0414                     	;# 
  2539  0415                     	;# 
  2540  0416                     	;# 
  2541  0417                     	;# 
  2542  0418                     	;# 
  2543  0418                     	;# 
  2544  0419                     	;# 
  2545  041A                     	;# 
  2546  041B                     	;# 
  2547  041C                     	;# 
  2548  041D                     	;# 
  2549  041E                     	;# 
  2550  041F                     	;# 
  2551  0498                     	;# 
  2552  0498                     	;# 
  2553  0499                     	;# 
  2554  049A                     	;# 
  2555  049B                     	;# 
  2556  049B                     	;# 
  2557  049C                     	;# 
  2558  049D                     	;# 
  2559  049E                     	;# 
  2560  049F                     	;# 
  2561  0617                     	;# 
  2562  0618                     	;# 
  2563  0619                     	;# 
  2564  0619                     	;# 
  2565  061A                     	;# 
  2566  061B                     	;# 
  2567  061C                     	;# 
  2568  061C                     	;# 
  2569  061F                     	;# 
  2570  0691                     	;# 
  2571  0692                     	;# 
  2572  0693                     	;# 
  2573  0694                     	;# 
  2574  0695                     	;# 
  2575  0696                     	;# 
  2576  0697                     	;# 
  2577  0698                     	;# 
  2578  0699                     	;# 
  2579  0711                     	;# 
  2580  0712                     	;# 
  2581  0713                     	;# 
  2582  0714                     	;# 
  2583  0715                     	;# 
  2584  0716                     	;# 
  2585  0717                     	;# 
  2586  0718                     	;# 
  2587  0719                     	;# 
  2588  0891                     	;# 
  2589  0891                     	;# 
  2590  0891                     	;# 
  2591  0891                     	;# 
  2592  0891                     	;# 
  2593  0891                     	;# 
  2594  0892                     	;# 
  2595  0892                     	;# 
  2596  0892                     	;# 
  2597  0893                     	;# 
  2598  0893                     	;# 
  2599  0893                     	;# 
  2600  0893                     	;# 
  2601  0893                     	;# 
  2602  0893                     	;# 
  2603  0894                     	;# 
  2604  0894                     	;# 
  2605  0894                     	;# 
  2606  0895                     	;# 
  2607  0895                     	;# 
  2608  0895                     	;# 
  2609  0896                     	;# 
  2610  0896                     	;# 
  2611  0896                     	;# 
  2612  089B                     	;# 
  2613  0911                     	;# 
  2614  0912                     	;# 
  2615  0913                     	;# 
  2616  0914                     	;# 
  2617  0915                     	;# 
  2618  0916                     	;# 
  2619  0918                     	;# 
  2620  0919                     	;# 
  2621  091A                     	;# 
  2622  091B                     	;# 
  2623  091C                     	;# 
  2624  091D                     	;# 
  2625  091E                     	;# 
  2626  091F                     	;# 
  2627  0E0F                     	;# 
  2628  0E10                     	;# 
  2629  0E11                     	;# 
  2630  0E12                     	;# 
  2631  0E13                     	;# 
  2632  0E14                     	;# 
  2633  0E15                     	;# 
  2634  0E16                     	;# 
  2635  0E17                     	;# 
  2636  0E18                     	;# 
  2637  0E19                     	;# 
  2638  0E1A                     	;# 
  2639  0E1B                     	;# 
  2640  0E1C                     	;# 
  2641  0E1D                     	;# 
  2642  0E1E                     	;# 
  2643  0E1F                     	;# 
  2644  0E20                     	;# 
  2645  0E21                     	;# 
  2646  0E22                     	;# 
  2647  0E24                     	;# 
  2648  0E25                     	;# 
  2649  0E28                     	;# 
  2650  0E29                     	;# 
  2651  0E2A                     	;# 
  2652  0E2B                     	;# 
  2653  0E2C                     	;# 
  2654  0E2D                     	;# 
  2655  0E2E                     	;# 
  2656  0E2F                     	;# 
  2657  0E90                     	;# 
  2658  0E91                     	;# 
  2659  0E92                     	;# 
  2660  0E94                     	;# 
  2661  0E95                     	;# 
  2662  0E9C                     	;# 
  2663  0E9D                     	;# 
  2664  0E9E                     	;# 
  2665  0E9F                     	;# 
  2666  0EA0                     	;# 
  2667  0EA1                     	;# 
  2668  0EA2                     	;# 
  2669  0EA3                     	;# 
  2670  0EA4                     	;# 
  2671  0EA5                     	;# 
  2672  0EA6                     	;# 
  2673  0EA7                     	;# 
  2674  0F0F                     	;# 
  2675  0F10                     	;# 
  2676  0F11                     	;# 
  2677  0F12                     	;# 
  2678  0F13                     	;# 
  2679  0F14                     	;# 
  2680  0F15                     	;# 
  2681  0F16                     	;# 
  2682  0F17                     	;# 
  2683  0F18                     	;# 
  2684  0F19                     	;# 
  2685  0F1A                     	;# 
  2686  0F1B                     	;# 
  2687  0F1C                     	;# 
  2688  0F1D                     	;# 
  2689  0F1E                     	;# 
  2690  0F1F                     	;# 
  2691  0F20                     	;# 
  2692  0F21                     	;# 
  2693  0F22                     	;# 
  2694  0F23                     	;# 
  2695  0F24                     	;# 
  2696  0F25                     	;# 
  2697  0F26                     	;# 
  2698  0F27                     	;# 
  2699  0F28                     	;# 
  2700  0F29                     	;# 
  2701  0F2A                     	;# 
  2702  0F2B                     	;# 
  2703  0F2C                     	;# 
  2704  0F2D                     	;# 
  2705  0F2E                     	;# 
  2706  0F2F                     	;# 
  2707  0F30                     	;# 
  2708  0F31                     	;# 
  2709  0F32                     	;# 
  2710  0F33                     	;# 
  2711  0F34                     	;# 
  2712  0F35                     	;# 
  2713  0F36                     	;# 
  2714  0F37                     	;# 
  2715  0FE4                     	;# 
  2716  0FE5                     	;# 
  2717  0FE6                     	;# 
  2718  0FE7                     	;# 
  2719  0FE8                     	;# 
  2720  0FE9                     	;# 
  2721  0FEA                     	;# 
  2722  0FEB                     	;# 
  2723  0FED                     	;# 
  2724  0FEE                     	;# 
  2725  0FEF                     	;# 
  2726  0000                     	;# 
  2727  0001                     	;# 
  2728  0002                     	;# 
  2729  0003                     	;# 
  2730  0004                     	;# 
  2731  0005                     	;# 
  2732  0006                     	;# 
  2733  0007                     	;# 
  2734  0008                     	;# 
  2735  0009                     	;# 
  2736  000A                     	;# 
  2737  000B                     	;# 
  2738  000C                     	;# 
  2739  000D                     	;# 
  2740  000E                     	;# 
  2741  0010                     	;# 
  2742  0011                     	;# 
  2743  0012                     	;# 
  2744  0013                     	;# 
  2745  0014                     	;# 
  2746  0015                     	;# 
  2747  0015                     	;# 
  2748  0016                     	;# 
  2749  0016                     	;# 
  2750  0017                     	;# 
  2751  0018                     	;# 
  2752  0019                     	;# 
  2753  0019                     	;# 
  2754  001A                     	;# 
  2755  001B                     	;# 
  2756  001C                     	;# 
  2757  001D                     	;# 
  2758  001E                     	;# 
  2759  001F                     	;# 
  2760  008C                     	;# 
  2761  008D                     	;# 
  2762  008E                     	;# 
  2763  0090                     	;# 
  2764  0091                     	;# 
  2765  0092                     	;# 
  2766  0093                     	;# 
  2767  0094                     	;# 
  2768  0097                     	;# 
  2769  009B                     	;# 
  2770  009B                     	;# 
  2771  009C                     	;# 
  2772  009D                     	;# 
  2773  009E                     	;# 
  2774  009F                     	;# 
  2775  010C                     	;# 
  2776  010D                     	;# 
  2777  010E                     	;# 
  2778  0111                     	;# 
  2779  0112                     	;# 
  2780  0113                     	;# 
  2781  0114                     	;# 
  2782  0115                     	;# 
  2783  0116                     	;# 
  2784  0117                     	;# 
  2785  0118                     	;# 
  2786  0119                     	;# 
  2787  018C                     	;# 
  2788  018D                     	;# 
  2789  018E                     	;# 
  2790  0199                     	;# 
  2791  0199                     	;# 
  2792  0199                     	;# 
  2793  019A                     	;# 
  2794  019A                     	;# 
  2795  019A                     	;# 
  2796  019B                     	;# 
  2797  019B                     	;# 
  2798  019B                     	;# 
  2799  019B                     	;# 
  2800  019B                     	;# 
  2801  019C                     	;# 
  2802  019C                     	;# 
  2803  019C                     	;# 
  2804  019D                     	;# 
  2805  019D                     	;# 
  2806  019D                     	;# 
  2807  019E                     	;# 
  2808  019E                     	;# 
  2809  019E                     	;# 
  2810  019F                     	;# 
  2811  019F                     	;# 
  2812  019F                     	;# 
  2813  019F                     	;# 
  2814  019F                     	;# 
  2815  020C                     	;# 
  2816  020D                     	;# 
  2817  020E                     	;# 
  2818  0211                     	;# 
  2819  0211                     	;# 
  2820  0212                     	;# 
  2821  0212                     	;# 
  2822  0213                     	;# 
  2823  0213                     	;# 
  2824  0214                     	;# 
  2825  0214                     	;# 
  2826  0215                     	;# 
  2827  0215                     	;# 
  2828  0215                     	;# 
  2829  0215                     	;# 
  2830  0216                     	;# 
  2831  0216                     	;# 
  2832  0217                     	;# 
  2833  0217                     	;# 
  2834  0219                     	;# 
  2835  021A                     	;# 
  2836  021B                     	;# 
  2837  021C                     	;# 
  2838  021D                     	;# 
  2839  021D                     	;# 
  2840  021E                     	;# 
  2841  021F                     	;# 
  2842  028C                     	;# 
  2843  028D                     	;# 
  2844  028E                     	;# 
  2845  0291                     	;# 
  2846  0291                     	;# 
  2847  0292                     	;# 
  2848  0293                     	;# 
  2849  0294                     	;# 
  2850  0295                     	;# 
  2851  0295                     	;# 
  2852  0296                     	;# 
  2853  0297                     	;# 
  2854  0298                     	;# 
  2855  029F                     	;# 
  2856  030C                     	;# 
  2857  030D                     	;# 
  2858  030E                     	;# 
  2859  0311                     	;# 
  2860  0311                     	;# 
  2861  0312                     	;# 
  2862  0313                     	;# 
  2863  0314                     	;# 
  2864  0315                     	;# 
  2865  0315                     	;# 
  2866  0316                     	;# 
  2867  0317                     	;# 
  2868  0318                     	;# 
  2869  038C                     	;# 
  2870  038D                     	;# 
  2871  038E                     	;# 
  2872  0391                     	;# 
  2873  0392                     	;# 
  2874  0393                     	;# 
  2875  0394                     	;# 
  2876  0395                     	;# 
  2877  0396                     	;# 
  2878  0397                     	;# 
  2879  0398                     	;# 
  2880  0399                     	;# 
  2881  039A                     	;# 
  2882  039C                     	;# 
  2883  039D                     	;# 
  2884  039E                     	;# 
  2885  039F                     	;# 
  2886  0411                     	;# 
  2887  0411                     	;# 
  2888  0412                     	;# 
  2889  0413                     	;# 
  2890  0414                     	;# 
  2891  0415                     	;# 
  2892  0416                     	;# 
  2893  0417                     	;# 
  2894  0418                     	;# 
  2895  0418                     	;# 
  2896  0419                     	;# 
  2897  041A                     	;# 
  2898  041B                     	;# 
  2899  041C                     	;# 
  2900  041D                     	;# 
  2901  041E                     	;# 
  2902  041F                     	;# 
  2903  0498                     	;# 
  2904  0498                     	;# 
  2905  0499                     	;# 
  2906  049A                     	;# 
  2907  049B                     	;# 
  2908  049B                     	;# 
  2909  049C                     	;# 
  2910  049D                     	;# 
  2911  049E                     	;# 
  2912  049F                     	;# 
  2913  0617                     	;# 
  2914  0618                     	;# 
  2915  0619                     	;# 
  2916  0619                     	;# 
  2917  061A                     	;# 
  2918  061B                     	;# 
  2919  061C                     	;# 
  2920  061C                     	;# 
  2921  061F                     	;# 
  2922  0691                     	;# 
  2923  0692                     	;# 
  2924  0693                     	;# 
  2925  0694                     	;# 
  2926  0695                     	;# 
  2927  0696                     	;# 
  2928  0697                     	;# 
  2929  0698                     	;# 
  2930  0699                     	;# 
  2931  0711                     	;# 
  2932  0712                     	;# 
  2933  0713                     	;# 
  2934  0714                     	;# 
  2935  0715                     	;# 
  2936  0716                     	;# 
  2937  0717                     	;# 
  2938  0718                     	;# 
  2939  0719                     	;# 
  2940  0891                     	;# 
  2941  0891                     	;# 
  2942  0891                     	;# 
  2943  0891                     	;# 
  2944  0891                     	;# 
  2945  0891                     	;# 
  2946  0892                     	;# 
  2947  0892                     	;# 
  2948  0892                     	;# 
  2949  0893                     	;# 
  2950  0893                     	;# 
  2951  0893                     	;# 
  2952  0893                     	;# 
  2953  0893                     	;# 
  2954  0893                     	;# 
  2955  0894                     	;# 
  2956  0894                     	;# 
  2957  0894                     	;# 
  2958  0895                     	;# 
  2959  0895                     	;# 
  2960  0895                     	;# 
  2961  0896                     	;# 
  2962  0896                     	;# 
  2963  0896                     	;# 
  2964  089B                     	;# 
  2965  0911                     	;# 
  2966  0912                     	;# 
  2967  0913                     	;# 
  2968  0914                     	;# 
  2969  0915                     	;# 
  2970  0916                     	;# 
  2971  0918                     	;# 
  2972  0919                     	;# 
  2973  091A                     	;# 
  2974  091B                     	;# 
  2975  091C                     	;# 
  2976  091D                     	;# 
  2977  091E                     	;# 
  2978  091F                     	;# 
  2979  0E0F                     	;# 
  2980  0E10                     	;# 
  2981  0E11                     	;# 
  2982  0E12                     	;# 
  2983  0E13                     	;# 
  2984  0E14                     	;# 
  2985  0E15                     	;# 
  2986  0E16                     	;# 
  2987  0E17                     	;# 
  2988  0E18                     	;# 
  2989  0E19                     	;# 
  2990  0E1A                     	;# 
  2991  0E1B                     	;# 
  2992  0E1C                     	;# 
  2993  0E1D                     	;# 
  2994  0E1E                     	;# 
  2995  0E1F                     	;# 
  2996  0E20                     	;# 
  2997  0E21                     	;# 
  2998  0E22                     	;# 
  2999  0E24                     	;# 
  3000  0E25                     	;# 
  3001  0E28                     	;# 
  3002  0E29                     	;# 
  3003  0E2A                     	;# 
  3004  0E2B                     	;# 
  3005  0E2C                     	;# 
  3006  0E2D                     	;# 
  3007  0E2E                     	;# 
  3008  0E2F                     	;# 
  3009  0E90                     	;# 
  3010  0E91                     	;# 
  3011  0E92                     	;# 
  3012  0E94                     	;# 
  3013  0E95                     	;# 
  3014  0E9C                     	;# 
  3015  0E9D                     	;# 
  3016  0E9E                     	;# 
  3017  0E9F                     	;# 
  3018  0EA0                     	;# 
  3019  0EA1                     	;# 
  3020  0EA2                     	;# 
  3021  0EA3                     	;# 
  3022  0EA4                     	;# 
  3023  0EA5                     	;# 
  3024  0EA6                     	;# 
  3025  0EA7                     	;# 
  3026  0F0F                     	;# 
  3027  0F10                     	;# 
  3028  0F11                     	;# 
  3029  0F12                     	;# 
  3030  0F13                     	;# 
  3031  0F14                     	;# 
  3032  0F15                     	;# 
  3033  0F16                     	;# 
  3034  0F17                     	;# 
  3035  0F18                     	;# 
  3036  0F19                     	;# 
  3037  0F1A                     	;# 
  3038  0F1B                     	;# 
  3039  0F1C                     	;# 
  3040  0F1D                     	;# 
  3041  0F1E                     	;# 
  3042  0F1F                     	;# 
  3043  0F20                     	;# 
  3044  0F21                     	;# 
  3045  0F22                     	;# 
  3046  0F23                     	;# 
  3047  0F24                     	;# 
  3048  0F25                     	;# 
  3049  0F26                     	;# 
  3050  0F27                     	;# 
  3051  0F28                     	;# 
  3052  0F29                     	;# 
  3053  0F2A                     	;# 
  3054  0F2B                     	;# 
  3055  0F2C                     	;# 
  3056  0F2D                     	;# 
  3057  0F2E                     	;# 
  3058  0F2F                     	;# 
  3059  0F30                     	;# 
  3060  0F31                     	;# 
  3061  0F32                     	;# 
  3062  0F33                     	;# 
  3063  0F34                     	;# 
  3064  0F35                     	;# 
  3065  0F36                     	;# 
  3066  0F37                     	;# 
  3067  0FE4                     	;# 
  3068  0FE5                     	;# 
  3069  0FE6                     	;# 
  3070  0FE7                     	;# 
  3071  0FE8                     	;# 
  3072  0FE9                     	;# 
  3073  0FEA                     	;# 
  3074  0FEB                     	;# 
  3075  0FED                     	;# 
  3076  0FEE                     	;# 
  3077  0FEF                     	;# 
  3078  0000                     	;# 
  3079  0001                     	;# 
  3080  0002                     	;# 
  3081  0003                     	;# 
  3082  0004                     	;# 
  3083  0005                     	;# 
  3084  0006                     	;# 
  3085  0007                     	;# 
  3086  0008                     	;# 
  3087  0009                     	;# 
  3088  000A                     	;# 
  3089  000B                     	;# 
  3090  000C                     	;# 
  3091  000D                     	;# 
  3092  000E                     	;# 
  3093  0010                     	;# 
  3094  0011                     	;# 
  3095  0012                     	;# 
  3096  0013                     	;# 
  3097  0014                     	;# 
  3098  0015                     	;# 
  3099  0015                     	;# 
  3100  0016                     	;# 
  3101  0016                     	;# 
  3102  0017                     	;# 
  3103  0018                     	;# 
  3104  0019                     	;# 
  3105  0019                     	;# 
  3106  001A                     	;# 
  3107  001B                     	;# 
  3108  001C                     	;# 
  3109  001D                     	;# 
  3110  001E                     	;# 
  3111  001F                     	;# 
  3112  008C                     	;# 
  3113  008D                     	;# 
  3114  008E                     	;# 
  3115  0090                     	;# 
  3116  0091                     	;# 
  3117  0092                     	;# 
  3118  0093                     	;# 
  3119  0094                     	;# 
  3120  0097                     	;# 
  3121  009B                     	;# 
  3122  009B                     	;# 
  3123  009C                     	;# 
  3124  009D                     	;# 
  3125  009E                     	;# 
  3126  009F                     	;# 
  3127  010C                     	;# 
  3128  010D                     	;# 
  3129  010E                     	;# 
  3130  0111                     	;# 
  3131  0112                     	;# 
  3132  0113                     	;# 
  3133  0114                     	;# 
  3134  0115                     	;# 
  3135  0116                     	;# 
  3136  0117                     	;# 
  3137  0118                     	;# 
  3138  0119                     	;# 
  3139  018C                     	;# 
  3140  018D                     	;# 
  3141  018E                     	;# 
  3142  0199                     	;# 
  3143  0199                     	;# 
  3144  0199                     	;# 
  3145  019A                     	;# 
  3146  019A                     	;# 
  3147  019A                     	;# 
  3148  019B                     	;# 
  3149  019B                     	;# 
  3150  019B                     	;# 
  3151  019B                     	;# 
  3152  019B                     	;# 
  3153  019C                     	;# 
  3154  019C                     	;# 
  3155  019C                     	;# 
  3156  019D                     	;# 
  3157  019D                     	;# 
  3158  019D                     	;# 
  3159  019E                     	;# 
  3160  019E                     	;# 
  3161  019E                     	;# 
  3162  019F                     	;# 
  3163  019F                     	;# 
  3164  019F                     	;# 
  3165  019F                     	;# 
  3166  019F                     	;# 
  3167  020C                     	;# 
  3168  020D                     	;# 
  3169  020E                     	;# 
  3170  0211                     	;# 
  3171  0211                     	;# 
  3172  0212                     	;# 
  3173  0212                     	;# 
  3174  0213                     	;# 
  3175  0213                     	;# 
  3176  0214                     	;# 
  3177  0214                     	;# 
  3178  0215                     	;# 
  3179  0215                     	;# 
  3180  0215                     	;# 
  3181  0215                     	;# 
  3182  0216                     	;# 
  3183  0216                     	;# 
  3184  0217                     	;# 
  3185  0217                     	;# 
  3186  0219                     	;# 
  3187  021A                     	;# 
  3188  021B                     	;# 
  3189  021C                     	;# 
  3190  021D                     	;# 
  3191  021D                     	;# 
  3192  021E                     	;# 
  3193  021F                     	;# 
  3194  028C                     	;# 
  3195  028D                     	;# 
  3196  028E                     	;# 
  3197  0291                     	;# 
  3198  0291                     	;# 
  3199  0292                     	;# 
  3200  0293                     	;# 
  3201  0294                     	;# 
  3202  0295                     	;# 
  3203  0295                     	;# 
  3204  0296                     	;# 
  3205  0297                     	;# 
  3206  0298                     	;# 
  3207  029F                     	;# 
  3208  030C                     	;# 
  3209  030D                     	;# 
  3210  030E                     	;# 
  3211  0311                     	;# 
  3212  0311                     	;# 
  3213  0312                     	;# 
  3214  0313                     	;# 
  3215  0314                     	;# 
  3216  0315                     	;# 
  3217  0315                     	;# 
  3218  0316                     	;# 
  3219  0317                     	;# 
  3220  0318                     	;# 
  3221  038C                     	;# 
  3222  038D                     	;# 
  3223  038E                     	;# 
  3224  0391                     	;# 
  3225  0392                     	;# 
  3226  0393                     	;# 
  3227  0394                     	;# 
  3228  0395                     	;# 
  3229  0396                     	;# 
  3230  0397                     	;# 
  3231  0398                     	;# 
  3232  0399                     	;# 
  3233  039A                     	;# 
  3234  039C                     	;# 
  3235  039D                     	;# 
  3236  039E                     	;# 
  3237  039F                     	;# 
  3238  0411                     	;# 
  3239  0411                     	;# 
  3240  0412                     	;# 
  3241  0413                     	;# 
  3242  0414                     	;# 
  3243  0415                     	;# 
  3244  0416                     	;# 
  3245  0417                     	;# 
  3246  0418                     	;# 
  3247  0418                     	;# 
  3248  0419                     	;# 
  3249  041A                     	;# 
  3250  041B                     	;# 
  3251  041C                     	;# 
  3252  041D                     	;# 
  3253  041E                     	;# 
  3254  041F                     	;# 
  3255  0498                     	;# 
  3256  0498                     	;# 
  3257  0499                     	;# 
  3258  049A                     	;# 
  3259  049B                     	;# 
  3260  049B                     	;# 
  3261  049C                     	;# 
  3262  049D                     	;# 
  3263  049E                     	;# 
  3264  049F                     	;# 
  3265  0617                     	;# 
  3266  0618                     	;# 
  3267  0619                     	;# 
  3268  0619                     	;# 
  3269  061A                     	;# 
  3270  061B                     	;# 
  3271  061C                     	;# 
  3272  061C                     	;# 
  3273  061F                     	;# 
  3274  0691                     	;# 
  3275  0692                     	;# 
  3276  0693                     	;# 
  3277  0694                     	;# 
  3278  0695                     	;# 
  3279  0696                     	;# 
  3280  0697                     	;# 
  3281  0698                     	;# 
  3282  0699                     	;# 
  3283  0711                     	;# 
  3284  0712                     	;# 
  3285  0713                     	;# 
  3286  0714                     	;# 
  3287  0715                     	;# 
  3288  0716                     	;# 
  3289  0717                     	;# 
  3290  0718                     	;# 
  3291  0719                     	;# 
  3292  0891                     	;# 
  3293  0891                     	;# 
  3294  0891                     	;# 
  3295  0891                     	;# 
  3296  0891                     	;# 
  3297  0891                     	;# 
  3298  0892                     	;# 
  3299  0892                     	;# 
  3300  0892                     	;# 
  3301  0893                     	;# 
  3302  0893                     	;# 
  3303  0893                     	;# 
  3304  0893                     	;# 
  3305  0893                     	;# 
  3306  0893                     	;# 
  3307  0894                     	;# 
  3308  0894                     	;# 
  3309  0894                     	;# 
  3310  0895                     	;# 
  3311  0895                     	;# 
  3312  0895                     	;# 
  3313  0896                     	;# 
  3314  0896                     	;# 
  3315  0896                     	;# 
  3316  089B                     	;# 
  3317  0911                     	;# 
  3318  0912                     	;# 
  3319  0913                     	;# 
  3320  0914                     	;# 
  3321  0915                     	;# 
  3322  0916                     	;# 
  3323  0918                     	;# 
  3324  0919                     	;# 
  3325  091A                     	;# 
  3326  091B                     	;# 
  3327  091C                     	;# 
  3328  091D                     	;# 
  3329  091E                     	;# 
  3330  091F                     	;# 
  3331  0E0F                     	;# 
  3332  0E10                     	;# 
  3333  0E11                     	;# 
  3334  0E12                     	;# 
  3335  0E13                     	;# 
  3336  0E14                     	;# 
  3337  0E15                     	;# 
  3338  0E16                     	;# 
  3339  0E17                     	;# 
  3340  0E18                     	;# 
  3341  0E19                     	;# 
  3342  0E1A                     	;# 
  3343  0E1B                     	;# 
  3344  0E1C                     	;# 
  3345  0E1D                     	;# 
  3346  0E1E                     	;# 
  3347  0E1F                     	;# 
  3348  0E20                     	;# 
  3349  0E21                     	;# 
  3350  0E22                     	;# 
  3351  0E24                     	;# 
  3352  0E25                     	;# 
  3353  0E28                     	;# 
  3354  0E29                     	;# 
  3355  0E2A                     	;# 
  3356  0E2B                     	;# 
  3357  0E2C                     	;# 
  3358  0E2D                     	;# 
  3359  0E2E                     	;# 
  3360  0E2F                     	;# 
  3361  0E90                     	;# 
  3362  0E91                     	;# 
  3363  0E92                     	;# 
  3364  0E94                     	;# 
  3365  0E95                     	;# 
  3366  0E9C                     	;# 
  3367  0E9D                     	;# 
  3368  0E9E                     	;# 
  3369  0E9F                     	;# 
  3370  0EA0                     	;# 
  3371  0EA1                     	;# 
  3372  0EA2                     	;# 
  3373  0EA3                     	;# 
  3374  0EA4                     	;# 
  3375  0EA5                     	;# 
  3376  0EA6                     	;# 
  3377  0EA7                     	;# 
  3378  0F0F                     	;# 
  3379  0F10                     	;# 
  3380  0F11                     	;# 
  3381  0F12                     	;# 
  3382  0F13                     	;# 
  3383  0F14                     	;# 
  3384  0F15                     	;# 
  3385  0F16                     	;# 
  3386  0F17                     	;# 
  3387  0F18                     	;# 
  3388  0F19                     	;# 
  3389  0F1A                     	;# 
  3390  0F1B                     	;# 
  3391  0F1C                     	;# 
  3392  0F1D                     	;# 
  3393  0F1E                     	;# 
  3394  0F1F                     	;# 
  3395  0F20                     	;# 
  3396  0F21                     	;# 
  3397  0F22                     	;# 
  3398  0F23                     	;# 
  3399  0F24                     	;# 
  3400  0F25                     	;# 
  3401  0F26                     	;# 
  3402  0F27                     	;# 
  3403  0F28                     	;# 
  3404  0F29                     	;# 
  3405  0F2A                     	;# 
  3406  0F2B                     	;# 
  3407  0F2C                     	;# 
  3408  0F2D                     	;# 
  3409  0F2E                     	;# 
  3410  0F2F                     	;# 
  3411  0F30                     	;# 
  3412  0F31                     	;# 
  3413  0F32                     	;# 
  3414  0F33                     	;# 
  3415  0F34                     	;# 
  3416  0F35                     	;# 
  3417  0F36                     	;# 
  3418  0F37                     	;# 
  3419  0FE4                     	;# 
  3420  0FE5                     	;# 
  3421  0FE6                     	;# 
  3422  0FE7                     	;# 
  3423  0FE8                     	;# 
  3424  0FE9                     	;# 
  3425  0FEA                     	;# 
  3426  0FEB                     	;# 
  3427  0FED                     	;# 
  3428  0FEE                     	;# 
  3429  0FEF                     	;# 
  3430  0000                     	;# 
  3431  0001                     	;# 
  3432  0002                     	;# 
  3433  0003                     	;# 
  3434  0004                     	;# 
  3435  0005                     	;# 
  3436  0006                     	;# 
  3437  0007                     	;# 
  3438  0008                     	;# 
  3439  0009                     	;# 
  3440  000A                     	;# 
  3441  000B                     	;# 
  3442  000C                     	;# 
  3443  000D                     	;# 
  3444  000E                     	;# 
  3445  0010                     	;# 
  3446  0011                     	;# 
  3447  0012                     	;# 
  3448  0013                     	;# 
  3449  0014                     	;# 
  3450  0015                     	;# 
  3451  0015                     	;# 
  3452  0016                     	;# 
  3453  0016                     	;# 
  3454  0017                     	;# 
  3455  0018                     	;# 
  3456  0019                     	;# 
  3457  0019                     	;# 
  3458  001A                     	;# 
  3459  001B                     	;# 
  3460  001C                     	;# 
  3461  001D                     	;# 
  3462  001E                     	;# 
  3463  001F                     	;# 
  3464  008C                     	;# 
  3465  008D                     	;# 
  3466  008E                     	;# 
  3467  0090                     	;# 
  3468  0091                     	;# 
  3469  0092                     	;# 
  3470  0093                     	;# 
  3471  0094                     	;# 
  3472  0097                     	;# 
  3473  009B                     	;# 
  3474  009B                     	;# 
  3475  009C                     	;# 
  3476  009D                     	;# 
  3477  009E                     	;# 
  3478  009F                     	;# 
  3479  010C                     	;# 
  3480  010D                     	;# 
  3481  010E                     	;# 
  3482  0111                     	;# 
  3483  0112                     	;# 
  3484  0113                     	;# 
  3485  0114                     	;# 
  3486  0115                     	;# 
  3487  0116                     	;# 
  3488  0117                     	;# 
  3489  0118                     	;# 
  3490  0119                     	;# 
  3491  018C                     	;# 
  3492  018D                     	;# 
  3493  018E                     	;# 
  3494  0199                     	;# 
  3495  0199                     	;# 
  3496  0199                     	;# 
  3497  019A                     	;# 
  3498  019A                     	;# 
  3499  019A                     	;# 
  3500  019B                     	;# 
  3501  019B                     	;# 
  3502  019B                     	;# 
  3503  019B                     	;# 
  3504  019B                     	;# 
  3505  019C                     	;# 
  3506  019C                     	;# 
  3507  019C                     	;# 
  3508  019D                     	;# 
  3509  019D                     	;# 
  3510  019D                     	;# 
  3511  019E                     	;# 
  3512  019E                     	;# 
  3513  019E                     	;# 
  3514  019F                     	;# 
  3515  019F                     	;# 
  3516  019F                     	;# 
  3517  019F                     	;# 
  3518  019F                     	;# 
  3519  020C                     	;# 
  3520  020D                     	;# 
  3521  020E                     	;# 
  3522  0211                     	;# 
  3523  0211                     	;# 
  3524  0212                     	;# 
  3525  0212                     	;# 
  3526  0213                     	;# 
  3527  0213                     	;# 
  3528  0214                     	;# 
  3529  0214                     	;# 
  3530  0215                     	;# 
  3531  0215                     	;# 
  3532  0215                     	;# 
  3533  0215                     	;# 
  3534  0216                     	;# 
  3535  0216                     	;# 
  3536  0217                     	;# 
  3537  0217                     	;# 
  3538  0219                     	;# 
  3539  021A                     	;# 
  3540  021B                     	;# 
  3541  021C                     	;# 
  3542  021D                     	;# 
  3543  021D                     	;# 
  3544  021E                     	;# 
  3545  021F                     	;# 
  3546  028C                     	;# 
  3547  028D                     	;# 
  3548  028E                     	;# 
  3549  0291                     	;# 
  3550  0291                     	;# 
  3551  0292                     	;# 
  3552  0293                     	;# 
  3553  0294                     	;# 
  3554  0295                     	;# 
  3555  0295                     	;# 
  3556  0296                     	;# 
  3557  0297                     	;# 
  3558  0298                     	;# 
  3559  029F                     	;# 
  3560  030C                     	;# 
  3561  030D                     	;# 
  3562  030E                     	;# 
  3563  0311                     	;# 
  3564  0311                     	;# 
  3565  0312                     	;# 
  3566  0313                     	;# 
  3567  0314                     	;# 
  3568  0315                     	;# 
  3569  0315                     	;# 
  3570  0316                     	;# 
  3571  0317                     	;# 
  3572  0318                     	;# 
  3573  038C                     	;# 
  3574  038D                     	;# 
  3575  038E                     	;# 
  3576  0391                     	;# 
  3577  0392                     	;# 
  3578  0393                     	;# 
  3579  0394                     	;# 
  3580  0395                     	;# 
  3581  0396                     	;# 
  3582  0397                     	;# 
  3583  0398                     	;# 
  3584  0399                     	;# 
  3585  039A                     	;# 
  3586  039C                     	;# 
  3587  039D                     	;# 
  3588  039E                     	;# 
  3589  039F                     	;# 
  3590  0411                     	;# 
  3591  0411                     	;# 
  3592  0412                     	;# 
  3593  0413                     	;# 
  3594  0414                     	;# 
  3595  0415                     	;# 
  3596  0416                     	;# 
  3597  0417                     	;# 
  3598  0418                     	;# 
  3599  0418                     	;# 
  3600  0419                     	;# 
  3601  041A                     	;# 
  3602  041B                     	;# 
  3603  041C                     	;# 
  3604  041D                     	;# 
  3605  041E                     	;# 
  3606  041F                     	;# 
  3607  0498                     	;# 
  3608  0498                     	;# 
  3609  0499                     	;# 
  3610  049A                     	;# 
  3611  049B                     	;# 
  3612  049B                     	;# 
  3613  049C                     	;# 
  3614  049D                     	;# 
  3615  049E                     	;# 
  3616  049F                     	;# 
  3617  0617                     	;# 
  3618  0618                     	;# 
  3619  0619                     	;# 
  3620  0619                     	;# 
  3621  061A                     	;# 
  3622  061B                     	;# 
  3623  061C                     	;# 
  3624  061C                     	;# 
  3625  061F                     	;# 
  3626  0691                     	;# 
  3627  0692                     	;# 
  3628  0693                     	;# 
  3629  0694                     	;# 
  3630  0695                     	;# 
  3631  0696                     	;# 
  3632  0697                     	;# 
  3633  0698                     	;# 
  3634  0699                     	;# 
  3635  0711                     	;# 
  3636  0712                     	;# 
  3637  0713                     	;# 
  3638  0714                     	;# 
  3639  0715                     	;# 
  3640  0716                     	;# 
  3641  0717                     	;# 
  3642  0718                     	;# 
  3643  0719                     	;# 
  3644  0891                     	;# 
  3645  0891                     	;# 
  3646  0891                     	;# 
  3647  0891                     	;# 
  3648  0891                     	;# 
  3649  0891                     	;# 
  3650  0892                     	;# 
  3651  0892                     	;# 
  3652  0892                     	;# 
  3653  0893                     	;# 
  3654  0893                     	;# 
  3655  0893                     	;# 
  3656  0893                     	;# 
  3657  0893                     	;# 
  3658  0893                     	;# 
  3659  0894                     	;# 
  3660  0894                     	;# 
  3661  0894                     	;# 
  3662  0895                     	;# 
  3663  0895                     	;# 
  3664  0895                     	;# 
  3665  0896                     	;# 
  3666  0896                     	;# 
  3667  0896                     	;# 
  3668  089B                     	;# 
  3669  0911                     	;# 
  3670  0912                     	;# 
  3671  0913                     	;# 
  3672  0914                     	;# 
  3673  0915                     	;# 
  3674  0916                     	;# 
  3675  0918                     	;# 
  3676  0919                     	;# 
  3677  091A                     	;# 
  3678  091B                     	;# 
  3679  091C                     	;# 
  3680  091D                     	;# 
  3681  091E                     	;# 
  3682  091F                     	;# 
  3683  0E0F                     	;# 
  3684  0E10                     	;# 
  3685  0E11                     	;# 
  3686  0E12                     	;# 
  3687  0E13                     	;# 
  3688  0E14                     	;# 
  3689  0E15                     	;# 
  3690  0E16                     	;# 
  3691  0E17                     	;# 
  3692  0E18                     	;# 
  3693  0E19                     	;# 
  3694  0E1A                     	;# 
  3695  0E1B                     	;# 
  3696  0E1C                     	;# 
  3697  0E1D                     	;# 
  3698  0E1E                     	;# 
  3699  0E1F                     	;# 
  3700  0E20                     	;# 
  3701  0E21                     	;# 
  3702  0E22                     	;# 
  3703  0E24                     	;# 
  3704  0E25                     	;# 
  3705  0E28                     	;# 
  3706  0E29                     	;# 
  3707  0E2A                     	;# 
  3708  0E2B                     	;# 
  3709  0E2C                     	;# 
  3710  0E2D                     	;# 
  3711  0E2E                     	;# 
  3712  0E2F                     	;# 
  3713  0E90                     	;# 
  3714  0E91                     	;# 
  3715  0E92                     	;# 
  3716  0E94                     	;# 
  3717  0E95                     	;# 
  3718  0E9C                     	;# 
  3719  0E9D                     	;# 
  3720  0E9E                     	;# 
  3721  0E9F                     	;# 
  3722  0EA0                     	;# 
  3723  0EA1                     	;# 
  3724  0EA2                     	;# 
  3725  0EA3                     	;# 
  3726  0EA4                     	;# 
  3727  0EA5                     	;# 
  3728  0EA6                     	;# 
  3729  0EA7                     	;# 
  3730  0F0F                     	;# 
  3731  0F10                     	;# 
  3732  0F11                     	;# 
  3733  0F12                     	;# 
  3734  0F13                     	;# 
  3735  0F14                     	;# 
  3736  0F15                     	;# 
  3737  0F16                     	;# 
  3738  0F17                     	;# 
  3739  0F18                     	;# 
  3740  0F19                     	;# 
  3741  0F1A                     	;# 
  3742  0F1B                     	;# 
  3743  0F1C                     	;# 
  3744  0F1D                     	;# 
  3745  0F1E                     	;# 
  3746  0F1F                     	;# 
  3747  0F20                     	;# 
  3748  0F21                     	;# 
  3749  0F22                     	;# 
  3750  0F23                     	;# 
  3751  0F24                     	;# 
  3752  0F25                     	;# 
  3753  0F26                     	;# 
  3754  0F27                     	;# 
  3755  0F28                     	;# 
  3756  0F29                     	;# 
  3757  0F2A                     	;# 
  3758  0F2B                     	;# 
  3759  0F2C                     	;# 
  3760  0F2D                     	;# 
  3761  0F2E                     	;# 
  3762  0F2F                     	;# 
  3763  0F30                     	;# 
  3764  0F31                     	;# 
  3765  0F32                     	;# 
  3766  0F33                     	;# 
  3767  0F34                     	;# 
  3768  0F35                     	;# 
  3769  0F36                     	;# 
  3770  0F37                     	;# 
  3771  0FE4                     	;# 
  3772  0FE5                     	;# 
  3773  0FE6                     	;# 
  3774  0FE7                     	;# 
  3775  0FE8                     	;# 
  3776  0FE9                     	;# 
  3777  0FEA                     	;# 
  3778  0FEB                     	;# 
  3779  0FED                     	;# 
  3780  0FEE                     	;# 
  3781  0FEF                     	;# 
  3782  0000                     	;# 
  3783  0001                     	;# 
  3784  0002                     	;# 
  3785  0003                     	;# 
  3786  0004                     	;# 
  3787  0005                     	;# 
  3788  0006                     	;# 
  3789  0007                     	;# 
  3790  0008                     	;# 
  3791  0009                     	;# 
  3792  000A                     	;# 
  3793  000B                     	;# 
  3794  000C                     	;# 
  3795  000D                     	;# 
  3796  000E                     	;# 
  3797  0010                     	;# 
  3798  0011                     	;# 
  3799  0012                     	;# 
  3800  0013                     	;# 
  3801  0014                     	;# 
  3802  0015                     	;# 
  3803  0015                     	;# 
  3804  0016                     	;# 
  3805  0016                     	;# 
  3806  0017                     	;# 
  3807  0018                     	;# 
  3808  0019                     	;# 
  3809  0019                     	;# 
  3810  001A                     	;# 
  3811  001B                     	;# 
  3812  001C                     	;# 
  3813  001D                     	;# 
  3814  001E                     	;# 
  3815  001F                     	;# 
  3816  008C                     	;# 
  3817  008D                     	;# 
  3818  008E                     	;# 
  3819  0090                     	;# 
  3820  0091                     	;# 
  3821  0092                     	;# 
  3822  0093                     	;# 
  3823  0094                     	;# 
  3824  0097                     	;# 
  3825  009B                     	;# 
  3826  009B                     	;# 
  3827  009C                     	;# 
  3828  009D                     	;# 
  3829  009E                     	;# 
  3830  009F                     	;# 
  3831  010C                     	;# 
  3832  010D                     	;# 
  3833  010E                     	;# 
  3834  0111                     	;# 
  3835  0112                     	;# 
  3836  0113                     	;# 
  3837  0114                     	;# 
  3838  0115                     	;# 
  3839  0116                     	;# 
  3840  0117                     	;# 
  3841  0118                     	;# 
  3842  0119                     	;# 
  3843  018C                     	;# 
  3844  018D                     	;# 
  3845  018E                     	;# 
  3846  0199                     	;# 
  3847  0199                     	;# 
  3848  0199                     	;# 
  3849  019A                     	;# 
  3850  019A                     	;# 
  3851  019A                     	;# 
  3852  019B                     	;# 
  3853  019B                     	;# 
  3854  019B                     	;# 
  3855  019B                     	;# 
  3856  019B                     	;# 
  3857  019C                     	;# 
  3858  019C                     	;# 
  3859  019C                     	;# 
  3860  019D                     	;# 
  3861  019D                     	;# 
  3862  019D                     	;# 
  3863  019E                     	;# 
  3864  019E                     	;# 
  3865  019E                     	;# 
  3866  019F                     	;# 
  3867  019F                     	;# 
  3868  019F                     	;# 
  3869  019F                     	;# 
  3870  019F                     	;# 
  3871  020C                     	;# 
  3872  020D                     	;# 
  3873  020E                     	;# 
  3874  0211                     	;# 
  3875  0211                     	;# 
  3876  0212                     	;# 
  3877  0212                     	;# 
  3878  0213                     	;# 
  3879  0213                     	;# 
  3880  0214                     	;# 
  3881  0214                     	;# 
  3882  0215                     	;# 
  3883  0215                     	;# 
  3884  0215                     	;# 
  3885  0215                     	;# 
  3886  0216                     	;# 
  3887  0216                     	;# 
  3888  0217                     	;# 
  3889  0217                     	;# 
  3890  0219                     	;# 
  3891  021A                     	;# 
  3892  021B                     	;# 
  3893  021C                     	;# 
  3894  021D                     	;# 
  3895  021D                     	;# 
  3896  021E                     	;# 
  3897  021F                     	;# 
  3898  028C                     	;# 
  3899  028D                     	;# 
  3900  028E                     	;# 
  3901  0291                     	;# 
  3902  0291                     	;# 
  3903  0292                     	;# 
  3904  0293                     	;# 
  3905  0294                     	;# 
  3906  0295                     	;# 
  3907  0295                     	;# 
  3908  0296                     	;# 
  3909  0297                     	;# 
  3910  0298                     	;# 
  3911  029F                     	;# 
  3912  030C                     	;# 
  3913  030D                     	;# 
  3914  030E                     	;# 
  3915  0311                     	;# 
  3916  0311                     	;# 
  3917  0312                     	;# 
  3918  0313                     	;# 
  3919  0314                     	;# 
  3920  0315                     	;# 
  3921  0315                     	;# 
  3922  0316                     	;# 
  3923  0317                     	;# 
  3924  0318                     	;# 
  3925  038C                     	;# 
  3926  038D                     	;# 
  3927  038E                     	;# 
  3928  0391                     	;# 
  3929  0392                     	;# 
  3930  0393                     	;# 
  3931  0394                     	;# 
  3932  0395                     	;# 
  3933  0396                     	;# 
  3934  0397                     	;# 
  3935  0398                     	;# 
  3936  0399                     	;# 
  3937  039A                     	;# 
  3938  039C                     	;# 
  3939  039D                     	;# 
  3940  039E                     	;# 
  3941  039F                     	;# 
  3942  0411                     	;# 
  3943  0411                     	;# 
  3944  0412                     	;# 
  3945  0413                     	;# 
  3946  0414                     	;# 
  3947  0415                     	;# 
  3948  0416                     	;# 
  3949  0417                     	;# 
  3950  0418                     	;# 
  3951  0418                     	;# 
  3952  0419                     	;# 
  3953  041A                     	;# 
  3954  041B                     	;# 
  3955  041C                     	;# 
  3956  041D                     	;# 
  3957  041E                     	;# 
  3958  041F                     	;# 
  3959  0498                     	;# 
  3960  0498                     	;# 
  3961  0499                     	;# 
  3962  049A                     	;# 
  3963  049B                     	;# 
  3964  049B                     	;# 
  3965  049C                     	;# 
  3966  049D                     	;# 
  3967  049E                     	;# 
  3968  049F                     	;# 
  3969  0617                     	;# 
  3970  0618                     	;# 
  3971  0619                     	;# 
  3972  0619                     	;# 
  3973  061A                     	;# 
  3974  061B                     	;# 
  3975  061C                     	;# 
  3976  061C                     	;# 
  3977  061F                     	;# 
  3978  0691                     	;# 
  3979  0692                     	;# 
  3980  0693                     	;# 
  3981  0694                     	;# 
  3982  0695                     	;# 
  3983  0696                     	;# 
  3984  0697                     	;# 
  3985  0698                     	;# 
  3986  0699                     	;# 
  3987  0711                     	;# 
  3988  0712                     	;# 
  3989  0713                     	;# 
  3990  0714                     	;# 
  3991  0715                     	;# 
  3992  0716                     	;# 
  3993  0717                     	;# 
  3994  0718                     	;# 
  3995  0719                     	;# 
  3996  0891                     	;# 
  3997  0891                     	;# 
  3998  0891                     	;# 
  3999  0891                     	;# 
  4000  0891                     	;# 
  4001  0891                     	;# 
  4002  0892                     	;# 
  4003  0892                     	;# 
  4004  0892                     	;# 
  4005  0893                     	;# 
  4006  0893                     	;# 
  4007  0893                     	;# 
  4008  0893                     	;# 
  4009  0893                     	;# 
  4010  0893                     	;# 
  4011  0894                     	;# 
  4012  0894                     	;# 
  4013  0894                     	;# 
  4014  0895                     	;# 
  4015  0895                     	;# 
  4016  0895                     	;# 
  4017  0896                     	;# 
  4018  0896                     	;# 
  4019  0896                     	;# 
  4020  089B                     	;# 
  4021  0911                     	;# 
  4022  0912                     	;# 
  4023  0913                     	;# 
  4024  0914                     	;# 
  4025  0915                     	;# 
  4026  0916                     	;# 
  4027  0918                     	;# 
  4028  0919                     	;# 
  4029  091A                     	;# 
  4030  091B                     	;# 
  4031  091C                     	;# 
  4032  091D                     	;# 
  4033  091E                     	;# 
  4034  091F                     	;# 
  4035  0E0F                     	;# 
  4036  0E10                     	;# 
  4037  0E11                     	;# 
  4038  0E12                     	;# 
  4039  0E13                     	;# 
  4040  0E14                     	;# 
  4041  0E15                     	;# 
  4042  0E16                     	;# 
  4043  0E17                     	;# 
  4044  0E18                     	;# 
  4045  0E19                     	;# 
  4046  0E1A                     	;# 
  4047  0E1B                     	;# 
  4048  0E1C                     	;# 
  4049  0E1D                     	;# 
  4050  0E1E                     	;# 
  4051  0E1F                     	;# 
  4052  0E20                     	;# 
  4053  0E21                     	;# 
  4054  0E22                     	;# 
  4055  0E24                     	;# 
  4056  0E25                     	;# 
  4057  0E28                     	;# 
  4058  0E29                     	;# 
  4059  0E2A                     	;# 
  4060  0E2B                     	;# 
  4061  0E2C                     	;# 
  4062  0E2D                     	;# 
  4063  0E2E                     	;# 
  4064  0E2F                     	;# 
  4065  0E90                     	;# 
  4066  0E91                     	;# 
  4067  0E92                     	;# 
  4068  0E94                     	;# 
  4069  0E95                     	;# 
  4070  0E9C                     	;# 
  4071  0E9D                     	;# 
  4072  0E9E                     	;# 
  4073  0E9F                     	;# 
  4074  0EA0                     	;# 
  4075  0EA1                     	;# 
  4076  0EA2                     	;# 
  4077  0EA3                     	;# 
  4078  0EA4                     	;# 
  4079  0EA5                     	;# 
  4080  0EA6                     	;# 
  4081  0EA7                     	;# 
  4082  0F0F                     	;# 
  4083  0F10                     	;# 
  4084  0F11                     	;# 
  4085  0F12                     	;# 
  4086  0F13                     	;# 
  4087  0F14                     	;# 
  4088  0F15                     	;# 
  4089  0F16                     	;# 
  4090  0F17                     	;# 
  4091  0F18                     	;# 
  4092  0F19                     	;# 
  4093  0F1A                     	;# 
  4094  0F1B                     	;# 
  4095  0F1C                     	;# 
  4096  0F1D                     	;# 
  4097  0F1E                     	;# 
  4098  0F1F                     	;# 
  4099  0F20                     	;# 
  4100  0F21                     	;# 
  4101  0F22                     	;# 
  4102  0F23                     	;# 
  4103  0F24                     	;# 
  4104  0F25                     	;# 
  4105  0F26                     	;# 
  4106  0F27                     	;# 
  4107  0F28                     	;# 
  4108  0F29                     	;# 
  4109  0F2A                     	;# 
  4110  0F2B                     	;# 
  4111  0F2C                     	;# 
  4112  0F2D                     	;# 
  4113  0F2E                     	;# 
  4114  0F2F                     	;# 
  4115  0F30                     	;# 
  4116  0F31                     	;# 
  4117  0F32                     	;# 
  4118  0F33                     	;# 
  4119  0F34                     	;# 
  4120  0F35                     	;# 
  4121  0F36                     	;# 
  4122  0F37                     	;# 
  4123  0FE4                     	;# 
  4124  0FE5                     	;# 
  4125  0FE6                     	;# 
  4126  0FE7                     	;# 
  4127  0FE8                     	;# 
  4128  0FE9                     	;# 
  4129  0FEA                     	;# 
  4130  0FEB                     	;# 
  4131  0FED                     	;# 
  4132  0FEE                     	;# 
  4133  0FEF                     	;# 
  4134  0000                     	;# 
  4135  0001                     	;# 
  4136  0002                     	;# 
  4137  0003                     	;# 
  4138  0004                     	;# 
  4139  0005                     	;# 
  4140  0006                     	;# 
  4141  0007                     	;# 
  4142  0008                     	;# 
  4143  0009                     	;# 
  4144  000A                     	;# 
  4145  000B                     	;# 
  4146  000C                     	;# 
  4147  000D                     	;# 
  4148  000E                     	;# 
  4149  0010                     	;# 
  4150  0011                     	;# 
  4151  0012                     	;# 
  4152  0013                     	;# 
  4153  0014                     	;# 
  4154  0015                     	;# 
  4155  0015                     	;# 
  4156  0016                     	;# 
  4157  0016                     	;# 
  4158  0017                     	;# 
  4159  0018                     	;# 
  4160  0019                     	;# 
  4161  0019                     	;# 
  4162  001A                     	;# 
  4163  001B                     	;# 
  4164  001C                     	;# 
  4165  001D                     	;# 
  4166  001E                     	;# 
  4167  001F                     	;# 
  4168  008C                     	;# 
  4169  008D                     	;# 
  4170  008E                     	;# 
  4171  0090                     	;# 
  4172  0091                     	;# 
  4173  0092                     	;# 
  4174  0093                     	;# 
  4175  0094                     	;# 
  4176  0097                     	;# 
  4177  009B                     	;# 
  4178  009B                     	;# 
  4179  009C                     	;# 
  4180  009D                     	;# 
  4181  009E                     	;# 
  4182  009F                     	;# 
  4183  010C                     	;# 
  4184  010D                     	;# 
  4185  010E                     	;# 
  4186  0111                     	;# 
  4187  0112                     	;# 
  4188  0113                     	;# 
  4189  0114                     	;# 
  4190  0115                     	;# 
  4191  0116                     	;# 
  4192  0117                     	;# 
  4193  0118                     	;# 
  4194  0119                     	;# 
  4195  018C                     	;# 
  4196  018D                     	;# 
  4197  018E                     	;# 
  4198  0199                     	;# 
  4199  0199                     	;# 
  4200  0199                     	;# 
  4201  019A                     	;# 
  4202  019A                     	;# 
  4203  019A                     	;# 
  4204  019B                     	;# 
  4205  019B                     	;# 
  4206  019B                     	;# 
  4207  019B                     	;# 
  4208  019B                     	;# 
  4209  019C                     	;# 
  4210  019C                     	;# 
  4211  019C                     	;# 
  4212  019D                     	;# 
  4213  019D                     	;# 
  4214  019D                     	;# 
  4215  019E                     	;# 
  4216  019E                     	;# 
  4217  019E                     	;# 
  4218  019F                     	;# 
  4219  019F                     	;# 
  4220  019F                     	;# 
  4221  019F                     	;# 
  4222  019F                     	;# 
  4223  020C                     	;# 
  4224  020D                     	;# 
  4225  020E                     	;# 
  4226  0211                     	;# 
  4227  0211                     	;# 
  4228  0212                     	;# 
  4229  0212                     	;# 
  4230  0213                     	;# 
  4231  0213                     	;# 
  4232  0214                     	;# 
  4233  0214                     	;# 
  4234  0215                     	;# 
  4235  0215                     	;# 
  4236  0215                     	;# 
  4237  0215                     	;# 
  4238  0216                     	;# 
  4239  0216                     	;# 
  4240  0217                     	;# 
  4241  0217                     	;# 
  4242  0219                     	;# 
  4243  021A                     	;# 
  4244  021B                     	;# 
  4245  021C                     	;# 
  4246  021D                     	;# 
  4247  021D                     	;# 
  4248  021E                     	;# 
  4249  021F                     	;# 
  4250  028C                     	;# 
  4251  028D                     	;# 
  4252  028E                     	;# 
  4253  0291                     	;# 
  4254  0291                     	;# 
  4255  0292                     	;# 
  4256  0293                     	;# 
  4257  0294                     	;# 
  4258  0295                     	;# 
  4259  0295                     	;# 
  4260  0296                     	;# 
  4261  0297                     	;# 
  4262  0298                     	;# 
  4263  029F                     	;# 
  4264  030C                     	;# 
  4265  030D                     	;# 
  4266  030E                     	;# 
  4267  0311                     	;# 
  4268  0311                     	;# 
  4269  0312                     	;# 
  4270  0313                     	;# 
  4271  0314                     	;# 
  4272  0315                     	;# 
  4273  0315                     	;# 
  4274  0316                     	;# 
  4275  0317                     	;# 
  4276  0318                     	;# 
  4277  038C                     	;# 
  4278  038D                     	;# 
  4279  038E                     	;# 
  4280  0391                     	;# 
  4281  0392                     	;# 
  4282  0393                     	;# 
  4283  0394                     	;# 
  4284  0395                     	;# 
  4285  0396                     	;# 
  4286  0397                     	;# 
  4287  0398                     	;# 
  4288  0399                     	;# 
  4289  039A                     	;# 
  4290  039C                     	;# 
  4291  039D                     	;# 
  4292  039E                     	;# 
  4293  039F                     	;# 
  4294  0411                     	;# 
  4295  0411                     	;# 
  4296  0412                     	;# 
  4297  0413                     	;# 
  4298  0414                     	;# 
  4299  0415                     	;# 
  4300  0416                     	;# 
  4301  0417                     	;# 
  4302  0418                     	;# 
  4303  0418                     	;# 
  4304  0419                     	;# 
  4305  041A                     	;# 
  4306  041B                     	;# 
  4307  041C                     	;# 
  4308  041D                     	;# 
  4309  041E                     	;# 
  4310  041F                     	;# 
  4311  0498                     	;# 
  4312  0498                     	;# 
  4313  0499                     	;# 
  4314  049A                     	;# 
  4315  049B                     	;# 
  4316  049B                     	;# 
  4317  049C                     	;# 
  4318  049D                     	;# 
  4319  049E                     	;# 
  4320  049F                     	;# 
  4321  0617                     	;# 
  4322  0618                     	;# 
  4323  0619                     	;# 
  4324  0619                     	;# 
  4325  061A                     	;# 
  4326  061B                     	;# 
  4327  061C                     	;# 
  4328  061C                     	;# 
  4329  061F                     	;# 
  4330  0691                     	;# 
  4331  0692                     	;# 
  4332  0693                     	;# 
  4333  0694                     	;# 
  4334  0695                     	;# 
  4335  0696                     	;# 
  4336  0697                     	;# 
  4337  0698                     	;# 
  4338  0699                     	;# 
  4339  0711                     	;# 
  4340  0712                     	;# 
  4341  0713                     	;# 
  4342  0714                     	;# 
  4343  0715                     	;# 
  4344  0716                     	;# 
  4345  0717                     	;# 
  4346  0718                     	;# 
  4347  0719                     	;# 
  4348  0891                     	;# 
  4349  0891                     	;# 
  4350  0891                     	;# 
  4351  0891                     	;# 
  4352  0891                     	;# 
  4353  0891                     	;# 
  4354  0892                     	;# 
  4355  0892                     	;# 
  4356  0892                     	;# 
  4357  0893                     	;# 
  4358  0893                     	;# 
  4359  0893                     	;# 
  4360  0893                     	;# 
  4361  0893                     	;# 
  4362  0893                     	;# 
  4363  0894                     	;# 
  4364  0894                     	;# 
  4365  0894                     	;# 
  4366  0895                     	;# 
  4367  0895                     	;# 
  4368  0895                     	;# 
  4369  0896                     	;# 
  4370  0896                     	;# 
  4371  0896                     	;# 
  4372  089B                     	;# 
  4373  0911                     	;# 
  4374  0912                     	;# 
  4375  0913                     	;# 
  4376  0914                     	;# 
  4377  0915                     	;# 
  4378  0916                     	;# 
  4379  0918                     	;# 
  4380  0919                     	;# 
  4381  091A                     	;# 
  4382  091B                     	;# 
  4383  091C                     	;# 
  4384  091D                     	;# 
  4385  091E                     	;# 
  4386  091F                     	;# 
  4387  0E0F                     	;# 
  4388  0E10                     	;# 
  4389  0E11                     	;# 
  4390  0E12                     	;# 
  4391  0E13                     	;# 
  4392  0E14                     	;# 
  4393  0E15                     	;# 
  4394  0E16                     	;# 
  4395  0E17                     	;# 
  4396  0E18                     	;# 
  4397  0E19                     	;# 
  4398  0E1A                     	;# 
  4399  0E1B                     	;# 
  4400  0E1C                     	;# 
  4401  0E1D                     	;# 
  4402  0E1E                     	;# 
  4403  0E1F                     	;# 
  4404  0E20                     	;# 
  4405  0E21                     	;# 
  4406  0E22                     	;# 
  4407  0E24                     	;# 
  4408  0E25                     	;# 
  4409  0E28                     	;# 
  4410  0E29                     	;# 
  4411  0E2A                     	;# 
  4412  0E2B                     	;# 
  4413  0E2C                     	;# 
  4414  0E2D                     	;# 
  4415  0E2E                     	;# 
  4416  0E2F                     	;# 
  4417  0E90                     	;# 
  4418  0E91                     	;# 
  4419  0E92                     	;# 
  4420  0E94                     	;# 
  4421  0E95                     	;# 
  4422  0E9C                     	;# 
  4423  0E9D                     	;# 
  4424  0E9E                     	;# 
  4425  0E9F                     	;# 
  4426  0EA0                     	;# 
  4427  0EA1                     	;# 
  4428  0EA2                     	;# 
  4429  0EA3                     	;# 
  4430  0EA4                     	;# 
  4431  0EA5                     	;# 
  4432  0EA6                     	;# 
  4433  0EA7                     	;# 
  4434  0F0F                     	;# 
  4435  0F10                     	;# 
  4436  0F11                     	;# 
  4437  0F12                     	;# 
  4438  0F13                     	;# 
  4439  0F14                     	;# 
  4440  0F15                     	;# 
  4441  0F16                     	;# 
  4442  0F17                     	;# 
  4443  0F18                     	;# 
  4444  0F19                     	;# 
  4445  0F1A                     	;# 
  4446  0F1B                     	;# 
  4447  0F1C                     	;# 
  4448  0F1D                     	;# 
  4449  0F1E                     	;# 
  4450  0F1F                     	;# 
  4451  0F20                     	;# 
  4452  0F21                     	;# 
  4453  0F22                     	;# 
  4454  0F23                     	;# 
  4455  0F24                     	;# 
  4456  0F25                     	;# 
  4457  0F26                     	;# 
  4458  0F27                     	;# 
  4459  0F28                     	;# 
  4460  0F29                     	;# 
  4461  0F2A                     	;# 
  4462  0F2B                     	;# 
  4463  0F2C                     	;# 
  4464  0F2D                     	;# 
  4465  0F2E                     	;# 
  4466  0F2F                     	;# 
  4467  0F30                     	;# 
  4468  0F31                     	;# 
  4469  0F32                     	;# 
  4470  0F33                     	;# 
  4471  0F34                     	;# 
  4472  0F35                     	;# 
  4473  0F36                     	;# 
  4474  0F37                     	;# 
  4475  0FE4                     	;# 
  4476  0FE5                     	;# 
  4477  0FE6                     	;# 
  4478  0FE7                     	;# 
  4479  0FE8                     	;# 
  4480  0FE9                     	;# 
  4481  0FEA                     	;# 
  4482  0FEB                     	;# 
  4483  0FED                     	;# 
  4484  0FEE                     	;# 
  4485  0FEF                     	;# 
  4486  0000                     	;# 
  4487  0001                     	;# 
  4488  0002                     	;# 
  4489  0003                     	;# 
  4490  0004                     	;# 
  4491  0005                     	;# 
  4492  0006                     	;# 
  4493  0007                     	;# 
  4494  0008                     	;# 
  4495  0009                     	;# 
  4496  000A                     	;# 
  4497  000B                     	;# 
  4498  000C                     	;# 
  4499  000D                     	;# 
  4500  000E                     	;# 
  4501  0010                     	;# 
  4502  0011                     	;# 
  4503  0012                     	;# 
  4504  0013                     	;# 
  4505  0014                     	;# 
  4506  0015                     	;# 
  4507  0015                     	;# 
  4508  0016                     	;# 
  4509  0016                     	;# 
  4510  0017                     	;# 
  4511  0018                     	;# 
  4512  0019                     	;# 
  4513  0019                     	;# 
  4514  001A                     	;# 
  4515  001B                     	;# 
  4516  001C                     	;# 
  4517  001D                     	;# 
  4518  001E                     	;# 
  4519  001F                     	;# 
  4520  008C                     	;# 
  4521  008D                     	;# 
  4522  008E                     	;# 
  4523  0090                     	;# 
  4524  0091                     	;# 
  4525  0092                     	;# 
  4526  0093                     	;# 
  4527  0094                     	;# 
  4528  0097                     	;# 
  4529  009B                     	;# 
  4530  009B                     	;# 
  4531  009C                     	;# 
  4532  009D                     	;# 
  4533  009E                     	;# 
  4534  009F                     	;# 
  4535  010C                     	;# 
  4536  010D                     	;# 
  4537  010E                     	;# 
  4538  0111                     	;# 
  4539  0112                     	;# 
  4540  0113                     	;# 
  4541  0114                     	;# 
  4542  0115                     	;# 
  4543  0116                     	;# 
  4544  0117                     	;# 
  4545  0118                     	;# 
  4546  0119                     	;# 
  4547  018C                     	;# 
  4548  018D                     	;# 
  4549  018E                     	;# 
  4550  0199                     	;# 
  4551  0199                     	;# 
  4552  0199                     	;# 
  4553  019A                     	;# 
  4554  019A                     	;# 
  4555  019A                     	;# 
  4556  019B                     	;# 
  4557  019B                     	;# 
  4558  019B                     	;# 
  4559  019B                     	;# 
  4560  019B                     	;# 
  4561  019C                     	;# 
  4562  019C                     	;# 
  4563  019C                     	;# 
  4564  019D                     	;# 
  4565  019D                     	;# 
  4566  019D                     	;# 
  4567  019E                     	;# 
  4568  019E                     	;# 
  4569  019E                     	;# 
  4570  019F                     	;# 
  4571  019F                     	;# 
  4572  019F                     	;# 
  4573  019F                     	;# 
  4574  019F                     	;# 
  4575  020C                     	;# 
  4576  020D                     	;# 
  4577  020E                     	;# 
  4578  0211                     	;# 
  4579  0211                     	;# 
  4580  0212                     	;# 
  4581  0212                     	;# 
  4582  0213                     	;# 
  4583  0213                     	;# 
  4584  0214                     	;# 
  4585  0214                     	;# 
  4586  0215                     	;# 
  4587  0215                     	;# 
  4588  0215                     	;# 
  4589  0215                     	;# 
  4590  0216                     	;# 
  4591  0216                     	;# 
  4592  0217                     	;# 
  4593  0217                     	;# 
  4594  0219                     	;# 
  4595  021A                     	;# 
  4596  021B                     	;# 
  4597  021C                     	;# 
  4598  021D                     	;# 
  4599  021D                     	;# 
  4600  021E                     	;# 
  4601  021F                     	;# 
  4602  028C                     	;# 
  4603  028D                     	;# 
  4604  028E                     	;# 
  4605  0291                     	;# 
  4606  0291                     	;# 
  4607  0292                     	;# 
  4608  0293                     	;# 
  4609  0294                     	;# 
  4610  0295                     	;# 
  4611  0295                     	;# 
  4612  0296                     	;# 
  4613  0297                     	;# 
  4614  0298                     	;# 
  4615  029F                     	;# 
  4616  030C                     	;# 
  4617  030D                     	;# 
  4618  030E                     	;# 
  4619  0311                     	;# 
  4620  0311                     	;# 
  4621  0312                     	;# 
  4622  0313                     	;# 
  4623  0314                     	;# 
  4624  0315                     	;# 
  4625  0315                     	;# 
  4626  0316                     	;# 
  4627  0317                     	;# 
  4628  0318                     	;# 
  4629  038C                     	;# 
  4630  038D                     	;# 
  4631  038E                     	;# 
  4632  0391                     	;# 
  4633  0392                     	;# 
  4634  0393                     	;# 
  4635  0394                     	;# 
  4636  0395                     	;# 
  4637  0396                     	;# 
  4638  0397                     	;# 
  4639  0398                     	;# 
  4640  0399                     	;# 
  4641  039A                     	;# 
  4642  039C                     	;# 
  4643  039D                     	;# 
  4644  039E                     	;# 
  4645  039F                     	;# 
  4646  0411                     	;# 
  4647  0411                     	;# 
  4648  0412                     	;# 
  4649  0413                     	;# 
  4650  0414                     	;# 
  4651  0415                     	;# 
  4652  0416                     	;# 
  4653  0417                     	;# 
  4654  0418                     	;# 
  4655  0418                     	;# 
  4656  0419                     	;# 
  4657  041A                     	;# 
  4658  041B                     	;# 
  4659  041C                     	;# 
  4660  041D                     	;# 
  4661  041E                     	;# 
  4662  041F                     	;# 
  4663  0498                     	;# 
  4664  0498                     	;# 
  4665  0499                     	;# 
  4666  049A                     	;# 
  4667  049B                     	;# 
  4668  049B                     	;# 
  4669  049C                     	;# 
  4670  049D                     	;# 
  4671  049E                     	;# 
  4672  049F                     	;# 
  4673  0617                     	;# 
  4674  0618                     	;# 
  4675  0619                     	;# 
  4676  0619                     	;# 
  4677  061A                     	;# 
  4678  061B                     	;# 
  4679  061C                     	;# 
  4680  061C                     	;# 
  4681  061F                     	;# 
  4682  0691                     	;# 
  4683  0692                     	;# 
  4684  0693                     	;# 
  4685  0694                     	;# 
  4686  0695                     	;# 
  4687  0696                     	;# 
  4688  0697                     	;# 
  4689  0698                     	;# 
  4690  0699                     	;# 
  4691  0711                     	;# 
  4692  0712                     	;# 
  4693  0713                     	;# 
  4694  0714                     	;# 
  4695  0715                     	;# 
  4696  0716                     	;# 
  4697  0717                     	;# 
  4698  0718                     	;# 
  4699  0719                     	;# 
  4700  0891                     	;# 
  4701  0891                     	;# 
  4702  0891                     	;# 
  4703  0891                     	;# 
  4704  0891                     	;# 
  4705  0891                     	;# 
  4706  0892                     	;# 
  4707  0892                     	;# 
  4708  0892                     	;# 
  4709  0893                     	;# 
  4710  0893                     	;# 
  4711  0893                     	;# 
  4712  0893                     	;# 
  4713  0893                     	;# 
  4714  0893                     	;# 
  4715  0894                     	;# 
  4716  0894                     	;# 
  4717  0894                     	;# 
  4718  0895                     	;# 
  4719  0895                     	;# 
  4720  0895                     	;# 
  4721  0896                     	;# 
  4722  0896                     	;# 
  4723  0896                     	;# 
  4724  089B                     	;# 
  4725  0911                     	;# 
  4726  0912                     	;# 
  4727  0913                     	;# 
  4728  0914                     	;# 
  4729  0915                     	;# 
  4730  0916                     	;# 
  4731  0918                     	;# 
  4732  0919                     	;# 
  4733  091A                     	;# 
  4734  091B                     	;# 
  4735  091C                     	;# 
  4736  091D                     	;# 
  4737  091E                     	;# 
  4738  091F                     	;# 
  4739  0E0F                     	;# 
  4740  0E10                     	;# 
  4741  0E11                     	;# 
  4742  0E12                     	;# 
  4743  0E13                     	;# 
  4744  0E14                     	;# 
  4745  0E15                     	;# 
  4746  0E16                     	;# 
  4747  0E17                     	;# 
  4748  0E18                     	;# 
  4749  0E19                     	;# 
  4750  0E1A                     	;# 
  4751  0E1B                     	;# 
  4752  0E1C                     	;# 
  4753  0E1D                     	;# 
  4754  0E1E                     	;# 
  4755  0E1F                     	;# 
  4756  0E20                     	;# 
  4757  0E21                     	;# 
  4758  0E22                     	;# 
  4759  0E24                     	;# 
  4760  0E25                     	;# 
  4761  0E28                     	;# 
  4762  0E29                     	;# 
  4763  0E2A                     	;# 
  4764  0E2B                     	;# 
  4765  0E2C                     	;# 
  4766  0E2D                     	;# 
  4767  0E2E                     	;# 
  4768  0E2F                     	;# 
  4769  0E90                     	;# 
  4770  0E91                     	;# 
  4771  0E92                     	;# 
  4772  0E94                     	;# 
  4773  0E95                     	;# 
  4774  0E9C                     	;# 
  4775  0E9D                     	;# 
  4776  0E9E                     	;# 
  4777  0E9F                     	;# 
  4778  0EA0                     	;# 
  4779  0EA1                     	;# 
  4780  0EA2                     	;# 
  4781  0EA3                     	;# 
  4782  0EA4                     	;# 
  4783  0EA5                     	;# 
  4784  0EA6                     	;# 
  4785  0EA7                     	;# 
  4786  0F0F                     	;# 
  4787  0F10                     	;# 
  4788  0F11                     	;# 
  4789  0F12                     	;# 
  4790  0F13                     	;# 
  4791  0F14                     	;# 
  4792  0F15                     	;# 
  4793  0F16                     	;# 
  4794  0F17                     	;# 
  4795  0F18                     	;# 
  4796  0F19                     	;# 
  4797  0F1A                     	;# 
  4798  0F1B                     	;# 
  4799  0F1C                     	;# 
  4800  0F1D                     	;# 
  4801  0F1E                     	;# 
  4802  0F1F                     	;# 
  4803  0F20                     	;# 
  4804  0F21                     	;# 
  4805  0F22                     	;# 
  4806  0F23                     	;# 
  4807  0F24                     	;# 
  4808  0F25                     	;# 
  4809  0F26                     	;# 
  4810  0F27                     	;# 
  4811  0F28                     	;# 
  4812  0F29                     	;# 
  4813  0F2A                     	;# 
  4814  0F2B                     	;# 
  4815  0F2C                     	;# 
  4816  0F2D                     	;# 
  4817  0F2E                     	;# 
  4818  0F2F                     	;# 
  4819  0F30                     	;# 
  4820  0F31                     	;# 
  4821  0F32                     	;# 
  4822  0F33                     	;# 
  4823  0F34                     	;# 
  4824  0F35                     	;# 
  4825  0F36                     	;# 
  4826  0F37                     	;# 
  4827  0FE4                     	;# 
  4828  0FE5                     	;# 
  4829  0FE6                     	;# 
  4830  0FE7                     	;# 
  4831  0FE8                     	;# 
  4832  0FE9                     	;# 
  4833  0FEA                     	;# 
  4834  0FEB                     	;# 
  4835  0FED                     	;# 
  4836  0FEE                     	;# 
  4837  0FEF                     	;# 
  4838  0000                     	;# 
  4839  0001                     	;# 
  4840  0002                     	;# 
  4841  0003                     	;# 
  4842  0004                     	;# 
  4843  0005                     	;# 
  4844  0006                     	;# 
  4845  0007                     	;# 
  4846  0008                     	;# 
  4847  0009                     	;# 
  4848  000A                     	;# 
  4849  000B                     	;# 
  4850  000C                     	;# 
  4851  000D                     	;# 
  4852  000E                     	;# 
  4853  0010                     	;# 
  4854  0011                     	;# 
  4855  0012                     	;# 
  4856  0013                     	;# 
  4857  0014                     	;# 
  4858  0015                     	;# 
  4859  0015                     	;# 
  4860  0016                     	;# 
  4861  0016                     	;# 
  4862  0017                     	;# 
  4863  0018                     	;# 
  4864  0019                     	;# 
  4865  0019                     	;# 
  4866  001A                     	;# 
  4867  001B                     	;# 
  4868  001C                     	;# 
  4869  001D                     	;# 
  4870  001E                     	;# 
  4871  001F                     	;# 
  4872  008C                     	;# 
  4873  008D                     	;# 
  4874  008E                     	;# 
  4875  0090                     	;# 
  4876  0091                     	;# 
  4877  0092                     	;# 
  4878  0093                     	;# 
  4879  0094                     	;# 
  4880  0097                     	;# 
  4881  009B                     	;# 
  4882  009B                     	;# 
  4883  009C                     	;# 
  4884  009D                     	;# 
  4885  009E                     	;# 
  4886  009F                     	;# 
  4887  010C                     	;# 
  4888  010D                     	;# 
  4889  010E                     	;# 
  4890  0111                     	;# 
  4891  0112                     	;# 
  4892  0113                     	;# 
  4893  0114                     	;# 
  4894  0115                     	;# 
  4895  0116                     	;# 
  4896  0117                     	;# 
  4897  0118                     	;# 
  4898  0119                     	;# 
  4899  018C                     	;# 
  4900  018D                     	;# 
  4901  018E                     	;# 
  4902  0199                     	;# 
  4903  0199                     	;# 
  4904  0199                     	;# 
  4905  019A                     	;# 
  4906  019A                     	;# 
  4907  019A                     	;# 
  4908  019B                     	;# 
  4909  019B                     	;# 
  4910  019B                     	;# 
  4911  019B                     	;# 
  4912  019B                     	;# 
  4913  019C                     	;# 
  4914  019C                     	;# 
  4915  019C                     	;# 
  4916  019D                     	;# 
  4917  019D                     	;# 
  4918  019D                     	;# 
  4919  019E                     	;# 
  4920  019E                     	;# 
  4921  019E                     	;# 
  4922  019F                     	;# 
  4923  019F                     	;# 
  4924  019F                     	;# 
  4925  019F                     	;# 
  4926  019F                     	;# 
  4927  020C                     	;# 
  4928  020D                     	;# 
  4929  020E                     	;# 
  4930  0211                     	;# 
  4931  0211                     	;# 
  4932  0212                     	;# 
  4933  0212                     	;# 
  4934  0213                     	;# 
  4935  0213                     	;# 
  4936  0214                     	;# 
  4937  0214                     	;# 
  4938  0215                     	;# 
  4939  0215                     	;# 
  4940  0215                     	;# 
  4941  0215                     	;# 
  4942  0216                     	;# 
  4943  0216                     	;# 
  4944  0217                     	;# 
  4945  0217                     	;# 
  4946  0219                     	;# 
  4947  021A                     	;# 
  4948  021B                     	;# 
  4949  021C                     	;# 
  4950  021D                     	;# 
  4951  021D                     	;# 
  4952  021E                     	;# 
  4953  021F                     	;# 
  4954  028C                     	;# 
  4955  028D                     	;# 
  4956  028E                     	;# 
  4957  0291                     	;# 
  4958  0291                     	;# 
  4959  0292                     	;# 
  4960  0293                     	;# 
  4961  0294                     	;# 
  4962  0295                     	;# 
  4963  0295                     	;# 
  4964  0296                     	;# 
  4965  0297                     	;# 
  4966  0298                     	;# 
  4967  029F                     	;# 
  4968  030C                     	;# 
  4969  030D                     	;# 
  4970  030E                     	;# 
  4971  0311                     	;# 
  4972  0311                     	;# 
  4973  0312                     	;# 
  4974  0313                     	;# 
  4975  0314                     	;# 
  4976  0315                     	;# 
  4977  0315                     	;# 
  4978  0316                     	;# 
  4979  0317                     	;# 
  4980  0318                     	;# 
  4981  038C                     	;# 
  4982  038D                     	;# 
  4983  038E                     	;# 
  4984  0391                     	;# 
  4985  0392                     	;# 
  4986  0393                     	;# 
  4987  0394                     	;# 
  4988  0395                     	;# 
  4989  0396                     	;# 
  4990  0397                     	;# 
  4991  0398                     	;# 
  4992  0399                     	;# 
  4993  039A                     	;# 
  4994  039C                     	;# 
  4995  039D                     	;# 
  4996  039E                     	;# 
  4997  039F                     	;# 
  4998  0411                     	;# 
  4999  0411                     	;# 
  5000  0412                     	;# 
  5001  0413                     	;# 
  5002  0414                     	;# 
  5003  0415                     	;# 
  5004  0416                     	;# 
  5005  0417                     	;# 
  5006  0418                     	;# 
  5007  0418                     	;# 
  5008  0419                     	;# 
  5009  041A                     	;# 
  5010  041B                     	;# 
  5011  041C                     	;# 
  5012  041D                     	;# 
  5013  041E                     	;# 
  5014  041F                     	;# 
  5015  0498                     	;# 
  5016  0498                     	;# 
  5017  0499                     	;# 
  5018  049A                     	;# 
  5019  049B                     	;# 
  5020  049B                     	;# 
  5021  049C                     	;# 
  5022  049D                     	;# 
  5023  049E                     	;# 
  5024  049F                     	;# 
  5025  0617                     	;# 
  5026  0618                     	;# 
  5027  0619                     	;# 
  5028  0619                     	;# 
  5029  061A                     	;# 
  5030  061B                     	;# 
  5031  061C                     	;# 
  5032  061C                     	;# 
  5033  061F                     	;# 
  5034  0691                     	;# 
  5035  0692                     	;# 
  5036  0693                     	;# 
  5037  0694                     	;# 
  5038  0695                     	;# 
  5039  0696                     	;# 
  5040  0697                     	;# 
  5041  0698                     	;# 
  5042  0699                     	;# 
  5043  0711                     	;# 
  5044  0712                     	;# 
  5045  0713                     	;# 
  5046  0714                     	;# 
  5047  0715                     	;# 
  5048  0716                     	;# 
  5049  0717                     	;# 
  5050  0718                     	;# 
  5051  0719                     	;# 
  5052  0891                     	;# 
  5053  0891                     	;# 
  5054  0891                     	;# 
  5055  0891                     	;# 
  5056  0891                     	;# 
  5057  0891                     	;# 
  5058  0892                     	;# 
  5059  0892                     	;# 
  5060  0892                     	;# 
  5061  0893                     	;# 
  5062  0893                     	;# 
  5063  0893                     	;# 
  5064  0893                     	;# 
  5065  0893                     	;# 
  5066  0893                     	;# 
  5067  0894                     	;# 
  5068  0894                     	;# 
  5069  0894                     	;# 
  5070  0895                     	;# 
  5071  0895                     	;# 
  5072  0895                     	;# 
  5073  0896                     	;# 
  5074  0896                     	;# 
  5075  0896                     	;# 
  5076  089B                     	;# 
  5077  0911                     	;# 
  5078  0912                     	;# 
  5079  0913                     	;# 
  5080  0914                     	;# 
  5081  0915                     	;# 
  5082  0916                     	;# 
  5083  0918                     	;# 
  5084  0919                     	;# 
  5085  091A                     	;# 
  5086  091B                     	;# 
  5087  091C                     	;# 
  5088  091D                     	;# 
  5089  091E                     	;# 
  5090  091F                     	;# 
  5091  0E0F                     	;# 
  5092  0E10                     	;# 
  5093  0E11                     	;# 
  5094  0E12                     	;# 
  5095  0E13                     	;# 
  5096  0E14                     	;# 
  5097  0E15                     	;# 
  5098  0E16                     	;# 
  5099  0E17                     	;# 
  5100  0E18                     	;# 
  5101  0E19                     	;# 
  5102  0E1A                     	;# 
  5103  0E1B                     	;# 
  5104  0E1C                     	;# 
  5105  0E1D                     	;# 
  5106  0E1E                     	;# 
  5107  0E1F                     	;# 
  5108  0E20                     	;# 
  5109  0E21                     	;# 
  5110  0E22                     	;# 
  5111  0E24                     	;# 
  5112  0E25                     	;# 
  5113  0E28                     	;# 
  5114  0E29                     	;# 
  5115  0E2A                     	;# 
  5116  0E2B                     	;# 
  5117  0E2C                     	;# 
  5118  0E2D                     	;# 
  5119  0E2E                     	;# 
  5120  0E2F                     	;# 
  5121  0E90                     	;# 
  5122  0E91                     	;# 
  5123  0E92                     	;# 
  5124  0E94                     	;# 
  5125  0E95                     	;# 
  5126  0E9C                     	;# 
  5127  0E9D                     	;# 
  5128  0E9E                     	;# 
  5129  0E9F                     	;# 
  5130  0EA0                     	;# 
  5131  0EA1                     	;# 
  5132  0EA2                     	;# 
  5133  0EA3                     	;# 
  5134  0EA4                     	;# 
  5135  0EA5                     	;# 
  5136  0EA6                     	;# 
  5137  0EA7                     	;# 
  5138  0F0F                     	;# 
  5139  0F10                     	;# 
  5140  0F11                     	;# 
  5141  0F12                     	;# 
  5142  0F13                     	;# 
  5143  0F14                     	;# 
  5144  0F15                     	;# 
  5145  0F16                     	;# 
  5146  0F17                     	;# 
  5147  0F18                     	;# 
  5148  0F19                     	;# 
  5149  0F1A                     	;# 
  5150  0F1B                     	;# 
  5151  0F1C                     	;# 
  5152  0F1D                     	;# 
  5153  0F1E                     	;# 
  5154  0F1F                     	;# 
  5155  0F20                     	;# 
  5156  0F21                     	;# 
  5157  0F22                     	;# 
  5158  0F23                     	;# 
  5159  0F24                     	;# 
  5160  0F25                     	;# 
  5161  0F26                     	;# 
  5162  0F27                     	;# 
  5163  0F28                     	;# 
  5164  0F29                     	;# 
  5165  0F2A                     	;# 
  5166  0F2B                     	;# 
  5167  0F2C                     	;# 
  5168  0F2D                     	;# 
  5169  0F2E                     	;# 
  5170  0F2F                     	;# 
  5171  0F30                     	;# 
  5172  0F31                     	;# 
  5173  0F32                     	;# 
  5174  0F33                     	;# 
  5175  0F34                     	;# 
  5176  0F35                     	;# 
  5177  0F36                     	;# 
  5178  0F37                     	;# 
  5179  0FE4                     	;# 
  5180  0FE5                     	;# 
  5181  0FE6                     	;# 
  5182  0FE7                     	;# 
  5183  0FE8                     	;# 
  5184  0FE9                     	;# 
  5185  0FEA                     	;# 
  5186  0FEB                     	;# 
  5187  0FED                     	;# 
  5188  0FEE                     	;# 
  5189  0FEF                     	;# 
  5190  0000                     	;# 
  5191  0001                     	;# 
  5192  0002                     	;# 
  5193  0003                     	;# 
  5194  0004                     	;# 
  5195  0005                     	;# 
  5196  0006                     	;# 
  5197  0007                     	;# 
  5198  0008                     	;# 
  5199  0009                     	;# 
  5200  000A                     	;# 
  5201  000B                     	;# 
  5202  000C                     	;# 
  5203  000D                     	;# 
  5204  000E                     	;# 
  5205  0010                     	;# 
  5206  0011                     	;# 
  5207  0012                     	;# 
  5208  0013                     	;# 
  5209  0014                     	;# 
  5210  0015                     	;# 
  5211  0015                     	;# 
  5212  0016                     	;# 
  5213  0016                     	;# 
  5214  0017                     	;# 
  5215  0018                     	;# 
  5216  0019                     	;# 
  5217  0019                     	;# 
  5218  001A                     	;# 
  5219  001B                     	;# 
  5220  001C                     	;# 
  5221  001D                     	;# 
  5222  001E                     	;# 
  5223  001F                     	;# 
  5224  008C                     	;# 
  5225  008D                     	;# 
  5226  008E                     	;# 
  5227  0090                     	;# 
  5228  0091                     	;# 
  5229  0092                     	;# 
  5230  0093                     	;# 
  5231  0094                     	;# 
  5232  0097                     	;# 
  5233  009B                     	;# 
  5234  009B                     	;# 
  5235  009C                     	;# 
  5236  009D                     	;# 
  5237  009E                     	;# 
  5238  009F                     	;# 
  5239  010C                     	;# 
  5240  010D                     	;# 
  5241  010E                     	;# 
  5242  0111                     	;# 
  5243  0112                     	;# 
  5244  0113                     	;# 
  5245  0114                     	;# 
  5246  0115                     	;# 
  5247  0116                     	;# 
  5248  0117                     	;# 
  5249  0118                     	;# 
  5250  0119                     	;# 
  5251  018C                     	;# 
  5252  018D                     	;# 
  5253  018E                     	;# 
  5254  0197                     	;# 
  5255  0199                     	;# 
  5256  0199                     	;# 
  5257  0199                     	;# 
  5258  019A                     	;# 
  5259  019A                     	;# 
  5260  019A                     	;# 
  5261  019B                     	;# 
  5262  019B                     	;# 
  5263  019B                     	;# 
  5264  019B                     	;# 
  5265  019B                     	;# 
  5266  019C                     	;# 
  5267  019C                     	;# 
  5268  019C                     	;# 
  5269  019D                     	;# 
  5270  019D                     	;# 
  5271  019D                     	;# 
  5272  019E                     	;# 
  5273  019E                     	;# 
  5274  019E                     	;# 
  5275  019F                     	;# 
  5276  019F                     	;# 
  5277  019F                     	;# 
  5278  019F                     	;# 
  5279  019F                     	;# 
  5280  020C                     	;# 
  5281  020D                     	;# 
  5282  020E                     	;# 
  5283  0211                     	;# 
  5284  0211                     	;# 
  5285  0212                     	;# 
  5286  0212                     	;# 
  5287  0213                     	;# 
  5288  0213                     	;# 
  5289  0214                     	;# 
  5290  0214                     	;# 
  5291  0215                     	;# 
  5292  0215                     	;# 
  5293  0215                     	;# 
  5294  0215                     	;# 
  5295  0216                     	;# 
  5296  0216                     	;# 
  5297  0217                     	;# 
  5298  0217                     	;# 
  5299  0219                     	;# 
  5300  021A                     	;# 
  5301  021B                     	;# 
  5302  021C                     	;# 
  5303  021D                     	;# 
  5304  021D                     	;# 
  5305  021E                     	;# 
  5306  021F                     	;# 
  5307  028C                     	;# 
  5308  028D                     	;# 
  5309  028E                     	;# 
  5310  0291                     	;# 
  5311  0291                     	;# 
  5312  0292                     	;# 
  5313  0293                     	;# 
  5314  0294                     	;# 
  5315  0295                     	;# 
  5316  0295                     	;# 
  5317  0296                     	;# 
  5318  0297                     	;# 
  5319  0298                     	;# 
  5320  029F                     	;# 
  5321  030C                     	;# 
  5322  030D                     	;# 
  5323  030E                     	;# 
  5324  0311                     	;# 
  5325  0311                     	;# 
  5326  0312                     	;# 
  5327  0313                     	;# 
  5328  0314                     	;# 
  5329  0315                     	;# 
  5330  0315                     	;# 
  5331  0316                     	;# 
  5332  0317                     	;# 
  5333  0318                     	;# 
  5334  038C                     	;# 
  5335  038D                     	;# 
  5336  038E                     	;# 
  5337  0391                     	;# 
  5338  0392                     	;# 
  5339  0393                     	;# 
  5340  0394                     	;# 
  5341  0395                     	;# 
  5342  0396                     	;# 
  5343  0397                     	;# 
  5344  0398                     	;# 
  5345  0399                     	;# 
  5346  039A                     	;# 
  5347  039C                     	;# 
  5348  039D                     	;# 
  5349  039E                     	;# 
  5350  039F                     	;# 
  5351  0411                     	;# 
  5352  0411                     	;# 
  5353  0412                     	;# 
  5354  0413                     	;# 
  5355  0414                     	;# 
  5356  0415                     	;# 
  5357  0416                     	;# 
  5358  0417                     	;# 
  5359  0418                     	;# 
  5360  0418                     	;# 
  5361  0419                     	;# 
  5362  041A                     	;# 
  5363  041B                     	;# 
  5364  041C                     	;# 
  5365  041D                     	;# 
  5366  041E                     	;# 
  5367  041F                     	;# 
  5368  0498                     	;# 
  5369  0498                     	;# 
  5370  0499                     	;# 
  5371  049A                     	;# 
  5372  049B                     	;# 
  5373  049B                     	;# 
  5374  049C                     	;# 
  5375  049D                     	;# 
  5376  049E                     	;# 
  5377  049F                     	;# 
  5378  0617                     	;# 
  5379  0618                     	;# 
  5380  0619                     	;# 
  5381  0619                     	;# 
  5382  061A                     	;# 
  5383  061B                     	;# 
  5384  061C                     	;# 
  5385  061C                     	;# 
  5386  061F                     	;# 
  5387  0691                     	;# 
  5388  0692                     	;# 
  5389  0693                     	;# 
  5390  0694                     	;# 
  5391  0695                     	;# 
  5392  0696                     	;# 
  5393  0697                     	;# 
  5394  0698                     	;# 
  5395  0699                     	;# 
  5396  0711                     	;# 
  5397  0712                     	;# 
  5398  0713                     	;# 
  5399  0714                     	;# 
  5400  0715                     	;# 
  5401  0716                     	;# 
  5402  0717                     	;# 
  5403  0718                     	;# 
  5404  0719                     	;# 
  5405  0891                     	;# 
  5406  0891                     	;# 
  5407  0891                     	;# 
  5408  0891                     	;# 
  5409  0891                     	;# 
  5410  0891                     	;# 
  5411  0892                     	;# 
  5412  0892                     	;# 
  5413  0892                     	;# 
  5414  0893                     	;# 
  5415  0893                     	;# 
  5416  0893                     	;# 
  5417  0893                     	;# 
  5418  0893                     	;# 
  5419  0893                     	;# 
  5420  0894                     	;# 
  5421  0894                     	;# 
  5422  0894                     	;# 
  5423  0895                     	;# 
  5424  0895                     	;# 
  5425  0895                     	;# 
  5426  0896                     	;# 
  5427  0896                     	;# 
  5428  0896                     	;# 
  5429  089B                     	;# 
  5430  0911                     	;# 
  5431  0912                     	;# 
  5432  0913                     	;# 
  5433  0914                     	;# 
  5434  0915                     	;# 
  5435  0916                     	;# 
  5436  0918                     	;# 
  5437  0919                     	;# 
  5438  091A                     	;# 
  5439  091B                     	;# 
  5440  091C                     	;# 
  5441  091D                     	;# 
  5442  091E                     	;# 
  5443  091F                     	;# 
  5444  0E0F                     	;# 
  5445  0E10                     	;# 
  5446  0E11                     	;# 
  5447  0E12                     	;# 
  5448  0E13                     	;# 
  5449  0E14                     	;# 
  5450  0E15                     	;# 
  5451  0E16                     	;# 
  5452  0E17                     	;# 
  5453  0E18                     	;# 
  5454  0E19                     	;# 
  5455  0E1A                     	;# 
  5456  0E1B                     	;# 
  5457  0E1C                     	;# 
  5458  0E1D                     	;# 
  5459  0E1E                     	;# 
  5460  0E1F                     	;# 
  5461  0E20                     	;# 
  5462  0E21                     	;# 
  5463  0E22                     	;# 
  5464  0E24                     	;# 
  5465  0E25                     	;# 
  5466  0E28                     	;# 
  5467  0E29                     	;# 
  5468  0E2A                     	;# 
  5469  0E2B                     	;# 
  5470  0E2C                     	;# 
  5471  0E2D                     	;# 
  5472  0E2E                     	;# 
  5473  0E2F                     	;# 
  5474  0E90                     	;# 
  5475  0E91                     	;# 
  5476  0E92                     	;# 
  5477  0E94                     	;# 
  5478  0E95                     	;# 
  5479  0E9C                     	;# 
  5480  0E9D                     	;# 
  5481  0E9E                     	;# 
  5482  0E9F                     	;# 
  5483  0EA0                     	;# 
  5484  0EA1                     	;# 
  5485  0EA2                     	;# 
  5486  0EA3                     	;# 
  5487  0EA4                     	;# 
  5488  0EA5                     	;# 
  5489  0EA6                     	;# 
  5490  0EA7                     	;# 
  5491  0F0F                     	;# 
  5492  0F10                     	;# 
  5493  0F11                     	;# 
  5494  0F12                     	;# 
  5495  0F13                     	;# 
  5496  0F14                     	;# 
  5497  0F15                     	;# 
  5498  0F16                     	;# 
  5499  0F17                     	;# 
  5500  0F18                     	;# 
  5501  0F19                     	;# 
  5502  0F1A                     	;# 
  5503  0F1B                     	;# 
  5504  0F1C                     	;# 
  5505  0F1D                     	;# 
  5506  0F1E                     	;# 
  5507  0F1F                     	;# 
  5508  0F20                     	;# 
  5509  0F21                     	;# 
  5510  0F22                     	;# 
  5511  0F23                     	;# 
  5512  0F24                     	;# 
  5513  0F25                     	;# 
  5514  0F26                     	;# 
  5515  0F27                     	;# 
  5516  0F28                     	;# 
  5517  0F29                     	;# 
  5518  0F2A                     	;# 
  5519  0F2B                     	;# 
  5520  0F2C                     	;# 
  5521  0F2D                     	;# 
  5522  0F2E                     	;# 
  5523  0F2F                     	;# 
  5524  0F30                     	;# 
  5525  0F31                     	;# 
  5526  0F32                     	;# 
  5527  0F33                     	;# 
  5528  0F34                     	;# 
  5529  0F35                     	;# 
  5530  0F36                     	;# 
  5531  0F37                     	;# 
  5532  0FE4                     	;# 
  5533  0FE5                     	;# 
  5534  0FE6                     	;# 
  5535  0FE7                     	;# 
  5536  0FE8                     	;# 
  5537  0FE9                     	;# 
  5538  0FEA                     	;# 
  5539  0FEB                     	;# 
  5540  0FED                     	;# 
  5541  0FEE                     	;# 
  5542  0FEF                     	;# 
  5543  0000                     	;# 
  5544  0001                     	;# 
  5545  0002                     	;# 
  5546  0003                     	;# 
  5547  0004                     	;# 
  5548  0005                     	;# 
  5549  0006                     	;# 
  5550  0007                     	;# 
  5551  0008                     	;# 
  5552  0009                     	;# 
  5553  000A                     	;# 
  5554  000B                     	;# 
  5555  000C                     	;# 
  5556  000D                     	;# 
  5557  000E                     	;# 
  5558  0010                     	;# 
  5559  0011                     	;# 
  5560  0012                     	;# 
  5561  0013                     	;# 
  5562  0014                     	;# 
  5563  0015                     	;# 
  5564  0015                     	;# 
  5565  0016                     	;# 
  5566  0016                     	;# 
  5567  0017                     	;# 
  5568  0018                     	;# 
  5569  0019                     	;# 
  5570  0019                     	;# 
  5571  001A                     	;# 
  5572  001B                     	;# 
  5573  001C                     	;# 
  5574  001D                     	;# 
  5575  001E                     	;# 
  5576  001F                     	;# 
  5577  008C                     	;# 
  5578  008D                     	;# 
  5579  008E                     	;# 
  5580  0090                     	;# 
  5581  0091                     	;# 
  5582  0092                     	;# 
  5583  0093                     	;# 
  5584  0094                     	;# 
  5585  0097                     	;# 
  5586  009B                     	;# 
  5587  009B                     	;# 
  5588  009C                     	;# 
  5589  009D                     	;# 
  5590  009E                     	;# 
  5591  009F                     	;# 
  5592  010C                     	;# 
  5593  010D                     	;# 
  5594  010E                     	;# 
  5595  0111                     	;# 
  5596  0112                     	;# 
  5597  0113                     	;# 
  5598  0114                     	;# 
  5599  0115                     	;# 
  5600  0116                     	;# 
  5601  0117                     	;# 
  5602  0118                     	;# 
  5603  0119                     	;# 
  5604  018C                     	;# 
  5605  018D                     	;# 
  5606  018E                     	;# 
  5607  0199                     	;# 
  5608  0199                     	;# 
  5609  0199                     	;# 
  5610  019A                     	;# 
  5611  019A                     	;# 
  5612  019A                     	;# 
  5613  019B                     	;# 
  5614  019B                     	;# 
  5615  019B                     	;# 
  5616  019B                     	;# 
  5617  019B                     	;# 
  5618  019C                     	;# 
  5619  019C                     	;# 
  5620  019C                     	;# 
  5621  019D                     	;# 
  5622  019D                     	;# 
  5623  019D                     	;# 
  5624  019E                     	;# 
  5625  019E                     	;# 
  5626  019E                     	;# 
  5627  019F                     	;# 
  5628  019F                     	;# 
  5629  019F                     	;# 
  5630  019F                     	;# 
  5631  019F                     	;# 
  5632  020C                     	;# 
  5633  020D                     	;# 
  5634  020E                     	;# 
  5635  0211                     	;# 
  5636  0211                     	;# 
  5637  0212                     	;# 
  5638  0212                     	;# 
  5639  0213                     	;# 
  5640  0213                     	;# 
  5641  0214                     	;# 
  5642  0214                     	;# 
  5643  0215                     	;# 
  5644  0215                     	;# 
  5645  0215                     	;# 
  5646  0215                     	;# 
  5647  0216                     	;# 
  5648  0216                     	;# 
  5649  0217                     	;# 
  5650  0217                     	;# 
  5651  0219                     	;# 
  5652  021A                     	;# 
  5653  021B                     	;# 
  5654  021C                     	;# 
  5655  021D                     	;# 
  5656  021D                     	;# 
  5657  021E                     	;# 
  5658  021F                     	;# 
  5659  028C                     	;# 
  5660  028D                     	;# 
  5661  028E                     	;# 
  5662  0291                     	;# 
  5663  0291                     	;# 
  5664  0292                     	;# 
  5665  0293                     	;# 
  5666  0294                     	;# 
  5667  0295                     	;# 
  5668  0295                     	;# 
  5669  0296                     	;# 
  5670  0297                     	;# 
  5671  0298                     	;# 
  5672  029F                     	;# 
  5673  030C                     	;# 
  5674  030D                     	;# 
  5675  030E                     	;# 
  5676  0311                     	;# 
  5677  0311                     	;# 
  5678  0312                     	;# 
  5679  0313                     	;# 
  5680  0314                     	;# 
  5681  0315                     	;# 
  5682  0315                     	;# 
  5683  0316                     	;# 
  5684  0317                     	;# 
  5685  0318                     	;# 
  5686  038C                     	;# 
  5687  038D                     	;# 
  5688  038E                     	;# 
  5689  0391                     	;# 
  5690  0392                     	;# 
  5691  0393                     	;# 
  5692  0394                     	;# 
  5693  0395                     	;# 
  5694  0396                     	;# 
  5695  0397                     	;# 
  5696  0398                     	;# 
  5697  0399                     	;# 
  5698  039A                     	;# 
  5699  039C                     	;# 
  5700  039D                     	;# 
  5701  039E                     	;# 
  5702  039F                     	;# 
  5703  0411                     	;# 
  5704  0411                     	;# 
  5705  0412                     	;# 
  5706  0413                     	;# 
  5707  0414                     	;# 
  5708  0415                     	;# 
  5709  0416                     	;# 
  5710  0417                     	;# 
  5711  0418                     	;# 
  5712  0418                     	;# 
  5713  0419                     	;# 
  5714  041A                     	;# 
  5715  041B                     	;# 
  5716  041C                     	;# 
  5717  041D                     	;# 
  5718  041E                     	;# 
  5719  041F                     	;# 
  5720  0498                     	;# 
  5721  0498                     	;# 
  5722  0499                     	;# 
  5723  049A                     	;# 
  5724  049B                     	;# 
  5725  049B                     	;# 
  5726  049C                     	;# 
  5727  049D                     	;# 
  5728  049E                     	;# 
  5729  049F                     	;# 
  5730  0617                     	;# 
  5731  0618                     	;# 
  5732  0619                     	;# 
  5733  0619                     	;# 
  5734  061A                     	;# 
  5735  061B                     	;# 
  5736  061C                     	;# 
  5737  061C                     	;# 
  5738  061F                     	;# 
  5739  0691                     	;# 
  5740  0692                     	;# 
  5741  0693                     	;# 
  5742  0694                     	;# 
  5743  0695                     	;# 
  5744  0696                     	;# 
  5745  0697                     	;# 
  5746  0698                     	;# 
  5747  0699                     	;# 
  5748  0711                     	;# 
  5749  0712                     	;# 
  5750  0713                     	;# 
  5751  0714                     	;# 
  5752  0715                     	;# 
  5753  0716                     	;# 
  5754  0717                     	;# 
  5755  0718                     	;# 
  5756  0719                     	;# 
  5757  0891                     	;# 
  5758  0891                     	;# 
  5759  0891                     	;# 
  5760  0891                     	;# 
  5761  0891                     	;# 
  5762  0891                     	;# 
  5763  0892                     	;# 
  5764  0892                     	;# 
  5765  0892                     	;# 
  5766  0893                     	;# 
  5767  0893                     	;# 
  5768  0893                     	;# 
  5769  0893                     	;# 
  5770  0893                     	;# 
  5771  0893                     	;# 
  5772  0894                     	;# 
  5773  0894                     	;# 
  5774  0894                     	;# 
  5775  0895                     	;# 
  5776  0895                     	;# 
  5777  0895                     	;# 
  5778  0896                     	;# 
  5779  0896                     	;# 
  5780  0896                     	;# 
  5781  089B                     	;# 
  5782  0911                     	;# 
  5783  0912                     	;# 
  5784  0913                     	;# 
  5785  0914                     	;# 
  5786  0915                     	;# 
  5787  0916                     	;# 
  5788  0918                     	;# 
  5789  0919                     	;# 
  5790  091A                     	;# 
  5791  091B                     	;# 
  5792  091C                     	;# 
  5793  091D                     	;# 
  5794  091E                     	;# 
  5795  091F                     	;# 
  5796  0E0F                     	;# 
  5797  0E10                     	;# 
  5798  0E11                     	;# 
  5799  0E12                     	;# 
  5800  0E13                     	;# 
  5801  0E14                     	;# 
  5802  0E15                     	;# 
  5803  0E16                     	;# 
  5804  0E17                     	;# 
  5805  0E18                     	;# 
  5806  0E19                     	;# 
  5807  0E1A                     	;# 
  5808  0E1B                     	;# 
  5809  0E1C                     	;# 
  5810  0E1D                     	;# 
  5811  0E1E                     	;# 
  5812  0E1F                     	;# 
  5813  0E20                     	;# 
  5814  0E21                     	;# 
  5815  0E22                     	;# 
  5816  0E24                     	;# 
  5817  0E25                     	;# 
  5818  0E28                     	;# 
  5819  0E29                     	;# 
  5820  0E2A                     	;# 
  5821  0E2B                     	;# 
  5822  0E2C                     	;# 
  5823  0E2D                     	;# 
  5824  0E2E                     	;# 
  5825  0E2F                     	;# 
  5826  0E90                     	;# 
  5827  0E91                     	;# 
  5828  0E92                     	;# 
  5829  0E94                     	;# 
  5830  0E95                     	;# 
  5831  0E9C                     	;# 
  5832  0E9D                     	;# 
  5833  0E9E                     	;# 
  5834  0E9F                     	;# 
  5835  0EA0                     	;# 
  5836  0EA1                     	;# 
  5837  0EA2                     	;# 
  5838  0EA3                     	;# 
  5839  0EA4                     	;# 
  5840  0EA5                     	;# 
  5841  0EA6                     	;# 
  5842  0EA7                     	;# 
  5843  0F0F                     	;# 
  5844  0F10                     	;# 
  5845  0F11                     	;# 
  5846  0F12                     	;# 
  5847  0F13                     	;# 
  5848  0F14                     	;# 
  5849  0F15                     	;# 
  5850  0F16                     	;# 
  5851  0F17                     	;# 
  5852  0F18                     	;# 
  5853  0F19                     	;# 
  5854  0F1A                     	;# 
  5855  0F1B                     	;# 
  5856  0F1C                     	;# 
  5857  0F1D                     	;# 
  5858  0F1E                     	;# 
  5859  0F1F                     	;# 
  5860  0F20                     	;# 
  5861  0F21                     	;# 
  5862  0F22                     	;# 
  5863  0F23                     	;# 
  5864  0F24                     	;# 
  5865  0F25                     	;# 
  5866  0F26                     	;# 
  5867  0F27                     	;# 
  5868  0F28                     	;# 
  5869  0F29                     	;# 
  5870  0F2A                     	;# 
  5871  0F2B                     	;# 
  5872  0F2C                     	;# 
  5873  0F2D                     	;# 
  5874  0F2E                     	;# 
  5875  0F2F                     	;# 
  5876  0F30                     	;# 
  5877  0F31                     	;# 
  5878  0F32                     	;# 
  5879  0F33                     	;# 
  5880  0F34                     	;# 
  5881  0F35                     	;# 
  5882  0F36                     	;# 
  5883  0F37                     	;# 
  5884  0FE4                     	;# 
  5885  0FE5                     	;# 
  5886  0FE6                     	;# 
  5887  0FE7                     	;# 
  5888  0FE8                     	;# 
  5889  0FE9                     	;# 
  5890  0FEA                     	;# 
  5891  0FEB                     	;# 
  5892  0FED                     	;# 
  5893  0FEE                     	;# 
  5894  0FEF                     	;# 
  5895  0000                     	;# 
  5896  0001                     	;# 
  5897  0002                     	;# 
  5898  0003                     	;# 
  5899  0004                     	;# 
  5900  0005                     	;# 
  5901  0006                     	;# 
  5902  0007                     	;# 
  5903  0008                     	;# 
  5904  0009                     	;# 
  5905  000A                     	;# 
  5906  000B                     	;# 
  5907  000C                     	;# 
  5908  000D                     	;# 
  5909  000E                     	;# 
  5910  0010                     	;# 
  5911  0011                     	;# 
  5912  0012                     	;# 
  5913  0013                     	;# 
  5914  0014                     	;# 
  5915  0015                     	;# 
  5916  0015                     	;# 
  5917  0016                     	;# 
  5918  0016                     	;# 
  5919  0017                     	;# 
  5920  0018                     	;# 
  5921  0019                     	;# 
  5922  0019                     	;# 
  5923  001A                     	;# 
  5924  001B                     	;# 
  5925  001C                     	;# 
  5926  001D                     	;# 
  5927  001E                     	;# 
  5928  001F                     	;# 
  5929  008C                     	;# 
  5930  008D                     	;# 
  5931  008E                     	;# 
  5932  0090                     	;# 
  5933  0091                     	;# 
  5934  0092                     	;# 
  5935  0093                     	;# 
  5936  0094                     	;# 
  5937  0097                     	;# 
  5938  009B                     	;# 
  5939  009B                     	;# 
  5940  009C                     	;# 
  5941  009D                     	;# 
  5942  009E                     	;# 
  5943  009F                     	;# 
  5944  010C                     	;# 
  5945  010D                     	;# 
  5946  010E                     	;# 
  5947  0111                     	;# 
  5948  0112                     	;# 
  5949  0113                     	;# 
  5950  0114                     	;# 
  5951  0115                     	;# 
  5952  0116                     	;# 
  5953  0117                     	;# 
  5954  0118                     	;# 
  5955  0119                     	;# 
  5956  018C                     	;# 
  5957  018D                     	;# 
  5958  018E                     	;# 
  5959  0199                     	;# 
  5960  0199                     	;# 
  5961  0199                     	;# 
  5962  019A                     	;# 
  5963  019A                     	;# 
  5964  019A                     	;# 
  5965  019B                     	;# 
  5966  019B                     	;# 
  5967  019B                     	;# 
  5968  019B                     	;# 
  5969  019B                     	;# 
  5970  019C                     	;# 
  5971  019C                     	;# 
  5972  019C                     	;# 
  5973  019D                     	;# 
  5974  019D                     	;# 
  5975  019D                     	;# 
  5976  019E                     	;# 
  5977  019E                     	;# 
  5978  019E                     	;# 
  5979  019F                     	;# 
  5980  019F                     	;# 
  5981  019F                     	;# 
  5982  019F                     	;# 
  5983  019F                     	;# 
  5984  020C                     	;# 
  5985  020D                     	;# 
  5986  020E                     	;# 
  5987  0211                     	;# 
  5988  0211                     	;# 
  5989  0212                     	;# 
  5990  0212                     	;# 
  5991  0213                     	;# 
  5992  0213                     	;# 
  5993  0214                     	;# 
  5994  0214                     	;# 
  5995  0215                     	;# 
  5996  0215                     	;# 
  5997  0215                     	;# 
  5998  0215                     	;# 
  5999  0216                     	;# 
  6000  0216                     	;# 
  6001  0217                     	;# 
  6002  0217                     	;# 
  6003  0219                     	;# 
  6004  021A                     	;# 
  6005  021B                     	;# 
  6006  021C                     	;# 
  6007  021D                     	;# 
  6008  021D                     	;# 
  6009  021E                     	;# 
  6010  021F                     	;# 
  6011  028C                     	;# 
  6012  028D                     	;# 
  6013  028E                     	;# 
  6014  0291                     	;# 
  6015  0291                     	;# 
  6016  0292                     	;# 
  6017  0293                     	;# 
  6018  0294                     	;# 
  6019  0295                     	;# 
  6020  0295                     	;# 
  6021  0296                     	;# 
  6022  0297                     	;# 
  6023  0298                     	;# 
  6024  029F                     	;# 
  6025  030C                     	;# 
  6026  030D                     	;# 
  6027  030E                     	;# 
  6028  0311                     	;# 
  6029  0311                     	;# 
  6030  0312                     	;# 
  6031  0313                     	;# 
  6032  0314                     	;# 
  6033  0315                     	;# 
  6034  0315                     	;# 
  6035  0316                     	;# 
  6036  0317                     	;# 
  6037  0318                     	;# 
  6038  038C                     	;# 
  6039  038D                     	;# 
  6040  038E                     	;# 
  6041  0391                     	;# 
  6042  0392                     	;# 
  6043  0393                     	;# 
  6044  0394                     	;# 
  6045  0395                     	;# 
  6046  0396                     	;# 
  6047  0397                     	;# 
  6048  0398                     	;# 
  6049  0399                     	;# 
  6050  039A                     	;# 
  6051  039C                     	;# 
  6052  039D                     	;# 
  6053  039E                     	;# 
  6054  039F                     	;# 
  6055  0411                     	;# 
  6056  0411                     	;# 
  6057  0412                     	;# 
  6058  0413                     	;# 
  6059  0414                     	;# 
  6060  0415                     	;# 
  6061  0416                     	;# 
  6062  0417                     	;# 
  6063  0418                     	;# 
  6064  0418                     	;# 
  6065  0419                     	;# 
  6066  041A                     	;# 
  6067  041B                     	;# 
  6068  041C                     	;# 
  6069  041D                     	;# 
  6070  041E                     	;# 
  6071  041F                     	;# 
  6072  0498                     	;# 
  6073  0498                     	;# 
  6074  0499                     	;# 
  6075  049A                     	;# 
  6076  049B                     	;# 
  6077  049B                     	;# 
  6078  049C                     	;# 
  6079  049D                     	;# 
  6080  049E                     	;# 
  6081  049F                     	;# 
  6082  0617                     	;# 
  6083  0618                     	;# 
  6084  0619                     	;# 
  6085  0619                     	;# 
  6086  061A                     	;# 
  6087  061B                     	;# 
  6088  061C                     	;# 
  6089  061C                     	;# 
  6090  061F                     	;# 
  6091  0691                     	;# 
  6092  0692                     	;# 
  6093  0693                     	;# 
  6094  0694                     	;# 
  6095  0695                     	;# 
  6096  0696                     	;# 
  6097  0697                     	;# 
  6098  0698                     	;# 
  6099  0699                     	;# 
  6100  0711                     	;# 
  6101  0712                     	;# 
  6102  0713                     	;# 
  6103  0714                     	;# 
  6104  0715                     	;# 
  6105  0716                     	;# 
  6106  0717                     	;# 
  6107  0718                     	;# 
  6108  0719                     	;# 
  6109  0891                     	;# 
  6110  0891                     	;# 
  6111  0891                     	;# 
  6112  0891                     	;# 
  6113  0891                     	;# 
  6114  0891                     	;# 
  6115  0892                     	;# 
  6116  0892                     	;# 
  6117  0892                     	;# 
  6118  0893                     	;# 
  6119  0893                     	;# 
  6120  0893                     	;# 
  6121  0893                     	;# 
  6122  0893                     	;# 
  6123  0893                     	;# 
  6124  0894                     	;# 
  6125  0894                     	;# 
  6126  0894                     	;# 
  6127  0895                     	;# 
  6128  0895                     	;# 
  6129  0895                     	;# 
  6130  0896                     	;# 
  6131  0896                     	;# 
  6132  0896                     	;# 
  6133  089B                     	;# 
  6134  0911                     	;# 
  6135  0912                     	;# 
  6136  0913                     	;# 
  6137  0914                     	;# 
  6138  0915                     	;# 
  6139  0916                     	;# 
  6140  0918                     	;# 
  6141  0919                     	;# 
  6142  091A                     	;# 
  6143  091B                     	;# 
  6144  091C                     	;# 
  6145  091D                     	;# 
  6146  091E                     	;# 
  6147  091F                     	;# 
  6148  0E0F                     	;# 
  6149  0E10                     	;# 
  6150  0E11                     	;# 
  6151  0E12                     	;# 
  6152  0E13                     	;# 
  6153  0E14                     	;# 
  6154  0E15                     	;# 
  6155  0E16                     	;# 
  6156  0E17                     	;# 
  6157  0E18                     	;# 
  6158  0E19                     	;# 
  6159  0E1A                     	;# 
  6160  0E1B                     	;# 
  6161  0E1C                     	;# 
  6162  0E1D                     	;# 
  6163  0E1E                     	;# 
  6164  0E1F                     	;# 
  6165  0E20                     	;# 
  6166  0E21                     	;# 
  6167  0E22                     	;# 
  6168  0E24                     	;# 
  6169  0E25                     	;# 
  6170  0E28                     	;# 
  6171  0E29                     	;# 
  6172  0E2A                     	;# 
  6173  0E2B                     	;# 
  6174  0E2C                     	;# 
  6175  0E2D                     	;# 
  6176  0E2E                     	;# 
  6177  0E2F                     	;# 
  6178  0E90                     	;# 
  6179  0E91                     	;# 
  6180  0E92                     	;# 
  6181  0E94                     	;# 
  6182  0E95                     	;# 
  6183  0E9C                     	;# 
  6184  0E9D                     	;# 
  6185  0E9E                     	;# 
  6186  0E9F                     	;# 
  6187  0EA0                     	;# 
  6188  0EA1                     	;# 
  6189  0EA2                     	;# 
  6190  0EA3                     	;# 
  6191  0EA4                     	;# 
  6192  0EA5                     	;# 
  6193  0EA6                     	;# 
  6194  0EA7                     	;# 
  6195  0F0F                     	;# 
  6196  0F10                     	;# 
  6197  0F11                     	;# 
  6198  0F12                     	;# 
  6199  0F13                     	;# 
  6200  0F14                     	;# 
  6201  0F15                     	;# 
  6202  0F16                     	;# 
  6203  0F17                     	;# 
  6204  0F18                     	;# 
  6205  0F19                     	;# 
  6206  0F1A                     	;# 
  6207  0F1B                     	;# 
  6208  0F1C                     	;# 
  6209  0F1D                     	;# 
  6210  0F1E                     	;# 
  6211  0F1F                     	;# 
  6212  0F20                     	;# 
  6213  0F21                     	;# 
  6214  0F22                     	;# 
  6215  0F23                     	;# 
  6216  0F24                     	;# 
  6217  0F25                     	;# 
  6218  0F26                     	;# 
  6219  0F27                     	;# 
  6220  0F28                     	;# 
  6221  0F29                     	;# 
  6222  0F2A                     	;# 
  6223  0F2B                     	;# 
  6224  0F2C                     	;# 
  6225  0F2D                     	;# 
  6226  0F2E                     	;# 
  6227  0F2F                     	;# 
  6228  0F30                     	;# 
  6229  0F31                     	;# 
  6230  0F32                     	;# 
  6231  0F33                     	;# 
  6232  0F34                     	;# 
  6233  0F35                     	;# 
  6234  0F36                     	;# 
  6235  0F37                     	;# 
  6236  0FE4                     	;# 
  6237  0FE5                     	;# 
  6238  0FE6                     	;# 
  6239  0FE7                     	;# 
  6240  0FE8                     	;# 
  6241  0FE9                     	;# 
  6242  0FEA                     	;# 
  6243  0FEB                     	;# 
  6244  0FED                     	;# 
  6245  0FEE                     	;# 
  6246  0FEF                     	;# 
  6247  0000                     	;# 
  6248  0001                     	;# 
  6249  0002                     	;# 
  6250  0003                     	;# 
  6251  0004                     	;# 
  6252  0005                     	;# 
  6253  0006                     	;# 
  6254  0007                     	;# 
  6255  0008                     	;# 
  6256  0009                     	;# 
  6257  000A                     	;# 
  6258  000B                     	;# 
  6259  000C                     	;# 
  6260  000D                     	;# 
  6261  000E                     	;# 
  6262  0010                     	;# 
  6263  0011                     	;# 
  6264  0012                     	;# 
  6265  0013                     	;# 
  6266  0014                     	;# 
  6267  0015                     	;# 
  6268  0015                     	;# 
  6269  0016                     	;# 
  6270  0016                     	;# 
  6271  0017                     	;# 
  6272  0018                     	;# 
  6273  0019                     	;# 
  6274  0019                     	;# 
  6275  001A                     	;# 
  6276  001B                     	;# 
  6277  001C                     	;# 
  6278  001D                     	;# 
  6279  001E                     	;# 
  6280  001F                     	;# 
  6281  008C                     	;# 
  6282  008D                     	;# 
  6283  008E                     	;# 
  6284  0090                     	;# 
  6285  0091                     	;# 
  6286  0092                     	;# 
  6287  0093                     	;# 
  6288  0094                     	;# 
  6289  0097                     	;# 
  6290  009B                     	;# 
  6291  009B                     	;# 
  6292  009C                     	;# 
  6293  009D                     	;# 
  6294  009E                     	;# 
  6295  009F                     	;# 
  6296  010C                     	;# 
  6297  010D                     	;# 
  6298  010E                     	;# 
  6299  0111                     	;# 
  6300  0112                     	;# 
  6301  0113                     	;# 
  6302  0114                     	;# 
  6303  0115                     	;# 
  6304  0116                     	;# 
  6305  0117                     	;# 
  6306  0118                     	;# 
  6307  0119                     	;# 
  6308  018C                     	;# 
  6309  018D                     	;# 
  6310  018E                     	;# 
  6311  0199                     	;# 
  6312  0199                     	;# 
  6313  0199                     	;# 
  6314  019A                     	;# 
  6315  019A                     	;# 
  6316  019A                     	;# 
  6317  019B                     	;# 
  6318  019B                     	;# 
  6319  019B                     	;# 
  6320  019B                     	;# 
  6321  019B                     	;# 
  6322  019C                     	;# 
  6323  019C                     	;# 
  6324  019C                     	;# 
  6325  019D                     	;# 
  6326  019D                     	;# 
  6327  019D                     	;# 
  6328  019E                     	;# 
  6329  019E                     	;# 
  6330  019E                     	;# 
  6331  019F                     	;# 
  6332  019F                     	;# 
  6333  019F                     	;# 
  6334  019F                     	;# 
  6335  019F                     	;# 
  6336  020C                     	;# 
  6337  020D                     	;# 
  6338  020E                     	;# 
  6339  0211                     	;# 
  6340  0211                     	;# 
  6341  0212                     	;# 
  6342  0212                     	;# 
  6343  0213                     	;# 
  6344  0213                     	;# 
  6345  0214                     	;# 
  6346  0214                     	;# 
  6347  0215                     	;# 
  6348  0215                     	;# 
  6349  0215                     	;# 
  6350  0215                     	;# 
  6351  0216                     	;# 
  6352  0216                     	;# 
  6353  0217                     	;# 
  6354  0217                     	;# 
  6355  0219                     	;# 
  6356  021A                     	;# 
  6357  021B                     	;# 
  6358  021C                     	;# 
  6359  021D                     	;# 
  6360  021D                     	;# 
  6361  021E                     	;# 
  6362  021F                     	;# 
  6363  028C                     	;# 
  6364  028D                     	;# 
  6365  028E                     	;# 
  6366  0291                     	;# 
  6367  0291                     	;# 
  6368  0292                     	;# 
  6369  0293                     	;# 
  6370  0294                     	;# 
  6371  0295                     	;# 
  6372  0295                     	;# 
  6373  0296                     	;# 
  6374  0297                     	;# 
  6375  0298                     	;# 
  6376  029F                     	;# 
  6377  030C                     	;# 
  6378  030D                     	;# 
  6379  030E                     	;# 
  6380  0311                     	;# 
  6381  0311                     	;# 
  6382  0312                     	;# 
  6383  0313                     	;# 
  6384  0314                     	;# 
  6385  0315                     	;# 
  6386  0315                     	;# 
  6387  0316                     	;# 
  6388  0317                     	;# 
  6389  0318                     	;# 
  6390  038C                     	;# 
  6391  038D                     	;# 
  6392  038E                     	;# 
  6393  0391                     	;# 
  6394  0392                     	;# 
  6395  0393                     	;# 
  6396  0394                     	;# 
  6397  0395                     	;# 
  6398  0396                     	;# 
  6399  0397                     	;# 
  6400  0398                     	;# 
  6401  0399                     	;# 
  6402  039A                     	;# 
  6403  039C                     	;# 
  6404  039D                     	;# 
  6405  039E                     	;# 
  6406  039F                     	;# 
  6407  0411                     	;# 
  6408  0411                     	;# 
  6409  0412                     	;# 
  6410  0413                     	;# 
  6411  0414                     	;# 
  6412  0415                     	;# 
  6413  0416                     	;# 
  6414  0417                     	;# 
  6415  0418                     	;# 
  6416  0418                     	;# 
  6417  0419                     	;# 
  6418  041A                     	;# 
  6419  041B                     	;# 
  6420  041C                     	;# 
  6421  041D                     	;# 
  6422  041E                     	;# 
  6423  041F                     	;# 
  6424  0498                     	;# 
  6425  0498                     	;# 
  6426  0499                     	;# 
  6427  049A                     	;# 
  6428  049B                     	;# 
  6429  049B                     	;# 
  6430  049C                     	;# 
  6431  049D                     	;# 
  6432  049E                     	;# 
  6433  049F                     	;# 
  6434  0617                     	;# 
  6435  0618                     	;# 
  6436  0619                     	;# 
  6437  0619                     	;# 
  6438  061A                     	;# 
  6439  061B                     	;# 
  6440  061C                     	;# 
  6441  061C                     	;# 
  6442  061F                     	;# 
  6443  0691                     	;# 
  6444  0692                     	;# 
  6445  0693                     	;# 
  6446  0694                     	;# 
  6447  0695                     	;# 
  6448  0696                     	;# 
  6449  0697                     	;# 
  6450  0698                     	;# 
  6451  0699                     	;# 
  6452  0711                     	;# 
  6453  0712                     	;# 
  6454  0713                     	;# 
  6455  0714                     	;# 
  6456  0715                     	;# 
  6457  0716                     	;# 
  6458  0717                     	;# 
  6459  0718                     	;# 
  6460  0719                     	;# 
  6461  0891                     	;# 
  6462  0891                     	;# 
  6463  0891                     	;# 
  6464  0891                     	;# 
  6465  0891                     	;# 
  6466  0891                     	;# 
  6467  0892                     	;# 
  6468  0892                     	;# 
  6469  0892                     	;# 
  6470  0893                     	;# 
  6471  0893                     	;# 
  6472  0893                     	;# 
  6473  0893                     	;# 
  6474  0893                     	;# 
  6475  0893                     	;# 
  6476  0894                     	;# 
  6477  0894                     	;# 
  6478  0894                     	;# 
  6479  0895                     	;# 
  6480  0895                     	;# 
  6481  0895                     	;# 
  6482  0896                     	;# 
  6483  0896                     	;# 
  6484  0896                     	;# 
  6485  089B                     	;# 
  6486  0911                     	;# 
  6487  0912                     	;# 
  6488  0913                     	;# 
  6489  0914                     	;# 
  6490  0915                     	;# 
  6491  0916                     	;# 
  6492  0918                     	;# 
  6493  0919                     	;# 
  6494  091A                     	;# 
  6495  091B                     	;# 
  6496  091C                     	;# 
  6497  091D                     	;# 
  6498  091E                     	;# 
  6499  091F                     	;# 
  6500  0E0F                     	;# 
  6501  0E10                     	;# 
  6502  0E11                     	;# 
  6503  0E12                     	;# 
  6504  0E13                     	;# 
  6505  0E14                     	;# 
  6506  0E15                     	;# 
  6507  0E16                     	;# 
  6508  0E17                     	;# 
  6509  0E18                     	;# 
  6510  0E19                     	;# 
  6511  0E1A                     	;# 
  6512  0E1B                     	;# 
  6513  0E1C                     	;# 
  6514  0E1D                     	;# 
  6515  0E1E                     	;# 
  6516  0E1F                     	;# 
  6517  0E20                     	;# 
  6518  0E21                     	;# 
  6519  0E22                     	;# 
  6520  0E24                     	;# 
  6521  0E25                     	;# 
  6522  0E28                     	;# 
  6523  0E29                     	;# 
  6524  0E2A                     	;# 
  6525  0E2B                     	;# 
  6526  0E2C                     	;# 
  6527  0E2D                     	;# 
  6528  0E2E                     	;# 
  6529  0E2F                     	;# 
  6530  0E90                     	;# 
  6531  0E91                     	;# 
  6532  0E92                     	;# 
  6533  0E94                     	;# 
  6534  0E95                     	;# 
  6535  0E9C                     	;# 
  6536  0E9D                     	;# 
  6537  0E9E                     	;# 
  6538  0E9F                     	;# 
  6539  0EA0                     	;# 
  6540  0EA1                     	;# 
  6541  0EA2                     	;# 
  6542  0EA3                     	;# 
  6543  0EA4                     	;# 
  6544  0EA5                     	;# 
  6545  0EA6                     	;# 
  6546  0EA7                     	;# 
  6547  0F0F                     	;# 
  6548  0F10                     	;# 
  6549  0F11                     	;# 
  6550  0F12                     	;# 
  6551  0F13                     	;# 
  6552  0F14                     	;# 
  6553  0F15                     	;# 
  6554  0F16                     	;# 
  6555  0F17                     	;# 
  6556  0F18                     	;# 
  6557  0F19                     	;# 
  6558  0F1A                     	;# 
  6559  0F1B                     	;# 
  6560  0F1C                     	;# 
  6561  0F1D                     	;# 
  6562  0F1E                     	;# 
  6563  0F1F                     	;# 
  6564  0F20                     	;# 
  6565  0F21                     	;# 
  6566  0F22                     	;# 
  6567  0F23                     	;# 
  6568  0F24                     	;# 
  6569  0F25                     	;# 
  6570  0F26                     	;# 
  6571  0F27                     	;# 
  6572  0F28                     	;# 
  6573  0F29                     	;# 
  6574  0F2A                     	;# 
  6575  0F2B                     	;# 
  6576  0F2C                     	;# 
  6577  0F2D                     	;# 
  6578  0F2E                     	;# 
  6579  0F2F                     	;# 
  6580  0F30                     	;# 
  6581  0F31                     	;# 
  6582  0F32                     	;# 
  6583  0F33                     	;# 
  6584  0F34                     	;# 
  6585  0F35                     	;# 
  6586  0F36                     	;# 
  6587  0F37                     	;# 
  6588  0FE4                     	;# 
  6589  0FE5                     	;# 
  6590  0FE6                     	;# 
  6591  0FE7                     	;# 
  6592  0FE8                     	;# 
  6593  0FE9                     	;# 
  6594  0FEA                     	;# 
  6595  0FEB                     	;# 
  6596  0FED                     	;# 
  6597  0FEE                     	;# 
  6598  0FEF                     	;# 
  6599  0000                     	;# 
  6600  0001                     	;# 
  6601  0002                     	;# 
  6602  0003                     	;# 
  6603  0004                     	;# 
  6604  0005                     	;# 
  6605  0006                     	;# 
  6606  0007                     	;# 
  6607  0008                     	;# 
  6608  0009                     	;# 
  6609  000A                     	;# 
  6610  000B                     	;# 
  6611  000C                     	;# 
  6612  000D                     	;# 
  6613  000E                     	;# 
  6614  0010                     	;# 
  6615  0011                     	;# 
  6616  0012                     	;# 
  6617  0013                     	;# 
  6618  0014                     	;# 
  6619  0015                     	;# 
  6620  0015                     	;# 
  6621  0016                     	;# 
  6622  0016                     	;# 
  6623  0017                     	;# 
  6624  0018                     	;# 
  6625  0019                     	;# 
  6626  0019                     	;# 
  6627  001A                     	;# 
  6628  001B                     	;# 
  6629  001C                     	;# 
  6630  001D                     	;# 
  6631  001E                     	;# 
  6632  001F                     	;# 
  6633  008C                     	;# 
  6634  008D                     	;# 
  6635  008E                     	;# 
  6636  0090                     	;# 
  6637  0091                     	;# 
  6638  0092                     	;# 
  6639  0093                     	;# 
  6640  0094                     	;# 
  6641  0097                     	;# 
  6642  009B                     	;# 
  6643  009B                     	;# 
  6644  009C                     	;# 
  6645  009D                     	;# 
  6646  009E                     	;# 
  6647  009F                     	;# 
  6648  010C                     	;# 
  6649  010D                     	;# 
  6650  010E                     	;# 
  6651  0111                     	;# 
  6652  0112                     	;# 
  6653  0113                     	;# 
  6654  0114                     	;# 
  6655  0115                     	;# 
  6656  0116                     	;# 
  6657  0117                     	;# 
  6658  0118                     	;# 
  6659  0119                     	;# 
  6660  018C                     	;# 
  6661  018D                     	;# 
  6662  018E                     	;# 
  6663  0199                     	;# 
  6664  0199                     	;# 
  6665  0199                     	;# 
  6666  019A                     	;# 
  6667  019A                     	;# 
  6668  019A                     	;# 
  6669  019B                     	;# 
  6670  019B                     	;# 
  6671  019B                     	;# 
  6672  019B                     	;# 
  6673  019B                     	;# 
  6674  019C                     	;# 
  6675  019C                     	;# 
  6676  019C                     	;# 
  6677  019D                     	;# 
  6678  019D                     	;# 
  6679  019D                     	;# 
  6680  019E                     	;# 
  6681  019E                     	;# 
  6682  019E                     	;# 
  6683  019F                     	;# 
  6684  019F                     	;# 
  6685  019F                     	;# 
  6686  019F                     	;# 
  6687  019F                     	;# 
  6688  020C                     	;# 
  6689  020D                     	;# 
  6690  020E                     	;# 
  6691  0211                     	;# 
  6692  0211                     	;# 
  6693  0212                     	;# 
  6694  0212                     	;# 
  6695  0213                     	;# 
  6696  0213                     	;# 
  6697  0214                     	;# 
  6698  0214                     	;# 
  6699  0215                     	;# 
  6700  0215                     	;# 
  6701  0215                     	;# 
  6702  0215                     	;# 
  6703  0216                     	;# 
  6704  0216                     	;# 
  6705  0217                     	;# 
  6706  0217                     	;# 
  6707  0219                     	;# 
  6708  021A                     	;# 
  6709  021B                     	;# 
  6710  021C                     	;# 
  6711  021D                     	;# 
  6712  021D                     	;# 
  6713  021E                     	;# 
  6714  021F                     	;# 
  6715  028C                     	;# 
  6716  028D                     	;# 
  6717  028E                     	;# 
  6718  0291                     	;# 
  6719  0291                     	;# 
  6720  0292                     	;# 
  6721  0293                     	;# 
  6722  0294                     	;# 
  6723  0295                     	;# 
  6724  0295                     	;# 
  6725  0296                     	;# 
  6726  0297                     	;# 
  6727  0298                     	;# 
  6728  029F                     	;# 
  6729  030C                     	;# 
  6730  030D                     	;# 
  6731  030E                     	;# 
  6732  0311                     	;# 
  6733  0311                     	;# 
  6734  0312                     	;# 
  6735  0313                     	;# 
  6736  0314                     	;# 
  6737  0315                     	;# 
  6738  0315                     	;# 
  6739  0316                     	;# 
  6740  0317                     	;# 
  6741  0318                     	;# 
  6742  038C                     	;# 
  6743  038D                     	;# 
  6744  038E                     	;# 
  6745  0391                     	;# 
  6746  0392                     	;# 
  6747  0393                     	;# 
  6748  0394                     	;# 
  6749  0395                     	;# 
  6750  0396                     	;# 
  6751  0397                     	;# 
  6752  0398                     	;# 
  6753  0399                     	;# 
  6754  039A                     	;# 
  6755  039C                     	;# 
  6756  039D                     	;# 
  6757  039E                     	;# 
  6758  039F                     	;# 
  6759  0411                     	;# 
  6760  0411                     	;# 
  6761  0412                     	;# 
  6762  0413                     	;# 
  6763  0414                     	;# 
  6764  0415                     	;# 
  6765  0416                     	;# 
  6766  0417                     	;# 
  6767  0418                     	;# 
  6768  0418                     	;# 
  6769  0419                     	;# 
  6770  041A                     	;# 
  6771  041B                     	;# 
  6772  041C                     	;# 
  6773  041D                     	;# 
  6774  041E                     	;# 
  6775  041F                     	;# 
  6776  0498                     	;# 
  6777  0498                     	;# 
  6778  0499                     	;# 
  6779  049A                     	;# 
  6780  049B                     	;# 
  6781  049B                     	;# 
  6782  049C                     	;# 
  6783  049D                     	;# 
  6784  049E                     	;# 
  6785  049F                     	;# 
  6786  0617                     	;# 
  6787  0618                     	;# 
  6788  0619                     	;# 
  6789  0619                     	;# 
  6790  061A                     	;# 
  6791  061B                     	;# 
  6792  061C                     	;# 
  6793  061C                     	;# 
  6794  061F                     	;# 
  6795  0691                     	;# 
  6796  0692                     	;# 
  6797  0693                     	;# 
  6798  0694                     	;# 
  6799  0695                     	;# 
  6800  0696                     	;# 
  6801  0697                     	;# 
  6802  0698                     	;# 
  6803  0699                     	;# 
  6804  0711                     	;# 
  6805  0712                     	;# 
  6806  0713                     	;# 
  6807  0714                     	;# 
  6808  0715                     	;# 
  6809  0716                     	;# 
  6810  0717                     	;# 
  6811  0718                     	;# 
  6812  0719                     	;# 
  6813  0891                     	;# 
  6814  0891                     	;# 
  6815  0891                     	;# 
  6816  0891                     	;# 
  6817  0891                     	;# 
  6818  0891                     	;# 
  6819  0892                     	;# 
  6820  0892                     	;# 
  6821  0892                     	;# 
  6822  0893                     	;# 
  6823  0893                     	;# 
  6824  0893                     	;# 
  6825  0893                     	;# 
  6826  0893                     	;# 
  6827  0893                     	;# 
  6828  0894                     	;# 
  6829  0894                     	;# 
  6830  0894                     	;# 
  6831  0895                     	;# 
  6832  0895                     	;# 
  6833  0895                     	;# 
  6834  0896                     	;# 
  6835  0896                     	;# 
  6836  0896                     	;# 
  6837  089B                     	;# 
  6838  0911                     	;# 
  6839  0912                     	;# 
  6840  0913                     	;# 
  6841  0914                     	;# 
  6842  0915                     	;# 
  6843  0916                     	;# 
  6844  0918                     	;# 
  6845  0919                     	;# 
  6846  091A                     	;# 
  6847  091B                     	;# 
  6848  091C                     	;# 
  6849  091D                     	;# 
  6850  091E                     	;# 
  6851  091F                     	;# 
  6852  0E0F                     	;# 
  6853  0E10                     	;# 
  6854  0E11                     	;# 
  6855  0E12                     	;# 
  6856  0E13                     	;# 
  6857  0E14                     	;# 
  6858  0E15                     	;# 
  6859  0E16                     	;# 
  6860  0E17                     	;# 
  6861  0E18                     	;# 
  6862  0E19                     	;# 
  6863  0E1A                     	;# 
  6864  0E1B                     	;# 
  6865  0E1C                     	;# 
  6866  0E1D                     	;# 
  6867  0E1E                     	;# 
  6868  0E1F                     	;# 
  6869  0E20                     	;# 
  6870  0E21                     	;# 
  6871  0E22                     	;# 
  6872  0E24                     	;# 
  6873  0E25                     	;# 
  6874  0E28                     	;# 
  6875  0E29                     	;# 
  6876  0E2A                     	;# 
  6877  0E2B                     	;# 
  6878  0E2C                     	;# 
  6879  0E2D                     	;# 
  6880  0E2E                     	;# 
  6881  0E2F                     	;# 
  6882  0E90                     	;# 
  6883  0E91                     	;# 
  6884  0E92                     	;# 
  6885  0E94                     	;# 
  6886  0E95                     	;# 
  6887  0E9C                     	;# 
  6888  0E9D                     	;# 
  6889  0E9E                     	;# 
  6890  0E9F                     	;# 
  6891  0EA0                     	;# 
  6892  0EA1                     	;# 
  6893  0EA2                     	;# 
  6894  0EA3                     	;# 
  6895  0EA4                     	;# 
  6896  0EA5                     	;# 
  6897  0EA6                     	;# 
  6898  0EA7                     	;# 
  6899  0F0F                     	;# 
  6900  0F10                     	;# 
  6901  0F11                     	;# 
  6902  0F12                     	;# 
  6903  0F13                     	;# 
  6904  0F14                     	;# 
  6905  0F15                     	;# 
  6906  0F16                     	;# 
  6907  0F17                     	;# 
  6908  0F18                     	;# 
  6909  0F19                     	;# 
  6910  0F1A                     	;# 
  6911  0F1B                     	;# 
  6912  0F1C                     	;# 
  6913  0F1D                     	;# 
  6914  0F1E                     	;# 
  6915  0F1F                     	;# 
  6916  0F20                     	;# 
  6917  0F21                     	;# 
  6918  0F22                     	;# 
  6919  0F23                     	;# 
  6920  0F24                     	;# 
  6921  0F25                     	;# 
  6922  0F26                     	;# 
  6923  0F27                     	;# 
  6924  0F28                     	;# 
  6925  0F29                     	;# 
  6926  0F2A                     	;# 
  6927  0F2B                     	;# 
  6928  0F2C                     	;# 
  6929  0F2D                     	;# 
  6930  0F2E                     	;# 
  6931  0F2F                     	;# 
  6932  0F30                     	;# 
  6933  0F31                     	;# 
  6934  0F32                     	;# 
  6935  0F33                     	;# 
  6936  0F34                     	;# 
  6937  0F35                     	;# 
  6938  0F36                     	;# 
  6939  0F37                     	;# 
  6940  0FE4                     	;# 
  6941  0FE5                     	;# 
  6942  0FE6                     	;# 
  6943  0FE7                     	;# 
  6944  0FE8                     	;# 
  6945  0FE9                     	;# 
  6946  0FEA                     	;# 
  6947  0FEB                     	;# 
  6948  0FED                     	;# 
  6949  0FEE                     	;# 
  6950  0FEF                     	;# 
  6951  0000                     	;# 
  6952  0001                     	;# 
  6953  0002                     	;# 
  6954  0003                     	;# 
  6955  0004                     	;# 
  6956  0005                     	;# 
  6957  0006                     	;# 
  6958  0007                     	;# 
  6959  0008                     	;# 
  6960  0009                     	;# 
  6961  000A                     	;# 
  6962  000B                     	;# 
  6963  000C                     	;# 
  6964  000D                     	;# 
  6965  000E                     	;# 
  6966  0010                     	;# 
  6967  0011                     	;# 
  6968  0012                     	;# 
  6969  0013                     	;# 
  6970  0014                     	;# 
  6971  0015                     	;# 
  6972  0015                     	;# 
  6973  0016                     	;# 
  6974  0016                     	;# 
  6975  0017                     	;# 
  6976  0018                     	;# 
  6977  0019                     	;# 
  6978  0019                     	;# 
  6979  001A                     	;# 
  6980  001B                     	;# 
  6981  001C                     	;# 
  6982  001D                     	;# 
  6983  001E                     	;# 
  6984  001F                     	;# 
  6985  008C                     	;# 
  6986  008D                     	;# 
  6987  008E                     	;# 
  6988  0090                     	;# 
  6989  0091                     	;# 
  6990  0092                     	;# 
  6991  0093                     	;# 
  6992  0094                     	;# 
  6993  0097                     	;# 
  6994  009B                     	;# 
  6995  009B                     	;# 
  6996  009C                     	;# 
  6997  009D                     	;# 
  6998  009E                     	;# 
  6999  009F                     	;# 
  7000  010C                     	;# 
  7001  010D                     	;# 
  7002  010E                     	;# 
  7003  0111                     	;# 
  7004  0112                     	;# 
  7005  0113                     	;# 
  7006  0114                     	;# 
  7007  0115                     	;# 
  7008  0116                     	;# 
  7009  0117                     	;# 
  7010  0118                     	;# 
  7011  0119                     	;# 
  7012  018C                     	;# 
  7013  018D                     	;# 
  7014  018E                     	;# 
  7015  0199                     	;# 
  7016  0199                     	;# 
  7017  0199                     	;# 
  7018  019A                     	;# 
  7019  019A                     	;# 
  7020  019A                     	;# 
  7021  019B                     	;# 
  7022  019B                     	;# 
  7023  019B                     	;# 
  7024  019B                     	;# 
  7025  019B                     	;# 
  7026  019C                     	;# 
  7027  019C                     	;# 
  7028  019C                     	;# 
  7029  019D                     	;# 
  7030  019D                     	;# 
  7031  019D                     	;# 
  7032  019E                     	;# 
  7033  019E                     	;# 
  7034  019E                     	;# 
  7035  019F                     	;# 
  7036  019F                     	;# 
  7037  019F                     	;# 
  7038  019F                     	;# 
  7039  019F                     	;# 
  7040  020C                     	;# 
  7041  020D                     	;# 
  7042  020E                     	;# 
  7043  0211                     	;# 
  7044  0211                     	;# 
  7045  0212                     	;# 
  7046  0212                     	;# 
  7047  0213                     	;# 
  7048  0213                     	;# 
  7049  0214                     	;# 
  7050  0214                     	;# 
  7051  0215                     	;# 
  7052  0215                     	;# 
  7053  0215                     	;# 
  7054  0215                     	;# 
  7055  0216                     	;# 
  7056  0216                     	;# 
  7057  0217                     	;# 
  7058  0217                     	;# 
  7059  0219                     	;# 
  7060  021A                     	;# 
  7061  021B                     	;# 
  7062  021C                     	;# 
  7063  021D                     	;# 
  7064  021D                     	;# 
  7065  021E                     	;# 
  7066  021F                     	;# 
  7067  028C                     	;# 
  7068  028D                     	;# 
  7069  028E                     	;# 
  7070  0291                     	;# 
  7071  0291                     	;# 
  7072  0292                     	;# 
  7073  0293                     	;# 
  7074  0294                     	;# 
  7075  0295                     	;# 
  7076  0295                     	;# 
  7077  0296                     	;# 
  7078  0297                     	;# 
  7079  0298                     	;# 
  7080  029F                     	;# 
  7081  030C                     	;# 
  7082  030D                     	;# 
  7083  030E                     	;# 
  7084  0311                     	;# 
  7085  0311                     	;# 
  7086  0312                     	;# 
  7087  0313                     	;# 
  7088  0314                     	;# 
  7089  0315                     	;# 
  7090  0315                     	;# 
  7091  0316                     	;# 
  7092  0317                     	;# 
  7093  0318                     	;# 
  7094  038C                     	;# 
  7095  038D                     	;# 
  7096  038E                     	;# 
  7097  0391                     	;# 
  7098  0392                     	;# 
  7099  0393                     	;# 
  7100  0394                     	;# 
  7101  0395                     	;# 
  7102  0396                     	;# 
  7103  0397                     	;# 
  7104  0398                     	;# 
  7105  0399                     	;# 
  7106  039A                     	;# 
  7107  039C                     	;# 
  7108  039D                     	;# 
  7109  039E                     	;# 
  7110  039F                     	;# 
  7111  0411                     	;# 
  7112  0411                     	;# 
  7113  0412                     	;# 
  7114  0413                     	;# 
  7115  0414                     	;# 
  7116  0415                     	;# 
  7117  0416                     	;# 
  7118  0417                     	;# 
  7119  0418                     	;# 
  7120  0418                     	;# 
  7121  0419                     	;# 
  7122  041A                     	;# 
  7123  041B                     	;# 
  7124  041C                     	;# 
  7125  041D                     	;# 
  7126  041E                     	;# 
  7127  041F                     	;# 
  7128  0498                     	;# 
  7129  0498                     	;# 
  7130  0499                     	;# 
  7131  049A                     	;# 
  7132  049B                     	;# 
  7133  049B                     	;# 
  7134  049C                     	;# 
  7135  049D                     	;# 
  7136  049E                     	;# 
  7137  049F                     	;# 
  7138  0617                     	;# 
  7139  0618                     	;# 
  7140  0619                     	;# 
  7141  0619                     	;# 
  7142  061A                     	;# 
  7143  061B                     	;# 
  7144  061C                     	;# 
  7145  061C                     	;# 
  7146  061F                     	;# 
  7147  0691                     	;# 
  7148  0692                     	;# 
  7149  0693                     	;# 
  7150  0694                     	;# 
  7151  0695                     	;# 
  7152  0696                     	;# 
  7153  0697                     	;# 
  7154  0698                     	;# 
  7155  0699                     	;# 
  7156  0711                     	;# 
  7157  0712                     	;# 
  7158  0713                     	;# 
  7159  0714                     	;# 
  7160  0715                     	;# 
  7161  0716                     	;# 
  7162  0717                     	;# 
  7163  0718                     	;# 
  7164  0719                     	;# 
  7165  0891                     	;# 
  7166  0891                     	;# 
  7167  0891                     	;# 
  7168  0891                     	;# 
  7169  0891                     	;# 
  7170  0891                     	;# 
  7171  0892                     	;# 
  7172  0892                     	;# 
  7173  0892                     	;# 
  7174  0893                     	;# 
  7175  0893                     	;# 
  7176  0893                     	;# 
  7177  0893                     	;# 
  7178  0893                     	;# 
  7179  0893                     	;# 
  7180  0894                     	;# 
  7181  0894                     	;# 
  7182  0894                     	;# 
  7183  0895                     	;# 
  7184  0895                     	;# 
  7185  0895                     	;# 
  7186  0896                     	;# 
  7187  0896                     	;# 
  7188  0896                     	;# 
  7189  089B                     	;# 
  7190  0911                     	;# 
  7191  0912                     	;# 
  7192  0913                     	;# 
  7193  0914                     	;# 
  7194  0915                     	;# 
  7195  0916                     	;# 
  7196  0918                     	;# 
  7197  0919                     	;# 
  7198  091A                     	;# 
  7199  091B                     	;# 
  7200  091C                     	;# 
  7201  091D                     	;# 
  7202  091E                     	;# 
  7203  091F                     	;# 
  7204  0E0F                     	;# 
  7205  0E10                     	;# 
  7206  0E11                     	;# 
  7207  0E12                     	;# 
  7208  0E13                     	;# 
  7209  0E14                     	;# 
  7210  0E15                     	;# 
  7211  0E16                     	;# 
  7212  0E17                     	;# 
  7213  0E18                     	;# 
  7214  0E19                     	;# 
  7215  0E1A                     	;# 
  7216  0E1B                     	;# 
  7217  0E1C                     	;# 
  7218  0E1D                     	;# 
  7219  0E1E                     	;# 
  7220  0E1F                     	;# 
  7221  0E20                     	;# 
  7222  0E21                     	;# 
  7223  0E22                     	;# 
  7224  0E24                     	;# 
  7225  0E25                     	;# 
  7226  0E28                     	;# 
  7227  0E29                     	;# 
  7228  0E2A                     	;# 
  7229  0E2B                     	;# 
  7230  0E2C                     	;# 
  7231  0E2D                     	;# 
  7232  0E2E                     	;# 
  7233  0E2F                     	;# 
  7234  0E90                     	;# 
  7235  0E91                     	;# 
  7236  0E92                     	;# 
  7237  0E94                     	;# 
  7238  0E95                     	;# 
  7239  0E9C                     	;# 
  7240  0E9D                     	;# 
  7241  0E9E                     	;# 
  7242  0E9F                     	;# 
  7243  0EA0                     	;# 
  7244  0EA1                     	;# 
  7245  0EA2                     	;# 
  7246  0EA3                     	;# 
  7247  0EA4                     	;# 
  7248  0EA5                     	;# 
  7249  0EA6                     	;# 
  7250  0EA7                     	;# 
  7251  0F0F                     	;# 
  7252  0F10                     	;# 
  7253  0F11                     	;# 
  7254  0F12                     	;# 
  7255  0F13                     	;# 
  7256  0F14                     	;# 
  7257  0F15                     	;# 
  7258  0F16                     	;# 
  7259  0F17                     	;# 
  7260  0F18                     	;# 
  7261  0F19                     	;# 
  7262  0F1A                     	;# 
  7263  0F1B                     	;# 
  7264  0F1C                     	;# 
  7265  0F1D                     	;# 
  7266  0F1E                     	;# 
  7267  0F1F                     	;# 
  7268  0F20                     	;# 
  7269  0F21                     	;# 
  7270  0F22                     	;# 
  7271  0F23                     	;# 
  7272  0F24                     	;# 
  7273  0F25                     	;# 
  7274  0F26                     	;# 
  7275  0F27                     	;# 
  7276  0F28                     	;# 
  7277  0F29                     	;# 
  7278  0F2A                     	;# 
  7279  0F2B                     	;# 
  7280  0F2C                     	;# 
  7281  0F2D                     	;# 
  7282  0F2E                     	;# 
  7283  0F2F                     	;# 
  7284  0F30                     	;# 
  7285  0F31                     	;# 
  7286  0F32                     	;# 
  7287  0F33                     	;# 
  7288  0F34                     	;# 
  7289  0F35                     	;# 
  7290  0F36                     	;# 
  7291  0F37                     	;# 
  7292  0FE4                     	;# 
  7293  0FE5                     	;# 
  7294  0FE6                     	;# 
  7295  0FE7                     	;# 
  7296  0FE8                     	;# 
  7297  0FE9                     	;# 
  7298  0FEA                     	;# 
  7299  0FEB                     	;# 
  7300  0FED                     	;# 
  7301  0FEE                     	;# 
  7302  0FEF                     	;# 
  7303  0000                     	;# 
  7304  0001                     	;# 
  7305  0002                     	;# 
  7306  0003                     	;# 
  7307  0004                     	;# 
  7308  0005                     	;# 
  7309  0006                     	;# 
  7310  0007                     	;# 
  7311  0008                     	;# 
  7312  0009                     	;# 
  7313  000A                     	;# 
  7314  000B                     	;# 
  7315  000C                     	;# 
  7316  000D                     	;# 
  7317  000E                     	;# 
  7318  0010                     	;# 
  7319  0011                     	;# 
  7320  0012                     	;# 
  7321  0013                     	;# 
  7322  0014                     	;# 
  7323  0015                     	;# 
  7324  0015                     	;# 
  7325  0016                     	;# 
  7326  0016                     	;# 
  7327  0017                     	;# 
  7328  0018                     	;# 
  7329  0019                     	;# 
  7330  0019                     	;# 
  7331  001A                     	;# 
  7332  001B                     	;# 
  7333  001C                     	;# 
  7334  001D                     	;# 
  7335  001E                     	;# 
  7336  001F                     	;# 
  7337  008C                     	;# 
  7338  008D                     	;# 
  7339  008E                     	;# 
  7340  0090                     	;# 
  7341  0091                     	;# 
  7342  0092                     	;# 
  7343  0093                     	;# 
  7344  0094                     	;# 
  7345  0097                     	;# 
  7346  009B                     	;# 
  7347  009B                     	;# 
  7348  009C                     	;# 
  7349  009D                     	;# 
  7350  009E                     	;# 
  7351  009F                     	;# 
  7352  010C                     	;# 
  7353  010D                     	;# 
  7354  010E                     	;# 
  7355  0111                     	;# 
  7356  0112                     	;# 
  7357  0113                     	;# 
  7358  0114                     	;# 
  7359  0115                     	;# 
  7360  0116                     	;# 
  7361  0117                     	;# 
  7362  0118                     	;# 
  7363  0119                     	;# 
  7364  018C                     	;# 
  7365  018D                     	;# 
  7366  018E                     	;# 
  7367  0199                     	;# 
  7368  0199                     	;# 
  7369  0199                     	;# 
  7370  019A                     	;# 
  7371  019A                     	;# 
  7372  019A                     	;# 
  7373  019B                     	;# 
  7374  019B                     	;# 
  7375  019B                     	;# 
  7376  019B                     	;# 
  7377  019B                     	;# 
  7378  019C                     	;# 
  7379  019C                     	;# 
  7380  019C                     	;# 
  7381  019D                     	;# 
  7382  019D                     	;# 
  7383  019D                     	;# 
  7384  019E                     	;# 
  7385  019E                     	;# 
  7386  019E                     	;# 
  7387  019F                     	;# 
  7388  019F                     	;# 
  7389  019F                     	;# 
  7390  019F                     	;# 
  7391  019F                     	;# 
  7392  020C                     	;# 
  7393  020D                     	;# 
  7394  020E                     	;# 
  7395  0211                     	;# 
  7396  0211                     	;# 
  7397  0212                     	;# 
  7398  0212                     	;# 
  7399  0213                     	;# 
  7400  0213                     	;# 
  7401  0214                     	;# 
  7402  0214                     	;# 
  7403  0215                     	;# 
  7404  0215                     	;# 
  7405  0215                     	;# 
  7406  0215                     	;# 
  7407  0216                     	;# 
  7408  0216                     	;# 
  7409  0217                     	;# 
  7410  0217                     	;# 
  7411  0219                     	;# 
  7412  021A                     	;# 
  7413  021B                     	;# 
  7414  021C                     	;# 
  7415  021D                     	;# 
  7416  021D                     	;# 
  7417  021E                     	;# 
  7418  021F                     	;# 
  7419  028C                     	;# 
  7420  028D                     	;# 
  7421  028E                     	;# 
  7422  0291                     	;# 
  7423  0291                     	;# 
  7424  0292                     	;# 
  7425  0293                     	;# 
  7426  0294                     	;# 
  7427  0295                     	;# 
  7428  0295                     	;# 
  7429  0296                     	;# 
  7430  0297                     	;# 
  7431  0298                     	;# 
  7432  029F                     	;# 
  7433  030C                     	;# 
  7434  030D                     	;# 
  7435  030E                     	;# 
  7436  0311                     	;# 
  7437  0311                     	;# 
  7438  0312                     	;# 
  7439  0313                     	;# 
  7440  0314                     	;# 
  7441  0315                     	;# 
  7442  0315                     	;# 
  7443  0316                     	;# 
  7444  0317                     	;# 
  7445  0318                     	;# 
  7446  038C                     	;# 
  7447  038D                     	;# 
  7448  038E                     	;# 
  7449  0391                     	;# 
  7450  0392                     	;# 
  7451  0393                     	;# 
  7452  0394                     	;# 
  7453  0395                     	;# 
  7454  0396                     	;# 
  7455  0397                     	;# 
  7456  0398                     	;# 
  7457  0399                     	;# 
  7458  039A                     	;# 
  7459  039C                     	;# 
  7460  039D                     	;# 
  7461  039E                     	;# 
  7462  039F                     	;# 
  7463  0411                     	;# 
  7464  0411                     	;# 
  7465  0412                     	;# 
  7466  0413                     	;# 
  7467  0414                     	;# 
  7468  0415                     	;# 
  7469  0416                     	;# 
  7470  0417                     	;# 
  7471  0418                     	;# 
  7472  0418                     	;# 
  7473  0419                     	;# 
  7474  041A                     	;# 
  7475  041B                     	;# 
  7476  041C                     	;# 
  7477  041D                     	;# 
  7478  041E                     	;# 
  7479  041F                     	;# 
  7480  0498                     	;# 
  7481  0498                     	;# 
  7482  0499                     	;# 
  7483  049A                     	;# 
  7484  049B                     	;# 
  7485  049B                     	;# 
  7486  049C                     	;# 
  7487  049D                     	;# 
  7488  049E                     	;# 
  7489  049F                     	;# 
  7490  0617                     	;# 
  7491  0618                     	;# 
  7492  0619                     	;# 
  7493  0619                     	;# 
  7494  061A                     	;# 
  7495  061B                     	;# 
  7496  061C                     	;# 
  7497  061C                     	;# 
  7498  061F                     	;# 
  7499  0691                     	;# 
  7500  0692                     	;# 
  7501  0693                     	;# 
  7502  0694                     	;# 
  7503  0695                     	;# 
  7504  0696                     	;# 
  7505  0697                     	;# 
  7506  0698                     	;# 
  7507  0699                     	;# 
  7508  0711                     	;# 
  7509  0712                     	;# 
  7510  0713                     	;# 
  7511  0714                     	;# 
  7512  0715                     	;# 
  7513  0716                     	;# 
  7514  0717                     	;# 
  7515  0718                     	;# 
  7516  0719                     	;# 
  7517  0891                     	;# 
  7518  0891                     	;# 
  7519  0891                     	;# 
  7520  0891                     	;# 
  7521  0891                     	;# 
  7522  0891                     	;# 
  7523  0892                     	;# 
  7524  0892                     	;# 
  7525  0892                     	;# 
  7526  0893                     	;# 
  7527  0893                     	;# 
  7528  0893                     	;# 
  7529  0893                     	;# 
  7530  0893                     	;# 
  7531  0893                     	;# 
  7532  0894                     	;# 
  7533  0894                     	;# 
  7534  0894                     	;# 
  7535  0895                     	;# 
  7536  0895                     	;# 
  7537  0895                     	;# 
  7538  0896                     	;# 
  7539  0896                     	;# 
  7540  0896                     	;# 
  7541  089B                     	;# 
  7542  0911                     	;# 
  7543  0912                     	;# 
  7544  0913                     	;# 
  7545  0914                     	;# 
  7546  0915                     	;# 
  7547  0916                     	;# 
  7548  0918                     	;# 
  7549  0919                     	;# 
  7550  091A                     	;# 
  7551  091B                     	;# 
  7552  091C                     	;# 
  7553  091D                     	;# 
  7554  091E                     	;# 
  7555  091F                     	;# 
  7556  0E0F                     	;# 
  7557  0E10                     	;# 
  7558  0E11                     	;# 
  7559  0E12                     	;# 
  7560  0E13                     	;# 
  7561  0E14                     	;# 
  7562  0E15                     	;# 
  7563  0E16                     	;# 
  7564  0E17                     	;# 
  7565  0E18                     	;# 
  7566  0E19                     	;# 
  7567  0E1A                     	;# 
  7568  0E1B                     	;# 
  7569  0E1C                     	;# 
  7570  0E1D                     	;# 
  7571  0E1E                     	;# 
  7572  0E1F                     	;# 
  7573  0E20                     	;# 
  7574  0E21                     	;# 
  7575  0E22                     	;# 
  7576  0E24                     	;# 
  7577  0E25                     	;# 
  7578  0E28                     	;# 
  7579  0E29                     	;# 
  7580  0E2A                     	;# 
  7581  0E2B                     	;# 
  7582  0E2C                     	;# 
  7583  0E2D                     	;# 
  7584  0E2E                     	;# 
  7585  0E2F                     	;# 
  7586  0E90                     	;# 
  7587  0E91                     	;# 
  7588  0E92                     	;# 
  7589  0E94                     	;# 
  7590  0E95                     	;# 
  7591  0E9C                     	;# 
  7592  0E9D                     	;# 
  7593  0E9E                     	;# 
  7594  0E9F                     	;# 
  7595  0EA0                     	;# 
  7596  0EA1                     	;# 
  7597  0EA2                     	;# 
  7598  0EA3                     	;# 
  7599  0EA4                     	;# 
  7600  0EA5                     	;# 
  7601  0EA6                     	;# 
  7602  0EA7                     	;# 
  7603  0F0F                     	;# 
  7604  0F10                     	;# 
  7605  0F11                     	;# 
  7606  0F12                     	;# 
  7607  0F13                     	;# 
  7608  0F14                     	;# 
  7609  0F15                     	;# 
  7610  0F16                     	;# 
  7611  0F17                     	;# 
  7612  0F18                     	;# 
  7613  0F19                     	;# 
  7614  0F1A                     	;# 
  7615  0F1B                     	;# 
  7616  0F1C                     	;# 
  7617  0F1D                     	;# 
  7618  0F1E                     	;# 
  7619  0F1F                     	;# 
  7620  0F20                     	;# 
  7621  0F21                     	;# 
  7622  0F22                     	;# 
  7623  0F23                     	;# 
  7624  0F24                     	;# 
  7625  0F25                     	;# 
  7626  0F26                     	;# 
  7627  0F27                     	;# 
  7628  0F28                     	;# 
  7629  0F29                     	;# 
  7630  0F2A                     	;# 
  7631  0F2B                     	;# 
  7632  0F2C                     	;# 
  7633  0F2D                     	;# 
  7634  0F2E                     	;# 
  7635  0F2F                     	;# 
  7636  0F30                     	;# 
  7637  0F31                     	;# 
  7638  0F32                     	;# 
  7639  0F33                     	;# 
  7640  0F34                     	;# 
  7641  0F35                     	;# 
  7642  0F36                     	;# 
  7643  0F37                     	;# 
  7644  0FE4                     	;# 
  7645  0FE5                     	;# 
  7646  0FE6                     	;# 
  7647  0FE7                     	;# 
  7648  0FE8                     	;# 
  7649  0FE9                     	;# 
  7650  0FEA                     	;# 
  7651  0FEB                     	;# 
  7652  0FED                     	;# 
  7653  0FEE                     	;# 
  7654  0FEF                     	;# 
  7655  0000                     	;# 
  7656  0001                     	;# 
  7657  0002                     	;# 
  7658  0003                     	;# 
  7659  0004                     	;# 
  7660  0005                     	;# 
  7661  0006                     	;# 
  7662  0007                     	;# 
  7663  0008                     	;# 
  7664  0009                     	;# 
  7665  000A                     	;# 
  7666  000B                     	;# 
  7667  000C                     	;# 
  7668  000D                     	;# 
  7669  000E                     	;# 
  7670  0010                     	;# 
  7671  0011                     	;# 
  7672  0012                     	;# 
  7673  0013                     	;# 
  7674  0014                     	;# 
  7675  0015                     	;# 
  7676  0015                     	;# 
  7677  0016                     	;# 
  7678  0016                     	;# 
  7679  0017                     	;# 
  7680  0018                     	;# 
  7681  0019                     	;# 
  7682  0019                     	;# 
  7683  001A                     	;# 
  7684  001B                     	;# 
  7685  001C                     	;# 
  7686  001D                     	;# 
  7687  001E                     	;# 
  7688  001F                     	;# 
  7689  008C                     	;# 
  7690  008D                     	;# 
  7691  008E                     	;# 
  7692  0090                     	;# 
  7693  0091                     	;# 
  7694  0092                     	;# 
  7695  0093                     	;# 
  7696  0094                     	;# 
  7697  0097                     	;# 
  7698  009B                     	;# 
  7699  009B                     	;# 
  7700  009C                     	;# 
  7701  009D                     	;# 
  7702  009E                     	;# 
  7703  009F                     	;# 
  7704  010C                     	;# 
  7705  010D                     	;# 
  7706  010E                     	;# 
  7707  0111                     	;# 
  7708  0112                     	;# 
  7709  0113                     	;# 
  7710  0114                     	;# 
  7711  0115                     	;# 
  7712  0116                     	;# 
  7713  0117                     	;# 
  7714  0118                     	;# 
  7715  0119                     	;# 
  7716  018C                     	;# 
  7717  018D                     	;# 
  7718  018E                     	;# 
  7719  0199                     	;# 
  7720  0199                     	;# 
  7721  0199                     	;# 
  7722  019A                     	;# 
  7723  019A                     	;# 
  7724  019A                     	;# 
  7725  019B                     	;# 
  7726  019B                     	;# 
  7727  019B                     	;# 
  7728  019B                     	;# 
  7729  019B                     	;# 
  7730  019C                     	;# 
  7731  019C                     	;# 
  7732  019C                     	;# 
  7733  019D                     	;# 
  7734  019D                     	;# 
  7735  019D                     	;# 
  7736  019E                     	;# 
  7737  019E                     	;# 
  7738  019E                     	;# 
  7739  019F                     	;# 
  7740  019F                     	;# 
  7741  019F                     	;# 
  7742  019F                     	;# 
  7743  019F                     	;# 
  7744  020C                     	;# 
  7745  020D                     	;# 
  7746  020E                     	;# 
  7747  0211                     	;# 
  7748  0211                     	;# 
  7749  0212                     	;# 
  7750  0212                     	;# 
  7751  0213                     	;# 
  7752  0213                     	;# 
  7753  0214                     	;# 
  7754  0214                     	;# 
  7755  0215                     	;# 
  7756  0215                     	;# 
  7757  0215                     	;# 
  7758  0215                     	;# 
  7759  0216                     	;# 
  7760  0216                     	;# 
  7761  0217                     	;# 
  7762  0217                     	;# 
  7763  0219                     	;# 
  7764  021A                     	;# 
  7765  021B                     	;# 
  7766  021C                     	;# 
  7767  021D                     	;# 
  7768  021D                     	;# 
  7769  021E                     	;# 
  7770  021F                     	;# 
  7771  028C                     	;# 
  7772  028D                     	;# 
  7773  028E                     	;# 
  7774  0291                     	;# 
  7775  0291                     	;# 
  7776  0292                     	;# 
  7777  0293                     	;# 
  7778  0294                     	;# 
  7779  0295                     	;# 
  7780  0295                     	;# 
  7781  0296                     	;# 
  7782  0297                     	;# 
  7783  0298                     	;# 
  7784  029F                     	;# 
  7785  030C                     	;# 
  7786  030D                     	;# 
  7787  030E                     	;# 
  7788  0311                     	;# 
  7789  0311                     	;# 
  7790  0312                     	;# 
  7791  0313                     	;# 
  7792  0314                     	;# 
  7793  0315                     	;# 
  7794  0315                     	;# 
  7795  0316                     	;# 
  7796  0317                     	;# 
  7797  0318                     	;# 
  7798  038C                     	;# 
  7799  038D                     	;# 
  7800  038E                     	;# 
  7801  0391                     	;# 
  7802  0392                     	;# 
  7803  0393                     	;# 
  7804  0394                     	;# 
  7805  0395                     	;# 
  7806  0396                     	;# 
  7807  0397                     	;# 
  7808  0398                     	;# 
  7809  0399                     	;# 
  7810  039A                     	;# 
  7811  039C                     	;# 
  7812  039D                     	;# 
  7813  039E                     	;# 
  7814  039F                     	;# 
  7815  0411                     	;# 
  7816  0411                     	;# 
  7817  0412                     	;# 
  7818  0413                     	;# 
  7819  0414                     	;# 
  7820  0415                     	;# 
  7821  0416                     	;# 
  7822  0417                     	;# 
  7823  0418                     	;# 
  7824  0418                     	;# 
  7825  0419                     	;# 
  7826  041A                     	;# 
  7827  041B                     	;# 
  7828  041C                     	;# 
  7829  041D                     	;# 
  7830  041E                     	;# 
  7831  041F                     	;# 
  7832  0498                     	;# 
  7833  0498                     	;# 
  7834  0499                     	;# 
  7835  049A                     	;# 
  7836  049B                     	;# 
  7837  049B                     	;# 
  7838  049C                     	;# 
  7839  049D                     	;# 
  7840  049E                     	;# 
  7841  049F                     	;# 
  7842  0617                     	;# 
  7843  0618                     	;# 
  7844  0619                     	;# 
  7845  0619                     	;# 
  7846  061A                     	;# 
  7847  061B                     	;# 
  7848  061C                     	;# 
  7849  061C                     	;# 
  7850  061F                     	;# 
  7851  0691                     	;# 
  7852  0692                     	;# 
  7853  0693                     	;# 
  7854  0694                     	;# 
  7855  0695                     	;# 
  7856  0696                     	;# 
  7857  0697                     	;# 
  7858  0698                     	;# 
  7859  0699                     	;# 
  7860  0711                     	;# 
  7861  0712                     	;# 
  7862  0713                     	;# 
  7863  0714                     	;# 
  7864  0715                     	;# 
  7865  0716                     	;# 
  7866  0717                     	;# 
  7867  0718                     	;# 
  7868  0719                     	;# 
  7869  0891                     	;# 
  7870  0891                     	;# 
  7871  0891                     	;# 
  7872  0891                     	;# 
  7873  0891                     	;# 
  7874  0891                     	;# 
  7875  0892                     	;# 
  7876  0892                     	;# 
  7877  0892                     	;# 
  7878  0893                     	;# 
  7879  0893                     	;# 
  7880  0893                     	;# 
  7881  0893                     	;# 
  7882  0893                     	;# 
  7883  0893                     	;# 
  7884  0894                     	;# 
  7885  0894                     	;# 
  7886  0894                     	;# 
  7887  0895                     	;# 
  7888  0895                     	;# 
  7889  0895                     	;# 
  7890  0896                     	;# 
  7891  0896                     	;# 
  7892  0896                     	;# 
  7893  089B                     	;# 
  7894  0911                     	;# 
  7895  0912                     	;# 
  7896  0913                     	;# 
  7897  0914                     	;# 
  7898  0915                     	;# 
  7899  0916                     	;# 
  7900  0918                     	;# 
  7901  0919                     	;# 
  7902  091A                     	;# 
  7903  091B                     	;# 
  7904  091C                     	;# 
  7905  091D                     	;# 
  7906  091E                     	;# 
  7907  091F                     	;# 
  7908  0E0F                     	;# 
  7909  0E10                     	;# 
  7910  0E11                     	;# 
  7911  0E12                     	;# 
  7912  0E13                     	;# 
  7913  0E14                     	;# 
  7914  0E15                     	;# 
  7915  0E16                     	;# 
  7916  0E17                     	;# 
  7917  0E18                     	;# 
  7918  0E19                     	;# 
  7919  0E1A                     	;# 
  7920  0E1B                     	;# 
  7921  0E1C                     	;# 
  7922  0E1D                     	;# 
  7923  0E1E                     	;# 
  7924  0E1F                     	;# 
  7925  0E20                     	;# 
  7926  0E21                     	;# 
  7927  0E22                     	;# 
  7928  0E24                     	;# 
  7929  0E25                     	;# 
  7930  0E28                     	;# 
  7931  0E29                     	;# 
  7932  0E2A                     	;# 
  7933  0E2B                     	;# 
  7934  0E2C                     	;# 
  7935  0E2D                     	;# 
  7936  0E2E                     	;# 
  7937  0E2F                     	;# 
  7938  0E90                     	;# 
  7939  0E91                     	;# 
  7940  0E92                     	;# 
  7941  0E94                     	;# 
  7942  0E95                     	;# 
  7943  0E9C                     	;# 
  7944  0E9D                     	;# 
  7945  0E9E                     	;# 
  7946  0E9F                     	;# 
  7947  0EA0                     	;# 
  7948  0EA1                     	;# 
  7949  0EA2                     	;# 
  7950  0EA3                     	;# 
  7951  0EA4                     	;# 
  7952  0EA5                     	;# 
  7953  0EA6                     	;# 
  7954  0EA7                     	;# 
  7955  0F0F                     	;# 
  7956  0F10                     	;# 
  7957  0F11                     	;# 
  7958  0F12                     	;# 
  7959  0F13                     	;# 
  7960  0F14                     	;# 
  7961  0F15                     	;# 
  7962  0F16                     	;# 
  7963  0F17                     	;# 
  7964  0F18                     	;# 
  7965  0F19                     	;# 
  7966  0F1A                     	;# 
  7967  0F1B                     	;# 
  7968  0F1C                     	;# 
  7969  0F1D                     	;# 
  7970  0F1E                     	;# 
  7971  0F1F                     	;# 
  7972  0F20                     	;# 
  7973  0F21                     	;# 
  7974  0F22                     	;# 
  7975  0F23                     	;# 
  7976  0F24                     	;# 
  7977  0F25                     	;# 
  7978  0F26                     	;# 
  7979  0F27                     	;# 
  7980  0F28                     	;# 
  7981  0F29                     	;# 
  7982  0F2A                     	;# 
  7983  0F2B                     	;# 
  7984  0F2C                     	;# 
  7985  0F2D                     	;# 
  7986  0F2E                     	;# 
  7987  0F2F                     	;# 
  7988  0F30                     	;# 
  7989  0F31                     	;# 
  7990  0F32                     	;# 
  7991  0F33                     	;# 
  7992  0F34                     	;# 
  7993  0F35                     	;# 
  7994  0F36                     	;# 
  7995  0F37                     	;# 
  7996  0FE4                     	;# 
  7997  0FE5                     	;# 
  7998  0FE6                     	;# 
  7999  0FE7                     	;# 
  8000  0FE8                     	;# 
  8001  0FE9                     	;# 
  8002  0FEA                     	;# 
  8003  0FEB                     	;# 
  8004  0FED                     	;# 
  8005  0FEE                     	;# 
  8006  0FEF                     	;# 
  8007  0000                     	;# 
  8008  0001                     	;# 
  8009  0002                     	;# 
  8010  0003                     	;# 
  8011  0004                     	;# 
  8012  0005                     	;# 
  8013  0006                     	;# 
  8014  0007                     	;# 
  8015  0008                     	;# 
  8016  0009                     	;# 
  8017  000A                     	;# 
  8018  000B                     	;# 
  8019  000C                     	;# 
  8020  000D                     	;# 
  8021  000E                     	;# 
  8022  0010                     	;# 
  8023  0011                     	;# 
  8024  0012                     	;# 
  8025  0013                     	;# 
  8026  0014                     	;# 
  8027  0015                     	;# 
  8028  0015                     	;# 
  8029  0016                     	;# 
  8030  0016                     	;# 
  8031  0017                     	;# 
  8032  0018                     	;# 
  8033  0019                     	;# 
  8034  0019                     	;# 
  8035  001A                     	;# 
  8036  001B                     	;# 
  8037  001C                     	;# 
  8038  001D                     	;# 
  8039  001E                     	;# 
  8040  001F                     	;# 
  8041  008C                     	;# 
  8042  008D                     	;# 
  8043  008E                     	;# 
  8044  0090                     	;# 
  8045  0091                     	;# 
  8046  0092                     	;# 
  8047  0093                     	;# 
  8048  0094                     	;# 
  8049  0097                     	;# 
  8050  009B                     	;# 
  8051  009B                     	;# 
  8052  009C                     	;# 
  8053  009D                     	;# 
  8054  009E                     	;# 
  8055  009F                     	;# 
  8056  010C                     	;# 
  8057  010D                     	;# 
  8058  010E                     	;# 
  8059  0111                     	;# 
  8060  0112                     	;# 
  8061  0113                     	;# 
  8062  0114                     	;# 
  8063  0115                     	;# 
  8064  0116                     	;# 
  8065  0117                     	;# 
  8066  0118                     	;# 
  8067  0119                     	;# 
  8068  018C                     	;# 
  8069  018D                     	;# 
  8070  018E                     	;# 
  8071  0199                     	;# 
  8072  0199                     	;# 
  8073  0199                     	;# 
  8074  019A                     	;# 
  8075  019A                     	;# 
  8076  019A                     	;# 
  8077  019B                     	;# 
  8078  019B                     	;# 
  8079  019B                     	;# 
  8080  019B                     	;# 
  8081  019B                     	;# 
  8082  019C                     	;# 
  8083  019C                     	;# 
  8084  019C                     	;# 
  8085  019D                     	;# 
  8086  019D                     	;# 
  8087  019D                     	;# 
  8088  019E                     	;# 
  8089  019E                     	;# 
  8090  019E                     	;# 
  8091  019F                     	;# 
  8092  019F                     	;# 
  8093  019F                     	;# 
  8094  019F                     	;# 
  8095  019F                     	;# 
  8096  020C                     	;# 
  8097  020D                     	;# 
  8098  020E                     	;# 
  8099  0211                     	;# 
  8100  0211                     	;# 
  8101  0212                     	;# 
  8102  0212                     	;# 
  8103  0213                     	;# 
  8104  0213                     	;# 
  8105  0214                     	;# 
  8106  0214                     	;# 
  8107  0215                     	;# 
  8108  0215                     	;# 
  8109  0215                     	;# 
  8110  0215                     	;# 
  8111  0216                     	;# 
  8112  0216                     	;# 
  8113  0217                     	;# 
  8114  0217                     	;# 
  8115  0219                     	;# 
  8116  021A                     	;# 
  8117  021B                     	;# 
  8118  021C                     	;# 
  8119  021D                     	;# 
  8120  021D                     	;# 
  8121  021E                     	;# 
  8122  021F                     	;# 
  8123  028C                     	;# 
  8124  028D                     	;# 
  8125  028E                     	;# 
  8126  0291                     	;# 
  8127  0291                     	;# 
  8128  0292                     	;# 
  8129  0293                     	;# 
  8130  0294                     	;# 
  8131  0295                     	;# 
  8132  0295                     	;# 
  8133  0296                     	;# 
  8134  0297                     	;# 
  8135  0298                     	;# 
  8136  029F                     	;# 
  8137  030C                     	;# 
  8138  030D                     	;# 
  8139  030E                     	;# 
  8140  0311                     	;# 
  8141  0311                     	;# 
  8142  0312                     	;# 
  8143  0313                     	;# 
  8144  0314                     	;# 
  8145  0315                     	;# 
  8146  0315                     	;# 
  8147  0316                     	;# 
  8148  0317                     	;# 
  8149  0318                     	;# 
  8150  038C                     	;# 
  8151  038D                     	;# 
  8152  038E                     	;# 
  8153  0391                     	;# 
  8154  0392                     	;# 
  8155  0393                     	;# 
  8156  0394                     	;# 
  8157  0395                     	;# 
  8158  0396                     	;# 
  8159  0397                     	;# 
  8160  0398                     	;# 
  8161  0399                     	;# 
  8162  039A                     	;# 
  8163  039C                     	;# 
  8164  039D                     	;# 
  8165  039E                     	;# 
  8166  039F                     	;# 
  8167  0411                     	;# 
  8168  0411                     	;# 
  8169  0412                     	;# 
  8170  0413                     	;# 
  8171  0414                     	;# 
  8172  0415                     	;# 
  8173  0416                     	;# 
  8174  0417                     	;# 
  8175  0418                     	;# 
  8176  0418                     	;# 
  8177  0419                     	;# 
  8178  041A                     	;# 
  8179  041B                     	;# 
  8180  041C                     	;# 
  8181  041D                     	;# 
  8182  041E                     	;# 
  8183  041F                     	;# 
  8184  0498                     	;# 
  8185  0498                     	;# 
  8186  0499                     	;# 
  8187  049A                     	;# 
  8188  049B                     	;# 
  8189  049B                     	;# 
  8190  049C                     	;# 
  8191  049D                     	;# 
  8192  049E                     	;# 
  8193  049F                     	;# 
  8194  0617                     	;# 
  8195  0618                     	;# 
  8196  0619                     	;# 
  8197  0619                     	;# 
  8198  061A                     	;# 
  8199  061B                     	;# 
  8200  061C                     	;# 
  8201  061C                     	;# 
  8202  061F                     	;# 
  8203  0691                     	;# 
  8204  0692                     	;# 
  8205  0693                     	;# 
  8206  0694                     	;# 
  8207  0695                     	;# 
  8208  0696                     	;# 
  8209  0697                     	;# 
  8210  0698                     	;# 
  8211  0699                     	;# 
  8212  0711                     	;# 
  8213  0712                     	;# 
  8214  0713                     	;# 
  8215  0714                     	;# 
  8216  0715                     	;# 
  8217  0716                     	;# 
  8218  0717                     	;# 
  8219  0718                     	;# 
  8220  0719                     	;# 
  8221  0891                     	;# 
  8222  0891                     	;# 
  8223  0891                     	;# 
  8224  0891                     	;# 
  8225  0891                     	;# 
  8226  0891                     	;# 
  8227  0892                     	;# 
  8228  0892                     	;# 
  8229  0892                     	;# 
  8230  0893                     	;# 
  8231  0893                     	;# 
  8232  0893                     	;# 
  8233  0893                     	;# 
  8234  0893                     	;# 
  8235  0893                     	;# 
  8236  0894                     	;# 
  8237  0894                     	;# 
  8238  0894                     	;# 
  8239  0895                     	;# 
  8240  0895                     	;# 
  8241  0895                     	;# 
  8242  0896                     	;# 
  8243  0896                     	;# 
  8244  0896                     	;# 
  8245  089B                     	;# 
  8246  0911                     	;# 
  8247  0912                     	;# 
  8248  0913                     	;# 
  8249  0914                     	;# 
  8250  0915                     	;# 
  8251  0916                     	;# 
  8252  0918                     	;# 
  8253  0919                     	;# 
  8254  091A                     	;# 
  8255  091B                     	;# 
  8256  091C                     	;# 
  8257  091D                     	;# 
  8258  091E                     	;# 
  8259  091F                     	;# 
  8260  0E0F                     	;# 
  8261  0E10                     	;# 
  8262  0E11                     	;# 
  8263  0E12                     	;# 
  8264  0E13                     	;# 
  8265  0E14                     	;# 
  8266  0E15                     	;# 
  8267  0E16                     	;# 
  8268  0E17                     	;# 
  8269  0E18                     	;# 
  8270  0E19                     	;# 
  8271  0E1A                     	;# 
  8272  0E1B                     	;# 
  8273  0E1C                     	;# 
  8274  0E1D                     	;# 
  8275  0E1E                     	;# 
  8276  0E1F                     	;# 
  8277  0E20                     	;# 
  8278  0E21                     	;# 
  8279  0E22                     	;# 
  8280  0E24                     	;# 
  8281  0E25                     	;# 
  8282  0E28                     	;# 
  8283  0E29                     	;# 
  8284  0E2A                     	;# 
  8285  0E2B                     	;# 
  8286  0E2C                     	;# 
  8287  0E2D                     	;# 
  8288  0E2E                     	;# 
  8289  0E2F                     	;# 
  8290  0E90                     	;# 
  8291  0E91                     	;# 
  8292  0E92                     	;# 
  8293  0E94                     	;# 
  8294  0E95                     	;# 
  8295  0E9C                     	;# 
  8296  0E9D                     	;# 
  8297  0E9E                     	;# 
  8298  0E9F                     	;# 
  8299  0EA0                     	;# 
  8300  0EA1                     	;# 
  8301  0EA2                     	;# 
  8302  0EA3                     	;# 
  8303  0EA4                     	;# 
  8304  0EA5                     	;# 
  8305  0EA6                     	;# 
  8306  0EA7                     	;# 
  8307  0F0F                     	;# 
  8308  0F10                     	;# 
  8309  0F11                     	;# 
  8310  0F12                     	;# 
  8311  0F13                     	;# 
  8312  0F14                     	;# 
  8313  0F15                     	;# 
  8314  0F16                     	;# 
  8315  0F17                     	;# 
  8316  0F18                     	;# 
  8317  0F19                     	;# 
  8318  0F1A                     	;# 
  8319  0F1B                     	;# 
  8320  0F1C                     	;# 
  8321  0F1D                     	;# 
  8322  0F1E                     	;# 
  8323  0F1F                     	;# 
  8324  0F20                     	;# 
  8325  0F21                     	;# 
  8326  0F22                     	;# 
  8327  0F23                     	;# 
  8328  0F24                     	;# 
  8329  0F25                     	;# 
  8330  0F26                     	;# 
  8331  0F27                     	;# 
  8332  0F28                     	;# 
  8333  0F29                     	;# 
  8334  0F2A                     	;# 
  8335  0F2B                     	;# 
  8336  0F2C                     	;# 
  8337  0F2D                     	;# 
  8338  0F2E                     	;# 
  8339  0F2F                     	;# 
  8340  0F30                     	;# 
  8341  0F31                     	;# 
  8342  0F32                     	;# 
  8343  0F33                     	;# 
  8344  0F34                     	;# 
  8345  0F35                     	;# 
  8346  0F36                     	;# 
  8347  0F37                     	;# 
  8348  0FE4                     	;# 
  8349  0FE5                     	;# 
  8350  0FE6                     	;# 
  8351  0FE7                     	;# 
  8352  0FE8                     	;# 
  8353  0FE9                     	;# 
  8354  0FEA                     	;# 
  8355  0FEB                     	;# 
  8356  0FED                     	;# 
  8357  0FEE                     	;# 
  8358  0FEF                     	;# 
  8359  0000                     	;# 
  8360  0001                     	;# 
  8361  0002                     	;# 
  8362  0003                     	;# 
  8363  0004                     	;# 
  8364  0005                     	;# 
  8365  0006                     	;# 
  8366  0007                     	;# 
  8367  0008                     	;# 
  8368  0009                     	;# 
  8369  000A                     	;# 
  8370  000B                     	;# 
  8371  000C                     	;# 
  8372  000D                     	;# 
  8373  000E                     	;# 
  8374  0010                     	;# 
  8375  0011                     	;# 
  8376  0012                     	;# 
  8377  0013                     	;# 
  8378  0014                     	;# 
  8379  0015                     	;# 
  8380  0015                     	;# 
  8381  0016                     	;# 
  8382  0016                     	;# 
  8383  0017                     	;# 
  8384  0018                     	;# 
  8385  0019                     	;# 
  8386  0019                     	;# 
  8387  001A                     	;# 
  8388  001B                     	;# 
  8389  001C                     	;# 
  8390  001D                     	;# 
  8391  001E                     	;# 
  8392  001F                     	;# 
  8393  008C                     	;# 
  8394  008D                     	;# 
  8395  008E                     	;# 
  8396  0090                     	;# 
  8397  0091                     	;# 
  8398  0092                     	;# 
  8399  0093                     	;# 
  8400  0094                     	;# 
  8401  0097                     	;# 
  8402  009B                     	;# 
  8403  009B                     	;# 
  8404  009C                     	;# 
  8405  009D                     	;# 
  8406  009E                     	;# 
  8407  009F                     	;# 
  8408  010C                     	;# 
  8409  010D                     	;# 
  8410  010E                     	;# 
  8411  0111                     	;# 
  8412  0112                     	;# 
  8413  0113                     	;# 
  8414  0114                     	;# 
  8415  0115                     	;# 
  8416  0116                     	;# 
  8417  0117                     	;# 
  8418  0118                     	;# 
  8419  0119                     	;# 
  8420  018C                     	;# 
  8421  018D                     	;# 
  8422  018E                     	;# 
  8423  0199                     	;# 
  8424  0199                     	;# 
  8425  0199                     	;# 
  8426  019A                     	;# 
  8427  019A                     	;# 
  8428  019A                     	;# 
  8429  019B                     	;# 
  8430  019B                     	;# 
  8431  019B                     	;# 
  8432  019B                     	;# 
  8433  019B                     	;# 
  8434  019C                     	;# 
  8435  019C                     	;# 
  8436  019C                     	;# 
  8437  019D                     	;# 
  8438  019D                     	;# 
  8439  019D                     	;# 
  8440  019E                     	;# 
  8441  019E                     	;# 
  8442  019E                     	;# 
  8443  019F                     	;# 
  8444  019F                     	;# 
  8445  019F                     	;# 
  8446  019F                     	;# 
  8447  019F                     	;# 
  8448  020C                     	;# 
  8449  020D                     	;# 
  8450  020E                     	;# 
  8451  0211                     	;# 
  8452  0211                     	;# 
  8453  0212                     	;# 
  8454  0212                     	;# 
  8455  0213                     	;# 
  8456  0213                     	;# 
  8457  0214                     	;# 
  8458  0214                     	;# 
  8459  0215                     	;# 
  8460  0215                     	;# 
  8461  0215                     	;# 
  8462  0215                     	;# 
  8463  0216                     	;# 
  8464  0216                     	;# 
  8465  0217                     	;# 
  8466  0217                     	;# 
  8467  0219                     	;# 
  8468  021A                     	;# 
  8469  021B                     	;# 
  8470  021C                     	;# 
  8471  021D                     	;# 
  8472  021D                     	;# 
  8473  021E                     	;# 
  8474  021F                     	;# 
  8475  028C                     	;# 
  8476  028D                     	;# 
  8477  028E                     	;# 
  8478  0291                     	;# 
  8479  0291                     	;# 
  8480  0292                     	;# 
  8481  0293                     	;# 
  8482  0294                     	;# 
  8483  0295                     	;# 
  8484  0295                     	;# 
  8485  0296                     	;# 
  8486  0297                     	;# 
  8487  0298                     	;# 
  8488  029F                     	;# 
  8489  030C                     	;# 
  8490  030D                     	;# 
  8491  030E                     	;# 
  8492  0311                     	;# 
  8493  0311                     	;# 
  8494  0312                     	;# 
  8495  0313                     	;# 
  8496  0314                     	;# 
  8497  0315                     	;# 
  8498  0315                     	;# 
  8499  0316                     	;# 
  8500  0317                     	;# 
  8501  0318                     	;# 
  8502  038C                     	;# 
  8503  038D                     	;# 
  8504  038E                     	;# 
  8505  0391                     	;# 
  8506  0392                     	;# 
  8507  0393                     	;# 
  8508  0394                     	;# 
  8509  0395                     	;# 
  8510  0396                     	;# 
  8511  0397                     	;# 
  8512  0398                     	;# 
  8513  0399                     	;# 
  8514  039A                     	;# 
  8515  039C                     	;# 
  8516  039D                     	;# 
  8517  039E                     	;# 
  8518  039F                     	;# 
  8519  0411                     	;# 
  8520  0411                     	;# 
  8521  0412                     	;# 
  8522  0413                     	;# 
  8523  0414                     	;# 
  8524  0415                     	;# 
  8525  0416                     	;# 
  8526  0417                     	;# 
  8527  0418                     	;# 
  8528  0418                     	;# 
  8529  0419                     	;# 
  8530  041A                     	;# 
  8531  041B                     	;# 
  8532  041C                     	;# 
  8533  041D                     	;# 
  8534  041E                     	;# 
  8535  041F                     	;# 
  8536  0498                     	;# 
  8537  0498                     	;# 
  8538  0499                     	;# 
  8539  049A                     	;# 
  8540  049B                     	;# 
  8541  049B                     	;# 
  8542  049C                     	;# 
  8543  049D                     	;# 
  8544  049E                     	;# 
  8545  049F                     	;# 
  8546  0617                     	;# 
  8547  0618                     	;# 
  8548  0619                     	;# 
  8549  0619                     	;# 
  8550  061A                     	;# 
  8551  061B                     	;# 
  8552  061C                     	;# 
  8553  061C                     	;# 
  8554  061F                     	;# 
  8555  0691                     	;# 
  8556  0692                     	;# 
  8557  0693                     	;# 
  8558  0694                     	;# 
  8559  0695                     	;# 
  8560  0696                     	;# 
  8561  0697                     	;# 
  8562  0698                     	;# 
  8563  0699                     	;# 
  8564  0711                     	;# 
  8565  0712                     	;# 
  8566  0713                     	;# 
  8567  0714                     	;# 
  8568  0715                     	;# 
  8569  0716                     	;# 
  8570  0717                     	;# 
  8571  0718                     	;# 
  8572  0719                     	;# 
  8573  0891                     	;# 
  8574  0891                     	;# 
  8575  0891                     	;# 
  8576  0891                     	;# 
  8577  0891                     	;# 
  8578  0891                     	;# 
  8579  0892                     	;# 
  8580  0892                     	;# 
  8581  0892                     	;# 
  8582  0893                     	;# 
  8583  0893                     	;# 
  8584  0893                     	;# 
  8585  0893                     	;# 
  8586  0893                     	;# 
  8587  0893                     	;# 
  8588  0894                     	;# 
  8589  0894                     	;# 
  8590  0894                     	;# 
  8591  0895                     	;# 
  8592  0895                     	;# 
  8593  0895                     	;# 
  8594  0896                     	;# 
  8595  0896                     	;# 
  8596  0896                     	;# 
  8597  089B                     	;# 
  8598  0911                     	;# 
  8599  0912                     	;# 
  8600  0913                     	;# 
  8601  0914                     	;# 
  8602  0915                     	;# 
  8603  0916                     	;# 
  8604  0918                     	;# 
  8605  0919                     	;# 
  8606  091A                     	;# 
  8607  091B                     	;# 
  8608  091C                     	;# 
  8609  091D                     	;# 
  8610  091E                     	;# 
  8611  091F                     	;# 
  8612  0E0F                     	;# 
  8613  0E10                     	;# 
  8614  0E11                     	;# 
  8615  0E12                     	;# 
  8616  0E13                     	;# 
  8617  0E14                     	;# 
  8618  0E15                     	;# 
  8619  0E16                     	;# 
  8620  0E17                     	;# 
  8621  0E18                     	;# 
  8622  0E19                     	;# 
  8623  0E1A                     	;# 
  8624  0E1B                     	;# 
  8625  0E1C                     	;# 
  8626  0E1D                     	;# 
  8627  0E1E                     	;# 
  8628  0E1F                     	;# 
  8629  0E20                     	;# 
  8630  0E21                     	;# 
  8631  0E22                     	;# 
  8632  0E24                     	;# 
  8633  0E25                     	;# 
  8634  0E28                     	;# 
  8635  0E29                     	;# 
  8636  0E2A                     	;# 
  8637  0E2B                     	;# 
  8638  0E2C                     	;# 
  8639  0E2D                     	;# 
  8640  0E2E                     	;# 
  8641  0E2F                     	;# 
  8642  0E90                     	;# 
  8643  0E91                     	;# 
  8644  0E92                     	;# 
  8645  0E94                     	;# 
  8646  0E95                     	;# 
  8647  0E9C                     	;# 
  8648  0E9D                     	;# 
  8649  0E9E                     	;# 
  8650  0E9F                     	;# 
  8651  0EA0                     	;# 
  8652  0EA1                     	;# 
  8653  0EA2                     	;# 
  8654  0EA3                     	;# 
  8655  0EA4                     	;# 
  8656  0EA5                     	;# 
  8657  0EA6                     	;# 
  8658  0EA7                     	;# 
  8659  0F0F                     	;# 
  8660  0F10                     	;# 
  8661  0F11                     	;# 
  8662  0F12                     	;# 
  8663  0F13                     	;# 
  8664  0F14                     	;# 
  8665  0F15                     	;# 
  8666  0F16                     	;# 
  8667  0F17                     	;# 
  8668  0F18                     	;# 
  8669  0F19                     	;# 
  8670  0F1A                     	;# 
  8671  0F1B                     	;# 
  8672  0F1C                     	;# 
  8673  0F1D                     	;# 
  8674  0F1E                     	;# 
  8675  0F1F                     	;# 
  8676  0F20                     	;# 
  8677  0F21                     	;# 
  8678  0F22                     	;# 
  8679  0F23                     	;# 
  8680  0F24                     	;# 
  8681  0F25                     	;# 
  8682  0F26                     	;# 
  8683  0F27                     	;# 
  8684  0F28                     	;# 
  8685  0F29                     	;# 
  8686  0F2A                     	;# 
  8687  0F2B                     	;# 
  8688  0F2C                     	;# 
  8689  0F2D                     	;# 
  8690  0F2E                     	;# 
  8691  0F2F                     	;# 
  8692  0F30                     	;# 
  8693  0F31                     	;# 
  8694  0F32                     	;# 
  8695  0F33                     	;# 
  8696  0F34                     	;# 
  8697  0F35                     	;# 
  8698  0F36                     	;# 
  8699  0F37                     	;# 
  8700  0FE4                     	;# 
  8701  0FE5                     	;# 
  8702  0FE6                     	;# 
  8703  0FE7                     	;# 
  8704  0FE8                     	;# 
  8705  0FE9                     	;# 
  8706  0FEA                     	;# 
  8707  0FEB                     	;# 
  8708  0FED                     	;# 
  8709  0FEE                     	;# 
  8710  0FEF                     	;# 
  8711  0000                     	;# 
  8712  0001                     	;# 
  8713  0002                     	;# 
  8714  0003                     	;# 
  8715  0004                     	;# 
  8716  0005                     	;# 
  8717  0006                     	;# 
  8718  0007                     	;# 
  8719  0008                     	;# 
  8720  0009                     	;# 
  8721  000A                     	;# 
  8722  000B                     	;# 
  8723  000C                     	;# 
  8724  000D                     	;# 
  8725  000E                     	;# 
  8726  0010                     	;# 
  8727  0011                     	;# 
  8728  0012                     	;# 
  8729  0013                     	;# 
  8730  0014                     	;# 
  8731  0015                     	;# 
  8732  0015                     	;# 
  8733  0016                     	;# 
  8734  0016                     	;# 
  8735  0017                     	;# 
  8736  0018                     	;# 
  8737  0019                     	;# 
  8738  0019                     	;# 
  8739  001A                     	;# 
  8740  001B                     	;# 
  8741  001C                     	;# 
  8742  001D                     	;# 
  8743  001E                     	;# 
  8744  001F                     	;# 
  8745  008C                     	;# 
  8746  008D                     	;# 
  8747  008E                     	;# 
  8748  0090                     	;# 
  8749  0091                     	;# 
  8750  0092                     	;# 
  8751  0093                     	;# 
  8752  0094                     	;# 
  8753  0097                     	;# 
  8754  009B                     	;# 
  8755  009B                     	;# 
  8756  009C                     	;# 
  8757  009D                     	;# 
  8758  009E                     	;# 
  8759  009F                     	;# 
  8760  010C                     	;# 
  8761  010D                     	;# 
  8762  010E                     	;# 
  8763  0111                     	;# 
  8764  0112                     	;# 
  8765  0113                     	;# 
  8766  0114                     	;# 
  8767  0115                     	;# 
  8768  0116                     	;# 
  8769  0117                     	;# 
  8770  0118                     	;# 
  8771  0119                     	;# 
  8772  018C                     	;# 
  8773  018D                     	;# 
  8774  018E                     	;# 
  8775  0199                     	;# 
  8776  0199                     	;# 
  8777  0199                     	;# 
  8778  019A                     	;# 
  8779  019A                     	;# 
  8780  019A                     	;# 
  8781  019B                     	;# 
  8782  019B                     	;# 
  8783  019B                     	;# 
  8784  019B                     	;# 
  8785  019B                     	;# 
  8786  019C                     	;# 
  8787  019C                     	;# 
  8788  019C                     	;# 
  8789  019D                     	;# 
  8790  019D                     	;# 
  8791  019D                     	;# 
  8792  019E                     	;# 
  8793  019E                     	;# 
  8794  019E                     	;# 
  8795  019F                     	;# 
  8796  019F                     	;# 
  8797  019F                     	;# 
  8798  019F                     	;# 
  8799  019F                     	;# 
  8800  020C                     	;# 
  8801  020D                     	;# 
  8802  020E                     	;# 
  8803  0211                     	;# 
  8804  0211                     	;# 
  8805  0212                     	;# 
  8806  0212                     	;# 
  8807  0213                     	;# 
  8808  0213                     	;# 
  8809  0214                     	;# 
  8810  0214                     	;# 
  8811  0215                     	;# 
  8812  0215                     	;# 
  8813  0215                     	;# 
  8814  0215                     	;# 
  8815  0216                     	;# 
  8816  0216                     	;# 
  8817  0217                     	;# 
  8818  0217                     	;# 
  8819  0219                     	;# 
  8820  021A                     	;# 
  8821  021B                     	;# 
  8822  021C                     	;# 
  8823  021D                     	;# 
  8824  021D                     	;# 
  8825  021E                     	;# 
  8826  021F                     	;# 
  8827  028C                     	;# 
  8828  028D                     	;# 
  8829  028E                     	;# 
  8830  0291                     	;# 
  8831  0291                     	;# 
  8832  0292                     	;# 
  8833  0293                     	;# 
  8834  0294                     	;# 
  8835  0295                     	;# 
  8836  0295                     	;# 
  8837  0296                     	;# 
  8838  0297                     	;# 
  8839  0298                     	;# 
  8840  029F                     	;# 
  8841  030C                     	;# 
  8842  030D                     	;# 
  8843  030E                     	;# 
  8844  0311                     	;# 
  8845  0311                     	;# 
  8846  0312                     	;# 
  8847  0313                     	;# 
  8848  0314                     	;# 
  8849  0315                     	;# 
  8850  0315                     	;# 
  8851  0316                     	;# 
  8852  0317                     	;# 
  8853  0318                     	;# 
  8854  038C                     	;# 
  8855  038D                     	;# 
  8856  038E                     	;# 
  8857  0391                     	;# 
  8858  0392                     	;# 
  8859  0393                     	;# 
  8860  0394                     	;# 
  8861  0395                     	;# 
  8862  0396                     	;# 
  8863  0397                     	;# 
  8864  0398                     	;# 
  8865  0399                     	;# 
  8866  039A                     	;# 
  8867  039C                     	;# 
  8868  039D                     	;# 
  8869  039E                     	;# 
  8870  039F                     	;# 
  8871  0411                     	;# 
  8872  0411                     	;# 
  8873  0412                     	;# 
  8874  0413                     	;# 
  8875  0414                     	;# 
  8876  0415                     	;# 
  8877  0416                     	;# 
  8878  0417                     	;# 
  8879  0418                     	;# 
  8880  0418                     	;# 
  8881  0419                     	;# 
  8882  041A                     	;# 
  8883  041B                     	;# 
  8884  041C                     	;# 
  8885  041D                     	;# 
  8886  041E                     	;# 
  8887  041F                     	;# 
  8888  0498                     	;# 
  8889  0498                     	;# 
  8890  0499                     	;# 
  8891  049A                     	;# 
  8892  049B                     	;# 
  8893  049B                     	;# 
  8894  049C                     	;# 
  8895  049D                     	;# 
  8896  049E                     	;# 
  8897  049F                     	;# 
  8898  0617                     	;# 
  8899  0618                     	;# 
  8900  0619                     	;# 
  8901  0619                     	;# 
  8902  061A                     	;# 
  8903  061B                     	;# 
  8904  061C                     	;# 
  8905  061C                     	;# 
  8906  061F                     	;# 
  8907  0691                     	;# 
  8908  0692                     	;# 
  8909  0693                     	;# 
  8910  0694                     	;# 
  8911  0695                     	;# 
  8912  0696                     	;# 
  8913  0697                     	;# 
  8914  0698                     	;# 
  8915  0699                     	;# 
  8916  0711                     	;# 
  8917  0712                     	;# 
  8918  0713                     	;# 
  8919  0714                     	;# 
  8920  0715                     	;# 
  8921  0716                     	;# 
  8922  0717                     	;# 
  8923  0718                     	;# 
  8924  0719                     	;# 
  8925  0891                     	;# 
  8926  0891                     	;# 
  8927  0891                     	;# 
  8928  0891                     	;# 
  8929  0891                     	;# 
  8930  0891                     	;# 
  8931  0892                     	;# 
  8932  0892                     	;# 
  8933  0892                     	;# 
  8934  0893                     	;# 
  8935  0893                     	;# 
  8936  0893                     	;# 
  8937  0893                     	;# 
  8938  0893                     	;# 
  8939  0893                     	;# 
  8940  0894                     	;# 
  8941  0894                     	;# 
  8942  0894                     	;# 
  8943  0895                     	;# 
  8944  0895                     	;# 
  8945  0895                     	;# 
  8946  0896                     	;# 
  8947  0896                     	;# 
  8948  0896                     	;# 
  8949  089B                     	;# 
  8950  0911                     	;# 
  8951  0912                     	;# 
  8952  0913                     	;# 
  8953  0914                     	;# 
  8954  0915                     	;# 
  8955  0916                     	;# 
  8956  0918                     	;# 
  8957  0919                     	;# 
  8958  091A                     	;# 
  8959  091B                     	;# 
  8960  091C                     	;# 
  8961  091D                     	;# 
  8962  091E                     	;# 
  8963  091F                     	;# 
  8964  0E0F                     	;# 
  8965  0E10                     	;# 
  8966  0E11                     	;# 
  8967  0E12                     	;# 
  8968  0E13                     	;# 
  8969  0E14                     	;# 
  8970  0E15                     	;# 
  8971  0E16                     	;# 
  8972  0E17                     	;# 
  8973  0E18                     	;# 
  8974  0E19                     	;# 
  8975  0E1A                     	;# 
  8976  0E1B                     	;# 
  8977  0E1C                     	;# 
  8978  0E1D                     	;# 
  8979  0E1E                     	;# 
  8980  0E1F                     	;# 
  8981  0E20                     	;# 
  8982  0E21                     	;# 
  8983  0E22                     	;# 
  8984  0E24                     	;# 
  8985  0E25                     	;# 
  8986  0E28                     	;# 
  8987  0E29                     	;# 
  8988  0E2A                     	;# 
  8989  0E2B                     	;# 
  8990  0E2C                     	;# 
  8991  0E2D                     	;# 
  8992  0E2E                     	;# 
  8993  0E2F                     	;# 
  8994  0E90                     	;# 
  8995  0E91                     	;# 
  8996  0E92                     	;# 
  8997  0E94                     	;# 
  8998  0E95                     	;# 
  8999  0E9C                     	;# 
  9000  0E9D                     	;# 
  9001  0E9E                     	;# 
  9002  0E9F                     	;# 
  9003  0EA0                     	;# 
  9004  0EA1                     	;# 
  9005  0EA2                     	;# 
  9006  0EA3                     	;# 
  9007  0EA4                     	;# 
  9008  0EA5                     	;# 
  9009  0EA6                     	;# 
  9010  0EA7                     	;# 
  9011  0F0F                     	;# 
  9012  0F10                     	;# 
  9013  0F11                     	;# 
  9014  0F12                     	;# 
  9015  0F13                     	;# 
  9016  0F14                     	;# 
  9017  0F15                     	;# 
  9018  0F16                     	;# 
  9019  0F17                     	;# 
  9020  0F18                     	;# 
  9021  0F19                     	;# 
  9022  0F1A                     	;# 
  9023  0F1B                     	;# 
  9024  0F1C                     	;# 
  9025  0F1D                     	;# 
  9026  0F1E                     	;# 
  9027  0F1F                     	;# 
  9028  0F20                     	;# 
  9029  0F21                     	;# 
  9030  0F22                     	;# 
  9031  0F23                     	;# 
  9032  0F24                     	;# 
  9033  0F25                     	;# 
  9034  0F26                     	;# 
  9035  0F27                     	;# 
  9036  0F28                     	;# 
  9037  0F29                     	;# 
  9038  0F2A                     	;# 
  9039  0F2B                     	;# 
  9040  0F2C                     	;# 
  9041  0F2D                     	;# 
  9042  0F2E                     	;# 
  9043  0F2F                     	;# 
  9044  0F30                     	;# 
  9045  0F31                     	;# 
  9046  0F32                     	;# 
  9047  0F33                     	;# 
  9048  0F34                     	;# 
  9049  0F35                     	;# 
  9050  0F36                     	;# 
  9051  0F37                     	;# 
  9052  0FE4                     	;# 
  9053  0FE5                     	;# 
  9054  0FE6                     	;# 
  9055  0FE7                     	;# 
  9056  0FE8                     	;# 
  9057  0FE9                     	;# 
  9058  0FEA                     	;# 
  9059  0FEB                     	;# 
  9060  0FED                     	;# 
  9061  0FEE                     	;# 
  9062  0FEF                     	;_asciiCharTableLookup
  9063                           
  9064 ;; Function _menu_Exit is unused but had its address taken
  9065  0000                     
  9066 ;; Function _flashy_Exit is unused but had its address taken
  9067  0000                     
  9068 ;; Function _locked_Exit is unused but had its address taken
  9069  0000                     
  9070 ;; Function _secret_Exit is unused but had its address taken
  9071  0000                     
  9072 ;; Function _slot_Exit is unused but had its address taken
  9073  0000                     
  9074 ;; Function _matrix_Exit is unused but had its address taken
  9075  0000                     
  9076                           	psect	idataBANK1
  9077  3335                     __pidataBANK1:	
  9078                           
  9079                           ;initializer for marquee@F14099
  9080  3335  3420               	retlw	32
  9081  3336  3420               	retlw	32
  9082  3337  3420               	retlw	32
  9083  3338  3420               	retlw	32
  9084  3339  3400               	retlw	0
  9085                           
  9086                           ;initializer for _randx
  9087  333A  3401               	retlw	1
  9088  333B  3400               	retlw	0
  9089  333C  3400               	retlw	0
  9090  333D  3400               	retlw	0
  9091                           
  9092                           ;initializer for _Leds_idx
  9093  333E  3401               	retlw	1
  9094  333F  3400               	retlw	0
  9095                           
  9096                           ;initializer for _locked_lock_base_leds
  9097  3340  341F               	retlw	31
  9098  3341  34F8               	retlw	248
  9099                           
  9100                           ;initializer for _FLASHY_TEXT_SECRET_TEST
  9101  3342  3445               	retlw	low (STR_10| (0+32768))
  9102  3343  34BA               	retlw	high (STR_10| (0+32768))
  9103                           
  9104                           	psect	idataBANK2
  9105  3240                     __pidataBANK2:	
  9106                           
  9107                           ;initializer for marquee_speedy@F14090
  9108  3240  3420               	retlw	32
  9109  3241  3420               	retlw	32
  9110  3242  3420               	retlw	32
  9111  3243  3420               	retlw	32
  9112  3244  3400               	retlw	0
  9113                           
  9114                           ;initializer for _FLASHY_TEXT
  9115  3245  34EA               	retlw	low (STR_9| (0+32768))
  9116  3246  34BB               	retlw	high (STR_9| (0+32768))
  9117                           
  9118                           	psect	idataBANK3
  9119  3514                     __pidataBANK3:	
  9120                           
  9121                           ;initializer for _Shot_Options
  9122  3514  34D1               	retlw	low (STR_46| (0+32768))
  9123  3515  34BB               	retlw	high (STR_46| (0+32768))
  9124  3516  34C7               	retlw	low (STR_47| (0+32768))
  9125  3517  34BB               	retlw	high (STR_47| (0+32768))
  9126  3518  34AE               	retlw	low (STR_48| (0+32768))
  9127  3519  34BB               	retlw	high (STR_48| (0+32768))
  9128  351A  34D6               	retlw	low (STR_49| (0+32768))
  9129  351B  34BB               	retlw	high (STR_49| (0+32768))
  9130  351C  34B3               	retlw	low (STR_50| (0+32768))
  9131  351D  34BB               	retlw	high (STR_50| (0+32768))
  9132  351E  34BD               	retlw	low (STR_51| (0+32768))
  9133  351F  34BB               	retlw	high (STR_51| (0+32768))
  9134  3520  34C2               	retlw	low (STR_52| (0+32768))
  9135  3521  34BB               	retlw	high (STR_52| (0+32768))
  9136  3522  34B8               	retlw	low (STR_53| (0+32768))
  9137  3523  34BB               	retlw	high (STR_53| (0+32768))
  9138  3524  34CC               	retlw	low (STR_54| (0+32768))
  9139  3525  34BB               	retlw	high (STR_54| (0+32768))
  9140                           
  9141                           ;initializer for _locked_locking_leds
  9142  3526  3400               	retlw	0
  9143  3527  3400               	retlw	0
  9144  3528  3420               	retlw	32
  9145  3529  3400               	retlw	0
  9146  352A  3460               	retlw	96
  9147  352B  3400               	retlw	0
  9148  352C  34E0               	retlw	224
  9149  352D  3400               	retlw	0
  9150  352E  34E0               	retlw	224
  9151  352F  3401               	retlw	1
  9152  3530  34E0               	retlw	224
  9153  3531  3403               	retlw	3
  9154                           
  9155                           	psect	idataBANK4
  9156  29F3                     __pidataBANK4:	
  9157                           
  9158                           ;initializer for _menu_options_leds
  9159  29F3  3400               	retlw	0
  9160  29F4  3402               	retlw	2
  9161  29F5  3400               	retlw	0
  9162  29F6  3401               	retlw	1
  9163  29F7  3480               	retlw	128
  9164  29F8  3400               	retlw	0
  9165  29F9  3440               	retlw	64
  9166  29FA  3400               	retlw	0
  9167  29FB  3420               	retlw	32
  9168  29FC  3400               	retlw	0
  9169                           
  9170                           ;initializer for _menu_option
  9171  29FD  34EF               	retlw	low (STR_4| (0+32768))
  9172  29FE  34BB               	retlw	high (STR_4| (0+32768))
  9173  29FF  34A3               	retlw	low (STR_5| (0+32768))
  9174  2A00  34BB               	retlw	high (STR_5| (0+32768))
  9175  2A01  34F7               	retlw	low (STR_6| (0+32768))
  9176  2A02  34BA               	retlw	high (STR_6| (0+32768))
  9177  2A03  3466               	retlw	low (STR_7| (0+32768))
  9178  2A04  34BB               	retlw	high (STR_7| (0+32768))
  9179  2A05  349D               	retlw	low (STR_8| (0+32768))
  9180  2A06  34BB               	retlw	high (STR_8| (0+32768))
  9181                           
  9182                           ;initializer for _secret_inputs
  9183  2A07  3401               	retlw	1
  9184  2A08  3401               	retlw	1
  9185  2A09  3402               	retlw	2
  9186  2A0A  3402               	retlw	2
  9187  2A0B  3401               	retlw	1
  9188  2A0C  3402               	retlw	2
  9189  2A0D  3401               	retlw	1
  9190  2A0E  3402               	retlw	2
  9191  2A0F  3404               	retlw	4
  9192  2A10  3408               	retlw	8
  9193  2A11  3400               	retlw	0
  9194  2A12  3400               	retlw	0
  9195  2A13  3400               	retlw	0
  9196  2A14  3400               	retlw	0
  9197  2A15  3400               	retlw	0
  9198  2A16  3400               	retlw	0
  9199  2A17  3400               	retlw	0
  9200  2A18  3400               	retlw	0
  9201  2A19  3400               	retlw	0
  9202  2A1A  3400               	retlw	0
  9203  2A1B  3400               	retlw	0
  9204  2A1C  3400               	retlw	0
  9205  2A1D  34C5               	retlw	low (_secret_value| 0)
  9206  2A1E  3401               	retlw	1
  9207  2A1F  3400               	retlw	0
  9208                           
  9209                           ;initializer for _locked_secret_inputs
  9210  2A20  3408               	retlw	8
  9211  2A21  3402               	retlw	2
  9212  2A22  3408               	retlw	8
  9213  2A23  3401               	retlw	1
  9214  2A24  3400               	retlw	0
  9215  2A25  3400               	retlw	0
  9216  2A26  3400               	retlw	0
  9217  2A27  3400               	retlw	0
  9218  2A28  3400               	retlw	0
  9219  2A29  3400               	retlw	0
  9220  2A2A  3400               	retlw	0
  9221  2A2B  3400               	retlw	0
  9222  2A2C  3400               	retlw	0
  9223  2A2D  3400               	retlw	0
  9224  2A2E  3400               	retlw	0
  9225  2A2F  3400               	retlw	0
  9226  2A30  3400               	retlw	0
  9227  2A31  3400               	retlw	0
  9228  2A32  3400               	retlw	0
  9229  2A33  3400               	retlw	0
  9230  2A34  3400               	retlw	0
  9231  2A35  3400               	retlw	0
  9232  2A36  34C5               	retlw	low (_secret_value| 0)
  9233  2A37  3401               	retlw	1
  9234  2A38  3400               	retlw	0
  9235                           
  9236                           	psect	idataBANK5
  9237  0800                     __pidataBANK5:	
  9238                           
  9239                           ;initializer for _matrix_secret_inputs
  9240  0800  3401               	retlw	1
  9241  0801  3408               	retlw	8
  9242  0802  3402               	retlw	2
  9243  0803  3404               	retlw	4
  9244  0804  3405               	retlw	5
  9245  0805  3409               	retlw	9
  9246  0806  3403               	retlw	3
  9247  0807  3400               	retlw	0
  9248  0808  3400               	retlw	0
  9249  0809  3400               	retlw	0
  9250  080A  3400               	retlw	0
  9251  080B  3400               	retlw	0
  9252  080C  3400               	retlw	0
  9253  080D  3400               	retlw	0
  9254  080E  3400               	retlw	0
  9255  080F  3400               	retlw	0
  9256  0810  3400               	retlw	0
  9257  0811  3400               	retlw	0
  9258  0812  3400               	retlw	0
  9259  0813  3400               	retlw	0
  9260  0814  3400               	retlw	0
  9261  0815  3400               	retlw	0
  9262  0816  34C5               	retlw	low (_secret_value| 0)
  9263  0817  3401               	retlw	1
  9264  0818  3400               	retlw	0
  9265                           
  9266                           	psect	idataBANK6
  9267  2AC8                     __pidataBANK6:	
  9268                           
  9269                           ;initializer for _Shot_Options_Long
  9270  2AC8  344E               	retlw	low (STR_55| (0+32768))
  9271  2AC9  34BB               	retlw	high (STR_55| (0+32768))
  9272  2ACA  3446               	retlw	low (STR_56| (0+32768))
  9273  2ACB  34BB               	retlw	high (STR_56| (0+32768))
  9274  2ACC  340A               	retlw	low (STR_57| (0+32768))
  9275  2ACD  34BB               	retlw	high (STR_57| (0+32768))
  9276  2ACE  34E2               	retlw	low (STR_58| (0+32768))
  9277  2ACF  34BA               	retlw	high (STR_58| (0+32768))
  9278  2AD0  34D7               	retlw	low (STR_59| (0+32768))
  9279  2AD1  34BA               	retlw	high (STR_59| (0+32768))
  9280  2AD2  343E               	retlw	low (STR_60| (0+32768))
  9281  2AD3  34BB               	retlw	high (STR_60| (0+32768))
  9282  2AD4  34BF               	retlw	low (STR_61| (0+32768))
  9283  2AD5  34BA               	retlw	high (STR_61| (0+32768))
  9284  2AD6  3498               	retlw	low (STR_62| (0+32768))
  9285  2AD7  34BA               	retlw	high (STR_62| (0+32768))
  9286  2AD8  3413               	retlw	low (STR_63| (0+32768))
  9287  2AD9  34BB               	retlw	high (STR_63| (0+32768))
  9288                           
  9289                           ;initializer for _Slot_Wheel
  9290  2ADA  3441               	retlw	65
  9291  2ADB  3442               	retlw	66
  9292  2ADC  3443               	retlw	67
  9293  2ADD  3444               	retlw	68
  9294  2ADE  3445               	retlw	69
  9295  2ADF  3446               	retlw	70
  9296  2AE0  3447               	retlw	71
  9297  2AE1  3448               	retlw	72
  9298  2AE2  3449               	retlw	73
  9299  2AE3  344A               	retlw	74
  9300  2AE4  344B               	retlw	75
  9301  2AE5  344C               	retlw	76
  9302  2AE6  344D               	retlw	77
  9303  2AE7  344E               	retlw	78
  9304  2AE8  344F               	retlw	79
  9305  2AE9  3450               	retlw	80
  9306  2AEA  3451               	retlw	81
  9307  2AEB  3452               	retlw	82
  9308  2AEC  3453               	retlw	83
  9309  2AED  3454               	retlw	84
  9310  2AEE  3455               	retlw	85
  9311  2AEF  3456               	retlw	86
  9312  2AF0  3457               	retlw	87
  9313  2AF1  3458               	retlw	88
  9314  2AF2  3459               	retlw	89
  9315  2AF3  345A               	retlw	90
  9316  2AF4  3430               	retlw	48
  9317  2AF5  3431               	retlw	49
  9318  2AF6  3432               	retlw	50
  9319  2AF7  3433               	retlw	51
  9320  2AF8  3434               	retlw	52
  9321  2AF9  3435               	retlw	53
  9322  2AFA  3436               	retlw	54
  9323  2AFB  3437               	retlw	55
  9324  2AFC  3438               	retlw	56
  9325  2AFD  3439               	retlw	57
  9326  2AFE  343C               	retlw	60
  9327  2AFF  343E               	retlw	62
  9328  2B00  3421               	retlw	33
  9329  2B01  3424               	retlw	36
  9330  2B02  3425               	retlw	37
  9331  2B03  3426               	retlw	38
  9332  2B04  342D               	retlw	45
  9333  2B05  3423               	retlw	35
  9334  2B06  342A               	retlw	42
  9335  2B07  342B               	retlw	43
  9336  2B08  342D               	retlw	45
  9337  2B09  342E               	retlw	46
  9338  2B0A  3440               	retlw	64
  9339  2B0B  343B               	retlw	59
  9340  2B0C  343A               	retlw	58
  9341  2B0D  3427               	retlw	39
  9342  2B0E  3422               	retlw	34
  9343  2B0F  342F               	retlw	47
  9344  2B10  345C               	retlw	92
  9345                           
  9346                           	psect	idataBANK7
  9347  2B5B                     __pidataBANK7:	
  9348                           
  9349                           ;initializer for _roundabout_leds_inverse
  9350  2B5B  3480               	retlw	128
  9351  2B5C  3400               	retlw	0
  9352  2B5D  3440               	retlw	64
  9353  2B5E  3400               	retlw	0
  9354  2B5F  3420               	retlw	32
  9355  2B60  3400               	retlw	0
  9356  2B61  3410               	retlw	16
  9357  2B62  3400               	retlw	0
  9358  2B63  3408               	retlw	8
  9359  2B64  3400               	retlw	0
  9360  2B65  3404               	retlw	4
  9361  2B66  3400               	retlw	0
  9362  2B67  3402               	retlw	2
  9363  2B68  3400               	retlw	0
  9364  2B69  3401               	retlw	1
  9365  2B6A  3400               	retlw	0
  9366  2B6B  3402               	retlw	2
  9367  2B6C  3400               	retlw	0
  9368  2B6D  3404               	retlw	4
  9369  2B6E  3400               	retlw	0
  9370  2B6F  3408               	retlw	8
  9371  2B70  3400               	retlw	0
  9372  2B71  3410               	retlw	16
  9373  2B72  3400               	retlw	0
  9374  2B73  3420               	retlw	32
  9375  2B74  3400               	retlw	0
  9376  2B75  3440               	retlw	64
  9377  2B76  3400               	retlw	0
  9378                           
  9379                           ;initializer for _roundabout_leds
  9380  2B77  3480               	retlw	128
  9381  2B78  3400               	retlw	0
  9382  2B79  3400               	retlw	0
  9383  2B7A  3401               	retlw	1
  9384  2B7B  3400               	retlw	0
  9385  2B7C  3402               	retlw	2
  9386  2B7D  3400               	retlw	0
  9387  2B7E  3408               	retlw	8
  9388  2B7F  3400               	retlw	0
  9389  2B80  3410               	retlw	16
  9390  2B81  3400               	retlw	0
  9391  2B82  3420               	retlw	32
  9392  2B83  3400               	retlw	0
  9393  2B84  3440               	retlw	64
  9394  2B85  3400               	retlw	0
  9395  2B86  3480               	retlw	128
  9396  2B87  3400               	retlw	0
  9397  2B88  3440               	retlw	64
  9398  2B89  3400               	retlw	0
  9399  2B8A  3420               	retlw	32
  9400  2B8B  3400               	retlw	0
  9401  2B8C  3410               	retlw	16
  9402  2B8D  3400               	retlw	0
  9403  2B8E  3408               	retlw	8
  9404  2B8F  3400               	retlw	0
  9405  2B90  3402               	retlw	2
  9406  2B91  3400               	retlw	0
  9407  2B92  3401               	retlw	1
  9408                           
  9409                           ;initializer for _matrix_option
  9410  2B93  348A               	retlw	low (STR_70| (0+32768))
  9411  2B94  34BB               	retlw	high (STR_70| (0+32768))
  9412  2B95  3475               	retlw	low (STR_71| (0+32768))
  9413  2B96  34BB               	retlw	high (STR_71| (0+32768))
  9414  2B97  3401               	retlw	low (STR_72| (0+32768))
  9415  2B98  34BB               	retlw	high (STR_72| (0+32768))
  9416  2B99  347C               	retlw	low (STR_73| (0+32768))
  9417  2B9A  34BB               	retlw	high (STR_73| (0+32768))
  9418  2B9B  34A9               	retlw	low (STR_74| (0+32768))
  9419  2B9C  34BB               	retlw	high (STR_74| (0+32768))
  9420  2B9D  34ED               	retlw	low (STR_75| (0+32768))
  9421  2B9E  34BA               	retlw	high (STR_75| (0+32768))
  9422  2B9F  3491               	retlw	low (STR_76| (0+32768))
  9423  2BA0  34BB               	retlw	high (STR_76| (0+32768))
  9424  2BA1  342E               	retlw	low (STR_77| (0+32768))
  9425  2BA2  34BB               	retlw	high (STR_77| (0+32768))
  9426  2BA3  3483               	retlw	low (STR_78| (0+32768))
  9427  2BA4  34BB               	retlw	high (STR_78| (0+32768))
  9428  2BA5  3436               	retlw	low (STR_79| (0+32768))
  9429  2BA6  34BB               	retlw	high (STR_79| (0+32768))
  9430                           
  9431                           	psect	idataBANK8
  9432  3714                     __pidataBANK8:	
  9433                           
  9434                           ;initializer for _curtain_leds_inverse
  9435  3714  3480               	retlw	128
  9436  3715  3400               	retlw	0
  9437  3716  34C0               	retlw	192
  9438  3717  3400               	retlw	0
  9439  3718  34E0               	retlw	224
  9440  3719  3400               	retlw	0
  9441  371A  34F0               	retlw	240
  9442  371B  3400               	retlw	0
  9443  371C  34F8               	retlw	248
  9444  371D  3400               	retlw	0
  9445  371E  34FC               	retlw	252
  9446  371F  3400               	retlw	0
  9447  3720  34FE               	retlw	254
  9448  3721  3400               	retlw	0
  9449  3722  34FF               	retlw	255
  9450  3723  3400               	retlw	0
  9451  3724  34FE               	retlw	254
  9452  3725  3400               	retlw	0
  9453  3726  34FC               	retlw	252
  9454  3727  3400               	retlw	0
  9455  3728  34F8               	retlw	248
  9456  3729  3400               	retlw	0
  9457  372A  34F0               	retlw	240
  9458  372B  3400               	retlw	0
  9459  372C  34E0               	retlw	224
  9460  372D  3400               	retlw	0
  9461  372E  34C0               	retlw	192
  9462  372F  3400               	retlw	0
  9463                           
  9464                           ;initializer for _curtain_leds
  9465  3730  3480               	retlw	128
  9466  3731  3400               	retlw	0
  9467  3732  3480               	retlw	128
  9468  3733  3401               	retlw	1
  9469  3734  3480               	retlw	128
  9470  3735  3403               	retlw	3
  9471  3736  3480               	retlw	128
  9472  3737  340B               	retlw	11
  9473  3738  3480               	retlw	128
  9474  3739  341B               	retlw	27
  9475  373A  3480               	retlw	128
  9476  373B  343B               	retlw	59
  9477  373C  3480               	retlw	128
  9478  373D  347B               	retlw	123
  9479  373E  3480               	retlw	128
  9480  373F  34FB               	retlw	251
  9481  3740  3480               	retlw	128
  9482  3741  347B               	retlw	123
  9483  3742  3480               	retlw	128
  9484  3743  343B               	retlw	59
  9485  3744  3480               	retlw	128
  9486  3745  341B               	retlw	27
  9487  3746  3480               	retlw	128
  9488  3747  340B               	retlw	11
  9489  3748  3480               	retlw	128
  9490  3749  3403               	retlw	3
  9491  374A  3480               	retlw	128
  9492  374B  3401               	retlw	1
  9493                           
  9494                           	psect	idataBANK10
  9495  3785                     __pidataBANK10:	
  9496                           
  9497                           ;initializer for _flashy_option
  9498  3785  34EA               	retlw	low (STR_9| (0+32768))
  9499  3786  34BB               	retlw	high (STR_9| (0+32768))
  9500  3787  3425               	retlw	low (STR_12| (0+32768))
  9501  3788  34BB               	retlw	high (STR_12| (0+32768))
  9502  3789  345E               	retlw	low (STR_13| (0+32768))
  9503  378A  34BB               	retlw	high (STR_13| (0+32768))
  9504  378B  3497               	retlw	low (STR_14| (0+32768))
  9505  378C  34BB               	retlw	high (STR_14| (0+32768))
  9506  378D  3432               	retlw	low (STR_15| (0+32768))
  9507  378E  34BA               	retlw	high (STR_15| (0+32768))
  9508  378F  340A               	retlw	low (STR_16| (0+32768))
  9509  3790  34BA               	retlw	high (STR_16| (0+32768))
  9510  3791  34C3               	retlw	low (STR_17| (0+32768))
  9511  3792  34B9               	retlw	high (STR_17| (0+32768))
  9512  3793  3456               	retlw	low (STR_18| (0+32768))
  9513  3794  34BB               	retlw	high (STR_18| (0+32768))
  9514  3795  34F4               	retlw	low (STR_19| (0+32768))
  9515  3796  34B9               	retlw	high (STR_19| (0+32768))
  9516  3797  3471               	retlw	low (STR_20| (0+32768))
  9517  3798  34B9               	retlw	high (STR_20| (0+32768))
  9518  3799  34B0               	retlw	low (STR_21| (0+32768))
  9519  379A  34B8               	retlw	high (STR_21| (0+32768))
  9520  379B  3419               	retlw	low (STR_22| (0+32768))
  9521  379C  34B9               	retlw	high (STR_22| (0+32768))
  9522  379D  3454               	retlw	low (STR_23| (0+32768))
  9523  379E  34B9               	retlw	high (STR_23| (0+32768))
  9524  379F  34A8               	retlw	low (STR_24| (0+32768))
  9525  37A0  34B9               	retlw	high (STR_24| (0+32768))
  9526  37A1  3488               	retlw	low (STR_25| (0+32768))
  9527  37A2  34B8               	retlw	high (STR_25| (0+32768))
  9528  37A3  3457               	retlw	low (STR_26| (0+32768))
  9529  37A4  34BA               	retlw	high (STR_26| (0+32768))
  9530  37A5  341F               	retlw	low (STR_27| (0+32768))
  9531  37A6  34BA               	retlw	high (STR_27| (0+32768))
  9532  37A7  3437               	retlw	low (STR_28| (0+32768))
  9533  37A8  34B9               	retlw	high (STR_28| (0+32768))
  9534  37A9  34CB               	retlw	low (STR_29| (0+32768))
  9535  37AA  34BA               	retlw	high (STR_29| (0+32768))
  9536  37AB  3489               	retlw	low (STR_30| (0+32768))
  9537  37AC  34BA               	retlw	high (STR_30| (0+32768))
  9538  37AD  34D4               	retlw	low (STR_31| (0+32768))
  9539  37AE  34B8               	retlw	high (STR_31| (0+32768))
  9540  37AF  3479               	retlw	low (STR_32| (0+32768))
  9541  37B0  34BA               	retlw	high (STR_32| (0+32768))
  9542  37B1  34F7               	retlw	low (STR_33| (0+32768))
  9543  37B2  34B8               	retlw	high (STR_33| (0+32768))
  9544  37B3  340A               	retlw	low (STR_34| (0+32768))
  9545  37B4  34A8               	retlw	high (STR_34| (0+32768))
  9546  37B5  3468               	retlw	low (STR_35| (0+32768))
  9547  37B6  34BA               	retlw	high (STR_35| (0+32768))
  9548  37B7  3400               	retlw	low (STR_36| (0+32768))
  9549  37B8  34B8               	retlw	high (STR_36| (0+32768))
  9550  37B9  34B2               	retlw	low (STR_37| (0+32768))
  9551  37BA  34BA               	retlw	high (STR_37| (0+32768))
  9552  37BB  345D               	retlw	low (STR_38| (0+32768))
  9553  37BC  34B8               	retlw	high (STR_38| (0+32768))
  9554  37BD  347D               	retlw	low ((STR_34+115)| (0+32768))
  9555  37BE  34A8               	retlw	high ((STR_34+115)| (0+32768))
  9556                           
  9557                           	psect	idataBIGRAM
  9558  2700                     __pidataBIGRAM:	
  9559                           
  9560                           ;initializer for _asciiCharTableLookup
  9561  2700  3400               	retlw	0
  9562  2701  3400               	retlw	0
  9563  2702  3400               	retlw	0
  9564  2703  3420               	retlw	32
  9565  2704  3410               	retlw	16
  9566  2705  3410               	retlw	16
  9567  2706  3420               	retlw	32
  9568  2707  3400               	retlw	0
  9569  2708  3410               	retlw	16
  9570  2709  3410               	retlw	16
  9571  270A  34A5               	retlw	165
  9572  270B  3421               	retlw	33
  9573  270C  34A5               	retlw	165
  9574  270D  3460               	retlw	96
  9575  270E  3410               	retlw	16
  9576  270F  3430               	retlw	48
  9577  2710  3400               	retlw	0
  9578  2711  3412               	retlw	18
  9579  2712  3410               	retlw	16
  9580  2713  3408               	retlw	8
  9581  2714  3420               	retlw	32
  9582  2715  3420               	retlw	32
  9583  2716  3485               	retlw	133
  9584  2717  3445               	retlw	69
  9585  2718  34B1               	retlw	177
  9586  2719  3430               	retlw	48
  9587  271A  3410               	retlw	16
  9588  271B  3410               	retlw	16
  9589  271C  3410               	retlw	16
  9590  271D  3410               	retlw	16
  9591  271E  3410               	retlw	16
  9592  271F  3410               	retlw	16
  9593  2720  3410               	retlw	16
  9594  2721  3410               	retlw	16
  9595  2722  3410               	retlw	16
  9596  2723  3410               	retlw	16
  9597  2724  3410               	retlw	16
  9598  2725  3410               	retlw	16
  9599  2726  3410               	retlw	16
  9600  2727  3410               	retlw	16
  9601  2728  3410               	retlw	16
  9602  2729  3410               	retlw	16
  9603  272A  3410               	retlw	16
  9604  272B  3410               	retlw	16
  9605  272C  3410               	retlw	16
  9606  272D  3410               	retlw	16
  9607  272E  3410               	retlw	16
  9608  272F  3410               	retlw	16
  9609  2730  3410               	retlw	16
  9610  2731  3410               	retlw	16
  9611  2732  3410               	retlw	16
  9612  2733  3410               	retlw	16
  9613  2734  3410               	retlw	16
  9614  2735  3410               	retlw	16
  9615  2736  3410               	retlw	16
  9616  2737  3410               	retlw	16
  9617  2738  3410               	retlw	16
  9618  2739  3410               	retlw	16
  9619  273A  3410               	retlw	16
  9620  273B  3410               	retlw	16
  9621  273C  3410               	retlw	16
  9622  273D  3410               	retlw	16
  9623  273E  3410               	retlw	16
  9624  273F  3410               	retlw	16
  9625  2740  3400               	retlw	0
  9626  2741  3400               	retlw	0
  9627  2742  34C0               	retlw	192
  9628  2743  3440               	retlw	64
  9629  2744  3400               	retlw	0
  9630  2745  3444               	retlw	68
  9631  2746  3410               	retlw	16
  9632  2747  3410               	retlw	16
  9633  2748  34B4               	retlw	180
  9634  2749  3435               	retlw	53
  9635  274A  3410               	retlw	16
  9636  274B  3410               	retlw	16
  9637  274C  3410               	retlw	16
  9638  274D  3410               	retlw	16
  9639  274E  3400               	retlw	0
  9640  274F  3404               	retlw	4
  9641  2750  3408               	retlw	8
  9642  2751  3408               	retlw	8
  9643  2752  3402               	retlw	2
  9644  2753  3402               	retlw	2
  9645  2754  341E               	retlw	30
  9646  2755  341E               	retlw	30
  9647  2756  3414               	retlw	20
  9648  2757  3414               	retlw	20
  9649  2758  3440               	retlw	64
  9650  2759  3400               	retlw	0
  9651  275A  3410               	retlw	16
  9652  275B  3410               	retlw	16
  9653  275C  3440               	retlw	64
  9654  275D  3400               	retlw	0
  9655  275E  3402               	retlw	2
  9656  275F  3408               	retlw	8
  9657  2760  34A9               	retlw	169
  9658  2761  3463               	retlw	99
  9659  2762  3480               	retlw	128
  9660  2763  3440               	retlw	64
  9661  2764  3431               	retlw	49
  9662  2765  3470               	retlw	112
  9663  2766  34B0               	retlw	176
  9664  2767  3460               	retlw	96
  9665  2768  3490               	retlw	144
  9666  2769  3451               	retlw	81
  9667  276A  34B0               	retlw	176
  9668  276B  3431               	retlw	49
  9669  276C  34B1               	retlw	177
  9670  276D  3431               	retlw	49
  9671  276E  3480               	retlw	128
  9672  276F  3460               	retlw	96
  9673  2770  34B1               	retlw	177
  9674  2771  3471               	retlw	113
  9675  2772  3490               	retlw	144
  9676  2773  3471               	retlw	113
  9677  2774  3410               	retlw	16
  9678  2775  3410               	retlw	16
  9679  2776  3410               	retlw	16
  9680  2777  3410               	retlw	16
  9681  2778  3408               	retlw	8
  9682  2779  3408               	retlw	8
  9683  277A  3430               	retlw	48
  9684  277B  3410               	retlw	16
  9685  277C  3402               	retlw	2
  9686  277D  3402               	retlw	2
  9687  277E  3414               	retlw	20
  9688  277F  34E1               	retlw	225
  9689  2780  34A5               	retlw	165
  9690  2781  3470               	retlw	112
  9691  2782  3491               	retlw	145
  9692  2783  3471               	retlw	113
  9693  2784  34B1               	retlw	177
  9694  2785  3411               	retlw	17
  9695  2786  3421               	retlw	33
  9696  2787  3421               	retlw	33
  9697  2788  34B1               	retlw	177
  9698  2789  3450               	retlw	80
  9699  278A  3421               	retlw	33
  9700  278B  3431               	retlw	49
  9701  278C  3401               	retlw	1
  9702  278D  3431               	retlw	49
  9703  278E  34B1               	retlw	177
  9704  278F  3421               	retlw	33
  9705  2790  3491               	retlw	145
  9706  2791  3451               	retlw	81
  9707  2792  3424               	retlw	36
  9708  2793  3424               	retlw	36
  9709  2794  34A1               	retlw	161
  9710  2795  3440               	retlw	64
  9711  2796  3409               	retlw	9
  9712  2797  3419               	retlw	25
  9713  2798  3421               	retlw	33
  9714  2799  3401               	retlw	1
  9715  279A  3481               	retlw	129
  9716  279B  344B               	retlw	75
  9717  279C  3489               	retlw	137
  9718  279D  3443               	retlw	67
  9719  279E  34A1               	retlw	161
  9720  279F  3461               	retlw	97
  9721  27A0  3411               	retlw	17
  9722  27A1  3471               	retlw	113
  9723  27A2  34A9               	retlw	169
  9724  27A3  3461               	retlw	97
  9725  27A4  3419               	retlw	25
  9726  27A5  3471               	retlw	113
  9727  27A6  34B0               	retlw	176
  9728  27A7  3431               	retlw	49
  9729  27A8  3404               	retlw	4
  9730  27A9  3424               	retlw	36
  9731  27AA  34A1               	retlw	161
  9732  27AB  3441               	retlw	65
  9733  27AC  3403               	retlw	3
  9734  27AD  3409               	retlw	9
  9735  27AE  348B               	retlw	139
  9736  27AF  3441               	retlw	65
  9737  27B0  340A               	retlw	10
  9738  27B1  340A               	retlw	10
  9739  27B2  3404               	retlw	4
  9740  27B3  340A               	retlw	10
  9741  27B4  3422               	retlw	34
  9742  27B5  3428               	retlw	40
  9743  27B6  3421               	retlw	33
  9744  27B7  3421               	retlw	33
  9745  27B8  3408               	retlw	8
  9746  27B9  3402               	retlw	2
  9747  27BA  340A               	retlw	10
  9748  27BB  3400               	retlw	0
  9749  27BC  3420               	retlw	32
  9750  27BD  3400               	retlw	0
  9751  27BE  3410               	retlw	16
  9752  27BF  3410               	retlw	16
  9753  27C0  3491               	retlw	145
  9754  27C1  3471               	retlw	113
  9755  27C2  34B1               	retlw	177
  9756  27C3  3411               	retlw	17
  9757  27C4  3431               	retlw	49
  9758  27C5  3410               	retlw	16
  9759  27C6  34B1               	retlw	177
  9760  27C7  3450               	retlw	80
  9761  27C8  3421               	retlw	33
  9762  27C9  3431               	retlw	49
  9763  27CA  3401               	retlw	1
  9764  27CB  3431               	retlw	49
  9765  27CC  34B1               	retlw	177
  9766  27CD  3421               	retlw	33
  9767  27CE  3491               	retlw	145
  9768  27CF  3451               	retlw	81
  9769  27D0  3424               	retlw	36
  9770  27D1  3424               	retlw	36
  9771  27D2  34A1               	retlw	161
  9772  27D3  3440               	retlw	64
  9773  27D4  3409               	retlw	9
  9774  27D5  3419               	retlw	25
  9775  27D6  3421               	retlw	33
  9776  27D7  3401               	retlw	1
  9777  27D8  3481               	retlw	129
  9778  27D9  344B               	retlw	75
  9779  27DA  3489               	retlw	137
  9780  27DB  3443               	retlw	67
  9781  27DC  34A1               	retlw	161
  9782  27DD  3461               	retlw	97
  9783  27DE  3411               	retlw	17
  9784  27DF  3471               	retlw	113
  9785  27E0  34A9               	retlw	169
  9786  27E1  3461               	retlw	97
  9787  27E2  3419               	retlw	25
  9788  27E3  3471               	retlw	113
  9789  27E4  34B0               	retlw	176
  9790  27E5  3431               	retlw	49
  9791  27E6  3404               	retlw	4
  9792  27E7  3424               	retlw	36
  9793  27E8  34A1               	retlw	161
  9794  27E9  3441               	retlw	65
  9795  27EA  3403               	retlw	3
  9796  27EB  3409               	retlw	9
  9797  27EC  348B               	retlw	139
  9798  27ED  3441               	retlw	65
  9799  27EE  340A               	retlw	10
  9800  27EF  340A               	retlw	10
  9801  27F0  3404               	retlw	4
  9802  27F1  340A               	retlw	10
  9803  27F2  3422               	retlw	34
  9804  27F3  3428               	retlw	40
  9805  27F4  3408               	retlw	8
  9806  27F5  3408               	retlw	8
  9807  27F6  3404               	retlw	4
  9808  27F7  3404               	retlw	4
  9809  27F8  3402               	retlw	2
  9810  27F9  3402               	retlw	2
  9811  27FA  3410               	retlw	16
  9812  27FB  3410               	retlw	16
  9813  27FC  34FF               	retlw	255
  9814  27FD  34FF               	retlw	255
  9815  27FE  3400               	retlw	0
  9816  27FF  3400               	retlw	0
  9817                           
  9818                           	psect	stringtext1
  9819  2000                     __pstringtext1:	
  9820  2000                     _gamma_table_256x1k:	
  9821  2000  3400               	retlw	0
  9822  2001  3400               	retlw	0
  9823  2002  3400               	retlw	0
  9824  2003  3400               	retlw	0
  9825  2004  3400               	retlw	0
  9826  2005  3400               	retlw	0
  9827  2006  3400               	retlw	0
  9828  2007  3400               	retlw	0
  9829  2008  3400               	retlw	0
  9830  2009  3400               	retlw	0
  9831  200A  3400               	retlw	0
  9832  200B  3400               	retlw	0
  9833  200C  3400               	retlw	0
  9834  200D  3400               	retlw	0
  9835  200E  3400               	retlw	0
  9836  200F  3400               	retlw	0
  9837  2010  3400               	retlw	0
  9838  2011  3400               	retlw	0
  9839  2012  3400               	retlw	0
  9840  2013  3400               	retlw	0
  9841  2014  3400               	retlw	0
  9842  2015  3400               	retlw	0
  9843  2016  3400               	retlw	0
  9844  2017  3400               	retlw	0
  9845  2018  3400               	retlw	0
  9846  2019  3400               	retlw	0
  9847  201A  3400               	retlw	0
  9848  201B  3400               	retlw	0
  9849  201C  3400               	retlw	0
  9850  201D  3400               	retlw	0
  9851  201E  3401               	retlw	1
  9852  201F  3400               	retlw	0
  9853  2020  3401               	retlw	1
  9854  2021  3400               	retlw	0
  9855  2022  3401               	retlw	1
  9856  2023  3400               	retlw	0
  9857  2024  3401               	retlw	1
  9858  2025  3400               	retlw	0
  9859  2026  3401               	retlw	1
  9860  2027  3400               	retlw	0
  9861  2028  3401               	retlw	1
  9862  2029  3400               	retlw	0
  9863  202A  3402               	retlw	2
  9864  202B  3400               	retlw	0
  9865  202C  3402               	retlw	2
  9866  202D  3400               	retlw	0
  9867  202E  3402               	retlw	2
  9868  202F  3400               	retlw	0
  9869  2030  3403               	retlw	3
  9870  2031  3400               	retlw	0
  9871  2032  3403               	retlw	3
  9872  2033  3400               	retlw	0
  9873  2034  3403               	retlw	3
  9874  2035  3400               	retlw	0
  9875  2036  3404               	retlw	4
  9876  2037  3400               	retlw	0
  9877  2038  3404               	retlw	4
  9878  2039  3400               	retlw	0
  9879  203A  3404               	retlw	4
  9880  203B  3400               	retlw	0
  9881  203C  3405               	retlw	5
  9882  203D  3400               	retlw	0
  9883  203E  3405               	retlw	5
  9884  203F  3400               	retlw	0
  9885  2040  3406               	retlw	6
  9886  2041  3400               	retlw	0
  9887  2042  3406               	retlw	6
  9888  2043  3400               	retlw	0
  9889  2044  3407               	retlw	7
  9890  2045  3400               	retlw	0
  9891  2046  3407               	retlw	7
  9892  2047  3400               	retlw	0
  9893  2048  3408               	retlw	8
  9894  2049  3400               	retlw	0
  9895  204A  3408               	retlw	8
  9896  204B  3400               	retlw	0
  9897  204C  3409               	retlw	9
  9898  204D  3400               	retlw	0
  9899  204E  3409               	retlw	9
  9900  204F  3400               	retlw	0
  9901  2050  340A               	retlw	10
  9902  2051  3400               	retlw	0
  9903  2052  340B               	retlw	11
  9904  2053  3400               	retlw	0
  9905  2054  340B               	retlw	11
  9906  2055  3400               	retlw	0
  9907  2056  340C               	retlw	12
  9908  2057  3400               	retlw	0
  9909  2058  340D               	retlw	13
  9910  2059  3400               	retlw	0
  9911  205A  340E               	retlw	14
  9912  205B  3400               	retlw	0
  9913  205C  340E               	retlw	14
  9914  205D  3400               	retlw	0
  9915  205E  340F               	retlw	15
  9916  205F  3400               	retlw	0
  9917  2060  3410               	retlw	16
  9918  2061  3400               	retlw	0
  9919  2062  3411               	retlw	17
  9920  2063  3400               	retlw	0
  9921  2064  3412               	retlw	18
  9922  2065  3400               	retlw	0
  9923  2066  3413               	retlw	19
  9924  2067  3400               	retlw	0
  9925  2068  3413               	retlw	19
  9926  2069  3400               	retlw	0
  9927  206A  3414               	retlw	20
  9928  206B  3400               	retlw	0
  9929  206C  3415               	retlw	21
  9930  206D  3400               	retlw	0
  9931  206E  3416               	retlw	22
  9932  206F  3400               	retlw	0
  9933  2070  3417               	retlw	23
  9934  2071  3400               	retlw	0
  9935  2072  3419               	retlw	25
  9936  2073  3400               	retlw	0
  9937  2074  341A               	retlw	26
  9938  2075  3400               	retlw	0
  9939  2076  341B               	retlw	27
  9940  2077  3400               	retlw	0
  9941  2078  341C               	retlw	28
  9942  2079  3400               	retlw	0
  9943  207A  341D               	retlw	29
  9944  207B  3400               	retlw	0
  9945  207C  341E               	retlw	30
  9946  207D  3400               	retlw	0
  9947  207E  3420               	retlw	32
  9948  207F  3400               	retlw	0
  9949  2080  3421               	retlw	33
  9950  2081  3400               	retlw	0
  9951  2082  3422               	retlw	34
  9952  2083  3400               	retlw	0
  9953  2084  3423               	retlw	35
  9954  2085  3400               	retlw	0
  9955  2086  3425               	retlw	37
  9956  2087  3400               	retlw	0
  9957  2088  3426               	retlw	38
  9958  2089  3400               	retlw	0
  9959  208A  3428               	retlw	40
  9960  208B  3400               	retlw	0
  9961  208C  3429               	retlw	41
  9962  208D  3400               	retlw	0
  9963  208E  342A               	retlw	42
  9964  208F  3400               	retlw	0
  9965  2090  342C               	retlw	44
  9966  2091  3400               	retlw	0
  9967  2092  342E               	retlw	46
  9968  2093  3400               	retlw	0
  9969  2094  342F               	retlw	47
  9970  2095  3400               	retlw	0
  9971  2096  3431               	retlw	49
  9972  2097  3400               	retlw	0
  9973  2098  3432               	retlw	50
  9974  2099  3400               	retlw	0
  9975  209A  3434               	retlw	52
  9976  209B  3400               	retlw	0
  9977  209C  3436               	retlw	54
  9978  209D  3400               	retlw	0
  9979  209E  3437               	retlw	55
  9980  209F  3400               	retlw	0
  9981  20A0  3439               	retlw	57
  9982  20A1  3400               	retlw	0
  9983  20A2  343B               	retlw	59
  9984  20A3  3400               	retlw	0
  9985  20A4  343D               	retlw	61
  9986  20A5  3400               	retlw	0
  9987  20A6  343F               	retlw	63
  9988  20A7  3400               	retlw	0
  9989  20A8  3441               	retlw	65
  9990  20A9  3400               	retlw	0
  9991  20AA  3442               	retlw	66
  9992  20AB  3400               	retlw	0
  9993  20AC  3444               	retlw	68
  9994  20AD  3400               	retlw	0
  9995  20AE  3446               	retlw	70
  9996  20AF  3400               	retlw	0
  9997  20B0  3448               	retlw	72
  9998  20B1  3400               	retlw	0
  9999  20B2  344B               	retlw	75
 10000  20B3  3400               	retlw	0
 10001  20B4  344D               	retlw	77
 10002  20B5  3400               	retlw	0
 10003  20B6  344F               	retlw	79
 10004  20B7  3400               	retlw	0
 10005  20B8  3451               	retlw	81
 10006  20B9  3400               	retlw	0
 10007  20BA  3453               	retlw	83
 10008  20BB  3400               	retlw	0
 10009  20BC  3455               	retlw	85
 10010  20BD  3400               	retlw	0
 10011  20BE  3458               	retlw	88
 10012  20BF  3400               	retlw	0
 10013  20C0  345A               	retlw	90
 10014  20C1  3400               	retlw	0
 10015  20C2  345C               	retlw	92
 10016  20C3  3400               	retlw	0
 10017  20C4  345F               	retlw	95
 10018  20C5  3400               	retlw	0
 10019  20C6  3461               	retlw	97
 10020  20C7  3400               	retlw	0
 10021  20C8  3464               	retlw	100
 10022  20C9  3400               	retlw	0
 10023  20CA  3466               	retlw	102
 10024  20CB  3400               	retlw	0
 10025  20CC  3469               	retlw	105
 10026  20CD  3400               	retlw	0
 10027  20CE  346B               	retlw	107
 10028  20CF  3400               	retlw	0
 10029  20D0  346E               	retlw	110
 10030  20D1  3400               	retlw	0
 10031  20D2  3470               	retlw	112
 10032  20D3  3400               	retlw	0
 10033  20D4  3473               	retlw	115
 10034  20D5  3400               	retlw	0
 10035  20D6  3476               	retlw	118
 10036  20D7  3400               	retlw	0
 10037  20D8  3479               	retlw	121
 10038  20D9  3400               	retlw	0
 10039  20DA  347B               	retlw	123
 10040  20DB  3400               	retlw	0
 10041  20DC  347E               	retlw	126
 10042  20DD  3400               	retlw	0
 10043  20DE  3481               	retlw	129
 10044  20DF  3400               	retlw	0
 10045  20E0  3484               	retlw	132
 10046  20E1  3400               	retlw	0
 10047  20E2  3487               	retlw	135
 10048  20E3  3400               	retlw	0
 10049  20E4  348A               	retlw	138
 10050  20E5  3400               	retlw	0
 10051  20E6  348D               	retlw	141
 10052  20E7  3400               	retlw	0
 10053  20E8  3490               	retlw	144
 10054  20E9  3400               	retlw	0
 10055  20EA  3493               	retlw	147
 10056  20EB  3400               	retlw	0
 10057  20EC  3496               	retlw	150
 10058  20ED  3400               	retlw	0
 10059  20EE  349A               	retlw	154
 10060  20EF  3400               	retlw	0
 10061  20F0  349D               	retlw	157
 10062  20F1  3400               	retlw	0
 10063  20F2  34A0               	retlw	160
 10064  20F3  3400               	retlw	0
 10065  20F4  34A3               	retlw	163
 10066  20F5  3400               	retlw	0
 10067  20F6  34A7               	retlw	167
 10068  20F7  3400               	retlw	0
 10069  20F8  34AA               	retlw	170
 10070  20F9  3400               	retlw	0
 10071  20FA  34AE               	retlw	174
 10072  20FB  3400               	retlw	0
 10073  20FC  34B1               	retlw	177
 10074  20FD  3400               	retlw	0
 10075  20FE  34B5               	retlw	181
 10076  20FF  3400               	retlw	0
 10077  2100  34B8               	retlw	184
 10078  2101  3400               	retlw	0
 10079  2102  34BC               	retlw	188
 10080  2103  3400               	retlw	0
 10081  2104  34BF               	retlw	191
 10082  2105  3400               	retlw	0
 10083  2106  34C3               	retlw	195
 10084  2107  3400               	retlw	0
 10085  2108  34C7               	retlw	199
 10086  2109  3400               	retlw	0
 10087  210A  34CA               	retlw	202
 10088  210B  3400               	retlw	0
 10089  210C  34CE               	retlw	206
 10090  210D  3400               	retlw	0
 10091  210E  34D2               	retlw	210
 10092  210F  3400               	retlw	0
 10093  2110  34D6               	retlw	214
 10094  2111  3400               	retlw	0
 10095  2112  34DA               	retlw	218
 10096  2113  3400               	retlw	0
 10097  2114  34DE               	retlw	222
 10098  2115  3400               	retlw	0
 10099  2116  34E2               	retlw	226
 10100  2117  3400               	retlw	0
 10101  2118  34E6               	retlw	230
 10102  2119  3400               	retlw	0
 10103  211A  34EA               	retlw	234
 10104  211B  3400               	retlw	0
 10105  211C  34EE               	retlw	238
 10106  211D  3400               	retlw	0
 10107  211E  34F3               	retlw	243
 10108  211F  3400               	retlw	0
 10109  2120  34F7               	retlw	247
 10110  2121  3400               	retlw	0
 10111  2122  34FB               	retlw	251
 10112  2123  3400               	retlw	0
 10113  2124  34FF               	retlw	255
 10114  2125  3400               	retlw	0
 10115  2126  3404               	retlw	4
 10116  2127  3401               	retlw	1
 10117  2128  3408               	retlw	8
 10118  2129  3401               	retlw	1
 10119  212A  340D               	retlw	13
 10120  212B  3401               	retlw	1
 10121  212C  3411               	retlw	17
 10122  212D  3401               	retlw	1
 10123  212E  3416               	retlw	22
 10124  212F  3401               	retlw	1
 10125  2130  341A               	retlw	26
 10126  2131  3401               	retlw	1
 10127  2132  341F               	retlw	31
 10128  2133  3401               	retlw	1
 10129  2134  3424               	retlw	36
 10130  2135  3401               	retlw	1
 10131  2136  3428               	retlw	40
 10132  2137  3401               	retlw	1
 10133  2138  342D               	retlw	45
 10134  2139  3401               	retlw	1
 10135  213A  3432               	retlw	50
 10136  213B  3401               	retlw	1
 10137  213C  3437               	retlw	55
 10138  213D  3401               	retlw	1
 10139  213E  343C               	retlw	60
 10140  213F  3401               	retlw	1
 10141  2140  3441               	retlw	65
 10142  2141  3401               	retlw	1
 10143  2142  3446               	retlw	70
 10144  2143  3401               	retlw	1
 10145  2144  344B               	retlw	75
 10146  2145  3401               	retlw	1
 10147  2146  3450               	retlw	80
 10148  2147  3401               	retlw	1
 10149  2148  3455               	retlw	85
 10150  2149  3401               	retlw	1
 10151  214A  345A               	retlw	90
 10152  214B  3401               	retlw	1
 10153  214C  345F               	retlw	95
 10154  214D  3401               	retlw	1
 10155  214E  3465               	retlw	101
 10156  214F  3401               	retlw	1
 10157  2150  346A               	retlw	106
 10158  2151  3401               	retlw	1
 10159  2152  346F               	retlw	111
 10160  2153  3401               	retlw	1
 10161  2154  3475               	retlw	117
 10162  2155  3401               	retlw	1
 10163  2156  347A               	retlw	122
 10164  2157  3401               	retlw	1
 10165  2158  3480               	retlw	128
 10166  2159  3401               	retlw	1
 10167  215A  3486               	retlw	134
 10168  215B  3401               	retlw	1
 10169  215C  348B               	retlw	139
 10170  215D  3401               	retlw	1
 10171  215E  3491               	retlw	145
 10172  215F  3401               	retlw	1
 10173  2160  3497               	retlw	151
 10174  2161  3401               	retlw	1
 10175  2162  349C               	retlw	156
 10176  2163  3401               	retlw	1
 10177  2164  34A2               	retlw	162
 10178  2165  3401               	retlw	1
 10179  2166  34A8               	retlw	168
 10180  2167  3401               	retlw	1
 10181  2168  34AE               	retlw	174
 10182  2169  3401               	retlw	1
 10183  216A  34B4               	retlw	180
 10184  216B  3401               	retlw	1
 10185  216C  34BA               	retlw	186
 10186  216D  3401               	retlw	1
 10187  216E  34C0               	retlw	192
 10188  216F  3401               	retlw	1
 10189  2170  34C6               	retlw	198
 10190  2171  3401               	retlw	1
 10191  2172  34CC               	retlw	204
 10192  2173  3401               	retlw	1
 10193  2174  34D2               	retlw	210
 10194  2175  3401               	retlw	1
 10195  2176  34D9               	retlw	217
 10196  2177  3401               	retlw	1
 10197  2178  34DF               	retlw	223
 10198  2179  3401               	retlw	1
 10199  217A  34E5               	retlw	229
 10200  217B  3401               	retlw	1
 10201  217C  34EC               	retlw	236
 10202  217D  3401               	retlw	1
 10203  217E  34F2               	retlw	242
 10204  217F  3401               	retlw	1
 10205  2180  34F9               	retlw	249
 10206  2181  3401               	retlw	1
 10207  2182  34FF               	retlw	255
 10208  2183  3401               	retlw	1
 10209  2184  3406               	retlw	6
 10210  2185  3402               	retlw	2
 10211  2186  340D               	retlw	13
 10212  2187  3402               	retlw	2
 10213  2188  3413               	retlw	19
 10214  2189  3402               	retlw	2
 10215  218A  341A               	retlw	26
 10216  218B  3402               	retlw	2
 10217  218C  3421               	retlw	33
 10218  218D  3402               	retlw	2
 10219  218E  3428               	retlw	40
 10220  218F  3402               	retlw	2
 10221  2190  342F               	retlw	47
 10222  2191  3402               	retlw	2
 10223  2192  3436               	retlw	54
 10224  2193  3402               	retlw	2
 10225  2194  343D               	retlw	61
 10226  2195  3402               	retlw	2
 10227  2196  3444               	retlw	68
 10228  2197  3402               	retlw	2
 10229  2198  344B               	retlw	75
 10230  2199  3402               	retlw	2
 10231  219A  3452               	retlw	82
 10232  219B  3402               	retlw	2
 10233  219C  345A               	retlw	90
 10234  219D  3402               	retlw	2
 10235  219E  3461               	retlw	97
 10236  219F  3402               	retlw	2
 10237  21A0  3468               	retlw	104
 10238  21A1  3402               	retlw	2
 10239  21A2  3470               	retlw	112
 10240  21A3  3402               	retlw	2
 10241  21A4  3477               	retlw	119
 10242  21A5  3402               	retlw	2
 10243  21A6  347F               	retlw	127
 10244  21A7  3402               	retlw	2
 10245  21A8  3486               	retlw	134
 10246  21A9  3402               	retlw	2
 10247  21AA  348E               	retlw	142
 10248  21AB  3402               	retlw	2
 10249  21AC  3495               	retlw	149
 10250  21AD  3402               	retlw	2
 10251  21AE  349D               	retlw	157
 10252  21AF  3402               	retlw	2
 10253  21B0  34A5               	retlw	165
 10254  21B1  3402               	retlw	2
 10255  21B2  34AD               	retlw	173
 10256  21B3  3402               	retlw	2
 10257  21B4  34B5               	retlw	181
 10258  21B5  3402               	retlw	2
 10259  21B6  34BD               	retlw	189
 10260  21B7  3402               	retlw	2
 10261  21B8  34C5               	retlw	197
 10262  21B9  3402               	retlw	2
 10263  21BA  34CD               	retlw	205
 10264  21BB  3402               	retlw	2
 10265  21BC  34D5               	retlw	213
 10266  21BD  3402               	retlw	2
 10267  21BE  34DD               	retlw	221
 10268  21BF  3402               	retlw	2
 10269  21C0  34E5               	retlw	229
 10270  21C1  3402               	retlw	2
 10271  21C2  34ED               	retlw	237
 10272  21C3  3402               	retlw	2
 10273  21C4  34F6               	retlw	246
 10274  21C5  3402               	retlw	2
 10275  21C6  34FE               	retlw	254
 10276  21C7  3402               	retlw	2
 10277  21C8  3406               	retlw	6
 10278  21C9  3403               	retlw	3
 10279  21CA  340F               	retlw	15
 10280  21CB  3403               	retlw	3
 10281  21CC  3418               	retlw	24
 10282  21CD  3403               	retlw	3
 10283  21CE  3420               	retlw	32
 10284  21CF  3403               	retlw	3
 10285  21D0  3429               	retlw	41
 10286  21D1  3403               	retlw	3
 10287  21D2  3431               	retlw	49
 10288  21D3  3403               	retlw	3
 10289  21D4  343A               	retlw	58
 10290  21D5  3403               	retlw	3
 10291  21D6  3443               	retlw	67
 10292  21D7  3403               	retlw	3
 10293  21D8  344C               	retlw	76
 10294  21D9  3403               	retlw	3
 10295  21DA  3455               	retlw	85
 10296  21DB  3403               	retlw	3
 10297  21DC  345E               	retlw	94
 10298  21DD  3403               	retlw	3
 10299  21DE  3467               	retlw	103
 10300  21DF  3403               	retlw	3
 10301  21E0  3470               	retlw	112
 10302  21E1  3403               	retlw	3
 10303  21E2  3479               	retlw	121
 10304  21E3  3403               	retlw	3
 10305  21E4  3482               	retlw	130
 10306  21E5  3403               	retlw	3
 10307  21E6  348C               	retlw	140
 10308  21E7  3403               	retlw	3
 10309  21E8  3495               	retlw	149
 10310  21E9  3403               	retlw	3
 10311  21EA  349E               	retlw	158
 10312  21EB  3403               	retlw	3
 10313  21EC  34A8               	retlw	168
 10314  21ED  3403               	retlw	3
 10315  21EE  34B1               	retlw	177
 10316  21EF  3403               	retlw	3
 10317  21F0  34BB               	retlw	187
 10318  21F1  3403               	retlw	3
 10319  21F2  34C5               	retlw	197
 10320  21F3  3403               	retlw	3
 10321  21F4  34CE               	retlw	206
 10322  21F5  3403               	retlw	3
 10323  21F6  34D8               	retlw	216
 10324  21F7  3403               	retlw	3
 10325  21F8  34E2               	retlw	226
 10326  21F9  3403               	retlw	3
 10327  21FA  34EC               	retlw	236
 10328  21FB  3403               	retlw	3
 10329  21FC  34F6               	retlw	246
 10330  21FD  3403               	retlw	3
 10331  21FE  34FF               	retlw	255
 10332  21FF  3403               	retlw	3
 10333  2200                     __end_of_gamma_table_256x1k:	
 10334                           
 10335                           	psect	stringtext2
 10336  2800                     __pstringtext2:	
 10337  2800                     _dpowers:	
 10338  2800  3401               	retlw	1
 10339  2801  3400               	retlw	0
 10340  2802  340A               	retlw	10
 10341  2803  3400               	retlw	0
 10342  2804  3464               	retlw	100
 10343  2805  3400               	retlw	0
 10344  2806  34E8               	retlw	232
 10345  2807  3403               	retlw	3
 10346  2808  3410               	retlw	16
 10347  2809  3427               	retlw	39
 10348  280A                     __end_of_dpowers:	
 10349  000D                     _PORTBbits	set	13
 10350  000C                     _PORTAbits	set	12
 10351  000E                     _PORTCbits	set	14
 10352  000B                     _INTCONbits	set	11
 10353  0017                     _T0CON0bits	set	23
 10354  0010                     _PIR0bits	set	16
 10355  0015                     _TMR0L	set	21
 10356  0016                     _TMR0H	set	22
 10357  0018                     _T0CON1	set	24
 10358  0017                     _T0CON0	set	23
 10359  0012                     _PIR2bits	set	18
 10360  001F                     _T2CONbits	set	31
 10361  0011                     _PIR1bits	set	17
 10362  001D                     _TMR2	set	29
 10363  001E                     _PR2	set	30
 10364  001F                     _T2CON	set	31
 10365  005F                     _GIE	set	95
 10366  0090                     _PIE0bits	set	144
 10367  008E                     _TRISC	set	142
 10368  008D                     _TRISB	set	141
 10369  008C                     _TRISA	set	140
 10370  0097                     _WDTCON	set	151
 10371  010E                     _LATCbits	set	270
 10372  010D                     _LATBbits	set	269
 10373  010E                     _LATC	set	270
 10374  010D                     _LATB	set	269
 10375  010C                     _LATA	set	268
 10376  018C                     _ANSELA	set	396
 10377  018D                     _ANSELB	set	397
 10378  018E                     _ANSELC	set	398
 10379  020E                     _WPUC	set	526
 10380  020C                     _WPUA	set	524
 10381  020D                     _WPUB	set	525
 10382  0214                     _SSP1STATbits	set	532
 10383  0211                     _SSP1BUF	set	529
 10384  0215                     _SSP1CON1bits	set	533
 10385  0212                     _SSP1ADD	set	530
 10386  0215                     _SSP1CON1	set	533
 10387  0214                     _SSP1STAT	set	532
 10388  0297                     _CCP2CONbits	set	663
 10389  0295                     _CCPR2L	set	661
 10390  0296                     _CCPR2H	set	662
 10391  0297                     _CCP2CON	set	663
 10392  028E                     _ODCONC	set	654
 10393  028D                     _ODCONB	set	653
 10394  028C                     _ODCONA	set	652
 10395  0293                     _CCP1CONbits	set	659
 10396  029F                     _CCPTMRSbits	set	671
 10397  0291                     _CCPR1L	set	657
 10398  0292                     _CCPR1H	set	658
 10399  0293                     _CCP1CON	set	659
 10400  0417                     _T4CONbits	set	1047
 10401  0415                     _TMR4	set	1045
 10402  0416                     _PR4	set	1046
 10403  0417                     _T4CON	set	1047
 10404  061A                     _PWM6DCL	set	1562
 10405  061B                     _PWM6DCH	set	1563
 10406  061C                     _PWM6CON	set	1564
 10407  061F                     _PWMTMRSbits	set	1567
 10408  0617                     _PWM5DCL	set	1559
 10409  0618                     _PWM5DCH	set	1560
 10410  0619                     _PWM5CON	set	1561
 10411  0896                     _NVMCON2	set	2198
 10412  0893                     _NVMDATL	set	2195
 10413  0894                     _NVMDATH	set	2196
 10414  0895                     _NVMCON1bits	set	2197
 10415  0892                     _NVMADRH	set	2194
 10416  0891                     _NVMADRL	set	2193
 10417  091E                     _OSCTUNE	set	2334
 10418  091F                     _OSCFRQ	set	2335
 10419  091D                     _OSCEN	set	2333
 10420  091B                     _OSCCON3	set	2331
 10421  0919                     _OSCCON1	set	2329
 10422  48E0                     _PLLR	set	18656
 10423  0E20                     _SSP1CLKPPSbits	set	3616
 10424  0E21                     _SSP1DATPPSbits	set	3617
 10425  0E0F                     _PPSLOCKbits	set	3599
 10426  0E0F                     _PPSLOCK	set	3599
 10427  0EA2                     _RC2PPSbits	set	3746
 10428  0E9E                     _RB6PPSbits	set	3742
 10429  0EA3                     _RC3PPSbits	set	3747
 10430  0EA0                     _RC0PPSbits	set	3744
 10431  0EA4                     _RC4PPSbits	set	3748
 10432  0EA1                     _RC1PPSbits	set	3745
 10433  280A                     STR_34:	
 10434  280A  3449               	retlw	73	;'I'
 10435  280B  344D               	retlw	77	;'M'
 10436  280C  3420               	retlw	32	;' '
 10437  280D  3441               	retlw	65	;'A'
 10438  280E  3446               	retlw	70	;'F'
 10439  280F  3452               	retlw	82	;'R'
 10440  2810  3441               	retlw	65	;'A'
 10441  2811  3449               	retlw	73	;'I'
 10442  2812  3444               	retlw	68	;'D'
 10443  2813  3420               	retlw	32	;' '
 10444  2814  3449               	retlw	73	;'I'
 10445  2815  3420               	retlw	32	;' '
 10446  2816  3443               	retlw	67	;'C'
 10447  2817  3441               	retlw	65	;'A'
 10448  2818  344E               	retlw	78	;'N'
 10449  2819  3454               	retlw	84	;'T'
 10450  281A  3420               	retlw	32	;' '
 10451  281B  344C               	retlw	76	;'L'
 10452  281C  3445               	retlw	69	;'E'
 10453  281D  3454               	retlw	84	;'T'
 10454  281E  3420               	retlw	32	;' '
 10455  281F  3459               	retlw	89	;'Y'
 10456  2820  344F               	retlw	79	;'O'
 10457  2821  3455               	retlw	85	;'U'
 10458  2822  3420               	retlw	32	;' '
 10459  2823  3444               	retlw	68	;'D'
 10460  2824  344F               	retlw	79	;'O'
 10461  2825  3420               	retlw	32	;' '
 10462  2826  3454               	retlw	84	;'T'
 10463  2827  3448               	retlw	72	;'H'
 10464  2828  3441               	retlw	65	;'A'
 10465  2829  3454               	retlw	84	;'T'
 10466  282A  3420               	retlw	32	;' '
 10467  282B  3444               	retlw	68	;'D'
 10468  282C  3441               	retlw	65	;'A'
 10469  282D  3456               	retlw	86	;'V'
 10470  282E  3445               	retlw	69	;'E'
 10471  282F  342E               	retlw	46	;'.'
 10472  2830  342E               	retlw	46	;'.'
 10473  2831  342E               	retlw	46	;'.'
 10474  2832  3420               	retlw	32	;' '
 10475  2833  3420               	retlw	32	;' '
 10476  2834  3449               	retlw	73	;'I'
 10477  2835  344D               	retlw	77	;'M'
 10478  2836  3420               	retlw	32	;' '
 10479  2837  3448               	retlw	72	;'H'
 10480  2838  3445               	retlw	69	;'E'
 10481  2839  3452               	retlw	82	;'R'
 10482  283A  3445               	retlw	69	;'E'
 10483  283B  3420               	retlw	32	;' '
 10484  283C  3454               	retlw	84	;'T'
 10485  283D  344F               	retlw	79	;'O'
 10486  283E  3420               	retlw	32	;' '
 10487  283F  3443               	retlw	67	;'C'
 10488  2840  3448               	retlw	72	;'H'
 10489  2841  3445               	retlw	69	;'E'
 10490  2842  3457               	retlw	87	;'W'
 10491  2843  3420               	retlw	32	;' '
 10492  2844  3442               	retlw	66	;'B'
 10493  2845  3455               	retlw	85	;'U'
 10494  2846  3442               	retlw	66	;'B'
 10495  2847  3442               	retlw	66	;'B'
 10496  2848  344C               	retlw	76	;'L'
 10497  2849  3445               	retlw	69	;'E'
 10498  284A  3447               	retlw	71	;'G'
 10499  284B  3455               	retlw	85	;'U'
 10500  284C  344D               	retlw	77	;'M'
 10501  284D  3420               	retlw	32	;' '
 10502  284E  3441               	retlw	65	;'A'
 10503  284F  344E               	retlw	78	;'N'
 10504  2850  3444               	retlw	68	;'D'
 10505  2851  3420               	retlw	32	;' '
 10506  2852  344B               	retlw	75	;'K'
 10507  2853  3449               	retlw	73	;'I'
 10508  2854  3443               	retlw	67	;'C'
 10509  2855  344B               	retlw	75	;'K'
 10510  2856  3420               	retlw	32	;' '
 10511  2857  3441               	retlw	65	;'A'
 10512  2858  3453               	retlw	83	;'S'
 10513  2859  3453               	retlw	83	;'S'
 10514  285A  342E               	retlw	46	;'.'
 10515  285B  342E               	retlw	46	;'.'
 10516  285C  342E               	retlw	46	;'.'
 10517  285D  3420               	retlw	32	;' '
 10518  285E  3441               	retlw	65	;'A'
 10519  285F  344E               	retlw	78	;'N'
 10520  2860  3444               	retlw	68	;'D'
 10521  2861  3420               	retlw	32	;' '
 10522  2862  3449               	retlw	73	;'I'
 10523  2863  344D               	retlw	77	;'M'
 10524  2864  3420               	retlw	32	;' '
 10525  2865  3441               	retlw	65	;'A'
 10526  2866  344C               	retlw	76	;'L'
 10527  2867  344C               	retlw	76	;'L'
 10528  2868  3420               	retlw	32	;' '
 10529  2869  344F               	retlw	79	;'O'
 10530  286A  3455               	retlw	85	;'U'
 10531  286B  3454               	retlw	84	;'T'
 10532  286C  3420               	retlw	32	;' '
 10533  286D  344F               	retlw	79	;'O'
 10534  286E  3446               	retlw	70	;'F'
 10535  286F  3420               	retlw	32	;' '
 10536  2870  3442               	retlw	66	;'B'
 10537  2871  3455               	retlw	85	;'U'
 10538  2872  3442               	retlw	66	;'B'
 10539  2873  3442               	retlw	66	;'B'
 10540  2874  344C               	retlw	76	;'L'
 10541  2875  3445               	retlw	69	;'E'
 10542  2876  3447               	retlw	71	;'G'
 10543  2877  3455               	retlw	85	;'U'
 10544  2878  344D               	retlw	77	;'M'
 10545  2879  3420               	retlw	32	;' '
 10546  287A  3420               	retlw	32	;' '
 10547  287B  3420               	retlw	32	;' '
 10548  287C  3420               	retlw	32	;' '
 10549  287D  3420               	retlw	32	;' '
 10550  287E  3420               	retlw	32	;' '
 10551  287F  3420               	retlw	32	;' '
 10552  2880  3420               	retlw	32	;' '
 10553  2881  3400               	retlw	0
 10554                           
 10555                           	psect	stringtext3
 10556  3800                     __pstringtext3:	
 10557  3800                     STR_36:	
 10558  3800  3449               	retlw	73	;'I'
 10559  3801  3420               	retlw	32	;' '
 10560  3802  344C               	retlw	76	;'L'
 10561  3803  344F               	retlw	79	;'O'
 10562  3804  3456               	retlw	86	;'V'
 10563  3805  3445               	retlw	69	;'E'
 10564  3806  3420               	retlw	32	;' '
 10565  3807  3449               	retlw	73	;'I'
 10566  3808  3454               	retlw	84	;'T'
 10567  3809  342E               	retlw	46	;'.'
 10568  380A  3420               	retlw	32	;' '
 10569  380B  3445               	retlw	69	;'E'
 10570  380C  3453               	retlw	83	;'S'
 10571  380D  3450               	retlw	80	;'P'
 10572  380E  3445               	retlw	69	;'E'
 10573  380F  3443               	retlw	67	;'C'
 10574  3810  3449               	retlw	73	;'I'
 10575  3811  3441               	retlw	65	;'A'
 10576  3812  344C               	retlw	76	;'L'
 10577  3813  344C               	retlw	76	;'L'
 10578  3814  3459               	retlw	89	;'Y'
 10579  3815  3420               	retlw	32	;' '
 10580  3816  344C               	retlw	76	;'L'
 10581  3817  3441               	retlw	65	;'A'
 10582  3818  3454               	retlw	84	;'T'
 10583  3819  3445               	retlw	69	;'E'
 10584  381A  3452               	retlw	82	;'R'
 10585  381B  3420               	retlw	32	;' '
 10586  381C  3449               	retlw	73	;'I'
 10587  381D  344E               	retlw	78	;'N'
 10588  381E  3420               	retlw	32	;' '
 10589  381F  3454               	retlw	84	;'T'
 10590  3820  3448               	retlw	72	;'H'
 10591  3821  3445               	retlw	69	;'E'
 10592  3822  3420               	retlw	32	;' '
 10593  3823  3453               	retlw	83	;'S'
 10594  3824  3455               	retlw	85	;'U'
 10595  3825  344D               	retlw	77	;'M'
 10596  3826  344D               	retlw	77	;'M'
 10597  3827  3445               	retlw	69	;'E'
 10598  3828  3452               	retlw	82	;'R'
 10599  3829  3420               	retlw	32	;' '
 10600  382A  3420               	retlw	32	;' '
 10601  382B  3420               	retlw	32	;' '
 10602  382C  3420               	retlw	32	;' '
 10603  382D  3420               	retlw	32	;' '
 10604  382E  3400               	retlw	0
 10605                           
 10606                           	psect	stringtext4
 10607  382F                     __pstringtext4:	
 10608  382F                     STR_80:	
 10609  382F  3459               	retlw	89	;'Y'
 10610  3830  344F               	retlw	79	;'O'
 10611  3831  3455               	retlw	85	;'U'
 10612  3832  3420               	retlw	32	;' '
 10613  3833  3441               	retlw	65	;'A'
 10614  3834  3452               	retlw	82	;'R'
 10615  3835  3445               	retlw	69	;'E'
 10616  3836  3420               	retlw	32	;' '
 10617  3837  3449               	retlw	73	;'I'
 10618  3838  344E               	retlw	78	;'N'
 10619  3839  3420               	retlw	32	;' '
 10620  383A  3454               	retlw	84	;'T'
 10621  383B  344F               	retlw	79	;'O'
 10622  383C  344F               	retlw	79	;'O'
 10623  383D  3420               	retlw	32	;' '
 10624  383E  3444               	retlw	68	;'D'
 10625  383F  3445               	retlw	69	;'E'
 10626  3840  3445               	retlw	69	;'E'
 10627  3841  3450               	retlw	80	;'P'
 10628  3842  3420               	retlw	32	;' '
 10629  3843  3420               	retlw	32	;' '
 10630  3844  3420               	retlw	32	;' '
 10631  3845  3420               	retlw	32	;' '
 10632  3846  3420               	retlw	32	;' '
 10633  3847  3454               	retlw	84	;'T'
 10634  3848  3441               	retlw	65	;'A'
 10635  3849  344B               	retlw	75	;'K'
 10636  384A  3445               	retlw	69	;'E'
 10637  384B  3420               	retlw	32	;' '
 10638  384C  3454               	retlw	84	;'T'
 10639  384D  3448               	retlw	72	;'H'
 10640  384E  3445               	retlw	69	;'E'
 10641  384F  3420               	retlw	32	;' '
 10642  3850  3452               	retlw	82	;'R'
 10643  3851  3445               	retlw	69	;'E'
 10644  3852  3444               	retlw	68	;'D'
 10645  3853  3420               	retlw	32	;' '
 10646  3854  3450               	retlw	80	;'P'
 10647  3855  3449               	retlw	73	;'I'
 10648  3856  344C               	retlw	76	;'L'
 10649  3857  344C               	retlw	76	;'L'
 10650  3858  3420               	retlw	32	;' '
 10651  3859  3420               	retlw	32	;' '
 10652  385A  3420               	retlw	32	;' '
 10653  385B  3420               	retlw	32	;' '
 10654  385C  3400               	retlw	0
 10655                           
 10656                           	psect	stringtext5
 10657  385D                     __pstringtext5:	
 10658  385D                     STR_38:	
 10659  385D  3448               	retlw	72	;'H'
 10660  385E  3454               	retlw	84	;'T'
 10661  385F  3454               	retlw	84	;'T'
 10662  3860  3450               	retlw	80	;'P'
 10663  3861  3453               	retlw	83	;'S'
 10664  3862  343A               	retlw	58	;':'
 10665  3863  342F               	retlw	47	;'/'
 10666  3864  342F               	retlw	47	;'/'
 10667  3865  3447               	retlw	71	;'G'
 10668  3866  3449               	retlw	73	;'I'
 10669  3867  3454               	retlw	84	;'T'
 10670  3868  3448               	retlw	72	;'H'
 10671  3869  3455               	retlw	85	;'U'
 10672  386A  3442               	retlw	66	;'B'
 10673  386B  342E               	retlw	46	;'.'
 10674  386C  3443               	retlw	67	;'C'
 10675  386D  344F               	retlw	79	;'O'
 10676  386E  344D               	retlw	77	;'M'
 10677  386F  342F               	retlw	47	;'/'
 10678  3870  344E               	retlw	78	;'N'
 10679  3871  3455               	retlw	85	;'U'
 10680  3872  344C               	retlw	76	;'L'
 10681  3873  344C               	retlw	76	;'L'
 10682  3874  3449               	retlw	73	;'I'
 10683  3875  3442               	retlw	66	;'B'
 10684  3876  3441               	retlw	65	;'A'
 10685  3877  3444               	retlw	68	;'D'
 10686  3878  3447               	retlw	71	;'G'
 10687  3879  3445               	retlw	69	;'E'
 10688  387A  342F               	retlw	47	;'/'
 10689  387B  3444               	retlw	68	;'D'
 10690  387C  3445               	retlw	69	;'E'
 10691  387D  3446               	retlw	70	;'F'
 10692  387E  3443               	retlw	67	;'C'
 10693  387F  344F               	retlw	79	;'O'
 10694  3880  344E               	retlw	78	;'N'
 10695  3881  3432               	retlw	50	;'2'
 10696  3882  3435               	retlw	53	;'5'
 10697  3883  3420               	retlw	32	;' '
 10698  3884  3420               	retlw	32	;' '
 10699  3885  3420               	retlw	32	;' '
 10700  3886  3420               	retlw	32	;' '
 10701  3887  3400               	retlw	0
 10702                           
 10703                           	psect	stringtext6
 10704  3888                     __pstringtext6:	
 10705  3888                     STR_25:	
 10706  3888  3447               	retlw	71	;'G'
 10707  3889  3455               	retlw	85	;'U'
 10708  388A  3459               	retlw	89	;'Y'
 10709  388B  3453               	retlw	83	;'S'
 10710  388C  3420               	retlw	32	;' '
 10711  388D  3449               	retlw	73	;'I'
 10712  388E  3420               	retlw	32	;' '
 10713  388F  3448               	retlw	72	;'H'
 10714  3890  3441               	retlw	65	;'A'
 10715  3891  3456               	retlw	86	;'V'
 10716  3892  3445               	retlw	69	;'E'
 10717  3893  3420               	retlw	32	;' '
 10718  3894  3441               	retlw	65	;'A'
 10719  3895  3420               	retlw	32	;' '
 10720  3896  3447               	retlw	71	;'G'
 10721  3897  3452               	retlw	82	;'R'
 10722  3898  3445               	retlw	69	;'E'
 10723  3899  3441               	retlw	65	;'A'
 10724  389A  3454               	retlw	84	;'T'
 10725  389B  3420               	retlw	32	;' '
 10726  389C  3449               	retlw	73	;'I'
 10727  389D  3444               	retlw	68	;'D'
 10728  389E  3445               	retlw	69	;'E'
 10729  389F  3441               	retlw	65	;'A'
 10730  38A0  3420               	retlw	32	;' '
 10731  38A1  342D               	retlw	45	;'-'
 10732  38A2  344D               	retlw	77	;'M'
 10733  38A3  3449               	retlw	73	;'I'
 10734  38A4  344B               	retlw	75	;'K'
 10735  38A5  3445               	retlw	69	;'E'
 10736  38A6  3420               	retlw	32	;' '
 10737  38A7  344B               	retlw	75	;'K'
 10738  38A8  342E               	retlw	46	;'.'
 10739  38A9  3420               	retlw	32	;' '
 10740  38AA  3420               	retlw	32	;' '
 10741  38AB  3420               	retlw	32	;' '
 10742  38AC  3420               	retlw	32	;' '
 10743  38AD  3420               	retlw	32	;' '
 10744  38AE  3420               	retlw	32	;' '
 10745  38AF  3400               	retlw	0
 10746                           
 10747                           	psect	stringtext7
 10748  38B0                     __pstringtext7:	
 10749  38B0                     STR_21:	
 10750  38B0  3441               	retlw	65	;'A'
 10751  38B1  344C               	retlw	76	;'L'
 10752  38B2  344C               	retlw	76	;'L'
 10753  38B3  3420               	retlw	32	;' '
 10754  38B4  3459               	retlw	89	;'Y'
 10755  38B5  344F               	retlw	79	;'O'
 10756  38B6  3455               	retlw	85	;'U'
 10757  38B7  3452               	retlw	82	;'R'
 10758  38B8  3420               	retlw	32	;' '
 10759  38B9  3442               	retlw	66	;'B'
 10760  38BA  3441               	retlw	65	;'A'
 10761  38BB  3453               	retlw	83	;'S'
 10762  38BC  3445               	retlw	69	;'E'
 10763  38BD  3420               	retlw	32	;' '
 10764  38BE  3441               	retlw	65	;'A'
 10765  38BF  3452               	retlw	82	;'R'
 10766  38C0  3445               	retlw	69	;'E'
 10767  38C1  3420               	retlw	32	;' '
 10768  38C2  3442               	retlw	66	;'B'
 10769  38C3  3445               	retlw	69	;'E'
 10770  38C4  344C               	retlw	76	;'L'
 10771  38C5  344F               	retlw	79	;'O'
 10772  38C6  344E               	retlw	78	;'N'
 10773  38C7  3447               	retlw	71	;'G'
 10774  38C8  3420               	retlw	32	;' '
 10775  38C9  3454               	retlw	84	;'T'
 10776  38CA  344F               	retlw	79	;'O'
 10777  38CB  3420               	retlw	32	;' '
 10778  38CC  3455               	retlw	85	;'U'
 10779  38CD  3453               	retlw	83	;'S'
 10780  38CE  3420               	retlw	32	;' '
 10781  38CF  3420               	retlw	32	;' '
 10782  38D0  3420               	retlw	32	;' '
 10783  38D1  3420               	retlw	32	;' '
 10784  38D2  3420               	retlw	32	;' '
 10785  38D3  3400               	retlw	0
 10786                           
 10787                           	psect	stringtext8
 10788  38D4                     __pstringtext8:	
 10789  38D4                     STR_31:	
 10790  38D4  3449               	retlw	73	;'I'
 10791  38D5  3454               	retlw	84	;'T'
 10792  38D6  3453               	retlw	83	;'S'
 10793  38D7  3420               	retlw	32	;' '
 10794  38D8  3441               	retlw	65	;'A'
 10795  38D9  3420               	retlw	32	;' '
 10796  38DA  3455               	retlw	85	;'U'
 10797  38DB  344E               	retlw	78	;'N'
 10798  38DC  3449               	retlw	73	;'I'
 10799  38DD  3458               	retlw	88	;'X'
 10800  38DE  3420               	retlw	32	;' '
 10801  38DF  3453               	retlw	83	;'S'
 10802  38E0  3459               	retlw	89	;'Y'
 10803  38E1  3453               	retlw	83	;'S'
 10804  38E2  3454               	retlw	84	;'T'
 10805  38E3  3445               	retlw	69	;'E'
 10806  38E4  344D               	retlw	77	;'M'
 10807  38E5  3420               	retlw	32	;' '
 10808  38E6  3420               	retlw	32	;' '
 10809  38E7  3449               	retlw	73	;'I'
 10810  38E8  3420               	retlw	32	;' '
 10811  38E9  346B               	retlw	107	;'k'
 10812  38EA  346E               	retlw	110	;'n'
 10813  38EB  346F               	retlw	111	;'o'
 10814  38EC  3477               	retlw	119	;'w'
 10815  38ED  3420               	retlw	32	;' '
 10816  38EE  3474               	retlw	116	;'t'
 10817  38EF  3468               	retlw	104	;'h'
 10818  38F0  3469               	retlw	105	;'i'
 10819  38F1  3473               	retlw	115	;'s'
 10820  38F2  3421               	retlw	33	;'!'
 10821  38F3  3420               	retlw	32	;' '
 10822  38F4  3420               	retlw	32	;' '
 10823  38F5  3420               	retlw	32	;' '
 10824  38F6  3400               	retlw	0
 10825                           
 10826                           	psect	stringtext9
 10827  38F7                     __pstringtext9:	
 10828  38F7                     STR_33:	
 10829  38F7  3457               	retlw	87	;'W'
 10830  38F8  344F               	retlw	79	;'O'
 10831  38F9  3455               	retlw	85	;'U'
 10832  38FA  344C               	retlw	76	;'L'
 10833  38FB  3444               	retlw	68	;'D'
 10834  38FC  3420               	retlw	32	;' '
 10835  38FD  3459               	retlw	89	;'Y'
 10836  38FE  344F               	retlw	79	;'O'
 10837  38FF  3455               	retlw	85	;'U'
 10838  3900  3420               	retlw	32	;' '
 10839  3901  344C               	retlw	76	;'L'
 10840  3902  3449               	retlw	73	;'I'
 10841  3903  344B               	retlw	75	;'K'
 10842  3904  3445               	retlw	69	;'E'
 10843  3905  3420               	retlw	32	;' '
 10844  3906  3454               	retlw	84	;'T'
 10845  3907  344F               	retlw	79	;'O'
 10846  3908  3420               	retlw	32	;' '
 10847  3909  3450               	retlw	80	;'P'
 10848  390A  344C               	retlw	76	;'L'
 10849  390B  3441               	retlw	65	;'A'
 10850  390C  3459               	retlw	89	;'Y'
 10851  390D  3420               	retlw	32	;' '
 10852  390E  3441               	retlw	65	;'A'
 10853  390F  3420               	retlw	32	;' '
 10854  3910  3447               	retlw	71	;'G'
 10855  3911  3441               	retlw	65	;'A'
 10856  3912  344D               	retlw	77	;'M'
 10857  3913  3445               	retlw	69	;'E'
 10858  3914  343F               	retlw	63	;'?'
 10859  3915  3420               	retlw	32	;' '
 10860  3916  3420               	retlw	32	;' '
 10861  3917  3420               	retlw	32	;' '
 10862  3918  3400               	retlw	0
 10863                           
 10864                           	psect	stringtext10
 10865  3919                     __pstringtext10:	
 10866  3919                     STR_22:	
 10867  3919  3444               	retlw	68	;'D'
 10868  391A  344F               	retlw	79	;'O'
 10869  391B  3445               	retlw	69	;'E'
 10870  391C  3453               	retlw	83	;'S'
 10871  391D  3420               	retlw	32	;' '
 10872  391E  3444               	retlw	68	;'D'
 10873  391F  3445               	retlw	69	;'E'
 10874  3920  3456               	retlw	86	;'V'
 10875  3921  3441               	retlw	65	;'A'
 10876  3922  344E               	retlw	78	;'N'
 10877  3923  3420               	retlw	32	;' '
 10878  3924  3448               	retlw	72	;'H'
 10879  3925  3441               	retlw	65	;'A'
 10880  3926  3453               	retlw	83	;'S'
 10881  3927  3420               	retlw	32	;' '
 10882  3928  3448               	retlw	72	;'H'
 10883  3929  3449               	retlw	73	;'I'
 10884  392A  3453               	retlw	83	;'S'
 10885  392B  3420               	retlw	32	;' '
 10886  392C  3450               	retlw	80	;'P'
 10887  392D  3448               	retlw	72	;'H'
 10888  392E  344F               	retlw	79	;'O'
 10889  392F  344E               	retlw	78	;'N'
 10890  3930  3445               	retlw	69	;'E'
 10891  3931  343F               	retlw	63	;'?'
 10892  3932  3420               	retlw	32	;' '
 10893  3933  3420               	retlw	32	;' '
 10894  3934  3420               	retlw	32	;' '
 10895  3935  3420               	retlw	32	;' '
 10896  3936  3400               	retlw	0
 10897                           
 10898                           	psect	stringtext11
 10899  3937                     __pstringtext11:	
 10900  3937                     STR_28:	
 10901  3937  344E               	retlw	78	;'N'
 10902  3938  3443               	retlw	67	;'C'
 10903  3939  3420               	retlw	32	;' '
 10904  393A  342D               	retlw	45	;'-'
 10905  393B  3445               	retlw	69	;'E'
 10906  393C  3420               	retlw	32	;' '
 10907  393D  342F               	retlw	47	;'/'
 10908  393E  3442               	retlw	66	;'B'
 10909  393F  3449               	retlw	73	;'I'
 10910  3940  344E               	retlw	78	;'N'
 10911  3941  342F               	retlw	47	;'/'
 10912  3942  3442               	retlw	66	;'B'
 10913  3943  3441               	retlw	65	;'A'
 10914  3944  3453               	retlw	83	;'S'
 10915  3945  3448               	retlw	72	;'H'
 10916  3946  3420               	retlw	32	;' '
 10917  3947  342D               	retlw	45	;'-'
 10918  3948  344C               	retlw	76	;'L'
 10919  3949  3450               	retlw	80	;'P'
 10920  394A  3420               	retlw	32	;' '
 10921  394B  3431               	retlw	49	;'1'
 10922  394C  3433               	retlw	51	;'3'
 10923  394D  3433               	retlw	51	;'3'
 10924  394E  3437               	retlw	55	;'7'
 10925  394F  3420               	retlw	32	;' '
 10926  3950  3420               	retlw	32	;' '
 10927  3951  3420               	retlw	32	;' '
 10928  3952  3420               	retlw	32	;' '
 10929  3953  3400               	retlw	0
 10930                           
 10931                           	psect	stringtext12
 10932  3954                     __pstringtext12:	
 10933  3954                     STR_23:	
 10934  3954  3459               	retlw	89	;'Y'
 10935  3955  344F               	retlw	79	;'O'
 10936  3956  3455               	retlw	85	;'U'
 10937  3957  3420               	retlw	32	;' '
 10938  3958  344A               	retlw	74	;'J'
 10939  3959  3455               	retlw	85	;'U'
 10940  395A  3453               	retlw	83	;'S'
 10941  395B  3454               	retlw	84	;'T'
 10942  395C  3420               	retlw	32	;' '
 10943  395D  3448               	retlw	72	;'H'
 10944  395E  3441               	retlw	65	;'A'
 10945  395F  3456               	retlw	86	;'V'
 10946  3960  3445               	retlw	69	;'E'
 10947  3961  3420               	retlw	32	;' '
 10948  3962  3454               	retlw	84	;'T'
 10949  3963  344F               	retlw	79	;'O'
 10950  3964  3420               	retlw	32	;' '
 10951  3965  3442               	retlw	66	;'B'
 10952  3966  3445               	retlw	69	;'E'
 10953  3967  344C               	retlw	76	;'L'
 10954  3968  3449               	retlw	73	;'I'
 10955  3969  3445               	retlw	69	;'E'
 10956  396A  3456               	retlw	86	;'V'
 10957  396B  3445               	retlw	69	;'E'
 10958  396C  3420               	retlw	32	;' '
 10959  396D  3420               	retlw	32	;' '
 10960  396E  3420               	retlw	32	;' '
 10961  396F  3420               	retlw	32	;' '
 10962  3970  3400               	retlw	0
 10963                           
 10964                           	psect	stringtext13
 10965  3971                     __pstringtext13:	
 10966  3971                     STR_20:	
 10967  3971  3449               	retlw	73	;'I'
 10968  3972  3420               	retlw	32	;' '
 10969  3973  3443               	retlw	67	;'C'
 10970  3974  3441               	retlw	65	;'A'
 10971  3975  344E               	retlw	78	;'N'
 10972  3976  3420               	retlw	32	;' '
 10973  3977  3442               	retlw	66	;'B'
 10974  3978  3452               	retlw	82	;'R'
 10975  3979  3445               	retlw	69	;'E'
 10976  397A  3441               	retlw	65	;'A'
 10977  397B  344B               	retlw	75	;'K'
 10978  397C  3420               	retlw	32	;' '
 10979  397D  3454               	retlw	84	;'T'
 10980  397E  3448               	retlw	72	;'H'
 10981  397F  3441               	retlw	65	;'A'
 10982  3980  3454               	retlw	84	;'T'
 10983  3981  3420               	retlw	32	;' '
 10984  3982  3446               	retlw	70	;'F'
 10985  3983  344F               	retlw	79	;'O'
 10986  3984  3452               	retlw	82	;'R'
 10987  3985  3420               	retlw	32	;' '
 10988  3986  3459               	retlw	89	;'Y'
 10989  3987  344F               	retlw	79	;'O'
 10990  3988  3455               	retlw	85	;'U'
 10991  3989  3420               	retlw	32	;' '
 10992  398A  3420               	retlw	32	;' '
 10993  398B  3420               	retlw	32	;' '
 10994  398C  3400               	retlw	0
 10995                           
 10996                           	psect	stringtext14
 10997  398D                     __pstringtext14:	
 10998  398D                     STR_81:	
 10999  398D  3459               	retlw	89	;'Y'
 11000  398E  344F               	retlw	79	;'O'
 11001  398F  3455               	retlw	85	;'U'
 11002  3990  3420               	retlw	32	;' '
 11003  3991  3453               	retlw	83	;'S'
 11004  3992  3454               	retlw	84	;'T'
 11005  3993  3441               	retlw	65	;'A'
 11006  3994  3459               	retlw	89	;'Y'
 11007  3995  3420               	retlw	32	;' '
 11008  3996  3449               	retlw	73	;'I'
 11009  3997  344E               	retlw	78	;'N'
 11010  3998  3420               	retlw	32	;' '
 11011  3999  3457               	retlw	87	;'W'
 11012  399A  344F               	retlw	79	;'O'
 11013  399B  344E               	retlw	78	;'N'
 11014  399C  3444               	retlw	68	;'D'
 11015  399D  3445               	retlw	69	;'E'
 11016  399E  3452               	retlw	82	;'R'
 11017  399F  344C               	retlw	76	;'L'
 11018  39A0  3441               	retlw	65	;'A'
 11019  39A1  344E               	retlw	78	;'N'
 11020  39A2  3444               	retlw	68	;'D'
 11021  39A3  3420               	retlw	32	;' '
 11022  39A4  3420               	retlw	32	;' '
 11023  39A5  3420               	retlw	32	;' '
 11024  39A6  3420               	retlw	32	;' '
 11025  39A7  3400               	retlw	0
 11026                           
 11027                           	psect	stringtext15
 11028  39A8                     __pstringtext15:	
 11029  39A8                     STR_24:	
 11030  39A8  344E               	retlw	78	;'N'
 11031  39A9  344F               	retlw	79	;'O'
 11032  39AA  3454               	retlw	84	;'T'
 11033  39AB  3448               	retlw	72	;'H'
 11034  39AC  3449               	retlw	73	;'I'
 11035  39AD  344E               	retlw	78	;'N'
 11036  39AE  3447               	retlw	71	;'G'
 11037  39AF  3420               	retlw	32	;' '
 11038  39B0  3454               	retlw	84	;'T'
 11039  39B1  344F               	retlw	79	;'O'
 11040  39B2  3420               	retlw	32	;' '
 11041  39B3  3453               	retlw	83	;'S'
 11042  39B4  3445               	retlw	69	;'E'
 11043  39B5  3445               	retlw	69	;'E'
 11044  39B6  3420               	retlw	32	;' '
 11045  39B7  3448               	retlw	72	;'H'
 11046  39B8  3445               	retlw	69	;'E'
 11047  39B9  3452               	retlw	82	;'R'
 11048  39BA  3445               	retlw	69	;'E'
 11049  39BB  342E               	retlw	46	;'.'
 11050  39BC  342E               	retlw	46	;'.'
 11051  39BD  342E               	retlw	46	;'.'
 11052  39BE  3420               	retlw	32	;' '
 11053  39BF  3420               	retlw	32	;' '
 11054  39C0  3420               	retlw	32	;' '
 11055  39C1  3420               	retlw	32	;' '
 11056  39C2  3400               	retlw	0
 11057                           
 11058                           	psect	stringtext16
 11059  39C3                     __pstringtext16:	
 11060  39C3                     STR_17:	
 11061  39C3  3448               	retlw	72	;'H'
 11062  39C4  3454               	retlw	84	;'T'
 11063  39C5  3454               	retlw	84	;'T'
 11064  39C6  3450               	retlw	80	;'P'
 11065  39C7  3420               	retlw	32	;' '
 11066  39C8  3434               	retlw	52	;'4'
 11067  39C9  3431               	retlw	49	;'1'
 11068  39CA  3438               	retlw	56	;'8'
 11069  39CB  3420               	retlw	32	;' '
 11070  39CC  3449               	retlw	73	;'I'
 11071  39CD  3427               	retlw	39	;'''
 11072  39CE  344D               	retlw	77	;'M'
 11073  39CF  3420               	retlw	32	;' '
 11074  39D0  3441               	retlw	65	;'A'
 11075  39D1  3420               	retlw	32	;' '
 11076  39D2  3454               	retlw	84	;'T'
 11077  39D3  3445               	retlw	69	;'E'
 11078  39D4  3441               	retlw	65	;'A'
 11079  39D5  3450               	retlw	80	;'P'
 11080  39D6  344F               	retlw	79	;'O'
 11081  39D7  3454               	retlw	84	;'T'
 11082  39D8  3420               	retlw	32	;' '
 11083  39D9  3420               	retlw	32	;' '
 11084  39DA  3420               	retlw	32	;' '
 11085  39DB  3420               	retlw	32	;' '
 11086  39DC  3400               	retlw	0
 11087                           
 11088                           	psect	stringtext17
 11089  39DD                     __pstringtext17:	
 11090  39DD                     STR_82:	
 11091  39DD  3454               	retlw	84	;'T'
 11092  39DE  3448               	retlw	72	;'H'
 11093  39DF  3445               	retlw	69	;'E'
 11094  39E0  3420               	retlw	32	;' '
 11095  39E1  3443               	retlw	67	;'C'
 11096  39E2  3448               	retlw	72	;'H'
 11097  39E3  344F               	retlw	79	;'O'
 11098  39E4  3449               	retlw	73	;'I'
 11099  39E5  3443               	retlw	67	;'C'
 11100  39E6  3445               	retlw	69	;'E'
 11101  39E7  3420               	retlw	32	;' '
 11102  39E8  3449               	retlw	73	;'I'
 11103  39E9  3453               	retlw	83	;'S'
 11104  39EA  3420               	retlw	32	;' '
 11105  39EB  3459               	retlw	89	;'Y'
 11106  39EC  344F               	retlw	79	;'O'
 11107  39ED  3455               	retlw	85	;'U'
 11108  39EE  3452               	retlw	82	;'R'
 11109  39EF  3453               	retlw	83	;'S'
 11110  39F0  3420               	retlw	32	;' '
 11111  39F1  3420               	retlw	32	;' '
 11112  39F2  3420               	retlw	32	;' '
 11113  39F3  3400               	retlw	0
 11114                           
 11115                           	psect	stringtext18
 11116  39F4                     __pstringtext18:	
 11117  39F4                     STR_19:	
 11118  39F4  3449               	retlw	73	;'I'
 11119  39F5  3420               	retlw	32	;' '
 11120  39F6  3441               	retlw	65	;'A'
 11121  39F7  344D               	retlw	77	;'M'
 11122  39F8  3420               	retlw	32	;' '
 11123  39F9  344A               	retlw	74	;'J'
 11124  39FA  3455               	retlw	85	;'U'
 11125  39FB  3453               	retlw	83	;'S'
 11126  39FC  3454               	retlw	84	;'T'
 11127  39FD  3420               	retlw	32	;' '
 11128  39FE  3441               	retlw	65	;'A'
 11129  39FF  3420               	retlw	32	;' '
 11130  3A00  3442               	retlw	66	;'B'
 11131  3A01  3441               	retlw	65	;'A'
 11132  3A02  3444               	retlw	68	;'D'
 11133  3A03  3447               	retlw	71	;'G'
 11134  3A04  3445               	retlw	69	;'E'
 11135  3A05  3420               	retlw	32	;' '
 11136  3A06  3420               	retlw	32	;' '
 11137  3A07  3420               	retlw	32	;' '
 11138  3A08  3420               	retlw	32	;' '
 11139  3A09  3400               	retlw	0
 11140                           
 11141                           	psect	stringtext19
 11142  3A0A                     __pstringtext19:	
 11143  3A0A                     STR_16:	
 11144  3A0A  3457               	retlw	87	;'W'
 11145  3A0B  3449               	retlw	73	;'I'
 11146  3A0C  344C               	retlw	76	;'L'
 11147  3A0D  344C               	retlw	76	;'L'
 11148  3A0E  3420               	retlw	32	;' '
 11149  3A0F  3448               	retlw	72	;'H'
 11150  3A10  3441               	retlw	65	;'A'
 11151  3A11  3443               	retlw	67	;'C'
 11152  3A12  344B               	retlw	75	;'K'
 11153  3A13  3420               	retlw	32	;' '
 11154  3A14  3446               	retlw	70	;'F'
 11155  3A15  344F               	retlw	79	;'O'
 11156  3A16  3452               	retlw	82	;'R'
 11157  3A17  3420               	retlw	32	;' '
 11158  3A18  3441               	retlw	65	;'A'
 11159  3A19  342F               	retlw	47	;'/'
 11160  3A1A  3443               	retlw	67	;'C'
 11161  3A1B  3420               	retlw	32	;' '
 11162  3A1C  3420               	retlw	32	;' '
 11163  3A1D  3420               	retlw	32	;' '
 11164  3A1E  3400               	retlw	0
 11165                           
 11166                           	psect	stringtext20
 11167  3A1F                     __pstringtext20:	
 11168  3A1F                     STR_27:	
 11169  3A1F  3442               	retlw	66	;'B'
 11170  3A20  3445               	retlw	69	;'E'
 11171  3A21  344C               	retlw	76	;'L'
 11172  3A22  3449               	retlw	73	;'I'
 11173  3A23  3445               	retlw	69	;'E'
 11174  3A24  3456               	retlw	86	;'V'
 11175  3A25  3445               	retlw	69	;'E'
 11176  3A26  3420               	retlw	32	;' '
 11177  3A27  3454               	retlw	84	;'T'
 11178  3A28  3448               	retlw	72	;'H'
 11179  3A29  3445               	retlw	69	;'E'
 11180  3A2A  3420               	retlw	32	;' '
 11181  3A2B  344C               	retlw	76	;'L'
 11182  3A2C  3449               	retlw	73	;'I'
 11183  3A2D  3445               	retlw	69	;'E'
 11184  3A2E  3420               	retlw	32	;' '
 11185  3A2F  3420               	retlw	32	;' '
 11186  3A30  3420               	retlw	32	;' '
 11187  3A31  3400               	retlw	0
 11188                           
 11189                           	psect	stringtext21
 11190  3A32                     __pstringtext21:	
 11191  3A32                     STR_15:	
 11192  3A32  3448               	retlw	72	;'H'
 11193  3A33  3441               	retlw	65	;'A'
 11194  3A34  3443               	retlw	67	;'C'
 11195  3A35  344B               	retlw	75	;'K'
 11196  3A36  3420               	retlw	32	;' '
 11197  3A37  3454               	retlw	84	;'T'
 11198  3A38  3448               	retlw	72	;'H'
 11199  3A39  3445               	retlw	69	;'E'
 11200  3A3A  3420               	retlw	32	;' '
 11201  3A3B  3450               	retlw	80	;'P'
 11202  3A3C  344C               	retlw	76	;'L'
 11203  3A3D  3441               	retlw	65	;'A'
 11204  3A3E  344E               	retlw	78	;'N'
 11205  3A3F  3445               	retlw	69	;'E'
 11206  3A40  3454               	retlw	84	;'T'
 11207  3A41  3420               	retlw	32	;' '
 11208  3A42  3420               	retlw	32	;' '
 11209  3A43  3420               	retlw	32	;' '
 11210  3A44  3400               	retlw	0
 11211                           
 11212                           	psect	stringtext22
 11213  3A45                     __pstringtext22:	
 11214  3A45                     STR_10:	
 11215  3A45  3405               	retlw	5
 11216  3A46  3407               	retlw	7
 11217  3A47  3407               	retlw	7
 11218  3A48  3408               	retlw	8
 11219  3A49  342D               	retlw	45	;'-'
 11220  3A4A  342D               	retlw	45	;'-'
 11221  3A4B  3420               	retlw	32	;' '
 11222  3A4C  3420               	retlw	32	;' '
 11223  3A4D  342D               	retlw	45	;'-'
 11224  3A4E  342D               	retlw	45	;'-'
 11225  3A4F  3409               	retlw	9
 11226  3A50  3407               	retlw	7
 11227  3A51  3407               	retlw	7
 11228  3A52  3406               	retlw	6
 11229  3A53  3420               	retlw	32	;' '
 11230  3A54  340B               	retlw	11
 11231  3A55  3420               	retlw	32	;' '
 11232  3A56  3400               	retlw	0
 11233                           
 11234                           	psect	stringtext23
 11235  3A57                     __pstringtext23:	
 11236  3A57                     STR_26:	
 11237  3A57  3464               	retlw	100	;'d'
 11238  3A58  3465               	retlw	101	;'e'
 11239  3A59  346E               	retlw	110	;'n'
 11240  3A5A  3479               	retlw	121	;'y'
 11241  3A5B  3420               	retlw	32	;' '
 11242  3A5C  3461               	retlw	97	;'a'
 11243  3A5D  346E               	retlw	110	;'n'
 11244  3A5E  3479               	retlw	121	;'y'
 11245  3A5F  3420               	retlw	32	;' '
 11246  3A60  3461               	retlw	97	;'a'
 11247  3A61  346E               	retlw	110	;'n'
 11248  3A62  3479               	retlw	121	;'y'
 11249  3A63  3420               	retlw	32	;' '
 11250  3A64  3420               	retlw	32	;' '
 11251  3A65  3420               	retlw	32	;' '
 11252  3A66  3420               	retlw	32	;' '
 11253  3A67  3400               	retlw	0
 11254                           
 11255                           	psect	stringtext24
 11256  3A68                     __pstringtext24:	
 11257  3A68                     STR_35:	
 11258  3A68  3442               	retlw	66	;'B'
 11259  3A69  3455               	retlw	85	;'U'
 11260  3A6A  3454               	retlw	84	;'T'
 11261  3A6B  3454               	retlw	84	;'T'
 11262  3A6C  3445               	retlw	69	;'E'
 11263  3A6D  3452               	retlw	82	;'R'
 11264  3A6E  3420               	retlw	32	;' '
 11265  3A6F  3445               	retlw	69	;'E'
 11266  3A70  344D               	retlw	77	;'M'
 11267  3A71  3441               	retlw	65	;'A'
 11268  3A72  3449               	retlw	73	;'I'
 11269  3A73  344C               	retlw	76	;'L'
 11270  3A74  3453               	retlw	83	;'S'
 11271  3A75  3420               	retlw	32	;' '
 11272  3A76  3420               	retlw	32	;' '
 11273  3A77  3420               	retlw	32	;' '
 11274  3A78  3400               	retlw	0
 11275                           
 11276                           	psect	stringtext25
 11277  3A79                     __pstringtext25:	
 11278  3A79                     STR_32:	
 11279  3A79  3454               	retlw	84	;'T'
 11280  3A7A  3452               	retlw	82	;'R'
 11281  3A7B  3455               	retlw	85	;'U'
 11282  3A7C  3453               	retlw	83	;'S'
 11283  3A7D  3454               	retlw	84	;'T'
 11284  3A7E  3420               	retlw	32	;' '
 11285  3A7F  344E               	retlw	78	;'N'
 11286  3A80  344F               	retlw	79	;'O'
 11287  3A81  3420               	retlw	32	;' '
 11288  3A82  344F               	retlw	79	;'O'
 11289  3A83  344E               	retlw	78	;'N'
 11290  3A84  3445               	retlw	69	;'E'
 11291  3A85  3420               	retlw	32	;' '
 11292  3A86  3420               	retlw	32	;' '
 11293  3A87  3420               	retlw	32	;' '
 11294  3A88  3400               	retlw	0
 11295                           
 11296                           	psect	stringtext26
 11297  3A89                     __pstringtext26:	
 11298  3A89                     STR_30:	
 11299  3A89  3448               	retlw	72	;'H'
 11300  3A8A  3449               	retlw	73	;'I'
 11301  3A8B  3453               	retlw	83	;'S'
 11302  3A8C  3454               	retlw	84	;'T'
 11303  3A8D  344F               	retlw	79	;'O'
 11304  3A8E  3452               	retlw	82	;'R'
 11305  3A8F  3459               	retlw	89	;'Y'
 11306  3A90  3420               	retlw	32	;' '
 11307  3A91  342D               	retlw	45	;'-'
 11308  3A92  3443               	retlw	67	;'C'
 11309  3A93  3457               	retlw	87	;'W'
 11310  3A94  3420               	retlw	32	;' '
 11311  3A95  3420               	retlw	32	;' '
 11312  3A96  3420               	retlw	32	;' '
 11313  3A97  3400               	retlw	0
 11314                           
 11315                           	psect	stringtext27
 11316  3A98                     __pstringtext27:	
 11317  3A98                     STR_62:	
 11318  3A98  3446               	retlw	70	;'F'
 11319  3A99  3449               	retlw	73	;'I'
 11320  3A9A  3452               	retlw	82	;'R'
 11321  3A9B  3445               	retlw	69	;'E'
 11322  3A9C  3420               	retlw	32	;' '
 11323  3A9D  3442               	retlw	66	;'B'
 11324  3A9E  3441               	retlw	65	;'A'
 11325  3A9F  344C               	retlw	76	;'L'
 11326  3AA0  344C               	retlw	76	;'L'
 11327  3AA1  3420               	retlw	32	;' '
 11328  3AA2  3420               	retlw	32	;' '
 11329  3AA3  3420               	retlw	32	;' '
 11330  3AA4  3400               	retlw	0
 11331                           
 11332                           	psect	stringtext28
 11333  3AA5                     __pstringtext28:	
 11334  3AA5                     STR_42:	
 11335  3AA5  3455               	retlw	85	;'U'
 11336  3AA6  344E               	retlw	78	;'N'
 11337  3AA7  344C               	retlw	76	;'L'
 11338  3AA8  344F               	retlw	79	;'O'
 11339  3AA9  3443               	retlw	67	;'C'
 11340  3AAA  344B               	retlw	75	;'K'
 11341  3AAB  3449               	retlw	73	;'I'
 11342  3AAC  344E               	retlw	78	;'N'
 11343  3AAD  3447               	retlw	71	;'G'
 11344  3AAE  342E               	retlw	46	;'.'
 11345  3AAF  342E               	retlw	46	;'.'
 11346  3AB0  342E               	retlw	46	;'.'
 11347  3AB1  3400               	retlw	0
 11348                           
 11349                           	psect	stringtext29
 11350  3AB2                     __pstringtext29:	
 11351  3AB2                     STR_37:	
 11352  3AB2  3442               	retlw	66	;'B'
 11353  3AB3  3441               	retlw	65	;'A'
 11354  3AB4  3442               	retlw	66	;'B'
 11355  3AB5  3441               	retlw	65	;'A'
 11356  3AB6  3420               	retlw	32	;' '
 11357  3AB7  3457               	retlw	87	;'W'
 11358  3AB8  3445               	retlw	69	;'E'
 11359  3AB9  3452               	retlw	82	;'R'
 11360  3ABA  344B               	retlw	75	;'K'
 11361  3ABB  3420               	retlw	32	;' '
 11362  3ABC  3420               	retlw	32	;' '
 11363  3ABD  3420               	retlw	32	;' '
 11364  3ABE  3400               	retlw	0
 11365                           
 11366                           	psect	stringtext30
 11367  3ABF                     __pstringtext30:	
 11368  3ABF                     STR_61:	
 11369  3ABF  3452               	retlw	82	;'R'
 11370  3AC0  3445               	retlw	69	;'E'
 11371  3AC1  3444               	retlw	68	;'D'
 11372  3AC2  3420               	retlw	32	;' '
 11373  3AC3  3442               	retlw	66	;'B'
 11374  3AC4  3455               	retlw	85	;'U'
 11375  3AC5  344C               	retlw	76	;'L'
 11376  3AC6  344C               	retlw	76	;'L'
 11377  3AC7  3420               	retlw	32	;' '
 11378  3AC8  3420               	retlw	32	;' '
 11379  3AC9  3420               	retlw	32	;' '
 11380  3ACA  3400               	retlw	0
 11381                           
 11382                           	psect	stringtext31
 11383  3ACB                     __pstringtext31:	
 11384  3ACB                     STR_29:	
 11385  3ACB  3452               	retlw	82	;'R'
 11386  3ACC  344D               	retlw	77	;'M'
 11387  3ACD  3420               	retlw	32	;' '
 11388  3ACE  342D               	retlw	45	;'-'
 11389  3ACF  3452               	retlw	82	;'R'
 11390  3AD0  3446               	retlw	70	;'F'
 11391  3AD1  3420               	retlw	32	;' '
 11392  3AD2  342F               	retlw	47	;'/'
 11393  3AD3  3420               	retlw	32	;' '
 11394  3AD4  3420               	retlw	32	;' '
 11395  3AD5  3420               	retlw	32	;' '
 11396  3AD6  3400               	retlw	0
 11397                           
 11398                           	psect	stringtext32
 11399  3AD7                     __pstringtext32:	
 11400  3AD7                     STR_59:	
 11401  3AD7  3454               	retlw	84	;'T'
 11402  3AD8  3445               	retlw	69	;'E'
 11403  3AD9  3451               	retlw	81	;'Q'
 11404  3ADA  3455               	retlw	85	;'U'
 11405  3ADB  3449               	retlw	73	;'I'
 11406  3ADC  344C               	retlw	76	;'L'
 11407  3ADD  3441               	retlw	65	;'A'
 11408  3ADE  3420               	retlw	32	;' '
 11409  3ADF  3420               	retlw	32	;' '
 11410  3AE0  3420               	retlw	32	;' '
 11411  3AE1  3400               	retlw	0
 11412                           
 11413                           	psect	stringtext33
 11414  3AE2                     __pstringtext33:	
 11415  3AE2                     STR_58:	
 11416  3AE2  3457               	retlw	87	;'W'
 11417  3AE3  3448               	retlw	72	;'H'
 11418  3AE4  3449               	retlw	73	;'I'
 11419  3AE5  3453               	retlw	83	;'S'
 11420  3AE6  344B               	retlw	75	;'K'
 11421  3AE7  3445               	retlw	69	;'E'
 11422  3AE8  3459               	retlw	89	;'Y'
 11423  3AE9  3420               	retlw	32	;' '
 11424  3AEA  3420               	retlw	32	;' '
 11425  3AEB  3420               	retlw	32	;' '
 11426  3AEC  3400               	retlw	0
 11427                           
 11428                           	psect	stringtext34
 11429  3AED                     __pstringtext34:	
 11430  3AED                     STR_75:	
 11431  3AED  3420               	retlw	32	;' '
 11432  3AEE  3420               	retlw	32	;' '
 11433  3AEF  3442               	retlw	66	;'B'
 11434  3AF0  3449               	retlw	73	;'I'
 11435  3AF1  3454               	retlw	84	;'T'
 11436  3AF2  3420               	retlw	32	;' '
 11437  3AF3  344E               	retlw	78	;'N'
 11438  3AF4  3420               	retlw	32	;' '
 11439  3AF5  3420               	retlw	32	;' '
 11440  3AF6  3400               	retlw	0
 11441                           
 11442                           	psect	stringtext35
 11443  3AF7                     __pstringtext35:	
 11444  3AF7                     STR_6:	
 11445  3AF7  3450               	retlw	80	;'P'
 11446  3AF8  3441               	retlw	65	;'A'
 11447  3AF9  3453               	retlw	83	;'S'
 11448  3AFA  3453               	retlw	83	;'S'
 11449  3AFB  3457               	retlw	87	;'W'
 11450  3AFC  344F               	retlw	79	;'O'
 11451  3AFD  3452               	retlw	82	;'R'
 11452  3AFE  3444               	retlw	68	;'D'
 11453  3AFF  3420               	retlw	32	;' '
 11454  3B00  3400               	retlw	0
 11455                           
 11456                           	psect	stringtext36
 11457  3B01                     __pstringtext36:	
 11458  3B01                     STR_72:	
 11459  3B01  3420               	retlw	32	;' '
 11460  3B02  3454               	retlw	84	;'T'
 11461  3B03  3448               	retlw	72	;'H'
 11462  3B04  3445               	retlw	69	;'E'
 11463  3B05  3420               	retlw	32	;' '
 11464  3B06  3457               	retlw	87	;'W'
 11465  3B07  3448               	retlw	72	;'H'
 11466  3B08  3420               	retlw	32	;' '
 11467  3B09  3400               	retlw	0
 11468                           
 11469                           	psect	stringtext37
 11470  3B0A                     __pstringtext37:	
 11471  3B0A                     STR_57:	
 11472  3B0A  3456               	retlw	86	;'V'
 11473  3B0B  344F               	retlw	79	;'O'
 11474  3B0C  3444               	retlw	68	;'D'
 11475  3B0D  344B               	retlw	75	;'K'
 11476  3B0E  3441               	retlw	65	;'A'
 11477  3B0F  3420               	retlw	32	;' '
 11478  3B10  3420               	retlw	32	;' '
 11479  3B11  3420               	retlw	32	;' '
 11480  3B12  3400               	retlw	0
 11481                           
 11482                           	psect	stringtext38
 11483  3B13                     __pstringtext38:	
 11484  3B13                     STR_63:	
 11485  3B13  3457               	retlw	87	;'W'
 11486  3B14  3441               	retlw	65	;'A'
 11487  3B15  3454               	retlw	84	;'T'
 11488  3B16  3445               	retlw	69	;'E'
 11489  3B17  3452               	retlw	82	;'R'
 11490  3B18  3420               	retlw	32	;' '
 11491  3B19  3420               	retlw	32	;' '
 11492  3B1A  3420               	retlw	32	;' '
 11493  3B1B  3400               	retlw	0
 11494                           
 11495                           	psect	stringtext39
 11496  3B1C                     __pstringtext39:	
 11497  3B1C                     STR_64:	
 11498  3B1C  3425               	retlw	37	;'%'
 11499  3B1D  3463               	retlw	99	;'c'
 11500  3B1E  3425               	retlw	37	;'%'
 11501  3B1F  3463               	retlw	99	;'c'
 11502  3B20  3425               	retlw	37	;'%'
 11503  3B21  3463               	retlw	99	;'c'
 11504  3B22  3425               	retlw	37	;'%'
 11505  3B23  3463               	retlw	99	;'c'
 11506  3B24  3400               	retlw	0
 11507                           
 11508                           	psect	stringtext40
 11509  3B25                     __pstringtext40:	
 11510  3B25                     STR_12:	
 11511  3B25  344E               	retlw	78	;'N'
 11512  3B26  3455               	retlw	85	;'U'
 11513  3B27  344C               	retlw	76	;'L'
 11514  3B28  344C               	retlw	76	;'L'
 11515  3B29  3449               	retlw	73	;'I'
 11516  3B2A  3446               	retlw	70	;'F'
 11517  3B2B  3459               	retlw	89	;'Y'
 11518  3B2C  3420               	retlw	32	;' '
 11519  3B2D  3400               	retlw	0
 11520                           
 11521                           	psect	stringtext41
 11522  3B2E                     __pstringtext41:	
 11523  3B2E                     STR_77:	
 11524  3B2E  3450               	retlw	80	;'P'
 11525  3B2F  344F               	retlw	79	;'O'
 11526  3B30  3454               	retlw	84	;'T'
 11527  3B31  3441               	retlw	65	;'A'
 11528  3B32  3454               	retlw	84	;'T'
 11529  3B33  3420               	retlw	32	;' '
 11530  3B34  3420               	retlw	32	;' '
 11531  3B35  3400               	retlw	0
 11532                           
 11533                           	psect	stringtext42
 11534  3B36                     __pstringtext42:	
 11535  3B36                     STR_79:	
 11536  3B36  3420               	retlw	32	;' '
 11537  3B37  3420               	retlw	32	;' '
 11538  3B38  3454               	retlw	84	;'T'
 11539  3B39  3445               	retlw	69	;'E'
 11540  3B3A  3459               	retlw	89	;'Y'
 11541  3B3B  3420               	retlw	32	;' '
 11542  3B3C  3420               	retlw	32	;' '
 11543  3B3D  3400               	retlw	0
 11544                           
 11545                           	psect	stringtext43
 11546  3B3E                     __pstringtext43:	
 11547  3B3E                     STR_60:	
 11548  3B3E  3443               	retlw	67	;'C'
 11549  3B3F  3448               	retlw	72	;'H'
 11550  3B40  3455               	retlw	85	;'U'
 11551  3B41  3447               	retlw	71	;'G'
 11552  3B42  3420               	retlw	32	;' '
 11553  3B43  3420               	retlw	32	;' '
 11554  3B44  3420               	retlw	32	;' '
 11555  3B45  3400               	retlw	0
 11556                           
 11557                           	psect	stringtext44
 11558  3B46                     __pstringtext44:	
 11559  3B46                     STR_56:	
 11560  3B46  3442               	retlw	66	;'B'
 11561  3B47  3445               	retlw	69	;'E'
 11562  3B48  3445               	retlw	69	;'E'
 11563  3B49  3452               	retlw	82	;'R'
 11564  3B4A  3420               	retlw	32	;' '
 11565  3B4B  3420               	retlw	32	;' '
 11566  3B4C  3420               	retlw	32	;' '
 11567  3B4D  3400               	retlw	0
 11568                           
 11569                           	psect	stringtext45
 11570  3B4E                     __pstringtext45:	
 11571  3B4E                     STR_55:	
 11572  3B4E  3453               	retlw	83	;'S'
 11573  3B4F  3448               	retlw	72	;'H'
 11574  3B50  344F               	retlw	79	;'O'
 11575  3B51  3454               	retlw	84	;'T'
 11576  3B52  3420               	retlw	32	;' '
 11577  3B53  3420               	retlw	32	;' '
 11578  3B54  3420               	retlw	32	;' '
 11579  3B55  3400               	retlw	0
 11580                           
 11581                           	psect	stringtext46
 11582  3B56                     __pstringtext46:	
 11583  3B56                     STR_18:	
 11584  3B56  3449               	retlw	73	;'I'
 11585  3B57  3450               	retlw	80	;'P'
 11586  3B58  346F               	retlw	111	;'o'
 11587  3B59  3441               	retlw	65	;'A'
 11588  3B5A  3443               	retlw	67	;'C'
 11589  3B5B  3420               	retlw	32	;' '
 11590  3B5C  3420               	retlw	32	;' '
 11591  3B5D  3400               	retlw	0
 11592                           
 11593                           	psect	stringtext47
 11594  3B5E                     __pstringtext47:	
 11595  3B5E                     STR_13:	
 11596  3B5E  3444               	retlw	68	;'D'
 11597  3B5F  3445               	retlw	69	;'E'
 11598  3B60  3446               	retlw	70	;'F'
 11599  3B61  3443               	retlw	67	;'C'
 11600  3B62  344F               	retlw	79	;'O'
 11601  3B63  344E               	retlw	78	;'N'
 11602  3B64  3420               	retlw	32	;' '
 11603  3B65  3400               	retlw	0
 11604                           
 11605                           	psect	stringtext48
 11606  3B66                     __pstringtext48:	
 11607  3B66                     STR_7:	
 11608  3B66  344D               	retlw	77	;'M'
 11609  3B67  3441               	retlw	65	;'A'
 11610  3B68  3454               	retlw	84	;'T'
 11611  3B69  3452               	retlw	82	;'R'
 11612  3B6A  3449               	retlw	73	;'I'
 11613  3B6B  3458               	retlw	88	;'X'
 11614  3B6C  3420               	retlw	32	;' '
 11615  3B6D  3400               	retlw	0
 11616                           
 11617                           	psect	stringtext49
 11618  3B6E                     __pstringtext49:	
 11619  3B6E                     STR_83:	
 11620  3B6E  3428               	retlw	40	;'('
 11621  3B6F  346E               	retlw	110	;'n'
 11622  3B70  3475               	retlw	117	;'u'
 11623  3B71  346C               	retlw	108	;'l'
 11624  3B72  346C               	retlw	108	;'l'
 11625  3B73  3429               	retlw	41	;')'
 11626  3B74  3400               	retlw	0
 11627                           
 11628                           	psect	stringtext50
 11629  3B75                     __pstringtext50:	
 11630  3B75                     STR_71:	
 11631  3B75  344F               	retlw	79	;'O'
 11632  3B76  3457               	retlw	87	;'W'
 11633  3B77  3420               	retlw	32	;' '
 11634  3B78  3420               	retlw	32	;' '
 11635  3B79  3420               	retlw	32	;' '
 11636  3B7A  3420               	retlw	32	;' '
 11637  3B7B  3400               	retlw	0
 11638                           
 11639                           	psect	stringtext51
 11640  3B7C                     __pstringtext51:	
 11641  3B7C                     STR_73:	
 11642  3B7C  3449               	retlw	73	;'I'
 11643  3B7D  3454               	retlw	84	;'T'
 11644  3B7E  3445               	retlw	69	;'E'
 11645  3B7F  3420               	retlw	32	;' '
 11646  3B80  3420               	retlw	32	;' '
 11647  3B81  3420               	retlw	32	;' '
 11648  3B82  3400               	retlw	0
 11649                           
 11650                           	psect	stringtext52
 11651  3B83                     __pstringtext52:	
 11652  3B83                     STR_78:	
 11653  3B83  3420               	retlw	32	;' '
 11654  3B84  3420               	retlw	32	;' '
 11655  3B85  3445               	retlw	69	;'E'
 11656  3B86  3457               	retlw	87	;'W'
 11657  3B87  3420               	retlw	32	;' '
 11658  3B88  3420               	retlw	32	;' '
 11659  3B89  3400               	retlw	0
 11660                           
 11661                           	psect	stringtext53
 11662  3B8A                     __pstringtext53:	
 11663  3B8A                     STR_70:	
 11664  3B8A  3420               	retlw	32	;' '
 11665  3B8B  3420               	retlw	32	;' '
 11666  3B8C  3446               	retlw	70	;'F'
 11667  3B8D  344F               	retlw	79	;'O'
 11668  3B8E  344C               	retlw	76	;'L'
 11669  3B8F  344C               	retlw	76	;'L'
 11670  3B90  3400               	retlw	0
 11671                           
 11672                           	psect	stringtext54
 11673  3B91                     __pstringtext54:	
 11674  3B91                     STR_76:	
 11675  3B91  3445               	retlw	69	;'E'
 11676  3B92  344F               	retlw	79	;'O'
 11677  3B93  3420               	retlw	32	;' '
 11678  3B94  3420               	retlw	32	;' '
 11679  3B95  3420               	retlw	32	;' '
 11680  3B96  3400               	retlw	0
 11681                           
 11682                           	psect	stringtext55
 11683  3B97                     __pstringtext55:	
 11684  3B97                     STR_14:	
 11685  3B97  3448               	retlw	72	;'H'
 11686  3B98  3441               	retlw	65	;'A'
 11687  3B99  3458               	retlw	88	;'X'
 11688  3B9A  3420               	retlw	32	;' '
 11689  3B9B  3420               	retlw	32	;' '
 11690  3B9C  3400               	retlw	0
 11691                           
 11692                           	psect	stringtext56
 11693  3B9D                     __pstringtext56:	
 11694  3B9D                     STR_8:	
 11695  3B9D  3445               	retlw	69	;'E'
 11696  3B9E  3458               	retlw	88	;'X'
 11697  3B9F  3449               	retlw	73	;'I'
 11698  3BA0  3454               	retlw	84	;'T'
 11699  3BA1  3420               	retlw	32	;' '
 11700  3BA2  3400               	retlw	0
 11701                           
 11702                           	psect	stringtext57
 11703  3BA3                     __pstringtext57:	
 11704  3BA3                     STR_5:	
 11705  3BA3  3453               	retlw	83	;'S'
 11706  3BA4  344C               	retlw	76	;'L'
 11707  3BA5  344F               	retlw	79	;'O'
 11708  3BA6  3454               	retlw	84	;'T'
 11709  3BA7  3420               	retlw	32	;' '
 11710  3BA8  3400               	retlw	0
 11711                           
 11712                           	psect	stringtext58
 11713  3BA9                     __pstringtext58:	
 11714  3BA9                     STR_74:	
 11715  3BA9  3420               	retlw	32	;' '
 11716  3BAA  3452               	retlw	82	;'R'
 11717  3BAB  3441               	retlw	65	;'A'
 11718  3BAC  3442               	retlw	66	;'B'
 11719  3BAD  3400               	retlw	0
 11720                           
 11721                           	psect	stringtext59
 11722  3BAE                     __pstringtext59:	
 11723  3BAE                     STR_48:	
 11724  3BAE  3456               	retlw	86	;'V'
 11725  3BAF  3444               	retlw	68	;'D'
 11726  3BB0  344B               	retlw	75	;'K'
 11727  3BB1  3441               	retlw	65	;'A'
 11728  3BB2  3400               	retlw	0
 11729                           
 11730                           	psect	stringtext60
 11731  3BB3                     __pstringtext60:	
 11732  3BB3                     STR_50:	
 11733  3BB3  3454               	retlw	84	;'T'
 11734  3BB4  3451               	retlw	81	;'Q'
 11735  3BB5  344C               	retlw	76	;'L'
 11736  3BB6  3441               	retlw	65	;'A'
 11737  3BB7  3400               	retlw	0
 11738                           
 11739                           	psect	stringtext61
 11740  3BB8                     __pstringtext61:	
 11741  3BB8                     STR_53:	
 11742  3BB8  3446               	retlw	70	;'F'
 11743  3BB9  3449               	retlw	73	;'I'
 11744  3BBA  3452               	retlw	82	;'R'
 11745  3BBB  3445               	retlw	69	;'E'
 11746  3BBC  3400               	retlw	0
 11747                           
 11748                           	psect	stringtext62
 11749  3BBD                     __pstringtext62:	
 11750  3BBD                     STR_51:	
 11751  3BBD  3443               	retlw	67	;'C'
 11752  3BBE  3448               	retlw	72	;'H'
 11753  3BBF  3455               	retlw	85	;'U'
 11754  3BC0  3447               	retlw	71	;'G'
 11755  3BC1  3400               	retlw	0
 11756                           
 11757                           	psect	stringtext63
 11758  3BC2                     __pstringtext63:	
 11759  3BC2                     STR_52:	
 11760  3BC2  3452               	retlw	82	;'R'
 11761  3BC3  3445               	retlw	69	;'E'
 11762  3BC4  3442               	retlw	66	;'B'
 11763  3BC5  344C               	retlw	76	;'L'
 11764  3BC6  3400               	retlw	0
 11765                           
 11766                           	psect	stringtext64
 11767  3BC7                     __pstringtext64:	
 11768  3BC7                     STR_47:	
 11769  3BC7  3442               	retlw	66	;'B'
 11770  3BC8  3445               	retlw	69	;'E'
 11771  3BC9  3445               	retlw	69	;'E'
 11772  3BCA  3452               	retlw	82	;'R'
 11773  3BCB  3400               	retlw	0
 11774                           
 11775                           	psect	stringtext65
 11776  3BCC                     __pstringtext65:	
 11777  3BCC                     STR_54:	
 11778  3BCC  3457               	retlw	87	;'W'
 11779  3BCD  3441               	retlw	65	;'A'
 11780  3BCE  3454               	retlw	84	;'T'
 11781  3BCF  3452               	retlw	82	;'R'
 11782  3BD0  3400               	retlw	0
 11783                           
 11784                           	psect	stringtext66
 11785  3BD1                     __pstringtext66:	
 11786  3BD1                     STR_46:	
 11787  3BD1  3453               	retlw	83	;'S'
 11788  3BD2  3448               	retlw	72	;'H'
 11789  3BD3  344F               	retlw	79	;'O'
 11790  3BD4  3454               	retlw	84	;'T'
 11791  3BD5  3400               	retlw	0
 11792                           
 11793                           	psect	stringtext67
 11794  3BD6                     __pstringtext67:	
 11795  3BD6                     STR_49:	
 11796  3BD6  3457               	retlw	87	;'W'
 11797  3BD7  3453               	retlw	83	;'S'
 11798  3BD8  344B               	retlw	75	;'K'
 11799  3BD9  3459               	retlw	89	;'Y'
 11800  3BDA  3400               	retlw	0
 11801                           
 11802                           	psect	stringtext68
 11803  3BDB                     __pstringtext68:	
 11804  3BDB                     STR_45:	
 11805  3BDB  344C               	retlw	76	;'L'
 11806  3BDC  344F               	retlw	79	;'O'
 11807  3BDD  3443               	retlw	67	;'C'
 11808  3BDE  344B               	retlw	75	;'K'
 11809  3BDF  3400               	retlw	0
 11810                           
 11811                           	psect	stringtext69
 11812  3BE0                     __pstringtext69:	
 11813  3BE0                     STR_44:	
 11814  3BE0  344F               	retlw	79	;'O'
 11815  3BE1  3450               	retlw	80	;'P'
 11816  3BE2  3445               	retlw	69	;'E'
 11817  3BE3  344E               	retlw	78	;'N'
 11818  3BE4  3400               	retlw	0
 11819                           
 11820                           	psect	stringtext70
 11821  3BE5                     __pstringtext70:	
 11822  3BE5                     STR_40:	
 11823  3BE5  3450               	retlw	80	;'P'
 11824  3BE6  3445               	retlw	69	;'E'
 11825  3BE7  3457               	retlw	87	;'W'
 11826  3BE8  3420               	retlw	32	;' '
 11827  3BE9  3400               	retlw	0
 11828                           
 11829                           	psect	stringtext71
 11830  3BEA                     __pstringtext71:	
 11831  3BEA                     STR_9:	
 11832  3BEA  344E               	retlw	78	;'N'
 11833  3BEB  3455               	retlw	85	;'U'
 11834  3BEC  344C               	retlw	76	;'L'
 11835  3BED  344C               	retlw	76	;'L'
 11836  3BEE  3400               	retlw	0
 11837                           
 11838                           	psect	stringtext72
 11839  3BEF                     __pstringtext72:	
 11840  3BEF                     STR_4:	
 11841  3BEF  344D               	retlw	77	;'M'
 11842  3BF0  3445               	retlw	69	;'E'
 11843  3BF1  344E               	retlw	78	;'N'
 11844  3BF2  3455               	retlw	85	;'U'
 11845  3BF3  3400               	retlw	0
 11846                           
 11847                           	psect	stringtext73
 11848  3BF4                     __pstringtext73:	
 11849  3BF4                     STR_2:	
 11850  3BF4  3444               	retlw	68	;'D'
 11851  3BF5  344F               	retlw	79	;'O'
 11852  3BF6  3457               	retlw	87	;'W'
 11853  3BF7  344E               	retlw	78	;'N'
 11854  3BF8  3400               	retlw	0
 11855                           
 11856                           	psect	stringtext74
 11857  3BF9                     __pstringtext74:	
 11858  3BF9                     STR_1:	
 11859  3BF9  3420               	retlw	32	;' '
 11860  3BFA  3420               	retlw	32	;' '
 11861  3BFB  3455               	retlw	85	;'U'
 11862  3BFC  3450               	retlw	80	;'P'
 11863  3BFD  3400               	retlw	0
 11864                           
 11865                           	psect	stringtext75
 11866  3BFE                     __pstringtext75:	
 11867  3BFE                     STR_41:	
 11868  3BFE  3425               	retlw	37	;'%'
 11869  3BFF  3434               	retlw	52	;'4'
 11870  3C00  3464               	retlw	100	;'d'
 11871  3C01  3400               	retlw	0
 11872                           
 11873                           	psect	stringtext76
 11874  3C02                     __pstringtext76:	
 11875  3C02                     STR_69:	
 11876  3C02  3425               	retlw	37	;'%'
 11877  3C03  3473               	retlw	115	;'s'
 11878  3C04  3400               	retlw	0
 11879                           
 11880                           	psect	stringtext77
 11881  0000                     __pstringtext77:	
 11882  287D                     
 11883                           ; #config settings
 11884  0000                     
 11885                           	psect	cinit
 11886  0018                     start_initialization:	
 11887  0018                     __initialization:		;BIGRAM
 11888                           
 11889                           ; Initialize objects allocated to BIGRAM
 11890  0018  3000               	movlw	low __pidataBIGRAM
 11891  0019  0084               	movwf	4
 11892  001A  30A7               	movlw	(high __pidataBIGRAM)| (0+128)
 11893  001B  0085               	movwf	5
 11894  001C  30F0               	movlw	low (0+9968)
 11895  001D  0086               	movwf	6
 11896  001E  3026               	movlw	high (0+9968)
 11897  001F  0087               	movwf	7
 11898  0020  3001               	movlw	1
 11899  0021  00FF               	movwf	btemp+1
 11900  0022  3000               	movlw	0
 11901  0023  31B2  22E2  3180   	fcall	init_ram
 11902                           
 11903                           ; Initialize objects allocated to BANK1
 11904  0026  3035               	movlw	low __pidataBANK1
 11905  0027  0084               	movwf	4
 11906  0028  30B3               	movlw	(high __pidataBANK1)| (0+128)
 11907  0029  0085               	movwf	5
 11908  002A  30C7               	movlw	low __pdataBANK1
 11909  002B  0086               	movwf	6
 11910  002C  3000               	movlw	high __pdataBANK1
 11911  002D  0087               	movwf	7
 11912  002E  3000               	movlw	0
 11913  002F  00FF               	movwf	btemp+1
 11914  0030  300F               	movlw	15
 11915  0031  31B2  22E2  3180   	fcall	init_ram
 11916                           
 11917                           ; Initialize objects allocated to BANK2
 11918  0034  3040               	movlw	low __pidataBANK2
 11919  0035  0084               	movwf	4
 11920  0036  30B2               	movlw	(high __pidataBANK2)| (0+128)
 11921  0037  0085               	movwf	5
 11922  0038  3069               	movlw	low __pdataBANK2
 11923  0039  0086               	movwf	6
 11924  003A  3001               	movlw	high __pdataBANK2
 11925  003B  0087               	movwf	7
 11926  003C  3000               	movlw	0
 11927  003D  00FF               	movwf	btemp+1
 11928  003E  3007               	movlw	7
 11929  003F  31B2  22E2  3180   	fcall	init_ram
 11930                           
 11931                           ; Initialize objects allocated to BANK3
 11932  0042  3014               	movlw	low __pidataBANK3
 11933  0043  0084               	movwf	4
 11934  0044  30B5               	movlw	(high __pidataBANK3)| (0+128)
 11935  0045  0085               	movwf	5
 11936  0046  30D1               	movlw	low __pdataBANK3
 11937  0047  0086               	movwf	6
 11938  0048  3001               	movlw	high __pdataBANK3
 11939  0049  0087               	movwf	7
 11940  004A  3000               	movlw	0
 11941  004B  00FF               	movwf	btemp+1
 11942  004C  301E               	movlw	30
 11943  004D  31B2  22E2  3180   	fcall	init_ram
 11944                           
 11945                           ; Initialize objects allocated to BANK4
 11946  0050  30F3               	movlw	low __pidataBANK4
 11947  0051  0084               	movwf	4
 11948  0052  30A9               	movlw	(high __pidataBANK4)| (0+128)
 11949  0053  0085               	movwf	5
 11950  0054  3020               	movlw	low __pdataBANK4
 11951  0055  0086               	movwf	6
 11952  0056  3002               	movlw	high __pdataBANK4
 11953  0057  0087               	movwf	7
 11954  0058  3000               	movlw	0
 11955  0059  00FF               	movwf	btemp+1
 11956  005A  3046               	movlw	70
 11957  005B  31B2  22E2  3180   	fcall	init_ram
 11958                           
 11959                           ; Initialize objects allocated to BANK5
 11960  005E  3000               	movlw	low __pidataBANK5
 11961  005F  0084               	movwf	4
 11962  0060  3088               	movlw	(high __pidataBANK5)| (0+128)
 11963  0061  0085               	movwf	5
 11964  0062  30CA               	movlw	low __pdataBANK5
 11965  0063  0086               	movwf	6
 11966  0064  3002               	movlw	high __pdataBANK5
 11967  0065  0087               	movwf	7
 11968  0066  3000               	movlw	0
 11969  0067  00FF               	movwf	btemp+1
 11970  0068  3019               	movlw	25
 11971  0069  31B2  22E2  3180   	fcall	init_ram
 11972                           
 11973                           ; Initialize objects allocated to BANK6
 11974  006C  30C8               	movlw	low __pidataBANK6
 11975  006D  0084               	movwf	4
 11976  006E  30AA               	movlw	(high __pidataBANK6)| (0+128)
 11977  006F  0085               	movwf	5
 11978  0070  3020               	movlw	low __pdataBANK6
 11979  0071  0086               	movwf	6
 11980  0072  3003               	movlw	high __pdataBANK6
 11981  0073  0087               	movwf	7
 11982  0074  3000               	movlw	0
 11983  0075  00FF               	movwf	btemp+1
 11984  0076  3049               	movlw	73
 11985  0077  31B2  22E2  3180   	fcall	init_ram
 11986                           
 11987                           ; Initialize objects allocated to BANK7
 11988  007A  305B               	movlw	low __pidataBANK7
 11989  007B  0084               	movwf	4
 11990  007C  30AB               	movlw	(high __pidataBANK7)| (0+128)
 11991  007D  0085               	movwf	5
 11992  007E  30A0               	movlw	low __pdataBANK7
 11993  007F  0086               	movwf	6
 11994  0080  3003               	movlw	high __pdataBANK7
 11995  0081  0087               	movwf	7
 11996  0082  3000               	movlw	0
 11997  0083  00FF               	movwf	btemp+1
 11998  0084  304C               	movlw	76
 11999  0085  31B2  22E2  3180   	fcall	init_ram
 12000                           
 12001                           ; Initialize objects allocated to BANK8
 12002  0088  3014               	movlw	low __pidataBANK8
 12003  0089  0084               	movwf	4
 12004  008A  30B7               	movlw	(high __pidataBANK8)| (0+128)
 12005  008B  0085               	movwf	5
 12006  008C  3020               	movlw	low __pdataBANK8
 12007  008D  0086               	movwf	6
 12008  008E  3004               	movlw	high __pdataBANK8
 12009  008F  0087               	movwf	7
 12010  0090  3000               	movlw	0
 12011  0091  00FF               	movwf	btemp+1
 12012  0092  3038               	movlw	56
 12013  0093  31B2  22E2  3180   	fcall	init_ram
 12014                           
 12015                           ; Initialize objects allocated to BANK10
 12016  0096  3085               	movlw	low __pidataBANK10
 12017  0097  0084               	movwf	4
 12018  0098  30B7               	movlw	(high __pidataBANK10)| (0+128)
 12019  0099  0085               	movwf	5
 12020  009A  3020               	movlw	low __pdataBANK10
 12021  009B  0086               	movwf	6
 12022  009C  3005               	movlw	high __pdataBANK10
 12023  009D  0087               	movwf	7
 12024  009E  3000               	movlw	0
 12025  009F  00FF               	movwf	btemp+1
 12026  00A0  303A               	movlw	58
 12027  00A1  31B2  22E2  3180   	fcall	init_ram
 12028                           
 12029                           ; Clear objects allocated to COMMON
 12030  00A4  01FC               	clrf	__pbssCOMMON& (0+127)
 12031                           
 12032                           ; Clear objects allocated to BANK1
 12033  00A5  30A0               	movlw	low __pbssBANK1
 12034  00A6  0084               	movwf	4
 12035  00A7  3000               	movlw	high __pbssBANK1
 12036  00A8  0085               	movwf	5
 12037  00A9  3027               	movlw	39
 12038  00AA  00FE               	movwf	btemp
 12039  00AB  3000               	movlw	0
 12040  00AC  00FF               	movwf	btemp+1
 12041  00AD  31B2  22D6  3180   	fcall	clear_ram0
 12042                           
 12043                           ; Clear objects allocated to BANK2
 12044  00B0  3020               	movlw	low __pbssBANK2
 12045  00B1  0084               	movwf	4
 12046  00B2  3001               	movlw	high __pbssBANK2
 12047  00B3  0085               	movwf	5
 12048  00B4  3049               	movlw	73
 12049  00B5  00FE               	movwf	btemp
 12050  00B6  3000               	movlw	0
 12051  00B7  00FF               	movwf	btemp+1
 12052  00B8  31B2  22D6  3180   	fcall	clear_ram0
 12053                           
 12054                           ; Clear objects allocated to BANK3
 12055  00BB  30A0               	movlw	low __pbssBANK3
 12056  00BC  0084               	movwf	4
 12057  00BD  3001               	movlw	high __pbssBANK3
 12058  00BE  0085               	movwf	5
 12059  00BF  3031               	movlw	49
 12060  00C0  00FE               	movwf	btemp
 12061  00C1  3000               	movlw	0
 12062  00C2  00FF               	movwf	btemp+1
 12063  00C3  31B2  22D6  3180   	fcall	clear_ram0
 12064                           
 12065                           ; Clear objects allocated to BANK5
 12066  00C6  30A0               	movlw	low __pbssBANK5
 12067  00C7  0084               	movwf	4
 12068  00C8  3002               	movlw	high __pbssBANK5
 12069  00C9  0085               	movwf	5
 12070  00CA  302A               	movlw	42
 12071  00CB  00FE               	movwf	btemp
 12072  00CC  3000               	movlw	0
 12073  00CD  00FF               	movwf	btemp+1
 12074  00CE  31B2  22D6  3180   	fcall	clear_ram0
 12075                           
 12076                           ; Clear objects allocated to BANK9
 12077  00D1  30A0               	movlw	low __pbssBANK9
 12078  00D2  0084               	movwf	4
 12079  00D3  3004               	movlw	high __pbssBANK9
 12080  00D4  0085               	movwf	5
 12081  00D5  303D               	movlw	61
 12082  00D6  00FE               	movwf	btemp
 12083  00D7  3000               	movlw	0
 12084  00D8  00FF               	movwf	btemp+1
 12085  00D9  31B2  22D6  3180   	fcall	clear_ram0
 12086                           
 12087                           ; Clear objects allocated to BANK11
 12088  00DC  30A0               	movlw	low __pbssBANK11
 12089  00DD  0084               	movwf	4
 12090  00DE  3005               	movlw	high __pbssBANK11
 12091  00DF  0085               	movwf	5
 12092  00E0  3028               	movlw	40
 12093  00E1  00FE               	movwf	btemp
 12094  00E2  3000               	movlw	0
 12095  00E3  00FF               	movwf	btemp+1
 12096  00E4  31B2  22D6         	fcall	clear_ram0
 12097  00E6                     end_of_initialization:	
 12098                           ;End of C runtime variable initialization code
 12099                           
 12100  00E6                     __end_of__initialization:	
 12101  00E6  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 12102  00E7  0020               	movlb	0
 12103  00E8  3186  2E66         	ljmp	_main	;jump to C main() function
 12104                           
 12105                           	psect	bssCOMMON
 12106  007C                     __pbssCOMMON:	
 12107  007C                     _Shot_Index:	
 12108  007C                     	ds	1
 12109                           
 12110                           	psect	bssBANK1
 12111  00A0                     __pbssBANK1:	
 12112  00A0                     _matrix_leds_idx:	
 12113  00A0                     	ds	2
 12114  00A2                     _locked_leds:	
 12115  00A2                     	ds	2
 12116  00A4                     _locked_locking_leds_idx:	
 12117  00A4                     	ds	2
 12118  00A6                     _flashy_option_size:	
 12119  00A6                     	ds	2
 12120  00A8                     _flashy_option_idx:	
 12121  00A8                     	ds	2
 12122  00AA                     _deaths:	
 12123  00AA                     	ds	2
 12124  00AC                     _flashy_scroll_rate:	
 12125  00AC                     	ds	2
 12126  00AE                     _flashy_sparkle_rate:	
 12127  00AE                     	ds	2
 12128  00B0                     _flashy_leds_state_track:	
 12129  00B0                     	ds	2
 12130  00B2                     _flashy_leds_idx:	
 12131  00B2                     	ds	2
 12132  00B4                     _menu_option_size:	
 12133  00B4                     	ds	2
 12134  00B6                     _menu_option_idx:	
 12135  00B6                     	ds	2
 12136  00B8                     _oddeven:	
 12137  00B8                     	ds	2
 12138  00BA                     _currentTask:	
 12139  00BA                     	ds	2
 12140  00BC                     _slot_taskData:	
 12141  00BC                     	ds	2
 12142  00BE                     _TMR0_InterruptHandler:	
 12143  00BE                     	ds	2
 12144  00C0                     _timer0ReloadVal16bit:	
 12145  00C0                     	ds	2
 12146  00C2                     _matrix_found:	
 12147  00C2                     	ds	1
 12148  00C3                     _pw_found:	
 12149  00C3                     	ds	1
 12150  00C4                     _badge_locked:	
 12151  00C4                     	ds	1
 12152  00C5                     _secret_value:	
 12153  00C5                     	ds	2
 12154                           
 12155                           	psect	dataBANK1
 12156  00C7                     __pdataBANK1:	
 12157  00C7                     marquee@F14099:	
 12158  00C7                     	ds	5
 12159  00CC                     _randx:	
 12160  00CC                     	ds	4
 12161  00D0                     _Leds_idx:	
 12162  00D0                     	ds	2
 12163  00D2                     _locked_lock_base_leds:	
 12164  00D2                     	ds	2
 12165  00D4                     _FLASHY_TEXT_SECRET_TEST:	
 12166  00D4                     	ds	2
 12167                           
 12168                           	psect	bssBANK2
 12169  0120                     __pbssBANK2:	
 12170  0120                     _matrix_option_size:	
 12171  0120                     	ds	2
 12172  0122                     _matrix_option_idx:	
 12173  0122                     	ds	2
 12174  0124                     _TMR4_InterruptHandler:	
 12175  0124                     	ds	2
 12176  0126                     _TMR2_InterruptHandler:	
 12177  0126                     	ds	2
 12178  0128                     _secret_task:	
 12179  0128                     	ds	13
 12180  0135                     _locked_task:	
 12181  0135                     	ds	13
 12182  0142                     _slot_task:	
 12183  0142                     	ds	13
 12184  014F                     _menu_task:	
 12185  014F                     	ds	13
 12186  015C                     _flashy_task:	
 12187  015C                     	ds	13
 12188                           
 12189                           	psect	dataBANK2
 12190  0169                     __pdataBANK2:	
 12191  0169                     marquee_speedy@F14090:	
 12192  0169                     	ds	5
 12193  016E                     _FLASHY_TEXT:	
 12194  016E                     	ds	2
 12195                           
 12196                           	psect	bssBANK3
 12197  01A0                     __pbssBANK3:	
 12198  01A0                     _schedulerInst:	
 12199  01A0                     	ds	18
 12200  01B2                     _badge_inst:	
 12201  01B2                     	ds	18
 12202  01C4                     _matrix_task:	
 12203  01C4                     	ds	13
 12204                           
 12205                           	psect	dataBANK3
 12206  01D1                     __pdataBANK3:	
 12207  01D1                     _Shot_Options:	
 12208  01D1                     	ds	18
 12209  01E3                     _locked_locking_leds:	
 12210  01E3                     	ds	12
 12211                           
 12212                           	psect	dataBANK4
 12213  0220                     __pdataBANK4:	
 12214  0220                     _menu_options_leds:	
 12215  0220                     	ds	10
 12216  022A                     _menu_option:	
 12217  022A                     	ds	10
 12218  0234                     _secret_inputs:	
 12219  0234                     	ds	25
 12220  024D                     _locked_secret_inputs:	
 12221  024D                     	ds	25
 12222                           
 12223                           	psect	bssBANK5
 12224  02A0                     __pbssBANK5:	
 12225  02A0                     _secret_TaskData:	
 12226  02A0                     	ds	14
 12227  02AE                     _locked_TaskData:	
 12228  02AE                     	ds	14
 12229  02BC                     _menu_TaskData:	
 12230  02BC                     	ds	14
 12231                           
 12232                           	psect	dataBANK5
 12233  02CA                     __pdataBANK5:	
 12234  02CA                     _matrix_secret_inputs:	
 12235  02CA                     	ds	25
 12236                           
 12237                           	psect	dataBANK6
 12238  0320                     __pdataBANK6:	
 12239  0320                     _Shot_Options_Long:	
 12240  0320                     	ds	18
 12241  0332                     _Slot_Wheel:	
 12242  0332                     	ds	55
 12243                           
 12244                           	psect	dataBANK7
 12245  03A0                     __pdataBANK7:	
 12246  03A0                     _roundabout_leds_inverse:	
 12247  03A0                     	ds	28
 12248  03BC                     _roundabout_leds:	
 12249  03BC                     	ds	28
 12250  03D8                     _matrix_option:	
 12251  03D8                     	ds	20
 12252                           
 12253                           	psect	dataBANK8
 12254  0420                     __pdataBANK8:	
 12255  0420                     _curtain_leds_inverse:	
 12256  0420                     	ds	28
 12257  043C                     _curtain_leds:	
 12258  043C                     	ds	28
 12259                           
 12260                           	psect	bssBANK9
 12261  04A0                     __pbssBANK9:	
 12262  04A0                     _matrix_TaskData:	
 12263  04A0                     	ds	31
 12264  04BF                     _flashy_TaskData:	
 12265  04BF                     	ds	30
 12266                           
 12267                           	psect	dataBANK10
 12268  0520                     __pdataBANK10:	
 12269  0520                     _flashy_option:	
 12270  0520                     	ds	58
 12271                           
 12272                           	psect	bssBANK11
 12273  05A0                     __pbssBANK11:	
 12274  05A0                     _slot_TaskData:	
 12275  05A0                     	ds	40
 12276                           
 12277                           	psect	inittext
 12278  32E2                     init_ram:	
 12279  32E2  00FE               	movwf	126
 12280  32E3                     initloop:	
 12281  32E3  0012               	moviw fsr0++
 12282  32E4  001E               	movwi fsr1++
 12283  32E5  3001               	movlw	1
 12284  32E6  02FE               	subwf	126,f
 12285  32E7  3000               	movlw	0
 12286  32E8  3BFF               	subwfb	127,f
 12287  32E9  087F               	movf	127,w
 12288  32EA  047E               	iorwf	126,w
 12289  32EB  1903               	btfsc	3,2
 12290  32EC  3400               	retlw	0
 12291  32ED  2AE3               	goto	initloop
 12292                           
 12293                           	psect	clrtext
 12294  32D6                     clear_ram0:	
 12295                           ;	Called with FSR0 containing the base address, and
 12296                           ;	btemp/btemp+1 has the size to clear
 12297                           
 12298  32D6  0064               	clrwdt	;clear the watchdog before getting into this loop
 12299  32D7                     clrloop0:	
 12300  32D7  0180               	clrf	0	;clear RAM location pointed to by FSR
 12301  32D8  3101               	addfsr 0,1
 12302  32D9  3001               	movlw	1
 12303  32DA  02FE               	subwf	126,f
 12304  32DB  3000               	movlw	0
 12305  32DC  3BFF               	subwfb	127,f
 12306  32DD  087F               	movf	127,w
 12307  32DE  047E               	iorwf	126,w
 12308  32DF  1903               	btfsc	3,2
 12309  32E0  3400               	retlw	0	;all done for this memory range, return
 12310  32E1  2AD7               	goto	clrloop0	;have we reached the end yet?
 12311                           
 12312                           	psect	cstackBANK1
 12313  00D6                     __pcstackBANK1:	
 12314  00D6                     schedulerExecute@currentSystemTick:	
 12315                           
 12316                           ; 2 bytes @ 0x0
 12317  00D6                     	ds	2
 12318  00D8                     schedulerExecute@taskLastSystemTick:	
 12319                           
 12320                           ; 2 bytes @ 0x2
 12321  00D8                     	ds	2
 12322  00DA                     schedulerExecute@tickDelta:	
 12323                           
 12324                           ; 2 bytes @ 0x4
 12325  00DA                     	ds	2
 12326  00DC                     schedulerExecute@scheduler:	
 12327                           
 12328                           ; 1 bytes @ 0x6
 12329  00DC                     	ds	1
 12330  00DD                     schedulerExecute@k:	
 12331                           
 12332                           ; 1 bytes @ 0x7
 12333  00DD                     	ds	1
 12334                           
 12335                           	psect	cstackCOMMON
 12336  0070                     __pcstackCOMMON:	
 12337  0070                     ?_isdigit:	
 12338  0070                     ?_TMR2_StartTimer:	
 12339                           ; 1 bit 
 12340                           
 12341  0070                     ?_TMR4_StartTimer:	
 12342                           ; 1 bytes @ 0x0
 12343                           
 12344  0070                     ?_PIN_MANAGER_Initialize:	
 12345                           ; 1 bytes @ 0x0
 12346                           
 12347  0070                     ?_OSCILLATOR_Initialize:	
 12348                           ; 1 bytes @ 0x0
 12349                           
 12350  0070                     ?_WDT_Initialize:	
 12351                           ; 1 bytes @ 0x0
 12352                           
 12353  0070                     ?_PWM2_Initialize:	
 12354                           ; 1 bytes @ 0x0
 12355                           
 12356  0070                     ?_TMR0_Initialize:	
 12357                           ; 1 bytes @ 0x0
 12358                           
 12359  0070                     ?_TMR0_DefaultInterruptHandler:	
 12360                           ; 1 bytes @ 0x0
 12361                           
 12362  0070                     ??_TMR0_DefaultInterruptHandler:	
 12363                           ; 1 bytes @ 0x0
 12364                           
 12365  0070                     ?_TMR0_StartTimer:	
 12366                           ; 1 bytes @ 0x0
 12367                           
 12368  0070                     ?_TMR0_CallBack:	
 12369                           ; 1 bytes @ 0x0
 12370                           
 12371  0070                     ??_TMR0_CallBack:	
 12372                           ; 1 bytes @ 0x0
 12373                           
 12374  0070                     ?_nullifyBadge_segDisplayRegister:	
 12375                           ; 1 bytes @ 0x0
 12376                           
 12377  0070                     ?_nullifyBadge_segDisplayErase:	
 12378                           ; 1 bytes @ 0x0
 12379                           
 12380  0070                     ?_nullifyBadge_segDisplayForceUpdate:	
 12381                           ; 1 bytes @ 0x0
 12382                           
 12383  0070                     ?_nullifyBadge_platformInit:	
 12384                           ; 1 bytes @ 0x0
 12385                           
 12386  0070                     ?_displayL2_Initialize:	
 12387                           ; 1 bytes @ 0x0
 12388                           
 12389  0070                     ?_displayL2_ForceUpdate:	
 12390                           ; 1 bytes @ 0x0
 12391                           
 12392  0070                     ?_displayL2_EraseSegDisplay:	
 12393                           ; 1 bytes @ 0x0
 12394                           
 12395  0070                     ?_displayL2_ClrUserLeds:	
 12396                           ; 1 bytes @ 0x0
 12397                           
 12398  0070                     ?_displayL1_Update:	
 12399                           ; 1 bytes @ 0x0
 12400                           
 12401  0070                     ?_SPI1_Initialize:	
 12402                           ; 1 bytes @ 0x0
 12403                           
 12404  0070                     ?_SPI1_Exchange8bit:	
 12405                           ; 1 bytes @ 0x0
 12406                           
 12407  0070                     ?_PWM5_Initialize:	
 12408                           ; 1 bytes @ 0x0
 12409                           
 12410  0070                     ?_PWM6_Initialize:	
 12411                           ; 1 bytes @ 0x0
 12412                           
 12413  0070                     ?_PWM1_Initialize:	
 12414                           ; 1 bytes @ 0x0
 12415                           
 12416  0070                     ?_TMR2_Initialize:	
 12417                           ; 1 bytes @ 0x0
 12418                           
 12419  0070                     ?_TMR4_Initialize:	
 12420                           ; 1 bytes @ 0x0
 12421                           
 12422  0070                     ?_SYSTEM_Initialize:	
 12423                           ; 1 bytes @ 0x0
 12424                           
 12425  0070                     ?_TMR0_ISR:	
 12426                           ; 1 bytes @ 0x0
 12427                           
 12428  0070                     ??_TMR0_ISR:	
 12429                           ; 1 bytes @ 0x0
 12430                           
 12431  0070                     ?_INTERRUPT_InterruptManager:	
 12432                           ; 1 bytes @ 0x0
 12433                           
 12434  0070                     ??_INTERRUPT_InterruptManager:	
 12435                           ; 1 bytes @ 0x0
 12436                           
 12437  0070                     ?_scheduler_TaskRun:	
 12438                           ; 1 bytes @ 0x0
 12439                           
 12440  0070                     ?_scheduler_Init:	
 12441                           ; 1 bytes @ 0x0
 12442                           
 12443  0070                     ?_scheduler_TaskInit:	
 12444                           ; 1 bytes @ 0x0
 12445                           
 12446  0070                     ?_schedulerExecute:	
 12447                           ; 1 bytes @ 0x0
 12448                           
 12449  0070                     ?_led_rand:	
 12450                           ; 1 bytes @ 0x0
 12451                           
 12452  0070                     ?_main:	
 12453                           ; 1 bytes @ 0x0
 12454                           
 12455  0070                     ?_nullifyBadge_userLedsRegister:	
 12456                           ; 1 bytes @ 0x0
 12457                           
 12458  0070                     ?_nullifyBadge_userLedsClr:	
 12459                           ; 1 bytes @ 0x0
 12460                           
 12461  0070                     ?_nullifyBadge_buttonsGet:	
 12462                           ; 1 bytes @ 0x0
 12463                           
 12464  0070                     ?_nullifyBadge_irGet:	
 12465                           ; 1 bytes @ 0x0
 12466                           
 12467  0070                     ?_nullifyBadge_irTxRegister:	
 12468                           ; 1 bytes @ 0x0
 12469                           
 12470  0070                     ?_nullifyBadge_irTxRelease:	
 12471                           ; 1 bytes @ 0x0
 12472                           
 12473  0070                     ?_nullifyBadge_irTxSet:	
 12474                           ; 1 bytes @ 0x0
 12475                           
 12476  0070                     ?_nullifyBadge_irTxClr:	
 12477                           ; 1 bytes @ 0x0
 12478                           
 12479  0070                     ?_displayL1_Initialize:	
 12480                           ; 1 bytes @ 0x0
 12481                           
 12482  0070                     ?_locked_lock_leds:	
 12483                           ; 1 bytes @ 0x0
 12484                           
 12485  0070                     ?_locked_unlock_leds:	
 12486                           ; 2 bytes @ 0x0
 12487                           
 12488                           
 12489                           ; 2 bytes @ 0x0
 12490  0070                     	ds	1
 12491  0071                     ??_TMR2_StartTimer:	
 12492  0071                     ??_TMR4_StartTimer:	
 12493                           ; 1 bytes @ 0x1
 12494                           
 12495  0071                     ??_PIN_MANAGER_Initialize:	
 12496                           ; 1 bytes @ 0x1
 12497                           
 12498  0071                     ??_OSCILLATOR_Initialize:	
 12499                           ; 1 bytes @ 0x1
 12500                           
 12501  0071                     ??_WDT_Initialize:	
 12502                           ; 1 bytes @ 0x1
 12503                           
 12504  0071                     ??_PWM2_Initialize:	
 12505                           ; 1 bytes @ 0x1
 12506                           
 12507  0071                     ?_TMR0_SetInterruptHandler:	
 12508                           ; 1 bytes @ 0x1
 12509                           
 12510  0071                     ??_TMR0_StartTimer:	
 12511                           ; 1 bytes @ 0x1
 12512                           
 12513  0071                     ??_nullifyBadge_segDisplayRegister:	
 12514                           ; 1 bytes @ 0x1
 12515                           
 12516  0071                     ?_secret_clear:	
 12517                           ; 1 bytes @ 0x1
 12518                           
 12519  0071                     ??_isdigit:	
 12520                           ; 1 bytes @ 0x1
 12521                           
 12522  0071                     ??_SPI1_Initialize:	
 12523                           ; 1 bytes @ 0x1
 12524                           
 12525  0071                     ??_SPI1_Exchange8bit:	
 12526                           ; 1 bytes @ 0x1
 12527                           
 12528  0071                     ??_PWM5_Initialize:	
 12529                           ; 1 bytes @ 0x1
 12530                           
 12531  0071                     ?_PWM5_LoadDutyValue:	
 12532                           ; 1 bytes @ 0x1
 12533                           
 12534  0071                     ??_PWM6_Initialize:	
 12535                           ; 1 bytes @ 0x1
 12536                           
 12537  0071                     ?_PWM6_LoadDutyValue:	
 12538                           ; 1 bytes @ 0x1
 12539                           
 12540  0071                     ??_PWM1_Initialize:	
 12541                           ; 1 bytes @ 0x1
 12542                           
 12543  0071                     ?_PWM1_LoadDutyValue:	
 12544                           ; 1 bytes @ 0x1
 12545                           
 12546  0071                     ??_TMR2_Initialize:	
 12547                           ; 1 bytes @ 0x1
 12548                           
 12549  0071                     ??_TMR4_Initialize:	
 12550                           ; 1 bytes @ 0x1
 12551                           
 12552  0071                     ?_PWM2_LoadDutyValue:	
 12553                           ; 1 bytes @ 0x1
 12554                           
 12555  0071                     ??_scheduler_Init:	
 12556                           ; 1 bytes @ 0x1
 12557                           
 12558  0071                     ??_scheduler_TaskInit:	
 12559                           ; 1 bytes @ 0x1
 12560                           
 12561  0071                     ??_nullifyBadge_userLedsRegister:	
 12562                           ; 1 bytes @ 0x1
 12563                           
 12564  0071                     ??_nullifyBadge_buttonsGet:	
 12565                           ; 1 bytes @ 0x1
 12566                           
 12567  0071                     ??_nullifyBadge_irGet:	
 12568                           ; 1 bytes @ 0x1
 12569                           
 12570  0071                     ??_nullifyBadge_irTxRegister:	
 12571                           ; 1 bytes @ 0x1
 12572                           
 12573  0071                     ??_nullifyBadge_irTxRelease:	
 12574                           ; 1 bytes @ 0x1
 12575                           
 12576  0071                     ??_nullifyBadge_irTxSet:	
 12577                           ; 1 bytes @ 0x1
 12578                           
 12579  0071                     ??_nullifyBadge_irTxClr:	
 12580                           ; 1 bytes @ 0x1
 12581                           
 12582  0071                     ?_displayL1_SetUserLed:	
 12583                           ; 1 bytes @ 0x1
 12584                           
 12585  0071                     ??_locked_lock_leds:	
 12586                           ; 1 bytes @ 0x1
 12587                           
 12588  0071                     ??_locked_unlock_leds:	
 12589                           ; 1 bytes @ 0x1
 12590                           
 12591  0071                     ?___bmul:	
 12592                           ; 1 bytes @ 0x1
 12593                           
 12594  0071                     ?_strlen:	
 12595                           ; 1 bytes @ 0x1
 12596                           
 12597  0071                     ?_memset:	
 12598                           ; 2 bytes @ 0x1
 12599                           
 12600  0071                     ?_displayCharReverse:	
 12601                           ; 2 bytes @ 0x1
 12602                           
 12603  0071                     ?_TMR0_Read16bitTimer:	
 12604                           ; 2 bytes @ 0x1
 12605                           
 12606  0071                     ?_locked_get_lock_leds:	
 12607                           ; 2 bytes @ 0x1
 12608                           
 12609  0071                     ?_locked_get_unlock_leds:	
 12610                           ; 2 bytes @ 0x1
 12611                           
 12612  0071                     ?___wmul:	
 12613                           ; 2 bytes @ 0x1
 12614                           
 12615  0071                     ?___lwdiv:	
 12616                           ; 2 bytes @ 0x1
 12617                           
 12618  0071                     ?___lmul:	
 12619                           ; 2 bytes @ 0x1
 12620                           
 12621  0071                     SPI1_Exchange8bit@data:	
 12622                           ; 4 bytes @ 0x1
 12623                           
 12624  0071                     PIN_MANAGER_Initialize@state:	
 12625                           ; 1 bytes @ 0x1
 12626                           
 12627  0071                     scheduler_TaskInit@task:	
 12628                           ; 1 bytes @ 0x1
 12629                           
 12630  0071                     nullifyBadge_segDisplayRegister@badge:	
 12631                           ; 1 bytes @ 0x1
 12632                           
 12633  0071                     nullifyBadge_userLedsRegister@badge:	
 12634                           ; 1 bytes @ 0x1
 12635                           
 12636  0071                     nullifyBadge_irTxRegister@badge:	
 12637                           ; 1 bytes @ 0x1
 12638                           
 12639  0071                     ___bmul@multiplicand:	
 12640                           ; 1 bytes @ 0x1
 12641                           
 12642  0071                     _isdigit$3635:	
 12643                           ; 1 bytes @ 0x1
 12644                           
 12645  0071                     PWM5_LoadDutyValue@dutyValue:	
 12646                           ; 1 bytes @ 0x1
 12647                           
 12648  0071                     PWM6_LoadDutyValue@dutyValue:	
 12649                           ; 2 bytes @ 0x1
 12650                           
 12651  0071                     PWM1_LoadDutyValue@dutyValue:	
 12652                           ; 2 bytes @ 0x1
 12653                           
 12654  0071                     PWM2_LoadDutyValue@dutyValue:	
 12655                           ; 2 bytes @ 0x1
 12656                           
 12657  0071                     TMR0_SetInterruptHandler@InterruptHandler:	
 12658                           ; 2 bytes @ 0x1
 12659                           
 12660  0071                     displayL1_SetUserLed@userLedVect:	
 12661                           ; 2 bytes @ 0x1
 12662                           
 12663  0071                     displayCharReverse@cVal:	
 12664                           ; 2 bytes @ 0x1
 12665                           
 12666  0071                     secret_clear@data:	
 12667                           ; 2 bytes @ 0x1
 12668                           
 12669  0071                     ___wmul@multiplier:	
 12670                           ; 2 bytes @ 0x1
 12671                           
 12672  0071                     ___lwdiv@divisor:	
 12673                           ; 2 bytes @ 0x1
 12674                           
 12675  0071                     memset@p1:	
 12676                           ; 2 bytes @ 0x1
 12677                           
 12678  0071                     strlen@s:	
 12679                           ; 2 bytes @ 0x1
 12680                           
 12681  0071                     ___lmul@multiplier:	
 12682                           ; 2 bytes @ 0x1
 12683                           
 12684                           
 12685                           ; 4 bytes @ 0x1
 12686  0071                     	ds	1
 12687  0072                     ?_SPI1_Exchange8bitBuffer:	
 12688  0072                     ??___bmul:	
 12689                           ; 1 bytes @ 0x2
 12690                           
 12691  0072                     SPI1_Exchange8bitBuffer@bufLen:	
 12692                           ; 1 bytes @ 0x2
 12693                           
 12694  0072                     scheduler_Init@scheduler:	
 12695                           ; 1 bytes @ 0x2
 12696                           
 12697  0072                     nullifyBadge_irTxRelease@badge:	
 12698                           ; 1 bytes @ 0x2
 12699                           
 12700  0072                     isdigit@c:	
 12701                           ; 1 bytes @ 0x2
 12702                           
 12703                           
 12704                           ; 1 bytes @ 0x2
 12705  0072                     	ds	1
 12706  0073                     ??_TMR0_Initialize:	
 12707  0073                     ??_TMR0_SetInterruptHandler:	
 12708                           ; 1 bytes @ 0x3
 12709                           
 12710  0073                     ??_strlen:	
 12711                           ; 1 bytes @ 0x3
 12712                           
 12713  0073                     ??_displayCharReverse:	
 12714                           ; 1 bytes @ 0x3
 12715                           
 12716  0073                     ??_secret_clear:	
 12717                           ; 1 bytes @ 0x3
 12718                           
 12719  0073                     ??_PWM5_LoadDutyValue:	
 12720                           ; 1 bytes @ 0x3
 12721                           
 12722  0073                     ??_PWM6_LoadDutyValue:	
 12723                           ; 1 bytes @ 0x3
 12724                           
 12725  0073                     ??_PWM1_LoadDutyValue:	
 12726                           ; 1 bytes @ 0x3
 12727                           
 12728  0073                     ??_SYSTEM_Initialize:	
 12729                           ; 1 bytes @ 0x3
 12730                           
 12731  0073                     ??_PWM2_LoadDutyValue:	
 12732                           ; 1 bytes @ 0x3
 12733                           
 12734  0073                     ??_TMR0_Read16bitTimer:	
 12735                           ; 1 bytes @ 0x3
 12736                           
 12737  0073                     ??_displayL1_SetUserLed:	
 12738                           ; 1 bytes @ 0x3
 12739                           
 12740  0073                     ??_locked_get_lock_leds:	
 12741                           ; 1 bytes @ 0x3
 12742                           
 12743  0073                     ??_locked_get_unlock_leds:	
 12744                           ; 1 bytes @ 0x3
 12745                           
 12746  0073                     SPI1_Exchange8bitBuffer@dataOut:	
 12747                           ; 1 bytes @ 0x3
 12748                           
 12749  0073                     scheduler_Init@k:	
 12750                           ; 1 bytes @ 0x3
 12751                           
 12752  0073                     nullifyBadge_buttonsGet@retVal:	
 12753                           ; 1 bytes @ 0x3
 12754                           
 12755  0073                     ___bmul@product:	
 12756                           ; 1 bytes @ 0x3
 12757                           
 12758  0073                     locked_lock_leds@size:	
 12759                           ; 1 bytes @ 0x3
 12760                           
 12761  0073                     locked_get_unlock_leds@leds:	
 12762                           ; 2 bytes @ 0x3
 12763                           
 12764  0073                     ___wmul@multiplicand:	
 12765                           ; 2 bytes @ 0x3
 12766                           
 12767  0073                     ___lwdiv@dividend:	
 12768                           ; 2 bytes @ 0x3
 12769                           
 12770  0073                     memset@c:	
 12771                           ; 2 bytes @ 0x3
 12772                           
 12773                           
 12774                           ; 2 bytes @ 0x3
 12775  0073                     	ds	1
 12776  0074                     ??_SPI1_Exchange8bitBuffer:	
 12777  0074                     displayL1_SetUserLed@display:	
 12778                           ; 1 bytes @ 0x4
 12779                           
 12780  0074                     ___bmul@multiplier:	
 12781                           ; 1 bytes @ 0x4
 12782                           
 12783                           
 12784                           ; 1 bytes @ 0x4
 12785  0074                     	ds	1
 12786  0075                     ??___wmul:	
 12787  0075                     ??___lwdiv:	
 12788                           ; 1 bytes @ 0x5
 12789                           
 12790  0075                     locked_get_lock_leds@size:	
 12791                           ; 1 bytes @ 0x5
 12792                           
 12793  0075                     ___wmul@product:	
 12794                           ; 2 bytes @ 0x5
 12795                           
 12796  0075                     memset@n:	
 12797                           ; 2 bytes @ 0x5
 12798                           
 12799  0075                     strlen@cp:	
 12800                           ; 2 bytes @ 0x5
 12801                           
 12802  0075                     ___lmul@multiplicand:	
 12803                           ; 2 bytes @ 0x5
 12804                           
 12805                           
 12806                           ; 4 bytes @ 0x5
 12807  0075                     	ds	1
 12808  0076                     ___lwdiv@counter:	
 12809                           
 12810                           ; 1 bytes @ 0x6
 12811  0076                     	ds	1
 12812  0077                     ??_memset:	
 12813  0077                     ?_locked_secret_check:	
 12814                           ; 1 bytes @ 0x7
 12815                           
 12816  0077                     ?_secret_check:	
 12817                           ; 1 bytes @ 0x7
 12818                           
 12819  0077                     ?_matrix_secret_check:	
 12820                           ; 1 bytes @ 0x7
 12821                           
 12822  0077                     SPI1_Exchange8bitBuffer@dataIn:	
 12823                           ; 1 bytes @ 0x7
 12824                           
 12825  0077                     locked_get_lock_leds@leds:	
 12826                           ; 1 bytes @ 0x7
 12827                           
 12828  0077                     locked_secret_check@data:	
 12829                           ; 2 bytes @ 0x7
 12830                           
 12831  0077                     secret_check@data:	
 12832                           ; 2 bytes @ 0x7
 12833                           
 12834  0077                     matrix_secret_check@data:	
 12835                           ; 2 bytes @ 0x7
 12836                           
 12837  0077                     ___lwdiv@quotient:	
 12838                           ; 2 bytes @ 0x7
 12839                           
 12840  0077                     memset@p:	
 12841                           ; 2 bytes @ 0x7
 12842                           
 12843                           
 12844                           ; 2 bytes @ 0x7
 12845  0077                     	ds	1
 12846  0078                     SPI1_Exchange8bitBuffer@bytesWritten:	
 12847  0078                     displayCharReverse@retValLower:	
 12848                           ; 1 bytes @ 0x8
 12849                           
 12850  0078                     TMR0_Read16bitTimer@readVal:	
 12851                           ; 1 bytes @ 0x8
 12852                           
 12853                           
 12854                           ; 2 bytes @ 0x8
 12855  0078                     	ds	1
 12856  0079                     ??_displayL1_Update:	
 12857  0079                     ??___lmul:	
 12858                           ; 1 bytes @ 0x9
 12859                           
 12860  0079                     ??___almod:	
 12861                           ; 1 bytes @ 0x9
 12862                           
 12863  0079                     ??___lwmod:	
 12864                           ; 1 bytes @ 0x9
 12865                           
 12866  0079                     displayCharReverse@retValUpper:	
 12867                           ; 1 bytes @ 0x9
 12868                           
 12869  0079                     locked_secret_check@buttonPressed:	
 12870                           ; 1 bytes @ 0x9
 12871                           
 12872  0079                     secret_check@buttonPressed:	
 12873                           ; 1 bytes @ 0x9
 12874                           
 12875  0079                     matrix_secret_check@buttonPressed:	
 12876                           ; 1 bytes @ 0x9
 12877                           
 12878                           
 12879                           ; 1 bytes @ 0x9
 12880  0079                     	ds	1
 12881  007A                     TMR0_Read16bitTimer@readValLow:	
 12882  007A                     displayCharReverse@retValUpperRev:	
 12883                           ; 1 bytes @ 0xA
 12884                           
 12885  007A                     ___almod@counter:	
 12886                           ; 1 bytes @ 0xA
 12887                           
 12888  007A                     ___lwmod@counter:	
 12889                           ; 1 bytes @ 0xA
 12890                           
 12891                           
 12892                           ; 1 bytes @ 0xA
 12893  007A                     	ds	1
 12894  007B                     ??_displayL2_ForceUpdate:	
 12895  007B                     ??_displayL2_SetUserLeds:	
 12896                           ; 1 bytes @ 0xB
 12897                           
 12898  007B                     ??_displayL2_ClrUserLeds:	
 12899                           ; 1 bytes @ 0xB
 12900                           
 12901  007B                     ??_displayL1_Initialize:	
 12902                           ; 1 bytes @ 0xB
 12903                           
 12904  007B                     TMR0_Read16bitTimer@readValHigh:	
 12905                           ; 1 bytes @ 0xB
 12906                           
 12907  007B                     displayL1_Initialize@display:	
 12908                           ; 1 bytes @ 0xB
 12909                           
 12910  007B                     displayCharReverse@k:	
 12911                           ; 1 bytes @ 0xB
 12912                           
 12913  007B                     displayL2_ForceUpdate@display:	
 12914                           ; 1 bytes @ 0xB
 12915                           
 12916  007B                     displayL2_SetUserLeds@display:	
 12917                           ; 1 bytes @ 0xB
 12918                           
 12919  007B                     displayL2_ClrUserLeds@display:	
 12920                           ; 1 bytes @ 0xB
 12921                           
 12922  007B                     ___almod@sign:	
 12923                           ; 1 bytes @ 0xB
 12924                           
 12925                           
 12926                           ; 1 bytes @ 0xB
 12927  007B                     	ds	1
 12928  007C                     ??_nullifyBadge_segDisplayErase:	
 12929  007C                     ??_nullifyBadge_segDisplayPutStr:	
 12930                           ; 1 bytes @ 0xC
 12931                           
 12932  007C                     ??_nullifyBadge_segDisplayForceUpdate:	
 12933                           ; 1 bytes @ 0xC
 12934                           
 12935  007C                     ??_nullifyBadge_userLedsSet:	
 12936                           ; 1 bytes @ 0xC
 12937                           
 12938  007C                     ??_nullifyBadge_platformInit:	
 12939                           ; 1 bytes @ 0xC
 12940                           
 12941  007C                     ??_flashy_Init:	
 12942                           ; 1 bytes @ 0xC
 12943                           
 12944  007C                     ??_menu_Init:	
 12945                           ; 1 bytes @ 0xC
 12946                           
 12947  007C                     ??_slot_Init:	
 12948                           ; 1 bytes @ 0xC
 12949                           
 12950  007C                     ??_locked_Init:	
 12951                           ; 1 bytes @ 0xC
 12952                           
 12953  007C                     ??_secret_Init:	
 12954                           ; 1 bytes @ 0xC
 12955                           
 12956  007C                     ??_displayL2_Initialize:	
 12957                           ; 1 bytes @ 0xC
 12958                           
 12959  007C                     ??_displayL2_EraseSegDisplay:	
 12960                           ; 1 bytes @ 0xC
 12961                           
 12962  007C                     ??_menu_clear:	
 12963                           ; 1 bytes @ 0xC
 12964                           
 12965  007C                     ??_menu_display_option:	
 12966                           ; 1 bytes @ 0xC
 12967                           
 12968  007C                     ??_menu_run_option:	
 12969                           ; 1 bytes @ 0xC
 12970                           
 12971  007C                     ??_locked_clear:	
 12972                           ; 1 bytes @ 0xC
 12973                           
 12974  007C                     ??_scheduler_TaskRun:	
 12975                           ; 1 bytes @ 0xC
 12976                           
 12977  007C                     ??_led_circle:	
 12978                           ; 1 bytes @ 0xC
 12979                           
 12980  007C                     ??_let_alternate:	
 12981                           ; 1 bytes @ 0xC
 12982                           
 12983  007C                     ??_nullifyBadge_userLedsClr:	
 12984                           ; 1 bytes @ 0xC
 12985                           
 12986  007C                     ??_flashy_display_option:	
 12987                           ; 1 bytes @ 0xC
 12988                           
 12989                           
 12990                           	psect	cstackBANK0
 12991  0020                     __pcstackBANK0:	
 12992                           ; 1 bytes @ 0xC
 12993                           
 12994  0020                     ?_displayL1_SetSegChar:	
 12995  0020                     ??_locked_secret_check:	
 12996                           ; 1 bytes @ 0x0
 12997                           
 12998  0020                     ??_secret_check:	
 12999                           ; 1 bytes @ 0x0
 13000                           
 13001  0020                     ??_matrix_secret_check:	
 13002                           ; 1 bytes @ 0x0
 13003                           
 13004  0020                     displayL1_SetSegChar@c:	
 13005                           ; 1 bytes @ 0x0
 13006                           
 13007  0020                     ___lmul@product:	
 13008                           ; 1 bytes @ 0x0
 13009                           
 13010  0020                     displayL1_Update@tmpRxBuf:	
 13011                           ; 4 bytes @ 0x0
 13012                           
 13013                           
 13014                           ; 10 bytes @ 0x0
 13015  0020                     	ds	1
 13016  0021                     displayL1_SetSegChar@charPos:	
 13017                           
 13018                           ; 1 bytes @ 0x1
 13019  0021                     	ds	1
 13020  0022                     ??_displayL1_SetSegChar:	
 13021                           
 13022                           ; 1 bytes @ 0x2
 13023  0022                     	ds	1
 13024  0023                     locked_secret_check@size:	
 13025  0023                     secret_check@size:	
 13026                           ; 2 bytes @ 0x3
 13027                           
 13028  0023                     matrix_secret_check@size:	
 13029                           ; 2 bytes @ 0x3
 13030                           
 13031                           
 13032                           ; 2 bytes @ 0x3
 13033  0023                     	ds	1
 13034  0024                     ?_rand:	
 13035                           
 13036                           ; 2 bytes @ 0x4
 13037  0024                     	ds	1
 13038  0025                     locked_secret_check@currents_size:	
 13039  0025                     secret_check@currents_size:	
 13040                           ; 2 bytes @ 0x5
 13041                           
 13042  0025                     matrix_secret_check@currents_size:	
 13043                           ; 2 bytes @ 0x5
 13044                           
 13045                           
 13046                           ; 2 bytes @ 0x5
 13047  0025                     	ds	1
 13048  0026                     ??_rand:	
 13049  0026                     displayL1_SetSegChar@dispDataVectBaseIdx:	
 13050                           ; 1 bytes @ 0x6
 13051                           
 13052                           
 13053                           ; 1 bytes @ 0x6
 13054  0026                     	ds	1
 13055  0027                     displayL1_SetSegChar@display:	
 13056  0027                     locked_secret_check@inputs:	
 13057                           ; 1 bytes @ 0x7
 13058                           
 13059  0027                     secret_check@inputs:	
 13060                           ; 1 bytes @ 0x7
 13061                           
 13062  0027                     matrix_secret_check@inputs:	
 13063                           ; 1 bytes @ 0x7
 13064                           
 13065                           
 13066                           ; 1 bytes @ 0x7
 13067  0027                     	ds	1
 13068  0028                     displayL1_SetSegChar@charData:	
 13069  0028                     locked_secret_check@i:	
 13070                           ; 2 bytes @ 0x8
 13071                           
 13072  0028                     secret_check@i:	
 13073                           ; 2 bytes @ 0x8
 13074                           
 13075  0028                     matrix_secret_check@i:	
 13076                           ; 2 bytes @ 0x8
 13077                           
 13078                           
 13079                           ; 2 bytes @ 0x8
 13080  0028                     	ds	2
 13081  002A                     ?_displayL2_PutChar:	
 13082  002A                     displayL1_Update@display:	
 13083                           ; 1 bytes @ 0xA
 13084                           
 13085  002A                     displayL2_PutChar@c:	
 13086                           ; 1 bytes @ 0xA
 13087                           
 13088                           
 13089                           ; 1 bytes @ 0xA
 13090  002A                     	ds	1
 13091  002B                     ??_displayL2_PutChar:	
 13092  002B                     ?_displayL2_SetUserLeds:	
 13093                           ; 1 bytes @ 0xB
 13094                           
 13095  002B                     ?___lwmod:	
 13096                           ; 1 bytes @ 0xB
 13097                           
 13098  002B                     ?___almod:	
 13099                           ; 2 bytes @ 0xB
 13100                           
 13101  002B                     nullifyBadge_segDisplayForceUpdate@badge:	
 13102                           ; 4 bytes @ 0xB
 13103                           
 13104  002B                     nullifyBadge_userLedsClr@badge:	
 13105                           ; 1 bytes @ 0xB
 13106                           
 13107  002B                     displayL2_Initialize@display:	
 13108                           ; 1 bytes @ 0xB
 13109                           
 13110  002B                     displayL2_SetUserLeds@userLedData:	
 13111                           ; 1 bytes @ 0xB
 13112                           
 13113  002B                     ___lwmod@divisor:	
 13114                           ; 2 bytes @ 0xB
 13115                           
 13116  002B                     ___almod@divisor:	
 13117                           ; 2 bytes @ 0xB
 13118                           
 13119                           
 13120                           ; 4 bytes @ 0xB
 13121  002B                     	ds	1
 13122  002C                     nullifyBadge_platformInit@badge:	
 13123                           
 13124                           ; 1 bytes @ 0xC
 13125  002C                     	ds	1
 13126  002D                     ?_nullifyBadge_userLedsSet:	
 13127  002D                     nullifyBadge_userLedsSet@userLedData:	
 13128                           ; 1 bytes @ 0xD
 13129                           
 13130  002D                     ___lwmod@dividend:	
 13131                           ; 2 bytes @ 0xD
 13132                           
 13133                           
 13134                           ; 2 bytes @ 0xD
 13135  002D                     	ds	1
 13136  002E                     displayL2_PutChar@k:	
 13137                           
 13138                           ; 1 bytes @ 0xE
 13139  002E                     	ds	1
 13140  002F                     ?_slot_Setup:	
 13141  002F                     ?_sprintf:	
 13142                           ; 1 bytes @ 0xF
 13143                           
 13144  002F                     nullifyBadge_userLedsSet@badge:	
 13145                           ; 2 bytes @ 0xF
 13146                           
 13147  002F                     displayL2_PutChar@display:	
 13148                           ; 1 bytes @ 0xF
 13149                           
 13150  002F                     slot_Setup@taskData:	
 13151                           ; 1 bytes @ 0xF
 13152                           
 13153  002F                     sprintf@sp:	
 13154                           ; 2 bytes @ 0xF
 13155                           
 13156  002F                     ___almod@dividend:	
 13157                           ; 2 bytes @ 0xF
 13158                           
 13159                           
 13160                           ; 4 bytes @ 0xF
 13161  002F                     	ds	1
 13162  0030                     ?_displayL2_PutStr:	
 13163  0030                     ?_led_roundabout:	
 13164                           ; 1 bytes @ 0x10
 13165                           
 13166  0030                     ?_led_curtain:	
 13167                           ; 1 bytes @ 0x10
 13168                           
 13169  0030                     ?_led_circle:	
 13170                           ; 1 bytes @ 0x10
 13171                           
 13172  0030                     ?_let_alternate:	
 13173                           ; 1 bytes @ 0x10
 13174                           
 13175  0030                     ?_led_Parody:	
 13176                           ; 1 bytes @ 0x10
 13177                           
 13178  0030                     led_roundabout@counter:	
 13179                           ; 1 bytes @ 0x10
 13180                           
 13181  0030                     led_curtain@counter:	
 13182                           ; 2 bytes @ 0x10
 13183                           
 13184  0030                     led_circle@count:	
 13185                           ; 2 bytes @ 0x10
 13186                           
 13187  0030                     let_alternate@count:	
 13188                           ; 2 bytes @ 0x10
 13189                           
 13190  0030                     led_Parody@count:	
 13191                           ; 2 bytes @ 0x10
 13192                           
 13193  0030                     displayL2_PutStr@str:	
 13194                           ; 2 bytes @ 0x10
 13195                           
 13196                           
 13197                           ; 2 bytes @ 0x10
 13198  0030                     	ds	1
 13199  0031                     ??_slot_Setup:	
 13200  0031                     sprintf@f:	
 13201                           ; 1 bytes @ 0x11
 13202                           
 13203                           
 13204                           ; 2 bytes @ 0x11
 13205  0031                     	ds	1
 13206  0032                     ??_displayL2_PutStr:	
 13207  0032                     ??_led_roundabout:	
 13208                           ; 1 bytes @ 0x12
 13209                           
 13210  0032                     ??_led_curtain:	
 13211                           ; 1 bytes @ 0x12
 13212                           
 13213  0032                     ??_led_Parody:	
 13214                           ; 1 bytes @ 0x12
 13215                           
 13216  0032                     ?_slot_Running_Animation:	
 13217                           ; 1 bytes @ 0x12
 13218                           
 13219  0032                     slot_Running_Animation@taskData:	
 13220                           ; 1 bytes @ 0x12
 13221                           
 13222                           
 13223                           ; 2 bytes @ 0x12
 13224  0032                     	ds	1
 13225  0033                     ??_led_rand:	
 13226                           
 13227                           ; 1 bytes @ 0x13
 13228  0033                     	ds	1
 13229  0034                     ??_slot_Running_Animation:	
 13230  0034                     led_roundabout@leds:	
 13231                           ; 1 bytes @ 0x14
 13232                           
 13233  0034                     led_curtain@leds:	
 13234                           ; 2 bytes @ 0x14
 13235                           
 13236  0034                     led_Parody@leds:	
 13237                           ; 2 bytes @ 0x14
 13238                           
 13239  0034                     slot_Setup@data:	
 13240                           ; 2 bytes @ 0x14
 13241                           
 13242                           
 13243                           ; 2 bytes @ 0x14
 13244  0034                     	ds	1
 13245  0035                     displayL2_PutStr@display:	
 13246                           
 13247                           ; 1 bytes @ 0x15
 13248  0035                     	ds	1
 13249  0036                     displayL2_PutStr@k:	
 13250  0036                     led_roundabout@size:	
 13251                           ; 1 bytes @ 0x16
 13252                           
 13253  0036                     led_curtain@size:	
 13254                           ; 2 bytes @ 0x16
 13255                           
 13256  0036                     led_Parody@size:	
 13257                           ; 2 bytes @ 0x16
 13258                           
 13259  0036                     slot_Running_Animation@data:	
 13260                           ; 2 bytes @ 0x16
 13261                           
 13262                           
 13263                           ; 2 bytes @ 0x16
 13264  0036                     	ds	1
 13265  0037                     ?_nullifyBadge_segDisplayPutStr:	
 13266  0037                     displayL2_EraseSegDisplay@display:	
 13267                           ; 1 bytes @ 0x17
 13268                           
 13269  0037                     nullifyBadge_segDisplayPutStr@str:	
 13270                           ; 1 bytes @ 0x17
 13271                           
 13272                           
 13273                           ; 2 bytes @ 0x17
 13274  0037                     	ds	1
 13275  0038                     nullifyBadge_segDisplayErase@badge:	
 13276                           
 13277                           ; 1 bytes @ 0x18
 13278  0038                     	ds	1
 13279  0039                     ?_flashy_Init:	
 13280  0039                     ?_menu_Init:	
 13281                           ; 1 bytes @ 0x19
 13282                           
 13283  0039                     ?_slot_Init:	
 13284                           ; 1 bytes @ 0x19
 13285                           
 13286  0039                     ?_locked_Init:	
 13287                           ; 1 bytes @ 0x19
 13288                           
 13289  0039                     ?_secret_Init:	
 13290                           ; 1 bytes @ 0x19
 13291                           
 13292  0039                     ?_matrix_Init:	
 13293                           ; 1 bytes @ 0x19
 13294                           
 13295  0039                     ?_menu_clear:	
 13296                           ; 1 bytes @ 0x19
 13297                           
 13298  0039                     ?_locked_clear:	
 13299                           ; 1 bytes @ 0x19
 13300                           
 13301  0039                     nullifyBadge_segDisplayPutStr@badge:	
 13302                           ; 1 bytes @ 0x19
 13303                           
 13304  0039                     menu_Init@taskData:	
 13305                           ; 1 bytes @ 0x19
 13306                           
 13307  0039                     menu_clear@data:	
 13308                           ; 2 bytes @ 0x19
 13309                           
 13310  0039                     flashy_Init@taskData:	
 13311                           ; 2 bytes @ 0x19
 13312                           
 13313  0039                     locked_Init@taskData:	
 13314                           ; 2 bytes @ 0x19
 13315                           
 13316  0039                     locked_clear@data:	
 13317                           ; 2 bytes @ 0x19
 13318                           
 13319  0039                     secret_Init@taskData:	
 13320                           ; 2 bytes @ 0x19
 13321                           
 13322  0039                     slot_Init@taskData:	
 13323                           ; 2 bytes @ 0x19
 13324                           
 13325  0039                     matrix_Init@taskData:	
 13326                           ; 2 bytes @ 0x19
 13327                           
 13328                           
 13329                           ; 2 bytes @ 0x19
 13330  0039                     	ds	1
 13331  003A                     ?_marquee_speedy:	
 13332  003A                     ?_marquee:	
 13333                           ; 1 bytes @ 0x1A
 13334                           
 13335  003A                     marquee_speedy@string:	
 13336                           ; 1 bytes @ 0x1A
 13337                           
 13338  003A                     marquee@string:	
 13339                           ; 2 bytes @ 0x1A
 13340                           
 13341                           
 13342                           ; 2 bytes @ 0x1A
 13343  003A                     	ds	1
 13344  003B                     ??_matrix_Init:	
 13345  003B                     ?_menu_run_option:	
 13346                           ; 1 bytes @ 0x1B
 13347                           
 13348  003B                     ??_sprintf:	
 13349                           ; 1 bytes @ 0x1B
 13350                           
 13351  003B                     led_rand@spark:	
 13352                           ; 1 bytes @ 0x1B
 13353                           
 13354  003B                     menu_Init@data:	
 13355                           ; 2 bytes @ 0x1B
 13356                           
 13357  003B                     menu_run_option@data:	
 13358                           ; 2 bytes @ 0x1B
 13359                           
 13360  003B                     flashy_Init@data:	
 13361                           ; 2 bytes @ 0x1B
 13362                           
 13363  003B                     locked_Init@data:	
 13364                           ; 2 bytes @ 0x1B
 13365                           
 13366  003B                     secret_Init@data:	
 13367                           ; 2 bytes @ 0x1B
 13368                           
 13369  003B                     slot_Init@data:	
 13370                           ; 2 bytes @ 0x1B
 13371                           
 13372                           
 13373                           ; 2 bytes @ 0x1B
 13374  003B                     	ds	1
 13375  003C                     marquee_speedy@count:	
 13376  003C                     marquee@count:	
 13377                           ; 2 bytes @ 0x1C
 13378                           
 13379                           
 13380                           ; 2 bytes @ 0x1C
 13381  003C                     	ds	1
 13382  003D                     ?_slot_Finished_Animation:	
 13383  003D                     slot_Finished_Animation@taskData:	
 13384                           ; 1 bytes @ 0x1D
 13385                           
 13386  003D                     matrix_Init@data:	
 13387                           ; 2 bytes @ 0x1D
 13388                           
 13389                           
 13390                           ; 2 bytes @ 0x1D
 13391  003D                     	ds	1
 13392  003E                     ??_marquee:	
 13393  003E                     marquee_speedy@multiplier:	
 13394                           ; 1 bytes @ 0x1E
 13395                           
 13396                           
 13397                           ; 2 bytes @ 0x1E
 13398  003E                     	ds	1
 13399  003F                     ?_scheduler_TaskAdd:	
 13400  003F                     ??_slot_Finished_Animation:	
 13401                           ; 1 bytes @ 0x1F
 13402                           
 13403  003F                     scheduler_TaskAdd@task:	
 13404                           ; 1 bytes @ 0x1F
 13405                           
 13406  003F                     sprintf@prec:	
 13407                           ; 1 bytes @ 0x1F
 13408                           
 13409  003F                     marquee@display_string:	
 13410                           ; 1 bytes @ 0x1F
 13411                           
 13412                           
 13413                           ; 5 bytes @ 0x1F
 13414  003F                     	ds	1
 13415  0040                     ??_scheduler_TaskAdd:	
 13416  0040                     ??_marquee_speedy:	
 13417                           ; 1 bytes @ 0x20
 13418                           
 13419  0040                     sprintf@flag:	
 13420                           ; 1 bytes @ 0x20
 13421                           
 13422                           
 13423                           ; 1 bytes @ 0x20
 13424  0040                     	ds	1
 13425  0041                     slot_Finished_Animation@data:	
 13426  0041                     sprintf@cp:	
 13427                           ; 2 bytes @ 0x21
 13428                           
 13429  0041                     marquee_speedy@display_string:	
 13430                           ; 2 bytes @ 0x21
 13431                           
 13432                           
 13433                           ; 5 bytes @ 0x21
 13434  0041                     	ds	2
 13435  0043                     sprintf@ap:	
 13436                           
 13437                           ; 1 bytes @ 0x23
 13438  0043                     	ds	1
 13439  0044                     marquee@multiplier:	
 13440  0044                     sprintf@val:	
 13441                           ; 2 bytes @ 0x24
 13442                           
 13443                           
 13444                           ; 2 bytes @ 0x24
 13445  0044                     	ds	2
 13446  0046                     scheduler_TaskAdd@scheduler:	
 13447  0046                     marquee_speedy@i:	
 13448                           ; 1 bytes @ 0x26
 13449                           
 13450  0046                     marquee@i:	
 13451                           ; 2 bytes @ 0x26
 13452                           
 13453  0046                     sprintf@len:	
 13454                           ; 2 bytes @ 0x26
 13455                           
 13456                           
 13457                           ; 2 bytes @ 0x26
 13458  0046                     	ds	1
 13459  0047                     scheduler_TaskAdd@k:	
 13460                           
 13461                           ; 1 bytes @ 0x27
 13462  0047                     	ds	1
 13463  0048                     marquee_speedy@string_length:	
 13464  0048                     marquee@string_length:	
 13465                           ; 2 bytes @ 0x28
 13466                           
 13467  0048                     sprintf@width:	
 13468                           ; 2 bytes @ 0x28
 13469                           
 13470                           
 13471                           ; 2 bytes @ 0x28
 13472  0048                     	ds	2
 13473  004A                     sprintf@c:	
 13474  004A                     marquee_speedy@j:	
 13475                           ; 1 bytes @ 0x2A
 13476                           
 13477  004A                     marquee@j:	
 13478                           ; 2 bytes @ 0x2A
 13479                           
 13480                           
 13481                           ; 2 bytes @ 0x2A
 13482  004A                     	ds	2
 13483  004C                     ?_menu_display_option:	
 13484  004C                     ?_flashy_display_option:	
 13485                           ; 1 bytes @ 0x2C
 13486                           
 13487  004C                     ?_matrix_display_option:	
 13488                           ; 1 bytes @ 0x2C
 13489                           
 13490  004C                     menu_display_option@data:	
 13491                           ; 1 bytes @ 0x2C
 13492                           
 13493  004C                     flashy_display_option@data:	
 13494                           ; 2 bytes @ 0x2C
 13495                           
 13496  004C                     matrix_display_option@data:	
 13497                           ; 2 bytes @ 0x2C
 13498                           
 13499                           
 13500                           ; 2 bytes @ 0x2C
 13501  004C                     	ds	2
 13502  004E                     ??_matrix_display_option:	
 13503  004E                     menu_display_option@size:	
 13504                           ; 1 bytes @ 0x2E
 13505                           
 13506                           
 13507                           ; 2 bytes @ 0x2E
 13508  004E                     	ds	2
 13509  0050                     menu_display_option@led:	
 13510                           
 13511                           ; 2 bytes @ 0x30
 13512  0050                     	ds	2
 13513  0052                     ?_flashy_Main:	
 13514  0052                     ?_menu_Main:	
 13515                           ; 1 bytes @ 0x32
 13516                           
 13517  0052                     ?_slot_Main:	
 13518                           ; 1 bytes @ 0x32
 13519                           
 13520  0052                     ?_locked_Main:	
 13521                           ; 1 bytes @ 0x32
 13522                           
 13523  0052                     ?_secret_Main:	
 13524                           ; 1 bytes @ 0x32
 13525                           
 13526  0052                     ?_matrix_Main:	
 13527                           ; 1 bytes @ 0x32
 13528                           
 13529  0052                     menu_Main@taskData:	
 13530                           ; 1 bytes @ 0x32
 13531                           
 13532  0052                     flashy_Main@taskData:	
 13533                           ; 2 bytes @ 0x32
 13534                           
 13535  0052                     locked_Main@taskData:	
 13536                           ; 2 bytes @ 0x32
 13537                           
 13538  0052                     secret_Main@taskData:	
 13539                           ; 2 bytes @ 0x32
 13540                           
 13541  0052                     slot_Main@taskData:	
 13542                           ; 2 bytes @ 0x32
 13543                           
 13544  0052                     matrix_Main@taskData:	
 13545                           ; 2 bytes @ 0x32
 13546                           
 13547                           
 13548                           ; 2 bytes @ 0x32
 13549  0052                     	ds	2
 13550  0054                     ??_flashy_Main:	
 13551  0054                     ??_menu_Main:	
 13552                           ; 1 bytes @ 0x34
 13553                           
 13554  0054                     ??_slot_Main:	
 13555                           ; 1 bytes @ 0x34
 13556                           
 13557  0054                     ??_locked_Main:	
 13558                           ; 1 bytes @ 0x34
 13559                           
 13560  0054                     ??_secret_Main:	
 13561                           ; 1 bytes @ 0x34
 13562                           
 13563  0054                     ??_matrix_Main:	
 13564                           ; 1 bytes @ 0x34
 13565                           
 13566                           
 13567                           ; 1 bytes @ 0x34
 13568  0054                     	ds	2
 13569  0056                     menu_Main@buttonPressed:	
 13570  0056                     locked_Main@buttonPressed:	
 13571                           ; 1 bytes @ 0x36
 13572                           
 13573  0056                     secret_Main@secret_found:	
 13574                           ; 1 bytes @ 0x36
 13575                           
 13576  0056                     flashy_Main@hit_counter:	
 13577                           ; 1 bytes @ 0x36
 13578                           
 13579                           
 13580                           ; 6 bytes @ 0x36
 13581  0056                     	ds	1
 13582  0057                     secret_Main@buttonPressed:	
 13583  0057                     menu_Main@data:	
 13584                           ; 1 bytes @ 0x37
 13585                           
 13586  0057                     locked_Main@data:	
 13587                           ; 2 bytes @ 0x37
 13588                           
 13589                           
 13590                           ; 2 bytes @ 0x37
 13591  0057                     	ds	1
 13592  0058                     matrix_Main@buttonPressed:	
 13593  0058                     secret_Main@data:	
 13594                           ; 1 bytes @ 0x38
 13595                           
 13596                           
 13597                           ; 2 bytes @ 0x38
 13598  0058                     	ds	1
 13599  0059                     matrix_Main@holdvalue:	
 13600                           
 13601                           ; 1 bytes @ 0x39
 13602  0059                     	ds	1
 13603  005A                     matrix_Main@data:	
 13604                           
 13605                           ; 2 bytes @ 0x3A
 13606  005A                     	ds	2
 13607  005C                     flashy_Main@buttonPressed:	
 13608                           
 13609                           ; 2 bytes @ 0x3C
 13610  005C                     	ds	2
 13611  005E                     flashy_Main@data:	
 13612                           
 13613                           ; 2 bytes @ 0x3E
 13614  005E                     	ds	6
 13615  0064                     slot_Main@buttonPressed:	
 13616                           
 13617                           ; 1 bytes @ 0x44
 13618  0064                     	ds	1
 13619  0065                     slot_Main@data:	
 13620                           
 13621                           ; 2 bytes @ 0x45
 13622  0065                     	ds	2
 13623  0067                     scheduler_TaskRun@task:	
 13624                           
 13625                           ; 1 bytes @ 0x47
 13626  0067                     	ds	1
 13627  0068                     ??_schedulerExecute:	
 13628                           
 13629                           ; 1 bytes @ 0x48
 13630  0068                     	ds	6
 13631  006E                     ??_main:	
 13632                           
 13633                           ; 1 bytes @ 0x4E
 13634  006E                     	ds	1
 13635                           
 13636                           	psect	maintext
 13637  0666                     __pmaintext:	
 13638 ;;
 13639 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
 13640 ;;
 13641 ;; *************** function _main *****************
 13642 ;; Defined at:
 13643 ;;		line 225 in file "main.c"
 13644 ;; Parameters:    Size  Location     Type
 13645 ;;		None
 13646 ;; Auto vars:     Size  Location     Type
 13647 ;;		None
 13648 ;; Return value:  Size  Location     Type
 13649 ;;                  1    wreg      void 
 13650 ;; Registers used:
 13651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13652 ;; Tracked objects:
 13653 ;;		On entry : B1F/0
 13654 ;;		On exit  : 0/0
 13655 ;;		Unchanged: 0/0
 13656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13660 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13661 ;;Total ram usage:        1 bytes
 13662 ;; Hardware stack levels required when called:   15
 13663 ;; This function calls:
 13664 ;;		_nullifyBadge_platformInit
 13665 ;;		_schedulerExecute
 13666 ;;		_scheduler_Init
 13667 ;;		_scheduler_TaskAdd
 13668 ;;		_scheduler_TaskInit
 13669 ;; This function is called by:
 13670 ;;		Startup code after reset
 13671 ;; This function uses a non-reentrant model
 13672 ;;
 13673                           
 13674                           
 13675                           ;psect for function _main
 13676  0666                     _main:	
 13677                           
 13678                           ;main.c: 228: nullifyBadge_platformInit(&badge_inst);
 13679                           
 13680                           ;incstack = 0
 13681                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13682  0666  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13683  0667  31AC  24F0  3186   	fcall	_nullifyBadge_platformInit
 13684                           
 13685                           ;main.c: 231: scheduler_Init(&schedulerInst);
 13686  066A  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13687  066B  31B4  2482  3186   	fcall	_scheduler_Init
 13688                           
 13689                           ;main.c: 234: scheduler_TaskInit(&flashy_task);
 13690  066E  305C               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 13691  066F  31B7  274C  3186   	fcall	_scheduler_TaskInit
 13692                           
 13693                           ;main.c: 235: scheduler_TaskInit(&menu_task);
 13694  0672  304F               	movlw	(low (_menu_task| (0+256)))& (0+255)
 13695  0673  31B7  274C  3186   	fcall	_scheduler_TaskInit
 13696                           
 13697                           ;main.c: 236: scheduler_TaskInit(&slot_task);
 13698  0676  3042               	movlw	(low (_slot_task| (0+256)))& (0+255)
 13699  0677  31B7  274C  3186   	fcall	_scheduler_TaskInit
 13700                           
 13701                           ;main.c: 237: scheduler_TaskInit(&locked_task);
 13702  067A  3035               	movlw	(low (_locked_task| (0+256)))& (0+255)
 13703  067B  31B7  274C  3186   	fcall	_scheduler_TaskInit
 13704                           
 13705                           ;main.c: 238: scheduler_TaskInit(&secret_task);
 13706  067E  3028               	movlw	(low (_secret_task| (0+256)))& (0+255)
 13707  067F  31B7  274C  3186   	fcall	_scheduler_TaskInit
 13708                           
 13709                           ;main.c: 239: scheduler_TaskInit(&matrix_task);
 13710  0682  30C4               	movlw	(low (_matrix_task| (0+256)))& (0+255)
 13711  0683  31B7  274C  3186   	fcall	_scheduler_TaskInit
 13712                           
 13713                           ;main.c: 242: flashy_TaskData.badge = &badge_inst;
 13714  0686  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13715  0687  0020               	movlb	0	; select bank0
 13716  0688  00EE               	movwf	??_main
 13717  0689  086E               	movf	??_main,w
 13718  068A  0029               	movlb	9	; select bank9
 13719  068B  00BF               	movwf	_flashy_TaskData^(0+1152)
 13720                           
 13721                           ;main.c: 243: menu_TaskData.badge = &badge_inst;
 13722  068C  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13723  068D  0020               	movlb	0	; select bank0
 13724  068E  00EE               	movwf	??_main
 13725  068F  086E               	movf	??_main,w
 13726  0690  0025               	movlb	5	; select bank5
 13727  0691  00BC               	movwf	_menu_TaskData^(0+640)
 13728                           
 13729                           ;main.c: 244: slot_TaskData.badge = &badge_inst;
 13730  0692  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13731  0693  0020               	movlb	0	; select bank0
 13732  0694  00EE               	movwf	??_main
 13733  0695  086E               	movf	??_main,w
 13734  0696  002B               	movlb	11	; select bank11
 13735  0697  00A0               	movwf	_slot_TaskData^(0+1408)
 13736                           
 13737                           ;main.c: 245: locked_TaskData.badge = &badge_inst;
 13738  0698  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13739  0699  0020               	movlb	0	; select bank0
 13740  069A  00EE               	movwf	??_main
 13741  069B  086E               	movf	??_main,w
 13742  069C  0025               	movlb	5	; select bank5
 13743  069D  00AE               	movwf	_locked_TaskData^(0+640)
 13744                           
 13745                           ;main.c: 246: secret_TaskData.badge = &badge_inst;
 13746  069E  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13747  069F  0020               	movlb	0	; select bank0
 13748  06A0  00EE               	movwf	??_main
 13749  06A1  086E               	movf	??_main,w
 13750  06A2  0025               	movlb	5	; select bank5
 13751  06A3  00A0               	movwf	_secret_TaskData^(0+640)
 13752                           
 13753                           ;main.c: 247: matrix_TaskData.badge = &badge_inst;
 13754  06A4  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13755  06A5  0020               	movlb	0	; select bank0
 13756  06A6  00EE               	movwf	??_main
 13757  06A7  086E               	movf	??_main,w
 13758  06A8  0029               	movlb	9	; select bank9
 13759  06A9  00A0               	movwf	_matrix_TaskData^(0+1152)
 13760                           
 13761                           ;main.c: 251: badge_locked = 1;
 13762  06AA  0021               	movlb	1	; select bank1
 13763  06AB  01C4               	clrf	_badge_locked^(0+128)
 13764  06AC  0AC4               	incf	_badge_locked^(0+128),f
 13765                           
 13766                           ;main.c: 254: flashy_task.taskData = (void *) &flashy_TaskData;
 13767  06AD  30BF               	movlw	low _flashy_TaskData
 13768  06AE  0022               	movlb	2	; select bank2
 13769  06AF  00DE               	movwf	(low ((_flashy_task| (0+256)+2)))^0
 13770  06B0  3004               	movlw	high _flashy_TaskData
 13771  06B1  00DF               	movwf	((low ((_flashy_task| (0+256)+2))+1))^0
 13772                           
 13773                           ;main.c: 255: flashy_task.taskInitCallback = flashy_Init;
 13774  06B2  3069               	movlw	low _flashy_Init
 13775  06B3  00E0               	movwf	(low ((_flashy_task| (0+256)+4)))^0
 13776  06B4  3007               	movlw	high _flashy_Init
 13777  06B5  00E1               	movwf	((low ((_flashy_task| (0+256)+4)))^0+1)
 13778                           
 13779                           ;main.c: 256: flashy_task.taskExecuteCallback = flashy_Main;
 13780  06B6  3019               	movlw	low _flashy_Main
 13781  06B7  00E4               	movwf	(low ((_flashy_task| (0+256)+8)))^0
 13782  06B8  3008               	movlw	high _flashy_Main
 13783  06B9  00E5               	movwf	((low ((_flashy_task| (0+256)+8)))^0+1)
 13784                           
 13785                           ;main.c: 257: flashy_task.taskExitCallback = flashy_Exit;
 13786  06BA  3000               	movlw	0
 13787  06BB  00E2               	movwf	(low ((_flashy_task| (0+256)+6)))^0
 13788  06BC  3000               	movlw	0
 13789  06BD  00E3               	movwf	((low ((_flashy_task| (0+256)+6)))^0+1)
 13790                           
 13791                           ;main.c: 258: flashy_task.taskInterval = 10;
 13792  06BE  300A               	movlw	10
 13793  06BF  00E6               	movwf	(_flashy_task^(0+256)+10)
 13794  06C0  3000               	movlw	0
 13795  06C1  00E7               	movwf	(_flashy_task^(0+256)+11)
 13796                           
 13797                           ;main.c: 260: menu_task.taskData = (void *) &menu_TaskData;
 13798  06C2  30BC               	movlw	low _menu_TaskData
 13799  06C3  00D1               	movwf	(low ((_menu_task| (0+256)+2)))^0
 13800  06C4  3002               	movlw	high _menu_TaskData
 13801  06C5  00D2               	movwf	((low ((_menu_task| (0+256)+2))+1))^0
 13802                           
 13803                           ;main.c: 261: menu_task.taskInitCallback = menu_Init;
 13804  06C6  3002               	movlw	low _menu_Init
 13805  06C7  00D3               	movwf	(low ((_menu_task| (0+256)+4)))^0
 13806  06C8  302E               	movlw	high _menu_Init
 13807  06C9  00D4               	movwf	((low ((_menu_task| (0+256)+4)))^0+1)
 13808                           
 13809                           ;main.c: 262: menu_task.taskExecuteCallback = menu_Main;
 13810  06CA  308F               	movlw	low _menu_Main
 13811  06CB  00D7               	movwf	(low ((_menu_task| (0+256)+8)))^0
 13812  06CC  301B               	movlw	high _menu_Main
 13813  06CD  00D8               	movwf	((low ((_menu_task| (0+256)+8)))^0+1)
 13814                           
 13815                           ;main.c: 263: menu_task.taskExitCallback = menu_Exit;
 13816  06CE  3000               	movlw	0
 13817  06CF  00D5               	movwf	(low ((_menu_task| (0+256)+6)))^0
 13818  06D0  3000               	movlw	0
 13819  06D1  00D6               	movwf	((low ((_menu_task| (0+256)+6)))^0+1)
 13820                           
 13821                           ;main.c: 264: menu_task.taskInterval = 10;
 13822  06D2  300A               	movlw	10
 13823  06D3  00D9               	movwf	(_menu_task^(0+256)+10)
 13824  06D4  3000               	movlw	0
 13825  06D5  00DA               	movwf	(_menu_task^(0+256)+11)
 13826                           
 13827                           ;main.c: 266: slot_task.taskData = (void *) &slot_TaskData;
 13828  06D6  30A0               	movlw	low _slot_TaskData
 13829  06D7  00C4               	movwf	(low ((_slot_task| (0+256)+2)))^0
 13830  06D8  3005               	movlw	high _slot_TaskData
 13831  06D9  00C5               	movwf	((low ((_slot_task| (0+256)+2))+1))^0
 13832                           
 13833                           ;main.c: 267: slot_task.taskInitCallback = slot_Init;
 13834  06DA  3064               	movlw	low _slot_Init
 13835  06DB  00C6               	movwf	(low ((_slot_task| (0+256)+4)))^0
 13836  06DC  302E               	movlw	high _slot_Init
 13837  06DD  00C7               	movwf	((low ((_slot_task| (0+256)+4)))^0+1)
 13838                           
 13839                           ;main.c: 268: slot_task.taskExecuteCallback = slot_Main;
 13840  06DE  30EA               	movlw	low _slot_Main
 13841  06DF  00CA               	movwf	(low ((_slot_task| (0+256)+8)))^0
 13842  06E0  3000               	movlw	high _slot_Main
 13843  06E1  00CB               	movwf	((low ((_slot_task| (0+256)+8)))^0+1)
 13844                           
 13845                           ;main.c: 269: slot_task.taskExitCallback = slot_Exit;
 13846  06E2  3000               	movlw	0
 13847  06E3  00C8               	movwf	(low ((_slot_task| (0+256)+6)))^0
 13848  06E4  3000               	movlw	0
 13849  06E5  00C9               	movwf	((low ((_slot_task| (0+256)+6)))^0+1)
 13850                           
 13851                           ;main.c: 270: slot_task.taskInterval = 10;
 13852  06E6  300A               	movlw	10
 13853  06E7  00CC               	movwf	(_slot_task^(0+256)+10)
 13854  06E8  3000               	movlw	0
 13855  06E9  00CD               	movwf	(_slot_task^(0+256)+11)
 13856                           
 13857                           ;main.c: 272: locked_task.taskData = (void *) &locked_TaskData;
 13858  06EA  30AE               	movlw	low _locked_TaskData
 13859  06EB  00B7               	movwf	(low ((_locked_task| (0+256)+2)))^0
 13860  06EC  3002               	movlw	high _locked_TaskData
 13861  06ED  00B8               	movwf	((low ((_locked_task| (0+256)+2))+1))^0
 13862                           
 13863                           ;main.c: 273: locked_task.taskInitCallback = locked_Init;
 13864  06EE  302D               	movlw	low _locked_Init
 13865  06EF  00B9               	movwf	(low ((_locked_task| (0+256)+4)))^0
 13866  06F0  302F               	movlw	high _locked_Init
 13867  06F1  00BA               	movwf	((low ((_locked_task| (0+256)+4)))^0+1)
 13868                           
 13869                           ;main.c: 274: locked_task.taskExecuteCallback = locked_Main;
 13870  06F2  3086               	movlw	low _locked_Main
 13871  06F3  00BD               	movwf	(low ((_locked_task| (0+256)+8)))^0
 13872  06F4  301D               	movlw	high _locked_Main
 13873  06F5  00BE               	movwf	((low ((_locked_task| (0+256)+8)))^0+1)
 13874                           
 13875                           ;main.c: 275: locked_task.taskExitCallback = locked_Exit;
 13876  06F6  3000               	movlw	0
 13877  06F7  00BB               	movwf	(low ((_locked_task| (0+256)+6)))^0
 13878  06F8  3000               	movlw	0
 13879  06F9  00BC               	movwf	((low ((_locked_task| (0+256)+6)))^0+1)
 13880                           
 13881                           ;main.c: 276: locked_task.taskInterval = 10;
 13882  06FA  300A               	movlw	10
 13883  06FB  00BF               	movwf	(_locked_task^(0+256)+10)
 13884  06FC  3000               	movlw	0
 13885  06FD  00C0               	movwf	(_locked_task^(0+256)+11)
 13886                           
 13887                           ;main.c: 278: secret_task.taskData = (void *) &secret_TaskData;
 13888  06FE  30A0               	movlw	low _secret_TaskData
 13889  06FF  00AA               	movwf	(low ((_secret_task| (0+256)+2)))^0
 13890  0700  3002               	movlw	high _secret_TaskData
 13891  0701  00AB               	movwf	((low ((_secret_task| (0+256)+2))+1))^0
 13892                           
 13893                           ;main.c: 279: secret_task.taskInitCallback = secret_Init;
 13894  0702  3045               	movlw	low _secret_Init
 13895  0703  00AC               	movwf	(low ((_secret_task| (0+256)+4)))^0
 13896  0704  302D               	movlw	high _secret_Init
 13897  0705  00AD               	movwf	((low ((_secret_task| (0+256)+4)))^0+1)
 13898                           
 13899                           ;main.c: 280: secret_task.taskExecuteCallback = secret_Main;
 13900  0706  3005               	movlw	low _secret_Main
 13901  0707  00B0               	movwf	(low ((_secret_task| (0+256)+8)))^0
 13902  0708  3018               	movlw	high _secret_Main
 13903  0709  00B1               	movwf	((low ((_secret_task| (0+256)+8)))^0+1)
 13904                           
 13905                           ;main.c: 281: secret_task.taskExitCallback = secret_Exit;
 13906  070A  3000               	movlw	0
 13907  070B  00AE               	movwf	(low ((_secret_task| (0+256)+6)))^0
 13908  070C  3000               	movlw	0
 13909  070D  00AF               	movwf	((low ((_secret_task| (0+256)+6)))^0+1)
 13910                           
 13911                           ;main.c: 282: secret_task.taskInterval = 10;
 13912  070E  300A               	movlw	10
 13913  070F  00B2               	movwf	(_secret_task^(0+256)+10)
 13914  0710  3000               	movlw	0
 13915  0711  00B3               	movwf	(_secret_task^(0+256)+11)
 13916                           
 13917                           ;main.c: 284: matrix_task.taskData = (void *) &matrix_TaskData;
 13918  0712  30A0               	movlw	low _matrix_TaskData
 13919  0713  0023               	movlb	3	; select bank3
 13920  0714  00C6               	movwf	(low ((_matrix_task| (0+256)+2)))^(0+128)
 13921  0715  3004               	movlw	high _matrix_TaskData
 13922  0716  00C7               	movwf	((low ((_matrix_task| (0+256)+2))+1))^(0+128)
 13923                           
 13924                           ;main.c: 285: matrix_task.taskInitCallback = matrix_Init;
 13925  0717  3047               	movlw	low _matrix_Init
 13926  0718  00C8               	movwf	(low ((_matrix_task| (0+256)+4)))^(0+128)
 13927  0719  3024               	movlw	high _matrix_Init
 13928  071A  00C9               	movwf	((low ((_matrix_task| (0+256)+4)))^(0+128)+1)
 13929                           
 13930                           ;main.c: 286: matrix_task.taskExecuteCallback = matrix_Main;
 13931  071B  30CB               	movlw	low _matrix_Main
 13932  071C  00CC               	movwf	(low ((_matrix_task| (0+256)+8)))^(0+128)
 13933  071D  3010               	movlw	high _matrix_Main
 13934  071E  00CD               	movwf	((low ((_matrix_task| (0+256)+8)))^(0+128)+1)
 13935                           
 13936                           ;main.c: 287: matrix_task.taskExitCallback = matrix_Exit;
 13937  071F  3000               	movlw	0
 13938  0720  00CA               	movwf	(low ((_matrix_task| (0+256)+6)))^(0+128)
 13939  0721  3000               	movlw	0
 13940  0722  00CB               	movwf	((low ((_matrix_task| (0+256)+6)))^(0+128)+1)
 13941                           
 13942                           ;main.c: 288: matrix_task.taskInterval = 10;
 13943  0723  300A               	movlw	10
 13944  0724  00CE               	movwf	(_matrix_task^(0+384)+10)
 13945  0725  3000               	movlw	0
 13946  0726  00CF               	movwf	(_matrix_task^(0+384)+11)
 13947                           
 13948                           ;main.c: 291: secret_value = SECRET_VALUE_INIT;
 13949  0727  0021               	movlb	1	; select bank1
 13950  0728  01C5               	clrf	_secret_value^(0+128)
 13951  0729  01C6               	clrf	(_secret_value+1)^(0+128)
 13952                           
 13953                           ;main.c: 294: currentTask = FLASHY_TASK;
 13954  072A  3002               	movlw	2
 13955  072B  00BA               	movwf	_currentTask^(0+128)
 13956  072C  3000               	movlw	0
 13957  072D  00BB               	movwf	(_currentTask^(0+128)+1)
 13958                           
 13959                           ;main.c: 296: scheduler_TaskAdd(&schedulerInst, &flashy_task);
 13960  072E  305C               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 13961  072F  0020               	movlb	0	; select bank0
 13962  0730  00EE               	movwf	??_main
 13963  0731  086E               	movf	??_main,w
 13964  0732  00BF               	movwf	scheduler_TaskAdd@task
 13965  0733  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13966  0734  31A3  2349  3186   	fcall	_scheduler_TaskAdd
 13967                           
 13968                           ;main.c: 297: scheduler_TaskAdd(&schedulerInst, &menu_task);
 13969  0737  304F               	movlw	(low (_menu_task| (0+256)))& (0+255)
 13970  0738  0020               	movlb	0	; select bank0
 13971  0739  00EE               	movwf	??_main
 13972  073A  086E               	movf	??_main,w
 13973  073B  00BF               	movwf	scheduler_TaskAdd@task
 13974  073C  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13975  073D  31A3  2349  3186   	fcall	_scheduler_TaskAdd
 13976                           
 13977                           ;main.c: 298: scheduler_TaskAdd(&schedulerInst, &slot_task);
 13978  0740  3042               	movlw	(low (_slot_task| (0+256)))& (0+255)
 13979  0741  0020               	movlb	0	; select bank0
 13980  0742  00EE               	movwf	??_main
 13981  0743  086E               	movf	??_main,w
 13982  0744  00BF               	movwf	scheduler_TaskAdd@task
 13983  0745  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13984  0746  31A3  2349  3186   	fcall	_scheduler_TaskAdd
 13985                           
 13986                           ;main.c: 299: scheduler_TaskAdd(&schedulerInst, &locked_task);
 13987  0749  3035               	movlw	(low (_locked_task| (0+256)))& (0+255)
 13988  074A  0020               	movlb	0	; select bank0
 13989  074B  00EE               	movwf	??_main
 13990  074C  086E               	movf	??_main,w
 13991  074D  00BF               	movwf	scheduler_TaskAdd@task
 13992  074E  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13993  074F  31A3  2349  3186   	fcall	_scheduler_TaskAdd
 13994                           
 13995                           ;main.c: 300: scheduler_TaskAdd(&schedulerInst, &secret_task);
 13996  0752  3028               	movlw	(low (_secret_task| (0+256)))& (0+255)
 13997  0753  0020               	movlb	0	; select bank0
 13998  0754  00EE               	movwf	??_main
 13999  0755  086E               	movf	??_main,w
 14000  0756  00BF               	movwf	scheduler_TaskAdd@task
 14001  0757  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14002  0758  31A3  2349  3186   	fcall	_scheduler_TaskAdd
 14003                           
 14004                           ;main.c: 301: scheduler_TaskAdd(&schedulerInst, &matrix_task);
 14005  075B  30C4               	movlw	(low (_matrix_task| (0+256)))& (0+255)
 14006  075C  0020               	movlb	0	; select bank0
 14007  075D  00EE               	movwf	??_main
 14008  075E  086E               	movf	??_main,w
 14009  075F  00BF               	movwf	scheduler_TaskAdd@task
 14010  0760  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14011  0761  31A3  2349  3186   	fcall	_scheduler_TaskAdd
 14012  0764                     l10667:	
 14013                           ;main.c: 304: while(1){
 14014                           
 14015                           
 14016                           ;main.c: 305: schedulerExecute(&schedulerInst);
 14017  0764  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14018  0765  31A3  23C3  3186   	fcall	_schedulerExecute
 14019  0768  2F64               	goto	l10667
 14020  0769                     __end_of_main:	
 14021                           
 14022                           	psect	text1
 14023  374C                     __ptext1:	
 14024 ;; *************** function _scheduler_TaskInit *****************
 14025 ;; Defined at:
 14026 ;;		line 36 in file "cooperative_scheduler.c"
 14027 ;; Parameters:    Size  Location     Type
 14028 ;;  task            1    wreg     PTR struct t_schedulerTa
 14029 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14030 ;;		 -> menu_task(13), flashy_task(13), 
 14031 ;; Auto vars:     Size  Location     Type
 14032 ;;  task            1    1[COMMON] PTR struct t_schedulerTa
 14033 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14034 ;;		 -> menu_task(13), flashy_task(13), 
 14035 ;; Return value:  Size  Location     Type
 14036 ;;                  1    wreg      void 
 14037 ;; Registers used:
 14038 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14039 ;; Tracked objects:
 14040 ;;		On entry : 0/0
 14041 ;;		On exit  : 0/0
 14042 ;;		Unchanged: 0/0
 14043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14047 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14048 ;;Total ram usage:        1 bytes
 14049 ;; Hardware stack levels used:    1
 14050 ;; Hardware stack levels required when called:    4
 14051 ;; This function calls:
 14052 ;;		Nothing
 14053 ;; This function is called by:
 14054 ;;		_main
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058                           
 14059                           ;psect for function _scheduler_TaskInit
 14060  374C                     _scheduler_TaskInit:	
 14061                           
 14062                           ;incstack = 0
 14063                           ; Regs used in _scheduler_TaskInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 14064                           ;scheduler_TaskInit@task stored from wreg
 14065  374C  00F1               	movwf	scheduler_TaskInit@task
 14066                           
 14067                           ;cooperative_scheduler.c: 37: task->systemTickLastExecuted = 0;
 14068  374D  0871               	movf	scheduler_TaskInit@task,w
 14069  374E  0086               	movwf	6
 14070  374F  3001               	movlw	1	; select bank2/3
 14071  3750  0087               	movwf	7
 14072  3751  3000               	movlw	0
 14073  3752  3FC0               	movwi [0]fsr1
 14074  3753  3FC1               	movwi [1]fsr1
 14075                           
 14076                           ;cooperative_scheduler.c: 38: task->taskData = (0);
 14077  3754  0871               	movf	scheduler_TaskInit@task,w
 14078  3755  3E02               	addlw	2
 14079  3756  0086               	movwf	6
 14080  3757  3001               	movlw	1	; select bank2/3
 14081  3758  0087               	movwf	7
 14082  3759  3000               	movlw	0
 14083  375A  3FC0               	movwi [0]fsr1
 14084  375B  3FC1               	movwi [1]fsr1
 14085                           
 14086                           ;cooperative_scheduler.c: 39: task->taskInitCallback = (0);
 14087  375C  0871               	movf	scheduler_TaskInit@task,w
 14088  375D  3E04               	addlw	4
 14089  375E  0086               	movwf	6
 14090  375F  3001               	movlw	1	; select bank2/3
 14091  3760  0087               	movwf	7
 14092  3761  3000               	movlw	0
 14093  3762  3FC0               	movwi [0]fsr1
 14094  3763  3FC1               	movwi [1]fsr1
 14095                           
 14096                           ;cooperative_scheduler.c: 40: task->taskExitCallback = (0);
 14097  3764  0871               	movf	scheduler_TaskInit@task,w
 14098  3765  3E06               	addlw	6
 14099  3766  0086               	movwf	6
 14100  3767  3001               	movlw	1	; select bank2/3
 14101  3768  0087               	movwf	7
 14102  3769  3000               	movlw	0
 14103  376A  3FC0               	movwi [0]fsr1
 14104  376B  3FC1               	movwi [1]fsr1
 14105                           
 14106                           ;cooperative_scheduler.c: 41: task->taskExecuteCallback = (0);
 14107  376C  0871               	movf	scheduler_TaskInit@task,w
 14108  376D  3E08               	addlw	8
 14109  376E  0086               	movwf	6
 14110  376F  3001               	movlw	1	; select bank2/3
 14111  3770  0087               	movwf	7
 14112  3771  3000               	movlw	0
 14113  3772  3FC0               	movwi [0]fsr1
 14114  3773  3FC1               	movwi [1]fsr1
 14115                           
 14116                           ;cooperative_scheduler.c: 42: task->taskInterval = 65535;
 14117  3774  0871               	movf	scheduler_TaskInit@task,w
 14118  3775  3E0A               	addlw	10
 14119  3776  0086               	movwf	6
 14120  3777  3001               	movlw	1	; select bank2/3
 14121  3778  0087               	movwf	7
 14122  3779  30FF               	movlw	255
 14123  377A  3FC0               	movwi [0]fsr1
 14124  377B  30FF               	movlw	255
 14125  377C  3FC1               	movwi [1]fsr1
 14126                           
 14127                           ;cooperative_scheduler.c: 43: task->taskId = -1;
 14128  377D  0871               	movf	scheduler_TaskInit@task,w
 14129  377E  3E0C               	addlw	12
 14130  377F  0086               	movwf	6
 14131  3780  3001               	movlw	1	; select bank2/3
 14132  3781  0087               	movwf	7
 14133  3782  0181               	clrf	1
 14134  3783  0381               	decf	1,f
 14135  3784  0008               	return
 14136  3785                     __end_of_scheduler_TaskInit:	
 14137                           
 14138                           	psect	text2
 14139  2349                     __ptext2:	
 14140 ;; *************** function _scheduler_TaskAdd *****************
 14141 ;; Defined at:
 14142 ;;		line 46 in file "cooperative_scheduler.c"
 14143 ;; Parameters:    Size  Location     Type
 14144 ;;  scheduler       1    wreg     PTR struct t_scheduler
 14145 ;;		 -> schedulerInst(18), 
 14146 ;;  task            1   31[BANK0 ] PTR struct t_schedulerTa
 14147 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14148 ;;		 -> menu_task(13), flashy_task(13), 
 14149 ;; Auto vars:     Size  Location     Type
 14150 ;;  scheduler       1   38[BANK0 ] PTR struct t_scheduler
 14151 ;;		 -> schedulerInst(18), 
 14152 ;;  k               1   39[BANK0 ] unsigned char 
 14153 ;; Return value:  Size  Location     Type
 14154 ;;                  1    wreg      char 
 14155 ;; Registers used:
 14156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14157 ;; Tracked objects:
 14158 ;;		On entry : 0/0
 14159 ;;		On exit  : 0/0
 14160 ;;		Unchanged: 0/0
 14161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14162 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14163 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14164 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14165 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14166 ;;Total ram usage:        9 bytes
 14167 ;; Hardware stack levels used:    1
 14168 ;; Hardware stack levels required when called:   11
 14169 ;; This function calls:
 14170 ;;		Absolute function
 14171 ;;		_flashy_Init
 14172 ;;		_locked_Init
 14173 ;;		_matrix_Init
 14174 ;;		_menu_Init
 14175 ;;		_secret_Init
 14176 ;;		_slot_Init
 14177 ;; This function is called by:
 14178 ;;		_main
 14179 ;; This function uses a non-reentrant model
 14180 ;;
 14181                           
 14182                           
 14183                           ;psect for function _scheduler_TaskAdd
 14184  2349                     _scheduler_TaskAdd:	
 14185                           
 14186                           ;incstack = 0
 14187                           ; Regs used in _scheduler_TaskAdd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14188                           ;scheduler_TaskAdd@scheduler stored from wreg
 14189  2349  0020               	movlb	0	; select bank0
 14190  234A  00C6               	movwf	scheduler_TaskAdd@scheduler
 14191                           
 14192                           ;cooperative_scheduler.c: 47: u8 k;
 14193                           ;cooperative_scheduler.c: 48: for (k = 0; k < 16; k++) {
 14194  234B  01C7               	clrf	scheduler_TaskAdd@k
 14195  234C  3010               	movlw	16
 14196  234D  0247               	subwf	scheduler_TaskAdd@k,w
 14197  234E  1803               	btfsc	3,0
 14198  234F  2BBB               	goto	l10465
 14199  2350                     l10451:	
 14200                           
 14201                           ;cooperative_scheduler.c: 49: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 14202  2350  0846               	movf	scheduler_TaskAdd@scheduler,w
 14203  2351  3E10               	addlw	16
 14204  2352  0086               	movwf	6
 14205  2353  3001               	movlw	1	; select bank2/3
 14206  2354  0087               	movwf	7
 14207  2355  3F40               	moviw [0]fsr1
 14208  2356  00C0               	movwf	??_scheduler_TaskAdd
 14209  2357  3F41               	moviw [1]fsr1
 14210  2358  00C1               	movwf	??_scheduler_TaskAdd+1
 14211  2359  3001               	movlw	1
 14212  235A  00C2               	movwf	??_scheduler_TaskAdd+2
 14213  235B  3000               	movlw	0
 14214  235C  00C3               	movwf	??_scheduler_TaskAdd+3
 14215  235D  0A47               	incf	scheduler_TaskAdd@k,w
 14216  235E  2B61               	goto	u6484
 14217  235F                     u6485:	
 14218  235F  35C2               	lslf	??_scheduler_TaskAdd+2,f
 14219  2360  0DC3               	rlf	??_scheduler_TaskAdd+3,f
 14220  2361                     u6484:	
 14221  2361  0B89               	decfsz	9,f
 14222  2362  2B5F               	goto	u6485
 14223  2363  0840               	movf	??_scheduler_TaskAdd,w
 14224  2364  0542               	andwf	??_scheduler_TaskAdd+2,w
 14225  2365  00C4               	movwf	??_scheduler_TaskAdd+4
 14226  2366  0841               	movf	??_scheduler_TaskAdd+1,w
 14227  2367  0543               	andwf	??_scheduler_TaskAdd+3,w
 14228  2368  00C5               	movwf	??_scheduler_TaskAdd+5
 14229  2369  0844               	movf	??_scheduler_TaskAdd+4,w
 14230  236A  0445               	iorwf	??_scheduler_TaskAdd+5,w
 14231  236B  1D03               	btfss	3,2
 14232  236C  2BB3               	goto	l10461
 14233                           
 14234                           ;cooperative_scheduler.c: 50: scheduler->tasks[k] = task;
 14235  236D  083F               	movf	scheduler_TaskAdd@task,w
 14236  236E  00C0               	movwf	??_scheduler_TaskAdd
 14237  236F  0847               	movf	scheduler_TaskAdd@k,w
 14238  2370  0746               	addwf	scheduler_TaskAdd@scheduler,w
 14239  2371  00C1               	movwf	??_scheduler_TaskAdd+1
 14240  2372  0841               	movf	??_scheduler_TaskAdd+1,w
 14241  2373  0086               	movwf	6
 14242  2374  3001               	movlw	1	; select bank2/3
 14243  2375  0087               	movwf	7
 14244  2376  0840               	movf	??_scheduler_TaskAdd,w
 14245  2377  0081               	movwf	1
 14246                           
 14247                           ;cooperative_scheduler.c: 51: scheduler->taskEntryVector |= (1 << k);
 14248  2378  3001               	movlw	1
 14249  2379  00C0               	movwf	??_scheduler_TaskAdd
 14250  237A  3000               	movlw	0
 14251  237B  00C1               	movwf	??_scheduler_TaskAdd+1
 14252  237C  0A47               	incf	scheduler_TaskAdd@k,w
 14253  237D  2B80               	goto	u6504
 14254  237E                     u6505:	
 14255  237E  35C0               	lslf	??_scheduler_TaskAdd,f
 14256  237F  0DC1               	rlf	??_scheduler_TaskAdd+1,f
 14257  2380                     u6504:	
 14258  2380  0B89               	decfsz	9,f
 14259  2381  2B7E               	goto	u6505
 14260  2382  0846               	movf	scheduler_TaskAdd@scheduler,w
 14261  2383  3E10               	addlw	16
 14262  2384  0086               	movwf	6
 14263  2385  3001               	movlw	1	; select bank2/3
 14264  2386  0087               	movwf	7
 14265  2387  0840               	movf	??_scheduler_TaskAdd,w
 14266  2388  0481               	iorwf	1,f
 14267  2389  3141               	addfsr 1,1
 14268  238A  0841               	movf	??_scheduler_TaskAdd+1,w
 14269  238B  0481               	iorwf	1,f
 14270                           
 14271                           ;cooperative_scheduler.c: 53: if (task->taskInitCallback != (0)) {
 14272  238C  083F               	movf	scheduler_TaskAdd@task,w
 14273  238D  3E04               	addlw	4
 14274  238E  0086               	movwf	6
 14275  238F  3001               	movlw	1	; select bank2/3
 14276  2390  0087               	movwf	7
 14277  2391  0016               	moviw fsr1++
 14278  2392  0401               	iorwf	1,w
 14279  2393  1903               	btfsc	3,2
 14280  2394  2BA8               	goto	l10457
 14281                           
 14282                           ;cooperative_scheduler.c: 54: task->taskInitCallback (task->taskData);
 14283  2395  083F               	movf	scheduler_TaskAdd@task,w
 14284  2396  3E02               	addlw	2
 14285  2397  0086               	movwf	6
 14286  2398  3001               	movlw	1	; select bank2/3
 14287  2399  0087               	movwf	7
 14288  239A  3F40               	moviw [0]fsr1
 14289  239B  00B9               	movwf	matrix_Init@taskData
 14290  239C  3F41               	moviw [1]fsr1
 14291  239D  00BA               	movwf	matrix_Init@taskData+1
 14292  239E  083F               	movf	scheduler_TaskAdd@task,w
 14293  239F  3E04               	addlw	4
 14294  23A0  0086               	movwf	6
 14295  23A1  3001               	movlw	1	; select bank2/3
 14296  23A2  0087               	movwf	7
 14297  23A3  3F41               	moviw [1]fsr1
 14298  23A4  008A               	movwf	10
 14299  23A5  3F40               	moviw [0]fsr1
 14300  23A6  000A               	callw
 14301  23A7  31A3               	pagesel	$
 14302  23A8                     l10457:	
 14303                           
 14304                           ;cooperative_scheduler.c: 55: }
 14305                           ;cooperative_scheduler.c: 57: task->taskId = (s8) k;
 14306  23A8  0020               	movlb	0	; select bank0
 14307  23A9  0847               	movf	scheduler_TaskAdd@k,w
 14308  23AA  00C0               	movwf	??_scheduler_TaskAdd
 14309  23AB  083F               	movf	scheduler_TaskAdd@task,w
 14310  23AC  3E0C               	addlw	12
 14311  23AD  0086               	movwf	6
 14312  23AE  3001               	movlw	1	; select bank2/3
 14313  23AF  0087               	movwf	7
 14314  23B0  0840               	movf	??_scheduler_TaskAdd,w
 14315  23B1  0081               	movwf	1
 14316                           
 14317                           ;cooperative_scheduler.c: 58: return k;
 14318                           ;	Return value of _scheduler_TaskAdd is never used
 14319  23B2  0008               	return
 14320  23B3                     l10461:	
 14321  23B3  3001               	movlw	1
 14322  23B4  00C0               	movwf	??_scheduler_TaskAdd
 14323  23B5  0840               	movf	??_scheduler_TaskAdd,w
 14324  23B6  07C7               	addwf	scheduler_TaskAdd@k,f
 14325  23B7  3010               	movlw	16
 14326  23B8  0247               	subwf	scheduler_TaskAdd@k,w
 14327  23B9  1C03               	skipc
 14328  23BA  2B50               	goto	l10451
 14329  23BB                     l10465:	
 14330                           
 14331                           ;cooperative_scheduler.c: 59: }
 14332                           ;cooperative_scheduler.c: 60: }
 14333                           ;cooperative_scheduler.c: 62: task->taskId = -1;
 14334  23BB  083F               	movf	scheduler_TaskAdd@task,w
 14335  23BC  3E0C               	addlw	12
 14336  23BD  0086               	movwf	6
 14337  23BE  3001               	movlw	1	; select bank2/3
 14338  23BF  0087               	movwf	7
 14339  23C0  0181               	clrf	1
 14340  23C1  0381               	decf	1,f
 14341  23C2  0008               	return
 14342  23C3                     __end_of_scheduler_TaskAdd:	
 14343                           ;cooperative_scheduler.c: 63: return -1;
 14344                           ;	Return value of _scheduler_TaskAdd is never used
 14345                           
 14346                           
 14347                           	psect	text3
 14348  2447                     __ptext3:	
 14349 ;; *************** function _matrix_Init *****************
 14350 ;; Defined at:
 14351 ;;		line 66 in file "matrix_task.c"
 14352 ;; Parameters:    Size  Location     Type
 14353 ;;  taskData        2   25[BANK0 ] PTR void 
 14354 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14355 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14356 ;; Auto vars:     Size  Location     Type
 14357 ;;  data            2   29[BANK0 ] PTR struct t_matrix_task
 14358 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14359 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14360 ;; Return value:  Size  Location     Type
 14361 ;;                  1    wreg      void 
 14362 ;; Registers used:
 14363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14364 ;; Tracked objects:
 14365 ;;		On entry : 0/0
 14366 ;;		On exit  : 0/0
 14367 ;;		Unchanged: 0/0
 14368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14369 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14370 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14371 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14372 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14373 ;;Total ram usage:        6 bytes
 14374 ;; Hardware stack levels used:    1
 14375 ;; Hardware stack levels required when called:   10
 14376 ;; This function calls:
 14377 ;;		_nullifyBadge_segDisplayErase
 14378 ;;		_nullifyBadge_segDisplayRegister
 14379 ;;		_nullifyBadge_userLedsClr
 14380 ;;		_nullifyBadge_userLedsRegister
 14381 ;; This function is called by:
 14382 ;;		_main
 14383 ;;		_scheduler_TaskAdd
 14384 ;; This function uses a non-reentrant model
 14385 ;;
 14386                           
 14387                           
 14388                           ;psect for function _matrix_Init
 14389  2447                     _matrix_Init:	
 14390                           
 14391                           ;matrix_task.c: 67: struct t_matrix_taskData *data = (struct t_matrix_taskData *) taskDa
      +                          ta;
 14392                           
 14393                           ;incstack = 0
 14394                           ; Regs used in _matrix_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14395  2447  0020               	movlb	0	; select bank0
 14396  2448  083A               	movf	matrix_Init@taskData+1,w
 14397  2449  00BE               	movwf	matrix_Init@data+1
 14398  244A  0839               	movf	matrix_Init@taskData,w
 14399  244B  00BD               	movwf	matrix_Init@data
 14400                           
 14401                           ;matrix_task.c: 70: nullifyBadge_userLedsRegister(data->badge);
 14402  244C  083D               	movf	matrix_Init@data,w
 14403  244D  0086               	movwf	6
 14404  244E  083E               	movf	matrix_Init@data+1,w
 14405  244F  0087               	movwf	7
 14406  2450  0801               	movf	1,w
 14407  2451  31B3  2326  31A4   	fcall	_nullifyBadge_userLedsRegister
 14408                           
 14409                           ;matrix_task.c: 71: nullifyBadge_userLedsClr(data->badge);
 14410  2454  0020               	movlb	0	; select bank0
 14411  2455  083D               	movf	matrix_Init@data,w
 14412  2456  0086               	movwf	6
 14413  2457  083E               	movf	matrix_Init@data+1,w
 14414  2458  0087               	movwf	7
 14415  2459  0801               	movf	1,w
 14416  245A  31B2  223A  31A4   	fcall	_nullifyBadge_userLedsClr
 14417                           
 14418                           ;matrix_task.c: 72: nullifyBadge_segDisplayRegister(data->badge);
 14419  245D  0020               	movlb	0	; select bank0
 14420  245E  083D               	movf	matrix_Init@data,w
 14421  245F  0086               	movwf	6
 14422  2460  083E               	movf	matrix_Init@data+1,w
 14423  2461  0087               	movwf	7
 14424  2462  0801               	movf	1,w
 14425  2463  31B2  224F  31A4   	fcall	_nullifyBadge_segDisplayRegister
 14426                           
 14427                           ;matrix_task.c: 73: nullifyBadge_segDisplayErase(data->badge);
 14428  2466  0020               	movlb	0	; select bank0
 14429  2467  083D               	movf	matrix_Init@data,w
 14430  2468  0086               	movwf	6
 14431  2469  083E               	movf	matrix_Init@data+1,w
 14432  246A  0087               	movwf	7
 14433  246B  0801               	movf	1,w
 14434  246C  31B2  2234  31A4   	fcall	_nullifyBadge_segDisplayErase
 14435                           
 14436                           ;matrix_task.c: 74: matrix_found =0;
 14437  246F  0021               	movlb	1	; select bank1
 14438  2470  01C2               	clrf	_matrix_found^(0+128)
 14439                           
 14440                           ;matrix_task.c: 76: data->display_state = MATRIX_STATE_DISPLAY;
 14441  2471  0020               	movlb	0	; select bank0
 14442  2472  083D               	movf	matrix_Init@data,w
 14443  2473  3E02               	addlw	2
 14444  2474  00BB               	movwf	??_matrix_Init
 14445  2475  3000               	movlw	0
 14446  2476  3D3E               	addwfc	matrix_Init@data+1,w
 14447  2477  00BC               	movwf	??_matrix_Init+1
 14448  2478  083B               	movf	??_matrix_Init,w
 14449  2479  0086               	movwf	6
 14450  247A  083C               	movf	??_matrix_Init+1,w
 14451  247B  0087               	movwf	7
 14452  247C  300A               	movlw	10
 14453  247D  0081               	movwf	1
 14454                           
 14455                           ;matrix_task.c: 77: data->martix_state = STILL_IN_MATRIX;
 14456  247E  083D               	movf	matrix_Init@data,w
 14457  247F  3E01               	addlw	1
 14458  2480  00BB               	movwf	??_matrix_Init
 14459  2481  3000               	movlw	0
 14460  2482  3D3E               	addwfc	matrix_Init@data+1,w
 14461  2483  00BC               	movwf	??_matrix_Init+1
 14462  2484  083B               	movf	??_matrix_Init,w
 14463  2485  0086               	movwf	6
 14464  2486  083C               	movf	??_matrix_Init+1,w
 14465  2487  0087               	movwf	7
 14466  2488  3001               	movlw	1
 14467  2489  0081               	movwf	1
 14468                           
 14469                           ;matrix_task.c: 78: matrix_leds_idx =0;
 14470  248A  0021               	movlb	1	; select bank1
 14471  248B  01A0               	clrf	_matrix_leds_idx^(0+128)
 14472  248C  01A1               	clrf	(_matrix_leds_idx+1)^(0+128)
 14473                           
 14474                           ;matrix_task.c: 81: data->holdCountA = 0 ;
 14475  248D  0020               	movlb	0	; select bank0
 14476  248E  083D               	movf	matrix_Init@data,w
 14477  248F  0086               	movwf	6
 14478  2490  083E               	movf	matrix_Init@data+1,w
 14479  2491  0087               	movwf	7
 14480  2492  3149               	addfsr 1,9
 14481  2493  3000               	movlw	0
 14482  2494  3FC0               	movwi [0]fsr1
 14483  2495  3FC1               	movwi [1]fsr1
 14484                           
 14485                           ;matrix_task.c: 82: data->holdCountB = 0 ;
 14486  2496  083D               	movf	matrix_Init@data,w
 14487  2497  0086               	movwf	6
 14488  2498  083E               	movf	matrix_Init@data+1,w
 14489  2499  0087               	movwf	7
 14490  249A  314B               	addfsr 1,11
 14491  249B  3000               	movlw	0
 14492  249C  3FC0               	movwi [0]fsr1
 14493  249D  3FC1               	movwi [1]fsr1
 14494                           
 14495                           ;matrix_task.c: 83: data->holdCountX = 0 ;
 14496  249E  083D               	movf	matrix_Init@data,w
 14497  249F  0086               	movwf	6
 14498  24A0  083E               	movf	matrix_Init@data+1,w
 14499  24A1  0087               	movwf	7
 14500  24A2  314D               	addfsr 1,13
 14501  24A3  3000               	movlw	0
 14502  24A4  3FC0               	movwi [0]fsr1
 14503  24A5  3FC1               	movwi [1]fsr1
 14504                           
 14505                           ;matrix_task.c: 84: data->holdCountY = 0 ;
 14506  24A6  083D               	movf	matrix_Init@data,w
 14507  24A7  0086               	movwf	6
 14508  24A8  083E               	movf	matrix_Init@data+1,w
 14509  24A9  0087               	movwf	7
 14510  24AA  314F               	addfsr 1,15
 14511  24AB  3000               	movlw	0
 14512  24AC  3FC0               	movwi [0]fsr1
 14513  24AD  3FC1               	movwi [1]fsr1
 14514                           
 14515                           ;matrix_task.c: 85: data->holdCountXY = 0;
 14516  24AE  083D               	movf	matrix_Init@data,w
 14517  24AF  0086               	movwf	6
 14518  24B0  083E               	movf	matrix_Init@data+1,w
 14519  24B1  0087               	movwf	7
 14520  24B2  3151               	addfsr 1,17
 14521  24B3  3000               	movlw	0
 14522  24B4  3FC0               	movwi [0]fsr1
 14523  24B5  3FC1               	movwi [1]fsr1
 14524                           
 14525                           ;matrix_task.c: 86: data->holdCountAY = 0;
 14526  24B6  083D               	movf	matrix_Init@data,w
 14527  24B7  0086               	movwf	6
 14528  24B8  083E               	movf	matrix_Init@data+1,w
 14529  24B9  0087               	movwf	7
 14530  24BA  3153               	addfsr 1,19
 14531  24BB  3000               	movlw	0
 14532  24BC  3FC0               	movwi [0]fsr1
 14533  24BD  3FC1               	movwi [1]fsr1
 14534                           
 14535                           ;matrix_task.c: 87: data->holdCountAX = 0;
 14536  24BE  083D               	movf	matrix_Init@data,w
 14537  24BF  0086               	movwf	6
 14538  24C0  083E               	movf	matrix_Init@data+1,w
 14539  24C1  0087               	movwf	7
 14540  24C2  3155               	addfsr 1,21
 14541  24C3  3000               	movlw	0
 14542  24C4  3FC0               	movwi [0]fsr1
 14543  24C5  3FC1               	movwi [1]fsr1
 14544                           
 14545                           ;matrix_task.c: 88: data->holdCountBX = 0;
 14546  24C6  083D               	movf	matrix_Init@data,w
 14547  24C7  0086               	movwf	6
 14548  24C8  083E               	movf	matrix_Init@data+1,w
 14549  24C9  0087               	movwf	7
 14550  24CA  3157               	addfsr 1,23
 14551  24CB  3000               	movlw	0
 14552  24CC  3FC0               	movwi [0]fsr1
 14553  24CD  3FC1               	movwi [1]fsr1
 14554                           
 14555                           ;matrix_task.c: 89: data->holdCountBY = 0;
 14556  24CE  083D               	movf	matrix_Init@data,w
 14557  24CF  0086               	movwf	6
 14558  24D0  083E               	movf	matrix_Init@data+1,w
 14559  24D1  0087               	movwf	7
 14560  24D2  3159               	addfsr 1,25
 14561  24D3  3000               	movlw	0
 14562  24D4  3FC0               	movwi [0]fsr1
 14563  24D5  3FC1               	movwi [1]fsr1
 14564                           
 14565                           ;matrix_task.c: 90: data->holdCountBA = 0;
 14566  24D6  083D               	movf	matrix_Init@data,w
 14567  24D7  0086               	movwf	6
 14568  24D8  083E               	movf	matrix_Init@data+1,w
 14569  24D9  0087               	movwf	7
 14570  24DA  315B               	addfsr 1,27
 14571  24DB  3000               	movlw	0
 14572  24DC  3FC0               	movwi [0]fsr1
 14573  24DD  3FC1               	movwi [1]fsr1
 14574                           
 14575                           ;matrix_task.c: 91: data->noholdCount = 0;
 14576  24DE  083D               	movf	matrix_Init@data,w
 14577  24DF  0086               	movwf	6
 14578  24E0  083E               	movf	matrix_Init@data+1,w
 14579  24E1  0087               	movwf	7
 14580  24E2  315D               	addfsr 1,29
 14581  24E3  3000               	movlw	0
 14582  24E4  3FC0               	movwi [0]fsr1
 14583  24E5  3FC1               	movwi [1]fsr1
 14584  24E6  0008               	return
 14585  24E7                     __end_of_matrix_Init:	
 14586                           
 14587                           	psect	text4
 14588  2D45                     __ptext4:	
 14589 ;; *************** function _secret_Init *****************
 14590 ;; Defined at:
 14591 ;;		line 51 in file "secret_task.c"
 14592 ;; Parameters:    Size  Location     Type
 14593 ;;  taskData        2   25[BANK0 ] PTR void 
 14594 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14595 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14596 ;; Auto vars:     Size  Location     Type
 14597 ;;  data            2   27[BANK0 ] PTR struct t_secret_task
 14598 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14599 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14600 ;; Return value:  Size  Location     Type
 14601 ;;                  1    wreg      void 
 14602 ;; Registers used:
 14603 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14604 ;; Tracked objects:
 14605 ;;		On entry : 0/0
 14606 ;;		On exit  : 0/0
 14607 ;;		Unchanged: 0/0
 14608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14609 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14610 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14612 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14613 ;;Total ram usage:        4 bytes
 14614 ;; Hardware stack levels used:    1
 14615 ;; Hardware stack levels required when called:   10
 14616 ;; This function calls:
 14617 ;;		_nullifyBadge_segDisplayErase
 14618 ;;		_nullifyBadge_segDisplayRegister
 14619 ;;		_nullifyBadge_userLedsClr
 14620 ;;		_nullifyBadge_userLedsRegister
 14621 ;; This function is called by:
 14622 ;;		_main
 14623 ;;		_scheduler_TaskAdd
 14624 ;; This function uses a non-reentrant model
 14625 ;;
 14626                           
 14627                           
 14628                           ;psect for function _secret_Init
 14629  2D45                     _secret_Init:	
 14630                           
 14631                           ;secret_task.c: 52: struct t_secret_taskData *data = (struct t_secret_taskData *) taskDa
      +                          ta;
 14632                           
 14633                           ;incstack = 0
 14634                           ; Regs used in _secret_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14635  2D45  0020               	movlb	0	; select bank0
 14636  2D46  083A               	movf	secret_Init@taskData+1,w
 14637  2D47  00BC               	movwf	secret_Init@data+1
 14638  2D48  0839               	movf	secret_Init@taskData,w
 14639  2D49  00BB               	movwf	secret_Init@data
 14640                           
 14641                           ;secret_task.c: 55: nullifyBadge_userLedsRegister(data->badge);
 14642  2D4A  083B               	movf	secret_Init@data,w
 14643  2D4B  0086               	movwf	6
 14644  2D4C  083C               	movf	secret_Init@data+1,w
 14645  2D4D  0087               	movwf	7
 14646  2D4E  0801               	movf	1,w
 14647  2D4F  31B3  2326  31AD   	fcall	_nullifyBadge_userLedsRegister
 14648                           
 14649                           ;secret_task.c: 56: nullifyBadge_userLedsClr(data->badge);
 14650  2D52  0020               	movlb	0	; select bank0
 14651  2D53  083B               	movf	secret_Init@data,w
 14652  2D54  0086               	movwf	6
 14653  2D55  083C               	movf	secret_Init@data+1,w
 14654  2D56  0087               	movwf	7
 14655  2D57  0801               	movf	1,w
 14656  2D58  31B2  223A  31AD   	fcall	_nullifyBadge_userLedsClr
 14657                           
 14658                           ;secret_task.c: 57: nullifyBadge_segDisplayRegister(data->badge);
 14659  2D5B  0020               	movlb	0	; select bank0
 14660  2D5C  083B               	movf	secret_Init@data,w
 14661  2D5D  0086               	movwf	6
 14662  2D5E  083C               	movf	secret_Init@data+1,w
 14663  2D5F  0087               	movwf	7
 14664  2D60  0801               	movf	1,w
 14665  2D61  31B2  224F  31AD   	fcall	_nullifyBadge_segDisplayRegister
 14666                           
 14667                           ;secret_task.c: 58: nullifyBadge_segDisplayErase(data->badge);
 14668  2D64  0020               	movlb	0	; select bank0
 14669  2D65  083B               	movf	secret_Init@data,w
 14670  2D66  0086               	movwf	6
 14671  2D67  083C               	movf	secret_Init@data+1,w
 14672  2D68  0087               	movwf	7
 14673  2D69  0801               	movf	1,w
 14674  2D6A  31B2  2234  31AD   	fcall	_nullifyBadge_segDisplayErase
 14675                           
 14676                           ;secret_task.c: 61: data->delayTickCount = 300;
 14677  2D6D  0020               	movlb	0	; select bank0
 14678  2D6E  083B               	movf	secret_Init@data,w
 14679  2D6F  0086               	movwf	6
 14680  2D70  083C               	movf	secret_Init@data+1,w
 14681  2D71  0087               	movwf	7
 14682  2D72  3142               	addfsr 1,2
 14683  2D73  302C               	movlw	44
 14684  2D74  3FC0               	movwi [0]fsr1
 14685  2D75  3001               	movlw	1
 14686  2D76  3FC1               	movwi [1]fsr1
 14687                           
 14688                           ;secret_task.c: 62: data->holdCountA = 0;
 14689  2D77  083B               	movf	secret_Init@data,w
 14690  2D78  0086               	movwf	6
 14691  2D79  083C               	movf	secret_Init@data+1,w
 14692  2D7A  0087               	movwf	7
 14693  2D7B  3144               	addfsr 1,4
 14694  2D7C  3000               	movlw	0
 14695  2D7D  3FC0               	movwi [0]fsr1
 14696  2D7E  3FC1               	movwi [1]fsr1
 14697                           
 14698                           ;secret_task.c: 63: data->holdCountB = 0;
 14699  2D7F  083B               	movf	secret_Init@data,w
 14700  2D80  0086               	movwf	6
 14701  2D81  083C               	movf	secret_Init@data+1,w
 14702  2D82  0087               	movwf	7
 14703  2D83  3146               	addfsr 1,6
 14704  2D84  3000               	movlw	0
 14705  2D85  3FC0               	movwi [0]fsr1
 14706  2D86  3FC1               	movwi [1]fsr1
 14707                           
 14708                           ;secret_task.c: 64: data->holdCountX = 0;
 14709  2D87  083B               	movf	secret_Init@data,w
 14710  2D88  0086               	movwf	6
 14711  2D89  083C               	movf	secret_Init@data+1,w
 14712  2D8A  0087               	movwf	7
 14713  2D8B  3148               	addfsr 1,8
 14714  2D8C  3000               	movlw	0
 14715  2D8D  3FC0               	movwi [0]fsr1
 14716  2D8E  3FC1               	movwi [1]fsr1
 14717                           
 14718                           ;secret_task.c: 65: data->holdCountY = 0;
 14719  2D8F  083B               	movf	secret_Init@data,w
 14720  2D90  0086               	movwf	6
 14721  2D91  083C               	movf	secret_Init@data+1,w
 14722  2D92  0087               	movwf	7
 14723  2D93  314A               	addfsr 1,10
 14724  2D94  3000               	movlw	0
 14725  2D95  3FC0               	movwi [0]fsr1
 14726  2D96  3FC1               	movwi [1]fsr1
 14727                           
 14728                           ;secret_task.c: 66: data->noholdCount = 0;
 14729  2D97  083B               	movf	secret_Init@data,w
 14730  2D98  0086               	movwf	6
 14731  2D99  083C               	movf	secret_Init@data+1,w
 14732  2D9A  0087               	movwf	7
 14733  2D9B  314C               	addfsr 1,12
 14734  2D9C  3000               	movlw	0
 14735  2D9D  3FC0               	movwi [0]fsr1
 14736  2D9E  3FC1               	movwi [1]fsr1
 14737  2D9F  0008               	return
 14738  2DA0                     __end_of_secret_Init:	
 14739                           
 14740                           	psect	text5
 14741  2F2D                     __ptext5:	
 14742 ;; *************** function _locked_Init *****************
 14743 ;; Defined at:
 14744 ;;		line 101 in file "locked_task.c"
 14745 ;; Parameters:    Size  Location     Type
 14746 ;;  taskData        2   25[BANK0 ] PTR void 
 14747 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14748 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14749 ;; Auto vars:     Size  Location     Type
 14750 ;;  data            2   27[BANK0 ] PTR struct t_locked_task
 14751 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14752 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14753 ;; Return value:  Size  Location     Type
 14754 ;;                  1    wreg      void 
 14755 ;; Registers used:
 14756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14757 ;; Tracked objects:
 14758 ;;		On entry : 0/0
 14759 ;;		On exit  : 0/0
 14760 ;;		Unchanged: 0/0
 14761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14762 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14763 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14765 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14766 ;;Total ram usage:        4 bytes
 14767 ;; Hardware stack levels used:    1
 14768 ;; Hardware stack levels required when called:   10
 14769 ;; This function calls:
 14770 ;;		_locked_lock_leds
 14771 ;;		_nullifyBadge_segDisplayErase
 14772 ;;		_nullifyBadge_segDisplayRegister
 14773 ;;		_nullifyBadge_userLedsClr
 14774 ;;		_nullifyBadge_userLedsRegister
 14775 ;; This function is called by:
 14776 ;;		_main
 14777 ;;		_scheduler_TaskAdd
 14778 ;; This function uses a non-reentrant model
 14779 ;;
 14780                           
 14781                           
 14782                           ;psect for function _locked_Init
 14783  2F2D                     _locked_Init:	
 14784                           
 14785                           ;locked_task.c: 102: struct t_locked_taskData *data = (struct t_locked_taskData *) taskD
      +                          ata;
 14786                           
 14787                           ;incstack = 0
 14788                           ; Regs used in _locked_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14789  2F2D  0020               	movlb	0	; select bank0
 14790  2F2E  083A               	movf	locked_Init@taskData+1,w
 14791  2F2F  00BC               	movwf	locked_Init@data+1
 14792  2F30  0839               	movf	locked_Init@taskData,w
 14793  2F31  00BB               	movwf	locked_Init@data
 14794                           
 14795                           ;locked_task.c: 105: nullifyBadge_userLedsRegister(data->badge);
 14796  2F32  083B               	movf	locked_Init@data,w
 14797  2F33  0086               	movwf	6
 14798  2F34  083C               	movf	locked_Init@data+1,w
 14799  2F35  0087               	movwf	7
 14800  2F36  0801               	movf	1,w
 14801  2F37  31B3  2326  31AF   	fcall	_nullifyBadge_userLedsRegister
 14802                           
 14803                           ;locked_task.c: 106: nullifyBadge_userLedsClr(data->badge);
 14804  2F3A  0020               	movlb	0	; select bank0
 14805  2F3B  083B               	movf	locked_Init@data,w
 14806  2F3C  0086               	movwf	6
 14807  2F3D  083C               	movf	locked_Init@data+1,w
 14808  2F3E  0087               	movwf	7
 14809  2F3F  0801               	movf	1,w
 14810  2F40  31B2  223A  31AF   	fcall	_nullifyBadge_userLedsClr
 14811                           
 14812                           ;locked_task.c: 107: nullifyBadge_segDisplayRegister(data->badge);
 14813  2F43  0020               	movlb	0	; select bank0
 14814  2F44  083B               	movf	locked_Init@data,w
 14815  2F45  0086               	movwf	6
 14816  2F46  083C               	movf	locked_Init@data+1,w
 14817  2F47  0087               	movwf	7
 14818  2F48  0801               	movf	1,w
 14819  2F49  31B2  224F  31AF   	fcall	_nullifyBadge_segDisplayRegister
 14820                           
 14821                           ;locked_task.c: 108: nullifyBadge_segDisplayErase(data->badge);
 14822  2F4C  0020               	movlb	0	; select bank0
 14823  2F4D  083B               	movf	locked_Init@data,w
 14824  2F4E  0086               	movwf	6
 14825  2F4F  083C               	movf	locked_Init@data+1,w
 14826  2F50  0087               	movwf	7
 14827  2F51  0801               	movf	1,w
 14828  2F52  31B2  2234  31AF   	fcall	_nullifyBadge_segDisplayErase
 14829                           
 14830                           ;locked_task.c: 109: pw_found =0;
 14831  2F55  0021               	movlb	1	; select bank1
 14832  2F56  01C3               	clrf	_pw_found^(0+128)
 14833                           
 14834                           ;locked_task.c: 111: locked_lock_leds();
 14835  2F57  31B4  2467  31AF   	fcall	_locked_lock_leds
 14836                           
 14837                           ;locked_task.c: 112: data->state = LOCKED_LOCKED_STATE;
 14838  2F5A  0020               	movlb	0	; select bank0
 14839  2F5B  083B               	movf	locked_Init@data,w
 14840  2F5C  0086               	movwf	6
 14841  2F5D  083C               	movf	locked_Init@data+1,w
 14842  2F5E  0087               	movwf	7
 14843  2F5F  314D               	addfsr 1,13
 14844  2F60  0181               	clrf	1
 14845                           
 14846                           ;locked_task.c: 113: data->delayTickCount = 0;
 14847  2F61  083B               	movf	locked_Init@data,w
 14848  2F62  0086               	movwf	6
 14849  2F63  083C               	movf	locked_Init@data+1,w
 14850  2F64  0087               	movwf	7
 14851  2F65  3141               	addfsr 1,1
 14852  2F66  3000               	movlw	0
 14853  2F67  3FC0               	movwi [0]fsr1
 14854  2F68  3FC1               	movwi [1]fsr1
 14855                           
 14856                           ;locked_task.c: 114: data->holdCountA = 0;
 14857  2F69  083B               	movf	locked_Init@data,w
 14858  2F6A  0086               	movwf	6
 14859  2F6B  083C               	movf	locked_Init@data+1,w
 14860  2F6C  0087               	movwf	7
 14861  2F6D  3143               	addfsr 1,3
 14862  2F6E  3000               	movlw	0
 14863  2F6F  3FC0               	movwi [0]fsr1
 14864  2F70  3FC1               	movwi [1]fsr1
 14865                           
 14866                           ;locked_task.c: 115: data->holdCountB = 0;
 14867  2F71  083B               	movf	locked_Init@data,w
 14868  2F72  0086               	movwf	6
 14869  2F73  083C               	movf	locked_Init@data+1,w
 14870  2F74  0087               	movwf	7
 14871  2F75  3145               	addfsr 1,5
 14872  2F76  3000               	movlw	0
 14873  2F77  3FC0               	movwi [0]fsr1
 14874  2F78  3FC1               	movwi [1]fsr1
 14875                           
 14876                           ;locked_task.c: 116: data->holdCountX = 0;
 14877  2F79  083B               	movf	locked_Init@data,w
 14878  2F7A  0086               	movwf	6
 14879  2F7B  083C               	movf	locked_Init@data+1,w
 14880  2F7C  0087               	movwf	7
 14881  2F7D  3147               	addfsr 1,7
 14882  2F7E  3000               	movlw	0
 14883  2F7F  3FC0               	movwi [0]fsr1
 14884  2F80  3FC1               	movwi [1]fsr1
 14885                           
 14886                           ;locked_task.c: 117: data->holdCountY = 0;
 14887  2F81  083B               	movf	locked_Init@data,w
 14888  2F82  0086               	movwf	6
 14889  2F83  083C               	movf	locked_Init@data+1,w
 14890  2F84  0087               	movwf	7
 14891  2F85  3149               	addfsr 1,9
 14892  2F86  3000               	movlw	0
 14893  2F87  3FC0               	movwi [0]fsr1
 14894  2F88  3FC1               	movwi [1]fsr1
 14895                           
 14896                           ;locked_task.c: 118: data->noholdCount = 0;
 14897  2F89  083B               	movf	locked_Init@data,w
 14898  2F8A  0086               	movwf	6
 14899  2F8B  083C               	movf	locked_Init@data+1,w
 14900  2F8C  0087               	movwf	7
 14901  2F8D  314B               	addfsr 1,11
 14902  2F8E  3000               	movlw	0
 14903  2F8F  3FC0               	movwi [0]fsr1
 14904  2F90  3FC1               	movwi [1]fsr1
 14905  2F91  0008               	return
 14906  2F92                     __end_of_locked_Init:	
 14907                           
 14908                           	psect	text6
 14909  2E02                     __ptext6:	
 14910 ;; *************** function _menu_Init *****************
 14911 ;; Defined at:
 14912 ;;		line 37 in file "menu_task.c"
 14913 ;; Parameters:    Size  Location     Type
 14914 ;;  taskData        2   25[BANK0 ] PTR void 
 14915 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14916 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14917 ;; Auto vars:     Size  Location     Type
 14918 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 14919 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14920 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14921 ;; Return value:  Size  Location     Type
 14922 ;;                  1    wreg      void 
 14923 ;; Registers used:
 14924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14925 ;; Tracked objects:
 14926 ;;		On entry : 0/0
 14927 ;;		On exit  : 0/0
 14928 ;;		Unchanged: 0/0
 14929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14930 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14933 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14934 ;;Total ram usage:        4 bytes
 14935 ;; Hardware stack levels used:    1
 14936 ;; Hardware stack levels required when called:   10
 14937 ;; This function calls:
 14938 ;;		_nullifyBadge_segDisplayErase
 14939 ;;		_nullifyBadge_segDisplayRegister
 14940 ;;		_nullifyBadge_userLedsClr
 14941 ;;		_nullifyBadge_userLedsRegister
 14942 ;; This function is called by:
 14943 ;;		_main
 14944 ;;		_scheduler_TaskAdd
 14945 ;; This function uses a non-reentrant model
 14946 ;;
 14947                           
 14948                           
 14949                           ;psect for function _menu_Init
 14950  2E02                     _menu_Init:	
 14951                           
 14952                           ;menu_task.c: 38: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 14953                           
 14954                           ;incstack = 0
 14955                           ; Regs used in _menu_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14956  2E02  0020               	movlb	0	; select bank0
 14957  2E03  083A               	movf	menu_Init@taskData+1,w
 14958  2E04  00BC               	movwf	menu_Init@data+1
 14959  2E05  0839               	movf	menu_Init@taskData,w
 14960  2E06  00BB               	movwf	menu_Init@data
 14961                           
 14962                           ;menu_task.c: 41: nullifyBadge_userLedsRegister(data->badge);
 14963  2E07  083B               	movf	menu_Init@data,w
 14964  2E08  0086               	movwf	6
 14965  2E09  083C               	movf	menu_Init@data+1,w
 14966  2E0A  0087               	movwf	7
 14967  2E0B  0801               	movf	1,w
 14968  2E0C  31B3  2326  31AE   	fcall	_nullifyBadge_userLedsRegister
 14969                           
 14970                           ;menu_task.c: 42: nullifyBadge_userLedsClr(data->badge);
 14971  2E0F  0020               	movlb	0	; select bank0
 14972  2E10  083B               	movf	menu_Init@data,w
 14973  2E11  0086               	movwf	6
 14974  2E12  083C               	movf	menu_Init@data+1,w
 14975  2E13  0087               	movwf	7
 14976  2E14  0801               	movf	1,w
 14977  2E15  31B2  223A  31AE   	fcall	_nullifyBadge_userLedsClr
 14978                           
 14979                           ;menu_task.c: 43: nullifyBadge_segDisplayRegister(data->badge);
 14980  2E18  0020               	movlb	0	; select bank0
 14981  2E19  083B               	movf	menu_Init@data,w
 14982  2E1A  0086               	movwf	6
 14983  2E1B  083C               	movf	menu_Init@data+1,w
 14984  2E1C  0087               	movwf	7
 14985  2E1D  0801               	movf	1,w
 14986  2E1E  31B2  224F  31AE   	fcall	_nullifyBadge_segDisplayRegister
 14987                           
 14988                           ;menu_task.c: 44: nullifyBadge_segDisplayErase(data->badge);
 14989  2E21  0020               	movlb	0	; select bank0
 14990  2E22  083B               	movf	menu_Init@data,w
 14991  2E23  0086               	movwf	6
 14992  2E24  083C               	movf	menu_Init@data+1,w
 14993  2E25  0087               	movwf	7
 14994  2E26  0801               	movf	1,w
 14995  2E27  31B2  2234  31AE   	fcall	_nullifyBadge_segDisplayErase
 14996                           
 14997                           ;menu_task.c: 47: data->delayTickCount = 50;
 14998  2E2A  0020               	movlb	0	; select bank0
 14999  2E2B  083B               	movf	menu_Init@data,w
 15000  2E2C  0086               	movwf	6
 15001  2E2D  083C               	movf	menu_Init@data+1,w
 15002  2E2E  0087               	movwf	7
 15003  2E2F  3142               	addfsr 1,2
 15004  2E30  3032               	movlw	50
 15005  2E31  3FC0               	movwi [0]fsr1
 15006  2E32  3000               	movlw	0
 15007  2E33  3FC1               	movwi [1]fsr1
 15008                           
 15009                           ;menu_task.c: 48: data->holdCountA = 0;
 15010  2E34  083B               	movf	menu_Init@data,w
 15011  2E35  0086               	movwf	6
 15012  2E36  083C               	movf	menu_Init@data+1,w
 15013  2E37  0087               	movwf	7
 15014  2E38  3144               	addfsr 1,4
 15015  2E39  3000               	movlw	0
 15016  2E3A  3FC0               	movwi [0]fsr1
 15017  2E3B  3FC1               	movwi [1]fsr1
 15018                           
 15019                           ;menu_task.c: 49: data->holdCountB = 0;
 15020  2E3C  083B               	movf	menu_Init@data,w
 15021  2E3D  0086               	movwf	6
 15022  2E3E  083C               	movf	menu_Init@data+1,w
 15023  2E3F  0087               	movwf	7
 15024  2E40  3146               	addfsr 1,6
 15025  2E41  3000               	movlw	0
 15026  2E42  3FC0               	movwi [0]fsr1
 15027  2E43  3FC1               	movwi [1]fsr1
 15028                           
 15029                           ;menu_task.c: 50: data->holdCountX = 0;
 15030  2E44  083B               	movf	menu_Init@data,w
 15031  2E45  0086               	movwf	6
 15032  2E46  083C               	movf	menu_Init@data+1,w
 15033  2E47  0087               	movwf	7
 15034  2E48  3148               	addfsr 1,8
 15035  2E49  3000               	movlw	0
 15036  2E4A  3FC0               	movwi [0]fsr1
 15037  2E4B  3FC1               	movwi [1]fsr1
 15038                           
 15039                           ;menu_task.c: 51: data->holdCountY = 0;
 15040  2E4C  083B               	movf	menu_Init@data,w
 15041  2E4D  0086               	movwf	6
 15042  2E4E  083C               	movf	menu_Init@data+1,w
 15043  2E4F  0087               	movwf	7
 15044  2E50  314A               	addfsr 1,10
 15045  2E51  3000               	movlw	0
 15046  2E52  3FC0               	movwi [0]fsr1
 15047  2E53  3FC1               	movwi [1]fsr1
 15048                           
 15049                           ;menu_task.c: 52: data->noholdCount = 0;
 15050  2E54  083B               	movf	menu_Init@data,w
 15051  2E55  0086               	movwf	6
 15052  2E56  083C               	movf	menu_Init@data+1,w
 15053  2E57  0087               	movwf	7
 15054  2E58  314C               	addfsr 1,12
 15055  2E59  3000               	movlw	0
 15056  2E5A  3FC0               	movwi [0]fsr1
 15057  2E5B  3FC1               	movwi [1]fsr1
 15058                           
 15059                           ;menu_task.c: 54: menu_option_idx = 0;
 15060  2E5C  0021               	movlb	1	; select bank1
 15061  2E5D  01B6               	clrf	_menu_option_idx^(0+128)
 15062  2E5E  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 15063                           
 15064                           ;menu_task.c: 56: menu_option_size = sizeof(menu_option)/sizeof(menu_option[0]);
 15065  2E5F  3005               	movlw	5
 15066  2E60  00B4               	movwf	_menu_option_size^(0+128)
 15067  2E61  3000               	movlw	0
 15068  2E62  00B5               	movwf	(_menu_option_size^(0+128)+1)
 15069  2E63  0008               	return
 15070  2E64                     __end_of_menu_Init:	
 15071                           
 15072                           	psect	text7
 15073  0769                     __ptext7:	
 15074 ;; *************** function _flashy_Init *****************
 15075 ;; Defined at:
 15076 ;;		line 66 in file "flashy_task.c"
 15077 ;; Parameters:    Size  Location     Type
 15078 ;;  taskData        2   25[BANK0 ] PTR void 
 15079 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15080 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15081 ;; Auto vars:     Size  Location     Type
 15082 ;;  data            2   27[BANK0 ] PTR struct t_flashy_task
 15083 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15084 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15085 ;; Return value:  Size  Location     Type
 15086 ;;                  1    wreg      void 
 15087 ;; Registers used:
 15088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15089 ;; Tracked objects:
 15090 ;;		On entry : 0/0
 15091 ;;		On exit  : 0/0
 15092 ;;		Unchanged: 0/0
 15093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15094 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15095 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15097 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15098 ;;Total ram usage:        4 bytes
 15099 ;; Hardware stack levels used:    1
 15100 ;; Hardware stack levels required when called:   10
 15101 ;; This function calls:
 15102 ;;		_nullifyBadge_segDisplayErase
 15103 ;;		_nullifyBadge_segDisplayRegister
 15104 ;;		_nullifyBadge_userLedsClr
 15105 ;;		_nullifyBadge_userLedsRegister
 15106 ;; This function is called by:
 15107 ;;		_main
 15108 ;;		_scheduler_TaskAdd
 15109 ;; This function uses a non-reentrant model
 15110 ;;
 15111                           
 15112                           
 15113                           ;psect for function _flashy_Init
 15114  0769                     _flashy_Init:	
 15115                           
 15116                           ;flashy_task.c: 67: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskDa
      +                          ta;
 15117                           
 15118                           ;incstack = 0
 15119                           ; Regs used in _flashy_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15120  0769  0020               	movlb	0	; select bank0
 15121  076A  083A               	movf	flashy_Init@taskData+1,w
 15122  076B  00BC               	movwf	flashy_Init@data+1
 15123  076C  0839               	movf	flashy_Init@taskData,w
 15124  076D  00BB               	movwf	flashy_Init@data
 15125                           
 15126                           ;flashy_task.c: 70: nullifyBadge_userLedsRegister(data->badge);
 15127  076E  083B               	movf	flashy_Init@data,w
 15128  076F  0086               	movwf	6
 15129  0770  083C               	movf	flashy_Init@data+1,w
 15130  0771  0087               	movwf	7
 15131  0772  0801               	movf	1,w
 15132  0773  31B3  2326  3187   	fcall	_nullifyBadge_userLedsRegister
 15133                           
 15134                           ;flashy_task.c: 71: nullifyBadge_userLedsClr(data->badge);
 15135  0776  0020               	movlb	0	; select bank0
 15136  0777  083B               	movf	flashy_Init@data,w
 15137  0778  0086               	movwf	6
 15138  0779  083C               	movf	flashy_Init@data+1,w
 15139  077A  0087               	movwf	7
 15140  077B  0801               	movf	1,w
 15141  077C  31B2  223A  3187   	fcall	_nullifyBadge_userLedsClr
 15142                           
 15143                           ;flashy_task.c: 72: nullifyBadge_segDisplayRegister(data->badge);
 15144  077F  0020               	movlb	0	; select bank0
 15145  0780  083B               	movf	flashy_Init@data,w
 15146  0781  0086               	movwf	6
 15147  0782  083C               	movf	flashy_Init@data+1,w
 15148  0783  0087               	movwf	7
 15149  0784  0801               	movf	1,w
 15150  0785  31B2  224F  3187   	fcall	_nullifyBadge_segDisplayRegister
 15151                           
 15152                           ;flashy_task.c: 73: nullifyBadge_segDisplayErase(data->badge);
 15153  0788  0020               	movlb	0	; select bank0
 15154  0789  083B               	movf	flashy_Init@data,w
 15155  078A  0086               	movwf	6
 15156  078B  083C               	movf	flashy_Init@data+1,w
 15157  078C  0087               	movwf	7
 15158  078D  0801               	movf	1,w
 15159  078E  31B2  2234  3187   	fcall	_nullifyBadge_segDisplayErase
 15160                           
 15161                           ;flashy_task.c: 79: data->delayTickCount = 35;
 15162  0791  0020               	movlb	0	; select bank0
 15163  0792  083B               	movf	flashy_Init@data,w
 15164  0793  0086               	movwf	6
 15165  0794  083C               	movf	flashy_Init@data+1,w
 15166  0795  0087               	movwf	7
 15167  0796  3141               	addfsr 1,1
 15168  0797  3023               	movlw	35
 15169  0798  3FC0               	movwi [0]fsr1
 15170  0799  3000               	movlw	0
 15171  079A  3FC1               	movwi [1]fsr1
 15172                           
 15173                           ;flashy_task.c: 80: data->displayTickCount = 0;
 15174  079B  083B               	movf	flashy_Init@data,w
 15175  079C  0086               	movwf	6
 15176  079D  083C               	movf	flashy_Init@data+1,w
 15177  079E  0087               	movwf	7
 15178  079F  3144               	addfsr 1,4
 15179  07A0  3000               	movlw	0
 15180  07A1  3FC0               	movwi [0]fsr1
 15181  07A2  3FC1               	movwi [1]fsr1
 15182                           
 15183                           ;flashy_task.c: 83: data->holdCountA = 0;
 15184  07A3  083B               	movf	flashy_Init@data,w
 15185  07A4  0086               	movwf	6
 15186  07A5  083C               	movf	flashy_Init@data+1,w
 15187  07A6  0087               	movwf	7
 15188  07A7  314A               	addfsr 1,10
 15189  07A8  3000               	movlw	0
 15190  07A9  3FC0               	movwi [0]fsr1
 15191  07AA  3FC1               	movwi [1]fsr1
 15192                           
 15193                           ;flashy_task.c: 84: data->holdCountB = 0;
 15194  07AB  083B               	movf	flashy_Init@data,w
 15195  07AC  0086               	movwf	6
 15196  07AD  083C               	movf	flashy_Init@data+1,w
 15197  07AE  0087               	movwf	7
 15198  07AF  314C               	addfsr 1,12
 15199  07B0  3000               	movlw	0
 15200  07B1  3FC0               	movwi [0]fsr1
 15201  07B2  3FC1               	movwi [1]fsr1
 15202                           
 15203                           ;flashy_task.c: 85: data->holdCountX = 0;
 15204  07B3  083B               	movf	flashy_Init@data,w
 15205  07B4  0086               	movwf	6
 15206  07B5  083C               	movf	flashy_Init@data+1,w
 15207  07B6  0087               	movwf	7
 15208  07B7  314E               	addfsr 1,14
 15209  07B8  3000               	movlw	0
 15210  07B9  3FC0               	movwi [0]fsr1
 15211  07BA  3FC1               	movwi [1]fsr1
 15212                           
 15213                           ;flashy_task.c: 86: data->holdCountY = 0;
 15214  07BB  083B               	movf	flashy_Init@data,w
 15215  07BC  0086               	movwf	6
 15216  07BD  083C               	movf	flashy_Init@data+1,w
 15217  07BE  0087               	movwf	7
 15218  07BF  3150               	addfsr 1,16
 15219  07C0  3000               	movlw	0
 15220  07C1  3FC0               	movwi [0]fsr1
 15221  07C2  3FC1               	movwi [1]fsr1
 15222                           
 15223                           ;flashy_task.c: 87: data->holdCountXY = 0;
 15224  07C3  083B               	movf	flashy_Init@data,w
 15225  07C4  0086               	movwf	6
 15226  07C5  083C               	movf	flashy_Init@data+1,w
 15227  07C6  0087               	movwf	7
 15228  07C7  3152               	addfsr 1,18
 15229  07C8  3000               	movlw	0
 15230  07C9  3FC0               	movwi [0]fsr1
 15231  07CA  3FC1               	movwi [1]fsr1
 15232                           
 15233                           ;flashy_task.c: 88: data->holdCountAY = 0;
 15234  07CB  083B               	movf	flashy_Init@data,w
 15235  07CC  0086               	movwf	6
 15236  07CD  083C               	movf	flashy_Init@data+1,w
 15237  07CE  0087               	movwf	7
 15238  07CF  3154               	addfsr 1,20
 15239  07D0  3000               	movlw	0
 15240  07D1  3FC0               	movwi [0]fsr1
 15241  07D2  3FC1               	movwi [1]fsr1
 15242                           
 15243                           ;flashy_task.c: 89: data->holdCountAX = 0;
 15244  07D3  083B               	movf	flashy_Init@data,w
 15245  07D4  0086               	movwf	6
 15246  07D5  083C               	movf	flashy_Init@data+1,w
 15247  07D6  0087               	movwf	7
 15248  07D7  3156               	addfsr 1,22
 15249  07D8  3000               	movlw	0
 15250  07D9  3FC0               	movwi [0]fsr1
 15251  07DA  3FC1               	movwi [1]fsr1
 15252                           
 15253                           ;flashy_task.c: 90: data->noholdCount = 0;
 15254  07DB  083B               	movf	flashy_Init@data,w
 15255  07DC  0086               	movwf	6
 15256  07DD  083C               	movf	flashy_Init@data+1,w
 15257  07DE  0087               	movwf	7
 15258  07DF  315C               	addfsr 1,28
 15259  07E0  3000               	movlw	0
 15260  07E1  3FC0               	movwi [0]fsr1
 15261  07E2  3FC1               	movwi [1]fsr1
 15262                           
 15263                           ;flashy_task.c: 92: flashy_leds_idx = 0;
 15264  07E3  0021               	movlb	1	; select bank1
 15265  07E4  01B2               	clrf	_flashy_leds_idx^(0+128)
 15266  07E5  01B3               	clrf	(_flashy_leds_idx+1)^(0+128)
 15267                           
 15268                           ;flashy_task.c: 93: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 15269  07E6  0020               	movlb	0	; select bank0
 15270  07E7  083B               	movf	flashy_Init@data,w
 15271  07E8  0086               	movwf	6
 15272  07E9  083C               	movf	flashy_Init@data+1,w
 15273  07EA  0087               	movwf	7
 15274  07EB  3143               	addfsr 1,3
 15275  07EC  0181               	clrf	1
 15276                           
 15277                           ;flashy_task.c: 94: flashy_option_idx = 0;
 15278  07ED  0021               	movlb	1	; select bank1
 15279  07EE  01A8               	clrf	_flashy_option_idx^(0+128)
 15280  07EF  01A9               	clrf	(_flashy_option_idx+1)^(0+128)
 15281                           
 15282                           ;flashy_task.c: 96: flashy_option_size = sizeof(flashy_option)/sizeof(flashy_option[0]);
 15283  07F0  301D               	movlw	29
 15284  07F1  00A6               	movwf	_flashy_option_size^(0+128)
 15285  07F2  3000               	movlw	0
 15286  07F3  00A7               	movwf	(_flashy_option_size^(0+128)+1)
 15287                           
 15288                           ;flashy_task.c: 98: flashy_sparkle_rate =50;
 15289  07F4  3032               	movlw	50
 15290  07F5  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 15291  07F6  3000               	movlw	0
 15292  07F7  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 15293                           
 15294                           ;flashy_task.c: 99: flashy_scroll_rate=50;
 15295  07F8  3032               	movlw	50
 15296  07F9  00AC               	movwf	_flashy_scroll_rate^(0+128)
 15297  07FA  3000               	movlw	0
 15298  07FB  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 15299                           
 15300                           ;flashy_task.c: 100: flashy_leds_state_track =0;
 15301  07FC  01B0               	clrf	_flashy_leds_state_track^(0+128)
 15302  07FD  01B1               	clrf	(_flashy_leds_state_track+1)^(0+128)
 15303  07FE  0008               	return
 15304  07FF                     __end_of_flashy_Init:	
 15305                           
 15306                           	psect	text8
 15307  2E64                     __ptext8:	
 15308 ;; *************** function _slot_Init *****************
 15309 ;; Defined at:
 15310 ;;		line 29 in file "slot_task.c"
 15311 ;; Parameters:    Size  Location     Type
 15312 ;;  taskData        2   25[BANK0 ] PTR void 
 15313 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15314 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15315 ;; Auto vars:     Size  Location     Type
 15316 ;;  data            2   27[BANK0 ] PTR struct t_slot_taskDa
 15317 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15318 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15319 ;; Return value:  Size  Location     Type
 15320 ;;                  1    wreg      void 
 15321 ;; Registers used:
 15322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15323 ;; Tracked objects:
 15324 ;;		On entry : 0/0
 15325 ;;		On exit  : 0/0
 15326 ;;		Unchanged: 0/0
 15327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15328 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15329 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15331 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15332 ;;Total ram usage:        4 bytes
 15333 ;; Hardware stack levels used:    1
 15334 ;; Hardware stack levels required when called:   10
 15335 ;; This function calls:
 15336 ;;		_nullifyBadge_segDisplayErase
 15337 ;;		_nullifyBadge_segDisplayRegister
 15338 ;;		_nullifyBadge_userLedsClr
 15339 ;;		_nullifyBadge_userLedsRegister
 15340 ;;		_slot_Setup
 15341 ;; This function is called by:
 15342 ;;		_main
 15343 ;;		_scheduler_TaskAdd
 15344 ;; This function uses a non-reentrant model
 15345 ;;
 15346                           
 15347                           
 15348                           ;psect for function _slot_Init
 15349  2E64                     _slot_Init:	
 15350                           
 15351                           ;slot_task.c: 30: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 15352                           
 15353                           ;incstack = 0
 15354                           ; Regs used in _slot_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15355  2E64  0020               	movlb	0	; select bank0
 15356  2E65  083A               	movf	slot_Init@taskData+1,w
 15357  2E66  00BC               	movwf	slot_Init@data+1
 15358  2E67  0839               	movf	slot_Init@taskData,w
 15359  2E68  00BB               	movwf	slot_Init@data
 15360                           
 15361                           ;slot_task.c: 33: nullifyBadge_userLedsRegister(data->badge);
 15362  2E69  083B               	movf	slot_Init@data,w
 15363  2E6A  0086               	movwf	6
 15364  2E6B  083C               	movf	slot_Init@data+1,w
 15365  2E6C  0087               	movwf	7
 15366  2E6D  0801               	movf	1,w
 15367  2E6E  31B3  2326  31AE   	fcall	_nullifyBadge_userLedsRegister
 15368                           
 15369                           ;slot_task.c: 34: nullifyBadge_userLedsClr(data->badge);
 15370  2E71  0020               	movlb	0	; select bank0
 15371  2E72  083B               	movf	slot_Init@data,w
 15372  2E73  0086               	movwf	6
 15373  2E74  083C               	movf	slot_Init@data+1,w
 15374  2E75  0087               	movwf	7
 15375  2E76  0801               	movf	1,w
 15376  2E77  31B2  223A  31AE   	fcall	_nullifyBadge_userLedsClr
 15377                           
 15378                           ;slot_task.c: 35: nullifyBadge_segDisplayRegister(data->badge);
 15379  2E7A  0020               	movlb	0	; select bank0
 15380  2E7B  083B               	movf	slot_Init@data,w
 15381  2E7C  0086               	movwf	6
 15382  2E7D  083C               	movf	slot_Init@data+1,w
 15383  2E7E  0087               	movwf	7
 15384  2E7F  0801               	movf	1,w
 15385  2E80  31B2  224F  31AE   	fcall	_nullifyBadge_segDisplayRegister
 15386                           
 15387                           ;slot_task.c: 36: nullifyBadge_segDisplayErase(data->badge);
 15388  2E83  0020               	movlb	0	; select bank0
 15389  2E84  083B               	movf	slot_Init@data,w
 15390  2E85  0086               	movwf	6
 15391  2E86  083C               	movf	slot_Init@data+1,w
 15392  2E87  0087               	movwf	7
 15393  2E88  0801               	movf	1,w
 15394  2E89  31B2  2234  31AE   	fcall	_nullifyBadge_segDisplayErase
 15395                           
 15396                           ;slot_task.c: 39: data->displayTickCount = 0;
 15397  2E8C  0020               	movlb	0	; select bank0
 15398  2E8D  083B               	movf	slot_Init@data,w
 15399  2E8E  0086               	movwf	6
 15400  2E8F  083C               	movf	slot_Init@data+1,w
 15401  2E90  0087               	movwf	7
 15402  2E91  3143               	addfsr 1,3
 15403  2E92  3000               	movlw	0
 15404  2E93  3FC0               	movwi [0]fsr1
 15405  2E94  3FC1               	movwi [1]fsr1
 15406                           
 15407                           ;slot_task.c: 40: data->holdCountA = 0;
 15408  2E95  083B               	movf	slot_Init@data,w
 15409  2E96  0086               	movwf	6
 15410  2E97  083C               	movf	slot_Init@data+1,w
 15411  2E98  0087               	movwf	7
 15412  2E99  315F               	addfsr 1,31
 15413  2E9A  3000               	movlw	0
 15414  2E9B  3FC0               	movwi [0]fsr1
 15415  2E9C  3FC1               	movwi [1]fsr1
 15416                           
 15417                           ;slot_task.c: 41: data->holdCountB = 0;
 15418  2E9D  083B               	movf	slot_Init@data,w
 15419  2E9E  3E21               	addlw	33
 15420  2E9F  0086               	movwf	6
 15421  2EA0  3000               	movlw	0
 15422  2EA1  3D3C               	addwfc	slot_Init@data+1,w
 15423  2EA2  0087               	movwf	7
 15424  2EA3  3000               	movlw	0
 15425  2EA4  3FC0               	movwi [0]fsr1
 15426  2EA5  3FC1               	movwi [1]fsr1
 15427                           
 15428                           ;slot_task.c: 42: data->holdCountX = 0;
 15429  2EA6  083B               	movf	slot_Init@data,w
 15430  2EA7  3E23               	addlw	35
 15431  2EA8  0086               	movwf	6
 15432  2EA9  3000               	movlw	0
 15433  2EAA  3D3C               	addwfc	slot_Init@data+1,w
 15434  2EAB  0087               	movwf	7
 15435  2EAC  3000               	movlw	0
 15436  2EAD  3FC0               	movwi [0]fsr1
 15437  2EAE  3FC1               	movwi [1]fsr1
 15438                           
 15439                           ;slot_task.c: 43: data->holdCountY = 0;
 15440  2EAF  083B               	movf	slot_Init@data,w
 15441  2EB0  3E25               	addlw	37
 15442  2EB1  0086               	movwf	6
 15443  2EB2  3000               	movlw	0
 15444  2EB3  3D3C               	addwfc	slot_Init@data+1,w
 15445  2EB4  0087               	movwf	7
 15446  2EB5  3000               	movlw	0
 15447  2EB6  3FC0               	movwi [0]fsr1
 15448  2EB7  3FC1               	movwi [1]fsr1
 15449                           
 15450                           ;slot_task.c: 44: data->noholdCount = 0;
 15451  2EB8  083B               	movf	slot_Init@data,w
 15452  2EB9  3E27               	addlw	39
 15453  2EBA  0086               	movwf	6
 15454  2EBB  3000               	movlw	0
 15455  2EBC  3D3C               	addwfc	slot_Init@data+1,w
 15456  2EBD  0087               	movwf	7
 15457  2EBE  3000               	movlw	0
 15458  2EBF  3FC0               	movwi [0]fsr1
 15459  2EC0  3FC1               	movwi [1]fsr1
 15460                           
 15461                           ;slot_task.c: 45: slot_Setup(data);
 15462  2EC1  083C               	movf	slot_Init@data+1,w
 15463  2EC2  00B0               	movwf	slot_Setup@taskData+1
 15464  2EC3  083B               	movf	slot_Init@data,w
 15465  2EC4  00AF               	movwf	slot_Setup@taskData
 15466  2EC5  31AC  2447         	fcall	_slot_Setup
 15467  2EC7  0008               	return
 15468  2EC8                     __end_of_slot_Init:	
 15469                           
 15470                           	psect	text9
 15471  3326                     __ptext9:	
 15472 ;; *************** function _nullifyBadge_userLedsRegister *****************
 15473 ;; Defined at:
 15474 ;;		line 133 in file "nullifyBadge.c"
 15475 ;; Parameters:    Size  Location     Type
 15476 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 15477 ;;		 -> badge_inst(18), 
 15478 ;; Auto vars:     Size  Location     Type
 15479 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 15480 ;;		 -> badge_inst(18), 
 15481 ;; Return value:  Size  Location     Type
 15482 ;;                  1    wreg      char 
 15483 ;; Registers used:
 15484 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15485 ;; Tracked objects:
 15486 ;;		On entry : 0/0
 15487 ;;		On exit  : 0/0
 15488 ;;		Unchanged: 0/0
 15489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15491 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15493 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15494 ;;Total ram usage:        1 bytes
 15495 ;; Hardware stack levels used:    1
 15496 ;; Hardware stack levels required when called:    4
 15497 ;; This function calls:
 15498 ;;		Nothing
 15499 ;; This function is called by:
 15500 ;;		_menu_Init
 15501 ;;		_flashy_Init
 15502 ;;		_locked_Init
 15503 ;;		_secret_Init
 15504 ;;		_slot_Init
 15505 ;;		_matrix_Init
 15506 ;; This function uses a non-reentrant model
 15507 ;;
 15508                           
 15509                           
 15510                           ;psect for function _nullifyBadge_userLedsRegister
 15511  3326                     _nullifyBadge_userLedsRegister:	
 15512                           
 15513                           ;incstack = 0
 15514                           ; Regs used in _nullifyBadge_userLedsRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 15515                           ;nullifyBadge_userLedsRegister@badge stored from wreg
 15516  3326  00F1               	movwf	nullifyBadge_userLedsRegister@badge
 15517                           
 15518                           ;nullifyBadge.c: 134: if (badge->registeredHw & HW_USER_LEDS) {
 15519  3327  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 15520  3328  3E11               	addlw	17
 15521  3329  0086               	movwf	6
 15522  332A  3001               	movlw	1	; select bank2/3
 15523  332B  0087               	movwf	7
 15524  332C  1801               	btfsc	1,0
 15525  332D  0008               	return
 15526                           
 15527                           ;nullifyBadge.c: 137: else {
 15528                           ;nullifyBadge.c: 138: badge->registeredHw |= (1 << HW_USER_LEDS);
 15529                           
 15530                           ;nullifyBadge.c: 136: }
 15531                           
 15532                           ;nullifyBadge.c: 135: return -1;
 15533                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 15534  332E  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 15535  332F  3E11               	addlw	17
 15536  3330  0086               	movwf	6
 15537  3331  3001               	movlw	1	; select bank2/3
 15538  3332  0087               	movwf	7
 15539  3333  1481               	bsf	1,1
 15540                           
 15541                           ;nullifyBadge.c: 139: return 0;
 15542                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 15543  3334  0008               	return
 15544  3335                     __end_of_nullifyBadge_userLedsRegister:	
 15545                           
 15546                           	psect	text10
 15547  324F                     __ptext10:	
 15548 ;; *************** function _nullifyBadge_segDisplayRegister *****************
 15549 ;; Defined at:
 15550 ;;		line 68 in file "nullifyBadge.c"
 15551 ;; Parameters:    Size  Location     Type
 15552 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 15553 ;;		 -> badge_inst(18), 
 15554 ;; Auto vars:     Size  Location     Type
 15555 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 15556 ;;		 -> badge_inst(18), 
 15557 ;; Return value:  Size  Location     Type
 15558 ;;                  1    wreg      char 
 15559 ;; Registers used:
 15560 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15561 ;; Tracked objects:
 15562 ;;		On entry : 0/0
 15563 ;;		On exit  : 0/0
 15564 ;;		Unchanged: 0/0
 15565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15567 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15569 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15570 ;;Total ram usage:        1 bytes
 15571 ;; Hardware stack levels used:    1
 15572 ;; Hardware stack levels required when called:    4
 15573 ;; This function calls:
 15574 ;;		Nothing
 15575 ;; This function is called by:
 15576 ;;		_menu_Init
 15577 ;;		_flashy_Init
 15578 ;;		_locked_Init
 15579 ;;		_secret_Init
 15580 ;;		_slot_Init
 15581 ;;		_matrix_Init
 15582 ;;		_fadeDisplay_Init
 15583 ;; This function uses a non-reentrant model
 15584 ;;
 15585                           
 15586                           
 15587                           ;psect for function _nullifyBadge_segDisplayRegister
 15588  324F                     _nullifyBadge_segDisplayRegister:	
 15589                           
 15590                           ;incstack = 0
 15591                           ; Regs used in _nullifyBadge_segDisplayRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 15592                           ;nullifyBadge_segDisplayRegister@badge stored from wreg
 15593  324F  00F1               	movwf	nullifyBadge_segDisplayRegister@badge
 15594                           
 15595                           ;nullifyBadge.c: 72: else {
 15596                           ;nullifyBadge.c: 73: badge->registeredHw |= (1 << HW_SEG_DISPLAY);
 15597                           
 15598                           ;nullifyBadge.c: 71: }
 15599                           
 15600                           ;nullifyBadge.c: 70: return -1;
 15601                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 15602                           
 15603                           ;nullifyBadge.c: 69: if (badge->registeredHw & HW_SEG_DISPLAY) {
 15604  3250  0871               	movf	nullifyBadge_segDisplayRegister@badge,w
 15605  3251  3E11               	addlw	17
 15606  3252  0086               	movwf	6
 15607  3253  3001               	movlw	1	; select bank2/3
 15608  3254  0087               	movwf	7
 15609  3255  1401               	bsf	1,0
 15610                           
 15611                           ;nullifyBadge.c: 74: return 0;
 15612                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 15613  3256  0008               	return
 15614  3257                     __end_of_nullifyBadge_segDisplayRegister:	
 15615                           
 15616                           	psect	text11
 15617  3482                     __ptext11:	
 15618 ;; *************** function _scheduler_Init *****************
 15619 ;; Defined at:
 15620 ;;		line 27 in file "cooperative_scheduler.c"
 15621 ;; Parameters:    Size  Location     Type
 15622 ;;  scheduler       1    wreg     PTR struct t_scheduler
 15623 ;;		 -> schedulerInst(18), 
 15624 ;; Auto vars:     Size  Location     Type
 15625 ;;  scheduler       1    2[COMMON] PTR struct t_scheduler
 15626 ;;		 -> schedulerInst(18), 
 15627 ;;  k               1    3[COMMON] unsigned char 
 15628 ;; Return value:  Size  Location     Type
 15629 ;;                  1    wreg      void 
 15630 ;; Registers used:
 15631 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15632 ;; Tracked objects:
 15633 ;;		On entry : 0/0
 15634 ;;		On exit  : 0/0
 15635 ;;		Unchanged: 0/0
 15636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15638 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15639 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15640 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15641 ;;Total ram usage:        3 bytes
 15642 ;; Hardware stack levels used:    1
 15643 ;; Hardware stack levels required when called:    4
 15644 ;; This function calls:
 15645 ;;		Nothing
 15646 ;; This function is called by:
 15647 ;;		_main
 15648 ;; This function uses a non-reentrant model
 15649 ;;
 15650                           
 15651                           
 15652                           ;psect for function _scheduler_Init
 15653  3482                     _scheduler_Init:	
 15654                           
 15655                           ;incstack = 0
 15656                           ; Regs used in _scheduler_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 15657                           ;scheduler_Init@scheduler stored from wreg
 15658  3482  00F2               	movwf	scheduler_Init@scheduler
 15659                           
 15660                           ;cooperative_scheduler.c: 28: scheduler->taskEntryVector = 0x0;
 15661  3483  0872               	movf	scheduler_Init@scheduler,w
 15662  3484  3E10               	addlw	16
 15663  3485  0086               	movwf	6
 15664  3486  3001               	movlw	1	; select bank2/3
 15665  3487  0087               	movwf	7
 15666  3488  3000               	movlw	0
 15667  3489  3FC0               	movwi [0]fsr1
 15668  348A  3FC1               	movwi [1]fsr1
 15669                           
 15670                           ;cooperative_scheduler.c: 29: u8 k;
 15671                           ;cooperative_scheduler.c: 31: for (k = 0; k < 16; k++) {
 15672  348B  01F3               	clrf	scheduler_Init@k
 15673  348C                     L1:	
 15674  348C  3010               	movlw	16
 15675  348D  0273               	subwf	scheduler_Init@k,w
 15676  348E  1803               	btfsc	3,0
 15677  348F  0008               	return
 15678                           
 15679                           ;cooperative_scheduler.c: 32: scheduler->tasks[k] = (0);
 15680  3490  0873               	movf	scheduler_Init@k,w
 15681  3491  0772               	addwf	scheduler_Init@scheduler,w
 15682  3492  00F1               	movwf	??_scheduler_Init
 15683  3493  0871               	movf	??_scheduler_Init,w
 15684  3494  0086               	movwf	6
 15685  3495  3001               	movlw	1	; select bank2/3
 15686  3496  0087               	movwf	7
 15687  3497  0181               	clrf	1
 15688  3498  3001               	movlw	1
 15689  3499  00F1               	movwf	??_scheduler_Init
 15690  349A  0871               	movf	??_scheduler_Init,w
 15691  349B  07F3               	addwf	scheduler_Init@k,f
 15692  349C  2C8C               	goto	L1
 15693  349D                     __end_of_scheduler_Init:	
 15694                           
 15695                           	psect	text12
 15696  23C3                     __ptext12:	
 15697 ;; *************** function _schedulerExecute *****************
 15698 ;; Defined at:
 15699 ;;		line 77 in file "cooperative_scheduler.c"
 15700 ;; Parameters:    Size  Location     Type
 15701 ;;  scheduler       1    wreg     PTR struct t_scheduler
 15702 ;;		 -> schedulerInst(18), 
 15703 ;; Auto vars:     Size  Location     Type
 15704 ;;  scheduler       1    6[BANK1 ] PTR struct t_scheduler
 15705 ;;		 -> schedulerInst(18), 
 15706 ;;  tickDelta       2    4[BANK1 ] unsigned int 
 15707 ;;  taskLastSyst    2    2[BANK1 ] unsigned int 
 15708 ;;  currentSyste    2    0[BANK1 ] unsigned int 
 15709 ;;  k               1    7[BANK1 ] unsigned char 
 15710 ;; Return value:  Size  Location     Type
 15711 ;;                  1    wreg      void 
 15712 ;; Registers used:
 15713 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15714 ;; Tracked objects:
 15715 ;;		On entry : 0/0
 15716 ;;		On exit  : 0/0
 15717 ;;		Unchanged: 0/0
 15718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15720 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15721 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15722 ;;      Totals:         0       6       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15723 ;;Total ram usage:       14 bytes
 15724 ;; Hardware stack levels used:    1
 15725 ;; Hardware stack levels required when called:   14
 15726 ;; This function calls:
 15727 ;;		_TMR0_Read16bitTimer
 15728 ;;		_scheduler_TaskRun
 15729 ;; This function is called by:
 15730 ;;		_main
 15731 ;; This function uses a non-reentrant model
 15732 ;;
 15733                           
 15734                           
 15735                           ;psect for function _schedulerExecute
 15736  23C3                     _schedulerExecute:	
 15737                           
 15738                           ;incstack = 0
 15739                           ; Regs used in _schedulerExecute: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15740                           ;schedulerExecute@scheduler stored from wreg
 15741  23C3  0021               	movlb	1	; select bank1
 15742  23C4  00DC               	movwf	schedulerExecute@scheduler^(0+128)
 15743                           
 15744                           ;cooperative_scheduler.c: 78: u16 currentSystemTick;
 15745                           ;cooperative_scheduler.c: 79: u16 taskLastSystemTick;
 15746                           ;cooperative_scheduler.c: 80: u16 tickDelta;
 15747                           ;cooperative_scheduler.c: 81: u8 k;
 15748                           ;cooperative_scheduler.c: 83: for (k = 0; k < 16; k++) {
 15749  23C5  01DD               	clrf	schedulerExecute@k^(0+128)
 15750  23C6                     L2:	
 15751  23C6  3010               	movlw	16
 15752  23C7  025D               	subwf	schedulerExecute@k^(0+128),w
 15753  23C8  1803               	btfsc	3,0
 15754  23C9  0008               	return
 15755                           
 15756                           ;cooperative_scheduler.c: 86: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 15757  23CA  085C               	movf	schedulerExecute@scheduler^(0+128),w
 15758  23CB  3E10               	addlw	16
 15759  23CC  0086               	movwf	6
 15760  23CD  3001               	movlw	1	; select bank2/3
 15761  23CE  0087               	movwf	7
 15762  23CF  3F40               	moviw [0]fsr1
 15763  23D0  0020               	movlb	0	; select bank0
 15764  23D1  00E8               	movwf	??_schedulerExecute
 15765  23D2  3F41               	moviw [1]fsr1
 15766  23D3  00E9               	movwf	??_schedulerExecute+1
 15767  23D4  3001               	movlw	1
 15768  23D5  00EA               	movwf	??_schedulerExecute+2
 15769  23D6  3000               	movlw	0
 15770  23D7  00EB               	movwf	??_schedulerExecute+3
 15771  23D8  0021               	movlb	1	; select bank1
 15772  23D9  0A5D               	incf	schedulerExecute@k^(0+128),w
 15773  23DA  0020               	movlb	0	; select bank0
 15774  23DB  2BDE               	goto	u6544
 15775  23DC                     u6545:	
 15776  23DC  35EA               	lslf	??_schedulerExecute+2,f
 15777  23DD  0DEB               	rlf	??_schedulerExecute+3,f
 15778  23DE                     u6544:	
 15779  23DE  0B89               	decfsz	9,f
 15780  23DF  2BDC               	goto	u6545
 15781  23E0  0868               	movf	??_schedulerExecute,w
 15782  23E1  056A               	andwf	??_schedulerExecute+2,w
 15783  23E2  00EC               	movwf	??_schedulerExecute+4
 15784  23E3  0869               	movf	??_schedulerExecute+1,w
 15785  23E4  056B               	andwf	??_schedulerExecute+3,w
 15786  23E5  00ED               	movwf	??_schedulerExecute+5
 15787  23E6  086C               	movf	??_schedulerExecute+4,w
 15788  23E7  046D               	iorwf	??_schedulerExecute+5,w
 15789  23E8  1903               	btfsc	3,2
 15790  23E9  2C40               	goto	l10489
 15791                           
 15792                           ;cooperative_scheduler.c: 88: }
 15793                           ;cooperative_scheduler.c: 90: currentSystemTick = TMR0_Read16bitTimer();
 15794                           
 15795                           ;cooperative_scheduler.c: 87: continue;
 15796  23EA  31B4  249D  31A3   	fcall	_TMR0_Read16bitTimer
 15797  23ED  0872               	movf	?_TMR0_Read16bitTimer+1,w
 15798  23EE  0021               	movlb	1	; select bank1
 15799  23EF  00D7               	movwf	(schedulerExecute@currentSystemTick+1)^(0+128)
 15800  23F0  0871               	movf	?_TMR0_Read16bitTimer,w
 15801  23F1  00D6               	movwf	schedulerExecute@currentSystemTick^(0+128)
 15802                           
 15803                           ;cooperative_scheduler.c: 91: taskLastSystemTick = scheduler->tasks[k]->systemTickLastEx
      +                          ecuted;
 15804  23F2  085D               	movf	schedulerExecute@k^(0+128),w
 15805  23F3  075C               	addwf	schedulerExecute@scheduler^(0+128),w
 15806  23F4  0020               	movlb	0	; select bank0
 15807  23F5  00E8               	movwf	??_schedulerExecute
 15808  23F6  0868               	movf	??_schedulerExecute,w
 15809  23F7  0086               	movwf	6
 15810  23F8  3001               	movlw	1	; select bank2/3
 15811  23F9  0087               	movwf	7
 15812  23FA  0801               	movf	1,w
 15813  23FB  0086               	movwf	6
 15814  23FC  3001               	movlw	1	; select bank2/3
 15815  23FD  0087               	movwf	7
 15816  23FE  3F40               	moviw [0]fsr1
 15817  23FF  0021               	movlb	1	; select bank1
 15818  2400  00D8               	movwf	schedulerExecute@taskLastSystemTick^(0+128)
 15819  2401  3F41               	moviw [1]fsr1
 15820  2402  00D9               	movwf	(schedulerExecute@taskLastSystemTick+1)^(0+128)
 15821                           
 15822                           ;cooperative_scheduler.c: 99: tickDelta = currentSystemTick - taskLastSystemTick;
 15823  2403  0958               	comf	schedulerExecute@taskLastSystemTick^(0+128),w
 15824  2404  0020               	movlb	0	; select bank0
 15825  2405  00E8               	movwf	??_schedulerExecute
 15826  2406  0021               	movlb	1	; select bank1
 15827  2407  0959               	comf	(schedulerExecute@taskLastSystemTick+1)^(0+128),w
 15828  2408  0020               	movlb	0	; select bank0
 15829  2409  00E9               	movwf	??_schedulerExecute+1
 15830  240A  0AE8               	incf	??_schedulerExecute,f
 15831  240B  1903               	skipnz
 15832  240C  0AE9               	incf	??_schedulerExecute+1,f
 15833  240D  0021               	movlb	1	; select bank1
 15834  240E  0856               	movf	schedulerExecute@currentSystemTick^(0+128),w
 15835  240F  0020               	movlb	0	; select bank0
 15836  2410  0768               	addwf	??_schedulerExecute,w
 15837  2411  0021               	movlb	1	; select bank1
 15838  2412  00DA               	movwf	schedulerExecute@tickDelta^(0+128)
 15839  2413  0857               	movf	(schedulerExecute@currentSystemTick+1)^(0+128),w
 15840  2414  0020               	movlb	0	; select bank0
 15841  2415  3D69               	addwfc	??_schedulerExecute+1,w
 15842  2416  0021               	movlb	1	; select bank1
 15843  2417  00DB               	movwf	(schedulerExecute@tickDelta+1)^(0+128)
 15844                           
 15845                           ;cooperative_scheduler.c: 103: if (tickDelta >= scheduler->tasks[k]->taskInterval) {
 15846  2418  085D               	movf	schedulerExecute@k^(0+128),w
 15847  2419  075C               	addwf	schedulerExecute@scheduler^(0+128),w
 15848  241A  0020               	movlb	0	; select bank0
 15849  241B  00E8               	movwf	??_schedulerExecute
 15850  241C  0868               	movf	??_schedulerExecute,w
 15851  241D  0086               	movwf	6
 15852  241E  3001               	movlw	1	; select bank2/3
 15853  241F  0087               	movwf	7
 15854  2420  0801               	movf	1,w
 15855  2421  3E0A               	addlw	10
 15856  2422  0086               	movwf	6
 15857  2423  3001               	movlw	1	; select bank2/3
 15858  2424  0087               	movwf	7
 15859  2425  3F40               	moviw [0]fsr1
 15860  2426  00E9               	movwf	??_schedulerExecute+1
 15861  2427  3F41               	moviw [1]fsr1
 15862  2428  00EA               	movwf	??_schedulerExecute+2
 15863  2429  086A               	movf	??_schedulerExecute+2,w
 15864  242A  0021               	movlb	1	; select bank1
 15865  242B  025B               	subwf	(schedulerExecute@tickDelta+1)^(0+128),w
 15866  242C  1D03               	skipz
 15867  242D  2C32               	goto	u6565
 15868  242E  0020               	movlb	0	; select bank0
 15869  242F  0869               	movf	??_schedulerExecute+1,w
 15870  2430  0021               	movlb	1	; select bank1
 15871  2431  025A               	subwf	schedulerExecute@tickDelta^(0+128),w
 15872  2432                     u6565:	
 15873  2432  1C03               	skipc
 15874  2433  2C40               	goto	l10489
 15875                           
 15876                           ;cooperative_scheduler.c: 104: scheduler_TaskRun(scheduler->tasks[k]);
 15877  2434  085D               	movf	schedulerExecute@k^(0+128),w
 15878  2435  075C               	addwf	schedulerExecute@scheduler^(0+128),w
 15879  2436  0020               	movlb	0	; select bank0
 15880  2437  00E8               	movwf	??_schedulerExecute
 15881  2438  0868               	movf	??_schedulerExecute,w
 15882  2439  0086               	movwf	6
 15883  243A  3001               	movlw	1	; select bank2/3
 15884  243B  0087               	movwf	7
 15885  243C  0801               	movf	1,w
 15886  243D  31A8  2085  31A3   	fcall	_scheduler_TaskRun
 15887  2440                     l10489:	
 15888  2440  3001               	movlw	1
 15889  2441  0020               	movlb	0	; select bank0
 15890  2442  00E8               	movwf	??_schedulerExecute
 15891  2443  0868               	movf	??_schedulerExecute,w
 15892  2444  0021               	movlb	1	; select bank1
 15893  2445  07DD               	addwf	schedulerExecute@k^(0+128),f
 15894  2446  2BC6               	goto	L2
 15895  2447                     __end_of_schedulerExecute:	
 15896                           
 15897                           	psect	text13
 15898  2885                     __ptext13:	
 15899 ;; *************** function _scheduler_TaskRun *****************
 15900 ;; Defined at:
 15901 ;;		line 20 in file "cooperative_scheduler.c"
 15902 ;; Parameters:    Size  Location     Type
 15903 ;;  task            1    wreg     PTR struct t_schedulerTa
 15904 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 15905 ;;		 -> menu_task(13), flashy_task(13), NULL(0), 
 15906 ;; Auto vars:     Size  Location     Type
 15907 ;;  task            1   71[BANK0 ] PTR struct t_schedulerTa
 15908 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 15909 ;;		 -> menu_task(13), flashy_task(13), NULL(0), 
 15910 ;; Return value:  Size  Location     Type
 15911 ;;                  1    wreg      void 
 15912 ;; Registers used:
 15913 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15914 ;; Tracked objects:
 15915 ;;		On entry : 0/0
 15916 ;;		On exit  : 0/0
 15917 ;;		Unchanged: 0/0
 15918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15920 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15922 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15923 ;;Total ram usage:        1 bytes
 15924 ;; Hardware stack levels used:    1
 15925 ;; Hardware stack levels required when called:   13
 15926 ;; This function calls:
 15927 ;;		Absolute function
 15928 ;;		_TMR0_Read16bitTimer
 15929 ;;		_flashy_Main
 15930 ;;		_locked_Main
 15931 ;;		_matrix_Main
 15932 ;;		_menu_Main
 15933 ;;		_secret_Main
 15934 ;;		_slot_Main
 15935 ;; This function is called by:
 15936 ;;		_schedulerExecute
 15937 ;; This function uses a non-reentrant model
 15938 ;;
 15939                           
 15940                           
 15941                           ;psect for function _scheduler_TaskRun
 15942  2885                     _scheduler_TaskRun:	
 15943                           
 15944                           ;incstack = 0
 15945                           ; Regs used in _scheduler_TaskRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15946                           ;scheduler_TaskRun@task stored from wreg
 15947  2885  0020               	movlb	0	; select bank0
 15948  2886  00E7               	movwf	scheduler_TaskRun@task
 15949                           
 15950                           ;cooperative_scheduler.c: 21: task->taskExecuteCallback (task->taskData);
 15951  2887  0867               	movf	scheduler_TaskRun@task,w
 15952  2888  3E02               	addlw	2
 15953  2889  0086               	movwf	6
 15954  288A  3001               	movlw	1	; select bank2/3
 15955  288B  0087               	movwf	7
 15956  288C  3F40               	moviw [0]fsr1
 15957  288D  00D2               	movwf	matrix_Main@taskData
 15958  288E  3F41               	moviw [1]fsr1
 15959  288F  00D3               	movwf	matrix_Main@taskData+1
 15960  2890  0867               	movf	scheduler_TaskRun@task,w
 15961  2891  3E08               	addlw	8
 15962  2892  0086               	movwf	6
 15963  2893  3001               	movlw	1	; select bank2/3
 15964  2894  0087               	movwf	7
 15965  2895  3F41               	moviw [1]fsr1
 15966  2896  008A               	movwf	10
 15967  2897  3F40               	moviw [0]fsr1
 15968  2898  000A               	callw
 15969  2899  31A8               	pagesel	$
 15970                           
 15971                           ;cooperative_scheduler.c: 22: task->systemTickLastExecuted = TMR0_Read16bitTimer();
 15972  289A  31B4  249D         	fcall	_TMR0_Read16bitTimer
 15973  289C  0020               	movlb	0	; select bank0
 15974  289D  0867               	movf	scheduler_TaskRun@task,w
 15975  289E  0086               	movwf	6
 15976  289F  3001               	movlw	1	; select bank2/3
 15977  28A0  0087               	movwf	7
 15978  28A1  0871               	movf	?_TMR0_Read16bitTimer,w
 15979  28A2  3FC0               	movwi [0]fsr1
 15980  28A3  0872               	movf	?_TMR0_Read16bitTimer+1,w
 15981  28A4  3FC1               	movwi [1]fsr1
 15982  28A5  0008               	return
 15983  28A6                     __end_of_scheduler_TaskRun:	
 15984                           
 15985                           	psect	text14
 15986  10CB                     __ptext14:	
 15987 ;; *************** function _matrix_Main *****************
 15988 ;; Defined at:
 15989 ;;		line 149 in file "matrix_task.c"
 15990 ;; Parameters:    Size  Location     Type
 15991 ;;  taskData        2   50[BANK0 ] PTR void 
 15992 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15993 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15994 ;; Auto vars:     Size  Location     Type
 15995 ;;  data            2   58[BANK0 ] PTR struct t_matrix_task
 15996 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15997 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15998 ;;  holdvalue       1   57[BANK0 ] unsigned char 
 15999 ;;  buttonPresse    1   56[BANK0 ] unsigned char 
 16000 ;; Return value:  Size  Location     Type
 16001 ;;                  1    wreg      void 
 16002 ;; Registers used:
 16003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16004 ;; Tracked objects:
 16005 ;;		On entry : 0/0
 16006 ;;		On exit  : 0/0
 16007 ;;		Unchanged: 0/0
 16008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16009 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16010 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16011 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16012 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16013 ;;Total ram usage:       10 bytes
 16014 ;; Hardware stack levels used:    1
 16015 ;; Hardware stack levels required when called:   11
 16016 ;; This function calls:
 16017 ;;		_led_Parody
 16018 ;;		_led_curtain
 16019 ;;		_matrix_display_option
 16020 ;;		_matrix_secret_check
 16021 ;;		_nullifyBadge_buttonsGet
 16022 ;; This function is called by:
 16023 ;;		_main
 16024 ;;		_scheduler_TaskRun
 16025 ;; This function uses a non-reentrant model
 16026 ;;
 16027                           
 16028                           
 16029                           ;psect for function _matrix_Main
 16030  10CB                     _matrix_Main:	
 16031                           
 16032                           ;matrix_task.c: 150: struct t_matrix_taskData *data = (struct t_matrix_taskData *) taskD
      +                          ata ;
 16033                           
 16034                           ;incstack = 0
 16035                           ; Regs used in _matrix_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16036  10CB  0020               	movlb	0	; select bank0
 16037  10CC  0853               	movf	matrix_Main@taskData+1,w
 16038  10CD  00DB               	movwf	matrix_Main@data+1
 16039  10CE  0852               	movf	matrix_Main@taskData,w
 16040  10CF  00DA               	movwf	matrix_Main@data
 16041                           
 16042                           ;matrix_task.c: 151: u8 buttonPressed = 0 ;
 16043  10D0  01D8               	clrf	matrix_Main@buttonPressed
 16044                           
 16045                           ;matrix_task.c: 152: u8 holdvalue = 50;
 16046  10D1  3032               	movlw	50
 16047  10D2  00D4               	movwf	??_matrix_Main
 16048  10D3  0854               	movf	??_matrix_Main,w
 16049  10D4  00D9               	movwf	matrix_Main@holdvalue
 16050                           
 16051                           ;matrix_task.c: 154: if ( currentTask != MATRIX_TASK ){
 16052  10D5  3004               	movlw	4
 16053  10D6  0021               	movlb	1	; select bank1
 16054  10D7  063A               	xorwf	_currentTask^(0+128),w
 16055  10D8  043B               	iorwf	(_currentTask+1)^(0+128),w
 16056  10D9  1903               	btfsc	3,2
 16057  10DA  2901               	goto	l9887
 16058                           
 16059                           ;matrix_task.c: 155: data->holdCountA = 1;
 16060  10DB  0020               	movlb	0	; select bank0
 16061  10DC  085A               	movf	matrix_Main@data,w
 16062  10DD  0086               	movwf	6
 16063  10DE  085B               	movf	matrix_Main@data+1,w
 16064  10DF  0087               	movwf	7
 16065  10E0  3149               	addfsr 1,9
 16066  10E1  3001               	movlw	1
 16067  10E2  3FC0               	movwi [0]fsr1
 16068  10E3  3000               	movlw	0
 16069  10E4  3FC1               	movwi [1]fsr1
 16070                           
 16071                           ;matrix_task.c: 156: data->holdCountB = 1;
 16072  10E5  085A               	movf	matrix_Main@data,w
 16073  10E6  0086               	movwf	6
 16074  10E7  085B               	movf	matrix_Main@data+1,w
 16075  10E8  0087               	movwf	7
 16076  10E9  314B               	addfsr 1,11
 16077  10EA  3001               	movlw	1
 16078  10EB  3FC0               	movwi [0]fsr1
 16079  10EC  3000               	movlw	0
 16080  10ED  3FC1               	movwi [1]fsr1
 16081                           
 16082                           ;matrix_task.c: 157: data->holdCountX = 1;
 16083  10EE  085A               	movf	matrix_Main@data,w
 16084  10EF  0086               	movwf	6
 16085  10F0  085B               	movf	matrix_Main@data+1,w
 16086  10F1  0087               	movwf	7
 16087  10F2  314D               	addfsr 1,13
 16088  10F3  3001               	movlw	1
 16089  10F4  3FC0               	movwi [0]fsr1
 16090  10F5  3000               	movlw	0
 16091  10F6  3FC1               	movwi [1]fsr1
 16092                           
 16093                           ;matrix_task.c: 158: data->holdCountY = 1;
 16094  10F7  085A               	movf	matrix_Main@data,w
 16095  10F8  0086               	movwf	6
 16096  10F9  085B               	movf	matrix_Main@data+1,w
 16097  10FA  0087               	movwf	7
 16098  10FB  314F               	addfsr 1,15
 16099  10FC  3001               	movlw	1
 16100  10FD  3FC0               	movwi [0]fsr1
 16101  10FE  3000               	movlw	0
 16102  10FF  3FC1               	movwi [1]fsr1
 16103                           
 16104                           ;matrix_task.c: 159: return;
 16105  1100  0008               	return
 16106  1101                     l9887:	
 16107                           
 16108                           ;matrix_task.c: 160: }
 16109                           ;matrix_task.c: 164: if (data->martix_state == STILL_IN_MATRIX){
 16110  1101  0020               	movlb	0	; select bank0
 16111  1102  085A               	movf	matrix_Main@data,w
 16112  1103  0086               	movwf	6
 16113  1104  085B               	movf	matrix_Main@data+1,w
 16114  1105  0087               	movwf	7
 16115  1106  3141               	addfsr 1,1
 16116  1107  0301               	decf	1,w
 16117  1108  1D03               	btfss	3,2
 16118  1109  2939               	goto	l9899
 16119                           
 16120                           ;matrix_task.c: 165: if(data->delayTickCount == 0){
 16121  110A  085A               	movf	matrix_Main@data,w
 16122  110B  0086               	movwf	6
 16123  110C  085B               	movf	matrix_Main@data+1,w
 16124  110D  0087               	movwf	7
 16125  110E  3143               	addfsr 1,3
 16126  110F  0016               	moviw fsr1++
 16127  1110  0401               	iorwf	1,w
 16128  1111  1D03               	btfss	3,2
 16129  1112  292E               	goto	l9897
 16130                           
 16131                           ;matrix_task.c: 166: led_Parody(matrix_leds_idx);
 16132  1113  0021               	movlb	1	; select bank1
 16133  1114  0821               	movf	(_matrix_leds_idx+1)^(0+128),w
 16134  1115  0020               	movlb	0	; select bank0
 16135  1116  00B1               	movwf	led_Parody@count+1
 16136  1117  0021               	movlb	1	; select bank1
 16137  1118  0820               	movf	_matrix_leds_idx^(0+128),w
 16138  1119  0020               	movlb	0	; select bank0
 16139  111A  00B0               	movwf	led_Parody@count
 16140  111B  31AE  26C8  3190   	fcall	_led_Parody
 16141                           
 16142                           ;matrix_task.c: 167: matrix_leds_idx += 1;
 16143  111E  3001               	movlw	1
 16144  111F  0021               	movlb	1	; select bank1
 16145  1120  07A0               	addwf	_matrix_leds_idx^(0+128),f
 16146  1121  3000               	movlw	0
 16147  1122  3DA1               	addwfc	(_matrix_leds_idx+1)^(0+128),f
 16148                           
 16149                           ;matrix_task.c: 168: data->delayTickCount = 10;
 16150  1123  0020               	movlb	0	; select bank0
 16151  1124  085A               	movf	matrix_Main@data,w
 16152  1125  0086               	movwf	6
 16153  1126  085B               	movf	matrix_Main@data+1,w
 16154  1127  0087               	movwf	7
 16155  1128  3143               	addfsr 1,3
 16156  1129  300A               	movlw	10
 16157  112A  3FC0               	movwi [0]fsr1
 16158  112B  3000               	movlw	0
 16159  112C  3FC1               	movwi [1]fsr1
 16160                           
 16161                           ;matrix_task.c: 169: }
 16162  112D  2939               	goto	l9899
 16163  112E                     l9897:	
 16164                           
 16165                           ;matrix_task.c: 170: else {
 16166                           ;matrix_task.c: 171: data->delayTickCount -= 1;
 16167  112E  085A               	movf	matrix_Main@data,w
 16168  112F  0086               	movwf	6
 16169  1130  085B               	movf	matrix_Main@data+1,w
 16170  1131  0087               	movwf	7
 16171  1132  3143               	addfsr 1,3
 16172  1133  3001               	movlw	1
 16173  1134  0281               	subwf	1,f
 16174  1135  3141               	addfsr 1,1
 16175  1136  3000               	movlw	0
 16176  1137  3B81               	subwfb	1,f
 16177  1138  317F               	addfsr 1,-1
 16178  1139                     l9899:	
 16179                           
 16180                           ;matrix_task.c: 172: }
 16181                           ;matrix_task.c: 173: }
 16182                           ;matrix_task.c: 177: buttonPressed = nullifyBadge_buttonsGet();
 16183  1139  31B6  264B  3190   	fcall	_nullifyBadge_buttonsGet
 16184  113C  0020               	movlb	0	; select bank0
 16185  113D  00D4               	movwf	??_matrix_Main
 16186  113E  0854               	movf	??_matrix_Main,w
 16187  113F  00D8               	movwf	matrix_Main@buttonPressed
 16188                           
 16189                           ;matrix_task.c: 180: switch (buttonPressed) {
 16190  1140  2F93               	goto	l10233
 16191  1141                     l9901:	
 16192                           ;matrix_task.c: 181: case 1:
 16193                           
 16194                           
 16195                           ;matrix_task.c: 183: if (data->holdCountA == holdvalue){
 16196  1141  085A               	movf	matrix_Main@data,w
 16197  1142  0086               	movwf	6
 16198  1143  085B               	movf	matrix_Main@data+1,w
 16199  1144  0087               	movwf	7
 16200  1145  3149               	addfsr 1,9
 16201  1146  3F40               	moviw [0]fsr1
 16202  1147  00D4               	movwf	??_matrix_Main
 16203  1148  3F41               	moviw [1]fsr1
 16204  1149  00D5               	movwf	??_matrix_Main+1
 16205  114A  0859               	movf	matrix_Main@holdvalue,w
 16206  114B  00D6               	movwf	??_matrix_Main+2
 16207  114C  01D7               	clrf	??_matrix_Main+3
 16208  114D  0855               	movf	??_matrix_Main+1,w
 16209  114E  0657               	xorwf	??_matrix_Main+3,w
 16210  114F  1D03               	skipz
 16211  1150  2953               	goto	u6335
 16212  1151  0854               	movf	??_matrix_Main,w
 16213  1152  0656               	xorwf	??_matrix_Main+2,w
 16214  1153                     u6335:	
 16215  1153  1D03               	skipz
 16216  1154  296C               	goto	l9907
 16217                           
 16218                           ;matrix_task.c: 184: matrix_found = matrix_secret_check(data, buttonPressed);
 16219  1155  085B               	movf	matrix_Main@data+1,w
 16220  1156  00F8               	movwf	matrix_secret_check@data+1
 16221  1157  085A               	movf	matrix_Main@data,w
 16222  1158  00F7               	movwf	matrix_secret_check@data
 16223  1159  0858               	movf	matrix_Main@buttonPressed,w
 16224  115A  00D4               	movwf	??_matrix_Main
 16225  115B  0854               	movf	??_matrix_Main,w
 16226  115C  00F9               	movwf	matrix_secret_check@buttonPressed
 16227  115D  31A6  2645  3190   	fcall	_matrix_secret_check
 16228  1160  0020               	movlb	0	; select bank0
 16229  1161  00D5               	movwf	??_matrix_Main+1
 16230  1162  0855               	movf	??_matrix_Main+1,w
 16231  1163  0021               	movlb	1	; select bank1
 16232  1164  00C2               	movwf	_matrix_found^(0+128)
 16233                           
 16234                           ;matrix_task.c: 185: data->display_state = MATRIX_A;
 16235  1165  0020               	movlb	0	; select bank0
 16236  1166  085A               	movf	matrix_Main@data,w
 16237  1167  0086               	movwf	6
 16238  1168  085B               	movf	matrix_Main@data+1,w
 16239  1169  0087               	movwf	7
 16240  116A  3142               	addfsr 1,2
 16241  116B  0181               	clrf	1
 16242  116C                     l9907:	
 16243                           
 16244                           ;matrix_task.c: 186: }
 16245                           ;matrix_task.c: 187: data->holdCountA += 1;
 16246  116C  085A               	movf	matrix_Main@data,w
 16247  116D  0086               	movwf	6
 16248  116E  085B               	movf	matrix_Main@data+1,w
 16249  116F  0087               	movwf	7
 16250  1170  3149               	addfsr 1,9
 16251  1171  3001               	movlw	1
 16252  1172  0781               	addwf	1,f
 16253  1173  3141               	addfsr 1,1
 16254  1174  1803               	skipnc
 16255  1175  0A81               	incf	1,f
 16256                           
 16257                           ;matrix_task.c: 188: data->holdCountB = 0;
 16258  1176  085A               	movf	matrix_Main@data,w
 16259  1177  0086               	movwf	6
 16260  1178  085B               	movf	matrix_Main@data+1,w
 16261  1179  0087               	movwf	7
 16262  117A  314B               	addfsr 1,11
 16263  117B  3000               	movlw	0
 16264  117C  3FC0               	movwi [0]fsr1
 16265  117D  3FC1               	movwi [1]fsr1
 16266                           
 16267                           ;matrix_task.c: 189: data->holdCountX = 0;
 16268  117E  085A               	movf	matrix_Main@data,w
 16269  117F  0086               	movwf	6
 16270  1180  085B               	movf	matrix_Main@data+1,w
 16271  1181  0087               	movwf	7
 16272  1182  314D               	addfsr 1,13
 16273  1183  3000               	movlw	0
 16274  1184  3FC0               	movwi [0]fsr1
 16275  1185  3FC1               	movwi [1]fsr1
 16276                           
 16277                           ;matrix_task.c: 190: data->holdCountY = 0;
 16278  1186  085A               	movf	matrix_Main@data,w
 16279  1187  0086               	movwf	6
 16280  1188  085B               	movf	matrix_Main@data+1,w
 16281  1189  0087               	movwf	7
 16282  118A  314F               	addfsr 1,15
 16283  118B  3000               	movlw	0
 16284  118C  3FC0               	movwi [0]fsr1
 16285  118D  3FC1               	movwi [1]fsr1
 16286                           
 16287                           ;matrix_task.c: 191: data->holdCountXY = 0;
 16288  118E  085A               	movf	matrix_Main@data,w
 16289  118F  0086               	movwf	6
 16290  1190  085B               	movf	matrix_Main@data+1,w
 16291  1191  0087               	movwf	7
 16292  1192  3151               	addfsr 1,17
 16293  1193  3000               	movlw	0
 16294  1194  3FC0               	movwi [0]fsr1
 16295  1195  3FC1               	movwi [1]fsr1
 16296                           
 16297                           ;matrix_task.c: 192: data->holdCountAY = 0;
 16298  1196  085A               	movf	matrix_Main@data,w
 16299  1197  0086               	movwf	6
 16300  1198  085B               	movf	matrix_Main@data+1,w
 16301  1199  0087               	movwf	7
 16302  119A  3153               	addfsr 1,19
 16303  119B  3000               	movlw	0
 16304  119C  3FC0               	movwi [0]fsr1
 16305  119D  3FC1               	movwi [1]fsr1
 16306                           
 16307                           ;matrix_task.c: 193: data->holdCountAX = 0;
 16308  119E  085A               	movf	matrix_Main@data,w
 16309  119F  0086               	movwf	6
 16310  11A0  085B               	movf	matrix_Main@data+1,w
 16311  11A1  0087               	movwf	7
 16312  11A2  3155               	addfsr 1,21
 16313  11A3  3000               	movlw	0
 16314  11A4  3FC0               	movwi [0]fsr1
 16315  11A5  3FC1               	movwi [1]fsr1
 16316                           
 16317                           ;matrix_task.c: 194: data->holdCountBX = 0;
 16318  11A6  085A               	movf	matrix_Main@data,w
 16319  11A7  0086               	movwf	6
 16320  11A8  085B               	movf	matrix_Main@data+1,w
 16321  11A9  0087               	movwf	7
 16322  11AA  3157               	addfsr 1,23
 16323  11AB  3000               	movlw	0
 16324  11AC  3FC0               	movwi [0]fsr1
 16325  11AD  3FC1               	movwi [1]fsr1
 16326                           
 16327                           ;matrix_task.c: 195: data->holdCountBY = 0;
 16328  11AE  085A               	movf	matrix_Main@data,w
 16329  11AF  0086               	movwf	6
 16330  11B0  085B               	movf	matrix_Main@data+1,w
 16331  11B1  0087               	movwf	7
 16332  11B2  3159               	addfsr 1,25
 16333  11B3  3000               	movlw	0
 16334  11B4  3FC0               	movwi [0]fsr1
 16335  11B5  3FC1               	movwi [1]fsr1
 16336                           
 16337                           ;matrix_task.c: 196: data->holdCountBA = 0;
 16338  11B6  085A               	movf	matrix_Main@data,w
 16339  11B7  0086               	movwf	6
 16340  11B8  085B               	movf	matrix_Main@data+1,w
 16341  11B9  0087               	movwf	7
 16342  11BA  315B               	addfsr 1,27
 16343  11BB  3000               	movlw	0
 16344  11BC  3FC0               	movwi [0]fsr1
 16345  11BD  3FC1               	movwi [1]fsr1
 16346                           
 16347                           ;matrix_task.c: 197: data->noholdCount = 0;
 16348  11BE  085A               	movf	matrix_Main@data,w
 16349  11BF  0086               	movwf	6
 16350  11C0  085B               	movf	matrix_Main@data+1,w
 16351  11C1  0087               	movwf	7
 16352  11C2  315D               	addfsr 1,29
 16353  11C3  3000               	movlw	0
 16354  11C4  3FC0               	movwi [0]fsr1
 16355  11C5  3FC1               	movwi [1]fsr1
 16356                           
 16357                           ;matrix_task.c: 198: data->displayTickdown = 300;
 16358  11C6  085A               	movf	matrix_Main@data,w
 16359  11C7  0086               	movwf	6
 16360  11C8  085B               	movf	matrix_Main@data+1,w
 16361  11C9  0087               	movwf	7
 16362  11CA  3147               	addfsr 1,7
 16363  11CB  302C               	movlw	44
 16364  11CC  3FC0               	movwi [0]fsr1
 16365  11CD  3001               	movlw	1
 16366  11CE  3FC1               	movwi [1]fsr1
 16367                           
 16368                           ;matrix_task.c: 199: break;
 16369  11CF  2FB4               	goto	l10235
 16370  11D0                     l9931:	
 16371                           ;matrix_task.c: 200: case 2:
 16372                           
 16373                           
 16374                           ;matrix_task.c: 202: if (data->holdCountB == holdvalue){
 16375  11D0  085A               	movf	matrix_Main@data,w
 16376  11D1  0086               	movwf	6
 16377  11D2  085B               	movf	matrix_Main@data+1,w
 16378  11D3  0087               	movwf	7
 16379  11D4  314B               	addfsr 1,11
 16380  11D5  3F40               	moviw [0]fsr1
 16381  11D6  00D4               	movwf	??_matrix_Main
 16382  11D7  3F41               	moviw [1]fsr1
 16383  11D8  00D5               	movwf	??_matrix_Main+1
 16384  11D9  0859               	movf	matrix_Main@holdvalue,w
 16385  11DA  00D6               	movwf	??_matrix_Main+2
 16386  11DB  01D7               	clrf	??_matrix_Main+3
 16387  11DC  0855               	movf	??_matrix_Main+1,w
 16388  11DD  0657               	xorwf	??_matrix_Main+3,w
 16389  11DE  1D03               	skipz
 16390  11DF  29E2               	goto	u6345
 16391  11E0  0854               	movf	??_matrix_Main,w
 16392  11E1  0656               	xorwf	??_matrix_Main+2,w
 16393  11E2                     u6345:	
 16394  11E2  1D03               	skipz
 16395  11E3  2A01               	goto	l9937
 16396                           
 16397                           ;matrix_task.c: 203: matrix_found = matrix_secret_check(data, buttonPressed);
 16398  11E4  085B               	movf	matrix_Main@data+1,w
 16399  11E5  00F8               	movwf	matrix_secret_check@data+1
 16400  11E6  085A               	movf	matrix_Main@data,w
 16401  11E7  00F7               	movwf	matrix_secret_check@data
 16402  11E8  0858               	movf	matrix_Main@buttonPressed,w
 16403  11E9  00D4               	movwf	??_matrix_Main
 16404  11EA  0854               	movf	??_matrix_Main,w
 16405  11EB  00F9               	movwf	matrix_secret_check@buttonPressed
 16406  11EC  31A6  2645  3190   	fcall	_matrix_secret_check
 16407  11EF  0020               	movlb	0	; select bank0
 16408  11F0  00D5               	movwf	??_matrix_Main+1
 16409  11F1  0855               	movf	??_matrix_Main+1,w
 16410  11F2  0021               	movlb	1	; select bank1
 16411  11F3  00C2               	movwf	_matrix_found^(0+128)
 16412                           
 16413                           ;matrix_task.c: 204: data->display_state = MATRIX_B;
 16414  11F4  0020               	movlb	0	; select bank0
 16415  11F5  085A               	movf	matrix_Main@data,w
 16416  11F6  3E02               	addlw	2
 16417  11F7  00D4               	movwf	??_matrix_Main
 16418  11F8  3000               	movlw	0
 16419  11F9  3D5B               	addwfc	matrix_Main@data+1,w
 16420  11FA  00D5               	movwf	??_matrix_Main+1
 16421  11FB  0854               	movf	??_matrix_Main,w
 16422  11FC  0086               	movwf	6
 16423  11FD  0855               	movf	??_matrix_Main+1,w
 16424  11FE  0087               	movwf	7
 16425  11FF  3002               	movlw	2
 16426  1200  0081               	movwf	1
 16427  1201                     l9937:	
 16428                           
 16429                           ;matrix_task.c: 205: }
 16430                           ;matrix_task.c: 206: data->holdCountA = 0;
 16431  1201  085A               	movf	matrix_Main@data,w
 16432  1202  0086               	movwf	6
 16433  1203  085B               	movf	matrix_Main@data+1,w
 16434  1204  0087               	movwf	7
 16435  1205  3149               	addfsr 1,9
 16436  1206  3000               	movlw	0
 16437  1207  3FC0               	movwi [0]fsr1
 16438  1208  3FC1               	movwi [1]fsr1
 16439                           
 16440                           ;matrix_task.c: 207: data->holdCountB += 1;
 16441  1209  085A               	movf	matrix_Main@data,w
 16442  120A  0086               	movwf	6
 16443  120B  085B               	movf	matrix_Main@data+1,w
 16444  120C  0087               	movwf	7
 16445  120D  314B               	addfsr 1,11
 16446  120E  3001               	movlw	1
 16447  120F  0781               	addwf	1,f
 16448  1210  3141               	addfsr 1,1
 16449  1211  1803               	skipnc
 16450  1212  0A81               	incf	1,f
 16451                           
 16452                           ;matrix_task.c: 208: data->holdCountX = 0;
 16453  1213  085A               	movf	matrix_Main@data,w
 16454  1214  0086               	movwf	6
 16455  1215  085B               	movf	matrix_Main@data+1,w
 16456  1216  0087               	movwf	7
 16457  1217  314D               	addfsr 1,13
 16458  1218  3000               	movlw	0
 16459  1219  3FC0               	movwi [0]fsr1
 16460  121A  3FC1               	movwi [1]fsr1
 16461                           
 16462                           ;matrix_task.c: 209: data->holdCountY = 0;
 16463  121B  085A               	movf	matrix_Main@data,w
 16464  121C  0086               	movwf	6
 16465  121D  085B               	movf	matrix_Main@data+1,w
 16466  121E  0087               	movwf	7
 16467  121F  314F               	addfsr 1,15
 16468  1220  3000               	movlw	0
 16469  1221  3FC0               	movwi [0]fsr1
 16470  1222  3FC1               	movwi [1]fsr1
 16471                           
 16472                           ;matrix_task.c: 210: data->holdCountXY = 0;
 16473  1223  085A               	movf	matrix_Main@data,w
 16474  1224  0086               	movwf	6
 16475  1225  085B               	movf	matrix_Main@data+1,w
 16476  1226  0087               	movwf	7
 16477  1227  3151               	addfsr 1,17
 16478  1228  3000               	movlw	0
 16479  1229  3FC0               	movwi [0]fsr1
 16480  122A  3FC1               	movwi [1]fsr1
 16481                           
 16482                           ;matrix_task.c: 211: data->holdCountAY = 0;
 16483  122B  085A               	movf	matrix_Main@data,w
 16484  122C  0086               	movwf	6
 16485  122D  085B               	movf	matrix_Main@data+1,w
 16486  122E  0087               	movwf	7
 16487  122F  3153               	addfsr 1,19
 16488  1230  3000               	movlw	0
 16489  1231  3FC0               	movwi [0]fsr1
 16490  1232  3FC1               	movwi [1]fsr1
 16491                           
 16492                           ;matrix_task.c: 212: data->holdCountAX = 0;
 16493  1233  085A               	movf	matrix_Main@data,w
 16494  1234  0086               	movwf	6
 16495  1235  085B               	movf	matrix_Main@data+1,w
 16496  1236  0087               	movwf	7
 16497  1237  3155               	addfsr 1,21
 16498  1238  3000               	movlw	0
 16499  1239  3FC0               	movwi [0]fsr1
 16500  123A  3FC1               	movwi [1]fsr1
 16501                           
 16502                           ;matrix_task.c: 213: data->holdCountBX = 0;
 16503  123B  085A               	movf	matrix_Main@data,w
 16504  123C  0086               	movwf	6
 16505  123D  085B               	movf	matrix_Main@data+1,w
 16506  123E  0087               	movwf	7
 16507  123F  3157               	addfsr 1,23
 16508  1240  3000               	movlw	0
 16509  1241  3FC0               	movwi [0]fsr1
 16510  1242  3FC1               	movwi [1]fsr1
 16511                           
 16512                           ;matrix_task.c: 214: data->holdCountBY = 0;
 16513  1243  085A               	movf	matrix_Main@data,w
 16514  1244  0086               	movwf	6
 16515  1245  085B               	movf	matrix_Main@data+1,w
 16516  1246  0087               	movwf	7
 16517  1247  3159               	addfsr 1,25
 16518  1248  3000               	movlw	0
 16519  1249  3FC0               	movwi [0]fsr1
 16520  124A  3FC1               	movwi [1]fsr1
 16521                           
 16522                           ;matrix_task.c: 215: data->holdCountBA = 0;
 16523  124B  085A               	movf	matrix_Main@data,w
 16524  124C  0086               	movwf	6
 16525  124D  085B               	movf	matrix_Main@data+1,w
 16526  124E  0087               	movwf	7
 16527  124F  315B               	addfsr 1,27
 16528  1250  3000               	movlw	0
 16529  1251  3FC0               	movwi [0]fsr1
 16530  1252  3FC1               	movwi [1]fsr1
 16531                           
 16532                           ;matrix_task.c: 216: data->noholdCount = 0;
 16533  1253  085A               	movf	matrix_Main@data,w
 16534  1254  0086               	movwf	6
 16535  1255  085B               	movf	matrix_Main@data+1,w
 16536  1256  0087               	movwf	7
 16537  1257  315D               	addfsr 1,29
 16538  1258  3000               	movlw	0
 16539  1259  3FC0               	movwi [0]fsr1
 16540  125A  3FC1               	movwi [1]fsr1
 16541                           
 16542                           ;matrix_task.c: 217: data->displayTickdown = 300;
 16543  125B  085A               	movf	matrix_Main@data,w
 16544  125C  0086               	movwf	6
 16545  125D  085B               	movf	matrix_Main@data+1,w
 16546  125E  0087               	movwf	7
 16547  125F  3147               	addfsr 1,7
 16548  1260  302C               	movlw	44
 16549  1261  3FC0               	movwi [0]fsr1
 16550  1262  3001               	movlw	1
 16551  1263  3FC1               	movwi [1]fsr1
 16552                           
 16553                           ;matrix_task.c: 218: break;
 16554  1264  2FB4               	goto	l10235
 16555  1265                     l9961:	
 16556                           ;matrix_task.c: 219: case 4:
 16557                           
 16558                           
 16559                           ;matrix_task.c: 221: if (data->holdCountX == holdvalue){
 16560  1265  085A               	movf	matrix_Main@data,w
 16561  1266  0086               	movwf	6
 16562  1267  085B               	movf	matrix_Main@data+1,w
 16563  1268  0087               	movwf	7
 16564  1269  314D               	addfsr 1,13
 16565  126A  3F40               	moviw [0]fsr1
 16566  126B  00D4               	movwf	??_matrix_Main
 16567  126C  3F41               	moviw [1]fsr1
 16568  126D  00D5               	movwf	??_matrix_Main+1
 16569  126E  0859               	movf	matrix_Main@holdvalue,w
 16570  126F  00D6               	movwf	??_matrix_Main+2
 16571  1270  01D7               	clrf	??_matrix_Main+3
 16572  1271  0855               	movf	??_matrix_Main+1,w
 16573  1272  0657               	xorwf	??_matrix_Main+3,w
 16574  1273  1D03               	skipz
 16575  1274  2A77               	goto	u6355
 16576  1275  0854               	movf	??_matrix_Main,w
 16577  1276  0656               	xorwf	??_matrix_Main+2,w
 16578  1277                     u6355:	
 16579  1277  1D03               	skipz
 16580  1278  2A96               	goto	l9967
 16581                           
 16582                           ;matrix_task.c: 222: matrix_found = matrix_secret_check(data, buttonPressed);
 16583  1279  085B               	movf	matrix_Main@data+1,w
 16584  127A  00F8               	movwf	matrix_secret_check@data+1
 16585  127B  085A               	movf	matrix_Main@data,w
 16586  127C  00F7               	movwf	matrix_secret_check@data
 16587  127D  0858               	movf	matrix_Main@buttonPressed,w
 16588  127E  00D4               	movwf	??_matrix_Main
 16589  127F  0854               	movf	??_matrix_Main,w
 16590  1280  00F9               	movwf	matrix_secret_check@buttonPressed
 16591  1281  31A6  2645  3190   	fcall	_matrix_secret_check
 16592  1284  0020               	movlb	0	; select bank0
 16593  1285  00D5               	movwf	??_matrix_Main+1
 16594  1286  0855               	movf	??_matrix_Main+1,w
 16595  1287  0021               	movlb	1	; select bank1
 16596  1288  00C2               	movwf	_matrix_found^(0+128)
 16597                           
 16598                           ;matrix_task.c: 223: data->display_state = MATRIX_X;
 16599  1289  0020               	movlb	0	; select bank0
 16600  128A  085A               	movf	matrix_Main@data,w
 16601  128B  3E02               	addlw	2
 16602  128C  00D4               	movwf	??_matrix_Main
 16603  128D  3000               	movlw	0
 16604  128E  3D5B               	addwfc	matrix_Main@data+1,w
 16605  128F  00D5               	movwf	??_matrix_Main+1
 16606  1290  0854               	movf	??_matrix_Main,w
 16607  1291  0086               	movwf	6
 16608  1292  0855               	movf	??_matrix_Main+1,w
 16609  1293  0087               	movwf	7
 16610  1294  3003               	movlw	3
 16611  1295  0081               	movwf	1
 16612  1296                     l9967:	
 16613                           
 16614                           ;matrix_task.c: 224: }
 16615                           ;matrix_task.c: 225: data->holdCountA = 0;
 16616  1296  085A               	movf	matrix_Main@data,w
 16617  1297  0086               	movwf	6
 16618  1298  085B               	movf	matrix_Main@data+1,w
 16619  1299  0087               	movwf	7
 16620  129A  3149               	addfsr 1,9
 16621  129B  3000               	movlw	0
 16622  129C  3FC0               	movwi [0]fsr1
 16623  129D  3FC1               	movwi [1]fsr1
 16624                           
 16625                           ;matrix_task.c: 226: data->holdCountB = 0;
 16626  129E  085A               	movf	matrix_Main@data,w
 16627  129F  0086               	movwf	6
 16628  12A0  085B               	movf	matrix_Main@data+1,w
 16629  12A1  0087               	movwf	7
 16630  12A2  314B               	addfsr 1,11
 16631  12A3  3000               	movlw	0
 16632  12A4  3FC0               	movwi [0]fsr1
 16633  12A5  3FC1               	movwi [1]fsr1
 16634                           
 16635                           ;matrix_task.c: 227: data->holdCountX += 1;
 16636  12A6  085A               	movf	matrix_Main@data,w
 16637  12A7  0086               	movwf	6
 16638  12A8  085B               	movf	matrix_Main@data+1,w
 16639  12A9  0087               	movwf	7
 16640  12AA  314D               	addfsr 1,13
 16641  12AB  3001               	movlw	1
 16642  12AC  0781               	addwf	1,f
 16643  12AD  3141               	addfsr 1,1
 16644  12AE  1803               	skipnc
 16645  12AF  0A81               	incf	1,f
 16646                           
 16647                           ;matrix_task.c: 228: data->holdCountY = 0;
 16648  12B0  085A               	movf	matrix_Main@data,w
 16649  12B1  0086               	movwf	6
 16650  12B2  085B               	movf	matrix_Main@data+1,w
 16651  12B3  0087               	movwf	7
 16652  12B4  314F               	addfsr 1,15
 16653  12B5  3000               	movlw	0
 16654  12B6  3FC0               	movwi [0]fsr1
 16655  12B7  3FC1               	movwi [1]fsr1
 16656                           
 16657                           ;matrix_task.c: 229: data->holdCountXY = 0;
 16658  12B8  085A               	movf	matrix_Main@data,w
 16659  12B9  0086               	movwf	6
 16660  12BA  085B               	movf	matrix_Main@data+1,w
 16661  12BB  0087               	movwf	7
 16662  12BC  3151               	addfsr 1,17
 16663  12BD  3000               	movlw	0
 16664  12BE  3FC0               	movwi [0]fsr1
 16665  12BF  3FC1               	movwi [1]fsr1
 16666                           
 16667                           ;matrix_task.c: 230: data->holdCountAY = 0;
 16668  12C0  085A               	movf	matrix_Main@data,w
 16669  12C1  0086               	movwf	6
 16670  12C2  085B               	movf	matrix_Main@data+1,w
 16671  12C3  0087               	movwf	7
 16672  12C4  3153               	addfsr 1,19
 16673  12C5  3000               	movlw	0
 16674  12C6  3FC0               	movwi [0]fsr1
 16675  12C7  3FC1               	movwi [1]fsr1
 16676                           
 16677                           ;matrix_task.c: 231: data->holdCountAX = 0;
 16678  12C8  085A               	movf	matrix_Main@data,w
 16679  12C9  0086               	movwf	6
 16680  12CA  085B               	movf	matrix_Main@data+1,w
 16681  12CB  0087               	movwf	7
 16682  12CC  3155               	addfsr 1,21
 16683  12CD  3000               	movlw	0
 16684  12CE  3FC0               	movwi [0]fsr1
 16685  12CF  3FC1               	movwi [1]fsr1
 16686                           
 16687                           ;matrix_task.c: 232: data->holdCountBX = 0;
 16688  12D0  085A               	movf	matrix_Main@data,w
 16689  12D1  0086               	movwf	6
 16690  12D2  085B               	movf	matrix_Main@data+1,w
 16691  12D3  0087               	movwf	7
 16692  12D4  3157               	addfsr 1,23
 16693  12D5  3000               	movlw	0
 16694  12D6  3FC0               	movwi [0]fsr1
 16695  12D7  3FC1               	movwi [1]fsr1
 16696                           
 16697                           ;matrix_task.c: 233: data->holdCountBY = 0;
 16698  12D8  085A               	movf	matrix_Main@data,w
 16699  12D9  0086               	movwf	6
 16700  12DA  085B               	movf	matrix_Main@data+1,w
 16701  12DB  0087               	movwf	7
 16702  12DC  3159               	addfsr 1,25
 16703  12DD  3000               	movlw	0
 16704  12DE  3FC0               	movwi [0]fsr1
 16705  12DF  3FC1               	movwi [1]fsr1
 16706                           
 16707                           ;matrix_task.c: 234: data->holdCountBA = 0;
 16708  12E0  085A               	movf	matrix_Main@data,w
 16709  12E1  0086               	movwf	6
 16710  12E2  085B               	movf	matrix_Main@data+1,w
 16711  12E3  0087               	movwf	7
 16712  12E4  315B               	addfsr 1,27
 16713  12E5  3000               	movlw	0
 16714  12E6  3FC0               	movwi [0]fsr1
 16715  12E7  3FC1               	movwi [1]fsr1
 16716                           
 16717                           ;matrix_task.c: 235: data->noholdCount = 0;
 16718  12E8  085A               	movf	matrix_Main@data,w
 16719  12E9  0086               	movwf	6
 16720  12EA  085B               	movf	matrix_Main@data+1,w
 16721  12EB  0087               	movwf	7
 16722  12EC  315D               	addfsr 1,29
 16723  12ED  3000               	movlw	0
 16724  12EE  3FC0               	movwi [0]fsr1
 16725  12EF  3FC1               	movwi [1]fsr1
 16726                           
 16727                           ;matrix_task.c: 236: data->displayTickdown = 300;
 16728  12F0  085A               	movf	matrix_Main@data,w
 16729  12F1  0086               	movwf	6
 16730  12F2  085B               	movf	matrix_Main@data+1,w
 16731  12F3  0087               	movwf	7
 16732  12F4  3147               	addfsr 1,7
 16733  12F5  302C               	movlw	44
 16734  12F6  3FC0               	movwi [0]fsr1
 16735  12F7  3001               	movlw	1
 16736  12F8  3FC1               	movwi [1]fsr1
 16737                           
 16738                           ;matrix_task.c: 237: break;
 16739  12F9  2FB4               	goto	l10235
 16740  12FA                     l9991:	
 16741                           ;matrix_task.c: 238: case 8:
 16742                           
 16743                           
 16744                           ;matrix_task.c: 240: if (data->holdCountY == holdvalue){
 16745  12FA  085A               	movf	matrix_Main@data,w
 16746  12FB  0086               	movwf	6
 16747  12FC  085B               	movf	matrix_Main@data+1,w
 16748  12FD  0087               	movwf	7
 16749  12FE  314F               	addfsr 1,15
 16750  12FF  3F40               	moviw [0]fsr1
 16751  1300  00D4               	movwf	??_matrix_Main
 16752  1301  3F41               	moviw [1]fsr1
 16753  1302  00D5               	movwf	??_matrix_Main+1
 16754  1303  0859               	movf	matrix_Main@holdvalue,w
 16755  1304  00D6               	movwf	??_matrix_Main+2
 16756  1305  01D7               	clrf	??_matrix_Main+3
 16757  1306  0855               	movf	??_matrix_Main+1,w
 16758  1307  0657               	xorwf	??_matrix_Main+3,w
 16759  1308  1D03               	skipz
 16760  1309  2B0C               	goto	u6365
 16761  130A  0854               	movf	??_matrix_Main,w
 16762  130B  0656               	xorwf	??_matrix_Main+2,w
 16763  130C                     u6365:	
 16764  130C  1D03               	skipz
 16765  130D  2B2B               	goto	l9997
 16766                           
 16767                           ;matrix_task.c: 241: matrix_found = matrix_secret_check(data, buttonPressed);
 16768  130E  085B               	movf	matrix_Main@data+1,w
 16769  130F  00F8               	movwf	matrix_secret_check@data+1
 16770  1310  085A               	movf	matrix_Main@data,w
 16771  1311  00F7               	movwf	matrix_secret_check@data
 16772  1312  0858               	movf	matrix_Main@buttonPressed,w
 16773  1313  00D4               	movwf	??_matrix_Main
 16774  1314  0854               	movf	??_matrix_Main,w
 16775  1315  00F9               	movwf	matrix_secret_check@buttonPressed
 16776  1316  31A6  2645  3190   	fcall	_matrix_secret_check
 16777  1319  0020               	movlb	0	; select bank0
 16778  131A  00D5               	movwf	??_matrix_Main+1
 16779  131B  0855               	movf	??_matrix_Main+1,w
 16780  131C  0021               	movlb	1	; select bank1
 16781  131D  00C2               	movwf	_matrix_found^(0+128)
 16782                           
 16783                           ;matrix_task.c: 242: data->display_state = MATRIX_Y;
 16784  131E  0020               	movlb	0	; select bank0
 16785  131F  085A               	movf	matrix_Main@data,w
 16786  1320  3E02               	addlw	2
 16787  1321  00D4               	movwf	??_matrix_Main
 16788  1322  3000               	movlw	0
 16789  1323  3D5B               	addwfc	matrix_Main@data+1,w
 16790  1324  00D5               	movwf	??_matrix_Main+1
 16791  1325  0854               	movf	??_matrix_Main,w
 16792  1326  0086               	movwf	6
 16793  1327  0855               	movf	??_matrix_Main+1,w
 16794  1328  0087               	movwf	7
 16795  1329  3001               	movlw	1
 16796  132A  0081               	movwf	1
 16797  132B                     l9997:	
 16798                           
 16799                           ;matrix_task.c: 243: }
 16800                           ;matrix_task.c: 245: data->holdCountA = 0;
 16801  132B  085A               	movf	matrix_Main@data,w
 16802  132C  0086               	movwf	6
 16803  132D  085B               	movf	matrix_Main@data+1,w
 16804  132E  0087               	movwf	7
 16805  132F  3149               	addfsr 1,9
 16806  1330  3000               	movlw	0
 16807  1331  3FC0               	movwi [0]fsr1
 16808  1332  3FC1               	movwi [1]fsr1
 16809                           
 16810                           ;matrix_task.c: 246: data->holdCountB = 0;
 16811  1333  085A               	movf	matrix_Main@data,w
 16812  1334  0086               	movwf	6
 16813  1335  085B               	movf	matrix_Main@data+1,w
 16814  1336  0087               	movwf	7
 16815  1337  314B               	addfsr 1,11
 16816  1338  3000               	movlw	0
 16817  1339  3FC0               	movwi [0]fsr1
 16818  133A  3FC1               	movwi [1]fsr1
 16819                           
 16820                           ;matrix_task.c: 247: data->holdCountX = 0;
 16821  133B  085A               	movf	matrix_Main@data,w
 16822  133C  0086               	movwf	6
 16823  133D  085B               	movf	matrix_Main@data+1,w
 16824  133E  0087               	movwf	7
 16825  133F  314D               	addfsr 1,13
 16826  1340  3000               	movlw	0
 16827  1341  3FC0               	movwi [0]fsr1
 16828  1342  3FC1               	movwi [1]fsr1
 16829                           
 16830                           ;matrix_task.c: 248: data->holdCountY += 1;
 16831  1343  085A               	movf	matrix_Main@data,w
 16832  1344  0086               	movwf	6
 16833  1345  085B               	movf	matrix_Main@data+1,w
 16834  1346  0087               	movwf	7
 16835  1347  314F               	addfsr 1,15
 16836  1348  3001               	movlw	1
 16837  1349  0781               	addwf	1,f
 16838  134A  3141               	addfsr 1,1
 16839  134B  1803               	skipnc
 16840  134C  0A81               	incf	1,f
 16841                           
 16842                           ;matrix_task.c: 249: data->holdCountXY = 0;
 16843  134D  085A               	movf	matrix_Main@data,w
 16844  134E  0086               	movwf	6
 16845  134F  085B               	movf	matrix_Main@data+1,w
 16846  1350  0087               	movwf	7
 16847  1351  3151               	addfsr 1,17
 16848  1352  3000               	movlw	0
 16849  1353  3FC0               	movwi [0]fsr1
 16850  1354  3FC1               	movwi [1]fsr1
 16851                           
 16852                           ;matrix_task.c: 250: data->holdCountAY = 0;
 16853  1355  085A               	movf	matrix_Main@data,w
 16854  1356  0086               	movwf	6
 16855  1357  085B               	movf	matrix_Main@data+1,w
 16856  1358  0087               	movwf	7
 16857  1359  3153               	addfsr 1,19
 16858  135A  3000               	movlw	0
 16859  135B  3FC0               	movwi [0]fsr1
 16860  135C  3FC1               	movwi [1]fsr1
 16861                           
 16862                           ;matrix_task.c: 251: data->holdCountAX = 0;
 16863  135D  085A               	movf	matrix_Main@data,w
 16864  135E  0086               	movwf	6
 16865  135F  085B               	movf	matrix_Main@data+1,w
 16866  1360  0087               	movwf	7
 16867  1361  3155               	addfsr 1,21
 16868  1362  3000               	movlw	0
 16869  1363  3FC0               	movwi [0]fsr1
 16870  1364  3FC1               	movwi [1]fsr1
 16871                           
 16872                           ;matrix_task.c: 252: data->holdCountBX = 0;
 16873  1365  085A               	movf	matrix_Main@data,w
 16874  1366  0086               	movwf	6
 16875  1367  085B               	movf	matrix_Main@data+1,w
 16876  1368  0087               	movwf	7
 16877  1369  3157               	addfsr 1,23
 16878  136A  3000               	movlw	0
 16879  136B  3FC0               	movwi [0]fsr1
 16880  136C  3FC1               	movwi [1]fsr1
 16881                           
 16882                           ;matrix_task.c: 253: data->holdCountBY = 0;
 16883  136D  085A               	movf	matrix_Main@data,w
 16884  136E  0086               	movwf	6
 16885  136F  085B               	movf	matrix_Main@data+1,w
 16886  1370  0087               	movwf	7
 16887  1371  3159               	addfsr 1,25
 16888  1372  3000               	movlw	0
 16889  1373  3FC0               	movwi [0]fsr1
 16890  1374  3FC1               	movwi [1]fsr1
 16891                           
 16892                           ;matrix_task.c: 254: data->holdCountBA = 0;
 16893  1375  085A               	movf	matrix_Main@data,w
 16894  1376  0086               	movwf	6
 16895  1377  085B               	movf	matrix_Main@data+1,w
 16896  1378  0087               	movwf	7
 16897  1379  315B               	addfsr 1,27
 16898  137A  3000               	movlw	0
 16899  137B  3FC0               	movwi [0]fsr1
 16900  137C  3FC1               	movwi [1]fsr1
 16901                           
 16902                           ;matrix_task.c: 255: data->noholdCount = 0;
 16903  137D  085A               	movf	matrix_Main@data,w
 16904  137E  0086               	movwf	6
 16905  137F  085B               	movf	matrix_Main@data+1,w
 16906  1380  0087               	movwf	7
 16907  1381  315D               	addfsr 1,29
 16908  1382  3000               	movlw	0
 16909  1383  3FC0               	movwi [0]fsr1
 16910  1384  3FC1               	movwi [1]fsr1
 16911                           
 16912                           ;matrix_task.c: 256: data->displayTickdown = 300;
 16913  1385  085A               	movf	matrix_Main@data,w
 16914  1386  0086               	movwf	6
 16915  1387  085B               	movf	matrix_Main@data+1,w
 16916  1388  0087               	movwf	7
 16917  1389  3147               	addfsr 1,7
 16918  138A  302C               	movlw	44
 16919  138B  3FC0               	movwi [0]fsr1
 16920  138C  3001               	movlw	1
 16921  138D  3FC1               	movwi [1]fsr1
 16922                           
 16923                           ;matrix_task.c: 257: break;
 16924  138E  2FB4               	goto	l10235
 16925  138F                     l10021:	
 16926                           ;matrix_task.c: 258: case 4 | 8:
 16927                           
 16928                           
 16929                           ;matrix_task.c: 260: if (data->holdCountXY == holdvalue){
 16930  138F  085A               	movf	matrix_Main@data,w
 16931  1390  0086               	movwf	6
 16932  1391  085B               	movf	matrix_Main@data+1,w
 16933  1392  0087               	movwf	7
 16934  1393  3151               	addfsr 1,17
 16935  1394  3F40               	moviw [0]fsr1
 16936  1395  00D4               	movwf	??_matrix_Main
 16937  1396  3F41               	moviw [1]fsr1
 16938  1397  00D5               	movwf	??_matrix_Main+1
 16939  1398  0859               	movf	matrix_Main@holdvalue,w
 16940  1399  00D6               	movwf	??_matrix_Main+2
 16941  139A  01D7               	clrf	??_matrix_Main+3
 16942  139B  0855               	movf	??_matrix_Main+1,w
 16943  139C  0657               	xorwf	??_matrix_Main+3,w
 16944  139D  1D03               	skipz
 16945  139E  2BA1               	goto	u6375
 16946  139F  0854               	movf	??_matrix_Main,w
 16947  13A0  0656               	xorwf	??_matrix_Main+2,w
 16948  13A1                     u6375:	
 16949  13A1  1D03               	skipz
 16950  13A2  2BC0               	goto	l10027
 16951                           
 16952                           ;matrix_task.c: 261: matrix_found = matrix_secret_check(data, 4 | 8);
 16953  13A3  085B               	movf	matrix_Main@data+1,w
 16954  13A4  00F8               	movwf	matrix_secret_check@data+1
 16955  13A5  085A               	movf	matrix_Main@data,w
 16956  13A6  00F7               	movwf	matrix_secret_check@data
 16957  13A7  300C               	movlw	12
 16958  13A8  00D4               	movwf	??_matrix_Main
 16959  13A9  0854               	movf	??_matrix_Main,w
 16960  13AA  00F9               	movwf	matrix_secret_check@buttonPressed
 16961  13AB  31A6  2645  3190   	fcall	_matrix_secret_check
 16962  13AE  0020               	movlb	0	; select bank0
 16963  13AF  00D5               	movwf	??_matrix_Main+1
 16964  13B0  0855               	movf	??_matrix_Main+1,w
 16965  13B1  0021               	movlb	1	; select bank1
 16966  13B2  00C2               	movwf	_matrix_found^(0+128)
 16967                           
 16968                           ;matrix_task.c: 262: data->display_state = MATRIX_XY;
 16969  13B3  0020               	movlb	0	; select bank0
 16970  13B4  085A               	movf	matrix_Main@data,w
 16971  13B5  3E02               	addlw	2
 16972  13B6  00D4               	movwf	??_matrix_Main
 16973  13B7  3000               	movlw	0
 16974  13B8  3D5B               	addwfc	matrix_Main@data+1,w
 16975  13B9  00D5               	movwf	??_matrix_Main+1
 16976  13BA  0854               	movf	??_matrix_Main,w
 16977  13BB  0086               	movwf	6
 16978  13BC  0855               	movf	??_matrix_Main+1,w
 16979  13BD  0087               	movwf	7
 16980  13BE  3008               	movlw	8
 16981  13BF  0081               	movwf	1
 16982  13C0                     l10027:	
 16983                           
 16984                           ;matrix_task.c: 263: }
 16985                           ;matrix_task.c: 264: data->holdCountA = 0;
 16986  13C0  085A               	movf	matrix_Main@data,w
 16987  13C1  0086               	movwf	6
 16988  13C2  085B               	movf	matrix_Main@data+1,w
 16989  13C3  0087               	movwf	7
 16990  13C4  3149               	addfsr 1,9
 16991  13C5  3000               	movlw	0
 16992  13C6  3FC0               	movwi [0]fsr1
 16993  13C7  3FC1               	movwi [1]fsr1
 16994                           
 16995                           ;matrix_task.c: 265: data->holdCountB = 0;
 16996  13C8  085A               	movf	matrix_Main@data,w
 16997  13C9  0086               	movwf	6
 16998  13CA  085B               	movf	matrix_Main@data+1,w
 16999  13CB  0087               	movwf	7
 17000  13CC  314B               	addfsr 1,11
 17001  13CD  3000               	movlw	0
 17002  13CE  3FC0               	movwi [0]fsr1
 17003  13CF  3FC1               	movwi [1]fsr1
 17004                           
 17005                           ;matrix_task.c: 266: data->holdCountX = 0;
 17006  13D0  085A               	movf	matrix_Main@data,w
 17007  13D1  0086               	movwf	6
 17008  13D2  085B               	movf	matrix_Main@data+1,w
 17009  13D3  0087               	movwf	7
 17010  13D4  314D               	addfsr 1,13
 17011  13D5  3000               	movlw	0
 17012  13D6  3FC0               	movwi [0]fsr1
 17013  13D7  3FC1               	movwi [1]fsr1
 17014                           
 17015                           ;matrix_task.c: 267: data->holdCountY = 0;
 17016  13D8  085A               	movf	matrix_Main@data,w
 17017  13D9  0086               	movwf	6
 17018  13DA  085B               	movf	matrix_Main@data+1,w
 17019  13DB  0087               	movwf	7
 17020  13DC  314F               	addfsr 1,15
 17021  13DD  3000               	movlw	0
 17022  13DE  3FC0               	movwi [0]fsr1
 17023  13DF  3FC1               	movwi [1]fsr1
 17024                           
 17025                           ;matrix_task.c: 268: data->holdCountXY += 1;
 17026  13E0  085A               	movf	matrix_Main@data,w
 17027  13E1  0086               	movwf	6
 17028  13E2  085B               	movf	matrix_Main@data+1,w
 17029  13E3  0087               	movwf	7
 17030  13E4  3151               	addfsr 1,17
 17031  13E5  3001               	movlw	1
 17032  13E6  0781               	addwf	1,f
 17033  13E7  3141               	addfsr 1,1
 17034  13E8  1803               	skipnc
 17035  13E9  0A81               	incf	1,f
 17036                           
 17037                           ;matrix_task.c: 269: data->holdCountAY = 0;
 17038  13EA  085A               	movf	matrix_Main@data,w
 17039  13EB  0086               	movwf	6
 17040  13EC  085B               	movf	matrix_Main@data+1,w
 17041  13ED  0087               	movwf	7
 17042  13EE  3153               	addfsr 1,19
 17043  13EF  3000               	movlw	0
 17044  13F0  3FC0               	movwi [0]fsr1
 17045  13F1  3FC1               	movwi [1]fsr1
 17046                           
 17047                           ;matrix_task.c: 270: data->holdCountAX = 0;
 17048  13F2  085A               	movf	matrix_Main@data,w
 17049  13F3  0086               	movwf	6
 17050  13F4  085B               	movf	matrix_Main@data+1,w
 17051  13F5  0087               	movwf	7
 17052  13F6  3155               	addfsr 1,21
 17053  13F7  3000               	movlw	0
 17054  13F8  3FC0               	movwi [0]fsr1
 17055  13F9  3FC1               	movwi [1]fsr1
 17056                           
 17057                           ;matrix_task.c: 271: data->holdCountBX = 0;
 17058  13FA  085A               	movf	matrix_Main@data,w
 17059  13FB  0086               	movwf	6
 17060  13FC  085B               	movf	matrix_Main@data+1,w
 17061  13FD  0087               	movwf	7
 17062  13FE  3157               	addfsr 1,23
 17063  13FF  3000               	movlw	0
 17064  1400  3FC0               	movwi [0]fsr1
 17065  1401  3FC1               	movwi [1]fsr1
 17066                           
 17067                           ;matrix_task.c: 272: data->holdCountBY = 0;
 17068  1402  085A               	movf	matrix_Main@data,w
 17069  1403  0086               	movwf	6
 17070  1404  085B               	movf	matrix_Main@data+1,w
 17071  1405  0087               	movwf	7
 17072  1406  3159               	addfsr 1,25
 17073  1407  3000               	movlw	0
 17074  1408  3FC0               	movwi [0]fsr1
 17075  1409  3FC1               	movwi [1]fsr1
 17076                           
 17077                           ;matrix_task.c: 273: data->holdCountBA = 0;
 17078  140A  085A               	movf	matrix_Main@data,w
 17079  140B  0086               	movwf	6
 17080  140C  085B               	movf	matrix_Main@data+1,w
 17081  140D  0087               	movwf	7
 17082  140E  315B               	addfsr 1,27
 17083  140F  3000               	movlw	0
 17084  1410  3FC0               	movwi [0]fsr1
 17085  1411  3FC1               	movwi [1]fsr1
 17086                           
 17087                           ;matrix_task.c: 274: data->noholdCount = 0;
 17088  1412  085A               	movf	matrix_Main@data,w
 17089  1413  0086               	movwf	6
 17090  1414  085B               	movf	matrix_Main@data+1,w
 17091  1415  0087               	movwf	7
 17092  1416  315D               	addfsr 1,29
 17093  1417  3000               	movlw	0
 17094  1418  3FC0               	movwi [0]fsr1
 17095  1419  3FC1               	movwi [1]fsr1
 17096                           
 17097                           ;matrix_task.c: 275: data->displayTickdown = 300;
 17098  141A  085A               	movf	matrix_Main@data,w
 17099  141B  0086               	movwf	6
 17100  141C  085B               	movf	matrix_Main@data+1,w
 17101  141D  0087               	movwf	7
 17102  141E  3147               	addfsr 1,7
 17103  141F  302C               	movlw	44
 17104  1420  3FC0               	movwi [0]fsr1
 17105  1421  3001               	movlw	1
 17106  1422  3FC1               	movwi [1]fsr1
 17107                           
 17108                           ;matrix_task.c: 276: break;
 17109  1423  2FB4               	goto	l10235
 17110  1424                     l10051:	
 17111                           ;matrix_task.c: 277: case 1 | 8:
 17112                           
 17113                           
 17114                           ;matrix_task.c: 279: if (data->holdCountAY == holdvalue){
 17115  1424  085A               	movf	matrix_Main@data,w
 17116  1425  0086               	movwf	6
 17117  1426  085B               	movf	matrix_Main@data+1,w
 17118  1427  0087               	movwf	7
 17119  1428  3153               	addfsr 1,19
 17120  1429  3F40               	moviw [0]fsr1
 17121  142A  00D4               	movwf	??_matrix_Main
 17122  142B  3F41               	moviw [1]fsr1
 17123  142C  00D5               	movwf	??_matrix_Main+1
 17124  142D  0859               	movf	matrix_Main@holdvalue,w
 17125  142E  00D6               	movwf	??_matrix_Main+2
 17126  142F  01D7               	clrf	??_matrix_Main+3
 17127  1430  0855               	movf	??_matrix_Main+1,w
 17128  1431  0657               	xorwf	??_matrix_Main+3,w
 17129  1432  1D03               	skipz
 17130  1433  2C36               	goto	u6385
 17131  1434  0854               	movf	??_matrix_Main,w
 17132  1435  0656               	xorwf	??_matrix_Main+2,w
 17133  1436                     u6385:	
 17134  1436  1D03               	skipz
 17135  1437  2C55               	goto	l10057
 17136                           
 17137                           ;matrix_task.c: 280: matrix_found = matrix_secret_check(data, 1 | 8);
 17138  1438  085B               	movf	matrix_Main@data+1,w
 17139  1439  00F8               	movwf	matrix_secret_check@data+1
 17140  143A  085A               	movf	matrix_Main@data,w
 17141  143B  00F7               	movwf	matrix_secret_check@data
 17142  143C  3009               	movlw	9
 17143  143D  00D4               	movwf	??_matrix_Main
 17144  143E  0854               	movf	??_matrix_Main,w
 17145  143F  00F9               	movwf	matrix_secret_check@buttonPressed
 17146  1440  31A6  2645  3190   	fcall	_matrix_secret_check
 17147  1443  0020               	movlb	0	; select bank0
 17148  1444  00D5               	movwf	??_matrix_Main+1
 17149  1445  0855               	movf	??_matrix_Main+1,w
 17150  1446  0021               	movlb	1	; select bank1
 17151  1447  00C2               	movwf	_matrix_found^(0+128)
 17152                           
 17153                           ;matrix_task.c: 281: data->display_state = MATRIX_AY;
 17154  1448  0020               	movlb	0	; select bank0
 17155  1449  085A               	movf	matrix_Main@data,w
 17156  144A  3E02               	addlw	2
 17157  144B  00D4               	movwf	??_matrix_Main
 17158  144C  3000               	movlw	0
 17159  144D  3D5B               	addwfc	matrix_Main@data+1,w
 17160  144E  00D5               	movwf	??_matrix_Main+1
 17161  144F  0854               	movf	??_matrix_Main,w
 17162  1450  0086               	movwf	6
 17163  1451  0855               	movf	??_matrix_Main+1,w
 17164  1452  0087               	movwf	7
 17165  1453  3005               	movlw	5
 17166  1454  0081               	movwf	1
 17167  1455                     l10057:	
 17168                           
 17169                           ;matrix_task.c: 282: }
 17170                           ;matrix_task.c: 283: data->holdCountA = 0;
 17171  1455  085A               	movf	matrix_Main@data,w
 17172  1456  0086               	movwf	6
 17173  1457  085B               	movf	matrix_Main@data+1,w
 17174  1458  0087               	movwf	7
 17175  1459  3149               	addfsr 1,9
 17176  145A  3000               	movlw	0
 17177  145B  3FC0               	movwi [0]fsr1
 17178  145C  3FC1               	movwi [1]fsr1
 17179                           
 17180                           ;matrix_task.c: 284: data->holdCountB = 0;
 17181  145D  085A               	movf	matrix_Main@data,w
 17182  145E  0086               	movwf	6
 17183  145F  085B               	movf	matrix_Main@data+1,w
 17184  1460  0087               	movwf	7
 17185  1461  314B               	addfsr 1,11
 17186  1462  3000               	movlw	0
 17187  1463  3FC0               	movwi [0]fsr1
 17188  1464  3FC1               	movwi [1]fsr1
 17189                           
 17190                           ;matrix_task.c: 285: data->holdCountX = 0;
 17191  1465  085A               	movf	matrix_Main@data,w
 17192  1466  0086               	movwf	6
 17193  1467  085B               	movf	matrix_Main@data+1,w
 17194  1468  0087               	movwf	7
 17195  1469  314D               	addfsr 1,13
 17196  146A  3000               	movlw	0
 17197  146B  3FC0               	movwi [0]fsr1
 17198  146C  3FC1               	movwi [1]fsr1
 17199                           
 17200                           ;matrix_task.c: 286: data->holdCountY = 0;
 17201  146D  085A               	movf	matrix_Main@data,w
 17202  146E  0086               	movwf	6
 17203  146F  085B               	movf	matrix_Main@data+1,w
 17204  1470  0087               	movwf	7
 17205  1471  314F               	addfsr 1,15
 17206  1472  3000               	movlw	0
 17207  1473  3FC0               	movwi [0]fsr1
 17208  1474  3FC1               	movwi [1]fsr1
 17209                           
 17210                           ;matrix_task.c: 287: data->holdCountXY = 0;
 17211  1475  085A               	movf	matrix_Main@data,w
 17212  1476  0086               	movwf	6
 17213  1477  085B               	movf	matrix_Main@data+1,w
 17214  1478  0087               	movwf	7
 17215  1479  3151               	addfsr 1,17
 17216  147A  3000               	movlw	0
 17217  147B  3FC0               	movwi [0]fsr1
 17218  147C  3FC1               	movwi [1]fsr1
 17219                           
 17220                           ;matrix_task.c: 288: data->holdCountAY += 1;
 17221  147D  085A               	movf	matrix_Main@data,w
 17222  147E  0086               	movwf	6
 17223  147F  085B               	movf	matrix_Main@data+1,w
 17224  1480  0087               	movwf	7
 17225  1481  3153               	addfsr 1,19
 17226  1482  3001               	movlw	1
 17227  1483  0781               	addwf	1,f
 17228  1484  3141               	addfsr 1,1
 17229  1485  1803               	skipnc
 17230  1486  0A81               	incf	1,f
 17231                           
 17232                           ;matrix_task.c: 289: data->holdCountAX = 0;
 17233  1487  085A               	movf	matrix_Main@data,w
 17234  1488  0086               	movwf	6
 17235  1489  085B               	movf	matrix_Main@data+1,w
 17236  148A  0087               	movwf	7
 17237  148B  3155               	addfsr 1,21
 17238  148C  3000               	movlw	0
 17239  148D  3FC0               	movwi [0]fsr1
 17240  148E  3FC1               	movwi [1]fsr1
 17241                           
 17242                           ;matrix_task.c: 290: data->holdCountBX = 0;
 17243  148F  085A               	movf	matrix_Main@data,w
 17244  1490  0086               	movwf	6
 17245  1491  085B               	movf	matrix_Main@data+1,w
 17246  1492  0087               	movwf	7
 17247  1493  3157               	addfsr 1,23
 17248  1494  3000               	movlw	0
 17249  1495  3FC0               	movwi [0]fsr1
 17250  1496  3FC1               	movwi [1]fsr1
 17251                           
 17252                           ;matrix_task.c: 291: data->holdCountBY = 0;
 17253  1497  085A               	movf	matrix_Main@data,w
 17254  1498  0086               	movwf	6
 17255  1499  085B               	movf	matrix_Main@data+1,w
 17256  149A  0087               	movwf	7
 17257  149B  3159               	addfsr 1,25
 17258  149C  3000               	movlw	0
 17259  149D  3FC0               	movwi [0]fsr1
 17260  149E  3FC1               	movwi [1]fsr1
 17261                           
 17262                           ;matrix_task.c: 292: data->holdCountBA = 0;
 17263  149F  085A               	movf	matrix_Main@data,w
 17264  14A0  0086               	movwf	6
 17265  14A1  085B               	movf	matrix_Main@data+1,w
 17266  14A2  0087               	movwf	7
 17267  14A3  315B               	addfsr 1,27
 17268  14A4  3000               	movlw	0
 17269  14A5  3FC0               	movwi [0]fsr1
 17270  14A6  3FC1               	movwi [1]fsr1
 17271                           
 17272                           ;matrix_task.c: 293: data->noholdCount = 0;
 17273  14A7  085A               	movf	matrix_Main@data,w
 17274  14A8  0086               	movwf	6
 17275  14A9  085B               	movf	matrix_Main@data+1,w
 17276  14AA  0087               	movwf	7
 17277  14AB  315D               	addfsr 1,29
 17278  14AC  3000               	movlw	0
 17279  14AD  3FC0               	movwi [0]fsr1
 17280  14AE  3FC1               	movwi [1]fsr1
 17281                           
 17282                           ;matrix_task.c: 294: data->displayTickdown = 300;
 17283  14AF  085A               	movf	matrix_Main@data,w
 17284  14B0  0086               	movwf	6
 17285  14B1  085B               	movf	matrix_Main@data+1,w
 17286  14B2  0087               	movwf	7
 17287  14B3  3147               	addfsr 1,7
 17288  14B4  302C               	movlw	44
 17289  14B5  3FC0               	movwi [0]fsr1
 17290  14B6  3001               	movlw	1
 17291  14B7  3FC1               	movwi [1]fsr1
 17292                           
 17293                           ;matrix_task.c: 295: break;
 17294  14B8  2FB4               	goto	l10235
 17295  14B9                     l10081:	
 17296                           ;matrix_task.c: 296: case 1 | 4:
 17297                           
 17298                           
 17299                           ;matrix_task.c: 298: if (data->holdCountAX == holdvalue){
 17300  14B9  085A               	movf	matrix_Main@data,w
 17301  14BA  0086               	movwf	6
 17302  14BB  085B               	movf	matrix_Main@data+1,w
 17303  14BC  0087               	movwf	7
 17304  14BD  3155               	addfsr 1,21
 17305  14BE  3F40               	moviw [0]fsr1
 17306  14BF  00D4               	movwf	??_matrix_Main
 17307  14C0  3F41               	moviw [1]fsr1
 17308  14C1  00D5               	movwf	??_matrix_Main+1
 17309  14C2  0859               	movf	matrix_Main@holdvalue,w
 17310  14C3  00D6               	movwf	??_matrix_Main+2
 17311  14C4  01D7               	clrf	??_matrix_Main+3
 17312  14C5  0855               	movf	??_matrix_Main+1,w
 17313  14C6  0657               	xorwf	??_matrix_Main+3,w
 17314  14C7  1D03               	skipz
 17315  14C8  2CCB               	goto	u6395
 17316  14C9  0854               	movf	??_matrix_Main,w
 17317  14CA  0656               	xorwf	??_matrix_Main+2,w
 17318  14CB                     u6395:	
 17319  14CB  1D03               	skipz
 17320  14CC  2CEA               	goto	l10087
 17321                           
 17322                           ;matrix_task.c: 299: matrix_found = matrix_secret_check(data, 1 | 4);
 17323  14CD  085B               	movf	matrix_Main@data+1,w
 17324  14CE  00F8               	movwf	matrix_secret_check@data+1
 17325  14CF  085A               	movf	matrix_Main@data,w
 17326  14D0  00F7               	movwf	matrix_secret_check@data
 17327  14D1  3005               	movlw	5
 17328  14D2  00D4               	movwf	??_matrix_Main
 17329  14D3  0854               	movf	??_matrix_Main,w
 17330  14D4  00F9               	movwf	matrix_secret_check@buttonPressed
 17331  14D5  31A6  2645  3190   	fcall	_matrix_secret_check
 17332  14D8  0020               	movlb	0	; select bank0
 17333  14D9  00D5               	movwf	??_matrix_Main+1
 17334  14DA  0855               	movf	??_matrix_Main+1,w
 17335  14DB  0021               	movlb	1	; select bank1
 17336  14DC  00C2               	movwf	_matrix_found^(0+128)
 17337                           
 17338                           ;matrix_task.c: 300: data->display_state = MATRIX_AX;
 17339  14DD  0020               	movlb	0	; select bank0
 17340  14DE  085A               	movf	matrix_Main@data,w
 17341  14DF  3E02               	addlw	2
 17342  14E0  00D4               	movwf	??_matrix_Main
 17343  14E1  3000               	movlw	0
 17344  14E2  3D5B               	addwfc	matrix_Main@data+1,w
 17345  14E3  00D5               	movwf	??_matrix_Main+1
 17346  14E4  0854               	movf	??_matrix_Main,w
 17347  14E5  0086               	movwf	6
 17348  14E6  0855               	movf	??_matrix_Main+1,w
 17349  14E7  0087               	movwf	7
 17350  14E8  3004               	movlw	4
 17351  14E9  0081               	movwf	1
 17352  14EA                     l10087:	
 17353                           
 17354                           ;matrix_task.c: 301: }
 17355                           ;matrix_task.c: 302: data->holdCountA = 0;
 17356  14EA  085A               	movf	matrix_Main@data,w
 17357  14EB  0086               	movwf	6
 17358  14EC  085B               	movf	matrix_Main@data+1,w
 17359  14ED  0087               	movwf	7
 17360  14EE  3149               	addfsr 1,9
 17361  14EF  3000               	movlw	0
 17362  14F0  3FC0               	movwi [0]fsr1
 17363  14F1  3FC1               	movwi [1]fsr1
 17364                           
 17365                           ;matrix_task.c: 303: data->holdCountB = 0;
 17366  14F2  085A               	movf	matrix_Main@data,w
 17367  14F3  0086               	movwf	6
 17368  14F4  085B               	movf	matrix_Main@data+1,w
 17369  14F5  0087               	movwf	7
 17370  14F6  314B               	addfsr 1,11
 17371  14F7  3000               	movlw	0
 17372  14F8  3FC0               	movwi [0]fsr1
 17373  14F9  3FC1               	movwi [1]fsr1
 17374                           
 17375                           ;matrix_task.c: 304: data->holdCountX = 0;
 17376  14FA  085A               	movf	matrix_Main@data,w
 17377  14FB  0086               	movwf	6
 17378  14FC  085B               	movf	matrix_Main@data+1,w
 17379  14FD  0087               	movwf	7
 17380  14FE  314D               	addfsr 1,13
 17381  14FF  3000               	movlw	0
 17382  1500  3FC0               	movwi [0]fsr1
 17383  1501  3FC1               	movwi [1]fsr1
 17384                           
 17385                           ;matrix_task.c: 305: data->holdCountY = 0;
 17386  1502  085A               	movf	matrix_Main@data,w
 17387  1503  0086               	movwf	6
 17388  1504  085B               	movf	matrix_Main@data+1,w
 17389  1505  0087               	movwf	7
 17390  1506  314F               	addfsr 1,15
 17391  1507  3000               	movlw	0
 17392  1508  3FC0               	movwi [0]fsr1
 17393  1509  3FC1               	movwi [1]fsr1
 17394                           
 17395                           ;matrix_task.c: 306: data->holdCountXY = 0;
 17396  150A  085A               	movf	matrix_Main@data,w
 17397  150B  0086               	movwf	6
 17398  150C  085B               	movf	matrix_Main@data+1,w
 17399  150D  0087               	movwf	7
 17400  150E  3151               	addfsr 1,17
 17401  150F  3000               	movlw	0
 17402  1510  3FC0               	movwi [0]fsr1
 17403  1511  3FC1               	movwi [1]fsr1
 17404                           
 17405                           ;matrix_task.c: 307: data->holdCountAY = 0;
 17406  1512  085A               	movf	matrix_Main@data,w
 17407  1513  0086               	movwf	6
 17408  1514  085B               	movf	matrix_Main@data+1,w
 17409  1515  0087               	movwf	7
 17410  1516  3153               	addfsr 1,19
 17411  1517  3000               	movlw	0
 17412  1518  3FC0               	movwi [0]fsr1
 17413  1519  3FC1               	movwi [1]fsr1
 17414                           
 17415                           ;matrix_task.c: 308: data->holdCountAX += 1;
 17416  151A  085A               	movf	matrix_Main@data,w
 17417  151B  0086               	movwf	6
 17418  151C  085B               	movf	matrix_Main@data+1,w
 17419  151D  0087               	movwf	7
 17420  151E  3155               	addfsr 1,21
 17421  151F  3001               	movlw	1
 17422  1520  0781               	addwf	1,f
 17423  1521  3141               	addfsr 1,1
 17424  1522  1803               	skipnc
 17425  1523  0A81               	incf	1,f
 17426                           
 17427                           ;matrix_task.c: 309: data->holdCountBX = 0;
 17428  1524  085A               	movf	matrix_Main@data,w
 17429  1525  0086               	movwf	6
 17430  1526  085B               	movf	matrix_Main@data+1,w
 17431  1527  0087               	movwf	7
 17432  1528  3157               	addfsr 1,23
 17433  1529  3000               	movlw	0
 17434  152A  3FC0               	movwi [0]fsr1
 17435  152B  3FC1               	movwi [1]fsr1
 17436                           
 17437                           ;matrix_task.c: 310: data->holdCountBY = 0;
 17438  152C  085A               	movf	matrix_Main@data,w
 17439  152D  0086               	movwf	6
 17440  152E  085B               	movf	matrix_Main@data+1,w
 17441  152F  0087               	movwf	7
 17442  1530  3159               	addfsr 1,25
 17443  1531  3000               	movlw	0
 17444  1532  3FC0               	movwi [0]fsr1
 17445  1533  3FC1               	movwi [1]fsr1
 17446                           
 17447                           ;matrix_task.c: 311: data->holdCountBA = 0;
 17448  1534  085A               	movf	matrix_Main@data,w
 17449  1535  0086               	movwf	6
 17450  1536  085B               	movf	matrix_Main@data+1,w
 17451  1537  0087               	movwf	7
 17452  1538  315B               	addfsr 1,27
 17453  1539  3000               	movlw	0
 17454  153A  3FC0               	movwi [0]fsr1
 17455  153B  3FC1               	movwi [1]fsr1
 17456                           
 17457                           ;matrix_task.c: 312: data->noholdCount = 0;
 17458  153C  085A               	movf	matrix_Main@data,w
 17459  153D  0086               	movwf	6
 17460  153E  085B               	movf	matrix_Main@data+1,w
 17461  153F  0087               	movwf	7
 17462  1540  315D               	addfsr 1,29
 17463  1541  3000               	movlw	0
 17464  1542  3FC0               	movwi [0]fsr1
 17465  1543  3FC1               	movwi [1]fsr1
 17466                           
 17467                           ;matrix_task.c: 313: data->displayTickdown = 300;
 17468  1544  085A               	movf	matrix_Main@data,w
 17469  1545  0086               	movwf	6
 17470  1546  085B               	movf	matrix_Main@data+1,w
 17471  1547  0087               	movwf	7
 17472  1548  3147               	addfsr 1,7
 17473  1549  302C               	movlw	44
 17474  154A  3FC0               	movwi [0]fsr1
 17475  154B  3001               	movlw	1
 17476  154C  3FC1               	movwi [1]fsr1
 17477                           
 17478                           ;matrix_task.c: 314: break;
 17479  154D  2FB4               	goto	l10235
 17480  154E                     l10111:	
 17481                           ;matrix_task.c: 315: case 2 | 4:
 17482                           
 17483                           
 17484                           ;matrix_task.c: 317: if (data->holdCountBX == holdvalue){
 17485  154E  085A               	movf	matrix_Main@data,w
 17486  154F  0086               	movwf	6
 17487  1550  085B               	movf	matrix_Main@data+1,w
 17488  1551  0087               	movwf	7
 17489  1552  3157               	addfsr 1,23
 17490  1553  3F40               	moviw [0]fsr1
 17491  1554  00D4               	movwf	??_matrix_Main
 17492  1555  3F41               	moviw [1]fsr1
 17493  1556  00D5               	movwf	??_matrix_Main+1
 17494  1557  0859               	movf	matrix_Main@holdvalue,w
 17495  1558  00D6               	movwf	??_matrix_Main+2
 17496  1559  01D7               	clrf	??_matrix_Main+3
 17497  155A  0855               	movf	??_matrix_Main+1,w
 17498  155B  0657               	xorwf	??_matrix_Main+3,w
 17499  155C  1D03               	skipz
 17500  155D  2D60               	goto	u6405
 17501  155E  0854               	movf	??_matrix_Main,w
 17502  155F  0656               	xorwf	??_matrix_Main+2,w
 17503  1560                     u6405:	
 17504  1560  1D03               	skipz
 17505  1561  2D7F               	goto	l10117
 17506                           
 17507                           ;matrix_task.c: 318: matrix_found = matrix_secret_check(data, 2 | 4);
 17508  1562  085B               	movf	matrix_Main@data+1,w
 17509  1563  00F8               	movwf	matrix_secret_check@data+1
 17510  1564  085A               	movf	matrix_Main@data,w
 17511  1565  00F7               	movwf	matrix_secret_check@data
 17512  1566  3006               	movlw	6
 17513  1567  00D4               	movwf	??_matrix_Main
 17514  1568  0854               	movf	??_matrix_Main,w
 17515  1569  00F9               	movwf	matrix_secret_check@buttonPressed
 17516  156A  31A6  2645  3190   	fcall	_matrix_secret_check
 17517  156D  0020               	movlb	0	; select bank0
 17518  156E  00D5               	movwf	??_matrix_Main+1
 17519  156F  0855               	movf	??_matrix_Main+1,w
 17520  1570  0021               	movlb	1	; select bank1
 17521  1571  00C2               	movwf	_matrix_found^(0+128)
 17522                           
 17523                           ;matrix_task.c: 319: data->display_state = MATRIX_BX;
 17524  1572  0020               	movlb	0	; select bank0
 17525  1573  085A               	movf	matrix_Main@data,w
 17526  1574  3E02               	addlw	2
 17527  1575  00D4               	movwf	??_matrix_Main
 17528  1576  3000               	movlw	0
 17529  1577  3D5B               	addwfc	matrix_Main@data+1,w
 17530  1578  00D5               	movwf	??_matrix_Main+1
 17531  1579  0854               	movf	??_matrix_Main,w
 17532  157A  0086               	movwf	6
 17533  157B  0855               	movf	??_matrix_Main+1,w
 17534  157C  0087               	movwf	7
 17535  157D  3007               	movlw	7
 17536  157E  0081               	movwf	1
 17537  157F                     l10117:	
 17538                           
 17539                           ;matrix_task.c: 320: }
 17540                           ;matrix_task.c: 321: data->holdCountA = 0;
 17541  157F  085A               	movf	matrix_Main@data,w
 17542  1580  0086               	movwf	6
 17543  1581  085B               	movf	matrix_Main@data+1,w
 17544  1582  0087               	movwf	7
 17545  1583  3149               	addfsr 1,9
 17546  1584  3000               	movlw	0
 17547  1585  3FC0               	movwi [0]fsr1
 17548  1586  3FC1               	movwi [1]fsr1
 17549                           
 17550                           ;matrix_task.c: 322: data->holdCountB = 0;
 17551  1587  085A               	movf	matrix_Main@data,w
 17552  1588  0086               	movwf	6
 17553  1589  085B               	movf	matrix_Main@data+1,w
 17554  158A  0087               	movwf	7
 17555  158B  314B               	addfsr 1,11
 17556  158C  3000               	movlw	0
 17557  158D  3FC0               	movwi [0]fsr1
 17558  158E  3FC1               	movwi [1]fsr1
 17559                           
 17560                           ;matrix_task.c: 323: data->holdCountX = 0;
 17561  158F  085A               	movf	matrix_Main@data,w
 17562  1590  0086               	movwf	6
 17563  1591  085B               	movf	matrix_Main@data+1,w
 17564  1592  0087               	movwf	7
 17565  1593  314D               	addfsr 1,13
 17566  1594  3000               	movlw	0
 17567  1595  3FC0               	movwi [0]fsr1
 17568  1596  3FC1               	movwi [1]fsr1
 17569                           
 17570                           ;matrix_task.c: 324: data->holdCountY = 0;
 17571  1597  085A               	movf	matrix_Main@data,w
 17572  1598  0086               	movwf	6
 17573  1599  085B               	movf	matrix_Main@data+1,w
 17574  159A  0087               	movwf	7
 17575  159B  314F               	addfsr 1,15
 17576  159C  3000               	movlw	0
 17577  159D  3FC0               	movwi [0]fsr1
 17578  159E  3FC1               	movwi [1]fsr1
 17579                           
 17580                           ;matrix_task.c: 325: data->holdCountXY = 0;
 17581  159F  085A               	movf	matrix_Main@data,w
 17582  15A0  0086               	movwf	6
 17583  15A1  085B               	movf	matrix_Main@data+1,w
 17584  15A2  0087               	movwf	7
 17585  15A3  3151               	addfsr 1,17
 17586  15A4  3000               	movlw	0
 17587  15A5  3FC0               	movwi [0]fsr1
 17588  15A6  3FC1               	movwi [1]fsr1
 17589                           
 17590                           ;matrix_task.c: 326: data->holdCountAY = 0;
 17591  15A7  085A               	movf	matrix_Main@data,w
 17592  15A8  0086               	movwf	6
 17593  15A9  085B               	movf	matrix_Main@data+1,w
 17594  15AA  0087               	movwf	7
 17595  15AB  3153               	addfsr 1,19
 17596  15AC  3000               	movlw	0
 17597  15AD  3FC0               	movwi [0]fsr1
 17598  15AE  3FC1               	movwi [1]fsr1
 17599                           
 17600                           ;matrix_task.c: 327: data->holdCountAX = 0;
 17601  15AF  085A               	movf	matrix_Main@data,w
 17602  15B0  0086               	movwf	6
 17603  15B1  085B               	movf	matrix_Main@data+1,w
 17604  15B2  0087               	movwf	7
 17605  15B3  3155               	addfsr 1,21
 17606  15B4  3000               	movlw	0
 17607  15B5  3FC0               	movwi [0]fsr1
 17608  15B6  3FC1               	movwi [1]fsr1
 17609                           
 17610                           ;matrix_task.c: 328: data->holdCountBX += 1;
 17611  15B7  085A               	movf	matrix_Main@data,w
 17612  15B8  0086               	movwf	6
 17613  15B9  085B               	movf	matrix_Main@data+1,w
 17614  15BA  0087               	movwf	7
 17615  15BB  3157               	addfsr 1,23
 17616  15BC  3001               	movlw	1
 17617  15BD  0781               	addwf	1,f
 17618  15BE  3141               	addfsr 1,1
 17619  15BF  1803               	skipnc
 17620  15C0  0A81               	incf	1,f
 17621                           
 17622                           ;matrix_task.c: 329: data->holdCountBY = 0;
 17623  15C1  085A               	movf	matrix_Main@data,w
 17624  15C2  0086               	movwf	6
 17625  15C3  085B               	movf	matrix_Main@data+1,w
 17626  15C4  0087               	movwf	7
 17627  15C5  3159               	addfsr 1,25
 17628  15C6  3000               	movlw	0
 17629  15C7  3FC0               	movwi [0]fsr1
 17630  15C8  3FC1               	movwi [1]fsr1
 17631                           
 17632                           ;matrix_task.c: 330: data->holdCountBA = 0;
 17633  15C9  085A               	movf	matrix_Main@data,w
 17634  15CA  0086               	movwf	6
 17635  15CB  085B               	movf	matrix_Main@data+1,w
 17636  15CC  0087               	movwf	7
 17637  15CD  315B               	addfsr 1,27
 17638  15CE  3000               	movlw	0
 17639  15CF  3FC0               	movwi [0]fsr1
 17640  15D0  3FC1               	movwi [1]fsr1
 17641                           
 17642                           ;matrix_task.c: 331: data->noholdCount = 0;
 17643  15D1  085A               	movf	matrix_Main@data,w
 17644  15D2  0086               	movwf	6
 17645  15D3  085B               	movf	matrix_Main@data+1,w
 17646  15D4  0087               	movwf	7
 17647  15D5  315D               	addfsr 1,29
 17648  15D6  3000               	movlw	0
 17649  15D7  3FC0               	movwi [0]fsr1
 17650  15D8  3FC1               	movwi [1]fsr1
 17651                           
 17652                           ;matrix_task.c: 332: data->displayTickdown = 300;
 17653  15D9  085A               	movf	matrix_Main@data,w
 17654  15DA  0086               	movwf	6
 17655  15DB  085B               	movf	matrix_Main@data+1,w
 17656  15DC  0087               	movwf	7
 17657  15DD  3147               	addfsr 1,7
 17658  15DE  302C               	movlw	44
 17659  15DF  3FC0               	movwi [0]fsr1
 17660  15E0  3001               	movlw	1
 17661  15E1  3FC1               	movwi [1]fsr1
 17662                           
 17663                           ;matrix_task.c: 333: break;
 17664  15E2  2FB4               	goto	l10235
 17665  15E3                     l10141:	
 17666                           ;matrix_task.c: 334: case 2 | 8:
 17667                           
 17668                           
 17669                           ;matrix_task.c: 336: if (data->holdCountBY == holdvalue){
 17670  15E3  085A               	movf	matrix_Main@data,w
 17671  15E4  0086               	movwf	6
 17672  15E5  085B               	movf	matrix_Main@data+1,w
 17673  15E6  0087               	movwf	7
 17674  15E7  3159               	addfsr 1,25
 17675  15E8  3F40               	moviw [0]fsr1
 17676  15E9  00D4               	movwf	??_matrix_Main
 17677  15EA  3F41               	moviw [1]fsr1
 17678  15EB  00D5               	movwf	??_matrix_Main+1
 17679  15EC  0859               	movf	matrix_Main@holdvalue,w
 17680  15ED  00D6               	movwf	??_matrix_Main+2
 17681  15EE  01D7               	clrf	??_matrix_Main+3
 17682  15EF  0855               	movf	??_matrix_Main+1,w
 17683  15F0  0657               	xorwf	??_matrix_Main+3,w
 17684  15F1  1D03               	skipz
 17685  15F2  2DF5               	goto	u6415
 17686  15F3  0854               	movf	??_matrix_Main,w
 17687  15F4  0656               	xorwf	??_matrix_Main+2,w
 17688  15F5                     u6415:	
 17689  15F5  1D03               	skipz
 17690  15F6  2E14               	goto	l10147
 17691                           
 17692                           ;matrix_task.c: 337: matrix_found = matrix_secret_check(data, 2 | 8);
 17693  15F7  085B               	movf	matrix_Main@data+1,w
 17694  15F8  00F8               	movwf	matrix_secret_check@data+1
 17695  15F9  085A               	movf	matrix_Main@data,w
 17696  15FA  00F7               	movwf	matrix_secret_check@data
 17697  15FB  300A               	movlw	10
 17698  15FC  00D4               	movwf	??_matrix_Main
 17699  15FD  0854               	movf	??_matrix_Main,w
 17700  15FE  00F9               	movwf	matrix_secret_check@buttonPressed
 17701  15FF  31A6  2645  3190   	fcall	_matrix_secret_check
 17702  1602  0020               	movlb	0	; select bank0
 17703  1603  00D5               	movwf	??_matrix_Main+1
 17704  1604  0855               	movf	??_matrix_Main+1,w
 17705  1605  0021               	movlb	1	; select bank1
 17706  1606  00C2               	movwf	_matrix_found^(0+128)
 17707                           
 17708                           ;matrix_task.c: 338: data->display_state = MATRIX_BY;
 17709  1607  0020               	movlb	0	; select bank0
 17710  1608  085A               	movf	matrix_Main@data,w
 17711  1609  3E02               	addlw	2
 17712  160A  00D4               	movwf	??_matrix_Main
 17713  160B  3000               	movlw	0
 17714  160C  3D5B               	addwfc	matrix_Main@data+1,w
 17715  160D  00D5               	movwf	??_matrix_Main+1
 17716  160E  0854               	movf	??_matrix_Main,w
 17717  160F  0086               	movwf	6
 17718  1610  0855               	movf	??_matrix_Main+1,w
 17719  1611  0087               	movwf	7
 17720  1612  3009               	movlw	9
 17721  1613  0081               	movwf	1
 17722  1614                     l10147:	
 17723                           
 17724                           ;matrix_task.c: 339: }
 17725                           ;matrix_task.c: 340: data->holdCountA = 0;
 17726  1614  085A               	movf	matrix_Main@data,w
 17727  1615  0086               	movwf	6
 17728  1616  085B               	movf	matrix_Main@data+1,w
 17729  1617  0087               	movwf	7
 17730  1618  3149               	addfsr 1,9
 17731  1619  3000               	movlw	0
 17732  161A  3FC0               	movwi [0]fsr1
 17733  161B  3FC1               	movwi [1]fsr1
 17734                           
 17735                           ;matrix_task.c: 341: data->holdCountB = 0;
 17736  161C  085A               	movf	matrix_Main@data,w
 17737  161D  0086               	movwf	6
 17738  161E  085B               	movf	matrix_Main@data+1,w
 17739  161F  0087               	movwf	7
 17740  1620  314B               	addfsr 1,11
 17741  1621  3000               	movlw	0
 17742  1622  3FC0               	movwi [0]fsr1
 17743  1623  3FC1               	movwi [1]fsr1
 17744                           
 17745                           ;matrix_task.c: 342: data->holdCountX = 0;
 17746  1624  085A               	movf	matrix_Main@data,w
 17747  1625  0086               	movwf	6
 17748  1626  085B               	movf	matrix_Main@data+1,w
 17749  1627  0087               	movwf	7
 17750  1628  314D               	addfsr 1,13
 17751  1629  3000               	movlw	0
 17752  162A  3FC0               	movwi [0]fsr1
 17753  162B  3FC1               	movwi [1]fsr1
 17754                           
 17755                           ;matrix_task.c: 343: data->holdCountY = 0;
 17756  162C  085A               	movf	matrix_Main@data,w
 17757  162D  0086               	movwf	6
 17758  162E  085B               	movf	matrix_Main@data+1,w
 17759  162F  0087               	movwf	7
 17760  1630  314F               	addfsr 1,15
 17761  1631  3000               	movlw	0
 17762  1632  3FC0               	movwi [0]fsr1
 17763  1633  3FC1               	movwi [1]fsr1
 17764                           
 17765                           ;matrix_task.c: 344: data->holdCountXY = 0;
 17766  1634  085A               	movf	matrix_Main@data,w
 17767  1635  0086               	movwf	6
 17768  1636  085B               	movf	matrix_Main@data+1,w
 17769  1637  0087               	movwf	7
 17770  1638  3151               	addfsr 1,17
 17771  1639  3000               	movlw	0
 17772  163A  3FC0               	movwi [0]fsr1
 17773  163B  3FC1               	movwi [1]fsr1
 17774                           
 17775                           ;matrix_task.c: 345: data->holdCountAY = 0;
 17776  163C  085A               	movf	matrix_Main@data,w
 17777  163D  0086               	movwf	6
 17778  163E  085B               	movf	matrix_Main@data+1,w
 17779  163F  0087               	movwf	7
 17780  1640  3153               	addfsr 1,19
 17781  1641  3000               	movlw	0
 17782  1642  3FC0               	movwi [0]fsr1
 17783  1643  3FC1               	movwi [1]fsr1
 17784                           
 17785                           ;matrix_task.c: 346: data->holdCountAX = 0;
 17786  1644  085A               	movf	matrix_Main@data,w
 17787  1645  0086               	movwf	6
 17788  1646  085B               	movf	matrix_Main@data+1,w
 17789  1647  0087               	movwf	7
 17790  1648  3155               	addfsr 1,21
 17791  1649  3000               	movlw	0
 17792  164A  3FC0               	movwi [0]fsr1
 17793  164B  3FC1               	movwi [1]fsr1
 17794                           
 17795                           ;matrix_task.c: 347: data->holdCountBX = 0;
 17796  164C  085A               	movf	matrix_Main@data,w
 17797  164D  0086               	movwf	6
 17798  164E  085B               	movf	matrix_Main@data+1,w
 17799  164F  0087               	movwf	7
 17800  1650  3157               	addfsr 1,23
 17801  1651  3000               	movlw	0
 17802  1652  3FC0               	movwi [0]fsr1
 17803  1653  3FC1               	movwi [1]fsr1
 17804                           
 17805                           ;matrix_task.c: 348: data->holdCountBY += 1;
 17806  1654  085A               	movf	matrix_Main@data,w
 17807  1655  0086               	movwf	6
 17808  1656  085B               	movf	matrix_Main@data+1,w
 17809  1657  0087               	movwf	7
 17810  1658  3159               	addfsr 1,25
 17811  1659  3001               	movlw	1
 17812  165A  0781               	addwf	1,f
 17813  165B  3141               	addfsr 1,1
 17814  165C  1803               	skipnc
 17815  165D  0A81               	incf	1,f
 17816                           
 17817                           ;matrix_task.c: 349: data->holdCountBA = 0;
 17818  165E  085A               	movf	matrix_Main@data,w
 17819  165F  0086               	movwf	6
 17820  1660  085B               	movf	matrix_Main@data+1,w
 17821  1661  0087               	movwf	7
 17822  1662  315B               	addfsr 1,27
 17823  1663  3000               	movlw	0
 17824  1664  3FC0               	movwi [0]fsr1
 17825  1665  3FC1               	movwi [1]fsr1
 17826                           
 17827                           ;matrix_task.c: 350: data->noholdCount = 0;
 17828  1666  085A               	movf	matrix_Main@data,w
 17829  1667  0086               	movwf	6
 17830  1668  085B               	movf	matrix_Main@data+1,w
 17831  1669  0087               	movwf	7
 17832  166A  315D               	addfsr 1,29
 17833  166B  3000               	movlw	0
 17834  166C  3FC0               	movwi [0]fsr1
 17835  166D  3FC1               	movwi [1]fsr1
 17836                           
 17837                           ;matrix_task.c: 351: data->displayTickdown = 300;
 17838  166E  085A               	movf	matrix_Main@data,w
 17839  166F  0086               	movwf	6
 17840  1670  085B               	movf	matrix_Main@data+1,w
 17841  1671  0087               	movwf	7
 17842  1672  3147               	addfsr 1,7
 17843  1673  302C               	movlw	44
 17844  1674  3FC0               	movwi [0]fsr1
 17845  1675  3001               	movlw	1
 17846  1676  3FC1               	movwi [1]fsr1
 17847                           
 17848                           ;matrix_task.c: 353: break;
 17849  1677  2FB4               	goto	l10235
 17850  1678                     l10171:	
 17851                           ;matrix_task.c: 354: case 2 | 1:
 17852                           
 17853                           
 17854                           ;matrix_task.c: 356: if (data->holdCountBA == holdvalue){
 17855  1678  085A               	movf	matrix_Main@data,w
 17856  1679  0086               	movwf	6
 17857  167A  085B               	movf	matrix_Main@data+1,w
 17858  167B  0087               	movwf	7
 17859  167C  315B               	addfsr 1,27
 17860  167D  3F40               	moviw [0]fsr1
 17861  167E  00D4               	movwf	??_matrix_Main
 17862  167F  3F41               	moviw [1]fsr1
 17863  1680  00D5               	movwf	??_matrix_Main+1
 17864  1681  0859               	movf	matrix_Main@holdvalue,w
 17865  1682  00D6               	movwf	??_matrix_Main+2
 17866  1683  01D7               	clrf	??_matrix_Main+3
 17867  1684  0855               	movf	??_matrix_Main+1,w
 17868  1685  0657               	xorwf	??_matrix_Main+3,w
 17869  1686  1D03               	skipz
 17870  1687  2E8A               	goto	u6425
 17871  1688  0854               	movf	??_matrix_Main,w
 17872  1689  0656               	xorwf	??_matrix_Main+2,w
 17873  168A                     u6425:	
 17874  168A  1D03               	skipz
 17875  168B  2EA9               	goto	l10177
 17876                           
 17877                           ;matrix_task.c: 357: matrix_found = matrix_secret_check(data, 2 | 1);
 17878  168C  085B               	movf	matrix_Main@data+1,w
 17879  168D  00F8               	movwf	matrix_secret_check@data+1
 17880  168E  085A               	movf	matrix_Main@data,w
 17881  168F  00F7               	movwf	matrix_secret_check@data
 17882  1690  3003               	movlw	3
 17883  1691  00D4               	movwf	??_matrix_Main
 17884  1692  0854               	movf	??_matrix_Main,w
 17885  1693  00F9               	movwf	matrix_secret_check@buttonPressed
 17886  1694  31A6  2645  3190   	fcall	_matrix_secret_check
 17887  1697  0020               	movlb	0	; select bank0
 17888  1698  00D5               	movwf	??_matrix_Main+1
 17889  1699  0855               	movf	??_matrix_Main+1,w
 17890  169A  0021               	movlb	1	; select bank1
 17891  169B  00C2               	movwf	_matrix_found^(0+128)
 17892                           
 17893                           ;matrix_task.c: 358: data->display_state = MATRIX_BA;
 17894  169C  0020               	movlb	0	; select bank0
 17895  169D  085A               	movf	matrix_Main@data,w
 17896  169E  3E02               	addlw	2
 17897  169F  00D4               	movwf	??_matrix_Main
 17898  16A0  3000               	movlw	0
 17899  16A1  3D5B               	addwfc	matrix_Main@data+1,w
 17900  16A2  00D5               	movwf	??_matrix_Main+1
 17901  16A3  0854               	movf	??_matrix_Main,w
 17902  16A4  0086               	movwf	6
 17903  16A5  0855               	movf	??_matrix_Main+1,w
 17904  16A6  0087               	movwf	7
 17905  16A7  3006               	movlw	6
 17906  16A8  0081               	movwf	1
 17907  16A9                     l10177:	
 17908                           
 17909                           ;matrix_task.c: 359: }
 17910                           ;matrix_task.c: 360: data->holdCountA = 0;
 17911  16A9  085A               	movf	matrix_Main@data,w
 17912  16AA  0086               	movwf	6
 17913  16AB  085B               	movf	matrix_Main@data+1,w
 17914  16AC  0087               	movwf	7
 17915  16AD  3149               	addfsr 1,9
 17916  16AE  3000               	movlw	0
 17917  16AF  3FC0               	movwi [0]fsr1
 17918  16B0  3FC1               	movwi [1]fsr1
 17919                           
 17920                           ;matrix_task.c: 361: data->holdCountB = 0;
 17921  16B1  085A               	movf	matrix_Main@data,w
 17922  16B2  0086               	movwf	6
 17923  16B3  085B               	movf	matrix_Main@data+1,w
 17924  16B4  0087               	movwf	7
 17925  16B5  314B               	addfsr 1,11
 17926  16B6  3000               	movlw	0
 17927  16B7  3FC0               	movwi [0]fsr1
 17928  16B8  3FC1               	movwi [1]fsr1
 17929                           
 17930                           ;matrix_task.c: 362: data->holdCountX = 0;
 17931  16B9  085A               	movf	matrix_Main@data,w
 17932  16BA  0086               	movwf	6
 17933  16BB  085B               	movf	matrix_Main@data+1,w
 17934  16BC  0087               	movwf	7
 17935  16BD  314D               	addfsr 1,13
 17936  16BE  3000               	movlw	0
 17937  16BF  3FC0               	movwi [0]fsr1
 17938  16C0  3FC1               	movwi [1]fsr1
 17939                           
 17940                           ;matrix_task.c: 363: data->holdCountY = 0;
 17941  16C1  085A               	movf	matrix_Main@data,w
 17942  16C2  0086               	movwf	6
 17943  16C3  085B               	movf	matrix_Main@data+1,w
 17944  16C4  0087               	movwf	7
 17945  16C5  314F               	addfsr 1,15
 17946  16C6  3000               	movlw	0
 17947  16C7  3FC0               	movwi [0]fsr1
 17948  16C8  3FC1               	movwi [1]fsr1
 17949                           
 17950                           ;matrix_task.c: 364: data->holdCountXY = 0;
 17951  16C9  085A               	movf	matrix_Main@data,w
 17952  16CA  0086               	movwf	6
 17953  16CB  085B               	movf	matrix_Main@data+1,w
 17954  16CC  0087               	movwf	7
 17955  16CD  3151               	addfsr 1,17
 17956  16CE  3000               	movlw	0
 17957  16CF  3FC0               	movwi [0]fsr1
 17958  16D0  3FC1               	movwi [1]fsr1
 17959                           
 17960                           ;matrix_task.c: 365: data->holdCountAY = 0;
 17961  16D1  085A               	movf	matrix_Main@data,w
 17962  16D2  0086               	movwf	6
 17963  16D3  085B               	movf	matrix_Main@data+1,w
 17964  16D4  0087               	movwf	7
 17965  16D5  3153               	addfsr 1,19
 17966  16D6  3000               	movlw	0
 17967  16D7  3FC0               	movwi [0]fsr1
 17968  16D8  3FC1               	movwi [1]fsr1
 17969                           
 17970                           ;matrix_task.c: 366: data->holdCountAX = 0;
 17971  16D9  085A               	movf	matrix_Main@data,w
 17972  16DA  0086               	movwf	6
 17973  16DB  085B               	movf	matrix_Main@data+1,w
 17974  16DC  0087               	movwf	7
 17975  16DD  3155               	addfsr 1,21
 17976  16DE  3000               	movlw	0
 17977  16DF  3FC0               	movwi [0]fsr1
 17978  16E0  3FC1               	movwi [1]fsr1
 17979                           
 17980                           ;matrix_task.c: 367: data->holdCountBX = 0;
 17981  16E1  085A               	movf	matrix_Main@data,w
 17982  16E2  0086               	movwf	6
 17983  16E3  085B               	movf	matrix_Main@data+1,w
 17984  16E4  0087               	movwf	7
 17985  16E5  3157               	addfsr 1,23
 17986  16E6  3000               	movlw	0
 17987  16E7  3FC0               	movwi [0]fsr1
 17988  16E8  3FC1               	movwi [1]fsr1
 17989                           
 17990                           ;matrix_task.c: 368: data->holdCountBY = 0;
 17991  16E9  085A               	movf	matrix_Main@data,w
 17992  16EA  0086               	movwf	6
 17993  16EB  085B               	movf	matrix_Main@data+1,w
 17994  16EC  0087               	movwf	7
 17995  16ED  3159               	addfsr 1,25
 17996  16EE  3000               	movlw	0
 17997  16EF  3FC0               	movwi [0]fsr1
 17998  16F0  3FC1               	movwi [1]fsr1
 17999                           
 18000                           ;matrix_task.c: 369: data->holdCountBA += 1;
 18001  16F1  085A               	movf	matrix_Main@data,w
 18002  16F2  0086               	movwf	6
 18003  16F3  085B               	movf	matrix_Main@data+1,w
 18004  16F4  0087               	movwf	7
 18005  16F5  315B               	addfsr 1,27
 18006  16F6  3001               	movlw	1
 18007  16F7  0781               	addwf	1,f
 18008  16F8  3141               	addfsr 1,1
 18009  16F9  1803               	skipnc
 18010  16FA  0A81               	incf	1,f
 18011                           
 18012                           ;matrix_task.c: 370: data->noholdCount = 0;
 18013  16FB  085A               	movf	matrix_Main@data,w
 18014  16FC  0086               	movwf	6
 18015  16FD  085B               	movf	matrix_Main@data+1,w
 18016  16FE  0087               	movwf	7
 18017  16FF  315D               	addfsr 1,29
 18018  1700  3000               	movlw	0
 18019  1701  3FC0               	movwi [0]fsr1
 18020  1702  3FC1               	movwi [1]fsr1
 18021                           
 18022                           ;matrix_task.c: 371: data->displayTickdown = 300;
 18023  1703  085A               	movf	matrix_Main@data,w
 18024  1704  0086               	movwf	6
 18025  1705  085B               	movf	matrix_Main@data+1,w
 18026  1706  0087               	movwf	7
 18027  1707  3147               	addfsr 1,7
 18028  1708  302C               	movlw	44
 18029  1709  3FC0               	movwi [0]fsr1
 18030  170A  3001               	movlw	1
 18031  170B  3FC1               	movwi [1]fsr1
 18032                           
 18033                           ;matrix_task.c: 372: break;
 18034  170C  2FB4               	goto	l10235
 18035  170D                     l10201:	
 18036                           ;matrix_task.c: 373: default:
 18037                           
 18038                           
 18039                           ;matrix_task.c: 374: data->noholdCount += 1;
 18040  170D  085A               	movf	matrix_Main@data,w
 18041  170E  0086               	movwf	6
 18042  170F  085B               	movf	matrix_Main@data+1,w
 18043  1710  0087               	movwf	7
 18044  1711  315D               	addfsr 1,29
 18045  1712  3001               	movlw	1
 18046  1713  0781               	addwf	1,f
 18047  1714  3141               	addfsr 1,1
 18048  1715  1803               	skipnc
 18049  1716  0A81               	incf	1,f
 18050                           
 18051                           ;matrix_task.c: 375: data->holdCountA = 0;
 18052  1717  085A               	movf	matrix_Main@data,w
 18053  1718  0086               	movwf	6
 18054  1719  085B               	movf	matrix_Main@data+1,w
 18055  171A  0087               	movwf	7
 18056  171B  3149               	addfsr 1,9
 18057  171C  3000               	movlw	0
 18058  171D  3FC0               	movwi [0]fsr1
 18059  171E  3FC1               	movwi [1]fsr1
 18060                           
 18061                           ;matrix_task.c: 376: data->holdCountB = 0;
 18062  171F  085A               	movf	matrix_Main@data,w
 18063  1720  0086               	movwf	6
 18064  1721  085B               	movf	matrix_Main@data+1,w
 18065  1722  0087               	movwf	7
 18066  1723  314B               	addfsr 1,11
 18067  1724  3000               	movlw	0
 18068  1725  3FC0               	movwi [0]fsr1
 18069  1726  3FC1               	movwi [1]fsr1
 18070                           
 18071                           ;matrix_task.c: 377: data->holdCountX = 0;
 18072  1727  085A               	movf	matrix_Main@data,w
 18073  1728  0086               	movwf	6
 18074  1729  085B               	movf	matrix_Main@data+1,w
 18075  172A  0087               	movwf	7
 18076  172B  314D               	addfsr 1,13
 18077  172C  3000               	movlw	0
 18078  172D  3FC0               	movwi [0]fsr1
 18079  172E  3FC1               	movwi [1]fsr1
 18080                           
 18081                           ;matrix_task.c: 378: data->holdCountY = 0;
 18082  172F  085A               	movf	matrix_Main@data,w
 18083  1730  0086               	movwf	6
 18084  1731  085B               	movf	matrix_Main@data+1,w
 18085  1732  0087               	movwf	7
 18086  1733  314F               	addfsr 1,15
 18087  1734  3000               	movlw	0
 18088  1735  3FC0               	movwi [0]fsr1
 18089  1736  3FC1               	movwi [1]fsr1
 18090                           
 18091                           ;matrix_task.c: 379: data->holdCountXY = 0;
 18092  1737  085A               	movf	matrix_Main@data,w
 18093  1738  0086               	movwf	6
 18094  1739  085B               	movf	matrix_Main@data+1,w
 18095  173A  0087               	movwf	7
 18096  173B  3151               	addfsr 1,17
 18097  173C  3000               	movlw	0
 18098  173D  3FC0               	movwi [0]fsr1
 18099  173E  3FC1               	movwi [1]fsr1
 18100                           
 18101                           ;matrix_task.c: 380: data->holdCountAY = 0;
 18102  173F  085A               	movf	matrix_Main@data,w
 18103  1740  0086               	movwf	6
 18104  1741  085B               	movf	matrix_Main@data+1,w
 18105  1742  0087               	movwf	7
 18106  1743  3153               	addfsr 1,19
 18107  1744  3000               	movlw	0
 18108  1745  3FC0               	movwi [0]fsr1
 18109  1746  3FC1               	movwi [1]fsr1
 18110                           
 18111                           ;matrix_task.c: 381: data->holdCountAX = 0;
 18112  1747  085A               	movf	matrix_Main@data,w
 18113  1748  0086               	movwf	6
 18114  1749  085B               	movf	matrix_Main@data+1,w
 18115  174A  0087               	movwf	7
 18116  174B  3155               	addfsr 1,21
 18117  174C  3000               	movlw	0
 18118  174D  3FC0               	movwi [0]fsr1
 18119  174E  3FC1               	movwi [1]fsr1
 18120                           
 18121                           ;matrix_task.c: 382: data->holdCountBX = 0;
 18122  174F  085A               	movf	matrix_Main@data,w
 18123  1750  0086               	movwf	6
 18124  1751  085B               	movf	matrix_Main@data+1,w
 18125  1752  0087               	movwf	7
 18126  1753  3157               	addfsr 1,23
 18127  1754  3000               	movlw	0
 18128  1755  3FC0               	movwi [0]fsr1
 18129  1756  3FC1               	movwi [1]fsr1
 18130                           
 18131                           ;matrix_task.c: 383: data->holdCountBY = 0;
 18132  1757  085A               	movf	matrix_Main@data,w
 18133  1758  0086               	movwf	6
 18134  1759  085B               	movf	matrix_Main@data+1,w
 18135  175A  0087               	movwf	7
 18136  175B  3159               	addfsr 1,25
 18137  175C  3000               	movlw	0
 18138  175D  3FC0               	movwi [0]fsr1
 18139  175E  3FC1               	movwi [1]fsr1
 18140                           
 18141                           ;matrix_task.c: 384: data->holdCountBA = 0;
 18142  175F  085A               	movf	matrix_Main@data,w
 18143  1760  0086               	movwf	6
 18144  1761  085B               	movf	matrix_Main@data+1,w
 18145  1762  0087               	movwf	7
 18146  1763  315B               	addfsr 1,27
 18147  1764  3000               	movlw	0
 18148  1765  3FC0               	movwi [0]fsr1
 18149  1766  3FC1               	movwi [1]fsr1
 18150                           
 18151                           ;matrix_task.c: 385: if (matrix_found){
 18152  1767  0021               	movlb	1	; select bank1
 18153  1768  0842               	movf	_matrix_found^(0+128),w
 18154  1769  1903               	btfsc	3,2
 18155  176A  2F7F               	goto	l10229
 18156                           
 18157                           ;matrix_task.c: 386: data->display_state = MATRIX_DONE;
 18158  176B  0020               	movlb	0	; select bank0
 18159  176C  085A               	movf	matrix_Main@data,w
 18160  176D  3E02               	addlw	2
 18161  176E  00D4               	movwf	??_matrix_Main
 18162  176F  3000               	movlw	0
 18163  1770  3D5B               	addwfc	matrix_Main@data+1,w
 18164  1771  00D5               	movwf	??_matrix_Main+1
 18165  1772  0854               	movf	??_matrix_Main,w
 18166  1773  0086               	movwf	6
 18167  1774  0855               	movf	??_matrix_Main+1,w
 18168  1775  0087               	movwf	7
 18169  1776  300B               	movlw	11
 18170  1777  0081               	movwf	1
 18171                           
 18172                           ;matrix_task.c: 387: data->martix_state = MATRIX_SOLVED;
 18173  1778  085A               	movf	matrix_Main@data,w
 18174  1779  0086               	movwf	6
 18175  177A  085B               	movf	matrix_Main@data+1,w
 18176  177B  0087               	movwf	7
 18177  177C  3141               	addfsr 1,1
 18178  177D  0181               	clrf	1
 18179                           
 18180                           ;matrix_task.c: 388: break;
 18181  177E  2FB4               	goto	l10235
 18182  177F                     l10229:	
 18183                           
 18184                           ;matrix_task.c: 389: }
 18185                           ;matrix_task.c: 390: data->displayTickdown -= 1;
 18186  177F  0020               	movlb	0	; select bank0
 18187  1780  085A               	movf	matrix_Main@data,w
 18188  1781  0086               	movwf	6
 18189  1782  085B               	movf	matrix_Main@data+1,w
 18190  1783  0087               	movwf	7
 18191  1784  3147               	addfsr 1,7
 18192  1785  3001               	movlw	1
 18193  1786  0281               	subwf	1,f
 18194  1787  3141               	addfsr 1,1
 18195  1788  3000               	movlw	0
 18196  1789  3B81               	subwfb	1,f
 18197  178A  317F               	addfsr 1,-1
 18198                           
 18199                           ;matrix_task.c: 391: matrix_display_option(data);
 18200  178B  085B               	movf	matrix_Main@data+1,w
 18201  178C  00CD               	movwf	matrix_display_option@data+1
 18202  178D  085A               	movf	matrix_Main@data,w
 18203  178E  00CC               	movwf	matrix_display_option@data
 18204  178F  31A4  24E7  3190   	fcall	_matrix_display_option
 18205                           
 18206                           ;matrix_task.c: 392: }
 18207  1792  2FB4               	goto	l10235
 18208  1793                     l10233:	
 18209  1793  0020               	movlb	0	; select bank0
 18210  1794  0858               	movf	matrix_Main@buttonPressed,w
 18211                           
 18212                           ; Switch size 1, requested type "space"
 18213                           ; Number of cases is 10, Range of values is 1 to 12
 18214                           ; switch strategies available:
 18215                           ; Name         Instructions Cycles
 18216                           ; simple_byte           31    16 (average)
 18217                           ; direct_byte           33     9 (fixed)
 18218                           ; jumptable            263     9 (fixed)
 18219                           ;	Chosen strategy is simple_byte
 18220  1795  3A01               	xorlw	1	; case 1
 18221  1796  1903               	skipnz
 18222  1797  2941               	goto	l9901
 18223  1798  3A03               	xorlw	3	; case 2
 18224  1799  1903               	skipnz
 18225  179A  29D0               	goto	l9931
 18226  179B  3A01               	xorlw	1	; case 3
 18227  179C  1903               	skipnz
 18228  179D  2E78               	goto	l10171
 18229  179E  3A07               	xorlw	7	; case 4
 18230  179F  1903               	skipnz
 18231  17A0  2A65               	goto	l9961
 18232  17A1  3A01               	xorlw	1	; case 5
 18233  17A2  1903               	skipnz
 18234  17A3  2CB9               	goto	l10081
 18235  17A4  3A03               	xorlw	3	; case 6
 18236  17A5  1903               	skipnz
 18237  17A6  2D4E               	goto	l10111
 18238  17A7  3A0E               	xorlw	14	; case 8
 18239  17A8  1903               	skipnz
 18240  17A9  2AFA               	goto	l9991
 18241  17AA  3A01               	xorlw	1	; case 9
 18242  17AB  1903               	skipnz
 18243  17AC  2C24               	goto	l10051
 18244  17AD  3A03               	xorlw	3	; case 10
 18245  17AE  1903               	skipnz
 18246  17AF  2DE3               	goto	l10141
 18247  17B0  3A06               	xorlw	6	; case 12
 18248  17B1  1903               	skipnz
 18249  17B2  2B8F               	goto	l10021
 18250  17B3  2F0D               	goto	l10201
 18251  17B4                     l10235:	
 18252                           
 18253                           ;matrix_task.c: 393: if (matrix_found){
 18254  17B4  0021               	movlb	1	; select bank1
 18255  17B5  0842               	movf	_matrix_found^(0+128),w
 18256  17B6  1903               	btfsc	3,2
 18257  17B7  2FCB               	goto	l10241
 18258                           
 18259                           ;matrix_task.c: 394: data->display_state = MATRIX_DONE;
 18260  17B8  0020               	movlb	0	; select bank0
 18261  17B9  085A               	movf	matrix_Main@data,w
 18262  17BA  3E02               	addlw	2
 18263  17BB  00D4               	movwf	??_matrix_Main
 18264  17BC  3000               	movlw	0
 18265  17BD  3D5B               	addwfc	matrix_Main@data+1,w
 18266  17BE  00D5               	movwf	??_matrix_Main+1
 18267  17BF  0854               	movf	??_matrix_Main,w
 18268  17C0  0086               	movwf	6
 18269  17C1  0855               	movf	??_matrix_Main+1,w
 18270  17C2  0087               	movwf	7
 18271  17C3  300B               	movlw	11
 18272  17C4  0081               	movwf	1
 18273                           
 18274                           ;matrix_task.c: 395: data->martix_state = MATRIX_SOLVED;
 18275  17C5  085A               	movf	matrix_Main@data,w
 18276  17C6  0086               	movwf	6
 18277  17C7  085B               	movf	matrix_Main@data+1,w
 18278  17C8  0087               	movwf	7
 18279  17C9  3141               	addfsr 1,1
 18280  17CA  0181               	clrf	1
 18281  17CB                     l10241:	
 18282                           
 18283                           ;matrix_task.c: 396: }
 18284                           ;matrix_task.c: 398: if(data->display_state == MATRIX_DONE){
 18285  17CB  0020               	movlb	0	; select bank0
 18286  17CC  085A               	movf	matrix_Main@data,w
 18287  17CD  0086               	movwf	6
 18288  17CE  085B               	movf	matrix_Main@data+1,w
 18289  17CF  0087               	movwf	7
 18290  17D0  3142               	addfsr 1,2
 18291  17D1  300B               	movlw	11
 18292  17D2  0601               	xorwf	1,w
 18293  17D3  1D03               	btfss	3,2
 18294  17D4  0008               	return
 18295                           
 18296                           ;matrix_task.c: 400: if (data->delayTickCount < 1){
 18297  17D5  085A               	movf	matrix_Main@data,w
 18298  17D6  0086               	movwf	6
 18299  17D7  085B               	movf	matrix_Main@data+1,w
 18300  17D8  0087               	movwf	7
 18301  17D9  3143               	addfsr 1,3
 18302  17DA  0016               	moviw fsr1++
 18303  17DB  0401               	iorwf	1,w
 18304  17DC  1D03               	btfss	3,2
 18305  17DD  2FF4               	goto	l10249
 18306                           
 18307                           ;matrix_task.c: 401: led_curtain(data->noholdCount);
 18308  17DE  085A               	movf	matrix_Main@data,w
 18309  17DF  0086               	movwf	6
 18310  17E0  085B               	movf	matrix_Main@data+1,w
 18311  17E1  0087               	movwf	7
 18312  17E2  315D               	addfsr 1,29
 18313  17E3  3F40               	moviw [0]fsr1
 18314  17E4  00B0               	movwf	led_curtain@counter
 18315  17E5  3F41               	moviw [1]fsr1
 18316  17E6  00B1               	movwf	led_curtain@counter+1
 18317  17E7  31A8  20A6         	fcall	_led_curtain
 18318                           
 18319                           ;matrix_task.c: 402: data->delayTickCount = 20;
 18320  17E9  0020               	movlb	0	; select bank0
 18321  17EA  085A               	movf	matrix_Main@data,w
 18322  17EB  0086               	movwf	6
 18323  17EC  085B               	movf	matrix_Main@data+1,w
 18324  17ED  0087               	movwf	7
 18325  17EE  3143               	addfsr 1,3
 18326  17EF  3014               	movlw	20
 18327  17F0  3FC0               	movwi [0]fsr1
 18328  17F1  3000               	movlw	0
 18329  17F2  3FC1               	movwi [1]fsr1
 18330                           
 18331                           ;matrix_task.c: 403: }
 18332  17F3  0008               	return
 18333  17F4                     l10249:	
 18334                           
 18335                           ;matrix_task.c: 404: else {
 18336                           ;matrix_task.c: 405: data->delayTickCount -= 1;
 18337  17F4  085A               	movf	matrix_Main@data,w
 18338  17F5  0086               	movwf	6
 18339  17F6  085B               	movf	matrix_Main@data+1,w
 18340  17F7  0087               	movwf	7
 18341  17F8  3143               	addfsr 1,3
 18342  17F9  3001               	movlw	1
 18343  17FA  0281               	subwf	1,f
 18344  17FB  3141               	addfsr 1,1
 18345  17FC  3000               	movlw	0
 18346  17FD  3B81               	subwfb	1,f
 18347  17FE  317F               	addfsr 1,-1
 18348  17FF  0008               	return
 18349  1800                     __end_of_matrix_Main:	
 18350                           
 18351                           	psect	text15
 18352  1805                     __ptext15:	
 18353 ;; *************** function _secret_Main *****************
 18354 ;; Defined at:
 18355 ;;		line 99 in file "secret_task.c"
 18356 ;; Parameters:    Size  Location     Type
 18357 ;;  taskData        2   50[BANK0 ] PTR void 
 18358 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18359 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18360 ;; Auto vars:     Size  Location     Type
 18361 ;;  data            2   56[BANK0 ] PTR struct t_secret_task
 18362 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18363 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18364 ;;  buttonPresse    1   55[BANK0 ] unsigned char 
 18365 ;;  secret_found    1   54[BANK0 ] unsigned char 
 18366 ;; Return value:  Size  Location     Type
 18367 ;;                  1    wreg      void 
 18368 ;; Registers used:
 18369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18370 ;; Tracked objects:
 18371 ;;		On entry : 0/0
 18372 ;;		On exit  : 0/0
 18373 ;;		Unchanged: 0/0
 18374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18375 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18376 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18378 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18379 ;;Total ram usage:        8 bytes
 18380 ;; Hardware stack levels used:    1
 18381 ;; Hardware stack levels required when called:    6
 18382 ;; This function calls:
 18383 ;;		_nullifyBadge_buttonsGet
 18384 ;;		_secret_check
 18385 ;;		_secret_clear
 18386 ;; This function is called by:
 18387 ;;		_main
 18388 ;;		_scheduler_TaskRun
 18389 ;; This function uses a non-reentrant model
 18390 ;;
 18391                           
 18392                           
 18393                           ;psect for function _secret_Main
 18394  1805                     _secret_Main:	
 18395                           
 18396                           ;secret_task.c: 100: struct t_secret_taskData *data = (struct t_secret_taskData *) taskD
      +                          ata;
 18397                           
 18398                           ;incstack = 0
 18399                           ; Regs used in _secret_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18400  1805  0020               	movlb	0	; select bank0
 18401  1806  0853               	movf	secret_Main@taskData+1,w
 18402  1807  00D9               	movwf	secret_Main@data+1
 18403  1808  0852               	movf	secret_Main@taskData,w
 18404  1809  00D8               	movwf	secret_Main@data
 18405                           
 18406                           ;secret_task.c: 101: u8 buttonPressed, secret_found = 0;
 18407  180A  01D6               	clrf	secret_Main@secret_found
 18408                           
 18409                           ;secret_task.c: 103: buttonPressed = nullifyBadge_buttonsGet();
 18410  180B  31B6  264B  3198   	fcall	_nullifyBadge_buttonsGet
 18411  180E  0020               	movlb	0	; select bank0
 18412  180F  00D4               	movwf	??_secret_Main
 18413  1810  0854               	movf	??_secret_Main,w
 18414  1811  00D7               	movwf	secret_Main@buttonPressed
 18415                           
 18416                           ;secret_task.c: 104: switch (buttonPressed) {
 18417  1812  29A5               	goto	l9763
 18418  1813                     l9677:	
 18419                           ;secret_task.c: 105: case 0:
 18420                           
 18421                           
 18422                           ;secret_task.c: 107: if (data->delayTickCount == 0){
 18423  1813  0858               	movf	secret_Main@data,w
 18424  1814  0086               	movwf	6
 18425  1815  0859               	movf	secret_Main@data+1,w
 18426  1816  0087               	movwf	7
 18427  1817  3142               	addfsr 1,2
 18428  1818  0016               	moviw fsr1++
 18429  1819  0401               	iorwf	1,w
 18430  181A  1D03               	btfss	3,2
 18431  181B  282D               	goto	l9683
 18432                           
 18433                           ;secret_task.c: 108: data->delayTickCount = 300;
 18434  181C  0858               	movf	secret_Main@data,w
 18435  181D  0086               	movwf	6
 18436  181E  0859               	movf	secret_Main@data+1,w
 18437  181F  0087               	movwf	7
 18438  1820  3142               	addfsr 1,2
 18439  1821  302C               	movlw	44
 18440  1822  3FC0               	movwi [0]fsr1
 18441  1823  3001               	movlw	1
 18442  1824  3FC1               	movwi [1]fsr1
 18443                           
 18444                           ;secret_task.c: 109: secret_check(data, 0);
 18445  1825  0859               	movf	secret_Main@data+1,w
 18446  1826  00F8               	movwf	secret_check@data+1
 18447  1827  0858               	movf	secret_Main@data,w
 18448  1828  00F7               	movwf	secret_check@data
 18449  1829  01F9               	clrf	secret_check@buttonPressed
 18450  182A  3190  2010  3198   	fcall	_secret_check
 18451  182D                     l9683:	
 18452                           
 18453                           ;secret_task.c: 110: }
 18454                           ;secret_task.c: 111: data->holdCountA = 0;
 18455  182D  0020               	movlb	0	; select bank0
 18456  182E  0858               	movf	secret_Main@data,w
 18457  182F  0086               	movwf	6
 18458  1830  0859               	movf	secret_Main@data+1,w
 18459  1831  0087               	movwf	7
 18460  1832  3144               	addfsr 1,4
 18461  1833  3000               	movlw	0
 18462  1834  3FC0               	movwi [0]fsr1
 18463  1835  3FC1               	movwi [1]fsr1
 18464                           
 18465                           ;secret_task.c: 112: data->holdCountB = 0;
 18466  1836  0858               	movf	secret_Main@data,w
 18467  1837  0086               	movwf	6
 18468  1838  0859               	movf	secret_Main@data+1,w
 18469  1839  0087               	movwf	7
 18470  183A  3146               	addfsr 1,6
 18471  183B  3000               	movlw	0
 18472  183C  3FC0               	movwi [0]fsr1
 18473  183D  3FC1               	movwi [1]fsr1
 18474                           
 18475                           ;secret_task.c: 113: data->holdCountX = 0;
 18476  183E  0858               	movf	secret_Main@data,w
 18477  183F  0086               	movwf	6
 18478  1840  0859               	movf	secret_Main@data+1,w
 18479  1841  0087               	movwf	7
 18480  1842  3148               	addfsr 1,8
 18481  1843  3000               	movlw	0
 18482  1844  3FC0               	movwi [0]fsr1
 18483  1845  3FC1               	movwi [1]fsr1
 18484                           
 18485                           ;secret_task.c: 114: data->holdCountY = 0;
 18486  1846  0858               	movf	secret_Main@data,w
 18487  1847  0086               	movwf	6
 18488  1848  0859               	movf	secret_Main@data+1,w
 18489  1849  0087               	movwf	7
 18490  184A  314A               	addfsr 1,10
 18491  184B  3000               	movlw	0
 18492  184C  3FC0               	movwi [0]fsr1
 18493  184D  3FC1               	movwi [1]fsr1
 18494                           
 18495                           ;secret_task.c: 115: data->noholdCount += 1;
 18496  184E  0858               	movf	secret_Main@data,w
 18497  184F  0086               	movwf	6
 18498  1850  0859               	movf	secret_Main@data+1,w
 18499  1851  0087               	movwf	7
 18500  1852  314C               	addfsr 1,12
 18501  1853  3001               	movlw	1
 18502  1854  0781               	addwf	1,f
 18503  1855  3141               	addfsr 1,1
 18504  1856  1803               	skipnc
 18505  1857  0A81               	incf	1,f
 18506                           
 18507                           ;secret_task.c: 116: data->delayTickCount -= 1;
 18508  1858  0858               	movf	secret_Main@data,w
 18509  1859  0086               	movwf	6
 18510  185A  0859               	movf	secret_Main@data+1,w
 18511  185B  0087               	movwf	7
 18512  185C  3142               	addfsr 1,2
 18513  185D  3001               	movlw	1
 18514  185E  0281               	subwf	1,f
 18515  185F  3141               	addfsr 1,1
 18516  1860  3000               	movlw	0
 18517  1861  3B81               	subwfb	1,f
 18518  1862  317F               	addfsr 1,-1
 18519                           
 18520                           ;secret_task.c: 117: break;
 18521  1863  29B7               	goto	l9765
 18522  1864                     l9695:	
 18523                           ;secret_task.c: 118: case 1:
 18524                           
 18525                           
 18526                           ;secret_task.c: 120: if (data->holdCountA == 0){
 18527  1864  0858               	movf	secret_Main@data,w
 18528  1865  0086               	movwf	6
 18529  1866  0859               	movf	secret_Main@data+1,w
 18530  1867  0087               	movwf	7
 18531  1868  3144               	addfsr 1,4
 18532  1869  0016               	moviw fsr1++
 18533  186A  0401               	iorwf	1,w
 18534  186B  1D03               	btfss	3,2
 18535  186C  287C               	goto	l9699
 18536                           
 18537                           ;secret_task.c: 121: secret_found = secret_check(data, buttonPressed);
 18538  186D  0859               	movf	secret_Main@data+1,w
 18539  186E  00F8               	movwf	secret_check@data+1
 18540  186F  0858               	movf	secret_Main@data,w
 18541  1870  00F7               	movwf	secret_check@data
 18542  1871  0857               	movf	secret_Main@buttonPressed,w
 18543  1872  00D4               	movwf	??_secret_Main
 18544  1873  0854               	movf	??_secret_Main,w
 18545  1874  00F9               	movwf	secret_check@buttonPressed
 18546  1875  3190  2010  3198   	fcall	_secret_check
 18547  1878  0020               	movlb	0	; select bank0
 18548  1879  00D5               	movwf	??_secret_Main+1
 18549  187A  0855               	movf	??_secret_Main+1,w
 18550  187B  00D6               	movwf	secret_Main@secret_found
 18551  187C                     l9699:	
 18552                           
 18553                           ;secret_task.c: 122: }
 18554                           ;secret_task.c: 123: data->holdCountA += 1;
 18555  187C  0858               	movf	secret_Main@data,w
 18556  187D  0086               	movwf	6
 18557  187E  0859               	movf	secret_Main@data+1,w
 18558  187F  0087               	movwf	7
 18559  1880  3144               	addfsr 1,4
 18560  1881  3001               	movlw	1
 18561  1882  0781               	addwf	1,f
 18562  1883  3141               	addfsr 1,1
 18563  1884  1803               	skipnc
 18564  1885  0A81               	incf	1,f
 18565                           
 18566                           ;secret_task.c: 124: data->holdCountB = 0;
 18567  1886  0858               	movf	secret_Main@data,w
 18568  1887  0086               	movwf	6
 18569  1888  0859               	movf	secret_Main@data+1,w
 18570  1889  0087               	movwf	7
 18571  188A  3146               	addfsr 1,6
 18572  188B  3000               	movlw	0
 18573  188C  3FC0               	movwi [0]fsr1
 18574  188D  3FC1               	movwi [1]fsr1
 18575                           
 18576                           ;secret_task.c: 125: data->holdCountX = 0;
 18577  188E  0858               	movf	secret_Main@data,w
 18578  188F  0086               	movwf	6
 18579  1890  0859               	movf	secret_Main@data+1,w
 18580  1891  0087               	movwf	7
 18581  1892  3148               	addfsr 1,8
 18582  1893  3000               	movlw	0
 18583  1894  3FC0               	movwi [0]fsr1
 18584  1895  3FC1               	movwi [1]fsr1
 18585                           
 18586                           ;secret_task.c: 126: data->holdCountY = 0;
 18587  1896  0858               	movf	secret_Main@data,w
 18588  1897  0086               	movwf	6
 18589  1898  0859               	movf	secret_Main@data+1,w
 18590  1899  0087               	movwf	7
 18591  189A  314A               	addfsr 1,10
 18592  189B  3000               	movlw	0
 18593  189C  3FC0               	movwi [0]fsr1
 18594  189D  3FC1               	movwi [1]fsr1
 18595                           
 18596                           ;secret_task.c: 127: data->noholdCount = 0;
 18597  189E  0858               	movf	secret_Main@data,w
 18598  189F  0086               	movwf	6
 18599  18A0  0859               	movf	secret_Main@data+1,w
 18600  18A1  0087               	movwf	7
 18601  18A2  314C               	addfsr 1,12
 18602  18A3  3000               	movlw	0
 18603  18A4  3FC0               	movwi [0]fsr1
 18604  18A5  3FC1               	movwi [1]fsr1
 18605                           
 18606                           ;secret_task.c: 128: data->delayTickCount = 300;
 18607  18A6  0858               	movf	secret_Main@data,w
 18608  18A7  0086               	movwf	6
 18609  18A8  0859               	movf	secret_Main@data+1,w
 18610  18A9  0087               	movwf	7
 18611  18AA  3142               	addfsr 1,2
 18612  18AB  302C               	movlw	44
 18613  18AC  3FC0               	movwi [0]fsr1
 18614  18AD  3001               	movlw	1
 18615  18AE  3FC1               	movwi [1]fsr1
 18616                           
 18617                           ;secret_task.c: 129: break;
 18618  18AF  29B7               	goto	l9765
 18619  18B0                     l9711:	
 18620                           ;secret_task.c: 130: case 2:
 18621                           
 18622                           
 18623                           ;secret_task.c: 132: if (data->holdCountB == 0){
 18624  18B0  0858               	movf	secret_Main@data,w
 18625  18B1  0086               	movwf	6
 18626  18B2  0859               	movf	secret_Main@data+1,w
 18627  18B3  0087               	movwf	7
 18628  18B4  3146               	addfsr 1,6
 18629  18B5  0016               	moviw fsr1++
 18630  18B6  0401               	iorwf	1,w
 18631  18B7  1D03               	btfss	3,2
 18632  18B8  28C8               	goto	l9715
 18633                           
 18634                           ;secret_task.c: 133: secret_found = secret_check(data, buttonPressed);
 18635  18B9  0859               	movf	secret_Main@data+1,w
 18636  18BA  00F8               	movwf	secret_check@data+1
 18637  18BB  0858               	movf	secret_Main@data,w
 18638  18BC  00F7               	movwf	secret_check@data
 18639  18BD  0857               	movf	secret_Main@buttonPressed,w
 18640  18BE  00D4               	movwf	??_secret_Main
 18641  18BF  0854               	movf	??_secret_Main,w
 18642  18C0  00F9               	movwf	secret_check@buttonPressed
 18643  18C1  3190  2010  3198   	fcall	_secret_check
 18644  18C4  0020               	movlb	0	; select bank0
 18645  18C5  00D5               	movwf	??_secret_Main+1
 18646  18C6  0855               	movf	??_secret_Main+1,w
 18647  18C7  00D6               	movwf	secret_Main@secret_found
 18648  18C8                     l9715:	
 18649                           
 18650                           ;secret_task.c: 134: }
 18651                           ;secret_task.c: 135: data->holdCountA = 0;
 18652  18C8  0858               	movf	secret_Main@data,w
 18653  18C9  0086               	movwf	6
 18654  18CA  0859               	movf	secret_Main@data+1,w
 18655  18CB  0087               	movwf	7
 18656  18CC  3144               	addfsr 1,4
 18657  18CD  3000               	movlw	0
 18658  18CE  3FC0               	movwi [0]fsr1
 18659  18CF  3FC1               	movwi [1]fsr1
 18660                           
 18661                           ;secret_task.c: 136: data->holdCountB += 1;
 18662  18D0  0858               	movf	secret_Main@data,w
 18663  18D1  0086               	movwf	6
 18664  18D2  0859               	movf	secret_Main@data+1,w
 18665  18D3  0087               	movwf	7
 18666  18D4  3146               	addfsr 1,6
 18667  18D5  3001               	movlw	1
 18668  18D6  0781               	addwf	1,f
 18669  18D7  3141               	addfsr 1,1
 18670  18D8  1803               	skipnc
 18671  18D9  0A81               	incf	1,f
 18672                           
 18673                           ;secret_task.c: 137: data->holdCountX = 0;
 18674  18DA  0858               	movf	secret_Main@data,w
 18675  18DB  0086               	movwf	6
 18676  18DC  0859               	movf	secret_Main@data+1,w
 18677  18DD  0087               	movwf	7
 18678  18DE  3148               	addfsr 1,8
 18679  18DF  3000               	movlw	0
 18680  18E0  3FC0               	movwi [0]fsr1
 18681  18E1  3FC1               	movwi [1]fsr1
 18682                           
 18683                           ;secret_task.c: 138: data->holdCountY = 0;
 18684  18E2  0858               	movf	secret_Main@data,w
 18685  18E3  0086               	movwf	6
 18686  18E4  0859               	movf	secret_Main@data+1,w
 18687  18E5  0087               	movwf	7
 18688  18E6  314A               	addfsr 1,10
 18689  18E7  3000               	movlw	0
 18690  18E8  3FC0               	movwi [0]fsr1
 18691  18E9  3FC1               	movwi [1]fsr1
 18692                           
 18693                           ;secret_task.c: 139: data->noholdCount = 0;
 18694  18EA  0858               	movf	secret_Main@data,w
 18695  18EB  0086               	movwf	6
 18696  18EC  0859               	movf	secret_Main@data+1,w
 18697  18ED  0087               	movwf	7
 18698  18EE  314C               	addfsr 1,12
 18699  18EF  3000               	movlw	0
 18700  18F0  3FC0               	movwi [0]fsr1
 18701  18F1  3FC1               	movwi [1]fsr1
 18702                           
 18703                           ;secret_task.c: 140: data->delayTickCount = 300;
 18704  18F2  0858               	movf	secret_Main@data,w
 18705  18F3  0086               	movwf	6
 18706  18F4  0859               	movf	secret_Main@data+1,w
 18707  18F5  0087               	movwf	7
 18708  18F6  3142               	addfsr 1,2
 18709  18F7  302C               	movlw	44
 18710  18F8  3FC0               	movwi [0]fsr1
 18711  18F9  3001               	movlw	1
 18712  18FA  3FC1               	movwi [1]fsr1
 18713                           
 18714                           ;secret_task.c: 141: break;
 18715  18FB  29B7               	goto	l9765
 18716  18FC                     l9727:	
 18717                           ;secret_task.c: 142: case 4:
 18718                           
 18719                           
 18720                           ;secret_task.c: 144: if (data->holdCountX == 0){
 18721  18FC  0858               	movf	secret_Main@data,w
 18722  18FD  0086               	movwf	6
 18723  18FE  0859               	movf	secret_Main@data+1,w
 18724  18FF  0087               	movwf	7
 18725  1900  3148               	addfsr 1,8
 18726  1901  0016               	moviw fsr1++
 18727  1902  0401               	iorwf	1,w
 18728  1903  1D03               	btfss	3,2
 18729  1904  2914               	goto	l9731
 18730                           
 18731                           ;secret_task.c: 145: secret_found = secret_check(data, buttonPressed);
 18732  1905  0859               	movf	secret_Main@data+1,w
 18733  1906  00F8               	movwf	secret_check@data+1
 18734  1907  0858               	movf	secret_Main@data,w
 18735  1908  00F7               	movwf	secret_check@data
 18736  1909  0857               	movf	secret_Main@buttonPressed,w
 18737  190A  00D4               	movwf	??_secret_Main
 18738  190B  0854               	movf	??_secret_Main,w
 18739  190C  00F9               	movwf	secret_check@buttonPressed
 18740  190D  3190  2010  3198   	fcall	_secret_check
 18741  1910  0020               	movlb	0	; select bank0
 18742  1911  00D5               	movwf	??_secret_Main+1
 18743  1912  0855               	movf	??_secret_Main+1,w
 18744  1913  00D6               	movwf	secret_Main@secret_found
 18745  1914                     l9731:	
 18746                           
 18747                           ;secret_task.c: 146: }
 18748                           ;secret_task.c: 147: data->holdCountA = 0;
 18749  1914  0858               	movf	secret_Main@data,w
 18750  1915  0086               	movwf	6
 18751  1916  0859               	movf	secret_Main@data+1,w
 18752  1917  0087               	movwf	7
 18753  1918  3144               	addfsr 1,4
 18754  1919  3000               	movlw	0
 18755  191A  3FC0               	movwi [0]fsr1
 18756  191B  3FC1               	movwi [1]fsr1
 18757                           
 18758                           ;secret_task.c: 148: data->holdCountB = 0;
 18759  191C  0858               	movf	secret_Main@data,w
 18760  191D  0086               	movwf	6
 18761  191E  0859               	movf	secret_Main@data+1,w
 18762  191F  0087               	movwf	7
 18763  1920  3146               	addfsr 1,6
 18764  1921  3000               	movlw	0
 18765  1922  3FC0               	movwi [0]fsr1
 18766  1923  3FC1               	movwi [1]fsr1
 18767                           
 18768                           ;secret_task.c: 149: data->holdCountX += 1;
 18769  1924  0858               	movf	secret_Main@data,w
 18770  1925  0086               	movwf	6
 18771  1926  0859               	movf	secret_Main@data+1,w
 18772  1927  0087               	movwf	7
 18773  1928  3148               	addfsr 1,8
 18774  1929  3001               	movlw	1
 18775  192A  0781               	addwf	1,f
 18776  192B  3141               	addfsr 1,1
 18777  192C  1803               	skipnc
 18778  192D  0A81               	incf	1,f
 18779                           
 18780                           ;secret_task.c: 150: data->holdCountY = 0;
 18781  192E  0858               	movf	secret_Main@data,w
 18782  192F  0086               	movwf	6
 18783  1930  0859               	movf	secret_Main@data+1,w
 18784  1931  0087               	movwf	7
 18785  1932  314A               	addfsr 1,10
 18786  1933  3000               	movlw	0
 18787  1934  3FC0               	movwi [0]fsr1
 18788  1935  3FC1               	movwi [1]fsr1
 18789                           
 18790                           ;secret_task.c: 151: data->noholdCount = 0;
 18791  1936  0858               	movf	secret_Main@data,w
 18792  1937  0086               	movwf	6
 18793  1938  0859               	movf	secret_Main@data+1,w
 18794  1939  0087               	movwf	7
 18795  193A  314C               	addfsr 1,12
 18796  193B  3000               	movlw	0
 18797  193C  3FC0               	movwi [0]fsr1
 18798  193D  3FC1               	movwi [1]fsr1
 18799                           
 18800                           ;secret_task.c: 152: data->delayTickCount = 300;
 18801  193E  0858               	movf	secret_Main@data,w
 18802  193F  0086               	movwf	6
 18803  1940  0859               	movf	secret_Main@data+1,w
 18804  1941  0087               	movwf	7
 18805  1942  3142               	addfsr 1,2
 18806  1943  302C               	movlw	44
 18807  1944  3FC0               	movwi [0]fsr1
 18808  1945  3001               	movlw	1
 18809  1946  3FC1               	movwi [1]fsr1
 18810                           
 18811                           ;secret_task.c: 153: break;
 18812  1947  29B7               	goto	l9765
 18813  1948                     l9743:	
 18814                           ;secret_task.c: 154: case 8:
 18815                           
 18816                           
 18817                           ;secret_task.c: 156: if (data->holdCountY == 0){
 18818  1948  0858               	movf	secret_Main@data,w
 18819  1949  0086               	movwf	6
 18820  194A  0859               	movf	secret_Main@data+1,w
 18821  194B  0087               	movwf	7
 18822  194C  314A               	addfsr 1,10
 18823  194D  0016               	moviw fsr1++
 18824  194E  0401               	iorwf	1,w
 18825  194F  1D03               	btfss	3,2
 18826  1950  2960               	goto	l9747
 18827                           
 18828                           ;secret_task.c: 157: secret_found = secret_check(data, buttonPressed);
 18829  1951  0859               	movf	secret_Main@data+1,w
 18830  1952  00F8               	movwf	secret_check@data+1
 18831  1953  0858               	movf	secret_Main@data,w
 18832  1954  00F7               	movwf	secret_check@data
 18833  1955  0857               	movf	secret_Main@buttonPressed,w
 18834  1956  00D4               	movwf	??_secret_Main
 18835  1957  0854               	movf	??_secret_Main,w
 18836  1958  00F9               	movwf	secret_check@buttonPressed
 18837  1959  3190  2010  3198   	fcall	_secret_check
 18838  195C  0020               	movlb	0	; select bank0
 18839  195D  00D5               	movwf	??_secret_Main+1
 18840  195E  0855               	movf	??_secret_Main+1,w
 18841  195F  00D6               	movwf	secret_Main@secret_found
 18842  1960                     l9747:	
 18843                           
 18844                           ;secret_task.c: 158: }
 18845                           ;secret_task.c: 159: data->holdCountA = 0;
 18846  1960  0858               	movf	secret_Main@data,w
 18847  1961  0086               	movwf	6
 18848  1962  0859               	movf	secret_Main@data+1,w
 18849  1963  0087               	movwf	7
 18850  1964  3144               	addfsr 1,4
 18851  1965  3000               	movlw	0
 18852  1966  3FC0               	movwi [0]fsr1
 18853  1967  3FC1               	movwi [1]fsr1
 18854                           
 18855                           ;secret_task.c: 160: data->holdCountB = 0;
 18856  1968  0858               	movf	secret_Main@data,w
 18857  1969  0086               	movwf	6
 18858  196A  0859               	movf	secret_Main@data+1,w
 18859  196B  0087               	movwf	7
 18860  196C  3146               	addfsr 1,6
 18861  196D  3000               	movlw	0
 18862  196E  3FC0               	movwi [0]fsr1
 18863  196F  3FC1               	movwi [1]fsr1
 18864                           
 18865                           ;secret_task.c: 161: data->holdCountX = 0;
 18866  1970  0858               	movf	secret_Main@data,w
 18867  1971  0086               	movwf	6
 18868  1972  0859               	movf	secret_Main@data+1,w
 18869  1973  0087               	movwf	7
 18870  1974  3148               	addfsr 1,8
 18871  1975  3000               	movlw	0
 18872  1976  3FC0               	movwi [0]fsr1
 18873  1977  3FC1               	movwi [1]fsr1
 18874                           
 18875                           ;secret_task.c: 162: data->holdCountY += 1;
 18876  1978  0858               	movf	secret_Main@data,w
 18877  1979  0086               	movwf	6
 18878  197A  0859               	movf	secret_Main@data+1,w
 18879  197B  0087               	movwf	7
 18880  197C  314A               	addfsr 1,10
 18881  197D  3001               	movlw	1
 18882  197E  0781               	addwf	1,f
 18883  197F  3141               	addfsr 1,1
 18884  1980  1803               	skipnc
 18885  1981  0A81               	incf	1,f
 18886                           
 18887                           ;secret_task.c: 163: data->noholdCount = 0;
 18888  1982  0858               	movf	secret_Main@data,w
 18889  1983  0086               	movwf	6
 18890  1984  0859               	movf	secret_Main@data+1,w
 18891  1985  0087               	movwf	7
 18892  1986  314C               	addfsr 1,12
 18893  1987  3000               	movlw	0
 18894  1988  3FC0               	movwi [0]fsr1
 18895  1989  3FC1               	movwi [1]fsr1
 18896                           
 18897                           ;secret_task.c: 164: data->delayTickCount = 300;
 18898  198A  0858               	movf	secret_Main@data,w
 18899  198B  0086               	movwf	6
 18900  198C  0859               	movf	secret_Main@data+1,w
 18901  198D  0087               	movwf	7
 18902  198E  3142               	addfsr 1,2
 18903  198F  302C               	movlw	44
 18904  1990  3FC0               	movwi [0]fsr1
 18905  1991  3001               	movlw	1
 18906  1992  3FC1               	movwi [1]fsr1
 18907                           
 18908                           ;secret_task.c: 165: break;
 18909  1993  29B7               	goto	l9765
 18910  1994                     l9759:	
 18911                           ;secret_task.c: 166: default:
 18912                           
 18913                           
 18914                           ;secret_task.c: 168: secret_check(data, 0);
 18915  1994  0859               	movf	secret_Main@data+1,w
 18916  1995  00F8               	movwf	secret_check@data+1
 18917  1996  0858               	movf	secret_Main@data,w
 18918  1997  00F7               	movwf	secret_check@data
 18919  1998  01F9               	clrf	secret_check@buttonPressed
 18920  1999  3190  2010  3198   	fcall	_secret_check
 18921                           
 18922                           ;secret_task.c: 169: secret_clear(data);
 18923  199C  0020               	movlb	0	; select bank0
 18924  199D  0859               	movf	secret_Main@data+1,w
 18925  199E  00F2               	movwf	secret_clear@data+1
 18926  199F  0858               	movf	secret_Main@data,w
 18927  19A0  00F1               	movwf	secret_clear@data
 18928  19A1  31B6  26AE  3198   	fcall	_secret_clear
 18929                           
 18930                           ;secret_task.c: 170: }
 18931  19A4  29B7               	goto	l9765
 18932  19A5                     l9763:	
 18933  19A5  0020               	movlb	0	; select bank0
 18934  19A6  0857               	movf	secret_Main@buttonPressed,w
 18935                           
 18936                           ; Switch size 1, requested type "space"
 18937                           ; Number of cases is 5, Range of values is 0 to 8
 18938                           ; switch strategies available:
 18939                           ; Name         Instructions Cycles
 18940                           ; simple_byte           16     9 (average)
 18941                           ; direct_byte           24     6 (fixed)
 18942                           ; jumptable            260     6 (fixed)
 18943                           ;	Chosen strategy is simple_byte
 18944  19A7  3A00               	xorlw	0	; case 0
 18945  19A8  1903               	skipnz
 18946  19A9  2813               	goto	l9677
 18947  19AA  3A01               	xorlw	1	; case 1
 18948  19AB  1903               	skipnz
 18949  19AC  2864               	goto	l9695
 18950  19AD  3A03               	xorlw	3	; case 2
 18951  19AE  1903               	skipnz
 18952  19AF  28B0               	goto	l9711
 18953  19B0  3A06               	xorlw	6	; case 4
 18954  19B1  1903               	skipnz
 18955  19B2  28FC               	goto	l9727
 18956  19B3  3A0C               	xorlw	12	; case 8
 18957  19B4  1903               	skipnz
 18958  19B5  2948               	goto	l9743
 18959  19B6  2994               	goto	l9759
 18960  19B7                     l9765:	
 18961                           
 18962                           ;secret_task.c: 173: if (secret_found){
 18963  19B7  0020               	movlb	0	; select bank0
 18964  19B8  0856               	movf	secret_Main@secret_found,w
 18965  19B9  1903               	btfsc	3,2
 18966  19BA  0008               	return
 18967                           
 18968                           ;secret_task.c: 174: secret_clear(data);
 18969  19BB  0859               	movf	secret_Main@data+1,w
 18970  19BC  00F2               	movwf	secret_clear@data+1
 18971  19BD  0858               	movf	secret_Main@data,w
 18972  19BE  00F1               	movwf	secret_clear@data
 18973  19BF  31B6  26AE         	fcall	_secret_clear
 18974  19C1  0008               	return
 18975  19C2                     __end_of_secret_Main:	
 18976                           
 18977                           	psect	text16
 18978  1D86                     __ptext16:	
 18979 ;; *************** function _locked_Main *****************
 18980 ;; Defined at:
 18981 ;;		line 152 in file "locked_task.c"
 18982 ;; Parameters:    Size  Location     Type
 18983 ;;  taskData        2   50[BANK0 ] PTR void 
 18984 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18985 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18986 ;; Auto vars:     Size  Location     Type
 18987 ;;  data            2   55[BANK0 ] PTR struct t_locked_task
 18988 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18989 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18990 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 18991 ;; Return value:  Size  Location     Type
 18992 ;;                  1    wreg      void 
 18993 ;; Registers used:
 18994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18995 ;; Tracked objects:
 18996 ;;		On entry : 0/0
 18997 ;;		On exit  : 0/0
 18998 ;;		Unchanged: 0/0
 18999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19000 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19001 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19003 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19004 ;;Total ram usage:        7 bytes
 19005 ;; Hardware stack levels used:    1
 19006 ;; Hardware stack levels required when called:   11
 19007 ;; This function calls:
 19008 ;;		___lwmod
 19009 ;;		_locked_clear
 19010 ;;		_locked_get_lock_leds
 19011 ;;		_locked_get_unlock_leds
 19012 ;;		_locked_lock_leds
 19013 ;;		_locked_secret_check
 19014 ;;		_locked_unlock_leds
 19015 ;;		_marquee
 19016 ;;		_nullifyBadge_buttonsGet
 19017 ;;		_nullifyBadge_userLedsSet
 19018 ;;		_slot_Setup
 19019 ;; This function is called by:
 19020 ;;		_main
 19021 ;;		_scheduler_TaskRun
 19022 ;; This function uses a non-reentrant model
 19023 ;;
 19024                           
 19025                           
 19026                           ;psect for function _locked_Main
 19027  1D86                     _locked_Main:	
 19028                           
 19029                           ;locked_task.c: 153: struct t_locked_taskData *data = (struct t_locked_taskData *) taskD
      +                          ata;
 19030                           
 19031                           ;incstack = 0
 19032                           ; Regs used in _locked_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19033  1D86  0020               	movlb	0	; select bank0
 19034  1D87  0853               	movf	locked_Main@taskData+1,w
 19035  1D88  00D8               	movwf	locked_Main@data+1
 19036  1D89  0852               	movf	locked_Main@taskData,w
 19037  1D8A  00D7               	movwf	locked_Main@data
 19038                           
 19039                           ;locked_task.c: 154: u8 buttonPressed;
 19040                           ;locked_task.c: 155: pw_found =0;
 19041  1D8B  0021               	movlb	1	; select bank1
 19042  1D8C  01C3               	clrf	_pw_found^(0+128)
 19043                           
 19044                           ;locked_task.c: 156: if ( currentTask != LOCKED_TASK ){
 19045  1D8D  3003               	movlw	3
 19046  1D8E  063A               	xorwf	_currentTask^(0+128),w
 19047  1D8F  043B               	iorwf	(_currentTask+1)^(0+128),w
 19048  1D90  1903               	btfsc	3,2
 19049  1D91  2E9F               	goto	l9605
 19050                           
 19051                           ;locked_task.c: 157: data->holdCountA = 1;
 19052  1D92  0020               	movlb	0	; select bank0
 19053  1D93  0857               	movf	locked_Main@data,w
 19054  1D94  0086               	movwf	6
 19055  1D95  0858               	movf	locked_Main@data+1,w
 19056  1D96  0087               	movwf	7
 19057  1D97  3143               	addfsr 1,3
 19058  1D98  3001               	movlw	1
 19059  1D99  3FC0               	movwi [0]fsr1
 19060  1D9A  3000               	movlw	0
 19061  1D9B  3FC1               	movwi [1]fsr1
 19062                           
 19063                           ;locked_task.c: 158: data->holdCountB = 1;
 19064  1D9C  0857               	movf	locked_Main@data,w
 19065  1D9D  0086               	movwf	6
 19066  1D9E  0858               	movf	locked_Main@data+1,w
 19067  1D9F  0087               	movwf	7
 19068  1DA0  3145               	addfsr 1,5
 19069  1DA1  3001               	movlw	1
 19070  1DA2  3FC0               	movwi [0]fsr1
 19071  1DA3  3000               	movlw	0
 19072  1DA4  3FC1               	movwi [1]fsr1
 19073                           
 19074                           ;locked_task.c: 159: data->holdCountX = 1;
 19075  1DA5  0857               	movf	locked_Main@data,w
 19076  1DA6  0086               	movwf	6
 19077  1DA7  0858               	movf	locked_Main@data+1,w
 19078  1DA8  0087               	movwf	7
 19079  1DA9  3147               	addfsr 1,7
 19080  1DAA  3001               	movlw	1
 19081  1DAB  3FC0               	movwi [0]fsr1
 19082  1DAC  3000               	movlw	0
 19083  1DAD  3FC1               	movwi [1]fsr1
 19084                           
 19085                           ;locked_task.c: 160: data->holdCountY = 1;
 19086  1DAE  0857               	movf	locked_Main@data,w
 19087  1DAF  0086               	movwf	6
 19088  1DB0  0858               	movf	locked_Main@data+1,w
 19089  1DB1  0087               	movwf	7
 19090  1DB2  3149               	addfsr 1,9
 19091  1DB3  3001               	movlw	1
 19092  1DB4  3FC0               	movwi [0]fsr1
 19093  1DB5  3000               	movlw	0
 19094  1DB6  3FC1               	movwi [1]fsr1
 19095                           
 19096                           ;locked_task.c: 161: return;
 19097  1DB7  0008               	return
 19098  1DB8                     l9561:	
 19099                           ;locked_task.c: 168: case LOCKED_UNLOCKING_STATE:
 19100                           
 19101                           ;locked_task.c: 162: }
 19102                           ;locked_task.c: 167: switch (data->state){
 19103                           
 19104                           
 19105                           ;locked_task.c: 169: badge_locked = 0;
 19106  1DB8  0021               	movlb	1	; select bank1
 19107  1DB9  01C4               	clrf	_badge_locked^(0+128)
 19108                           
 19109                           ;locked_task.c: 170: slot_Setup(slot_taskData);
 19110  1DBA  083D               	movf	(_slot_taskData+1)^(0+128),w
 19111  1DBB  0020               	movlb	0	; select bank0
 19112  1DBC  00B0               	movwf	slot_Setup@taskData+1
 19113  1DBD  0021               	movlb	1	; select bank1
 19114  1DBE  083C               	movf	_slot_taskData^(0+128),w
 19115  1DBF  0020               	movlb	0	; select bank0
 19116  1DC0  00AF               	movwf	slot_Setup@taskData
 19117  1DC1  31AC  2447  319D   	fcall	_slot_Setup
 19118                           
 19119                           ;locked_task.c: 171: marquee("UNLOCKING...", data->delayTickCount);
 19120  1DC4  30A5               	movlw	low (STR_42| (0+32768))
 19121  1DC5  0020               	movlb	0	; select bank0
 19122  1DC6  00BA               	movwf	marquee@string
 19123  1DC7  30BA               	movlw	high (STR_42| (0+32768))
 19124  1DC8  00BB               	movwf	marquee@string+1
 19125  1DC9  0857               	movf	locked_Main@data,w
 19126  1DCA  0086               	movwf	6
 19127  1DCB  0858               	movf	locked_Main@data+1,w
 19128  1DCC  0087               	movwf	7
 19129  1DCD  3141               	addfsr 1,1
 19130  1DCE  3F40               	moviw [0]fsr1
 19131  1DCF  00BC               	movwf	marquee@count
 19132  1DD0  3F41               	moviw [1]fsr1
 19133  1DD1  00BD               	movwf	marquee@count+1
 19134  1DD2  31A2  22D2  319D   	fcall	_marquee
 19135                           
 19136                           ;locked_task.c: 173: if (data->delayTickCount % 75 == 0){
 19137  1DD5  304B               	movlw	75
 19138  1DD6  0020               	movlb	0	; select bank0
 19139  1DD7  00AB               	movwf	___lwmod@divisor
 19140  1DD8  3000               	movlw	0
 19141  1DD9  00AC               	movwf	___lwmod@divisor+1
 19142  1DDA  0857               	movf	locked_Main@data,w
 19143  1DDB  0086               	movwf	6
 19144  1DDC  0858               	movf	locked_Main@data+1,w
 19145  1DDD  0087               	movwf	7
 19146  1DDE  3141               	addfsr 1,1
 19147  1DDF  3F40               	moviw [0]fsr1
 19148  1DE0  00AD               	movwf	___lwmod@dividend
 19149  1DE1  3F41               	moviw [1]fsr1
 19150  1DE2  00AE               	movwf	___lwmod@dividend+1
 19151  1DE3  31B5  25EF  319D   	fcall	___lwmod
 19152  1DE6  0020               	movlb	0	; select bank0
 19153  1DE7  082B               	movf	?___lwmod,w
 19154  1DE8  042C               	iorwf	?___lwmod+1,w
 19155  1DE9  1D03               	btfss	3,2
 19156  1DEA  2DF5               	goto	l9571
 19157                           
 19158                           ;locked_task.c: 174: locked_leds = locked_lock_base_leds | locked_get_unlock_leds();
 19159  1DEB  31B4  2433  319D   	fcall	_locked_get_unlock_leds
 19160  1DEE  0021               	movlb	1	; select bank1
 19161  1DEF  0852               	movf	_locked_lock_base_leds^(0+128),w
 19162  1DF0  0471               	iorwf	?_locked_get_unlock_leds,w
 19163  1DF1  00A2               	movwf	_locked_leds^(0+128)
 19164  1DF2  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 19165  1DF3  0472               	iorwf	?_locked_get_unlock_leds+1,w
 19166  1DF4  00A3               	movwf	(_locked_leds+1)^(0+128)
 19167  1DF5                     l9571:	
 19168                           
 19169                           ;locked_task.c: 175: }
 19170                           ;locked_task.c: 178: if (data->delayTickCount == 375){
 19171  1DF5  0020               	movlb	0	; select bank0
 19172  1DF6  0857               	movf	locked_Main@data,w
 19173  1DF7  0086               	movwf	6
 19174  1DF8  0858               	movf	locked_Main@data+1,w
 19175  1DF9  0087               	movwf	7
 19176  1DFA  3141               	addfsr 1,1
 19177  1DFB  0016               	moviw fsr1++
 19178  1DFC  3A77               	xorlw	119
 19179  1DFD  00D4               	movwf	??_locked_Main
 19180  1DFE  0016               	moviw fsr1++
 19181  1DFF  3A01               	xorlw	1
 19182  1E00  04D4               	iorwf	??_locked_Main,f
 19183  1E01  1D03               	btfss	3,2
 19184  1E02  2E65               	goto	l9591
 19185                           
 19186                           ;locked_task.c: 179: data->state = LOCKED_UNLOCKED_STATE;
 19187  1E03  0857               	movf	locked_Main@data,w
 19188  1E04  3E0D               	addlw	13
 19189  1E05  00D4               	movwf	??_locked_Main
 19190  1E06  3000               	movlw	0
 19191  1E07  3D58               	addwfc	locked_Main@data+1,w
 19192  1E08  00D5               	movwf	??_locked_Main+1
 19193  1E09  0854               	movf	??_locked_Main,w
 19194  1E0A  0086               	movwf	6
 19195  1E0B  0855               	movf	??_locked_Main+1,w
 19196  1E0C  0087               	movwf	7
 19197  1E0D  3002               	movlw	2
 19198  1E0E  0081               	movwf	1
 19199                           
 19200                           ;locked_task.c: 180: data->delayTickCount = 0;
 19201  1E0F  0857               	movf	locked_Main@data,w
 19202  1E10  0086               	movwf	6
 19203  1E11  0858               	movf	locked_Main@data+1,w
 19204  1E12  0087               	movwf	7
 19205  1E13  3141               	addfsr 1,1
 19206  1E14  3000               	movlw	0
 19207  1E15  3FC0               	movwi [0]fsr1
 19208  1E16  3FC1               	movwi [1]fsr1
 19209  1E17  2EB3               	goto	l9607
 19210  1E18                     l9579:	
 19211                           ;locked_task.c: 186: case LOCKED_LOCKING_STATE:
 19212                           
 19213                           ;locked_task.c: 184: }
 19214                           ;locked_task.c: 185: break;
 19215                           
 19216                           ;locked_task.c: 182: else {
 19217                           ;locked_task.c: 183: data->delayTickCount += 1;
 19218                           
 19219                           ;locked_task.c: 181: }
 19220                           
 19221                           
 19222                           ;locked_task.c: 187: marquee("LOCKING...", data->delayTickCount);
 19223  1E18  30A7               	movlw	low ((STR_42+2)| (0+32768))
 19224  1E19  00BA               	movwf	marquee@string
 19225  1E1A  30BA               	movlw	high ((STR_42+2)| (0+32768))
 19226  1E1B  00BB               	movwf	marquee@string+1
 19227  1E1C  0857               	movf	locked_Main@data,w
 19228  1E1D  0086               	movwf	6
 19229  1E1E  0858               	movf	locked_Main@data+1,w
 19230  1E1F  0087               	movwf	7
 19231  1E20  3141               	addfsr 1,1
 19232  1E21  3F40               	moviw [0]fsr1
 19233  1E22  00BC               	movwf	marquee@count
 19234  1E23  3F41               	moviw [1]fsr1
 19235  1E24  00BD               	movwf	marquee@count+1
 19236  1E25  31A2  22D2  319D   	fcall	_marquee
 19237                           
 19238                           ;locked_task.c: 189: if (data->delayTickCount % 75 == 0){
 19239  1E28  304B               	movlw	75
 19240  1E29  0020               	movlb	0	; select bank0
 19241  1E2A  00AB               	movwf	___lwmod@divisor
 19242  1E2B  3000               	movlw	0
 19243  1E2C  00AC               	movwf	___lwmod@divisor+1
 19244  1E2D  0857               	movf	locked_Main@data,w
 19245  1E2E  0086               	movwf	6
 19246  1E2F  0858               	movf	locked_Main@data+1,w
 19247  1E30  0087               	movwf	7
 19248  1E31  3141               	addfsr 1,1
 19249  1E32  3F40               	moviw [0]fsr1
 19250  1E33  00AD               	movwf	___lwmod@dividend
 19251  1E34  3F41               	moviw [1]fsr1
 19252  1E35  00AE               	movwf	___lwmod@dividend+1
 19253  1E36  31B5  25EF  319D   	fcall	___lwmod
 19254  1E39  0020               	movlb	0	; select bank0
 19255  1E3A  082B               	movf	?___lwmod,w
 19256  1E3B  042C               	iorwf	?___lwmod+1,w
 19257  1E3C  1D03               	btfss	3,2
 19258  1E3D  2E48               	goto	l9585
 19259                           
 19260                           ;locked_task.c: 190: locked_leds = locked_lock_base_leds | locked_get_lock_leds();
 19261  1E3E  31B5  2553  319D   	fcall	_locked_get_lock_leds
 19262  1E41  0021               	movlb	1	; select bank1
 19263  1E42  0852               	movf	_locked_lock_base_leds^(0+128),w
 19264  1E43  0471               	iorwf	?_locked_get_lock_leds,w
 19265  1E44  00A2               	movwf	_locked_leds^(0+128)
 19266  1E45  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 19267  1E46  0472               	iorwf	?_locked_get_lock_leds+1,w
 19268  1E47  00A3               	movwf	(_locked_leds+1)^(0+128)
 19269  1E48                     l9585:	
 19270                           
 19271                           ;locked_task.c: 191: }
 19272                           ;locked_task.c: 194: if (data->delayTickCount == 375){
 19273  1E48  0020               	movlb	0	; select bank0
 19274  1E49  0857               	movf	locked_Main@data,w
 19275  1E4A  0086               	movwf	6
 19276  1E4B  0858               	movf	locked_Main@data+1,w
 19277  1E4C  0087               	movwf	7
 19278  1E4D  3141               	addfsr 1,1
 19279  1E4E  0016               	moviw fsr1++
 19280  1E4F  3A77               	xorlw	119
 19281  1E50  00D4               	movwf	??_locked_Main
 19282  1E51  0016               	moviw fsr1++
 19283  1E52  3A01               	xorlw	1
 19284  1E53  04D4               	iorwf	??_locked_Main,f
 19285  1E54  1D03               	btfss	3,2
 19286  1E55  2E65               	goto	l9591
 19287                           
 19288                           ;locked_task.c: 195: data->state = LOCKED_LOCKED_STATE;
 19289  1E56  0857               	movf	locked_Main@data,w
 19290  1E57  0086               	movwf	6
 19291  1E58  0858               	movf	locked_Main@data+1,w
 19292  1E59  0087               	movwf	7
 19293  1E5A  314D               	addfsr 1,13
 19294  1E5B  0181               	clrf	1
 19295                           
 19296                           ;locked_task.c: 196: data->delayTickCount = 0;
 19297  1E5C  0857               	movf	locked_Main@data,w
 19298  1E5D  0086               	movwf	6
 19299  1E5E  0858               	movf	locked_Main@data+1,w
 19300  1E5F  0087               	movwf	7
 19301  1E60  3141               	addfsr 1,1
 19302  1E61  3000               	movlw	0
 19303  1E62  3FC0               	movwi [0]fsr1
 19304  1E63  3FC1               	movwi [1]fsr1
 19305                           
 19306                           ;locked_task.c: 197: }
 19307  1E64  2EB3               	goto	l9607
 19308  1E65                     l9591:	
 19309                           
 19310                           ;locked_task.c: 198: else {
 19311                           ;locked_task.c: 199: data->delayTickCount += 1;
 19312  1E65  0857               	movf	locked_Main@data,w
 19313  1E66  0086               	movwf	6
 19314  1E67  0858               	movf	locked_Main@data+1,w
 19315  1E68  0087               	movwf	7
 19316  1E69  3141               	addfsr 1,1
 19317  1E6A  3001               	movlw	1
 19318  1E6B  0781               	addwf	1,f
 19319  1E6C  3141               	addfsr 1,1
 19320  1E6D  1803               	skipnc
 19321  1E6E  0A81               	incf	1,f
 19322                           
 19323                           ;locked_task.c: 200: }
 19324                           ;locked_task.c: 201: break;
 19325  1E6F  2EB3               	goto	l9607
 19326  1E70                     l9593:	
 19327                           ;locked_task.c: 202: case LOCKED_UNLOCKED_STATE:
 19328                           
 19329                           
 19330                           ;locked_task.c: 203: badge_locked = 0;
 19331  1E70  0021               	movlb	1	; select bank1
 19332  1E71  01C4               	clrf	_badge_locked^(0+128)
 19333                           
 19334                           ;locked_task.c: 205: marquee("OPEN", data->delayTickCount);
 19335  1E72  30E0               	movlw	low (STR_44| (0+32768))
 19336  1E73  0020               	movlb	0	; select bank0
 19337  1E74  00BA               	movwf	marquee@string
 19338  1E75  30BB               	movlw	high (STR_44| (0+32768))
 19339  1E76  00BB               	movwf	marquee@string+1
 19340  1E77  0857               	movf	locked_Main@data,w
 19341  1E78  0086               	movwf	6
 19342  1E79  0858               	movf	locked_Main@data+1,w
 19343  1E7A  0087               	movwf	7
 19344  1E7B  3141               	addfsr 1,1
 19345  1E7C  3F40               	moviw [0]fsr1
 19346  1E7D  00BC               	movwf	marquee@count
 19347  1E7E  3F41               	moviw [1]fsr1
 19348  1E7F  00BD               	movwf	marquee@count+1
 19349  1E80  31A2  22D2  319D   	fcall	_marquee
 19350                           
 19351                           ;locked_task.c: 206: locked_unlock_leds();
 19352  1E83  31B3  239C  319D   	fcall	_locked_unlock_leds
 19353                           
 19354                           ;locked_task.c: 207: break;
 19355  1E86  2EB3               	goto	l9607
 19356  1E87                     l1282:	
 19357                           ;locked_task.c: 208: case LOCKED_LOCKED_STATE:
 19358                           
 19359                           
 19360                           ;locked_task.c: 209: badge_locked = 1;
 19361  1E87  0021               	movlb	1	; select bank1
 19362  1E88  01C4               	clrf	_badge_locked^(0+128)
 19363  1E89  0AC4               	incf	_badge_locked^(0+128),f
 19364                           
 19365                           ;locked_task.c: 210: marquee("LOCK", data->delayTickCount);
 19366  1E8A  30DB               	movlw	low (STR_45| (0+32768))
 19367  1E8B  0020               	movlb	0	; select bank0
 19368  1E8C  00BA               	movwf	marquee@string
 19369  1E8D  30BB               	movlw	high (STR_45| (0+32768))
 19370  1E8E  00BB               	movwf	marquee@string+1
 19371  1E8F  0857               	movf	locked_Main@data,w
 19372  1E90  0086               	movwf	6
 19373  1E91  0858               	movf	locked_Main@data+1,w
 19374  1E92  0087               	movwf	7
 19375  1E93  3141               	addfsr 1,1
 19376  1E94  3F40               	moviw [0]fsr1
 19377  1E95  00BC               	movwf	marquee@count
 19378  1E96  3F41               	moviw [1]fsr1
 19379  1E97  00BD               	movwf	marquee@count+1
 19380  1E98  31A2  22D2  319D   	fcall	_marquee
 19381                           
 19382                           ;locked_task.c: 212: locked_lock_leds();
 19383  1E9B  31B4  2467  319D   	fcall	_locked_lock_leds
 19384                           
 19385                           ;locked_task.c: 214: }
 19386                           
 19387                           ;locked_task.c: 213: break;
 19388  1E9E  2EB3               	goto	l9607
 19389  1E9F                     l9605:	
 19390  1E9F  0020               	movlb	0	; select bank0
 19391  1EA0  0857               	movf	locked_Main@data,w
 19392  1EA1  0086               	movwf	6
 19393  1EA2  0858               	movf	locked_Main@data+1,w
 19394  1EA3  0087               	movwf	7
 19395  1EA4  314D               	addfsr 1,13
 19396  1EA5  0801               	movf	1,w
 19397                           
 19398                           ; Switch size 1, requested type "space"
 19399                           ; Number of cases is 4, Range of values is 0 to 3
 19400                           ; switch strategies available:
 19401                           ; Name         Instructions Cycles
 19402                           ; simple_byte           13     7 (average)
 19403                           ; direct_byte           14     6 (fixed)
 19404                           ; jumptable            260     6 (fixed)
 19405                           ;	Chosen strategy is simple_byte
 19406  1EA6  3A00               	xorlw	0	; case 0
 19407  1EA7  1903               	skipnz
 19408  1EA8  2E87               	goto	l1282
 19409  1EA9  3A01               	xorlw	1	; case 1
 19410  1EAA  1903               	skipnz
 19411  1EAB  2E18               	goto	l9579
 19412  1EAC  3A03               	xorlw	3	; case 2
 19413  1EAD  1903               	skipnz
 19414  1EAE  2E70               	goto	l9593
 19415  1EAF  3A01               	xorlw	1	; case 3
 19416  1EB0  1903               	skipnz
 19417  1EB1  2DB8               	goto	l9561
 19418  1EB2  2EB3               	goto	l9607
 19419  1EB3                     l9607:	
 19420                           
 19421                           ;locked_task.c: 215: nullifyBadge_userLedsSet(data->badge, locked_leds);
 19422  1EB3  0021               	movlb	1	; select bank1
 19423  1EB4  0823               	movf	(_locked_leds+1)^(0+128),w
 19424  1EB5  0020               	movlb	0	; select bank0
 19425  1EB6  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 19426  1EB7  0021               	movlb	1	; select bank1
 19427  1EB8  0822               	movf	_locked_leds^(0+128),w
 19428  1EB9  0020               	movlb	0	; select bank0
 19429  1EBA  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 19430  1EBB  0857               	movf	locked_Main@data,w
 19431  1EBC  0086               	movwf	6
 19432  1EBD  0858               	movf	locked_Main@data+1,w
 19433  1EBE  0087               	movwf	7
 19434  1EBF  0801               	movf	1,w
 19435  1EC0  31B3  2355  319D   	fcall	_nullifyBadge_userLedsSet
 19436                           
 19437                           ;locked_task.c: 218: buttonPressed = nullifyBadge_buttonsGet();
 19438  1EC3  31B6  264B  319D   	fcall	_nullifyBadge_buttonsGet
 19439  1EC6  0020               	movlb	0	; select bank0
 19440  1EC7  00D4               	movwf	??_locked_Main
 19441  1EC8  0854               	movf	??_locked_Main,w
 19442  1EC9  00D6               	movwf	locked_Main@buttonPressed
 19443                           
 19444                           ;locked_task.c: 219: switch (buttonPressed) {
 19445  1ECA  2FCF               	goto	l9661
 19446  1ECB                     l9611:	
 19447                           ;locked_task.c: 220: case 4:
 19448                           
 19449                           
 19450                           ;locked_task.c: 221: locked_clear(data);
 19451  1ECB  0858               	movf	locked_Main@data+1,w
 19452  1ECC  00BA               	movwf	locked_clear@data+1
 19453  1ECD  0857               	movf	locked_Main@data,w
 19454  1ECE  00B9               	movwf	locked_clear@data
 19455  1ECF  31A9  2128  319D   	fcall	_locked_clear
 19456                           
 19457                           ;locked_task.c: 222: currentTask = MENU_TASK;
 19458  1ED2  0021               	movlb	1	; select bank1
 19459  1ED3  01BA               	clrf	_currentTask^(0+128)
 19460  1ED4  01BB               	clrf	(_currentTask+1)^(0+128)
 19461                           
 19462                           ;locked_task.c: 223: break;
 19463  1ED5  2FDD               	goto	l9663
 19464  1ED6                     l9615:	
 19465                           ;locked_task.c: 224: case 8:
 19466                           
 19467                           
 19468                           ;locked_task.c: 225: if (data->holdCountY == 0){
 19469  1ED6  0020               	movlb	0	; select bank0
 19470  1ED7  0857               	movf	locked_Main@data,w
 19471  1ED8  0086               	movwf	6
 19472  1ED9  0858               	movf	locked_Main@data+1,w
 19473  1EDA  0087               	movwf	7
 19474  1EDB  3149               	addfsr 1,9
 19475  1EDC  0016               	moviw fsr1++
 19476  1EDD  0401               	iorwf	1,w
 19477  1EDE  1D03               	btfss	3,2
 19478  1EDF  2EF0               	goto	l9619
 19479                           
 19480                           ;locked_task.c: 227: pw_found = locked_secret_check(data, 8 );
 19481  1EE0  0858               	movf	locked_Main@data+1,w
 19482  1EE1  00F8               	movwf	locked_secret_check@data+1
 19483  1EE2  0857               	movf	locked_Main@data,w
 19484  1EE3  00F7               	movwf	locked_secret_check@data
 19485  1EE4  3008               	movlw	8
 19486  1EE5  00D4               	movwf	??_locked_Main
 19487  1EE6  0854               	movf	??_locked_Main,w
 19488  1EE7  00F9               	movwf	locked_secret_check@buttonPressed
 19489  1EE8  31A5  258A  319D   	fcall	_locked_secret_check
 19490  1EEB  0020               	movlb	0	; select bank0
 19491  1EEC  00D5               	movwf	??_locked_Main+1
 19492  1EED  0855               	movf	??_locked_Main+1,w
 19493  1EEE  0021               	movlb	1	; select bank1
 19494  1EEF  00C3               	movwf	_pw_found^(0+128)
 19495  1EF0                     l9619:	
 19496                           
 19497                           ;locked_task.c: 228: }
 19498                           ;locked_task.c: 229: data->holdCountA = 0;
 19499  1EF0  0020               	movlb	0	; select bank0
 19500  1EF1  0857               	movf	locked_Main@data,w
 19501  1EF2  0086               	movwf	6
 19502  1EF3  0858               	movf	locked_Main@data+1,w
 19503  1EF4  0087               	movwf	7
 19504  1EF5  3143               	addfsr 1,3
 19505  1EF6  3000               	movlw	0
 19506  1EF7  3FC0               	movwi [0]fsr1
 19507  1EF8  3FC1               	movwi [1]fsr1
 19508                           
 19509                           ;locked_task.c: 230: data->holdCountB = 0;
 19510  1EF9  0857               	movf	locked_Main@data,w
 19511  1EFA  0086               	movwf	6
 19512  1EFB  0858               	movf	locked_Main@data+1,w
 19513  1EFC  0087               	movwf	7
 19514  1EFD  3145               	addfsr 1,5
 19515  1EFE  3000               	movlw	0
 19516  1EFF  3FC0               	movwi [0]fsr1
 19517  1F00  3FC1               	movwi [1]fsr1
 19518                           
 19519                           ;locked_task.c: 231: data->holdCountX = 0;
 19520  1F01  0857               	movf	locked_Main@data,w
 19521  1F02  0086               	movwf	6
 19522  1F03  0858               	movf	locked_Main@data+1,w
 19523  1F04  0087               	movwf	7
 19524  1F05  3147               	addfsr 1,7
 19525  1F06  3000               	movlw	0
 19526  1F07  3FC0               	movwi [0]fsr1
 19527  1F08  3FC1               	movwi [1]fsr1
 19528                           
 19529                           ;locked_task.c: 232: data->holdCountY += 1;
 19530  1F09  0857               	movf	locked_Main@data,w
 19531  1F0A  0086               	movwf	6
 19532  1F0B  0858               	movf	locked_Main@data+1,w
 19533  1F0C  0087               	movwf	7
 19534  1F0D  3149               	addfsr 1,9
 19535  1F0E  3001               	movlw	1
 19536  1F0F  0781               	addwf	1,f
 19537  1F10  3141               	addfsr 1,1
 19538  1F11  1803               	skipnc
 19539  1F12  0A81               	incf	1,f
 19540                           
 19541                           ;locked_task.c: 233: data->noholdCount = 0;
 19542  1F13  0857               	movf	locked_Main@data,w
 19543  1F14  0086               	movwf	6
 19544  1F15  0858               	movf	locked_Main@data+1,w
 19545  1F16  0087               	movwf	7
 19546  1F17  314B               	addfsr 1,11
 19547  1F18  3000               	movlw	0
 19548  1F19  3FC0               	movwi [0]fsr1
 19549  1F1A  3FC1               	movwi [1]fsr1
 19550                           
 19551                           ;locked_task.c: 234: break;
 19552  1F1B  2FDD               	goto	l9663
 19553  1F1C                     l9629:	
 19554                           ;locked_task.c: 235: case 2:
 19555                           
 19556                           
 19557                           ;locked_task.c: 236: if (data->holdCountB == 0){
 19558  1F1C  0857               	movf	locked_Main@data,w
 19559  1F1D  0086               	movwf	6
 19560  1F1E  0858               	movf	locked_Main@data+1,w
 19561  1F1F  0087               	movwf	7
 19562  1F20  3145               	addfsr 1,5
 19563  1F21  0016               	moviw fsr1++
 19564  1F22  0401               	iorwf	1,w
 19565  1F23  1D03               	btfss	3,2
 19566  1F24  2F35               	goto	l9633
 19567                           
 19568                           ;locked_task.c: 237: pw_found = locked_secret_check(data, 2 );
 19569  1F25  0858               	movf	locked_Main@data+1,w
 19570  1F26  00F8               	movwf	locked_secret_check@data+1
 19571  1F27  0857               	movf	locked_Main@data,w
 19572  1F28  00F7               	movwf	locked_secret_check@data
 19573  1F29  3002               	movlw	2
 19574  1F2A  00D4               	movwf	??_locked_Main
 19575  1F2B  0854               	movf	??_locked_Main,w
 19576  1F2C  00F9               	movwf	locked_secret_check@buttonPressed
 19577  1F2D  31A5  258A  319D   	fcall	_locked_secret_check
 19578  1F30  0020               	movlb	0	; select bank0
 19579  1F31  00D5               	movwf	??_locked_Main+1
 19580  1F32  0855               	movf	??_locked_Main+1,w
 19581  1F33  0021               	movlb	1	; select bank1
 19582  1F34  00C3               	movwf	_pw_found^(0+128)
 19583  1F35                     l9633:	
 19584                           
 19585                           ;locked_task.c: 238: }
 19586                           ;locked_task.c: 239: data->holdCountA = 0;
 19587  1F35  0020               	movlb	0	; select bank0
 19588  1F36  0857               	movf	locked_Main@data,w
 19589  1F37  0086               	movwf	6
 19590  1F38  0858               	movf	locked_Main@data+1,w
 19591  1F39  0087               	movwf	7
 19592  1F3A  3143               	addfsr 1,3
 19593  1F3B  3000               	movlw	0
 19594  1F3C  3FC0               	movwi [0]fsr1
 19595  1F3D  3FC1               	movwi [1]fsr1
 19596                           
 19597                           ;locked_task.c: 240: data->holdCountB += 1;
 19598  1F3E  0857               	movf	locked_Main@data,w
 19599  1F3F  0086               	movwf	6
 19600  1F40  0858               	movf	locked_Main@data+1,w
 19601  1F41  0087               	movwf	7
 19602  1F42  3145               	addfsr 1,5
 19603  1F43  3001               	movlw	1
 19604  1F44  0781               	addwf	1,f
 19605  1F45  3141               	addfsr 1,1
 19606  1F46  1803               	skipnc
 19607  1F47  0A81               	incf	1,f
 19608                           
 19609                           ;locked_task.c: 241: data->holdCountX = 0;
 19610  1F48  0857               	movf	locked_Main@data,w
 19611  1F49  0086               	movwf	6
 19612  1F4A  0858               	movf	locked_Main@data+1,w
 19613  1F4B  0087               	movwf	7
 19614  1F4C  3147               	addfsr 1,7
 19615  1F4D  3000               	movlw	0
 19616  1F4E  3FC0               	movwi [0]fsr1
 19617  1F4F  3FC1               	movwi [1]fsr1
 19618                           
 19619                           ;locked_task.c: 242: data->holdCountY = 0;
 19620  1F50  0857               	movf	locked_Main@data,w
 19621  1F51  0086               	movwf	6
 19622  1F52  0858               	movf	locked_Main@data+1,w
 19623  1F53  0087               	movwf	7
 19624  1F54  3149               	addfsr 1,9
 19625  1F55  3000               	movlw	0
 19626  1F56  3FC0               	movwi [0]fsr1
 19627  1F57  3FC1               	movwi [1]fsr1
 19628                           
 19629                           ;locked_task.c: 243: data->noholdCount = 0;
 19630  1F58  0857               	movf	locked_Main@data,w
 19631  1F59  0086               	movwf	6
 19632  1F5A  0858               	movf	locked_Main@data+1,w
 19633  1F5B  0087               	movwf	7
 19634  1F5C  314B               	addfsr 1,11
 19635  1F5D  3000               	movlw	0
 19636  1F5E  3FC0               	movwi [0]fsr1
 19637  1F5F  3FC1               	movwi [1]fsr1
 19638                           
 19639                           ;locked_task.c: 244: break;
 19640  1F60  2FDD               	goto	l9663
 19641  1F61                     l9643:	
 19642                           ;locked_task.c: 245: case 1:
 19643                           
 19644                           
 19645                           ;locked_task.c: 246: if (data->holdCountA == 0){
 19646  1F61  0857               	movf	locked_Main@data,w
 19647  1F62  0086               	movwf	6
 19648  1F63  0858               	movf	locked_Main@data+1,w
 19649  1F64  0087               	movwf	7
 19650  1F65  3143               	addfsr 1,3
 19651  1F66  0016               	moviw fsr1++
 19652  1F67  0401               	iorwf	1,w
 19653  1F68  1D03               	btfss	3,2
 19654  1F69  2F78               	goto	l9647
 19655                           
 19656                           ;locked_task.c: 247: pw_found = locked_secret_check(data, 1 );
 19657  1F6A  0858               	movf	locked_Main@data+1,w
 19658  1F6B  00F8               	movwf	locked_secret_check@data+1
 19659  1F6C  0857               	movf	locked_Main@data,w
 19660  1F6D  00F7               	movwf	locked_secret_check@data
 19661  1F6E  01F9               	clrf	locked_secret_check@buttonPressed
 19662  1F6F  0AF9               	incf	locked_secret_check@buttonPressed,f
 19663  1F70  31A5  258A  319D   	fcall	_locked_secret_check
 19664  1F73  0020               	movlb	0	; select bank0
 19665  1F74  00D4               	movwf	??_locked_Main
 19666  1F75  0854               	movf	??_locked_Main,w
 19667  1F76  0021               	movlb	1	; select bank1
 19668  1F77  00C3               	movwf	_pw_found^(0+128)
 19669  1F78                     l9647:	
 19670                           
 19671                           ;locked_task.c: 248: }
 19672                           ;locked_task.c: 249: data->holdCountA += 1;
 19673  1F78  0020               	movlb	0	; select bank0
 19674  1F79  0857               	movf	locked_Main@data,w
 19675  1F7A  0086               	movwf	6
 19676  1F7B  0858               	movf	locked_Main@data+1,w
 19677  1F7C  0087               	movwf	7
 19678  1F7D  3143               	addfsr 1,3
 19679  1F7E  3001               	movlw	1
 19680  1F7F  0781               	addwf	1,f
 19681  1F80  3141               	addfsr 1,1
 19682  1F81  1803               	skipnc
 19683  1F82  0A81               	incf	1,f
 19684                           
 19685                           ;locked_task.c: 250: data->holdCountB = 0;
 19686  1F83  0857               	movf	locked_Main@data,w
 19687  1F84  0086               	movwf	6
 19688  1F85  0858               	movf	locked_Main@data+1,w
 19689  1F86  0087               	movwf	7
 19690  1F87  3145               	addfsr 1,5
 19691  1F88  3000               	movlw	0
 19692  1F89  3FC0               	movwi [0]fsr1
 19693  1F8A  3FC1               	movwi [1]fsr1
 19694                           
 19695                           ;locked_task.c: 251: data->holdCountX = 0;
 19696  1F8B  0857               	movf	locked_Main@data,w
 19697  1F8C  0086               	movwf	6
 19698  1F8D  0858               	movf	locked_Main@data+1,w
 19699  1F8E  0087               	movwf	7
 19700  1F8F  3147               	addfsr 1,7
 19701  1F90  3000               	movlw	0
 19702  1F91  3FC0               	movwi [0]fsr1
 19703  1F92  3FC1               	movwi [1]fsr1
 19704                           
 19705                           ;locked_task.c: 252: data->holdCountY = 0;
 19706  1F93  0857               	movf	locked_Main@data,w
 19707  1F94  0086               	movwf	6
 19708  1F95  0858               	movf	locked_Main@data+1,w
 19709  1F96  0087               	movwf	7
 19710  1F97  3149               	addfsr 1,9
 19711  1F98  3000               	movlw	0
 19712  1F99  3FC0               	movwi [0]fsr1
 19713  1F9A  3FC1               	movwi [1]fsr1
 19714                           
 19715                           ;locked_task.c: 253: data->noholdCount = 0;
 19716  1F9B  0857               	movf	locked_Main@data,w
 19717  1F9C  0086               	movwf	6
 19718  1F9D  0858               	movf	locked_Main@data+1,w
 19719  1F9E  0087               	movwf	7
 19720  1F9F  314B               	addfsr 1,11
 19721  1FA0  3000               	movlw	0
 19722  1FA1  3FC0               	movwi [0]fsr1
 19723  1FA2  3FC1               	movwi [1]fsr1
 19724                           
 19725                           ;locked_task.c: 254: break;
 19726  1FA3  2FDD               	goto	l9663
 19727  1FA4                     l9657:	
 19728                           ;locked_task.c: 255: default:
 19729                           
 19730                           
 19731                           ;locked_task.c: 256: data->holdCountA = 0;
 19732  1FA4  0857               	movf	locked_Main@data,w
 19733  1FA5  0086               	movwf	6
 19734  1FA6  0858               	movf	locked_Main@data+1,w
 19735  1FA7  0087               	movwf	7
 19736  1FA8  3143               	addfsr 1,3
 19737  1FA9  3000               	movlw	0
 19738  1FAA  3FC0               	movwi [0]fsr1
 19739  1FAB  3FC1               	movwi [1]fsr1
 19740                           
 19741                           ;locked_task.c: 257: data->holdCountB = 0;
 19742  1FAC  0857               	movf	locked_Main@data,w
 19743  1FAD  0086               	movwf	6
 19744  1FAE  0858               	movf	locked_Main@data+1,w
 19745  1FAF  0087               	movwf	7
 19746  1FB0  3145               	addfsr 1,5
 19747  1FB1  3000               	movlw	0
 19748  1FB2  3FC0               	movwi [0]fsr1
 19749  1FB3  3FC1               	movwi [1]fsr1
 19750                           
 19751                           ;locked_task.c: 258: data->holdCountX = 0;
 19752  1FB4  0857               	movf	locked_Main@data,w
 19753  1FB5  0086               	movwf	6
 19754  1FB6  0858               	movf	locked_Main@data+1,w
 19755  1FB7  0087               	movwf	7
 19756  1FB8  3147               	addfsr 1,7
 19757  1FB9  3000               	movlw	0
 19758  1FBA  3FC0               	movwi [0]fsr1
 19759  1FBB  3FC1               	movwi [1]fsr1
 19760                           
 19761                           ;locked_task.c: 259: data->holdCountY = 0;
 19762  1FBC  0857               	movf	locked_Main@data,w
 19763  1FBD  0086               	movwf	6
 19764  1FBE  0858               	movf	locked_Main@data+1,w
 19765  1FBF  0087               	movwf	7
 19766  1FC0  3149               	addfsr 1,9
 19767  1FC1  3000               	movlw	0
 19768  1FC2  3FC0               	movwi [0]fsr1
 19769  1FC3  3FC1               	movwi [1]fsr1
 19770                           
 19771                           ;locked_task.c: 260: data->noholdCount += 1;
 19772  1FC4  0857               	movf	locked_Main@data,w
 19773  1FC5  0086               	movwf	6
 19774  1FC6  0858               	movf	locked_Main@data+1,w
 19775  1FC7  0087               	movwf	7
 19776  1FC8  314B               	addfsr 1,11
 19777  1FC9  3001               	movlw	1
 19778  1FCA  0781               	addwf	1,f
 19779  1FCB  3141               	addfsr 1,1
 19780  1FCC  1803               	skipnc
 19781  1FCD  0A81               	incf	1,f
 19782                           
 19783                           ;locked_task.c: 261: }
 19784  1FCE  2FDD               	goto	l9663
 19785  1FCF                     l9661:	
 19786  1FCF  0856               	movf	locked_Main@buttonPressed,w
 19787                           
 19788                           ; Switch size 1, requested type "space"
 19789                           ; Number of cases is 4, Range of values is 1 to 8
 19790                           ; switch strategies available:
 19791                           ; Name         Instructions Cycles
 19792                           ; simple_byte           13     7 (average)
 19793                           ; direct_byte           25     9 (fixed)
 19794                           ; jumptable            263     9 (fixed)
 19795                           ;	Chosen strategy is simple_byte
 19796  1FD0  3A01               	xorlw	1	; case 1
 19797  1FD1  1903               	skipnz
 19798  1FD2  2F61               	goto	l9643
 19799  1FD3  3A03               	xorlw	3	; case 2
 19800  1FD4  1903               	skipnz
 19801  1FD5  2F1C               	goto	l9629
 19802  1FD6  3A06               	xorlw	6	; case 4
 19803  1FD7  1903               	skipnz
 19804  1FD8  2ECB               	goto	l9611
 19805  1FD9  3A0C               	xorlw	12	; case 8
 19806  1FDA  1903               	skipnz
 19807  1FDB  2ED6               	goto	l9615
 19808  1FDC  2FA4               	goto	l9657
 19809  1FDD                     l9663:	
 19810                           
 19811                           ;locked_task.c: 262: if(pw_found==1){
 19812  1FDD  0021               	movlb	1	; select bank1
 19813  1FDE  0343               	decf	_pw_found^(0+128),w
 19814  1FDF  1D03               	btfss	3,2
 19815  1FE0  0008               	return
 19816                           
 19817                           ;locked_task.c: 263: if (badge_locked){
 19818  1FE1  0844               	movf	_badge_locked^(0+128),w
 19819  1FE2  1903               	btfsc	3,2
 19820  1FE3  2FF2               	goto	l9669
 19821                           
 19822                           ;locked_task.c: 265: data->state = LOCKED_UNLOCKING_STATE;
 19823  1FE4  0020               	movlb	0	; select bank0
 19824  1FE5  0857               	movf	locked_Main@data,w
 19825  1FE6  3E0D               	addlw	13
 19826  1FE7  00D4               	movwf	??_locked_Main
 19827  1FE8  3000               	movlw	0
 19828  1FE9  3D58               	addwfc	locked_Main@data+1,w
 19829  1FEA  00D5               	movwf	??_locked_Main+1
 19830  1FEB  0854               	movf	??_locked_Main,w
 19831  1FEC  0086               	movwf	6
 19832  1FED  0855               	movf	??_locked_Main+1,w
 19833  1FEE  0087               	movwf	7
 19834  1FEF  3003               	movlw	3
 19835  1FF0  0081               	movwf	1
 19836                           
 19837                           ;locked_task.c: 266: }
 19838  1FF1  0008               	return
 19839  1FF2                     l9669:	
 19840                           
 19841                           ;locked_task.c: 267: else {
 19842                           ;locked_task.c: 269: data->state = LOCKED_LOCKING_STATE;
 19843  1FF2  0020               	movlb	0	; select bank0
 19844  1FF3  0857               	movf	locked_Main@data,w
 19845  1FF4  3E0D               	addlw	13
 19846  1FF5  00D4               	movwf	??_locked_Main
 19847  1FF6  3000               	movlw	0
 19848  1FF7  3D58               	addwfc	locked_Main@data+1,w
 19849  1FF8  00D5               	movwf	??_locked_Main+1
 19850  1FF9  0854               	movf	??_locked_Main,w
 19851  1FFA  0086               	movwf	6
 19852  1FFB  0855               	movf	??_locked_Main+1,w
 19853  1FFC  0087               	movwf	7
 19854  1FFD  3001               	movlw	1
 19855  1FFE  0081               	movwf	1
 19856  1FFF  0008               	return
 19857  2000                     __end_of_locked_Main:	
 19858                           
 19859                           	psect	text17
 19860  1B8F                     __ptext17:	
 19861 ;; *************** function _menu_Main *****************
 19862 ;; Defined at:
 19863 ;;		line 59 in file "menu_task.c"
 19864 ;; Parameters:    Size  Location     Type
 19865 ;;  taskData        2   50[BANK0 ] PTR void 
 19866 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19867 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19868 ;; Auto vars:     Size  Location     Type
 19869 ;;  data            2   55[BANK0 ] PTR struct t_menu_taskDa
 19870 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19871 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19872 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 19873 ;; Return value:  Size  Location     Type
 19874 ;;                  1    wreg      void 
 19875 ;; Registers used:
 19876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19877 ;; Tracked objects:
 19878 ;;		On entry : 0/0
 19879 ;;		On exit  : 0/0
 19880 ;;		Unchanged: 0/0
 19881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19882 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19883 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19884 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19885 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19886 ;;Total ram usage:        7 bytes
 19887 ;; Hardware stack levels used:    1
 19888 ;; Hardware stack levels required when called:   12
 19889 ;; This function calls:
 19890 ;;		_menu_clear
 19891 ;;		_menu_display_option
 19892 ;;		_menu_run_option
 19893 ;;		_nullifyBadge_buttonsGet
 19894 ;;		_slot_Setup
 19895 ;; This function is called by:
 19896 ;;		_main
 19897 ;;		_scheduler_TaskRun
 19898 ;; This function uses a non-reentrant model
 19899 ;;
 19900                           
 19901                           
 19902                           ;psect for function _menu_Main
 19903  1B8F                     _menu_Main:	
 19904                           
 19905                           ;menu_task.c: 60: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 19906                           
 19907                           ;incstack = 0
 19908                           ; Regs used in _menu_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19909  1B8F  0020               	movlb	0	; select bank0
 19910  1B90  0853               	movf	menu_Main@taskData+1,w
 19911  1B91  00D8               	movwf	menu_Main@data+1
 19912  1B92  0852               	movf	menu_Main@taskData,w
 19913  1B93  00D7               	movwf	menu_Main@data
 19914                           
 19915                           ;menu_task.c: 61: u8 buttonPressed;
 19916                           ;menu_task.c: 63: if ( currentTask != MENU_TASK ){
 19917  1B94  0021               	movlb	1	; select bank1
 19918  1B95  083A               	movf	_currentTask^(0+128),w
 19919  1B96  043B               	iorwf	(_currentTask+1)^(0+128),w
 19920  1B97  1903               	btfsc	3,2
 19921  1B98  2C13               	goto	l9013
 19922                           
 19923                           ;menu_task.c: 65: buttonPressed = nullifyBadge_buttonsGet();
 19924  1B99  31B6  264B  319B   	fcall	_nullifyBadge_buttonsGet
 19925  1B9C  0020               	movlb	0	; select bank0
 19926  1B9D  00D4               	movwf	??_menu_Main
 19927  1B9E  0854               	movf	??_menu_Main,w
 19928  1B9F  00D6               	movwf	menu_Main@buttonPressed
 19929                           
 19930                           ;menu_task.c: 66: switch (buttonPressed) {
 19931  1BA0  2C0D               	goto	l9011
 19932  1BA1                     l8989:	
 19933                           ;menu_task.c: 67: case 1 | 2 | 8:
 19934                           
 19935                           
 19936                           ;menu_task.c: 68: currentTask = MENU_TASK;
 19937  1BA1  0021               	movlb	1	; select bank1
 19938  1BA2  01BA               	clrf	_currentTask^(0+128)
 19939  1BA3  01BB               	clrf	(_currentTask+1)^(0+128)
 19940                           
 19941                           ;menu_task.c: 69: menu_clear(data);
 19942  1BA4  0020               	movlb	0	; select bank0
 19943  1BA5  0858               	movf	menu_Main@data+1,w
 19944  1BA6  00BA               	movwf	menu_clear@data+1
 19945  1BA7  0857               	movf	menu_Main@data,w
 19946  1BA8  00B9               	movwf	menu_clear@data
 19947  1BA9  31AA  2239  319B   	fcall	_menu_clear
 19948                           
 19949                           ;menu_task.c: 72: slot_Setup(slot_taskData);
 19950  1BAC  0021               	movlb	1	; select bank1
 19951  1BAD  083D               	movf	(_slot_taskData+1)^(0+128),w
 19952  1BAE  0020               	movlb	0	; select bank0
 19953  1BAF  00B0               	movwf	slot_Setup@taskData+1
 19954  1BB0  0021               	movlb	1	; select bank1
 19955  1BB1  083C               	movf	_slot_taskData^(0+128),w
 19956  1BB2  0020               	movlb	0	; select bank0
 19957  1BB3  00AF               	movwf	slot_Setup@taskData
 19958  1BB4  31AC  2447  319B   	fcall	_slot_Setup
 19959                           
 19960                           ;menu_task.c: 75: data->holdCountA = 1;
 19961  1BB7  0020               	movlb	0	; select bank0
 19962  1BB8  0857               	movf	menu_Main@data,w
 19963  1BB9  0086               	movwf	6
 19964  1BBA  0858               	movf	menu_Main@data+1,w
 19965  1BBB  0087               	movwf	7
 19966  1BBC  3144               	addfsr 1,4
 19967  1BBD  3001               	movlw	1
 19968  1BBE  3FC0               	movwi [0]fsr1
 19969  1BBF  3000               	movlw	0
 19970  1BC0  3FC1               	movwi [1]fsr1
 19971                           
 19972                           ;menu_task.c: 76: data->holdCountB = 1;
 19973  1BC1  0857               	movf	menu_Main@data,w
 19974  1BC2  0086               	movwf	6
 19975  1BC3  0858               	movf	menu_Main@data+1,w
 19976  1BC4  0087               	movwf	7
 19977  1BC5  3146               	addfsr 1,6
 19978  1BC6  3001               	movlw	1
 19979  1BC7  3FC0               	movwi [0]fsr1
 19980  1BC8  3000               	movlw	0
 19981  1BC9  3FC1               	movwi [1]fsr1
 19982                           
 19983                           ;menu_task.c: 77: data->holdCountX = 1;
 19984  1BCA  0857               	movf	menu_Main@data,w
 19985  1BCB  0086               	movwf	6
 19986  1BCC  0858               	movf	menu_Main@data+1,w
 19987  1BCD  0087               	movwf	7
 19988  1BCE  3148               	addfsr 1,8
 19989  1BCF  3001               	movlw	1
 19990  1BD0  3FC0               	movwi [0]fsr1
 19991  1BD1  3000               	movlw	0
 19992  1BD2  3FC1               	movwi [1]fsr1
 19993                           
 19994                           ;menu_task.c: 78: data->holdCountY = 1;
 19995  1BD3  0857               	movf	menu_Main@data,w
 19996  1BD4  0086               	movwf	6
 19997  1BD5  0858               	movf	menu_Main@data+1,w
 19998  1BD6  0087               	movwf	7
 19999  1BD7  314A               	addfsr 1,10
 20000  1BD8  3001               	movlw	1
 20001  1BD9  3FC0               	movwi [0]fsr1
 20002  1BDA  3000               	movlw	0
 20003  1BDB  3FC1               	movwi [1]fsr1
 20004                           
 20005                           ;menu_task.c: 80: menu_option_idx = 0;
 20006  1BDC  0021               	movlb	1	; select bank1
 20007  1BDD  01B6               	clrf	_menu_option_idx^(0+128)
 20008  1BDE  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 20009                           
 20010                           ;menu_task.c: 81: menu_display_option(data);
 20011  1BDF  0020               	movlb	0	; select bank0
 20012  1BE0  0858               	movf	menu_Main@data+1,w
 20013  1BE1  00CD               	movwf	menu_display_option@data+1
 20014  1BE2  0857               	movf	menu_Main@data,w
 20015  1BE3  00CC               	movwf	menu_display_option@data
 20016  1BE4  31AD  25A0         	fcall	_menu_display_option
 20017                           
 20018                           ;menu_task.c: 82: break;
 20019  1BE6  0008               	return
 20020  1BE7                     l9007:	
 20021                           ;menu_task.c: 83: default:
 20022                           
 20023                           
 20024                           ;menu_task.c: 85: data->holdCountA = 1;
 20025  1BE7  0020               	movlb	0	; select bank0
 20026  1BE8  0857               	movf	menu_Main@data,w
 20027  1BE9  0086               	movwf	6
 20028  1BEA  0858               	movf	menu_Main@data+1,w
 20029  1BEB  0087               	movwf	7
 20030  1BEC  3144               	addfsr 1,4
 20031  1BED  3001               	movlw	1
 20032  1BEE  3FC0               	movwi [0]fsr1
 20033  1BEF  3000               	movlw	0
 20034  1BF0  3FC1               	movwi [1]fsr1
 20035                           
 20036                           ;menu_task.c: 86: data->holdCountB = 1;
 20037  1BF1  0857               	movf	menu_Main@data,w
 20038  1BF2  0086               	movwf	6
 20039  1BF3  0858               	movf	menu_Main@data+1,w
 20040  1BF4  0087               	movwf	7
 20041  1BF5  3146               	addfsr 1,6
 20042  1BF6  3001               	movlw	1
 20043  1BF7  3FC0               	movwi [0]fsr1
 20044  1BF8  3000               	movlw	0
 20045  1BF9  3FC1               	movwi [1]fsr1
 20046                           
 20047                           ;menu_task.c: 87: data->holdCountX = 1;
 20048  1BFA  0857               	movf	menu_Main@data,w
 20049  1BFB  0086               	movwf	6
 20050  1BFC  0858               	movf	menu_Main@data+1,w
 20051  1BFD  0087               	movwf	7
 20052  1BFE  3148               	addfsr 1,8
 20053  1BFF  3001               	movlw	1
 20054  1C00  3FC0               	movwi [0]fsr1
 20055  1C01  3000               	movlw	0
 20056  1C02  3FC1               	movwi [1]fsr1
 20057                           
 20058                           ;menu_task.c: 88: data->holdCountY = 1;
 20059  1C03  0857               	movf	menu_Main@data,w
 20060  1C04  0086               	movwf	6
 20061  1C05  0858               	movf	menu_Main@data+1,w
 20062  1C06  0087               	movwf	7
 20063  1C07  314A               	addfsr 1,10
 20064  1C08  3001               	movlw	1
 20065  1C09  3FC0               	movwi [0]fsr1
 20066  1C0A  3000               	movlw	0
 20067  1C0B  3FC1               	movwi [1]fsr1
 20068                           
 20069                           ;menu_task.c: 90: }
 20070                           
 20071                           ;menu_task.c: 89: break;
 20072  1C0C  0008               	return
 20073  1C0D                     l9011:	
 20074  1C0D  0856               	movf	menu_Main@buttonPressed,w
 20075                           
 20076                           ; Switch size 1, requested type "space"
 20077                           ; Number of cases is 1, Range of values is 11 to 11
 20078                           ; switch strategies available:
 20079                           ; Name         Instructions Cycles
 20080                           ; simple_byte            4     3 (average)
 20081                           ; direct_byte           11     9 (fixed)
 20082                           ; jumptable            263     9 (fixed)
 20083                           ;	Chosen strategy is simple_byte
 20084  1C0E  3A0B               	xorlw	11	; case 11
 20085  1C0F  1903               	skipnz
 20086  1C10  2BA1               	goto	l8989
 20087  1C11  2BE7               	goto	l9007
 20088                           
 20089                           ;menu_task.c: 91: return;
 20090  1C12  0008               	return
 20091  1C13                     l9013:	
 20092                           
 20093                           ;menu_task.c: 92: }
 20094                           ;menu_task.c: 94: buttonPressed = nullifyBadge_buttonsGet();
 20095  1C13  31B6  264B  319B   	fcall	_nullifyBadge_buttonsGet
 20096  1C16  0020               	movlb	0	; select bank0
 20097  1C17  00D4               	movwf	??_menu_Main
 20098  1C18  0854               	movf	??_menu_Main,w
 20099  1C19  00D6               	movwf	menu_Main@buttonPressed
 20100                           
 20101                           ;menu_task.c: 95: switch (buttonPressed) {
 20102  1C1A  2D74               	goto	l9097
 20103  1C1B                     l9015:	
 20104                           ;menu_task.c: 96: case 1:
 20105                           
 20106                           
 20107                           ;menu_task.c: 98: if (data->holdCountA == 0){
 20108  1C1B  0857               	movf	menu_Main@data,w
 20109  1C1C  0086               	movwf	6
 20110  1C1D  0858               	movf	menu_Main@data+1,w
 20111  1C1E  0087               	movwf	7
 20112  1C1F  3144               	addfsr 1,4
 20113  1C20  0016               	moviw fsr1++
 20114  1C21  0401               	iorwf	1,w
 20115  1C22  1D03               	btfss	3,2
 20116  1C23  2C34               	goto	l9023
 20117                           
 20118                           ;menu_task.c: 100: if (menu_option_idx == 0){
 20119  1C24  0021               	movlb	1	; select bank1
 20120  1C25  0836               	movf	_menu_option_idx^(0+128),w
 20121  1C26  0437               	iorwf	(_menu_option_idx+1)^(0+128),w
 20122  1C27  1D03               	btfss	3,2
 20123  1C28  2C30               	goto	l9021
 20124                           
 20125                           ;menu_task.c: 101: menu_option_idx = menu_option_size - 1;
 20126  1C29  0834               	movf	_menu_option_size^(0+128),w
 20127  1C2A  3EFF               	addlw	255
 20128  1C2B  00B6               	movwf	_menu_option_idx^(0+128)
 20129  1C2C  30FF               	movlw	255
 20130  1C2D  3D35               	addwfc	(_menu_option_size+1)^(0+128),w
 20131  1C2E  00B7               	movwf	(_menu_option_idx+1)^(0+128)
 20132                           
 20133                           ;menu_task.c: 102: }
 20134  1C2F  2C34               	goto	l9023
 20135  1C30                     l9021:	
 20136                           
 20137                           ;menu_task.c: 103: else {
 20138                           ;menu_task.c: 104: menu_option_idx -= 1;
 20139  1C30  3001               	movlw	1
 20140  1C31  02B6               	subwf	_menu_option_idx^(0+128),f
 20141  1C32  3000               	movlw	0
 20142  1C33  3BB7               	subwfb	(_menu_option_idx+1)^(0+128),f
 20143  1C34                     l9023:	
 20144                           
 20145                           ;menu_task.c: 105: }
 20146                           ;menu_task.c: 106: }
 20147                           ;menu_task.c: 107: menu_display_option(data);
 20148  1C34  0020               	movlb	0	; select bank0
 20149  1C35  0858               	movf	menu_Main@data+1,w
 20150  1C36  00CD               	movwf	menu_display_option@data+1
 20151  1C37  0857               	movf	menu_Main@data,w
 20152  1C38  00CC               	movwf	menu_display_option@data
 20153  1C39  31AD  25A0  319B   	fcall	_menu_display_option
 20154                           
 20155                           ;menu_task.c: 108: data->holdCountA += 1;
 20156  1C3C  0020               	movlb	0	; select bank0
 20157  1C3D  0857               	movf	menu_Main@data,w
 20158  1C3E  0086               	movwf	6
 20159  1C3F  0858               	movf	menu_Main@data+1,w
 20160  1C40  0087               	movwf	7
 20161  1C41  3144               	addfsr 1,4
 20162  1C42  3001               	movlw	1
 20163  1C43  0781               	addwf	1,f
 20164  1C44  3141               	addfsr 1,1
 20165  1C45  1803               	skipnc
 20166  1C46  0A81               	incf	1,f
 20167                           
 20168                           ;menu_task.c: 109: data->holdCountB = 0;
 20169  1C47  0857               	movf	menu_Main@data,w
 20170  1C48  0086               	movwf	6
 20171  1C49  0858               	movf	menu_Main@data+1,w
 20172  1C4A  0087               	movwf	7
 20173  1C4B  3146               	addfsr 1,6
 20174  1C4C  3000               	movlw	0
 20175  1C4D  3FC0               	movwi [0]fsr1
 20176  1C4E  3FC1               	movwi [1]fsr1
 20177                           
 20178                           ;menu_task.c: 110: data->holdCountX = 0;
 20179  1C4F  0857               	movf	menu_Main@data,w
 20180  1C50  0086               	movwf	6
 20181  1C51  0858               	movf	menu_Main@data+1,w
 20182  1C52  0087               	movwf	7
 20183  1C53  3148               	addfsr 1,8
 20184  1C54  3000               	movlw	0
 20185  1C55  3FC0               	movwi [0]fsr1
 20186  1C56  3FC1               	movwi [1]fsr1
 20187                           
 20188                           ;menu_task.c: 111: data->holdCountY = 0;
 20189  1C57  0857               	movf	menu_Main@data,w
 20190  1C58  0086               	movwf	6
 20191  1C59  0858               	movf	menu_Main@data+1,w
 20192  1C5A  0087               	movwf	7
 20193  1C5B  314A               	addfsr 1,10
 20194  1C5C  3000               	movlw	0
 20195  1C5D  3FC0               	movwi [0]fsr1
 20196  1C5E  3FC1               	movwi [1]fsr1
 20197                           
 20198                           ;menu_task.c: 112: data->noholdCount = 0;
 20199  1C5F  0857               	movf	menu_Main@data,w
 20200  1C60  0086               	movwf	6
 20201  1C61  0858               	movf	menu_Main@data+1,w
 20202  1C62  0087               	movwf	7
 20203  1C63  314C               	addfsr 1,12
 20204  1C64  3000               	movlw	0
 20205  1C65  3FC0               	movwi [0]fsr1
 20206  1C66  3FC1               	movwi [1]fsr1
 20207                           
 20208                           ;menu_task.c: 113: break;
 20209  1C67  0008               	return
 20210  1C68                     l9035:	
 20211                           ;menu_task.c: 114: case 2:
 20212                           
 20213                           
 20214                           ;menu_task.c: 116: if (data->holdCountB == 0){
 20215  1C68  0857               	movf	menu_Main@data,w
 20216  1C69  0086               	movwf	6
 20217  1C6A  0858               	movf	menu_Main@data+1,w
 20218  1C6B  0087               	movwf	7
 20219  1C6C  3146               	addfsr 1,6
 20220  1C6D  0016               	moviw fsr1++
 20221  1C6E  0401               	iorwf	1,w
 20222  1C6F  1D03               	btfss	3,2
 20223  1C70  2C90               	goto	l9043
 20224                           
 20225                           ;menu_task.c: 118: if (menu_option_idx == menu_option_size - 1){
 20226  1C71  0021               	movlb	1	; select bank1
 20227  1C72  0834               	movf	_menu_option_size^(0+128),w
 20228  1C73  3EFF               	addlw	255
 20229  1C74  0020               	movlb	0	; select bank0
 20230  1C75  00D4               	movwf	??_menu_Main
 20231  1C76  30FF               	movlw	255
 20232  1C77  0021               	movlb	1	; select bank1
 20233  1C78  3D35               	addwfc	(_menu_option_size+1)^(0+128),w
 20234  1C79  0020               	movlb	0	; select bank0
 20235  1C7A  00D5               	movwf	??_menu_Main+1
 20236  1C7B  0021               	movlb	1	; select bank1
 20237  1C7C  0837               	movf	(_menu_option_idx+1)^(0+128),w
 20238  1C7D  0020               	movlb	0	; select bank0
 20239  1C7E  0655               	xorwf	??_menu_Main+1,w
 20240  1C7F  1D03               	skipz
 20241  1C80  2C85               	goto	u5655
 20242  1C81  0021               	movlb	1	; select bank1
 20243  1C82  0836               	movf	_menu_option_idx^(0+128),w
 20244  1C83  0020               	movlb	0	; select bank0
 20245  1C84  0654               	xorwf	??_menu_Main,w
 20246  1C85                     u5655:	
 20247  1C85  1D03               	skipz
 20248  1C86  2C8B               	goto	l9041
 20249                           
 20250                           ;menu_task.c: 119: menu_option_idx = 0;
 20251  1C87  0021               	movlb	1	; select bank1
 20252  1C88  01B6               	clrf	_menu_option_idx^(0+128)
 20253  1C89  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 20254                           
 20255                           ;menu_task.c: 120: }
 20256  1C8A  2C90               	goto	l9043
 20257  1C8B                     l9041:	
 20258                           
 20259                           ;menu_task.c: 121: else {
 20260                           ;menu_task.c: 122: menu_option_idx += 1;
 20261  1C8B  3001               	movlw	1
 20262  1C8C  0021               	movlb	1	; select bank1
 20263  1C8D  07B6               	addwf	_menu_option_idx^(0+128),f
 20264  1C8E  3000               	movlw	0
 20265  1C8F  3DB7               	addwfc	(_menu_option_idx+1)^(0+128),f
 20266  1C90                     l9043:	
 20267                           
 20268                           ;menu_task.c: 123: }
 20269                           ;menu_task.c: 124: }
 20270                           ;menu_task.c: 125: menu_display_option(data);
 20271  1C90  0020               	movlb	0	; select bank0
 20272  1C91  0858               	movf	menu_Main@data+1,w
 20273  1C92  00CD               	movwf	menu_display_option@data+1
 20274  1C93  0857               	movf	menu_Main@data,w
 20275  1C94  00CC               	movwf	menu_display_option@data
 20276  1C95  31AD  25A0  319B   	fcall	_menu_display_option
 20277                           
 20278                           ;menu_task.c: 126: data->holdCountA = 0;
 20279  1C98  0020               	movlb	0	; select bank0
 20280  1C99  0857               	movf	menu_Main@data,w
 20281  1C9A  0086               	movwf	6
 20282  1C9B  0858               	movf	menu_Main@data+1,w
 20283  1C9C  0087               	movwf	7
 20284  1C9D  3144               	addfsr 1,4
 20285  1C9E  3000               	movlw	0
 20286  1C9F  3FC0               	movwi [0]fsr1
 20287  1CA0  3FC1               	movwi [1]fsr1
 20288                           
 20289                           ;menu_task.c: 127: data->holdCountB += 1;
 20290  1CA1  0857               	movf	menu_Main@data,w
 20291  1CA2  0086               	movwf	6
 20292  1CA3  0858               	movf	menu_Main@data+1,w
 20293  1CA4  0087               	movwf	7
 20294  1CA5  3146               	addfsr 1,6
 20295  1CA6  3001               	movlw	1
 20296  1CA7  0781               	addwf	1,f
 20297  1CA8  3141               	addfsr 1,1
 20298  1CA9  1803               	skipnc
 20299  1CAA  0A81               	incf	1,f
 20300                           
 20301                           ;menu_task.c: 128: data->holdCountX = 0;
 20302  1CAB  0857               	movf	menu_Main@data,w
 20303  1CAC  0086               	movwf	6
 20304  1CAD  0858               	movf	menu_Main@data+1,w
 20305  1CAE  0087               	movwf	7
 20306  1CAF  3148               	addfsr 1,8
 20307  1CB0  3000               	movlw	0
 20308  1CB1  3FC0               	movwi [0]fsr1
 20309  1CB2  3FC1               	movwi [1]fsr1
 20310                           
 20311                           ;menu_task.c: 129: data->holdCountY = 0;
 20312  1CB3  0857               	movf	menu_Main@data,w
 20313  1CB4  0086               	movwf	6
 20314  1CB5  0858               	movf	menu_Main@data+1,w
 20315  1CB6  0087               	movwf	7
 20316  1CB7  314A               	addfsr 1,10
 20317  1CB8  3000               	movlw	0
 20318  1CB9  3FC0               	movwi [0]fsr1
 20319  1CBA  3FC1               	movwi [1]fsr1
 20320                           
 20321                           ;menu_task.c: 130: data->noholdCount = 0;
 20322  1CBB  0857               	movf	menu_Main@data,w
 20323  1CBC  0086               	movwf	6
 20324  1CBD  0858               	movf	menu_Main@data+1,w
 20325  1CBE  0087               	movwf	7
 20326  1CBF  314C               	addfsr 1,12
 20327  1CC0  3000               	movlw	0
 20328  1CC1  3FC0               	movwi [0]fsr1
 20329  1CC2  3FC1               	movwi [1]fsr1
 20330                           
 20331                           ;menu_task.c: 131: break;
 20332  1CC3  0008               	return
 20333  1CC4                     l9055:	
 20334                           ;menu_task.c: 132: case 4:
 20335                           
 20336                           
 20337                           ;menu_task.c: 133: if (data->holdCountX == 0){
 20338  1CC4  0857               	movf	menu_Main@data,w
 20339  1CC5  0086               	movwf	6
 20340  1CC6  0858               	movf	menu_Main@data+1,w
 20341  1CC7  0087               	movwf	7
 20342  1CC8  3148               	addfsr 1,8
 20343  1CC9  0016               	moviw fsr1++
 20344  1CCA  0401               	iorwf	1,w
 20345  1CCB  1D03               	btfss	3,2
 20346  1CCC  2CD9               	goto	l9061
 20347                           
 20348                           ;menu_task.c: 135: menu_clear(data);
 20349  1CCD  0858               	movf	menu_Main@data+1,w
 20350  1CCE  00BA               	movwf	menu_clear@data+1
 20351  1CCF  0857               	movf	menu_Main@data,w
 20352  1CD0  00B9               	movwf	menu_clear@data
 20353  1CD1  31AA  2239  319B   	fcall	_menu_clear
 20354                           
 20355                           ;menu_task.c: 136: currentTask = FLASHY_TASK;
 20356  1CD4  3002               	movlw	2
 20357  1CD5  0021               	movlb	1	; select bank1
 20358  1CD6  00BA               	movwf	_currentTask^(0+128)
 20359  1CD7  3000               	movlw	0
 20360  1CD8  00BB               	movwf	(_currentTask^(0+128)+1)
 20361  1CD9                     l9061:	
 20362                           
 20363                           ;menu_task.c: 137: }
 20364                           ;menu_task.c: 138: data->holdCountA = 0;
 20365  1CD9  0020               	movlb	0	; select bank0
 20366  1CDA  0857               	movf	menu_Main@data,w
 20367  1CDB  0086               	movwf	6
 20368  1CDC  0858               	movf	menu_Main@data+1,w
 20369  1CDD  0087               	movwf	7
 20370  1CDE  3144               	addfsr 1,4
 20371  1CDF  3000               	movlw	0
 20372  1CE0  3FC0               	movwi [0]fsr1
 20373  1CE1  3FC1               	movwi [1]fsr1
 20374                           
 20375                           ;menu_task.c: 139: data->holdCountB = 0;
 20376  1CE2  0857               	movf	menu_Main@data,w
 20377  1CE3  0086               	movwf	6
 20378  1CE4  0858               	movf	menu_Main@data+1,w
 20379  1CE5  0087               	movwf	7
 20380  1CE6  3146               	addfsr 1,6
 20381  1CE7  3000               	movlw	0
 20382  1CE8  3FC0               	movwi [0]fsr1
 20383  1CE9  3FC1               	movwi [1]fsr1
 20384                           
 20385                           ;menu_task.c: 140: data->holdCountX += 1;
 20386  1CEA  0857               	movf	menu_Main@data,w
 20387  1CEB  0086               	movwf	6
 20388  1CEC  0858               	movf	menu_Main@data+1,w
 20389  1CED  0087               	movwf	7
 20390  1CEE  3148               	addfsr 1,8
 20391  1CEF  3001               	movlw	1
 20392  1CF0  0781               	addwf	1,f
 20393  1CF1  3141               	addfsr 1,1
 20394  1CF2  1803               	skipnc
 20395  1CF3  0A81               	incf	1,f
 20396                           
 20397                           ;menu_task.c: 141: data->holdCountY = 0;
 20398  1CF4  0857               	movf	menu_Main@data,w
 20399  1CF5  0086               	movwf	6
 20400  1CF6  0858               	movf	menu_Main@data+1,w
 20401  1CF7  0087               	movwf	7
 20402  1CF8  314A               	addfsr 1,10
 20403  1CF9  3000               	movlw	0
 20404  1CFA  3FC0               	movwi [0]fsr1
 20405  1CFB  3FC1               	movwi [1]fsr1
 20406                           
 20407                           ;menu_task.c: 142: data->noholdCount = 0;
 20408  1CFC  0857               	movf	menu_Main@data,w
 20409  1CFD  0086               	movwf	6
 20410  1CFE  0858               	movf	menu_Main@data+1,w
 20411  1CFF  0087               	movwf	7
 20412  1D00  314C               	addfsr 1,12
 20413  1D01  3000               	movlw	0
 20414  1D02  3FC0               	movwi [0]fsr1
 20415  1D03  3FC1               	movwi [1]fsr1
 20416                           
 20417                           ;menu_task.c: 143: break;
 20418  1D04  0008               	return
 20419  1D05                     l9071:	
 20420                           ;menu_task.c: 144: case 8:
 20421                           
 20422                           
 20423                           ;menu_task.c: 145: if (data->holdCountY == 0){
 20424  1D05  0857               	movf	menu_Main@data,w
 20425  1D06  0086               	movwf	6
 20426  1D07  0858               	movf	menu_Main@data+1,w
 20427  1D08  0087               	movwf	7
 20428  1D09  314A               	addfsr 1,10
 20429  1D0A  0016               	moviw fsr1++
 20430  1D0B  0401               	iorwf	1,w
 20431  1D0C  1D03               	btfss	3,2
 20432  1D0D  2D15               	goto	l9075
 20433                           
 20434                           ;menu_task.c: 146: menu_run_option(data);
 20435  1D0E  0858               	movf	menu_Main@data+1,w
 20436  1D0F  00BC               	movwf	menu_run_option@data+1
 20437  1D10  0857               	movf	menu_Main@data,w
 20438  1D11  00BB               	movwf	menu_run_option@data
 20439  1D12  31AB  2311  319B   	fcall	_menu_run_option
 20440  1D15                     l9075:	
 20441                           
 20442                           ;menu_task.c: 147: }
 20443                           ;menu_task.c: 148: data->holdCountA = 0;
 20444  1D15  0020               	movlb	0	; select bank0
 20445  1D16  0857               	movf	menu_Main@data,w
 20446  1D17  0086               	movwf	6
 20447  1D18  0858               	movf	menu_Main@data+1,w
 20448  1D19  0087               	movwf	7
 20449  1D1A  3144               	addfsr 1,4
 20450  1D1B  3000               	movlw	0
 20451  1D1C  3FC0               	movwi [0]fsr1
 20452  1D1D  3FC1               	movwi [1]fsr1
 20453                           
 20454                           ;menu_task.c: 149: data->holdCountB = 0;
 20455  1D1E  0857               	movf	menu_Main@data,w
 20456  1D1F  0086               	movwf	6
 20457  1D20  0858               	movf	menu_Main@data+1,w
 20458  1D21  0087               	movwf	7
 20459  1D22  3146               	addfsr 1,6
 20460  1D23  3000               	movlw	0
 20461  1D24  3FC0               	movwi [0]fsr1
 20462  1D25  3FC1               	movwi [1]fsr1
 20463                           
 20464                           ;menu_task.c: 150: data->holdCountX = 0;
 20465  1D26  0857               	movf	menu_Main@data,w
 20466  1D27  0086               	movwf	6
 20467  1D28  0858               	movf	menu_Main@data+1,w
 20468  1D29  0087               	movwf	7
 20469  1D2A  3148               	addfsr 1,8
 20470  1D2B  3000               	movlw	0
 20471  1D2C  3FC0               	movwi [0]fsr1
 20472  1D2D  3FC1               	movwi [1]fsr1
 20473                           
 20474                           ;menu_task.c: 151: data->holdCountY += 1;
 20475  1D2E  0857               	movf	menu_Main@data,w
 20476  1D2F  0086               	movwf	6
 20477  1D30  0858               	movf	menu_Main@data+1,w
 20478  1D31  0087               	movwf	7
 20479  1D32  314A               	addfsr 1,10
 20480  1D33  3001               	movlw	1
 20481  1D34  0781               	addwf	1,f
 20482  1D35  3141               	addfsr 1,1
 20483  1D36  1803               	skipnc
 20484  1D37  0A81               	incf	1,f
 20485                           
 20486                           ;menu_task.c: 152: data->noholdCount = 0;
 20487  1D38  0857               	movf	menu_Main@data,w
 20488  1D39  0086               	movwf	6
 20489  1D3A  0858               	movf	menu_Main@data+1,w
 20490  1D3B  0087               	movwf	7
 20491  1D3C  314C               	addfsr 1,12
 20492  1D3D  3000               	movlw	0
 20493  1D3E  3FC0               	movwi [0]fsr1
 20494  1D3F  3FC1               	movwi [1]fsr1
 20495                           
 20496                           ;menu_task.c: 153: break;
 20497  1D40  0008               	return
 20498  1D41                     l9085:	
 20499                           ;menu_task.c: 155: default:
 20500                           
 20501                           ;menu_task.c: 154: case 1 | 2 | 8:
 20502                           
 20503                           
 20504                           ;menu_task.c: 156: menu_display_option(data);
 20505  1D41  0858               	movf	menu_Main@data+1,w
 20506  1D42  00CD               	movwf	menu_display_option@data+1
 20507  1D43  0857               	movf	menu_Main@data,w
 20508  1D44  00CC               	movwf	menu_display_option@data
 20509  1D45  31AD  25A0  319B   	fcall	_menu_display_option
 20510                           
 20511                           ;menu_task.c: 157: data->holdCountA = 0;
 20512  1D48  0020               	movlb	0	; select bank0
 20513  1D49  0857               	movf	menu_Main@data,w
 20514  1D4A  0086               	movwf	6
 20515  1D4B  0858               	movf	menu_Main@data+1,w
 20516  1D4C  0087               	movwf	7
 20517  1D4D  3144               	addfsr 1,4
 20518  1D4E  3000               	movlw	0
 20519  1D4F  3FC0               	movwi [0]fsr1
 20520  1D50  3FC1               	movwi [1]fsr1
 20521                           
 20522                           ;menu_task.c: 158: data->holdCountB = 0;
 20523  1D51  0857               	movf	menu_Main@data,w
 20524  1D52  0086               	movwf	6
 20525  1D53  0858               	movf	menu_Main@data+1,w
 20526  1D54  0087               	movwf	7
 20527  1D55  3146               	addfsr 1,6
 20528  1D56  3000               	movlw	0
 20529  1D57  3FC0               	movwi [0]fsr1
 20530  1D58  3FC1               	movwi [1]fsr1
 20531                           
 20532                           ;menu_task.c: 159: data->holdCountX = 0;
 20533  1D59  0857               	movf	menu_Main@data,w
 20534  1D5A  0086               	movwf	6
 20535  1D5B  0858               	movf	menu_Main@data+1,w
 20536  1D5C  0087               	movwf	7
 20537  1D5D  3148               	addfsr 1,8
 20538  1D5E  3000               	movlw	0
 20539  1D5F  3FC0               	movwi [0]fsr1
 20540  1D60  3FC1               	movwi [1]fsr1
 20541                           
 20542                           ;menu_task.c: 160: data->holdCountY = 0;
 20543  1D61  0857               	movf	menu_Main@data,w
 20544  1D62  0086               	movwf	6
 20545  1D63  0858               	movf	menu_Main@data+1,w
 20546  1D64  0087               	movwf	7
 20547  1D65  314A               	addfsr 1,10
 20548  1D66  3000               	movlw	0
 20549  1D67  3FC0               	movwi [0]fsr1
 20550  1D68  3FC1               	movwi [1]fsr1
 20551                           
 20552                           ;menu_task.c: 161: data->noholdCount += 1;
 20553  1D69  0857               	movf	menu_Main@data,w
 20554  1D6A  0086               	movwf	6
 20555  1D6B  0858               	movf	menu_Main@data+1,w
 20556  1D6C  0087               	movwf	7
 20557  1D6D  314C               	addfsr 1,12
 20558  1D6E  3001               	movlw	1
 20559  1D6F  0781               	addwf	1,f
 20560  1D70  3141               	addfsr 1,1
 20561  1D71  1803               	skipnc
 20562  1D72  0A81               	incf	1,f
 20563                           
 20564                           ;menu_task.c: 162: }
 20565  1D73  0008               	return
 20566  1D74                     l9097:	
 20567  1D74  0856               	movf	menu_Main@buttonPressed,w
 20568                           
 20569                           ; Switch size 1, requested type "space"
 20570                           ; Number of cases is 5, Range of values is 1 to 11
 20571                           ; switch strategies available:
 20572                           ; Name         Instructions Cycles
 20573                           ; simple_byte           16     9 (average)
 20574                           ; direct_byte           31     9 (fixed)
 20575                           ; jumptable            263     9 (fixed)
 20576                           ;	Chosen strategy is simple_byte
 20577  1D75  3A01               	xorlw	1	; case 1
 20578  1D76  1903               	skipnz
 20579  1D77  2C1B               	goto	l9015
 20580  1D78  3A03               	xorlw	3	; case 2
 20581  1D79  1903               	skipnz
 20582  1D7A  2C68               	goto	l9035
 20583  1D7B  3A06               	xorlw	6	; case 4
 20584  1D7C  1903               	skipnz
 20585  1D7D  2CC4               	goto	l9055
 20586  1D7E  3A0C               	xorlw	12	; case 8
 20587  1D7F  1903               	skipnz
 20588  1D80  2D05               	goto	l9071
 20589  1D81  3A03               	xorlw	3	; case 11
 20590  1D82  1903               	skipnz
 20591  1D83  2D41               	goto	l9085
 20592  1D84  2D41               	goto	l9085
 20593  1D85  0008               	return
 20594  1D86                     __end_of_menu_Main:	
 20595                           
 20596                           	psect	text18
 20597  0819                     __ptext18:	
 20598 ;; *************** function _flashy_Main *****************
 20599 ;; Defined at:
 20600 ;;		line 122 in file "flashy_task.c"
 20601 ;; Parameters:    Size  Location     Type
 20602 ;;  taskData        2   50[BANK0 ] PTR void 
 20603 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20604 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20605 ;; Auto vars:     Size  Location     Type
 20606 ;;  hit_counter     6   54[BANK0 ] unsigned char [6]
 20607 ;;  data            2   62[BANK0 ] PTR struct t_flashy_task
 20608 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20609 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20610 ;;  buttonPresse    2   60[BANK0 ] unsigned int 
 20611 ;; Return value:  Size  Location     Type
 20612 ;;                  1    wreg      void 
 20613 ;; Registers used:
 20614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20615 ;; Tracked objects:
 20616 ;;		On entry : 0/0
 20617 ;;		On exit  : 0/0
 20618 ;;		Unchanged: 0/0
 20619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20620 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20621 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20622 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20623 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20624 ;;Total ram usage:       14 bytes
 20625 ;; Hardware stack levels used:    1
 20626 ;; Hardware stack levels required when called:   11
 20627 ;; This function calls:
 20628 ;;		_flashy_display_option
 20629 ;;		_led_Parody
 20630 ;;		_led_circle
 20631 ;;		_led_curtain
 20632 ;;		_led_rand
 20633 ;;		_led_roundabout
 20634 ;;		_let_alternate
 20635 ;;		_marquee
 20636 ;;		_nullifyBadge_buttonsGet
 20637 ;;		_nullifyBadge_irGet
 20638 ;;		_nullifyBadge_irTxClr
 20639 ;;		_nullifyBadge_irTxRegister
 20640 ;;		_nullifyBadge_irTxRelease
 20641 ;;		_nullifyBadge_irTxSet
 20642 ;;		_nullifyBadge_segDisplayForceUpdate
 20643 ;;		_nullifyBadge_segDisplayPutStr
 20644 ;;		_nullifyBadge_userLedsSet
 20645 ;;		_sprintf
 20646 ;; This function is called by:
 20647 ;;		_main
 20648 ;;		_scheduler_TaskRun
 20649 ;; This function uses a non-reentrant model
 20650 ;;
 20651                           
 20652                           
 20653                           ;psect for function _flashy_Main
 20654  0819                     _flashy_Main:	
 20655                           
 20656                           ;flashy_task.c: 123: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskD
      +                          ata;
 20657                           
 20658                           ;incstack = 0
 20659                           ; Regs used in _flashy_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20660  0819  0020               	movlb	0	; select bank0
 20661  081A  0853               	movf	flashy_Main@taskData+1,w
 20662  081B  00DF               	movwf	flashy_Main@data+1
 20663  081C  0852               	movf	flashy_Main@taskData,w
 20664  081D  00DE               	movwf	flashy_Main@data
 20665                           
 20666                           ;flashy_task.c: 124: u16 buttonPressed;
 20667                           ;flashy_task.c: 125: char hit_counter[6];
 20668                           ;flashy_task.c: 127: if ( currentTask != FLASHY_TASK ){
 20669  081E  3002               	movlw	2
 20670  081F  0021               	movlb	1	; select bank1
 20671  0820  063A               	xorwf	_currentTask^(0+128),w
 20672  0821  043B               	iorwf	(_currentTask+1)^(0+128),w
 20673  0822  1903               	btfsc	3,2
 20674  0823  28C6               	goto	l9135
 20675                           
 20676                           ;flashy_task.c: 128: data->holdCountA = 1;
 20677  0824  0020               	movlb	0	; select bank0
 20678  0825  085E               	movf	flashy_Main@data,w
 20679  0826  0086               	movwf	6
 20680  0827  085F               	movf	flashy_Main@data+1,w
 20681  0828  0087               	movwf	7
 20682  0829  314A               	addfsr 1,10
 20683  082A  3001               	movlw	1
 20684  082B  3FC0               	movwi [0]fsr1
 20685  082C  3000               	movlw	0
 20686  082D  3FC1               	movwi [1]fsr1
 20687                           
 20688                           ;flashy_task.c: 129: data->holdCountB = 1;
 20689  082E  085E               	movf	flashy_Main@data,w
 20690  082F  0086               	movwf	6
 20691  0830  085F               	movf	flashy_Main@data+1,w
 20692  0831  0087               	movwf	7
 20693  0832  314C               	addfsr 1,12
 20694  0833  3001               	movlw	1
 20695  0834  3FC0               	movwi [0]fsr1
 20696  0835  3000               	movlw	0
 20697  0836  3FC1               	movwi [1]fsr1
 20698                           
 20699                           ;flashy_task.c: 130: data->holdCountX = 1;
 20700  0837  085E               	movf	flashy_Main@data,w
 20701  0838  0086               	movwf	6
 20702  0839  085F               	movf	flashy_Main@data+1,w
 20703  083A  0087               	movwf	7
 20704  083B  314E               	addfsr 1,14
 20705  083C  3001               	movlw	1
 20706  083D  3FC0               	movwi [0]fsr1
 20707  083E  3000               	movlw	0
 20708  083F  3FC1               	movwi [1]fsr1
 20709                           
 20710                           ;flashy_task.c: 131: data->holdCountY = 1;
 20711  0840  085E               	movf	flashy_Main@data,w
 20712  0841  0086               	movwf	6
 20713  0842  085F               	movf	flashy_Main@data+1,w
 20714  0843  0087               	movwf	7
 20715  0844  3150               	addfsr 1,16
 20716  0845  3001               	movlw	1
 20717  0846  3FC0               	movwi [0]fsr1
 20718  0847  3000               	movlw	0
 20719  0848  3FC1               	movwi [1]fsr1
 20720                           
 20721                           ;flashy_task.c: 132: data->holdCountXY = 1;
 20722  0849  085E               	movf	flashy_Main@data,w
 20723  084A  0086               	movwf	6
 20724  084B  085F               	movf	flashy_Main@data+1,w
 20725  084C  0087               	movwf	7
 20726  084D  3152               	addfsr 1,18
 20727  084E  3001               	movlw	1
 20728  084F  3FC0               	movwi [0]fsr1
 20729  0850  3000               	movlw	0
 20730  0851  3FC1               	movwi [1]fsr1
 20731                           
 20732                           ;flashy_task.c: 133: data->holdCountAY = 1;
 20733  0852  085E               	movf	flashy_Main@data,w
 20734  0853  0086               	movwf	6
 20735  0854  085F               	movf	flashy_Main@data+1,w
 20736  0855  0087               	movwf	7
 20737  0856  3154               	addfsr 1,20
 20738  0857  3001               	movlw	1
 20739  0858  3FC0               	movwi [0]fsr1
 20740  0859  3000               	movlw	0
 20741  085A  3FC1               	movwi [1]fsr1
 20742                           
 20743                           ;flashy_task.c: 134: data->holdCountAX = 1;
 20744  085B  085E               	movf	flashy_Main@data,w
 20745  085C  0086               	movwf	6
 20746  085D  085F               	movf	flashy_Main@data+1,w
 20747  085E  0087               	movwf	7
 20748  085F  3156               	addfsr 1,22
 20749  0860  3001               	movlw	1
 20750  0861  3FC0               	movwi [0]fsr1
 20751  0862  3000               	movlw	0
 20752  0863  3FC1               	movwi [1]fsr1
 20753                           
 20754                           ;flashy_task.c: 135: return;
 20755  0864  0008               	return
 20756  0865                     l9107:	
 20757                           ;flashy_task.c: 142: case SECRET_VALUE_TEST:
 20758                           
 20759                           ;flashy_task.c: 141: break;
 20760                           
 20761                           ;flashy_task.c: 140: case SECRET_VALUE_INIT:
 20762                           
 20763                           ;flashy_task.c: 136: }
 20764                           ;flashy_task.c: 139: switch (secret_value){
 20765                           
 20766                           
 20767                           ;flashy_task.c: 143: secret_value = SECRET_VALUE_INIT;
 20768  0865  0021               	movlb	1	; select bank1
 20769  0866  01C5               	clrf	_secret_value^(0+128)
 20770  0867  01C6               	clrf	(_secret_value+1)^(0+128)
 20771                           
 20772                           ;flashy_task.c: 144: data->displayTickCount = 0;
 20773  0868  0020               	movlb	0	; select bank0
 20774  0869  085E               	movf	flashy_Main@data,w
 20775  086A  0086               	movwf	6
 20776  086B  085F               	movf	flashy_Main@data+1,w
 20777  086C  0087               	movwf	7
 20778  086D  3144               	addfsr 1,4
 20779  086E  3000               	movlw	0
 20780  086F  3FC0               	movwi [0]fsr1
 20781  0870  3FC1               	movwi [1]fsr1
 20782                           
 20783                           ;flashy_task.c: 145: data->display_state = FLASHY_STATE_DISPLAY_SECRET_TEST;
 20784  0871  085E               	movf	flashy_Main@data,w
 20785  0872  3E06               	addlw	6
 20786  0873  00D4               	movwf	??_flashy_Main
 20787  0874  3000               	movlw	0
 20788  0875  3D5F               	addwfc	flashy_Main@data+1,w
 20789  0876  00D5               	movwf	??_flashy_Main+1
 20790  0877  0854               	movf	??_flashy_Main,w
 20791  0878  0086               	movwf	6
 20792  0879  0855               	movf	??_flashy_Main+1,w
 20793  087A  0087               	movwf	7
 20794  087B  3005               	movlw	5
 20795  087C  0081               	movwf	1
 20796                           
 20797                           ;flashy_task.c: 147: data->holdCountA = 1;
 20798  087D  085E               	movf	flashy_Main@data,w
 20799  087E  0086               	movwf	6
 20800  087F  085F               	movf	flashy_Main@data+1,w
 20801  0880  0087               	movwf	7
 20802  0881  314A               	addfsr 1,10
 20803  0882  3001               	movlw	1
 20804  0883  3FC0               	movwi [0]fsr1
 20805  0884  3000               	movlw	0
 20806  0885  3FC1               	movwi [1]fsr1
 20807                           
 20808                           ;flashy_task.c: 148: data->holdCountB = 1;
 20809  0886  085E               	movf	flashy_Main@data,w
 20810  0887  0086               	movwf	6
 20811  0888  085F               	movf	flashy_Main@data+1,w
 20812  0889  0087               	movwf	7
 20813  088A  314C               	addfsr 1,12
 20814  088B  3001               	movlw	1
 20815  088C  3FC0               	movwi [0]fsr1
 20816  088D  3000               	movlw	0
 20817  088E  3FC1               	movwi [1]fsr1
 20818                           
 20819                           ;flashy_task.c: 149: data->holdCountX = 1;
 20820  088F  085E               	movf	flashy_Main@data,w
 20821  0890  0086               	movwf	6
 20822  0891  085F               	movf	flashy_Main@data+1,w
 20823  0892  0087               	movwf	7
 20824  0893  314E               	addfsr 1,14
 20825  0894  3001               	movlw	1
 20826  0895  3FC0               	movwi [0]fsr1
 20827  0896  3000               	movlw	0
 20828  0897  3FC1               	movwi [1]fsr1
 20829                           
 20830                           ;flashy_task.c: 150: data->holdCountY = 1;
 20831  0898  085E               	movf	flashy_Main@data,w
 20832  0899  0086               	movwf	6
 20833  089A  085F               	movf	flashy_Main@data+1,w
 20834  089B  0087               	movwf	7
 20835  089C  3150               	addfsr 1,16
 20836  089D  3001               	movlw	1
 20837  089E  3FC0               	movwi [0]fsr1
 20838  089F  3000               	movlw	0
 20839  08A0  3FC1               	movwi [1]fsr1
 20840                           
 20841                           ;flashy_task.c: 151: data->holdCountXY = 1;
 20842  08A1  085E               	movf	flashy_Main@data,w
 20843  08A2  0086               	movwf	6
 20844  08A3  085F               	movf	flashy_Main@data+1,w
 20845  08A4  0087               	movwf	7
 20846  08A5  3152               	addfsr 1,18
 20847  08A6  3001               	movlw	1
 20848  08A7  3FC0               	movwi [0]fsr1
 20849  08A8  3000               	movlw	0
 20850  08A9  3FC1               	movwi [1]fsr1
 20851                           
 20852                           ;flashy_task.c: 152: data->holdCountAY = 1;
 20853  08AA  085E               	movf	flashy_Main@data,w
 20854  08AB  0086               	movwf	6
 20855  08AC  085F               	movf	flashy_Main@data+1,w
 20856  08AD  0087               	movwf	7
 20857  08AE  3154               	addfsr 1,20
 20858  08AF  3001               	movlw	1
 20859  08B0  3FC0               	movwi [0]fsr1
 20860  08B1  3000               	movlw	0
 20861  08B2  3FC1               	movwi [1]fsr1
 20862                           
 20863                           ;flashy_task.c: 153: data->holdCountAX = 1;
 20864  08B3  085E               	movf	flashy_Main@data,w
 20865  08B4  0086               	movwf	6
 20866  08B5  085F               	movf	flashy_Main@data+1,w
 20867  08B6  0087               	movwf	7
 20868  08B7  3156               	addfsr 1,22
 20869  08B8  3001               	movlw	1
 20870  08B9  3FC0               	movwi [0]fsr1
 20871  08BA  3000               	movlw	0
 20872  08BB  3FC1               	movwi [1]fsr1
 20873                           
 20874                           ;flashy_task.c: 154: data->noholdCount = 1;
 20875  08BC  085E               	movf	flashy_Main@data,w
 20876  08BD  0086               	movwf	6
 20877  08BE  085F               	movf	flashy_Main@data+1,w
 20878  08BF  0087               	movwf	7
 20879  08C0  315C               	addfsr 1,28
 20880  08C1  3001               	movlw	1
 20881  08C2  3FC0               	movwi [0]fsr1
 20882  08C3  3000               	movlw	0
 20883  08C4  3FC1               	movwi [1]fsr1
 20884                           
 20885                           ;flashy_task.c: 155: return;
 20886  08C5  0008               	return
 20887  08C6                     l9135:	
 20888                           ;flashy_task.c: 157: }
 20889                           
 20890                           ;flashy_task.c: 156: break;
 20891                           
 20892                           
 20893                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20894                           ; Switch size 1, requested type "space"
 20895                           ; Number of cases is 1, Range of values is 0 to 0
 20896                           ; switch strategies available:
 20897                           ; Name         Instructions Cycles
 20898                           ; simple_byte            4     3 (average)
 20899                           ; direct_byte            8     6 (fixed)
 20900                           ; jumptable            260     6 (fixed)
 20901                           ;	Chosen strategy is simple_byte
 20902  08C6  0021               	movlb	1	; select bank1
 20903  08C7  0846               	movf	(_secret_value+1)^(0+128),w
 20904  08C8  3A00               	xorlw	0	; case 0
 20905  08C9  1903               	skipnz
 20906  08CA  28CC               	goto	l10827
 20907  08CB  29C4               	goto	l9205
 20908  08CC                     l10827:	
 20909                           
 20910                           ; Switch size 1, requested type "space"
 20911                           ; Number of cases is 2, Range of values is 0 to 1
 20912                           ; switch strategies available:
 20913                           ; Name         Instructions Cycles
 20914                           ; simple_byte            7     4 (average)
 20915                           ; direct_byte           10     6 (fixed)
 20916                           ; jumptable            260     6 (fixed)
 20917                           ;	Chosen strategy is simple_byte
 20918  08CC  0845               	movf	_secret_value^(0+128),w
 20919  08CD  3A00               	xorlw	0	; case 0
 20920  08CE  1903               	skipnz
 20921  08CF  29C4               	goto	l9205
 20922  08D0  3A01               	xorlw	1	; case 1
 20923  08D1  1903               	skipnz
 20924  08D2  2865               	goto	l9107
 20925  08D3  29C4               	goto	l9205
 20926                           
 20927                           ;flashy_task.c: 160: switch (data->led_state){
 20928  08D4  29C4               	goto	l9205
 20929  08D5                     l9137:	
 20930                           ;flashy_task.c: 161: case FLASHY_STATE_LED_ROUNDABOUT:
 20931                           
 20932                           
 20933                           ;flashy_task.c: 162: if (data->delayTickCount == 0){
 20934  08D5  0020               	movlb	0	; select bank0
 20935  08D6  085E               	movf	flashy_Main@data,w
 20936  08D7  0086               	movwf	6
 20937  08D8  085F               	movf	flashy_Main@data+1,w
 20938  08D9  0087               	movwf	7
 20939  08DA  3141               	addfsr 1,1
 20940  08DB  0016               	moviw fsr1++
 20941  08DC  0401               	iorwf	1,w
 20942  08DD  1D03               	btfss	3,2
 20943  08DE  29B8               	goto	L7
 20944                           
 20945                           ;flashy_task.c: 163: led_roundabout(flashy_leds_idx);
 20946  08DF  0021               	movlb	1	; select bank1
 20947  08E0  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20948  08E1  0020               	movlb	0	; select bank0
 20949  08E2  00B1               	movwf	led_roundabout@counter+1
 20950  08E3  0021               	movlb	1	; select bank1
 20951  08E4  0832               	movf	_flashy_leds_idx^(0+128),w
 20952  08E5  0020               	movlb	0	; select bank0
 20953  08E6  00B0               	movwf	led_roundabout@counter
 20954  08E7  31A8  20E7  3188   	fcall	_led_roundabout
 20955                           
 20956                           ;flashy_task.c: 164: flashy_leds_idx += 1;
 20957  08EA  3001               	movlw	1
 20958  08EB  0021               	movlb	1	; select bank1
 20959  08EC  07B2               	addwf	_flashy_leds_idx^(0+128),f
 20960  08ED  3000               	movlw	0
 20961  08EE  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 20962                           
 20963                           ;flashy_task.c: 165: data->delayTickCount = 35;
 20964  08EF  0020               	movlb	0	; select bank0
 20965  08F0  085E               	movf	flashy_Main@data,w
 20966  08F1  0086               	movwf	6
 20967  08F2  085F               	movf	flashy_Main@data+1,w
 20968  08F3  0087               	movwf	7
 20969  08F4  3141               	addfsr 1,1
 20970  08F5  3023               	movlw	35
 20971  08F6  3FC0               	movwi [0]fsr1
 20972  08F7  3000               	movlw	0
 20973  08F8  3FC1               	movwi [1]fsr1
 20974                           
 20975                           ;flashy_task.c: 166: }
 20976  08F9  2A5E               	goto	l9235
 20977  08FA                     l9147:	
 20978                           ;flashy_task.c: 171: case FLASHY_STATE_LED_SHOT:
 20979                           
 20980                           ;flashy_task.c: 169: }
 20981                           ;flashy_task.c: 170: break;
 20982                           
 20983                           ;flashy_task.c: 167: else {
 20984                           ;flashy_task.c: 168: data->delayTickCount -= 1;
 20985                           
 20986                           
 20987                           ;flashy_task.c: 172: if (data->delayTickCount == 0){
 20988  08FA  085E               	movf	flashy_Main@data,w
 20989  08FB  0086               	movwf	6
 20990  08FC  085F               	movf	flashy_Main@data+1,w
 20991  08FD  0087               	movwf	7
 20992  08FE  3141               	addfsr 1,1
 20993  08FF  0016               	moviw fsr1++
 20994  0900  0401               	iorwf	1,w
 20995  0901  1D03               	btfss	3,2
 20996  0902  29B8               	goto	L7
 20997                           
 20998                           ;flashy_task.c: 173: led_curtain(flashy_leds_idx);
 20999  0903  0021               	movlb	1	; select bank1
 21000  0904  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21001  0905  0020               	movlb	0	; select bank0
 21002  0906  00B1               	movwf	led_curtain@counter+1
 21003  0907  0021               	movlb	1	; select bank1
 21004  0908  0832               	movf	_flashy_leds_idx^(0+128),w
 21005  0909  0020               	movlb	0	; select bank0
 21006  090A  00B0               	movwf	led_curtain@counter
 21007  090B  31A8  20A6  3188   	fcall	_led_curtain
 21008                           
 21009                           ;flashy_task.c: 174: flashy_leds_idx += 1;
 21010  090E  3001               	movlw	1
 21011  090F  0021               	movlb	1	; select bank1
 21012  0910  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21013  0911  3000               	movlw	0
 21014  0912  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21015                           
 21016                           ;flashy_task.c: 175: data->delayTickCount = 5;
 21017  0913  0020               	movlb	0	; select bank0
 21018  0914  085E               	movf	flashy_Main@data,w
 21019  0915  0086               	movwf	6
 21020  0916  085F               	movf	flashy_Main@data+1,w
 21021  0917  0087               	movwf	7
 21022  0918  3141               	addfsr 1,1
 21023  0919  3005               	movlw	5
 21024  091A  3FC0               	movwi [0]fsr1
 21025  091B  3000               	movlw	0
 21026  091C  3FC1               	movwi [1]fsr1
 21027                           
 21028                           ;flashy_task.c: 176: }
 21029  091D  2A5E               	goto	l9235
 21030  091E                     l9157:	
 21031                           ;flashy_task.c: 181: case FLASHY_STATE_SPARKLE:
 21032                           
 21033                           ;flashy_task.c: 179: }
 21034                           ;flashy_task.c: 180: break;
 21035                           
 21036                           ;flashy_task.c: 177: else {
 21037                           ;flashy_task.c: 178: data->delayTickCount -= 1;
 21038                           
 21039                           
 21040                           ;flashy_task.c: 182: if (data->delayTickCount < 1){
 21041  091E  085E               	movf	flashy_Main@data,w
 21042  091F  0086               	movwf	6
 21043  0920  085F               	movf	flashy_Main@data+1,w
 21044  0921  0087               	movwf	7
 21045  0922  3141               	addfsr 1,1
 21046  0923  0016               	moviw fsr1++
 21047  0924  0401               	iorwf	1,w
 21048  0925  1D03               	btfss	3,2
 21049  0926  29B7               	goto	l9201
 21050                           
 21051                           ;flashy_task.c: 183: led_rand();
 21052  0927  31AA  2280  3188   	fcall	_led_rand
 21053                           
 21054                           ;flashy_task.c: 184: data->delayTickCount = flashy_sparkle_rate;
 21055  092A  0020               	movlb	0	; select bank0
 21056  092B  085E               	movf	flashy_Main@data,w
 21057  092C  0086               	movwf	6
 21058  092D  085F               	movf	flashy_Main@data+1,w
 21059  092E  0087               	movwf	7
 21060  092F  3141               	addfsr 1,1
 21061  0930  0021               	movlb	1	; select bank1
 21062  0931  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21063  0932  3FC0               	movwi [0]fsr1
 21064  0933  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21065  0934  3FC1               	movwi [1]fsr1
 21066  0935  2A5E               	goto	l9235
 21067  0936                     l9165:	
 21068                           ;flashy_task.c: 190: case FLASHY_STATE_CIRCLE:
 21069                           
 21070                           ;flashy_task.c: 188: }
 21071                           ;flashy_task.c: 189: break;
 21072                           
 21073                           ;flashy_task.c: 186: else {
 21074                           ;flashy_task.c: 187: data->delayTickCount -= 1;
 21075                           
 21076                           ;flashy_task.c: 185: }
 21077                           
 21078                           
 21079                           ;flashy_task.c: 191: if (data->delayTickCount ==0 ){
 21080  0936  085E               	movf	flashy_Main@data,w
 21081  0937  0086               	movwf	6
 21082  0938  085F               	movf	flashy_Main@data+1,w
 21083  0939  0087               	movwf	7
 21084  093A  3141               	addfsr 1,1
 21085  093B  0016               	moviw fsr1++
 21086  093C  0401               	iorwf	1,w
 21087  093D  1D03               	btfss	3,2
 21088  093E  29B7               	goto	l9201
 21089                           
 21090                           ;flashy_task.c: 192: if (flashy_leds_idx == 1024 ){
 21091  093F  3004               	movlw	4
 21092  0940  0021               	movlb	1	; select bank1
 21093  0941  0633               	xorwf	(_flashy_leds_idx+1)^(0+128),w
 21094  0942  0432               	iorwf	_flashy_leds_idx^(0+128),w
 21095  0943  1D03               	btfss	3,2
 21096  0944  2949               	goto	l9171
 21097                           
 21098                           ;flashy_task.c: 193: flashy_leds_idx = flashy_leds_idx << 1;
 21099  0945  3532               	lslf	_flashy_leds_idx^(0+128),w
 21100  0946  00B2               	movwf	_flashy_leds_idx^(0+128)
 21101  0947  0D33               	rlf	(_flashy_leds_idx+1)^(0+128),w
 21102  0948  00B3               	movwf	(_flashy_leds_idx+1)^(0+128)
 21103  0949                     l9171:	
 21104                           
 21105                           ;flashy_task.c: 194: }
 21106                           ;flashy_task.c: 195: led_circle(flashy_leds_idx);
 21107  0949  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21108  094A  0020               	movlb	0	; select bank0
 21109  094B  00B1               	movwf	led_circle@count+1
 21110  094C  0021               	movlb	1	; select bank1
 21111  094D  0832               	movf	_flashy_leds_idx^(0+128),w
 21112  094E  0020               	movlb	0	; select bank0
 21113  094F  00B0               	movwf	led_circle@count
 21114  0950  31B2  2260  3188   	fcall	_led_circle
 21115                           
 21116                           ;flashy_task.c: 196: if (flashy_leds_idx < 1 ){
 21117  0953  0021               	movlb	1	; select bank1
 21118  0954  0832               	movf	_flashy_leds_idx^(0+128),w
 21119  0955  0433               	iorwf	(_flashy_leds_idx+1)^(0+128),w
 21120  0956  1D03               	btfss	3,2
 21121  0957  295D               	goto	l9177
 21122                           
 21123                           ;flashy_task.c: 197: flashy_leds_idx = 1;
 21124  0958  3001               	movlw	1
 21125  0959  00B2               	movwf	_flashy_leds_idx^(0+128)
 21126  095A  3000               	movlw	0
 21127  095B  00B3               	movwf	(_flashy_leds_idx^(0+128)+1)
 21128                           
 21129                           ;flashy_task.c: 198: break;
 21130  095C  2A5E               	goto	l9235
 21131  095D                     l9177:	
 21132                           
 21133                           ;flashy_task.c: 199: }
 21134                           ;flashy_task.c: 200: flashy_leds_idx = flashy_leds_idx << 1;
 21135  095D  3532               	lslf	_flashy_leds_idx^(0+128),w
 21136  095E  00B2               	movwf	_flashy_leds_idx^(0+128)
 21137  095F  0D33               	rlf	(_flashy_leds_idx+1)^(0+128),w
 21138  0960  00B3               	movwf	(_flashy_leds_idx+1)^(0+128)
 21139                           
 21140                           ;flashy_task.c: 202: data->delayTickCount = flashy_sparkle_rate;
 21141  0961  0020               	movlb	0	; select bank0
 21142  0962  085E               	movf	flashy_Main@data,w
 21143  0963  0086               	movwf	6
 21144  0964  085F               	movf	flashy_Main@data+1,w
 21145  0965  0087               	movwf	7
 21146  0966  3141               	addfsr 1,1
 21147  0967  0021               	movlb	1	; select bank1
 21148  0968  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21149  0969  3FC0               	movwi [0]fsr1
 21150  096A  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21151  096B  3FC1               	movwi [1]fsr1
 21152  096C  2A5E               	goto	l9235
 21153  096D                     l9183:	
 21154                           ;flashy_task.c: 208: case FLASHY_STATE_LED_ALT:
 21155                           
 21156                           ;flashy_task.c: 206: }
 21157                           ;flashy_task.c: 207: break;
 21158                           
 21159                           ;flashy_task.c: 204: else {
 21160                           ;flashy_task.c: 205: data->delayTickCount -= 1;
 21161                           
 21162                           ;flashy_task.c: 203: }
 21163                           
 21164                           
 21165                           ;flashy_task.c: 209: if (data->delayTickCount == 0){
 21166  096D  085E               	movf	flashy_Main@data,w
 21167  096E  0086               	movwf	6
 21168  096F  085F               	movf	flashy_Main@data+1,w
 21169  0970  0087               	movwf	7
 21170  0971  3141               	addfsr 1,1
 21171  0972  0016               	moviw fsr1++
 21172  0973  0401               	iorwf	1,w
 21173  0974  1D03               	btfss	3,2
 21174  0975  29B7               	goto	l9201
 21175                           
 21176                           ;flashy_task.c: 210: let_alternate(flashy_leds_idx);
 21177  0976  0021               	movlb	1	; select bank1
 21178  0977  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21179  0978  0020               	movlb	0	; select bank0
 21180  0979  00B1               	movwf	let_alternate@count+1
 21181  097A  0021               	movlb	1	; select bank1
 21182  097B  0832               	movf	_flashy_leds_idx^(0+128),w
 21183  097C  0020               	movlb	0	; select bank0
 21184  097D  00B0               	movwf	let_alternate@count
 21185  097E  31B3  23AF  3188   	fcall	_let_alternate
 21186                           
 21187                           ;flashy_task.c: 211: flashy_leds_idx += 1;
 21188  0981  3001               	movlw	1
 21189  0982  0021               	movlb	1	; select bank1
 21190  0983  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21191  0984  3000               	movlw	0
 21192  0985  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21193                           
 21194                           ;flashy_task.c: 212: data->delayTickCount = flashy_sparkle_rate;
 21195  0986  0020               	movlb	0	; select bank0
 21196  0987  085E               	movf	flashy_Main@data,w
 21197  0988  0086               	movwf	6
 21198  0989  085F               	movf	flashy_Main@data+1,w
 21199  098A  0087               	movwf	7
 21200  098B  3141               	addfsr 1,1
 21201  098C  0021               	movlb	1	; select bank1
 21202  098D  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21203  098E  3FC0               	movwi [0]fsr1
 21204  098F  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21205  0990  3FC1               	movwi [1]fsr1
 21206  0991  2A5E               	goto	l9235
 21207  0992                     l9193:	
 21208                           ;flashy_task.c: 218: case FLASHY_STATE_LED_PARODY:
 21209                           
 21210                           ;flashy_task.c: 216: }
 21211                           ;flashy_task.c: 217: break;
 21212                           
 21213                           ;flashy_task.c: 214: else {
 21214                           ;flashy_task.c: 215: data->delayTickCount -= 1;
 21215                           
 21216                           ;flashy_task.c: 213: }
 21217                           
 21218                           
 21219                           ;flashy_task.c: 219: if (data->delayTickCount == 0){
 21220  0992  085E               	movf	flashy_Main@data,w
 21221  0993  0086               	movwf	6
 21222  0994  085F               	movf	flashy_Main@data+1,w
 21223  0995  0087               	movwf	7
 21224  0996  3141               	addfsr 1,1
 21225  0997  0016               	moviw fsr1++
 21226  0998  0401               	iorwf	1,w
 21227  0999  1D03               	btfss	3,2
 21228  099A  29B7               	goto	l9201
 21229                           
 21230                           ;flashy_task.c: 220: led_Parody(flashy_leds_idx);
 21231  099B  0021               	movlb	1	; select bank1
 21232  099C  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21233  099D  0020               	movlb	0	; select bank0
 21234  099E  00B1               	movwf	led_Parody@count+1
 21235  099F  0021               	movlb	1	; select bank1
 21236  09A0  0832               	movf	_flashy_leds_idx^(0+128),w
 21237  09A1  0020               	movlb	0	; select bank0
 21238  09A2  00B0               	movwf	led_Parody@count
 21239  09A3  31AE  26C8  3188   	fcall	_led_Parody
 21240                           
 21241                           ;flashy_task.c: 221: flashy_leds_idx += 1;
 21242  09A6  3001               	movlw	1
 21243  09A7  0021               	movlb	1	; select bank1
 21244  09A8  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21245  09A9  3000               	movlw	0
 21246  09AA  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21247                           
 21248                           ;flashy_task.c: 222: data->delayTickCount = flashy_sparkle_rate;
 21249  09AB  0020               	movlb	0	; select bank0
 21250  09AC  085E               	movf	flashy_Main@data,w
 21251  09AD  0086               	movwf	6
 21252  09AE  085F               	movf	flashy_Main@data+1,w
 21253  09AF  0087               	movwf	7
 21254  09B0  3141               	addfsr 1,1
 21255  09B1  0021               	movlb	1	; select bank1
 21256  09B2  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21257  09B3  3FC0               	movwi [0]fsr1
 21258  09B4  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21259  09B5  3FC1               	movwi [1]fsr1
 21260                           
 21261                           ;flashy_task.c: 223: }
 21262  09B6  2A5E               	goto	l9235
 21263  09B7                     l9201:	
 21264                           
 21265                           ;flashy_task.c: 224: else {
 21266                           ;flashy_task.c: 225: data->delayTickCount -= 1;
 21267  09B7  0020               	movlb	0	; select bank0
 21268  09B8                     L7:	
 21269  09B8  085E               	movf	flashy_Main@data,w
 21270  09B9  0086               	movwf	6
 21271  09BA  085F               	movf	flashy_Main@data+1,w
 21272  09BB  0087               	movwf	7
 21273  09BC  3141               	addfsr 1,1
 21274  09BD  3001               	movlw	1
 21275  09BE  0281               	subwf	1,f
 21276  09BF  3141               	addfsr 1,1
 21277  09C0  3000               	movlw	0
 21278  09C1  3B81               	subwfb	1,f
 21279  09C2  317F               	addfsr 1,-1
 21280                           
 21281                           ;flashy_task.c: 229: }
 21282                           
 21283                           ;flashy_task.c: 226: }
 21284                           ;flashy_task.c: 227: break;
 21285  09C3  2A5E               	goto	l9235
 21286  09C4                     l9205:	
 21287  09C4  0020               	movlb	0	; select bank0
 21288  09C5  085E               	movf	flashy_Main@data,w
 21289  09C6  0086               	movwf	6
 21290  09C7  085F               	movf	flashy_Main@data+1,w
 21291  09C8  0087               	movwf	7
 21292  09C9  3143               	addfsr 1,3
 21293  09CA  0801               	movf	1,w
 21294                           
 21295                           ; Switch size 1, requested type "space"
 21296                           ; Number of cases is 6, Range of values is 0 to 5
 21297                           ; switch strategies available:
 21298                           ; Name         Instructions Cycles
 21299                           ; direct_byte           18     6 (fixed)
 21300                           ; simple_byte           19    10 (average)
 21301                           ; jumptable            260     6 (fixed)
 21302                           ;	Chosen strategy is direct_byte
 21303  09CB  0084               	movwf	4
 21304  09CC  3006               	movlw	6
 21305  09CD  0204               	subwf	4,w
 21306  09CE  1803               	skipnc
 21307  09CF  2A5E               	goto	l9235
 21308  09D0  31B0               	movlp	high S10829
 21309  09D1  3504               	lslf	4,w
 21310  09D2  3E00               	addlw	low S10829
 21311  09D3  0082               	movwf	2
 21312                           
 21313                           ;flashy_task.c: 232: switch (data->display_state){
 21314  09D4  2A5E               	goto	l9235
 21315  09D5                     l9207:	
 21316                           ;flashy_task.c: 233: case FLASHY_STATE_DISPLAY_BLASTER:
 21317                           
 21318                           
 21319                           ;flashy_task.c: 234: nullifyBadge_segDisplayPutStr(data->badge, "PEW ");
 21320  09D5  30E5               	movlw	low (STR_40| (0+32768))
 21321  09D6  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21322  09D7  30BB               	movlw	high (STR_40| (0+32768))
 21323  09D8  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21324  09D9  085E               	movf	flashy_Main@data,w
 21325  09DA  0086               	movwf	6
 21326  09DB  085F               	movf	flashy_Main@data+1,w
 21327  09DC  0087               	movwf	7
 21328  09DD  0801               	movf	1,w
 21329  09DE  31B2  227D  3188   	fcall	_nullifyBadge_segDisplayPutStr
 21330                           
 21331                           ;flashy_task.c: 235: nullifyBadge_segDisplayForceUpdate(data->badge);
 21332  09E1  0020               	movlb	0	; select bank0
 21333  09E2  085E               	movf	flashy_Main@data,w
 21334  09E3  0086               	movwf	6
 21335  09E4  085F               	movf	flashy_Main@data+1,w
 21336  09E5  0087               	movwf	7
 21337  09E6  0801               	movf	1,w
 21338  09E7  31B2  222E  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 21339  09EA  2A52               	goto	L10
 21340  09EB                     l9213:	
 21341                           ;flashy_task.c: 238: case FLASHY_STATE_DISPLAY_SHOT:
 21342                           
 21343                           ;flashy_task.c: 237: break;
 21344                           
 21345                           ;flashy_task.c: 236: data->displayTickCount += 1;
 21346                           
 21347                           
 21348                           ;flashy_task.c: 239: sprintf((char *)hit_counter, "%4d", deaths);
 21349  09EB  3056               	movlw	low flashy_Main@hit_counter
 21350  09EC  00AF               	movwf	sprintf@sp
 21351  09ED  3000               	movlw	high flashy_Main@hit_counter
 21352  09EE  00B0               	movwf	sprintf@sp+1
 21353  09EF  30FE               	movlw	low (STR_41| (0+32768))
 21354  09F0  00B1               	movwf	sprintf@f
 21355  09F1  30BB               	movlw	high (STR_41| (0+32768))
 21356  09F2  00B2               	movwf	sprintf@f+1
 21357  09F3  0021               	movlb	1	; select bank1
 21358  09F4  082B               	movf	(_deaths+1)^(0+128),w
 21359  09F5  0020               	movlb	0	; select bank0
 21360  09F6  00B4               	movwf	?_sprintf+5
 21361  09F7  0021               	movlb	1	; select bank1
 21362  09F8  082A               	movf	_deaths^(0+128),w
 21363  09F9  0020               	movlb	0	; select bank0
 21364  09FA  00B3               	movwf	?_sprintf+4
 21365  09FB  3199  21C2  3188   	fcall	_sprintf
 21366                           
 21367                           ;flashy_task.c: 241: nullifyBadge_segDisplayPutStr(data->badge, hit_counter);
 21368  09FE  3056               	movlw	low flashy_Main@hit_counter
 21369  09FF  0020               	movlb	0	; select bank0
 21370  0A00  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21371  0A01  3000               	movlw	high flashy_Main@hit_counter
 21372  0A02  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21373  0A03  085E               	movf	flashy_Main@data,w
 21374  0A04  0086               	movwf	6
 21375  0A05  085F               	movf	flashy_Main@data+1,w
 21376  0A06  0087               	movwf	7
 21377  0A07  0801               	movf	1,w
 21378  0A08  31B2  227D  3188   	fcall	_nullifyBadge_segDisplayPutStr
 21379                           
 21380                           ;flashy_task.c: 242: nullifyBadge_segDisplayForceUpdate(data->badge);
 21381  0A0B  0020               	movlb	0	; select bank0
 21382  0A0C  085E               	movf	flashy_Main@data,w
 21383  0A0D  0086               	movwf	6
 21384  0A0E  085F               	movf	flashy_Main@data+1,w
 21385  0A0F  0087               	movwf	7
 21386  0A10  0801               	movf	1,w
 21387  0A11  31B2  222E  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 21388                           
 21389                           ;flashy_task.c: 243: if (data->displayTickCount == 150){
 21390  0A14  0020               	movlb	0	; select bank0
 21391  0A15  085E               	movf	flashy_Main@data,w
 21392  0A16  0086               	movwf	6
 21393  0A17  085F               	movf	flashy_Main@data+1,w
 21394  0A18  0087               	movwf	7
 21395  0A19  3144               	addfsr 1,4
 21396  0A1A  0016               	moviw fsr1++
 21397  0A1B  3A96               	xorlw	150
 21398  0A1C  00D4               	movwf	??_flashy_Main
 21399  0A1D  0016               	moviw fsr1++
 21400  0A1E  04D4               	iorwf	??_flashy_Main,f
 21401  0A1F  1D03               	btfss	3,2
 21402  0A20  2A53               	goto	L9
 21403                           
 21404                           ;flashy_task.c: 244: data->displayTickCount = 0;
 21405  0A21  085E               	movf	flashy_Main@data,w
 21406  0A22  0086               	movwf	6
 21407  0A23  085F               	movf	flashy_Main@data+1,w
 21408  0A24  0087               	movwf	7
 21409  0A25  3144               	addfsr 1,4
 21410  0A26  3000               	movlw	0
 21411  0A27  3FC0               	movwi [0]fsr1
 21412  0A28  3FC1               	movwi [1]fsr1
 21413                           
 21414                           ;flashy_task.c: 245: data->display_state = 35;
 21415  0A29  085E               	movf	flashy_Main@data,w
 21416  0A2A  3E06               	addlw	6
 21417  0A2B  00D4               	movwf	??_flashy_Main
 21418  0A2C  3000               	movlw	0
 21419  0A2D  3D5F               	addwfc	flashy_Main@data+1,w
 21420  0A2E  00D5               	movwf	??_flashy_Main+1
 21421  0A2F  0854               	movf	??_flashy_Main,w
 21422  0A30  0086               	movwf	6
 21423  0A31  0855               	movf	??_flashy_Main+1,w
 21424  0A32  0087               	movwf	7
 21425  0A33  3023               	movlw	35
 21426  0A34  0081               	movwf	1
 21427  0A35  2A53               	goto	L9
 21428  0A36                     l9225:	
 21429                           ;flashy_task.c: 249: case FLASHY_STATE_DISPLAY_SECRET_TEST:
 21430                           
 21431                           ;flashy_task.c: 248: break;
 21432                           
 21433                           ;flashy_task.c: 246: }
 21434                           ;flashy_task.c: 247: data->displayTickCount += 1;
 21435                           
 21436                           
 21437                           ;flashy_task.c: 250: marquee(FLASHY_TEXT_SECRET_TEST, data->displayTickCount);
 21438  0A36  0021               	movlb	1	; select bank1
 21439  0A37  0855               	movf	(_FLASHY_TEXT_SECRET_TEST+1)^(0+128),w
 21440  0A38  0020               	movlb	0	; select bank0
 21441  0A39  00BB               	movwf	marquee@string+1
 21442  0A3A  0021               	movlb	1	; select bank1
 21443  0A3B  0854               	movf	_FLASHY_TEXT_SECRET_TEST^(0+128),w
 21444  0A3C  0020               	movlb	0	; select bank0
 21445  0A3D  00BA               	movwf	marquee@string
 21446  0A3E  085E               	movf	flashy_Main@data,w
 21447  0A3F  0086               	movwf	6
 21448  0A40  085F               	movf	flashy_Main@data+1,w
 21449  0A41  0087               	movwf	7
 21450  0A42  3144               	addfsr 1,4
 21451  0A43  3F40               	moviw [0]fsr1
 21452  0A44  00BC               	movwf	marquee@count
 21453  0A45  3F41               	moviw [1]fsr1
 21454  0A46  00BD               	movwf	marquee@count+1
 21455  0A47  31A2  22D2  3188   	fcall	_marquee
 21456  0A4A  2A52               	goto	L10
 21457  0A4B                     l9229:	
 21458                           ;flashy_task.c: 255: default:
 21459                           
 21460                           ;flashy_task.c: 253: case FLASHY_STATE_DISPLAY:
 21461                           
 21462                           ;flashy_task.c: 252: break;
 21463                           
 21464                           ;flashy_task.c: 251: data->displayTickCount += 1;
 21465                           
 21466                           
 21467                           ;flashy_task.c: 256: flashy_display_option(data);
 21468  0A4B  085F               	movf	flashy_Main@data+1,w
 21469  0A4C  00CD               	movwf	flashy_display_option@data+1
 21470  0A4D  085E               	movf	flashy_Main@data,w
 21471  0A4E  00CC               	movwf	flashy_display_option@data
 21472  0A4F  31A2  2200  3188   	fcall	_flashy_display_option
 21473  0A52                     L10:	
 21474                           
 21475                           ;flashy_task.c: 257: data->displayTickCount += 1;
 21476  0A52  0020               	movlb	0	; select bank0
 21477  0A53                     L9:	
 21478  0A53  085E               	movf	flashy_Main@data,w
 21479  0A54  0086               	movwf	6
 21480  0A55  085F               	movf	flashy_Main@data+1,w
 21481  0A56  0087               	movwf	7
 21482  0A57  3144               	addfsr 1,4
 21483  0A58  3001               	movlw	1
 21484  0A59  0781               	addwf	1,f
 21485  0A5A  3141               	addfsr 1,1
 21486  0A5B  1803               	skipnc
 21487  0A5C  0A81               	incf	1,f
 21488                           
 21489                           ;flashy_task.c: 259: }
 21490                           
 21491                           ;flashy_task.c: 258: break;
 21492  0A5D  2A72               	goto	l9237
 21493  0A5E                     l9235:	
 21494  0A5E  0020               	movlb	0	; select bank0
 21495  0A5F  085E               	movf	flashy_Main@data,w
 21496  0A60  0086               	movwf	6
 21497  0A61  085F               	movf	flashy_Main@data+1,w
 21498  0A62  0087               	movwf	7
 21499  0A63  3146               	addfsr 1,6
 21500  0A64  0801               	movf	1,w
 21501                           
 21502                           ; Switch size 1, requested type "space"
 21503                           ; Number of cases is 4, Range of values is 0 to 5
 21504                           ; switch strategies available:
 21505                           ; Name         Instructions Cycles
 21506                           ; simple_byte           13     7 (average)
 21507                           ; direct_byte           18     6 (fixed)
 21508                           ; jumptable            260     6 (fixed)
 21509                           ;	Chosen strategy is simple_byte
 21510  0A65  3A00               	xorlw	0	; case 0
 21511  0A66  1903               	skipnz
 21512  0A67  2A4B               	goto	l9229
 21513  0A68  3A02               	xorlw	2	; case 2
 21514  0A69  1903               	skipnz
 21515  0A6A  29D5               	goto	l9207
 21516  0A6B  3A01               	xorlw	1	; case 3
 21517  0A6C  1903               	skipnz
 21518  0A6D  29EB               	goto	l9213
 21519  0A6E  3A06               	xorlw	6	; case 5
 21520  0A6F  1903               	skipnz
 21521  0A70  2A36               	goto	l9225
 21522  0A71  2A4B               	goto	l9229
 21523  0A72                     l9237:	
 21524                           
 21525                           ;flashy_task.c: 262: buttonPressed = nullifyBadge_buttonsGet();
 21526  0A72  31B6  264B  3188   	fcall	_nullifyBadge_buttonsGet
 21527  0A75  0020               	movlb	0	; select bank0
 21528  0A76  00D4               	movwf	??_flashy_Main
 21529  0A77  01D5               	clrf	??_flashy_Main+1
 21530  0A78  0854               	movf	??_flashy_Main,w
 21531  0A79  00DC               	movwf	flashy_Main@buttonPressed
 21532  0A7A  0855               	movf	??_flashy_Main+1,w
 21533  0A7B  00DD               	movwf	flashy_Main@buttonPressed+1
 21534                           
 21535                           ;flashy_task.c: 263: switch (buttonPressed) {
 21536  0A7C  2F36               	goto	l9497
 21537  0A7D                     l9239:	
 21538                           ;flashy_task.c: 264: case 4 | 8:
 21539                           
 21540                           
 21541                           ;flashy_task.c: 265: if (data->holdCountXY == 0 ){
 21542  0A7D  085E               	movf	flashy_Main@data,w
 21543  0A7E  0086               	movwf	6
 21544  0A7F  085F               	movf	flashy_Main@data+1,w
 21545  0A80  0087               	movwf	7
 21546  0A81  3152               	addfsr 1,18
 21547  0A82  0016               	moviw fsr1++
 21548  0A83  0401               	iorwf	1,w
 21549  0A84  1D03               	btfss	3,2
 21550  0A85  2A8C               	goto	l9243
 21551                           
 21552                           ;flashy_task.c: 267: data->display_state = FLASHY_STATE_DISPLAY;
 21553  0A86  085E               	movf	flashy_Main@data,w
 21554  0A87  0086               	movwf	6
 21555  0A88  085F               	movf	flashy_Main@data+1,w
 21556  0A89  0087               	movwf	7
 21557  0A8A  3146               	addfsr 1,6
 21558  0A8B  0181               	clrf	1
 21559  0A8C                     l9243:	
 21560                           
 21561                           ;flashy_task.c: 268: }
 21562                           ;flashy_task.c: 270: data->holdCountA = 0;
 21563  0A8C  085E               	movf	flashy_Main@data,w
 21564  0A8D  0086               	movwf	6
 21565  0A8E  085F               	movf	flashy_Main@data+1,w
 21566  0A8F  0087               	movwf	7
 21567  0A90  314A               	addfsr 1,10
 21568  0A91  3000               	movlw	0
 21569  0A92  3FC0               	movwi [0]fsr1
 21570  0A93  3FC1               	movwi [1]fsr1
 21571                           
 21572                           ;flashy_task.c: 271: data->holdCountB = 0;
 21573  0A94  085E               	movf	flashy_Main@data,w
 21574  0A95  0086               	movwf	6
 21575  0A96  085F               	movf	flashy_Main@data+1,w
 21576  0A97  0087               	movwf	7
 21577  0A98  314C               	addfsr 1,12
 21578  0A99  3000               	movlw	0
 21579  0A9A  3FC0               	movwi [0]fsr1
 21580  0A9B  3FC1               	movwi [1]fsr1
 21581                           
 21582                           ;flashy_task.c: 272: data->holdCountX = 0;
 21583  0A9C  085E               	movf	flashy_Main@data,w
 21584  0A9D  0086               	movwf	6
 21585  0A9E  085F               	movf	flashy_Main@data+1,w
 21586  0A9F  0087               	movwf	7
 21587  0AA0  314E               	addfsr 1,14
 21588  0AA1  3000               	movlw	0
 21589  0AA2  3FC0               	movwi [0]fsr1
 21590  0AA3  3FC1               	movwi [1]fsr1
 21591                           
 21592                           ;flashy_task.c: 273: data->holdCountY = 0;
 21593  0AA4  085E               	movf	flashy_Main@data,w
 21594  0AA5  0086               	movwf	6
 21595  0AA6  085F               	movf	flashy_Main@data+1,w
 21596  0AA7  0087               	movwf	7
 21597  0AA8  3150               	addfsr 1,16
 21598  0AA9  3000               	movlw	0
 21599  0AAA  3FC0               	movwi [0]fsr1
 21600  0AAB  3FC1               	movwi [1]fsr1
 21601                           
 21602                           ;flashy_task.c: 274: data->holdCountXY += 1;
 21603  0AAC  085E               	movf	flashy_Main@data,w
 21604  0AAD  0086               	movwf	6
 21605  0AAE  085F               	movf	flashy_Main@data+1,w
 21606  0AAF  0087               	movwf	7
 21607  0AB0  3152               	addfsr 1,18
 21608  0AB1  3001               	movlw	1
 21609  0AB2  0781               	addwf	1,f
 21610  0AB3  3141               	addfsr 1,1
 21611  0AB4  1803               	skipnc
 21612  0AB5  0A81               	incf	1,f
 21613                           
 21614                           ;flashy_task.c: 275: data->holdCountAY = 0;
 21615  0AB6  085E               	movf	flashy_Main@data,w
 21616  0AB7  0086               	movwf	6
 21617  0AB8  085F               	movf	flashy_Main@data+1,w
 21618  0AB9  0087               	movwf	7
 21619  0ABA  3154               	addfsr 1,20
 21620  0ABB  3000               	movlw	0
 21621  0ABC  3FC0               	movwi [0]fsr1
 21622  0ABD  3FC1               	movwi [1]fsr1
 21623                           
 21624                           ;flashy_task.c: 276: data->holdCountAX = 0;
 21625  0ABE  085E               	movf	flashy_Main@data,w
 21626  0ABF  0086               	movwf	6
 21627  0AC0  085F               	movf	flashy_Main@data+1,w
 21628  0AC1  0087               	movwf	7
 21629  0AC2  3156               	addfsr 1,22
 21630  0AC3  3000               	movlw	0
 21631  0AC4  3FC0               	movwi [0]fsr1
 21632  0AC5  3FC1               	movwi [1]fsr1
 21633                           
 21634                           ;flashy_task.c: 277: data->holdCountBX = 0;
 21635  0AC6  085E               	movf	flashy_Main@data,w
 21636  0AC7  0086               	movwf	6
 21637  0AC8  085F               	movf	flashy_Main@data+1,w
 21638  0AC9  0087               	movwf	7
 21639  0ACA  3158               	addfsr 1,24
 21640  0ACB  3000               	movlw	0
 21641  0ACC  3FC0               	movwi [0]fsr1
 21642  0ACD  3FC1               	movwi [1]fsr1
 21643                           
 21644                           ;flashy_task.c: 278: data->holdCountBY = 0;
 21645  0ACE  085E               	movf	flashy_Main@data,w
 21646  0ACF  0086               	movwf	6
 21647  0AD0  085F               	movf	flashy_Main@data+1,w
 21648  0AD1  0087               	movwf	7
 21649  0AD2  315A               	addfsr 1,26
 21650  0AD3  3000               	movlw	0
 21651  0AD4  3FC0               	movwi [0]fsr1
 21652  0AD5  3FC1               	movwi [1]fsr1
 21653                           
 21654                           ;flashy_task.c: 279: data->noholdCount = 0;
 21655  0AD6  085E               	movf	flashy_Main@data,w
 21656  0AD7  0086               	movwf	6
 21657  0AD8  085F               	movf	flashy_Main@data+1,w
 21658  0AD9  0087               	movwf	7
 21659  0ADA  315C               	addfsr 1,28
 21660  0ADB  3000               	movlw	0
 21661  0ADC  3FC0               	movwi [0]fsr1
 21662  0ADD  3FC1               	movwi [1]fsr1
 21663                           
 21664                           ;flashy_task.c: 280: break;
 21665  0ADE  2FC9               	goto	l9527
 21666  0ADF                     l9263:	
 21667                           ;flashy_task.c: 281: case 1 | 8:
 21668                           
 21669                           
 21670                           ;flashy_task.c: 282: if ( data->holdCountAY == 0 ){
 21671  0ADF  085E               	movf	flashy_Main@data,w
 21672  0AE0  0086               	movwf	6
 21673  0AE1  085F               	movf	flashy_Main@data+1,w
 21674  0AE2  0087               	movwf	7
 21675  0AE3  3154               	addfsr 1,20
 21676  0AE4  0016               	moviw fsr1++
 21677  0AE5  0401               	iorwf	1,w
 21678  0AE6  1D03               	btfss	3,2
 21679  0AE7  2AF8               	goto	l9269
 21680                           
 21681                           ;flashy_task.c: 283: if (flashy_sparkle_rate > 1000){
 21682  0AE8  3003               	movlw	3
 21683  0AE9  0021               	movlb	1	; select bank1
 21684  0AEA  022F               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 21685  0AEB  30E9               	movlw	233
 21686  0AEC  1903               	skipnz
 21687  0AED  022E               	subwf	_flashy_sparkle_rate^(0+128),w
 21688  0AEE  1C03               	skipc
 21689  0AEF  2AF4               	goto	l1147
 21690                           
 21691                           ;flashy_task.c: 284: flashy_sparkle_rate = 1000;
 21692  0AF0  30E8               	movlw	232
 21693  0AF1  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 21694  0AF2  3003               	movlw	3
 21695  0AF3  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 21696  0AF4                     l1147:	
 21697                           
 21698                           ;flashy_task.c: 285: }
 21699                           ;flashy_task.c: 286: flashy_sparkle_rate += 5;
 21700  0AF4  3005               	movlw	5
 21701  0AF5  07AE               	addwf	_flashy_sparkle_rate^(0+128),f
 21702  0AF6  3000               	movlw	0
 21703  0AF7  3DAF               	addwfc	(_flashy_sparkle_rate+1)^(0+128),f
 21704  0AF8                     l9269:	
 21705                           
 21706                           ;flashy_task.c: 287: }
 21707                           ;flashy_task.c: 289: data->holdCountA = 0;
 21708  0AF8  0020               	movlb	0	; select bank0
 21709  0AF9  085E               	movf	flashy_Main@data,w
 21710  0AFA  0086               	movwf	6
 21711  0AFB  085F               	movf	flashy_Main@data+1,w
 21712  0AFC  0087               	movwf	7
 21713  0AFD  314A               	addfsr 1,10
 21714  0AFE  3000               	movlw	0
 21715  0AFF  3FC0               	movwi [0]fsr1
 21716  0B00  3FC1               	movwi [1]fsr1
 21717                           
 21718                           ;flashy_task.c: 290: data->holdCountB = 0;
 21719  0B01  085E               	movf	flashy_Main@data,w
 21720  0B02  0086               	movwf	6
 21721  0B03  085F               	movf	flashy_Main@data+1,w
 21722  0B04  0087               	movwf	7
 21723  0B05  314C               	addfsr 1,12
 21724  0B06  3000               	movlw	0
 21725  0B07  3FC0               	movwi [0]fsr1
 21726  0B08  3FC1               	movwi [1]fsr1
 21727                           
 21728                           ;flashy_task.c: 291: data->holdCountX = 0;
 21729  0B09  085E               	movf	flashy_Main@data,w
 21730  0B0A  0086               	movwf	6
 21731  0B0B  085F               	movf	flashy_Main@data+1,w
 21732  0B0C  0087               	movwf	7
 21733  0B0D  314E               	addfsr 1,14
 21734  0B0E  3000               	movlw	0
 21735  0B0F  3FC0               	movwi [0]fsr1
 21736  0B10  3FC1               	movwi [1]fsr1
 21737                           
 21738                           ;flashy_task.c: 292: data->holdCountY = 0;
 21739  0B11  085E               	movf	flashy_Main@data,w
 21740  0B12  0086               	movwf	6
 21741  0B13  085F               	movf	flashy_Main@data+1,w
 21742  0B14  0087               	movwf	7
 21743  0B15  3150               	addfsr 1,16
 21744  0B16  3000               	movlw	0
 21745  0B17  3FC0               	movwi [0]fsr1
 21746  0B18  3FC1               	movwi [1]fsr1
 21747                           
 21748                           ;flashy_task.c: 293: data->holdCountXY = 0;
 21749  0B19  085E               	movf	flashy_Main@data,w
 21750  0B1A  0086               	movwf	6
 21751  0B1B  085F               	movf	flashy_Main@data+1,w
 21752  0B1C  0087               	movwf	7
 21753  0B1D  3152               	addfsr 1,18
 21754  0B1E  3000               	movlw	0
 21755  0B1F  3FC0               	movwi [0]fsr1
 21756  0B20  3FC1               	movwi [1]fsr1
 21757                           
 21758                           ;flashy_task.c: 294: data->holdCountAY += 1;
 21759  0B21  085E               	movf	flashy_Main@data,w
 21760  0B22  0086               	movwf	6
 21761  0B23  085F               	movf	flashy_Main@data+1,w
 21762  0B24  0087               	movwf	7
 21763  0B25  3154               	addfsr 1,20
 21764  0B26  3001               	movlw	1
 21765  0B27  0781               	addwf	1,f
 21766  0B28  3141               	addfsr 1,1
 21767  0B29  1803               	skipnc
 21768  0B2A  0A81               	incf	1,f
 21769                           
 21770                           ;flashy_task.c: 295: data->holdCountAX = 0;
 21771  0B2B  085E               	movf	flashy_Main@data,w
 21772  0B2C  0086               	movwf	6
 21773  0B2D  085F               	movf	flashy_Main@data+1,w
 21774  0B2E  0087               	movwf	7
 21775  0B2F  3156               	addfsr 1,22
 21776  0B30  3000               	movlw	0
 21777  0B31  3FC0               	movwi [0]fsr1
 21778  0B32  3FC1               	movwi [1]fsr1
 21779                           
 21780                           ;flashy_task.c: 296: data->holdCountBX = 0;
 21781  0B33  085E               	movf	flashy_Main@data,w
 21782  0B34  0086               	movwf	6
 21783  0B35  085F               	movf	flashy_Main@data+1,w
 21784  0B36  0087               	movwf	7
 21785  0B37  3158               	addfsr 1,24
 21786  0B38  3000               	movlw	0
 21787  0B39  3FC0               	movwi [0]fsr1
 21788  0B3A  3FC1               	movwi [1]fsr1
 21789                           
 21790                           ;flashy_task.c: 297: data->holdCountBY = 0;
 21791  0B3B  085E               	movf	flashy_Main@data,w
 21792  0B3C  0086               	movwf	6
 21793  0B3D  085F               	movf	flashy_Main@data+1,w
 21794  0B3E  0087               	movwf	7
 21795  0B3F  315A               	addfsr 1,26
 21796  0B40  3000               	movlw	0
 21797  0B41  3FC0               	movwi [0]fsr1
 21798  0B42  3FC1               	movwi [1]fsr1
 21799                           
 21800                           ;flashy_task.c: 298: data->noholdCount = 0;
 21801  0B43  085E               	movf	flashy_Main@data,w
 21802  0B44  0086               	movwf	6
 21803  0B45  085F               	movf	flashy_Main@data+1,w
 21804  0B46  0087               	movwf	7
 21805  0B47  315C               	addfsr 1,28
 21806  0B48  3000               	movlw	0
 21807  0B49  3FC0               	movwi [0]fsr1
 21808  0B4A  3FC1               	movwi [1]fsr1
 21809                           
 21810                           ;flashy_task.c: 299: break;
 21811  0B4B  2FC9               	goto	l9527
 21812  0B4C                     l9289:	
 21813                           ;flashy_task.c: 300: case 1 | 4:
 21814                           
 21815                           
 21816                           ;flashy_task.c: 301: if ( data->holdCountAX == 0 ){
 21817  0B4C  085E               	movf	flashy_Main@data,w
 21818  0B4D  0086               	movwf	6
 21819  0B4E  085F               	movf	flashy_Main@data+1,w
 21820  0B4F  0087               	movwf	7
 21821  0B50  3156               	addfsr 1,22
 21822  0B51  0016               	moviw fsr1++
 21823  0B52  0401               	iorwf	1,w
 21824  0B53  1D03               	btfss	3,2
 21825  0B54  2B65               	goto	l9295
 21826                           
 21827                           ;flashy_task.c: 302: if (flashy_sparkle_rate < 5)
 21828  0B55  3000               	movlw	0
 21829  0B56  0021               	movlb	1	; select bank1
 21830  0B57  022F               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 21831  0B58  3005               	movlw	5
 21832  0B59  1903               	skipnz
 21833  0B5A  022E               	subwf	_flashy_sparkle_rate^(0+128),w
 21834  0B5B  1803               	skipnc
 21835  0B5C  2B61               	goto	l1150
 21836                           
 21837                           ;flashy_task.c: 303: flashy_sparkle_rate=5;
 21838  0B5D  3005               	movlw	5
 21839  0B5E  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 21840  0B5F  3000               	movlw	0
 21841  0B60  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 21842  0B61                     l1150:	
 21843                           
 21844                           ;flashy_task.c: 304: flashy_sparkle_rate -= 5;
 21845  0B61  3005               	movlw	5
 21846  0B62  02AE               	subwf	_flashy_sparkle_rate^(0+128),f
 21847  0B63  3000               	movlw	0
 21848  0B64  3BAF               	subwfb	(_flashy_sparkle_rate+1)^(0+128),f
 21849  0B65                     l9295:	
 21850                           
 21851                           ;flashy_task.c: 305: }
 21852                           ;flashy_task.c: 307: data->holdCountA = 0;
 21853  0B65  0020               	movlb	0	; select bank0
 21854  0B66  085E               	movf	flashy_Main@data,w
 21855  0B67  0086               	movwf	6
 21856  0B68  085F               	movf	flashy_Main@data+1,w
 21857  0B69  0087               	movwf	7
 21858  0B6A  314A               	addfsr 1,10
 21859  0B6B  3000               	movlw	0
 21860  0B6C  3FC0               	movwi [0]fsr1
 21861  0B6D  3FC1               	movwi [1]fsr1
 21862                           
 21863                           ;flashy_task.c: 308: data->holdCountB = 0;
 21864  0B6E  085E               	movf	flashy_Main@data,w
 21865  0B6F  0086               	movwf	6
 21866  0B70  085F               	movf	flashy_Main@data+1,w
 21867  0B71  0087               	movwf	7
 21868  0B72  314C               	addfsr 1,12
 21869  0B73  3000               	movlw	0
 21870  0B74  3FC0               	movwi [0]fsr1
 21871  0B75  3FC1               	movwi [1]fsr1
 21872                           
 21873                           ;flashy_task.c: 309: data->holdCountX += 1;
 21874  0B76  085E               	movf	flashy_Main@data,w
 21875  0B77  0086               	movwf	6
 21876  0B78  085F               	movf	flashy_Main@data+1,w
 21877  0B79  0087               	movwf	7
 21878  0B7A  314E               	addfsr 1,14
 21879  0B7B  3001               	movlw	1
 21880  0B7C  0781               	addwf	1,f
 21881  0B7D  3141               	addfsr 1,1
 21882  0B7E  1803               	skipnc
 21883  0B7F  0A81               	incf	1,f
 21884                           
 21885                           ;flashy_task.c: 310: data->holdCountY = 0;
 21886  0B80  085E               	movf	flashy_Main@data,w
 21887  0B81  0086               	movwf	6
 21888  0B82  085F               	movf	flashy_Main@data+1,w
 21889  0B83  0087               	movwf	7
 21890  0B84  3150               	addfsr 1,16
 21891  0B85  3000               	movlw	0
 21892  0B86  3FC0               	movwi [0]fsr1
 21893  0B87  3FC1               	movwi [1]fsr1
 21894                           
 21895                           ;flashy_task.c: 311: data->holdCountXY = 0;
 21896  0B88  085E               	movf	flashy_Main@data,w
 21897  0B89  0086               	movwf	6
 21898  0B8A  085F               	movf	flashy_Main@data+1,w
 21899  0B8B  0087               	movwf	7
 21900  0B8C  3152               	addfsr 1,18
 21901  0B8D  3000               	movlw	0
 21902  0B8E  3FC0               	movwi [0]fsr1
 21903  0B8F  3FC1               	movwi [1]fsr1
 21904                           
 21905                           ;flashy_task.c: 312: data->holdCountAY = 0;
 21906  0B90  085E               	movf	flashy_Main@data,w
 21907  0B91  0086               	movwf	6
 21908  0B92  085F               	movf	flashy_Main@data+1,w
 21909  0B93  0087               	movwf	7
 21910  0B94  3154               	addfsr 1,20
 21911  0B95  3000               	movlw	0
 21912  0B96  3FC0               	movwi [0]fsr1
 21913  0B97  3FC1               	movwi [1]fsr1
 21914                           
 21915                           ;flashy_task.c: 313: data->holdCountAX += 1;
 21916  0B98  085E               	movf	flashy_Main@data,w
 21917  0B99  0086               	movwf	6
 21918  0B9A  085F               	movf	flashy_Main@data+1,w
 21919  0B9B  0087               	movwf	7
 21920  0B9C  3156               	addfsr 1,22
 21921  0B9D  3001               	movlw	1
 21922  0B9E  0781               	addwf	1,f
 21923  0B9F  3141               	addfsr 1,1
 21924  0BA0  1803               	skipnc
 21925  0BA1  0A81               	incf	1,f
 21926                           
 21927                           ;flashy_task.c: 314: data->holdCountBX = 0;
 21928  0BA2  085E               	movf	flashy_Main@data,w
 21929  0BA3  0086               	movwf	6
 21930  0BA4  085F               	movf	flashy_Main@data+1,w
 21931  0BA5  0087               	movwf	7
 21932  0BA6  3158               	addfsr 1,24
 21933  0BA7  3000               	movlw	0
 21934  0BA8  3FC0               	movwi [0]fsr1
 21935  0BA9  3FC1               	movwi [1]fsr1
 21936                           
 21937                           ;flashy_task.c: 315: data->holdCountBY = 0;
 21938  0BAA  085E               	movf	flashy_Main@data,w
 21939  0BAB  0086               	movwf	6
 21940  0BAC  085F               	movf	flashy_Main@data+1,w
 21941  0BAD  0087               	movwf	7
 21942  0BAE  315A               	addfsr 1,26
 21943  0BAF  3000               	movlw	0
 21944  0BB0  3FC0               	movwi [0]fsr1
 21945  0BB1  3FC1               	movwi [1]fsr1
 21946                           
 21947                           ;flashy_task.c: 316: data->noholdCount = 0;
 21948  0BB2  085E               	movf	flashy_Main@data,w
 21949  0BB3  0086               	movwf	6
 21950  0BB4  085F               	movf	flashy_Main@data+1,w
 21951  0BB5  0087               	movwf	7
 21952  0BB6  315C               	addfsr 1,28
 21953  0BB7  3000               	movlw	0
 21954  0BB8  3FC0               	movwi [0]fsr1
 21955  0BB9  3FC1               	movwi [1]fsr1
 21956                           
 21957                           ;flashy_task.c: 317: break;
 21958  0BBA  2FC9               	goto	l9527
 21959  0BBB                     l9315:	
 21960                           ;flashy_task.c: 318: case 2 | 8:
 21961                           
 21962                           
 21963                           ;flashy_task.c: 319: if (data->holdCountBY == 0){
 21964  0BBB  085E               	movf	flashy_Main@data,w
 21965  0BBC  0086               	movwf	6
 21966  0BBD  085F               	movf	flashy_Main@data+1,w
 21967  0BBE  0087               	movwf	7
 21968  0BBF  315A               	addfsr 1,26
 21969  0BC0  0016               	moviw fsr1++
 21970  0BC1  0401               	iorwf	1,w
 21971  0BC2  1D03               	btfss	3,2
 21972  0BC3  2BD8               	goto	l9325
 21973                           
 21974                           ;flashy_task.c: 320: if (flashy_option_idx == 0){
 21975  0BC4  0021               	movlb	1	; select bank1
 21976  0BC5  0828               	movf	_flashy_option_idx^(0+128),w
 21977  0BC6  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 21978  0BC7  1903               	btfsc	3,2
 21979  0BC8  2BD8               	goto	l9325
 21980                           
 21981                           ;flashy_task.c: 323: else {
 21982                           ;flashy_task.c: 324: if (flashy_scroll_rate > 150){
 21983                           
 21984                           ;flashy_task.c: 322: }
 21985  0BC9  3000               	movlw	0
 21986  0BCA  022D               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 21987  0BCB  3097               	movlw	151
 21988  0BCC  1903               	skipnz
 21989  0BCD  022C               	subwf	_flashy_scroll_rate^(0+128),w
 21990  0BCE  1C03               	skipc
 21991  0BCF  2BD4               	goto	l1155
 21992                           
 21993                           ;flashy_task.c: 325: flashy_scroll_rate =150;
 21994  0BD0  3096               	movlw	150
 21995  0BD1  00AC               	movwf	_flashy_scroll_rate^(0+128)
 21996  0BD2  3000               	movlw	0
 21997  0BD3  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 21998  0BD4                     l1155:	
 21999                           
 22000                           ;flashy_task.c: 326: }
 22001                           ;flashy_task.c: 327: flashy_scroll_rate +=2;
 22002  0BD4  3002               	movlw	2
 22003  0BD5  07AC               	addwf	_flashy_scroll_rate^(0+128),f
 22004  0BD6  3000               	movlw	0
 22005  0BD7  3DAD               	addwfc	(_flashy_scroll_rate+1)^(0+128),f
 22006  0BD8                     l9325:	
 22007                           
 22008                           ;flashy_task.c: 328: }
 22009                           ;flashy_task.c: 330: }
 22010                           ;flashy_task.c: 331: data->holdCountA = 0;
 22011  0BD8  0020               	movlb	0	; select bank0
 22012  0BD9  085E               	movf	flashy_Main@data,w
 22013  0BDA  0086               	movwf	6
 22014  0BDB  085F               	movf	flashy_Main@data+1,w
 22015  0BDC  0087               	movwf	7
 22016  0BDD  314A               	addfsr 1,10
 22017  0BDE  3000               	movlw	0
 22018  0BDF  3FC0               	movwi [0]fsr1
 22019  0BE0  3FC1               	movwi [1]fsr1
 22020                           
 22021                           ;flashy_task.c: 332: data->holdCountB += 1;
 22022  0BE1  085E               	movf	flashy_Main@data,w
 22023  0BE2  0086               	movwf	6
 22024  0BE3  085F               	movf	flashy_Main@data+1,w
 22025  0BE4  0087               	movwf	7
 22026  0BE5  314C               	addfsr 1,12
 22027  0BE6  3001               	movlw	1
 22028  0BE7  0781               	addwf	1,f
 22029  0BE8  3141               	addfsr 1,1
 22030  0BE9  1803               	skipnc
 22031  0BEA  0A81               	incf	1,f
 22032                           
 22033                           ;flashy_task.c: 333: data->holdCountX = 0;
 22034  0BEB  085E               	movf	flashy_Main@data,w
 22035  0BEC  0086               	movwf	6
 22036  0BED  085F               	movf	flashy_Main@data+1,w
 22037  0BEE  0087               	movwf	7
 22038  0BEF  314E               	addfsr 1,14
 22039  0BF0  3000               	movlw	0
 22040  0BF1  3FC0               	movwi [0]fsr1
 22041  0BF2  3FC1               	movwi [1]fsr1
 22042                           
 22043                           ;flashy_task.c: 334: data->holdCountY += 1;
 22044  0BF3  085E               	movf	flashy_Main@data,w
 22045  0BF4  0086               	movwf	6
 22046  0BF5  085F               	movf	flashy_Main@data+1,w
 22047  0BF6  0087               	movwf	7
 22048  0BF7  3150               	addfsr 1,16
 22049  0BF8  3001               	movlw	1
 22050  0BF9  0781               	addwf	1,f
 22051  0BFA  3141               	addfsr 1,1
 22052  0BFB  1803               	skipnc
 22053  0BFC  0A81               	incf	1,f
 22054                           
 22055                           ;flashy_task.c: 335: data->holdCountXY = 0;
 22056  0BFD  085E               	movf	flashy_Main@data,w
 22057  0BFE  0086               	movwf	6
 22058  0BFF  085F               	movf	flashy_Main@data+1,w
 22059  0C00  0087               	movwf	7
 22060  0C01  3152               	addfsr 1,18
 22061  0C02  3000               	movlw	0
 22062  0C03  3FC0               	movwi [0]fsr1
 22063  0C04  3FC1               	movwi [1]fsr1
 22064                           
 22065                           ;flashy_task.c: 336: data->holdCountAY = 0;
 22066  0C05  085E               	movf	flashy_Main@data,w
 22067  0C06  0086               	movwf	6
 22068  0C07  085F               	movf	flashy_Main@data+1,w
 22069  0C08  0087               	movwf	7
 22070  0C09  3154               	addfsr 1,20
 22071  0C0A  3000               	movlw	0
 22072  0C0B  3FC0               	movwi [0]fsr1
 22073  0C0C  3FC1               	movwi [1]fsr1
 22074                           
 22075                           ;flashy_task.c: 337: data->holdCountAX = 0;
 22076  0C0D  085E               	movf	flashy_Main@data,w
 22077  0C0E  0086               	movwf	6
 22078  0C0F  085F               	movf	flashy_Main@data+1,w
 22079  0C10  0087               	movwf	7
 22080  0C11  3156               	addfsr 1,22
 22081  0C12  3000               	movlw	0
 22082  0C13  3FC0               	movwi [0]fsr1
 22083  0C14  3FC1               	movwi [1]fsr1
 22084                           
 22085                           ;flashy_task.c: 338: data->holdCountBX = 0;
 22086  0C15  085E               	movf	flashy_Main@data,w
 22087  0C16  0086               	movwf	6
 22088  0C17  085F               	movf	flashy_Main@data+1,w
 22089  0C18  0087               	movwf	7
 22090  0C19  3158               	addfsr 1,24
 22091  0C1A  3000               	movlw	0
 22092  0C1B  3FC0               	movwi [0]fsr1
 22093  0C1C  3FC1               	movwi [1]fsr1
 22094                           
 22095                           ;flashy_task.c: 339: data->holdCountBY += 1;
 22096  0C1D  085E               	movf	flashy_Main@data,w
 22097  0C1E  0086               	movwf	6
 22098  0C1F  085F               	movf	flashy_Main@data+1,w
 22099  0C20  0087               	movwf	7
 22100  0C21  315A               	addfsr 1,26
 22101  0C22  3001               	movlw	1
 22102  0C23  0781               	addwf	1,f
 22103  0C24  3141               	addfsr 1,1
 22104  0C25  1803               	skipnc
 22105  0C26  0A81               	incf	1,f
 22106                           
 22107                           ;flashy_task.c: 340: data->noholdCount = 0;
 22108  0C27  085E               	movf	flashy_Main@data,w
 22109  0C28  0086               	movwf	6
 22110  0C29  085F               	movf	flashy_Main@data+1,w
 22111  0C2A  0087               	movwf	7
 22112  0C2B  315C               	addfsr 1,28
 22113  0C2C  3000               	movlw	0
 22114  0C2D  3FC0               	movwi [0]fsr1
 22115  0C2E  3FC1               	movwi [1]fsr1
 22116                           
 22117                           ;flashy_task.c: 341: break;
 22118  0C2F  2FC9               	goto	l9527
 22119  0C30                     l9345:	
 22120                           ;flashy_task.c: 342: case 2 | 4:
 22121                           
 22122                           
 22123                           ;flashy_task.c: 343: if (data-> holdCountBX == 0){
 22124  0C30  085E               	movf	flashy_Main@data,w
 22125  0C31  0086               	movwf	6
 22126  0C32  085F               	movf	flashy_Main@data+1,w
 22127  0C33  0087               	movwf	7
 22128  0C34  3158               	addfsr 1,24
 22129  0C35  0016               	moviw fsr1++
 22130  0C36  0401               	iorwf	1,w
 22131  0C37  1D03               	btfss	3,2
 22132  0C38  2C4D               	goto	l9355
 22133                           
 22134                           ;flashy_task.c: 344: if (flashy_option_idx == 0){
 22135  0C39  0021               	movlb	1	; select bank1
 22136  0C3A  0828               	movf	_flashy_option_idx^(0+128),w
 22137  0C3B  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 22138  0C3C  1903               	btfsc	3,2
 22139  0C3D  2C4D               	goto	l9355
 22140                           
 22141                           ;flashy_task.c: 347: else {
 22142                           ;flashy_task.c: 348: if (flashy_scroll_rate < 5){
 22143                           
 22144                           ;flashy_task.c: 346: }
 22145  0C3E  3000               	movlw	0
 22146  0C3F  022D               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 22147  0C40  3005               	movlw	5
 22148  0C41  1903               	skipnz
 22149  0C42  022C               	subwf	_flashy_scroll_rate^(0+128),w
 22150  0C43  1803               	skipnc
 22151  0C44  2C49               	goto	l1160
 22152                           
 22153                           ;flashy_task.c: 349: flashy_scroll_rate =5;
 22154  0C45  3005               	movlw	5
 22155  0C46  00AC               	movwf	_flashy_scroll_rate^(0+128)
 22156  0C47  3000               	movlw	0
 22157  0C48  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 22158  0C49                     l1160:	
 22159                           
 22160                           ;flashy_task.c: 350: }
 22161                           ;flashy_task.c: 351: flashy_scroll_rate -=3;
 22162  0C49  3003               	movlw	3
 22163  0C4A  02AC               	subwf	_flashy_scroll_rate^(0+128),f
 22164  0C4B  3000               	movlw	0
 22165  0C4C  3BAD               	subwfb	(_flashy_scroll_rate+1)^(0+128),f
 22166  0C4D                     l9355:	
 22167                           
 22168                           ;flashy_task.c: 352: }
 22169                           ;flashy_task.c: 354: }
 22170                           ;flashy_task.c: 355: data->holdCountA = 0;
 22171  0C4D  0020               	movlb	0	; select bank0
 22172  0C4E  085E               	movf	flashy_Main@data,w
 22173  0C4F  0086               	movwf	6
 22174  0C50  085F               	movf	flashy_Main@data+1,w
 22175  0C51  0087               	movwf	7
 22176  0C52  314A               	addfsr 1,10
 22177  0C53  3000               	movlw	0
 22178  0C54  3FC0               	movwi [0]fsr1
 22179  0C55  3FC1               	movwi [1]fsr1
 22180                           
 22181                           ;flashy_task.c: 356: data->holdCountB += 1;
 22182  0C56  085E               	movf	flashy_Main@data,w
 22183  0C57  0086               	movwf	6
 22184  0C58  085F               	movf	flashy_Main@data+1,w
 22185  0C59  0087               	movwf	7
 22186  0C5A  314C               	addfsr 1,12
 22187  0C5B  3001               	movlw	1
 22188  0C5C  0781               	addwf	1,f
 22189  0C5D  3141               	addfsr 1,1
 22190  0C5E  1803               	skipnc
 22191  0C5F  0A81               	incf	1,f
 22192                           
 22193                           ;flashy_task.c: 357: data->holdCountX += 1;
 22194  0C60  085E               	movf	flashy_Main@data,w
 22195  0C61  0086               	movwf	6
 22196  0C62  085F               	movf	flashy_Main@data+1,w
 22197  0C63  0087               	movwf	7
 22198  0C64  314E               	addfsr 1,14
 22199  0C65  3001               	movlw	1
 22200  0C66  0781               	addwf	1,f
 22201  0C67  3141               	addfsr 1,1
 22202  0C68  1803               	skipnc
 22203  0C69  0A81               	incf	1,f
 22204                           
 22205                           ;flashy_task.c: 358: data->holdCountY = 0;
 22206  0C6A  085E               	movf	flashy_Main@data,w
 22207  0C6B  0086               	movwf	6
 22208  0C6C  085F               	movf	flashy_Main@data+1,w
 22209  0C6D  0087               	movwf	7
 22210  0C6E  3150               	addfsr 1,16
 22211  0C6F  3000               	movlw	0
 22212  0C70  3FC0               	movwi [0]fsr1
 22213  0C71  3FC1               	movwi [1]fsr1
 22214                           
 22215                           ;flashy_task.c: 359: data->holdCountXY = 0;
 22216  0C72  085E               	movf	flashy_Main@data,w
 22217  0C73  0086               	movwf	6
 22218  0C74  085F               	movf	flashy_Main@data+1,w
 22219  0C75  0087               	movwf	7
 22220  0C76  3152               	addfsr 1,18
 22221  0C77  3000               	movlw	0
 22222  0C78  3FC0               	movwi [0]fsr1
 22223  0C79  3FC1               	movwi [1]fsr1
 22224                           
 22225                           ;flashy_task.c: 360: data->holdCountAY = 0;
 22226  0C7A  085E               	movf	flashy_Main@data,w
 22227  0C7B  0086               	movwf	6
 22228  0C7C  085F               	movf	flashy_Main@data+1,w
 22229  0C7D  0087               	movwf	7
 22230  0C7E  3154               	addfsr 1,20
 22231  0C7F  3000               	movlw	0
 22232  0C80  3FC0               	movwi [0]fsr1
 22233  0C81  3FC1               	movwi [1]fsr1
 22234                           
 22235                           ;flashy_task.c: 361: data->holdCountAX = 0;
 22236  0C82  085E               	movf	flashy_Main@data,w
 22237  0C83  0086               	movwf	6
 22238  0C84  085F               	movf	flashy_Main@data+1,w
 22239  0C85  0087               	movwf	7
 22240  0C86  3156               	addfsr 1,22
 22241  0C87  3000               	movlw	0
 22242  0C88  3FC0               	movwi [0]fsr1
 22243  0C89  3FC1               	movwi [1]fsr1
 22244                           
 22245                           ;flashy_task.c: 362: data->holdCountBX += 1;
 22246  0C8A  085E               	movf	flashy_Main@data,w
 22247  0C8B  0086               	movwf	6
 22248  0C8C  085F               	movf	flashy_Main@data+1,w
 22249  0C8D  0087               	movwf	7
 22250  0C8E  3158               	addfsr 1,24
 22251  0C8F  3001               	movlw	1
 22252  0C90  0781               	addwf	1,f
 22253  0C91  3141               	addfsr 1,1
 22254  0C92  1803               	skipnc
 22255  0C93  0A81               	incf	1,f
 22256                           
 22257                           ;flashy_task.c: 363: data->holdCountBY = 0;
 22258  0C94  085E               	movf	flashy_Main@data,w
 22259  0C95  0086               	movwf	6
 22260  0C96  085F               	movf	flashy_Main@data+1,w
 22261  0C97  0087               	movwf	7
 22262  0C98  315A               	addfsr 1,26
 22263  0C99  3000               	movlw	0
 22264  0C9A  3FC0               	movwi [0]fsr1
 22265  0C9B  3FC1               	movwi [1]fsr1
 22266                           
 22267                           ;flashy_task.c: 364: data->noholdCount = 0;
 22268  0C9C  085E               	movf	flashy_Main@data,w
 22269  0C9D  0086               	movwf	6
 22270  0C9E  085F               	movf	flashy_Main@data+1,w
 22271  0C9F  0087               	movwf	7
 22272  0CA0  315C               	addfsr 1,28
 22273  0CA1  3000               	movlw	0
 22274  0CA2  3FC0               	movwi [0]fsr1
 22275  0CA3  3FC1               	movwi [1]fsr1
 22276                           
 22277                           ;flashy_task.c: 365: break;
 22278  0CA4  2FC9               	goto	l9527
 22279  0CA5                     l9375:	
 22280                           ;flashy_task.c: 366: case 8:
 22281                           
 22282                           
 22283                           ;flashy_task.c: 368: if (data->holdCountY == 0 && data->blasterTickCount == 0){
 22284  0CA5  085E               	movf	flashy_Main@data,w
 22285  0CA6  0086               	movwf	6
 22286  0CA7  085F               	movf	flashy_Main@data+1,w
 22287  0CA8  0087               	movwf	7
 22288  0CA9  3150               	addfsr 1,16
 22289  0CAA  0016               	moviw fsr1++
 22290  0CAB  0401               	iorwf	1,w
 22291  0CAC  1D03               	btfss	3,2
 22292  0CAD  2CFB               	goto	l9393
 22293  0CAE  085E               	movf	flashy_Main@data,w
 22294  0CAF  0086               	movwf	6
 22295  0CB0  085F               	movf	flashy_Main@data+1,w
 22296  0CB1  0087               	movwf	7
 22297  0CB2  3147               	addfsr 1,7
 22298  0CB3  0016               	moviw fsr1++
 22299  0CB4  0401               	iorwf	1,w
 22300  0CB5  1D03               	btfss	3,2
 22301  0CB6  2CFB               	goto	l9393
 22302                           
 22303                           ;flashy_task.c: 370: nullifyBadge_userLedsSet(data->badge, 0x0);
 22304  0CB7  3000               	movlw	0
 22305  0CB8  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 22306  0CB9  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 22307  0CBA  085E               	movf	flashy_Main@data,w
 22308  0CBB  0086               	movwf	6
 22309  0CBC  085F               	movf	flashy_Main@data+1,w
 22310  0CBD  0087               	movwf	7
 22311  0CBE  0801               	movf	1,w
 22312  0CBF  31B3  2355  3188   	fcall	_nullifyBadge_userLedsSet
 22313                           
 22314                           ;flashy_task.c: 372: data->displayTickCount = 0;
 22315  0CC2  0020               	movlb	0	; select bank0
 22316  0CC3  085E               	movf	flashy_Main@data,w
 22317  0CC4  0086               	movwf	6
 22318  0CC5  085F               	movf	flashy_Main@data+1,w
 22319  0CC6  0087               	movwf	7
 22320  0CC7  3144               	addfsr 1,4
 22321  0CC8  3000               	movlw	0
 22322  0CC9  3FC0               	movwi [0]fsr1
 22323  0CCA  3FC1               	movwi [1]fsr1
 22324                           
 22325                           ;flashy_task.c: 373: data->blasterTickCount = 100;
 22326  0CCB  085E               	movf	flashy_Main@data,w
 22327  0CCC  0086               	movwf	6
 22328  0CCD  085F               	movf	flashy_Main@data+1,w
 22329  0CCE  0087               	movwf	7
 22330  0CCF  3147               	addfsr 1,7
 22331  0CD0  3064               	movlw	100
 22332  0CD1  3FC0               	movwi [0]fsr1
 22333  0CD2  3000               	movlw	0
 22334  0CD3  3FC1               	movwi [1]fsr1
 22335                           
 22336                           ;flashy_task.c: 374: data->delayTickCount = 5;
 22337  0CD4  085E               	movf	flashy_Main@data,w
 22338  0CD5  0086               	movwf	6
 22339  0CD6  085F               	movf	flashy_Main@data+1,w
 22340  0CD7  0087               	movwf	7
 22341  0CD8  3141               	addfsr 1,1
 22342  0CD9  3005               	movlw	5
 22343  0CDA  3FC0               	movwi [0]fsr1
 22344  0CDB  3000               	movlw	0
 22345  0CDC  3FC1               	movwi [1]fsr1
 22346                           
 22347                           ;flashy_task.c: 376: data->led_state = FLASHY_STATE_LED_SHOT;
 22348  0CDD  085E               	movf	flashy_Main@data,w
 22349  0CDE  3E03               	addlw	3
 22350  0CDF  00D4               	movwf	??_flashy_Main
 22351  0CE0  3000               	movlw	0
 22352  0CE1  3D5F               	addwfc	flashy_Main@data+1,w
 22353  0CE2  00D5               	movwf	??_flashy_Main+1
 22354  0CE3  0854               	movf	??_flashy_Main,w
 22355  0CE4  0086               	movwf	6
 22356  0CE5  0855               	movf	??_flashy_Main+1,w
 22357  0CE6  0087               	movwf	7
 22358  0CE7  3001               	movlw	1
 22359  0CE8  0081               	movwf	1
 22360                           
 22361                           ;flashy_task.c: 377: data->display_state = FLASHY_STATE_DISPLAY_BLASTER;
 22362  0CE9  085E               	movf	flashy_Main@data,w
 22363  0CEA  3E06               	addlw	6
 22364  0CEB  00D4               	movwf	??_flashy_Main
 22365  0CEC  3000               	movlw	0
 22366  0CED  3D5F               	addwfc	flashy_Main@data+1,w
 22367  0CEE  00D5               	movwf	??_flashy_Main+1
 22368  0CEF  0854               	movf	??_flashy_Main,w
 22369  0CF0  0086               	movwf	6
 22370  0CF1  0855               	movf	??_flashy_Main+1,w
 22371  0CF2  0087               	movwf	7
 22372  0CF3  3002               	movlw	2
 22373  0CF4  0081               	movwf	1
 22374                           
 22375                           ;flashy_task.c: 378: data->blaster_state = FLASHY_BLASTER_SHOOTING_STATE;
 22376  0CF5  085E               	movf	flashy_Main@data,w
 22377  0CF6  0086               	movwf	6
 22378  0CF7  085F               	movf	flashy_Main@data+1,w
 22379  0CF8  0087               	movwf	7
 22380  0CF9  3149               	addfsr 1,9
 22381  0CFA  0181               	clrf	1
 22382  0CFB                     l9393:	
 22383                           
 22384                           ;flashy_task.c: 379: }
 22385                           ;flashy_task.c: 381: data->holdCountA = 0;
 22386  0CFB  085E               	movf	flashy_Main@data,w
 22387  0CFC  0086               	movwf	6
 22388  0CFD  085F               	movf	flashy_Main@data+1,w
 22389  0CFE  0087               	movwf	7
 22390  0CFF  314A               	addfsr 1,10
 22391  0D00  3000               	movlw	0
 22392  0D01  3FC0               	movwi [0]fsr1
 22393  0D02  3FC1               	movwi [1]fsr1
 22394                           
 22395                           ;flashy_task.c: 382: data->holdCountB = 0;
 22396  0D03  085E               	movf	flashy_Main@data,w
 22397  0D04  0086               	movwf	6
 22398  0D05  085F               	movf	flashy_Main@data+1,w
 22399  0D06  0087               	movwf	7
 22400  0D07  314C               	addfsr 1,12
 22401  0D08  3000               	movlw	0
 22402  0D09  3FC0               	movwi [0]fsr1
 22403  0D0A  3FC1               	movwi [1]fsr1
 22404                           
 22405                           ;flashy_task.c: 383: data->holdCountX = 0;
 22406  0D0B  085E               	movf	flashy_Main@data,w
 22407  0D0C  0086               	movwf	6
 22408  0D0D  085F               	movf	flashy_Main@data+1,w
 22409  0D0E  0087               	movwf	7
 22410  0D0F  314E               	addfsr 1,14
 22411  0D10  3000               	movlw	0
 22412  0D11  3FC0               	movwi [0]fsr1
 22413  0D12  3FC1               	movwi [1]fsr1
 22414                           
 22415                           ;flashy_task.c: 384: data->holdCountY += 1;
 22416  0D13  085E               	movf	flashy_Main@data,w
 22417  0D14  0086               	movwf	6
 22418  0D15  085F               	movf	flashy_Main@data+1,w
 22419  0D16  0087               	movwf	7
 22420  0D17  3150               	addfsr 1,16
 22421  0D18  3001               	movlw	1
 22422  0D19  0781               	addwf	1,f
 22423  0D1A  3141               	addfsr 1,1
 22424  0D1B  1803               	skipnc
 22425  0D1C  0A81               	incf	1,f
 22426                           
 22427                           ;flashy_task.c: 385: data->holdCountXY = 0;
 22428  0D1D  085E               	movf	flashy_Main@data,w
 22429  0D1E  0086               	movwf	6
 22430  0D1F  085F               	movf	flashy_Main@data+1,w
 22431  0D20  0087               	movwf	7
 22432  0D21  3152               	addfsr 1,18
 22433  0D22  3000               	movlw	0
 22434  0D23  3FC0               	movwi [0]fsr1
 22435  0D24  3FC1               	movwi [1]fsr1
 22436                           
 22437                           ;flashy_task.c: 386: data->holdCountAY = 0;
 22438  0D25  085E               	movf	flashy_Main@data,w
 22439  0D26  0086               	movwf	6
 22440  0D27  085F               	movf	flashy_Main@data+1,w
 22441  0D28  0087               	movwf	7
 22442  0D29  3154               	addfsr 1,20
 22443  0D2A  3000               	movlw	0
 22444  0D2B  3FC0               	movwi [0]fsr1
 22445  0D2C  3FC1               	movwi [1]fsr1
 22446                           
 22447                           ;flashy_task.c: 387: data->holdCountAX = 0;
 22448  0D2D  085E               	movf	flashy_Main@data,w
 22449  0D2E  0086               	movwf	6
 22450  0D2F  085F               	movf	flashy_Main@data+1,w
 22451  0D30  0087               	movwf	7
 22452  0D31  3156               	addfsr 1,22
 22453  0D32  3000               	movlw	0
 22454  0D33  3FC0               	movwi [0]fsr1
 22455  0D34  3FC1               	movwi [1]fsr1
 22456                           
 22457                           ;flashy_task.c: 388: data->holdCountBX = 0;
 22458  0D35  085E               	movf	flashy_Main@data,w
 22459  0D36  0086               	movwf	6
 22460  0D37  085F               	movf	flashy_Main@data+1,w
 22461  0D38  0087               	movwf	7
 22462  0D39  3158               	addfsr 1,24
 22463  0D3A  3000               	movlw	0
 22464  0D3B  3FC0               	movwi [0]fsr1
 22465  0D3C  3FC1               	movwi [1]fsr1
 22466                           
 22467                           ;flashy_task.c: 389: data->holdCountBY = 0;
 22468  0D3D  085E               	movf	flashy_Main@data,w
 22469  0D3E  0086               	movwf	6
 22470  0D3F  085F               	movf	flashy_Main@data+1,w
 22471  0D40  0087               	movwf	7
 22472  0D41  315A               	addfsr 1,26
 22473  0D42  3000               	movlw	0
 22474  0D43  3FC0               	movwi [0]fsr1
 22475  0D44  3FC1               	movwi [1]fsr1
 22476                           
 22477                           ;flashy_task.c: 390: data->noholdCount = 0;
 22478  0D45  085E               	movf	flashy_Main@data,w
 22479  0D46  0086               	movwf	6
 22480  0D47  085F               	movf	flashy_Main@data+1,w
 22481  0D48  0087               	movwf	7
 22482  0D49  315C               	addfsr 1,28
 22483  0D4A  3000               	movlw	0
 22484  0D4B  3FC0               	movwi [0]fsr1
 22485  0D4C  3FC1               	movwi [1]fsr1
 22486                           
 22487                           ;flashy_task.c: 391: break;
 22488  0D4D  2FC9               	goto	l9527
 22489  0D4E                     l9413:	
 22490                           ;flashy_task.c: 392: case 2:
 22491                           
 22492                           
 22493                           ;flashy_task.c: 394: if (data->holdCountB == 0){
 22494  0D4E  085E               	movf	flashy_Main@data,w
 22495  0D4F  0086               	movwf	6
 22496  0D50  085F               	movf	flashy_Main@data+1,w
 22497  0D51  0087               	movwf	7
 22498  0D52  314C               	addfsr 1,12
 22499  0D53  0016               	moviw fsr1++
 22500  0D54  0401               	iorwf	1,w
 22501  0D55  1D03               	btfss	3,2
 22502  0D56  2D7C               	goto	l9423
 22503                           
 22504                           ;flashy_task.c: 395: data->display_state = FLASHY_STATE_DISPLAY;
 22505  0D57  085E               	movf	flashy_Main@data,w
 22506  0D58  0086               	movwf	6
 22507  0D59  085F               	movf	flashy_Main@data+1,w
 22508  0D5A  0087               	movwf	7
 22509  0D5B  3146               	addfsr 1,6
 22510  0D5C  0181               	clrf	1
 22511                           
 22512                           ;flashy_task.c: 396: if (flashy_option_idx == flashy_option_size - 1){
 22513  0D5D  0021               	movlb	1	; select bank1
 22514  0D5E  0826               	movf	_flashy_option_size^(0+128),w
 22515  0D5F  3EFF               	addlw	255
 22516  0D60  0020               	movlb	0	; select bank0
 22517  0D61  00D4               	movwf	??_flashy_Main
 22518  0D62  30FF               	movlw	255
 22519  0D63  0021               	movlb	1	; select bank1
 22520  0D64  3D27               	addwfc	(_flashy_option_size+1)^(0+128),w
 22521  0D65  0020               	movlb	0	; select bank0
 22522  0D66  00D5               	movwf	??_flashy_Main+1
 22523  0D67  0021               	movlb	1	; select bank1
 22524  0D68  0829               	movf	(_flashy_option_idx+1)^(0+128),w
 22525  0D69  0020               	movlb	0	; select bank0
 22526  0D6A  0655               	xorwf	??_flashy_Main+1,w
 22527  0D6B  1D03               	skipz
 22528  0D6C  2D71               	goto	u5925
 22529  0D6D  0021               	movlb	1	; select bank1
 22530  0D6E  0828               	movf	_flashy_option_idx^(0+128),w
 22531  0D6F  0020               	movlb	0	; select bank0
 22532  0D70  0654               	xorwf	??_flashy_Main,w
 22533  0D71                     u5925:	
 22534  0D71  1D03               	skipz
 22535  0D72  2D77               	goto	l9421
 22536                           
 22537                           ;flashy_task.c: 397: flashy_option_idx = 0;
 22538  0D73  0021               	movlb	1	; select bank1
 22539  0D74  01A8               	clrf	_flashy_option_idx^(0+128)
 22540  0D75  01A9               	clrf	(_flashy_option_idx+1)^(0+128)
 22541                           
 22542                           ;flashy_task.c: 398: }
 22543  0D76  2D7C               	goto	l9423
 22544  0D77                     l9421:	
 22545                           
 22546                           ;flashy_task.c: 399: else {
 22547                           ;flashy_task.c: 400: flashy_option_idx += 1;
 22548  0D77  3001               	movlw	1
 22549  0D78  0021               	movlb	1	; select bank1
 22550  0D79  07A8               	addwf	_flashy_option_idx^(0+128),f
 22551  0D7A  3000               	movlw	0
 22552  0D7B  3DA9               	addwfc	(_flashy_option_idx+1)^(0+128),f
 22553  0D7C                     l9423:	
 22554                           
 22555                           ;flashy_task.c: 401: }
 22556                           ;flashy_task.c: 402: }
 22557                           ;flashy_task.c: 403: data->holdCountA = 0;
 22558  0D7C  0020               	movlb	0	; select bank0
 22559  0D7D  085E               	movf	flashy_Main@data,w
 22560  0D7E  0086               	movwf	6
 22561  0D7F  085F               	movf	flashy_Main@data+1,w
 22562  0D80  0087               	movwf	7
 22563  0D81  314A               	addfsr 1,10
 22564  0D82  3000               	movlw	0
 22565  0D83  3FC0               	movwi [0]fsr1
 22566  0D84  3FC1               	movwi [1]fsr1
 22567                           
 22568                           ;flashy_task.c: 404: data->holdCountB += 1;
 22569  0D85  085E               	movf	flashy_Main@data,w
 22570  0D86  0086               	movwf	6
 22571  0D87  085F               	movf	flashy_Main@data+1,w
 22572  0D88  0087               	movwf	7
 22573  0D89  314C               	addfsr 1,12
 22574  0D8A  3001               	movlw	1
 22575  0D8B  0781               	addwf	1,f
 22576  0D8C  3141               	addfsr 1,1
 22577  0D8D  1803               	skipnc
 22578  0D8E  0A81               	incf	1,f
 22579                           
 22580                           ;flashy_task.c: 405: data->holdCountX = 0;
 22581  0D8F  085E               	movf	flashy_Main@data,w
 22582  0D90  0086               	movwf	6
 22583  0D91  085F               	movf	flashy_Main@data+1,w
 22584  0D92  0087               	movwf	7
 22585  0D93  314E               	addfsr 1,14
 22586  0D94  3000               	movlw	0
 22587  0D95  3FC0               	movwi [0]fsr1
 22588  0D96  3FC1               	movwi [1]fsr1
 22589                           
 22590                           ;flashy_task.c: 406: data->holdCountY = 0;
 22591  0D97  085E               	movf	flashy_Main@data,w
 22592  0D98  0086               	movwf	6
 22593  0D99  085F               	movf	flashy_Main@data+1,w
 22594  0D9A  0087               	movwf	7
 22595  0D9B  3150               	addfsr 1,16
 22596  0D9C  3000               	movlw	0
 22597  0D9D  3FC0               	movwi [0]fsr1
 22598  0D9E  3FC1               	movwi [1]fsr1
 22599                           
 22600                           ;flashy_task.c: 407: data->holdCountXY = 0;
 22601  0D9F  085E               	movf	flashy_Main@data,w
 22602  0DA0  0086               	movwf	6
 22603  0DA1  085F               	movf	flashy_Main@data+1,w
 22604  0DA2  0087               	movwf	7
 22605  0DA3  3152               	addfsr 1,18
 22606  0DA4  3000               	movlw	0
 22607  0DA5  3FC0               	movwi [0]fsr1
 22608  0DA6  3FC1               	movwi [1]fsr1
 22609                           
 22610                           ;flashy_task.c: 408: data->holdCountAY = 0;
 22611  0DA7  085E               	movf	flashy_Main@data,w
 22612  0DA8  0086               	movwf	6
 22613  0DA9  085F               	movf	flashy_Main@data+1,w
 22614  0DAA  0087               	movwf	7
 22615  0DAB  3154               	addfsr 1,20
 22616  0DAC  3000               	movlw	0
 22617  0DAD  3FC0               	movwi [0]fsr1
 22618  0DAE  3FC1               	movwi [1]fsr1
 22619                           
 22620                           ;flashy_task.c: 409: data->holdCountAX = 0;
 22621  0DAF  085E               	movf	flashy_Main@data,w
 22622  0DB0  0086               	movwf	6
 22623  0DB1  085F               	movf	flashy_Main@data+1,w
 22624  0DB2  0087               	movwf	7
 22625  0DB3  3156               	addfsr 1,22
 22626  0DB4  3000               	movlw	0
 22627  0DB5  3FC0               	movwi [0]fsr1
 22628  0DB6  3FC1               	movwi [1]fsr1
 22629                           
 22630                           ;flashy_task.c: 410: data->holdCountBX = 0;
 22631  0DB7  085E               	movf	flashy_Main@data,w
 22632  0DB8  0086               	movwf	6
 22633  0DB9  085F               	movf	flashy_Main@data+1,w
 22634  0DBA  0087               	movwf	7
 22635  0DBB  3158               	addfsr 1,24
 22636  0DBC  3000               	movlw	0
 22637  0DBD  3FC0               	movwi [0]fsr1
 22638  0DBE  3FC1               	movwi [1]fsr1
 22639                           
 22640                           ;flashy_task.c: 411: data->holdCountBY = 0;
 22641  0DBF  085E               	movf	flashy_Main@data,w
 22642  0DC0  0086               	movwf	6
 22643  0DC1  085F               	movf	flashy_Main@data+1,w
 22644  0DC2  0087               	movwf	7
 22645  0DC3  315A               	addfsr 1,26
 22646  0DC4  3000               	movlw	0
 22647  0DC5  3FC0               	movwi [0]fsr1
 22648  0DC6  3FC1               	movwi [1]fsr1
 22649                           
 22650                           ;flashy_task.c: 412: data->noholdCount = 0;
 22651  0DC7  085E               	movf	flashy_Main@data,w
 22652  0DC8  0086               	movwf	6
 22653  0DC9  085F               	movf	flashy_Main@data+1,w
 22654  0DCA  0087               	movwf	7
 22655  0DCB  315C               	addfsr 1,28
 22656  0DCC  3000               	movlw	0
 22657  0DCD  3FC0               	movwi [0]fsr1
 22658  0DCE  3FC1               	movwi [1]fsr1
 22659                           
 22660                           ;flashy_task.c: 413: break;
 22661  0DCF  2FC9               	goto	l9527
 22662  0DD0                     l9443:	
 22663                           ;flashy_task.c: 414: case 1:
 22664                           
 22665                           
 22666                           ;flashy_task.c: 415: if ( data->holdCountA == 0){
 22667  0DD0  085E               	movf	flashy_Main@data,w
 22668  0DD1  0086               	movwf	6
 22669  0DD2  085F               	movf	flashy_Main@data+1,w
 22670  0DD3  0087               	movwf	7
 22671  0DD4  314A               	addfsr 1,10
 22672  0DD5  0016               	moviw fsr1++
 22673  0DD6  0401               	iorwf	1,w
 22674  0DD7  1D03               	btfss	3,2
 22675  0DD8  2E3E               	goto	l9471
 22676                           
 22677                           ;flashy_task.c: 418: if (flashy_leds_state_track > 4){
 22678  0DD9  3000               	movlw	0
 22679  0DDA  0021               	movlb	1	; select bank1
 22680  0DDB  0231               	subwf	(_flashy_leds_state_track+1)^(0+128),w
 22681  0DDC  3005               	movlw	5
 22682  0DDD  1903               	skipnz
 22683  0DDE  0230               	subwf	_flashy_leds_state_track^(0+128),w
 22684  0DDF  1C03               	skipc
 22685  0DE0  2DE3               	goto	l9449
 22686                           
 22687                           ;flashy_task.c: 419: flashy_leds_state_track=0;
 22688  0DE1  01B0               	clrf	_flashy_leds_state_track^(0+128)
 22689  0DE2  01B1               	clrf	(_flashy_leds_state_track+1)^(0+128)
 22690  0DE3                     l9449:	
 22691                           
 22692                           ;flashy_task.c: 420: }
 22693                           ;flashy_task.c: 421: if (flashy_leds_state_track== 0){
 22694  0DE3  0830               	movf	_flashy_leds_state_track^(0+128),w
 22695  0DE4  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22696  0DE5  1D03               	btfss	3,2
 22697  0DE6  2DF4               	goto	l9453
 22698                           
 22699                           ;flashy_task.c: 422: data->led_state = FLASHY_STATE_LED_ALT;
 22700  0DE7  0020               	movlb	0	; select bank0
 22701  0DE8  085E               	movf	flashy_Main@data,w
 22702  0DE9  3E03               	addlw	3
 22703  0DEA  00D4               	movwf	??_flashy_Main
 22704  0DEB  3000               	movlw	0
 22705  0DEC  3D5F               	addwfc	flashy_Main@data+1,w
 22706  0DED  00D5               	movwf	??_flashy_Main+1
 22707  0DEE  0854               	movf	??_flashy_Main,w
 22708  0DEF  0086               	movwf	6
 22709  0DF0  0855               	movf	??_flashy_Main+1,w
 22710  0DF1  0087               	movwf	7
 22711  0DF2  3004               	movlw	4
 22712  0DF3  0081               	movwf	1
 22713  0DF4                     l9453:	
 22714                           
 22715                           ;flashy_task.c: 423: }
 22716                           ;flashy_task.c: 424: if (flashy_leds_state_track ==1){
 22717  0DF4  0021               	movlb	1	; select bank1
 22718  0DF5  0330               	decf	_flashy_leds_state_track^(0+128),w
 22719  0DF6  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22720  0DF7  1D03               	btfss	3,2
 22721  0DF8  2E06               	goto	l9457
 22722                           
 22723                           ;flashy_task.c: 425: data->led_state = FLASHY_STATE_SPARKLE;
 22724  0DF9  0020               	movlb	0	; select bank0
 22725  0DFA  085E               	movf	flashy_Main@data,w
 22726  0DFB  3E03               	addlw	3
 22727  0DFC  00D4               	movwf	??_flashy_Main
 22728  0DFD  3000               	movlw	0
 22729  0DFE  3D5F               	addwfc	flashy_Main@data+1,w
 22730  0DFF  00D5               	movwf	??_flashy_Main+1
 22731  0E00  0854               	movf	??_flashy_Main,w
 22732  0E01  0086               	movwf	6
 22733  0E02  0855               	movf	??_flashy_Main+1,w
 22734  0E03  0087               	movwf	7
 22735  0E04  3002               	movlw	2
 22736  0E05  0081               	movwf	1
 22737  0E06                     l9457:	
 22738                           
 22739                           ;flashy_task.c: 426: }
 22740                           ;flashy_task.c: 427: if (flashy_leds_state_track == 2){
 22741  0E06  3002               	movlw	2
 22742  0E07  0021               	movlb	1	; select bank1
 22743  0E08  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22744  0E09  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22745  0E0A  1D03               	btfss	3,2
 22746  0E0B  2E19               	goto	l9461
 22747                           
 22748                           ;flashy_task.c: 428: data->led_state = FLASHY_STATE_CIRCLE;
 22749  0E0C  0020               	movlb	0	; select bank0
 22750  0E0D  085E               	movf	flashy_Main@data,w
 22751  0E0E  3E03               	addlw	3
 22752  0E0F  00D4               	movwf	??_flashy_Main
 22753  0E10  3000               	movlw	0
 22754  0E11  3D5F               	addwfc	flashy_Main@data+1,w
 22755  0E12  00D5               	movwf	??_flashy_Main+1
 22756  0E13  0854               	movf	??_flashy_Main,w
 22757  0E14  0086               	movwf	6
 22758  0E15  0855               	movf	??_flashy_Main+1,w
 22759  0E16  0087               	movwf	7
 22760  0E17  3003               	movlw	3
 22761  0E18  0081               	movwf	1
 22762  0E19                     l9461:	
 22763                           
 22764                           ;flashy_task.c: 429: }
 22765                           ;flashy_task.c: 430: if (flashy_leds_state_track == 3){
 22766  0E19  3003               	movlw	3
 22767  0E1A  0021               	movlb	1	; select bank1
 22768  0E1B  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22769  0E1C  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22770  0E1D  1D03               	btfss	3,2
 22771  0E1E  2E26               	goto	l9465
 22772                           
 22773                           ;flashy_task.c: 431: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 22774  0E1F  0020               	movlb	0	; select bank0
 22775  0E20  085E               	movf	flashy_Main@data,w
 22776  0E21  0086               	movwf	6
 22777  0E22  085F               	movf	flashy_Main@data+1,w
 22778  0E23  0087               	movwf	7
 22779  0E24  3143               	addfsr 1,3
 22780  0E25  0181               	clrf	1
 22781  0E26                     l9465:	
 22782                           
 22783                           ;flashy_task.c: 432: }
 22784                           ;flashy_task.c: 433: if (flashy_leds_state_track ==4 ){
 22785  0E26  3004               	movlw	4
 22786  0E27  0021               	movlb	1	; select bank1
 22787  0E28  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22788  0E29  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22789  0E2A  1D03               	btfss	3,2
 22790  0E2B  2E39               	goto	l9469
 22791                           
 22792                           ;flashy_task.c: 434: data->led_state = FLASHY_STATE_LED_PARODY;
 22793  0E2C  0020               	movlb	0	; select bank0
 22794  0E2D  085E               	movf	flashy_Main@data,w
 22795  0E2E  3E03               	addlw	3
 22796  0E2F  00D4               	movwf	??_flashy_Main
 22797  0E30  3000               	movlw	0
 22798  0E31  3D5F               	addwfc	flashy_Main@data+1,w
 22799  0E32  00D5               	movwf	??_flashy_Main+1
 22800  0E33  0854               	movf	??_flashy_Main,w
 22801  0E34  0086               	movwf	6
 22802  0E35  0855               	movf	??_flashy_Main+1,w
 22803  0E36  0087               	movwf	7
 22804  0E37  3005               	movlw	5
 22805  0E38  0081               	movwf	1
 22806  0E39                     l9469:	
 22807                           
 22808                           ;flashy_task.c: 435: }
 22809                           ;flashy_task.c: 436: flashy_leds_state_track +=1;
 22810  0E39  3001               	movlw	1
 22811  0E3A  0021               	movlb	1	; select bank1
 22812  0E3B  07B0               	addwf	_flashy_leds_state_track^(0+128),f
 22813  0E3C  3000               	movlw	0
 22814  0E3D  3DB1               	addwfc	(_flashy_leds_state_track+1)^(0+128),f
 22815  0E3E                     l9471:	
 22816                           
 22817                           ;flashy_task.c: 437: }
 22818                           ;flashy_task.c: 439: data->holdCountA += 1;
 22819  0E3E  0020               	movlb	0	; select bank0
 22820  0E3F  085E               	movf	flashy_Main@data,w
 22821  0E40  0086               	movwf	6
 22822  0E41  085F               	movf	flashy_Main@data+1,w
 22823  0E42  0087               	movwf	7
 22824  0E43  314A               	addfsr 1,10
 22825  0E44  3001               	movlw	1
 22826  0E45  0781               	addwf	1,f
 22827  0E46  3141               	addfsr 1,1
 22828  0E47  1803               	skipnc
 22829  0E48  0A81               	incf	1,f
 22830                           
 22831                           ;flashy_task.c: 440: data->holdCountB = 0;
 22832  0E49  085E               	movf	flashy_Main@data,w
 22833  0E4A  0086               	movwf	6
 22834  0E4B  085F               	movf	flashy_Main@data+1,w
 22835  0E4C  0087               	movwf	7
 22836  0E4D  314C               	addfsr 1,12
 22837  0E4E  3000               	movlw	0
 22838  0E4F  3FC0               	movwi [0]fsr1
 22839  0E50  3FC1               	movwi [1]fsr1
 22840                           
 22841                           ;flashy_task.c: 441: data->holdCountX = 0;
 22842  0E51  085E               	movf	flashy_Main@data,w
 22843  0E52  0086               	movwf	6
 22844  0E53  085F               	movf	flashy_Main@data+1,w
 22845  0E54  0087               	movwf	7
 22846  0E55  314E               	addfsr 1,14
 22847  0E56  3000               	movlw	0
 22848  0E57  3FC0               	movwi [0]fsr1
 22849  0E58  3FC1               	movwi [1]fsr1
 22850                           
 22851                           ;flashy_task.c: 442: data->holdCountY = 0;
 22852  0E59  085E               	movf	flashy_Main@data,w
 22853  0E5A  0086               	movwf	6
 22854  0E5B  085F               	movf	flashy_Main@data+1,w
 22855  0E5C  0087               	movwf	7
 22856  0E5D  3150               	addfsr 1,16
 22857  0E5E  3000               	movlw	0
 22858  0E5F  3FC0               	movwi [0]fsr1
 22859  0E60  3FC1               	movwi [1]fsr1
 22860                           
 22861                           ;flashy_task.c: 443: data->holdCountXY = 0;
 22862  0E61  085E               	movf	flashy_Main@data,w
 22863  0E62  0086               	movwf	6
 22864  0E63  085F               	movf	flashy_Main@data+1,w
 22865  0E64  0087               	movwf	7
 22866  0E65  3152               	addfsr 1,18
 22867  0E66  3000               	movlw	0
 22868  0E67  3FC0               	movwi [0]fsr1
 22869  0E68  3FC1               	movwi [1]fsr1
 22870                           
 22871                           ;flashy_task.c: 444: data->holdCountAY = 0;
 22872  0E69  085E               	movf	flashy_Main@data,w
 22873  0E6A  0086               	movwf	6
 22874  0E6B  085F               	movf	flashy_Main@data+1,w
 22875  0E6C  0087               	movwf	7
 22876  0E6D  3154               	addfsr 1,20
 22877  0E6E  3000               	movlw	0
 22878  0E6F  3FC0               	movwi [0]fsr1
 22879  0E70  3FC1               	movwi [1]fsr1
 22880                           
 22881                           ;flashy_task.c: 445: data->holdCountAX = 0;
 22882  0E71  085E               	movf	flashy_Main@data,w
 22883  0E72  0086               	movwf	6
 22884  0E73  085F               	movf	flashy_Main@data+1,w
 22885  0E74  0087               	movwf	7
 22886  0E75  3156               	addfsr 1,22
 22887  0E76  3000               	movlw	0
 22888  0E77  3FC0               	movwi [0]fsr1
 22889  0E78  3FC1               	movwi [1]fsr1
 22890                           
 22891                           ;flashy_task.c: 446: data->holdCountBX = 0;
 22892  0E79  085E               	movf	flashy_Main@data,w
 22893  0E7A  0086               	movwf	6
 22894  0E7B  085F               	movf	flashy_Main@data+1,w
 22895  0E7C  0087               	movwf	7
 22896  0E7D  3158               	addfsr 1,24
 22897  0E7E  3000               	movlw	0
 22898  0E7F  3FC0               	movwi [0]fsr1
 22899  0E80  3FC1               	movwi [1]fsr1
 22900                           
 22901                           ;flashy_task.c: 447: data->holdCountBY = 0;
 22902  0E81  085E               	movf	flashy_Main@data,w
 22903  0E82  0086               	movwf	6
 22904  0E83  085F               	movf	flashy_Main@data+1,w
 22905  0E84  0087               	movwf	7
 22906  0E85  315A               	addfsr 1,26
 22907  0E86  3000               	movlw	0
 22908  0E87  3FC0               	movwi [0]fsr1
 22909  0E88  3FC1               	movwi [1]fsr1
 22910                           
 22911                           ;flashy_task.c: 448: data->noholdCount = 0;
 22912  0E89  085E               	movf	flashy_Main@data,w
 22913  0E8A  0086               	movwf	6
 22914  0E8B  085F               	movf	flashy_Main@data+1,w
 22915  0E8C  0087               	movwf	7
 22916  0E8D  315C               	addfsr 1,28
 22917  0E8E  3000               	movlw	0
 22918  0E8F  3FC0               	movwi [0]fsr1
 22919  0E90  3FC1               	movwi [1]fsr1
 22920                           
 22921                           ;flashy_task.c: 449: break;
 22922  0E91  2FC9               	goto	l9527
 22923  0E92                     l9491:	
 22924                           ;flashy_task.c: 450: case 0:
 22925                           
 22926                           
 22927                           ;flashy_task.c: 452: data->holdCountA = 0;
 22928  0E92  085E               	movf	flashy_Main@data,w
 22929  0E93  0086               	movwf	6
 22930  0E94  085F               	movf	flashy_Main@data+1,w
 22931  0E95  0087               	movwf	7
 22932  0E96  314A               	addfsr 1,10
 22933  0E97  3000               	movlw	0
 22934  0E98  3FC0               	movwi [0]fsr1
 22935  0E99  3FC1               	movwi [1]fsr1
 22936                           
 22937                           ;flashy_task.c: 453: data->holdCountB = 0;
 22938  0E9A  085E               	movf	flashy_Main@data,w
 22939  0E9B  0086               	movwf	6
 22940  0E9C  085F               	movf	flashy_Main@data+1,w
 22941  0E9D  0087               	movwf	7
 22942  0E9E  314C               	addfsr 1,12
 22943  0E9F  3000               	movlw	0
 22944  0EA0  3FC0               	movwi [0]fsr1
 22945  0EA1  3FC1               	movwi [1]fsr1
 22946                           
 22947                           ;flashy_task.c: 454: data->holdCountX = 0;
 22948  0EA2  085E               	movf	flashy_Main@data,w
 22949  0EA3  0086               	movwf	6
 22950  0EA4  085F               	movf	flashy_Main@data+1,w
 22951  0EA5  0087               	movwf	7
 22952  0EA6  314E               	addfsr 1,14
 22953  0EA7  3000               	movlw	0
 22954  0EA8  3FC0               	movwi [0]fsr1
 22955  0EA9  3FC1               	movwi [1]fsr1
 22956                           
 22957                           ;flashy_task.c: 455: data->holdCountY = 0;
 22958  0EAA  085E               	movf	flashy_Main@data,w
 22959  0EAB  0086               	movwf	6
 22960  0EAC  085F               	movf	flashy_Main@data+1,w
 22961  0EAD  0087               	movwf	7
 22962  0EAE  3150               	addfsr 1,16
 22963  0EAF  3000               	movlw	0
 22964  0EB0  3FC0               	movwi [0]fsr1
 22965  0EB1  3FC1               	movwi [1]fsr1
 22966                           
 22967                           ;flashy_task.c: 456: data->holdCountXY = 0;
 22968  0EB2  085E               	movf	flashy_Main@data,w
 22969  0EB3  0086               	movwf	6
 22970  0EB4  085F               	movf	flashy_Main@data+1,w
 22971  0EB5  0087               	movwf	7
 22972  0EB6  3152               	addfsr 1,18
 22973  0EB7  3000               	movlw	0
 22974  0EB8  3FC0               	movwi [0]fsr1
 22975  0EB9  3FC1               	movwi [1]fsr1
 22976                           
 22977                           ;flashy_task.c: 457: data->holdCountAY = 0;
 22978  0EBA  085E               	movf	flashy_Main@data,w
 22979  0EBB  0086               	movwf	6
 22980  0EBC  085F               	movf	flashy_Main@data+1,w
 22981  0EBD  0087               	movwf	7
 22982  0EBE  3154               	addfsr 1,20
 22983  0EBF  3000               	movlw	0
 22984  0EC0  3FC0               	movwi [0]fsr1
 22985  0EC1  3FC1               	movwi [1]fsr1
 22986                           
 22987                           ;flashy_task.c: 458: data->holdCountAX = 0;
 22988  0EC2  085E               	movf	flashy_Main@data,w
 22989  0EC3  0086               	movwf	6
 22990  0EC4  085F               	movf	flashy_Main@data+1,w
 22991  0EC5  0087               	movwf	7
 22992  0EC6  3156               	addfsr 1,22
 22993  0EC7  3000               	movlw	0
 22994  0EC8  3FC0               	movwi [0]fsr1
 22995  0EC9  3FC1               	movwi [1]fsr1
 22996                           
 22997                           ;flashy_task.c: 459: data->holdCountBX = 0;
 22998  0ECA  085E               	movf	flashy_Main@data,w
 22999  0ECB  0086               	movwf	6
 23000  0ECC  085F               	movf	flashy_Main@data+1,w
 23001  0ECD  0087               	movwf	7
 23002  0ECE  3158               	addfsr 1,24
 23003  0ECF  3000               	movlw	0
 23004  0ED0  3FC0               	movwi [0]fsr1
 23005  0ED1  3FC1               	movwi [1]fsr1
 23006                           
 23007                           ;flashy_task.c: 460: data->holdCountBY = 0;
 23008  0ED2  085E               	movf	flashy_Main@data,w
 23009  0ED3  0086               	movwf	6
 23010  0ED4  085F               	movf	flashy_Main@data+1,w
 23011  0ED5  0087               	movwf	7
 23012  0ED6  315A               	addfsr 1,26
 23013  0ED7  3000               	movlw	0
 23014  0ED8  3FC0               	movwi [0]fsr1
 23015  0ED9  3FC1               	movwi [1]fsr1
 23016                           
 23017                           ;flashy_task.c: 461: data->noholdCount += 1;
 23018  0EDA  085E               	movf	flashy_Main@data,w
 23019  0EDB  0086               	movwf	6
 23020  0EDC  085F               	movf	flashy_Main@data+1,w
 23021  0EDD  0087               	movwf	7
 23022  0EDE  315C               	addfsr 1,28
 23023  0EDF  3001               	movlw	1
 23024  0EE0  0781               	addwf	1,f
 23025  0EE1  3141               	addfsr 1,1
 23026  0EE2  1803               	skipnc
 23027  0EE3  0A81               	incf	1,f
 23028                           
 23029                           ;flashy_task.c: 462: break;
 23030  0EE4  2FC9               	goto	l9527
 23031  0EE5                     l9495:	
 23032                           ;flashy_task.c: 463: default:
 23033                           
 23034                           
 23035                           ;flashy_task.c: 464: data->holdCountA = 0;
 23036  0EE5  085E               	movf	flashy_Main@data,w
 23037  0EE6  0086               	movwf	6
 23038  0EE7  085F               	movf	flashy_Main@data+1,w
 23039  0EE8  0087               	movwf	7
 23040  0EE9  314A               	addfsr 1,10
 23041  0EEA  3000               	movlw	0
 23042  0EEB  3FC0               	movwi [0]fsr1
 23043  0EEC  3FC1               	movwi [1]fsr1
 23044                           
 23045                           ;flashy_task.c: 465: data->holdCountB = 0;
 23046  0EED  085E               	movf	flashy_Main@data,w
 23047  0EEE  0086               	movwf	6
 23048  0EEF  085F               	movf	flashy_Main@data+1,w
 23049  0EF0  0087               	movwf	7
 23050  0EF1  314C               	addfsr 1,12
 23051  0EF2  3000               	movlw	0
 23052  0EF3  3FC0               	movwi [0]fsr1
 23053  0EF4  3FC1               	movwi [1]fsr1
 23054                           
 23055                           ;flashy_task.c: 466: data->holdCountX = 0;
 23056  0EF5  085E               	movf	flashy_Main@data,w
 23057  0EF6  0086               	movwf	6
 23058  0EF7  085F               	movf	flashy_Main@data+1,w
 23059  0EF8  0087               	movwf	7
 23060  0EF9  314E               	addfsr 1,14
 23061  0EFA  3000               	movlw	0
 23062  0EFB  3FC0               	movwi [0]fsr1
 23063  0EFC  3FC1               	movwi [1]fsr1
 23064                           
 23065                           ;flashy_task.c: 467: data->holdCountY = 0;
 23066  0EFD  085E               	movf	flashy_Main@data,w
 23067  0EFE  0086               	movwf	6
 23068  0EFF  085F               	movf	flashy_Main@data+1,w
 23069  0F00  0087               	movwf	7
 23070  0F01  3150               	addfsr 1,16
 23071  0F02  3000               	movlw	0
 23072  0F03  3FC0               	movwi [0]fsr1
 23073  0F04  3FC1               	movwi [1]fsr1
 23074                           
 23075                           ;flashy_task.c: 468: data->holdCountXY = 0;
 23076  0F05  085E               	movf	flashy_Main@data,w
 23077  0F06  0086               	movwf	6
 23078  0F07  085F               	movf	flashy_Main@data+1,w
 23079  0F08  0087               	movwf	7
 23080  0F09  3152               	addfsr 1,18
 23081  0F0A  3000               	movlw	0
 23082  0F0B  3FC0               	movwi [0]fsr1
 23083  0F0C  3FC1               	movwi [1]fsr1
 23084                           
 23085                           ;flashy_task.c: 469: data->holdCountAY = 0;
 23086  0F0D  085E               	movf	flashy_Main@data,w
 23087  0F0E  0086               	movwf	6
 23088  0F0F  085F               	movf	flashy_Main@data+1,w
 23089  0F10  0087               	movwf	7
 23090  0F11  3154               	addfsr 1,20
 23091  0F12  3000               	movlw	0
 23092  0F13  3FC0               	movwi [0]fsr1
 23093  0F14  3FC1               	movwi [1]fsr1
 23094                           
 23095                           ;flashy_task.c: 470: data->holdCountAX = 0;
 23096  0F15  085E               	movf	flashy_Main@data,w
 23097  0F16  0086               	movwf	6
 23098  0F17  085F               	movf	flashy_Main@data+1,w
 23099  0F18  0087               	movwf	7
 23100  0F19  3156               	addfsr 1,22
 23101  0F1A  3000               	movlw	0
 23102  0F1B  3FC0               	movwi [0]fsr1
 23103  0F1C  3FC1               	movwi [1]fsr1
 23104                           
 23105                           ;flashy_task.c: 471: data->holdCountBX = 0;
 23106  0F1D  085E               	movf	flashy_Main@data,w
 23107  0F1E  0086               	movwf	6
 23108  0F1F  085F               	movf	flashy_Main@data+1,w
 23109  0F20  0087               	movwf	7
 23110  0F21  3158               	addfsr 1,24
 23111  0F22  3000               	movlw	0
 23112  0F23  3FC0               	movwi [0]fsr1
 23113  0F24  3FC1               	movwi [1]fsr1
 23114                           
 23115                           ;flashy_task.c: 472: data->holdCountBY = 0;
 23116  0F25  085E               	movf	flashy_Main@data,w
 23117  0F26  0086               	movwf	6
 23118  0F27  085F               	movf	flashy_Main@data+1,w
 23119  0F28  0087               	movwf	7
 23120  0F29  315A               	addfsr 1,26
 23121  0F2A  3000               	movlw	0
 23122  0F2B  3FC0               	movwi [0]fsr1
 23123  0F2C  3FC1               	movwi [1]fsr1
 23124                           
 23125                           ;flashy_task.c: 473: data->noholdCount = 0;
 23126  0F2D  085E               	movf	flashy_Main@data,w
 23127  0F2E  0086               	movwf	6
 23128  0F2F  085F               	movf	flashy_Main@data+1,w
 23129  0F30  0087               	movwf	7
 23130  0F31  315C               	addfsr 1,28
 23131  0F32  3000               	movlw	0
 23132  0F33  3FC0               	movwi [0]fsr1
 23133  0F34  3FC1               	movwi [1]fsr1
 23134                           
 23135                           ;flashy_task.c: 474: }
 23136  0F35  2FC9               	goto	l9527
 23137  0F36                     l9497:	
 23138                           
 23139                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23140                           ; Switch size 1, requested type "space"
 23141                           ; Number of cases is 1, Range of values is 0 to 0
 23142                           ; switch strategies available:
 23143                           ; Name         Instructions Cycles
 23144                           ; simple_byte            4     3 (average)
 23145                           ; direct_byte            8     6 (fixed)
 23146                           ; jumptable            260     6 (fixed)
 23147                           ;	Chosen strategy is simple_byte
 23148  0F36  085D               	movf	flashy_Main@buttonPressed+1,w
 23149  0F37  3A00               	xorlw	0	; case 0
 23150  0F38  1903               	skipnz
 23151  0F39  2F3B               	goto	l10831
 23152  0F3A  2EE5               	goto	l9495
 23153  0F3B                     l10831:	
 23154                           
 23155                           ; Switch size 1, requested type "space"
 23156                           ; Number of cases is 9, Range of values is 0 to 12
 23157                           ; switch strategies available:
 23158                           ; Name         Instructions Cycles
 23159                           ; simple_byte           28    15 (average)
 23160                           ; direct_byte           32     6 (fixed)
 23161                           ; jumptable            260     6 (fixed)
 23162                           ;	Chosen strategy is simple_byte
 23163  0F3B  085C               	movf	flashy_Main@buttonPressed,w
 23164  0F3C  3A00               	xorlw	0	; case 0
 23165  0F3D  1903               	skipnz
 23166  0F3E  2E92               	goto	l9491
 23167  0F3F  3A01               	xorlw	1	; case 1
 23168  0F40  1903               	skipnz
 23169  0F41  2DD0               	goto	l9443
 23170  0F42  3A03               	xorlw	3	; case 2
 23171  0F43  1903               	skipnz
 23172  0F44  2D4E               	goto	l9413
 23173  0F45  3A07               	xorlw	7	; case 5
 23174  0F46  1903               	skipnz
 23175  0F47  2B4C               	goto	l9289
 23176  0F48  3A03               	xorlw	3	; case 6
 23177  0F49  1903               	skipnz
 23178  0F4A  2C30               	goto	l9345
 23179  0F4B  3A0E               	xorlw	14	; case 8
 23180  0F4C  1903               	skipnz
 23181  0F4D  2CA5               	goto	l9375
 23182  0F4E  3A01               	xorlw	1	; case 9
 23183  0F4F  1903               	skipnz
 23184  0F50  2ADF               	goto	l9263
 23185  0F51  3A03               	xorlw	3	; case 10
 23186  0F52  1903               	skipnz
 23187  0F53  2BBB               	goto	l9315
 23188  0F54  3A06               	xorlw	6	; case 12
 23189  0F55  1903               	skipnz
 23190  0F56  2A7D               	goto	l9239
 23191  0F57  2EE5               	goto	l9495
 23192                           
 23193                           ;flashy_task.c: 477: switch (data->blaster_state) {
 23194  0F58  2FC9               	goto	l9527
 23195  0F59                     l9499:	
 23196                           ;flashy_task.c: 478: case FLASHY_BLASTER_SHOOTING_STATE:
 23197                           
 23198                           
 23199                           ;flashy_task.c: 480: if (data->blasterTickCount == 100) {
 23200  0F59  085E               	movf	flashy_Main@data,w
 23201  0F5A  0086               	movwf	6
 23202  0F5B  085F               	movf	flashy_Main@data+1,w
 23203  0F5C  0087               	movwf	7
 23204  0F5D  3147               	addfsr 1,7
 23205  0F5E  0016               	moviw fsr1++
 23206  0F5F  3A64               	xorlw	100
 23207  0F60  00D4               	movwf	??_flashy_Main
 23208  0F61  0016               	moviw fsr1++
 23209  0F62  04D4               	iorwf	??_flashy_Main,f
 23210  0F63  1D03               	btfss	3,2
 23211  0F64  2F70               	goto	l9505
 23212                           
 23213                           ;flashy_task.c: 481: nullifyBadge_irTxRegister(data->badge);
 23214  0F65  085E               	movf	flashy_Main@data,w
 23215  0F66  0086               	movwf	6
 23216  0F67  085F               	movf	flashy_Main@data+1,w
 23217  0F68  0087               	movwf	7
 23218  0F69  0801               	movf	1,w
 23219  0F6A  31B3  2317  3188   	fcall	_nullifyBadge_irTxRegister
 23220                           
 23221                           ;flashy_task.c: 482: nullifyBadge_irTxSet();
 23222  0F6D  31A8  2082  3188   	fcall	_nullifyBadge_irTxSet
 23223  0F70                     l9505:	
 23224                           
 23225                           ;flashy_task.c: 483: }
 23226                           ;flashy_task.c: 484: if (data->blasterTickCount == 100 - 1 ){
 23227  0F70  0020               	movlb	0	; select bank0
 23228  0F71  085E               	movf	flashy_Main@data,w
 23229  0F72  0086               	movwf	6
 23230  0F73  085F               	movf	flashy_Main@data+1,w
 23231  0F74  0087               	movwf	7
 23232  0F75  3147               	addfsr 1,7
 23233  0F76  0016               	moviw fsr1++
 23234  0F77  3A63               	xorlw	99
 23235  0F78  00D4               	movwf	??_flashy_Main
 23236  0F79  0016               	moviw fsr1++
 23237  0F7A  04D4               	iorwf	??_flashy_Main,f
 23238  0F7B  1D03               	btfss	3,2
 23239  0F7C  2F89               	goto	l9511
 23240                           
 23241                           ;flashy_task.c: 485: nullifyBadge_irTxClr();
 23242  0F7D  31B2  221B  3188   	fcall	_nullifyBadge_irTxClr
 23243                           
 23244                           ;flashy_task.c: 486: nullifyBadge_irTxRelease(data->badge);
 23245  0F80  0020               	movlb	0	; select bank0
 23246  0F81  085E               	movf	flashy_Main@data,w
 23247  0F82  0086               	movwf	6
 23248  0F83  085F               	movf	flashy_Main@data+1,w
 23249  0F84  0087               	movwf	7
 23250  0F85  0801               	movf	1,w
 23251  0F86  31B2  22B3  3188   	fcall	_nullifyBadge_irTxRelease
 23252  0F89                     l9511:	
 23253                           
 23254                           ;flashy_task.c: 487: }
 23255                           ;flashy_task.c: 488: if (data->blasterTickCount == 0){
 23256  0F89  0020               	movlb	0	; select bank0
 23257  0F8A  085E               	movf	flashy_Main@data,w
 23258  0F8B  0086               	movwf	6
 23259  0F8C  085F               	movf	flashy_Main@data+1,w
 23260  0F8D  0087               	movwf	7
 23261  0F8E  3147               	addfsr 1,7
 23262  0F8F  0016               	moviw fsr1++
 23263  0F90  0401               	iorwf	1,w
 23264  0F91  1D03               	btfss	3,2
 23265  0F92  2FBD               	goto	l9523
 23266                           
 23267                           ;flashy_task.c: 489: data->displayTickCount = 0;
 23268  0F93  085E               	movf	flashy_Main@data,w
 23269  0F94  0086               	movwf	6
 23270  0F95  085F               	movf	flashy_Main@data+1,w
 23271  0F96  0087               	movwf	7
 23272  0F97  3144               	addfsr 1,4
 23273  0F98  3000               	movlw	0
 23274  0F99  3FC0               	movwi [0]fsr1
 23275  0F9A  3FC1               	movwi [1]fsr1
 23276                           
 23277                           ;flashy_task.c: 490: data->delayTickCount = 5;
 23278  0F9B  085E               	movf	flashy_Main@data,w
 23279  0F9C  0086               	movwf	6
 23280  0F9D  085F               	movf	flashy_Main@data+1,w
 23281  0F9E  0087               	movwf	7
 23282  0F9F  3141               	addfsr 1,1
 23283  0FA0  3005               	movlw	5
 23284  0FA1  3FC0               	movwi [0]fsr1
 23285  0FA2  3000               	movlw	0
 23286  0FA3  3FC1               	movwi [1]fsr1
 23287                           
 23288                           ;flashy_task.c: 492: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 23289  0FA4  085E               	movf	flashy_Main@data,w
 23290  0FA5  0086               	movwf	6
 23291  0FA6  085F               	movf	flashy_Main@data+1,w
 23292  0FA7  0087               	movwf	7
 23293  0FA8  3143               	addfsr 1,3
 23294  0FA9  0181               	clrf	1
 23295                           
 23296                           ;flashy_task.c: 493: data->display_state = FLASHY_STATE_DISPLAY;
 23297  0FAA  085E               	movf	flashy_Main@data,w
 23298  0FAB  0086               	movwf	6
 23299  0FAC  085F               	movf	flashy_Main@data+1,w
 23300  0FAD  0087               	movwf	7
 23301  0FAE  3146               	addfsr 1,6
 23302  0FAF  0181               	clrf	1
 23303                           
 23304                           ;flashy_task.c: 494: data->blaster_state = FLASHY_BLASTER_IDLE_STATE;
 23305  0FB0  085E               	movf	flashy_Main@data,w
 23306  0FB1  3E09               	addlw	9
 23307  0FB2  00D4               	movwf	??_flashy_Main
 23308  0FB3  3000               	movlw	0
 23309  0FB4  3D5F               	addwfc	flashy_Main@data+1,w
 23310  0FB5  00D5               	movwf	??_flashy_Main+1
 23311  0FB6  0854               	movf	??_flashy_Main,w
 23312  0FB7  0086               	movwf	6
 23313  0FB8  0855               	movf	??_flashy_Main+1,w
 23314  0FB9  0087               	movwf	7
 23315  0FBA  3001               	movlw	1
 23316  0FBB  0081               	movwf	1
 23317                           
 23318                           ;flashy_task.c: 495: }
 23319  0FBC  2FD6               	goto	l9529
 23320  0FBD                     l9523:	
 23321                           
 23322                           ;flashy_task.c: 496: else {
 23323                           ;flashy_task.c: 497: data->blasterTickCount -= 1;
 23324  0FBD  085E               	movf	flashy_Main@data,w
 23325  0FBE  0086               	movwf	6
 23326  0FBF  085F               	movf	flashy_Main@data+1,w
 23327  0FC0  0087               	movwf	7
 23328  0FC1  3147               	addfsr 1,7
 23329  0FC2  3001               	movlw	1
 23330  0FC3  0281               	subwf	1,f
 23331  0FC4  3141               	addfsr 1,1
 23332  0FC5  3000               	movlw	0
 23333  0FC6  3B81               	subwfb	1,f
 23334  0FC7  317F               	addfsr 1,-1
 23335                           
 23336                           ;flashy_task.c: 502: }
 23337                           
 23338                           ;flashy_task.c: 501: break;
 23339                           
 23340                           ;flashy_task.c: 500: case FLASHY_BLASTER_IDLE_STATE:
 23341                           
 23342                           ;flashy_task.c: 498: }
 23343                           ;flashy_task.c: 499: break;
 23344  0FC8  2FD6               	goto	l9529
 23345  0FC9                     l9527:	
 23346  0FC9  085E               	movf	flashy_Main@data,w
 23347  0FCA  0086               	movwf	6
 23348  0FCB  085F               	movf	flashy_Main@data+1,w
 23349  0FCC  0087               	movwf	7
 23350  0FCD  3149               	addfsr 1,9
 23351  0FCE  0801               	movf	1,w
 23352                           
 23353                           ; Switch size 1, requested type "space"
 23354                           ; Number of cases is 2, Range of values is 0 to 1
 23355                           ; switch strategies available:
 23356                           ; Name         Instructions Cycles
 23357                           ; simple_byte            7     4 (average)
 23358                           ; direct_byte           10     6 (fixed)
 23359                           ; jumptable            260     6 (fixed)
 23360                           ;	Chosen strategy is simple_byte
 23361  0FCF  3A00               	xorlw	0	; case 0
 23362  0FD0  1903               	skipnz
 23363  0FD1  2F59               	goto	l9499
 23364  0FD2  3A01               	xorlw	1	; case 1
 23365  0FD3  1903               	skipnz
 23366  0FD4  2FD6               	goto	l9529
 23367  0FD5  2FD6               	goto	l9529
 23368  0FD6                     l9529:	
 23369                           
 23370                           ;flashy_task.c: 505: if (nullifyBadge_irGet() && (data->blaster_state != FLASHY_BLASTER_
      +                          SHOOTING_STATE)) {
 23371  0FD6  3198  2000  3188   	fcall	_nullifyBadge_irGet
 23372  0FD9  3A00               	xorlw	0
 23373  0FDA  1903               	skipnz
 23374  0FDB  0008               	return
 23375  0FDC  0020               	movlb	0	; select bank0
 23376  0FDD  085E               	movf	flashy_Main@data,w
 23377  0FDE  0086               	movwf	6
 23378  0FDF  085F               	movf	flashy_Main@data+1,w
 23379  0FE0  0087               	movwf	7
 23380  0FE1  3149               	addfsr 1,9
 23381  0FE2  0801               	movf	1,w
 23382  0FE3  1903               	btfsc	3,2
 23383  0FE4  0008               	return
 23384                           
 23385                           ;flashy_task.c: 506: data->displayTickCount = 0;
 23386  0FE5  085E               	movf	flashy_Main@data,w
 23387  0FE6  0086               	movwf	6
 23388  0FE7  085F               	movf	flashy_Main@data+1,w
 23389  0FE8  0087               	movwf	7
 23390  0FE9  3144               	addfsr 1,4
 23391  0FEA  3000               	movlw	0
 23392  0FEB  3FC0               	movwi [0]fsr1
 23393  0FEC  3FC1               	movwi [1]fsr1
 23394                           
 23395                           ;flashy_task.c: 507: deaths += 1;
 23396  0FED  3001               	movlw	1
 23397  0FEE  0021               	movlb	1	; select bank1
 23398  0FEF  07AA               	addwf	_deaths^(0+128),f
 23399  0FF0  3000               	movlw	0
 23400  0FF1  3DAB               	addwfc	(_deaths+1)^(0+128),f
 23401                           
 23402                           ;flashy_task.c: 508: data->display_state = FLASHY_STATE_DISPLAY_SHOT;
 23403  0FF2  0020               	movlb	0	; select bank0
 23404  0FF3  085E               	movf	flashy_Main@data,w
 23405  0FF4  3E06               	addlw	6
 23406  0FF5  00D4               	movwf	??_flashy_Main
 23407  0FF6  3000               	movlw	0
 23408  0FF7  3D5F               	addwfc	flashy_Main@data+1,w
 23409  0FF8  00D5               	movwf	??_flashy_Main+1
 23410  0FF9  0854               	movf	??_flashy_Main,w
 23411  0FFA  0086               	movwf	6
 23412  0FFB  0855               	movf	??_flashy_Main+1,w
 23413  0FFC  0087               	movwf	7
 23414  0FFD  3003               	movlw	3
 23415  0FFE  0081               	movwf	1
 23416  0FFF  0008               	return
 23417  1000                     __end_of_flashy_Main:	
 23418                           
 23419                           	psect	swtext1
 23420  3000                     __pswtext1:	
 23421  3000                     S10829:	
 23422  3000  3188  28D5         	ljmp	l9137
 23423  3002  3188  28FA         	ljmp	l9147
 23424  3004  3189  291E         	ljmp	l9157
 23425  3006  3189  2936         	ljmp	l9165
 23426  3008  3189  296D         	ljmp	l9183
 23427  300A  3189  2992         	ljmp	l9193
 23428                           
 23429                           	psect	text19
 23430  00EA                     __ptext19:	
 23431 ;; *************** function _slot_Main *****************
 23432 ;; Defined at:
 23433 ;;		line 96 in file "slot_task.c"
 23434 ;; Parameters:    Size  Location     Type
 23435 ;;  taskData        2   50[BANK0 ] PTR void 
 23436 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 23437 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 23438 ;; Auto vars:     Size  Location     Type
 23439 ;;  data            2   69[BANK0 ] PTR struct t_slot_taskDa
 23440 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 23441 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 23442 ;;  buttonPresse    1   68[BANK0 ] unsigned char 
 23443 ;; Return value:  Size  Location     Type
 23444 ;;                  1    wreg      void 
 23445 ;; Registers used:
 23446 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23447 ;; Tracked objects:
 23448 ;;		On entry : 0/0
 23449 ;;		On exit  : 0/0
 23450 ;;		Unchanged: 0/0
 23451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23452 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23453 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23454 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23455 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23456 ;;Total ram usage:       21 bytes
 23457 ;; Hardware stack levels used:    1
 23458 ;; Hardware stack levels required when called:   11
 23459 ;; This function calls:
 23460 ;;		___lwmod
 23461 ;;		_marquee
 23462 ;;		_marquee_speedy
 23463 ;;		_memset
 23464 ;;		_nullifyBadge_buttonsGet
 23465 ;;		_rand
 23466 ;;		_slot_Finished_Animation
 23467 ;;		_slot_Running_Animation
 23468 ;;		_slot_Setup
 23469 ;;		_sprintf
 23470 ;;		_strlen
 23471 ;; This function is called by:
 23472 ;;		_main
 23473 ;;		_scheduler_TaskRun
 23474 ;; This function uses a non-reentrant model
 23475 ;;
 23476                           
 23477                           
 23478                           ;psect for function _slot_Main
 23479  00EA                     _slot_Main:	
 23480                           
 23481                           ;slot_task.c: 97: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 23482                           
 23483                           ;incstack = 0
 23484                           ; Regs used in _slot_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23485  00EA  0020               	movlb	0	; select bank0
 23486  00EB  0853               	movf	slot_Main@taskData+1,w
 23487  00EC  00E6               	movwf	slot_Main@data+1
 23488  00ED  0852               	movf	slot_Main@taskData,w
 23489  00EE  00E5               	movwf	slot_Main@data
 23490                           
 23491                           ;slot_task.c: 98: u8 buttonPressed;
 23492                           ;slot_task.c: 101: if ( currentTask != SLOT_TASK ){
 23493  00EF  0021               	movlb	1	; select bank1
 23494  00F0  033A               	decf	_currentTask^(0+128),w
 23495  00F1  043B               	iorwf	(_currentTask+1)^(0+128),w
 23496  00F2  1903               	btfsc	3,2
 23497  00F3  2923               	goto	l9779
 23498                           
 23499                           ;slot_task.c: 102: buttonPressed = nullifyBadge_buttonsGet();
 23500  00F4  31B6  264B  3180   	fcall	_nullifyBadge_buttonsGet
 23501  00F7  0020               	movlb	0	; select bank0
 23502  00F8  00D4               	movwf	??_slot_Main
 23503  00F9  0854               	movf	??_slot_Main,w
 23504  00FA  00E4               	movwf	slot_Main@buttonPressed
 23505                           
 23506                           ;slot_task.c: 106: data->holdCountA = 1;
 23507                           
 23508                           ;slot_task.c: 104: default:
 23509                           
 23510                           ;slot_task.c: 103: switch (buttonPressed) {
 23511  00FB  0865               	movf	slot_Main@data,w
 23512  00FC  0086               	movwf	6
 23513  00FD  0866               	movf	slot_Main@data+1,w
 23514  00FE  0087               	movwf	7
 23515  00FF  315F               	addfsr 1,31
 23516  0100  3001               	movlw	1
 23517  0101  3FC0               	movwi [0]fsr1
 23518  0102  3000               	movlw	0
 23519  0103  3FC1               	movwi [1]fsr1
 23520                           
 23521                           ;slot_task.c: 107: data->holdCountB = 1;
 23522  0104  0865               	movf	slot_Main@data,w
 23523  0105  3E21               	addlw	33
 23524  0106  0086               	movwf	6
 23525  0107  3000               	movlw	0
 23526  0108  3D66               	addwfc	slot_Main@data+1,w
 23527  0109  0087               	movwf	7
 23528  010A  3001               	movlw	1
 23529  010B  3FC0               	movwi [0]fsr1
 23530  010C  3000               	movlw	0
 23531  010D  3FC1               	movwi [1]fsr1
 23532                           
 23533                           ;slot_task.c: 108: data->holdCountX = 1;
 23534  010E  0865               	movf	slot_Main@data,w
 23535  010F  3E23               	addlw	35
 23536  0110  0086               	movwf	6
 23537  0111  3000               	movlw	0
 23538  0112  3D66               	addwfc	slot_Main@data+1,w
 23539  0113  0087               	movwf	7
 23540  0114  3001               	movlw	1
 23541  0115  3FC0               	movwi [0]fsr1
 23542  0116  3000               	movlw	0
 23543  0117  3FC1               	movwi [1]fsr1
 23544                           
 23545                           ;slot_task.c: 109: data->holdCountY = 1;
 23546  0118  0865               	movf	slot_Main@data,w
 23547  0119  3E25               	addlw	37
 23548  011A  0086               	movwf	6
 23549  011B  3000               	movlw	0
 23550  011C  3D66               	addwfc	slot_Main@data+1,w
 23551  011D  0087               	movwf	7
 23552  011E  3001               	movlw	1
 23553  011F  3FC0               	movwi [0]fsr1
 23554  0120  3000               	movlw	0
 23555  0121  3FC1               	movwi [1]fsr1
 23556                           
 23557                           ;slot_task.c: 111: }
 23558                           
 23559                           ;slot_task.c: 110: break;
 23560  0122  0008               	return
 23561  0123                     l9779:	
 23562                           ;slot_task.c: 112: return;
 23563                           
 23564                           
 23565                           ;slot_task.c: 113: }
 23566                           ;slot_task.c: 115: buttonPressed = nullifyBadge_buttonsGet();
 23567  0123  31B6  264B  3180   	fcall	_nullifyBadge_buttonsGet
 23568  0126  0020               	movlb	0	; select bank0
 23569  0127  00D4               	movwf	??_slot_Main
 23570  0128  0854               	movf	??_slot_Main,w
 23571  0129  00E4               	movwf	slot_Main@buttonPressed
 23572                           
 23573                           ;slot_task.c: 119: memset(data->slot_print_buf, 0x00, 20);
 23574                           
 23575                           ;slot_task.c: 117: default:
 23576                           
 23577                           ;slot_task.c: 116: switch (buttonPressed) {
 23578  012A  0865               	movf	slot_Main@data,w
 23579  012B  3E0B               	addlw	11
 23580  012C  00F1               	movwf	memset@p1
 23581  012D  3000               	movlw	0
 23582  012E  3D66               	addwfc	slot_Main@data+1,w
 23583  012F  00F2               	movwf	memset@p1+1
 23584  0130  3000               	movlw	0
 23585  0131  00F3               	movwf	memset@c
 23586  0132  00F4               	movwf	memset@c+1
 23587  0133  3014               	movlw	20
 23588  0134  00F5               	movwf	memset@n
 23589  0135  3000               	movlw	0
 23590  0136  00F6               	movwf	memset@n+1
 23591  0137  31B4  241B  3180   	fcall	_memset
 23592                           
 23593                           ;slot_task.c: 122: if (data->displayTickCount < 100) {
 23594  013A  0020               	movlb	0	; select bank0
 23595  013B  0865               	movf	slot_Main@data,w
 23596  013C  0086               	movwf	6
 23597  013D  0866               	movf	slot_Main@data+1,w
 23598  013E  0087               	movwf	7
 23599  013F  3143               	addfsr 1,3
 23600  0140  3F40               	moviw [0]fsr1
 23601  0141  00D4               	movwf	??_slot_Main
 23602  0142  3F41               	moviw [1]fsr1
 23603  0143  00D5               	movwf	??_slot_Main+1
 23604  0144  3000               	movlw	0
 23605  0145  0255               	subwf	??_slot_Main+1,w
 23606  0146  3064               	movlw	100
 23607  0147  1903               	skipnz
 23608  0148  0254               	subwf	??_slot_Main,w
 23609  0149  1803               	skipnc
 23610  014A  2A56               	goto	l9799
 23611                           
 23612                           ;slot_task.c: 123: slot_Running_Animation(data);
 23613  014B  0866               	movf	slot_Main@data+1,w
 23614  014C  00B3               	movwf	slot_Running_Animation@taskData+1
 23615  014D  0865               	movf	slot_Main@data,w
 23616  014E  00B2               	movwf	slot_Running_Animation@taskData
 23617  014F  31A9  21AD  3180   	fcall	_slot_Running_Animation
 23618                           
 23619                           ;slot_task.c: 124: data->slot_wheel_index[0] = (u8)rand() % strlen(Slot_Wheel);
 23620  0152  3032               	movlw	low _Slot_Wheel
 23621  0153  00F1               	movwf	strlen@s
 23622  0154  3003               	movlw	high _Slot_Wheel
 23623  0155  00F2               	movwf	strlen@s+1
 23624  0156  31B4  24D8  3180   	fcall	_strlen
 23625  0159  0872               	movf	?_strlen+1,w
 23626  015A  0020               	movlb	0	; select bank0
 23627  015B  00AC               	movwf	___lwmod@divisor+1
 23628  015C  0871               	movf	?_strlen,w
 23629  015D  00AB               	movwf	___lwmod@divisor
 23630  015E  31A9  216A  3180   	fcall	_rand
 23631  0161  0020               	movlb	0	; select bank0
 23632  0162  0824               	movf	?_rand,w
 23633  0163  00D4               	movwf	??_slot_Main
 23634  0164  01D5               	clrf	??_slot_Main+1
 23635  0165  0854               	movf	??_slot_Main,w
 23636  0166  00AD               	movwf	___lwmod@dividend
 23637  0167  0855               	movf	??_slot_Main+1,w
 23638  0168  00AE               	movwf	___lwmod@dividend+1
 23639  0169  31B5  25EF  3180   	fcall	___lwmod
 23640  016C  0020               	movlb	0	; select bank0
 23641  016D  082B               	movf	?___lwmod,w
 23642  016E  00D6               	movwf	??_slot_Main+2
 23643  016F  0865               	movf	slot_Main@data,w
 23644  0170  3E07               	addlw	7
 23645  0171  00D7               	movwf	??_slot_Main+3
 23646  0172  3000               	movlw	0
 23647  0173  3D66               	addwfc	slot_Main@data+1,w
 23648  0174  00D8               	movwf	??_slot_Main+4
 23649  0175  0857               	movf	??_slot_Main+3,w
 23650  0176  0086               	movwf	6
 23651  0177  0858               	movf	??_slot_Main+4,w
 23652  0178  0087               	movwf	7
 23653  0179  0856               	movf	??_slot_Main+2,w
 23654  017A  0081               	movwf	1
 23655                           
 23656                           ;slot_task.c: 125: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 23657  017B  3032               	movlw	low _Slot_Wheel
 23658  017C  00F1               	movwf	strlen@s
 23659  017D  3003               	movlw	high _Slot_Wheel
 23660  017E  00F2               	movwf	strlen@s+1
 23661  017F  31B4  24D8  3180   	fcall	_strlen
 23662  0182  0872               	movf	?_strlen+1,w
 23663  0183  0020               	movlb	0	; select bank0
 23664  0184  00AC               	movwf	___lwmod@divisor+1
 23665  0185  0871               	movf	?_strlen,w
 23666  0186  00AB               	movwf	___lwmod@divisor
 23667  0187  31A9  216A  3180   	fcall	_rand
 23668  018A  0020               	movlb	0	; select bank0
 23669  018B  0824               	movf	?_rand,w
 23670  018C  00D4               	movwf	??_slot_Main
 23671  018D  01D5               	clrf	??_slot_Main+1
 23672  018E  0854               	movf	??_slot_Main,w
 23673  018F  00AD               	movwf	___lwmod@dividend
 23674  0190  0855               	movf	??_slot_Main+1,w
 23675  0191  00AE               	movwf	___lwmod@dividend+1
 23676  0192  31B5  25EF  3180   	fcall	___lwmod
 23677  0195  0020               	movlb	0	; select bank0
 23678  0196  082B               	movf	?___lwmod,w
 23679  0197  00D6               	movwf	??_slot_Main+2
 23680  0198  0865               	movf	slot_Main@data,w
 23681  0199  3E08               	addlw	8
 23682  019A  00D7               	movwf	??_slot_Main+3
 23683  019B  3000               	movlw	0
 23684  019C  3D66               	addwfc	slot_Main@data+1,w
 23685  019D  00D8               	movwf	??_slot_Main+4
 23686  019E  0857               	movf	??_slot_Main+3,w
 23687  019F  0086               	movwf	6
 23688  01A0  0858               	movf	??_slot_Main+4,w
 23689  01A1  0087               	movwf	7
 23690  01A2  0856               	movf	??_slot_Main+2,w
 23691  01A3  0081               	movwf	1
 23692                           
 23693                           ;slot_task.c: 126: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 23694  01A4  3032               	movlw	low _Slot_Wheel
 23695  01A5  00F1               	movwf	strlen@s
 23696  01A6  3003               	movlw	high _Slot_Wheel
 23697  01A7  00F2               	movwf	strlen@s+1
 23698  01A8  31B4  24D8  3180   	fcall	_strlen
 23699  01AB  0872               	movf	?_strlen+1,w
 23700  01AC  0020               	movlb	0	; select bank0
 23701  01AD  00AC               	movwf	___lwmod@divisor+1
 23702  01AE  0871               	movf	?_strlen,w
 23703  01AF  00AB               	movwf	___lwmod@divisor
 23704  01B0  31A9  216A  3180   	fcall	_rand
 23705  01B3  0020               	movlb	0	; select bank0
 23706  01B4  0824               	movf	?_rand,w
 23707  01B5  00D4               	movwf	??_slot_Main
 23708  01B6  01D5               	clrf	??_slot_Main+1
 23709  01B7  0854               	movf	??_slot_Main,w
 23710  01B8  00AD               	movwf	___lwmod@dividend
 23711  01B9  0855               	movf	??_slot_Main+1,w
 23712  01BA  00AE               	movwf	___lwmod@dividend+1
 23713  01BB  31B5  25EF  3180   	fcall	___lwmod
 23714  01BE  0020               	movlb	0	; select bank0
 23715  01BF  082B               	movf	?___lwmod,w
 23716  01C0  00D6               	movwf	??_slot_Main+2
 23717  01C1  0865               	movf	slot_Main@data,w
 23718  01C2  3E09               	addlw	9
 23719  01C3  00D7               	movwf	??_slot_Main+3
 23720  01C4  3000               	movlw	0
 23721  01C5  3D66               	addwfc	slot_Main@data+1,w
 23722  01C6  00D8               	movwf	??_slot_Main+4
 23723  01C7  0857               	movf	??_slot_Main+3,w
 23724  01C8  0086               	movwf	6
 23725  01C9  0858               	movf	??_slot_Main+4,w
 23726  01CA  0087               	movwf	7
 23727  01CB  0856               	movf	??_slot_Main+2,w
 23728  01CC  0081               	movwf	1
 23729                           
 23730                           ;slot_task.c: 127: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23731  01CD  3032               	movlw	low _Slot_Wheel
 23732  01CE  00F1               	movwf	strlen@s
 23733  01CF  3003               	movlw	high _Slot_Wheel
 23734  01D0  00F2               	movwf	strlen@s+1
 23735  01D1  31B4  24D8  3180   	fcall	_strlen
 23736  01D4  0872               	movf	?_strlen+1,w
 23737  01D5  0020               	movlb	0	; select bank0
 23738  01D6  00AC               	movwf	___lwmod@divisor+1
 23739  01D7  0871               	movf	?_strlen,w
 23740  01D8  00AB               	movwf	___lwmod@divisor
 23741  01D9  31A9  216A  3180   	fcall	_rand
 23742  01DC  0020               	movlb	0	; select bank0
 23743  01DD  0824               	movf	?_rand,w
 23744  01DE  00D4               	movwf	??_slot_Main
 23745  01DF  01D5               	clrf	??_slot_Main+1
 23746  01E0  0854               	movf	??_slot_Main,w
 23747  01E1  00AD               	movwf	___lwmod@dividend
 23748  01E2  0855               	movf	??_slot_Main+1,w
 23749  01E3  00AE               	movwf	___lwmod@dividend+1
 23750  01E4  31B5  25EF  3180   	fcall	___lwmod
 23751  01E7  0020               	movlb	0	; select bank0
 23752  01E8  082B               	movf	?___lwmod,w
 23753  01E9  00D6               	movwf	??_slot_Main+2
 23754  01EA  0865               	movf	slot_Main@data,w
 23755  01EB  3E0A               	addlw	10
 23756  01EC  00D7               	movwf	??_slot_Main+3
 23757  01ED  3000               	movlw	0
 23758  01EE  3D66               	addwfc	slot_Main@data+1,w
 23759  01EF  00D8               	movwf	??_slot_Main+4
 23760  01F0  0857               	movf	??_slot_Main+3,w
 23761  01F1  0086               	movwf	6
 23762  01F2  0858               	movf	??_slot_Main+4,w
 23763  01F3  0087               	movwf	7
 23764  01F4  0856               	movf	??_slot_Main+2,w
 23765  01F5  0081               	movwf	1
 23766                           
 23767                           ;slot_task.c: 128: sprintf(data->slot_print_buf, "%c%c%c%c", Slot_Wheel[data->slot_wheel
      +                          _index[0]], Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]]
      +                          , Slot_Wheel[data->slot_wheel_index[3]]);
 23768  01F6  0865               	movf	slot_Main@data,w
 23769  01F7  3E0B               	addlw	11
 23770  01F8  00AF               	movwf	sprintf@sp
 23771  01F9  3000               	movlw	0
 23772  01FA  3D66               	addwfc	slot_Main@data+1,w
 23773  01FB  00B0               	movwf	sprintf@sp+1
 23774  01FC  301C               	movlw	low (STR_64| (0+32768))
 23775  01FD  00B1               	movwf	sprintf@f
 23776  01FE  30BB               	movlw	high (STR_64| (0+32768))
 23777  01FF  00B2               	movwf	sprintf@f+1
 23778  0200  0865               	movf	slot_Main@data,w
 23779  0201  0086               	movwf	6
 23780  0202  0866               	movf	slot_Main@data+1,w
 23781  0203  0087               	movwf	7
 23782  0204  3147               	addfsr 1,7
 23783  0205  0801               	movf	1,w
 23784  0206  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23785  0207  0086               	movwf	6
 23786  0208  3003               	movlw	3	; select bank6/7
 23787  0209  0087               	movwf	7
 23788  020A  0801               	movf	1,w
 23789  020B  00D4               	movwf	??_slot_Main
 23790  020C  01D5               	clrf	??_slot_Main+1
 23791  020D  0854               	movf	??_slot_Main,w
 23792  020E  00B3               	movwf	?_sprintf+4
 23793  020F  0855               	movf	??_slot_Main+1,w
 23794  0210  00B4               	movwf	?_sprintf+5
 23795  0211  0865               	movf	slot_Main@data,w
 23796  0212  0086               	movwf	6
 23797  0213  0866               	movf	slot_Main@data+1,w
 23798  0214  0087               	movwf	7
 23799  0215  3148               	addfsr 1,8
 23800  0216  0801               	movf	1,w
 23801  0217  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23802  0218  0086               	movwf	6
 23803  0219  3003               	movlw	3	; select bank6/7
 23804  021A  0087               	movwf	7
 23805  021B  0801               	movf	1,w
 23806  021C  00D6               	movwf	??_slot_Main+2
 23807  021D  01D7               	clrf	??_slot_Main+3
 23808  021E  0856               	movf	??_slot_Main+2,w
 23809  021F  00B5               	movwf	?_sprintf+6
 23810  0220  0857               	movf	??_slot_Main+3,w
 23811  0221  00B6               	movwf	?_sprintf+7
 23812  0222  0865               	movf	slot_Main@data,w
 23813  0223  0086               	movwf	6
 23814  0224  0866               	movf	slot_Main@data+1,w
 23815  0225  0087               	movwf	7
 23816  0226  3149               	addfsr 1,9
 23817  0227  0801               	movf	1,w
 23818  0228  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23819  0229  0086               	movwf	6
 23820  022A  3003               	movlw	3	; select bank6/7
 23821  022B  0087               	movwf	7
 23822  022C  0801               	movf	1,w
 23823  022D  00D8               	movwf	??_slot_Main+4
 23824  022E  01D9               	clrf	??_slot_Main+5
 23825  022F  0858               	movf	??_slot_Main+4,w
 23826  0230  00B7               	movwf	?_sprintf+8
 23827  0231  0859               	movf	??_slot_Main+5,w
 23828  0232  00B8               	movwf	?_sprintf+9
 23829  0233  0865               	movf	slot_Main@data,w
 23830  0234  0086               	movwf	6
 23831  0235  0866               	movf	slot_Main@data+1,w
 23832  0236  0087               	movwf	7
 23833  0237  314A               	addfsr 1,10
 23834  0238  0801               	movf	1,w
 23835  0239  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23836  023A  0086               	movwf	6
 23837  023B  3003               	movlw	3	; select bank6/7
 23838  023C  0087               	movwf	7
 23839  023D  0801               	movf	1,w
 23840  023E  00DA               	movwf	??_slot_Main+6
 23841  023F  01DB               	clrf	??_slot_Main+7
 23842  0240  085A               	movf	??_slot_Main+6,w
 23843  0241  00B9               	movwf	?_sprintf+10
 23844  0242  085B               	movf	??_slot_Main+7,w
 23845  0243  00BA               	movwf	?_sprintf+11
 23846  0244  3199  21C2  3180   	fcall	_sprintf
 23847                           
 23848                           ;slot_task.c: 129: marquee(data->slot_print_buf, 1);}
 23849  0247  0020               	movlb	0	; select bank0
 23850  0248  0865               	movf	slot_Main@data,w
 23851  0249  3E0B               	addlw	11
 23852  024A  00BA               	movwf	marquee@string
 23853  024B  3000               	movlw	0
 23854  024C  3D66               	addwfc	slot_Main@data+1,w
 23855  024D  00BB               	movwf	marquee@string+1
 23856  024E  3001               	movlw	1
 23857  024F  00BC               	movwf	marquee@count
 23858  0250  3000               	movlw	0
 23859  0251  00BD               	movwf	marquee@count+1
 23860  0252  31A2  22D2  3180   	fcall	_marquee
 23861  0255  2E2C               	goto	l9863
 23862  0256                     l9799:	
 23863                           
 23864                           ;slot_task.c: 130: else if (data->displayTickCount < 200) {
 23865  0256  0020               	movlb	0	; select bank0
 23866  0257  0865               	movf	slot_Main@data,w
 23867  0258  0086               	movwf	6
 23868  0259  0866               	movf	slot_Main@data+1,w
 23869  025A  0087               	movwf	7
 23870  025B  3143               	addfsr 1,3
 23871  025C  3F40               	moviw [0]fsr1
 23872  025D  00D4               	movwf	??_slot_Main
 23873  025E  3F41               	moviw [1]fsr1
 23874  025F  00D5               	movwf	??_slot_Main+1
 23875  0260  3000               	movlw	0
 23876  0261  0255               	subwf	??_slot_Main+1,w
 23877  0262  30C8               	movlw	200
 23878  0263  1903               	skipnz
 23879  0264  0254               	subwf	??_slot_Main,w
 23880  0265  1803               	skipnc
 23881  0266  2B4C               	goto	l9813
 23882                           
 23883                           ;slot_task.c: 131: slot_Running_Animation(data);
 23884  0267  0866               	movf	slot_Main@data+1,w
 23885  0268  00B3               	movwf	slot_Running_Animation@taskData+1
 23886  0269  0865               	movf	slot_Main@data,w
 23887  026A  00B2               	movwf	slot_Running_Animation@taskData
 23888  026B  31A9  21AD  3180   	fcall	_slot_Running_Animation
 23889                           
 23890                           ;slot_task.c: 132: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 23891  026E  3032               	movlw	low _Slot_Wheel
 23892  026F  00F1               	movwf	strlen@s
 23893  0270  3003               	movlw	high _Slot_Wheel
 23894  0271  00F2               	movwf	strlen@s+1
 23895  0272  31B4  24D8  3180   	fcall	_strlen
 23896  0275  0872               	movf	?_strlen+1,w
 23897  0276  0020               	movlb	0	; select bank0
 23898  0277  00AC               	movwf	___lwmod@divisor+1
 23899  0278  0871               	movf	?_strlen,w
 23900  0279  00AB               	movwf	___lwmod@divisor
 23901  027A  31A9  216A  3180   	fcall	_rand
 23902  027D  0020               	movlb	0	; select bank0
 23903  027E  0824               	movf	?_rand,w
 23904  027F  00D4               	movwf	??_slot_Main
 23905  0280  01D5               	clrf	??_slot_Main+1
 23906  0281  0854               	movf	??_slot_Main,w
 23907  0282  00AD               	movwf	___lwmod@dividend
 23908  0283  0855               	movf	??_slot_Main+1,w
 23909  0284  00AE               	movwf	___lwmod@dividend+1
 23910  0285  31B5  25EF  3180   	fcall	___lwmod
 23911  0288  0020               	movlb	0	; select bank0
 23912  0289  082B               	movf	?___lwmod,w
 23913  028A  00D6               	movwf	??_slot_Main+2
 23914  028B  0865               	movf	slot_Main@data,w
 23915  028C  3E08               	addlw	8
 23916  028D  00D7               	movwf	??_slot_Main+3
 23917  028E  3000               	movlw	0
 23918  028F  3D66               	addwfc	slot_Main@data+1,w
 23919  0290  00D8               	movwf	??_slot_Main+4
 23920  0291  0857               	movf	??_slot_Main+3,w
 23921  0292  0086               	movwf	6
 23922  0293  0858               	movf	??_slot_Main+4,w
 23923  0294  0087               	movwf	7
 23924  0295  0856               	movf	??_slot_Main+2,w
 23925  0296  0081               	movwf	1
 23926                           
 23927                           ;slot_task.c: 133: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 23928  0297  3032               	movlw	low _Slot_Wheel
 23929  0298  00F1               	movwf	strlen@s
 23930  0299  3003               	movlw	high _Slot_Wheel
 23931  029A  00F2               	movwf	strlen@s+1
 23932  029B  31B4  24D8  3180   	fcall	_strlen
 23933  029E  0872               	movf	?_strlen+1,w
 23934  029F  0020               	movlb	0	; select bank0
 23935  02A0  00AC               	movwf	___lwmod@divisor+1
 23936  02A1  0871               	movf	?_strlen,w
 23937  02A2  00AB               	movwf	___lwmod@divisor
 23938  02A3  31A9  216A  3180   	fcall	_rand
 23939  02A6  0020               	movlb	0	; select bank0
 23940  02A7  0824               	movf	?_rand,w
 23941  02A8  00D4               	movwf	??_slot_Main
 23942  02A9  01D5               	clrf	??_slot_Main+1
 23943  02AA  0854               	movf	??_slot_Main,w
 23944  02AB  00AD               	movwf	___lwmod@dividend
 23945  02AC  0855               	movf	??_slot_Main+1,w
 23946  02AD  00AE               	movwf	___lwmod@dividend+1
 23947  02AE  31B5  25EF  3180   	fcall	___lwmod
 23948  02B1  0020               	movlb	0	; select bank0
 23949  02B2  082B               	movf	?___lwmod,w
 23950  02B3  00D6               	movwf	??_slot_Main+2
 23951  02B4  0865               	movf	slot_Main@data,w
 23952  02B5  3E09               	addlw	9
 23953  02B6  00D7               	movwf	??_slot_Main+3
 23954  02B7  3000               	movlw	0
 23955  02B8  3D66               	addwfc	slot_Main@data+1,w
 23956  02B9  00D8               	movwf	??_slot_Main+4
 23957  02BA  0857               	movf	??_slot_Main+3,w
 23958  02BB  0086               	movwf	6
 23959  02BC  0858               	movf	??_slot_Main+4,w
 23960  02BD  0087               	movwf	7
 23961  02BE  0856               	movf	??_slot_Main+2,w
 23962  02BF  0081               	movwf	1
 23963                           
 23964                           ;slot_task.c: 134: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23965  02C0  3032               	movlw	low _Slot_Wheel
 23966  02C1  00F1               	movwf	strlen@s
 23967  02C2  3003               	movlw	high _Slot_Wheel
 23968  02C3  00F2               	movwf	strlen@s+1
 23969  02C4  31B4  24D8  3180   	fcall	_strlen
 23970  02C7  0872               	movf	?_strlen+1,w
 23971  02C8  0020               	movlb	0	; select bank0
 23972  02C9  00AC               	movwf	___lwmod@divisor+1
 23973  02CA  0871               	movf	?_strlen,w
 23974  02CB  00AB               	movwf	___lwmod@divisor
 23975  02CC  31A9  216A  3180   	fcall	_rand
 23976  02CF  0020               	movlb	0	; select bank0
 23977  02D0  0824               	movf	?_rand,w
 23978  02D1  00D4               	movwf	??_slot_Main
 23979  02D2  01D5               	clrf	??_slot_Main+1
 23980  02D3  0854               	movf	??_slot_Main,w
 23981  02D4  00AD               	movwf	___lwmod@dividend
 23982  02D5  0855               	movf	??_slot_Main+1,w
 23983  02D6  00AE               	movwf	___lwmod@dividend+1
 23984  02D7  31B5  25EF  3180   	fcall	___lwmod
 23985  02DA  0020               	movlb	0	; select bank0
 23986  02DB  082B               	movf	?___lwmod,w
 23987  02DC  00D6               	movwf	??_slot_Main+2
 23988  02DD  0865               	movf	slot_Main@data,w
 23989  02DE  3E0A               	addlw	10
 23990  02DF  00D7               	movwf	??_slot_Main+3
 23991  02E0  3000               	movlw	0
 23992  02E1  3D66               	addwfc	slot_Main@data+1,w
 23993  02E2  00D8               	movwf	??_slot_Main+4
 23994  02E3  0857               	movf	??_slot_Main+3,w
 23995  02E4  0086               	movwf	6
 23996  02E5  0858               	movf	??_slot_Main+4,w
 23997  02E6  0087               	movwf	7
 23998  02E7  0856               	movf	??_slot_Main+2,w
 23999  02E8  0081               	movwf	1
 24000                           
 24001                           ;slot_task.c: 135: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]], Slot_Whe
      +                          el[data->slot_wheel_index[3]]);
 24002  02E9  0865               	movf	slot_Main@data,w
 24003  02EA  3E0B               	addlw	11
 24004  02EB  00AF               	movwf	sprintf@sp
 24005  02EC  3000               	movlw	0
 24006  02ED  3D66               	addwfc	slot_Main@data+1,w
 24007  02EE  00B0               	movwf	sprintf@sp+1
 24008  02EF  301C               	movlw	low (STR_64| (0+32768))
 24009  02F0  00B1               	movwf	sprintf@f
 24010  02F1  30BB               	movlw	high (STR_64| (0+32768))
 24011  02F2  00B2               	movwf	sprintf@f+1
 24012  02F3  357C               	lslf	_Shot_Index,w
 24013  02F4  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24014  02F5  0086               	movwf	6
 24015  02F6  3001               	movlw	1	; select bank3/4
 24016  02F7  0087               	movwf	7
 24017  02F8  3F40               	moviw [0]fsr1
 24018  02F9  00D4               	movwf	??_slot_Main
 24019  02FA  3F41               	moviw [1]fsr1
 24020  02FB  00D5               	movwf	??_slot_Main+1
 24021  02FC  0854               	movf	??_slot_Main,w
 24022  02FD  0084               	movwf	4
 24023  02FE  0855               	movf	??_slot_Main+1,w
 24024  02FF  0085               	movwf	5
 24025  0300  0800               	movf	0,w	;code access
 24026  0301  00D6               	movwf	??_slot_Main+2
 24027  0302  01D7               	clrf	??_slot_Main+3
 24028  0303  0856               	movf	??_slot_Main+2,w
 24029  0304  00B3               	movwf	?_sprintf+4
 24030  0305  0857               	movf	??_slot_Main+3,w
 24031  0306  00B4               	movwf	?_sprintf+5
 24032  0307  0865               	movf	slot_Main@data,w
 24033  0308  0086               	movwf	6
 24034  0309  0866               	movf	slot_Main@data+1,w
 24035  030A  0087               	movwf	7
 24036  030B  3148               	addfsr 1,8
 24037  030C  0801               	movf	1,w
 24038  030D  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24039  030E  0086               	movwf	6
 24040  030F  3003               	movlw	3	; select bank6/7
 24041  0310  0087               	movwf	7
 24042  0311  0801               	movf	1,w
 24043  0312  00D8               	movwf	??_slot_Main+4
 24044  0313  01D9               	clrf	??_slot_Main+5
 24045  0314  0858               	movf	??_slot_Main+4,w
 24046  0315  00B5               	movwf	?_sprintf+6
 24047  0316  0859               	movf	??_slot_Main+5,w
 24048  0317  00B6               	movwf	?_sprintf+7
 24049  0318  0865               	movf	slot_Main@data,w
 24050  0319  0086               	movwf	6
 24051  031A  0866               	movf	slot_Main@data+1,w
 24052  031B  0087               	movwf	7
 24053  031C  3149               	addfsr 1,9
 24054  031D  0801               	movf	1,w
 24055  031E  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24056  031F  0086               	movwf	6
 24057  0320  3003               	movlw	3	; select bank6/7
 24058  0321  0087               	movwf	7
 24059  0322  0801               	movf	1,w
 24060  0323  00DA               	movwf	??_slot_Main+6
 24061  0324  01DB               	clrf	??_slot_Main+7
 24062  0325  085A               	movf	??_slot_Main+6,w
 24063  0326  00B7               	movwf	?_sprintf+8
 24064  0327  085B               	movf	??_slot_Main+7,w
 24065  0328  00B8               	movwf	?_sprintf+9
 24066  0329  0865               	movf	slot_Main@data,w
 24067  032A  0086               	movwf	6
 24068  032B  0866               	movf	slot_Main@data+1,w
 24069  032C  0087               	movwf	7
 24070  032D  314A               	addfsr 1,10
 24071  032E  0801               	movf	1,w
 24072  032F  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24073  0330  0086               	movwf	6
 24074  0331  3003               	movlw	3	; select bank6/7
 24075  0332  0087               	movwf	7
 24076  0333  0801               	movf	1,w
 24077  0334  00DC               	movwf	??_slot_Main+8
 24078  0335  01DD               	clrf	??_slot_Main+9
 24079  0336  085C               	movf	??_slot_Main+8,w
 24080  0337  00B9               	movwf	?_sprintf+10
 24081  0338  085D               	movf	??_slot_Main+9,w
 24082  0339  00BA               	movwf	?_sprintf+11
 24083  033A  3199  21C2  3180   	fcall	_sprintf
 24084                           
 24085                           ;slot_task.c: 136: marquee(data->slot_print_buf, 1);}
 24086  033D  0020               	movlb	0	; select bank0
 24087  033E  0865               	movf	slot_Main@data,w
 24088  033F  3E0B               	addlw	11
 24089  0340  00BA               	movwf	marquee@string
 24090  0341  3000               	movlw	0
 24091  0342  3D66               	addwfc	slot_Main@data+1,w
 24092  0343  00BB               	movwf	marquee@string+1
 24093  0344  3001               	movlw	1
 24094  0345  00BC               	movwf	marquee@count
 24095  0346  3000               	movlw	0
 24096  0347  00BD               	movwf	marquee@count+1
 24097  0348  31A2  22D2  3180   	fcall	_marquee
 24098  034B  2E2C               	goto	l9863
 24099  034C                     l9813:	
 24100                           
 24101                           ;slot_task.c: 137: else if (data->displayTickCount < 300) {
 24102  034C  0020               	movlb	0	; select bank0
 24103  034D  0865               	movf	slot_Main@data,w
 24104  034E  0086               	movwf	6
 24105  034F  0866               	movf	slot_Main@data+1,w
 24106  0350  0087               	movwf	7
 24107  0351  3143               	addfsr 1,3
 24108  0352  3F40               	moviw [0]fsr1
 24109  0353  00D4               	movwf	??_slot_Main
 24110  0354  3F41               	moviw [1]fsr1
 24111  0355  00D5               	movwf	??_slot_Main+1
 24112  0356  3001               	movlw	1
 24113  0357  0255               	subwf	??_slot_Main+1,w
 24114  0358  302C               	movlw	44
 24115  0359  1903               	skipnz
 24116  035A  0254               	subwf	??_slot_Main,w
 24117  035B  1803               	skipnc
 24118  035C  2C1F               	goto	l9825
 24119                           
 24120                           ;slot_task.c: 138: slot_Running_Animation(data);
 24121  035D  0866               	movf	slot_Main@data+1,w
 24122  035E  00B3               	movwf	slot_Running_Animation@taskData+1
 24123  035F  0865               	movf	slot_Main@data,w
 24124  0360  00B2               	movwf	slot_Running_Animation@taskData
 24125  0361  31A9  21AD  3180   	fcall	_slot_Running_Animation
 24126                           
 24127                           ;slot_task.c: 139: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 24128  0364  3032               	movlw	low _Slot_Wheel
 24129  0365  00F1               	movwf	strlen@s
 24130  0366  3003               	movlw	high _Slot_Wheel
 24131  0367  00F2               	movwf	strlen@s+1
 24132  0368  31B4  24D8  3180   	fcall	_strlen
 24133  036B  0872               	movf	?_strlen+1,w
 24134  036C  0020               	movlb	0	; select bank0
 24135  036D  00AC               	movwf	___lwmod@divisor+1
 24136  036E  0871               	movf	?_strlen,w
 24137  036F  00AB               	movwf	___lwmod@divisor
 24138  0370  31A9  216A  3180   	fcall	_rand
 24139  0373  0020               	movlb	0	; select bank0
 24140  0374  0824               	movf	?_rand,w
 24141  0375  00D4               	movwf	??_slot_Main
 24142  0376  01D5               	clrf	??_slot_Main+1
 24143  0377  0854               	movf	??_slot_Main,w
 24144  0378  00AD               	movwf	___lwmod@dividend
 24145  0379  0855               	movf	??_slot_Main+1,w
 24146  037A  00AE               	movwf	___lwmod@dividend+1
 24147  037B  31B5  25EF  3180   	fcall	___lwmod
 24148  037E  0020               	movlb	0	; select bank0
 24149  037F  082B               	movf	?___lwmod,w
 24150  0380  00D6               	movwf	??_slot_Main+2
 24151  0381  0865               	movf	slot_Main@data,w
 24152  0382  3E09               	addlw	9
 24153  0383  00D7               	movwf	??_slot_Main+3
 24154  0384  3000               	movlw	0
 24155  0385  3D66               	addwfc	slot_Main@data+1,w
 24156  0386  00D8               	movwf	??_slot_Main+4
 24157  0387  0857               	movf	??_slot_Main+3,w
 24158  0388  0086               	movwf	6
 24159  0389  0858               	movf	??_slot_Main+4,w
 24160  038A  0087               	movwf	7
 24161  038B  0856               	movf	??_slot_Main+2,w
 24162  038C  0081               	movwf	1
 24163                           
 24164                           ;slot_task.c: 140: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 24165  038D  3032               	movlw	low _Slot_Wheel
 24166  038E  00F1               	movwf	strlen@s
 24167  038F  3003               	movlw	high _Slot_Wheel
 24168  0390  00F2               	movwf	strlen@s+1
 24169  0391  31B4  24D8  3180   	fcall	_strlen
 24170  0394  0872               	movf	?_strlen+1,w
 24171  0395  0020               	movlb	0	; select bank0
 24172  0396  00AC               	movwf	___lwmod@divisor+1
 24173  0397  0871               	movf	?_strlen,w
 24174  0398  00AB               	movwf	___lwmod@divisor
 24175  0399  31A9  216A  3180   	fcall	_rand
 24176  039C  0020               	movlb	0	; select bank0
 24177  039D  0824               	movf	?_rand,w
 24178  039E  00D4               	movwf	??_slot_Main
 24179  039F  01D5               	clrf	??_slot_Main+1
 24180  03A0  0854               	movf	??_slot_Main,w
 24181  03A1  00AD               	movwf	___lwmod@dividend
 24182  03A2  0855               	movf	??_slot_Main+1,w
 24183  03A3  00AE               	movwf	___lwmod@dividend+1
 24184  03A4  31B5  25EF  3180   	fcall	___lwmod
 24185  03A7  0020               	movlb	0	; select bank0
 24186  03A8  082B               	movf	?___lwmod,w
 24187  03A9  00D6               	movwf	??_slot_Main+2
 24188  03AA  0865               	movf	slot_Main@data,w
 24189  03AB  3E0A               	addlw	10
 24190  03AC  00D7               	movwf	??_slot_Main+3
 24191  03AD  3000               	movlw	0
 24192  03AE  3D66               	addwfc	slot_Main@data+1,w
 24193  03AF  00D8               	movwf	??_slot_Main+4
 24194  03B0  0857               	movf	??_slot_Main+3,w
 24195  03B1  0086               	movwf	6
 24196  03B2  0858               	movf	??_slot_Main+4,w
 24197  03B3  0087               	movwf	7
 24198  03B4  0856               	movf	??_slot_Main+2,w
 24199  03B5  0081               	movwf	1
 24200                           
 24201                           ;slot_task.c: 141: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Slot_Wheel[data->slot_wheel_index[2]], Slot_Wheel[data->s
      +                          lot_wheel_index[3]]);
 24202  03B6  0865               	movf	slot_Main@data,w
 24203  03B7  3E0B               	addlw	11
 24204  03B8  00AF               	movwf	sprintf@sp
 24205  03B9  3000               	movlw	0
 24206  03BA  3D66               	addwfc	slot_Main@data+1,w
 24207  03BB  00B0               	movwf	sprintf@sp+1
 24208  03BC  301C               	movlw	low (STR_64| (0+32768))
 24209  03BD  00B1               	movwf	sprintf@f
 24210  03BE  30BB               	movlw	high (STR_64| (0+32768))
 24211  03BF  00B2               	movwf	sprintf@f+1
 24212  03C0  357C               	lslf	_Shot_Index,w
 24213  03C1  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24214  03C2  0086               	movwf	6
 24215  03C3  3001               	movlw	1	; select bank3/4
 24216  03C4  0087               	movwf	7
 24217  03C5  3F40               	moviw [0]fsr1
 24218  03C6  00D4               	movwf	??_slot_Main
 24219  03C7  3F41               	moviw [1]fsr1
 24220  03C8  00D5               	movwf	??_slot_Main+1
 24221  03C9  0854               	movf	??_slot_Main,w
 24222  03CA  0084               	movwf	4
 24223  03CB  0855               	movf	??_slot_Main+1,w
 24224  03CC  0085               	movwf	5
 24225  03CD  0800               	movf	0,w	;code access
 24226  03CE  00D6               	movwf	??_slot_Main+2
 24227  03CF  01D7               	clrf	??_slot_Main+3
 24228  03D0  0856               	movf	??_slot_Main+2,w
 24229  03D1  00B3               	movwf	?_sprintf+4
 24230  03D2  0857               	movf	??_slot_Main+3,w
 24231  03D3  00B4               	movwf	?_sprintf+5
 24232  03D4  357C               	lslf	_Shot_Index,w
 24233  03D5  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24234  03D6  0086               	movwf	6
 24235  03D7  3001               	movlw	1	; select bank3/4
 24236  03D8  0087               	movwf	7
 24237  03D9  3F40               	moviw [0]fsr1
 24238  03DA  00D8               	movwf	??_slot_Main+4
 24239  03DB  3F41               	moviw [1]fsr1
 24240  03DC  00D9               	movwf	??_slot_Main+5
 24241  03DD  3001               	movlw	1
 24242  03DE  0758               	addwf	??_slot_Main+4,w
 24243  03DF  0084               	movwf	4
 24244  03E0  0859               	movf	??_slot_Main+5,w
 24245  03E1  1803               	skipnc
 24246  03E2  0A59               	incf	??_slot_Main+5,w
 24247  03E3  0085               	movwf	5
 24248  03E4  0800               	movf	0,w	;code access
 24249  03E5  00DA               	movwf	??_slot_Main+6
 24250  03E6  01DB               	clrf	??_slot_Main+7
 24251  03E7  085A               	movf	??_slot_Main+6,w
 24252  03E8  00B5               	movwf	?_sprintf+6
 24253  03E9  085B               	movf	??_slot_Main+7,w
 24254  03EA  00B6               	movwf	?_sprintf+7
 24255  03EB  0865               	movf	slot_Main@data,w
 24256  03EC  0086               	movwf	6
 24257  03ED  0866               	movf	slot_Main@data+1,w
 24258  03EE  0087               	movwf	7
 24259  03EF  3149               	addfsr 1,9
 24260  03F0  0801               	movf	1,w
 24261  03F1  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24262  03F2  0086               	movwf	6
 24263  03F3  3003               	movlw	3	; select bank6/7
 24264  03F4  0087               	movwf	7
 24265  03F5  0801               	movf	1,w
 24266  03F6  00DC               	movwf	??_slot_Main+8
 24267  03F7  01DD               	clrf	??_slot_Main+9
 24268  03F8  085C               	movf	??_slot_Main+8,w
 24269  03F9  00B7               	movwf	?_sprintf+8
 24270  03FA  085D               	movf	??_slot_Main+9,w
 24271  03FB  00B8               	movwf	?_sprintf+9
 24272  03FC  0865               	movf	slot_Main@data,w
 24273  03FD  0086               	movwf	6
 24274  03FE  0866               	movf	slot_Main@data+1,w
 24275  03FF  0087               	movwf	7
 24276  0400  314A               	addfsr 1,10
 24277  0401  0801               	movf	1,w
 24278  0402  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24279  0403  0086               	movwf	6
 24280  0404  3003               	movlw	3	; select bank6/7
 24281  0405  0087               	movwf	7
 24282  0406  0801               	movf	1,w
 24283  0407  00DE               	movwf	??_slot_Main+10
 24284  0408  01DF               	clrf	??_slot_Main+11
 24285  0409  085E               	movf	??_slot_Main+10,w
 24286  040A  00B9               	movwf	?_sprintf+10
 24287  040B  085F               	movf	??_slot_Main+11,w
 24288  040C  00BA               	movwf	?_sprintf+11
 24289  040D  3199  21C2  3180   	fcall	_sprintf
 24290                           
 24291                           ;slot_task.c: 142: marquee(data->slot_print_buf, 1);}
 24292  0410  0020               	movlb	0	; select bank0
 24293  0411  0865               	movf	slot_Main@data,w
 24294  0412  3E0B               	addlw	11
 24295  0413  00BA               	movwf	marquee@string
 24296  0414  3000               	movlw	0
 24297  0415  3D66               	addwfc	slot_Main@data+1,w
 24298  0416  00BB               	movwf	marquee@string+1
 24299  0417  3001               	movlw	1
 24300  0418  00BC               	movwf	marquee@count
 24301  0419  3000               	movlw	0
 24302  041A  00BD               	movwf	marquee@count+1
 24303  041B  31A2  22D2  3180   	fcall	_marquee
 24304  041E  2E2C               	goto	l9863
 24305  041F                     l9825:	
 24306                           
 24307                           ;slot_task.c: 143: else if (data->displayTickCount < 400) {
 24308  041F  0020               	movlb	0	; select bank0
 24309  0420  0865               	movf	slot_Main@data,w
 24310  0421  0086               	movwf	6
 24311  0422  0866               	movf	slot_Main@data+1,w
 24312  0423  0087               	movwf	7
 24313  0424  3143               	addfsr 1,3
 24314  0425  3F40               	moviw [0]fsr1
 24315  0426  00D4               	movwf	??_slot_Main
 24316  0427  3F41               	moviw [1]fsr1
 24317  0428  00D5               	movwf	??_slot_Main+1
 24318  0429  3001               	movlw	1
 24319  042A  0255               	subwf	??_slot_Main+1,w
 24320  042B  3090               	movlw	144
 24321  042C  1903               	skipnz
 24322  042D  0254               	subwf	??_slot_Main,w
 24323  042E  1803               	skipnc
 24324  042F  2CCF               	goto	l9835
 24325                           
 24326                           ;slot_task.c: 144: slot_Running_Animation(data);
 24327  0430  0866               	movf	slot_Main@data+1,w
 24328  0431  00B3               	movwf	slot_Running_Animation@taskData+1
 24329  0432  0865               	movf	slot_Main@data,w
 24330  0433  00B2               	movwf	slot_Running_Animation@taskData
 24331  0434  31A9  21AD  3180   	fcall	_slot_Running_Animation
 24332                           
 24333                           ;slot_task.c: 145: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 24334  0437  3032               	movlw	low _Slot_Wheel
 24335  0438  00F1               	movwf	strlen@s
 24336  0439  3003               	movlw	high _Slot_Wheel
 24337  043A  00F2               	movwf	strlen@s+1
 24338  043B  31B4  24D8  3180   	fcall	_strlen
 24339  043E  0872               	movf	?_strlen+1,w
 24340  043F  0020               	movlb	0	; select bank0
 24341  0440  00AC               	movwf	___lwmod@divisor+1
 24342  0441  0871               	movf	?_strlen,w
 24343  0442  00AB               	movwf	___lwmod@divisor
 24344  0443  31A9  216A  3180   	fcall	_rand
 24345  0446  0020               	movlb	0	; select bank0
 24346  0447  0824               	movf	?_rand,w
 24347  0448  00D4               	movwf	??_slot_Main
 24348  0449  01D5               	clrf	??_slot_Main+1
 24349  044A  0854               	movf	??_slot_Main,w
 24350  044B  00AD               	movwf	___lwmod@dividend
 24351  044C  0855               	movf	??_slot_Main+1,w
 24352  044D  00AE               	movwf	___lwmod@dividend+1
 24353  044E  31B5  25EF  3180   	fcall	___lwmod
 24354  0451  0020               	movlb	0	; select bank0
 24355  0452  082B               	movf	?___lwmod,w
 24356  0453  00D6               	movwf	??_slot_Main+2
 24357  0454  0865               	movf	slot_Main@data,w
 24358  0455  3E0A               	addlw	10
 24359  0456  00D7               	movwf	??_slot_Main+3
 24360  0457  3000               	movlw	0
 24361  0458  3D66               	addwfc	slot_Main@data+1,w
 24362  0459  00D8               	movwf	??_slot_Main+4
 24363  045A  0857               	movf	??_slot_Main+3,w
 24364  045B  0086               	movwf	6
 24365  045C  0858               	movf	??_slot_Main+4,w
 24366  045D  0087               	movwf	7
 24367  045E  0856               	movf	??_slot_Main+2,w
 24368  045F  0081               	movwf	1
 24369                           
 24370                           ;slot_task.c: 146: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Slot_Wheel[data->slot_wheel_
      +                          index[3]]);
 24371  0460  0865               	movf	slot_Main@data,w
 24372  0461  3E0B               	addlw	11
 24373  0462  00AF               	movwf	sprintf@sp
 24374  0463  3000               	movlw	0
 24375  0464  3D66               	addwfc	slot_Main@data+1,w
 24376  0465  00B0               	movwf	sprintf@sp+1
 24377  0466  301C               	movlw	low (STR_64| (0+32768))
 24378  0467  00B1               	movwf	sprintf@f
 24379  0468  30BB               	movlw	high (STR_64| (0+32768))
 24380  0469  00B2               	movwf	sprintf@f+1
 24381  046A  357C               	lslf	_Shot_Index,w
 24382  046B  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24383  046C  0086               	movwf	6
 24384  046D  3001               	movlw	1	; select bank3/4
 24385  046E  0087               	movwf	7
 24386  046F  3F40               	moviw [0]fsr1
 24387  0470  00D4               	movwf	??_slot_Main
 24388  0471  3F41               	moviw [1]fsr1
 24389  0472  00D5               	movwf	??_slot_Main+1
 24390  0473  0854               	movf	??_slot_Main,w
 24391  0474  0084               	movwf	4
 24392  0475  0855               	movf	??_slot_Main+1,w
 24393  0476  0085               	movwf	5
 24394  0477  0800               	movf	0,w	;code access
 24395  0478  00D6               	movwf	??_slot_Main+2
 24396  0479  01D7               	clrf	??_slot_Main+3
 24397  047A  0856               	movf	??_slot_Main+2,w
 24398  047B  00B3               	movwf	?_sprintf+4
 24399  047C  0857               	movf	??_slot_Main+3,w
 24400  047D  00B4               	movwf	?_sprintf+5
 24401  047E  357C               	lslf	_Shot_Index,w
 24402  047F  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24403  0480  0086               	movwf	6
 24404  0481  3001               	movlw	1	; select bank3/4
 24405  0482  0087               	movwf	7
 24406  0483  3F40               	moviw [0]fsr1
 24407  0484  00D8               	movwf	??_slot_Main+4
 24408  0485  3F41               	moviw [1]fsr1
 24409  0486  00D9               	movwf	??_slot_Main+5
 24410  0487  3001               	movlw	1
 24411  0488  0758               	addwf	??_slot_Main+4,w
 24412  0489  0084               	movwf	4
 24413  048A  0859               	movf	??_slot_Main+5,w
 24414  048B  1803               	skipnc
 24415  048C  0A59               	incf	??_slot_Main+5,w
 24416  048D  0085               	movwf	5
 24417  048E  0800               	movf	0,w	;code access
 24418  048F  00DA               	movwf	??_slot_Main+6
 24419  0490  01DB               	clrf	??_slot_Main+7
 24420  0491  085A               	movf	??_slot_Main+6,w
 24421  0492  00B5               	movwf	?_sprintf+6
 24422  0493  085B               	movf	??_slot_Main+7,w
 24423  0494  00B6               	movwf	?_sprintf+7
 24424  0495  357C               	lslf	_Shot_Index,w
 24425  0496  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24426  0497  0086               	movwf	6
 24427  0498  3001               	movlw	1	; select bank3/4
 24428  0499  0087               	movwf	7
 24429  049A  3F40               	moviw [0]fsr1
 24430  049B  00DC               	movwf	??_slot_Main+8
 24431  049C  3F41               	moviw [1]fsr1
 24432  049D  00DD               	movwf	??_slot_Main+9
 24433  049E  3002               	movlw	2
 24434  049F  075C               	addwf	??_slot_Main+8,w
 24435  04A0  0084               	movwf	4
 24436  04A1  085D               	movf	??_slot_Main+9,w
 24437  04A2  1803               	skipnc
 24438  04A3  0A5D               	incf	??_slot_Main+9,w
 24439  04A4  0085               	movwf	5
 24440  04A5  0800               	movf	0,w	;code access
 24441  04A6  00DE               	movwf	??_slot_Main+10
 24442  04A7  01DF               	clrf	??_slot_Main+11
 24443  04A8  085E               	movf	??_slot_Main+10,w
 24444  04A9  00B7               	movwf	?_sprintf+8
 24445  04AA  085F               	movf	??_slot_Main+11,w
 24446  04AB  00B8               	movwf	?_sprintf+9
 24447  04AC  0865               	movf	slot_Main@data,w
 24448  04AD  0086               	movwf	6
 24449  04AE  0866               	movf	slot_Main@data+1,w
 24450  04AF  0087               	movwf	7
 24451  04B0  314A               	addfsr 1,10
 24452  04B1  0801               	movf	1,w
 24453  04B2  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24454  04B3  0086               	movwf	6
 24455  04B4  3003               	movlw	3	; select bank6/7
 24456  04B5  0087               	movwf	7
 24457  04B6  0801               	movf	1,w
 24458  04B7  00E0               	movwf	??_slot_Main+12
 24459  04B8  01E1               	clrf	??_slot_Main+13
 24460  04B9  0860               	movf	??_slot_Main+12,w
 24461  04BA  00B9               	movwf	?_sprintf+10
 24462  04BB  0861               	movf	??_slot_Main+13,w
 24463  04BC  00BA               	movwf	?_sprintf+11
 24464  04BD  3199  21C2  3180   	fcall	_sprintf
 24465                           
 24466                           ;slot_task.c: 148: marquee(data->slot_print_buf, 1);}
 24467  04C0  0020               	movlb	0	; select bank0
 24468  04C1  0865               	movf	slot_Main@data,w
 24469  04C2  3E0B               	addlw	11
 24470  04C3  00BA               	movwf	marquee@string
 24471  04C4  3000               	movlw	0
 24472  04C5  3D66               	addwfc	slot_Main@data+1,w
 24473  04C6  00BB               	movwf	marquee@string+1
 24474  04C7  3001               	movlw	1
 24475  04C8  00BC               	movwf	marquee@count
 24476  04C9  3000               	movlw	0
 24477  04CA  00BD               	movwf	marquee@count+1
 24478  04CB  31A2  22D2  3180   	fcall	_marquee
 24479  04CE  2E2C               	goto	l9863
 24480  04CF                     l9835:	
 24481                           
 24482                           ;slot_task.c: 149: else if (data->displayTickCount < 500) {
 24483  04CF  0020               	movlb	0	; select bank0
 24484  04D0  0865               	movf	slot_Main@data,w
 24485  04D1  0086               	movwf	6
 24486  04D2  0866               	movf	slot_Main@data+1,w
 24487  04D3  0087               	movwf	7
 24488  04D4  3143               	addfsr 1,3
 24489  04D5  3F40               	moviw [0]fsr1
 24490  04D6  00D4               	movwf	??_slot_Main
 24491  04D7  3F41               	moviw [1]fsr1
 24492  04D8  00D5               	movwf	??_slot_Main+1
 24493  04D9  3001               	movlw	1
 24494  04DA  0255               	subwf	??_slot_Main+1,w
 24495  04DB  30F4               	movlw	244
 24496  04DC  1903               	skipnz
 24497  04DD  0254               	subwf	??_slot_Main,w
 24498  04DE  1803               	skipnc
 24499  04DF  2D88               	goto	l9843
 24500                           
 24501                           ;slot_task.c: 150: slot_Finished_Animation(data);
 24502  04E0  0866               	movf	slot_Main@data+1,w
 24503  04E1  00BE               	movwf	slot_Finished_Animation@taskData+1
 24504  04E2  0865               	movf	slot_Main@data,w
 24505  04E3  00BD               	movwf	slot_Finished_Animation@taskData
 24506  04E4  31B5  259E  3180   	fcall	_slot_Finished_Animation
 24507                           
 24508                           ;slot_task.c: 151: if ( data->displayTickCount % 50 <= 25 ) {
 24509  04E7  3032               	movlw	50
 24510  04E8  0020               	movlb	0	; select bank0
 24511  04E9  00AB               	movwf	___lwmod@divisor
 24512  04EA  3000               	movlw	0
 24513  04EB  00AC               	movwf	___lwmod@divisor+1
 24514  04EC  0865               	movf	slot_Main@data,w
 24515  04ED  0086               	movwf	6
 24516  04EE  0866               	movf	slot_Main@data+1,w
 24517  04EF  0087               	movwf	7
 24518  04F0  3143               	addfsr 1,3
 24519  04F1  3F40               	moviw [0]fsr1
 24520  04F2  00AD               	movwf	___lwmod@dividend
 24521  04F3  3F41               	moviw [1]fsr1
 24522  04F4  00AE               	movwf	___lwmod@dividend+1
 24523  04F5  31B5  25EF  3180   	fcall	___lwmod
 24524  04F8  3000               	movlw	0
 24525  04F9  0020               	movlb	0	; select bank0
 24526  04FA  022C               	subwf	?___lwmod+1,w
 24527  04FB  301A               	movlw	26
 24528  04FC  1903               	skipnz
 24529  04FD  022B               	subwf	?___lwmod,w
 24530  04FE  1803               	skipnc
 24531  04FF  2D12               	goto	l9841
 24532                           
 24533                           ;slot_task.c: 152: memset(data->slot_print_buf, 0x20, 4);
 24534  0500  0865               	movf	slot_Main@data,w
 24535  0501  3E0B               	addlw	11
 24536  0502  00F1               	movwf	memset@p1
 24537  0503  3000               	movlw	0
 24538  0504  3D66               	addwfc	slot_Main@data+1,w
 24539  0505  00F2               	movwf	memset@p1+1
 24540  0506  3020               	movlw	32
 24541  0507  00F3               	movwf	memset@c
 24542  0508  3000               	movlw	0
 24543  0509  00F4               	movwf	memset@c+1
 24544  050A  3004               	movlw	4
 24545  050B  00F5               	movwf	memset@n
 24546  050C  3000               	movlw	0
 24547  050D  00F6               	movwf	memset@n+1
 24548  050E  31B4  241B  3180   	fcall	_memset
 24549                           
 24550                           ;slot_task.c: 153: }
 24551  0511  2D79               	goto	l1454
 24552  0512                     l9841:	
 24553                           
 24554                           ;slot_task.c: 154: else {
 24555                           ;slot_task.c: 155: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Shot_Options[Shot_Index][3])
      +                          ;
 24556  0512  0020               	movlb	0	; select bank0
 24557  0513  0865               	movf	slot_Main@data,w
 24558  0514  3E0B               	addlw	11
 24559  0515  00AF               	movwf	sprintf@sp
 24560  0516  3000               	movlw	0
 24561  0517  3D66               	addwfc	slot_Main@data+1,w
 24562  0518  00B0               	movwf	sprintf@sp+1
 24563  0519  301C               	movlw	low (STR_64| (0+32768))
 24564  051A  00B1               	movwf	sprintf@f
 24565  051B  30BB               	movlw	high (STR_64| (0+32768))
 24566  051C  00B2               	movwf	sprintf@f+1
 24567  051D  357C               	lslf	_Shot_Index,w
 24568  051E  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24569  051F  0086               	movwf	6
 24570  0520  3001               	movlw	1	; select bank3/4
 24571  0521  0087               	movwf	7
 24572  0522  3F40               	moviw [0]fsr1
 24573  0523  00D4               	movwf	??_slot_Main
 24574  0524  3F41               	moviw [1]fsr1
 24575  0525  00D5               	movwf	??_slot_Main+1
 24576  0526  0854               	movf	??_slot_Main,w
 24577  0527  0084               	movwf	4
 24578  0528  0855               	movf	??_slot_Main+1,w
 24579  0529  0085               	movwf	5
 24580  052A  0800               	movf	0,w	;code access
 24581  052B  00D6               	movwf	??_slot_Main+2
 24582  052C  01D7               	clrf	??_slot_Main+3
 24583  052D  0856               	movf	??_slot_Main+2,w
 24584  052E  00B3               	movwf	?_sprintf+4
 24585  052F  0857               	movf	??_slot_Main+3,w
 24586  0530  00B4               	movwf	?_sprintf+5
 24587  0531  357C               	lslf	_Shot_Index,w
 24588  0532  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24589  0533  0086               	movwf	6
 24590  0534  3001               	movlw	1	; select bank3/4
 24591  0535  0087               	movwf	7
 24592  0536  3F40               	moviw [0]fsr1
 24593  0537  00D8               	movwf	??_slot_Main+4
 24594  0538  3F41               	moviw [1]fsr1
 24595  0539  00D9               	movwf	??_slot_Main+5
 24596  053A  3001               	movlw	1
 24597  053B  0758               	addwf	??_slot_Main+4,w
 24598  053C  0084               	movwf	4
 24599  053D  0859               	movf	??_slot_Main+5,w
 24600  053E  1803               	skipnc
 24601  053F  0A59               	incf	??_slot_Main+5,w
 24602  0540  0085               	movwf	5
 24603  0541  0800               	movf	0,w	;code access
 24604  0542  00DA               	movwf	??_slot_Main+6
 24605  0543  01DB               	clrf	??_slot_Main+7
 24606  0544  085A               	movf	??_slot_Main+6,w
 24607  0545  00B5               	movwf	?_sprintf+6
 24608  0546  085B               	movf	??_slot_Main+7,w
 24609  0547  00B6               	movwf	?_sprintf+7
 24610  0548  357C               	lslf	_Shot_Index,w
 24611  0549  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24612  054A  0086               	movwf	6
 24613  054B  3001               	movlw	1	; select bank3/4
 24614  054C  0087               	movwf	7
 24615  054D  3F40               	moviw [0]fsr1
 24616  054E  00DC               	movwf	??_slot_Main+8
 24617  054F  3F41               	moviw [1]fsr1
 24618  0550  00DD               	movwf	??_slot_Main+9
 24619  0551  3002               	movlw	2
 24620  0552  075C               	addwf	??_slot_Main+8,w
 24621  0553  0084               	movwf	4
 24622  0554  085D               	movf	??_slot_Main+9,w
 24623  0555  1803               	skipnc
 24624  0556  0A5D               	incf	??_slot_Main+9,w
 24625  0557  0085               	movwf	5
 24626  0558  0800               	movf	0,w	;code access
 24627  0559  00DE               	movwf	??_slot_Main+10
 24628  055A  01DF               	clrf	??_slot_Main+11
 24629  055B  085E               	movf	??_slot_Main+10,w
 24630  055C  00B7               	movwf	?_sprintf+8
 24631  055D  085F               	movf	??_slot_Main+11,w
 24632  055E  00B8               	movwf	?_sprintf+9
 24633  055F  357C               	lslf	_Shot_Index,w
 24634  0560  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24635  0561  0086               	movwf	6
 24636  0562  3001               	movlw	1	; select bank3/4
 24637  0563  0087               	movwf	7
 24638  0564  3F40               	moviw [0]fsr1
 24639  0565  00E0               	movwf	??_slot_Main+12
 24640  0566  3F41               	moviw [1]fsr1
 24641  0567  00E1               	movwf	??_slot_Main+13
 24642  0568  3003               	movlw	3
 24643  0569  0760               	addwf	??_slot_Main+12,w
 24644  056A  0084               	movwf	4
 24645  056B  0861               	movf	??_slot_Main+13,w
 24646  056C  1803               	skipnc
 24647  056D  0A61               	incf	??_slot_Main+13,w
 24648  056E  0085               	movwf	5
 24649  056F  0800               	movf	0,w	;code access
 24650  0570  00E2               	movwf	??_slot_Main+14
 24651  0571  01E3               	clrf	??_slot_Main+15
 24652  0572  0862               	movf	??_slot_Main+14,w
 24653  0573  00B9               	movwf	?_sprintf+10
 24654  0574  0863               	movf	??_slot_Main+15,w
 24655  0575  00BA               	movwf	?_sprintf+11
 24656  0576  3199  21C2  3180   	fcall	_sprintf
 24657  0579                     l1454:	
 24658                           
 24659                           ;slot_task.c: 156: }
 24660                           ;slot_task.c: 157: marquee(data->slot_print_buf, 1);
 24661  0579  0020               	movlb	0	; select bank0
 24662  057A  0865               	movf	slot_Main@data,w
 24663  057B  3E0B               	addlw	11
 24664  057C  00BA               	movwf	marquee@string
 24665  057D  3000               	movlw	0
 24666  057E  3D66               	addwfc	slot_Main@data+1,w
 24667  057F  00BB               	movwf	marquee@string+1
 24668  0580  3001               	movlw	1
 24669  0581  00BC               	movwf	marquee@count
 24670  0582  3000               	movlw	0
 24671  0583  00BD               	movwf	marquee@count+1
 24672  0584  31A2  22D2  3180   	fcall	_marquee
 24673                           
 24674                           ;slot_task.c: 158: }
 24675  0587  2E2C               	goto	l9863
 24676  0588                     l9843:	
 24677                           
 24678                           ;slot_task.c: 159: else {
 24679                           ;slot_task.c: 160: slot_Finished_Animation(data);
 24680  0588  0020               	movlb	0	; select bank0
 24681  0589  0866               	movf	slot_Main@data+1,w
 24682  058A  00BE               	movwf	slot_Finished_Animation@taskData+1
 24683  058B  0865               	movf	slot_Main@data,w
 24684  058C  00BD               	movwf	slot_Finished_Animation@taskData
 24685  058D  31B5  259E  3180   	fcall	_slot_Finished_Animation
 24686                           
 24687                           ;slot_task.c: 161: if ( data->displayTickCount % 50 <= 25 ) {
 24688  0590  3032               	movlw	50
 24689  0591  0020               	movlb	0	; select bank0
 24690  0592  00AB               	movwf	___lwmod@divisor
 24691  0593  3000               	movlw	0
 24692  0594  00AC               	movwf	___lwmod@divisor+1
 24693  0595  0865               	movf	slot_Main@data,w
 24694  0596  0086               	movwf	6
 24695  0597  0866               	movf	slot_Main@data+1,w
 24696  0598  0087               	movwf	7
 24697  0599  3143               	addfsr 1,3
 24698  059A  3F40               	moviw [0]fsr1
 24699  059B  00AD               	movwf	___lwmod@dividend
 24700  059C  3F41               	moviw [1]fsr1
 24701  059D  00AE               	movwf	___lwmod@dividend+1
 24702  059E  31B5  25EF  3180   	fcall	___lwmod
 24703  05A1  3000               	movlw	0
 24704  05A2  0020               	movlb	0	; select bank0
 24705  05A3  022C               	subwf	?___lwmod+1,w
 24706  05A4  301A               	movlw	26
 24707  05A5  1903               	skipnz
 24708  05A6  022B               	subwf	?___lwmod,w
 24709  05A7  1803               	skipnc
 24710  05A8  2DBB               	goto	l9847
 24711                           
 24712                           ;slot_task.c: 162: memset(data->slot_print_buf, 0x20, 4);
 24713  05A9  0865               	movf	slot_Main@data,w
 24714  05AA  3E0B               	addlw	11
 24715  05AB  00F1               	movwf	memset@p1
 24716  05AC  3000               	movlw	0
 24717  05AD  3D66               	addwfc	slot_Main@data+1,w
 24718  05AE  00F2               	movwf	memset@p1+1
 24719  05AF  3020               	movlw	32
 24720  05B0  00F3               	movwf	memset@c
 24721  05B1  3000               	movlw	0
 24722  05B2  00F4               	movwf	memset@c+1
 24723  05B3  3004               	movlw	4
 24724  05B4  00F5               	movwf	memset@n
 24725  05B5  3000               	movlw	0
 24726  05B6  00F6               	movwf	memset@n+1
 24727  05B7  31B4  241B  3180   	fcall	_memset
 24728                           
 24729                           ;slot_task.c: 163: }
 24730  05BA  2DD2               	goto	l1457
 24731  05BB                     l9847:	
 24732                           
 24733                           ;slot_task.c: 164: else {
 24734                           ;slot_task.c: 165: sprintf(data->slot_print_buf, "%s", Shot_Options_Long[Shot_Index]);
 24735  05BB  0020               	movlb	0	; select bank0
 24736  05BC  0865               	movf	slot_Main@data,w
 24737  05BD  3E0B               	addlw	11
 24738  05BE  00AF               	movwf	sprintf@sp
 24739  05BF  3000               	movlw	0
 24740  05C0  3D66               	addwfc	slot_Main@data+1,w
 24741  05C1  00B0               	movwf	sprintf@sp+1
 24742  05C2  3002               	movlw	low (STR_69| (0+32768))
 24743  05C3  00B1               	movwf	sprintf@f
 24744  05C4  30BC               	movlw	high (STR_69| (0+32768))
 24745  05C5  00B2               	movwf	sprintf@f+1
 24746  05C6  357C               	lslf	_Shot_Index,w
 24747  05C7  3E20               	addlw	(low (_Shot_Options_Long| (0+768)))& (0+255)
 24748  05C8  0086               	movwf	6
 24749  05C9  3003               	movlw	3	; select bank6/7
 24750  05CA  0087               	movwf	7
 24751  05CB  3F40               	moviw [0]fsr1
 24752  05CC  00B3               	movwf	low ((?_sprintf| 0+4))
 24753  05CD  3F41               	moviw [1]fsr1
 24754  05CE  00B4               	movwf	(low ((?_sprintf| 0+4))+1)
 24755  05CF  3199  21C2  3180   	fcall	_sprintf
 24756  05D2                     l1457:	
 24757                           
 24758                           ;slot_task.c: 166: }
 24759                           ;slot_task.c: 168: marquee_speedy(data->slot_print_buf, data->displayTickCount, 20);
 24760  05D2  0020               	movlb	0	; select bank0
 24761  05D3  0865               	movf	slot_Main@data,w
 24762  05D4  3E0B               	addlw	11
 24763  05D5  00BA               	movwf	marquee_speedy@string
 24764  05D6  3000               	movlw	0
 24765  05D7  3D66               	addwfc	slot_Main@data+1,w
 24766  05D8  00BB               	movwf	marquee_speedy@string+1
 24767  05D9  0865               	movf	slot_Main@data,w
 24768  05DA  0086               	movwf	6
 24769  05DB  0866               	movf	slot_Main@data+1,w
 24770  05DC  0087               	movwf	7
 24771  05DD  3143               	addfsr 1,3
 24772  05DE  3F40               	moviw [0]fsr1
 24773  05DF  00BC               	movwf	marquee_speedy@count
 24774  05E0  3F41               	moviw [1]fsr1
 24775  05E1  00BD               	movwf	marquee_speedy@count+1
 24776  05E2  3014               	movlw	20
 24777  05E3  00BE               	movwf	marquee_speedy@multiplier
 24778  05E4  3000               	movlw	0
 24779  05E5  00BF               	movwf	marquee_speedy@multiplier+1
 24780  05E6  31A2  225F  3180   	fcall	_marquee_speedy
 24781                           
 24782                           ;slot_task.c: 169: if (data->displayTickCount == 500 + (50 * 10)) {
 24783  05E9  0020               	movlb	0	; select bank0
 24784  05EA  0865               	movf	slot_Main@data,w
 24785  05EB  0086               	movwf	6
 24786  05EC  0866               	movf	slot_Main@data+1,w
 24787  05ED  0087               	movwf	7
 24788  05EE  3143               	addfsr 1,3
 24789  05EF  0016               	moviw fsr1++
 24790  05F0  3AE8               	xorlw	232
 24791  05F1  00D4               	movwf	??_slot_Main
 24792  05F2  0016               	moviw fsr1++
 24793  05F3  3A03               	xorlw	3
 24794  05F4  04D4               	iorwf	??_slot_Main,f
 24795  05F5  1D03               	btfss	3,2
 24796  05F6  2E2C               	goto	l9863
 24797                           
 24798                           ;slot_task.c: 170: currentTask = MENU_TASK;
 24799  05F7  0021               	movlb	1	; select bank1
 24800  05F8  01BA               	clrf	_currentTask^(0+128)
 24801  05F9  01BB               	clrf	(_currentTask+1)^(0+128)
 24802                           
 24803                           ;slot_task.c: 173: slot_Setup(slot_taskData);
 24804  05FA  083D               	movf	(_slot_taskData+1)^(0+128),w
 24805  05FB  0020               	movlb	0	; select bank0
 24806  05FC  00B0               	movwf	slot_Setup@taskData+1
 24807  05FD  0021               	movlb	1	; select bank1
 24808  05FE  083C               	movf	_slot_taskData^(0+128),w
 24809  05FF  0020               	movlb	0	; select bank0
 24810  0600  00AF               	movwf	slot_Setup@taskData
 24811  0601  31AC  2447         	fcall	_slot_Setup
 24812                           
 24813                           ;slot_task.c: 176: data->holdCountA = 1;
 24814  0603  0020               	movlb	0	; select bank0
 24815  0604  0865               	movf	slot_Main@data,w
 24816  0605  0086               	movwf	6
 24817  0606  0866               	movf	slot_Main@data+1,w
 24818  0607  0087               	movwf	7
 24819  0608  315F               	addfsr 1,31
 24820  0609  3001               	movlw	1
 24821  060A  3FC0               	movwi [0]fsr1
 24822  060B  3000               	movlw	0
 24823  060C  3FC1               	movwi [1]fsr1
 24824                           
 24825                           ;slot_task.c: 177: data->holdCountB = 1;
 24826  060D  0865               	movf	slot_Main@data,w
 24827  060E  3E21               	addlw	33
 24828  060F  0086               	movwf	6
 24829  0610  3000               	movlw	0
 24830  0611  3D66               	addwfc	slot_Main@data+1,w
 24831  0612  0087               	movwf	7
 24832  0613  3001               	movlw	1
 24833  0614  3FC0               	movwi [0]fsr1
 24834  0615  3000               	movlw	0
 24835  0616  3FC1               	movwi [1]fsr1
 24836                           
 24837                           ;slot_task.c: 178: data->holdCountX = 1;
 24838  0617  0865               	movf	slot_Main@data,w
 24839  0618  3E23               	addlw	35
 24840  0619  0086               	movwf	6
 24841  061A  3000               	movlw	0
 24842  061B  3D66               	addwfc	slot_Main@data+1,w
 24843  061C  0087               	movwf	7
 24844  061D  3001               	movlw	1
 24845  061E  3FC0               	movwi [0]fsr1
 24846  061F  3000               	movlw	0
 24847  0620  3FC1               	movwi [1]fsr1
 24848                           
 24849                           ;slot_task.c: 179: data->holdCountY = 1;
 24850  0621  0865               	movf	slot_Main@data,w
 24851  0622  3E25               	addlw	37
 24852  0623  0086               	movwf	6
 24853  0624  3000               	movlw	0
 24854  0625  3D66               	addwfc	slot_Main@data+1,w
 24855  0626  0087               	movwf	7
 24856  0627  3001               	movlw	1
 24857  0628  3FC0               	movwi [0]fsr1
 24858  0629  3000               	movlw	0
 24859  062A  3FC1               	movwi [1]fsr1
 24860                           
 24861                           ;slot_task.c: 180: break;
 24862  062B  0008               	return
 24863  062C                     l9863:	
 24864                           
 24865                           ;slot_task.c: 181: }
 24866                           ;slot_task.c: 182: }
 24867                           ;slot_task.c: 184: data->displayTickCount += 1;
 24868  062C  0020               	movlb	0	; select bank0
 24869  062D  0865               	movf	slot_Main@data,w
 24870  062E  0086               	movwf	6
 24871  062F  0866               	movf	slot_Main@data+1,w
 24872  0630  0087               	movwf	7
 24873  0631  3143               	addfsr 1,3
 24874  0632  3001               	movlw	1
 24875  0633  0781               	addwf	1,f
 24876  0634  3141               	addfsr 1,1
 24877  0635  1803               	skipnc
 24878  0636  0A81               	incf	1,f
 24879                           
 24880                           ;slot_task.c: 185: data->holdCountA = 0;
 24881  0637  0865               	movf	slot_Main@data,w
 24882  0638  0086               	movwf	6
 24883  0639  0866               	movf	slot_Main@data+1,w
 24884  063A  0087               	movwf	7
 24885  063B  315F               	addfsr 1,31
 24886  063C  3000               	movlw	0
 24887  063D  3FC0               	movwi [0]fsr1
 24888  063E  3FC1               	movwi [1]fsr1
 24889                           
 24890                           ;slot_task.c: 186: data->holdCountB = 0;
 24891  063F  0865               	movf	slot_Main@data,w
 24892  0640  3E21               	addlw	33
 24893  0641  0086               	movwf	6
 24894  0642  3000               	movlw	0
 24895  0643  3D66               	addwfc	slot_Main@data+1,w
 24896  0644  0087               	movwf	7
 24897  0645  3000               	movlw	0
 24898  0646  3FC0               	movwi [0]fsr1
 24899  0647  3FC1               	movwi [1]fsr1
 24900                           
 24901                           ;slot_task.c: 187: data->holdCountX = 0;
 24902  0648  0865               	movf	slot_Main@data,w
 24903  0649  3E23               	addlw	35
 24904  064A  0086               	movwf	6
 24905  064B  3000               	movlw	0
 24906  064C  3D66               	addwfc	slot_Main@data+1,w
 24907  064D  0087               	movwf	7
 24908  064E  3000               	movlw	0
 24909  064F  3FC0               	movwi [0]fsr1
 24910  0650  3FC1               	movwi [1]fsr1
 24911                           
 24912                           ;slot_task.c: 188: data->holdCountY = 0;
 24913  0651  0865               	movf	slot_Main@data,w
 24914  0652  3E25               	addlw	37
 24915  0653  0086               	movwf	6
 24916  0654  3000               	movlw	0
 24917  0655  3D66               	addwfc	slot_Main@data+1,w
 24918  0656  0087               	movwf	7
 24919  0657  3000               	movlw	0
 24920  0658  3FC0               	movwi [0]fsr1
 24921  0659  3FC1               	movwi [1]fsr1
 24922                           
 24923                           ;slot_task.c: 189: data->noholdCount += 1;
 24924  065A  0865               	movf	slot_Main@data,w
 24925  065B  3E27               	addlw	39
 24926  065C  0086               	movwf	6
 24927  065D  3000               	movlw	0
 24928  065E  3D66               	addwfc	slot_Main@data+1,w
 24929  065F  0087               	movwf	7
 24930  0660  3001               	movlw	1
 24931  0661  0781               	addwf	1,f
 24932  0662  3141               	addfsr 1,1
 24933  0663  1803               	skipnc
 24934  0664  0A81               	incf	1,f
 24935                           
 24936                           ;slot_task.c: 190: }
 24937  0665  0008               	return
 24938  0666                     __end_of_slot_Main:	
 24939                           
 24940                           	psect	text20
 24941  29AD                     __ptext20:	
 24942 ;; *************** function _slot_Running_Animation *****************
 24943 ;; Defined at:
 24944 ;;		line 64 in file "slot_task.c"
 24945 ;; Parameters:    Size  Location     Type
 24946 ;;  taskData        2   18[BANK0 ] PTR void 
 24947 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24948 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24949 ;; Auto vars:     Size  Location     Type
 24950 ;;  data            2   22[BANK0 ] PTR struct t_slot_taskDa
 24951 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24952 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24953 ;; Return value:  Size  Location     Type
 24954 ;;                  1    wreg      void 
 24955 ;; Registers used:
 24956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24957 ;; Tracked objects:
 24958 ;;		On entry : 0/0
 24959 ;;		On exit  : 0/0
 24960 ;;		Unchanged: 0/0
 24961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24962 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24963 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24965 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24966 ;;Total ram usage:        6 bytes
 24967 ;; Hardware stack levels used:    1
 24968 ;; Hardware stack levels required when called:   10
 24969 ;; This function calls:
 24970 ;;		_led_circle
 24971 ;; This function is called by:
 24972 ;;		_slot_Main
 24973 ;; This function uses a non-reentrant model
 24974 ;;
 24975                           
 24976                           
 24977                           ;psect for function _slot_Running_Animation
 24978  29AD                     _slot_Running_Animation:	
 24979                           
 24980                           ;slot_task.c: 65: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 24981                           
 24982                           ;incstack = 0
 24983                           ; Regs used in _slot_Running_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 24984  29AD  0020               	movlb	0	; select bank0
 24985  29AE  0833               	movf	slot_Running_Animation@taskData+1,w
 24986  29AF  00B7               	movwf	slot_Running_Animation@data+1
 24987  29B0  0832               	movf	slot_Running_Animation@taskData,w
 24988  29B1  00B6               	movwf	slot_Running_Animation@data
 24989                           
 24990                           ;slot_task.c: 66: if (data->delayTickCount ==0 ){
 24991  29B2  0836               	movf	slot_Running_Animation@data,w
 24992  29B3  0086               	movwf	6
 24993  29B4  0837               	movf	slot_Running_Animation@data+1,w
 24994  29B5  0087               	movwf	7
 24995  29B6  3145               	addfsr 1,5
 24996  29B7  0016               	moviw fsr1++
 24997  29B8  0401               	iorwf	1,w
 24998  29B9  1D03               	btfss	3,2
 24999  29BA  29E7               	goto	l8903
 25000                           
 25001                           ;slot_task.c: 67: if (Leds_idx == 1024 ){
 25002  29BB  3004               	movlw	4
 25003  29BC  0021               	movlb	1	; select bank1
 25004  29BD  0651               	xorwf	(_Leds_idx+1)^(0+128),w
 25005  29BE  0450               	iorwf	_Leds_idx^(0+128),w
 25006  29BF  1D03               	btfss	3,2
 25007  29C0  29C5               	goto	l8895
 25008                           
 25009                           ;slot_task.c: 68: Leds_idx = Leds_idx << 1;
 25010  29C1  3550               	lslf	_Leds_idx^(0+128),w
 25011  29C2  00D0               	movwf	_Leds_idx^(0+128)
 25012  29C3  0D51               	rlf	(_Leds_idx+1)^(0+128),w
 25013  29C4  00D1               	movwf	(_Leds_idx+1)^(0+128)
 25014  29C5                     l8895:	
 25015                           
 25016                           ;slot_task.c: 69: }
 25017                           ;slot_task.c: 70: led_circle(Leds_idx);
 25018  29C5  0851               	movf	(_Leds_idx+1)^(0+128),w
 25019  29C6  0020               	movlb	0	; select bank0
 25020  29C7  00B1               	movwf	led_circle@count+1
 25021  29C8  0021               	movlb	1	; select bank1
 25022  29C9  0850               	movf	_Leds_idx^(0+128),w
 25023  29CA  0020               	movlb	0	; select bank0
 25024  29CB  00B0               	movwf	led_circle@count
 25025  29CC  31B2  2260  31A9   	fcall	_led_circle
 25026                           
 25027                           ;slot_task.c: 71: if (Leds_idx < 1 ){
 25028  29CF  0021               	movlb	1	; select bank1
 25029  29D0  0850               	movf	_Leds_idx^(0+128),w
 25030  29D1  0451               	iorwf	(_Leds_idx+1)^(0+128),w
 25031  29D2  1D03               	btfss	3,2
 25032  29D3  29D8               	goto	l1427
 25033                           
 25034                           ;slot_task.c: 72: Leds_idx = 1;
 25035  29D4  3001               	movlw	1
 25036  29D5  00D0               	movwf	_Leds_idx^(0+128)
 25037  29D6  3000               	movlw	0
 25038  29D7  00D1               	movwf	(_Leds_idx^(0+128)+1)
 25039  29D8                     l1427:	
 25040                           
 25041                           ;slot_task.c: 73: }
 25042                           ;slot_task.c: 74: Leds_idx = Leds_idx << 1;
 25043  29D8  3550               	lslf	_Leds_idx^(0+128),w
 25044  29D9  00D0               	movwf	_Leds_idx^(0+128)
 25045  29DA  0D51               	rlf	(_Leds_idx+1)^(0+128),w
 25046  29DB  00D1               	movwf	(_Leds_idx+1)^(0+128)
 25047                           
 25048                           ;slot_task.c: 76: data->delayTickCount = 10;
 25049  29DC  0020               	movlb	0	; select bank0
 25050  29DD  0836               	movf	slot_Running_Animation@data,w
 25051  29DE  0086               	movwf	6
 25052  29DF  0837               	movf	slot_Running_Animation@data+1,w
 25053  29E0  0087               	movwf	7
 25054  29E1  3145               	addfsr 1,5
 25055  29E2  300A               	movlw	10
 25056  29E3  3FC0               	movwi [0]fsr1
 25057  29E4  3000               	movlw	0
 25058  29E5  3FC1               	movwi [1]fsr1
 25059                           
 25060                           ;slot_task.c: 77: }
 25061  29E6  0008               	return
 25062  29E7                     l8903:	
 25063                           
 25064                           ;slot_task.c: 78: else {
 25065                           ;slot_task.c: 79: data->delayTickCount -= 1;
 25066  29E7  0836               	movf	slot_Running_Animation@data,w
 25067  29E8  0086               	movwf	6
 25068  29E9  0837               	movf	slot_Running_Animation@data+1,w
 25069  29EA  0087               	movwf	7
 25070  29EB  3145               	addfsr 1,5
 25071  29EC  3001               	movlw	1
 25072  29ED  0281               	subwf	1,f
 25073  29EE  3141               	addfsr 1,1
 25074  29EF  3000               	movlw	0
 25075  29F0  3B81               	subwfb	1,f
 25076  29F1  317F               	addfsr 1,-1
 25077  29F2  0008               	return
 25078  29F3                     __end_of_slot_Running_Animation:	
 25079                           
 25080                           	psect	text21
 25081  359E                     __ptext21:	
 25082 ;; *************** function _slot_Finished_Animation *****************
 25083 ;; Defined at:
 25084 ;;		line 84 in file "slot_task.c"
 25085 ;; Parameters:    Size  Location     Type
 25086 ;;  taskData        2   29[BANK0 ] PTR void 
 25087 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25088 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25089 ;; Auto vars:     Size  Location     Type
 25090 ;;  data            2   33[BANK0 ] PTR struct t_slot_taskDa
 25091 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25092 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25093 ;; Return value:  Size  Location     Type
 25094 ;;                  1    wreg      void 
 25095 ;; Registers used:
 25096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25097 ;; Tracked objects:
 25098 ;;		On entry : 0/0
 25099 ;;		On exit  : 0/0
 25100 ;;		Unchanged: 0/0
 25101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25102 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25103 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25104 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25105 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25106 ;;Total ram usage:        6 bytes
 25107 ;; Hardware stack levels used:    1
 25108 ;; Hardware stack levels required when called:   10
 25109 ;; This function calls:
 25110 ;;		_led_rand
 25111 ;; This function is called by:
 25112 ;;		_slot_Main
 25113 ;; This function uses a non-reentrant model
 25114 ;;
 25115                           
 25116                           
 25117                           ;psect for function _slot_Finished_Animation
 25118  359E                     _slot_Finished_Animation:	
 25119                           
 25120                           ;slot_task.c: 85: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 25121                           
 25122                           ;incstack = 0
 25123                           ; Regs used in _slot_Finished_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 25124  359E  0020               	movlb	0	; select bank0
 25125  359F  083E               	movf	slot_Finished_Animation@taskData+1,w
 25126  35A0  00C2               	movwf	slot_Finished_Animation@data+1
 25127  35A1  083D               	movf	slot_Finished_Animation@taskData,w
 25128  35A2  00C1               	movwf	slot_Finished_Animation@data
 25129                           
 25130                           ;slot_task.c: 86: if (data->delayTickCount < 1){
 25131  35A3  0841               	movf	slot_Finished_Animation@data,w
 25132  35A4  0086               	movwf	6
 25133  35A5  0842               	movf	slot_Finished_Animation@data+1,w
 25134  35A6  0087               	movwf	7
 25135  35A7  3145               	addfsr 1,5
 25136  35A8  0016               	moviw fsr1++
 25137  35A9  0401               	iorwf	1,w
 25138  35AA  1D03               	btfss	3,2
 25139  35AB  2DB9               	goto	l8913
 25140                           
 25141                           ;slot_task.c: 87: led_rand();
 25142  35AC  31AA  2280         	fcall	_led_rand
 25143                           
 25144                           ;slot_task.c: 88: data->delayTickCount = 10;
 25145  35AE  0020               	movlb	0	; select bank0
 25146  35AF  0841               	movf	slot_Finished_Animation@data,w
 25147  35B0  0086               	movwf	6
 25148  35B1  0842               	movf	slot_Finished_Animation@data+1,w
 25149  35B2  0087               	movwf	7
 25150  35B3  3145               	addfsr 1,5
 25151  35B4  300A               	movlw	10
 25152  35B5  3FC0               	movwi [0]fsr1
 25153  35B6  3000               	movlw	0
 25154  35B7  3FC1               	movwi [1]fsr1
 25155                           
 25156                           ;slot_task.c: 89: }
 25157  35B8  0008               	return
 25158  35B9                     l8913:	
 25159                           
 25160                           ;slot_task.c: 90: else {
 25161                           ;slot_task.c: 91: data->delayTickCount -= 1;
 25162  35B9  0841               	movf	slot_Finished_Animation@data,w
 25163  35BA  0086               	movwf	6
 25164  35BB  0842               	movf	slot_Finished_Animation@data+1,w
 25165  35BC  0087               	movwf	7
 25166  35BD  3145               	addfsr 1,5
 25167  35BE  3001               	movlw	1
 25168  35BF  0281               	subwf	1,f
 25169  35C0  3141               	addfsr 1,1
 25170  35C1  3000               	movlw	0
 25171  35C2  3B81               	subwfb	1,f
 25172  35C3  317F               	addfsr 1,-1
 25173  35C4  0008               	return
 25174  35C5                     __end_of_slot_Finished_Animation:	
 25175                           
 25176                           	psect	text22
 25177  36AE                     __ptext22:	
 25178 ;; *************** function _secret_clear *****************
 25179 ;; Defined at:
 25180 ;;		line 178 in file "secret_task.c"
 25181 ;; Parameters:    Size  Location     Type
 25182 ;;  data            2    1[COMMON] PTR struct t_secret_task
 25183 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25184 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25185 ;; Auto vars:     Size  Location     Type
 25186 ;;		None
 25187 ;; Return value:  Size  Location     Type
 25188 ;;                  1    wreg      void 
 25189 ;; Registers used:
 25190 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 25191 ;; Tracked objects:
 25192 ;;		On entry : 0/0
 25193 ;;		On exit  : 0/0
 25194 ;;		Unchanged: 0/0
 25195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25196 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25200 ;;Total ram usage:        2 bytes
 25201 ;; Hardware stack levels used:    1
 25202 ;; Hardware stack levels required when called:    4
 25203 ;; This function calls:
 25204 ;;		Nothing
 25205 ;; This function is called by:
 25206 ;;		_secret_Main
 25207 ;; This function uses a non-reentrant model
 25208 ;;
 25209                           
 25210                           
 25211                           ;psect for function _secret_clear
 25212  36AE                     _secret_clear:	
 25213                           
 25214                           ;secret_task.c: 180: data->delayTickCount = 300;
 25215                           
 25216                           ;incstack = 0
 25217                           ; Regs used in _secret_clear: [wreg+fsr1l+fsr1h+status,2+status,0]
 25218  36AE  0871               	movf	secret_clear@data,w
 25219  36AF  0086               	movwf	6
 25220  36B0  0872               	movf	secret_clear@data+1,w
 25221  36B1  0087               	movwf	7
 25222  36B2  3142               	addfsr 1,2
 25223  36B3  302C               	movlw	44
 25224  36B4  3FC0               	movwi [0]fsr1
 25225  36B5  3001               	movlw	1
 25226  36B6  3FC1               	movwi [1]fsr1
 25227                           
 25228                           ;secret_task.c: 181: data->holdCountA = 0;
 25229  36B7  0871               	movf	secret_clear@data,w
 25230  36B8  0086               	movwf	6
 25231  36B9  0872               	movf	secret_clear@data+1,w
 25232  36BA  0087               	movwf	7
 25233  36BB  3144               	addfsr 1,4
 25234  36BC  3000               	movlw	0
 25235  36BD  3FC0               	movwi [0]fsr1
 25236  36BE  3FC1               	movwi [1]fsr1
 25237                           
 25238                           ;secret_task.c: 182: data->holdCountB = 0;
 25239  36BF  0871               	movf	secret_clear@data,w
 25240  36C0  0086               	movwf	6
 25241  36C1  0872               	movf	secret_clear@data+1,w
 25242  36C2  0087               	movwf	7
 25243  36C3  3146               	addfsr 1,6
 25244  36C4  3000               	movlw	0
 25245  36C5  3FC0               	movwi [0]fsr1
 25246  36C6  3FC1               	movwi [1]fsr1
 25247                           
 25248                           ;secret_task.c: 183: data->holdCountX = 0;
 25249  36C7  0871               	movf	secret_clear@data,w
 25250  36C8  0086               	movwf	6
 25251  36C9  0872               	movf	secret_clear@data+1,w
 25252  36CA  0087               	movwf	7
 25253  36CB  3148               	addfsr 1,8
 25254  36CC  3000               	movlw	0
 25255  36CD  3FC0               	movwi [0]fsr1
 25256  36CE  3FC1               	movwi [1]fsr1
 25257                           
 25258                           ;secret_task.c: 184: data->holdCountY = 0;
 25259  36CF  0871               	movf	secret_clear@data,w
 25260  36D0  0086               	movwf	6
 25261  36D1  0872               	movf	secret_clear@data+1,w
 25262  36D2  0087               	movwf	7
 25263  36D3  314A               	addfsr 1,10
 25264  36D4  3000               	movlw	0
 25265  36D5  3FC0               	movwi [0]fsr1
 25266  36D6  3FC1               	movwi [1]fsr1
 25267                           
 25268                           ;secret_task.c: 185: data->noholdCount = 0;
 25269  36D7  0871               	movf	secret_clear@data,w
 25270  36D8  0086               	movwf	6
 25271  36D9  0872               	movf	secret_clear@data+1,w
 25272  36DA  0087               	movwf	7
 25273  36DB  314C               	addfsr 1,12
 25274  36DC  3000               	movlw	0
 25275  36DD  3FC0               	movwi [0]fsr1
 25276  36DE  3FC1               	movwi [1]fsr1
 25277  36DF  0008               	return
 25278  36E0                     __end_of_secret_clear:	
 25279                           
 25280                           	psect	text23
 25281  1010                     __ptext23:	
 25282 ;; *************** function _secret_check *****************
 25283 ;; Defined at:
 25284 ;;		line 69 in file "secret_task.c"
 25285 ;; Parameters:    Size  Location     Type
 25286 ;;  data            2    7[COMMON] PTR struct t_secret_task
 25287 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25288 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25289 ;;  buttonPresse    1    9[COMMON] unsigned char 
 25290 ;; Auto vars:     Size  Location     Type
 25291 ;;  i               2    8[BANK0 ] unsigned int 
 25292 ;;  hit_counter     6    0        unsigned char [6]
 25293 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 25294 ;;  size            2    3[BANK0 ] unsigned int 
 25295 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 25296 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), 
 25297 ;; Return value:  Size  Location     Type
 25298 ;;                  1    wreg      unsigned char 
 25299 ;; Registers used:
 25300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25301 ;; Tracked objects:
 25302 ;;		On entry : 0/0
 25303 ;;		On exit  : 0/0
 25304 ;;		Unchanged: 0/0
 25305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25306 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25307 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25308 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25309 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25310 ;;Total ram usage:       13 bytes
 25311 ;; Hardware stack levels used:    1
 25312 ;; Hardware stack levels required when called:    5
 25313 ;; This function calls:
 25314 ;;		___bmul
 25315 ;;		_strlen
 25316 ;; This function is called by:
 25317 ;;		_secret_Main
 25318 ;; This function uses a non-reentrant model
 25319 ;;
 25320                           
 25321                           
 25322                           ;psect for function _secret_check
 25323  1010                     _secret_check:	
 25324                           
 25325                           ;secret_task.c: 70: u8 *inputs;
 25326                           ;secret_task.c: 71: u16 size = sizeof(secret_inputs) / sizeof(secret_inputs[0]);
 25327                           
 25328                           ;incstack = 0
 25329                           ; Regs used in _secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25330  1010  3001               	movlw	1
 25331  1011  0020               	movlb	0	; select bank0
 25332  1012  00A3               	movwf	secret_check@size
 25333  1013  3000               	movlw	0
 25334  1014  00A4               	movwf	secret_check@size+1
 25335                           
 25336                           ;secret_task.c: 72: u16 currents_size;
 25337                           ;secret_task.c: 73: char hit_counter[6];
 25338                           ;secret_task.c: 75: for (u16 i = 0; i < size; i++){
 25339  1015  01A8               	clrf	secret_check@i
 25340  1016  01A9               	clrf	secret_check@i+1
 25341  1017                     l8869:	
 25342  1017  0824               	movf	secret_check@size+1,w
 25343  1018  0229               	subwf	secret_check@i+1,w
 25344  1019  1D03               	skipz
 25345  101A  281D               	goto	u5485
 25346  101B  0823               	movf	secret_check@size,w
 25347  101C  0228               	subwf	secret_check@i,w
 25348  101D                     u5485:	
 25349  101D  1803               	btfsc	3,0
 25350  101E  28C9               	goto	l8871
 25351                           
 25352                           ;secret_task.c: 76: inputs = secret_inputs[i].inputs;
 25353  101F  3019               	movlw	25
 25354  1020  00A0               	movwf	??_secret_check
 25355  1021  0820               	movf	??_secret_check,w
 25356  1022  00F1               	movwf	___bmul@multiplicand
 25357  1023  0828               	movf	secret_check@i,w
 25358  1024  31B3  2366  3190   	fcall	___bmul
 25359  1027  3E34               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25360  1028  0020               	movlb	0	; select bank0
 25361  1029  00A1               	movwf	??_secret_check+1
 25362  102A  0821               	movf	??_secret_check+1,w
 25363  102B  00A7               	movwf	secret_check@inputs
 25364                           
 25365                           ;secret_task.c: 78: if (buttonPressed == inputs[secret_inputs[i].idx]){
 25366  102C  3019               	movlw	25
 25367  102D  00A0               	movwf	??_secret_check
 25368  102E  0820               	movf	??_secret_check,w
 25369  102F  00F1               	movwf	___bmul@multiplicand
 25370  1030  0828               	movf	secret_check@i,w
 25371  1031  31B3  2366  3190   	fcall	___bmul
 25372  1034  3E14               	addlw	20
 25373  1035  3E34               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25374  1036  0086               	movwf	6
 25375  1037  3002               	movlw	2	; select bank4/5
 25376  1038  0087               	movwf	7
 25377  1039  0801               	movf	1,w
 25378  103A  0020               	movlb	0	; select bank0
 25379  103B  0727               	addwf	secret_check@inputs,w
 25380  103C  00A1               	movwf	??_secret_check+1
 25381  103D  0821               	movf	??_secret_check+1,w
 25382  103E  0086               	movwf	6
 25383  103F  3002               	movlw	2	; select bank4/5
 25384  1040  0087               	movwf	7
 25385  1041  0801               	movf	1,w
 25386  1042  0679               	xorwf	secret_check@buttonPressed,w
 25387  1043  1D03               	skipz
 25388  1044  28B2               	goto	l8865
 25389                           
 25390                           ;secret_task.c: 79: currents_size = strlen((const char *)inputs);
 25391  1045  0827               	movf	secret_check@inputs,w
 25392  1046  00F1               	movwf	strlen@s
 25393  1047  3002               	movlw	2
 25394  1048  00F2               	movwf	strlen@s+1
 25395  1049  31B4  24D8  3190   	fcall	_strlen
 25396  104C  0872               	movf	?_strlen+1,w
 25397  104D  0020               	movlb	0	; select bank0
 25398  104E  00A6               	movwf	secret_check@currents_size+1
 25399  104F  0871               	movf	?_strlen,w
 25400  1050  00A5               	movwf	secret_check@currents_size
 25401                           
 25402                           ;secret_task.c: 80: secret_inputs[i].idx++;
 25403  1051  3019               	movlw	25
 25404  1052  00A0               	movwf	??_secret_check
 25405  1053  0820               	movf	??_secret_check,w
 25406  1054  00F1               	movwf	___bmul@multiplicand
 25407  1055  0828               	movf	secret_check@i,w
 25408  1056  31B3  2366  3190   	fcall	___bmul
 25409  1059  3E14               	addlw	20
 25410  105A  3E34               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25411  105B  0086               	movwf	6
 25412  105C  3002               	movlw	2	; select bank4/5
 25413  105D  0087               	movwf	7
 25414  105E  3001               	movlw	1
 25415  105F  0781               	addwf	1,f
 25416  1060  3141               	addfsr 1,1
 25417  1061  1803               	skipnc
 25418  1062  0A81               	incf	1,f
 25419                           
 25420                           ;secret_task.c: 82: if (secret_inputs[i].idx == currents_size) {
 25421  1063  3019               	movlw	25
 25422  1064  0020               	movlb	0	; select bank0
 25423  1065  00A0               	movwf	??_secret_check
 25424  1066  0820               	movf	??_secret_check,w
 25425  1067  00F1               	movwf	___bmul@multiplicand
 25426  1068  0828               	movf	secret_check@i,w
 25427  1069  31B3  2366  3190   	fcall	___bmul
 25428  106C  3E14               	addlw	20
 25429  106D  3E34               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25430  106E  0086               	movwf	6
 25431  106F  3002               	movlw	2	; select bank4/5
 25432  1070  0087               	movwf	7
 25433  1071  3F40               	moviw [0]fsr1
 25434  1072  0020               	movlb	0	; select bank0
 25435  1073  00A1               	movwf	??_secret_check+1
 25436  1074  3F41               	moviw [1]fsr1
 25437  1075  00A2               	movwf	??_secret_check+2
 25438  1076  0826               	movf	secret_check@currents_size+1,w
 25439  1077  0622               	xorwf	??_secret_check+2,w
 25440  1078  1D03               	skipz
 25441  1079  287C               	goto	u5475
 25442  107A  0825               	movf	secret_check@currents_size,w
 25443  107B  0621               	xorwf	??_secret_check+1,w
 25444  107C                     u5475:	
 25445  107C  1D03               	skipz
 25446  107D  28C3               	goto	l8867
 25447                           
 25448                           ;secret_task.c: 84: secret_inputs[i].idx = 0;
 25449  107E  3019               	movlw	25
 25450  107F  00A0               	movwf	??_secret_check
 25451  1080  0820               	movf	??_secret_check,w
 25452  1081  00F1               	movwf	___bmul@multiplicand
 25453  1082  0828               	movf	secret_check@i,w
 25454  1083  31B3  2366  3190   	fcall	___bmul
 25455  1086  3E14               	addlw	20
 25456  1087  3E34               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25457  1088  0086               	movwf	6
 25458  1089  3002               	movlw	2	; select bank4/5
 25459  108A  0087               	movwf	7
 25460  108B  3000               	movlw	0
 25461  108C  3FC0               	movwi [0]fsr1
 25462  108D  3FC1               	movwi [1]fsr1
 25463                           
 25464                           ;secret_task.c: 87: *(secret_inputs[i].variable) = (u16) secret_inputs[i].value;
 25465  108E  3019               	movlw	25
 25466  108F  0020               	movlb	0	; select bank0
 25467  1090  00A0               	movwf	??_secret_check
 25468  1091  0820               	movf	??_secret_check,w
 25469  1092  00F1               	movwf	___bmul@multiplicand
 25470  1093  0828               	movf	secret_check@i,w
 25471  1094  31B3  2366  3190   	fcall	___bmul
 25472  1097  3E17               	addlw	23
 25473  1098  3E34               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25474  1099  0086               	movwf	6
 25475  109A  3002               	movlw	2	; select bank4/5
 25476  109B  0087               	movwf	7
 25477  109C  3019               	movlw	25
 25478  109D  0020               	movlb	0	; select bank0
 25479  109E  00A1               	movwf	??_secret_check+1
 25480  109F  0821               	movf	??_secret_check+1,w
 25481  10A0  00F1               	movwf	___bmul@multiplicand
 25482  10A1  0828               	movf	secret_check@i,w
 25483  10A2  31B3  2366         	fcall	___bmul
 25484  10A4  3E16               	addlw	22
 25485  10A5  3E34               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25486  10A6  0084               	movwf	4
 25487  10A7  3002               	movlw	2	; select bank4/5
 25488  10A8  0085               	movwf	5
 25489  10A9  0800               	movf	0,w
 25490  10AA  0084               	movwf	4
 25491  10AB  0185               	clrf	5
 25492  10AC  3F40               	moviw [0]fsr1
 25493  10AD  3F80               	movwi [0]fsr0
 25494  10AE  3F41               	moviw [1]fsr1
 25495  10AF  3F81               	movwi [1]fsr0
 25496                           
 25497                           ;secret_task.c: 89: return 1;
 25498  10B0  3001               	movlw	1
 25499  10B1  0008               	return
 25500  10B2                     l8865:	
 25501                           ;secret_task.c: 90: }
 25502                           ;secret_task.c: 91: } else {
 25503                           
 25504                           
 25505                           ;secret_task.c: 93: secret_inputs[i].idx = 0;
 25506  10B2  3019               	movlw	25
 25507  10B3  0020               	movlb	0	; select bank0
 25508  10B4  00A0               	movwf	??_secret_check
 25509  10B5  0820               	movf	??_secret_check,w
 25510  10B6  00F1               	movwf	___bmul@multiplicand
 25511  10B7  0828               	movf	secret_check@i,w
 25512  10B8  31B3  2366  3190   	fcall	___bmul
 25513  10BB  3E14               	addlw	20
 25514  10BC  3E34               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25515  10BD  0086               	movwf	6
 25516  10BE  3002               	movlw	2	; select bank4/5
 25517  10BF  0087               	movwf	7
 25518  10C0  3000               	movlw	0
 25519  10C1  3FC0               	movwi [0]fsr1
 25520  10C2  3FC1               	movwi [1]fsr1
 25521  10C3                     l8867:	
 25522  10C3  3001               	movlw	1
 25523  10C4  0020               	movlb	0	; select bank0
 25524  10C5  07A8               	addwf	secret_check@i,f
 25525  10C6  3000               	movlw	0
 25526  10C7  3DA9               	addwfc	secret_check@i+1,f
 25527  10C8  2817               	goto	l8869
 25528  10C9                     l8871:	
 25529                           
 25530                           ;secret_task.c: 94: }
 25531                           ;secret_task.c: 95: }
 25532                           ;secret_task.c: 96: return 0;
 25533  10C9  3000               	movlw	0
 25534  10CA  0008               	return
 25535  10CB                     __end_of_secret_check:	
 25536                           
 25537                           	psect	text24
 25538  2B11                     __ptext24:	
 25539 ;; *************** function _menu_run_option *****************
 25540 ;; Defined at:
 25541 ;;		line 185 in file "menu_task.c"
 25542 ;; Parameters:    Size  Location     Type
 25543 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 25544 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25545 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25546 ;; Auto vars:     Size  Location     Type
 25547 ;;		None
 25548 ;; Return value:  Size  Location     Type
 25549 ;;                  1    wreg      void 
 25550 ;; Registers used:
 25551 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25552 ;; Tracked objects:
 25553 ;;		On entry : 0/0
 25554 ;;		On exit  : 0/0
 25555 ;;		Unchanged: 0/0
 25556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25557 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25561 ;;Total ram usage:        2 bytes
 25562 ;; Hardware stack levels used:    1
 25563 ;; Hardware stack levels required when called:   11
 25564 ;; This function calls:
 25565 ;;		_menu_clear
 25566 ;; This function is called by:
 25567 ;;		_menu_Main
 25568 ;; This function uses a non-reentrant model
 25569 ;;
 25570                           
 25571                           
 25572                           ;psect for function _menu_run_option
 25573  2B11                     _menu_run_option:	
 25574                           
 25575                           ;menu_task.c: 186: switch (menu_option_idx){
 25576                           
 25577                           ;incstack = 0
 25578                           ; Regs used in _menu_run_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25579  2B11  2B46               	goto	l8625
 25580  2B12                     l8607:	
 25581                           ;menu_task.c: 187: case 1:
 25582                           
 25583                           
 25584                           ;menu_task.c: 188: menu_clear(data);
 25585  2B12  0020               	movlb	0	; select bank0
 25586  2B13  083C               	movf	menu_run_option@data+1,w
 25587  2B14  00BA               	movwf	menu_clear@data+1
 25588  2B15  083B               	movf	menu_run_option@data,w
 25589  2B16  00B9               	movwf	menu_clear@data
 25590  2B17  31AA  2239         	fcall	_menu_clear
 25591                           
 25592                           ;menu_task.c: 189: currentTask = SLOT_TASK;
 25593  2B19  3001               	movlw	1
 25594  2B1A  0021               	movlb	1	; select bank1
 25595  2B1B  00BA               	movwf	_currentTask^(0+128)
 25596  2B1C  3000               	movlw	0
 25597  2B1D  00BB               	movwf	(_currentTask^(0+128)+1)
 25598                           
 25599                           ;menu_task.c: 190: break;
 25600  2B1E  0008               	return
 25601  2B1F                     l8611:	
 25602                           ;menu_task.c: 191: case 2:
 25603                           
 25604                           
 25605                           ;menu_task.c: 192: menu_clear(data);
 25606  2B1F  0020               	movlb	0	; select bank0
 25607  2B20  083C               	movf	menu_run_option@data+1,w
 25608  2B21  00BA               	movwf	menu_clear@data+1
 25609  2B22  083B               	movf	menu_run_option@data,w
 25610  2B23  00B9               	movwf	menu_clear@data
 25611  2B24  31AA  2239         	fcall	_menu_clear
 25612                           
 25613                           ;menu_task.c: 193: currentTask = LOCKED_TASK;
 25614  2B26  3003               	movlw	3
 25615  2B27  0021               	movlb	1	; select bank1
 25616  2B28  00BA               	movwf	_currentTask^(0+128)
 25617  2B29  3000               	movlw	0
 25618  2B2A  00BB               	movwf	(_currentTask^(0+128)+1)
 25619                           
 25620                           ;menu_task.c: 194: break;
 25621  2B2B  0008               	return
 25622  2B2C                     l8615:	
 25623                           ;menu_task.c: 195: case 4:
 25624                           
 25625                           
 25626                           ;menu_task.c: 196: menu_clear(data);
 25627  2B2C  0020               	movlb	0	; select bank0
 25628  2B2D  083C               	movf	menu_run_option@data+1,w
 25629  2B2E  00BA               	movwf	menu_clear@data+1
 25630  2B2F  083B               	movf	menu_run_option@data,w
 25631  2B30  00B9               	movwf	menu_clear@data
 25632  2B31  31AA  2239         	fcall	_menu_clear
 25633                           
 25634                           ;menu_task.c: 197: currentTask = FLASHY_TASK;
 25635  2B33  3002               	movlw	2
 25636  2B34  0021               	movlb	1	; select bank1
 25637  2B35  00BA               	movwf	_currentTask^(0+128)
 25638  2B36  3000               	movlw	0
 25639  2B37  00BB               	movwf	(_currentTask^(0+128)+1)
 25640                           
 25641                           ;menu_task.c: 198: break;
 25642  2B38  0008               	return
 25643  2B39                     l8619:	
 25644                           ;menu_task.c: 199: case 3:
 25645                           
 25646                           
 25647                           ;menu_task.c: 200: menu_clear(data);
 25648  2B39  0020               	movlb	0	; select bank0
 25649  2B3A  083C               	movf	menu_run_option@data+1,w
 25650  2B3B  00BA               	movwf	menu_clear@data+1
 25651  2B3C  083B               	movf	menu_run_option@data,w
 25652  2B3D  00B9               	movwf	menu_clear@data
 25653  2B3E  31AA  2239         	fcall	_menu_clear
 25654                           
 25655                           ;menu_task.c: 201: currentTask = MATRIX_TASK;
 25656  2B40  3004               	movlw	4
 25657  2B41  0021               	movlb	1	; select bank1
 25658  2B42  00BA               	movwf	_currentTask^(0+128)
 25659  2B43  3000               	movlw	0
 25660  2B44  00BB               	movwf	(_currentTask^(0+128)+1)
 25661                           
 25662                           ;menu_task.c: 203: }
 25663                           
 25664                           ;menu_task.c: 202: break;
 25665  2B45  0008               	return
 25666  2B46                     l8625:	
 25667                           
 25668                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 25669                           ; Switch size 1, requested type "space"
 25670                           ; Number of cases is 1, Range of values is 0 to 0
 25671                           ; switch strategies available:
 25672                           ; Name         Instructions Cycles
 25673                           ; simple_byte            4     3 (average)
 25674                           ; direct_byte            8     6 (fixed)
 25675                           ; jumptable            260     6 (fixed)
 25676                           ;	Chosen strategy is simple_byte
 25677  2B46  0021               	movlb	1	; select bank1
 25678  2B47  0837               	movf	(_menu_option_idx+1)^(0+128),w
 25679  2B48  3A00               	xorlw	0	; case 0
 25680  2B49  1903               	skipnz
 25681  2B4A  2B4C               	goto	l10833
 25682  2B4B  2B5A               	goto	l1010
 25683  2B4C                     l10833:	
 25684                           
 25685                           ; Switch size 1, requested type "space"
 25686                           ; Number of cases is 4, Range of values is 1 to 4
 25687                           ; switch strategies available:
 25688                           ; Name         Instructions Cycles
 25689                           ; simple_byte           13     7 (average)
 25690                           ; direct_byte           17     9 (fixed)
 25691                           ; jumptable            263     9 (fixed)
 25692                           ;	Chosen strategy is simple_byte
 25693  2B4C  0836               	movf	_menu_option_idx^(0+128),w
 25694  2B4D  3A01               	xorlw	1	; case 1
 25695  2B4E  1903               	skipnz
 25696  2B4F  2B12               	goto	l8607
 25697  2B50  3A03               	xorlw	3	; case 2
 25698  2B51  1903               	skipnz
 25699  2B52  2B1F               	goto	l8611
 25700  2B53  3A01               	xorlw	1	; case 3
 25701  2B54  1903               	skipnz
 25702  2B55  2B39               	goto	l8619
 25703  2B56  3A07               	xorlw	7	; case 4
 25704  2B57  1903               	skipnz
 25705  2B58  2B2C               	goto	l8615
 25706  2B59  2B5A               	goto	l1010
 25707  2B5A                     l1010:	
 25708  2B5A  0008               	return
 25709  2B5B                     __end_of_menu_run_option:	
 25710                           
 25711                           	psect	text25
 25712  2A39                     __ptext25:	
 25713 ;; *************** function _menu_clear *****************
 25714 ;; Defined at:
 25715 ;;		line 206 in file "menu_task.c"
 25716 ;; Parameters:    Size  Location     Type
 25717 ;;  data            2   25[BANK0 ] PTR struct t_menu_taskDa
 25718 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25719 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25720 ;; Auto vars:     Size  Location     Type
 25721 ;;		None
 25722 ;; Return value:  Size  Location     Type
 25723 ;;                  1    wreg      void 
 25724 ;; Registers used:
 25725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25726 ;; Tracked objects:
 25727 ;;		On entry : 0/0
 25728 ;;		On exit  : 0/0
 25729 ;;		Unchanged: 0/0
 25730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25731 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25734 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25735 ;;Total ram usage:        2 bytes
 25736 ;; Hardware stack levels used:    1
 25737 ;; Hardware stack levels required when called:   10
 25738 ;; This function calls:
 25739 ;;		_nullifyBadge_segDisplayErase
 25740 ;;		_nullifyBadge_userLedsClr
 25741 ;; This function is called by:
 25742 ;;		_menu_Main
 25743 ;;		_menu_run_option
 25744 ;; This function uses a non-reentrant model
 25745 ;;
 25746                           
 25747                           
 25748                           ;psect for function _menu_clear
 25749  2A39                     _menu_clear:	
 25750                           
 25751                           ;menu_task.c: 208: data->delayTickCount = 50;
 25752                           
 25753                           ;incstack = 0
 25754                           ; Regs used in _menu_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25755  2A39  0020               	movlb	0	; select bank0
 25756  2A3A  0839               	movf	menu_clear@data,w
 25757  2A3B  0086               	movwf	6
 25758  2A3C  083A               	movf	menu_clear@data+1,w
 25759  2A3D  0087               	movwf	7
 25760  2A3E  3142               	addfsr 1,2
 25761  2A3F  3032               	movlw	50
 25762  2A40  3FC0               	movwi [0]fsr1
 25763  2A41  3000               	movlw	0
 25764  2A42  3FC1               	movwi [1]fsr1
 25765                           
 25766                           ;menu_task.c: 209: data->holdCountA = 0;
 25767  2A43  0839               	movf	menu_clear@data,w
 25768  2A44  0086               	movwf	6
 25769  2A45  083A               	movf	menu_clear@data+1,w
 25770  2A46  0087               	movwf	7
 25771  2A47  3144               	addfsr 1,4
 25772  2A48  3000               	movlw	0
 25773  2A49  3FC0               	movwi [0]fsr1
 25774  2A4A  3FC1               	movwi [1]fsr1
 25775                           
 25776                           ;menu_task.c: 210: data->holdCountB = 0;
 25777  2A4B  0839               	movf	menu_clear@data,w
 25778  2A4C  0086               	movwf	6
 25779  2A4D  083A               	movf	menu_clear@data+1,w
 25780  2A4E  0087               	movwf	7
 25781  2A4F  3146               	addfsr 1,6
 25782  2A50  3000               	movlw	0
 25783  2A51  3FC0               	movwi [0]fsr1
 25784  2A52  3FC1               	movwi [1]fsr1
 25785                           
 25786                           ;menu_task.c: 211: data->holdCountX = 0;
 25787  2A53  0839               	movf	menu_clear@data,w
 25788  2A54  0086               	movwf	6
 25789  2A55  083A               	movf	menu_clear@data+1,w
 25790  2A56  0087               	movwf	7
 25791  2A57  3148               	addfsr 1,8
 25792  2A58  3000               	movlw	0
 25793  2A59  3FC0               	movwi [0]fsr1
 25794  2A5A  3FC1               	movwi [1]fsr1
 25795                           
 25796                           ;menu_task.c: 212: data->holdCountY = 0;
 25797  2A5B  0839               	movf	menu_clear@data,w
 25798  2A5C  0086               	movwf	6
 25799  2A5D  083A               	movf	menu_clear@data+1,w
 25800  2A5E  0087               	movwf	7
 25801  2A5F  314A               	addfsr 1,10
 25802  2A60  3000               	movlw	0
 25803  2A61  3FC0               	movwi [0]fsr1
 25804  2A62  3FC1               	movwi [1]fsr1
 25805                           
 25806                           ;menu_task.c: 213: data->noholdCount = 0;
 25807  2A63  0839               	movf	menu_clear@data,w
 25808  2A64  0086               	movwf	6
 25809  2A65  083A               	movf	menu_clear@data+1,w
 25810  2A66  0087               	movwf	7
 25811  2A67  314C               	addfsr 1,12
 25812  2A68  3000               	movlw	0
 25813  2A69  3FC0               	movwi [0]fsr1
 25814  2A6A  3FC1               	movwi [1]fsr1
 25815                           
 25816                           ;menu_task.c: 215: menu_option_idx = 0;
 25817  2A6B  0021               	movlb	1	; select bank1
 25818  2A6C  01B6               	clrf	_menu_option_idx^(0+128)
 25819  2A6D  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 25820                           
 25821                           ;menu_task.c: 218: nullifyBadge_userLedsClr(data->badge);
 25822  2A6E  0020               	movlb	0	; select bank0
 25823  2A6F  0839               	movf	menu_clear@data,w
 25824  2A70  0086               	movwf	6
 25825  2A71  083A               	movf	menu_clear@data+1,w
 25826  2A72  0087               	movwf	7
 25827  2A73  0801               	movf	1,w
 25828  2A74  31B2  223A  31AA   	fcall	_nullifyBadge_userLedsClr
 25829                           
 25830                           ;menu_task.c: 219: nullifyBadge_segDisplayErase(data->badge);
 25831  2A77  0020               	movlb	0	; select bank0
 25832  2A78  0839               	movf	menu_clear@data,w
 25833  2A79  0086               	movwf	6
 25834  2A7A  083A               	movf	menu_clear@data+1,w
 25835  2A7B  0087               	movwf	7
 25836  2A7C  0801               	movf	1,w
 25837  2A7D  31B2  2234         	fcall	_nullifyBadge_segDisplayErase
 25838  2A7F  0008               	return
 25839  2A80                     __end_of_menu_clear:	
 25840                           
 25841                           	psect	text26
 25842  2DA0                     __ptext26:	
 25843 ;; *************** function _menu_display_option *****************
 25844 ;; Defined at:
 25845 ;;		line 166 in file "menu_task.c"
 25846 ;; Parameters:    Size  Location     Type
 25847 ;;  data            2   44[BANK0 ] PTR struct t_menu_taskDa
 25848 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25849 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25850 ;; Auto vars:     Size  Location     Type
 25851 ;;  led             2   48[BANK0 ] unsigned int 
 25852 ;;  size            2   46[BANK0 ] unsigned int 
 25853 ;; Return value:  Size  Location     Type
 25854 ;;                  1    wreg      void 
 25855 ;; Registers used:
 25856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25857 ;; Tracked objects:
 25858 ;;		On entry : 0/0
 25859 ;;		On exit  : 0/0
 25860 ;;		Unchanged: 0/0
 25861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25862 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25863 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25865 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25866 ;;Total ram usage:        6 bytes
 25867 ;; Hardware stack levels used:    1
 25868 ;; Hardware stack levels required when called:   10
 25869 ;; This function calls:
 25870 ;;		___lwmod
 25871 ;;		_marquee
 25872 ;;		_nullifyBadge_segDisplayForceUpdate
 25873 ;;		_nullifyBadge_segDisplayPutStr
 25874 ;;		_nullifyBadge_userLedsSet
 25875 ;; This function is called by:
 25876 ;;		_menu_Main
 25877 ;; This function uses a non-reentrant model
 25878 ;;
 25879                           
 25880                           
 25881                           ;psect for function _menu_display_option
 25882  2DA0                     _menu_display_option:	
 25883                           
 25884                           ;menu_task.c: 167: u16 size = sizeof(menu_options_leds)/sizeof(menu_options_leds[0]);
 25885                           
 25886                           ;incstack = 0
 25887                           ; Regs used in _menu_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25888  2DA0  3005               	movlw	5
 25889  2DA1  0020               	movlb	0	; select bank0
 25890  2DA2  00CE               	movwf	menu_display_option@size
 25891  2DA3  3000               	movlw	0
 25892  2DA4  00CF               	movwf	menu_display_option@size+1
 25893                           
 25894                           ;menu_task.c: 168: u16 led = menu_options_leds[menu_option_idx % size];
 25895  2DA5  084F               	movf	menu_display_option@size+1,w
 25896  2DA6  00AC               	movwf	___lwmod@divisor+1
 25897  2DA7  084E               	movf	menu_display_option@size,w
 25898  2DA8  00AB               	movwf	___lwmod@divisor
 25899  2DA9  0021               	movlb	1	; select bank1
 25900  2DAA  0837               	movf	(_menu_option_idx+1)^(0+128),w
 25901  2DAB  0020               	movlb	0	; select bank0
 25902  2DAC  00AE               	movwf	___lwmod@dividend+1
 25903  2DAD  0021               	movlb	1	; select bank1
 25904  2DAE  0836               	movf	_menu_option_idx^(0+128),w
 25905  2DAF  0020               	movlb	0	; select bank0
 25906  2DB0  00AD               	movwf	___lwmod@dividend
 25907  2DB1  31B5  25EF  31AD   	fcall	___lwmod
 25908  2DB4  0020               	movlb	0	; select bank0
 25909  2DB5  082B               	movf	?___lwmod,w
 25910  2DB6  0709               	addwf	9,w
 25911  2DB7  3E20               	addlw	(low (_menu_options_leds| (0+512)))& (0+255)
 25912  2DB8  0086               	movwf	6
 25913  2DB9  3002               	movlw	2	; select bank4/5
 25914  2DBA  0087               	movwf	7
 25915  2DBB  3F40               	moviw [0]fsr1
 25916  2DBC  00D0               	movwf	menu_display_option@led
 25917  2DBD  3F41               	moviw [1]fsr1
 25918  2DBE  00D1               	movwf	menu_display_option@led+1
 25919                           
 25920                           ;menu_task.c: 174: nullifyBadge_userLedsSet(data->badge, led);
 25921  2DBF  0851               	movf	menu_display_option@led+1,w
 25922  2DC0  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 25923  2DC1  0850               	movf	menu_display_option@led,w
 25924  2DC2  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 25925  2DC3  084C               	movf	menu_display_option@data,w
 25926  2DC4  0086               	movwf	6
 25927  2DC5  084D               	movf	menu_display_option@data+1,w
 25928  2DC6  0087               	movwf	7
 25929  2DC7  0801               	movf	1,w
 25930  2DC8  31B3  2355  31AD   	fcall	_nullifyBadge_userLedsSet
 25931                           
 25932                           ;menu_task.c: 176: if (menu_option_idx == 0){
 25933  2DCB  0021               	movlb	1	; select bank1
 25934  2DCC  0836               	movf	_menu_option_idx^(0+128),w
 25935  2DCD  0437               	iorwf	(_menu_option_idx+1)^(0+128),w
 25936  2DCE  1D03               	btfss	3,2
 25937  2DCF  2DEB               	goto	l8603
 25938                           
 25939                           ;menu_task.c: 177: nullifyBadge_segDisplayPutStr(data->badge, menu_option[menu_option_id
      +                          x]);
 25940  2DD0  3536               	lslf	_menu_option_idx^(0+128),w
 25941  2DD1  3E2A               	addlw	(low (_menu_option| (0+512)))& (0+255)
 25942  2DD2  0086               	movwf	6
 25943  2DD3  3002               	movlw	2	; select bank4/5
 25944  2DD4  0087               	movwf	7
 25945  2DD5  3F40               	moviw [0]fsr1
 25946  2DD6  0020               	movlb	0	; select bank0
 25947  2DD7  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 25948  2DD8  3F41               	moviw [1]fsr1
 25949  2DD9  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 25950  2DDA  084C               	movf	menu_display_option@data,w
 25951  2DDB  0086               	movwf	6
 25952  2DDC  084D               	movf	menu_display_option@data+1,w
 25953  2DDD  0087               	movwf	7
 25954  2DDE  0801               	movf	1,w
 25955  2DDF  31B2  227D  31AD   	fcall	_nullifyBadge_segDisplayPutStr
 25956                           
 25957                           ;menu_task.c: 178: nullifyBadge_segDisplayForceUpdate(data->badge);
 25958  2DE2  0020               	movlb	0	; select bank0
 25959  2DE3  084C               	movf	menu_display_option@data,w
 25960  2DE4  0086               	movwf	6
 25961  2DE5  084D               	movf	menu_display_option@data+1,w
 25962  2DE6  0087               	movwf	7
 25963  2DE7  0801               	movf	1,w
 25964  2DE8  31B2  222E         	fcall	_nullifyBadge_segDisplayForceUpdate
 25965                           
 25966                           ;menu_task.c: 179: }
 25967  2DEA  0008               	return
 25968  2DEB                     l8603:	
 25969                           
 25970                           ;menu_task.c: 180: else {
 25971                           ;menu_task.c: 181: marquee(menu_option[menu_option_idx], data->noholdCount);
 25972  2DEB  0021               	movlb	1	; select bank1
 25973  2DEC  3536               	lslf	_menu_option_idx^(0+128),w
 25974  2DED  3E2A               	addlw	(low (_menu_option| (0+512)))& (0+255)
 25975  2DEE  0086               	movwf	6
 25976  2DEF  3002               	movlw	2	; select bank4/5
 25977  2DF0  0087               	movwf	7
 25978  2DF1  3F40               	moviw [0]fsr1
 25979  2DF2  0020               	movlb	0	; select bank0
 25980  2DF3  00BA               	movwf	marquee@string
 25981  2DF4  3F41               	moviw [1]fsr1
 25982  2DF5  00BB               	movwf	marquee@string+1
 25983  2DF6  084C               	movf	menu_display_option@data,w
 25984  2DF7  0086               	movwf	6
 25985  2DF8  084D               	movf	menu_display_option@data+1,w
 25986  2DF9  0087               	movwf	7
 25987  2DFA  314C               	addfsr 1,12
 25988  2DFB  3F40               	moviw [0]fsr1
 25989  2DFC  00BC               	movwf	marquee@count
 25990  2DFD  3F41               	moviw [1]fsr1
 25991  2DFE  00BD               	movwf	marquee@count+1
 25992  2DFF  31A2  22D2         	fcall	_marquee
 25993  2E01  0008               	return
 25994  2E02                     __end_of_menu_display_option:	
 25995                           
 25996                           	psect	text27
 25997  2645                     __ptext27:	
 25998 ;; *************** function _matrix_secret_check *****************
 25999 ;; Defined at:
 26000 ;;		line 94 in file "matrix_task.c"
 26001 ;; Parameters:    Size  Location     Type
 26002 ;;  data            2    7[COMMON] PTR struct t_matrix_task
 26003 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26004 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26005 ;;  buttonPresse    1    9[COMMON] unsigned char 
 26006 ;; Auto vars:     Size  Location     Type
 26007 ;;  i               2    8[BANK0 ] unsigned int 
 26008 ;;  hit_counter     6    0        unsigned char [6]
 26009 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 26010 ;;  size            2    3[BANK0 ] unsigned int 
 26011 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 26012 ;;		 -> matrix_secret_inputs.inputs(20), matrix_secret_inputs(25), 
 26013 ;; Return value:  Size  Location     Type
 26014 ;;                  1    wreg      unsigned char 
 26015 ;; Registers used:
 26016 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26017 ;; Tracked objects:
 26018 ;;		On entry : 0/0
 26019 ;;		On exit  : 0/0
 26020 ;;		Unchanged: 0/0
 26021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26022 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26023 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26024 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26025 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26026 ;;Total ram usage:       13 bytes
 26027 ;; Hardware stack levels used:    1
 26028 ;; Hardware stack levels required when called:    5
 26029 ;; This function calls:
 26030 ;;		___bmul
 26031 ;;		_strlen
 26032 ;; This function is called by:
 26033 ;;		_matrix_Main
 26034 ;; This function uses a non-reentrant model
 26035 ;;
 26036                           
 26037                           
 26038                           ;psect for function _matrix_secret_check
 26039  2645                     _matrix_secret_check:	
 26040                           
 26041                           ;matrix_task.c: 95: u8 *inputs;
 26042                           ;matrix_task.c: 96: u16 size = sizeof(matrix_secret_inputs) / sizeof(matrix_secret_input
      +                          s[0]);
 26043                           
 26044                           ;incstack = 0
 26045                           ; Regs used in _matrix_secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26046  2645  3001               	movlw	1
 26047  2646  0020               	movlb	0	; select bank0
 26048  2647  00A3               	movwf	matrix_secret_check@size
 26049  2648  3000               	movlw	0
 26050  2649  00A4               	movwf	matrix_secret_check@size+1
 26051                           
 26052                           ;matrix_task.c: 97: u16 currents_size;
 26053                           ;matrix_task.c: 98: char hit_counter[6];
 26054                           ;matrix_task.c: 100: for (u16 i = 0; i < size; i++){
 26055  264A  01A8               	clrf	matrix_secret_check@i
 26056  264B  01A9               	clrf	matrix_secret_check@i+1
 26057  264C                     l8941:	
 26058  264C  0824               	movf	matrix_secret_check@size+1,w
 26059  264D  0229               	subwf	matrix_secret_check@i+1,w
 26060  264E  1D03               	skipz
 26061  264F  2E52               	goto	u5555
 26062  2650  0823               	movf	matrix_secret_check@size,w
 26063  2651  0228               	subwf	matrix_secret_check@i,w
 26064  2652                     u5555:	
 26065  2652  1803               	btfsc	3,0
 26066  2653  2EFE               	goto	l8943
 26067                           
 26068                           ;matrix_task.c: 101: inputs = matrix_secret_inputs[i].inputs;
 26069  2654  3019               	movlw	25
 26070  2655  00A0               	movwf	??_matrix_secret_check
 26071  2656  0820               	movf	??_matrix_secret_check,w
 26072  2657  00F1               	movwf	___bmul@multiplicand
 26073  2658  0828               	movf	matrix_secret_check@i,w
 26074  2659  31B3  2366  31A6   	fcall	___bmul
 26075  265C  3ECA               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26076  265D  0020               	movlb	0	; select bank0
 26077  265E  00A1               	movwf	??_matrix_secret_check+1
 26078  265F  0821               	movf	??_matrix_secret_check+1,w
 26079  2660  00A7               	movwf	matrix_secret_check@inputs
 26080                           
 26081                           ;matrix_task.c: 103: if (buttonPressed == inputs[matrix_secret_inputs[i].idx]){
 26082  2661  3019               	movlw	25
 26083  2662  00A0               	movwf	??_matrix_secret_check
 26084  2663  0820               	movf	??_matrix_secret_check,w
 26085  2664  00F1               	movwf	___bmul@multiplicand
 26086  2665  0828               	movf	matrix_secret_check@i,w
 26087  2666  31B3  2366  31A6   	fcall	___bmul
 26088  2669  3E14               	addlw	20
 26089  266A  3ECA               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26090  266B  0086               	movwf	6
 26091  266C  3002               	movlw	2	; select bank5/6
 26092  266D  0087               	movwf	7
 26093  266E  0801               	movf	1,w
 26094  266F  0020               	movlb	0	; select bank0
 26095  2670  0727               	addwf	matrix_secret_check@inputs,w
 26096  2671  00A1               	movwf	??_matrix_secret_check+1
 26097  2672  0821               	movf	??_matrix_secret_check+1,w
 26098  2673  0086               	movwf	6
 26099  2674  3002               	movlw	2	; select bank4/5
 26100  2675  0087               	movwf	7
 26101  2676  0801               	movf	1,w
 26102  2677  0679               	xorwf	matrix_secret_check@buttonPressed,w
 26103  2678  1D03               	skipz
 26104  2679  2EE7               	goto	l8937
 26105                           
 26106                           ;matrix_task.c: 104: currents_size = strlen((const char *)inputs);
 26107  267A  0827               	movf	matrix_secret_check@inputs,w
 26108  267B  00F1               	movwf	strlen@s
 26109  267C  3002               	movlw	2
 26110  267D  00F2               	movwf	strlen@s+1
 26111  267E  31B4  24D8  31A6   	fcall	_strlen
 26112  2681  0872               	movf	?_strlen+1,w
 26113  2682  0020               	movlb	0	; select bank0
 26114  2683  00A6               	movwf	matrix_secret_check@currents_size+1
 26115  2684  0871               	movf	?_strlen,w
 26116  2685  00A5               	movwf	matrix_secret_check@currents_size
 26117                           
 26118                           ;matrix_task.c: 105: matrix_secret_inputs[i].idx++;
 26119  2686  3019               	movlw	25
 26120  2687  00A0               	movwf	??_matrix_secret_check
 26121  2688  0820               	movf	??_matrix_secret_check,w
 26122  2689  00F1               	movwf	___bmul@multiplicand
 26123  268A  0828               	movf	matrix_secret_check@i,w
 26124  268B  31B3  2366  31A6   	fcall	___bmul
 26125  268E  3E14               	addlw	20
 26126  268F  3ECA               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26127  2690  0086               	movwf	6
 26128  2691  3002               	movlw	2	; select bank5/6
 26129  2692  0087               	movwf	7
 26130  2693  3001               	movlw	1
 26131  2694  0781               	addwf	1,f
 26132  2695  3141               	addfsr 1,1
 26133  2696  1803               	skipnc
 26134  2697  0A81               	incf	1,f
 26135                           
 26136                           ;matrix_task.c: 107: if (matrix_secret_inputs[i].idx == currents_size) {
 26137  2698  3019               	movlw	25
 26138  2699  0020               	movlb	0	; select bank0
 26139  269A  00A0               	movwf	??_matrix_secret_check
 26140  269B  0820               	movf	??_matrix_secret_check,w
 26141  269C  00F1               	movwf	___bmul@multiplicand
 26142  269D  0828               	movf	matrix_secret_check@i,w
 26143  269E  31B3  2366  31A6   	fcall	___bmul
 26144  26A1  3E14               	addlw	20
 26145  26A2  3ECA               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26146  26A3  0086               	movwf	6
 26147  26A4  3002               	movlw	2	; select bank5/6
 26148  26A5  0087               	movwf	7
 26149  26A6  3F40               	moviw [0]fsr1
 26150  26A7  0020               	movlb	0	; select bank0
 26151  26A8  00A1               	movwf	??_matrix_secret_check+1
 26152  26A9  3F41               	moviw [1]fsr1
 26153  26AA  00A2               	movwf	??_matrix_secret_check+2
 26154  26AB  0826               	movf	matrix_secret_check@currents_size+1,w
 26155  26AC  0622               	xorwf	??_matrix_secret_check+2,w
 26156  26AD  1D03               	skipz
 26157  26AE  2EB1               	goto	u5545
 26158  26AF  0825               	movf	matrix_secret_check@currents_size,w
 26159  26B0  0621               	xorwf	??_matrix_secret_check+1,w
 26160  26B1                     u5545:	
 26161  26B1  1D03               	skipz
 26162  26B2  2EF8               	goto	l8939
 26163                           
 26164                           ;matrix_task.c: 109: matrix_secret_inputs[i].idx = 0;
 26165  26B3  3019               	movlw	25
 26166  26B4  00A0               	movwf	??_matrix_secret_check
 26167  26B5  0820               	movf	??_matrix_secret_check,w
 26168  26B6  00F1               	movwf	___bmul@multiplicand
 26169  26B7  0828               	movf	matrix_secret_check@i,w
 26170  26B8  31B3  2366  31A6   	fcall	___bmul
 26171  26BB  3E14               	addlw	20
 26172  26BC  3ECA               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26173  26BD  0086               	movwf	6
 26174  26BE  3002               	movlw	2	; select bank5/6
 26175  26BF  0087               	movwf	7
 26176  26C0  3000               	movlw	0
 26177  26C1  3FC0               	movwi [0]fsr1
 26178  26C2  3FC1               	movwi [1]fsr1
 26179                           
 26180                           ;matrix_task.c: 112: *(matrix_secret_inputs[i].variable) = (u16) matrix_secret_inputs[i]
      +                          .value;
 26181  26C3  3019               	movlw	25
 26182  26C4  0020               	movlb	0	; select bank0
 26183  26C5  00A0               	movwf	??_matrix_secret_check
 26184  26C6  0820               	movf	??_matrix_secret_check,w
 26185  26C7  00F1               	movwf	___bmul@multiplicand
 26186  26C8  0828               	movf	matrix_secret_check@i,w
 26187  26C9  31B3  2366  31A6   	fcall	___bmul
 26188  26CC  3E17               	addlw	23
 26189  26CD  3ECA               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26190  26CE  0086               	movwf	6
 26191  26CF  3002               	movlw	2	; select bank5/6
 26192  26D0  0087               	movwf	7
 26193  26D1  3019               	movlw	25
 26194  26D2  0020               	movlb	0	; select bank0
 26195  26D3  00A1               	movwf	??_matrix_secret_check+1
 26196  26D4  0821               	movf	??_matrix_secret_check+1,w
 26197  26D5  00F1               	movwf	___bmul@multiplicand
 26198  26D6  0828               	movf	matrix_secret_check@i,w
 26199  26D7  31B3  2366         	fcall	___bmul
 26200  26D9  3E16               	addlw	22
 26201  26DA  3ECA               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26202  26DB  0084               	movwf	4
 26203  26DC  3002               	movlw	2	; select bank5/6
 26204  26DD  0085               	movwf	5
 26205  26DE  0800               	movf	0,w
 26206  26DF  0084               	movwf	4
 26207  26E0  0185               	clrf	5
 26208  26E1  3F40               	moviw [0]fsr1
 26209  26E2  3F80               	movwi [0]fsr0
 26210  26E3  3F41               	moviw [1]fsr1
 26211  26E4  3F81               	movwi [1]fsr0
 26212                           
 26213                           ;matrix_task.c: 114: return 1;
 26214  26E5  3001               	movlw	1
 26215  26E6  0008               	return
 26216  26E7                     l8937:	
 26217                           ;matrix_task.c: 115: }
 26218                           ;matrix_task.c: 116: } else {
 26219                           
 26220                           
 26221                           ;matrix_task.c: 118: matrix_secret_inputs[i].idx = 0;
 26222  26E7  3019               	movlw	25
 26223  26E8  0020               	movlb	0	; select bank0
 26224  26E9  00A0               	movwf	??_matrix_secret_check
 26225  26EA  0820               	movf	??_matrix_secret_check,w
 26226  26EB  00F1               	movwf	___bmul@multiplicand
 26227  26EC  0828               	movf	matrix_secret_check@i,w
 26228  26ED  31B3  2366  31A6   	fcall	___bmul
 26229  26F0  3E14               	addlw	20
 26230  26F1  3ECA               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26231  26F2  0086               	movwf	6
 26232  26F3  3002               	movlw	2	; select bank5/6
 26233  26F4  0087               	movwf	7
 26234  26F5  3000               	movlw	0
 26235  26F6  3FC0               	movwi [0]fsr1
 26236  26F7  3FC1               	movwi [1]fsr1
 26237  26F8                     l8939:	
 26238  26F8  3001               	movlw	1
 26239  26F9  0020               	movlb	0	; select bank0
 26240  26FA  07A8               	addwf	matrix_secret_check@i,f
 26241  26FB  3000               	movlw	0
 26242  26FC  3DA9               	addwfc	matrix_secret_check@i+1,f
 26243  26FD  2E4C               	goto	l8941
 26244  26FE                     l8943:	
 26245                           
 26246                           ;matrix_task.c: 119: }
 26247                           ;matrix_task.c: 120: }
 26248                           ;matrix_task.c: 121: return 0;
 26249  26FE  3000               	movlw	0
 26250  26FF  0008               	return
 26251  2700                     __end_of_matrix_secret_check:	
 26252                           
 26253                           	psect	text28
 26254  24E7                     __ptext28:	
 26255 ;; *************** function _matrix_display_option *****************
 26256 ;; Defined at:
 26257 ;;		line 124 in file "matrix_task.c"
 26258 ;; Parameters:    Size  Location     Type
 26259 ;;  data            2   44[BANK0 ] PTR struct t_matrix_task
 26260 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26261 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26262 ;; Auto vars:     Size  Location     Type
 26263 ;;		None
 26264 ;; Return value:  Size  Location     Type
 26265 ;;                  1    wreg      void 
 26266 ;; Registers used:
 26267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26268 ;; Tracked objects:
 26269 ;;		On entry : 0/0
 26270 ;;		On exit  : 0/0
 26271 ;;		Unchanged: 0/0
 26272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26273 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26275 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26276 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26277 ;;Total ram usage:        4 bytes
 26278 ;; Hardware stack levels used:    1
 26279 ;; Hardware stack levels required when called:   10
 26280 ;; This function calls:
 26281 ;;		_marquee_speedy
 26282 ;; This function is called by:
 26283 ;;		_matrix_Main
 26284 ;; This function uses a non-reentrant model
 26285 ;;
 26286                           
 26287                           
 26288                           ;psect for function _matrix_display_option
 26289  24E7                     _matrix_display_option:	
 26290                           
 26291                           ;matrix_task.c: 126: if(badge_locked ==1){
 26292                           
 26293                           ;incstack = 0
 26294                           ; Regs used in _matrix_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26295  24E7  0021               	movlb	1	; select bank1
 26296  24E8  0344               	decf	_badge_locked^(0+128),w
 26297  24E9  1D03               	btfss	3,2
 26298  24EA  2D19               	goto	l8957
 26299                           
 26300                           ;matrix_task.c: 127: marquee_speedy("YOU ARE IN TOO DEEP     TAKE THE RED PILL    ", dat
      +                          a->noholdCount, 40);
 26301  24EB  302F               	movlw	low (STR_80| (0+32768))
 26302  24EC  0020               	movlb	0	; select bank0
 26303  24ED  00BA               	movwf	marquee_speedy@string
 26304  24EE  30B8               	movlw	high (STR_80| (0+32768))
 26305  24EF  00BB               	movwf	marquee_speedy@string+1
 26306  24F0  084C               	movf	matrix_display_option@data,w
 26307  24F1  0086               	movwf	6
 26308  24F2  084D               	movf	matrix_display_option@data+1,w
 26309  24F3  0087               	movwf	7
 26310  24F4  315D               	addfsr 1,29
 26311  24F5  3F40               	moviw [0]fsr1
 26312  24F6  00BC               	movwf	marquee_speedy@count
 26313  24F7  3F41               	moviw [1]fsr1
 26314  24F8  00BD               	movwf	marquee_speedy@count+1
 26315  24F9  3028               	movlw	40
 26316  24FA  00BE               	movwf	marquee_speedy@multiplier
 26317  24FB  3000               	movlw	0
 26318  24FC  00BF               	movwf	marquee_speedy@multiplier+1
 26319  24FD  31A2  225F         	fcall	_marquee_speedy
 26320                           
 26321                           ;matrix_task.c: 128: data->display_state = MATRIX_STATE_DISPLAY;
 26322  24FF  0020               	movlb	0	; select bank0
 26323  2500  084C               	movf	matrix_display_option@data,w
 26324  2501  3E02               	addlw	2
 26325  2502  00CE               	movwf	??_matrix_display_option
 26326  2503  3000               	movlw	0
 26327  2504  3D4D               	addwfc	matrix_display_option@data+1,w
 26328  2505  00CF               	movwf	??_matrix_display_option+1
 26329  2506  084E               	movf	??_matrix_display_option,w
 26330  2507  0086               	movwf	6
 26331  2508  084F               	movf	??_matrix_display_option+1,w
 26332  2509  0087               	movwf	7
 26333  250A  300A               	movlw	10
 26334  250B  0081               	movwf	1
 26335                           
 26336                           ;matrix_task.c: 129: data->martix_state = STILL_IN_MATRIX;
 26337  250C  084C               	movf	matrix_display_option@data,w
 26338  250D  3E01               	addlw	1
 26339  250E  00CE               	movwf	??_matrix_display_option
 26340  250F  3000               	movlw	0
 26341  2510  3D4D               	addwfc	matrix_display_option@data+1,w
 26342  2511  00CF               	movwf	??_matrix_display_option+1
 26343  2512  084E               	movf	??_matrix_display_option,w
 26344  2513  0086               	movwf	6
 26345  2514  084F               	movf	??_matrix_display_option+1,w
 26346  2515  0087               	movwf	7
 26347  2516  3001               	movlw	1
 26348  2517  0081               	movwf	1
 26349                           
 26350                           ;matrix_task.c: 130: return;
 26351  2518  0008               	return
 26352  2519                     l8957:	
 26353                           
 26354                           ;matrix_task.c: 131: }
 26355                           ;matrix_task.c: 133: if (data->display_state == MATRIX_DONE){
 26356  2519  0020               	movlb	0	; select bank0
 26357  251A  084C               	movf	matrix_display_option@data,w
 26358  251B  0086               	movwf	6
 26359  251C  084D               	movf	matrix_display_option@data+1,w
 26360  251D  0087               	movwf	7
 26361  251E  3142               	addfsr 1,2
 26362  251F  300B               	movlw	11
 26363  2520  0601               	xorwf	1,w
 26364  2521  1D03               	btfss	3,2
 26365  2522  2D32               	goto	l8961
 26366                           
 26367                           ;matrix_task.c: 134: marquee_speedy("YOU STAY IN WONDERLAND    ", data->noholdCount, 15)
      +                          ;
 26368  2523  308D               	movlw	low (STR_81| (0+32768))
 26369  2524  00BA               	movwf	marquee_speedy@string
 26370  2525  30B9               	movlw	high (STR_81| (0+32768))
 26371  2526  00BB               	movwf	marquee_speedy@string+1
 26372  2527  084C               	movf	matrix_display_option@data,w
 26373  2528  0086               	movwf	6
 26374  2529  084D               	movf	matrix_display_option@data+1,w
 26375  252A  0087               	movwf	7
 26376  252B  315D               	addfsr 1,29
 26377  252C  3F40               	moviw [0]fsr1
 26378  252D  00BC               	movwf	marquee_speedy@count
 26379  252E  3F41               	moviw [1]fsr1
 26380  252F  00BD               	movwf	marquee_speedy@count+1
 26381  2530  300F               	movlw	15
 26382  2531  2D64               	goto	L12
 26383  2532                     l8961:	
 26384                           ;matrix_task.c: 135: }
 26385                           
 26386                           
 26387                           ;matrix_task.c: 136: else if (data->display_state != MATRIX_STATE_DISPLAY ){
 26388  2532  0020               	movlb	0	; select bank0
 26389  2533  084C               	movf	matrix_display_option@data,w
 26390  2534  0086               	movwf	6
 26391  2535  084D               	movf	matrix_display_option@data+1,w
 26392  2536  0087               	movwf	7
 26393  2537  3142               	addfsr 1,2
 26394  2538  300A               	movlw	10
 26395  2539  0601               	xorwf	1,w
 26396  253A  1903               	btfsc	3,2
 26397  253B  2D55               	goto	l8965
 26398                           
 26399                           ;matrix_task.c: 138: marquee_speedy(matrix_option[data->display_state], data->noholdCoun
      +                          t, 20);
 26400  253C  084C               	movf	matrix_display_option@data,w
 26401  253D  0086               	movwf	6
 26402  253E  084D               	movf	matrix_display_option@data+1,w
 26403  253F  0087               	movwf	7
 26404  2540  3142               	addfsr 1,2
 26405  2541  3501               	lslf	1,w
 26406  2542  3ED8               	addlw	(low (_matrix_option| (0+768)))& (0+255)
 26407  2543  0086               	movwf	6
 26408  2544  3003               	movlw	3	; select bank7/8
 26409  2545  0087               	movwf	7
 26410  2546  3F40               	moviw [0]fsr1
 26411  2547  00BA               	movwf	marquee_speedy@string
 26412  2548  3F41               	moviw [1]fsr1
 26413  2549  00BB               	movwf	marquee_speedy@string+1
 26414  254A  084C               	movf	matrix_display_option@data,w
 26415  254B  0086               	movwf	6
 26416  254C  084D               	movf	matrix_display_option@data+1,w
 26417  254D  0087               	movwf	7
 26418  254E  315D               	addfsr 1,29
 26419  254F  3F40               	moviw [0]fsr1
 26420  2550  00BC               	movwf	marquee_speedy@count
 26421  2551  3F41               	moviw [1]fsr1
 26422  2552  00BD               	movwf	marquee_speedy@count+1
 26423  2553  3014               	movlw	20
 26424  2554  2D64               	goto	L12
 26425  2555                     l8965:	
 26426                           ;matrix_task.c: 139: }
 26427                           
 26428                           
 26429                           ;matrix_task.c: 140: else{
 26430                           ;matrix_task.c: 141: marquee_speedy("THE CHOICE IS YOURS   ", data->noholdCount, 30);
 26431  2555  30DD               	movlw	low (STR_82| (0+32768))
 26432  2556  0020               	movlb	0	; select bank0
 26433  2557  00BA               	movwf	marquee_speedy@string
 26434  2558  30B9               	movlw	high (STR_82| (0+32768))
 26435  2559  00BB               	movwf	marquee_speedy@string+1
 26436  255A  084C               	movf	matrix_display_option@data,w
 26437  255B  0086               	movwf	6
 26438  255C  084D               	movf	matrix_display_option@data+1,w
 26439  255D  0087               	movwf	7
 26440  255E  315D               	addfsr 1,29
 26441  255F  3F40               	moviw [0]fsr1
 26442  2560  00BC               	movwf	marquee_speedy@count
 26443  2561  3F41               	moviw [1]fsr1
 26444  2562  00BD               	movwf	marquee_speedy@count+1
 26445  2563  301E               	movlw	30
 26446  2564                     L12:	
 26447  2564  00BE               	movwf	marquee_speedy@multiplier
 26448  2565  3000               	movlw	0
 26449  2566  00BF               	movwf	marquee_speedy@multiplier+1
 26450  2567  31A2  225F  31A4   	fcall	_marquee_speedy
 26451                           
 26452                           ;matrix_task.c: 142: }
 26453                           ;matrix_task.c: 144: if (data -> displayTickdown == 0 && data->display_state != MATRIX_D
      +                          ONE ){
 26454  256A  0020               	movlb	0	; select bank0
 26455  256B  084C               	movf	matrix_display_option@data,w
 26456  256C  0086               	movwf	6
 26457  256D  084D               	movf	matrix_display_option@data+1,w
 26458  256E  0087               	movwf	7
 26459  256F  3147               	addfsr 1,7
 26460  2570  0016               	moviw fsr1++
 26461  2571  0401               	iorwf	1,w
 26462  2572  1D03               	btfss	3,2
 26463  2573  0008               	return
 26464  2574  084C               	movf	matrix_display_option@data,w
 26465  2575  0086               	movwf	6
 26466  2576  084D               	movf	matrix_display_option@data+1,w
 26467  2577  0087               	movwf	7
 26468  2578  3142               	addfsr 1,2
 26469  2579  300B               	movlw	11
 26470  257A  0601               	xorwf	1,w
 26471  257B  1903               	btfsc	3,2
 26472  257C  0008               	return
 26473                           
 26474                           ;matrix_task.c: 145: data->display_state = MATRIX_STATE_DISPLAY;
 26475  257D  084C               	movf	matrix_display_option@data,w
 26476  257E  3E02               	addlw	2
 26477  257F  00CE               	movwf	??_matrix_display_option
 26478  2580  3000               	movlw	0
 26479  2581  3D4D               	addwfc	matrix_display_option@data+1,w
 26480  2582  00CF               	movwf	??_matrix_display_option+1
 26481  2583  084E               	movf	??_matrix_display_option,w
 26482  2584  0086               	movwf	6
 26483  2585  084F               	movf	??_matrix_display_option+1,w
 26484  2586  0087               	movwf	7
 26485  2587  300A               	movlw	10
 26486  2588  0081               	movwf	1
 26487  2589  0008               	return
 26488  258A                     __end_of_matrix_display_option:	
 26489                           
 26490                           	psect	text29
 26491  2C47                     __ptext29:	
 26492 ;; *************** function _slot_Setup *****************
 26493 ;; Defined at:
 26494 ;;		line 48 in file "slot_task.c"
 26495 ;; Parameters:    Size  Location     Type
 26496 ;;  taskData        2   15[BANK0 ] PTR void 
 26497 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26498 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26499 ;; Auto vars:     Size  Location     Type
 26500 ;;  data            2   20[BANK0 ] PTR struct t_slot_taskDa
 26501 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26502 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26503 ;; Return value:  Size  Location     Type
 26504 ;;                  1    wreg      void 
 26505 ;; Registers used:
 26506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26507 ;; Tracked objects:
 26508 ;;		On entry : 0/0
 26509 ;;		On exit  : 0/0
 26510 ;;		Unchanged: 0/0
 26511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26512 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26513 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26514 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26515 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26516 ;;Total ram usage:        7 bytes
 26517 ;; Hardware stack levels used:    1
 26518 ;; Hardware stack levels required when called:    6
 26519 ;; This function calls:
 26520 ;;		___lwmod
 26521 ;;		_memset
 26522 ;;		_rand
 26523 ;; This function is called by:
 26524 ;;		_menu_Main
 26525 ;;		_locked_Main
 26526 ;;		_slot_Init
 26527 ;;		_slot_Main
 26528 ;; This function uses a non-reentrant model
 26529 ;;
 26530                           
 26531                           
 26532                           ;psect for function _slot_Setup
 26533  2C47                     _slot_Setup:	
 26534                           
 26535                           ;slot_task.c: 49: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 26536                           
 26537                           ;incstack = 0
 26538                           ; Regs used in _slot_Setup: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 26539  2C47  0020               	movlb	0	; select bank0
 26540  2C48  0830               	movf	slot_Setup@taskData+1,w
 26541  2C49  00B5               	movwf	slot_Setup@data+1
 26542  2C4A  082F               	movf	slot_Setup@taskData,w
 26543  2C4B  00B4               	movwf	slot_Setup@data
 26544                           
 26545                           ;slot_task.c: 50: slot_taskData = data;
 26546  2C4C  0835               	movf	slot_Setup@data+1,w
 26547  2C4D  0021               	movlb	1	; select bank1
 26548  2C4E  00BD               	movwf	(_slot_taskData+1)^(0+128)
 26549  2C4F  0020               	movlb	0	; select bank0
 26550  2C50  0834               	movf	slot_Setup@data,w
 26551  2C51  0021               	movlb	1	; select bank1
 26552  2C52  00BC               	movwf	_slot_taskData^(0+128)
 26553                           
 26554                           ;slot_task.c: 51: data->displayTickCount = 0;
 26555  2C53  0020               	movlb	0	; select bank0
 26556  2C54  0834               	movf	slot_Setup@data,w
 26557  2C55  0086               	movwf	6
 26558  2C56  0835               	movf	slot_Setup@data+1,w
 26559  2C57  0087               	movwf	7
 26560  2C58  3143               	addfsr 1,3
 26561  2C59  3000               	movlw	0
 26562  2C5A  3FC0               	movwi [0]fsr1
 26563  2C5B  3FC1               	movwi [1]fsr1
 26564                           
 26565                           ;slot_task.c: 52: data->delayTickCount = 0;
 26566  2C5C  0834               	movf	slot_Setup@data,w
 26567  2C5D  0086               	movwf	6
 26568  2C5E  0835               	movf	slot_Setup@data+1,w
 26569  2C5F  0087               	movwf	7
 26570  2C60  3145               	addfsr 1,5
 26571  2C61  3000               	movlw	0
 26572  2C62  3FC0               	movwi [0]fsr1
 26573  2C63  3FC1               	movwi [1]fsr1
 26574                           
 26575                           ;slot_task.c: 53: memset(data->slot_print_buf, 0x00, 20);
 26576  2C64  0834               	movf	slot_Setup@data,w
 26577  2C65  3E0B               	addlw	11
 26578  2C66  00F1               	movwf	memset@p1
 26579  2C67  3000               	movlw	0
 26580  2C68  3D35               	addwfc	slot_Setup@data+1,w
 26581  2C69  00F2               	movwf	memset@p1+1
 26582  2C6A  3000               	movlw	0
 26583  2C6B  00F3               	movwf	memset@c
 26584  2C6C  00F4               	movwf	memset@c+1
 26585  2C6D  3014               	movlw	20
 26586  2C6E  00F5               	movwf	memset@n
 26587  2C6F  3000               	movlw	0
 26588  2C70  00F6               	movwf	memset@n+1
 26589  2C71  31B4  241B  31AC   	fcall	_memset
 26590                           
 26591                           ;slot_task.c: 54: if (!badge_locked) {
 26592  2C74  0021               	movlb	1	; select bank1
 26593  2C75  0844               	movf	_badge_locked^(0+128),w
 26594  2C76  1D03               	btfss	3,2
 26595  2C77  2C90               	goto	l8589
 26596                           
 26597                           ;slot_task.c: 55: Shot_Index = (u8)rand() % (sizeof(Shot_Options)/sizeof(Shot_Options[0]
      +                          ));
 26598  2C78  3009               	movlw	9
 26599  2C79  0020               	movlb	0	; select bank0
 26600  2C7A  00AB               	movwf	___lwmod@divisor
 26601  2C7B  3000               	movlw	0
 26602  2C7C  00AC               	movwf	___lwmod@divisor+1
 26603  2C7D  31A9  216A  31AC   	fcall	_rand
 26604  2C80  0020               	movlb	0	; select bank0
 26605  2C81  0824               	movf	?_rand,w
 26606  2C82  00B1               	movwf	??_slot_Setup
 26607  2C83  01B2               	clrf	??_slot_Setup+1
 26608  2C84  0831               	movf	??_slot_Setup,w
 26609  2C85  00AD               	movwf	___lwmod@dividend
 26610  2C86  0832               	movf	??_slot_Setup+1,w
 26611  2C87  00AE               	movwf	___lwmod@dividend+1
 26612  2C88  31B5  25EF  31AC   	fcall	___lwmod
 26613  2C8B  0020               	movlb	0	; select bank0
 26614  2C8C  082B               	movf	?___lwmod,w
 26615  2C8D  00B3               	movwf	??_slot_Setup+2
 26616  2C8E  0833               	movf	??_slot_Setup+2,w
 26617  2C8F  2C94               	goto	L13
 26618  2C90                     l8589:	
 26619                           ;slot_task.c: 56: }
 26620                           
 26621                           
 26622                           ;slot_task.c: 57: else {
 26623                           ;slot_task.c: 58: Shot_Index = ((sizeof(Shot_Options)/sizeof(Shot_Options[0]))-1);
 26624  2C90  3008               	movlw	8
 26625  2C91  0020               	movlb	0	; select bank0
 26626  2C92  00B1               	movwf	??_slot_Setup
 26627  2C93  0831               	movf	??_slot_Setup,w
 26628  2C94                     L13:	
 26629  2C94  00FC               	movwf	_Shot_Index
 26630                           
 26631                           ;slot_task.c: 59: }
 26632                           ;slot_task.c: 61: Leds_idx = 1;
 26633  2C95  3001               	movlw	1
 26634  2C96  0021               	movlb	1	; select bank1
 26635  2C97  00D0               	movwf	_Leds_idx^(0+128)
 26636  2C98  3000               	movlw	0
 26637  2C99  00D1               	movwf	(_Leds_idx^(0+128)+1)
 26638  2C9A  0008               	return
 26639  2C9B                     __end_of_slot_Setup:	
 26640                           
 26641                           	psect	text30
 26642  339C                     __ptext30:	
 26643 ;; *************** function _locked_unlock_leds *****************
 26644 ;; Defined at:
 26645 ;;		line 70 in file "locked_task.c"
 26646 ;; Parameters:    Size  Location     Type
 26647 ;;		None
 26648 ;; Auto vars:     Size  Location     Type
 26649 ;;		None
 26650 ;; Return value:  Size  Location     Type
 26651 ;;                  2  1245[None  ] unsigned int 
 26652 ;; Registers used:
 26653 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26654 ;; Tracked objects:
 26655 ;;		On entry : 0/0
 26656 ;;		On exit  : 0/0
 26657 ;;		Unchanged: 0/0
 26658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26661 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26662 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26663 ;;Total ram usage:        2 bytes
 26664 ;; Hardware stack levels used:    1
 26665 ;; Hardware stack levels required when called:    4
 26666 ;; This function calls:
 26667 ;;		Nothing
 26668 ;; This function is called by:
 26669 ;;		_locked_Main
 26670 ;; This function uses a non-reentrant model
 26671 ;;
 26672                           
 26673                           
 26674                           ;psect for function _locked_unlock_leds
 26675  339C                     _locked_unlock_leds:	
 26676                           
 26677                           ;locked_task.c: 71: locked_locking_leds_idx = 0;
 26678                           
 26679                           ;incstack = 0
 26680                           ; Regs used in _locked_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 26681  339C  0021               	movlb	1	; select bank1
 26682  339D  01A4               	clrf	_locked_locking_leds_idx^(0+128)
 26683  339E  01A5               	clrf	(_locked_locking_leds_idx+1)^(0+128)
 26684                           
 26685                           ;locked_task.c: 72: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 26686  339F  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 26687  33A0  3EE3               	addlw	(low (_locked_locking_leds| (0+256)))& (0+255)
 26688  33A1  0086               	movwf	6
 26689  33A2  3001               	movlw	1	; select bank3/4
 26690  33A3  0087               	movwf	7
 26691  33A4  3F40               	moviw [0]fsr1
 26692  33A5  00F1               	movwf	??_locked_unlock_leds
 26693  33A6  3F41               	moviw [1]fsr1
 26694  33A7  00F2               	movwf	??_locked_unlock_leds+1
 26695  33A8  0852               	movf	_locked_lock_base_leds^(0+128),w
 26696  33A9  0471               	iorwf	??_locked_unlock_leds,w
 26697  33AA  00A2               	movwf	_locked_leds^(0+128)
 26698  33AB  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 26699  33AC  0472               	iorwf	??_locked_unlock_leds+1,w
 26700  33AD  00A3               	movwf	(_locked_leds+1)^(0+128)
 26701  33AE  0008               	return
 26702  33AF                     __end_of_locked_unlock_leds:	
 26703                           ;locked_task.c: 73: return locked_leds;
 26704                           ;	Return value of _locked_unlock_leds is never used
 26705                           
 26706                           
 26707                           	psect	text31
 26708  258A                     __ptext31:	
 26709 ;; *************** function _locked_secret_check *****************
 26710 ;; Defined at:
 26711 ;;		line 121 in file "locked_task.c"
 26712 ;; Parameters:    Size  Location     Type
 26713 ;;  data            2    7[COMMON] PTR struct t_locked_task
 26714 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26715 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26716 ;;  buttonPresse    1    9[COMMON] unsigned char 
 26717 ;; Auto vars:     Size  Location     Type
 26718 ;;  i               2    8[BANK0 ] unsigned int 
 26719 ;;  hit_counter     6    0        unsigned char [6]
 26720 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 26721 ;;  size            2    3[BANK0 ] unsigned int 
 26722 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 26723 ;;		 -> locked_secret_inputs.inputs(20), locked_secret_inputs(25), 
 26724 ;; Return value:  Size  Location     Type
 26725 ;;                  1    wreg      unsigned char 
 26726 ;; Registers used:
 26727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26728 ;; Tracked objects:
 26729 ;;		On entry : 0/0
 26730 ;;		On exit  : 0/0
 26731 ;;		Unchanged: 0/0
 26732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26733 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26734 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26735 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26736 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26737 ;;Total ram usage:       13 bytes
 26738 ;; Hardware stack levels used:    1
 26739 ;; Hardware stack levels required when called:    5
 26740 ;; This function calls:
 26741 ;;		___bmul
 26742 ;;		_strlen
 26743 ;; This function is called by:
 26744 ;;		_locked_Main
 26745 ;; This function uses a non-reentrant model
 26746 ;;
 26747                           
 26748                           
 26749                           ;psect for function _locked_secret_check
 26750  258A                     _locked_secret_check:	
 26751                           
 26752                           ;locked_task.c: 122: u8 *inputs;
 26753                           ;locked_task.c: 123: u16 size = sizeof(locked_secret_inputs) / sizeof(locked_secret_inpu
      +                          ts[0]);
 26754                           
 26755                           ;incstack = 0
 26756                           ; Regs used in _locked_secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26757  258A  3001               	movlw	1
 26758  258B  0020               	movlb	0	; select bank0
 26759  258C  00A3               	movwf	locked_secret_check@size
 26760  258D  3000               	movlw	0
 26761  258E  00A4               	movwf	locked_secret_check@size+1
 26762                           
 26763                           ;locked_task.c: 124: u16 currents_size;
 26764                           ;locked_task.c: 125: char hit_counter[6];
 26765                           ;locked_task.c: 127: for (u16 i = 0; i < size; i++){
 26766  258F  01A8               	clrf	locked_secret_check@i
 26767  2590  01A9               	clrf	locked_secret_check@i+1
 26768  2591                     l8831:	
 26769  2591  0824               	movf	locked_secret_check@size+1,w
 26770  2592  0229               	subwf	locked_secret_check@i+1,w
 26771  2593  1D03               	skipz
 26772  2594  2D97               	goto	u5455
 26773  2595  0823               	movf	locked_secret_check@size,w
 26774  2596  0228               	subwf	locked_secret_check@i,w
 26775  2597                     u5455:	
 26776  2597  1803               	btfsc	3,0
 26777  2598  2E43               	goto	l8833
 26778                           
 26779                           ;locked_task.c: 128: inputs = locked_secret_inputs[i].inputs;
 26780  2599  3019               	movlw	25
 26781  259A  00A0               	movwf	??_locked_secret_check
 26782  259B  0820               	movf	??_locked_secret_check,w
 26783  259C  00F1               	movwf	___bmul@multiplicand
 26784  259D  0828               	movf	locked_secret_check@i,w
 26785  259E  31B3  2366  31A5   	fcall	___bmul
 26786  25A1  3E4D               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26787  25A2  0020               	movlb	0	; select bank0
 26788  25A3  00A1               	movwf	??_locked_secret_check+1
 26789  25A4  0821               	movf	??_locked_secret_check+1,w
 26790  25A5  00A7               	movwf	locked_secret_check@inputs
 26791                           
 26792                           ;locked_task.c: 130: if (buttonPressed == inputs[locked_secret_inputs[i].idx]){
 26793  25A6  3019               	movlw	25
 26794  25A7  00A0               	movwf	??_locked_secret_check
 26795  25A8  0820               	movf	??_locked_secret_check,w
 26796  25A9  00F1               	movwf	___bmul@multiplicand
 26797  25AA  0828               	movf	locked_secret_check@i,w
 26798  25AB  31B3  2366  31A5   	fcall	___bmul
 26799  25AE  3E14               	addlw	20
 26800  25AF  3E4D               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26801  25B0  0086               	movwf	6
 26802  25B1  3002               	movlw	2	; select bank4/5
 26803  25B2  0087               	movwf	7
 26804  25B3  0801               	movf	1,w
 26805  25B4  0020               	movlb	0	; select bank0
 26806  25B5  0727               	addwf	locked_secret_check@inputs,w
 26807  25B6  00A1               	movwf	??_locked_secret_check+1
 26808  25B7  0821               	movf	??_locked_secret_check+1,w
 26809  25B8  0086               	movwf	6
 26810  25B9  3002               	movlw	2	; select bank4/5
 26811  25BA  0087               	movwf	7
 26812  25BB  0801               	movf	1,w
 26813  25BC  0679               	xorwf	locked_secret_check@buttonPressed,w
 26814  25BD  1D03               	skipz
 26815  25BE  2E2C               	goto	l8827
 26816                           
 26817                           ;locked_task.c: 131: currents_size = strlen((const char *)inputs);
 26818  25BF  0827               	movf	locked_secret_check@inputs,w
 26819  25C0  00F1               	movwf	strlen@s
 26820  25C1  3002               	movlw	2
 26821  25C2  00F2               	movwf	strlen@s+1
 26822  25C3  31B4  24D8  31A5   	fcall	_strlen
 26823  25C6  0872               	movf	?_strlen+1,w
 26824  25C7  0020               	movlb	0	; select bank0
 26825  25C8  00A6               	movwf	locked_secret_check@currents_size+1
 26826  25C9  0871               	movf	?_strlen,w
 26827  25CA  00A5               	movwf	locked_secret_check@currents_size
 26828                           
 26829                           ;locked_task.c: 132: locked_secret_inputs[i].idx++;
 26830  25CB  3019               	movlw	25
 26831  25CC  00A0               	movwf	??_locked_secret_check
 26832  25CD  0820               	movf	??_locked_secret_check,w
 26833  25CE  00F1               	movwf	___bmul@multiplicand
 26834  25CF  0828               	movf	locked_secret_check@i,w
 26835  25D0  31B3  2366  31A5   	fcall	___bmul
 26836  25D3  3E14               	addlw	20
 26837  25D4  3E4D               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26838  25D5  0086               	movwf	6
 26839  25D6  3002               	movlw	2	; select bank4/5
 26840  25D7  0087               	movwf	7
 26841  25D8  3001               	movlw	1
 26842  25D9  0781               	addwf	1,f
 26843  25DA  3141               	addfsr 1,1
 26844  25DB  1803               	skipnc
 26845  25DC  0A81               	incf	1,f
 26846                           
 26847                           ;locked_task.c: 134: if (locked_secret_inputs[i].idx == currents_size) {
 26848  25DD  3019               	movlw	25
 26849  25DE  0020               	movlb	0	; select bank0
 26850  25DF  00A0               	movwf	??_locked_secret_check
 26851  25E0  0820               	movf	??_locked_secret_check,w
 26852  25E1  00F1               	movwf	___bmul@multiplicand
 26853  25E2  0828               	movf	locked_secret_check@i,w
 26854  25E3  31B3  2366  31A5   	fcall	___bmul
 26855  25E6  3E14               	addlw	20
 26856  25E7  3E4D               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26857  25E8  0086               	movwf	6
 26858  25E9  3002               	movlw	2	; select bank4/5
 26859  25EA  0087               	movwf	7
 26860  25EB  3F40               	moviw [0]fsr1
 26861  25EC  0020               	movlb	0	; select bank0
 26862  25ED  00A1               	movwf	??_locked_secret_check+1
 26863  25EE  3F41               	moviw [1]fsr1
 26864  25EF  00A2               	movwf	??_locked_secret_check+2
 26865  25F0  0826               	movf	locked_secret_check@currents_size+1,w
 26866  25F1  0622               	xorwf	??_locked_secret_check+2,w
 26867  25F2  1D03               	skipz
 26868  25F3  2DF6               	goto	u5445
 26869  25F4  0825               	movf	locked_secret_check@currents_size,w
 26870  25F5  0621               	xorwf	??_locked_secret_check+1,w
 26871  25F6                     u5445:	
 26872  25F6  1D03               	skipz
 26873  25F7  2E3D               	goto	l8829
 26874                           
 26875                           ;locked_task.c: 136: locked_secret_inputs[i].idx = 0;
 26876  25F8  3019               	movlw	25
 26877  25F9  00A0               	movwf	??_locked_secret_check
 26878  25FA  0820               	movf	??_locked_secret_check,w
 26879  25FB  00F1               	movwf	___bmul@multiplicand
 26880  25FC  0828               	movf	locked_secret_check@i,w
 26881  25FD  31B3  2366  31A5   	fcall	___bmul
 26882  2600  3E14               	addlw	20
 26883  2601  3E4D               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26884  2602  0086               	movwf	6
 26885  2603  3002               	movlw	2	; select bank4/5
 26886  2604  0087               	movwf	7
 26887  2605  3000               	movlw	0
 26888  2606  3FC0               	movwi [0]fsr1
 26889  2607  3FC1               	movwi [1]fsr1
 26890                           
 26891                           ;locked_task.c: 139: *(locked_secret_inputs[i].variable) = (u16) locked_secret_inputs[i]
      +                          .value;
 26892  2608  3019               	movlw	25
 26893  2609  0020               	movlb	0	; select bank0
 26894  260A  00A0               	movwf	??_locked_secret_check
 26895  260B  0820               	movf	??_locked_secret_check,w
 26896  260C  00F1               	movwf	___bmul@multiplicand
 26897  260D  0828               	movf	locked_secret_check@i,w
 26898  260E  31B3  2366  31A5   	fcall	___bmul
 26899  2611  3E17               	addlw	23
 26900  2612  3E4D               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26901  2613  0086               	movwf	6
 26902  2614  3002               	movlw	2	; select bank4/5
 26903  2615  0087               	movwf	7
 26904  2616  3019               	movlw	25
 26905  2617  0020               	movlb	0	; select bank0
 26906  2618  00A1               	movwf	??_locked_secret_check+1
 26907  2619  0821               	movf	??_locked_secret_check+1,w
 26908  261A  00F1               	movwf	___bmul@multiplicand
 26909  261B  0828               	movf	locked_secret_check@i,w
 26910  261C  31B3  2366         	fcall	___bmul
 26911  261E  3E16               	addlw	22
 26912  261F  3E4D               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26913  2620  0084               	movwf	4
 26914  2621  3002               	movlw	2	; select bank4/5
 26915  2622  0085               	movwf	5
 26916  2623  0800               	movf	0,w
 26917  2624  0084               	movwf	4
 26918  2625  0185               	clrf	5
 26919  2626  3F40               	moviw [0]fsr1
 26920  2627  3F80               	movwi [0]fsr0
 26921  2628  3F41               	moviw [1]fsr1
 26922  2629  3F81               	movwi [1]fsr0
 26923                           
 26924                           ;locked_task.c: 141: return 1;
 26925  262A  3001               	movlw	1
 26926  262B  0008               	return
 26927  262C                     l8827:	
 26928                           ;locked_task.c: 142: }
 26929                           ;locked_task.c: 143: } else {
 26930                           
 26931                           
 26932                           ;locked_task.c: 145: locked_secret_inputs[i].idx = 0;
 26933  262C  3019               	movlw	25
 26934  262D  0020               	movlb	0	; select bank0
 26935  262E  00A0               	movwf	??_locked_secret_check
 26936  262F  0820               	movf	??_locked_secret_check,w
 26937  2630  00F1               	movwf	___bmul@multiplicand
 26938  2631  0828               	movf	locked_secret_check@i,w
 26939  2632  31B3  2366  31A5   	fcall	___bmul
 26940  2635  3E14               	addlw	20
 26941  2636  3E4D               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26942  2637  0086               	movwf	6
 26943  2638  3002               	movlw	2	; select bank4/5
 26944  2639  0087               	movwf	7
 26945  263A  3000               	movlw	0
 26946  263B  3FC0               	movwi [0]fsr1
 26947  263C  3FC1               	movwi [1]fsr1
 26948  263D                     l8829:	
 26949  263D  3001               	movlw	1
 26950  263E  0020               	movlb	0	; select bank0
 26951  263F  07A8               	addwf	locked_secret_check@i,f
 26952  2640  3000               	movlw	0
 26953  2641  3DA9               	addwfc	locked_secret_check@i+1,f
 26954  2642  2D91               	goto	l8831
 26955  2643                     l8833:	
 26956                           
 26957                           ;locked_task.c: 146: }
 26958                           ;locked_task.c: 147: }
 26959                           ;locked_task.c: 148: return 0;
 26960  2643  3000               	movlw	0
 26961  2644  0008               	return
 26962  2645                     __end_of_locked_secret_check:	
 26963                           
 26964                           	psect	text32
 26965  3366                     __ptext32:	
 26966 ;; *************** function ___bmul *****************
 26967 ;; Defined at:
 26968 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul8.c"
 26969 ;; Parameters:    Size  Location     Type
 26970 ;;  multiplier      1    wreg     unsigned char 
 26971 ;;  multiplicand    1    1[COMMON] unsigned char 
 26972 ;; Auto vars:     Size  Location     Type
 26973 ;;  multiplier      1    4[COMMON] unsigned char 
 26974 ;;  product         1    3[COMMON] unsigned char 
 26975 ;; Return value:  Size  Location     Type
 26976 ;;                  1    wreg      unsigned char 
 26977 ;; Registers used:
 26978 ;;		wreg, status,2, status,0
 26979 ;; Tracked objects:
 26980 ;;		On entry : 0/0
 26981 ;;		On exit  : 0/0
 26982 ;;		Unchanged: 0/0
 26983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26984 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26985 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26986 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26987 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26988 ;;Total ram usage:        4 bytes
 26989 ;; Hardware stack levels used:    1
 26990 ;; Hardware stack levels required when called:    4
 26991 ;; This function calls:
 26992 ;;		Nothing
 26993 ;; This function is called by:
 26994 ;;		_matrix_secret_check
 26995 ;;		_secret_check
 26996 ;;		_locked_secret_check
 26997 ;; This function uses a non-reentrant model
 26998 ;;
 26999                           
 27000                           
 27001                           ;psect for function ___bmul
 27002  3366                     ___bmul:	
 27003                           
 27004                           ;incstack = 0
 27005                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 27006                           ;___bmul@multiplier stored from wreg
 27007  3366  00F4               	movwf	___bmul@multiplier
 27008  3367  01F3               	clrf	___bmul@product
 27009  3368                     l8505:	
 27010  3368  1C74               	btfss	___bmul@multiplier,0
 27011  3369  2B6E               	goto	l8509
 27012  336A  0871               	movf	___bmul@multiplicand,w
 27013  336B  00F2               	movwf	??___bmul
 27014  336C  0872               	movf	??___bmul,w
 27015  336D  07F3               	addwf	___bmul@product,f
 27016  336E                     l8509:	
 27017  336E  1003               	clrc
 27018  336F  0DF1               	rlf	___bmul@multiplicand,f
 27019  3370  1003               	clrc
 27020  3371  0CF4               	rrf	___bmul@multiplier,f
 27021  3372  0874               	movf	___bmul@multiplier,w
 27022  3373  1D03               	btfss	3,2
 27023  3374  2B68               	goto	l8505
 27024  3375  0873               	movf	___bmul@product,w
 27025  3376  0008               	return
 27026  3377                     __end_of___bmul:	
 27027                           
 27028                           	psect	text33
 27029  3467                     __ptext33:	
 27030 ;; *************** function _locked_lock_leds *****************
 27031 ;; Defined at:
 27032 ;;		line 62 in file "locked_task.c"
 27033 ;; Parameters:    Size  Location     Type
 27034 ;;		None
 27035 ;; Auto vars:     Size  Location     Type
 27036 ;;  size            2    3[COMMON] unsigned int 
 27037 ;; Return value:  Size  Location     Type
 27038 ;;                  2  1242[None  ] unsigned int 
 27039 ;; Registers used:
 27040 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27041 ;; Tracked objects:
 27042 ;;		On entry : 0/0
 27043 ;;		On exit  : 0/0
 27044 ;;		Unchanged: 0/0
 27045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27047 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27048 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27049 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27050 ;;Total ram usage:        4 bytes
 27051 ;; Hardware stack levels used:    1
 27052 ;; Hardware stack levels required when called:    4
 27053 ;; This function calls:
 27054 ;;		Nothing
 27055 ;; This function is called by:
 27056 ;;		_locked_Init
 27057 ;;		_locked_Main
 27058 ;; This function uses a non-reentrant model
 27059 ;;
 27060                           
 27061                           
 27062                           ;psect for function _locked_lock_leds
 27063  3467                     _locked_lock_leds:	
 27064                           
 27065                           ;locked_task.c: 63: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 27066                           
 27067                           ;incstack = 0
 27068                           ; Regs used in _locked_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 27069  3467  3006               	movlw	6
 27070  3468  00F3               	movwf	locked_lock_leds@size
 27071  3469  3000               	movlw	0
 27072  346A  00F4               	movwf	locked_lock_leds@size+1
 27073                           
 27074                           ;locked_task.c: 64: locked_locking_leds_idx = size - 1;
 27075  346B  0873               	movf	locked_lock_leds@size,w
 27076  346C  3EFF               	addlw	255
 27077  346D  0021               	movlb	1	; select bank1
 27078  346E  00A4               	movwf	_locked_locking_leds_idx^(0+128)
 27079  346F  30FF               	movlw	255
 27080  3470  3D74               	addwfc	locked_lock_leds@size+1,w
 27081  3471  00A5               	movwf	(_locked_locking_leds_idx+1)^(0+128)
 27082                           
 27083                           ;locked_task.c: 65: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 27084  3472  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 27085  3473  3EE3               	addlw	(low (_locked_locking_leds| (0+256)))& (0+255)
 27086  3474  0086               	movwf	6
 27087  3475  3001               	movlw	1	; select bank3/4
 27088  3476  0087               	movwf	7
 27089  3477  3F40               	moviw [0]fsr1
 27090  3478  00F1               	movwf	??_locked_lock_leds
 27091  3479  3F41               	moviw [1]fsr1
 27092  347A  00F2               	movwf	??_locked_lock_leds+1
 27093  347B  0852               	movf	_locked_lock_base_leds^(0+128),w
 27094  347C  0471               	iorwf	??_locked_lock_leds,w
 27095  347D  00A2               	movwf	_locked_leds^(0+128)
 27096  347E  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 27097  347F  0472               	iorwf	??_locked_lock_leds+1,w
 27098  3480  00A3               	movwf	(_locked_leds+1)^(0+128)
 27099  3481  0008               	return
 27100  3482                     __end_of_locked_lock_leds:	
 27101                           ;locked_task.c: 66: return locked_leds;
 27102                           ;	Return value of _locked_lock_leds is never used
 27103                           
 27104                           
 27105                           	psect	text34
 27106  3433                     __ptext34:	
 27107 ;; *************** function _locked_get_unlock_leds *****************
 27108 ;; Defined at:
 27109 ;;		line 87 in file "locked_task.c"
 27110 ;; Parameters:    Size  Location     Type
 27111 ;;		None
 27112 ;; Auto vars:     Size  Location     Type
 27113 ;;  leds            2    3[COMMON] unsigned int 
 27114 ;; Return value:  Size  Location     Type
 27115 ;;                  2    1[COMMON] unsigned int 
 27116 ;; Registers used:
 27117 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27118 ;; Tracked objects:
 27119 ;;		On entry : 0/0
 27120 ;;		On exit  : 0/0
 27121 ;;		Unchanged: 0/0
 27122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27123 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27124 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27126 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27127 ;;Total ram usage:        4 bytes
 27128 ;; Hardware stack levels used:    1
 27129 ;; Hardware stack levels required when called:    4
 27130 ;; This function calls:
 27131 ;;		Nothing
 27132 ;; This function is called by:
 27133 ;;		_locked_Main
 27134 ;; This function uses a non-reentrant model
 27135 ;;
 27136                           
 27137                           
 27138                           ;psect for function _locked_get_unlock_leds
 27139  3433                     _locked_get_unlock_leds:	
 27140                           
 27141                           ;locked_task.c: 88: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 27142                           
 27143                           ;incstack = 0
 27144                           ; Regs used in _locked_get_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 27145  3433  0021               	movlb	1	; select bank1
 27146  3434  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 27147  3435  3EE3               	addlw	(low (_locked_locking_leds| (0+256)))& (0+255)
 27148  3436  0086               	movwf	6
 27149  3437  3001               	movlw	1	; select bank3/4
 27150  3438  0087               	movwf	7
 27151  3439  3F40               	moviw [0]fsr1
 27152  343A  00F3               	movwf	locked_get_unlock_leds@leds
 27153  343B  3F41               	moviw [1]fsr1
 27154  343C  00F4               	movwf	locked_get_unlock_leds@leds+1
 27155                           
 27156                           ;locked_task.c: 91: if (locked_locking_leds_idx > 0){
 27157  343D  0824               	movf	_locked_locking_leds_idx^(0+128),w
 27158  343E  0425               	iorwf	(_locked_locking_leds_idx+1)^(0+128),w
 27159  343F  1903               	btfsc	3,2
 27160  3440  2C45               	goto	l1253
 27161                           
 27162                           ;locked_task.c: 92: locked_locking_leds_idx -= 1;
 27163  3441  3001               	movlw	1
 27164  3442  02A4               	subwf	_locked_locking_leds_idx^(0+128),f
 27165  3443  3000               	movlw	0
 27166  3444  3BA5               	subwfb	(_locked_locking_leds_idx+1)^(0+128),f
 27167  3445                     l1253:	
 27168                           
 27169                           ;locked_task.c: 93: }
 27170                           ;locked_task.c: 94: return locked_lock_base_leds | leds;
 27171  3445  0873               	movf	locked_get_unlock_leds@leds,w
 27172  3446  0452               	iorwf	_locked_lock_base_leds^(0+128),w
 27173  3447  00F1               	movwf	?_locked_get_unlock_leds
 27174  3448  0874               	movf	locked_get_unlock_leds@leds+1,w
 27175  3449  0453               	iorwf	(_locked_lock_base_leds+1)^(0+128),w
 27176  344A  00F2               	movwf	?_locked_get_unlock_leds+1
 27177  344B  0008               	return
 27178  344C                     __end_of_locked_get_unlock_leds:	
 27179                           
 27180                           	psect	text35
 27181  3553                     __ptext35:	
 27182 ;; *************** function _locked_get_lock_leds *****************
 27183 ;; Defined at:
 27184 ;;		line 76 in file "locked_task.c"
 27185 ;; Parameters:    Size  Location     Type
 27186 ;;		None
 27187 ;; Auto vars:     Size  Location     Type
 27188 ;;  leds            2    7[COMMON] unsigned int 
 27189 ;;  size            2    5[COMMON] unsigned int 
 27190 ;; Return value:  Size  Location     Type
 27191 ;;                  2    1[COMMON] unsigned int 
 27192 ;; Registers used:
 27193 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27194 ;; Tracked objects:
 27195 ;;		On entry : 0/0
 27196 ;;		On exit  : 0/0
 27197 ;;		Unchanged: 0/0
 27198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27199 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27200 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27201 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27202 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27203 ;;Total ram usage:        8 bytes
 27204 ;; Hardware stack levels used:    1
 27205 ;; Hardware stack levels required when called:    4
 27206 ;; This function calls:
 27207 ;;		Nothing
 27208 ;; This function is called by:
 27209 ;;		_locked_Main
 27210 ;; This function uses a non-reentrant model
 27211 ;;
 27212                           
 27213                           
 27214                           ;psect for function _locked_get_lock_leds
 27215  3553                     _locked_get_lock_leds:	
 27216                           
 27217                           ;locked_task.c: 77: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 27218                           
 27219                           ;incstack = 0
 27220                           ; Regs used in _locked_get_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 27221  3553  3006               	movlw	6
 27222  3554  00F5               	movwf	locked_get_lock_leds@size
 27223  3555  3000               	movlw	0
 27224  3556  00F6               	movwf	locked_get_lock_leds@size+1
 27225                           
 27226                           ;locked_task.c: 78: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 27227  3557  0021               	movlb	1	; select bank1
 27228  3558  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 27229  3559  3EE3               	addlw	(low (_locked_locking_leds| (0+256)))& (0+255)
 27230  355A  0086               	movwf	6
 27231  355B  3001               	movlw	1	; select bank3/4
 27232  355C  0087               	movwf	7
 27233  355D  3F40               	moviw [0]fsr1
 27234  355E  00F7               	movwf	locked_get_lock_leds@leds
 27235  355F  3F41               	moviw [1]fsr1
 27236  3560  00F8               	movwf	locked_get_lock_leds@leds+1
 27237                           
 27238                           ;locked_task.c: 81: if (locked_locking_leds_idx < size - 1){
 27239  3561  0875               	movf	locked_get_lock_leds@size,w
 27240  3562  3EFF               	addlw	255
 27241  3563  00F3               	movwf	??_locked_get_lock_leds
 27242  3564  30FF               	movlw	255
 27243  3565  3D76               	addwfc	locked_get_lock_leds@size+1,w
 27244  3566  00F4               	movwf	??_locked_get_lock_leds+1
 27245  3567  0874               	movf	??_locked_get_lock_leds+1,w
 27246  3568  0225               	subwf	(_locked_locking_leds_idx+1)^(0+128),w
 27247  3569  1D03               	skipz
 27248  356A  2D6D               	goto	u5415
 27249  356B  0873               	movf	??_locked_get_lock_leds,w
 27250  356C  0224               	subwf	_locked_locking_leds_idx^(0+128),w
 27251  356D                     u5415:	
 27252  356D  1803               	skipnc
 27253  356E  2D73               	goto	l1249
 27254                           
 27255                           ;locked_task.c: 82: locked_locking_leds_idx += 1;
 27256  356F  3001               	movlw	1
 27257  3570  07A4               	addwf	_locked_locking_leds_idx^(0+128),f
 27258  3571  3000               	movlw	0
 27259  3572  3DA5               	addwfc	(_locked_locking_leds_idx+1)^(0+128),f
 27260  3573                     l1249:	
 27261                           
 27262                           ;locked_task.c: 83: }
 27263                           ;locked_task.c: 84: return leds;
 27264  3573  0878               	movf	locked_get_lock_leds@leds+1,w
 27265  3574  00F2               	movwf	?_locked_get_lock_leds+1
 27266  3575  0877               	movf	locked_get_lock_leds@leds,w
 27267  3576  00F1               	movwf	?_locked_get_lock_leds
 27268  3577  0008               	return
 27269  3578                     __end_of_locked_get_lock_leds:	
 27270                           
 27271                           	psect	text36
 27272  2928                     __ptext36:	
 27273 ;; *************** function _locked_clear *****************
 27274 ;; Defined at:
 27275 ;;		line 274 in file "locked_task.c"
 27276 ;; Parameters:    Size  Location     Type
 27277 ;;  data            2   25[BANK0 ] PTR struct t_locked_task
 27278 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 27279 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 27280 ;; Auto vars:     Size  Location     Type
 27281 ;;		None
 27282 ;; Return value:  Size  Location     Type
 27283 ;;                  1    wreg      void 
 27284 ;; Registers used:
 27285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27286 ;; Tracked objects:
 27287 ;;		On entry : 0/0
 27288 ;;		On exit  : 0/0
 27289 ;;		Unchanged: 0/0
 27290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27291 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27294 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27295 ;;Total ram usage:        2 bytes
 27296 ;; Hardware stack levels used:    1
 27297 ;; Hardware stack levels required when called:   10
 27298 ;; This function calls:
 27299 ;;		_nullifyBadge_segDisplayErase
 27300 ;;		_nullifyBadge_userLedsClr
 27301 ;; This function is called by:
 27302 ;;		_locked_Main
 27303 ;; This function uses a non-reentrant model
 27304 ;;
 27305                           
 27306                           
 27307                           ;psect for function _locked_clear
 27308  2928                     _locked_clear:	
 27309                           
 27310                           ;locked_task.c: 276: data->delayTickCount = 0;
 27311                           
 27312                           ;incstack = 0
 27313                           ; Regs used in _locked_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27314  2928  0020               	movlb	0	; select bank0
 27315  2929  0839               	movf	locked_clear@data,w
 27316  292A  0086               	movwf	6
 27317  292B  083A               	movf	locked_clear@data+1,w
 27318  292C  0087               	movwf	7
 27319  292D  3141               	addfsr 1,1
 27320  292E  3000               	movlw	0
 27321  292F  3FC0               	movwi [0]fsr1
 27322  2930  3FC1               	movwi [1]fsr1
 27323                           
 27324                           ;locked_task.c: 277: data->holdCountA = 0;
 27325  2931  0839               	movf	locked_clear@data,w
 27326  2932  0086               	movwf	6
 27327  2933  083A               	movf	locked_clear@data+1,w
 27328  2934  0087               	movwf	7
 27329  2935  3143               	addfsr 1,3
 27330  2936  3000               	movlw	0
 27331  2937  3FC0               	movwi [0]fsr1
 27332  2938  3FC1               	movwi [1]fsr1
 27333                           
 27334                           ;locked_task.c: 278: data->holdCountB = 0;
 27335  2939  0839               	movf	locked_clear@data,w
 27336  293A  0086               	movwf	6
 27337  293B  083A               	movf	locked_clear@data+1,w
 27338  293C  0087               	movwf	7
 27339  293D  3145               	addfsr 1,5
 27340  293E  3000               	movlw	0
 27341  293F  3FC0               	movwi [0]fsr1
 27342  2940  3FC1               	movwi [1]fsr1
 27343                           
 27344                           ;locked_task.c: 279: data->holdCountX = 0;
 27345  2941  0839               	movf	locked_clear@data,w
 27346  2942  0086               	movwf	6
 27347  2943  083A               	movf	locked_clear@data+1,w
 27348  2944  0087               	movwf	7
 27349  2945  3147               	addfsr 1,7
 27350  2946  3000               	movlw	0
 27351  2947  3FC0               	movwi [0]fsr1
 27352  2948  3FC1               	movwi [1]fsr1
 27353                           
 27354                           ;locked_task.c: 280: data->holdCountY = 0;
 27355  2949  0839               	movf	locked_clear@data,w
 27356  294A  0086               	movwf	6
 27357  294B  083A               	movf	locked_clear@data+1,w
 27358  294C  0087               	movwf	7
 27359  294D  3149               	addfsr 1,9
 27360  294E  3000               	movlw	0
 27361  294F  3FC0               	movwi [0]fsr1
 27362  2950  3FC1               	movwi [1]fsr1
 27363                           
 27364                           ;locked_task.c: 281: data->noholdCount = 0;
 27365  2951  0839               	movf	locked_clear@data,w
 27366  2952  0086               	movwf	6
 27367  2953  083A               	movf	locked_clear@data+1,w
 27368  2954  0087               	movwf	7
 27369  2955  314B               	addfsr 1,11
 27370  2956  3000               	movlw	0
 27371  2957  3FC0               	movwi [0]fsr1
 27372  2958  3FC1               	movwi [1]fsr1
 27373                           
 27374                           ;locked_task.c: 284: nullifyBadge_userLedsClr(data->badge);
 27375  2959  0839               	movf	locked_clear@data,w
 27376  295A  0086               	movwf	6
 27377  295B  083A               	movf	locked_clear@data+1,w
 27378  295C  0087               	movwf	7
 27379  295D  0801               	movf	1,w
 27380  295E  31B2  223A  31A9   	fcall	_nullifyBadge_userLedsClr
 27381                           
 27382                           ;locked_task.c: 285: nullifyBadge_segDisplayErase(data->badge);
 27383  2961  0020               	movlb	0	; select bank0
 27384  2962  0839               	movf	locked_clear@data,w
 27385  2963  0086               	movwf	6
 27386  2964  083A               	movf	locked_clear@data+1,w
 27387  2965  0087               	movwf	7
 27388  2966  0801               	movf	1,w
 27389  2967  31B2  2234         	fcall	_nullifyBadge_segDisplayErase
 27390  2969  0008               	return
 27391  296A                     __end_of_locked_clear:	
 27392                           
 27393                           	psect	text37
 27394  323A                     __ptext37:	
 27395 ;; *************** function _nullifyBadge_userLedsClr *****************
 27396 ;; Defined at:
 27397 ;;		line 177 in file "nullifyBadge.c"
 27398 ;; Parameters:    Size  Location     Type
 27399 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 27400 ;;		 -> badge_inst(18), 
 27401 ;; Auto vars:     Size  Location     Type
 27402 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 27403 ;;		 -> badge_inst(18), 
 27404 ;; Return value:  Size  Location     Type
 27405 ;;                  1    wreg      void 
 27406 ;; Registers used:
 27407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27408 ;; Tracked objects:
 27409 ;;		On entry : 0/0
 27410 ;;		On exit  : 0/0
 27411 ;;		Unchanged: 0/0
 27412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27416 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27417 ;;Total ram usage:        1 bytes
 27418 ;; Hardware stack levels used:    1
 27419 ;; Hardware stack levels required when called:    8
 27420 ;; This function calls:
 27421 ;;		_displayL2_ClrUserLeds
 27422 ;; This function is called by:
 27423 ;;		_menu_Init
 27424 ;;		_menu_clear
 27425 ;;		_menu_Exit
 27426 ;;		_flashy_Init
 27427 ;;		_flashy_Exit
 27428 ;;		_locked_Init
 27429 ;;		_locked_clear
 27430 ;;		_locked_Exit
 27431 ;;		_secret_Init
 27432 ;;		_secret_Exit
 27433 ;;		_slot_Init
 27434 ;;		_slot_Exit
 27435 ;;		_matrix_Init
 27436 ;;		_matrix_Exit
 27437 ;; This function uses a non-reentrant model
 27438 ;;
 27439                           
 27440                           
 27441                           ;psect for function _nullifyBadge_userLedsClr
 27442  323A                     _nullifyBadge_userLedsClr:	
 27443                           
 27444                           ;incstack = 0
 27445                           ; Regs used in _nullifyBadge_userLedsClr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 27446                           ;nullifyBadge_userLedsClr@badge stored from wreg
 27447  323A  0020               	movlb	0	; select bank0
 27448  323B  00AB               	movwf	nullifyBadge_userLedsClr@badge
 27449                           
 27450                           ;nullifyBadge.c: 178: displayL2_ClrUserLeds(&badge->display);
 27451  323C  082B               	movf	nullifyBadge_userLedsClr@badge,w
 27452  323D  31B3  2309         	fcall	_displayL2_ClrUserLeds
 27453  323F  0008               	return
 27454  3240                     __end_of_nullifyBadge_userLedsClr:	
 27455                           
 27456                           	psect	text38
 27457  3309                     __ptext38:	
 27458 ;; *************** function _displayL2_ClrUserLeds *****************
 27459 ;; Defined at:
 27460 ;;		line 94 in file "nullifyBadge_displayL2.c"
 27461 ;; Parameters:    Size  Location     Type
 27462 ;;  display         1    wreg     PTR struct t_nullifyDisp
 27463 ;;		 -> badge_inst(18), 
 27464 ;; Auto vars:     Size  Location     Type
 27465 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 27466 ;;		 -> badge_inst(18), 
 27467 ;; Return value:  Size  Location     Type
 27468 ;;                  1    wreg      void 
 27469 ;; Registers used:
 27470 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27471 ;; Tracked objects:
 27472 ;;		On entry : 0/0
 27473 ;;		On exit  : 0/0
 27474 ;;		Unchanged: 0/0
 27475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27477 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27479 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27480 ;;Total ram usage:        1 bytes
 27481 ;; Hardware stack levels used:    1
 27482 ;; Hardware stack levels required when called:    7
 27483 ;; This function calls:
 27484 ;;		_displayL1_SetUserLed
 27485 ;;		_displayL1_Update
 27486 ;; This function is called by:
 27487 ;;		_nullifyBadge_userLedsClr
 27488 ;; This function uses a non-reentrant model
 27489 ;;
 27490                           
 27491                           
 27492                           ;psect for function _displayL2_ClrUserLeds
 27493  3309                     _displayL2_ClrUserLeds:	
 27494                           
 27495                           ;incstack = 0
 27496                           ; Regs used in _displayL2_ClrUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 27497                           ;displayL2_ClrUserLeds@display stored from wreg
 27498  3309  00FB               	movwf	displayL2_ClrUserLeds@display
 27499                           
 27500                           ;nullifyBadge_displayL2.c: 95: displayL1_SetUserLed(&display->display_l1, 0);
 27501  330A  3000               	movlw	0
 27502  330B  00F1               	movwf	displayL1_SetUserLed@userLedVect
 27503  330C  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 27504  330D  087B               	movf	displayL2_ClrUserLeds@display,w
 27505  330E  3E07               	addlw	7
 27506  330F  31B3  2377  31B3   	fcall	_displayL1_SetUserLed
 27507                           
 27508                           ;nullifyBadge_displayL2.c: 96: displayL1_Update(&display->display_l1);
 27509  3312  087B               	movf	displayL2_ClrUserLeds@display,w
 27510  3313  3E07               	addlw	7
 27511  3314  31B3  2344         	fcall	_displayL1_Update
 27512  3316  0008               	return
 27513  3317                     __end_of_displayL2_ClrUserLeds:	
 27514                           
 27515                           	psect	text39
 27516  3234                     __ptext39:	
 27517 ;; *************** function _nullifyBadge_segDisplayErase *****************
 27518 ;; Defined at:
 27519 ;;		line 123 in file "nullifyBadge.c"
 27520 ;; Parameters:    Size  Location     Type
 27521 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 27522 ;;		 -> badge_inst(18), 
 27523 ;; Auto vars:     Size  Location     Type
 27524 ;;  badge           1   24[BANK0 ] PTR struct t_nullifyBadg
 27525 ;;		 -> badge_inst(18), 
 27526 ;; Return value:  Size  Location     Type
 27527 ;;                  1    wreg      void 
 27528 ;; Registers used:
 27529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27530 ;; Tracked objects:
 27531 ;;		On entry : 0/0
 27532 ;;		On exit  : 0/0
 27533 ;;		Unchanged: 0/0
 27534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27539 ;;Total ram usage:        1 bytes
 27540 ;; Hardware stack levels used:    1
 27541 ;; Hardware stack levels required when called:    9
 27542 ;; This function calls:
 27543 ;;		_displayL2_EraseSegDisplay
 27544 ;; This function is called by:
 27545 ;;		_menu_Init
 27546 ;;		_menu_clear
 27547 ;;		_menu_Exit
 27548 ;;		_flashy_Init
 27549 ;;		_flashy_Exit
 27550 ;;		_locked_Init
 27551 ;;		_locked_clear
 27552 ;;		_locked_Exit
 27553 ;;		_secret_Init
 27554 ;;		_secret_Exit
 27555 ;;		_slot_Init
 27556 ;;		_slot_Exit
 27557 ;;		_matrix_Init
 27558 ;;		_matrix_Exit
 27559 ;;		_fadeDisplay_Init
 27560 ;;		_fadeDisplay_Exit
 27561 ;; This function uses a non-reentrant model
 27562 ;;
 27563                           
 27564                           
 27565                           ;psect for function _nullifyBadge_segDisplayErase
 27566  3234                     _nullifyBadge_segDisplayErase:	
 27567                           
 27568                           ;incstack = 0
 27569                           ; Regs used in _nullifyBadge_segDisplayErase: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 27570                           ;nullifyBadge_segDisplayErase@badge stored from wreg
 27571  3234  0020               	movlb	0	; select bank0
 27572  3235  00B8               	movwf	nullifyBadge_segDisplayErase@badge
 27573                           
 27574                           ;nullifyBadge.c: 124: displayL2_EraseSegDisplay(&badge->display);
 27575  3236  0838               	movf	nullifyBadge_segDisplayErase@badge,w
 27576  3237  3190  2000         	fcall	_displayL2_EraseSegDisplay
 27577  3239  0008               	return
 27578  323A                     __end_of_nullifyBadge_segDisplayErase:	
 27579                           
 27580                           	psect	text40
 27581  1000                     __ptext40:	
 27582 ;; *************** function _displayL2_EraseSegDisplay *****************
 27583 ;; Defined at:
 27584 ;;		line 83 in file "nullifyBadge_displayL2.c"
 27585 ;; Parameters:    Size  Location     Type
 27586 ;;  display         1    wreg     PTR struct t_nullifyDisp
 27587 ;;		 -> badge_inst(18), 
 27588 ;; Auto vars:     Size  Location     Type
 27589 ;;  display         1   23[BANK0 ] PTR struct t_nullifyDisp
 27590 ;;		 -> badge_inst(18), 
 27591 ;; Return value:  Size  Location     Type
 27592 ;;                  1    wreg      void 
 27593 ;; Registers used:
 27594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27595 ;; Tracked objects:
 27596 ;;		On entry : 0/0
 27597 ;;		On exit  : 0/0
 27598 ;;		Unchanged: 0/0
 27599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27603 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27604 ;;Total ram usage:        1 bytes
 27605 ;; Hardware stack levels used:    1
 27606 ;; Hardware stack levels required when called:    8
 27607 ;; This function calls:
 27608 ;;		_displayL1_Update
 27609 ;;		_displayL2_PutStr
 27610 ;; This function is called by:
 27611 ;;		_nullifyBadge_segDisplayErase
 27612 ;; This function uses a non-reentrant model
 27613 ;;
 27614                           
 27615                           
 27616                           ;psect for function _displayL2_EraseSegDisplay
 27617  1000                     _displayL2_EraseSegDisplay:	
 27618                           
 27619                           ;incstack = 0
 27620                           ; Regs used in _displayL2_EraseSegDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27621                           ;displayL2_EraseSegDisplay@display stored from wreg
 27622  1000  0020               	movlb	0	; select bank0
 27623  1001  00B7               	movwf	displayL2_EraseSegDisplay@display
 27624                           
 27625                           ;nullifyBadge_displayL2.c: 84: displayL2_PutStr(display, "    ");
 27626  1002  307D               	movlw	low ((STR_34+115)| (0+32768))
 27627  1003  00B0               	movwf	displayL2_PutStr@str
 27628  1004  30A8               	movlw	high ((STR_34+115)| (0+32768))
 27629  1005  00B1               	movwf	displayL2_PutStr@str+1
 27630  1006  0837               	movf	displayL2_EraseSegDisplay@display,w
 27631  1007  31B5  25C5  3190   	fcall	_displayL2_PutStr
 27632                           
 27633                           ;nullifyBadge_displayL2.c: 85: displayL1_Update(&display->display_l1);
 27634  100A  0020               	movlb	0	; select bank0
 27635  100B  0837               	movf	displayL2_EraseSegDisplay@display,w
 27636  100C  3E07               	addlw	7
 27637  100D  31B3  2344         	fcall	_displayL1_Update
 27638  100F  0008               	return
 27639  1010                     __end_of_displayL2_EraseSegDisplay:	
 27640                           
 27641                           	psect	text41
 27642  19C2                     __ptext41:	
 27643 ;; *************** function _sprintf *****************
 27644 ;; Defined at:
 27645 ;;		line 492 in file "/Applications/microchip/xc8/v1.42/sources/common/doprnt.c"
 27646 ;; Parameters:    Size  Location     Type
 27647 ;;  sp              2   15[BANK0 ] PTR unsigned char 
 27648 ;;		 -> flashy_Main@hit_counter(6), matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), 
 27649 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 27650 ;;  f               2   17[BANK0 ] PTR const unsigned char 
 27651 ;;		 -> STR_69(3), STR_68(9), STR_67(9), STR_66(9), 
 27652 ;;		 -> STR_65(9), STR_64(9), STR_41(4), 
 27653 ;; Auto vars:     Size  Location     Type
 27654 ;;  tmpval          4    0        struct .
 27655 ;;  width           2   40[BANK0 ] int 
 27656 ;;  len             2   38[BANK0 ] unsigned int 
 27657 ;;  val             2   36[BANK0 ] unsigned int 
 27658 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
 27659 ;;		 -> STR_83(7), sprintf@c(1), STR_63(9), STR_62(13), 
 27660 ;;		 -> STR_61(12), STR_60(8), STR_59(11), STR_58(11), 
 27661 ;;		 -> STR_57(9), STR_56(8), STR_55(8), 
 27662 ;;  c               1   42[BANK0 ] char 
 27663 ;;  ap              1   35[BANK0 ] PTR void [1]
 27664 ;;		 -> ?_sprintf(2), 
 27665 ;;  flag            1   32[BANK0 ] unsigned char 
 27666 ;;  prec            1   31[BANK0 ] char 
 27667 ;; Return value:  Size  Location     Type
 27668 ;;                  2   15[BANK0 ] int 
 27669 ;; Registers used:
 27670 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27671 ;; Tracked objects:
 27672 ;;		On entry : 0/0
 27673 ;;		On exit  : 0/0
 27674 ;;		Unchanged: 0/0
 27675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27676 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27677 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27678 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27679 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27680 ;;Total ram usage:       28 bytes
 27681 ;; Hardware stack levels used:    1
 27682 ;; Hardware stack levels required when called:    5
 27683 ;; This function calls:
 27684 ;;		___lwdiv
 27685 ;;		___lwmod
 27686 ;;		___wmul
 27687 ;;		_isdigit
 27688 ;; This function is called by:
 27689 ;;		_flashy_Main
 27690 ;;		_slot_Main
 27691 ;; This function uses a non-reentrant model
 27692 ;;
 27693                           
 27694                           
 27695                           ;psect for function _sprintf
 27696  19C2                     _sprintf:	
 27697                           
 27698                           ;doprnt.c: 494: va_list ap;
 27699                           ;doprnt.c: 499: signed char c;
 27700                           ;doprnt.c: 501: int width;
 27701                           ;doprnt.c: 506: signed char prec;
 27702                           ;doprnt.c: 508: unsigned char flag;
 27703                           ;doprnt.c: 523: union {
 27704                           ;doprnt.c: 524: unsigned long vd;
 27705                           ;doprnt.c: 525: double integ;
 27706                           ;doprnt.c: 526: } tmpval;
 27707                           ;doprnt.c: 528: unsigned int val;
 27708                           ;doprnt.c: 529: unsigned len;
 27709                           ;doprnt.c: 530: const char * cp;
 27710                           ;doprnt.c: 533: *ap = __va_start();
 27711                           
 27712                           ;incstack = 0
 27713                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27714  19C2  3033               	movlw	(low ((?_sprintf| 0+4)))& (0+255)
 27715  19C3  0020               	movlb	0	; select bank0
 27716  19C4  00BB               	movwf	??_sprintf
 27717  19C5  083B               	movf	??_sprintf,w
 27718  19C6  00C3               	movwf	sprintf@ap
 27719  19C7                     l8767:	
 27720                           ;doprnt.c: 536: while(c = *f++) {
 27721                           
 27722  19C7  0832               	movf	sprintf@f+1,w
 27723  19C8  00BC               	movwf	??_sprintf+1
 27724  19C9  0831               	movf	sprintf@f,w
 27725  19CA  00BB               	movwf	??_sprintf
 27726  19CB  0AB1               	incf	sprintf@f,f
 27727  19CC  1903               	skipnz
 27728  19CD  0AB2               	incf	sprintf@f+1,f
 27729  19CE  083B               	movf	??_sprintf,w
 27730  19CF  0084               	movwf	4
 27731  19D0  083C               	movf	??_sprintf+1,w
 27732  19D1  0085               	movwf	5
 27733  19D2  0800               	movf	0,w	;code access
 27734  19D3  00BD               	movwf	??_sprintf+2
 27735  19D4  083D               	movf	??_sprintf+2,w
 27736  19D5  00CA               	movwf	sprintf@c
 27737  19D6  084A               	movf	sprintf@c,w
 27738  19D7  1903               	btfsc	3,2
 27739  19D8  2B88               	goto	l8769
 27740                           
 27741                           ;doprnt.c: 538: if(c != '%')
 27742  19D9  3025               	movlw	37
 27743  19DA  064A               	xorwf	sprintf@c,w
 27744  19DB  1903               	btfsc	3,2
 27745  19DC  29E8               	goto	l8651
 27746                           
 27747                           ;doprnt.c: 540: {
 27748                           ;doprnt.c: 541: ((*sp++ = (c)));
 27749  19DD  082F               	movf	sprintf@sp,w
 27750  19DE  0086               	movwf	6
 27751  19DF  0830               	movf	sprintf@sp+1,w
 27752  19E0  0087               	movwf	7
 27753  19E1  084A               	movf	sprintf@c,w
 27754  19E2  0081               	movwf	1
 27755  19E3  3001               	movlw	1
 27756  19E4  07AF               	addwf	sprintf@sp,f
 27757  19E5  3000               	movlw	0
 27758  19E6  3DB0               	addwfc	sprintf@sp+1,f
 27759                           
 27760                           ;doprnt.c: 542: continue;
 27761  19E7  29C7               	goto	l8767
 27762  19E8                     l8651:	
 27763                           
 27764                           ;doprnt.c: 543: }
 27765                           ;doprnt.c: 546: width = 0;
 27766  19E8  01C8               	clrf	sprintf@width
 27767  19E9  01C9               	clrf	sprintf@width+1
 27768                           
 27769                           ;doprnt.c: 548: flag = 0;
 27770  19EA  01C0               	clrf	sprintf@flag
 27771                           
 27772                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 27773  19EB  0831               	movf	sprintf@f,w
 27774  19EC  0084               	movwf	4
 27775  19ED  0832               	movf	sprintf@f+1,w
 27776  19EE  0085               	movwf	5
 27777  19EF  0800               	movf	0,w	;code access
 27778  19F0  31B2  22FB  3199   	fcall	_isdigit
 27779  19F3  1C03               	btfss	3,0
 27780  19F4  2AA1               	goto	l8709
 27781                           
 27782                           ;doprnt.c: 598: width = 0;
 27783  19F5  0020               	movlb	0	; select bank0
 27784  19F6  01C8               	clrf	sprintf@width
 27785  19F7  01C9               	clrf	sprintf@width+1
 27786  19F8                     l8657:	
 27787                           ;doprnt.c: 599: do {
 27788                           
 27789                           
 27790                           ;doprnt.c: 600: width *= 10;
 27791  19F8  300A               	movlw	10
 27792  19F9  00F1               	movwf	___wmul@multiplier
 27793  19FA  3000               	movlw	0
 27794  19FB  00F2               	movwf	___wmul@multiplier+1
 27795  19FC  0020               	movlb	0	; select bank0
 27796  19FD  0849               	movf	sprintf@width+1,w
 27797  19FE  00F4               	movwf	___wmul@multiplicand+1
 27798  19FF  0848               	movf	sprintf@width,w
 27799  1A00  00F3               	movwf	___wmul@multiplicand
 27800  1A01  31B4  244C  3199   	fcall	___wmul
 27801  1A04  0872               	movf	?___wmul+1,w
 27802  1A05  0020               	movlb	0	; select bank0
 27803  1A06  00C9               	movwf	sprintf@width+1
 27804  1A07  0871               	movf	?___wmul,w
 27805  1A08  00C8               	movwf	sprintf@width
 27806                           
 27807                           ;doprnt.c: 601: width += *f++ - '0';
 27808  1A09  0831               	movf	sprintf@f,w
 27809  1A0A  0084               	movwf	4
 27810  1A0B  0832               	movf	sprintf@f+1,w
 27811  1A0C  0085               	movwf	5
 27812  1A0D  0800               	movf	0,w	;code access
 27813  1A0E  3ED0               	addlw	208
 27814  1A0F  00BB               	movwf	??_sprintf
 27815  1A10  30FF               	movlw	255
 27816  1A11  1803               	skipnc
 27817  1A12  3000               	movlw	0
 27818  1A13  00BC               	movwf	??_sprintf+1
 27819  1A14  083B               	movf	??_sprintf,w
 27820  1A15  07C8               	addwf	sprintf@width,f
 27821  1A16  083C               	movf	??_sprintf+1,w
 27822  1A17  3DC9               	addwfc	sprintf@width+1,f
 27823  1A18  3001               	movlw	1
 27824  1A19  07B1               	addwf	sprintf@f,f
 27825  1A1A  3000               	movlw	0
 27826  1A1B  3DB2               	addwfc	sprintf@f+1,f
 27827                           
 27828                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 27829  1A1C  0831               	movf	sprintf@f,w
 27830  1A1D  0084               	movwf	4
 27831  1A1E  0832               	movf	sprintf@f+1,w
 27832  1A1F  0085               	movwf	5
 27833  1A20  0800               	movf	0,w	;code access
 27834  1A21  31B2  22FB  3199   	fcall	_isdigit
 27835  1A24  1C03               	btfss	3,0
 27836  1A25  2AA1               	goto	l8709
 27837  1A26  29F8               	goto	l8657
 27838  1A27                     l8665:	
 27839                           ;doprnt.c: 728: case 's':
 27840                           
 27841                           ;doprnt.c: 698: case 'i':
 27842                           ;doprnt.c: 699: break;
 27843                           
 27844                           ;doprnt.c: 697: case 'd':
 27845                           
 27846                           ;doprnt.c: 638: goto alldone;
 27847                           
 27848                           ;doprnt.c: 637: case 0:
 27849                           
 27850                           ;doprnt.c: 608: }
 27851                           ;doprnt.c: 635: switch(c = *f++) {
 27852                           
 27853                           
 27854                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 27855  1A27  0020               	movlb	0	; select bank0
 27856  1A28  0843               	movf	sprintf@ap,w
 27857  1A29  0086               	movwf	6
 27858  1A2A  0187               	clrf	7
 27859  1A2B  3F40               	moviw [0]fsr1
 27860  1A2C  00C1               	movwf	sprintf@cp
 27861  1A2D  3F41               	moviw [1]fsr1
 27862  1A2E  00C2               	movwf	sprintf@cp+1
 27863  1A2F  3002               	movlw	2
 27864  1A30  00BB               	movwf	??_sprintf
 27865  1A31  083B               	movf	??_sprintf,w
 27866  1A32  07C3               	addwf	sprintf@ap,f
 27867                           
 27868                           ;doprnt.c: 740: if(!cp)
 27869  1A33  0841               	movf	sprintf@cp,w
 27870  1A34  0442               	iorwf	sprintf@cp+1,w
 27871  1A35  1D03               	btfss	3,2
 27872  1A36  2A3B               	goto	l8673
 27873                           
 27874                           ;doprnt.c: 741: cp = "(null)";
 27875  1A37  306E               	movlw	low (STR_83| (0+32768))
 27876  1A38  00C1               	movwf	sprintf@cp
 27877  1A39  30BB               	movlw	high (STR_83| (0+32768))
 27878  1A3A  00C2               	movwf	sprintf@cp+1
 27879  1A3B                     l8673:	
 27880                           
 27881                           ;doprnt.c: 745: len = 0;
 27882  1A3B  01C6               	clrf	sprintf@len
 27883  1A3C  01C7               	clrf	sprintf@len+1
 27884  1A3D                     l8677:	
 27885                           ;doprnt.c: 746: while(cp[len])
 27886                           
 27887  1A3D  0841               	movf	sprintf@cp,w
 27888  1A3E  0746               	addwf	sprintf@len,w
 27889  1A3F  0084               	movwf	4
 27890  1A40  0842               	movf	sprintf@cp+1,w
 27891  1A41  3D47               	addwfc	sprintf@len+1,w
 27892  1A42  0085               	movwf	5
 27893  1A43  0012               	moviw fsr0++
 27894  1A44  1903               	btfsc	3,2
 27895  1A45  2A4B               	goto	l8679
 27896                           
 27897                           ;doprnt.c: 747: len++;
 27898  1A46  3001               	movlw	1
 27899  1A47  07C6               	addwf	sprintf@len,f
 27900  1A48  3000               	movlw	0
 27901  1A49  3DC7               	addwfc	sprintf@len+1,f
 27902  1A4A  2A3D               	goto	l8677
 27903  1A4B                     l8679:	
 27904                           ;doprnt.c: 750: dostring:
 27905                           
 27906                           
 27907                           ;doprnt.c: 757: if(width > len)
 27908  1A4B  0849               	movf	sprintf@width+1,w
 27909  1A4C  0247               	subwf	sprintf@len+1,w
 27910  1A4D  1D03               	skipz
 27911  1A4E  2A51               	goto	u5265
 27912  1A4F  0848               	movf	sprintf@width,w
 27913  1A50  0246               	subwf	sprintf@len,w
 27914  1A51                     u5265:	
 27915  1A51  1803               	skipnc
 27916  1A52  2A58               	goto	l8683
 27917                           
 27918                           ;doprnt.c: 758: width -= len;
 27919  1A53  0846               	movf	sprintf@len,w
 27920  1A54  02C8               	subwf	sprintf@width,f
 27921  1A55  0847               	movf	sprintf@len+1,w
 27922  1A56  3BC9               	subwfb	sprintf@width+1,f
 27923  1A57  2A5A               	goto	l8689
 27924  1A58                     l8683:	
 27925                           
 27926                           ;doprnt.c: 759: else
 27927                           ;doprnt.c: 760: width = 0;
 27928  1A58  01C8               	clrf	sprintf@width
 27929  1A59  01C9               	clrf	sprintf@width+1
 27930  1A5A                     l8689:	
 27931                           ;doprnt.c: 764: while(width--)
 27932                           
 27933  1A5A  30FF               	movlw	255
 27934  1A5B  07C8               	addwf	sprintf@width,f
 27935  1A5C  30FF               	movlw	255
 27936  1A5D  3DC9               	addwfc	sprintf@width+1,f
 27937  1A5E  0A48               	incf	sprintf@width,w
 27938  1A5F  1903               	btfsc	3,2
 27939  1A60  0A49               	incf	sprintf@width+1,w
 27940  1A61  1903               	btfsc	3,2
 27941  1A62  2A82               	goto	l8697
 27942                           
 27943                           ;doprnt.c: 765: ((*sp++ = (' ')));
 27944  1A63  082F               	movf	sprintf@sp,w
 27945  1A64  0086               	movwf	6
 27946  1A65  0830               	movf	sprintf@sp+1,w
 27947  1A66  0087               	movwf	7
 27948  1A67  3020               	movlw	32
 27949  1A68  0081               	movwf	1
 27950  1A69  3001               	movlw	1
 27951  1A6A  07AF               	addwf	sprintf@sp,f
 27952  1A6B  3000               	movlw	0
 27953  1A6C  3DB0               	addwfc	sprintf@sp+1,f
 27954  1A6D  2A5A               	goto	l8689
 27955  1A6E                     l8691:	
 27956                           ;doprnt.c: 767: while(len--)
 27957                           
 27958                           
 27959                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 27960  1A6E  0841               	movf	sprintf@cp,w
 27961  1A6F  0084               	movwf	4
 27962  1A70  0842               	movf	sprintf@cp+1,w
 27963  1A71  0085               	movwf	5
 27964  1A72  0800               	movf	0,w	;code access
 27965  1A73  00BB               	movwf	??_sprintf
 27966  1A74  082F               	movf	sprintf@sp,w
 27967  1A75  0086               	movwf	6
 27968  1A76  0830               	movf	sprintf@sp+1,w
 27969  1A77  0087               	movwf	7
 27970  1A78  083B               	movf	??_sprintf,w
 27971  1A79  0081               	movwf	1
 27972  1A7A  3001               	movlw	1
 27973  1A7B  07C1               	addwf	sprintf@cp,f
 27974  1A7C  3000               	movlw	0
 27975  1A7D  3DC2               	addwfc	sprintf@cp+1,f
 27976  1A7E  3001               	movlw	1
 27977  1A7F  07AF               	addwf	sprintf@sp,f
 27978  1A80  3000               	movlw	0
 27979  1A81  3DB0               	addwfc	sprintf@sp+1,f
 27980  1A82                     l8697:	
 27981  1A82  3001               	movlw	1
 27982  1A83  02C6               	subwf	sprintf@len,f
 27983  1A84  3000               	movlw	0
 27984  1A85  3BC7               	subwfb	sprintf@len+1,f
 27985  1A86  0A46               	incf	sprintf@len,w
 27986  1A87  1D03               	skipz
 27987  1A88  2A6E               	goto	l8691
 27988  1A89  0A47               	incf	sprintf@len+1,w
 27989  1A8A  1903               	btfsc	3,2
 27990  1A8B  29C7               	goto	l8767
 27991  1A8C  2A6E               	goto	l8691
 27992  1A8D                     l8699:	
 27993                           ;doprnt.c: 784: case 'c':
 27994                           
 27995                           ;doprnt.c: 774: continue;
 27996                           
 27997                           
 27998                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 27999  1A8D  0843               	movf	sprintf@ap,w
 28000  1A8E  0086               	movwf	6
 28001  1A8F  0187               	clrf	7
 28002  1A90  0801               	movf	1,w
 28003  1A91  00BB               	movwf	??_sprintf
 28004  1A92  083B               	movf	??_sprintf,w
 28005  1A93  00CA               	movwf	sprintf@c
 28006  1A94  3002               	movlw	2
 28007  1A95  00BB               	movwf	??_sprintf
 28008  1A96  083B               	movf	??_sprintf,w
 28009  1A97  07C3               	addwf	sprintf@ap,f
 28010  1A98                     l8703:	
 28011                           ;doprnt.c: 802: default:
 28012                           
 28013                           
 28014                           ;doprnt.c: 805: cp = (char *)&c;
 28015  1A98  304A               	movlw	low sprintf@c
 28016  1A99  00C1               	movwf	sprintf@cp
 28017  1A9A  3000               	movlw	high sprintf@c
 28018  1A9B  00C2               	movwf	sprintf@cp+1
 28019                           
 28020                           ;doprnt.c: 806: len = 1;
 28021  1A9C  3001               	movlw	1
 28022  1A9D  00C6               	movwf	sprintf@len
 28023  1A9E  3000               	movlw	0
 28024  1A9F  00C7               	movwf	sprintf@len+1
 28025                           
 28026                           ;doprnt.c: 807: goto dostring;
 28027  1AA0  2A4B               	goto	l8679
 28028  1AA1                     l8709:	
 28029                           ;doprnt.c: 822: }
 28030                           
 28031  1AA1  0020               	movlb	0	; select bank0
 28032  1AA2  0832               	movf	sprintf@f+1,w
 28033  1AA3  00BC               	movwf	??_sprintf+1
 28034  1AA4  0831               	movf	sprintf@f,w
 28035  1AA5  00BB               	movwf	??_sprintf
 28036  1AA6  0AB1               	incf	sprintf@f,f
 28037  1AA7  1903               	skipnz
 28038  1AA8  0AB2               	incf	sprintf@f+1,f
 28039  1AA9  083B               	movf	??_sprintf,w
 28040  1AAA  0084               	movwf	4
 28041  1AAB  083C               	movf	??_sprintf+1,w
 28042  1AAC  0085               	movwf	5
 28043  1AAD  0800               	movf	0,w	;code access
 28044  1AAE  00CA               	movwf	sprintf@c
 28045                           
 28046                           ; Switch size 1, requested type "space"
 28047                           ; Number of cases is 5, Range of values is 0 to 115
 28048                           ; switch strategies available:
 28049                           ; Name         Instructions Cycles
 28050                           ; simple_byte           16     9 (average)
 28051                           ; direct_byte          238     6 (fixed)
 28052                           ; jumptable            260     6 (fixed)
 28053                           ;	Chosen strategy is simple_byte
 28054  1AAF  3A00               	xorlw	0	; case 0
 28055  1AB0  1903               	skipnz
 28056  1AB1  2B88               	goto	l8769
 28057  1AB2  3A63               	xorlw	99	; case 99
 28058  1AB3  1903               	skipnz
 28059  1AB4  2A8D               	goto	l8699
 28060  1AB5  3A07               	xorlw	7	; case 100
 28061  1AB6  1903               	skipnz
 28062  1AB7  2ABF               	goto	l8711
 28063  1AB8  3A0D               	xorlw	13	; case 105
 28064  1AB9  1903               	skipnz
 28065  1ABA  2ABF               	goto	l8711
 28066  1ABB  3A1A               	xorlw	26	; case 115
 28067  1ABC  1903               	skipnz
 28068  1ABD  2A27               	goto	l8665
 28069  1ABE  2A98               	goto	l8703
 28070  1ABF                     l8711:	
 28071                           
 28072                           ;doprnt.c: 1253: {
 28073                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 28074  1ABF  0020               	movlb	0	; select bank0
 28075  1AC0  0843               	movf	sprintf@ap,w
 28076  1AC1  0086               	movwf	6
 28077  1AC2  0187               	clrf	7
 28078  1AC3  3F40               	moviw [0]fsr1
 28079  1AC4  00C4               	movwf	sprintf@val
 28080  1AC5  3F41               	moviw [1]fsr1
 28081  1AC6  00C5               	movwf	sprintf@val+1
 28082  1AC7  3002               	movlw	2
 28083  1AC8  00BB               	movwf	??_sprintf
 28084  1AC9  083B               	movf	??_sprintf,w
 28085  1ACA  07C3               	addwf	sprintf@ap,f
 28086                           
 28087                           ;doprnt.c: 1261: if((int)val < 0) {
 28088  1ACB  1FC5               	btfss	sprintf@val+1,7
 28089  1ACC  2AD6               	goto	l8721
 28090                           
 28091                           ;doprnt.c: 1262: flag |= 0x03;
 28092  1ACD  3003               	movlw	3
 28093  1ACE  00BB               	movwf	??_sprintf
 28094  1ACF  083B               	movf	??_sprintf,w
 28095  1AD0  04C0               	iorwf	sprintf@flag,f
 28096                           
 28097                           ;doprnt.c: 1263: val = -val;
 28098  1AD1  09C4               	comf	sprintf@val,f
 28099  1AD2  09C5               	comf	sprintf@val+1,f
 28100  1AD3  0AC4               	incf	sprintf@val,f
 28101  1AD4  1903               	skipnz
 28102  1AD5  0AC5               	incf	sprintf@val+1,f
 28103  1AD6                     l8721:	
 28104                           
 28105                           ;doprnt.c: 1264: }
 28106                           ;doprnt.c: 1266: }
 28107                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 28108  1AD6  01CA               	clrf	sprintf@c
 28109  1AD7  0ACA               	incf	sprintf@c,f
 28110  1AD8  3005               	movlw	5
 28111  1AD9  064A               	xorwf	sprintf@c,w
 28112  1ADA  1903               	btfsc	3,2
 28113  1ADB  2AFB               	goto	l8733
 28114  1ADC                     l8727:	
 28115                           
 28116                           ;doprnt.c: 1306: if(val < dpowers[c])
 28117  1ADC  084A               	movf	sprintf@c,w
 28118  1ADD  00BB               	movwf	??_sprintf
 28119  1ADE  01BC               	clrf	??_sprintf+1
 28120  1ADF  35BB               	lslf	??_sprintf,f
 28121  1AE0  0DBC               	rlf	??_sprintf+1,f
 28122  1AE1  3000               	movlw	low (_dpowers| (0+32768))
 28123  1AE2  073B               	addwf	??_sprintf,w
 28124  1AE3  0084               	movwf	4
 28125  1AE4  30A8               	movlw	high (_dpowers| (0+32768))
 28126  1AE5  3D3C               	addwfc	??_sprintf+1,w
 28127  1AE6  0085               	movwf	5
 28128  1AE7  3F00               	moviw [0]fsr0
 28129  1AE8  00BD               	movwf	??_sprintf+2
 28130  1AE9  3F01               	moviw [1]fsr0
 28131  1AEA  00BE               	movwf	??_sprintf+3
 28132  1AEB  083E               	movf	??_sprintf+3,w
 28133  1AEC  0245               	subwf	sprintf@val+1,w
 28134  1AED  1D03               	skipz
 28135  1AEE  2AF1               	goto	u5315
 28136  1AEF  083D               	movf	??_sprintf+2,w
 28137  1AF0  0244               	subwf	sprintf@val,w
 28138  1AF1                     u5315:	
 28139  1AF1  1C03               	btfss	3,0
 28140  1AF2  2AFB               	goto	l8733
 28141                           
 28142                           ;doprnt.c: 1307: break;
 28143  1AF3  3001               	movlw	1
 28144  1AF4  00BB               	movwf	??_sprintf
 28145  1AF5  083B               	movf	??_sprintf,w
 28146  1AF6  07CA               	addwf	sprintf@c,f
 28147  1AF7  3005               	movlw	5
 28148  1AF8  064A               	xorwf	sprintf@c,w
 28149  1AF9  1D03               	btfss	3,2
 28150  1AFA  2ADC               	goto	l8727
 28151  1AFB                     l8733:	
 28152                           
 28153                           ;doprnt.c: 1345: if(width && flag & 0x03)
 28154  1AFB  0848               	movf	sprintf@width,w
 28155  1AFC  0449               	iorwf	sprintf@width+1,w
 28156  1AFD  1903               	btfsc	3,2
 28157  1AFE  2B07               	goto	l1611
 28158  1AFF  0840               	movf	sprintf@flag,w
 28159  1B00  3903               	andlw	3
 28160  1B01  1903               	btfsc	3,2
 28161  1B02  2B07               	goto	l1611
 28162                           
 28163                           ;doprnt.c: 1346: width--;
 28164  1B03  30FF               	movlw	255
 28165  1B04  07C8               	addwf	sprintf@width,f
 28166  1B05  30FF               	movlw	255
 28167  1B06  3DC9               	addwfc	sprintf@width+1,f
 28168  1B07                     l1611:	
 28169                           
 28170                           ;doprnt.c: 1381: if(width > c)
 28171  1B07  084A               	movf	sprintf@c,w
 28172  1B08  00BB               	movwf	??_sprintf
 28173  1B09  01BC               	clrf	??_sprintf+1
 28174  1B0A  1BBB               	btfsc	??_sprintf,7
 28175  1B0B  03BC               	decf	??_sprintf+1,f
 28176  1B0C  083C               	movf	??_sprintf+1,w
 28177  1B0D  3A80               	xorlw	128
 28178  1B0E  00BD               	movwf	??_sprintf+2
 28179  1B0F  0849               	movf	sprintf@width+1,w
 28180  1B10  3A80               	xorlw	128
 28181  1B11  023D               	subwf	??_sprintf+2,w
 28182  1B12  1D03               	skipz
 28183  1B13  2B16               	goto	u5355
 28184  1B14  0848               	movf	sprintf@width,w
 28185  1B15  023B               	subwf	??_sprintf,w
 28186  1B16                     u5355:	
 28187  1B16  1803               	skipnc
 28188  1B17  2B23               	goto	l8741
 28189                           
 28190                           ;doprnt.c: 1382: width -= c;
 28191  1B18  0020               	movlb	0	; select bank0
 28192  1B19  084A               	movf	sprintf@c,w
 28193  1B1A  00BB               	movwf	??_sprintf
 28194  1B1B  01BC               	clrf	??_sprintf+1
 28195  1B1C  1BBB               	btfsc	??_sprintf,7
 28196  1B1D  03BC               	decf	??_sprintf+1,f
 28197  1B1E  083B               	movf	??_sprintf,w
 28198  1B1F  02C8               	subwf	sprintf@width,f
 28199  1B20  083C               	movf	??_sprintf+1,w
 28200  1B21  3BC9               	subwfb	sprintf@width+1,f
 28201  1B22  2B26               	goto	l8743
 28202  1B23                     l8741:	
 28203                           
 28204                           ;doprnt.c: 1383: else
 28205                           ;doprnt.c: 1384: width = 0;
 28206  1B23  0020               	movlb	0	; select bank0
 28207  1B24  01C8               	clrf	sprintf@width
 28208  1B25  01C9               	clrf	sprintf@width+1
 28209  1B26                     l8743:	
 28210                           
 28211                           ;doprnt.c: 1422: {
 28212                           ;doprnt.c: 1424: if(width
 28213                           ;doprnt.c: 1428: )
 28214  1B26  0848               	movf	sprintf@width,w
 28215  1B27  0449               	iorwf	sprintf@width+1,w
 28216  1B28  1903               	btfsc	3,2
 28217  1B29  2B3C               	goto	l8751
 28218  1B2A                     l8745:	
 28219                           ;doprnt.c: 1429: do
 28220                           
 28221                           
 28222                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 28223  1B2A  082F               	movf	sprintf@sp,w
 28224  1B2B  0086               	movwf	6
 28225  1B2C  0830               	movf	sprintf@sp+1,w
 28226  1B2D  0087               	movwf	7
 28227  1B2E  3020               	movlw	32
 28228  1B2F  0081               	movwf	1
 28229  1B30  3001               	movlw	1
 28230  1B31  07AF               	addwf	sprintf@sp,f
 28231  1B32  3000               	movlw	0
 28232  1B33  3DB0               	addwfc	sprintf@sp+1,f
 28233                           
 28234                           ;doprnt.c: 1431: while(--width);
 28235  1B34  30FF               	movlw	255
 28236  1B35  07C8               	addwf	sprintf@width,f
 28237  1B36  30FF               	movlw	255
 28238  1B37  3DC9               	addwfc	sprintf@width+1,f
 28239  1B38  0848               	movf	sprintf@width,w
 28240  1B39  0449               	iorwf	sprintf@width+1,w
 28241  1B3A  1D03               	btfss	3,2
 28242  1B3B  2B2A               	goto	l8745
 28243  1B3C                     l8751:	
 28244                           
 28245                           ;doprnt.c: 1438: if(flag & 0x03)
 28246  1B3C  0840               	movf	sprintf@flag,w
 28247  1B3D  3903               	andlw	3
 28248  1B3E  1903               	btfsc	3,2
 28249  1B3F  2B4A               	goto	l8757
 28250                           
 28251                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 28252  1B40  082F               	movf	sprintf@sp,w
 28253  1B41  0086               	movwf	6
 28254  1B42  0830               	movf	sprintf@sp+1,w
 28255  1B43  0087               	movwf	7
 28256  1B44  302D               	movlw	45
 28257  1B45  0081               	movwf	1
 28258  1B46  3001               	movlw	1
 28259  1B47  07AF               	addwf	sprintf@sp,f
 28260  1B48  3000               	movlw	0
 28261  1B49  3DB0               	addwfc	sprintf@sp+1,f
 28262  1B4A                     l8757:	
 28263                           
 28264                           ;doprnt.c: 1469: }
 28265                           ;doprnt.c: 1472: prec = c;
 28266  1B4A  084A               	movf	sprintf@c,w
 28267  1B4B  00BB               	movwf	??_sprintf
 28268  1B4C  083B               	movf	??_sprintf,w
 28269  1B4D  00BF               	movwf	sprintf@prec
 28270  1B4E                     l8765:	
 28271                           ;doprnt.c: 1474: while(prec--) {
 28272                           
 28273  1B4E  30FF               	movlw	255
 28274  1B4F  00BB               	movwf	??_sprintf
 28275  1B50  083B               	movf	??_sprintf,w
 28276  1B51  07BF               	addwf	sprintf@prec,f
 28277  1B52  0A3F               	incf	sprintf@prec,w
 28278  1B53  1903               	btfsc	3,2
 28279  1B54  29C7               	goto	l8767
 28280                           
 28281                           ;doprnt.c: 1478: {
 28282                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 28283  1B55  300A               	movlw	10
 28284  1B56  00AB               	movwf	___lwmod@divisor
 28285  1B57  3000               	movlw	0
 28286  1B58  00AC               	movwf	___lwmod@divisor+1
 28287  1B59  083F               	movf	sprintf@prec,w
 28288  1B5A  00BB               	movwf	??_sprintf
 28289  1B5B  01BC               	clrf	??_sprintf+1
 28290  1B5C  35BB               	lslf	??_sprintf,f
 28291  1B5D  0DBC               	rlf	??_sprintf+1,f
 28292  1B5E  3000               	movlw	low (_dpowers| (0+32768))
 28293  1B5F  073B               	addwf	??_sprintf,w
 28294  1B60  0084               	movwf	4
 28295  1B61  30A8               	movlw	high (_dpowers| (0+32768))
 28296  1B62  3D3C               	addwfc	??_sprintf+1,w
 28297  1B63  0085               	movwf	5
 28298  1B64  3F00               	moviw [0]fsr0
 28299  1B65  00F1               	movwf	___lwdiv@divisor
 28300  1B66  3F01               	moviw [1]fsr0
 28301  1B67  00F2               	movwf	___lwdiv@divisor+1
 28302  1B68  0845               	movf	sprintf@val+1,w
 28303  1B69  00F4               	movwf	___lwdiv@dividend+1
 28304  1B6A  0844               	movf	sprintf@val,w
 28305  1B6B  00F3               	movwf	___lwdiv@dividend
 28306  1B6C  31B6  26E0  3199   	fcall	___lwdiv
 28307  1B6F  0872               	movf	?___lwdiv+1,w
 28308  1B70  0020               	movlb	0	; select bank0
 28309  1B71  00AE               	movwf	___lwmod@dividend+1
 28310  1B72  0871               	movf	?___lwdiv,w
 28311  1B73  00AD               	movwf	___lwmod@dividend
 28312  1B74  31B5  25EF  3199   	fcall	___lwmod
 28313  1B77  0020               	movlb	0	; select bank0
 28314  1B78  082B               	movf	?___lwmod,w
 28315  1B79  3E30               	addlw	48
 28316  1B7A  00BD               	movwf	??_sprintf+2
 28317  1B7B  083D               	movf	??_sprintf+2,w
 28318  1B7C  00CA               	movwf	sprintf@c
 28319                           
 28320                           ;doprnt.c: 1523: }
 28321                           ;doprnt.c: 1524: ((*sp++ = (c)));
 28322  1B7D  082F               	movf	sprintf@sp,w
 28323  1B7E  0086               	movwf	6
 28324  1B7F  0830               	movf	sprintf@sp+1,w
 28325  1B80  0087               	movwf	7
 28326  1B81  084A               	movf	sprintf@c,w
 28327  1B82  0081               	movwf	1
 28328  1B83  3001               	movlw	1
 28329  1B84  07AF               	addwf	sprintf@sp,f
 28330  1B85  3000               	movlw	0
 28331  1B86  3DB0               	addwfc	sprintf@sp+1,f
 28332  1B87  2B4E               	goto	l8765
 28333  1B88                     l8769:	
 28334                           ;doprnt.c: 1525: }
 28335                           ;doprnt.c: 1533: }
 28336                           ;doprnt.c: 1535: alldone:
 28337                           
 28338                           
 28339                           ;doprnt.c: 1538: *sp = 0;
 28340  1B88  0020               	movlb	0	; select bank0
 28341  1B89  082F               	movf	sprintf@sp,w
 28342  1B8A  0086               	movwf	6
 28343  1B8B  0830               	movf	sprintf@sp+1,w
 28344  1B8C  0087               	movwf	7
 28345  1B8D  0181               	clrf	1
 28346  1B8E  0008               	return
 28347  1B8F                     __end_of_sprintf:	
 28348                           ;doprnt.c: 1540: return 0;
 28349                           ;	Return value of _sprintf is never used
 28350                           
 28351                           
 28352                           	psect	text42
 28353  32FB                     __ptext42:	
 28354 ;; *************** function _isdigit *****************
 28355 ;; Defined at:
 28356 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/isdigit.c"
 28357 ;; Parameters:    Size  Location     Type
 28358 ;;  c               1    wreg     unsigned char 
 28359 ;; Auto vars:     Size  Location     Type
 28360 ;;  c               1    2[COMMON] unsigned char 
 28361 ;; Return value:  Size  Location     Type
 28362 ;;		None               void
 28363 ;; Registers used:
 28364 ;;		wreg, status,2, status,0
 28365 ;; Tracked objects:
 28366 ;;		On entry : 0/0
 28367 ;;		On exit  : 0/0
 28368 ;;		Unchanged: 0/0
 28369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28371 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28373 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28374 ;;Total ram usage:        2 bytes
 28375 ;; Hardware stack levels used:    1
 28376 ;; Hardware stack levels required when called:    4
 28377 ;; This function calls:
 28378 ;;		Nothing
 28379 ;; This function is called by:
 28380 ;;		_sprintf
 28381 ;; This function uses a non-reentrant model
 28382 ;;
 28383                           
 28384                           
 28385                           ;psect for function _isdigit
 28386  32FB                     _isdigit:	
 28387                           
 28388                           ;incstack = 0
 28389                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 28390                           ;isdigit@c stored from wreg
 28391  32FB  00F2               	movwf	isdigit@c
 28392  32FC  01F1               	clrf	_isdigit$3635
 28393  32FD  303A               	movlw	58
 28394  32FE  0272               	subwf	isdigit@c,w
 28395  32FF  1803               	skipnc
 28396  3300  2B07               	goto	l8485
 28397  3301  3030               	movlw	48
 28398  3302  0272               	subwf	isdigit@c,w
 28399  3303  1C03               	skipc
 28400  3304  2B07               	goto	l8485
 28401  3305  01F1               	clrf	_isdigit$3635
 28402  3306  0AF1               	incf	_isdigit$3635,f
 28403  3307                     l8485:	
 28404  3307  0C71               	rrf	_isdigit$3635,w
 28405  3308  0008               	return
 28406  3309                     __end_of_isdigit:	
 28407                           
 28408                           	psect	text43
 28409  344C                     __ptext43:	
 28410 ;; *************** function ___wmul *****************
 28411 ;; Defined at:
 28412 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
 28413 ;; Parameters:    Size  Location     Type
 28414 ;;  multiplier      2    1[COMMON] unsigned int 
 28415 ;;  multiplicand    2    3[COMMON] unsigned int 
 28416 ;; Auto vars:     Size  Location     Type
 28417 ;;  product         2    5[COMMON] unsigned int 
 28418 ;; Return value:  Size  Location     Type
 28419 ;;                  2    1[COMMON] unsigned int 
 28420 ;; Registers used:
 28421 ;;		wreg, status,2, status,0
 28422 ;; Tracked objects:
 28423 ;;		On entry : 0/0
 28424 ;;		On exit  : 0/0
 28425 ;;		Unchanged: 0/0
 28426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28427 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28428 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28430 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28431 ;;Total ram usage:        6 bytes
 28432 ;; Hardware stack levels used:    1
 28433 ;; Hardware stack levels required when called:    4
 28434 ;; This function calls:
 28435 ;;		Nothing
 28436 ;; This function is called by:
 28437 ;;		_locked_secret_check
 28438 ;;		_secret_check
 28439 ;;		_matrix_secret_check
 28440 ;;		_sprintf
 28441 ;; This function uses a non-reentrant model
 28442 ;;
 28443                           
 28444                           
 28445                           ;psect for function ___wmul
 28446  344C                     ___wmul:	
 28447                           
 28448                           ;incstack = 0
 28449                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 28450  344C  01F5               	clrf	___wmul@product
 28451  344D  01F6               	clrf	___wmul@product+1
 28452  344E                     l8491:	
 28453  344E  1C71               	btfss	___wmul@multiplier,0
 28454  344F  2C54               	goto	l1704
 28455  3450  0873               	movf	___wmul@multiplicand,w
 28456  3451  07F5               	addwf	___wmul@product,f
 28457  3452  0874               	movf	___wmul@multiplicand+1,w
 28458  3453  3DF6               	addwfc	___wmul@product+1,f
 28459  3454                     l1704:	
 28460  3454  3001               	movlw	1
 28461  3455                     u5065:	
 28462  3455  35F3               	lslf	___wmul@multiplicand,f
 28463  3456  0DF4               	rlf	___wmul@multiplicand+1,f
 28464  3457  0B89               	decfsz	9,f
 28465  3458  2C55               	goto	u5065
 28466  3459  3001               	movlw	1
 28467  345A                     u5075:	
 28468  345A  36F2               	lsrf	___wmul@multiplier+1,f
 28469  345B  0CF1               	rrf	___wmul@multiplier,f
 28470  345C  0B89               	decfsz	9,f
 28471  345D  2C5A               	goto	u5075
 28472  345E  0871               	movf	___wmul@multiplier,w
 28473  345F  0472               	iorwf	___wmul@multiplier+1,w
 28474  3460  1D03               	btfss	3,2
 28475  3461  2C4E               	goto	l8491
 28476  3462  0876               	movf	___wmul@product+1,w
 28477  3463  00F2               	movwf	?___wmul+1
 28478  3464  0875               	movf	___wmul@product,w
 28479  3465  00F1               	movwf	?___wmul
 28480  3466  0008               	return
 28481  3467                     __end_of___wmul:	
 28482                           
 28483                           	psect	text44
 28484  2882                     __ptext44:	
 28485 ;; *************** function _nullifyBadge_irTxSet *****************
 28486 ;; Defined at:
 28487 ;;		line 264 in file "nullifyBadge.c"
 28488 ;; Parameters:    Size  Location     Type
 28489 ;;		None
 28490 ;; Auto vars:     Size  Location     Type
 28491 ;;		None
 28492 ;; Return value:  Size  Location     Type
 28493 ;;                  1    wreg      void 
 28494 ;; Registers used:
 28495 ;;		None
 28496 ;; Tracked objects:
 28497 ;;		On entry : 0/0
 28498 ;;		On exit  : 0/0
 28499 ;;		Unchanged: 0/0
 28500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28505 ;;Total ram usage:        0 bytes
 28506 ;; Hardware stack levels used:    1
 28507 ;; Hardware stack levels required when called:    4
 28508 ;; This function calls:
 28509 ;;		Nothing
 28510 ;; This function is called by:
 28511 ;;		_flashy_Main
 28512 ;; This function uses a non-reentrant model
 28513 ;;
 28514                           
 28515                           
 28516                           ;psect for function _nullifyBadge_irTxSet
 28517  2882                     _nullifyBadge_irTxSet:	
 28518                           
 28519                           ;incstack = 0
 28520                           ; Regs used in _nullifyBadge_irTxSet: []
 28521                           ;nullifyBadge.c: 266: do { LATBbits.LATB7 = 0; } while(0);
 28522  2882  0022               	movlb	2	; select bank2
 28523  2883  138D               	bcf	13,7	;volatile
 28524  2884  0008               	return
 28525  2885                     __end_of_nullifyBadge_irTxSet:	
 28526                           
 28527                           	psect	text45
 28528  32B3                     __ptext45:	
 28529 ;; *************** function _nullifyBadge_irTxRelease *****************
 28530 ;; Defined at:
 28531 ;;		line 254 in file "nullifyBadge.c"
 28532 ;; Parameters:    Size  Location     Type
 28533 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 28534 ;;		 -> badge_inst(18), 
 28535 ;; Auto vars:     Size  Location     Type
 28536 ;;  badge           1    2[COMMON] PTR struct t_nullifyBadg
 28537 ;;		 -> badge_inst(18), 
 28538 ;; Return value:  Size  Location     Type
 28539 ;;                  1    wreg      void 
 28540 ;; Registers used:
 28541 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28542 ;; Tracked objects:
 28543 ;;		On entry : 0/0
 28544 ;;		On exit  : 0/0
 28545 ;;		Unchanged: 0/0
 28546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28549 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28550 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28551 ;;Total ram usage:        2 bytes
 28552 ;; Hardware stack levels used:    1
 28553 ;; Hardware stack levels required when called:    4
 28554 ;; This function calls:
 28555 ;;		Nothing
 28556 ;; This function is called by:
 28557 ;;		_flashy_Main
 28558 ;; This function uses a non-reentrant model
 28559 ;;
 28560                           
 28561                           
 28562                           ;psect for function _nullifyBadge_irTxRelease
 28563  32B3                     _nullifyBadge_irTxRelease:	
 28564                           
 28565                           ;incstack = 0
 28566                           ; Regs used in _nullifyBadge_irTxRelease: [wreg+fsr1l+fsr1h+status,2+status,0]
 28567                           ;nullifyBadge_irTxRelease@badge stored from wreg
 28568  32B3  00F2               	movwf	nullifyBadge_irTxRelease@badge
 28569                           
 28570                           ;nullifyBadge.c: 255: badge->registeredHw &= ~(1 << HW_IR_TX);
 28571  32B4  30FB               	movlw	251
 28572  32B5  00F1               	movwf	??_nullifyBadge_irTxRelease
 28573  32B6  0872               	movf	nullifyBadge_irTxRelease@badge,w
 28574  32B7  3E11               	addlw	17
 28575  32B8  0086               	movwf	6
 28576  32B9  3001               	movlw	1	; select bank2/3
 28577  32BA  0087               	movwf	7
 28578  32BB  0871               	movf	??_nullifyBadge_irTxRelease,w
 28579  32BC  0581               	andwf	1,f
 28580  32BD  0008               	return
 28581  32BE                     __end_of_nullifyBadge_irTxRelease:	
 28582                           
 28583                           	psect	text46
 28584  3317                     __ptext46:	
 28585 ;; *************** function _nullifyBadge_irTxRegister *****************
 28586 ;; Defined at:
 28587 ;;		line 242 in file "nullifyBadge.c"
 28588 ;; Parameters:    Size  Location     Type
 28589 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 28590 ;;		 -> badge_inst(18), 
 28591 ;; Auto vars:     Size  Location     Type
 28592 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 28593 ;;		 -> badge_inst(18), 
 28594 ;; Return value:  Size  Location     Type
 28595 ;;                  1    wreg      char 
 28596 ;; Registers used:
 28597 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28598 ;; Tracked objects:
 28599 ;;		On entry : 0/0
 28600 ;;		On exit  : 0/0
 28601 ;;		Unchanged: 0/0
 28602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28604 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28606 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28607 ;;Total ram usage:        1 bytes
 28608 ;; Hardware stack levels used:    1
 28609 ;; Hardware stack levels required when called:    4
 28610 ;; This function calls:
 28611 ;;		Nothing
 28612 ;; This function is called by:
 28613 ;;		_flashy_Main
 28614 ;; This function uses a non-reentrant model
 28615 ;;
 28616                           
 28617                           
 28618                           ;psect for function _nullifyBadge_irTxRegister
 28619  3317                     _nullifyBadge_irTxRegister:	
 28620                           
 28621                           ;incstack = 0
 28622                           ; Regs used in _nullifyBadge_irTxRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 28623                           ;nullifyBadge_irTxRegister@badge stored from wreg
 28624  3317  00F1               	movwf	nullifyBadge_irTxRegister@badge
 28625                           
 28626                           ;nullifyBadge.c: 243: if (badge->registeredHw & HW_IR_TX) {
 28627  3318  0871               	movf	nullifyBadge_irTxRegister@badge,w
 28628  3319  3E11               	addlw	17
 28629  331A  0086               	movwf	6
 28630  331B  3001               	movlw	1	; select bank2/3
 28631  331C  0087               	movwf	7
 28632  331D  1881               	btfsc	1,1
 28633  331E  0008               	return
 28634                           
 28635                           ;nullifyBadge.c: 246: else {
 28636                           ;nullifyBadge.c: 247: badge->registeredHw |= (1 << HW_IR_TX);
 28637                           
 28638                           ;nullifyBadge.c: 245: }
 28639                           
 28640                           ;nullifyBadge.c: 244: return -1;
 28641                           ;	Return value of _nullifyBadge_irTxRegister is never used
 28642  331F  0871               	movf	nullifyBadge_irTxRegister@badge,w
 28643  3320  3E11               	addlw	17
 28644  3321  0086               	movwf	6
 28645  3322  3001               	movlw	1	; select bank2/3
 28646  3323  0087               	movwf	7
 28647  3324  1501               	bsf	1,2
 28648                           
 28649                           ;nullifyBadge.c: 248: return 0;
 28650                           ;	Return value of _nullifyBadge_irTxRegister is never used
 28651  3325  0008               	return
 28652  3326                     __end_of_nullifyBadge_irTxRegister:	
 28653                           
 28654                           	psect	text47
 28655  321B                     __ptext47:	
 28656 ;; *************** function _nullifyBadge_irTxClr *****************
 28657 ;; Defined at:
 28658 ;;		line 270 in file "nullifyBadge.c"
 28659 ;; Parameters:    Size  Location     Type
 28660 ;;		None
 28661 ;; Auto vars:     Size  Location     Type
 28662 ;;		None
 28663 ;; Return value:  Size  Location     Type
 28664 ;;                  1    wreg      void 
 28665 ;; Registers used:
 28666 ;;		None
 28667 ;; Tracked objects:
 28668 ;;		On entry : 0/0
 28669 ;;		On exit  : 0/0
 28670 ;;		Unchanged: 0/0
 28671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28676 ;;Total ram usage:        0 bytes
 28677 ;; Hardware stack levels used:    1
 28678 ;; Hardware stack levels required when called:    4
 28679 ;; This function calls:
 28680 ;;		Nothing
 28681 ;; This function is called by:
 28682 ;;		_flashy_Main
 28683 ;; This function uses a non-reentrant model
 28684 ;;
 28685                           
 28686                           
 28687                           ;psect for function _nullifyBadge_irTxClr
 28688  321B                     _nullifyBadge_irTxClr:	
 28689                           
 28690                           ;incstack = 0
 28691                           ; Regs used in _nullifyBadge_irTxClr: []
 28692                           ;nullifyBadge.c: 272: do { LATBbits.LATB7 = 1; } while(0);
 28693  321B  0022               	movlb	2	; select bank2
 28694  321C  178D               	bsf	13,7	;volatile
 28695  321D  0008               	return
 28696  321E                     __end_of_nullifyBadge_irTxClr:	
 28697                           
 28698                           	psect	text48
 28699  1800                     __ptext48:	
 28700 ;; *************** function _nullifyBadge_irGet *****************
 28701 ;; Defined at:
 28702 ;;		line 232 in file "nullifyBadge.c"
 28703 ;; Parameters:    Size  Location     Type
 28704 ;;		None
 28705 ;; Auto vars:     Size  Location     Type
 28706 ;;		None
 28707 ;; Return value:  Size  Location     Type
 28708 ;;                  1    wreg      unsigned char 
 28709 ;; Registers used:
 28710 ;;		wreg, status,2, status,0
 28711 ;; Tracked objects:
 28712 ;;		On entry : 0/0
 28713 ;;		On exit  : 0/0
 28714 ;;		Unchanged: 0/0
 28715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28720 ;;Total ram usage:        0 bytes
 28721 ;; Hardware stack levels used:    1
 28722 ;; Hardware stack levels required when called:    4
 28723 ;; This function calls:
 28724 ;;		Nothing
 28725 ;; This function is called by:
 28726 ;;		_flashy_Main
 28727 ;; This function uses a non-reentrant model
 28728 ;;
 28729                           
 28730                           
 28731                           ;psect for function _nullifyBadge_irGet
 28732  1800                     _nullifyBadge_irGet:	
 28733                           
 28734                           ;nullifyBadge.c: 233: return PORTBbits.RB5;
 28735                           
 28736                           ;incstack = 0
 28737                           ; Regs used in _nullifyBadge_irGet: [wreg+status,2+status,0]
 28738  1800  0020               	movlb	0	; select bank0
 28739  1801  0E0D               	swapf	13,w	;volatile
 28740  1802  0C89               	rrf	9,f
 28741  1803  3901               	andlw	1
 28742  1804  0008               	return
 28743  1805                     __end_of_nullifyBadge_irGet:	
 28744                           
 28745                           	psect	text49
 28746  364B                     __ptext49:	
 28747 ;; *************** function _nullifyBadge_buttonsGet *****************
 28748 ;; Defined at:
 28749 ;;		line 187 in file "nullifyBadge.c"
 28750 ;; Parameters:    Size  Location     Type
 28751 ;;		None
 28752 ;; Auto vars:     Size  Location     Type
 28753 ;;  retVal          1    3[COMMON] unsigned char 
 28754 ;; Return value:  Size  Location     Type
 28755 ;;                  1    wreg      unsigned char 
 28756 ;; Registers used:
 28757 ;;		wreg, status,2, status,0
 28758 ;; Tracked objects:
 28759 ;;		On entry : 0/0
 28760 ;;		On exit  : 0/0
 28761 ;;		Unchanged: 0/0
 28762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28764 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28765 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28766 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28767 ;;Total ram usage:        3 bytes
 28768 ;; Hardware stack levels used:    1
 28769 ;; Hardware stack levels required when called:    4
 28770 ;; This function calls:
 28771 ;;		Nothing
 28772 ;; This function is called by:
 28773 ;;		_menu_Main
 28774 ;;		_flashy_Main
 28775 ;;		_locked_Main
 28776 ;;		_secret_Main
 28777 ;;		_slot_Main
 28778 ;;		_matrix_Main
 28779 ;; This function uses a non-reentrant model
 28780 ;;
 28781                           
 28782                           
 28783                           ;psect for function _nullifyBadge_buttonsGet
 28784  364B                     _nullifyBadge_buttonsGet:	
 28785                           
 28786                           ;nullifyBadge.c: 188: u8 retVal = 0x0F;
 28787                           
 28788                           ;incstack = 0
 28789                           ; Regs used in _nullifyBadge_buttonsGet: [wreg+status,2+status,0]
 28790  364B  300F               	movlw	15
 28791  364C  00F1               	movwf	??_nullifyBadge_buttonsGet
 28792  364D  0871               	movf	??_nullifyBadge_buttonsGet,w
 28793  364E  00F3               	movwf	nullifyBadge_buttonsGet@retVal
 28794                           
 28795                           ;nullifyBadge.c: 190: retVal &= ~(PORTCbits.RC5 << 0);
 28796  364F  0020               	movlb	0	; select bank0
 28797  3650  0E0E               	swapf	14,w	;volatile
 28798  3651  0C89               	rrf	9,f
 28799  3652  3901               	andlw	1
 28800  3653  3AFF               	xorlw	255
 28801  3654  00F1               	movwf	??_nullifyBadge_buttonsGet
 28802  3655  0871               	movf	??_nullifyBadge_buttonsGet,w
 28803  3656  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28804                           
 28805                           ;nullifyBadge.c: 191: retVal &= ~(PORTAbits.RA2 << 1);
 28806  3657  0C0C               	rrf	12,w	;volatile
 28807  3658  0C89               	rrf	9,f
 28808  3659  3901               	andlw	1
 28809  365A  0709               	addwf	9,w
 28810  365B  3AFF               	xorlw	255
 28811  365C  00F1               	movwf	??_nullifyBadge_buttonsGet
 28812  365D  0871               	movf	??_nullifyBadge_buttonsGet,w
 28813  365E  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28814                           
 28815                           ;nullifyBadge.c: 192: retVal &= ~(PORTAbits.RA4 << 2);
 28816  365F  0E0C               	swapf	12,w	;volatile
 28817  3660  3901               	andlw	1
 28818  3661  00F1               	movwf	??_nullifyBadge_buttonsGet
 28819  3662  3001               	movlw	1
 28820  3663                     u5145:	
 28821  3663  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 28822  3664  3EFF               	addlw	-1
 28823  3665  1D03               	skipz
 28824  3666  2E63               	goto	u5145
 28825  3667  3571               	lslf	??_nullifyBadge_buttonsGet,w
 28826  3668  3AFF               	xorlw	255
 28827  3669  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 28828  366A  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 28829  366B  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28830                           
 28831                           ;nullifyBadge.c: 193: retVal &= ~(PORTAbits.RA5 << 3);
 28832  366C  0E0C               	swapf	12,w	;volatile
 28833  366D  0C89               	rrf	9,f
 28834  366E  3901               	andlw	1
 28835  366F  00F1               	movwf	??_nullifyBadge_buttonsGet
 28836  3670  3002               	movlw	2
 28837  3671                     u5155:	
 28838  3671  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 28839  3672  3EFF               	addlw	-1
 28840  3673  1D03               	skipz
 28841  3674  2E71               	goto	u5155
 28842  3675  3571               	lslf	??_nullifyBadge_buttonsGet,w
 28843  3676  3AFF               	xorlw	255
 28844  3677  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 28845  3678  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 28846  3679  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28847                           
 28848                           ;nullifyBadge.c: 195: return retVal;
 28849  367A  0873               	movf	nullifyBadge_buttonsGet@retVal,w
 28850  367B  0008               	return
 28851  367C                     __end_of_nullifyBadge_buttonsGet:	
 28852                           
 28853                           	psect	text50
 28854  33AF                     __ptext50:	
 28855 ;; *************** function _let_alternate *****************
 28856 ;; Defined at:
 28857 ;;		line 194 in file "main.c"
 28858 ;; Parameters:    Size  Location     Type
 28859 ;;  count           2   16[BANK0 ] unsigned int 
 28860 ;; Auto vars:     Size  Location     Type
 28861 ;;		None
 28862 ;; Return value:  Size  Location     Type
 28863 ;;                  1    wreg      void 
 28864 ;; Registers used:
 28865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28866 ;; Tracked objects:
 28867 ;;		On entry : 0/0
 28868 ;;		On exit  : 0/0
 28869 ;;		Unchanged: 0/0
 28870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28871 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28875 ;;Total ram usage:        2 bytes
 28876 ;; Hardware stack levels used:    1
 28877 ;; Hardware stack levels required when called:    9
 28878 ;; This function calls:
 28879 ;;		_nullifyBadge_userLedsSet
 28880 ;; This function is called by:
 28881 ;;		_flashy_Main
 28882 ;; This function uses a non-reentrant model
 28883 ;;
 28884                           
 28885                           
 28886                           ;psect for function _let_alternate
 28887  33AF                     _let_alternate:	
 28888                           
 28889                           ;main.c: 195: if(count %2 == 1){
 28890                           
 28891                           ;incstack = 0
 28892                           ; Regs used in _let_alternate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 28893  33AF  0020               	movlb	0	; select bank0
 28894  33B0  1C30               	btfss	let_alternate@count,0
 28895  33B1  2BBA               	goto	l8533
 28896                           
 28897                           ;main.c: 196: nullifyBadge_userLedsSet(&badge_inst,43349);
 28898  33B2  3055               	movlw	85
 28899  33B3  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28900  33B4  30A9               	movlw	169
 28901  33B5  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28902  33B6  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28903  33B7  31B3  2355         	fcall	_nullifyBadge_userLedsSet
 28904                           
 28905                           ;main.c: 197: }
 28906  33B9  0008               	return
 28907  33BA                     l8533:	
 28908                           
 28909                           ;main.c: 198: else{
 28910                           ;main.c: 199: nullifyBadge_userLedsSet(&badge_inst,21162);
 28911  33BA  30AA               	movlw	170
 28912  33BB  0020               	movlb	0	; select bank0
 28913  33BC  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28914  33BD  3052               	movlw	82
 28915  33BE  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28916  33BF  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28917  33C0  31B3  2355         	fcall	_nullifyBadge_userLedsSet
 28918  33C2  0008               	return
 28919  33C3                     __end_of_let_alternate:	
 28920                           
 28921                           	psect	text51
 28922  28E7                     __ptext51:	
 28923 ;; *************** function _led_roundabout *****************
 28924 ;; Defined at:
 28925 ;;		line 159 in file "main.c"
 28926 ;; Parameters:    Size  Location     Type
 28927 ;;  counter         2   16[BANK0 ] unsigned int 
 28928 ;; Auto vars:     Size  Location     Type
 28929 ;;  size            2   22[BANK0 ] unsigned int 
 28930 ;;  leds            2   20[BANK0 ] unsigned int 
 28931 ;; Return value:  Size  Location     Type
 28932 ;;                  1    wreg      void 
 28933 ;; Registers used:
 28934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28935 ;; Tracked objects:
 28936 ;;		On entry : 0/0
 28937 ;;		On exit  : 0/0
 28938 ;;		Unchanged: 0/0
 28939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28940 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28941 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28942 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28943 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28944 ;;Total ram usage:        8 bytes
 28945 ;; Hardware stack levels used:    1
 28946 ;; Hardware stack levels required when called:    9
 28947 ;; This function calls:
 28948 ;;		___lwmod
 28949 ;;		_nullifyBadge_userLedsSet
 28950 ;; This function is called by:
 28951 ;;		_flashy_Main
 28952 ;; This function uses a non-reentrant model
 28953 ;;
 28954                           
 28955                           
 28956                           ;psect for function _led_roundabout
 28957  28E7                     _led_roundabout:	
 28958                           
 28959                           ;main.c: 160: u16 size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 28960                           
 28961                           ;incstack = 0
 28962                           ; Regs used in _led_roundabout: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 28963  28E7  300E               	movlw	14
 28964  28E8  0020               	movlb	0	; select bank0
 28965  28E9  00B6               	movwf	led_roundabout@size
 28966  28EA  3000               	movlw	0
 28967  28EB  00B7               	movwf	led_roundabout@size+1
 28968                           
 28969                           ;main.c: 161: u16 leds = roundabout_leds[counter % size];
 28970  28EC  0837               	movf	led_roundabout@size+1,w
 28971  28ED  00AC               	movwf	___lwmod@divisor+1
 28972  28EE  0836               	movf	led_roundabout@size,w
 28973  28EF  00AB               	movwf	___lwmod@divisor
 28974  28F0  0831               	movf	led_roundabout@counter+1,w
 28975  28F1  00AE               	movwf	___lwmod@dividend+1
 28976  28F2  0830               	movf	led_roundabout@counter,w
 28977  28F3  00AD               	movwf	___lwmod@dividend
 28978  28F4  31B5  25EF  31A8   	fcall	___lwmod
 28979  28F7  0020               	movlb	0	; select bank0
 28980  28F8  082B               	movf	?___lwmod,w
 28981  28F9  0709               	addwf	9,w
 28982  28FA  3EBC               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 28983  28FB  0086               	movwf	6
 28984  28FC  3003               	movlw	3	; select bank7/8
 28985  28FD  0087               	movwf	7
 28986  28FE  3F40               	moviw [0]fsr1
 28987  28FF  00B4               	movwf	led_roundabout@leds
 28988  2900  3F41               	moviw [1]fsr1
 28989  2901  00B5               	movwf	led_roundabout@leds+1
 28990                           
 28991                           ;main.c: 163: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 28992  2902  300E               	movlw	14
 28993  2903  00B6               	movwf	led_roundabout@size
 28994  2904  3000               	movlw	0
 28995  2905  00B7               	movwf	led_roundabout@size+1
 28996                           
 28997                           ;main.c: 164: leds |= roundabout_leds_inverse[counter % size];
 28998  2906  0837               	movf	led_roundabout@size+1,w
 28999  2907  00AC               	movwf	___lwmod@divisor+1
 29000  2908  0836               	movf	led_roundabout@size,w
 29001  2909  00AB               	movwf	___lwmod@divisor
 29002  290A  0831               	movf	led_roundabout@counter+1,w
 29003  290B  00AE               	movwf	___lwmod@dividend+1
 29004  290C  0830               	movf	led_roundabout@counter,w
 29005  290D  00AD               	movwf	___lwmod@dividend
 29006  290E  31B5  25EF  31A8   	fcall	___lwmod
 29007  2911  0020               	movlb	0	; select bank0
 29008  2912  082B               	movf	?___lwmod,w
 29009  2913  0709               	addwf	9,w
 29010  2914  3EA0               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 29011  2915  0086               	movwf	6
 29012  2916  3003               	movlw	3	; select bank7/8
 29013  2917  0087               	movwf	7
 29014  2918  3F40               	moviw [0]fsr1
 29015  2919  00B2               	movwf	??_led_roundabout
 29016  291A  3F41               	moviw [1]fsr1
 29017  291B  00B3               	movwf	??_led_roundabout+1
 29018  291C  0832               	movf	??_led_roundabout,w
 29019  291D  04B4               	iorwf	led_roundabout@leds,f
 29020  291E  0833               	movf	??_led_roundabout+1,w
 29021  291F  04B5               	iorwf	led_roundabout@leds+1,f
 29022                           
 29023                           ;main.c: 166: nullifyBadge_userLedsSet(&badge_inst, leds);
 29024  2920  0835               	movf	led_roundabout@leds+1,w
 29025  2921  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29026  2922  0834               	movf	led_roundabout@leds,w
 29027  2923  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29028  2924  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29029  2925  31B3  2355         	fcall	_nullifyBadge_userLedsSet
 29030  2927  0008               	return
 29031  2928                     __end_of_led_roundabout:	
 29032                           
 29033                           	psect	text52
 29034  2A80                     __ptext52:	
 29035 ;; *************** function _led_rand *****************
 29036 ;; Defined at:
 29037 ;;		line 179 in file "main.c"
 29038 ;; Parameters:    Size  Location     Type
 29039 ;;		None
 29040 ;; Auto vars:     Size  Location     Type
 29041 ;;  spark           2   27[BANK0 ] unsigned int 
 29042 ;; Return value:  Size  Location     Type
 29043 ;;                  1    wreg      void 
 29044 ;; Registers used:
 29045 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29046 ;; Tracked objects:
 29047 ;;		On entry : 0/0
 29048 ;;		On exit  : 0/0
 29049 ;;		Unchanged: 0/0
 29050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29052 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29053 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29054 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29055 ;;Total ram usage:       10 bytes
 29056 ;; Hardware stack levels used:    1
 29057 ;; Hardware stack levels required when called:    9
 29058 ;; This function calls:
 29059 ;;		___almod
 29060 ;;		_nullifyBadge_userLedsSet
 29061 ;;		_rand
 29062 ;; This function is called by:
 29063 ;;		_flashy_Main
 29064 ;;		_slot_Finished_Animation
 29065 ;; This function uses a non-reentrant model
 29066 ;;
 29067                           
 29068                           
 29069                           ;psect for function _led_rand
 29070  2A80                     _led_rand:	
 29071                           
 29072                           ;main.c: 181: u16 spark = rand() % 65535;
 29073                           
 29074                           ;incstack = 0
 29075                           ; Regs used in _led_rand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29076  2A80  3000               	movlw	0
 29077  2A81  0020               	movlb	0	; select bank0
 29078  2A82  00AE               	movwf	___almod@divisor+3
 29079  2A83  3000               	movlw	0
 29080  2A84  00AD               	movwf	___almod@divisor+2
 29081  2A85  30FF               	movlw	255
 29082  2A86  00AC               	movwf	___almod@divisor+1
 29083  2A87  30FF               	movlw	255
 29084  2A88  00AB               	movwf	___almod@divisor
 29085  2A89  31A9  216A  31AA   	fcall	_rand
 29086  2A8C  0020               	movlb	0	; select bank0
 29087  2A8D  0824               	movf	?_rand,w
 29088  2A8E  00AF               	movwf	___almod@dividend
 29089  2A8F  0825               	movf	?_rand+1,w
 29090  2A90  00B0               	movwf	___almod@dividend+1
 29091  2A91  0D89               	rlf	9,f
 29092  2A92  3B89               	subwfb	9,f
 29093  2A93  0989               	comf	9,f
 29094  2A94  00B1               	movwf	___almod@dividend+2
 29095  2A95  00B2               	movwf	___almod@dividend+3
 29096  2A96  31AF  2792  31AA   	fcall	___almod
 29097  2A99  0020               	movlb	0	; select bank0
 29098  2A9A  082C               	movf	?___almod+1,w
 29099  2A9B  00BC               	movwf	led_rand@spark+1
 29100  2A9C  082B               	movf	?___almod,w
 29101  2A9D  00BB               	movwf	led_rand@spark
 29102                           
 29103                           ;main.c: 182: if ( (spark | 64511) == 65535 ){
 29104  2A9E  30FF               	movlw	255
 29105  2A9F  00B3               	movwf	??_led_rand
 29106  2AA0  30FB               	movlw	251
 29107  2AA1  00B4               	movwf	??_led_rand+1
 29108  2AA2  3000               	movlw	0
 29109  2AA3  00B5               	movwf	??_led_rand+2
 29110  2AA4  3000               	movlw	0
 29111  2AA5  00B6               	movwf	??_led_rand+3
 29112  2AA6  083B               	movf	led_rand@spark,w
 29113  2AA7  00B7               	movwf	??_led_rand+4
 29114  2AA8  083C               	movf	led_rand@spark+1,w
 29115  2AA9  00B8               	movwf	??_led_rand+5
 29116  2AAA  01B9               	clrf	??_led_rand+6
 29117  2AAB  01BA               	clrf	??_led_rand+7
 29118  2AAC  0837               	movf	??_led_rand+4,w
 29119  2AAD  04B3               	iorwf	??_led_rand,f
 29120  2AAE  0838               	movf	??_led_rand+5,w
 29121  2AAF  04B4               	iorwf	??_led_rand+1,f
 29122  2AB0  0839               	movf	??_led_rand+6,w
 29123  2AB1  04B5               	iorwf	??_led_rand+2,f
 29124  2AB2  083A               	movf	??_led_rand+7,w
 29125  2AB3  04B6               	iorwf	??_led_rand+3,f
 29126  2AB4  0A33               	incf	??_led_rand,w
 29127  2AB5  1D03               	skipz
 29128  2AB6  2AC0               	goto	l8447
 29129  2AB7  0A34               	incf	??_led_rand+1,w
 29130  2AB8  0435               	iorwf	??_led_rand+2,w
 29131  2AB9  0436               	iorwf	??_led_rand+3,w
 29132  2ABA  1D03               	btfss	3,2
 29133  2ABB  2AC0               	goto	l8447
 29134                           
 29135                           ;main.c: 183: spark ^= 1024 ;
 29136  2ABC  3000               	movlw	0
 29137  2ABD  06BB               	xorwf	led_rand@spark,f
 29138  2ABE  3004               	movlw	4
 29139  2ABF  06BC               	xorwf	led_rand@spark+1,f
 29140  2AC0                     l8447:	
 29141                           
 29142                           ;main.c: 184: }
 29143                           ;main.c: 185: nullifyBadge_userLedsSet(&badge_inst,spark);
 29144  2AC0  083C               	movf	led_rand@spark+1,w
 29145  2AC1  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29146  2AC2  083B               	movf	led_rand@spark,w
 29147  2AC3  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29148  2AC4  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29149  2AC5  31B3  2355         	fcall	_nullifyBadge_userLedsSet
 29150  2AC7  0008               	return
 29151  2AC8                     __end_of_led_rand:	
 29152                           
 29153                           	psect	text53
 29154  296A                     __ptext53:	
 29155 ;; *************** function _rand *****************
 29156 ;; Defined at:
 29157 ;;		line 12 in file "/Applications/microchip/xc8/v1.42/sources/common/rand.c"
 29158 ;; Parameters:    Size  Location     Type
 29159 ;;		None
 29160 ;; Auto vars:     Size  Location     Type
 29161 ;;		None
 29162 ;; Return value:  Size  Location     Type
 29163 ;;                  2    4[BANK0 ] int 
 29164 ;; Registers used:
 29165 ;;		wreg, status,2, status,0, pclath, cstack
 29166 ;; Tracked objects:
 29167 ;;		On entry : 0/0
 29168 ;;		On exit  : 0/0
 29169 ;;		Unchanged: 0/0
 29170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29171 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29173 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29174 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29175 ;;Total ram usage:        7 bytes
 29176 ;; Hardware stack levels used:    1
 29177 ;; Hardware stack levels required when called:    5
 29178 ;; This function calls:
 29179 ;;		___lmul
 29180 ;; This function is called by:
 29181 ;;		_led_rand
 29182 ;;		_slot_Setup
 29183 ;;		_slot_Main
 29184 ;; This function uses a non-reentrant model
 29185 ;;
 29186                           
 29187                           
 29188                           ;psect for function _rand
 29189  296A                     _rand:	
 29190                           
 29191                           ;incstack = 0
 29192                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 29193  296A  0021               	movlb	1	; select bank1
 29194  296B  084F               	movf	(_randx+3)^(0+128),w
 29195  296C  00F4               	movwf	___lmul@multiplier+3
 29196  296D  084E               	movf	(_randx+2)^(0+128),w
 29197  296E  00F3               	movwf	___lmul@multiplier+2
 29198  296F  084D               	movf	(_randx+1)^(0+128),w
 29199  2970  00F2               	movwf	___lmul@multiplier+1
 29200  2971  084C               	movf	_randx^(0+128),w
 29201  2972  00F1               	movwf	___lmul@multiplier
 29202  2973  3041               	movlw	65
 29203  2974  00F8               	movwf	___lmul@multiplicand+3
 29204  2975  30C6               	movlw	198
 29205  2976  00F7               	movwf	___lmul@multiplicand+2
 29206  2977  304E               	movlw	78
 29207  2978  00F6               	movwf	___lmul@multiplicand+1
 29208  2979  306D               	movlw	109
 29209  297A  00F5               	movwf	___lmul@multiplicand
 29210  297B  31B6  267C  31A9   	fcall	___lmul
 29211  297E  0874               	movf	?___lmul+3,w
 29212  297F  0021               	movlb	1	; select bank1
 29213  2980  00CF               	movwf	(_randx+3)^(0+128)
 29214  2981  0873               	movf	?___lmul+2,w
 29215  2982  00CE               	movwf	(_randx+2)^(0+128)
 29216  2983  0872               	movf	?___lmul+1,w
 29217  2984  00CD               	movwf	(_randx+1)^(0+128)
 29218  2985  0871               	movf	?___lmul,w
 29219  2986  00CC               	movwf	_randx^(0+128)
 29220  2987  3039               	movlw	57
 29221  2988  07CC               	addwf	_randx^(0+128),f
 29222  2989  3030               	movlw	48
 29223  298A  3DCD               	addwfc	(_randx+1)^(0+128),f
 29224  298B  3000               	movlw	0
 29225  298C  3DCE               	addwfc	(_randx+2)^(0+128),f
 29226  298D  3000               	movlw	0
 29227  298E  3DCF               	addwfc	(_randx+3)^(0+128),f
 29228  298F  084C               	movf	_randx^(0+128),w
 29229  2990  0020               	movlb	0	; select bank0
 29230  2991  00A6               	movwf	??_rand
 29231  2992  0021               	movlb	1	; select bank1
 29232  2993  084D               	movf	(_randx+1)^(0+128),w
 29233  2994  0020               	movlb	0	; select bank0
 29234  2995  00A7               	movwf	??_rand+1
 29235  2996  0021               	movlb	1	; select bank1
 29236  2997  084E               	movf	(_randx+2)^(0+128),w
 29237  2998  0020               	movlb	0	; select bank0
 29238  2999  00A8               	movwf	??_rand+2
 29239  299A  0021               	movlb	1	; select bank1
 29240  299B  084F               	movf	(_randx+3)^(0+128),w
 29241  299C  0020               	movlb	0	; select bank0
 29242  299D  00A9               	movwf	??_rand+3
 29243  299E  3010               	movlw	16
 29244  299F  00AA               	movwf	??_rand+4
 29245  29A0                     u4725:	
 29246  29A0  37A9               	asrf	??_rand+3,f
 29247  29A1  0CA8               	rrf	??_rand+2,f
 29248  29A2  0CA7               	rrf	??_rand+1,f
 29249  29A3  0CA6               	rrf	??_rand,f
 29250  29A4  0BAA               	decfsz	??_rand+4,f
 29251  29A5  29A0               	goto	u4725
 29252  29A6  30FF               	movlw	255
 29253  29A7  0526               	andwf	??_rand,w
 29254  29A8  00A4               	movwf	?_rand
 29255  29A9  307F               	movlw	127
 29256  29AA  0527               	andwf	??_rand+1,w
 29257  29AB  00A5               	movwf	?_rand+1
 29258  29AC  0008               	return
 29259  29AD                     __end_of_rand:	
 29260                           
 29261                           	psect	text54
 29262  367C                     __ptext54:	
 29263 ;; *************** function ___lmul *****************
 29264 ;; Defined at:
 29265 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul32.c"
 29266 ;; Parameters:    Size  Location     Type
 29267 ;;  multiplier      4    1[COMMON] unsigned long 
 29268 ;;  multiplicand    4    5[COMMON] unsigned long 
 29269 ;; Auto vars:     Size  Location     Type
 29270 ;;  product         4    0[BANK0 ] unsigned long 
 29271 ;; Return value:  Size  Location     Type
 29272 ;;                  4    1[COMMON] unsigned long 
 29273 ;; Registers used:
 29274 ;;		wreg, status,2, status,0
 29275 ;; Tracked objects:
 29276 ;;		On entry : 0/0
 29277 ;;		On exit  : 0/0
 29278 ;;		Unchanged: 0/0
 29279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29280 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29281 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29283 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29284 ;;Total ram usage:       12 bytes
 29285 ;; Hardware stack levels used:    1
 29286 ;; Hardware stack levels required when called:    4
 29287 ;; This function calls:
 29288 ;;		Nothing
 29289 ;; This function is called by:
 29290 ;;		_rand
 29291 ;; This function uses a non-reentrant model
 29292 ;;
 29293                           
 29294                           
 29295                           ;psect for function ___lmul
 29296  367C                     ___lmul:	
 29297                           
 29298                           ;incstack = 0
 29299                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 29300  367C  3000               	movlw	0
 29301  367D  0020               	movlb	0	; select bank0
 29302  367E  00A3               	movwf	___lmul@product+3
 29303  367F  3000               	movlw	0
 29304  3680  00A2               	movwf	___lmul@product+2
 29305  3681  3000               	movlw	0
 29306  3682  00A1               	movwf	___lmul@product+1
 29307  3683  3000               	movlw	0
 29308  3684  00A0               	movwf	___lmul@product
 29309  3685                     l8271:	
 29310  3685  1C71               	btfss	___lmul@multiplier,0
 29311  3686  2E90               	goto	l8275
 29312  3687  0875               	movf	___lmul@multiplicand,w
 29313  3688  0020               	movlb	0	; select bank0
 29314  3689  07A0               	addwf	___lmul@product,f
 29315  368A  0876               	movf	___lmul@multiplicand+1,w
 29316  368B  3DA1               	addwfc	___lmul@product+1,f
 29317  368C  0877               	movf	___lmul@multiplicand+2,w
 29318  368D  3DA2               	addwfc	___lmul@product+2,f
 29319  368E  0878               	movf	___lmul@multiplicand+3,w
 29320  368F  3DA3               	addwfc	___lmul@product+3,f
 29321  3690                     l8275:	
 29322  3690  3001               	movlw	1
 29323  3691                     u4675:	
 29324  3691  35F5               	lslf	___lmul@multiplicand,f
 29325  3692  0DF6               	rlf	___lmul@multiplicand+1,f
 29326  3693  0DF7               	rlf	___lmul@multiplicand+2,f
 29327  3694  0DF8               	rlf	___lmul@multiplicand+3,f
 29328  3695  0B89               	decfsz	9,f
 29329  3696  2E91               	goto	u4675
 29330  3697  3001               	movlw	1
 29331  3698                     u4685:	
 29332  3698  36F4               	lsrf	___lmul@multiplier+3,f
 29333  3699  0CF3               	rrf	___lmul@multiplier+2,f
 29334  369A  0CF2               	rrf	___lmul@multiplier+1,f
 29335  369B  0CF1               	rrf	___lmul@multiplier,f
 29336  369C  0B89               	decfsz	9,f
 29337  369D  2E98               	goto	u4685
 29338  369E  0874               	movf	___lmul@multiplier+3,w
 29339  369F  0473               	iorwf	___lmul@multiplier+2,w
 29340  36A0  0472               	iorwf	___lmul@multiplier+1,w
 29341  36A1  0471               	iorwf	___lmul@multiplier,w
 29342  36A2  1D03               	skipz
 29343  36A3  2E85               	goto	l8271
 29344  36A4  0020               	movlb	0	; select bank0
 29345  36A5  0823               	movf	___lmul@product+3,w
 29346  36A6  00F4               	movwf	?___lmul+3
 29347  36A7  0822               	movf	___lmul@product+2,w
 29348  36A8  00F3               	movwf	?___lmul+2
 29349  36A9  0821               	movf	___lmul@product+1,w
 29350  36AA  00F2               	movwf	?___lmul+1
 29351  36AB  0820               	movf	___lmul@product,w
 29352  36AC  00F1               	movwf	?___lmul
 29353  36AD  0008               	return
 29354  36AE                     __end_of___lmul:	
 29355                           
 29356                           	psect	text55
 29357  2F92                     __ptext55:	
 29358 ;; *************** function ___almod *****************
 29359 ;; Defined at:
 29360 ;;		line 5 in file "/Applications/microchip/xc8/v1.42/sources/common/almod.c"
 29361 ;; Parameters:    Size  Location     Type
 29362 ;;  divisor         4   11[BANK0 ] long 
 29363 ;;  dividend        4   15[BANK0 ] long 
 29364 ;; Auto vars:     Size  Location     Type
 29365 ;;  sign            1   11[COMMON] unsigned char 
 29366 ;;  counter         1   10[COMMON] unsigned char 
 29367 ;; Return value:  Size  Location     Type
 29368 ;;                  4   11[BANK0 ] long 
 29369 ;; Registers used:
 29370 ;;		wreg, status,2, status,0
 29371 ;; Tracked objects:
 29372 ;;		On entry : 0/0
 29373 ;;		On exit  : 0/0
 29374 ;;		Unchanged: 0/0
 29375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29376 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29377 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29378 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29379 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29380 ;;Total ram usage:       11 bytes
 29381 ;; Hardware stack levels used:    1
 29382 ;; Hardware stack levels required when called:    4
 29383 ;; This function calls:
 29384 ;;		Nothing
 29385 ;; This function is called by:
 29386 ;;		_led_rand
 29387 ;; This function uses a non-reentrant model
 29388 ;;
 29389                           
 29390                           
 29391                           ;psect for function ___almod
 29392  2F92                     ___almod:	
 29393                           
 29394                           ;incstack = 0
 29395                           ; Regs used in ___almod: [wreg+status,2+status,0]
 29396  2F92  01FB               	clrf	___almod@sign
 29397  2F93  0020               	movlb	0	; select bank0
 29398  2F94  1FB2               	btfss	___almod@dividend+3,7
 29399  2F95  2FA3               	goto	l1772
 29400  2F96  09AF               	comf	___almod@dividend,f
 29401  2F97  09B0               	comf	___almod@dividend+1,f
 29402  2F98  09B1               	comf	___almod@dividend+2,f
 29403  2F99  09B2               	comf	___almod@dividend+3,f
 29404  2F9A  0AAF               	incf	___almod@dividend,f
 29405  2F9B  1903               	skipnz
 29406  2F9C  0AB0               	incf	___almod@dividend+1,f
 29407  2F9D  1903               	skipnz
 29408  2F9E  0AB1               	incf	___almod@dividend+2,f
 29409  2F9F  1903               	skipnz
 29410  2FA0  0AB2               	incf	___almod@dividend+3,f
 29411  2FA1  01FB               	clrf	___almod@sign
 29412  2FA2  0AFB               	incf	___almod@sign,f
 29413  2FA3                     l1772:	
 29414  2FA3  1FAE               	btfss	___almod@divisor+3,7
 29415  2FA4  2FB0               	goto	l8323
 29416  2FA5  09AB               	comf	___almod@divisor,f
 29417  2FA6  09AC               	comf	___almod@divisor+1,f
 29418  2FA7  09AD               	comf	___almod@divisor+2,f
 29419  2FA8  09AE               	comf	___almod@divisor+3,f
 29420  2FA9  0AAB               	incf	___almod@divisor,f
 29421  2FAA  1903               	skipnz
 29422  2FAB  0AAC               	incf	___almod@divisor+1,f
 29423  2FAC  1903               	skipnz
 29424  2FAD  0AAD               	incf	___almod@divisor+2,f
 29425  2FAE  1903               	skipnz
 29426  2FAF  0AAE               	incf	___almod@divisor+3,f
 29427  2FB0                     l8323:	
 29428  2FB0  082E               	movf	___almod@divisor+3,w
 29429  2FB1  042D               	iorwf	___almod@divisor+2,w
 29430  2FB2  042C               	iorwf	___almod@divisor+1,w
 29431  2FB3  042B               	iorwf	___almod@divisor,w
 29432  2FB4  1903               	skipnz
 29433  2FB5  2FE9               	goto	l8339
 29434  2FB6  01FA               	clrf	___almod@counter
 29435  2FB7  0AFA               	incf	___almod@counter,f
 29436  2FB8                     l8329:	
 29437  2FB8  1BAE               	btfsc	___almod@divisor+3,7
 29438  2FB9  2FC6               	goto	l8331
 29439  2FBA  3001               	movlw	1
 29440  2FBB                     u4765:	
 29441  2FBB  35AB               	lslf	___almod@divisor,f
 29442  2FBC  0DAC               	rlf	___almod@divisor+1,f
 29443  2FBD  0DAD               	rlf	___almod@divisor+2,f
 29444  2FBE  0DAE               	rlf	___almod@divisor+3,f
 29445  2FBF  0B89               	decfsz	9,f
 29446  2FC0  2FBB               	goto	u4765
 29447  2FC1  3001               	movlw	1
 29448  2FC2  00F9               	movwf	??___almod
 29449  2FC3  0879               	movf	??___almod,w
 29450  2FC4  07FA               	addwf	___almod@counter,f
 29451  2FC5  2FB8               	goto	l8329
 29452  2FC6                     l8331:	
 29453  2FC6  082E               	movf	___almod@divisor+3,w
 29454  2FC7  0232               	subwf	___almod@dividend+3,w
 29455  2FC8  1D03               	skipz
 29456  2FC9  2FD4               	goto	u4785
 29457  2FCA  082D               	movf	___almod@divisor+2,w
 29458  2FCB  0231               	subwf	___almod@dividend+2,w
 29459  2FCC  1D03               	skipz
 29460  2FCD  2FD4               	goto	u4785
 29461  2FCE  082C               	movf	___almod@divisor+1,w
 29462  2FCF  0230               	subwf	___almod@dividend+1,w
 29463  2FD0  1D03               	skipz
 29464  2FD1  2FD4               	goto	u4785
 29465  2FD2  082B               	movf	___almod@divisor,w
 29466  2FD3  022F               	subwf	___almod@dividend,w
 29467  2FD4                     u4785:	
 29468  2FD4  1C03               	skipc
 29469  2FD5  2FDE               	goto	l8335
 29470  2FD6  082B               	movf	___almod@divisor,w
 29471  2FD7  02AF               	subwf	___almod@dividend,f
 29472  2FD8  082C               	movf	___almod@divisor+1,w
 29473  2FD9  3BB0               	subwfb	___almod@dividend+1,f
 29474  2FDA  082D               	movf	___almod@divisor+2,w
 29475  2FDB  3BB1               	subwfb	___almod@dividend+2,f
 29476  2FDC  082E               	movf	___almod@divisor+3,w
 29477  2FDD  3BB2               	subwfb	___almod@dividend+3,f
 29478  2FDE                     l8335:	
 29479  2FDE  3001               	movlw	1
 29480  2FDF                     u4795:	
 29481  2FDF  36AE               	lsrf	___almod@divisor+3,f
 29482  2FE0  0CAD               	rrf	___almod@divisor+2,f
 29483  2FE1  0CAC               	rrf	___almod@divisor+1,f
 29484  2FE2  0CAB               	rrf	___almod@divisor,f
 29485  2FE3  0B89               	decfsz	9,f
 29486  2FE4  2FDF               	goto	u4795
 29487  2FE5  3001               	movlw	1
 29488  2FE6  02FA               	subwf	___almod@counter,f
 29489  2FE7  1D03               	btfss	3,2
 29490  2FE8  2FC6               	goto	l8331
 29491  2FE9                     l8339:	
 29492  2FE9  087B               	movf	___almod@sign,w
 29493  2FEA  1903               	btfsc	3,2
 29494  2FEB  2FF7               	goto	l8343
 29495  2FEC  09AF               	comf	___almod@dividend,f
 29496  2FED  09B0               	comf	___almod@dividend+1,f
 29497  2FEE  09B1               	comf	___almod@dividend+2,f
 29498  2FEF  09B2               	comf	___almod@dividend+3,f
 29499  2FF0  0AAF               	incf	___almod@dividend,f
 29500  2FF1  1903               	skipnz
 29501  2FF2  0AB0               	incf	___almod@dividend+1,f
 29502  2FF3  1903               	skipnz
 29503  2FF4  0AB1               	incf	___almod@dividend+2,f
 29504  2FF5  1903               	skipnz
 29505  2FF6  0AB2               	incf	___almod@dividend+3,f
 29506  2FF7                     l8343:	
 29507  2FF7  0832               	movf	___almod@dividend+3,w
 29508  2FF8  00AE               	movwf	?___almod+3
 29509  2FF9  0831               	movf	___almod@dividend+2,w
 29510  2FFA  00AD               	movwf	?___almod+2
 29511  2FFB  0830               	movf	___almod@dividend+1,w
 29512  2FFC  00AC               	movwf	?___almod+1
 29513  2FFD  082F               	movf	___almod@dividend,w
 29514  2FFE  00AB               	movwf	?___almod
 29515  2FFF  0008               	return
 29516  3000                     __end_of___almod:	
 29517                           
 29518                           	psect	text56
 29519  28A6                     __ptext56:	
 29520 ;; *************** function _led_curtain *****************
 29521 ;; Defined at:
 29522 ;;		line 169 in file "main.c"
 29523 ;; Parameters:    Size  Location     Type
 29524 ;;  counter         2   16[BANK0 ] unsigned int 
 29525 ;; Auto vars:     Size  Location     Type
 29526 ;;  size            2   22[BANK0 ] unsigned int 
 29527 ;;  leds            2   20[BANK0 ] unsigned int 
 29528 ;; Return value:  Size  Location     Type
 29529 ;;                  1    wreg      void 
 29530 ;; Registers used:
 29531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29532 ;; Tracked objects:
 29533 ;;		On entry : 0/0
 29534 ;;		On exit  : 0/0
 29535 ;;		Unchanged: 0/0
 29536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29537 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29538 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29539 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29540 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29541 ;;Total ram usage:        8 bytes
 29542 ;; Hardware stack levels used:    1
 29543 ;; Hardware stack levels required when called:    9
 29544 ;; This function calls:
 29545 ;;		___lwmod
 29546 ;;		_nullifyBadge_userLedsSet
 29547 ;; This function is called by:
 29548 ;;		_flashy_Main
 29549 ;;		_matrix_Main
 29550 ;; This function uses a non-reentrant model
 29551 ;;
 29552                           
 29553                           
 29554                           ;psect for function _led_curtain
 29555  28A6                     _led_curtain:	
 29556                           
 29557                           ;main.c: 170: u16 size = sizeof(curtain_leds) / sizeof(curtain_leds[0]);
 29558                           
 29559                           ;incstack = 0
 29560                           ; Regs used in _led_curtain: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29561  28A6  300E               	movlw	14
 29562  28A7  0020               	movlb	0	; select bank0
 29563  28A8  00B6               	movwf	led_curtain@size
 29564  28A9  3000               	movlw	0
 29565  28AA  00B7               	movwf	led_curtain@size+1
 29566                           
 29567                           ;main.c: 171: u16 leds = curtain_leds[counter % size];
 29568  28AB  0837               	movf	led_curtain@size+1,w
 29569  28AC  00AC               	movwf	___lwmod@divisor+1
 29570  28AD  0836               	movf	led_curtain@size,w
 29571  28AE  00AB               	movwf	___lwmod@divisor
 29572  28AF  0831               	movf	led_curtain@counter+1,w
 29573  28B0  00AE               	movwf	___lwmod@dividend+1
 29574  28B1  0830               	movf	led_curtain@counter,w
 29575  28B2  00AD               	movwf	___lwmod@dividend
 29576  28B3  31B5  25EF  31A8   	fcall	___lwmod
 29577  28B6  0020               	movlb	0	; select bank0
 29578  28B7  082B               	movf	?___lwmod,w
 29579  28B8  0709               	addwf	9,w
 29580  28B9  3E3C               	addlw	(low (_curtain_leds| (0+1024)))& (0+255)
 29581  28BA  0086               	movwf	6
 29582  28BB  3004               	movlw	4	; select bank8/9
 29583  28BC  0087               	movwf	7
 29584  28BD  3F40               	moviw [0]fsr1
 29585  28BE  00B4               	movwf	led_curtain@leds
 29586  28BF  3F41               	moviw [1]fsr1
 29587  28C0  00B5               	movwf	led_curtain@leds+1
 29588                           
 29589                           ;main.c: 173: size = sizeof(curtain_leds_inverse) / sizeof(curtain_leds_inverse[0]);
 29590  28C1  300E               	movlw	14
 29591  28C2  00B6               	movwf	led_curtain@size
 29592  28C3  3000               	movlw	0
 29593  28C4  00B7               	movwf	led_curtain@size+1
 29594                           
 29595                           ;main.c: 174: leds |= curtain_leds_inverse[counter % size];
 29596  28C5  0837               	movf	led_curtain@size+1,w
 29597  28C6  00AC               	movwf	___lwmod@divisor+1
 29598  28C7  0836               	movf	led_curtain@size,w
 29599  28C8  00AB               	movwf	___lwmod@divisor
 29600  28C9  0831               	movf	led_curtain@counter+1,w
 29601  28CA  00AE               	movwf	___lwmod@dividend+1
 29602  28CB  0830               	movf	led_curtain@counter,w
 29603  28CC  00AD               	movwf	___lwmod@dividend
 29604  28CD  31B5  25EF  31A8   	fcall	___lwmod
 29605  28D0  0020               	movlb	0	; select bank0
 29606  28D1  082B               	movf	?___lwmod,w
 29607  28D2  0709               	addwf	9,w
 29608  28D3  3E20               	addlw	(low (_curtain_leds_inverse| (0+1024)))& (0+255)
 29609  28D4  0086               	movwf	6
 29610  28D5  3004               	movlw	4	; select bank8/9
 29611  28D6  0087               	movwf	7
 29612  28D7  3F40               	moviw [0]fsr1
 29613  28D8  00B2               	movwf	??_led_curtain
 29614  28D9  3F41               	moviw [1]fsr1
 29615  28DA  00B3               	movwf	??_led_curtain+1
 29616  28DB  0832               	movf	??_led_curtain,w
 29617  28DC  04B4               	iorwf	led_curtain@leds,f
 29618  28DD  0833               	movf	??_led_curtain+1,w
 29619  28DE  04B5               	iorwf	led_curtain@leds+1,f
 29620                           
 29621                           ;main.c: 176: nullifyBadge_userLedsSet(&badge_inst, leds);
 29622  28DF  0835               	movf	led_curtain@leds+1,w
 29623  28E0  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29624  28E1  0834               	movf	led_curtain@leds,w
 29625  28E2  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29626  28E3  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29627  28E4  31B3  2355         	fcall	_nullifyBadge_userLedsSet
 29628  28E6  0008               	return
 29629  28E7                     __end_of_led_curtain:	
 29630                           
 29631                           	psect	text57
 29632  3260                     __ptext57:	
 29633 ;; *************** function _led_circle *****************
 29634 ;; Defined at:
 29635 ;;		line 188 in file "main.c"
 29636 ;; Parameters:    Size  Location     Type
 29637 ;;  count           2   16[BANK0 ] unsigned int 
 29638 ;; Auto vars:     Size  Location     Type
 29639 ;;		None
 29640 ;; Return value:  Size  Location     Type
 29641 ;;                  1    wreg      void 
 29642 ;; Registers used:
 29643 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29644 ;; Tracked objects:
 29645 ;;		On entry : 0/0
 29646 ;;		On exit  : 0/0
 29647 ;;		Unchanged: 0/0
 29648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29649 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29652 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29653 ;;Total ram usage:        2 bytes
 29654 ;; Hardware stack levels used:    1
 29655 ;; Hardware stack levels required when called:    9
 29656 ;; This function calls:
 29657 ;;		_nullifyBadge_userLedsSet
 29658 ;; This function is called by:
 29659 ;;		_flashy_Main
 29660 ;;		_slot_Running_Animation
 29661 ;; This function uses a non-reentrant model
 29662 ;;
 29663                           
 29664                           
 29665                           ;psect for function _led_circle
 29666  3260                     _led_circle:	
 29667                           
 29668                           ;main.c: 190: nullifyBadge_userLedsSet(&badge_inst,count);
 29669                           
 29670                           ;incstack = 0
 29671                           ; Regs used in _led_circle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29672  3260  0020               	movlb	0	; select bank0
 29673  3261  0831               	movf	led_circle@count+1,w
 29674  3262  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29675  3263  0830               	movf	led_circle@count,w
 29676  3264  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29677  3265  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29678  3266  31B3  2355         	fcall	_nullifyBadge_userLedsSet
 29679  3268  0008               	return
 29680  3269                     __end_of_led_circle:	
 29681                           
 29682                           	psect	text58
 29683  2EC8                     __ptext58:	
 29684 ;; *************** function _led_Parody *****************
 29685 ;; Defined at:
 29686 ;;		line 203 in file "main.c"
 29687 ;; Parameters:    Size  Location     Type
 29688 ;;  count           2   16[BANK0 ] unsigned int 
 29689 ;; Auto vars:     Size  Location     Type
 29690 ;;  size            2   22[BANK0 ] unsigned int 
 29691 ;;  leds            2   20[BANK0 ] unsigned int 
 29692 ;; Return value:  Size  Location     Type
 29693 ;;                  1    wreg      void 
 29694 ;; Registers used:
 29695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29696 ;; Tracked objects:
 29697 ;;		On entry : 0/0
 29698 ;;		On exit  : 0/0
 29699 ;;		Unchanged: 0/0
 29700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29701 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29702 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29703 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29704 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29705 ;;Total ram usage:        8 bytes
 29706 ;; Hardware stack levels used:    1
 29707 ;; Hardware stack levels required when called:    9
 29708 ;; This function calls:
 29709 ;;		___lwmod
 29710 ;;		_nullifyBadge_userLedsSet
 29711 ;; This function is called by:
 29712 ;;		_flashy_Main
 29713 ;;		_matrix_Main
 29714 ;; This function uses a non-reentrant model
 29715 ;;
 29716                           
 29717                           
 29718                           ;psect for function _led_Parody
 29719  2EC8                     _led_Parody:	
 29720                           
 29721                           ;main.c: 204: u16 size;
 29722                           ;main.c: 205: u16 leds;
 29723                           ;main.c: 207: if (count % 30 == 0){
 29724                           
 29725                           ;incstack = 0
 29726                           ; Regs used in _led_Parody: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29727  2EC8  301E               	movlw	30
 29728  2EC9  0020               	movlb	0	; select bank0
 29729  2ECA  00AB               	movwf	___lwmod@divisor
 29730  2ECB  3000               	movlw	0
 29731  2ECC  00AC               	movwf	___lwmod@divisor+1
 29732  2ECD  0831               	movf	led_Parody@count+1,w
 29733  2ECE  00AE               	movwf	___lwmod@dividend+1
 29734  2ECF  0830               	movf	led_Parody@count,w
 29735  2ED0  00AD               	movwf	___lwmod@dividend
 29736  2ED1  31B5  25EF  31AE   	fcall	___lwmod
 29737  2ED4  0020               	movlb	0	; select bank0
 29738  2ED5  082B               	movf	?___lwmod,w
 29739  2ED6  042C               	iorwf	?___lwmod+1,w
 29740  2ED7  1D03               	btfss	3,2
 29741  2ED8  2EDE               	goto	l625
 29742                           
 29743                           ;main.c: 208: oddeven ^= 1 ;
 29744  2ED9  3001               	movlw	1
 29745  2EDA  0021               	movlb	1	; select bank1
 29746  2EDB  06B8               	xorwf	_oddeven^(0+128),f
 29747  2EDC  3000               	movlw	0
 29748  2EDD  06B9               	xorwf	(_oddeven+1)^(0+128),f
 29749  2EDE                     l625:	
 29750                           
 29751                           ;main.c: 209: }
 29752                           ;main.c: 211: if(count %2 == oddeven){
 29753  2EDE  3001               	movlw	1
 29754  2EDF  0020               	movlb	0	; select bank0
 29755  2EE0  0530               	andwf	led_Parody@count,w
 29756  2EE1  00B2               	movwf	??_led_Parody
 29757  2EE2  3000               	movlw	0
 29758  2EE3  0531               	andwf	led_Parody@count+1,w
 29759  2EE4  00B3               	movwf	??_led_Parody+1
 29760  2EE5  0021               	movlb	1	; select bank1
 29761  2EE6  0839               	movf	(_oddeven+1)^(0+128),w
 29762  2EE7  0020               	movlb	0	; select bank0
 29763  2EE8  0633               	xorwf	??_led_Parody+1,w
 29764  2EE9  1D03               	skipz
 29765  2EEA  2EEF               	goto	u5135
 29766  2EEB  0021               	movlb	1	; select bank1
 29767  2EEC  0838               	movf	_oddeven^(0+128),w
 29768  2EED  0020               	movlb	0	; select bank0
 29769  2EEE  0632               	xorwf	??_led_Parody,w
 29770  2EEF                     u5135:	
 29771  2EEF  1D03               	skipz
 29772  2EF0  2F0B               	goto	l8543
 29773                           
 29774                           ;main.c: 213: size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 29775  2EF1  300E               	movlw	14
 29776  2EF2  00B6               	movwf	led_Parody@size
 29777  2EF3  3000               	movlw	0
 29778  2EF4  00B7               	movwf	led_Parody@size+1
 29779                           
 29780                           ;main.c: 214: leds = roundabout_leds[count % size];
 29781  2EF5  0837               	movf	led_Parody@size+1,w
 29782  2EF6  00AC               	movwf	___lwmod@divisor+1
 29783  2EF7  0836               	movf	led_Parody@size,w
 29784  2EF8  00AB               	movwf	___lwmod@divisor
 29785  2EF9  0831               	movf	led_Parody@count+1,w
 29786  2EFA  00AE               	movwf	___lwmod@dividend+1
 29787  2EFB  0830               	movf	led_Parody@count,w
 29788  2EFC  00AD               	movwf	___lwmod@dividend
 29789  2EFD  31B5  25EF  31AE   	fcall	___lwmod
 29790  2F00  0020               	movlb	0	; select bank0
 29791  2F01  082B               	movf	?___lwmod,w
 29792  2F02  0709               	addwf	9,w
 29793  2F03  3EBC               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 29794  2F04  0086               	movwf	6
 29795  2F05  3003               	movlw	3	; select bank7/8
 29796  2F06  0087               	movwf	7
 29797  2F07  3F40               	moviw [0]fsr1
 29798  2F08  00B4               	movwf	led_Parody@leds
 29799  2F09  3F41               	moviw [1]fsr1
 29800  2F0A  2F24               	goto	L14
 29801  2F0B                     l8543:	
 29802                           ;main.c: 215: }
 29803                           
 29804                           
 29805                           ;main.c: 216: else{
 29806                           ;main.c: 217: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 29807  2F0B  300E               	movlw	14
 29808  2F0C  00B6               	movwf	led_Parody@size
 29809  2F0D  3000               	movlw	0
 29810  2F0E  00B7               	movwf	led_Parody@size+1
 29811                           
 29812                           ;main.c: 218: leds = roundabout_leds_inverse[count % size];
 29813  2F0F  0837               	movf	led_Parody@size+1,w
 29814  2F10  00AC               	movwf	___lwmod@divisor+1
 29815  2F11  0836               	movf	led_Parody@size,w
 29816  2F12  00AB               	movwf	___lwmod@divisor
 29817  2F13  0831               	movf	led_Parody@count+1,w
 29818  2F14  00AE               	movwf	___lwmod@dividend+1
 29819  2F15  0830               	movf	led_Parody@count,w
 29820  2F16  00AD               	movwf	___lwmod@dividend
 29821  2F17  31B5  25EF  31AE   	fcall	___lwmod
 29822  2F1A  0020               	movlb	0	; select bank0
 29823  2F1B  082B               	movf	?___lwmod,w
 29824  2F1C  0709               	addwf	9,w
 29825  2F1D  3EA0               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 29826  2F1E  0086               	movwf	6
 29827  2F1F  3003               	movlw	3	; select bank7/8
 29828  2F20  0087               	movwf	7
 29829  2F21  3F40               	moviw [0]fsr1
 29830  2F22  00B4               	movwf	led_Parody@leds
 29831  2F23  3F41               	moviw [1]fsr1
 29832  2F24                     L14:	
 29833  2F24  00B5               	movwf	led_Parody@leds+1
 29834                           
 29835                           ;main.c: 219: }
 29836                           ;main.c: 220: nullifyBadge_userLedsSet(&badge_inst, leds);
 29837  2F25  0835               	movf	led_Parody@leds+1,w
 29838  2F26  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29839  2F27  0834               	movf	led_Parody@leds,w
 29840  2F28  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29841  2F29  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29842  2F2A  31B3  2355         	fcall	_nullifyBadge_userLedsSet
 29843  2F2C  0008               	return
 29844  2F2D                     __end_of_led_Parody:	
 29845                           
 29846                           	psect	text59
 29847  3355                     __ptext59:	
 29848 ;; *************** function _nullifyBadge_userLedsSet *****************
 29849 ;; Defined at:
 29850 ;;		line 164 in file "nullifyBadge.c"
 29851 ;; Parameters:    Size  Location     Type
 29852 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 29853 ;;		 -> badge_inst(18), 
 29854 ;;  userLedData     2   13[BANK0 ] unsigned int 
 29855 ;; Auto vars:     Size  Location     Type
 29856 ;;  badge           1   15[BANK0 ] PTR struct t_nullifyBadg
 29857 ;;		 -> badge_inst(18), 
 29858 ;; Return value:  Size  Location     Type
 29859 ;;                  1    wreg      void 
 29860 ;; Registers used:
 29861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29862 ;; Tracked objects:
 29863 ;;		On entry : 0/0
 29864 ;;		On exit  : 0/0
 29865 ;;		Unchanged: 0/0
 29866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29867 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29870 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29871 ;;Total ram usage:        3 bytes
 29872 ;; Hardware stack levels used:    1
 29873 ;; Hardware stack levels required when called:    8
 29874 ;; This function calls:
 29875 ;;		_displayL2_SetUserLeds
 29876 ;; This function is called by:
 29877 ;;		_led_roundabout
 29878 ;;		_led_curtain
 29879 ;;		_led_rand
 29880 ;;		_led_circle
 29881 ;;		_let_alternate
 29882 ;;		_led_Parody
 29883 ;;		_menu_display_option
 29884 ;;		_flashy_Main
 29885 ;;		_locked_Main
 29886 ;; This function uses a non-reentrant model
 29887 ;;
 29888                           
 29889                           
 29890                           ;psect for function _nullifyBadge_userLedsSet
 29891  3355                     _nullifyBadge_userLedsSet:	
 29892                           
 29893                           ;incstack = 0
 29894                           ; Regs used in _nullifyBadge_userLedsSet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 29895                           ;nullifyBadge_userLedsSet@badge stored from wreg
 29896  3355  0020               	movlb	0	; select bank0
 29897  3356  00AF               	movwf	nullifyBadge_userLedsSet@badge
 29898                           
 29899                           ;nullifyBadge.c: 165: if (badge_locked) {
 29900  3357  0021               	movlb	1	; select bank1
 29901  3358  0844               	movf	_badge_locked^(0+128),w
 29902  3359  1903               	btfsc	3,2
 29903  335A  2B5D               	goto	l8303
 29904                           
 29905                           ;nullifyBadge.c: 166: userLedData |= 1024;
 29906  335B  0020               	movlb	0	; select bank0
 29907  335C  152E               	bsf	nullifyBadge_userLedsSet@userLedData+1,2
 29908  335D                     l8303:	
 29909                           
 29910                           ;nullifyBadge.c: 167: }
 29911                           ;nullifyBadge.c: 168: displayL2_SetUserLeds(&badge->display, userLedData);
 29912  335D  0020               	movlb	0	; select bank0
 29913  335E  082E               	movf	nullifyBadge_userLedsSet@userLedData+1,w
 29914  335F  00AC               	movwf	displayL2_SetUserLeds@userLedData+1
 29915  3360  082D               	movf	nullifyBadge_userLedsSet@userLedData,w
 29916  3361  00AB               	movwf	displayL2_SetUserLeds@userLedData
 29917  3362  082F               	movf	nullifyBadge_userLedsSet@badge,w
 29918  3363  31B4  24F6         	fcall	_displayL2_SetUserLeds
 29919  3365  0008               	return
 29920  3366                     __end_of_nullifyBadge_userLedsSet:	
 29921                           
 29922                           	psect	text60
 29923  34F6                     __ptext60:	
 29924 ;; *************** function _displayL2_SetUserLeds *****************
 29925 ;; Defined at:
 29926 ;;		line 88 in file "nullifyBadge_displayL2.c"
 29927 ;; Parameters:    Size  Location     Type
 29928 ;;  display         1    wreg     PTR struct t_nullifyDisp
 29929 ;;		 -> badge_inst(18), 
 29930 ;;  userLedData     2   11[BANK0 ] unsigned int 
 29931 ;; Auto vars:     Size  Location     Type
 29932 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 29933 ;;		 -> badge_inst(18), 
 29934 ;; Return value:  Size  Location     Type
 29935 ;;                  1    wreg      void 
 29936 ;; Registers used:
 29937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29938 ;; Tracked objects:
 29939 ;;		On entry : 0/0
 29940 ;;		On exit  : 0/0
 29941 ;;		Unchanged: 0/0
 29942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29943 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29946 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29947 ;;Total ram usage:        3 bytes
 29948 ;; Hardware stack levels used:    1
 29949 ;; Hardware stack levels required when called:    7
 29950 ;; This function calls:
 29951 ;;		_displayL1_SetUserLed
 29952 ;;		_displayL1_Update
 29953 ;; This function is called by:
 29954 ;;		_nullifyBadge_userLedsSet
 29955 ;;		_nullifyBadge_userLedsSetForce
 29956 ;; This function uses a non-reentrant model
 29957 ;;
 29958                           
 29959                           
 29960                           ;psect for function _displayL2_SetUserLeds
 29961  34F6                     _displayL2_SetUserLeds:	
 29962                           
 29963                           ;incstack = 0
 29964                           ; Regs used in _displayL2_SetUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 29965                           ;displayL2_SetUserLeds@display stored from wreg
 29966  34F6  00FB               	movwf	displayL2_SetUserLeds@display
 29967                           
 29968                           ;nullifyBadge_displayL2.c: 89: display->ledVect = userLedData;
 29969  34F7  087B               	movf	displayL2_SetUserLeds@display,w
 29970  34F8  3E05               	addlw	5
 29971  34F9  0086               	movwf	6
 29972  34FA  3001               	movlw	1	; select bank2/3
 29973  34FB  0087               	movwf	7
 29974  34FC  0020               	movlb	0	; select bank0
 29975  34FD  082B               	movf	displayL2_SetUserLeds@userLedData,w
 29976  34FE  3FC0               	movwi [0]fsr1
 29977  34FF  082C               	movf	displayL2_SetUserLeds@userLedData+1,w
 29978  3500  3FC1               	movwi [1]fsr1
 29979                           
 29980                           ;nullifyBadge_displayL2.c: 90: displayL1_SetUserLed(&display->display_l1, display->ledVe
      +                          ct);
 29981  3501  087B               	movf	displayL2_SetUserLeds@display,w
 29982  3502  3E05               	addlw	5
 29983  3503  0086               	movwf	6
 29984  3504  3001               	movlw	1	; select bank2/3
 29985  3505  0087               	movwf	7
 29986  3506  3F40               	moviw [0]fsr1
 29987  3507  00F1               	movwf	displayL1_SetUserLed@userLedVect
 29988  3508  3F41               	moviw [1]fsr1
 29989  3509  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 29990  350A  087B               	movf	displayL2_SetUserLeds@display,w
 29991  350B  3E07               	addlw	7
 29992  350C  31B3  2377  31B4   	fcall	_displayL1_SetUserLed
 29993                           
 29994                           ;nullifyBadge_displayL2.c: 91: displayL1_Update(&display->display_l1);
 29995  350F  087B               	movf	displayL2_SetUserLeds@display,w
 29996  3510  3E07               	addlw	7
 29997  3511  31B3  2344         	fcall	_displayL1_Update
 29998  3513  0008               	return
 29999  3514                     __end_of_displayL2_SetUserLeds:	
 30000                           
 30001                           	psect	text61
 30002  3377                     __ptext61:	
 30003 ;; *************** function _displayL1_SetUserLed *****************
 30004 ;; Defined at:
 30005 ;;		line 71 in file "nullifyBadge_displayL1.c"
 30006 ;; Parameters:    Size  Location     Type
 30007 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30008 ;;		 -> badge_inst(18), 
 30009 ;;  userLedVect     2    1[COMMON] unsigned int 
 30010 ;; Auto vars:     Size  Location     Type
 30011 ;;  display         1    4[COMMON] PTR struct t_nullifyDisp
 30012 ;;		 -> badge_inst(18), 
 30013 ;; Return value:  Size  Location     Type
 30014 ;;                  1    wreg      void 
 30015 ;; Registers used:
 30016 ;;		wreg, fsr1l, fsr1h, status,2
 30017 ;; Tracked objects:
 30018 ;;		On entry : 0/0
 30019 ;;		On exit  : 0/0
 30020 ;;		Unchanged: 0/0
 30021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30022 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30023 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30024 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30025 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30026 ;;Total ram usage:        4 bytes
 30027 ;; Hardware stack levels used:    1
 30028 ;; Hardware stack levels required when called:    4
 30029 ;; This function calls:
 30030 ;;		Nothing
 30031 ;; This function is called by:
 30032 ;;		_displayL2_SetUserLeds
 30033 ;;		_displayL2_ClrUserLeds
 30034 ;; This function uses a non-reentrant model
 30035 ;;
 30036                           
 30037                           
 30038                           ;psect for function _displayL1_SetUserLed
 30039  3377                     _displayL1_SetUserLed:	
 30040                           
 30041                           ;incstack = 0
 30042                           ; Regs used in _displayL1_SetUserLed: [wreg+fsr1l+fsr1h+status,2]
 30043                           ;displayL1_SetUserLed@display stored from wreg
 30044  3377  00F4               	movwf	displayL1_SetUserLed@display
 30045                           
 30046                           ;nullifyBadge_displayL1.c: 73: display->displayVect[0] = (u8) (userLedVect >> 8);
 30047  3378  0872               	movf	displayL1_SetUserLed@userLedVect+1,w
 30048  3379  00F3               	movwf	??_displayL1_SetUserLed
 30049  337A  0874               	movf	displayL1_SetUserLed@display,w
 30050  337B  0086               	movwf	6
 30051  337C  3001               	movlw	1	; select bank2/3
 30052  337D  0087               	movwf	7
 30053  337E  0873               	movf	??_displayL1_SetUserLed,w
 30054  337F  0081               	movwf	1
 30055                           
 30056                           ;nullifyBadge_displayL1.c: 74: display->displayVect[1] = (u8) (userLedVect & 0xFF);
 30057  3380  0871               	movf	displayL1_SetUserLed@userLedVect,w
 30058  3381  00F3               	movwf	??_displayL1_SetUserLed
 30059  3382  0A74               	incf	displayL1_SetUserLed@display,w
 30060  3383  0086               	movwf	6
 30061  3384  3001               	movlw	1	; select bank2/3
 30062  3385  0087               	movwf	7
 30063  3386  0873               	movf	??_displayL1_SetUserLed,w
 30064  3387  0081               	movwf	1
 30065  3388  0008               	return
 30066  3389                     __end_of_displayL1_SetUserLed:	
 30067                           
 30068                           	psect	text62
 30069  2200                     __ptext62:	
 30070 ;; *************** function _flashy_display_option *****************
 30071 ;; Defined at:
 30072 ;;		line 105 in file "flashy_task.c"
 30073 ;; Parameters:    Size  Location     Type
 30074 ;;  data            2   44[BANK0 ] PTR struct t_flashy_task
 30075 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 30076 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 30077 ;; Auto vars:     Size  Location     Type
 30078 ;;		None
 30079 ;; Return value:  Size  Location     Type
 30080 ;;                  1    wreg      void 
 30081 ;; Registers used:
 30082 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30083 ;; Tracked objects:
 30084 ;;		On entry : 0/0
 30085 ;;		On exit  : 0/0
 30086 ;;		Unchanged: 0/0
 30087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30088 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30092 ;;Total ram usage:        2 bytes
 30093 ;; Hardware stack levels used:    1
 30094 ;; Hardware stack levels required when called:   10
 30095 ;; This function calls:
 30096 ;;		_marquee
 30097 ;;		_marquee_speedy
 30098 ;;		_nullifyBadge_segDisplayForceUpdate
 30099 ;;		_nullifyBadge_segDisplayPutStr
 30100 ;; This function is called by:
 30101 ;;		_flashy_Main
 30102 ;; This function uses a non-reentrant model
 30103 ;;
 30104                           
 30105                           
 30106                           ;psect for function _flashy_display_option
 30107  2200                     _flashy_display_option:	
 30108                           
 30109                           ;flashy_task.c: 106: if (flashy_option_idx == 0){
 30110                           
 30111                           ;incstack = 0
 30112                           ; Regs used in _flashy_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30113  2200  0021               	movlb	1	; select bank1
 30114  2201  0828               	movf	_flashy_option_idx^(0+128),w
 30115  2202  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 30116  2203  1D03               	btfss	3,2
 30117  2204  2A20               	goto	l8637
 30118                           
 30119                           ;flashy_task.c: 107: nullifyBadge_segDisplayPutStr(data->badge, flashy_option[flashy_opt
      +                          ion_idx]);
 30120  2205  3528               	lslf	_flashy_option_idx^(0+128),w
 30121  2206  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 30122  2207  0086               	movwf	6
 30123  2208  3005               	movlw	5	; select bank10/11
 30124  2209  0087               	movwf	7
 30125  220A  3F40               	moviw [0]fsr1
 30126  220B  0020               	movlb	0	; select bank0
 30127  220C  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30128  220D  3F41               	moviw [1]fsr1
 30129  220E  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30130  220F  084C               	movf	flashy_display_option@data,w
 30131  2210  0086               	movwf	6
 30132  2211  084D               	movf	flashy_display_option@data+1,w
 30133  2212  0087               	movwf	7
 30134  2213  0801               	movf	1,w
 30135  2214  31B2  227D  31A2   	fcall	_nullifyBadge_segDisplayPutStr
 30136                           
 30137                           ;flashy_task.c: 108: nullifyBadge_segDisplayForceUpdate(data->badge);
 30138  2217  0020               	movlb	0	; select bank0
 30139  2218  084C               	movf	flashy_display_option@data,w
 30140  2219  0086               	movwf	6
 30141  221A  084D               	movf	flashy_display_option@data+1,w
 30142  221B  0087               	movwf	7
 30143  221C  0801               	movf	1,w
 30144  221D  31B2  222E         	fcall	_nullifyBadge_segDisplayForceUpdate
 30145                           
 30146                           ;flashy_task.c: 109: }
 30147  221F  0008               	return
 30148  2220                     l8637:	
 30149                           
 30150                           ;flashy_task.c: 110: else {
 30151                           ;flashy_task.c: 111: if (data->display_state==FLASHY_STATE_DISPLAY ){
 30152  2220  0020               	movlb	0	; select bank0
 30153  2221  084C               	movf	flashy_display_option@data,w
 30154  2222  0086               	movwf	6
 30155  2223  084D               	movf	flashy_display_option@data+1,w
 30156  2224  0087               	movwf	7
 30157  2225  3146               	addfsr 1,6
 30158  2226  0801               	movf	1,w
 30159  2227  1D03               	btfss	3,2
 30160  2228  2A48               	goto	l8641
 30161                           
 30162                           ;flashy_task.c: 113: marquee_speedy(flashy_option[flashy_option_idx], data->noholdCount,
      +                           flashy_scroll_rate);
 30163  2229  0021               	movlb	1	; select bank1
 30164  222A  3528               	lslf	_flashy_option_idx^(0+128),w
 30165  222B  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 30166  222C  0086               	movwf	6
 30167  222D  3005               	movlw	5	; select bank10/11
 30168  222E  0087               	movwf	7
 30169  222F  3F40               	moviw [0]fsr1
 30170  2230  0020               	movlb	0	; select bank0
 30171  2231  00BA               	movwf	marquee_speedy@string
 30172  2232  3F41               	moviw [1]fsr1
 30173  2233  00BB               	movwf	marquee_speedy@string+1
 30174  2234  084C               	movf	flashy_display_option@data,w
 30175  2235  0086               	movwf	6
 30176  2236  084D               	movf	flashy_display_option@data+1,w
 30177  2237  0087               	movwf	7
 30178  2238  315C               	addfsr 1,28
 30179  2239  3F40               	moviw [0]fsr1
 30180  223A  00BC               	movwf	marquee_speedy@count
 30181  223B  3F41               	moviw [1]fsr1
 30182  223C  00BD               	movwf	marquee_speedy@count+1
 30183  223D  0021               	movlb	1	; select bank1
 30184  223E  082D               	movf	(_flashy_scroll_rate+1)^(0+128),w
 30185  223F  0020               	movlb	0	; select bank0
 30186  2240  00BF               	movwf	marquee_speedy@multiplier+1
 30187  2241  0021               	movlb	1	; select bank1
 30188  2242  082C               	movf	_flashy_scroll_rate^(0+128),w
 30189  2243  0020               	movlb	0	; select bank0
 30190  2244  00BE               	movwf	marquee_speedy@multiplier
 30191  2245  31A2  225F         	fcall	_marquee_speedy
 30192                           
 30193                           ;flashy_task.c: 114: }
 30194  2247  0008               	return
 30195  2248                     l8641:	
 30196                           
 30197                           ;flashy_task.c: 115: else{
 30198                           ;flashy_task.c: 116: marquee(flashy_option[flashy_option_idx], data->noholdCount);
 30199  2248  0021               	movlb	1	; select bank1
 30200  2249  3528               	lslf	_flashy_option_idx^(0+128),w
 30201  224A  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 30202  224B  0086               	movwf	6
 30203  224C  3005               	movlw	5	; select bank10/11
 30204  224D  0087               	movwf	7
 30205  224E  3F40               	moviw [0]fsr1
 30206  224F  0020               	movlb	0	; select bank0
 30207  2250  00BA               	movwf	marquee@string
 30208  2251  3F41               	moviw [1]fsr1
 30209  2252  00BB               	movwf	marquee@string+1
 30210  2253  084C               	movf	flashy_display_option@data,w
 30211  2254  0086               	movwf	6
 30212  2255  084D               	movf	flashy_display_option@data+1,w
 30213  2256  0087               	movwf	7
 30214  2257  315C               	addfsr 1,28
 30215  2258  3F40               	moviw [0]fsr1
 30216  2259  00BC               	movwf	marquee@count
 30217  225A  3F41               	moviw [1]fsr1
 30218  225B  00BD               	movwf	marquee@count+1
 30219  225C  31A2  22D2         	fcall	_marquee
 30220  225E  0008               	return
 30221  225F                     __end_of_flashy_display_option:	
 30222                           
 30223                           	psect	text63
 30224  225F                     __ptext63:	
 30225 ;; *************** function _marquee_speedy *****************
 30226 ;; Defined at:
 30227 ;;		line 133 in file "main.c"
 30228 ;; Parameters:    Size  Location     Type
 30229 ;;  string          2   26[BANK0 ] PTR unsigned char 
 30230 ;;		 -> STR_82(23), STR_81(27), STR_80(46), STR_79(8), 
 30231 ;;		 -> STR_78(7), STR_77(8), STR_76(6), STR_75(10), 
 30232 ;;		 -> STR_74(5), STR_73(7), STR_72(9), STR_71(7), 
 30233 ;;		 -> STR_70(7), STR_39(5), STR_38(43), STR_37(13), 
 30234 ;;		 -> STR_36(47), STR_35(17), STR_34(120), STR_33(34), 
 30235 ;;		 -> STR_32(16), STR_31(35), STR_30(15), STR_29(12), 
 30236 ;;		 -> STR_28(29), STR_27(19), STR_26(17), STR_25(40), 
 30237 ;;		 -> STR_24(27), STR_23(29), STR_22(30), STR_21(36), 
 30238 ;;		 -> STR_20(28), STR_19(22), STR_18(8), STR_17(26), 
 30239 ;;		 -> STR_16(21), STR_15(19), STR_14(6), STR_13(8), 
 30240 ;;		 -> STR_12(9), STR_11(5), matrix_TaskData(31), secret_TaskData(14), 
 30241 ;;		 -> locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), 
 30242 ;;		 -> NULL(0), 
 30243 ;;  count           2   28[BANK0 ] unsigned int 
 30244 ;;  multiplier      2   30[BANK0 ] unsigned int 
 30245 ;; Auto vars:     Size  Location     Type
 30246 ;;  j               2   42[BANK0 ] unsigned int 
 30247 ;;  display_stri    5   33[BANK0 ] unsigned char [5]
 30248 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 30249 ;;  i               2   38[BANK0 ] unsigned int 
 30250 ;; Return value:  Size  Location     Type
 30251 ;;                  1    wreg      void 
 30252 ;; Registers used:
 30253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30254 ;; Tracked objects:
 30255 ;;		On entry : 0/0
 30256 ;;		On exit  : 0/0
 30257 ;;		Unchanged: 0/0
 30258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30259 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30260 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30262 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30263 ;;Total ram usage:       18 bytes
 30264 ;; Hardware stack levels used:    1
 30265 ;; Hardware stack levels required when called:    9
 30266 ;; This function calls:
 30267 ;;		___lwdiv
 30268 ;;		___lwmod
 30269 ;;		_nullifyBadge_segDisplayForceUpdate
 30270 ;;		_nullifyBadge_segDisplayPutStr
 30271 ;;		_strlen
 30272 ;; This function is called by:
 30273 ;;		_flashy_display_option
 30274 ;;		_slot_Main
 30275 ;;		_matrix_display_option
 30276 ;; This function uses a non-reentrant model
 30277 ;;
 30278                           
 30279                           
 30280                           ;psect for function _marquee_speedy
 30281  225F                     _marquee_speedy:	
 30282                           
 30283                           ;main.c: 134: u16 string_length = strlen((const char *) string);
 30284                           
 30285                           ;incstack = 0
 30286                           ; Regs used in _marquee_speedy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30287  225F  0020               	movlb	0	; select bank0
 30288  2260  083B               	movf	marquee_speedy@string+1,w
 30289  2261  00F2               	movwf	strlen@s+1
 30290  2262  083A               	movf	marquee_speedy@string,w
 30291  2263  00F1               	movwf	strlen@s
 30292  2264  31B4  24D8  31A2   	fcall	_strlen
 30293  2267  0872               	movf	?_strlen+1,w
 30294  2268  0020               	movlb	0	; select bank0
 30295  2269  00C9               	movwf	marquee_speedy@string_length+1
 30296  226A  0871               	movf	?_strlen,w
 30297  226B  00C8               	movwf	marquee_speedy@string_length
 30298                           
 30299                           ;main.c: 135: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 30300  226C  3069               	movlw	low marquee_speedy@F14090
 30301  226D  0086               	movwf	6
 30302  226E  3001               	movlw	high marquee_speedy@F14090
 30303  226F  0087               	movwf	7
 30304  2270  3041               	movlw	low marquee_speedy@display_string
 30305  2271  0084               	movwf	4
 30306  2272  3000               	movlw	high marquee_speedy@display_string
 30307  2273  0085               	movwf	5
 30308  2274  3005               	movlw	5
 30309  2275  00C0               	movwf	??_marquee_speedy
 30310  2276                     u4950:	
 30311  2276  0016               	moviw fsr1++
 30312  2277  001A               	movwi fsr0++
 30313  2278  0BC0               	decfsz	??_marquee_speedy,f
 30314  2279  2A76               	goto	u4950
 30315                           
 30316                           ;main.c: 136: u16 i = (count / multiplier) % string_length;
 30317  227A  0849               	movf	marquee_speedy@string_length+1,w
 30318  227B  00AC               	movwf	___lwmod@divisor+1
 30319  227C  0848               	movf	marquee_speedy@string_length,w
 30320  227D  00AB               	movwf	___lwmod@divisor
 30321  227E  083F               	movf	marquee_speedy@multiplier+1,w
 30322  227F  00F2               	movwf	___lwdiv@divisor+1
 30323  2280  083E               	movf	marquee_speedy@multiplier,w
 30324  2281  00F1               	movwf	___lwdiv@divisor
 30325  2282  083D               	movf	marquee_speedy@count+1,w
 30326  2283  00F4               	movwf	___lwdiv@dividend+1
 30327  2284  083C               	movf	marquee_speedy@count,w
 30328  2285  00F3               	movwf	___lwdiv@dividend
 30329  2286  31B6  26E0  31A2   	fcall	___lwdiv
 30330  2289  0872               	movf	?___lwdiv+1,w
 30331  228A  0020               	movlb	0	; select bank0
 30332  228B  00AE               	movwf	___lwmod@dividend+1
 30333  228C  0871               	movf	?___lwdiv,w
 30334  228D  00AD               	movwf	___lwmod@dividend
 30335  228E  31B5  25EF  31A2   	fcall	___lwmod
 30336  2291  0020               	movlb	0	; select bank0
 30337  2292  082C               	movf	?___lwmod+1,w
 30338  2293  00C7               	movwf	marquee_speedy@i+1
 30339  2294  082B               	movf	?___lwmod,w
 30340  2295  00C6               	movwf	marquee_speedy@i
 30341                           
 30342                           ;main.c: 138: for (u16 j=0; j < 4; j++){
 30343  2296  01CA               	clrf	marquee_speedy@j
 30344  2297  01CB               	clrf	marquee_speedy@j+1
 30345  2298  3000               	movlw	0
 30346  2299  024B               	subwf	marquee_speedy@j+1,w
 30347  229A  3004               	movlw	4
 30348  229B  1903               	skipnz
 30349  229C  024A               	subwf	marquee_speedy@j,w
 30350  229D  1803               	btfsc	3,0
 30351  229E  2AC6               	goto	l8413
 30352  229F                     l8407:	
 30353                           
 30354                           ;main.c: 139: display_string[j] = string[(i + j) % string_length];
 30355  229F  0849               	movf	marquee_speedy@string_length+1,w
 30356  22A0  00AC               	movwf	___lwmod@divisor+1
 30357  22A1  0848               	movf	marquee_speedy@string_length,w
 30358  22A2  00AB               	movwf	___lwmod@divisor
 30359  22A3  084A               	movf	marquee_speedy@j,w
 30360  22A4  0746               	addwf	marquee_speedy@i,w
 30361  22A5  00AD               	movwf	___lwmod@dividend
 30362  22A6  084B               	movf	marquee_speedy@j+1,w
 30363  22A7  3D47               	addwfc	marquee_speedy@i+1,w
 30364  22A8  00AE               	movwf	___lwmod@dividend+1
 30365  22A9  31B5  25EF  31A2   	fcall	___lwmod
 30366  22AC  0020               	movlb	0	; select bank0
 30367  22AD  083A               	movf	marquee_speedy@string,w
 30368  22AE  072B               	addwf	?___lwmod,w
 30369  22AF  0084               	movwf	4
 30370  22B0  083B               	movf	marquee_speedy@string+1,w
 30371  22B1  3D2C               	addwfc	?___lwmod+1,w
 30372  22B2  0085               	movwf	5
 30373  22B3  0800               	movf	0,w	;code access
 30374  22B4  00C0               	movwf	??_marquee_speedy
 30375  22B5  084A               	movf	marquee_speedy@j,w
 30376  22B6  3E41               	addlw	(low (marquee_speedy@display_string| 0))& (0+255)
 30377  22B7  0086               	movwf	6
 30378  22B8  0187               	clrf	7
 30379  22B9  0840               	movf	??_marquee_speedy,w
 30380  22BA  0081               	movwf	1
 30381  22BB  3001               	movlw	1
 30382  22BC  07CA               	addwf	marquee_speedy@j,f
 30383  22BD  3000               	movlw	0
 30384  22BE  3DCB               	addwfc	marquee_speedy@j+1,f
 30385  22BF  3000               	movlw	0
 30386  22C0  024B               	subwf	marquee_speedy@j+1,w
 30387  22C1  3004               	movlw	4
 30388  22C2  1903               	skipnz
 30389  22C3  024A               	subwf	marquee_speedy@j,w
 30390  22C4  1C03               	skipc
 30391  22C5  2A9F               	goto	l8407
 30392  22C6                     l8413:	
 30393                           
 30394                           ;main.c: 140: }
 30395                           ;main.c: 141: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 30396  22C6  3041               	movlw	low marquee_speedy@display_string
 30397  22C7  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30398  22C8  3000               	movlw	high marquee_speedy@display_string
 30399  22C9  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30400  22CA  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30401  22CB  31B2  227D  31A2   	fcall	_nullifyBadge_segDisplayPutStr
 30402                           
 30403                           ;main.c: 142: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 30404  22CE  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30405  22CF  31B2  222E         	fcall	_nullifyBadge_segDisplayForceUpdate
 30406  22D1  0008               	return
 30407  22D2                     __end_of_marquee_speedy:	
 30408                           
 30409                           	psect	text64
 30410  22D2                     __ptext64:	
 30411 ;; *************** function _marquee *****************
 30412 ;; Defined at:
 30413 ;;		line 146 in file "main.c"
 30414 ;; Parameters:    Size  Location     Type
 30415 ;;  string          2   26[BANK0 ] PTR unsigned char 
 30416 ;;		 -> STR_45(5), STR_44(5), STR_43(11), STR_42(13), 
 30417 ;;		 -> STR_39(5), STR_38(43), STR_37(13), STR_36(47), 
 30418 ;;		 -> STR_35(17), STR_34(120), STR_33(34), STR_32(16), 
 30419 ;;		 -> STR_31(35), STR_30(15), STR_29(12), STR_28(29), 
 30420 ;;		 -> STR_27(19), STR_26(17), STR_25(40), STR_24(27), 
 30421 ;;		 -> STR_23(29), STR_22(30), STR_21(36), STR_20(28), 
 30422 ;;		 -> STR_19(22), STR_18(8), STR_17(26), STR_16(21), 
 30423 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 30424 ;;		 -> STR_11(5), STR_10(18), STR_8(6), STR_7(8), 
 30425 ;;		 -> STR_6(10), STR_5(6), STR_4(5), matrix_TaskData(31), 
 30426 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 30427 ;;		 -> flashy_TaskData(30), NULL(0), 
 30428 ;;  count           2   28[BANK0 ] unsigned int 
 30429 ;; Auto vars:     Size  Location     Type
 30430 ;;  j               2   42[BANK0 ] unsigned int 
 30431 ;;  display_stri    5   31[BANK0 ] unsigned char [5]
 30432 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 30433 ;;  i               2   38[BANK0 ] unsigned int 
 30434 ;;  multiplier      2   36[BANK0 ] unsigned int 
 30435 ;; Return value:  Size  Location     Type
 30436 ;;                  1    wreg      void 
 30437 ;; Registers used:
 30438 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30439 ;; Tracked objects:
 30440 ;;		On entry : 0/0
 30441 ;;		On exit  : 0/0
 30442 ;;		Unchanged: 0/0
 30443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30444 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30445 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30446 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30447 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30448 ;;Total ram usage:       18 bytes
 30449 ;; Hardware stack levels used:    1
 30450 ;; Hardware stack levels required when called:    9
 30451 ;; This function calls:
 30452 ;;		___lwdiv
 30453 ;;		___lwmod
 30454 ;;		_nullifyBadge_segDisplayForceUpdate
 30455 ;;		_nullifyBadge_segDisplayPutStr
 30456 ;;		_strlen
 30457 ;; This function is called by:
 30458 ;;		_menu_display_option
 30459 ;;		_flashy_display_option
 30460 ;;		_flashy_Main
 30461 ;;		_locked_Main
 30462 ;;		_slot_Main
 30463 ;; This function uses a non-reentrant model
 30464 ;;
 30465                           
 30466                           
 30467                           ;psect for function _marquee
 30468  22D2                     _marquee:	
 30469                           
 30470                           ;main.c: 147: u16 multiplier = 50;
 30471                           
 30472                           ;incstack = 0
 30473                           ; Regs used in _marquee: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30474  22D2  3032               	movlw	50
 30475  22D3  0020               	movlb	0	; select bank0
 30476  22D4  00C4               	movwf	marquee@multiplier
 30477  22D5  3000               	movlw	0
 30478  22D6  00C5               	movwf	marquee@multiplier+1
 30479                           
 30480                           ;main.c: 148: u16 string_length = strlen((const char *) string);
 30481  22D7  083B               	movf	marquee@string+1,w
 30482  22D8  00F2               	movwf	strlen@s+1
 30483  22D9  083A               	movf	marquee@string,w
 30484  22DA  00F1               	movwf	strlen@s
 30485  22DB  31B4  24D8  31A2   	fcall	_strlen
 30486  22DE  0872               	movf	?_strlen+1,w
 30487  22DF  0020               	movlb	0	; select bank0
 30488  22E0  00C9               	movwf	marquee@string_length+1
 30489  22E1  0871               	movf	?_strlen,w
 30490  22E2  00C8               	movwf	marquee@string_length
 30491                           
 30492                           ;main.c: 149: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 30493  22E3  30C7               	movlw	low marquee@F14099
 30494  22E4  0086               	movwf	6
 30495  22E5  3000               	movlw	high marquee@F14099
 30496  22E6  0087               	movwf	7
 30497  22E7  303F               	movlw	low marquee@display_string
 30498  22E8  0084               	movwf	4
 30499  22E9  3000               	movlw	high marquee@display_string
 30500  22EA  0085               	movwf	5
 30501  22EB  3005               	movlw	5
 30502  22EC  00BE               	movwf	??_marquee
 30503  22ED                     u4980:	
 30504  22ED  0016               	moviw fsr1++
 30505  22EE  001A               	movwi fsr0++
 30506  22EF  0BBE               	decfsz	??_marquee,f
 30507  22F0  2AED               	goto	u4980
 30508                           
 30509                           ;main.c: 150: u16 i = (count / multiplier) % string_length;
 30510  22F1  0849               	movf	marquee@string_length+1,w
 30511  22F2  00AC               	movwf	___lwmod@divisor+1
 30512  22F3  0848               	movf	marquee@string_length,w
 30513  22F4  00AB               	movwf	___lwmod@divisor
 30514  22F5  0845               	movf	marquee@multiplier+1,w
 30515  22F6  00F2               	movwf	___lwdiv@divisor+1
 30516  22F7  0844               	movf	marquee@multiplier,w
 30517  22F8  00F1               	movwf	___lwdiv@divisor
 30518  22F9  083D               	movf	marquee@count+1,w
 30519  22FA  00F4               	movwf	___lwdiv@dividend+1
 30520  22FB  083C               	movf	marquee@count,w
 30521  22FC  00F3               	movwf	___lwdiv@dividend
 30522  22FD  31B6  26E0  31A2   	fcall	___lwdiv
 30523  2300  0872               	movf	?___lwdiv+1,w
 30524  2301  0020               	movlb	0	; select bank0
 30525  2302  00AE               	movwf	___lwmod@dividend+1
 30526  2303  0871               	movf	?___lwdiv,w
 30527  2304  00AD               	movwf	___lwmod@dividend
 30528  2305  31B5  25EF  31A2   	fcall	___lwmod
 30529  2308  0020               	movlb	0	; select bank0
 30530  2309  082C               	movf	?___lwmod+1,w
 30531  230A  00C7               	movwf	marquee@i+1
 30532  230B  082B               	movf	?___lwmod,w
 30533  230C  00C6               	movwf	marquee@i
 30534                           
 30535                           ;main.c: 152: for (u16 j=0; j < 4; j++){
 30536  230D  01CA               	clrf	marquee@j
 30537  230E  01CB               	clrf	marquee@j+1
 30538  230F  3000               	movlw	0
 30539  2310  024B               	subwf	marquee@j+1,w
 30540  2311  3004               	movlw	4
 30541  2312  1903               	skipnz
 30542  2313  024A               	subwf	marquee@j,w
 30543  2314  1803               	btfsc	3,0
 30544  2315  2B3D               	goto	l8437
 30545  2316                     l8431:	
 30546                           
 30547                           ;main.c: 153: display_string[j] = string[(i + j) % string_length];
 30548  2316  0849               	movf	marquee@string_length+1,w
 30549  2317  00AC               	movwf	___lwmod@divisor+1
 30550  2318  0848               	movf	marquee@string_length,w
 30551  2319  00AB               	movwf	___lwmod@divisor
 30552  231A  084A               	movf	marquee@j,w
 30553  231B  0746               	addwf	marquee@i,w
 30554  231C  00AD               	movwf	___lwmod@dividend
 30555  231D  084B               	movf	marquee@j+1,w
 30556  231E  3D47               	addwfc	marquee@i+1,w
 30557  231F  00AE               	movwf	___lwmod@dividend+1
 30558  2320  31B5  25EF  31A2   	fcall	___lwmod
 30559  2323  0020               	movlb	0	; select bank0
 30560  2324  083A               	movf	marquee@string,w
 30561  2325  072B               	addwf	?___lwmod,w
 30562  2326  0084               	movwf	4
 30563  2327  083B               	movf	marquee@string+1,w
 30564  2328  3D2C               	addwfc	?___lwmod+1,w
 30565  2329  0085               	movwf	5
 30566  232A  0800               	movf	0,w	;code access
 30567  232B  00BE               	movwf	??_marquee
 30568  232C  084A               	movf	marquee@j,w
 30569  232D  3E3F               	addlw	(low (marquee@display_string| 0))& (0+255)
 30570  232E  0086               	movwf	6
 30571  232F  0187               	clrf	7
 30572  2330  083E               	movf	??_marquee,w
 30573  2331  0081               	movwf	1
 30574  2332  3001               	movlw	1
 30575  2333  07CA               	addwf	marquee@j,f
 30576  2334  3000               	movlw	0
 30577  2335  3DCB               	addwfc	marquee@j+1,f
 30578  2336  3000               	movlw	0
 30579  2337  024B               	subwf	marquee@j+1,w
 30580  2338  3004               	movlw	4
 30581  2339  1903               	skipnz
 30582  233A  024A               	subwf	marquee@j,w
 30583  233B  1C03               	skipc
 30584  233C  2B16               	goto	l8431
 30585  233D                     l8437:	
 30586                           
 30587                           ;main.c: 154: }
 30588                           ;main.c: 155: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 30589  233D  303F               	movlw	low marquee@display_string
 30590  233E  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30591  233F  3000               	movlw	high marquee@display_string
 30592  2340  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30593  2341  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30594  2342  31B2  227D  31A2   	fcall	_nullifyBadge_segDisplayPutStr
 30595                           
 30596                           ;main.c: 156: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 30597  2345  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30598  2346  31B2  222E         	fcall	_nullifyBadge_segDisplayForceUpdate
 30599  2348  0008               	return
 30600  2349                     __end_of_marquee:	
 30601                           
 30602                           	psect	text65
 30603  34D8                     __ptext65:	
 30604 ;; *************** function _strlen *****************
 30605 ;; Defined at:
 30606 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/strlen.c"
 30607 ;; Parameters:    Size  Location     Type
 30608 ;;  s               2    1[COMMON] PTR const unsigned char 
 30609 ;;		 -> STR_82(23), STR_81(27), STR_80(46), matrix_secret_inputs.inputs(20), 
 30610 ;;		 -> matrix_secret_inputs(25), STR_79(8), STR_78(7), STR_77(8), 
 30611 ;;		 -> STR_76(6), STR_75(10), STR_74(5), STR_73(7), 
 30612 ;;		 -> STR_72(9), STR_71(7), STR_70(7), Slot_Wheel(55), 
 30613 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), STR_45(5), STR_44(5), 
 30614 ;;		 -> STR_43(11), STR_42(13), locked_secret_inputs.inputs(20), locked_secret_inputs(25), 
 30615 ;;		 -> STR_39(5), STR_38(43), STR_37(13), STR_36(47), 
 30616 ;;		 -> STR_35(17), STR_34(120), STR_33(34), STR_32(16), 
 30617 ;;		 -> STR_31(35), STR_30(15), STR_29(12), STR_28(29), 
 30618 ;;		 -> STR_27(19), STR_26(17), STR_25(40), STR_24(27), 
 30619 ;;		 -> STR_23(29), STR_22(30), STR_21(36), STR_20(28), 
 30620 ;;		 -> STR_19(22), STR_18(8), STR_17(26), STR_16(21), 
 30621 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 30622 ;;		 -> STR_11(5), STR_10(18), STR_8(6), STR_7(8), 
 30623 ;;		 -> STR_6(10), STR_5(6), STR_4(5), matrix_TaskData(31), 
 30624 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 30625 ;;		 -> flashy_TaskData(30), NULL(0), 
 30626 ;; Auto vars:     Size  Location     Type
 30627 ;;  cp              2    5[COMMON] PTR const unsigned char 
 30628 ;;		 -> STR_82(23), STR_81(27), STR_80(46), matrix_secret_inputs.inputs(20), 
 30629 ;;		 -> matrix_secret_inputs(25), STR_79(8), STR_78(7), STR_77(8), 
 30630 ;;		 -> STR_76(6), STR_75(10), STR_74(5), STR_73(7), 
 30631 ;;		 -> STR_72(9), STR_71(7), STR_70(7), Slot_Wheel(55), 
 30632 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), STR_45(5), STR_44(5), 
 30633 ;;		 -> STR_43(11), STR_42(13), locked_secret_inputs.inputs(20), locked_secret_inputs(25), 
 30634 ;;		 -> STR_39(5), STR_38(43), STR_37(13), STR_36(47), 
 30635 ;;		 -> STR_35(17), STR_34(120), STR_33(34), STR_32(16), 
 30636 ;;		 -> STR_31(35), STR_30(15), STR_29(12), STR_28(29), 
 30637 ;;		 -> STR_27(19), STR_26(17), STR_25(40), STR_24(27), 
 30638 ;;		 -> STR_23(29), STR_22(30), STR_21(36), STR_20(28), 
 30639 ;;		 -> STR_19(22), STR_18(8), STR_17(26), STR_16(21), 
 30640 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 30641 ;;		 -> STR_11(5), STR_10(18), STR_8(6), STR_7(8), 
 30642 ;;		 -> STR_6(10), STR_5(6), STR_4(5), matrix_TaskData(31), 
 30643 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 30644 ;;		 -> flashy_TaskData(30), NULL(0), 
 30645 ;; Return value:  Size  Location     Type
 30646 ;;                  2    1[COMMON] unsigned int 
 30647 ;; Registers used:
 30648 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 30649 ;; Tracked objects:
 30650 ;;		On entry : 0/0
 30651 ;;		On exit  : 0/0
 30652 ;;		Unchanged: 0/0
 30653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30654 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30656 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30657 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30658 ;;Total ram usage:        6 bytes
 30659 ;; Hardware stack levels used:    1
 30660 ;; Hardware stack levels required when called:    4
 30661 ;; This function calls:
 30662 ;;		Nothing
 30663 ;; This function is called by:
 30664 ;;		_marquee_speedy
 30665 ;;		_marquee
 30666 ;;		_locked_secret_check
 30667 ;;		_secret_check
 30668 ;;		_slot_Main
 30669 ;;		_matrix_secret_check
 30670 ;; This function uses a non-reentrant model
 30671 ;;
 30672                           
 30673                           
 30674                           ;psect for function _strlen
 30675  34D8                     _strlen:	
 30676                           
 30677                           ;incstack = 0
 30678                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 30679  34D8  0872               	movf	strlen@s+1,w
 30680  34D9  00F6               	movwf	strlen@cp+1
 30681  34DA  0871               	movf	strlen@s,w
 30682  34DB  00F5               	movwf	strlen@cp
 30683  34DC                     l8289:	
 30684  34DC  0875               	movf	strlen@cp,w
 30685  34DD  0084               	movwf	4
 30686  34DE  0876               	movf	strlen@cp+1,w
 30687  34DF  0085               	movwf	5
 30688  34E0  0012               	moviw fsr0++
 30689  34E1  1903               	btfsc	3,2
 30690  34E2  2CE8               	goto	l8291
 30691  34E3  3001               	movlw	1
 30692  34E4  07F5               	addwf	strlen@cp,f
 30693  34E5  3000               	movlw	0
 30694  34E6  3DF6               	addwfc	strlen@cp+1,f
 30695  34E7  2CDC               	goto	l8289
 30696  34E8                     l8291:	
 30697  34E8  0971               	comf	strlen@s,w
 30698  34E9  00F3               	movwf	??_strlen
 30699  34EA  0972               	comf	strlen@s+1,w
 30700  34EB  00F4               	movwf	??_strlen+1
 30701  34EC  0AF3               	incf	??_strlen,f
 30702  34ED  1903               	skipnz
 30703  34EE  0AF4               	incf	??_strlen+1,f
 30704  34EF  0875               	movf	strlen@cp,w
 30705  34F0  0773               	addwf	??_strlen,w
 30706  34F1  00F1               	movwf	?_strlen
 30707  34F2  0876               	movf	strlen@cp+1,w
 30708  34F3  3D74               	addwfc	??_strlen+1,w
 30709  34F4  00F2               	movwf	?_strlen+1
 30710  34F5  0008               	return
 30711  34F6                     __end_of_strlen:	
 30712                           
 30713                           	psect	text66
 30714  327D                     __ptext66:	
 30715 ;; *************** function _nullifyBadge_segDisplayPutStr *****************
 30716 ;; Defined at:
 30717 ;;		line 113 in file "nullifyBadge.c"
 30718 ;; Parameters:    Size  Location     Type
 30719 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 30720 ;;		 -> badge_inst(18), 
 30721 ;;  str             2   23[BANK0 ] PTR unsigned char 
 30722 ;;		 -> flashy_Main@hit_counter(6), STR_40(5), STR_39(5), STR_38(43), 
 30723 ;;		 -> STR_37(13), STR_36(47), STR_35(17), STR_34(120), 
 30724 ;;		 -> STR_33(34), STR_32(16), STR_31(35), STR_30(15), 
 30725 ;;		 -> STR_29(12), STR_28(29), STR_27(19), STR_26(17), 
 30726 ;;		 -> STR_25(40), STR_24(27), STR_23(29), STR_22(30), 
 30727 ;;		 -> STR_21(36), STR_20(28), STR_19(22), STR_18(8), 
 30728 ;;		 -> STR_17(26), STR_16(21), STR_15(19), STR_14(6), 
 30729 ;;		 -> STR_13(8), STR_12(9), STR_11(5), STR_8(6), 
 30730 ;;		 -> STR_7(8), STR_6(10), STR_5(6), STR_4(5), 
 30731 ;;		 -> marquee@display_string(5), marquee_speedy@display_string(5), 
 30732 ;; Auto vars:     Size  Location     Type
 30733 ;;  badge           1   25[BANK0 ] PTR struct t_nullifyBadg
 30734 ;;		 -> badge_inst(18), 
 30735 ;; Return value:  Size  Location     Type
 30736 ;;                  1    wreg      void 
 30737 ;; Registers used:
 30738 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30739 ;; Tracked objects:
 30740 ;;		On entry : 0/0
 30741 ;;		On exit  : 0/0
 30742 ;;		Unchanged: 0/0
 30743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30744 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30747 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30748 ;;Total ram usage:        3 bytes
 30749 ;; Hardware stack levels used:    1
 30750 ;; Hardware stack levels required when called:    8
 30751 ;; This function calls:
 30752 ;;		_displayL2_PutStr
 30753 ;; This function is called by:
 30754 ;;		_marquee_speedy
 30755 ;;		_marquee
 30756 ;;		_menu_display_option
 30757 ;;		_flashy_display_option
 30758 ;;		_flashy_Main
 30759 ;; This function uses a non-reentrant model
 30760 ;;
 30761                           
 30762                           
 30763                           ;psect for function _nullifyBadge_segDisplayPutStr
 30764  327D                     _nullifyBadge_segDisplayPutStr:	
 30765                           
 30766                           ;incstack = 0
 30767                           ; Regs used in _nullifyBadge_segDisplayPutStr: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 30768                           ;nullifyBadge_segDisplayPutStr@badge stored from wreg
 30769  327D  0020               	movlb	0	; select bank0
 30770  327E  00B9               	movwf	nullifyBadge_segDisplayPutStr@badge
 30771                           
 30772                           ;nullifyBadge.c: 114: displayL2_PutStr(&badge->display, str);
 30773  327F  0838               	movf	nullifyBadge_segDisplayPutStr@str+1,w
 30774  3280  00B1               	movwf	displayL2_PutStr@str+1
 30775  3281  0837               	movf	nullifyBadge_segDisplayPutStr@str,w
 30776  3282  00B0               	movwf	displayL2_PutStr@str
 30777  3283  0839               	movf	nullifyBadge_segDisplayPutStr@badge,w
 30778  3284  31B5  25C5         	fcall	_displayL2_PutStr
 30779  3286  0008               	return
 30780  3287                     __end_of_nullifyBadge_segDisplayPutStr:	
 30781                           
 30782                           	psect	text67
 30783  35C5                     __ptext67:	
 30784 ;; *************** function _displayL2_PutStr *****************
 30785 ;; Defined at:
 30786 ;;		line 55 in file "nullifyBadge_displayL2.c"
 30787 ;; Parameters:    Size  Location     Type
 30788 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30789 ;;		 -> badge_inst(18), 
 30790 ;;  str             2   16[BANK0 ] PTR unsigned char 
 30791 ;;		 -> flashy_Main@hit_counter(6), STR_40(5), STR_39(5), STR_38(43), 
 30792 ;;		 -> STR_37(13), STR_36(47), STR_35(17), STR_34(120), 
 30793 ;;		 -> STR_33(34), STR_32(16), STR_31(35), STR_30(15), 
 30794 ;;		 -> STR_29(12), STR_28(29), STR_27(19), STR_26(17), 
 30795 ;;		 -> STR_25(40), STR_24(27), STR_23(29), STR_22(30), 
 30796 ;;		 -> STR_21(36), STR_20(28), STR_19(22), STR_18(8), 
 30797 ;;		 -> STR_17(26), STR_16(21), STR_15(19), STR_14(6), 
 30798 ;;		 -> STR_13(8), STR_12(9), STR_11(5), STR_8(6), 
 30799 ;;		 -> STR_7(8), STR_6(10), STR_5(6), STR_4(5), 
 30800 ;;		 -> STR_3(5), marquee@display_string(5), marquee_speedy@display_string(5), 
 30801 ;; Auto vars:     Size  Location     Type
 30802 ;;  display         1   21[BANK0 ] PTR struct t_nullifyDisp
 30803 ;;		 -> badge_inst(18), 
 30804 ;;  k               1   22[BANK0 ] unsigned char 
 30805 ;; Return value:  Size  Location     Type
 30806 ;;                  1    wreg      void 
 30807 ;; Registers used:
 30808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30809 ;; Tracked objects:
 30810 ;;		On entry : 0/0
 30811 ;;		On exit  : 0/0
 30812 ;;		Unchanged: 0/0
 30813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30814 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30815 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30816 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30817 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30818 ;;Total ram usage:        7 bytes
 30819 ;; Hardware stack levels used:    1
 30820 ;; Hardware stack levels required when called:    7
 30821 ;; This function calls:
 30822 ;;		_displayL2_PutChar
 30823 ;; This function is called by:
 30824 ;;		_nullifyBadge_segDisplayPutStr
 30825 ;;		_displayL2_EraseSegDisplay
 30826 ;; This function uses a non-reentrant model
 30827 ;;
 30828                           
 30829                           
 30830                           ;psect for function _displayL2_PutStr
 30831  35C5                     _displayL2_PutStr:	
 30832                           
 30833                           ;incstack = 0
 30834                           ; Regs used in _displayL2_PutStr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30835                           ;displayL2_PutStr@display stored from wreg
 30836  35C5  0020               	movlb	0	; select bank0
 30837  35C6  00B5               	movwf	displayL2_PutStr@display
 30838                           
 30839                           ;nullifyBadge_displayL2.c: 57: u8 k = 0;
 30840  35C7  01B6               	clrf	displayL2_PutStr@k
 30841  35C8                     l8243:	
 30842                           ;nullifyBadge_displayL2.c: 59: while (str[k] != '\0') {
 30843                           
 30844  35C8  0831               	movf	displayL2_PutStr@str+1,w
 30845  35C9  00B3               	movwf	??_displayL2_PutStr+1
 30846  35CA  0830               	movf	displayL2_PutStr@str,w
 30847  35CB  00B2               	movwf	??_displayL2_PutStr
 30848  35CC  0836               	movf	displayL2_PutStr@k,w
 30849  35CD  0732               	addwf	??_displayL2_PutStr,w
 30850  35CE  0084               	movwf	4
 30851  35CF  0833               	movf	??_displayL2_PutStr+1,w
 30852  35D0  1803               	skipnc
 30853  35D1  0A33               	incf	??_displayL2_PutStr+1,w
 30854  35D2  0085               	movwf	5
 30855  35D3  0012               	moviw fsr0++
 30856  35D4  1903               	btfsc	3,2
 30857  35D5  0008               	return
 30858                           
 30859                           ;nullifyBadge_displayL2.c: 60: displayL2_PutChar(display, str[k]);
 30860  35D6  0831               	movf	displayL2_PutStr@str+1,w
 30861  35D7  00B3               	movwf	??_displayL2_PutStr+1
 30862  35D8  0830               	movf	displayL2_PutStr@str,w
 30863  35D9  00B2               	movwf	??_displayL2_PutStr
 30864  35DA  0836               	movf	displayL2_PutStr@k,w
 30865  35DB  0732               	addwf	??_displayL2_PutStr,w
 30866  35DC  0084               	movwf	4
 30867  35DD  0833               	movf	??_displayL2_PutStr+1,w
 30868  35DE  1803               	skipnc
 30869  35DF  0A33               	incf	??_displayL2_PutStr+1,w
 30870  35E0  0085               	movwf	5
 30871  35E1  0800               	movf	0,w	;code access
 30872  35E2  00B4               	movwf	??_displayL2_PutStr+2
 30873  35E3  0834               	movf	??_displayL2_PutStr+2,w
 30874  35E4  00AA               	movwf	displayL2_PutChar@c
 30875  35E5  0835               	movf	displayL2_PutStr@display,w
 30876  35E6  31AB  23F5  31B5   	fcall	_displayL2_PutChar
 30877                           
 30878                           ;nullifyBadge_displayL2.c: 61: k++;
 30879  35E9  3001               	movlw	1
 30880  35EA  0020               	movlb	0	; select bank0
 30881  35EB  00B2               	movwf	??_displayL2_PutStr
 30882  35EC  0832               	movf	??_displayL2_PutStr,w
 30883  35ED  07B6               	addwf	displayL2_PutStr@k,f
 30884  35EE  2DC8               	goto	l8243
 30885  35EF                     __end_of_displayL2_PutStr:	
 30886                           
 30887                           	psect	text68
 30888  2BF5                     __ptext68:	
 30889 ;; *************** function _displayL2_PutChar *****************
 30890 ;; Defined at:
 30891 ;;		line 38 in file "nullifyBadge_displayL2.c"
 30892 ;; Parameters:    Size  Location     Type
 30893 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30894 ;;		 -> badge_inst(18), 
 30895 ;;  c               1   10[BANK0 ] unsigned char 
 30896 ;; Auto vars:     Size  Location     Type
 30897 ;;  display         1   15[BANK0 ] PTR struct t_nullifyDisp
 30898 ;;		 -> badge_inst(18), 
 30899 ;;  k               1   14[BANK0 ] unsigned char 
 30900 ;; Return value:  Size  Location     Type
 30901 ;;                  1    wreg      void 
 30902 ;; Registers used:
 30903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30904 ;; Tracked objects:
 30905 ;;		On entry : 0/0
 30906 ;;		On exit  : 0/0
 30907 ;;		Unchanged: 0/0
 30908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30909 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30910 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30911 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30912 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30913 ;;Total ram usage:        6 bytes
 30914 ;; Hardware stack levels used:    1
 30915 ;; Hardware stack levels required when called:    6
 30916 ;; This function calls:
 30917 ;;		_displayL1_SetSegChar
 30918 ;; This function is called by:
 30919 ;;		_displayL2_PutStr
 30920 ;;		_nullifyBadge_segDisplayPutChar
 30921 ;; This function uses a non-reentrant model
 30922 ;;
 30923                           
 30924                           
 30925                           ;psect for function _displayL2_PutChar
 30926  2BF5                     _displayL2_PutChar:	
 30927                           
 30928                           ;incstack = 0
 30929                           ; Regs used in _displayL2_PutChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30930                           ;displayL2_PutChar@display stored from wreg
 30931  2BF5  0020               	movlb	0	; select bank0
 30932  2BF6  00AF               	movwf	displayL2_PutChar@display
 30933                           
 30934                           ;nullifyBadge_displayL2.c: 40: display->charVect[0] = display->charVect[1];
 30935  2BF7  0A2F               	incf	displayL2_PutChar@display,w
 30936  2BF8  0086               	movwf	6
 30937  2BF9  3001               	movlw	1	; select bank2/3
 30938  2BFA  0087               	movwf	7
 30939  2BFB  0801               	movf	1,w
 30940  2BFC  00AB               	movwf	??_displayL2_PutChar
 30941  2BFD  082F               	movf	displayL2_PutChar@display,w
 30942  2BFE  0086               	movwf	6
 30943  2BFF  3001               	movlw	1	; select bank2/3
 30944  2C00  0087               	movwf	7
 30945  2C01  082B               	movf	??_displayL2_PutChar,w
 30946  2C02  0081               	movwf	1
 30947                           
 30948                           ;nullifyBadge_displayL2.c: 41: display->charVect[1] = display->charVect[2];
 30949  2C03  082F               	movf	displayL2_PutChar@display,w
 30950  2C04  3E02               	addlw	2
 30951  2C05  0086               	movwf	6
 30952  2C06  3001               	movlw	1	; select bank2/3
 30953  2C07  0087               	movwf	7
 30954  2C08  0801               	movf	1,w
 30955  2C09  00AB               	movwf	??_displayL2_PutChar
 30956  2C0A  0A2F               	incf	displayL2_PutChar@display,w
 30957  2C0B  0086               	movwf	6
 30958  2C0C  3001               	movlw	1	; select bank2/3
 30959  2C0D  0087               	movwf	7
 30960  2C0E  082B               	movf	??_displayL2_PutChar,w
 30961  2C0F  0081               	movwf	1
 30962                           
 30963                           ;nullifyBadge_displayL2.c: 42: display->charVect[2] = display->charVect[3];
 30964  2C10  082F               	movf	displayL2_PutChar@display,w
 30965  2C11  3E03               	addlw	3
 30966  2C12  0086               	movwf	6
 30967  2C13  3001               	movlw	1	; select bank2/3
 30968  2C14  0087               	movwf	7
 30969  2C15  0801               	movf	1,w
 30970  2C16  00AB               	movwf	??_displayL2_PutChar
 30971  2C17  082F               	movf	displayL2_PutChar@display,w
 30972  2C18  3E02               	addlw	2
 30973  2C19  0086               	movwf	6
 30974  2C1A  3001               	movlw	1	; select bank2/3
 30975  2C1B  0087               	movwf	7
 30976  2C1C  082B               	movf	??_displayL2_PutChar,w
 30977  2C1D  0081               	movwf	1
 30978                           
 30979                           ;nullifyBadge_displayL2.c: 45: display->charVect[3] = c;
 30980  2C1E  082A               	movf	displayL2_PutChar@c,w
 30981  2C1F  00AB               	movwf	??_displayL2_PutChar
 30982  2C20  082F               	movf	displayL2_PutChar@display,w
 30983  2C21  3E03               	addlw	3
 30984  2C22  0086               	movwf	6
 30985  2C23  3001               	movlw	1	; select bank2/3
 30986  2C24  0087               	movwf	7
 30987  2C25  082B               	movf	??_displayL2_PutChar,w
 30988  2C26  0081               	movwf	1
 30989                           
 30990                           ;nullifyBadge_displayL2.c: 48: u8 k = 0;
 30991  2C27  01AE               	clrf	displayL2_PutChar@k
 30992                           
 30993                           ;nullifyBadge_displayL2.c: 49: for (k = 0; k < 4; k++) {
 30994  2C28  01AE               	clrf	displayL2_PutChar@k
 30995  2C29                     L15:	
 30996  2C29  3004               	movlw	4
 30997  2C2A  022E               	subwf	displayL2_PutChar@k,w
 30998  2C2B  1803               	btfsc	3,0
 30999  2C2C  0008               	return
 31000                           
 31001                           ;nullifyBadge_displayL2.c: 50: displayL1_SetSegChar(&display->display_l1, display->charV
      +                          ect[k], k);
 31002  2C2D  082E               	movf	displayL2_PutChar@k,w
 31003  2C2E  072F               	addwf	displayL2_PutChar@display,w
 31004  2C2F  00AB               	movwf	??_displayL2_PutChar
 31005  2C30  082B               	movf	??_displayL2_PutChar,w
 31006  2C31  0086               	movwf	6
 31007  2C32  3001               	movlw	1	; select bank2/3
 31008  2C33  0087               	movwf	7
 31009  2C34  0801               	movf	1,w
 31010  2C35  00AC               	movwf	??_displayL2_PutChar+1
 31011  2C36  082C               	movf	??_displayL2_PutChar+1,w
 31012  2C37  00A0               	movwf	displayL1_SetSegChar@c
 31013  2C38  082E               	movf	displayL2_PutChar@k,w
 31014  2C39  00AD               	movwf	??_displayL2_PutChar+2
 31015  2C3A  082D               	movf	??_displayL2_PutChar+2,w
 31016  2C3B  00A1               	movwf	displayL1_SetSegChar@charPos
 31017  2C3C  082F               	movf	displayL2_PutChar@display,w
 31018  2C3D  3E07               	addlw	7
 31019  2C3E  31B7  27BF  31AB   	fcall	_displayL1_SetSegChar
 31020  2C41  3001               	movlw	1
 31021  2C42  0020               	movlb	0	; select bank0
 31022  2C43  00AB               	movwf	??_displayL2_PutChar
 31023  2C44  082B               	movf	??_displayL2_PutChar,w
 31024  2C45  07AE               	addwf	displayL2_PutChar@k,f
 31025  2C46  2C29               	goto	L15
 31026  2C47                     __end_of_displayL2_PutChar:	
 31027                           
 31028                           	psect	text69
 31029  37BF                     __ptext69:	
 31030 ;; *************** function _displayL1_SetSegChar *****************
 31031 ;; Defined at:
 31032 ;;		line 18 in file "nullifyBadge_displayL1.c"
 31033 ;; Parameters:    Size  Location     Type
 31034 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31035 ;;		 -> badge_inst(18), 
 31036 ;;  c               1    0[BANK0 ] unsigned char 
 31037 ;;  charPos         1    1[BANK0 ] unsigned char 
 31038 ;; Auto vars:     Size  Location     Type
 31039 ;;  display         1    7[BANK0 ] PTR struct t_nullifyDisp
 31040 ;;		 -> badge_inst(18), 
 31041 ;;  charData        2    8[BANK0 ] unsigned int 
 31042 ;;  dispDataVect    1    6[BANK0 ] unsigned char 
 31043 ;; Return value:  Size  Location     Type
 31044 ;;                  1    wreg      void 
 31045 ;; Registers used:
 31046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31047 ;; Tracked objects:
 31048 ;;		On entry : 0/0
 31049 ;;		On exit  : 0/0
 31050 ;;		Unchanged: 0/0
 31051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31052 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31053 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31054 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31055 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31056 ;;Total ram usage:       10 bytes
 31057 ;; Hardware stack levels used:    1
 31058 ;; Hardware stack levels required when called:    5
 31059 ;; This function calls:
 31060 ;;		_displayCharReverse
 31061 ;; This function is called by:
 31062 ;;		_displayL2_PutChar
 31063 ;;		_nullifyBadge_segDisplayPutCharPos
 31064 ;;		_displayL2_PrintChar
 31065 ;; This function uses a non-reentrant model
 31066 ;;
 31067                           
 31068                           
 31069                           ;psect for function _displayL1_SetSegChar
 31070  37BF                     _displayL1_SetSegChar:	
 31071                           
 31072                           ;incstack = 0
 31073                           ; Regs used in _displayL1_SetSegChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31074                           ;displayL1_SetSegChar@display stored from wreg
 31075  37BF  0020               	movlb	0	; select bank0
 31076  37C0  00A7               	movwf	displayL1_SetSegChar@display
 31077                           
 31078                           ;nullifyBadge_displayL1.c: 23: u16 charData = asciiCharTableLookup[(u8) c];
 31079  37C1  0820               	movf	displayL1_SetSegChar@c,w
 31080  37C2  00A2               	movwf	??_displayL1_SetSegChar
 31081  37C3  01A3               	clrf	??_displayL1_SetSegChar+1
 31082  37C4  35A2               	lslf	??_displayL1_SetSegChar,f
 31083  37C5  0DA3               	rlf	??_displayL1_SetSegChar+1,f
 31084  37C6  30F0               	movlw	240
 31085  37C7  00A4               	movwf	??_displayL1_SetSegChar+2
 31086  37C8  3026               	movlw	38
 31087  37C9  00A5               	movwf	??_displayL1_SetSegChar+3
 31088  37CA  0822               	movf	??_displayL1_SetSegChar,w
 31089  37CB  0724               	addwf	??_displayL1_SetSegChar+2,w
 31090  37CC  0086               	movwf	6
 31091  37CD  0823               	movf	??_displayL1_SetSegChar+1,w
 31092  37CE  3D25               	addwfc	??_displayL1_SetSegChar+3,w
 31093  37CF  0087               	movwf	7
 31094  37D0  3F40               	moviw [0]fsr1
 31095  37D1  00A8               	movwf	displayL1_SetSegChar@charData
 31096  37D2  3F41               	moviw [1]fsr1
 31097  37D3  00A9               	movwf	displayL1_SetSegChar@charData+1
 31098                           
 31099                           ;nullifyBadge_displayL1.c: 29: if (charPos & 0x1) {
 31100  37D4  1C21               	btfss	displayL1_SetSegChar@charPos,0
 31101  37D5  2FE1               	goto	l8181
 31102                           
 31103                           ;nullifyBadge_displayL1.c: 30: charData = displayCharReverse(charData);
 31104  37D6  0829               	movf	displayL1_SetSegChar@charData+1,w
 31105  37D7  00F2               	movwf	displayCharReverse@cVal+1
 31106  37D8  0828               	movf	displayL1_SetSegChar@charData,w
 31107  37D9  00F1               	movwf	displayCharReverse@cVal
 31108  37DA  31B6  261C         	fcall	_displayCharReverse
 31109  37DC  0872               	movf	?_displayCharReverse+1,w
 31110  37DD  0020               	movlb	0	; select bank0
 31111  37DE  00A9               	movwf	displayL1_SetSegChar@charData+1
 31112  37DF  0871               	movf	?_displayCharReverse,w
 31113  37E0  00A8               	movwf	displayL1_SetSegChar@charData
 31114  37E1                     l8181:	
 31115                           
 31116                           ;nullifyBadge_displayL1.c: 31: }
 31117                           ;nullifyBadge_displayL1.c: 61: u8 dispDataVectBaseIdx = 8 - ( charPos << 1 );
 31118  37E1  3521               	lslf	displayL1_SetSegChar@charPos,w
 31119  37E2  3AFF               	xorlw	255
 31120  37E3  3E01               	addlw	1
 31121  37E4  3E08               	addlw	8
 31122  37E5  00A2               	movwf	??_displayL1_SetSegChar
 31123  37E6  0822               	movf	??_displayL1_SetSegChar,w
 31124  37E7  00A6               	movwf	displayL1_SetSegChar@dispDataVectBaseIdx
 31125                           
 31126                           ;nullifyBadge_displayL1.c: 64: display->displayVect[dispDataVectBaseIdx] = (u8) (charDat
      +                          a >> 8);
 31127  37E8  0829               	movf	displayL1_SetSegChar@charData+1,w
 31128  37E9  00A2               	movwf	??_displayL1_SetSegChar
 31129  37EA  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 31130  37EB  0727               	addwf	displayL1_SetSegChar@display,w
 31131  37EC  00A3               	movwf	??_displayL1_SetSegChar+1
 31132  37ED  0823               	movf	??_displayL1_SetSegChar+1,w
 31133  37EE  0086               	movwf	6
 31134  37EF  3001               	movlw	1	; select bank2/3
 31135  37F0  0087               	movwf	7
 31136  37F1  0822               	movf	??_displayL1_SetSegChar,w
 31137  37F2  0081               	movwf	1
 31138                           
 31139                           ;nullifyBadge_displayL1.c: 67: display->displayVect[dispDataVectBaseIdx+1] = (u8) (charD
      +                          ata & 0xFF);
 31140  37F3  0828               	movf	displayL1_SetSegChar@charData,w
 31141  37F4  00A2               	movwf	??_displayL1_SetSegChar
 31142  37F5  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 31143  37F6  3E01               	addlw	1
 31144  37F7  0727               	addwf	displayL1_SetSegChar@display,w
 31145  37F8  00A3               	movwf	??_displayL1_SetSegChar+1
 31146  37F9  0823               	movf	??_displayL1_SetSegChar+1,w
 31147  37FA  0086               	movwf	6
 31148  37FB  3001               	movlw	1	; select bank2/3
 31149  37FC  0087               	movwf	7
 31150  37FD  0822               	movf	??_displayL1_SetSegChar,w
 31151  37FE  0081               	movwf	1
 31152  37FF  0008               	return
 31153  3800                     __end_of_displayL1_SetSegChar:	
 31154                           
 31155                           	psect	text70
 31156  361C                     __ptext70:	
 31157 ;; *************** function _displayCharReverse *****************
 31158 ;; Defined at:
 31159 ;;		line 105 in file "nullifyBadge_displayL1.c"
 31160 ;; Parameters:    Size  Location     Type
 31161 ;;  cVal            2    1[COMMON] unsigned int 
 31162 ;; Auto vars:     Size  Location     Type
 31163 ;;  k               1   11[COMMON] unsigned char 
 31164 ;;  retValUpperR    1   10[COMMON] unsigned char 
 31165 ;;  retValUpper     1    9[COMMON] unsigned char 
 31166 ;;  retValLower     1    8[COMMON] unsigned char 
 31167 ;; Return value:  Size  Location     Type
 31168 ;;                  2    1[COMMON] unsigned int 
 31169 ;; Registers used:
 31170 ;;		wreg, status,2, status,0
 31171 ;; Tracked objects:
 31172 ;;		On entry : 0/0
 31173 ;;		On exit  : 0/0
 31174 ;;		Unchanged: 0/0
 31175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31176 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31177 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31178 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31179 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31180 ;;Total ram usage:       11 bytes
 31181 ;; Hardware stack levels used:    1
 31182 ;; Hardware stack levels required when called:    4
 31183 ;; This function calls:
 31184 ;;		Nothing
 31185 ;; This function is called by:
 31186 ;;		_displayL1_SetSegChar
 31187 ;; This function uses a non-reentrant model
 31188 ;;
 31189                           
 31190                           
 31191                           ;psect for function _displayCharReverse
 31192  361C                     _displayCharReverse:	
 31193                           
 31194                           ;nullifyBadge_displayL1.c: 106: u8 retValUpper, retValLower, retValUpperRev;
 31195                           ;nullifyBadge_displayL1.c: 108: u8 k;
 31196                           ;nullifyBadge_displayL1.c: 111: retValUpper = cVal >> 8;
 31197                           
 31198                           ;incstack = 0
 31199                           ; Regs used in _displayCharReverse: [wreg+status,2+status,0]
 31200  361C  0872               	movf	displayCharReverse@cVal+1,w
 31201  361D  00F3               	movwf	??_displayCharReverse
 31202  361E  0873               	movf	??_displayCharReverse,w
 31203  361F  00F9               	movwf	displayCharReverse@retValUpper
 31204                           
 31205                           ;nullifyBadge_displayL1.c: 112: retValLower = cVal & 0xFF;
 31206  3620  0871               	movf	displayCharReverse@cVal,w
 31207  3621  00F3               	movwf	??_displayCharReverse
 31208  3622  0873               	movf	??_displayCharReverse,w
 31209  3623  00F8               	movwf	displayCharReverse@retValLower
 31210                           
 31211                           ;nullifyBadge_displayL1.c: 115: retValUpperRev = 0;
 31212  3624  01FA               	clrf	displayCharReverse@retValUpperRev
 31213                           
 31214                           ;nullifyBadge_displayL1.c: 117: for (k = 0; k < 7; k++) {
 31215  3625  01FB               	clrf	displayCharReverse@k
 31216  3626  3007               	movlw	7
 31217  3627  027B               	subwf	displayCharReverse@k,w
 31218  3628  1803               	btfsc	3,0
 31219  3629  2E3B               	goto	l8163
 31220  362A                     l8155:	
 31221                           
 31222                           ;nullifyBadge_displayL1.c: 118: retValUpperRev |= (retValUpper & 0x1);
 31223  362A  0879               	movf	displayCharReverse@retValUpper,w
 31224  362B  3901               	andlw	1
 31225  362C  00F3               	movwf	??_displayCharReverse
 31226  362D  0873               	movf	??_displayCharReverse,w
 31227  362E  04FA               	iorwf	displayCharReverse@retValUpperRev,f
 31228                           
 31229                           ;nullifyBadge_displayL1.c: 119: retValUpper >>= 1;
 31230  362F  1003               	clrc
 31231  3630  0CF9               	rrf	displayCharReverse@retValUpper,f
 31232                           
 31233                           ;nullifyBadge_displayL1.c: 120: retValUpperRev <<= 1;
 31234  3631  1003               	clrc
 31235  3632  0DFA               	rlf	displayCharReverse@retValUpperRev,f
 31236  3633  3001               	movlw	1
 31237  3634  00F3               	movwf	??_displayCharReverse
 31238  3635  0873               	movf	??_displayCharReverse,w
 31239  3636  07FB               	addwf	displayCharReverse@k,f
 31240  3637  3007               	movlw	7
 31241  3638  027B               	subwf	displayCharReverse@k,w
 31242  3639  1C03               	skipc
 31243  363A  2E2A               	goto	l8155
 31244  363B                     l8163:	
 31245                           
 31246                           ;nullifyBadge_displayL1.c: 121: }
 31247                           ;nullifyBadge_displayL1.c: 123: return (retValLower << 8) | (retValUpperRev);
 31248  363B  087A               	movf	displayCharReverse@retValUpperRev,w
 31249  363C  00F3               	movwf	??_displayCharReverse
 31250  363D  01F4               	clrf	??_displayCharReverse+1
 31251  363E  0878               	movf	displayCharReverse@retValLower,w
 31252  363F  00F5               	movwf	??_displayCharReverse+2
 31253  3640  01F6               	clrf	??_displayCharReverse+3
 31254  3641  0875               	movf	??_displayCharReverse+2,w
 31255  3642  00F6               	movwf	??_displayCharReverse+3
 31256  3643  01F5               	clrf	??_displayCharReverse+2
 31257  3644  0873               	movf	??_displayCharReverse,w
 31258  3645  0475               	iorwf	??_displayCharReverse+2,w
 31259  3646  00F1               	movwf	?_displayCharReverse
 31260  3647  0874               	movf	??_displayCharReverse+1,w
 31261  3648  0476               	iorwf	??_displayCharReverse+3,w
 31262  3649  00F2               	movwf	?_displayCharReverse+1
 31263  364A  0008               	return
 31264  364B                     __end_of_displayCharReverse:	
 31265                           
 31266                           	psect	text71
 31267  322E                     __ptext71:	
 31268 ;; *************** function _nullifyBadge_segDisplayForceUpdate *****************
 31269 ;; Defined at:
 31270 ;;		line 108 in file "nullifyBadge.c"
 31271 ;; Parameters:    Size  Location     Type
 31272 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 31273 ;;		 -> badge_inst(18), 
 31274 ;; Auto vars:     Size  Location     Type
 31275 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 31276 ;;		 -> badge_inst(18), 
 31277 ;; Return value:  Size  Location     Type
 31278 ;;                  1    wreg      void 
 31279 ;; Registers used:
 31280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31281 ;; Tracked objects:
 31282 ;;		On entry : 0/0
 31283 ;;		On exit  : 0/0
 31284 ;;		Unchanged: 0/0
 31285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31289 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31290 ;;Total ram usage:        1 bytes
 31291 ;; Hardware stack levels used:    1
 31292 ;; Hardware stack levels required when called:    8
 31293 ;; This function calls:
 31294 ;;		_displayL2_ForceUpdate
 31295 ;; This function is called by:
 31296 ;;		_marquee_speedy
 31297 ;;		_marquee
 31298 ;;		_menu_display_option
 31299 ;;		_flashy_display_option
 31300 ;;		_flashy_Main
 31301 ;; This function uses a non-reentrant model
 31302 ;;
 31303                           
 31304                           
 31305                           ;psect for function _nullifyBadge_segDisplayForceUpdate
 31306  322E                     _nullifyBadge_segDisplayForceUpdate:	
 31307                           
 31308                           ;incstack = 0
 31309                           ; Regs used in _nullifyBadge_segDisplayForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+
      +                          pclath+cstack]
 31310                           ;nullifyBadge_segDisplayForceUpdate@badge stored from wreg
 31311  322E  0020               	movlb	0	; select bank0
 31312  322F  00AB               	movwf	nullifyBadge_segDisplayForceUpdate@badge
 31313                           
 31314                           ;nullifyBadge.c: 109: displayL2_ForceUpdate(&badge->display);
 31315  3230  082B               	movf	nullifyBadge_segDisplayForceUpdate@badge,w
 31316  3231  31B2  2228         	fcall	_displayL2_ForceUpdate
 31317  3233  0008               	return
 31318  3234                     __end_of_nullifyBadge_segDisplayForceUpdate:	
 31319                           
 31320                           	psect	text72
 31321  3228                     __ptext72:	
 31322 ;; *************** function _displayL2_ForceUpdate *****************
 31323 ;; Defined at:
 31324 ;;		line 79 in file "nullifyBadge_displayL2.c"
 31325 ;; Parameters:    Size  Location     Type
 31326 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31327 ;;		 -> badge_inst(18), 
 31328 ;; Auto vars:     Size  Location     Type
 31329 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 31330 ;;		 -> badge_inst(18), 
 31331 ;; Return value:  Size  Location     Type
 31332 ;;                  1    wreg      void 
 31333 ;; Registers used:
 31334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31335 ;; Tracked objects:
 31336 ;;		On entry : 0/0
 31337 ;;		On exit  : 0/0
 31338 ;;		Unchanged: 0/0
 31339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31341 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31343 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31344 ;;Total ram usage:        1 bytes
 31345 ;; Hardware stack levels used:    1
 31346 ;; Hardware stack levels required when called:    7
 31347 ;; This function calls:
 31348 ;;		_displayL1_Update
 31349 ;; This function is called by:
 31350 ;;		_nullifyBadge_segDisplayForceUpdate
 31351 ;; This function uses a non-reentrant model
 31352 ;;
 31353                           
 31354                           
 31355                           ;psect for function _displayL2_ForceUpdate
 31356  3228                     _displayL2_ForceUpdate:	
 31357                           
 31358                           ;incstack = 0
 31359                           ; Regs used in _displayL2_ForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 31360                           ;displayL2_ForceUpdate@display stored from wreg
 31361  3228  00FB               	movwf	displayL2_ForceUpdate@display
 31362                           
 31363                           ;nullifyBadge_displayL2.c: 80: displayL1_Update(&display->display_l1);
 31364  3229  087B               	movf	displayL2_ForceUpdate@display,w
 31365  322A  3E07               	addlw	7
 31366  322B  31B3  2344         	fcall	_displayL1_Update
 31367  322D  0008               	return
 31368  322E                     __end_of_displayL2_ForceUpdate:	
 31369                           
 31370                           	psect	text73
 31371  35EF                     __ptext73:	
 31372 ;; *************** function ___lwmod *****************
 31373 ;; Defined at:
 31374 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwmod.c"
 31375 ;; Parameters:    Size  Location     Type
 31376 ;;  divisor         2   11[BANK0 ] unsigned int 
 31377 ;;  dividend        2   13[BANK0 ] unsigned int 
 31378 ;; Auto vars:     Size  Location     Type
 31379 ;;  counter         1   10[COMMON] unsigned char 
 31380 ;; Return value:  Size  Location     Type
 31381 ;;                  2   11[BANK0 ] unsigned int 
 31382 ;; Registers used:
 31383 ;;		wreg, status,2, status,0
 31384 ;; Tracked objects:
 31385 ;;		On entry : 0/0
 31386 ;;		On exit  : 0/0
 31387 ;;		Unchanged: 0/0
 31388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31389 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31390 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31391 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31392 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31393 ;;Total ram usage:        6 bytes
 31394 ;; Hardware stack levels used:    1
 31395 ;; Hardware stack levels required when called:    4
 31396 ;; This function calls:
 31397 ;;		Nothing
 31398 ;; This function is called by:
 31399 ;;		_marquee_speedy
 31400 ;;		_marquee
 31401 ;;		_led_roundabout
 31402 ;;		_led_curtain
 31403 ;;		_led_Parody
 31404 ;;		_menu_display_option
 31405 ;;		_locked_Main
 31406 ;;		_slot_Setup
 31407 ;;		_slot_Main
 31408 ;;		_sprintf
 31409 ;; This function uses a non-reentrant model
 31410 ;;
 31411                           
 31412                           
 31413                           ;psect for function ___lwmod
 31414  35EF                     ___lwmod:	
 31415                           
 31416                           ;incstack = 0
 31417                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 31418  35EF  0020               	movlb	0	; select bank0
 31419  35F0  082B               	movf	___lwmod@divisor,w
 31420  35F1  042C               	iorwf	___lwmod@divisor+1,w
 31421  35F2  1903               	btfsc	3,2
 31422  35F3  2E17               	goto	l8391
 31423  35F4  01FA               	clrf	___lwmod@counter
 31424  35F5  0AFA               	incf	___lwmod@counter,f
 31425  35F6                     l8381:	
 31426  35F6  1BAC               	btfsc	___lwmod@divisor+1,7
 31427  35F7  2E02               	goto	l8383
 31428  35F8  3001               	movlw	1
 31429  35F9                     u4905:	
 31430  35F9  35AB               	lslf	___lwmod@divisor,f
 31431  35FA  0DAC               	rlf	___lwmod@divisor+1,f
 31432  35FB  0B89               	decfsz	9,f
 31433  35FC  2DF9               	goto	u4905
 31434  35FD  3001               	movlw	1
 31435  35FE  00F9               	movwf	??___lwmod
 31436  35FF  0879               	movf	??___lwmod,w
 31437  3600  07FA               	addwf	___lwmod@counter,f
 31438  3601  2DF6               	goto	l8381
 31439  3602                     l8383:	
 31440  3602  082C               	movf	___lwmod@divisor+1,w
 31441  3603  022E               	subwf	___lwmod@dividend+1,w
 31442  3604  1D03               	skipz
 31443  3605  2E08               	goto	u4925
 31444  3606  082B               	movf	___lwmod@divisor,w
 31445  3607  022D               	subwf	___lwmod@dividend,w
 31446  3608                     u4925:	
 31447  3608  1C03               	skipc
 31448  3609  2E0E               	goto	l8387
 31449  360A  082B               	movf	___lwmod@divisor,w
 31450  360B  02AD               	subwf	___lwmod@dividend,f
 31451  360C  082C               	movf	___lwmod@divisor+1,w
 31452  360D  3BAE               	subwfb	___lwmod@dividend+1,f
 31453  360E                     l8387:	
 31454  360E  3001               	movlw	1
 31455  360F                     u4935:	
 31456  360F  36AC               	lsrf	___lwmod@divisor+1,f
 31457  3610  0CAB               	rrf	___lwmod@divisor,f
 31458  3611  0B89               	decfsz	9,f
 31459  3612  2E0F               	goto	u4935
 31460  3613  3001               	movlw	1
 31461  3614  02FA               	subwf	___lwmod@counter,f
 31462  3615  1D03               	btfss	3,2
 31463  3616  2E02               	goto	l8383
 31464  3617                     l8391:	
 31465  3617  082E               	movf	___lwmod@dividend+1,w
 31466  3618  00AC               	movwf	?___lwmod+1
 31467  3619  082D               	movf	___lwmod@dividend,w
 31468  361A  00AB               	movwf	?___lwmod
 31469  361B  0008               	return
 31470  361C                     __end_of___lwmod:	
 31471                           
 31472                           	psect	text74
 31473  36E0                     __ptext74:	
 31474 ;; *************** function ___lwdiv *****************
 31475 ;; Defined at:
 31476 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwdiv.c"
 31477 ;; Parameters:    Size  Location     Type
 31478 ;;  divisor         2    1[COMMON] unsigned int 
 31479 ;;  dividend        2    3[COMMON] unsigned int 
 31480 ;; Auto vars:     Size  Location     Type
 31481 ;;  quotient        2    7[COMMON] unsigned int 
 31482 ;;  counter         1    6[COMMON] unsigned char 
 31483 ;; Return value:  Size  Location     Type
 31484 ;;                  2    1[COMMON] unsigned int 
 31485 ;; Registers used:
 31486 ;;		wreg, status,2, status,0
 31487 ;; Tracked objects:
 31488 ;;		On entry : 0/0
 31489 ;;		On exit  : 0/0
 31490 ;;		Unchanged: 0/0
 31491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31492 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31493 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31494 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31495 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31496 ;;Total ram usage:        8 bytes
 31497 ;; Hardware stack levels used:    1
 31498 ;; Hardware stack levels required when called:    4
 31499 ;; This function calls:
 31500 ;;		Nothing
 31501 ;; This function is called by:
 31502 ;;		_marquee_speedy
 31503 ;;		_marquee
 31504 ;;		_sprintf
 31505 ;; This function uses a non-reentrant model
 31506 ;;
 31507                           
 31508                           
 31509                           ;psect for function ___lwdiv
 31510  36E0                     ___lwdiv:	
 31511                           
 31512                           ;incstack = 0
 31513                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 31514  36E0  01F7               	clrf	___lwdiv@quotient
 31515  36E1  01F8               	clrf	___lwdiv@quotient+1
 31516  36E2  0871               	movf	___lwdiv@divisor,w
 31517  36E3  0472               	iorwf	___lwdiv@divisor+1,w
 31518  36E4  1903               	btfsc	3,2
 31519  36E5  2F0F               	goto	l8369
 31520  36E6  01F6               	clrf	___lwdiv@counter
 31521  36E7  0AF6               	incf	___lwdiv@counter,f
 31522  36E8                     l8357:	
 31523  36E8  1BF2               	btfsc	___lwdiv@divisor+1,7
 31524  36E9  2EF4               	goto	l8359
 31525  36EA  3001               	movlw	1
 31526  36EB                     u4835:	
 31527  36EB  35F1               	lslf	___lwdiv@divisor,f
 31528  36EC  0DF2               	rlf	___lwdiv@divisor+1,f
 31529  36ED  0B89               	decfsz	9,f
 31530  36EE  2EEB               	goto	u4835
 31531  36EF  3001               	movlw	1
 31532  36F0  00F5               	movwf	??___lwdiv
 31533  36F1  0875               	movf	??___lwdiv,w
 31534  36F2  07F6               	addwf	___lwdiv@counter,f
 31535  36F3  2EE8               	goto	l8357
 31536  36F4                     l8359:	
 31537  36F4  3001               	movlw	1
 31538  36F5                     u4855:	
 31539  36F5  35F7               	lslf	___lwdiv@quotient,f
 31540  36F6  0DF8               	rlf	___lwdiv@quotient+1,f
 31541  36F7  0B89               	decfsz	9,f
 31542  36F8  2EF5               	goto	u4855
 31543  36F9  0872               	movf	___lwdiv@divisor+1,w
 31544  36FA  0274               	subwf	___lwdiv@dividend+1,w
 31545  36FB  1D03               	skipz
 31546  36FC  2EFF               	goto	u4865
 31547  36FD  0871               	movf	___lwdiv@divisor,w
 31548  36FE  0273               	subwf	___lwdiv@dividend,w
 31549  36FF                     u4865:	
 31550  36FF  1C03               	skipc
 31551  3700  2F06               	goto	l8365
 31552  3701  0871               	movf	___lwdiv@divisor,w
 31553  3702  02F3               	subwf	___lwdiv@dividend,f
 31554  3703  0872               	movf	___lwdiv@divisor+1,w
 31555  3704  3BF4               	subwfb	___lwdiv@dividend+1,f
 31556  3705  1477               	bsf	___lwdiv@quotient,0
 31557  3706                     l8365:	
 31558  3706  3001               	movlw	1
 31559  3707                     u4875:	
 31560  3707  36F2               	lsrf	___lwdiv@divisor+1,f
 31561  3708  0CF1               	rrf	___lwdiv@divisor,f
 31562  3709  0B89               	decfsz	9,f
 31563  370A  2F07               	goto	u4875
 31564  370B  3001               	movlw	1
 31565  370C  02F6               	subwf	___lwdiv@counter,f
 31566  370D  1D03               	btfss	3,2
 31567  370E  2EF4               	goto	l8359
 31568  370F                     l8369:	
 31569  370F  0878               	movf	___lwdiv@quotient+1,w
 31570  3710  00F2               	movwf	?___lwdiv+1
 31571  3711  0877               	movf	___lwdiv@quotient,w
 31572  3712  00F1               	movwf	?___lwdiv
 31573  3713  0008               	return
 31574  3714                     __end_of___lwdiv:	
 31575                           
 31576                           	psect	text75
 31577  349D                     __ptext75:	
 31578 ;; *************** function _TMR0_Read16bitTimer *****************
 31579 ;; Defined at:
 31580 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 31581 ;; Parameters:    Size  Location     Type
 31582 ;;		None
 31583 ;; Auto vars:     Size  Location     Type
 31584 ;;  readVal         2    8[COMMON] unsigned int 
 31585 ;;  readValHigh     1   11[COMMON] unsigned char 
 31586 ;;  readValLow      1   10[COMMON] unsigned char 
 31587 ;; Return value:  Size  Location     Type
 31588 ;;                  2    1[COMMON] unsigned int 
 31589 ;; Registers used:
 31590 ;;		wreg, status,2, status,0
 31591 ;; Tracked objects:
 31592 ;;		On entry : 0/0
 31593 ;;		On exit  : 0/0
 31594 ;;		Unchanged: 0/0
 31595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31596 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31597 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31598 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31599 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31600 ;;Total ram usage:       11 bytes
 31601 ;; Hardware stack levels used:    1
 31602 ;; Hardware stack levels required when called:    4
 31603 ;; This function calls:
 31604 ;;		Nothing
 31605 ;; This function is called by:
 31606 ;;		_scheduler_TaskRun
 31607 ;;		_schedulerExecute
 31608 ;; This function uses a non-reentrant model
 31609 ;;
 31610                           
 31611                           
 31612                           ;psect for function _TMR0_Read16bitTimer
 31613  349D                     _TMR0_Read16bitTimer:	
 31614                           
 31615                           ;tmr0.c: 111: uint16_t readVal;
 31616                           ;tmr0.c: 112: uint8_t readValLow;
 31617                           ;tmr0.c: 113: uint8_t readValHigh;
 31618                           ;tmr0.c: 115: readValLow = TMR0L;
 31619                           
 31620                           ;incstack = 0
 31621                           ; Regs used in _TMR0_Read16bitTimer: [wreg+status,2+status,0]
 31622  349D  0020               	movlb	0	; select bank0
 31623  349E  0815               	movf	21,w	;volatile
 31624  349F  00F3               	movwf	??_TMR0_Read16bitTimer
 31625  34A0  0873               	movf	??_TMR0_Read16bitTimer,w
 31626  34A1  00FA               	movwf	TMR0_Read16bitTimer@readValLow
 31627                           
 31628                           ;tmr0.c: 116: readValHigh = TMR0H;
 31629  34A2  0816               	movf	22,w	;volatile
 31630  34A3  00F3               	movwf	??_TMR0_Read16bitTimer
 31631  34A4  0873               	movf	??_TMR0_Read16bitTimer,w
 31632  34A5  00FB               	movwf	TMR0_Read16bitTimer@readValHigh
 31633                           
 31634                           ;tmr0.c: 117: readVal = ((uint16_t)readValHigh << 8) + readValLow;
 31635  34A6  087A               	movf	TMR0_Read16bitTimer@readValLow,w
 31636  34A7  00F3               	movwf	??_TMR0_Read16bitTimer
 31637  34A8  01F4               	clrf	??_TMR0_Read16bitTimer+1
 31638  34A9  087B               	movf	TMR0_Read16bitTimer@readValHigh,w
 31639  34AA  00F5               	movwf	??_TMR0_Read16bitTimer+2
 31640  34AB  01F6               	clrf	??_TMR0_Read16bitTimer+3
 31641  34AC  0875               	movf	??_TMR0_Read16bitTimer+2,w
 31642  34AD  00F6               	movwf	??_TMR0_Read16bitTimer+3
 31643  34AE  01F5               	clrf	??_TMR0_Read16bitTimer+2
 31644  34AF  0873               	movf	??_TMR0_Read16bitTimer,w
 31645  34B0  0775               	addwf	??_TMR0_Read16bitTimer+2,w
 31646  34B1  00F8               	movwf	TMR0_Read16bitTimer@readVal
 31647  34B2  0874               	movf	??_TMR0_Read16bitTimer+1,w
 31648  34B3  3D76               	addwfc	??_TMR0_Read16bitTimer+3,w
 31649  34B4  00F9               	movwf	TMR0_Read16bitTimer@readVal+1
 31650                           
 31651                           ;tmr0.c: 119: return readVal;
 31652  34B5  0879               	movf	TMR0_Read16bitTimer@readVal+1,w
 31653  34B6  00F2               	movwf	?_TMR0_Read16bitTimer+1
 31654  34B7  0878               	movf	TMR0_Read16bitTimer@readVal,w
 31655  34B8  00F1               	movwf	?_TMR0_Read16bitTimer
 31656  34B9  0008               	return
 31657  34BA                     __end_of_TMR0_Read16bitTimer:	
 31658                           
 31659                           	psect	text76
 31660  2CF0                     __ptext76:	
 31661 ;; *************** function _nullifyBadge_platformInit *****************
 31662 ;; Defined at:
 31663 ;;		line 13 in file "nullifyBadge.c"
 31664 ;; Parameters:    Size  Location     Type
 31665 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 31666 ;;		 -> badge_inst(18), 
 31667 ;; Auto vars:     Size  Location     Type
 31668 ;;  badge           1   12[BANK0 ] PTR struct t_nullifyBadg
 31669 ;;		 -> badge_inst(18), 
 31670 ;; Return value:  Size  Location     Type
 31671 ;;                  1    wreg      void 
 31672 ;; Registers used:
 31673 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31674 ;; Tracked objects:
 31675 ;;		On entry : 0/0
 31676 ;;		On exit  : 0/0
 31677 ;;		Unchanged: 0/0
 31678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31682 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31683 ;;Total ram usage:        1 bytes
 31684 ;; Hardware stack levels used:    1
 31685 ;; Hardware stack levels required when called:    9
 31686 ;; This function calls:
 31687 ;;		_OSCILLATOR_Initialize
 31688 ;;		_PIN_MANAGER_Initialize
 31689 ;;		_PWM1_Initialize
 31690 ;;		_PWM1_LoadDutyValue
 31691 ;;		_PWM2_Initialize
 31692 ;;		_PWM2_LoadDutyValue
 31693 ;;		_PWM5_Initialize
 31694 ;;		_PWM5_LoadDutyValue
 31695 ;;		_PWM6_Initialize
 31696 ;;		_PWM6_LoadDutyValue
 31697 ;;		_SPI1_Initialize
 31698 ;;		_SYSTEM_Initialize
 31699 ;;		_TMR0_Initialize
 31700 ;;		_TMR2_Initialize
 31701 ;;		_TMR4_Initialize
 31702 ;;		_displayL2_Initialize
 31703 ;; This function is called by:
 31704 ;;		_main
 31705 ;; This function uses a non-reentrant model
 31706 ;;
 31707                           
 31708                           
 31709                           ;psect for function _nullifyBadge_platformInit
 31710  2CF0                     _nullifyBadge_platformInit:	
 31711                           
 31712                           ;incstack = 0
 31713                           ; Regs used in _nullifyBadge_platformInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 31714                           ;nullifyBadge_platformInit@badge stored from wreg
 31715  2CF0  0020               	movlb	0	; select bank0
 31716  2CF1  00AC               	movwf	nullifyBadge_platformInit@badge
 31717                           
 31718                           ;nullifyBadge.c: 15: SYSTEM_Initialize();
 31719  2CF2  31B5  2532  31AC   	fcall	_SYSTEM_Initialize
 31720                           
 31721                           ;nullifyBadge.c: 16: OSCILLATOR_Initialize();
 31722  2CF5  31B2  2269  31AC   	fcall	_OSCILLATOR_Initialize
 31723                           
 31724                           ;nullifyBadge.c: 19: TMR0_Initialize();
 31725  2CF8  31B4  24BA  31AC   	fcall	_TMR0_Initialize
 31726                           
 31727                           ;nullifyBadge.c: 20: TMR2_Initialize();
 31728  2CFB  31B2  2273  31AC   	fcall	_TMR2_Initialize
 31729                           
 31730                           ;nullifyBadge.c: 21: TMR4_Initialize();
 31731  2CFE  31B2  22A8  31AC   	fcall	_TMR4_Initialize
 31732                           
 31733                           ;nullifyBadge.c: 23: PIN_MANAGER_Initialize();
 31734  2D01  31AC  249B  31AC   	fcall	_PIN_MANAGER_Initialize
 31735                           
 31736                           ;nullifyBadge.c: 24: PWM1_Initialize();
 31737  2D04  31B2  2292  31AC   	fcall	_PWM1_Initialize
 31738                           
 31739                           ;nullifyBadge.c: 26: PWM2_Initialize();
 31740  2D07  31B2  229D  31AC   	fcall	_PWM2_Initialize
 31741                           
 31742                           ;nullifyBadge.c: 27: PWM5_Initialize();
 31743  2D0A  31B2  22BE  31AC   	fcall	_PWM5_Initialize
 31744                           
 31745                           ;nullifyBadge.c: 28: PWM6_Initialize();
 31746  2D0D  31B2  22CA  31AC   	fcall	_PWM6_Initialize
 31747                           
 31748                           ;nullifyBadge.c: 29: SPI1_Initialize();
 31749  2D10  31B2  2247  31AC   	fcall	_SPI1_Initialize
 31750                           
 31751                           ;nullifyBadge.c: 32: PWM1_LoadDutyValue(128);
 31752  2D13  3080               	movlw	128
 31753  2D14  00F1               	movwf	PWM1_LoadDutyValue@dutyValue
 31754  2D15  3000               	movlw	0
 31755  2D16  00F2               	movwf	PWM1_LoadDutyValue@dutyValue+1
 31756  2D17  31B3  23C3  31AC   	fcall	_PWM1_LoadDutyValue
 31757                           
 31758                           ;nullifyBadge.c: 44: do { LATBbits.LATB7 = 1; } while(0);
 31759  2D1A  0022               	movlb	2	; select bank2
 31760  2D1B  178D               	bsf	13,7	;volatile
 31761                           
 31762                           ;nullifyBadge.c: 45: PWM2_LoadDutyValue(192);
 31763  2D1C  30C0               	movlw	192
 31764  2D1D  00F1               	movwf	PWM2_LoadDutyValue@dutyValue
 31765  2D1E  3000               	movlw	0
 31766  2D1F  00F2               	movwf	PWM2_LoadDutyValue@dutyValue+1
 31767  2D20  31B3  23D9  31AC   	fcall	_PWM2_LoadDutyValue
 31768                           
 31769                           ;nullifyBadge.c: 50: PWM5_LoadDutyValue(gamma_table_256x1k[128]);
 31770  2D23  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 31771  2D24  0084               	movwf	4
 31772  2D25  30A1               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 31773  2D26  0085               	movwf	5
 31774  2D27  3F00               	moviw [0]fsr0
 31775  2D28  00F1               	movwf	PWM5_LoadDutyValue@dutyValue
 31776  2D29  3F01               	moviw [1]fsr0
 31777  2D2A  00F2               	movwf	PWM5_LoadDutyValue@dutyValue+1
 31778  2D2B  31B3  23EF  31AC   	fcall	_PWM5_LoadDutyValue
 31779                           
 31780                           ;nullifyBadge.c: 51: PWM6_LoadDutyValue(gamma_table_256x1k[128]);
 31781  2D2E  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 31782  2D2F  0084               	movwf	4
 31783  2D30  30A1               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 31784  2D31  0085               	movwf	5
 31785  2D32  3F00               	moviw [0]fsr0
 31786  2D33  00F1               	movwf	PWM6_LoadDutyValue@dutyValue
 31787  2D34  3F01               	moviw [1]fsr0
 31788  2D35  00F2               	movwf	PWM6_LoadDutyValue@dutyValue+1
 31789  2D36  31B4  2405  31AC   	fcall	_PWM6_LoadDutyValue
 31790                           
 31791                           ;nullifyBadge.c: 54: displayL2_Initialize(&badge->display);
 31792  2D39  0020               	movlb	0	; select bank0
 31793  2D3A  082C               	movf	nullifyBadge_platformInit@badge,w
 31794  2D3B  31B5  2578         	fcall	_displayL2_Initialize
 31795                           
 31796                           ;nullifyBadge.c: 57: badge->registeredHw = 0x0;
 31797  2D3D  0020               	movlb	0	; select bank0
 31798  2D3E  082C               	movf	nullifyBadge_platformInit@badge,w
 31799  2D3F  3E11               	addlw	17
 31800  2D40  0086               	movwf	6
 31801  2D41  3001               	movlw	1	; select bank2/3
 31802  2D42  0087               	movwf	7
 31803  2D43  0181               	clrf	1
 31804  2D44  0008               	return
 31805  2D45                     __end_of_nullifyBadge_platformInit:	
 31806                           
 31807                           	psect	text77
 31808  3578                     __ptext77:	
 31809 ;; *************** function _displayL2_Initialize *****************
 31810 ;; Defined at:
 31811 ;;		line 12 in file "nullifyBadge_displayL2.c"
 31812 ;; Parameters:    Size  Location     Type
 31813 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31814 ;;		 -> badge_inst(18), 
 31815 ;; Auto vars:     Size  Location     Type
 31816 ;;  display         1   11[BANK0 ] PTR struct t_nullifyDisp
 31817 ;;		 -> badge_inst(18), 
 31818 ;; Return value:  Size  Location     Type
 31819 ;;                  1    wreg      void 
 31820 ;; Registers used:
 31821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31822 ;; Tracked objects:
 31823 ;;		On entry : 0/0
 31824 ;;		On exit  : 0/0
 31825 ;;		Unchanged: 0/0
 31826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31828 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31830 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31831 ;;Total ram usage:        1 bytes
 31832 ;; Hardware stack levels used:    1
 31833 ;; Hardware stack levels required when called:    8
 31834 ;; This function calls:
 31835 ;;		_displayL1_Initialize
 31836 ;;		_memset
 31837 ;; This function is called by:
 31838 ;;		_nullifyBadge_platformInit
 31839 ;; This function uses a non-reentrant model
 31840 ;;
 31841                           
 31842                           
 31843                           ;psect for function _displayL2_Initialize
 31844  3578                     _displayL2_Initialize:	
 31845                           
 31846                           ;incstack = 0
 31847                           ; Regs used in _displayL2_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31848                           ;displayL2_Initialize@display stored from wreg
 31849  3578  0020               	movlb	0	; select bank0
 31850  3579  00AB               	movwf	displayL2_Initialize@display
 31851                           
 31852                           ;nullifyBadge_displayL2.c: 13: displayL1_Initialize(&display->display_l1);
 31853  357A  082B               	movf	displayL2_Initialize@display,w
 31854  357B  3E07               	addlw	7
 31855  357C  31B3  2389  31B5   	fcall	_displayL1_Initialize
 31856                           
 31857                           ;nullifyBadge_displayL2.c: 14: memset(display->charVect, ' ', sizeof(display->charVect))
      +                          ;
 31858  357F  0020               	movlb	0	; select bank0
 31859  3580  082B               	movf	displayL2_Initialize@display,w
 31860  3581  00F1               	movwf	memset@p1
 31861  3582  3001               	movlw	1
 31862  3583  00F2               	movwf	memset@p1+1
 31863  3584  3020               	movlw	32
 31864  3585  00F3               	movwf	memset@c
 31865  3586  3000               	movlw	0
 31866  3587  00F4               	movwf	memset@c+1
 31867  3588  3004               	movlw	4
 31868  3589  00F5               	movwf	memset@n
 31869  358A  3000               	movlw	0
 31870  358B  00F6               	movwf	memset@n+1
 31871  358C  31B4  241B         	fcall	_memset
 31872                           
 31873                           ;nullifyBadge_displayL2.c: 15: display->dpVect = 0;
 31874  358E  0020               	movlb	0	; select bank0
 31875  358F  082B               	movf	displayL2_Initialize@display,w
 31876  3590  3E04               	addlw	4
 31877  3591  0086               	movwf	6
 31878  3592  3001               	movlw	1	; select bank2/3
 31879  3593  0087               	movwf	7
 31880  3594  0181               	clrf	1
 31881                           
 31882                           ;nullifyBadge_displayL2.c: 16: display->ledVect = 0;
 31883  3595  082B               	movf	displayL2_Initialize@display,w
 31884  3596  3E05               	addlw	5
 31885  3597  0086               	movwf	6
 31886  3598  3001               	movlw	1	; select bank2/3
 31887  3599  0087               	movwf	7
 31888  359A  3000               	movlw	0
 31889  359B  3FC0               	movwi [0]fsr1
 31890  359C  3FC1               	movwi [1]fsr1
 31891  359D  0008               	return
 31892  359E                     __end_of_displayL2_Initialize:	
 31893                           
 31894                           	psect	text78
 31895  3389                     __ptext78:	
 31896 ;; *************** function _displayL1_Initialize *****************
 31897 ;; Defined at:
 31898 ;;		line 13 in file "nullifyBadge_displayL1.c"
 31899 ;; Parameters:    Size  Location     Type
 31900 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31901 ;;		 -> badge_inst(18), 
 31902 ;; Auto vars:     Size  Location     Type
 31903 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 31904 ;;		 -> badge_inst(18), 
 31905 ;; Return value:  Size  Location     Type
 31906 ;;                  1    wreg      void 
 31907 ;; Registers used:
 31908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31909 ;; Tracked objects:
 31910 ;;		On entry : 0/0
 31911 ;;		On exit  : 0/0
 31912 ;;		Unchanged: 0/0
 31913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31917 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31918 ;;Total ram usage:        1 bytes
 31919 ;; Hardware stack levels used:    1
 31920 ;; Hardware stack levels required when called:    7
 31921 ;; This function calls:
 31922 ;;		_displayL1_Update
 31923 ;;		_memset
 31924 ;; This function is called by:
 31925 ;;		_displayL2_Initialize
 31926 ;; This function uses a non-reentrant model
 31927 ;;
 31928                           
 31929                           
 31930                           ;psect for function _displayL1_Initialize
 31931  3389                     _displayL1_Initialize:	
 31932                           
 31933                           ;incstack = 0
 31934                           ; Regs used in _displayL1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31935                           ;displayL1_Initialize@display stored from wreg
 31936  3389  00FB               	movwf	displayL1_Initialize@display
 31937                           
 31938                           ;nullifyBadge_displayL1.c: 14: memset(display->displayVect, 0, sizeof(struct t_nullifyDi
      +                          splay_l1));
 31939  338A  087B               	movf	displayL1_Initialize@display,w
 31940  338B  00F1               	movwf	memset@p1
 31941  338C  3001               	movlw	1
 31942  338D  00F2               	movwf	memset@p1+1
 31943  338E  3000               	movlw	0
 31944  338F  00F3               	movwf	memset@c
 31945  3390  00F4               	movwf	memset@c+1
 31946  3391  300A               	movlw	10
 31947  3392  00F5               	movwf	memset@n
 31948  3393  3000               	movlw	0
 31949  3394  00F6               	movwf	memset@n+1
 31950  3395  31B4  241B  31B3   	fcall	_memset
 31951                           
 31952                           ;nullifyBadge_displayL1.c: 15: displayL1_Update(display);
 31953  3398  087B               	movf	displayL1_Initialize@display,w
 31954  3399  31B3  2344         	fcall	_displayL1_Update
 31955  339B  0008               	return
 31956  339C                     __end_of_displayL1_Initialize:	
 31957                           
 31958                           	psect	text79
 31959  341B                     __ptext79:	
 31960 ;; *************** function _memset *****************
 31961 ;; Defined at:
 31962 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/memset.c"
 31963 ;; Parameters:    Size  Location     Type
 31964 ;;  p1              2    1[COMMON] PTR void 
 31965 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 31966 ;;		 -> menu_TaskData(14), flashy_TaskData(30), badge_inst(18), NULL(0), 
 31967 ;;  c               2    3[COMMON] int 
 31968 ;;  n               2    5[COMMON] unsigned int 
 31969 ;; Auto vars:     Size  Location     Type
 31970 ;;  p               2    7[COMMON] PTR unsigned char 
 31971 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 31972 ;;		 -> menu_TaskData(14), flashy_TaskData(30), badge_inst(18), NULL(0), 
 31973 ;; Return value:  Size  Location     Type
 31974 ;;                  2    1[COMMON] PTR void 
 31975 ;; Registers used:
 31976 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 31977 ;; Tracked objects:
 31978 ;;		On entry : 0/0
 31979 ;;		On exit  : 0/0
 31980 ;;		Unchanged: 0/0
 31981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31982 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31985 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31986 ;;Total ram usage:        8 bytes
 31987 ;; Hardware stack levels used:    1
 31988 ;; Hardware stack levels required when called:    4
 31989 ;; This function calls:
 31990 ;;		Nothing
 31991 ;; This function is called by:
 31992 ;;		_displayL1_Initialize
 31993 ;;		_displayL2_Initialize
 31994 ;;		_slot_Setup
 31995 ;;		_slot_Main
 31996 ;; This function uses a non-reentrant model
 31997 ;;
 31998                           
 31999                           
 32000                           ;psect for function _memset
 32001  341B                     _memset:	
 32002                           
 32003                           ;incstack = 0
 32004                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 32005  341B  0872               	movf	memset@p1+1,w
 32006  341C  00F8               	movwf	memset@p+1
 32007  341D  0871               	movf	memset@p1,w
 32008  341E  00F7               	movwf	memset@p
 32009  341F                     l8457:	
 32010  341F  3001               	movlw	1
 32011  3420  02F5               	subwf	memset@n,f
 32012  3421  3000               	movlw	0
 32013  3422  3BF6               	subwfb	memset@n+1,f
 32014  3423  0A75               	incf	memset@n,w
 32015  3424  1903               	btfsc	3,2
 32016  3425  0A76               	incf	memset@n+1,w
 32017  3426  1903               	btfsc	3,2
 32018  3427  0008               	return
 32019  3428  0877               	movf	memset@p,w
 32020  3429  0086               	movwf	6
 32021  342A  0878               	movf	memset@p+1,w
 32022  342B  0087               	movwf	7
 32023  342C  0873               	movf	memset@c,w
 32024  342D  0081               	movwf	1
 32025  342E  3001               	movlw	1
 32026  342F  07F7               	addwf	memset@p,f
 32027  3430  3000               	movlw	0
 32028  3431  3DF8               	addwfc	memset@p+1,f
 32029  3432  2C1F               	goto	l8457
 32030  3433                     __end_of_memset:	
 32031                           ;	Return value of _memset is never used
 32032                           
 32033                           
 32034                           	psect	text80
 32035  3344                     __ptext80:	
 32036 ;; *************** function _displayL1_Update *****************
 32037 ;; Defined at:
 32038 ;;		line 97 in file "nullifyBadge_displayL1.c"
 32039 ;; Parameters:    Size  Location     Type
 32040 ;;  display         1    wreg     PTR struct t_nullifyDisp
 32041 ;;		 -> badge_inst(18), 
 32042 ;; Auto vars:     Size  Location     Type
 32043 ;;  display         1   10[BANK0 ] PTR struct t_nullifyDisp
 32044 ;;		 -> badge_inst(18), 
 32045 ;;  tmpRxBuf       10    0[BANK0 ] unsigned char [10]
 32046 ;; Return value:  Size  Location     Type
 32047 ;;                  1    wreg      void 
 32048 ;; Registers used:
 32049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32050 ;; Tracked objects:
 32051 ;;		On entry : 0/0
 32052 ;;		On exit  : 0/0
 32053 ;;		Unchanged: 0/0
 32054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32056 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32057 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32058 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32059 ;;Total ram usage:       13 bytes
 32060 ;; Hardware stack levels used:    1
 32061 ;; Hardware stack levels required when called:    6
 32062 ;; This function calls:
 32063 ;;		_SPI1_Exchange8bitBuffer
 32064 ;; This function is called by:
 32065 ;;		_displayL1_Initialize
 32066 ;;		_displayL2_ForceUpdate
 32067 ;;		_displayL2_EraseSegDisplay
 32068 ;;		_displayL2_SetUserLeds
 32069 ;;		_displayL2_ClrUserLeds
 32070 ;;		_displayL2_PrintChar
 32071 ;;		_displayL2_PrintStr
 32072 ;; This function uses a non-reentrant model
 32073 ;;
 32074                           
 32075                           
 32076                           ;psect for function _displayL1_Update
 32077  3344                     _displayL1_Update:	
 32078                           
 32079                           ;incstack = 0
 32080                           ; Regs used in _displayL1_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 32081                           ;displayL1_Update@display stored from wreg
 32082  3344  0020               	movlb	0	; select bank0
 32083  3345  00AA               	movwf	displayL1_Update@display
 32084                           
 32085                           ;nullifyBadge_displayL1.c: 98: u8 tmpRxBuf[10];
 32086                           ;nullifyBadge_displayL1.c: 100: SPI1_Exchange8bitBuffer(display->displayVect, 10, tmpRxB
      +                          uf);
 32087  3346  300A               	movlw	10
 32088  3347  00F9               	movwf	??_displayL1_Update
 32089  3348  0879               	movf	??_displayL1_Update,w
 32090  3349  00F2               	movwf	SPI1_Exchange8bitBuffer@bufLen
 32091  334A  3020               	movlw	(low (displayL1_Update@tmpRxBuf| 0))& (0+255)
 32092  334B  00FA               	movwf	??_displayL1_Update+1
 32093  334C  087A               	movf	??_displayL1_Update+1,w
 32094  334D  00F3               	movwf	SPI1_Exchange8bitBuffer@dataOut
 32095  334E  082A               	movf	displayL1_Update@display,w
 32096  334F  31AB  23A7         	fcall	_SPI1_Exchange8bitBuffer
 32097                           
 32098                           ;nullifyBadge_displayL1.c: 101: do { LATCbits.LATC7 = 1; } while(0);
 32099  3351  0022               	movlb	2	; select bank2
 32100  3352  178E               	bsf	14,7	;volatile
 32101                           
 32102                           ;nullifyBadge_displayL1.c: 102: do { LATCbits.LATC7 = 0; } while(0);
 32103  3353  138E               	bcf	14,7	;volatile
 32104  3354  0008               	return
 32105  3355                     __end_of_displayL1_Update:	
 32106                           
 32107                           	psect	text81
 32108  2BA7                     __ptext81:	
 32109 ;; *************** function _SPI1_Exchange8bitBuffer *****************
 32110 ;; Defined at:
 32111 ;;		line 91 in file "mcc_generated_files/spi1.c"
 32112 ;; Parameters:    Size  Location     Type
 32113 ;;  dataIn          1    wreg     PTR unsigned char 
 32114 ;;		 -> badge_inst(18), 
 32115 ;;  bufLen          1    2[COMMON] unsigned char 
 32116 ;;  dataOut         1    3[COMMON] PTR unsigned char 
 32117 ;;		 -> displayL1_Update@tmpRxBuf(10), 
 32118 ;; Auto vars:     Size  Location     Type
 32119 ;;  dataIn          1    7[COMMON] PTR unsigned char 
 32120 ;;		 -> badge_inst(18), 
 32121 ;;  bytesWritten    1    8[COMMON] unsigned char 
 32122 ;; Return value:  Size  Location     Type
 32123 ;;                  1    wreg      unsigned char 
 32124 ;; Registers used:
 32125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32126 ;; Tracked objects:
 32127 ;;		On entry : 0/0
 32128 ;;		On exit  : 0/0
 32129 ;;		Unchanged: 0/0
 32130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32131 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32133 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32134 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32135 ;;Total ram usage:        7 bytes
 32136 ;; Hardware stack levels used:    1
 32137 ;; Hardware stack levels required when called:    5
 32138 ;; This function calls:
 32139 ;;		_SPI1_Exchange8bit
 32140 ;; This function is called by:
 32141 ;;		_displayL1_Update
 32142 ;; This function uses a non-reentrant model
 32143 ;;
 32144                           
 32145                           
 32146                           ;psect for function _SPI1_Exchange8bitBuffer
 32147  2BA7                     _SPI1_Exchange8bitBuffer:	
 32148                           
 32149                           ;incstack = 0
 32150                           ; Regs used in _SPI1_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 32151                           ;SPI1_Exchange8bitBuffer@dataIn stored from wreg
 32152  2BA7  00F7               	movwf	SPI1_Exchange8bitBuffer@dataIn
 32153                           
 32154                           ;spi1.c: 93: uint8_t bytesWritten = 0;
 32155  2BA8  01F8               	clrf	SPI1_Exchange8bitBuffer@bytesWritten
 32156                           
 32157                           ;spi1.c: 95: if(bufLen != 0)
 32158  2BA9  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 32159  2BAA  1903               	btfsc	3,2
 32160  2BAB  0008               	return
 32161                           
 32162                           ;spi1.c: 96: {
 32163                           ;spi1.c: 97: if(dataIn != (0))
 32164  2BAC  0877               	movf	SPI1_Exchange8bitBuffer@dataIn,w
 32165  2BAD  1D03               	btfss	3,2
 32166  2BAE  2BD7               	goto	l8203
 32167  2BAF  2BDC               	goto	l8205
 32168  2BB0                     l8195:	
 32169                           ;spi1.c: 98: {
 32170                           ;spi1.c: 99: while(bytesWritten < bufLen)
 32171                           
 32172                           
 32173                           ;spi1.c: 100: {
 32174                           ;spi1.c: 101: if(dataOut == (0))
 32175  2BB0  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 32176  2BB1  1D03               	btfss	3,2
 32177  2BB2  2BBF               	goto	l8199
 32178                           
 32179                           ;spi1.c: 102: {
 32180                           ;spi1.c: 103: SPI1_Exchange8bit(dataIn[bytesWritten]);
 32181  2BB3  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32182  2BB4  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 32183  2BB5  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32184  2BB6  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32185  2BB7  0086               	movwf	6
 32186  2BB8  3001               	movlw	1	; select bank2/3
 32187  2BB9  0087               	movwf	7
 32188  2BBA  0801               	movf	1,w
 32189  2BBB  31B2  2257  31AB   	fcall	_SPI1_Exchange8bit
 32190                           
 32191                           ;spi1.c: 104: }
 32192  2BBE  2BD3               	goto	l8201
 32193  2BBF                     l8199:	
 32194                           
 32195                           ;spi1.c: 105: else
 32196                           ;spi1.c: 106: {
 32197                           ;spi1.c: 107: dataOut[bytesWritten] = SPI1_Exchange8bit(dataIn[bytesWritten]);
 32198  2BBF  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32199  2BC0  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 32200  2BC1  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32201  2BC2  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32202  2BC3  0086               	movwf	6
 32203  2BC4  3001               	movlw	1	; select bank2/3
 32204  2BC5  0087               	movwf	7
 32205  2BC6  0801               	movf	1,w
 32206  2BC7  31B2  2257  31AB   	fcall	_SPI1_Exchange8bit
 32207  2BCA  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 32208  2BCB  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32209  2BCC  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 32210  2BCD  00F6               	movwf	??_SPI1_Exchange8bitBuffer+2
 32211  2BCE  0876               	movf	??_SPI1_Exchange8bitBuffer+2,w
 32212  2BCF  0086               	movwf	6
 32213  2BD0  0187               	clrf	7
 32214  2BD1  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 32215  2BD2  0081               	movwf	1
 32216  2BD3                     l8201:	
 32217                           
 32218                           ;spi1.c: 108: }
 32219                           ;spi1.c: 110: bytesWritten++;
 32220  2BD3  3001               	movlw	1
 32221  2BD4  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32222  2BD5  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32223  2BD6  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 32224  2BD7                     l8203:	
 32225  2BD7  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 32226  2BD8  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32227  2BD9  1803               	btfsc	3,0
 32228  2BDA  0008               	return
 32229  2BDB  2BB0               	goto	l8195
 32230  2BDC                     l8205:	
 32231                           ;spi1.c: 111: }
 32232                           ;spi1.c: 112: }
 32233                           
 32234                           
 32235                           ;spi1.c: 113: else
 32236                           ;spi1.c: 114: {
 32237                           ;spi1.c: 115: if(dataOut != (0))
 32238  2BDC  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 32239  2BDD  1903               	btfsc	3,2
 32240  2BDE  0008               	return
 32241  2BDF                     l8213:	
 32242  2BDF  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 32243  2BE0  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32244  2BE1  1803               	btfsc	3,0
 32245  2BE2  0008               	return
 32246                           
 32247                           ;spi1.c: 118: {
 32248                           ;spi1.c: 119: dataOut[bytesWritten] = SPI1_Exchange8bit(0x0);
 32249                           
 32250                           ;spi1.c: 116: {
 32251                           ;spi1.c: 117: while(bytesWritten < bufLen )
 32252  2BE3  3000               	movlw	0
 32253  2BE4  31B2  2257  31AB   	fcall	_SPI1_Exchange8bit
 32254  2BE7  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32255  2BE8  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32256  2BE9  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 32257  2BEA  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 32258  2BEB  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 32259  2BEC  0086               	movwf	6
 32260  2BED  0187               	clrf	7
 32261  2BEE  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32262  2BEF  0081               	movwf	1
 32263                           
 32264                           ;spi1.c: 121: bytesWritten++;
 32265  2BF0  3001               	movlw	1
 32266  2BF1  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32267  2BF2  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32268  2BF3  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 32269  2BF4  2BDF               	goto	l8213
 32270  2BF5                     __end_of_SPI1_Exchange8bitBuffer:	
 32271                           ;spi1.c: 122: }
 32272                           ;spi1.c: 123: }
 32273                           ;spi1.c: 124: }
 32274                           ;spi1.c: 125: }
 32275                           ;spi1.c: 127: return bytesWritten;
 32276                           ;	Return value of _SPI1_Exchange8bitBuffer is never used
 32277                           
 32278                           
 32279                           	psect	text82
 32280  3257                     __ptext82:	
 32281 ;; *************** function _SPI1_Exchange8bit *****************
 32282 ;; Defined at:
 32283 ;;		line 77 in file "mcc_generated_files/spi1.c"
 32284 ;; Parameters:    Size  Location     Type
 32285 ;;  data            1    wreg     unsigned char 
 32286 ;; Auto vars:     Size  Location     Type
 32287 ;;  data            1    1[COMMON] unsigned char 
 32288 ;; Return value:  Size  Location     Type
 32289 ;;                  1    wreg      unsigned char 
 32290 ;; Registers used:
 32291 ;;		wreg
 32292 ;; Tracked objects:
 32293 ;;		On entry : 0/0
 32294 ;;		On exit  : 0/0
 32295 ;;		Unchanged: 0/0
 32296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32300 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32301 ;;Total ram usage:        1 bytes
 32302 ;; Hardware stack levels used:    1
 32303 ;; Hardware stack levels required when called:    4
 32304 ;; This function calls:
 32305 ;;		Nothing
 32306 ;; This function is called by:
 32307 ;;		_SPI1_Exchange8bitBuffer
 32308 ;; This function uses a non-reentrant model
 32309 ;;
 32310                           
 32311                           
 32312                           ;psect for function _SPI1_Exchange8bit
 32313  3257                     _SPI1_Exchange8bit:	
 32314                           
 32315                           ;incstack = 0
 32316                           ; Regs used in _SPI1_Exchange8bit: [wreg]
 32317                           ;SPI1_Exchange8bit@data stored from wreg
 32318  3257  00F1               	movwf	SPI1_Exchange8bit@data
 32319                           
 32320                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
 32321  3258  0024               	movlb	4	; select bank4
 32322  3259  1395               	bcf	21,7	;volatile
 32323                           
 32324                           ;spi1.c: 82: SSP1BUF = data;
 32325  325A  0871               	movf	SPI1_Exchange8bit@data,w
 32326  325B  0091               	movwf	17	;volatile
 32327  325C                     l18:	
 32328                           ;spi1.c: 85: {
 32329                           
 32330                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
 32331                           
 32332  325C  1C14               	btfss	20,0	;volatile
 32333  325D  2A5C               	goto	l18
 32334                           
 32335                           ;spi1.c: 86: }
 32336                           ;spi1.c: 88: return (SSP1BUF);
 32337  325E  0811               	movf	17,w	;volatile
 32338  325F  0008               	return
 32339  3260                     __end_of_SPI1_Exchange8bit:	
 32340                           
 32341                           	psect	text83
 32342  3532                     __ptext83:	
 32343 ;; *************** function _SYSTEM_Initialize *****************
 32344 ;; Defined at:
 32345 ;;		line 76 in file "mcc_generated_files/mcc.c"
 32346 ;; Parameters:    Size  Location     Type
 32347 ;;		None
 32348 ;; Auto vars:     Size  Location     Type
 32349 ;;		None
 32350 ;; Return value:  Size  Location     Type
 32351 ;;                  1    wreg      void 
 32352 ;; Registers used:
 32353 ;;		wreg, status,2, status,0, pclath, cstack
 32354 ;; Tracked objects:
 32355 ;;		On entry : 0/0
 32356 ;;		On exit  : 0/0
 32357 ;;		Unchanged: 0/0
 32358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32363 ;;Total ram usage:        0 bytes
 32364 ;; Hardware stack levels used:    1
 32365 ;; Hardware stack levels required when called:    6
 32366 ;; This function calls:
 32367 ;;		_OSCILLATOR_Initialize
 32368 ;;		_PIN_MANAGER_Initialize
 32369 ;;		_PWM1_Initialize
 32370 ;;		_PWM2_Initialize
 32371 ;;		_PWM5_Initialize
 32372 ;;		_PWM6_Initialize
 32373 ;;		_SPI1_Initialize
 32374 ;;		_TMR0_Initialize
 32375 ;;		_TMR2_Initialize
 32376 ;;		_TMR4_Initialize
 32377 ;;		_WDT_Initialize
 32378 ;; This function is called by:
 32379 ;;		_nullifyBadge_platformInit
 32380 ;; This function uses a non-reentrant model
 32381 ;;
 32382                           
 32383                           
 32384                           ;psect for function _SYSTEM_Initialize
 32385  3532                     _SYSTEM_Initialize:	
 32386                           
 32387                           ;mcc.c: 79: PIN_MANAGER_Initialize();
 32388                           
 32389                           ;incstack = 0
 32390                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32391  3532  31AC  249B  31B5   	fcall	_PIN_MANAGER_Initialize
 32392                           
 32393                           ;mcc.c: 80: OSCILLATOR_Initialize();
 32394  3535  31B2  2269  31B5   	fcall	_OSCILLATOR_Initialize
 32395                           
 32396                           ;mcc.c: 81: WDT_Initialize();
 32397  3538  31B2  221E  31B5   	fcall	_WDT_Initialize
 32398                           
 32399                           ;mcc.c: 82: SPI1_Initialize();
 32400  353B  31B2  2247  31B5   	fcall	_SPI1_Initialize
 32401                           
 32402                           ;mcc.c: 83: PWM6_Initialize();
 32403  353E  31B2  22CA  31B5   	fcall	_PWM6_Initialize
 32404                           
 32405                           ;mcc.c: 84: PWM1_Initialize();
 32406  3541  31B2  2292  31B5   	fcall	_PWM1_Initialize
 32407                           
 32408                           ;mcc.c: 85: PWM2_Initialize();
 32409  3544  31B2  229D  31B5   	fcall	_PWM2_Initialize
 32410                           
 32411                           ;mcc.c: 86: TMR4_Initialize();
 32412  3547  31B2  22A8  31B5   	fcall	_TMR4_Initialize
 32413                           
 32414                           ;mcc.c: 87: TMR2_Initialize();
 32415  354A  31B2  2273  31B5   	fcall	_TMR2_Initialize
 32416                           
 32417                           ;mcc.c: 88: PWM5_Initialize();
 32418  354D  31B2  22BE  31B5   	fcall	_PWM5_Initialize
 32419                           
 32420                           ;mcc.c: 89: TMR0_Initialize();
 32421  3550  31B4  24BA         	fcall	_TMR0_Initialize
 32422  3552  0008               	return
 32423  3553                     __end_of_SYSTEM_Initialize:	
 32424                           
 32425                           	psect	text84
 32426  321E                     __ptext84:	
 32427 ;; *************** function _WDT_Initialize *****************
 32428 ;; Defined at:
 32429 ;;		line 110 in file "mcc_generated_files/mcc.c"
 32430 ;; Parameters:    Size  Location     Type
 32431 ;;		None
 32432 ;; Auto vars:     Size  Location     Type
 32433 ;;		None
 32434 ;; Return value:  Size  Location     Type
 32435 ;;                  1    wreg      void 
 32436 ;; Registers used:
 32437 ;;		wreg
 32438 ;; Tracked objects:
 32439 ;;		On entry : 0/0
 32440 ;;		On exit  : 0/0
 32441 ;;		Unchanged: 0/0
 32442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32447 ;;Total ram usage:        0 bytes
 32448 ;; Hardware stack levels used:    1
 32449 ;; Hardware stack levels required when called:    4
 32450 ;; This function calls:
 32451 ;;		Nothing
 32452 ;; This function is called by:
 32453 ;;		_SYSTEM_Initialize
 32454 ;; This function uses a non-reentrant model
 32455 ;;
 32456                           
 32457                           
 32458                           ;psect for function _WDT_Initialize
 32459  321E                     _WDT_Initialize:	
 32460                           
 32461                           ;mcc.c: 113: WDTCON = 0x16;
 32462                           
 32463                           ;incstack = 0
 32464                           ; Regs used in _WDT_Initialize: [wreg]
 32465  321E  3016               	movlw	22
 32466  321F  0021               	movlb	1	; select bank1
 32467  3220  0097               	movwf	23	;volatile
 32468  3221  0008               	return
 32469  3222                     __end_of_WDT_Initialize:	
 32470                           
 32471                           	psect	text85
 32472  32A8                     __ptext85:	
 32473 ;; *************** function _TMR4_Initialize *****************
 32474 ;; Defined at:
 32475 ;;		line 63 in file "mcc_generated_files/tmr4.c"
 32476 ;; Parameters:    Size  Location     Type
 32477 ;;		None
 32478 ;; Auto vars:     Size  Location     Type
 32479 ;;		None
 32480 ;; Return value:  Size  Location     Type
 32481 ;;                  1    wreg      void 
 32482 ;; Registers used:
 32483 ;;		wreg, status,2, status,0, pclath, cstack
 32484 ;; Tracked objects:
 32485 ;;		On entry : 0/0
 32486 ;;		On exit  : 0/0
 32487 ;;		Unchanged: 0/0
 32488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32493 ;;Total ram usage:        0 bytes
 32494 ;; Hardware stack levels used:    1
 32495 ;; Hardware stack levels required when called:    5
 32496 ;; This function calls:
 32497 ;;		_TMR4_StartTimer
 32498 ;; This function is called by:
 32499 ;;		_SYSTEM_Initialize
 32500 ;;		_nullifyBadge_platformInit
 32501 ;; This function uses a non-reentrant model
 32502 ;;
 32503                           
 32504                           
 32505                           ;psect for function _TMR4_Initialize
 32506  32A8                     _TMR4_Initialize:	
 32507                           
 32508                           ;tmr4.c: 68: T4CON = 0x7B;
 32509                           
 32510                           ;incstack = 0
 32511                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32512  32A8  307B               	movlw	123
 32513  32A9  0028               	movlb	8	; select bank8
 32514  32AA  0097               	movwf	23	;volatile
 32515                           
 32516                           ;tmr4.c: 71: PR4 = 0xFF;
 32517  32AB  30FF               	movlw	255
 32518  32AC  0096               	movwf	22	;volatile
 32519                           
 32520                           ;tmr4.c: 74: TMR4 = 0x00;
 32521  32AD  0195               	clrf	21	;volatile
 32522                           
 32523                           ;tmr4.c: 77: PIR2bits.TMR4IF = 0;
 32524  32AE  0020               	movlb	0	; select bank0
 32525  32AF  1092               	bcf	18,1	;volatile
 32526                           
 32527                           ;tmr4.c: 80: TMR4_StartTimer();
 32528  32B0  31B2  2218         	fcall	_TMR4_StartTimer
 32529  32B2  0008               	return
 32530  32B3                     __end_of_TMR4_Initialize:	
 32531                           
 32532                           	psect	text86
 32533  3218                     __ptext86:	
 32534 ;; *************** function _TMR4_StartTimer *****************
 32535 ;; Defined at:
 32536 ;;		line 83 in file "mcc_generated_files/tmr4.c"
 32537 ;; Parameters:    Size  Location     Type
 32538 ;;		None
 32539 ;; Auto vars:     Size  Location     Type
 32540 ;;		None
 32541 ;; Return value:  Size  Location     Type
 32542 ;;                  1    wreg      void 
 32543 ;; Registers used:
 32544 ;;		None
 32545 ;; Tracked objects:
 32546 ;;		On entry : 0/0
 32547 ;;		On exit  : 0/0
 32548 ;;		Unchanged: 0/0
 32549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32554 ;;Total ram usage:        0 bytes
 32555 ;; Hardware stack levels used:    1
 32556 ;; Hardware stack levels required when called:    4
 32557 ;; This function calls:
 32558 ;;		Nothing
 32559 ;; This function is called by:
 32560 ;;		_TMR4_Initialize
 32561 ;; This function uses a non-reentrant model
 32562 ;;
 32563                           
 32564                           
 32565                           ;psect for function _TMR4_StartTimer
 32566  3218                     _TMR4_StartTimer:	
 32567                           
 32568                           ;tmr4.c: 86: T4CONbits.TMR4ON = 1;
 32569                           
 32570                           ;incstack = 0
 32571                           ; Regs used in _TMR4_StartTimer: []
 32572  3218  0028               	movlb	8	; select bank8
 32573  3219  1517               	bsf	23,2	;volatile
 32574  321A  0008               	return
 32575  321B                     __end_of_TMR4_StartTimer:	
 32576                           
 32577                           	psect	text87
 32578  3273                     __ptext87:	
 32579 ;; *************** function _TMR2_Initialize *****************
 32580 ;; Defined at:
 32581 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 32582 ;; Parameters:    Size  Location     Type
 32583 ;;		None
 32584 ;; Auto vars:     Size  Location     Type
 32585 ;;		None
 32586 ;; Return value:  Size  Location     Type
 32587 ;;                  1    wreg      void 
 32588 ;; Registers used:
 32589 ;;		wreg, status,2, status,0, pclath, cstack
 32590 ;; Tracked objects:
 32591 ;;		On entry : 0/0
 32592 ;;		On exit  : 0/0
 32593 ;;		Unchanged: 0/0
 32594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32599 ;;Total ram usage:        0 bytes
 32600 ;; Hardware stack levels used:    1
 32601 ;; Hardware stack levels required when called:    5
 32602 ;; This function calls:
 32603 ;;		_TMR2_StartTimer
 32604 ;; This function is called by:
 32605 ;;		_SYSTEM_Initialize
 32606 ;;		_nullifyBadge_platformInit
 32607 ;; This function uses a non-reentrant model
 32608 ;;
 32609                           
 32610                           
 32611                           ;psect for function _TMR2_Initialize
 32612  3273                     _TMR2_Initialize:	
 32613                           
 32614                           ;tmr2.c: 68: T2CON = 0x01;
 32615                           
 32616                           ;incstack = 0
 32617                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32618  3273  3001               	movlw	1
 32619  3274  0020               	movlb	0	; select bank0
 32620  3275  009F               	movwf	31	;volatile
 32621                           
 32622                           ;tmr2.c: 71: PR2 = 0x4A;
 32623  3276  304A               	movlw	74
 32624  3277  009E               	movwf	30	;volatile
 32625                           
 32626                           ;tmr2.c: 74: TMR2 = 0x00;
 32627  3278  019D               	clrf	29	;volatile
 32628                           
 32629                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 32630  3279  1091               	bcf	17,1	;volatile
 32631                           
 32632                           ;tmr2.c: 80: TMR2_StartTimer();
 32633  327A  31B2  2215         	fcall	_TMR2_StartTimer
 32634  327C  0008               	return
 32635  327D                     __end_of_TMR2_Initialize:	
 32636                           
 32637                           	psect	text88
 32638  3215                     __ptext88:	
 32639 ;; *************** function _TMR2_StartTimer *****************
 32640 ;; Defined at:
 32641 ;;		line 83 in file "mcc_generated_files/tmr2.c"
 32642 ;; Parameters:    Size  Location     Type
 32643 ;;		None
 32644 ;; Auto vars:     Size  Location     Type
 32645 ;;		None
 32646 ;; Return value:  Size  Location     Type
 32647 ;;                  1    wreg      void 
 32648 ;; Registers used:
 32649 ;;		None
 32650 ;; Tracked objects:
 32651 ;;		On entry : 0/0
 32652 ;;		On exit  : 0/0
 32653 ;;		Unchanged: 0/0
 32654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32659 ;;Total ram usage:        0 bytes
 32660 ;; Hardware stack levels used:    1
 32661 ;; Hardware stack levels required when called:    4
 32662 ;; This function calls:
 32663 ;;		Nothing
 32664 ;; This function is called by:
 32665 ;;		_TMR2_Initialize
 32666 ;; This function uses a non-reentrant model
 32667 ;;
 32668                           
 32669                           
 32670                           ;psect for function _TMR2_StartTimer
 32671  3215                     _TMR2_StartTimer:	
 32672                           
 32673                           ;tmr2.c: 86: T2CONbits.TMR2ON = 1;
 32674                           
 32675                           ;incstack = 0
 32676                           ; Regs used in _TMR2_StartTimer: []
 32677  3215  0020               	movlb	0	; select bank0
 32678  3216  151F               	bsf	31,2	;volatile
 32679  3217  0008               	return
 32680  3218                     __end_of_TMR2_StartTimer:	
 32681                           
 32682                           	psect	text89
 32683  34BA                     __ptext89:	
 32684 ;; *************** function _TMR0_Initialize *****************
 32685 ;; Defined at:
 32686 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 32687 ;; Parameters:    Size  Location     Type
 32688 ;;		None
 32689 ;; Auto vars:     Size  Location     Type
 32690 ;;		None
 32691 ;; Return value:  Size  Location     Type
 32692 ;;                  1    wreg      void 
 32693 ;; Registers used:
 32694 ;;		wreg, status,2, status,0, pclath, cstack
 32695 ;; Tracked objects:
 32696 ;;		On entry : 0/0
 32697 ;;		On exit  : 0/0
 32698 ;;		Unchanged: 0/0
 32699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32704 ;;Total ram usage:        0 bytes
 32705 ;; Hardware stack levels used:    1
 32706 ;; Hardware stack levels required when called:    5
 32707 ;; This function calls:
 32708 ;;		_TMR0_SetInterruptHandler
 32709 ;;		_TMR0_StartTimer
 32710 ;; This function is called by:
 32711 ;;		_SYSTEM_Initialize
 32712 ;;		_nullifyBadge_platformInit
 32713 ;; This function uses a non-reentrant model
 32714 ;;
 32715                           
 32716                           
 32717                           ;psect for function _TMR0_Initialize
 32718  34BA                     _TMR0_Initialize:	
 32719                           
 32720                           ;tmr0.c: 70: T0CON0 = 0x10;
 32721                           
 32722                           ;incstack = 0
 32723                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32724  34BA  3010               	movlw	16
 32725  34BB  0020               	movlb	0	; select bank0
 32726  34BC  0097               	movwf	23	;volatile
 32727                           
 32728                           ;tmr0.c: 73: T0CON1 = 0x4D;
 32729  34BD  304D               	movlw	77
 32730  34BE  0098               	movwf	24	;volatile
 32731                           
 32732                           ;tmr0.c: 76: TMR0H = 0xFF;
 32733  34BF  30FF               	movlw	255
 32734  34C0  0096               	movwf	22	;volatile
 32735                           
 32736                           ;tmr0.c: 79: TMR0L = 0xFF;
 32737  34C1  30FF               	movlw	255
 32738  34C2  0095               	movwf	21	;volatile
 32739                           
 32740                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 32741  34C3  0816               	movf	22,w	;volatile
 32742  34C4  0021               	movlb	1	; select bank1
 32743  34C5  00C1               	movwf	(_timer0ReloadVal16bit+1)^(0+128)	;volatile
 32744  34C6  0020               	movlb	0	; select bank0
 32745  34C7  0815               	movf	21,w	;volatile
 32746  34C8  0021               	movlb	1	; select bank1
 32747  34C9  00C0               	movwf	_timer0ReloadVal16bit^(0+128)	;volatile
 32748                           
 32749                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
 32750  34CA  0020               	movlb	0	; select bank0
 32751  34CB  1290               	bcf	16,5	;volatile
 32752                           
 32753                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
 32754  34CC  0021               	movlb	1	; select bank1
 32755  34CD  1690               	bsf	16,5	;volatile
 32756                           
 32757                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 32758  34CE  30FF               	movlw	low _TMR0_DefaultInterruptHandler
 32759  34CF  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 32760  34D0  3007               	movlw	high _TMR0_DefaultInterruptHandler
 32761  34D1  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 32762  34D2  31B2  2222  31B4   	fcall	_TMR0_SetInterruptHandler
 32763                           
 32764                           ;tmr0.c: 94: TMR0_StartTimer();
 32765  34D5  31B2  2212         	fcall	_TMR0_StartTimer
 32766  34D7  0008               	return
 32767  34D8                     __end_of_TMR0_Initialize:	
 32768                           
 32769                           	psect	text90
 32770  3212                     __ptext90:	
 32771 ;; *************** function _TMR0_StartTimer *****************
 32772 ;; Defined at:
 32773 ;;		line 97 in file "mcc_generated_files/tmr0.c"
 32774 ;; Parameters:    Size  Location     Type
 32775 ;;		None
 32776 ;; Auto vars:     Size  Location     Type
 32777 ;;		None
 32778 ;; Return value:  Size  Location     Type
 32779 ;;                  1    wreg      void 
 32780 ;; Registers used:
 32781 ;;		None
 32782 ;; Tracked objects:
 32783 ;;		On entry : 0/0
 32784 ;;		On exit  : 0/0
 32785 ;;		Unchanged: 0/0
 32786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32791 ;;Total ram usage:        0 bytes
 32792 ;; Hardware stack levels used:    1
 32793 ;; Hardware stack levels required when called:    4
 32794 ;; This function calls:
 32795 ;;		Nothing
 32796 ;; This function is called by:
 32797 ;;		_TMR0_Initialize
 32798 ;; This function uses a non-reentrant model
 32799 ;;
 32800                           
 32801                           
 32802                           ;psect for function _TMR0_StartTimer
 32803  3212                     _TMR0_StartTimer:	
 32804                           
 32805                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
 32806                           
 32807                           ;incstack = 0
 32808                           ; Regs used in _TMR0_StartTimer: []
 32809  3212  0020               	movlb	0	; select bank0
 32810  3213  1797               	bsf	23,7	;volatile
 32811  3214  0008               	return
 32812  3215                     __end_of_TMR0_StartTimer:	
 32813                           
 32814                           	psect	text91
 32815  3222                     __ptext91:	
 32816 ;; *************** function _TMR0_SetInterruptHandler *****************
 32817 ;; Defined at:
 32818 ;;		line 161 in file "mcc_generated_files/tmr0.c"
 32819 ;; Parameters:    Size  Location     Type
 32820 ;;  InterruptHan    2    1[COMMON] PTR void 
 32821 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 32822 ;; Auto vars:     Size  Location     Type
 32823 ;;		None
 32824 ;; Return value:  Size  Location     Type
 32825 ;;                  1    wreg      void 
 32826 ;; Registers used:
 32827 ;;		wreg
 32828 ;; Tracked objects:
 32829 ;;		On entry : 0/0
 32830 ;;		On exit  : 0/0
 32831 ;;		Unchanged: 0/0
 32832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32833 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32836 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32837 ;;Total ram usage:        2 bytes
 32838 ;; Hardware stack levels used:    1
 32839 ;; Hardware stack levels required when called:    4
 32840 ;; This function calls:
 32841 ;;		Nothing
 32842 ;; This function is called by:
 32843 ;;		_TMR0_Initialize
 32844 ;; This function uses a non-reentrant model
 32845 ;;
 32846                           
 32847                           
 32848                           ;psect for function _TMR0_SetInterruptHandler
 32849  3222                     _TMR0_SetInterruptHandler:	
 32850                           
 32851                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
 32852                           
 32853                           ;incstack = 0
 32854                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 32855  3222  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 32856  3223  0021               	movlb	1	; select bank1
 32857  3224  00BF               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 32858  3225  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 32859  3226  00BE               	movwf	_TMR0_InterruptHandler^(0+128)
 32860  3227  0008               	return
 32861  3228                     __end_of_TMR0_SetInterruptHandler:	
 32862                           
 32863                           	psect	text92
 32864  3247                     __ptext92:	
 32865 ;; *************** function _SPI1_Initialize *****************
 32866 ;; Defined at:
 32867 ;;		line 63 in file "mcc_generated_files/spi1.c"
 32868 ;; Parameters:    Size  Location     Type
 32869 ;;		None
 32870 ;; Auto vars:     Size  Location     Type
 32871 ;;		None
 32872 ;; Return value:  Size  Location     Type
 32873 ;;                  1    wreg      void 
 32874 ;; Registers used:
 32875 ;;		wreg
 32876 ;; Tracked objects:
 32877 ;;		On entry : 0/0
 32878 ;;		On exit  : 0/0
 32879 ;;		Unchanged: 0/0
 32880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32885 ;;Total ram usage:        0 bytes
 32886 ;; Hardware stack levels used:    1
 32887 ;; Hardware stack levels required when called:    4
 32888 ;; This function calls:
 32889 ;;		Nothing
 32890 ;; This function is called by:
 32891 ;;		_SYSTEM_Initialize
 32892 ;;		_nullifyBadge_platformInit
 32893 ;; This function uses a non-reentrant model
 32894 ;;
 32895                           
 32896                           
 32897                           ;psect for function _SPI1_Initialize
 32898  3247                     _SPI1_Initialize:	
 32899                           
 32900                           ;spi1.c: 68: SSP1STAT = 0x40;
 32901                           
 32902                           ;incstack = 0
 32903                           ; Regs used in _SPI1_Initialize: [wreg]
 32904  3247  3040               	movlw	64
 32905  3248  0024               	movlb	4	; select bank4
 32906  3249  0094               	movwf	20	;volatile
 32907                           
 32908                           ;spi1.c: 71: SSP1CON1 = 0x22;
 32909  324A  3022               	movlw	34
 32910  324B  0095               	movwf	21	;volatile
 32911                           
 32912                           ;spi1.c: 74: SSP1ADD = 0x01;
 32913  324C  3001               	movlw	1
 32914  324D  0092               	movwf	18	;volatile
 32915  324E  0008               	return
 32916  324F                     __end_of_SPI1_Initialize:	
 32917                           
 32918                           	psect	text93
 32919  32CA                     __ptext93:	
 32920 ;; *************** function _PWM6_Initialize *****************
 32921 ;; Defined at:
 32922 ;;		line 57 in file "mcc_generated_files/pwm6.c"
 32923 ;; Parameters:    Size  Location     Type
 32924 ;;		None
 32925 ;; Auto vars:     Size  Location     Type
 32926 ;;		None
 32927 ;; Return value:  Size  Location     Type
 32928 ;;                  1    wreg      void 
 32929 ;; Registers used:
 32930 ;;		wreg, status,2, status,0
 32931 ;; Tracked objects:
 32932 ;;		On entry : 0/0
 32933 ;;		On exit  : 0/0
 32934 ;;		Unchanged: 0/0
 32935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32940 ;;Total ram usage:        0 bytes
 32941 ;; Hardware stack levels used:    1
 32942 ;; Hardware stack levels required when called:    4
 32943 ;; This function calls:
 32944 ;;		Nothing
 32945 ;; This function is called by:
 32946 ;;		_SYSTEM_Initialize
 32947 ;;		_nullifyBadge_platformInit
 32948 ;; This function uses a non-reentrant model
 32949 ;;
 32950                           
 32951                           
 32952                           ;psect for function _PWM6_Initialize
 32953  32CA                     _PWM6_Initialize:	
 32954                           
 32955                           ;pwm6.c: 61: PWM6CON = 0x90;
 32956                           
 32957                           ;incstack = 0
 32958                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 32959  32CA  3090               	movlw	144
 32960  32CB  002C               	movlb	12	; select bank12
 32961  32CC  009C               	movwf	28	;volatile
 32962                           
 32963                           ;pwm6.c: 64: PWM6DCH = 0x7F;
 32964  32CD  307F               	movlw	127
 32965  32CE  009B               	movwf	27	;volatile
 32966                           
 32967                           ;pwm6.c: 67: PWM6DCL = 0xC0;
 32968  32CF  30C0               	movlw	192
 32969  32D0  009A               	movwf	26	;volatile
 32970                           
 32971                           ;pwm6.c: 71: PWMTMRSbits.P6TSEL = 0x2;
 32972  32D1  081F               	movf	31,w	;volatile
 32973  32D2  39F3               	andlw	-13
 32974  32D3  3808               	iorlw	8
 32975  32D4  009F               	movwf	31	;volatile
 32976  32D5  0008               	return
 32977  32D6                     __end_of_PWM6_Initialize:	
 32978                           
 32979                           	psect	text94
 32980  32BE                     __ptext94:	
 32981 ;; *************** function _PWM5_Initialize *****************
 32982 ;; Defined at:
 32983 ;;		line 57 in file "mcc_generated_files/pwm5.c"
 32984 ;; Parameters:    Size  Location     Type
 32985 ;;		None
 32986 ;; Auto vars:     Size  Location     Type
 32987 ;;		None
 32988 ;; Return value:  Size  Location     Type
 32989 ;;                  1    wreg      void 
 32990 ;; Registers used:
 32991 ;;		wreg, status,2, status,0
 32992 ;; Tracked objects:
 32993 ;;		On entry : 0/0
 32994 ;;		On exit  : 0/0
 32995 ;;		Unchanged: 0/0
 32996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33001 ;;Total ram usage:        0 bytes
 33002 ;; Hardware stack levels used:    1
 33003 ;; Hardware stack levels required when called:    4
 33004 ;; This function calls:
 33005 ;;		Nothing
 33006 ;; This function is called by:
 33007 ;;		_SYSTEM_Initialize
 33008 ;;		_nullifyBadge_platformInit
 33009 ;; This function uses a non-reentrant model
 33010 ;;
 33011                           
 33012                           
 33013                           ;psect for function _PWM5_Initialize
 33014  32BE                     _PWM5_Initialize:	
 33015                           
 33016                           ;pwm5.c: 61: PWM5CON = 0x90;
 33017                           
 33018                           ;incstack = 0
 33019                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
 33020  32BE  3090               	movlw	144
 33021  32BF  002C               	movlb	12	; select bank12
 33022  32C0  0099               	movwf	25	;volatile
 33023                           
 33024                           ;pwm5.c: 64: PWM5DCH = 0x7F;
 33025  32C1  307F               	movlw	127
 33026  32C2  0098               	movwf	24	;volatile
 33027                           
 33028                           ;pwm5.c: 67: PWM5DCL = 0xC0;
 33029  32C3  30C0               	movlw	192
 33030  32C4  0097               	movwf	23	;volatile
 33031                           
 33032                           ;pwm5.c: 71: PWMTMRSbits.P5TSEL = 0x2;
 33033  32C5  081F               	movf	31,w	;volatile
 33034  32C6  39FC               	andlw	-4
 33035  32C7  3802               	iorlw	2
 33036  32C8  009F               	movwf	31	;volatile
 33037  32C9  0008               	return
 33038  32CA                     __end_of_PWM5_Initialize:	
 33039                           
 33040                           	psect	text95
 33041  329D                     __ptext95:	
 33042 ;; *************** function _PWM2_Initialize *****************
 33043 ;; Defined at:
 33044 ;;		line 63 in file "mcc_generated_files/pwm2.c"
 33045 ;; Parameters:    Size  Location     Type
 33046 ;;		None
 33047 ;; Auto vars:     Size  Location     Type
 33048 ;;		None
 33049 ;; Return value:  Size  Location     Type
 33050 ;;                  1    wreg      void 
 33051 ;; Registers used:
 33052 ;;		wreg, status,2, status,0
 33053 ;; Tracked objects:
 33054 ;;		On entry : 0/0
 33055 ;;		On exit  : 0/0
 33056 ;;		Unchanged: 0/0
 33057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33062 ;;Total ram usage:        0 bytes
 33063 ;; Hardware stack levels used:    1
 33064 ;; Hardware stack levels required when called:    4
 33065 ;; This function calls:
 33066 ;;		Nothing
 33067 ;; This function is called by:
 33068 ;;		_SYSTEM_Initialize
 33069 ;;		_nullifyBadge_platformInit
 33070 ;; This function uses a non-reentrant model
 33071 ;;
 33072                           
 33073                           
 33074                           ;psect for function _PWM2_Initialize
 33075  329D                     _PWM2_Initialize:	
 33076                           
 33077                           ;pwm2.c: 68: CCP2CON = 0x8F;
 33078                           
 33079                           ;incstack = 0
 33080                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
 33081  329D  308F               	movlw	143
 33082  329E  0025               	movlb	5	; select bank5
 33083  329F  0097               	movwf	23	;volatile
 33084                           
 33085                           ;pwm2.c: 71: CCPR2H = 0x00;
 33086  32A0  0196               	clrf	22	;volatile
 33087                           
 33088                           ;pwm2.c: 74: CCPR2L = 0xE0;
 33089  32A1  30E0               	movlw	224
 33090  32A2  0095               	movwf	21	;volatile
 33091                           
 33092                           ;pwm2.c: 77: CCPTMRSbits.C2TSEL = 0x1;
 33093  32A3  081F               	movf	31,w	;volatile
 33094  32A4  39F3               	andlw	-13
 33095  32A5  3804               	iorlw	4
 33096  32A6  009F               	movwf	31	;volatile
 33097  32A7  0008               	return
 33098  32A8                     __end_of_PWM2_Initialize:	
 33099                           
 33100                           	psect	text96
 33101  3292                     __ptext96:	
 33102 ;; *************** function _PWM1_Initialize *****************
 33103 ;; Defined at:
 33104 ;;		line 63 in file "mcc_generated_files/pwm1.c"
 33105 ;; Parameters:    Size  Location     Type
 33106 ;;		None
 33107 ;; Auto vars:     Size  Location     Type
 33108 ;;		None
 33109 ;; Return value:  Size  Location     Type
 33110 ;;                  1    wreg      void 
 33111 ;; Registers used:
 33112 ;;		wreg, status,2, status,0
 33113 ;; Tracked objects:
 33114 ;;		On entry : 0/0
 33115 ;;		On exit  : 0/0
 33116 ;;		Unchanged: 0/0
 33117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33122 ;;Total ram usage:        0 bytes
 33123 ;; Hardware stack levels used:    1
 33124 ;; Hardware stack levels required when called:    4
 33125 ;; This function calls:
 33126 ;;		Nothing
 33127 ;; This function is called by:
 33128 ;;		_SYSTEM_Initialize
 33129 ;;		_nullifyBadge_platformInit
 33130 ;; This function uses a non-reentrant model
 33131 ;;
 33132                           
 33133                           
 33134                           ;psect for function _PWM1_Initialize
 33135  3292                     _PWM1_Initialize:	
 33136                           
 33137                           ;pwm1.c: 68: CCP1CON = 0x8F;
 33138                           
 33139                           ;incstack = 0
 33140                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 33141  3292  308F               	movlw	143
 33142  3293  0025               	movlb	5	; select bank5
 33143  3294  0093               	movwf	19	;volatile
 33144                           
 33145                           ;pwm1.c: 71: CCPR1H = 0x00;
 33146  3295  0192               	clrf	18	;volatile
 33147                           
 33148                           ;pwm1.c: 74: CCPR1L = 0x95;
 33149  3296  3095               	movlw	149
 33150  3297  0091               	movwf	17	;volatile
 33151                           
 33152                           ;pwm1.c: 77: CCPTMRSbits.C1TSEL = 0x1;
 33153  3298  081F               	movf	31,w	;volatile
 33154  3299  39FC               	andlw	-4
 33155  329A  3801               	iorlw	1
 33156  329B  009F               	movwf	31	;volatile
 33157  329C  0008               	return
 33158  329D                     __end_of_PWM1_Initialize:	
 33159                           
 33160                           	psect	text97
 33161  2C9B                     __ptext97:	
 33162 ;; *************** function _PIN_MANAGER_Initialize *****************
 33163 ;; Defined at:
 33164 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 33165 ;; Parameters:    Size  Location     Type
 33166 ;;		None
 33167 ;; Auto vars:     Size  Location     Type
 33168 ;;  state           1    1[COMMON] unsigned char 
 33169 ;; Return value:  Size  Location     Type
 33170 ;;                  1    wreg      void 
 33171 ;; Registers used:
 33172 ;;		wreg, status,2, status,0
 33173 ;; Tracked objects:
 33174 ;;		On entry : 0/0
 33175 ;;		On exit  : 0/0
 33176 ;;		Unchanged: 0/0
 33177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33181 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33182 ;;Total ram usage:        1 bytes
 33183 ;; Hardware stack levels used:    1
 33184 ;; Hardware stack levels required when called:    4
 33185 ;; This function calls:
 33186 ;;		Nothing
 33187 ;; This function is called by:
 33188 ;;		_SYSTEM_Initialize
 33189 ;;		_nullifyBadge_platformInit
 33190 ;; This function uses a non-reentrant model
 33191 ;;
 33192                           
 33193                           
 33194                           ;psect for function _PIN_MANAGER_Initialize
 33195  2C9B                     _PIN_MANAGER_Initialize:	
 33196                           
 33197                           ;pin_manager.c: 56: LATA = 0x00;
 33198                           
 33199                           ;incstack = 0
 33200                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 33201  2C9B  0022               	movlb	2	; select bank2
 33202  2C9C  018C               	clrf	12	;volatile
 33203                           
 33204                           ;pin_manager.c: 57: LATB = 0x80;
 33205  2C9D  3080               	movlw	128
 33206  2C9E  008D               	movwf	13	;volatile
 33207                           
 33208                           ;pin_manager.c: 58: LATC = 0x1A;
 33209  2C9F  301A               	movlw	26
 33210  2CA0  008E               	movwf	14	;volatile
 33211                           
 33212                           ;pin_manager.c: 63: TRISA = 0x37;
 33213  2CA1  3037               	movlw	55
 33214  2CA2  0021               	movlb	1	; select bank1
 33215  2CA3  008C               	movwf	12	;volatile
 33216                           
 33217                           ;pin_manager.c: 64: TRISB = 0x30;
 33218  2CA4  3030               	movlw	48
 33219  2CA5  008D               	movwf	13	;volatile
 33220                           
 33221                           ;pin_manager.c: 65: TRISC = 0x60;
 33222  2CA6  3060               	movlw	96
 33223  2CA7  008E               	movwf	14	;volatile
 33224                           
 33225                           ;pin_manager.c: 70: ANSELC = 0x40;
 33226  2CA8  3040               	movlw	64
 33227  2CA9  0023               	movlb	3	; select bank3
 33228  2CAA  008E               	movwf	14	;volatile
 33229                           
 33230                           ;pin_manager.c: 71: ANSELB = 0x00;
 33231  2CAB  018D               	clrf	13	;volatile
 33232                           
 33233                           ;pin_manager.c: 72: ANSELA = 0x03;
 33234  2CAC  3003               	movlw	3
 33235  2CAD  008C               	movwf	12	;volatile
 33236                           
 33237                           ;pin_manager.c: 77: WPUB = 0x00;
 33238  2CAE  0024               	movlb	4	; select bank4
 33239  2CAF  018D               	clrf	13	;volatile
 33240                           
 33241                           ;pin_manager.c: 78: WPUA = 0x00;
 33242  2CB0  018C               	clrf	12	;volatile
 33243                           
 33244                           ;pin_manager.c: 79: WPUC = 0x00;
 33245  2CB1  018E               	clrf	14	;volatile
 33246                           
 33247                           ;pin_manager.c: 84: ODCONA = 0x00;
 33248  2CB2  0025               	movlb	5	; select bank5
 33249  2CB3  018C               	clrf	12	;volatile
 33250                           
 33251                           ;pin_manager.c: 85: ODCONB = 0x00;
 33252  2CB4  018D               	clrf	13	;volatile
 33253                           
 33254                           ;pin_manager.c: 86: ODCONC = 0x00;
 33255  2CB5  018E               	clrf	14	;volatile
 33256                           
 33257                           ;pin_manager.c: 93: bool state = GIE;
 33258  2CB6  3000               	movlw	0
 33259  2CB7  1B8B               	btfsc	11,7	;volatile
 33260  2CB8  3001               	movlw	1
 33261  2CB9  00F1               	movwf	PIN_MANAGER_Initialize@state
 33262                           
 33263                           ;pin_manager.c: 94: GIE = 0;
 33264  2CBA  138B               	bcf	11,7	;volatile
 33265                           
 33266                           ;pin_manager.c: 95: PPSLOCK = 0x55;
 33267  2CBB  3055               	movlw	85
 33268  2CBC  003C               	movlb	28	; select bank28
 33269  2CBD  008F               	movwf	15	;volatile
 33270                           
 33271                           ;pin_manager.c: 96: PPSLOCK = 0xAA;
 33272  2CBE  30AA               	movlw	170
 33273  2CBF  008F               	movwf	15	;volatile
 33274                           
 33275                           ;pin_manager.c: 97: PPSLOCKbits.PPSLOCKED = 0x00;
 33276  2CC0  100F               	bcf	15,0	;volatile
 33277                           
 33278                           ;pin_manager.c: 99: RC1PPSbits.RC1PPS = 0x0D;
 33279  2CC1  003D               	movlb	29	; select bank29
 33280  2CC2  0821               	movf	33,w	;volatile
 33281  2CC3  39E0               	andlw	-32
 33282  2CC4  380D               	iorlw	13
 33283  2CC5  00A1               	movwf	33	;volatile
 33284                           
 33285                           ;pin_manager.c: 100: SSP1DATPPSbits.SSP1DATPPS = 0x0C;
 33286  2CC6  003C               	movlb	28	; select bank28
 33287  2CC7  0821               	movf	33,w	;volatile
 33288  2CC8  39E0               	andlw	-32
 33289  2CC9  380C               	iorlw	12
 33290  2CCA  00A1               	movwf	33	;volatile
 33291                           
 33292                           ;pin_manager.c: 101: SSP1CLKPPSbits.SSP1CLKPPS = 0x0E;
 33293  2CCB  0820               	movf	32,w	;volatile
 33294  2CCC  39E0               	andlw	-32
 33295  2CCD  380E               	iorlw	14
 33296  2CCE  00A0               	movwf	32	;volatile
 33297                           
 33298                           ;pin_manager.c: 102: RC4PPSbits.RC4PPS = 0x02;
 33299  2CCF  003D               	movlb	29	; select bank29
 33300  2CD0  0824               	movf	36,w	;volatile
 33301  2CD1  39E0               	andlw	-32
 33302  2CD2  3802               	iorlw	2
 33303  2CD3  00A4               	movwf	36	;volatile
 33304                           
 33305                           ;pin_manager.c: 103: RC0PPSbits.RC0PPS = 0x0C;
 33306  2CD4  0820               	movf	32,w	;volatile
 33307  2CD5  39E0               	andlw	-32
 33308  2CD6  380C               	iorlw	12
 33309  2CD7  00A0               	movwf	32	;volatile
 33310                           
 33311                           ;pin_manager.c: 104: RC3PPSbits.RC3PPS = 0x03;
 33312  2CD8  0823               	movf	35,w	;volatile
 33313  2CD9  39E0               	andlw	-32
 33314  2CDA  3803               	iorlw	3
 33315  2CDB  00A3               	movwf	35	;volatile
 33316                           
 33317                           ;pin_manager.c: 105: RB6PPSbits.RB6PPS = 0x18;
 33318  2CDC  081E               	movf	30,w	;volatile
 33319  2CDD  39E0               	andlw	-32
 33320  2CDE  3818               	iorlw	24
 33321  2CDF  009E               	movwf	30	;volatile
 33322                           
 33323                           ;pin_manager.c: 106: RC2PPSbits.RC2PPS = 0x19;
 33324  2CE0  0822               	movf	34,w	;volatile
 33325  2CE1  39E0               	andlw	-32
 33326  2CE2  3819               	iorlw	25
 33327  2CE3  00A2               	movwf	34	;volatile
 33328                           
 33329                           ;pin_manager.c: 108: PPSLOCK = 0x55;
 33330  2CE4  3055               	movlw	85
 33331  2CE5  003C               	movlb	28	; select bank28
 33332  2CE6  008F               	movwf	15	;volatile
 33333                           
 33334                           ;pin_manager.c: 109: PPSLOCK = 0xAA;
 33335  2CE7  30AA               	movlw	170
 33336  2CE8  008F               	movwf	15	;volatile
 33337                           
 33338                           ;pin_manager.c: 110: PPSLOCKbits.PPSLOCKED = 0x01;
 33339  2CE9  140F               	bsf	15,0	;volatile
 33340                           
 33341                           ;pin_manager.c: 112: GIE = state;
 33342  2CEA  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 33343  2CEB  2CEE               	goto	u3380
 33344  2CEC  178B               	bsf	11,7	;volatile
 33345  2CED  0008               	return
 33346  2CEE                     u3380:	
 33347  2CEE  138B               	bcf	11,7	;volatile
 33348  2CEF  0008               	return
 33349  2CF0                     __end_of_PIN_MANAGER_Initialize:	
 33350                           
 33351                           	psect	text98
 33352  3269                     __ptext98:	
 33353 ;; *************** function _OSCILLATOR_Initialize *****************
 33354 ;; Defined at:
 33355 ;;		line 92 in file "mcc_generated_files/mcc.c"
 33356 ;; Parameters:    Size  Location     Type
 33357 ;;		None
 33358 ;; Auto vars:     Size  Location     Type
 33359 ;;		None
 33360 ;; Return value:  Size  Location     Type
 33361 ;;                  1    wreg      void 
 33362 ;; Registers used:
 33363 ;;		wreg, status,2
 33364 ;; Tracked objects:
 33365 ;;		On entry : 0/0
 33366 ;;		On exit  : 0/0
 33367 ;;		Unchanged: 0/0
 33368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33373 ;;Total ram usage:        0 bytes
 33374 ;; Hardware stack levels used:    1
 33375 ;; Hardware stack levels required when called:    4
 33376 ;; This function calls:
 33377 ;;		Nothing
 33378 ;; This function is called by:
 33379 ;;		_SYSTEM_Initialize
 33380 ;;		_nullifyBadge_platformInit
 33381 ;; This function uses a non-reentrant model
 33382 ;;
 33383                           
 33384                           
 33385                           ;psect for function _OSCILLATOR_Initialize
 33386  3269                     _OSCILLATOR_Initialize:	
 33387                           
 33388                           ;mcc.c: 95: OSCCON1 = 0x00;
 33389                           
 33390                           ;incstack = 0
 33391                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 33392  3269  0032               	movlb	18	; select bank18
 33393  326A  0199               	clrf	25	;volatile
 33394                           
 33395                           ;mcc.c: 97: OSCCON3 = 0x00;
 33396  326B  019B               	clrf	27	;volatile
 33397                           
 33398                           ;mcc.c: 99: OSCEN = 0x00;
 33399  326C  019D               	clrf	29	;volatile
 33400                           
 33401                           ;mcc.c: 101: OSCFRQ = 0x06;
 33402  326D  3006               	movlw	6
 33403  326E  009F               	movwf	31	;volatile
 33404                           
 33405                           ;mcc.c: 103: OSCTUNE = 0x00;
 33406  326F  019E               	clrf	30	;volatile
 33407  3270                     l208:	
 33408                           ;mcc.c: 106: {
 33409                           
 33410                           ;mcc.c: 105: while(PLLR == 0)
 33411                           
 33412  3270  181C               	btfsc	28,0	;volatile
 33413  3271  0008               	return
 33414  3272  2A70               	goto	l208
 33415  3273                     __end_of_OSCILLATOR_Initialize:	
 33416                           
 33417                           	psect	text99
 33418  3405                     __ptext99:	
 33419 ;; *************** function _PWM6_LoadDutyValue *****************
 33420 ;; Defined at:
 33421 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 33422 ;; Parameters:    Size  Location     Type
 33423 ;;  dutyValue       2    1[COMMON] unsigned int 
 33424 ;; Auto vars:     Size  Location     Type
 33425 ;;		None
 33426 ;; Return value:  Size  Location     Type
 33427 ;;                  1    wreg      void 
 33428 ;; Registers used:
 33429 ;;		wreg, status,2, status,0
 33430 ;; Tracked objects:
 33431 ;;		On entry : 0/0
 33432 ;;		On exit  : 0/0
 33433 ;;		Unchanged: 0/0
 33434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33435 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33437 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33438 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33439 ;;Total ram usage:        4 bytes
 33440 ;; Hardware stack levels used:    1
 33441 ;; Hardware stack levels required when called:    4
 33442 ;; This function calls:
 33443 ;;		Nothing
 33444 ;; This function is called by:
 33445 ;;		_nullifyBadge_platformInit
 33446 ;;		_nullifyBadge_userLedsSetBrightness
 33447 ;; This function uses a non-reentrant model
 33448 ;;
 33449                           
 33450                           
 33451                           ;psect for function _PWM6_LoadDutyValue
 33452  3405                     _PWM6_LoadDutyValue:	
 33453                           
 33454                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 33455                           
 33456                           ;incstack = 0
 33457                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 33458  3405  0872               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 33459  3406  00F4               	movwf	??_PWM6_LoadDutyValue+1
 33460  3407  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 33461  3408  00F3               	movwf	??_PWM6_LoadDutyValue
 33462  3409  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 33463  340A  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 33464  340B  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 33465  340C  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 33466  340D  0873               	movf	??_PWM6_LoadDutyValue,w
 33467  340E  002C               	movlb	12	; select bank12
 33468  340F  009B               	movwf	27	;volatile
 33469                           
 33470                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 33471  3410  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 33472  3411  3903               	andlw	3
 33473  3412  00F3               	movwf	??_PWM6_LoadDutyValue
 33474  3413  3005               	movlw	5
 33475  3414                     u4295:	
 33476  3414  35F3               	lslf	??_PWM6_LoadDutyValue,f
 33477  3415  3EFF               	addlw	-1
 33478  3416  1D03               	skipz
 33479  3417  2C14               	goto	u4295
 33480  3418  3573               	lslf	??_PWM6_LoadDutyValue,w
 33481  3419  009A               	movwf	26	;volatile
 33482  341A  0008               	return
 33483  341B                     __end_of_PWM6_LoadDutyValue:	
 33484                           
 33485                           	psect	text100
 33486  33EF                     __ptext100:	
 33487 ;; *************** function _PWM5_LoadDutyValue *****************
 33488 ;; Defined at:
 33489 ;;		line 74 in file "mcc_generated_files/pwm5.c"
 33490 ;; Parameters:    Size  Location     Type
 33491 ;;  dutyValue       2    1[COMMON] unsigned int 
 33492 ;; Auto vars:     Size  Location     Type
 33493 ;;		None
 33494 ;; Return value:  Size  Location     Type
 33495 ;;                  1    wreg      void 
 33496 ;; Registers used:
 33497 ;;		wreg, status,2, status,0
 33498 ;; Tracked objects:
 33499 ;;		On entry : 0/0
 33500 ;;		On exit  : 0/0
 33501 ;;		Unchanged: 0/0
 33502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33503 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33505 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33506 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33507 ;;Total ram usage:        4 bytes
 33508 ;; Hardware stack levels used:    1
 33509 ;; Hardware stack levels required when called:    4
 33510 ;; This function calls:
 33511 ;;		Nothing
 33512 ;; This function is called by:
 33513 ;;		_nullifyBadge_platformInit
 33514 ;;		_fadeDisplay_Init
 33515 ;;		_nullifyBadge_segDisplaySetBrightness
 33516 ;; This function uses a non-reentrant model
 33517 ;;
 33518                           
 33519                           
 33520                           ;psect for function _PWM5_LoadDutyValue
 33521  33EF                     _PWM5_LoadDutyValue:	
 33522                           
 33523                           ;pwm5.c: 77: PWM5DCH = (dutyValue & 0x03FC)>>2;
 33524                           
 33525                           ;incstack = 0
 33526                           ; Regs used in _PWM5_LoadDutyValue: [wreg+status,2+status,0]
 33527  33EF  0872               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 33528  33F0  00F4               	movwf	??_PWM5_LoadDutyValue+1
 33529  33F1  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 33530  33F2  00F3               	movwf	??_PWM5_LoadDutyValue
 33531  33F3  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 33532  33F4  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 33533  33F5  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 33534  33F6  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 33535  33F7  0873               	movf	??_PWM5_LoadDutyValue,w
 33536  33F8  002C               	movlb	12	; select bank12
 33537  33F9  0098               	movwf	24	;volatile
 33538                           
 33539                           ;pwm5.c: 80: PWM5DCL = (dutyValue & 0x0003)<<6;
 33540  33FA  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 33541  33FB  3903               	andlw	3
 33542  33FC  00F3               	movwf	??_PWM5_LoadDutyValue
 33543  33FD  3005               	movlw	5
 33544  33FE                     u4285:	
 33545  33FE  35F3               	lslf	??_PWM5_LoadDutyValue,f
 33546  33FF  3EFF               	addlw	-1
 33547  3400  1D03               	skipz
 33548  3401  2BFE               	goto	u4285
 33549  3402  3573               	lslf	??_PWM5_LoadDutyValue,w
 33550  3403  0097               	movwf	23	;volatile
 33551  3404  0008               	return
 33552  3405                     __end_of_PWM5_LoadDutyValue:	
 33553                           
 33554                           	psect	text101
 33555  33D9                     __ptext101:	
 33556 ;; *************** function _PWM2_LoadDutyValue *****************
 33557 ;; Defined at:
 33558 ;;		line 80 in file "mcc_generated_files/pwm2.c"
 33559 ;; Parameters:    Size  Location     Type
 33560 ;;  dutyValue       2    1[COMMON] unsigned int 
 33561 ;; Auto vars:     Size  Location     Type
 33562 ;;		None
 33563 ;; Return value:  Size  Location     Type
 33564 ;;                  1    wreg      void 
 33565 ;; Registers used:
 33566 ;;		wreg, status,2
 33567 ;; Tracked objects:
 33568 ;;		On entry : 0/0
 33569 ;;		On exit  : 0/0
 33570 ;;		Unchanged: 0/0
 33571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33575 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33576 ;;Total ram usage:        2 bytes
 33577 ;; Hardware stack levels used:    1
 33578 ;; Hardware stack levels required when called:    4
 33579 ;; This function calls:
 33580 ;;		Nothing
 33581 ;; This function is called by:
 33582 ;;		_nullifyBadge_platformInit
 33583 ;; This function uses a non-reentrant model
 33584 ;;
 33585                           
 33586                           
 33587                           ;psect for function _PWM2_LoadDutyValue
 33588  33D9                     _PWM2_LoadDutyValue:	
 33589                           
 33590                           ;pwm2.c: 82: dutyValue &= 0x03FF;
 33591                           
 33592                           ;incstack = 0
 33593                           ; Regs used in _PWM2_LoadDutyValue: [wreg+status,2]
 33594  33D9  30FF               	movlw	255
 33595  33DA  05F1               	andwf	PWM2_LoadDutyValue@dutyValue,f
 33596  33DB  3003               	movlw	3
 33597  33DC  05F2               	andwf	PWM2_LoadDutyValue@dutyValue+1,f
 33598                           
 33599                           ;pwm2.c: 85: if(CCP2CONbits.CCP2FMT)
 33600  33DD  0025               	movlb	5	; select bank5
 33601  33DE  1E17               	btfss	23,4	;volatile
 33602  33DF  2BEA               	goto	l7509
 33603                           
 33604                           ;pwm2.c: 86: {
 33605                           ;pwm2.c: 87: dutyValue <<= 6;
 33606  33E0  3006               	movlw	6
 33607  33E1                     u4335:	
 33608  33E1  35F1               	lslf	PWM2_LoadDutyValue@dutyValue,f
 33609  33E2  0DF2               	rlf	PWM2_LoadDutyValue@dutyValue+1,f
 33610  33E3  0B89               	decfsz	9,f
 33611  33E4  2BE1               	goto	u4335
 33612                           
 33613                           ;pwm2.c: 88: CCPR2H = dutyValue >> 8;
 33614  33E5  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 33615  33E6  0096               	movwf	22	;volatile
 33616                           
 33617                           ;pwm2.c: 89: CCPR2L = dutyValue;
 33618  33E7  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 33619  33E8  0095               	movwf	21	;volatile
 33620                           
 33621                           ;pwm2.c: 90: }
 33622  33E9  0008               	return
 33623  33EA                     l7509:	
 33624                           
 33625                           ;pwm2.c: 91: else
 33626                           ;pwm2.c: 92: {
 33627                           ;pwm2.c: 93: CCPR2H = dutyValue >> 8;
 33628  33EA  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 33629  33EB  0096               	movwf	22	;volatile
 33630                           
 33631                           ;pwm2.c: 94: CCPR2L = dutyValue;
 33632  33EC  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 33633  33ED  0095               	movwf	21	;volatile
 33634  33EE  0008               	return
 33635  33EF                     __end_of_PWM2_LoadDutyValue:	
 33636                           
 33637                           	psect	text102
 33638  33C3                     __ptext102:	
 33639 ;; *************** function _PWM1_LoadDutyValue *****************
 33640 ;; Defined at:
 33641 ;;		line 80 in file "mcc_generated_files/pwm1.c"
 33642 ;; Parameters:    Size  Location     Type
 33643 ;;  dutyValue       2    1[COMMON] unsigned int 
 33644 ;; Auto vars:     Size  Location     Type
 33645 ;;		None
 33646 ;; Return value:  Size  Location     Type
 33647 ;;                  1    wreg      void 
 33648 ;; Registers used:
 33649 ;;		wreg, status,2
 33650 ;; Tracked objects:
 33651 ;;		On entry : 0/0
 33652 ;;		On exit  : 0/0
 33653 ;;		Unchanged: 0/0
 33654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33655 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33658 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33659 ;;Total ram usage:        2 bytes
 33660 ;; Hardware stack levels used:    1
 33661 ;; Hardware stack levels required when called:    4
 33662 ;; This function calls:
 33663 ;;		Nothing
 33664 ;; This function is called by:
 33665 ;;		_nullifyBadge_platformInit
 33666 ;; This function uses a non-reentrant model
 33667 ;;
 33668                           
 33669                           
 33670                           ;psect for function _PWM1_LoadDutyValue
 33671  33C3                     _PWM1_LoadDutyValue:	
 33672                           
 33673                           ;pwm1.c: 82: dutyValue &= 0x03FF;
 33674                           
 33675                           ;incstack = 0
 33676                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2]
 33677  33C3  30FF               	movlw	255
 33678  33C4  05F1               	andwf	PWM1_LoadDutyValue@dutyValue,f
 33679  33C5  3003               	movlw	3
 33680  33C6  05F2               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
 33681                           
 33682                           ;pwm1.c: 85: if(CCP1CONbits.CCP1FMT)
 33683  33C7  0025               	movlb	5	; select bank5
 33684  33C8  1E13               	btfss	19,4	;volatile
 33685  33C9  2BD4               	goto	l7493
 33686                           
 33687                           ;pwm1.c: 86: {
 33688                           ;pwm1.c: 87: dutyValue <<= 6;
 33689  33CA  3006               	movlw	6
 33690  33CB                     u4315:	
 33691  33CB  35F1               	lslf	PWM1_LoadDutyValue@dutyValue,f
 33692  33CC  0DF2               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
 33693  33CD  0B89               	decfsz	9,f
 33694  33CE  2BCB               	goto	u4315
 33695                           
 33696                           ;pwm1.c: 88: CCPR1H = dutyValue >> 8;
 33697  33CF  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 33698  33D0  0092               	movwf	18	;volatile
 33699                           
 33700                           ;pwm1.c: 89: CCPR1L = dutyValue;
 33701  33D1  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 33702  33D2  0091               	movwf	17	;volatile
 33703                           
 33704                           ;pwm1.c: 90: }
 33705  33D3  0008               	return
 33706  33D4                     l7493:	
 33707                           
 33708                           ;pwm1.c: 91: else
 33709                           ;pwm1.c: 92: {
 33710                           ;pwm1.c: 93: CCPR1H = dutyValue >> 8;
 33711  33D4  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 33712  33D5  0092               	movwf	18	;volatile
 33713                           
 33714                           ;pwm1.c: 94: CCPR1L = dutyValue;
 33715  33D6  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 33716  33D7  0091               	movwf	17	;volatile
 33717  33D8  0008               	return
 33718  33D9                     __end_of_PWM1_LoadDutyValue:	
 33719                           
 33720                           	psect	intentry
 33721  0004                     __pintentry:	
 33722 ;; *************** function _INTERRUPT_InterruptManager *****************
 33723 ;; Defined at:
 33724 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 33725 ;; Parameters:    Size  Location     Type
 33726 ;;		None
 33727 ;; Auto vars:     Size  Location     Type
 33728 ;;		None
 33729 ;; Return value:  Size  Location     Type
 33730 ;;                  1    wreg      void 
 33731 ;; Registers used:
 33732 ;;		wreg, status,2, status,0, pclath, cstack
 33733 ;; Tracked objects:
 33734 ;;		On entry : 0/0
 33735 ;;		On exit  : 0/0
 33736 ;;		Unchanged: 0/0
 33737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33740 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33741 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33742 ;;Total ram usage:        1 bytes
 33743 ;; Hardware stack levels used:    1
 33744 ;; Hardware stack levels required when called:    3
 33745 ;; This function calls:
 33746 ;;		_TMR0_ISR
 33747 ;; This function is called by:
 33748 ;;		Interrupt level 1
 33749 ;; This function uses a non-reentrant model
 33750 ;;
 33751                           
 33752  0004                     _INTERRUPT_InterruptManager:	
 33753                           
 33754                           ;incstack = 0
 33755  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 33756                           
 33757                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 33758  0005  3180               	pagesel	$
 33759  0006  0020               	movlb	0	; select bank0
 33760  0007  087F               	movf	127,w
 33761  0008  00F0               	movwf	??_INTERRUPT_InterruptManager
 33762                           
 33763                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 33764  0009  0021               	movlb	1	; select bank1
 33765  000A  1E90               	btfss	16,5	;volatile
 33766  000B  2811               	goto	i1l363
 33767  000C  0020               	movlb	0	; select bank0
 33768  000D  1E90               	btfss	16,5	;volatile
 33769  000E  2811               	goto	i1l363
 33770                           
 33771                           ;interrupt_manager.c: 55: {
 33772                           ;interrupt_manager.c: 56: TMR0_ISR();
 33773  000F  31B2  22EE         	fcall	_TMR0_ISR
 33774  0011                     i1l363:	
 33775                           ;interrupt_manager.c: 58: else
 33776                           ;interrupt_manager.c: 59: {
 33777                           
 33778                           ;interrupt_manager.c: 57: }
 33779                           
 33780  0011  0870               	movf	??_INTERRUPT_InterruptManager,w
 33781  0012  0020               	movlb	0	; select bank0
 33782  0013  00FF               	movwf	127
 33783  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 33784  0015  0009               	retfie
 33785  0016                     __end_of_INTERRUPT_InterruptManager:	
 33786                           
 33787                           	psect	text104
 33788  32EE                     __ptext104:	
 33789 ;; *************** function _TMR0_ISR *****************
 33790 ;; Defined at:
 33791 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 33792 ;; Parameters:    Size  Location     Type
 33793 ;;		None
 33794 ;; Auto vars:     Size  Location     Type
 33795 ;;		None
 33796 ;; Return value:  Size  Location     Type
 33797 ;;                  1    wreg      void 
 33798 ;; Registers used:
 33799 ;;		wreg, status,2, status,0, pclath, cstack
 33800 ;; Tracked objects:
 33801 ;;		On entry : 0/0
 33802 ;;		On exit  : 0/0
 33803 ;;		Unchanged: 0/0
 33804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33809 ;;Total ram usage:        0 bytes
 33810 ;; Hardware stack levels used:    1
 33811 ;; Hardware stack levels required when called:    2
 33812 ;; This function calls:
 33813 ;;		_TMR0_CallBack
 33814 ;; This function is called by:
 33815 ;;		_INTERRUPT_InterruptManager
 33816 ;; This function uses a non-reentrant model
 33817 ;;
 33818                           
 33819                           
 33820                           ;psect for function _TMR0_ISR
 33821  32EE                     _TMR0_ISR:	
 33822                           
 33823                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
 33824                           
 33825                           ;incstack = 0
 33826                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 33827  32EE  0020               	movlb	0	; select bank0
 33828  32EF  1290               	bcf	16,5	;volatile
 33829                           
 33830                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
 33831  32F0  0021               	movlb	1	; select bank1
 33832  32F1  0841               	movf	(_timer0ReloadVal16bit+1)^(0+128),w	;volatile
 33833  32F2  0020               	movlb	0	; select bank0
 33834  32F3  0096               	movwf	22	;volatile
 33835                           
 33836                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
 33837  32F4  0021               	movlb	1	; select bank1
 33838  32F5  0840               	movf	_timer0ReloadVal16bit^(0+128),w	;volatile
 33839  32F6  0020               	movlb	0	; select bank0
 33840  32F7  0095               	movwf	21	;volatile
 33841                           
 33842                           ;tmr0.c: 146: TMR0_CallBack();
 33843  32F8  31B2  2287         	fcall	_TMR0_CallBack
 33844  32FA  0008               	return
 33845  32FB                     __end_of_TMR0_ISR:	
 33846                           
 33847                           	psect	text105
 33848  3287                     __ptext105:	
 33849 ;; *************** function _TMR0_CallBack *****************
 33850 ;; Defined at:
 33851 ;;		line 151 in file "mcc_generated_files/tmr0.c"
 33852 ;; Parameters:    Size  Location     Type
 33853 ;;		None
 33854 ;; Auto vars:     Size  Location     Type
 33855 ;;		None
 33856 ;; Return value:  Size  Location     Type
 33857 ;;                  1    wreg      void 
 33858 ;; Registers used:
 33859 ;;		wreg, status,2, status,0, pclath, cstack
 33860 ;; Tracked objects:
 33861 ;;		On entry : 0/0
 33862 ;;		On exit  : 0/0
 33863 ;;		Unchanged: 0/0
 33864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33869 ;;Total ram usage:        0 bytes
 33870 ;; Hardware stack levels used:    1
 33871 ;; Hardware stack levels required when called:    1
 33872 ;; This function calls:
 33873 ;;		Absolute function
 33874 ;;		_TMR0_DefaultInterruptHandler
 33875 ;; This function is called by:
 33876 ;;		_TMR0_ISR
 33877 ;; This function uses a non-reentrant model
 33878 ;;
 33879                           
 33880                           
 33881                           ;psect for function _TMR0_CallBack
 33882  3287                     _TMR0_CallBack:	
 33883                           
 33884                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
 33885                           
 33886                           ;incstack = 0
 33887                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 33888  3287  0021               	movlb	1	; select bank1
 33889  3288  083E               	movf	_TMR0_InterruptHandler^(0+128),w
 33890  3289  043F               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 33891  328A  1903               	btfsc	3,2
 33892  328B  0008               	return
 33893                           
 33894                           ;tmr0.c: 156: {
 33895                           ;tmr0.c: 157: TMR0_InterruptHandler();
 33896  328C  083F               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 33897  328D  008A               	movwf	10
 33898  328E  083E               	movf	_TMR0_InterruptHandler^(0+128),w
 33899  328F  000A               	callw
 33900  3290  31B2               	pagesel	$
 33901  3291  0008               	return
 33902  3292                     __end_of_TMR0_CallBack:	
 33903                           
 33904                           	psect	text106
 33905  07FF                     __ptext106:	
 33906 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 33907 ;; Defined at:
 33908 ;;		line 165 in file "mcc_generated_files/tmr0.c"
 33909 ;; Parameters:    Size  Location     Type
 33910 ;;		None
 33911 ;; Auto vars:     Size  Location     Type
 33912 ;;		None
 33913 ;; Return value:  Size  Location     Type
 33914 ;;                  1    wreg      void 
 33915 ;; Registers used:
 33916 ;;		None
 33917 ;; Tracked objects:
 33918 ;;		On entry : 0/0
 33919 ;;		On exit  : 0/0
 33920 ;;		Unchanged: 0/0
 33921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33926 ;;Total ram usage:        0 bytes
 33927 ;; Hardware stack levels used:    1
 33928 ;; This function calls:
 33929 ;;		Nothing
 33930 ;; This function is called by:
 33931 ;;		_TMR0_Initialize
 33932 ;;		_TMR0_CallBack
 33933 ;; This function uses a non-reentrant model
 33934 ;;
 33935                           
 33936                           
 33937                           ;psect for function _TMR0_DefaultInterruptHandler
 33938  07FF                     _TMR0_DefaultInterruptHandler:	
 33939                           
 33940                           ;incstack = 0
 33941                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 33942  07FF  0008               	return
 33943  0800                     __end_of_TMR0_DefaultInterruptHandler:	
 33944  007E                     btemp	set	126	;btemp
 33945  007E                     int$flags	set	126
 33946  007E                     wtemp0	set	126


Data Sizes:
    Strings     1149
    Constant    522
    Data        666
    BSS         305
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     79      79
    BANK1            80      8      62
    BANK2            80      0      80
    BANK3            80      0      79
    BANK4            80      0      70
    BANK5            80      0      67
    BANK6            80      0      73
    BANK7            80      0      76
    BANK8            80      0      56
    BANK9            80      0      61
    BANK10           80      0      58
    BANK11           80      0      40
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           16      0       0
    BANK23            0      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    menu_run_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    schedulerInst.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    schedulerInst.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    schedulerInst.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    schedulerInst.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerExecute$4099	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    matrix_secret_check@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_check@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_secret_check@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$3$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$2$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$4$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_82(CODE[23]), STR_81(CODE[27]), STR_80(CODE[46]), matrix_secret_inputs.inputs(BANK5[20]), 
		 -> matrix_secret_inputs(BANK5[25]), STR_79(CODE[8]), STR_78(CODE[7]), STR_77(CODE[8]), 
		 -> STR_76(CODE[6]), STR_75(CODE[10]), STR_74(CODE[5]), STR_73(CODE[7]), 
		 -> STR_72(CODE[9]), STR_71(CODE[7]), STR_70(CODE[7]), Slot_Wheel(BANK6[55]), 
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_45(CODE[5]), STR_44(CODE[5]), 
		 -> STR_43(CODE[11]), STR_42(CODE[13]), locked_secret_inputs.inputs(BANK4[20]), locked_secret_inputs(BANK4[25]), 
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), 
		 -> secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), 
		 -> flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_82(CODE[23]), STR_81(CODE[27]), STR_80(CODE[46]), matrix_secret_inputs.inputs(BANK5[20]), 
		 -> matrix_secret_inputs(BANK5[25]), STR_79(CODE[8]), STR_78(CODE[7]), STR_77(CODE[8]), 
		 -> STR_76(CODE[6]), STR_75(CODE[10]), STR_74(CODE[5]), STR_73(CODE[7]), 
		 -> STR_72(CODE[9]), STR_71(CODE[7]), STR_70(CODE[7]), Slot_Wheel(BANK6[55]), 
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_45(CODE[5]), STR_44(CODE[5]), 
		 -> STR_43(CODE[11]), STR_42(CODE[13]), locked_secret_inputs.inputs(BANK4[20]), locked_secret_inputs(BANK4[25]), 
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), 
		 -> secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), 
		 -> flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_83(CODE[7]), sprintf@c(BANK0[1]), STR_63(CODE[9]), STR_62(CODE[13]), 
		 -> STR_61(CODE[12]), STR_60(CODE[8]), STR_59(CODE[11]), STR_58(CODE[11]), 
		 -> STR_57(CODE[9]), STR_56(CODE[8]), STR_55(CODE[8]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_69(CODE[3]), STR_68(CODE[9]), STR_67(CODE[9]), STR_66(CODE[9]), 
		 -> STR_65(CODE[9]), STR_64(CODE[9]), STR_41(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 41
		 -> flashy_Main@hit_counter(BANK0[6]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), 
		 -> slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    matrix_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_Main@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_display_option@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> matrix_secret_inputs.inputs(BANK5[20]), matrix_secret_inputs(BANK5[25]), 

    matrix_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_Init@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S3163matrix_secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    matrix_secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    matrix_option	PTR unsigned char [10] size(2) Largest target is 10
		 -> STR_79(CODE[8]), STR_78(CODE[7]), STR_77(CODE[8]), STR_76(CODE[6]), 
		 -> STR_75(CODE[10]), STR_74(CODE[5]), STR_73(CODE[7]), STR_72(CODE[9]), 
		 -> STR_71(CODE[7]), STR_70(CODE[7]), 

    slot_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Main@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Finished_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Running_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Running_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Running_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Setup@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Setup@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Setup@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2371t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Init@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    Shot_Options_Long	PTR unsigned char [9] size(2) Largest target is 13
		 -> STR_63(CODE[9]), STR_62(CODE[13]), STR_61(CODE[12]), STR_60(CODE[8]), 
		 -> STR_59(CODE[11]), STR_58(CODE[11]), STR_57(CODE[9]), STR_56(CODE[8]), 
		 -> STR_55(CODE[8]), 

    Shot_Options	PTR unsigned char [9] size(2) Largest target is 5
		 -> STR_54(CODE[5]), STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), 
		 -> STR_50(CODE[5]), STR_49(CODE[5]), STR_48(CODE[5]), STR_47(CODE[5]), 
		 -> STR_46(CODE[5]), 

    secret_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Main@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), 

    secret_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Init@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2872secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    locked_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Main@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> locked_secret_inputs.inputs(BANK4[20]), locked_secret_inputs(BANK4[25]), 

    locked_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Init@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2731locked_secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    locked_secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    flashy_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Main@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_display_option@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Init@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_option	PTR unsigned char [29] size(2) Largest target is 120
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), 

    FLASHY_TEXT_SECRET_TEST	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_10(CODE[18]), 

    FLASHY_TEXT	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_9(CODE[5]), 

    menu_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_run_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_display_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_taskData	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Init@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_option	PTR unsigned char [5] size(2) Largest target is 10
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), 
		 -> STR_4(CODE[5]), 

    displayL2_ClrUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_SetUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_EraseSegDisplay@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_ForceUpdate@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutStr@str	PTR unsigned char  size(2) Largest target is 120
		 -> flashy_Main@hit_counter(BANK0[6]), STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[43]), 
		 -> STR_37(CODE[13]), STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), 
		 -> STR_33(CODE[34]), STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), 
		 -> STR_29(CODE[12]), STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), 
		 -> STR_25(CODE[40]), STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), 
		 -> STR_21(CODE[36]), STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), 
		 -> STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), 
		 -> STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), STR_8(CODE[6]), 
		 -> STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    displayL2_PutStr@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutChar@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_Initialize@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_Update@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetUserLed@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetSegChar@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    sp__memset	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    displayL1_Initialize@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRelease@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsClr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsSet@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayErase@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayPutStr@str	PTR unsigned char  size(2) Largest target is 120
		 -> flashy_Main@hit_counter(BANK0[6]), STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[43]), 
		 -> STR_37(CODE[13]), STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), 
		 -> STR_33(CODE[34]), STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), 
		 -> STR_29(CODE[12]), STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), 
		 -> STR_25(CODE[40]), STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), 
		 -> STR_21(CODE[36]), STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), 
		 -> STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), 
		 -> STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), STR_8(CODE[6]), 
		 -> STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    nullifyBadge_segDisplayPutStr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayForceUpdate@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_platformInit@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    marquee@string	PTR unsigned char  size(2) Largest target is 120
		 -> STR_45(CODE[5]), STR_44(CODE[5]), STR_43(CODE[11]), STR_42(CODE[13]), 
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), 
		 -> secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), 
		 -> flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    marquee_speedy@string	PTR unsigned char  size(2) Largest target is 120
		 -> STR_82(CODE[23]), STR_81(CODE[27]), STR_80(CODE[46]), STR_79(CODE[8]), 
		 -> STR_78(CODE[7]), STR_77(CODE[8]), STR_76(CODE[6]), STR_75(CODE[10]), 
		 -> STR_74(CODE[5]), STR_73(CODE[7]), STR_72(CODE[9]), STR_71(CODE[7]), 
		 -> STR_70(CODE[7]), STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), 
		 -> STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), 
		 -> STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), 
		 -> STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), 
		 -> STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), 
		 -> STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), 
		 -> STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), 
		 -> STR_12(CODE[9]), STR_11(CODE[5]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), 
		 -> locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), 
		 -> NULL(NULL[0]), 

    schedulerInst.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    S1195t_matrix_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1170t_secret_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1161t_locked_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1067t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1136t_menu_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1118t_flashy_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    matrix_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    matrix_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    matrix_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    secret_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    secret_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    secret_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    locked_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    locked_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    locked_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    slot_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    slot_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    slot_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    menu_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    menu_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    menu_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    flashy_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    flashy_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    flashy_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    fadeDisplay_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    S1013t_fadeDisplay_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    schedulerExecute@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerExecute@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    schedulerExecute@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskRemove@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskRemove@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskRemove@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskRemove@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRemove@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), 

    scheduler_TaskAdd@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskInit@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskInit@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskInit@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskInit@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskInit@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), 

    S923t_scheduler$tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    S902t_schedulerTask$taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskRun@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    S902t_schedulerTask$taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskRun@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    S902t_schedulerTask$taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskRun@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    S902t_schedulerTask$taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    SPI1_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 10
		 -> displayL1_Update@tmpRxBuf(BANK0[10]), 

    SPI1_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 


Critical Paths under _main in COMMON

    _schedulerExecute->_TMR0_Read16bitTimer
    _scheduler_TaskRun->_TMR0_Read16bitTimer
    _secret_check->_strlen
    _matrix_secret_check->_strlen
    _slot_Setup->___lwmod
    _locked_secret_check->_strlen
    _nullifyBadge_userLedsClr->_displayL2_ClrUserLeds
    _displayL2_ClrUserLeds->_displayL1_Update
    _sprintf->___lwmod
    _led_rand->___almod
    _rand->___lmul
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _displayL1_SetSegChar->_displayCharReverse
    _nullifyBadge_segDisplayForceUpdate->_displayL2_ForceUpdate
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->___lwdiv
    _displayL2_Initialize->_displayL1_Initialize
    _displayL1_Initialize->_displayL1_Update
    _displayL1_Update->_SPI1_Exchange8bitBuffer
    _SPI1_Exchange8bitBuffer->_SPI1_Exchange8bit
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_schedulerExecute
    _scheduler_TaskAdd->_matrix_Init
    _slot_Init->_nullifyBadge_segDisplayErase
    _secret_Init->_nullifyBadge_segDisplayErase
    _menu_Init->_nullifyBadge_segDisplayErase
    _matrix_Init->_nullifyBadge_segDisplayErase
    _locked_Init->_nullifyBadge_segDisplayErase
    _flashy_Init->_nullifyBadge_segDisplayErase
    _schedulerExecute->_scheduler_TaskRun
    _scheduler_TaskRun->_slot_Main
    _slot_Running_Animation->_led_circle
    _slot_Finished_Animation->_led_rand
    _menu_Main->_menu_display_option
    _menu_run_option->_menu_clear
    _menu_clear->_nullifyBadge_segDisplayErase
    _menu_display_option->_marquee
    _matrix_display_option->_marquee_speedy
    _slot_Setup->___lwmod
    _locked_clear->_nullifyBadge_segDisplayErase
    _displayL2_ClrUserLeds->_displayL1_Update
    _nullifyBadge_segDisplayErase->_displayL2_EraseSegDisplay
    _displayL2_EraseSegDisplay->_displayL2_PutStr
    _sprintf->___lwmod
    _let_alternate->_nullifyBadge_userLedsSet
    _led_roundabout->_nullifyBadge_userLedsSet
    _led_rand->___almod
    _rand->___lmul
    ___almod->_rand
    _led_curtain->_nullifyBadge_userLedsSet
    _led_circle->_nullifyBadge_userLedsSet
    _led_Parody->_nullifyBadge_userLedsSet
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _flashy_display_option->_marquee
    _flashy_display_option->_marquee_speedy
    _marquee_speedy->_nullifyBadge_segDisplayPutStr
    _marquee->_nullifyBadge_segDisplayPutStr
    _nullifyBadge_segDisplayPutStr->_displayL2_PutStr
    _displayL2_PutStr->_displayL2_PutChar
    _displayL2_PutChar->_displayL1_SetSegChar
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->_rand
    _nullifyBadge_platformInit->_displayL2_Initialize
    _displayL1_Initialize->_displayL1_Update

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_schedulerExecute

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  389154
                                             78 BANK0      1     1      0
          _nullifyBadge_platformInit
                   _schedulerExecute
                     _scheduler_Init
                  _scheduler_TaskAdd
                 _scheduler_TaskInit
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskInit                                   1     1      0     352
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskAdd                                    9     8      1   51944
                                             31 BANK0      9     8      1
                   Absolute function *
                        _flashy_Init *
                        _locked_Init *
                        _matrix_Init *
                          _menu_Init *
                        _secret_Init *
                          _slot_Init *
 ---------------------------------------------------------------------------------
 (2) _slot_Init                                            4     2      2   14563
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (2) _secret_Init                                          4     2      2    7129
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _menu_Init                                            4     2      2    7129
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _matrix_Init                                          6     4      2    7411
                                             25 BANK0      6     4      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _locked_Init                                          4     2      2    7194
                                             25 BANK0      4     2      2
                   _locked_lock_leds
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _flashy_Init                                          4     2      2    7284
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsRegister                        1     1      0     242
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayRegister                      1     1      0     253
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_Init                                       3     3      0     145
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _schedulerExecute                                    14    14      0  331316
                                             72 BANK0      6     6      0
                                              0 BANK1      8     8      0
                _TMR0_Read16bitTimer
                  _scheduler_TaskRun
 ---------------------------------------------------------------------------------
 (2) _scheduler_TaskRun                                    1     1      0  330760
                                             71 BANK0      1     1      0
                   Absolute function *
                _TMR0_Read16bitTimer
                        _flashy_Main *
                        _locked_Main *
                        _matrix_Main *
                          _menu_Main *
                        _secret_Main *
                          _slot_Main *
 ---------------------------------------------------------------------------------
 (3) _slot_Main                                           21    19      2   72364
                                             50 BANK0     21    19      2
                            ___lwmod
                            _marquee
                     _marquee_speedy
                             _memset
            _nullifyBadge_buttonsGet
                               _rand
            _slot_Finished_Animation
             _slot_Running_Animation
                         _slot_Setup
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _slot_Running_Animation                               6     4      2    3731
                                             18 BANK0      6     4      2
                         _led_circle
 ---------------------------------------------------------------------------------
 (4) _slot_Finished_Animation                              6     4      2    4417
                                             29 BANK0      6     4      2
                           _led_rand
 ---------------------------------------------------------------------------------
 (3) _secret_Main                                          8     6      2    4833
                                             50 BANK0      8     6      2
            _nullifyBadge_buttonsGet
                       _secret_check
                       _secret_clear
 ---------------------------------------------------------------------------------
 (4) _secret_clear                                         2     0      2     286
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (4) _secret_check                                        19    16      3    2899
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _menu_Main                                            7     5      2   51434
                                             50 BANK0      7     5      2
                         _menu_clear
                _menu_display_option
                    _menu_run_option
            _nullifyBadge_buttonsGet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (4) _menu_run_option                                      2     0      2    7012
                                             27 BANK0      2     0      2
                         _menu_clear
 ---------------------------------------------------------------------------------
 (5) _menu_clear                                           2     0      2    6838
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (4) _menu_display_option                                  6     4      2   28669
                                             44 BANK0      6     4      2
                            ___lwmod
                            _marquee
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (3) _matrix_Main                                         10     8      2   42448
                                             50 BANK0     10     8      2
                         _led_Parody
                        _led_curtain
              _matrix_display_option
                _matrix_secret_check
            _nullifyBadge_buttonsGet
 ---------------------------------------------------------------------------------
 (4) _matrix_secret_check                                 19    16      3    3495
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _matrix_display_option                                4     2      2   15068
                                             44 BANK0      4     2      2
                     _marquee_speedy
 ---------------------------------------------------------------------------------
 (3) _locked_Main                                          7     5      2   41866
                                             50 BANK0      7     5      2
                            ___lwmod
                       _locked_clear
               _locked_get_lock_leds
             _locked_get_unlock_leds
                   _locked_lock_leds
                _locked_secret_check
                 _locked_unlock_leds
                            _marquee
            _nullifyBadge_buttonsGet
           _nullifyBadge_userLedsSet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (3) _slot_Setup                                           7     5      2    7403
                                             15 BANK0      7     5      2
                            ___lwmod
                             _memset
                               _rand
 ---------------------------------------------------------------------------------
 (4) _locked_unlock_leds                                   2     2      0       0
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _locked_secret_check                                 19    16      3    2452
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1      76
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _locked_lock_leds                                     4     4      0      34
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _locked_get_unlock_leds                               4     2      2      34
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _locked_get_lock_leds                                 8     6      2      68
                                              1 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (4) _locked_clear                                         2     0      2    6588
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsClr                             1     1      0    2094
                                             11 BANK0      1     1      0
              _displayL2_ClrUserLeds
 ---------------------------------------------------------------------------------
 (4) _displayL2_ClrUserLeds                                1     1      0    1559
                                             11 COMMON     1     1      0
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayErase                         1     1      0    4196
                                             24 BANK0      1     1      0
          _displayL2_EraseSegDisplay
 ---------------------------------------------------------------------------------
 (4) _displayL2_EraseSegDisplay                            1     1      0    3589
                                             23 BANK0      1     1      0
                   _displayL1_Update
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (3) _flashy_Main                                         14    12      2  117584
                                             50 BANK0     14    12      2
              _flashy_display_option
                         _led_Parody
                         _led_circle
                        _led_curtain
                           _led_rand
                     _led_roundabout
                      _let_alternate
                            _marquee
            _nullifyBadge_buttonsGet
                 _nullifyBadge_irGet
               _nullifyBadge_irTxClr
          _nullifyBadge_irTxRegister
           _nullifyBadge_irTxRelease
               _nullifyBadge_irTxSet
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             32    20     12   16383
                                             15 BANK0     28    16     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    7304
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxSet                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRelease                             2     2      0      67
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRegister                            1     1      0      98
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxClr                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irGet                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_buttonsGet                              3     3      0      46
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _let_alternate                                        2     0      2    3314
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_roundabout                                       8     6      2    8722
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_rand                                            10    10      0    4190
                                             19 BANK0     10    10      0
                            ___almod
           _nullifyBadge_userLedsSet
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 7     5      2     316
                                              4 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     316
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) ___almod                                             11     3      8     613
                                              9 COMMON     3     3      0
                                             11 BANK0      8     0      8
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) _led_curtain                                          8     6      2    8812
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_circle                                           2     0      2    3404
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_Parody                                           8     6      2    8874
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (6) _nullifyBadge_userLedsSet                             3     1      2    3193
                                             13 BANK0      3     1      2
              _displayL2_SetUserLeds
 ---------------------------------------------------------------------------------
 (7) _displayL2_SetUserLeds                                3     1      2    1868
                                             11 COMMON     1     1      0
                                             11 BANK0      2     0      2
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (5) _displayL1_SetUserLed                                 4     2      2     376
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _flashy_display_option                                2     0      2   34663
                                             44 BANK0      2     0      2
                            _marquee
                     _marquee_speedy
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
 ---------------------------------------------------------------------------------
 (4) _marquee_speedy                                      18    12      6   14646
                                             26 BANK0     18    12      6
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _marquee                                             18    14      4   15189
                                             26 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2    1480
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayPutStr                        3     1      2    3224
                                             23 BANK0      3     1      2
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (5) _displayL2_PutStr                                     7     5      2    2406
                                             16 BANK0      7     5      2
                  _displayL2_PutChar
 ---------------------------------------------------------------------------------
 (6) _displayL2_PutChar                                    6     5      1    1993
                                             10 BANK0      6     5      1
               _displayL1_SetSegChar
 ---------------------------------------------------------------------------------
 (7) _displayL1_SetSegChar                                10     8      2    1298
                                              0 BANK0     10     8      2
                 _displayCharReverse
 ---------------------------------------------------------------------------------
 (8) _displayCharReverse                                  11     9      2     331
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayForceUpdate                   1     1      0    1399
                                             11 BANK0      1     1      0
              _displayL2_ForceUpdate
 ---------------------------------------------------------------------------------
 (6) _displayL2_ForceUpdate                                1     1      0    1152
                                             11 COMMON     1     1      0
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4    5272
                                              9 COMMON     2     2      0
                                             11 BANK0      4     0      4
                            ___lwdiv (ARG)
                               _rand (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4    1221
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _TMR0_Read16bitTimer                                 11     9      2     102
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (1) _nullifyBadge_platformInit                            1     1      0    5397
                                             12 BANK0      1     1      0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                 _PWM1_LoadDutyValue
                    _PWM2_Initialize
                 _PWM2_LoadDutyValue
                    _PWM5_Initialize
                 _PWM5_LoadDutyValue
                    _PWM6_Initialize
                 _PWM6_LoadDutyValue
                    _SPI1_Initialize
                  _SYSTEM_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
               _displayL2_Initialize
 ---------------------------------------------------------------------------------
 (2) _displayL2_Initialize                                 1     1      0    4257
                                             11 BANK0      1     1      0
               _displayL1_Initialize
                             _memset
 ---------------------------------------------------------------------------------
 (3) _displayL1_Initialize                                 1     1      0    2640
                                             11 COMMON     1     1      0
                   _displayL1_Update
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    1457
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (5) _displayL1_Update                                    13    13      0    1085
                                              9 COMMON     2     2      0
                                              0 BANK0     11    11      0
            _SPI1_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bitBuffer                              7     5      2     759
                                              2 COMMON     7     5      2
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     121
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM5_Initialize
                    _PWM6_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      98
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM6_LoadDutyValue                                   4     2      2     196
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM5_LoadDutyValue                                   4     2      2     272
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_LoadDutyValue                                   2     0      2     166
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM1_LoadDutyValue                                   2     0      2     166
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          1     1      0       0
                                              0 COMMON     1     1      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (13) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (14) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _nullifyBadge_platformInit
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM1_LoadDutyValue
     _PWM2_Initialize
     _PWM2_LoadDutyValue
     _PWM5_Initialize
     _PWM5_LoadDutyValue
     _PWM6_Initialize
     _PWM6_LoadDutyValue
     _SPI1_Initialize
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _PWM1_Initialize
       _PWM2_Initialize
       _PWM5_Initialize
       _PWM6_Initialize
       _SPI1_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
         _TMR0_StartTimer
       _TMR2_Initialize
         _TMR2_StartTimer
       _TMR4_Initialize
         _TMR4_StartTimer
       _WDT_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
     _TMR4_Initialize
       _TMR4_StartTimer
     _displayL2_Initialize
       _displayL1_Initialize
         _displayL1_Update
           _SPI1_Exchange8bitBuffer
             _SPI1_Exchange8bit
         _memset
       _memset
   _schedulerExecute
     _TMR0_Read16bitTimer
     _scheduler_TaskRun
       Absolute function(Fake) *
       _TMR0_Read16bitTimer *
       _flashy_Main *
         _flashy_display_option
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_circle
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_rand
           ___almod
             _rand (ARG)
               ___lmul
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _rand
             ___lmul
         _led_roundabout
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _let_alternate
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_irGet
         _nullifyBadge_irTxClr
         _nullifyBadge_irTxRegister
         _nullifyBadge_irTxRelease
         _nullifyBadge_irTxSet
         _nullifyBadge_segDisplayForceUpdate
           _displayL2_ForceUpdate
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _nullifyBadge_segDisplayPutStr
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
       _locked_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _locked_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _locked_get_lock_leds
         _locked_get_unlock_leds
         _locked_lock_leds
         _locked_secret_check
           ___bmul
           _strlen
         _locked_unlock_leds
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _matrix_Main *
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _matrix_display_option
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
         _matrix_secret_check
           ___bmul
           _strlen
         _nullifyBadge_buttonsGet
       _menu_Main *
         _menu_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_display_option
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_run_option
           _menu_clear
             _nullifyBadge_segDisplayErase
               _displayL2_EraseSegDisplay
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
                 _displayL2_PutStr
                   _displayL2_PutChar
                     _displayL1_SetSegChar
                       _displayCharReverse
             _nullifyBadge_userLedsClr
               _displayL2_ClrUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _nullifyBadge_buttonsGet
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _secret_Main *
         _nullifyBadge_buttonsGet
         _secret_check
           ___bmul
           _strlen
         _secret_clear
       _slot_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _marquee_speedy
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _memset
         _nullifyBadge_buttonsGet
         _rand
           ___lmul
         _slot_Finished_Animation
           _led_rand
             ___almod
               _rand (ARG)
                 ___lmul
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _rand
               ___lmul
         _slot_Running_Animation
           _led_circle
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
         _strlen
   _scheduler_Init
   _scheduler_TaskAdd
     Absolute function(Fake) *
     _flashy_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _locked_Init *
       _locked_lock_leds
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _matrix_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _menu_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _secret_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _slot_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
       _slot_Setup
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _memset
         _rand
           ___lmul
   _scheduler_TaskInit

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      46      13       87.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     32E      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      43      16       83.8%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      49      18       91.2%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      4C      20       95.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      38      22       70.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      3D      24       76.2%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      3A      26       72.5%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     32E      28        0.0%
BANK11              50      0      28      29       50.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              10      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23               0      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24               0      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25               0      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Jul 26 08:12:39 2017

                          _SPI1_Exchange8bit 3257                                            pc 0002  
           __size_of_slot_Finished_Animation 0027                               ___bmul@product 0073  
                 __end_of_gamma_table_256x1k 2200                           ?_SPI1_Exchange8bit 0070  
                                __CFG_CP$OFF 0000                                           l18 325C  
                      _displayL2_ClrUserLeds 3309                          ___wmul@multiplicand 0073  
                   marquee_speedy@multiplier 003E                                 ?_led_curtain 0030  
              nullifyBadge_buttonsGet@retVal 0073                  __size_of_PWM6_LoadDutyValue 0016  
                                __CFG_LVP$ON 0000                   ??_nullifyBadge_userLedsClr 007C  
                 ??_nullifyBadge_userLedsSet 007C                                          l208 3270  
                                        l625 2EDE                                          _GIE 005F  
                             led_Parody@leds 0034              ??_nullifyBadge_segDisplayPutStr 007C  
                                        _PR2 001E                                          _PR4 0416  
                               __CFG_CPD$OFF 0000                               _scheduler_Init 3482  
                             led_Parody@size 0036                          ??_SPI1_Exchange8bit 0071  
                   ??_slot_Running_Animation 0034                           _locked_unlock_leds 339C  
                marquee_speedy@string_length 0048                              _TMR2_Initialize 3273  
             SPI1_Exchange8bitBuffer@dataOut 0073                     displayL1_Update@tmpRxBuf 0020  
                                        wreg 0009                                _slot_taskData 00BC  
               marquee_speedy@display_string 0041                  displayL1_Initialize@display 007B  
        nullifyBadge_userLedsSet@userLedData 002D                              led_curtain@leds 0034  
                    secret_Main@secret_found 0056                              led_curtain@size 0036  
                       _displayL1_Initialize 3389                  slot_Finished_Animation@data 0041  
                                       l1010 2B5A                                         l1150 0B61  
                                       l1160 0C49                                         l1155 0BD4  
                                       l1147 0AF4                                         l1253 3445  
                                       l1249 3573                                         l1282 1E87  
                                       l1611 1B07                                         l1427 29D8  
                                       l1454 0579                                         l1704 3454  
                                       l1457 05D2                                         l1772 2FA3  
                                       l8201 2BD3                                         l8203 2BD7  
                                       l9011 1C0D                                         l8213 2BDF  
                                       l8205 2BDC                                         l9021 1C30  
                                       l9013 1C13                                         l8303 335D  
                                       l9023 1C34                                         l9015 1C1B  
                                       l9007 1BE7                                         l9201 09B7  
                                       l9041 1C8B                                         l8163 363B  
                                       l8155 362A                                         l8243 35C8  
                                       l8331 2FC6                                         l8323 2FB0  
                                       l9107 0865                                         l9043 1C90  
                                       l9035 1C68                                         l7509 33EA  
                                       l8181 37E1                                         l8413 22C6  
                                       l9213 09EB                                         l9205 09C4  
                                       l9061 1CD9                                         l8431 2316  
                                       l8407 229F                                         l8343 2FF7  
                                       l8335 2FDE                                         l8271 3685  
                                       l9207 09D5                                         l9135 08C6  
                                       l9071 1D05                                         l9055 1CC4  
                                       l8329 2FB8                                         l8505 3368  
                                       l9225 0A36                                         l9137 08D5  
                                       l8195 2BB0                                         l8291 34E8  
                                       l8339 2FE9                                         l8275 3690  
                                       l8603 2DEB                                         l8611 2B1F  
                                       l9315 0BBB                                         l9243 0A8C  
                                       l9171 0949                                         l9147 08FA  
                                       l9235 0A5E                                         l9075 1D15  
                                       l7493 33D4                                         l8365 3706  
                                       l8357 36E8                                         l8381 35F6  
                                       l8437 233D                                         l8533 33BA  
                                       l8509 336E                                         l9421 0D77  
                                       l9413 0D4E                                         l9325 0BD8  
                                       l9229 0A4B                                         l9237 0A72  
                                       l9165 0936                                         l9157 091E  
                                       l9085 1D41                                         l8199 2BBF  
                                       l8359 36F4                                         l8383 3602  
                                       l8391 3617                                         l8543 2F0B  
                                       l8447 2AC0                                         l8703 1A98  
                                       l8711 1ABF                                         l8615 2B2C  
                                       l8607 2B12                                         l9511 0F89  
                                       l9423 0D7C                                         l9263 0ADF  
                                       l9239 0A7D                                         l9183 096D  
                                       l8457 341F                                         l8369 370F  
                                       l8289 34DC                                         l8641 2248  
                                       l8721 1AD6                                         l8625 2B46  
                                       l9505 0F70                                         l9345 0C30  
                                       l9193 0992                                         l9177 095D  
                                       l9097 1D74                                         l8387 360E  
                                       l8491 344E                                         l8651 19E8  
                                       l8619 2B39                                         l9523 0FBD  
                                       l9443 0DD0                                         l9355 0C4D  
                                       l9611 1ECB                                         l8637 2220  
                                       l8485 3307                                         l8741 1B23  
                                       l8733 1AFB                                         l8709 1AA1  
                                       l9461 0E19                                         l9453 0DF4  
                                       l9269 0AF8                                         l9605 1E9F  
                                       l8751 1B3C                                         l8743 1B26  
                                       l8727 1ADC                                         l8831 2591  
                                       l8903 29E7                                         l9471 0E3E  
                                       l9375 0CA5                                         l9295 0B65  
                                       l9527 0FC9                                         l9615 1ED6  
                                       l9607 1EB3                                         l9711 18B0  
                                       l8745 1B2A                                         l8673 1A3B  
                                       l8665 1A27                                         l8657 19F8  
                                       l8833 2643                                         l8913 35B9  
                                       l9529 0FD6                                         l9465 0E26  
                                       l9457 0E06                                         l9449 0DE3  
                                       l9393 0CFB                                         l9289 0B4C  
                                       l9633 1F35                                         l9561 1DB8  
                                       l8691 1A6E                                         l8683 1A58  
                                       l8827 262C                                         l9491 0E92  
                                       l9643 1F61                                         l9619 1EF0  
                                       l9571 1DF5                                         l9731 1914  
                                       l9715 18C8                                         l8765 1B4E  
                                       l8757 1B4A                                         l8677 1A3D  
                                       l8829 263D                                         l8589 2C90  
                                       l8941 264C                                         l9813 034C  
                                       l9469 0E39                                         l9629 1F1C  
                                       l9661 1FCF                                         l9901 1141  
                                       l8679 1A4B                                         l8767 19C7  
                                       l8943 26FE                                         l8871 10C9  
                                       l9495 0EE5                                         l9647 1F78  
                                       l9663 1FDD                                         l9591 1E65  
                                       l9743 1948                                         l9727 18FC  
                                       l8697 1A82                                         l8689 1A5A  
                                       l8769 1B88                                         l8961 2532  
                                       l8937 26E7                                         l8865 10B2  
                                       l9841 0512                                         l9825 041F  
                                       l9497 0F36                                         l9657 1FA4  
                                       l9593 1E70                                         l9585 1E48  
                                       l8699 1A8D                                         l8939 26F8  
                                       l8867 10C3                                         l9843 0588  
                                       l9835 04CF                                         l9499 0F59  
                                       l9579 1E18                                         l9747 1960  
                                       l9683 182D                                         l9763 19A5  
                                       l9931 11D0                                         l9907 116C  
                                       l8965 2555                                         l8957 2519  
                                       l8869 1017                                         l9669 1FF2  
                                       l9765 19B7                                         l9677 1813  
                                       l8895 29C5                                         l9847 05BB  
                                       l9863 062C                                         l9759 1994  
                                       l9695 1864                                         STR_1 3BF9  
                                       STR_2 3BF4                                         l9961 1265  
                                       l9937 1201                          ?_locked_unlock_leds 0070  
                                       STR_3 287D                                         STR_4 3BEF  
                                       l9779 0123                                         l9699 187C  
                                       STR_5 3BA3                                         STR_6 3AF7  
                                       l8989 1BA1                                         STR_7 3B66  
                                       STR_8 3B9D                                         l9799 0256  
                                       l9991 12FA                                         l9967 1296  
                                       l9887 1101                                         STR_9 3BEA  
                                       l9897 112E                                         l9899 1139  
                                       l9997 132B                      __end_of_PWM1_Initialize 329D  
                                       _LATA 010C                                         _LATB 010D  
                                       _LATC 010E                                         u4315 33CB  
                                       u3380 2CEE                                         u4335 33E1  
                                       u5135 2EEF                                         u5145 3663  
                                       u5065 3455                                         u5155 3671  
                                       u5075 345A                                         u5315 1AF1  
                            led_Parody@count 0030                                         u4285 33FE  
                                       u4295 3414                                         u5415 356D  
                                       u5265 1A51                                         u5355 1B16  
                                       u4725 29A0                                         u5445 25F6  
                                       u6405 1560                                         u5455 2597  
                                       u6415 15F5                                         u6335 1153  
                                       u6504 2380                                         u4905 35F9  
                                       u5545 26B1                                         u6425 168A  
                                       u6345 11E2                                         u6505 237E  
                                       u4835 36EB                                         u4675 3691  
                                       u5555 2652                                         u5475 107C  
                                       u6355 1277                                         u4925 3608  
                                       u4765 2FBB                                         u4685 3698  
                                       u5485 101D                                         u6365 130C  
                                       u4950 2276                                         u4855 36F5  
                                       u4935 360F                                         u5655 1C85  
                                       u6375 13A1                                         u6544 23DE  
                                       u4865 36FF                                         u4785 2FD4  
                                       u6385 1436                                         u6545 23DC  
                                       u4875 3707                                         u4795 2FDF  
                                       u6395 14CB                                         u4980 22ED  
                                       u6484 2361                                         u5925 0D71  
                                       u6565 2432                                         u6485 235F  
                                       _PLLR 48E0                                         _TMR2 001D  
                                       _TMR4 0415                                         _WPUA 020C  
                                       _WPUB 020D                                         _WPUC 020E  
                               __CFG_WRT$OFF 0000                                __CFG_FCMEN$ON 0000  
                     ?_matrix_display_option 004C                                         _main 0666  
                                       _rand 296A                              _TMR0_StartTimer 3212  
                                       fsr0h 0005                                         fsr1h 0007  
                                       indf0 0000                                         fsr0l 0004  
                                       indf1 0001                                         fsr1l 0006  
                                       btemp 007E                                __CFG_BOREN$ON 0000  
                           ??_marquee_speedy 0040                                __CFG_BORV$LOW 0000  
                                       start 0016                    __end_of_SPI1_Exchange8bit 3260  
                        _menu_display_option 2DA0                              _PWM5_Initialize 32BE  
                        matrix_Main@taskData 0052                          locked_Main@taskData 0052  
               displayL2_ClrUserLeds@display 007B                      displayL2_PutStr@display 0035  
                              __CFG_CSWEN$ON 0000                            ___bmul@multiplier 0074  
                              __CFG_MCLRE$ON 0000                         _displayL1_SetSegChar 37BF  
                 __end_of_PWM5_LoadDutyValue 3405                                        S10829 3000  
                        menu_run_option@data 003B                         _displayL2_Initialize 3578  
                       ??_locked_unlock_leds 0071                      __end_of_PWM2_Initialize 32A8  
                    __end_of_TMR0_Initialize 34D8               ??_TMR0_DefaultInterruptHandler 0070  
             __size_of_OSCILLATOR_Initialize 000A                       __end_of_scheduler_Init 349D  
                       _displayL1_SetUserLed 3377                        marquee@display_string 003F  
              __end_of_OSCILLATOR_Initialize 3273                                        l10021 138F  
                                      l10111 154E                                        l10201 170D  
                                      l10051 1424                                        l10027 13C0  
                                      l10141 15E3                                        l10117 157F  
                                      l10241 17CB                                        l10081 14B9  
                                      l10057 1455                                        l10233 1793  
                                      l10171 1678                                        l10147 1614  
                                      l10235 17B4                                        l10229 177F  
                                      l10087 14EA                                        l10249 17F4  
                                      l10177 16A9                                        l10451 2350  
                                      l10461 23B3                                        l10457 23A8  
                                      l10465 23BB                                        l10831 0F3B  
                                      l10833 2B4C                                        l10489 2440  
                                      l10827 08CC                                        l10667 0764  
                    ?_locked_get_unlock_leds 0071                      _locked_locking_leds_idx 00A4  
                            __end_of___almod 3000                                        ?_main 0070  
                                      ?_rand 0024                                        STR_10 3A45  
                                      STR_11 3BEA                                        STR_20 3971  
                                      STR_12 3B25                                        STR_21 38B0  
                                      STR_13 3B5E                                        STR_30 3A89  
                                      STR_22 3919                                        STR_14 3B97  
                                      STR_31 38D4                                        STR_23 3954  
                                      STR_15 3A32                                        STR_40 3BE5  
                                      STR_32 3A79                                        STR_24 39A8  
                                      STR_16 3A0A                                        STR_41 3BFE  
                                      STR_33 38F7                                        STR_25 3888  
                                      STR_17 39C3                                __CFG_WDTE$OFF 0000  
                                      STR_42 3AA5                                        STR_34 280A  
                                      STR_26 3A57                                        STR_18 3B56  
                                      STR_50 3BB3                                        STR_43 3AA7  
                                      STR_35 3A68                                        STR_27 3A1F  
                                      STR_19 39F4                                        STR_51 3BBD  
                                      STR_44 3BE0                                        STR_36 3800  
                                      STR_28 3937                                        STR_60 3B3E  
                                      STR_52 3BC2                                        STR_45 3BDB  
                                      STR_37 3AB2                                        STR_29 3ACB  
                                      STR_61 3ABF                                        STR_53 3BB8  
                                      STR_38 385D                                        STR_70 3B8A  
                                      STR_62 3A98                                        STR_54 3BCC  
                                      STR_46 3BD1                                        STR_39 287D  
                                      STR_71 3B75                                        STR_63 3B13  
                                      STR_55 3B4E                                        STR_47 3BC7  
                                      STR_64 3B1C                                        STR_80 382F  
                                      STR_72 3B01                                        STR_56 3B46  
                                      STR_48 3BAE                                        STR_65 3B1C  
                                      STR_81 398D                                        STR_73 3B7C  
                                      STR_57 3B0A                                        STR_49 3BD6  
                                      STR_66 3B1C                                        STR_82 39DD  
                                      STR_74 3BA9                                        STR_58 3AE2  
                                      STR_67 3B1C                                        STR_83 3B6E  
                                      STR_75 3AED                                        STR_59 3AD7  
                                      STR_68 3B1C                                        STR_76 3B91  
                                      STR_69 3C02                                        STR_77 3B2E  
                                      STR_78 3B83                                        STR_79 3B36  
                           _schedulerExecute 23C3                                        _T2CON 001F  
                    _flashy_leds_state_track 00B0                                        _T4CON 0417  
                             __CFG_DEBUG$OFF 0000                              __end_of___lwdiv 3714  
                            __end_of___lwmod 361C                                        i1l363 0011  
                                      _OSCEN 091D                                        _TMR0H 0016  
                                      _TMR0L 0015                               _led_roundabout 28E7  
                       ?_menu_display_option 004C               nullifyBadge_irTxRegister@badge 0071  
                 __end_of_scheduler_TaskInit 3785                                        _TRISA 008C  
                                      _TRISB 008D                                        _TRISC 008E  
           __size_of_nullifyBadge_buttonsGet 0031            __size_of_TMR0_SetInterruptHandler 0006  
                            _TMR4_Initialize 32A8                              _PWM6_Initialize 32CA  
                        ___lmul@multiplicand 0075                    ?_TMR0_SetInterruptHandler 0071  
                      _displayL2_ForceUpdate 3228                       ??_locked_get_lock_leds 0073  
                           __end_of_TMR0_ISR 32FB                                 _badge_locked 00C4  
                               ?_matrix_Main 0052                                 ?_locked_Main 0052  
                               ?_matrix_Init 0039                                 ?_locked_Init 0039  
                      ?_displayL1_Initialize 0070                              __end_of_dpowers 280A  
                    _SPI1_Exchange8bitBuffer 2BA7                               _WDT_Initialize 321E  
                            __end_of_isdigit 3309                              __end_of_marquee 2349  
                                      _randx 00CC                         matrix_Main@holdvalue 0059  
                                      pclath 000A           __size_of_nullifyBadge_platformInit 0055  
                                      status 0003                                        wtemp0 007E  
                            __end_of_sprintf 1B8F                              _TMR2_StartTimer 3215  
          __size_of_nullifyBadge_irTxRelease 000B                             _menu_option_size 00B4  
                  ?_nullifyBadge_irTxRelease 0070                     __size_of_SPI1_Initialize 0008  
                     menu_Main@buttonPressed 0056                 displayL1_SetSegChar@charData 0028  
                      ?_displayL1_SetSegChar 0020                              __initialization 0018  
                          ?_displayL1_Update 0070                                 __end_of_main 0769  
                               __end_of_rand 29AD                        ?_displayL2_Initialize 0070  
                          ?_displayL2_PutStr 0030                       __size_of_let_alternate 0014  
                     ?_displayL2_ClrUserLeds 0070               __end_of_locked_get_unlock_leds 344C  
                         ??_displayL1_Update 0079                      __end_of_TMR2_Initialize 327D  
                      ?_displayL1_SetUserLed 0071                  ?_INTERRUPT_InterruptManager 0070  
                         ??_displayL2_PutStr 0032             displayCharReverse@retValUpperRev 007A  
                            ?_scheduler_Init 0070                       __end_of_led_roundabout 2928  
                                     ??_main 006E                                       ??_rand 0026  
                              slot_Main@data 0065                         _nullifyBadge_irTxClr 321B  
                      ??_menu_display_option 007C                         _nullifyBadge_irTxSet 2882  
                               ?_secret_Main 0052                                 ?_secret_Init 0039  
            __size_of_slot_Running_Animation 0046                       __end_of_WDT_Initialize 3222  
                              slot_Init@data 003B        __end_of_nullifyBadge_segDisplayPutStr 3287  
     __size_of_nullifyBadge_segDisplayPutStr 000A                _nullifyBadge_segDisplayPutStr 327D  
                    __end_of_TMR0_StartTimer 3215                              scheduler_Init@k 0073  
             nullifyBadge_platformInit@badge 002C                                       _CCPR1H 0292  
                                     _CCPR2H 0296                                       _CCPR1L 0291  
                                     _CCPR2L 0295                                       _ANSELA 018C  
                                     _ANSELB 018D                                       _ANSELC 018E  
                                     _T0CON0 0017                                       _T0CON1 0018  
                           ?_PWM1_Initialize 0070                                       _ODCONA 028C  
                                     _ODCONB 028D                                       _ODCONC 028E  
                    __end_of_PWM5_Initialize 32CA                  __end_of_TMR0_Read16bitTimer 34BA  
                                     _OSCFRQ 091F                                       _WDTCON 0097  
                  matrix_secret_check@inputs 0027                    locked_secret_check@inputs 0027  
                            _TMR4_StartTimer 3218                        SPI1_Exchange8bit@data 0071  
                          _scheduler_TaskAdd 2349                     __size_of_menu_run_option 004A  
                   __end_of_locked_lock_leds 3482            __end_of_nullifyBadge_platformInit 2D45  
                 __size_of_SPI1_Exchange8bit 0009                            _scheduler_TaskRun 2885  
                             __CFG_PWRTE$OFF 0000                  __end_of_locked_secret_check 2645  
                __end_of_matrix_secret_check 2700                           ?_scheduler_TaskAdd 003F  
                         ?_scheduler_TaskRun 0070                      _slot_Finished_Animation 359E  
                                     ___bmul 3366                             __end_of_led_rand 2AC8  
                                     ___lmul 367C                                    ??___almod 0079  
                   locked_get_lock_leds@leds 0077                                   _Shot_Index 007C  
                                     ___wmul 344C                               __CFG_STVREN$ON 0000  
                   locked_get_lock_leds@size 0075                                       _deaths 00AA  
                       __size_of_flashy_Main 07E7                         __size_of_flashy_Init 0096  
                                  ??___lwdiv 0075                                    ??___lwmod 0079  
                      _flashy_display_option 2200                             ?_TMR0_Initialize 0070  
                           ?_PWM2_Initialize 0070                                ?_locked_clear 0039  
                                     _memset 341B                      __end_of_PWM6_Initialize 32D6  
                    __end_of_TMR4_Initialize 32B3                          ??_scheduler_TaskAdd 0040  
           nullifyBadge_segDisplayPutStr@str 0037             __end_of_nullifyBadge_userLedsClr 3240  
           __end_of_nullifyBadge_userLedsSet 3366                          ??_scheduler_TaskRun 007C  
                            ?_led_roundabout 0030                        ?_nullifyBadge_irTxClr 0070  
                               __pdataBANK10 0520                        ?_nullifyBadge_irTxSet 0070  
                                     _strlen 34D8                                 __pdataBIGRAM 26F0  
                       __size_of_led_curtain 0041                                   _Slot_Wheel 0332  
                     ?_displayL2_ForceUpdate 0070                                    ??_isdigit 0071  
                                  ??_marquee 003E                    ??_SPI1_Exchange8bitBuffer 0074  
                            ?_WDT_Initialize 0070                       ??_displayL1_Initialize 007B  
                      _displayL2_SetUserLeds 34F6                TMR0_Read16bitTimer@readValLow 007A  
                      __end_of_TMR0_CallBack 3292                                _let_alternate 33AF  
                    __end_of_TMR2_StartTimer 3218     TMR0_SetInterruptHandler@InterruptHandler 0071  
                                  ??_sprintf 003B                   ?_displayL2_EraseSegDisplay 0070  
                 __end_of_nullifyBadge_irGet 1805                         locked_lock_leds@size 0073  
                          _SYSTEM_Initialize 3532             displayL2_EraseSegDisplay@display 0037  
                 ?_nullifyBadge_irTxRegister 0070                            _menu_options_leds 0220  
                  __end_of_scheduler_TaskAdd 23C3                      __end_of__initialization 00E6  
                  secret_check@buttonPressed 0079                    __end_of_scheduler_TaskRun 28A6  
                     menu_display_option@led 0050                      _roundabout_leds_inverse 03A0  
                         ?_SYSTEM_Initialize 0070                   __end_of_PWM2_LoadDutyValue 33EF  
                     _slot_Running_Animation 29AD                       ??_displayL1_SetSegChar 0022  
                PWM1_LoadDutyValue@dutyValue 0071                    secret_check@currents_size 0025  
                        ___bmul@multiplicand 0071                                led_rand@spark 003B  
                     ??_displayL2_Initialize 007C                            _displayL2_PutChar 2BF5  
                             __pcstackCOMMON 0070                  displayL1_SetSegChar@charPos 0021  
                __size_of_displayCharReverse 002F                                 __pidataBANK1 3335  
                               __pidataBANK2 3240                                 __pidataBANK3 3514  
                               __pidataBANK4 29F3                                 __pidataBANK5 0800  
                               __pidataBANK6 2AC8                                 __pidataBANK7 2B5B  
                               __pidataBANK8 3714                          ??_SYSTEM_Initialize 0073  
                                  ?_TMR0_ISR 0070                       ??_displayL1_SetUserLed 0073  
                         ?_displayL2_PutChar 002A                                   _badge_inst 01B2  
                             ??_locked_clear 007C                            ??_SPI1_Initialize 0071  
                displayL1_SetSegChar@display 0027                           _PWM1_LoadDutyValue 33C3  
                      scheduler_TaskAdd@task 003F                             ?_TMR2_Initialize 0070  
                        matrix_Init@taskData 0039                          locked_Init@taskData 0039  
                        _flashy_sparkle_rate 00AE         __end_of_nullifyBadge_segDisplayErase 323A  
      __size_of_nullifyBadge_segDisplayErase 0006                 _nullifyBadge_segDisplayErase 3234  
                    _nullifyBadge_buttonsGet 364B                          ??_displayL2_PutChar 002B  
                        ?_PWM1_LoadDutyValue 0071                               ?_let_alternate 0030  
                         _gamma_table_256x1k 2000                             ?_TMR0_StartTimer 0070  
                    ??_matrix_display_option 004E                      __end_of_TMR4_StartTimer 321B  
                  __end_of_SYSTEM_Initialize 3553                           led_curtain@counter 0030  
                               sprintf@width 0048                                _menu_TaskData 02BC  
                                 __pbssBANK1 00A0                                   __pbssBANK2 0120  
                                 __pbssBANK3 01A0                                   __pbssBANK5 02A0  
                                 __pbssBANK9 04A0                         __size_of_locked_Main 027A  
                       __size_of_matrix_Main 0735                         __size_of_locked_Init 0065  
                       __size_of_matrix_Init 00A0                          secret_Main@taskData 0052  
                           ?_PWM5_Initialize 0070               ?_nullifyBadge_segDisplayPutStr 0037  
                          _flashy_option_idx 00A8                     __end_of_schedulerExecute 2447  
                      _TMR4_InterruptHandler 0124           nullifyBadge_userLedsRegister@badge 0071  
                         __size_of_menu_Main 01F7                           __size_of_menu_Init 0062  
                  __end_of_displayL2_PutChar 2C47                    ??_slot_Finished_Animation 003F  
                              ?_secret_check 0077                         ??_PWM1_LoadDutyValue 0073  
                              ?_secret_clear 0071                               _SSP1DATPPSbits 0E21  
                            _secret_TaskData 02A0                                   __pmaintext 0666  
                                    ?___bmul 0071             __end_of_TMR0_SetInterruptHandler 3228  
                                    ?___lmul 0071                       ?_flashy_display_option 004C  
                                    ?___wmul 0071                        scheduler_TaskRun@task 0067  
                                 ??_TMR0_ISR 0070                              __CFG_PPS1WAY$ON 0000  
                 __end_of_PWM6_LoadDutyValue 341B                                   __pintentry 0004  
                          ??_menu_run_option 007C                                      _CCP1CON 0293  
                                    _CCP2CON 0297                                      ?_memset 0071  
                             ___lmul@product 0020                       ??_nullifyBadge_irTxClr 0071  
                           ?_TMR4_Initialize 0070                             ?_PWM6_Initialize 0070  
                     ??_nullifyBadge_irTxSet 0071                               _SSP1CLKPPSbits 0E20  
                        __CFG_RSTOSC$HFINT32 0000                                      ?_strlen 0071  
                                 _led_Parody 2EC8                ?_nullifyBadge_segDisplayErase 0070  
                     ?_displayL2_SetUserLeds 002B                           _PWM5_LoadDutyValue 33EF  
                                    _OSCCON1 0919                     displayL2_PutChar@display 002F  
                                    _OSCCON3 091B                           __size_of_slot_Main 057C  
                         __size_of_slot_Init 0064                                      _NVMADRH 0892  
                  matrix_display_option@data 004C                                      _NVMADRL 0891  
                                    _NVMDATH 0894                                      _OSCTUNE 091E  
                                    _NVMDATL 0893                                      _NVMCON2 0896  
                                    _PWM5DCH 0618                                      _PWM5DCL 0617  
                                    _PWM6DCH 061B                                      _PWM6DCL 061A  
                                    _PWM5CON 0619                                      _PWM6CON 061C  
                                    _SSP1ADD 0212                         __size_of_secret_Main 01BD  
                                    _PPSLOCK 0E0F                                      _SSP1BUF 0211  
                                 _led_circle 3260                         __size_of_secret_Init 005B  
                           ?_TMR2_StartTimer 0070                                _matrix_option 03D8  
                                  ?_led_rand 0070                          ?_PWM5_LoadDutyValue 0071  
                    _FLASHY_TEXT_SECRET_TEST 00D4                     flashy_Main@buttonPressed 005C  
                 __size_of_scheduler_TaskAdd 007A            __size_of_nullifyBadge_userLedsClr 0006  
                 __size_of_scheduler_TaskRun 0021            __size_of_nullifyBadge_userLedsSet 0011  
                         _scheduler_TaskInit 374C                    ?_nullifyBadge_userLedsClr 0070  
                  ?_nullifyBadge_userLedsSet 002D                               ??_secret_check 0020  
                             ??_secret_clear 0073                      ??_displayL2_ClrUserLeds 007B  
               displayL2_SetUserLeds@display 007B                             ??_scheduler_Init 0071  
                        ?_scheduler_TaskInit 0070                              __size_of___bmul 0011  
                                    ___almod 2F92                              __size_of___lmul 0032  
                            __size_of___wmul 001B              ??_nullifyBadge_userLedsRegister 0071  
                                    ___lwdiv 36E0                           scheduler_TaskAdd@k 0047  
                                    ___lwmod 35EF                         ??_PWM5_LoadDutyValue 0073  
                __size_of_locked_unlock_leds 0013                    ??_nullifyBadge_buttonsGet 0071  
                            _roundabout_leds 03BC                      scheduler_Init@scheduler 0072  
                            __size_of_memset 0018                        displayL1_SetSegChar@c 0020  
                            _matrix_TaskData 04A0                              _locked_TaskData 02AE  
                                 _menu_clear 2A39                                      __ptext1 374C  
                                    __ptext2 2349                                      __ptext3 2447  
                                    __ptext4 2D45                                      __ptext5 2F2D  
                                    __ptext6 2E02                                      __ptext7 0769  
                                    __ptext8 2E64                                      __ptext9 3326  
                            __size_of_strlen 001E              __end_of_slot_Finished_Animation 35C5  
                                    _dpowers 2800                               slot_Setup@data 0034  
                      _OSCILLATOR_Initialize 3269                                      _oddeven 00B8  
                                  _T2CONbits 001F                            __end_of_menu_Main 1D86  
                          __end_of_menu_Init 2E64                                      _isdigit 32FB  
                            ??_let_alternate 007C                                      _marquee 22D2  
                                  _T4CONbits 0417                     ??_PIN_MANAGER_Initialize 0071  
    nullifyBadge_segDisplayForceUpdate@badge 002B                    __size_of_displayL1_Update 0011  
                       ??_scheduler_TaskInit 0071                    __size_of_displayL2_PutStr 002A  
                 __size_of_SYSTEM_Initialize 0021                                      _sprintf 19C2  
                                    clrloop0 32D7                             ?_TMR4_StartTimer 0070  
              __size_of_locked_get_lock_leds 0025                          displayL2_PutStr@str 0030  
                                 ??_led_rand 0033                         end_of_initialization 00E6  
                       __end_of_locked_clear 296A                                      init_ram 32E2  
                                    memset@c 0073                                      memset@n 0075  
                                    memset@p 0077                                secret_check@i 0028  
                                    initloop 32E3                                 marquee@count 003C  
                 __size_of_displayL2_PutChar 0052                            ?_locked_lock_leds 0070  
                          __end_of_slot_Main 0666                            __end_of_slot_Init 2EC8  
                           ??_led_roundabout 0032                           ??_locked_lock_leds 0071  
                            _matrix_leds_idx 00A0               TMR0_Read16bitTimer@readValHigh 007B  
                __end_of_menu_display_option 2E02                       slot_Main@buttonPressed 0064  
                                    strlen@s 0071                      ??_displayL2_ForceUpdate 007B  
                    __size_of_marquee_speedy 0073                           secret_check@inputs 0027  
                           ??_WDT_Initialize 0071                     _TMR0_SetInterruptHandler 3222  
                                  _PORTAbits 000C                                    _PORTBbits 000D  
                                  _PORTCbits 000E                nullifyBadge_userLedsClr@badge 002B  
                                ?_led_Parody 0030                                   _slot_Setup 2C47  
                    displayL1_Update@display 002A                                  ?_led_circle 0030  
                    menu_display_option@data 004C               ??_nullifyBadge_segDisplayErase 007C  
                    menu_display_option@size 004E                             __CFG_FEXTOSC$OFF 0000  
                ??_displayL2_EraseSegDisplay 007C              __end_of_nullifyBadge_buttonsGet 367C  
                              _schedulerInst 01A0                     _nullifyBadge_irTxRelease 32B3  
                    ?_slot_Running_Animation 0032                  ??_nullifyBadge_irTxRegister 0071  
                                _CCP1CONbits 0293                              _SPI1_Initialize 3247  
                                _CCP2CONbits 0297                            slot_Main@taskData 0052  
                              ??_flashy_Main 0054                                ??_flashy_Init 007C  
                 ?_nullifyBadge_platformInit 0070                 __size_of_TMR0_Read16bitTimer 001D  
                   __size_of_PWM1_Initialize 000B                          secret_Init@taskData 0039  
                       _timer0ReloadVal16bit 00C0                           _nullifyBadge_irGet 1800  
                            flashy_Main@data 005E                                __pidataBANK10 3785  
                             __end_of___bmul 3377                nullifyBadge_userLedsSet@badge 002F  
                             __end_of___lmul 36AE                                __pidataBIGRAM 2700  
                              ??_led_curtain 0032                               __end_of___wmul 3467  
            slot_Finished_Animation@taskData 003D                       flashy_Main@hit_counter 0056  
                          __size_of_TMR0_ISR 000D                           _PWM2_LoadDutyValue 33D9  
               __size_of_locked_secret_check 00BB                 __size_of_matrix_secret_check 00BB  
                                ?_menu_clear 0039                       ?_OSCILLATOR_Initialize 0070  
                             __end_of_memset 3433                          ?_nullifyBadge_irGet 0070  
                            flashy_Init@data 003B        __end_of_nullifyBadge_userLedsRegister 3335  
     __size_of_nullifyBadge_userLedsRegister 000F                _nullifyBadge_userLedsRegister 3326  
                       __end_of_secret_check 10CB                              _menu_option_idx 00B6  
                       __end_of_secret_clear 36E0                               __end_of_strlen 34F6  
                        start_initialization 0018                     __size_of_PWM2_Initialize 000B  
                   __size_of_TMR0_Initialize 001E                          ?_PWM2_LoadDutyValue 0071  
            __size_of_PIN_MANAGER_Initialize 0055                         marquee_speedy@F14090 0169  
              __size_of_displayL1_Initialize 0013               __end_of_slot_Running_Animation 29F3  
                       _matrix_secret_inputs 02CA                         _locked_secret_inputs 024D  
             __size_of_matrix_display_option 00A3                __end_of_matrix_display_option 258A  
                       ??_nullifyBadge_irGet 0071                              _menu_run_option 2B11  
                          ?_schedulerExecute 0070                      ??_flashy_display_option 007C  
                 __end_of_displayCharReverse 364B                     ??_locked_get_unlock_leds 0073  
                        __size_of_led_Parody 0065                           led_roundabout@leds 0034  
                           __CFG_LPBOREN$OFF 0000                           led_roundabout@size 0036  
                         _flashy_scroll_rate 00AC                         ??_PWM2_LoadDutyValue 0073  
                              _secret_inputs 0234                           ??_schedulerExecute 0068  
                  flashy_display_option@data 004C                __size_of_displayL1_SetSegChar 0041  
                                   ??___bmul 0072                  PWM2_LoadDutyValue@dutyValue 0071  
                                   ??___lmul 0079                   slot_Running_Animation@data 0036  
                                   ??___wmul 0075                    _displayL2_EraseSegDisplay 1000  
                                _CCPTMRSbits 029F                          __size_of_led_circle 0009  
              __size_of_displayL2_Initialize 0026                       __size_of_TMR0_CallBack 000B  
                                __pdataBANK1 00C7                                  __pdataBANK2 0169  
                                __pdataBANK3 01D1                                  __pdataBANK4 0220  
                                __pdataBANK5 02CA                                  __pdataBANK6 0320  
                                __pdataBANK7 03A0                                  __pdataBANK8 0420  
                                   ??_memset 0077                    _nullifyBadge_irTxRegister 3317  
              __size_of_displayL1_SetUserLed 0012                          __end_of_flashy_Main 1000  
                        __end_of_flashy_Init 07FF                     ?_SPI1_Exchange8bitBuffer 0072  
                    ??_displayL2_SetUserLeds 007B                             secret_check@data 0077  
                                   ??_strlen 0073                             secret_check@size 0023  
                                __pbssBANK11 05A0                    schedulerExecute@scheduler 00DC  
         nullifyBadge_segDisplayPutStr@badge 0039                  PWM5_LoadDutyValue@dutyValue 0071  
                       marquee_speedy@string 003A                                  __pbssCOMMON 007C  
                                ?_slot_Setup 002F                    schedulerExecute@tickDelta 00DA  
                                  ___latbits 0003                          __end_of_led_curtain 28E7  
                              __pcstackBANK0 0020                                __pcstackBANK1 00D6  
                      __size_of_locked_clear 0042                             _displayL1_Update 3344  
                         _PWM6_LoadDutyValue 3405                     __size_of_TMR2_Initialize 000A  
                              ??_matrix_Main 0054                                ??_locked_Main 0054  
                           _displayL2_PutStr 35C5                                ??_matrix_Init 003B  
                              ??_locked_Init 007C                       scheduler_TaskInit@task 0071  
                           secret_clear@data 0071                      __end_of_SPI1_Initialize 324F  
                               _isdigit$3635 0071                         _asciiCharTableLookup 26F0  
                      _locked_lock_base_leds 00D2                           _flashy_option_size 00A6  
           matrix_secret_check@buttonPressed 0079             locked_secret_check@buttonPressed 0079  
                    matrix_secret_check@data 0077                      locked_secret_check@data 0077  
                               _curtain_leds 043C                          ?_PWM6_LoadDutyValue 0071  
                    matrix_secret_check@size 0023                      locked_secret_check@size 0023  
           displayL2_SetUserLeds@userLedData 002B                                  sprintf@flag 0040  
                          __size_of_led_rand 0048                                  sprintf@prec 003F  
           matrix_secret_check@currents_size 0025             locked_secret_check@currents_size 0025  
                        __size_of_menu_clear 0047                        _TMR0_InterruptHandler 00BE  
                   __size_of_TMR0_StartTimer 0003                  __size_of_PWM1_LoadDutyValue 0016  
                           ___lwdiv@dividend 0073                       _PIN_MANAGER_Initialize 2C9B  
                                _FLASHY_TEXT 016E                     __size_of_PWM5_Initialize 000C  
                          menu_Main@taskData 0052               __size_of_displayL2_ClrUserLeds 000E  
              __end_of_displayL2_ClrUserLeds 3317                  displayL1_SetUserLed@display 0074  
                                   ?___almod 002B                                    __ptext100 33EF  
                                  __ptext101 33D9                                    __ptext102 33C3  
                                  __ptext104 32EE                                    __ptext105 3287  
                                  __ptext106 07FF                            schedulerExecute@k 00DD  
                                   ?___lwdiv 0071                                     ?___lwmod 002B  
                             _marquee_speedy 225F                         ??_PWM6_LoadDutyValue 0073  
                               _locked_clear 2928                            ??_PWM1_Initialize 0071  
               ??_INTERRUPT_InterruptManager 0070                             ___almod@dividend 002F  
                               _matrix_found 00C2                            marquee@multiplier 0044  
                                  __pswtext1 3000                       displayCharReverse@cVal 0071  
              __size_of_nullifyBadge_irTxClr 0003                __size_of_nullifyBadge_irTxSet 0003  
                              ??_secret_Main 0054                                ??_secret_Init 007C  
                        _locked_locking_leds 01E3                                     ?_isdigit 0070  
                                   ?_marquee 003A                     __size_of_PWM6_Initialize 000C  
                   __size_of_TMR4_Initialize 000B               ?_nullifyBadge_userLedsRegister 0070  
                displayL2_Initialize@display 002B                      __end_of_menu_run_option 2B5B  
                           ___lwdiv@quotient 0077                              secret_Main@data 0058  
                                  _menu_Main 1B8F                         matrix_secret_check@i 0028  
                       locked_secret_check@i 0028                                    _menu_Init 2E02  
              nullifyBadge_irTxRelease@badge 0072                                    _menu_Exit 0000  
                                   ?_sprintf 002F                          flashy_Main@taskData 0052  
                              _TMR0_CallBack 3287                           displayL2_PutChar@c 002A  
                         displayL2_PutChar@k 002E                                    _menu_task 014F  
    displayL1_SetSegChar@dispDataVectBaseIdx 0026                     ?_slot_Finished_Animation 003D  
                          ??_TMR0_Initialize 0073                            ??_PWM2_Initialize 0071  
                            secret_Init@data 003B                SPI1_Exchange8bitBuffer@dataIn 0077  
                             ___wmul@product 0075                          __end_of_locked_Main 2000  
                        __end_of_matrix_Main 1800                          __end_of_locked_Init 2F92  
                        __end_of_matrix_Init 24E7                                     _LATBbits 010D  
                                   _LATCbits 010E                SPI1_Exchange8bitBuffer@bufLen 0072  
                                  clear_ram0 32D6                                     _PIE0bits 0090  
                   __size_of_TMR2_StartTimer 0003          __size_of_INTERRUPT_InterruptManager 0012  
                 ??_TMR0_SetInterruptHandler 0073              __size_of_locked_get_unlock_leds 0019  
                                   _PIR0bits 0010                                     _PIR1bits 0011  
                                   _PIR2bits 0012                                  _flashy_Main 0819  
                                _flashy_Init 0769                                  _flashy_Exit 0000  
                        __size_of_slot_Setup 0054                   TMR0_Read16bitTimer@readVal 0078  
                 __end_of_locked_unlock_leds 33AF                   scheduler_TaskAdd@scheduler 0046  
            __end_of_SPI1_Exchange8bitBuffer 2BF5                 __end_of_locked_get_lock_leds 3578  
                     __end_of_marquee_speedy 22D2                                  _flashy_task 015C  
                                   _SSP1CON1 0215                                     _TMR0_ISR 32EE  
                                   _SSP1STAT 0214                            slot_Init@taskData 0039  
                __size_of_PWM5_LoadDutyValue 0016                        __size_of_secret_check 00BB  
                                  _slot_Main 00EA                        __size_of_secret_clear 0032  
                                  _slot_Init 2E64                                    _slot_Exit 0000  
                                _led_curtain 28A6              displayL1_SetUserLed@userLedVect 0071  
                            _flashy_TaskData 04BF                                    _slot_task 0142  
          schedulerExecute@currentSystemTick 00D6                            ___wmul@multiplier 0071  
             __size_of_displayL2_ForceUpdate 0006                __end_of_displayL2_ForceUpdate 322E  
                          _Shot_Options_Long 0320                                 ??_led_Parody 0032  
                 ??_nullifyBadge_irTxRelease 0071                    __size_of_locked_lock_leds 001B  
          nullifyBadge_segDisplayErase@badge 0038                     matrix_Main@buttonPressed 0058  
                   locked_Main@buttonPressed 0056                          _TMR0_Read16bitTimer 349D  
                      __end_of_let_alternate 33C3                                 ??_led_circle 007C  
                            led_circle@count 0030                  __size_of_scheduler_TaskInit 0039  
                             ?_TMR0_CallBack 0070                                   ?_menu_Main 0052  
                                 ?_menu_Init 0039                             ?_SPI1_Initialize 0070  
                   _nullifyBadge_userLedsClr 323A                            ___lmul@multiplier 0071  
                      led_roundabout@counter 0030                     _nullifyBadge_userLedsSet 3355  
                        __end_of_secret_Main 19C2                          __end_of_secret_Init 2DA0  
                                   _Leds_idx 00D0                          _locked_secret_check 258A  
                        _matrix_secret_check 2645                            ??_TMR2_Initialize 0071  
                   secret_Main@buttonPressed 0057                   locked_get_unlock_leds@leds 0073  
                   __size_of_TMR4_StartTimer 0003                                 _secret_check 1010  
                               _secret_clear 36AE                         ?_TMR0_Read16bitTimer 0071  
                         __end_of_led_Parody 2F2D                              marquee_speedy@i 0046  
                            marquee_speedy@j 004A                  ??_nullifyBadge_platformInit 007C  
                   ?_nullifyBadge_buttonsGet 0070                                 _secret_value 00C5  
                            _flashy_leds_idx 00B2   __end_of_nullifyBadge_segDisplayForceUpdate 3234  
__size_of_nullifyBadge_segDisplayForceUpdate 0006         ??_nullifyBadge_segDisplayForceUpdate 007C  
        ?_nullifyBadge_segDisplayForceUpdate 0070           _nullifyBadge_segDisplayForceUpdate 322E  
                            ?_marquee_speedy 003A                      ??_OSCILLATOR_Initialize 0071  
                        marquee_speedy@count 003C                            ??_TMR0_StartTimer 0071  
                           __size_of___almod 006E                           __end_of_led_circle 3269  
                                 ?_slot_Main 0052                                   ?_slot_Init 0039  
                           __size_of___lwdiv 0034                             __size_of___lwmod 002D  
                       ?_matrix_secret_check 0077                         ?_locked_secret_check 0077  
                               ??_menu_clear 007C                            ??_PWM5_Initialize 0071  
                    __size_of_scheduler_Init 001B                                   sprintf@len 0046  
                                _currentTask 00BA                                   sprintf@val 0044  
               __size_of_menu_display_option 0062           __size_of_displayL2_EraseSegDisplay 0010  
                                 _T0CON0bits 0017                       _locked_get_unlock_leds 3433  
                           __size_of_isdigit 000E                             __size_of_marquee 0077  
                            ___lwdiv@divisor 0071                              ___lwdiv@counter 0076  
                               _Shot_Options 01D1                          displayCharReverse@k 007B  
         __size_of_nullifyBadge_irTxRegister 000F                                     __ptext10 324F  
                                   __ptext11 3482                                     __ptext20 29AD  
                                   __ptext12 23C3                                     __ptext21 359E  
                                   __ptext13 2885                                     __ptext30 339C  
                                   __ptext22 36AE                                     __ptext14 10CB  
                                   __ptext31 258A                                     __ptext23 1010  
                                   __ptext15 1805                                     __ptext40 1000  
                                   __ptext32 3366                                     __ptext24 2B11  
                                   __ptext16 1D86                                     __ptext41 19C2  
                                   __ptext33 3467                                     __ptext25 2A39  
                                   __ptext17 1B8F                                     __ptext50 33AF  
                                   __ptext42 32FB                                     __ptext34 3433  
                                   __ptext26 2DA0                                     __ptext18 0819  
                                   __ptext51 28E7                                     __ptext43 344C  
                                   __ptext35 3553                                     __ptext27 2645  
                                   __ptext19 00EA                                     __ptext60 34F6  
                                   __ptext52 2A80                                     __ptext44 2882  
                                   __ptext36 2928                                     __ptext28 24E7  
                                   __ptext61 3377                                     __ptext53 296A  
                                   __ptext45 32B3                                     __ptext37 323A  
                                   __ptext29 2C47                                     __ptext70 361C  
                                   __ptext62 2200                                     __ptext54 367C  
                                   __ptext46 3317                                     __ptext38 3309  
                                   __ptext71 322E                                     __ptext63 225F  
                                   __ptext55 2F92                                     __ptext47 321B  
                                   __ptext39 3234                                     __ptext80 3344  
                                   __ptext72 3228                                     __ptext64 22D2  
                                   __ptext56 28A6                                     __ptext48 1800  
                                   __ptext81 2BA7                                     __ptext73 35EF  
                                   __ptext65 34D8                                     __ptext57 3260  
                                   __ptext49 364B                                     __ptext90 3212  
                                   __ptext82 3257                                     __ptext74 36E0  
                                   __ptext66 327D                                     __ptext58 2EC8  
                                   __ptext91 3222                                     __ptext83 3532  
                                   __ptext75 349D                                     __ptext67 35C5  
                                   __ptext59 3355                                     __ptext92 3247  
                                   __ptext84 321E                                     __ptext76 2CF0  
                                   __ptext68 2BF5                                     __ptext93 32CA  
                                   __ptext85 32A8                                     __ptext77 3578  
                                   __ptext69 37BF                                     __ptext94 32BE  
                                   __ptext86 3218                                     __ptext78 3389  
                                   __ptext95 329D                                     __ptext87 3273  
                                   __ptext79 341B                                     __ptext96 3292  
                                   __ptext88 3215                                     __ptext97 2C9B  
                                   __ptext89 34BA                                     __ptext98 3269  
                                   __ptext99 3405                                  _matrix_Main 10CB  
                                _locked_Main 1D86                                  _matrix_Init 2447  
                                _locked_Init 2F2D                           slot_Setup@taskData 002F  
                                _matrix_Exit 0000                                  _locked_Exit 0000  
                               _SSP1CON1bits 0215                             ?_menu_run_option 003B  
                                _locked_leds 00A2                                  _matrix_task 01C4  
                                _locked_task 0135                              ___almod@divisor 002B  
                                   _led_rand 2A80                             __size_of_sprintf 01CD  
                            ___almod@counter 007A               slot_Running_Animation@taskData 0032  
                                _menu_option 022A      __end_of_nullifyBadge_segDisplayRegister 3257  
   __size_of_nullifyBadge_segDisplayRegister 0008            ??_nullifyBadge_segDisplayRegister 0071  
           ?_nullifyBadge_segDisplayRegister 0070              _nullifyBadge_segDisplayRegister 324F  
                       marquee@string_length 0048                                menu_Main@data 0057  
                          ??_TMR4_Initialize 0071                            ??_PWM6_Initialize 0071  
                              __size_of_main 0103                                __size_of_rand 0043  
       __end_of_TMR0_DefaultInterruptHandler 0800        __size_of_TMR0_DefaultInterruptHandler 0001  
               _TMR0_DefaultInterruptHandler 07FF                           __end_of_menu_clear 2A80  
                          displayL2_PutStr@k 0036                        ??_TMR0_Read16bitTimer 0073  
                                 _RC0PPSbits 0EA0                                marquee@F14099 00C7  
                                 _RC1PPSbits 0EA1                                menu_Init@data 003B  
                   __end_of_displayL1_Update 3355                           let_alternate@count 0030  
                                 _RC2PPSbits 0EA2               __size_of_flashy_display_option 005F  
                   __end_of_displayL2_PutStr 35EF                __end_of_flashy_display_option 225F  
                                 _RC3PPSbits 0EA3                 __end_of_displayL1_Initialize 339C  
                       _curtain_leds_inverse 0420                                     _pw_found 00C3  
                                 _RC4PPSbits 0EA4                                   _RB6PPSbits 0E9E  
                                   int$flags 007E                 displayL2_ForceUpdate@display 007B  
                            matrix_Main@data 005A                              locked_Main@data 0057  
                          ??_TMR2_StartTimer 0071           __end_of_INTERRUPT_InterruptManager 0016  
                 _INTERRUPT_InterruptManager 0004                        ??_matrix_secret_check 0020  
                      ??_locked_secret_check 0020                                 _SSP1STATbits 0214  
       nullifyBadge_segDisplayRegister@badge 0071                  PIN_MANAGER_Initialize@state 0071  
         schedulerExecute@taskLastSystemTick 00D8                           _displayCharReverse 361C  
                          menu_Init@taskData 0039                    __size_of_schedulerExecute 0084  
             __size_of_displayL2_SetUserLeds 001E                              matrix_Init@data 003D  
                            locked_Init@data 003B                __end_of_displayL2_SetUserLeds 3514  
              displayCharReverse@retValLower 0078                displayCharReverse@retValUpper 0079  
                                 _INTCONbits 000B                                  _secret_Main 1805  
                    __size_of_led_roundabout 0041                                  _secret_Init 2D45  
                               ??_slot_Setup 0031                                  _secret_Exit 0000  
                            ??_TMR0_CallBack 0070                                  _NVMCON1bits 0895  
                  _nullifyBadge_platformInit 2CF0                 __end_of_displayL1_SetSegChar 3800  
                                _secret_task 0128                               __pstringtext10 3919  
                             __pstringtext11 3937                               __pstringtext20 3A1F  
                             __pstringtext12 3954                               __pstringtext21 3A32  
                             __pstringtext13 3971                               __pstringtext30 3ABF  
                             __pstringtext22 3A45                               __pstringtext14 398D  
                             __pstringtext31 3ACB                               __pstringtext23 3A57  
                             __pstringtext15 39A8                               __pstringtext40 3B25  
                             __pstringtext32 3AD7                               __pstringtext24 3A68  
                             __pstringtext16 39C3                               __pstringtext41 3B2E  
                             __pstringtext33 3AE2                               __pstringtext25 3A79  
                             __pstringtext17 39DD                               __pstringtext50 3B75  
                             __pstringtext42 3B36                               __pstringtext34 3AED  
                             __pstringtext26 3A89                               __pstringtext18 39F4  
                             __pstringtext51 3B7C                               __pstringtext43 3B3E  
                             __pstringtext35 3AF7                               __pstringtext27 3A98  
                             __pstringtext19 3A0A                               __pstringtext60 3BB3  
                             __pstringtext52 3B83                               __pstringtext44 3B46  
                             __pstringtext36 3B01                               __pstringtext28 3AA5  
                             __pstringtext61 3BB8                               __pstringtext53 3B8A  
                             __pstringtext45 3B4E                               __pstringtext37 3B0A  
                             __pstringtext29 3AB2                               __pstringtext70 3BE5  
                             __pstringtext62 3BBD                               __pstringtext54 3B91  
                             __pstringtext46 3B56                               __pstringtext38 3B13  
                             __pstringtext71 3BEA                               __pstringtext63 3BC2  
                             __pstringtext55 3B97                               __pstringtext47 3B5E  
                             __pstringtext39 3B1C                               __pstringtext72 3BEF  
                             __pstringtext64 3BC7                               __pstringtext56 3B9D  
                             __pstringtext48 3B66                               __pstringtext73 3BF4  
                             __pstringtext65 3BCC                               __pstringtext57 3BA3  
                             __pstringtext49 3B6E                               __pstringtext74 3BF9  
                             __pstringtext66 3BD1                               __pstringtext58 3BA9  
                             __pstringtext75 3BFE                               __pstringtext67 3BD6  
                             __pstringtext59 3BAE                               __pstringtext76 3C02  
                             __pstringtext68 3BDB                               __pstringtext77 0000  
                             __pstringtext69 3BE0            __end_of_displayL2_EraseSegDisplay 1010  
                                   isdigit@c 0072                                     marquee@i 0046  
                                   marquee@j 004A                                     memset@p1 0071  
               __end_of_displayL2_Initialize 359E                          ?_displayCharReverse 0071  
                                ??_menu_Main 0054                                  ??_menu_Init 007C  
                    __size_of_WDT_Initialize 0004                         _locked_get_lock_leds 3553  
          __end_of_nullifyBadge_irTxRegister 3326             __size_of_SPI1_Exchange8bitBuffer 004E  
               __end_of_displayL1_SetUserLed 3389                                     intlevel1 0000  
                                  sprintf@ap 0043                                    sprintf@cp 0041  
                                  sprintf@sp 002F                             ___lwmod@dividend 002D  
                    ?_PIN_MANAGER_Initialize 0070                                marquee@string 003A  
                __size_of_nullifyBadge_irGet 0005                            __CFG_CLKOUTEN$OFF 0000  
                      _matrix_display_option 24E7          SPI1_Exchange8bitBuffer@bytesWritten 0078  
                                _PPSLOCKbits 0E0F                              _PWM1_Initialize 3292  
                        flashy_Init@taskData 0039                               menu_clear@data 0039  
              ?_TMR0_DefaultInterruptHandler 0070                  __size_of_PWM2_LoadDutyValue 0016  
                       ??_displayCharReverse 0073                           __end_of_slot_Setup 2C9B  
                          ??_TMR4_StartTimer 0071                                  ??_slot_Main 0054  
                                ??_slot_Init 007C                                __pstringtext1 2000  
                              __pstringtext2 2800                                __pstringtext3 3800  
                              __pstringtext4 382F                                __pstringtext5 385D  
                              __pstringtext6 3888                                __pstringtext7 38B0  
                              __pstringtext8 38D4                                __pstringtext9 38F7  
           __end_of_nullifyBadge_irTxRelease 32BE                                     sprintf@c 004A  
                                   sprintf@f 0031                                _flashy_option 0520  
                           _locked_lock_leds 3467                              ___lwmod@divisor 002B  
                            _TMR0_Initialize 34BA                              _PWM2_Initialize 329D  
                                   strlen@cp 0075                                _slot_TaskData 05A0  
                            ___lwmod@counter 007A                  PWM6_LoadDutyValue@dutyValue 0071  
                      ?_locked_get_lock_leds 0071               __end_of_PIN_MANAGER_Initialize 2CF0  
                         _matrix_option_size 0120                             locked_clear@data 0039  
                               ___almod@sign 007B                                  _PWMTMRSbits 061F  
               __end_of_nullifyBadge_irTxClr 321E                 __end_of_nullifyBadge_irTxSet 2885  
                 __end_of_PWM1_LoadDutyValue 33D9                            _matrix_option_idx 0122  
                      _TMR2_InterruptHandler 0126                                 ?_flashy_Main 0052  
                               ?_flashy_Init 0039  
