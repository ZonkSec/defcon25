

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Jul 25 23:24:46 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16LF18346
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBANK10,global,class=CODE,delta=2
    13                           	psect	idataBIGRAM,global,class=CODE,delta=2
    14                           	psect	stringtext1,global,class=STRCODE,delta=2
    15                           	psect	stringtext2,global,class=STRCODE,delta=2
    16                           	psect	stringtext3,global,class=STRCODE,delta=2
    17                           	psect	stringtext4,global,class=STRCODE,delta=2
    18                           	psect	stringtext5,global,class=STRCODE,delta=2
    19                           	psect	stringtext6,global,class=STRCODE,delta=2
    20                           	psect	stringtext7,global,class=STRCODE,delta=2
    21                           	psect	stringtext8,global,class=STRCODE,delta=2
    22                           	psect	stringtext9,global,class=STRCODE,delta=2
    23                           	psect	stringtext10,global,class=STRCODE,delta=2
    24                           	psect	stringtext11,global,class=STRCODE,delta=2
    25                           	psect	stringtext12,global,class=STRCODE,delta=2
    26                           	psect	stringtext13,global,class=STRCODE,delta=2
    27                           	psect	stringtext14,global,class=STRCODE,delta=2
    28                           	psect	stringtext15,global,class=STRCODE,delta=2
    29                           	psect	stringtext16,global,class=STRCODE,delta=2
    30                           	psect	stringtext17,global,class=STRCODE,delta=2
    31                           	psect	stringtext18,global,class=STRCODE,delta=2
    32                           	psect	stringtext19,global,class=STRCODE,delta=2
    33                           	psect	stringtext20,global,class=STRCODE,delta=2
    34                           	psect	stringtext21,global,class=STRCODE,delta=2
    35                           	psect	stringtext22,global,class=STRCODE,delta=2
    36                           	psect	stringtext23,global,class=STRCODE,delta=2
    37                           	psect	stringtext24,global,class=STRCODE,delta=2
    38                           	psect	stringtext25,global,class=STRCODE,delta=2
    39                           	psect	stringtext26,global,class=STRCODE,delta=2
    40                           	psect	stringtext27,global,class=STRCODE,delta=2
    41                           	psect	stringtext28,global,class=STRCODE,delta=2
    42                           	psect	stringtext29,global,class=STRCODE,delta=2
    43                           	psect	stringtext30,global,class=STRCODE,delta=2
    44                           	psect	stringtext31,global,class=STRCODE,delta=2
    45                           	psect	stringtext32,global,class=STRCODE,delta=2
    46                           	psect	stringtext33,global,class=STRCODE,delta=2
    47                           	psect	stringtext34,global,class=STRCODE,delta=2
    48                           	psect	stringtext35,global,class=STRCODE,delta=2
    49                           	psect	stringtext36,global,class=STRCODE,delta=2
    50                           	psect	stringtext37,global,class=STRCODE,delta=2
    51                           	psect	stringtext38,global,class=STRCODE,delta=2
    52                           	psect	stringtext39,global,class=STRCODE,delta=2
    53                           	psect	stringtext40,global,class=STRCODE,delta=2
    54                           	psect	stringtext41,global,class=STRCODE,delta=2
    55                           	psect	stringtext42,global,class=STRCODE,delta=2
    56                           	psect	stringtext43,global,class=STRCODE,delta=2
    57                           	psect	stringtext44,global,class=STRCODE,delta=2
    58                           	psect	stringtext45,global,class=STRCODE,delta=2
    59                           	psect	stringtext46,global,class=STRCODE,delta=2
    60                           	psect	stringtext47,global,class=STRCODE,delta=2
    61                           	psect	stringtext48,global,class=STRCODE,delta=2
    62                           	psect	stringtext49,global,class=STRCODE,delta=2
    63                           	psect	stringtext50,global,class=STRCODE,delta=2
    64                           	psect	stringtext51,global,class=STRCODE,delta=2
    65                           	psect	stringtext52,global,class=STRCODE,delta=2
    66                           	psect	stringtext53,global,class=STRCODE,delta=2
    67                           	psect	stringtext54,global,class=STRCODE,delta=2
    68                           	psect	stringtext55,global,class=STRCODE,delta=2
    69                           	psect	stringtext56,global,class=STRCODE,delta=2
    70                           	psect	stringtext57,global,class=STRCODE,delta=2
    71                           	psect	stringtext58,global,class=STRCODE,delta=2
    72                           	psect	stringtext59,global,class=STRCODE,delta=2
    73                           	psect	stringtext60,global,class=STRCODE,delta=2
    74                           	psect	stringtext61,global,class=STRCODE,delta=2
    75                           	psect	stringtext62,global,class=STRCODE,delta=2
    76                           	psect	stringtext63,global,class=STRCODE,delta=2
    77                           	psect	stringtext64,global,class=STRCODE,delta=2
    78                           	psect	stringtext65,global,class=STRCODE,delta=2
    79                           	psect	stringtext66,global,class=STRCODE,delta=2
    80                           	psect	stringtext67,global,class=STRCODE,delta=2
    81                           	psect	stringtext68,global,class=STRCODE,delta=2
    82                           	psect	stringtext69,global,class=STRCODE,delta=2
    83                           	psect	stringtext70,global,class=STRCODE,delta=2
    84                           	psect	stringtext71,global,class=STRCODE,delta=2
    85                           	psect	stringtext72,global,class=STRCODE,delta=2
    86                           	psect	stringtext73,global,class=STRCODE,delta=2
    87                           	psect	stringtext74,global,class=STRCODE,delta=2
    88                           	psect	stringtext75,global,class=STRCODE,delta=2
    89                           	psect	stringtext76,global,class=STRCODE,delta=2
    90                           	psect	cinit,global,class=CODE,merge=1,delta=2
    91                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    92                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    93                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    94                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    95                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    96                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    97                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    98                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    99                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
   100                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
   101                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
   102                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
   103                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
   104                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
   105                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
   106                           	psect	bssBANK11,global,class=BANK11,space=1,delta=1
   107                           	psect	inittext,global,class=CODE,delta=2
   108                           	psect	clrtext,global,class=CODE,delta=2
   109                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
   110                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
   111                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   112                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   113                           	psect	text1,local,class=CODE,merge=1,delta=2
   114                           	psect	text2,local,class=CODE,merge=1,delta=2
   115                           	psect	text3,local,class=CODE,merge=1,delta=2
   116                           	psect	text4,local,class=CODE,merge=1,delta=2
   117                           	psect	text5,local,class=CODE,merge=1,delta=2
   118                           	psect	text6,local,class=CODE,merge=1,delta=2
   119                           	psect	text7,local,class=CODE,merge=1,delta=2
   120                           	psect	text8,local,class=CODE,merge=1,delta=2
   121                           	psect	text9,local,class=CODE,merge=1,delta=2
   122                           	psect	text10,local,class=CODE,merge=1,delta=2
   123                           	psect	text11,local,class=CODE,merge=1,delta=2
   124                           	psect	text12,local,class=CODE,merge=1,delta=2
   125                           	psect	text13,local,class=CODE,merge=1,delta=2
   126                           	psect	text14,local,class=CODE,merge=1,delta=2
   127                           	psect	text15,local,class=CODE,merge=1,delta=2
   128                           	psect	text16,local,class=CODE,merge=1,delta=2
   129                           	psect	text17,local,class=CODE,merge=1,delta=2
   130                           	psect	text18,local,class=CODE,merge=1,delta=2
   131                           	psect	swtext1,local,class=CONST,delta=2
   132                           	psect	text19,local,class=CODE,merge=1,delta=2
   133                           	psect	text20,local,class=CODE,merge=1,delta=2
   134                           	psect	text21,local,class=CODE,merge=1,delta=2
   135                           	psect	text22,local,class=CODE,merge=1,delta=2
   136                           	psect	text23,local,class=CODE,merge=1,delta=2
   137                           	psect	text24,local,class=CODE,merge=1,delta=2
   138                           	psect	text25,local,class=CODE,merge=1,delta=2
   139                           	psect	text26,local,class=CODE,merge=1,delta=2
   140                           	psect	text27,local,class=CODE,merge=1,delta=2
   141                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
   142                           	psect	text29,local,class=CODE,merge=1,delta=2
   143                           	psect	text30,local,class=CODE,merge=1,delta=2
   144                           	psect	text31,local,class=CODE,merge=1,delta=2
   145                           	psect	text32,local,class=CODE,merge=1,delta=2
   146                           	psect	text33,local,class=CODE,merge=1,delta=2
   147                           	psect	text34,local,class=CODE,merge=1,delta=2
   148                           	psect	text35,local,class=CODE,merge=1,delta=2
   149                           	psect	text36,local,class=CODE,merge=1,delta=2
   150                           	psect	text37,local,class=CODE,merge=1,delta=2
   151                           	psect	text38,local,class=CODE,merge=1,delta=2
   152                           	psect	text39,local,class=CODE,merge=1,delta=2
   153                           	psect	text40,local,class=CODE,merge=1,delta=2
   154                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
   155                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
   156                           	psect	text43,local,class=CODE,merge=1,delta=2
   157                           	psect	text44,local,class=CODE,merge=1,delta=2
   158                           	psect	text45,local,class=CODE,merge=1,delta=2
   159                           	psect	text46,local,class=CODE,merge=1,delta=2
   160                           	psect	text47,local,class=CODE,merge=1,delta=2
   161                           	psect	text48,local,class=CODE,merge=1,delta=2
   162                           	psect	text49,local,class=CODE,merge=1,delta=2
   163                           	psect	text50,local,class=CODE,merge=1,delta=2
   164                           	psect	text51,local,class=CODE,merge=1,delta=2
   165                           	psect	text52,local,class=CODE,merge=1,delta=2,group=2
   166                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
   167                           	psect	text54,local,class=CODE,merge=1,delta=2,group=2
   168                           	psect	text55,local,class=CODE,merge=1,delta=2
   169                           	psect	text56,local,class=CODE,merge=1,delta=2
   170                           	psect	text57,local,class=CODE,merge=1,delta=2
   171                           	psect	text58,local,class=CODE,merge=1,delta=2
   172                           	psect	text59,local,class=CODE,merge=1,delta=2
   173                           	psect	text60,local,class=CODE,merge=1,delta=2
   174                           	psect	text61,local,class=CODE,merge=1,delta=2
   175                           	psect	text62,local,class=CODE,merge=1,delta=2
   176                           	psect	text63,local,class=CODE,merge=1,delta=2
   177                           	psect	text64,local,class=CODE,merge=1,delta=2,group=2
   178                           	psect	text65,local,class=CODE,merge=1,delta=2
   179                           	psect	text66,local,class=CODE,merge=1,delta=2
   180                           	psect	text67,local,class=CODE,merge=1,delta=2
   181                           	psect	text68,local,class=CODE,merge=1,delta=2
   182                           	psect	text69,local,class=CODE,merge=1,delta=2
   183                           	psect	text70,local,class=CODE,merge=1,delta=2
   184                           	psect	text71,local,class=CODE,merge=1,delta=2
   185                           	psect	text72,local,class=CODE,merge=1,delta=2,group=2
   186                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   187                           	psect	text74,local,class=CODE,merge=1,delta=2
   188                           	psect	text75,local,class=CODE,merge=1,delta=2
   189                           	psect	text76,local,class=CODE,merge=1,delta=2
   190                           	psect	text77,local,class=CODE,merge=1,delta=2
   191                           	psect	text78,local,class=CODE,merge=1,delta=2,group=2
   192                           	psect	text79,local,class=CODE,merge=1,delta=2
   193                           	psect	text80,local,class=CODE,merge=1,delta=2
   194                           	psect	text81,local,class=CODE,merge=1,delta=2
   195                           	psect	text82,local,class=CODE,merge=1,delta=2
   196                           	psect	text83,local,class=CODE,merge=1,delta=2
   197                           	psect	text84,local,class=CODE,merge=1,delta=2
   198                           	psect	text85,local,class=CODE,merge=1,delta=2
   199                           	psect	text86,local,class=CODE,merge=1,delta=2
   200                           	psect	text87,local,class=CODE,merge=1,delta=2
   201                           	psect	text88,local,class=CODE,merge=1,delta=2
   202                           	psect	text89,local,class=CODE,merge=1,delta=2
   203                           	psect	text90,local,class=CODE,merge=1,delta=2
   204                           	psect	text91,local,class=CODE,merge=1,delta=2
   205                           	psect	text92,local,class=CODE,merge=1,delta=2
   206                           	psect	text93,local,class=CODE,merge=1,delta=2
   207                           	psect	text94,local,class=CODE,merge=1,delta=2
   208                           	psect	text95,local,class=CODE,merge=1,delta=2
   209                           	psect	text96,local,class=CODE,merge=1,delta=2
   210                           	psect	text97,local,class=CODE,merge=1,delta=2
   211                           	psect	text98,local,class=CODE,merge=1,delta=2
   212                           	psect	text99,local,class=CODE,merge=1,delta=2
   213                           	psect	text100,local,class=CODE,merge=1,delta=2
   214                           	psect	text101,local,class=CODE,merge=1,delta=2
   215                           	psect	intentry,global,class=CODE,delta=2
   216                           	psect	text103,local,class=CODE,merge=1,delta=2
   217                           	psect	text104,local,class=CODE,merge=1,delta=2
   218                           	psect	text105,local,class=CODE,merge=1,delta=2
   219                           	dabs	1,0xCA0,32
   220                           	dabs	1,0xC20,80
   221                           	dabs	1,0xBA0,80
   222                           	dabs	1,0xB30,64
   223                           	dabs	1,0x26F0,0,_asciiCharTableLookup
   224                           	dabs	1,0x7E,2
   225  0000                     
   226                           ; Version 1.42
   227                           ; Generated 13/04/2017 GMT
   228                           ; 
   229                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   230                           ; All rights reserved.
   231                           ; 
   232                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   233                           ; 
   234                           ; Redistribution and use in source and binary forms, with or without modification, are
   235                           ; permitted provided that the following conditions are met:
   236                           ; 
   237                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   238                           ;        conditions and the following disclaimer.
   239                           ; 
   240                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   241                           ;        of conditions and the following disclaimer in the documentation and/or other
   242                           ;        materials provided with the distribution.
   243                           ; 
   244                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   245                           ;        software without specific prior written permission.
   246                           ; 
   247                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   248                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   249                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   250                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   251                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   252                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   253                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   254                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   255                           ; 
   256                           ; 
   257                           ; Code-generator required, PIC16LF18346 Definitions
   258                           ; 
   259                           ; SFR Addresses
   260  0000                     	;# 
   261  0001                     	;# 
   262  0002                     	;# 
   263  0003                     	;# 
   264  0004                     	;# 
   265  0005                     	;# 
   266  0006                     	;# 
   267  0007                     	;# 
   268  0008                     	;# 
   269  0009                     	;# 
   270  000A                     	;# 
   271  000B                     	;# 
   272  000C                     	;# 
   273  000D                     	;# 
   274  000E                     	;# 
   275  0010                     	;# 
   276  0011                     	;# 
   277  0012                     	;# 
   278  0013                     	;# 
   279  0014                     	;# 
   280  0015                     	;# 
   281  0015                     	;# 
   282  0016                     	;# 
   283  0016                     	;# 
   284  0017                     	;# 
   285  0018                     	;# 
   286  0019                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001B                     	;# 
   290  001C                     	;# 
   291  001D                     	;# 
   292  001E                     	;# 
   293  001F                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0090                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0093                     	;# 
   301  0094                     	;# 
   302  0097                     	;# 
   303  009B                     	;# 
   304  009B                     	;# 
   305  009C                     	;# 
   306  009D                     	;# 
   307  009E                     	;# 
   308  009F                     	;# 
   309  010C                     	;# 
   310  010D                     	;# 
   311  010E                     	;# 
   312  0111                     	;# 
   313  0112                     	;# 
   314  0113                     	;# 
   315  0114                     	;# 
   316  0115                     	;# 
   317  0116                     	;# 
   318  0117                     	;# 
   319  0118                     	;# 
   320  0119                     	;# 
   321  018C                     	;# 
   322  018D                     	;# 
   323  018E                     	;# 
   324  0199                     	;# 
   325  0199                     	;# 
   326  0199                     	;# 
   327  019A                     	;# 
   328  019A                     	;# 
   329  019A                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019C                     	;# 
   336  019C                     	;# 
   337  019C                     	;# 
   338  019D                     	;# 
   339  019D                     	;# 
   340  019D                     	;# 
   341  019E                     	;# 
   342  019E                     	;# 
   343  019E                     	;# 
   344  019F                     	;# 
   345  019F                     	;# 
   346  019F                     	;# 
   347  019F                     	;# 
   348  019F                     	;# 
   349  020C                     	;# 
   350  020D                     	;# 
   351  020E                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0219                     	;# 
   369  021A                     	;# 
   370  021B                     	;# 
   371  021C                     	;# 
   372  021D                     	;# 
   373  021D                     	;# 
   374  021E                     	;# 
   375  021F                     	;# 
   376  028C                     	;# 
   377  028D                     	;# 
   378  028E                     	;# 
   379  0291                     	;# 
   380  0291                     	;# 
   381  0292                     	;# 
   382  0293                     	;# 
   383  0294                     	;# 
   384  0295                     	;# 
   385  0295                     	;# 
   386  0296                     	;# 
   387  0297                     	;# 
   388  0298                     	;# 
   389  029F                     	;# 
   390  030C                     	;# 
   391  030D                     	;# 
   392  030E                     	;# 
   393  0311                     	;# 
   394  0311                     	;# 
   395  0312                     	;# 
   396  0313                     	;# 
   397  0314                     	;# 
   398  0315                     	;# 
   399  0315                     	;# 
   400  0316                     	;# 
   401  0317                     	;# 
   402  0318                     	;# 
   403  038C                     	;# 
   404  038D                     	;# 
   405  038E                     	;# 
   406  0391                     	;# 
   407  0392                     	;# 
   408  0393                     	;# 
   409  0394                     	;# 
   410  0395                     	;# 
   411  0396                     	;# 
   412  0397                     	;# 
   413  0398                     	;# 
   414  0399                     	;# 
   415  039A                     	;# 
   416  039C                     	;# 
   417  039D                     	;# 
   418  039E                     	;# 
   419  039F                     	;# 
   420  0411                     	;# 
   421  0411                     	;# 
   422  0412                     	;# 
   423  0413                     	;# 
   424  0414                     	;# 
   425  0415                     	;# 
   426  0416                     	;# 
   427  0417                     	;# 
   428  0418                     	;# 
   429  0418                     	;# 
   430  0419                     	;# 
   431  041A                     	;# 
   432  041B                     	;# 
   433  041C                     	;# 
   434  041D                     	;# 
   435  041E                     	;# 
   436  041F                     	;# 
   437  0498                     	;# 
   438  0498                     	;# 
   439  0499                     	;# 
   440  049A                     	;# 
   441  049B                     	;# 
   442  049B                     	;# 
   443  049C                     	;# 
   444  049D                     	;# 
   445  049E                     	;# 
   446  049F                     	;# 
   447  0617                     	;# 
   448  0618                     	;# 
   449  0619                     	;# 
   450  0619                     	;# 
   451  061A                     	;# 
   452  061B                     	;# 
   453  061C                     	;# 
   454  061C                     	;# 
   455  061F                     	;# 
   456  0691                     	;# 
   457  0692                     	;# 
   458  0693                     	;# 
   459  0694                     	;# 
   460  0695                     	;# 
   461  0696                     	;# 
   462  0697                     	;# 
   463  0698                     	;# 
   464  0699                     	;# 
   465  0711                     	;# 
   466  0712                     	;# 
   467  0713                     	;# 
   468  0714                     	;# 
   469  0715                     	;# 
   470  0716                     	;# 
   471  0717                     	;# 
   472  0718                     	;# 
   473  0719                     	;# 
   474  0891                     	;# 
   475  0891                     	;# 
   476  0891                     	;# 
   477  0891                     	;# 
   478  0891                     	;# 
   479  0891                     	;# 
   480  0892                     	;# 
   481  0892                     	;# 
   482  0892                     	;# 
   483  0893                     	;# 
   484  0893                     	;# 
   485  0893                     	;# 
   486  0893                     	;# 
   487  0893                     	;# 
   488  0893                     	;# 
   489  0894                     	;# 
   490  0894                     	;# 
   491  0894                     	;# 
   492  0895                     	;# 
   493  0895                     	;# 
   494  0895                     	;# 
   495  0896                     	;# 
   496  0896                     	;# 
   497  0896                     	;# 
   498  089B                     	;# 
   499  0911                     	;# 
   500  0912                     	;# 
   501  0913                     	;# 
   502  0914                     	;# 
   503  0915                     	;# 
   504  0916                     	;# 
   505  0918                     	;# 
   506  0919                     	;# 
   507  091A                     	;# 
   508  091B                     	;# 
   509  091C                     	;# 
   510  091D                     	;# 
   511  091E                     	;# 
   512  091F                     	;# 
   513  0E0F                     	;# 
   514  0E10                     	;# 
   515  0E11                     	;# 
   516  0E12                     	;# 
   517  0E13                     	;# 
   518  0E14                     	;# 
   519  0E15                     	;# 
   520  0E16                     	;# 
   521  0E17                     	;# 
   522  0E18                     	;# 
   523  0E19                     	;# 
   524  0E1A                     	;# 
   525  0E1B                     	;# 
   526  0E1C                     	;# 
   527  0E1D                     	;# 
   528  0E1E                     	;# 
   529  0E1F                     	;# 
   530  0E20                     	;# 
   531  0E21                     	;# 
   532  0E22                     	;# 
   533  0E24                     	;# 
   534  0E25                     	;# 
   535  0E28                     	;# 
   536  0E29                     	;# 
   537  0E2A                     	;# 
   538  0E2B                     	;# 
   539  0E2C                     	;# 
   540  0E2D                     	;# 
   541  0E2E                     	;# 
   542  0E2F                     	;# 
   543  0E90                     	;# 
   544  0E91                     	;# 
   545  0E92                     	;# 
   546  0E94                     	;# 
   547  0E95                     	;# 
   548  0E9C                     	;# 
   549  0E9D                     	;# 
   550  0E9E                     	;# 
   551  0E9F                     	;# 
   552  0EA0                     	;# 
   553  0EA1                     	;# 
   554  0EA2                     	;# 
   555  0EA3                     	;# 
   556  0EA4                     	;# 
   557  0EA5                     	;# 
   558  0EA6                     	;# 
   559  0EA7                     	;# 
   560  0F0F                     	;# 
   561  0F10                     	;# 
   562  0F11                     	;# 
   563  0F12                     	;# 
   564  0F13                     	;# 
   565  0F14                     	;# 
   566  0F15                     	;# 
   567  0F16                     	;# 
   568  0F17                     	;# 
   569  0F18                     	;# 
   570  0F19                     	;# 
   571  0F1A                     	;# 
   572  0F1B                     	;# 
   573  0F1C                     	;# 
   574  0F1D                     	;# 
   575  0F1E                     	;# 
   576  0F1F                     	;# 
   577  0F20                     	;# 
   578  0F21                     	;# 
   579  0F22                     	;# 
   580  0F23                     	;# 
   581  0F24                     	;# 
   582  0F25                     	;# 
   583  0F26                     	;# 
   584  0F27                     	;# 
   585  0F28                     	;# 
   586  0F29                     	;# 
   587  0F2A                     	;# 
   588  0F2B                     	;# 
   589  0F2C                     	;# 
   590  0F2D                     	;# 
   591  0F2E                     	;# 
   592  0F2F                     	;# 
   593  0F30                     	;# 
   594  0F31                     	;# 
   595  0F32                     	;# 
   596  0F33                     	;# 
   597  0F34                     	;# 
   598  0F35                     	;# 
   599  0F36                     	;# 
   600  0F37                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0013                     	;# 
   631  0014                     	;# 
   632  0015                     	;# 
   633  0015                     	;# 
   634  0016                     	;# 
   635  0016                     	;# 
   636  0017                     	;# 
   637  0018                     	;# 
   638  0019                     	;# 
   639  0019                     	;# 
   640  001A                     	;# 
   641  001B                     	;# 
   642  001C                     	;# 
   643  001D                     	;# 
   644  001E                     	;# 
   645  001F                     	;# 
   646  008C                     	;# 
   647  008D                     	;# 
   648  008E                     	;# 
   649  0090                     	;# 
   650  0091                     	;# 
   651  0092                     	;# 
   652  0093                     	;# 
   653  0094                     	;# 
   654  0097                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  009F                     	;# 
   661  010C                     	;# 
   662  010D                     	;# 
   663  010E                     	;# 
   664  0111                     	;# 
   665  0112                     	;# 
   666  0113                     	;# 
   667  0114                     	;# 
   668  0115                     	;# 
   669  0116                     	;# 
   670  0117                     	;# 
   671  0118                     	;# 
   672  0119                     	;# 
   673  018C                     	;# 
   674  018D                     	;# 
   675  018E                     	;# 
   676  0199                     	;# 
   677  0199                     	;# 
   678  0199                     	;# 
   679  019A                     	;# 
   680  019A                     	;# 
   681  019A                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019C                     	;# 
   688  019C                     	;# 
   689  019C                     	;# 
   690  019D                     	;# 
   691  019D                     	;# 
   692  019D                     	;# 
   693  019E                     	;# 
   694  019E                     	;# 
   695  019E                     	;# 
   696  019F                     	;# 
   697  019F                     	;# 
   698  019F                     	;# 
   699  019F                     	;# 
   700  019F                     	;# 
   701  020C                     	;# 
   702  020D                     	;# 
   703  020E                     	;# 
   704  0211                     	;# 
   705  0211                     	;# 
   706  0212                     	;# 
   707  0212                     	;# 
   708  0213                     	;# 
   709  0213                     	;# 
   710  0214                     	;# 
   711  0214                     	;# 
   712  0215                     	;# 
   713  0215                     	;# 
   714  0215                     	;# 
   715  0215                     	;# 
   716  0216                     	;# 
   717  0216                     	;# 
   718  0217                     	;# 
   719  0217                     	;# 
   720  0219                     	;# 
   721  021A                     	;# 
   722  021B                     	;# 
   723  021C                     	;# 
   724  021D                     	;# 
   725  021D                     	;# 
   726  021E                     	;# 
   727  021F                     	;# 
   728  028C                     	;# 
   729  028D                     	;# 
   730  028E                     	;# 
   731  0291                     	;# 
   732  0291                     	;# 
   733  0292                     	;# 
   734  0293                     	;# 
   735  0294                     	;# 
   736  0295                     	;# 
   737  0295                     	;# 
   738  0296                     	;# 
   739  0297                     	;# 
   740  0298                     	;# 
   741  029F                     	;# 
   742  030C                     	;# 
   743  030D                     	;# 
   744  030E                     	;# 
   745  0311                     	;# 
   746  0311                     	;# 
   747  0312                     	;# 
   748  0313                     	;# 
   749  0314                     	;# 
   750  0315                     	;# 
   751  0315                     	;# 
   752  0316                     	;# 
   753  0317                     	;# 
   754  0318                     	;# 
   755  038C                     	;# 
   756  038D                     	;# 
   757  038E                     	;# 
   758  0391                     	;# 
   759  0392                     	;# 
   760  0393                     	;# 
   761  0394                     	;# 
   762  0395                     	;# 
   763  0396                     	;# 
   764  0397                     	;# 
   765  0398                     	;# 
   766  0399                     	;# 
   767  039A                     	;# 
   768  039C                     	;# 
   769  039D                     	;# 
   770  039E                     	;# 
   771  039F                     	;# 
   772  0411                     	;# 
   773  0411                     	;# 
   774  0412                     	;# 
   775  0413                     	;# 
   776  0414                     	;# 
   777  0415                     	;# 
   778  0416                     	;# 
   779  0417                     	;# 
   780  0418                     	;# 
   781  0418                     	;# 
   782  0419                     	;# 
   783  041A                     	;# 
   784  041B                     	;# 
   785  041C                     	;# 
   786  041D                     	;# 
   787  041E                     	;# 
   788  041F                     	;# 
   789  0498                     	;# 
   790  0498                     	;# 
   791  0499                     	;# 
   792  049A                     	;# 
   793  049B                     	;# 
   794  049B                     	;# 
   795  049C                     	;# 
   796  049D                     	;# 
   797  049E                     	;# 
   798  049F                     	;# 
   799  0617                     	;# 
   800  0618                     	;# 
   801  0619                     	;# 
   802  0619                     	;# 
   803  061A                     	;# 
   804  061B                     	;# 
   805  061C                     	;# 
   806  061C                     	;# 
   807  061F                     	;# 
   808  0691                     	;# 
   809  0692                     	;# 
   810  0693                     	;# 
   811  0694                     	;# 
   812  0695                     	;# 
   813  0696                     	;# 
   814  0697                     	;# 
   815  0698                     	;# 
   816  0699                     	;# 
   817  0711                     	;# 
   818  0712                     	;# 
   819  0713                     	;# 
   820  0714                     	;# 
   821  0715                     	;# 
   822  0716                     	;# 
   823  0717                     	;# 
   824  0718                     	;# 
   825  0719                     	;# 
   826  0891                     	;# 
   827  0891                     	;# 
   828  0891                     	;# 
   829  0891                     	;# 
   830  0891                     	;# 
   831  0891                     	;# 
   832  0892                     	;# 
   833  0892                     	;# 
   834  0892                     	;# 
   835  0893                     	;# 
   836  0893                     	;# 
   837  0893                     	;# 
   838  0893                     	;# 
   839  0893                     	;# 
   840  0893                     	;# 
   841  0894                     	;# 
   842  0894                     	;# 
   843  0894                     	;# 
   844  0895                     	;# 
   845  0895                     	;# 
   846  0895                     	;# 
   847  0896                     	;# 
   848  0896                     	;# 
   849  0896                     	;# 
   850  089B                     	;# 
   851  0911                     	;# 
   852  0912                     	;# 
   853  0913                     	;# 
   854  0914                     	;# 
   855  0915                     	;# 
   856  0916                     	;# 
   857  0918                     	;# 
   858  0919                     	;# 
   859  091A                     	;# 
   860  091B                     	;# 
   861  091C                     	;# 
   862  091D                     	;# 
   863  091E                     	;# 
   864  091F                     	;# 
   865  0E0F                     	;# 
   866  0E10                     	;# 
   867  0E11                     	;# 
   868  0E12                     	;# 
   869  0E13                     	;# 
   870  0E14                     	;# 
   871  0E15                     	;# 
   872  0E16                     	;# 
   873  0E17                     	;# 
   874  0E18                     	;# 
   875  0E19                     	;# 
   876  0E1A                     	;# 
   877  0E1B                     	;# 
   878  0E1C                     	;# 
   879  0E1D                     	;# 
   880  0E1E                     	;# 
   881  0E1F                     	;# 
   882  0E20                     	;# 
   883  0E21                     	;# 
   884  0E22                     	;# 
   885  0E24                     	;# 
   886  0E25                     	;# 
   887  0E28                     	;# 
   888  0E29                     	;# 
   889  0E2A                     	;# 
   890  0E2B                     	;# 
   891  0E2C                     	;# 
   892  0E2D                     	;# 
   893  0E2E                     	;# 
   894  0E2F                     	;# 
   895  0E90                     	;# 
   896  0E91                     	;# 
   897  0E92                     	;# 
   898  0E94                     	;# 
   899  0E95                     	;# 
   900  0E9C                     	;# 
   901  0E9D                     	;# 
   902  0E9E                     	;# 
   903  0E9F                     	;# 
   904  0EA0                     	;# 
   905  0EA1                     	;# 
   906  0EA2                     	;# 
   907  0EA3                     	;# 
   908  0EA4                     	;# 
   909  0EA5                     	;# 
   910  0EA6                     	;# 
   911  0EA7                     	;# 
   912  0F0F                     	;# 
   913  0F10                     	;# 
   914  0F11                     	;# 
   915  0F12                     	;# 
   916  0F13                     	;# 
   917  0F14                     	;# 
   918  0F15                     	;# 
   919  0F16                     	;# 
   920  0F17                     	;# 
   921  0F18                     	;# 
   922  0F19                     	;# 
   923  0F1A                     	;# 
   924  0F1B                     	;# 
   925  0F1C                     	;# 
   926  0F1D                     	;# 
   927  0F1E                     	;# 
   928  0F1F                     	;# 
   929  0F20                     	;# 
   930  0F21                     	;# 
   931  0F22                     	;# 
   932  0F23                     	;# 
   933  0F24                     	;# 
   934  0F25                     	;# 
   935  0F26                     	;# 
   936  0F27                     	;# 
   937  0F28                     	;# 
   938  0F29                     	;# 
   939  0F2A                     	;# 
   940  0F2B                     	;# 
   941  0F2C                     	;# 
   942  0F2D                     	;# 
   943  0F2E                     	;# 
   944  0F2F                     	;# 
   945  0F30                     	;# 
   946  0F31                     	;# 
   947  0F32                     	;# 
   948  0F33                     	;# 
   949  0F34                     	;# 
   950  0F35                     	;# 
   951  0F36                     	;# 
   952  0F37                     	;# 
   953  0FE4                     	;# 
   954  0FE5                     	;# 
   955  0FE6                     	;# 
   956  0FE7                     	;# 
   957  0FE8                     	;# 
   958  0FE9                     	;# 
   959  0FEA                     	;# 
   960  0FEB                     	;# 
   961  0FED                     	;# 
   962  0FEE                     	;# 
   963  0FEF                     	;# 
   964  0000                     	;# 
   965  0001                     	;# 
   966  0002                     	;# 
   967  0003                     	;# 
   968  0004                     	;# 
   969  0005                     	;# 
   970  0006                     	;# 
   971  0007                     	;# 
   972  0008                     	;# 
   973  0009                     	;# 
   974  000A                     	;# 
   975  000B                     	;# 
   976  000C                     	;# 
   977  000D                     	;# 
   978  000E                     	;# 
   979  0010                     	;# 
   980  0011                     	;# 
   981  0012                     	;# 
   982  0013                     	;# 
   983  0014                     	;# 
   984  0015                     	;# 
   985  0015                     	;# 
   986  0016                     	;# 
   987  0016                     	;# 
   988  0017                     	;# 
   989  0018                     	;# 
   990  0019                     	;# 
   991  0019                     	;# 
   992  001A                     	;# 
   993  001B                     	;# 
   994  001C                     	;# 
   995  001D                     	;# 
   996  001E                     	;# 
   997  001F                     	;# 
   998  008C                     	;# 
   999  008D                     	;# 
  1000  008E                     	;# 
  1001  0090                     	;# 
  1002  0091                     	;# 
  1003  0092                     	;# 
  1004  0093                     	;# 
  1005  0094                     	;# 
  1006  0097                     	;# 
  1007  009B                     	;# 
  1008  009B                     	;# 
  1009  009C                     	;# 
  1010  009D                     	;# 
  1011  009E                     	;# 
  1012  009F                     	;# 
  1013  010C                     	;# 
  1014  010D                     	;# 
  1015  010E                     	;# 
  1016  0111                     	;# 
  1017  0112                     	;# 
  1018  0113                     	;# 
  1019  0114                     	;# 
  1020  0115                     	;# 
  1021  0116                     	;# 
  1022  0117                     	;# 
  1023  0118                     	;# 
  1024  0119                     	;# 
  1025  018C                     	;# 
  1026  018D                     	;# 
  1027  018E                     	;# 
  1028  0199                     	;# 
  1029  0199                     	;# 
  1030  0199                     	;# 
  1031  019A                     	;# 
  1032  019A                     	;# 
  1033  019A                     	;# 
  1034  019B                     	;# 
  1035  019B                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019C                     	;# 
  1040  019C                     	;# 
  1041  019C                     	;# 
  1042  019D                     	;# 
  1043  019D                     	;# 
  1044  019D                     	;# 
  1045  019E                     	;# 
  1046  019E                     	;# 
  1047  019E                     	;# 
  1048  019F                     	;# 
  1049  019F                     	;# 
  1050  019F                     	;# 
  1051  019F                     	;# 
  1052  019F                     	;# 
  1053  020C                     	;# 
  1054  020D                     	;# 
  1055  020E                     	;# 
  1056  0211                     	;# 
  1057  0211                     	;# 
  1058  0212                     	;# 
  1059  0212                     	;# 
  1060  0213                     	;# 
  1061  0213                     	;# 
  1062  0214                     	;# 
  1063  0214                     	;# 
  1064  0215                     	;# 
  1065  0215                     	;# 
  1066  0215                     	;# 
  1067  0215                     	;# 
  1068  0216                     	;# 
  1069  0216                     	;# 
  1070  0217                     	;# 
  1071  0217                     	;# 
  1072  0219                     	;# 
  1073  021A                     	;# 
  1074  021B                     	;# 
  1075  021C                     	;# 
  1076  021D                     	;# 
  1077  021D                     	;# 
  1078  021E                     	;# 
  1079  021F                     	;# 
  1080  028C                     	;# 
  1081  028D                     	;# 
  1082  028E                     	;# 
  1083  0291                     	;# 
  1084  0291                     	;# 
  1085  0292                     	;# 
  1086  0293                     	;# 
  1087  0294                     	;# 
  1088  0295                     	;# 
  1089  0295                     	;# 
  1090  0296                     	;# 
  1091  0297                     	;# 
  1092  0298                     	;# 
  1093  029F                     	;# 
  1094  030C                     	;# 
  1095  030D                     	;# 
  1096  030E                     	;# 
  1097  0311                     	;# 
  1098  0311                     	;# 
  1099  0312                     	;# 
  1100  0313                     	;# 
  1101  0314                     	;# 
  1102  0315                     	;# 
  1103  0315                     	;# 
  1104  0316                     	;# 
  1105  0317                     	;# 
  1106  0318                     	;# 
  1107  038C                     	;# 
  1108  038D                     	;# 
  1109  038E                     	;# 
  1110  0391                     	;# 
  1111  0392                     	;# 
  1112  0393                     	;# 
  1113  0394                     	;# 
  1114  0395                     	;# 
  1115  0396                     	;# 
  1116  0397                     	;# 
  1117  0398                     	;# 
  1118  0399                     	;# 
  1119  039A                     	;# 
  1120  039C                     	;# 
  1121  039D                     	;# 
  1122  039E                     	;# 
  1123  039F                     	;# 
  1124  0411                     	;# 
  1125  0411                     	;# 
  1126  0412                     	;# 
  1127  0413                     	;# 
  1128  0414                     	;# 
  1129  0415                     	;# 
  1130  0416                     	;# 
  1131  0417                     	;# 
  1132  0418                     	;# 
  1133  0418                     	;# 
  1134  0419                     	;# 
  1135  041A                     	;# 
  1136  041B                     	;# 
  1137  041C                     	;# 
  1138  041D                     	;# 
  1139  041E                     	;# 
  1140  041F                     	;# 
  1141  0498                     	;# 
  1142  0498                     	;# 
  1143  0499                     	;# 
  1144  049A                     	;# 
  1145  049B                     	;# 
  1146  049B                     	;# 
  1147  049C                     	;# 
  1148  049D                     	;# 
  1149  049E                     	;# 
  1150  049F                     	;# 
  1151  0617                     	;# 
  1152  0618                     	;# 
  1153  0619                     	;# 
  1154  0619                     	;# 
  1155  061A                     	;# 
  1156  061B                     	;# 
  1157  061C                     	;# 
  1158  061C                     	;# 
  1159  061F                     	;# 
  1160  0691                     	;# 
  1161  0692                     	;# 
  1162  0693                     	;# 
  1163  0694                     	;# 
  1164  0695                     	;# 
  1165  0696                     	;# 
  1166  0697                     	;# 
  1167  0698                     	;# 
  1168  0699                     	;# 
  1169  0711                     	;# 
  1170  0712                     	;# 
  1171  0713                     	;# 
  1172  0714                     	;# 
  1173  0715                     	;# 
  1174  0716                     	;# 
  1175  0717                     	;# 
  1176  0718                     	;# 
  1177  0719                     	;# 
  1178  0891                     	;# 
  1179  0891                     	;# 
  1180  0891                     	;# 
  1181  0891                     	;# 
  1182  0891                     	;# 
  1183  0891                     	;# 
  1184  0892                     	;# 
  1185  0892                     	;# 
  1186  0892                     	;# 
  1187  0893                     	;# 
  1188  0893                     	;# 
  1189  0893                     	;# 
  1190  0893                     	;# 
  1191  0893                     	;# 
  1192  0893                     	;# 
  1193  0894                     	;# 
  1194  0894                     	;# 
  1195  0894                     	;# 
  1196  0895                     	;# 
  1197  0895                     	;# 
  1198  0895                     	;# 
  1199  0896                     	;# 
  1200  0896                     	;# 
  1201  0896                     	;# 
  1202  089B                     	;# 
  1203  0911                     	;# 
  1204  0912                     	;# 
  1205  0913                     	;# 
  1206  0914                     	;# 
  1207  0915                     	;# 
  1208  0916                     	;# 
  1209  0918                     	;# 
  1210  0919                     	;# 
  1211  091A                     	;# 
  1212  091B                     	;# 
  1213  091C                     	;# 
  1214  091D                     	;# 
  1215  091E                     	;# 
  1216  091F                     	;# 
  1217  0E0F                     	;# 
  1218  0E10                     	;# 
  1219  0E11                     	;# 
  1220  0E12                     	;# 
  1221  0E13                     	;# 
  1222  0E14                     	;# 
  1223  0E15                     	;# 
  1224  0E16                     	;# 
  1225  0E17                     	;# 
  1226  0E18                     	;# 
  1227  0E19                     	;# 
  1228  0E1A                     	;# 
  1229  0E1B                     	;# 
  1230  0E1C                     	;# 
  1231  0E1D                     	;# 
  1232  0E1E                     	;# 
  1233  0E1F                     	;# 
  1234  0E20                     	;# 
  1235  0E21                     	;# 
  1236  0E22                     	;# 
  1237  0E24                     	;# 
  1238  0E25                     	;# 
  1239  0E28                     	;# 
  1240  0E29                     	;# 
  1241  0E2A                     	;# 
  1242  0E2B                     	;# 
  1243  0E2C                     	;# 
  1244  0E2D                     	;# 
  1245  0E2E                     	;# 
  1246  0E2F                     	;# 
  1247  0E90                     	;# 
  1248  0E91                     	;# 
  1249  0E92                     	;# 
  1250  0E94                     	;# 
  1251  0E95                     	;# 
  1252  0E9C                     	;# 
  1253  0E9D                     	;# 
  1254  0E9E                     	;# 
  1255  0E9F                     	;# 
  1256  0EA0                     	;# 
  1257  0EA1                     	;# 
  1258  0EA2                     	;# 
  1259  0EA3                     	;# 
  1260  0EA4                     	;# 
  1261  0EA5                     	;# 
  1262  0EA6                     	;# 
  1263  0EA7                     	;# 
  1264  0F0F                     	;# 
  1265  0F10                     	;# 
  1266  0F11                     	;# 
  1267  0F12                     	;# 
  1268  0F13                     	;# 
  1269  0F14                     	;# 
  1270  0F15                     	;# 
  1271  0F16                     	;# 
  1272  0F17                     	;# 
  1273  0F18                     	;# 
  1274  0F19                     	;# 
  1275  0F1A                     	;# 
  1276  0F1B                     	;# 
  1277  0F1C                     	;# 
  1278  0F1D                     	;# 
  1279  0F1E                     	;# 
  1280  0F1F                     	;# 
  1281  0F20                     	;# 
  1282  0F21                     	;# 
  1283  0F22                     	;# 
  1284  0F23                     	;# 
  1285  0F24                     	;# 
  1286  0F25                     	;# 
  1287  0F26                     	;# 
  1288  0F27                     	;# 
  1289  0F28                     	;# 
  1290  0F29                     	;# 
  1291  0F2A                     	;# 
  1292  0F2B                     	;# 
  1293  0F2C                     	;# 
  1294  0F2D                     	;# 
  1295  0F2E                     	;# 
  1296  0F2F                     	;# 
  1297  0F30                     	;# 
  1298  0F31                     	;# 
  1299  0F32                     	;# 
  1300  0F33                     	;# 
  1301  0F34                     	;# 
  1302  0F35                     	;# 
  1303  0F36                     	;# 
  1304  0F37                     	;# 
  1305  0FE4                     	;# 
  1306  0FE5                     	;# 
  1307  0FE6                     	;# 
  1308  0FE7                     	;# 
  1309  0FE8                     	;# 
  1310  0FE9                     	;# 
  1311  0FEA                     	;# 
  1312  0FEB                     	;# 
  1313  0FED                     	;# 
  1314  0FEE                     	;# 
  1315  0FEF                     	;# 
  1316  0000                     	;# 
  1317  0001                     	;# 
  1318  0002                     	;# 
  1319  0003                     	;# 
  1320  0004                     	;# 
  1321  0005                     	;# 
  1322  0006                     	;# 
  1323  0007                     	;# 
  1324  0008                     	;# 
  1325  0009                     	;# 
  1326  000A                     	;# 
  1327  000B                     	;# 
  1328  000C                     	;# 
  1329  000D                     	;# 
  1330  000E                     	;# 
  1331  0010                     	;# 
  1332  0011                     	;# 
  1333  0012                     	;# 
  1334  0013                     	;# 
  1335  0014                     	;# 
  1336  0015                     	;# 
  1337  0015                     	;# 
  1338  0016                     	;# 
  1339  0016                     	;# 
  1340  0017                     	;# 
  1341  0018                     	;# 
  1342  0019                     	;# 
  1343  0019                     	;# 
  1344  001A                     	;# 
  1345  001B                     	;# 
  1346  001C                     	;# 
  1347  001D                     	;# 
  1348  001E                     	;# 
  1349  001F                     	;# 
  1350  008C                     	;# 
  1351  008D                     	;# 
  1352  008E                     	;# 
  1353  0090                     	;# 
  1354  0091                     	;# 
  1355  0092                     	;# 
  1356  0093                     	;# 
  1357  0094                     	;# 
  1358  0097                     	;# 
  1359  009B                     	;# 
  1360  009B                     	;# 
  1361  009C                     	;# 
  1362  009D                     	;# 
  1363  009E                     	;# 
  1364  009F                     	;# 
  1365  010C                     	;# 
  1366  010D                     	;# 
  1367  010E                     	;# 
  1368  0111                     	;# 
  1369  0112                     	;# 
  1370  0113                     	;# 
  1371  0114                     	;# 
  1372  0115                     	;# 
  1373  0116                     	;# 
  1374  0117                     	;# 
  1375  0118                     	;# 
  1376  0119                     	;# 
  1377  018C                     	;# 
  1378  018D                     	;# 
  1379  018E                     	;# 
  1380  0199                     	;# 
  1381  0199                     	;# 
  1382  0199                     	;# 
  1383  019A                     	;# 
  1384  019A                     	;# 
  1385  019A                     	;# 
  1386  019B                     	;# 
  1387  019B                     	;# 
  1388  019B                     	;# 
  1389  019B                     	;# 
  1390  019B                     	;# 
  1391  019C                     	;# 
  1392  019C                     	;# 
  1393  019C                     	;# 
  1394  019D                     	;# 
  1395  019D                     	;# 
  1396  019D                     	;# 
  1397  019E                     	;# 
  1398  019E                     	;# 
  1399  019E                     	;# 
  1400  019F                     	;# 
  1401  019F                     	;# 
  1402  019F                     	;# 
  1403  019F                     	;# 
  1404  019F                     	;# 
  1405  020C                     	;# 
  1406  020D                     	;# 
  1407  020E                     	;# 
  1408  0211                     	;# 
  1409  0211                     	;# 
  1410  0212                     	;# 
  1411  0212                     	;# 
  1412  0213                     	;# 
  1413  0213                     	;# 
  1414  0214                     	;# 
  1415  0214                     	;# 
  1416  0215                     	;# 
  1417  0215                     	;# 
  1418  0215                     	;# 
  1419  0215                     	;# 
  1420  0216                     	;# 
  1421  0216                     	;# 
  1422  0217                     	;# 
  1423  0217                     	;# 
  1424  0219                     	;# 
  1425  021A                     	;# 
  1426  021B                     	;# 
  1427  021C                     	;# 
  1428  021D                     	;# 
  1429  021D                     	;# 
  1430  021E                     	;# 
  1431  021F                     	;# 
  1432  028C                     	;# 
  1433  028D                     	;# 
  1434  028E                     	;# 
  1435  0291                     	;# 
  1436  0291                     	;# 
  1437  0292                     	;# 
  1438  0293                     	;# 
  1439  0294                     	;# 
  1440  0295                     	;# 
  1441  0295                     	;# 
  1442  0296                     	;# 
  1443  0297                     	;# 
  1444  0298                     	;# 
  1445  029F                     	;# 
  1446  030C                     	;# 
  1447  030D                     	;# 
  1448  030E                     	;# 
  1449  0311                     	;# 
  1450  0311                     	;# 
  1451  0312                     	;# 
  1452  0313                     	;# 
  1453  0314                     	;# 
  1454  0315                     	;# 
  1455  0315                     	;# 
  1456  0316                     	;# 
  1457  0317                     	;# 
  1458  0318                     	;# 
  1459  038C                     	;# 
  1460  038D                     	;# 
  1461  038E                     	;# 
  1462  0391                     	;# 
  1463  0392                     	;# 
  1464  0393                     	;# 
  1465  0394                     	;# 
  1466  0395                     	;# 
  1467  0396                     	;# 
  1468  0397                     	;# 
  1469  0398                     	;# 
  1470  0399                     	;# 
  1471  039A                     	;# 
  1472  039C                     	;# 
  1473  039D                     	;# 
  1474  039E                     	;# 
  1475  039F                     	;# 
  1476  0411                     	;# 
  1477  0411                     	;# 
  1478  0412                     	;# 
  1479  0413                     	;# 
  1480  0414                     	;# 
  1481  0415                     	;# 
  1482  0416                     	;# 
  1483  0417                     	;# 
  1484  0418                     	;# 
  1485  0418                     	;# 
  1486  0419                     	;# 
  1487  041A                     	;# 
  1488  041B                     	;# 
  1489  041C                     	;# 
  1490  041D                     	;# 
  1491  041E                     	;# 
  1492  041F                     	;# 
  1493  0498                     	;# 
  1494  0498                     	;# 
  1495  0499                     	;# 
  1496  049A                     	;# 
  1497  049B                     	;# 
  1498  049B                     	;# 
  1499  049C                     	;# 
  1500  049D                     	;# 
  1501  049E                     	;# 
  1502  049F                     	;# 
  1503  0617                     	;# 
  1504  0618                     	;# 
  1505  0619                     	;# 
  1506  0619                     	;# 
  1507  061A                     	;# 
  1508  061B                     	;# 
  1509  061C                     	;# 
  1510  061C                     	;# 
  1511  061F                     	;# 
  1512  0691                     	;# 
  1513  0692                     	;# 
  1514  0693                     	;# 
  1515  0694                     	;# 
  1516  0695                     	;# 
  1517  0696                     	;# 
  1518  0697                     	;# 
  1519  0698                     	;# 
  1520  0699                     	;# 
  1521  0711                     	;# 
  1522  0712                     	;# 
  1523  0713                     	;# 
  1524  0714                     	;# 
  1525  0715                     	;# 
  1526  0716                     	;# 
  1527  0717                     	;# 
  1528  0718                     	;# 
  1529  0719                     	;# 
  1530  0891                     	;# 
  1531  0891                     	;# 
  1532  0891                     	;# 
  1533  0891                     	;# 
  1534  0891                     	;# 
  1535  0891                     	;# 
  1536  0892                     	;# 
  1537  0892                     	;# 
  1538  0892                     	;# 
  1539  0893                     	;# 
  1540  0893                     	;# 
  1541  0893                     	;# 
  1542  0893                     	;# 
  1543  0893                     	;# 
  1544  0893                     	;# 
  1545  0894                     	;# 
  1546  0894                     	;# 
  1547  0894                     	;# 
  1548  0895                     	;# 
  1549  0895                     	;# 
  1550  0895                     	;# 
  1551  0896                     	;# 
  1552  0896                     	;# 
  1553  0896                     	;# 
  1554  089B                     	;# 
  1555  0911                     	;# 
  1556  0912                     	;# 
  1557  0913                     	;# 
  1558  0914                     	;# 
  1559  0915                     	;# 
  1560  0916                     	;# 
  1561  0918                     	;# 
  1562  0919                     	;# 
  1563  091A                     	;# 
  1564  091B                     	;# 
  1565  091C                     	;# 
  1566  091D                     	;# 
  1567  091E                     	;# 
  1568  091F                     	;# 
  1569  0E0F                     	;# 
  1570  0E10                     	;# 
  1571  0E11                     	;# 
  1572  0E12                     	;# 
  1573  0E13                     	;# 
  1574  0E14                     	;# 
  1575  0E15                     	;# 
  1576  0E16                     	;# 
  1577  0E17                     	;# 
  1578  0E18                     	;# 
  1579  0E19                     	;# 
  1580  0E1A                     	;# 
  1581  0E1B                     	;# 
  1582  0E1C                     	;# 
  1583  0E1D                     	;# 
  1584  0E1E                     	;# 
  1585  0E1F                     	;# 
  1586  0E20                     	;# 
  1587  0E21                     	;# 
  1588  0E22                     	;# 
  1589  0E24                     	;# 
  1590  0E25                     	;# 
  1591  0E28                     	;# 
  1592  0E29                     	;# 
  1593  0E2A                     	;# 
  1594  0E2B                     	;# 
  1595  0E2C                     	;# 
  1596  0E2D                     	;# 
  1597  0E2E                     	;# 
  1598  0E2F                     	;# 
  1599  0E90                     	;# 
  1600  0E91                     	;# 
  1601  0E92                     	;# 
  1602  0E94                     	;# 
  1603  0E95                     	;# 
  1604  0E9C                     	;# 
  1605  0E9D                     	;# 
  1606  0E9E                     	;# 
  1607  0E9F                     	;# 
  1608  0EA0                     	;# 
  1609  0EA1                     	;# 
  1610  0EA2                     	;# 
  1611  0EA3                     	;# 
  1612  0EA4                     	;# 
  1613  0EA5                     	;# 
  1614  0EA6                     	;# 
  1615  0EA7                     	;# 
  1616  0F0F                     	;# 
  1617  0F10                     	;# 
  1618  0F11                     	;# 
  1619  0F12                     	;# 
  1620  0F13                     	;# 
  1621  0F14                     	;# 
  1622  0F15                     	;# 
  1623  0F16                     	;# 
  1624  0F17                     	;# 
  1625  0F18                     	;# 
  1626  0F19                     	;# 
  1627  0F1A                     	;# 
  1628  0F1B                     	;# 
  1629  0F1C                     	;# 
  1630  0F1D                     	;# 
  1631  0F1E                     	;# 
  1632  0F1F                     	;# 
  1633  0F20                     	;# 
  1634  0F21                     	;# 
  1635  0F22                     	;# 
  1636  0F23                     	;# 
  1637  0F24                     	;# 
  1638  0F25                     	;# 
  1639  0F26                     	;# 
  1640  0F27                     	;# 
  1641  0F28                     	;# 
  1642  0F29                     	;# 
  1643  0F2A                     	;# 
  1644  0F2B                     	;# 
  1645  0F2C                     	;# 
  1646  0F2D                     	;# 
  1647  0F2E                     	;# 
  1648  0F2F                     	;# 
  1649  0F30                     	;# 
  1650  0F31                     	;# 
  1651  0F32                     	;# 
  1652  0F33                     	;# 
  1653  0F34                     	;# 
  1654  0F35                     	;# 
  1655  0F36                     	;# 
  1656  0F37                     	;# 
  1657  0FE4                     	;# 
  1658  0FE5                     	;# 
  1659  0FE6                     	;# 
  1660  0FE7                     	;# 
  1661  0FE8                     	;# 
  1662  0FE9                     	;# 
  1663  0FEA                     	;# 
  1664  0FEB                     	;# 
  1665  0FED                     	;# 
  1666  0FEE                     	;# 
  1667  0FEF                     	;# 
  1668  0000                     	;# 
  1669  0001                     	;# 
  1670  0002                     	;# 
  1671  0003                     	;# 
  1672  0004                     	;# 
  1673  0005                     	;# 
  1674  0006                     	;# 
  1675  0007                     	;# 
  1676  0008                     	;# 
  1677  0009                     	;# 
  1678  000A                     	;# 
  1679  000B                     	;# 
  1680  000C                     	;# 
  1681  000D                     	;# 
  1682  000E                     	;# 
  1683  0010                     	;# 
  1684  0011                     	;# 
  1685  0012                     	;# 
  1686  0013                     	;# 
  1687  0014                     	;# 
  1688  0015                     	;# 
  1689  0015                     	;# 
  1690  0016                     	;# 
  1691  0016                     	;# 
  1692  0017                     	;# 
  1693  0018                     	;# 
  1694  0019                     	;# 
  1695  0019                     	;# 
  1696  001A                     	;# 
  1697  001B                     	;# 
  1698  001C                     	;# 
  1699  001D                     	;# 
  1700  001E                     	;# 
  1701  001F                     	;# 
  1702  008C                     	;# 
  1703  008D                     	;# 
  1704  008E                     	;# 
  1705  0090                     	;# 
  1706  0091                     	;# 
  1707  0092                     	;# 
  1708  0093                     	;# 
  1709  0094                     	;# 
  1710  0097                     	;# 
  1711  009B                     	;# 
  1712  009B                     	;# 
  1713  009C                     	;# 
  1714  009D                     	;# 
  1715  009E                     	;# 
  1716  009F                     	;# 
  1717  010C                     	;# 
  1718  010D                     	;# 
  1719  010E                     	;# 
  1720  0111                     	;# 
  1721  0112                     	;# 
  1722  0113                     	;# 
  1723  0114                     	;# 
  1724  0115                     	;# 
  1725  0116                     	;# 
  1726  0117                     	;# 
  1727  0118                     	;# 
  1728  0119                     	;# 
  1729  018C                     	;# 
  1730  018D                     	;# 
  1731  018E                     	;# 
  1732  0199                     	;# 
  1733  0199                     	;# 
  1734  0199                     	;# 
  1735  019A                     	;# 
  1736  019A                     	;# 
  1737  019A                     	;# 
  1738  019B                     	;# 
  1739  019B                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019C                     	;# 
  1744  019C                     	;# 
  1745  019C                     	;# 
  1746  019D                     	;# 
  1747  019D                     	;# 
  1748  019D                     	;# 
  1749  019E                     	;# 
  1750  019E                     	;# 
  1751  019E                     	;# 
  1752  019F                     	;# 
  1753  019F                     	;# 
  1754  019F                     	;# 
  1755  019F                     	;# 
  1756  019F                     	;# 
  1757  020C                     	;# 
  1758  020D                     	;# 
  1759  020E                     	;# 
  1760  0211                     	;# 
  1761  0211                     	;# 
  1762  0212                     	;# 
  1763  0212                     	;# 
  1764  0213                     	;# 
  1765  0213                     	;# 
  1766  0214                     	;# 
  1767  0214                     	;# 
  1768  0215                     	;# 
  1769  0215                     	;# 
  1770  0215                     	;# 
  1771  0215                     	;# 
  1772  0216                     	;# 
  1773  0216                     	;# 
  1774  0217                     	;# 
  1775  0217                     	;# 
  1776  0219                     	;# 
  1777  021A                     	;# 
  1778  021B                     	;# 
  1779  021C                     	;# 
  1780  021D                     	;# 
  1781  021D                     	;# 
  1782  021E                     	;# 
  1783  021F                     	;# 
  1784  028C                     	;# 
  1785  028D                     	;# 
  1786  028E                     	;# 
  1787  0291                     	;# 
  1788  0291                     	;# 
  1789  0292                     	;# 
  1790  0293                     	;# 
  1791  0294                     	;# 
  1792  0295                     	;# 
  1793  0295                     	;# 
  1794  0296                     	;# 
  1795  0297                     	;# 
  1796  0298                     	;# 
  1797  029F                     	;# 
  1798  030C                     	;# 
  1799  030D                     	;# 
  1800  030E                     	;# 
  1801  0311                     	;# 
  1802  0311                     	;# 
  1803  0312                     	;# 
  1804  0313                     	;# 
  1805  0314                     	;# 
  1806  0315                     	;# 
  1807  0315                     	;# 
  1808  0316                     	;# 
  1809  0317                     	;# 
  1810  0318                     	;# 
  1811  038C                     	;# 
  1812  038D                     	;# 
  1813  038E                     	;# 
  1814  0391                     	;# 
  1815  0392                     	;# 
  1816  0393                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  0397                     	;# 
  1821  0398                     	;# 
  1822  0399                     	;# 
  1823  039A                     	;# 
  1824  039C                     	;# 
  1825  039D                     	;# 
  1826  039E                     	;# 
  1827  039F                     	;# 
  1828  0411                     	;# 
  1829  0411                     	;# 
  1830  0412                     	;# 
  1831  0413                     	;# 
  1832  0414                     	;# 
  1833  0415                     	;# 
  1834  0416                     	;# 
  1835  0417                     	;# 
  1836  0418                     	;# 
  1837  0418                     	;# 
  1838  0419                     	;# 
  1839  041A                     	;# 
  1840  041B                     	;# 
  1841  041C                     	;# 
  1842  041D                     	;# 
  1843  041E                     	;# 
  1844  041F                     	;# 
  1845  0498                     	;# 
  1846  0498                     	;# 
  1847  0499                     	;# 
  1848  049A                     	;# 
  1849  049B                     	;# 
  1850  049B                     	;# 
  1851  049C                     	;# 
  1852  049D                     	;# 
  1853  049E                     	;# 
  1854  049F                     	;# 
  1855  0617                     	;# 
  1856  0618                     	;# 
  1857  0619                     	;# 
  1858  0619                     	;# 
  1859  061A                     	;# 
  1860  061B                     	;# 
  1861  061C                     	;# 
  1862  061C                     	;# 
  1863  061F                     	;# 
  1864  0691                     	;# 
  1865  0692                     	;# 
  1866  0693                     	;# 
  1867  0694                     	;# 
  1868  0695                     	;# 
  1869  0696                     	;# 
  1870  0697                     	;# 
  1871  0698                     	;# 
  1872  0699                     	;# 
  1873  0711                     	;# 
  1874  0712                     	;# 
  1875  0713                     	;# 
  1876  0714                     	;# 
  1877  0715                     	;# 
  1878  0716                     	;# 
  1879  0717                     	;# 
  1880  0718                     	;# 
  1881  0719                     	;# 
  1882  0891                     	;# 
  1883  0891                     	;# 
  1884  0891                     	;# 
  1885  0891                     	;# 
  1886  0891                     	;# 
  1887  0891                     	;# 
  1888  0892                     	;# 
  1889  0892                     	;# 
  1890  0892                     	;# 
  1891  0893                     	;# 
  1892  0893                     	;# 
  1893  0893                     	;# 
  1894  0893                     	;# 
  1895  0893                     	;# 
  1896  0893                     	;# 
  1897  0894                     	;# 
  1898  0894                     	;# 
  1899  0894                     	;# 
  1900  0895                     	;# 
  1901  0895                     	;# 
  1902  0895                     	;# 
  1903  0896                     	;# 
  1904  0896                     	;# 
  1905  0896                     	;# 
  1906  089B                     	;# 
  1907  0911                     	;# 
  1908  0912                     	;# 
  1909  0913                     	;# 
  1910  0914                     	;# 
  1911  0915                     	;# 
  1912  0916                     	;# 
  1913  0918                     	;# 
  1914  0919                     	;# 
  1915  091A                     	;# 
  1916  091B                     	;# 
  1917  091C                     	;# 
  1918  091D                     	;# 
  1919  091E                     	;# 
  1920  091F                     	;# 
  1921  0E0F                     	;# 
  1922  0E10                     	;# 
  1923  0E11                     	;# 
  1924  0E12                     	;# 
  1925  0E13                     	;# 
  1926  0E14                     	;# 
  1927  0E15                     	;# 
  1928  0E16                     	;# 
  1929  0E17                     	;# 
  1930  0E18                     	;# 
  1931  0E19                     	;# 
  1932  0E1A                     	;# 
  1933  0E1B                     	;# 
  1934  0E1C                     	;# 
  1935  0E1D                     	;# 
  1936  0E1E                     	;# 
  1937  0E1F                     	;# 
  1938  0E20                     	;# 
  1939  0E21                     	;# 
  1940  0E22                     	;# 
  1941  0E24                     	;# 
  1942  0E25                     	;# 
  1943  0E28                     	;# 
  1944  0E29                     	;# 
  1945  0E2A                     	;# 
  1946  0E2B                     	;# 
  1947  0E2C                     	;# 
  1948  0E2D                     	;# 
  1949  0E2E                     	;# 
  1950  0E2F                     	;# 
  1951  0E90                     	;# 
  1952  0E91                     	;# 
  1953  0E92                     	;# 
  1954  0E94                     	;# 
  1955  0E95                     	;# 
  1956  0E9C                     	;# 
  1957  0E9D                     	;# 
  1958  0E9E                     	;# 
  1959  0E9F                     	;# 
  1960  0EA0                     	;# 
  1961  0EA1                     	;# 
  1962  0EA2                     	;# 
  1963  0EA3                     	;# 
  1964  0EA4                     	;# 
  1965  0EA5                     	;# 
  1966  0EA6                     	;# 
  1967  0EA7                     	;# 
  1968  0F0F                     	;# 
  1969  0F10                     	;# 
  1970  0F11                     	;# 
  1971  0F12                     	;# 
  1972  0F13                     	;# 
  1973  0F14                     	;# 
  1974  0F15                     	;# 
  1975  0F16                     	;# 
  1976  0F17                     	;# 
  1977  0F18                     	;# 
  1978  0F19                     	;# 
  1979  0F1A                     	;# 
  1980  0F1B                     	;# 
  1981  0F1C                     	;# 
  1982  0F1D                     	;# 
  1983  0F1E                     	;# 
  1984  0F1F                     	;# 
  1985  0F20                     	;# 
  1986  0F21                     	;# 
  1987  0F22                     	;# 
  1988  0F23                     	;# 
  1989  0F24                     	;# 
  1990  0F25                     	;# 
  1991  0F26                     	;# 
  1992  0F27                     	;# 
  1993  0F28                     	;# 
  1994  0F29                     	;# 
  1995  0F2A                     	;# 
  1996  0F2B                     	;# 
  1997  0F2C                     	;# 
  1998  0F2D                     	;# 
  1999  0F2E                     	;# 
  2000  0F2F                     	;# 
  2001  0F30                     	;# 
  2002  0F31                     	;# 
  2003  0F32                     	;# 
  2004  0F33                     	;# 
  2005  0F34                     	;# 
  2006  0F35                     	;# 
  2007  0F36                     	;# 
  2008  0F37                     	;# 
  2009  0FE4                     	;# 
  2010  0FE5                     	;# 
  2011  0FE6                     	;# 
  2012  0FE7                     	;# 
  2013  0FE8                     	;# 
  2014  0FE9                     	;# 
  2015  0FEA                     	;# 
  2016  0FEB                     	;# 
  2017  0FED                     	;# 
  2018  0FEE                     	;# 
  2019  0FEF                     	;# 
  2020  0000                     	;# 
  2021  0001                     	;# 
  2022  0002                     	;# 
  2023  0003                     	;# 
  2024  0004                     	;# 
  2025  0005                     	;# 
  2026  0006                     	;# 
  2027  0007                     	;# 
  2028  0008                     	;# 
  2029  0009                     	;# 
  2030  000A                     	;# 
  2031  000B                     	;# 
  2032  000C                     	;# 
  2033  000D                     	;# 
  2034  000E                     	;# 
  2035  0010                     	;# 
  2036  0011                     	;# 
  2037  0012                     	;# 
  2038  0013                     	;# 
  2039  0014                     	;# 
  2040  0015                     	;# 
  2041  0015                     	;# 
  2042  0016                     	;# 
  2043  0016                     	;# 
  2044  0017                     	;# 
  2045  0018                     	;# 
  2046  0019                     	;# 
  2047  0019                     	;# 
  2048  001A                     	;# 
  2049  001B                     	;# 
  2050  001C                     	;# 
  2051  001D                     	;# 
  2052  001E                     	;# 
  2053  001F                     	;# 
  2054  008C                     	;# 
  2055  008D                     	;# 
  2056  008E                     	;# 
  2057  0090                     	;# 
  2058  0091                     	;# 
  2059  0092                     	;# 
  2060  0093                     	;# 
  2061  0094                     	;# 
  2062  0097                     	;# 
  2063  009B                     	;# 
  2064  009B                     	;# 
  2065  009C                     	;# 
  2066  009D                     	;# 
  2067  009E                     	;# 
  2068  009F                     	;# 
  2069  010C                     	;# 
  2070  010D                     	;# 
  2071  010E                     	;# 
  2072  0111                     	;# 
  2073  0112                     	;# 
  2074  0113                     	;# 
  2075  0114                     	;# 
  2076  0115                     	;# 
  2077  0116                     	;# 
  2078  0117                     	;# 
  2079  0118                     	;# 
  2080  0119                     	;# 
  2081  018C                     	;# 
  2082  018D                     	;# 
  2083  018E                     	;# 
  2084  0199                     	;# 
  2085  0199                     	;# 
  2086  0199                     	;# 
  2087  019A                     	;# 
  2088  019A                     	;# 
  2089  019A                     	;# 
  2090  019B                     	;# 
  2091  019B                     	;# 
  2092  019B                     	;# 
  2093  019B                     	;# 
  2094  019B                     	;# 
  2095  019C                     	;# 
  2096  019C                     	;# 
  2097  019C                     	;# 
  2098  019D                     	;# 
  2099  019D                     	;# 
  2100  019D                     	;# 
  2101  019E                     	;# 
  2102  019E                     	;# 
  2103  019E                     	;# 
  2104  019F                     	;# 
  2105  019F                     	;# 
  2106  019F                     	;# 
  2107  019F                     	;# 
  2108  019F                     	;# 
  2109  020C                     	;# 
  2110  020D                     	;# 
  2111  020E                     	;# 
  2112  0211                     	;# 
  2113  0211                     	;# 
  2114  0212                     	;# 
  2115  0212                     	;# 
  2116  0213                     	;# 
  2117  0213                     	;# 
  2118  0214                     	;# 
  2119  0214                     	;# 
  2120  0215                     	;# 
  2121  0215                     	;# 
  2122  0215                     	;# 
  2123  0215                     	;# 
  2124  0216                     	;# 
  2125  0216                     	;# 
  2126  0217                     	;# 
  2127  0217                     	;# 
  2128  0219                     	;# 
  2129  021A                     	;# 
  2130  021B                     	;# 
  2131  021C                     	;# 
  2132  021D                     	;# 
  2133  021D                     	;# 
  2134  021E                     	;# 
  2135  021F                     	;# 
  2136  028C                     	;# 
  2137  028D                     	;# 
  2138  028E                     	;# 
  2139  0291                     	;# 
  2140  0291                     	;# 
  2141  0292                     	;# 
  2142  0293                     	;# 
  2143  0294                     	;# 
  2144  0295                     	;# 
  2145  0295                     	;# 
  2146  0296                     	;# 
  2147  0297                     	;# 
  2148  0298                     	;# 
  2149  029F                     	;# 
  2150  030C                     	;# 
  2151  030D                     	;# 
  2152  030E                     	;# 
  2153  0311                     	;# 
  2154  0311                     	;# 
  2155  0312                     	;# 
  2156  0313                     	;# 
  2157  0314                     	;# 
  2158  0315                     	;# 
  2159  0315                     	;# 
  2160  0316                     	;# 
  2161  0317                     	;# 
  2162  0318                     	;# 
  2163  038C                     	;# 
  2164  038D                     	;# 
  2165  038E                     	;# 
  2166  0391                     	;# 
  2167  0392                     	;# 
  2168  0393                     	;# 
  2169  0394                     	;# 
  2170  0395                     	;# 
  2171  0396                     	;# 
  2172  0397                     	;# 
  2173  0398                     	;# 
  2174  0399                     	;# 
  2175  039A                     	;# 
  2176  039C                     	;# 
  2177  039D                     	;# 
  2178  039E                     	;# 
  2179  039F                     	;# 
  2180  0411                     	;# 
  2181  0411                     	;# 
  2182  0412                     	;# 
  2183  0413                     	;# 
  2184  0414                     	;# 
  2185  0415                     	;# 
  2186  0416                     	;# 
  2187  0417                     	;# 
  2188  0418                     	;# 
  2189  0418                     	;# 
  2190  0419                     	;# 
  2191  041A                     	;# 
  2192  041B                     	;# 
  2193  041C                     	;# 
  2194  041D                     	;# 
  2195  041E                     	;# 
  2196  041F                     	;# 
  2197  0498                     	;# 
  2198  0498                     	;# 
  2199  0499                     	;# 
  2200  049A                     	;# 
  2201  049B                     	;# 
  2202  049B                     	;# 
  2203  049C                     	;# 
  2204  049D                     	;# 
  2205  049E                     	;# 
  2206  049F                     	;# 
  2207  0617                     	;# 
  2208  0618                     	;# 
  2209  0619                     	;# 
  2210  0619                     	;# 
  2211  061A                     	;# 
  2212  061B                     	;# 
  2213  061C                     	;# 
  2214  061C                     	;# 
  2215  061F                     	;# 
  2216  0691                     	;# 
  2217  0692                     	;# 
  2218  0693                     	;# 
  2219  0694                     	;# 
  2220  0695                     	;# 
  2221  0696                     	;# 
  2222  0697                     	;# 
  2223  0698                     	;# 
  2224  0699                     	;# 
  2225  0711                     	;# 
  2226  0712                     	;# 
  2227  0713                     	;# 
  2228  0714                     	;# 
  2229  0715                     	;# 
  2230  0716                     	;# 
  2231  0717                     	;# 
  2232  0718                     	;# 
  2233  0719                     	;# 
  2234  0891                     	;# 
  2235  0891                     	;# 
  2236  0891                     	;# 
  2237  0891                     	;# 
  2238  0891                     	;# 
  2239  0891                     	;# 
  2240  0892                     	;# 
  2241  0892                     	;# 
  2242  0892                     	;# 
  2243  0893                     	;# 
  2244  0893                     	;# 
  2245  0893                     	;# 
  2246  0893                     	;# 
  2247  0893                     	;# 
  2248  0893                     	;# 
  2249  0894                     	;# 
  2250  0894                     	;# 
  2251  0894                     	;# 
  2252  0895                     	;# 
  2253  0895                     	;# 
  2254  0895                     	;# 
  2255  0896                     	;# 
  2256  0896                     	;# 
  2257  0896                     	;# 
  2258  089B                     	;# 
  2259  0911                     	;# 
  2260  0912                     	;# 
  2261  0913                     	;# 
  2262  0914                     	;# 
  2263  0915                     	;# 
  2264  0916                     	;# 
  2265  0918                     	;# 
  2266  0919                     	;# 
  2267  091A                     	;# 
  2268  091B                     	;# 
  2269  091C                     	;# 
  2270  091D                     	;# 
  2271  091E                     	;# 
  2272  091F                     	;# 
  2273  0E0F                     	;# 
  2274  0E10                     	;# 
  2275  0E11                     	;# 
  2276  0E12                     	;# 
  2277  0E13                     	;# 
  2278  0E14                     	;# 
  2279  0E15                     	;# 
  2280  0E16                     	;# 
  2281  0E17                     	;# 
  2282  0E18                     	;# 
  2283  0E19                     	;# 
  2284  0E1A                     	;# 
  2285  0E1B                     	;# 
  2286  0E1C                     	;# 
  2287  0E1D                     	;# 
  2288  0E1E                     	;# 
  2289  0E1F                     	;# 
  2290  0E20                     	;# 
  2291  0E21                     	;# 
  2292  0E22                     	;# 
  2293  0E24                     	;# 
  2294  0E25                     	;# 
  2295  0E28                     	;# 
  2296  0E29                     	;# 
  2297  0E2A                     	;# 
  2298  0E2B                     	;# 
  2299  0E2C                     	;# 
  2300  0E2D                     	;# 
  2301  0E2E                     	;# 
  2302  0E2F                     	;# 
  2303  0E90                     	;# 
  2304  0E91                     	;# 
  2305  0E92                     	;# 
  2306  0E94                     	;# 
  2307  0E95                     	;# 
  2308  0E9C                     	;# 
  2309  0E9D                     	;# 
  2310  0E9E                     	;# 
  2311  0E9F                     	;# 
  2312  0EA0                     	;# 
  2313  0EA1                     	;# 
  2314  0EA2                     	;# 
  2315  0EA3                     	;# 
  2316  0EA4                     	;# 
  2317  0EA5                     	;# 
  2318  0EA6                     	;# 
  2319  0EA7                     	;# 
  2320  0F0F                     	;# 
  2321  0F10                     	;# 
  2322  0F11                     	;# 
  2323  0F12                     	;# 
  2324  0F13                     	;# 
  2325  0F14                     	;# 
  2326  0F15                     	;# 
  2327  0F16                     	;# 
  2328  0F17                     	;# 
  2329  0F18                     	;# 
  2330  0F19                     	;# 
  2331  0F1A                     	;# 
  2332  0F1B                     	;# 
  2333  0F1C                     	;# 
  2334  0F1D                     	;# 
  2335  0F1E                     	;# 
  2336  0F1F                     	;# 
  2337  0F20                     	;# 
  2338  0F21                     	;# 
  2339  0F22                     	;# 
  2340  0F23                     	;# 
  2341  0F24                     	;# 
  2342  0F25                     	;# 
  2343  0F26                     	;# 
  2344  0F27                     	;# 
  2345  0F28                     	;# 
  2346  0F29                     	;# 
  2347  0F2A                     	;# 
  2348  0F2B                     	;# 
  2349  0F2C                     	;# 
  2350  0F2D                     	;# 
  2351  0F2E                     	;# 
  2352  0F2F                     	;# 
  2353  0F30                     	;# 
  2354  0F31                     	;# 
  2355  0F32                     	;# 
  2356  0F33                     	;# 
  2357  0F34                     	;# 
  2358  0F35                     	;# 
  2359  0F36                     	;# 
  2360  0F37                     	;# 
  2361  0FE4                     	;# 
  2362  0FE5                     	;# 
  2363  0FE6                     	;# 
  2364  0FE7                     	;# 
  2365  0FE8                     	;# 
  2366  0FE9                     	;# 
  2367  0FEA                     	;# 
  2368  0FEB                     	;# 
  2369  0FED                     	;# 
  2370  0FEE                     	;# 
  2371  0FEF                     	;# 
  2372  0000                     	;# 
  2373  0001                     	;# 
  2374  0002                     	;# 
  2375  0003                     	;# 
  2376  0004                     	;# 
  2377  0005                     	;# 
  2378  0006                     	;# 
  2379  0007                     	;# 
  2380  0008                     	;# 
  2381  0009                     	;# 
  2382  000A                     	;# 
  2383  000B                     	;# 
  2384  000C                     	;# 
  2385  000D                     	;# 
  2386  000E                     	;# 
  2387  0010                     	;# 
  2388  0011                     	;# 
  2389  0012                     	;# 
  2390  0013                     	;# 
  2391  0014                     	;# 
  2392  0015                     	;# 
  2393  0015                     	;# 
  2394  0016                     	;# 
  2395  0016                     	;# 
  2396  0017                     	;# 
  2397  0018                     	;# 
  2398  0019                     	;# 
  2399  0019                     	;# 
  2400  001A                     	;# 
  2401  001B                     	;# 
  2402  001C                     	;# 
  2403  001D                     	;# 
  2404  001E                     	;# 
  2405  001F                     	;# 
  2406  008C                     	;# 
  2407  008D                     	;# 
  2408  008E                     	;# 
  2409  0090                     	;# 
  2410  0091                     	;# 
  2411  0092                     	;# 
  2412  0093                     	;# 
  2413  0094                     	;# 
  2414  0097                     	;# 
  2415  009B                     	;# 
  2416  009B                     	;# 
  2417  009C                     	;# 
  2418  009D                     	;# 
  2419  009E                     	;# 
  2420  009F                     	;# 
  2421  010C                     	;# 
  2422  010D                     	;# 
  2423  010E                     	;# 
  2424  0111                     	;# 
  2425  0112                     	;# 
  2426  0113                     	;# 
  2427  0114                     	;# 
  2428  0115                     	;# 
  2429  0116                     	;# 
  2430  0117                     	;# 
  2431  0118                     	;# 
  2432  0119                     	;# 
  2433  018C                     	;# 
  2434  018D                     	;# 
  2435  018E                     	;# 
  2436  0199                     	;# 
  2437  0199                     	;# 
  2438  0199                     	;# 
  2439  019A                     	;# 
  2440  019A                     	;# 
  2441  019A                     	;# 
  2442  019B                     	;# 
  2443  019B                     	;# 
  2444  019B                     	;# 
  2445  019B                     	;# 
  2446  019B                     	;# 
  2447  019C                     	;# 
  2448  019C                     	;# 
  2449  019C                     	;# 
  2450  019D                     	;# 
  2451  019D                     	;# 
  2452  019D                     	;# 
  2453  019E                     	;# 
  2454  019E                     	;# 
  2455  019E                     	;# 
  2456  019F                     	;# 
  2457  019F                     	;# 
  2458  019F                     	;# 
  2459  019F                     	;# 
  2460  019F                     	;# 
  2461  020C                     	;# 
  2462  020D                     	;# 
  2463  020E                     	;# 
  2464  0211                     	;# 
  2465  0211                     	;# 
  2466  0212                     	;# 
  2467  0212                     	;# 
  2468  0213                     	;# 
  2469  0213                     	;# 
  2470  0214                     	;# 
  2471  0214                     	;# 
  2472  0215                     	;# 
  2473  0215                     	;# 
  2474  0215                     	;# 
  2475  0215                     	;# 
  2476  0216                     	;# 
  2477  0216                     	;# 
  2478  0217                     	;# 
  2479  0217                     	;# 
  2480  0219                     	;# 
  2481  021A                     	;# 
  2482  021B                     	;# 
  2483  021C                     	;# 
  2484  021D                     	;# 
  2485  021D                     	;# 
  2486  021E                     	;# 
  2487  021F                     	;# 
  2488  028C                     	;# 
  2489  028D                     	;# 
  2490  028E                     	;# 
  2491  0291                     	;# 
  2492  0291                     	;# 
  2493  0292                     	;# 
  2494  0293                     	;# 
  2495  0294                     	;# 
  2496  0295                     	;# 
  2497  0295                     	;# 
  2498  0296                     	;# 
  2499  0297                     	;# 
  2500  0298                     	;# 
  2501  029F                     	;# 
  2502  030C                     	;# 
  2503  030D                     	;# 
  2504  030E                     	;# 
  2505  0311                     	;# 
  2506  0311                     	;# 
  2507  0312                     	;# 
  2508  0313                     	;# 
  2509  0314                     	;# 
  2510  0315                     	;# 
  2511  0315                     	;# 
  2512  0316                     	;# 
  2513  0317                     	;# 
  2514  0318                     	;# 
  2515  038C                     	;# 
  2516  038D                     	;# 
  2517  038E                     	;# 
  2518  0391                     	;# 
  2519  0392                     	;# 
  2520  0393                     	;# 
  2521  0394                     	;# 
  2522  0395                     	;# 
  2523  0396                     	;# 
  2524  0397                     	;# 
  2525  0398                     	;# 
  2526  0399                     	;# 
  2527  039A                     	;# 
  2528  039C                     	;# 
  2529  039D                     	;# 
  2530  039E                     	;# 
  2531  039F                     	;# 
  2532  0411                     	;# 
  2533  0411                     	;# 
  2534  0412                     	;# 
  2535  0413                     	;# 
  2536  0414                     	;# 
  2537  0415                     	;# 
  2538  0416                     	;# 
  2539  0417                     	;# 
  2540  0418                     	;# 
  2541  0418                     	;# 
  2542  0419                     	;# 
  2543  041A                     	;# 
  2544  041B                     	;# 
  2545  041C                     	;# 
  2546  041D                     	;# 
  2547  041E                     	;# 
  2548  041F                     	;# 
  2549  0498                     	;# 
  2550  0498                     	;# 
  2551  0499                     	;# 
  2552  049A                     	;# 
  2553  049B                     	;# 
  2554  049B                     	;# 
  2555  049C                     	;# 
  2556  049D                     	;# 
  2557  049E                     	;# 
  2558  049F                     	;# 
  2559  0617                     	;# 
  2560  0618                     	;# 
  2561  0619                     	;# 
  2562  0619                     	;# 
  2563  061A                     	;# 
  2564  061B                     	;# 
  2565  061C                     	;# 
  2566  061C                     	;# 
  2567  061F                     	;# 
  2568  0691                     	;# 
  2569  0692                     	;# 
  2570  0693                     	;# 
  2571  0694                     	;# 
  2572  0695                     	;# 
  2573  0696                     	;# 
  2574  0697                     	;# 
  2575  0698                     	;# 
  2576  0699                     	;# 
  2577  0711                     	;# 
  2578  0712                     	;# 
  2579  0713                     	;# 
  2580  0714                     	;# 
  2581  0715                     	;# 
  2582  0716                     	;# 
  2583  0717                     	;# 
  2584  0718                     	;# 
  2585  0719                     	;# 
  2586  0891                     	;# 
  2587  0891                     	;# 
  2588  0891                     	;# 
  2589  0891                     	;# 
  2590  0891                     	;# 
  2591  0891                     	;# 
  2592  0892                     	;# 
  2593  0892                     	;# 
  2594  0892                     	;# 
  2595  0893                     	;# 
  2596  0893                     	;# 
  2597  0893                     	;# 
  2598  0893                     	;# 
  2599  0893                     	;# 
  2600  0893                     	;# 
  2601  0894                     	;# 
  2602  0894                     	;# 
  2603  0894                     	;# 
  2604  0895                     	;# 
  2605  0895                     	;# 
  2606  0895                     	;# 
  2607  0896                     	;# 
  2608  0896                     	;# 
  2609  0896                     	;# 
  2610  089B                     	;# 
  2611  0911                     	;# 
  2612  0912                     	;# 
  2613  0913                     	;# 
  2614  0914                     	;# 
  2615  0915                     	;# 
  2616  0916                     	;# 
  2617  0918                     	;# 
  2618  0919                     	;# 
  2619  091A                     	;# 
  2620  091B                     	;# 
  2621  091C                     	;# 
  2622  091D                     	;# 
  2623  091E                     	;# 
  2624  091F                     	;# 
  2625  0E0F                     	;# 
  2626  0E10                     	;# 
  2627  0E11                     	;# 
  2628  0E12                     	;# 
  2629  0E13                     	;# 
  2630  0E14                     	;# 
  2631  0E15                     	;# 
  2632  0E16                     	;# 
  2633  0E17                     	;# 
  2634  0E18                     	;# 
  2635  0E19                     	;# 
  2636  0E1A                     	;# 
  2637  0E1B                     	;# 
  2638  0E1C                     	;# 
  2639  0E1D                     	;# 
  2640  0E1E                     	;# 
  2641  0E1F                     	;# 
  2642  0E20                     	;# 
  2643  0E21                     	;# 
  2644  0E22                     	;# 
  2645  0E24                     	;# 
  2646  0E25                     	;# 
  2647  0E28                     	;# 
  2648  0E29                     	;# 
  2649  0E2A                     	;# 
  2650  0E2B                     	;# 
  2651  0E2C                     	;# 
  2652  0E2D                     	;# 
  2653  0E2E                     	;# 
  2654  0E2F                     	;# 
  2655  0E90                     	;# 
  2656  0E91                     	;# 
  2657  0E92                     	;# 
  2658  0E94                     	;# 
  2659  0E95                     	;# 
  2660  0E9C                     	;# 
  2661  0E9D                     	;# 
  2662  0E9E                     	;# 
  2663  0E9F                     	;# 
  2664  0EA0                     	;# 
  2665  0EA1                     	;# 
  2666  0EA2                     	;# 
  2667  0EA3                     	;# 
  2668  0EA4                     	;# 
  2669  0EA5                     	;# 
  2670  0EA6                     	;# 
  2671  0EA7                     	;# 
  2672  0F0F                     	;# 
  2673  0F10                     	;# 
  2674  0F11                     	;# 
  2675  0F12                     	;# 
  2676  0F13                     	;# 
  2677  0F14                     	;# 
  2678  0F15                     	;# 
  2679  0F16                     	;# 
  2680  0F17                     	;# 
  2681  0F18                     	;# 
  2682  0F19                     	;# 
  2683  0F1A                     	;# 
  2684  0F1B                     	;# 
  2685  0F1C                     	;# 
  2686  0F1D                     	;# 
  2687  0F1E                     	;# 
  2688  0F1F                     	;# 
  2689  0F20                     	;# 
  2690  0F21                     	;# 
  2691  0F22                     	;# 
  2692  0F23                     	;# 
  2693  0F24                     	;# 
  2694  0F25                     	;# 
  2695  0F26                     	;# 
  2696  0F27                     	;# 
  2697  0F28                     	;# 
  2698  0F29                     	;# 
  2699  0F2A                     	;# 
  2700  0F2B                     	;# 
  2701  0F2C                     	;# 
  2702  0F2D                     	;# 
  2703  0F2E                     	;# 
  2704  0F2F                     	;# 
  2705  0F30                     	;# 
  2706  0F31                     	;# 
  2707  0F32                     	;# 
  2708  0F33                     	;# 
  2709  0F34                     	;# 
  2710  0F35                     	;# 
  2711  0F36                     	;# 
  2712  0F37                     	;# 
  2713  0FE4                     	;# 
  2714  0FE5                     	;# 
  2715  0FE6                     	;# 
  2716  0FE7                     	;# 
  2717  0FE8                     	;# 
  2718  0FE9                     	;# 
  2719  0FEA                     	;# 
  2720  0FEB                     	;# 
  2721  0FED                     	;# 
  2722  0FEE                     	;# 
  2723  0FEF                     	;# 
  2724  0000                     	;# 
  2725  0001                     	;# 
  2726  0002                     	;# 
  2727  0003                     	;# 
  2728  0004                     	;# 
  2729  0005                     	;# 
  2730  0006                     	;# 
  2731  0007                     	;# 
  2732  0008                     	;# 
  2733  0009                     	;# 
  2734  000A                     	;# 
  2735  000B                     	;# 
  2736  000C                     	;# 
  2737  000D                     	;# 
  2738  000E                     	;# 
  2739  0010                     	;# 
  2740  0011                     	;# 
  2741  0012                     	;# 
  2742  0013                     	;# 
  2743  0014                     	;# 
  2744  0015                     	;# 
  2745  0015                     	;# 
  2746  0016                     	;# 
  2747  0016                     	;# 
  2748  0017                     	;# 
  2749  0018                     	;# 
  2750  0019                     	;# 
  2751  0019                     	;# 
  2752  001A                     	;# 
  2753  001B                     	;# 
  2754  001C                     	;# 
  2755  001D                     	;# 
  2756  001E                     	;# 
  2757  001F                     	;# 
  2758  008C                     	;# 
  2759  008D                     	;# 
  2760  008E                     	;# 
  2761  0090                     	;# 
  2762  0091                     	;# 
  2763  0092                     	;# 
  2764  0093                     	;# 
  2765  0094                     	;# 
  2766  0097                     	;# 
  2767  009B                     	;# 
  2768  009B                     	;# 
  2769  009C                     	;# 
  2770  009D                     	;# 
  2771  009E                     	;# 
  2772  009F                     	;# 
  2773  010C                     	;# 
  2774  010D                     	;# 
  2775  010E                     	;# 
  2776  0111                     	;# 
  2777  0112                     	;# 
  2778  0113                     	;# 
  2779  0114                     	;# 
  2780  0115                     	;# 
  2781  0116                     	;# 
  2782  0117                     	;# 
  2783  0118                     	;# 
  2784  0119                     	;# 
  2785  018C                     	;# 
  2786  018D                     	;# 
  2787  018E                     	;# 
  2788  0199                     	;# 
  2789  0199                     	;# 
  2790  0199                     	;# 
  2791  019A                     	;# 
  2792  019A                     	;# 
  2793  019A                     	;# 
  2794  019B                     	;# 
  2795  019B                     	;# 
  2796  019B                     	;# 
  2797  019B                     	;# 
  2798  019B                     	;# 
  2799  019C                     	;# 
  2800  019C                     	;# 
  2801  019C                     	;# 
  2802  019D                     	;# 
  2803  019D                     	;# 
  2804  019D                     	;# 
  2805  019E                     	;# 
  2806  019E                     	;# 
  2807  019E                     	;# 
  2808  019F                     	;# 
  2809  019F                     	;# 
  2810  019F                     	;# 
  2811  019F                     	;# 
  2812  019F                     	;# 
  2813  020C                     	;# 
  2814  020D                     	;# 
  2815  020E                     	;# 
  2816  0211                     	;# 
  2817  0211                     	;# 
  2818  0212                     	;# 
  2819  0212                     	;# 
  2820  0213                     	;# 
  2821  0213                     	;# 
  2822  0214                     	;# 
  2823  0214                     	;# 
  2824  0215                     	;# 
  2825  0215                     	;# 
  2826  0215                     	;# 
  2827  0215                     	;# 
  2828  0216                     	;# 
  2829  0216                     	;# 
  2830  0217                     	;# 
  2831  0217                     	;# 
  2832  0219                     	;# 
  2833  021A                     	;# 
  2834  021B                     	;# 
  2835  021C                     	;# 
  2836  021D                     	;# 
  2837  021D                     	;# 
  2838  021E                     	;# 
  2839  021F                     	;# 
  2840  028C                     	;# 
  2841  028D                     	;# 
  2842  028E                     	;# 
  2843  0291                     	;# 
  2844  0291                     	;# 
  2845  0292                     	;# 
  2846  0293                     	;# 
  2847  0294                     	;# 
  2848  0295                     	;# 
  2849  0295                     	;# 
  2850  0296                     	;# 
  2851  0297                     	;# 
  2852  0298                     	;# 
  2853  029F                     	;# 
  2854  030C                     	;# 
  2855  030D                     	;# 
  2856  030E                     	;# 
  2857  0311                     	;# 
  2858  0311                     	;# 
  2859  0312                     	;# 
  2860  0313                     	;# 
  2861  0314                     	;# 
  2862  0315                     	;# 
  2863  0315                     	;# 
  2864  0316                     	;# 
  2865  0317                     	;# 
  2866  0318                     	;# 
  2867  038C                     	;# 
  2868  038D                     	;# 
  2869  038E                     	;# 
  2870  0391                     	;# 
  2871  0392                     	;# 
  2872  0393                     	;# 
  2873  0394                     	;# 
  2874  0395                     	;# 
  2875  0396                     	;# 
  2876  0397                     	;# 
  2877  0398                     	;# 
  2878  0399                     	;# 
  2879  039A                     	;# 
  2880  039C                     	;# 
  2881  039D                     	;# 
  2882  039E                     	;# 
  2883  039F                     	;# 
  2884  0411                     	;# 
  2885  0411                     	;# 
  2886  0412                     	;# 
  2887  0413                     	;# 
  2888  0414                     	;# 
  2889  0415                     	;# 
  2890  0416                     	;# 
  2891  0417                     	;# 
  2892  0418                     	;# 
  2893  0418                     	;# 
  2894  0419                     	;# 
  2895  041A                     	;# 
  2896  041B                     	;# 
  2897  041C                     	;# 
  2898  041D                     	;# 
  2899  041E                     	;# 
  2900  041F                     	;# 
  2901  0498                     	;# 
  2902  0498                     	;# 
  2903  0499                     	;# 
  2904  049A                     	;# 
  2905  049B                     	;# 
  2906  049B                     	;# 
  2907  049C                     	;# 
  2908  049D                     	;# 
  2909  049E                     	;# 
  2910  049F                     	;# 
  2911  0617                     	;# 
  2912  0618                     	;# 
  2913  0619                     	;# 
  2914  0619                     	;# 
  2915  061A                     	;# 
  2916  061B                     	;# 
  2917  061C                     	;# 
  2918  061C                     	;# 
  2919  061F                     	;# 
  2920  0691                     	;# 
  2921  0692                     	;# 
  2922  0693                     	;# 
  2923  0694                     	;# 
  2924  0695                     	;# 
  2925  0696                     	;# 
  2926  0697                     	;# 
  2927  0698                     	;# 
  2928  0699                     	;# 
  2929  0711                     	;# 
  2930  0712                     	;# 
  2931  0713                     	;# 
  2932  0714                     	;# 
  2933  0715                     	;# 
  2934  0716                     	;# 
  2935  0717                     	;# 
  2936  0718                     	;# 
  2937  0719                     	;# 
  2938  0891                     	;# 
  2939  0891                     	;# 
  2940  0891                     	;# 
  2941  0891                     	;# 
  2942  0891                     	;# 
  2943  0891                     	;# 
  2944  0892                     	;# 
  2945  0892                     	;# 
  2946  0892                     	;# 
  2947  0893                     	;# 
  2948  0893                     	;# 
  2949  0893                     	;# 
  2950  0893                     	;# 
  2951  0893                     	;# 
  2952  0893                     	;# 
  2953  0894                     	;# 
  2954  0894                     	;# 
  2955  0894                     	;# 
  2956  0895                     	;# 
  2957  0895                     	;# 
  2958  0895                     	;# 
  2959  0896                     	;# 
  2960  0896                     	;# 
  2961  0896                     	;# 
  2962  089B                     	;# 
  2963  0911                     	;# 
  2964  0912                     	;# 
  2965  0913                     	;# 
  2966  0914                     	;# 
  2967  0915                     	;# 
  2968  0916                     	;# 
  2969  0918                     	;# 
  2970  0919                     	;# 
  2971  091A                     	;# 
  2972  091B                     	;# 
  2973  091C                     	;# 
  2974  091D                     	;# 
  2975  091E                     	;# 
  2976  091F                     	;# 
  2977  0E0F                     	;# 
  2978  0E10                     	;# 
  2979  0E11                     	;# 
  2980  0E12                     	;# 
  2981  0E13                     	;# 
  2982  0E14                     	;# 
  2983  0E15                     	;# 
  2984  0E16                     	;# 
  2985  0E17                     	;# 
  2986  0E18                     	;# 
  2987  0E19                     	;# 
  2988  0E1A                     	;# 
  2989  0E1B                     	;# 
  2990  0E1C                     	;# 
  2991  0E1D                     	;# 
  2992  0E1E                     	;# 
  2993  0E1F                     	;# 
  2994  0E20                     	;# 
  2995  0E21                     	;# 
  2996  0E22                     	;# 
  2997  0E24                     	;# 
  2998  0E25                     	;# 
  2999  0E28                     	;# 
  3000  0E29                     	;# 
  3001  0E2A                     	;# 
  3002  0E2B                     	;# 
  3003  0E2C                     	;# 
  3004  0E2D                     	;# 
  3005  0E2E                     	;# 
  3006  0E2F                     	;# 
  3007  0E90                     	;# 
  3008  0E91                     	;# 
  3009  0E92                     	;# 
  3010  0E94                     	;# 
  3011  0E95                     	;# 
  3012  0E9C                     	;# 
  3013  0E9D                     	;# 
  3014  0E9E                     	;# 
  3015  0E9F                     	;# 
  3016  0EA0                     	;# 
  3017  0EA1                     	;# 
  3018  0EA2                     	;# 
  3019  0EA3                     	;# 
  3020  0EA4                     	;# 
  3021  0EA5                     	;# 
  3022  0EA6                     	;# 
  3023  0EA7                     	;# 
  3024  0F0F                     	;# 
  3025  0F10                     	;# 
  3026  0F11                     	;# 
  3027  0F12                     	;# 
  3028  0F13                     	;# 
  3029  0F14                     	;# 
  3030  0F15                     	;# 
  3031  0F16                     	;# 
  3032  0F17                     	;# 
  3033  0F18                     	;# 
  3034  0F19                     	;# 
  3035  0F1A                     	;# 
  3036  0F1B                     	;# 
  3037  0F1C                     	;# 
  3038  0F1D                     	;# 
  3039  0F1E                     	;# 
  3040  0F1F                     	;# 
  3041  0F20                     	;# 
  3042  0F21                     	;# 
  3043  0F22                     	;# 
  3044  0F23                     	;# 
  3045  0F24                     	;# 
  3046  0F25                     	;# 
  3047  0F26                     	;# 
  3048  0F27                     	;# 
  3049  0F28                     	;# 
  3050  0F29                     	;# 
  3051  0F2A                     	;# 
  3052  0F2B                     	;# 
  3053  0F2C                     	;# 
  3054  0F2D                     	;# 
  3055  0F2E                     	;# 
  3056  0F2F                     	;# 
  3057  0F30                     	;# 
  3058  0F31                     	;# 
  3059  0F32                     	;# 
  3060  0F33                     	;# 
  3061  0F34                     	;# 
  3062  0F35                     	;# 
  3063  0F36                     	;# 
  3064  0F37                     	;# 
  3065  0FE4                     	;# 
  3066  0FE5                     	;# 
  3067  0FE6                     	;# 
  3068  0FE7                     	;# 
  3069  0FE8                     	;# 
  3070  0FE9                     	;# 
  3071  0FEA                     	;# 
  3072  0FEB                     	;# 
  3073  0FED                     	;# 
  3074  0FEE                     	;# 
  3075  0FEF                     	;# 
  3076  0000                     	;# 
  3077  0001                     	;# 
  3078  0002                     	;# 
  3079  0003                     	;# 
  3080  0004                     	;# 
  3081  0005                     	;# 
  3082  0006                     	;# 
  3083  0007                     	;# 
  3084  0008                     	;# 
  3085  0009                     	;# 
  3086  000A                     	;# 
  3087  000B                     	;# 
  3088  000C                     	;# 
  3089  000D                     	;# 
  3090  000E                     	;# 
  3091  0010                     	;# 
  3092  0011                     	;# 
  3093  0012                     	;# 
  3094  0013                     	;# 
  3095  0014                     	;# 
  3096  0015                     	;# 
  3097  0015                     	;# 
  3098  0016                     	;# 
  3099  0016                     	;# 
  3100  0017                     	;# 
  3101  0018                     	;# 
  3102  0019                     	;# 
  3103  0019                     	;# 
  3104  001A                     	;# 
  3105  001B                     	;# 
  3106  001C                     	;# 
  3107  001D                     	;# 
  3108  001E                     	;# 
  3109  001F                     	;# 
  3110  008C                     	;# 
  3111  008D                     	;# 
  3112  008E                     	;# 
  3113  0090                     	;# 
  3114  0091                     	;# 
  3115  0092                     	;# 
  3116  0093                     	;# 
  3117  0094                     	;# 
  3118  0097                     	;# 
  3119  009B                     	;# 
  3120  009B                     	;# 
  3121  009C                     	;# 
  3122  009D                     	;# 
  3123  009E                     	;# 
  3124  009F                     	;# 
  3125  010C                     	;# 
  3126  010D                     	;# 
  3127  010E                     	;# 
  3128  0111                     	;# 
  3129  0112                     	;# 
  3130  0113                     	;# 
  3131  0114                     	;# 
  3132  0115                     	;# 
  3133  0116                     	;# 
  3134  0117                     	;# 
  3135  0118                     	;# 
  3136  0119                     	;# 
  3137  018C                     	;# 
  3138  018D                     	;# 
  3139  018E                     	;# 
  3140  0199                     	;# 
  3141  0199                     	;# 
  3142  0199                     	;# 
  3143  019A                     	;# 
  3144  019A                     	;# 
  3145  019A                     	;# 
  3146  019B                     	;# 
  3147  019B                     	;# 
  3148  019B                     	;# 
  3149  019B                     	;# 
  3150  019B                     	;# 
  3151  019C                     	;# 
  3152  019C                     	;# 
  3153  019C                     	;# 
  3154  019D                     	;# 
  3155  019D                     	;# 
  3156  019D                     	;# 
  3157  019E                     	;# 
  3158  019E                     	;# 
  3159  019E                     	;# 
  3160  019F                     	;# 
  3161  019F                     	;# 
  3162  019F                     	;# 
  3163  019F                     	;# 
  3164  019F                     	;# 
  3165  020C                     	;# 
  3166  020D                     	;# 
  3167  020E                     	;# 
  3168  0211                     	;# 
  3169  0211                     	;# 
  3170  0212                     	;# 
  3171  0212                     	;# 
  3172  0213                     	;# 
  3173  0213                     	;# 
  3174  0214                     	;# 
  3175  0214                     	;# 
  3176  0215                     	;# 
  3177  0215                     	;# 
  3178  0215                     	;# 
  3179  0215                     	;# 
  3180  0216                     	;# 
  3181  0216                     	;# 
  3182  0217                     	;# 
  3183  0217                     	;# 
  3184  0219                     	;# 
  3185  021A                     	;# 
  3186  021B                     	;# 
  3187  021C                     	;# 
  3188  021D                     	;# 
  3189  021D                     	;# 
  3190  021E                     	;# 
  3191  021F                     	;# 
  3192  028C                     	;# 
  3193  028D                     	;# 
  3194  028E                     	;# 
  3195  0291                     	;# 
  3196  0291                     	;# 
  3197  0292                     	;# 
  3198  0293                     	;# 
  3199  0294                     	;# 
  3200  0295                     	;# 
  3201  0295                     	;# 
  3202  0296                     	;# 
  3203  0297                     	;# 
  3204  0298                     	;# 
  3205  029F                     	;# 
  3206  030C                     	;# 
  3207  030D                     	;# 
  3208  030E                     	;# 
  3209  0311                     	;# 
  3210  0311                     	;# 
  3211  0312                     	;# 
  3212  0313                     	;# 
  3213  0314                     	;# 
  3214  0315                     	;# 
  3215  0315                     	;# 
  3216  0316                     	;# 
  3217  0317                     	;# 
  3218  0318                     	;# 
  3219  038C                     	;# 
  3220  038D                     	;# 
  3221  038E                     	;# 
  3222  0391                     	;# 
  3223  0392                     	;# 
  3224  0393                     	;# 
  3225  0394                     	;# 
  3226  0395                     	;# 
  3227  0396                     	;# 
  3228  0397                     	;# 
  3229  0398                     	;# 
  3230  0399                     	;# 
  3231  039A                     	;# 
  3232  039C                     	;# 
  3233  039D                     	;# 
  3234  039E                     	;# 
  3235  039F                     	;# 
  3236  0411                     	;# 
  3237  0411                     	;# 
  3238  0412                     	;# 
  3239  0413                     	;# 
  3240  0414                     	;# 
  3241  0415                     	;# 
  3242  0416                     	;# 
  3243  0417                     	;# 
  3244  0418                     	;# 
  3245  0418                     	;# 
  3246  0419                     	;# 
  3247  041A                     	;# 
  3248  041B                     	;# 
  3249  041C                     	;# 
  3250  041D                     	;# 
  3251  041E                     	;# 
  3252  041F                     	;# 
  3253  0498                     	;# 
  3254  0498                     	;# 
  3255  0499                     	;# 
  3256  049A                     	;# 
  3257  049B                     	;# 
  3258  049B                     	;# 
  3259  049C                     	;# 
  3260  049D                     	;# 
  3261  049E                     	;# 
  3262  049F                     	;# 
  3263  0617                     	;# 
  3264  0618                     	;# 
  3265  0619                     	;# 
  3266  0619                     	;# 
  3267  061A                     	;# 
  3268  061B                     	;# 
  3269  061C                     	;# 
  3270  061C                     	;# 
  3271  061F                     	;# 
  3272  0691                     	;# 
  3273  0692                     	;# 
  3274  0693                     	;# 
  3275  0694                     	;# 
  3276  0695                     	;# 
  3277  0696                     	;# 
  3278  0697                     	;# 
  3279  0698                     	;# 
  3280  0699                     	;# 
  3281  0711                     	;# 
  3282  0712                     	;# 
  3283  0713                     	;# 
  3284  0714                     	;# 
  3285  0715                     	;# 
  3286  0716                     	;# 
  3287  0717                     	;# 
  3288  0718                     	;# 
  3289  0719                     	;# 
  3290  0891                     	;# 
  3291  0891                     	;# 
  3292  0891                     	;# 
  3293  0891                     	;# 
  3294  0891                     	;# 
  3295  0891                     	;# 
  3296  0892                     	;# 
  3297  0892                     	;# 
  3298  0892                     	;# 
  3299  0893                     	;# 
  3300  0893                     	;# 
  3301  0893                     	;# 
  3302  0893                     	;# 
  3303  0893                     	;# 
  3304  0893                     	;# 
  3305  0894                     	;# 
  3306  0894                     	;# 
  3307  0894                     	;# 
  3308  0895                     	;# 
  3309  0895                     	;# 
  3310  0895                     	;# 
  3311  0896                     	;# 
  3312  0896                     	;# 
  3313  0896                     	;# 
  3314  089B                     	;# 
  3315  0911                     	;# 
  3316  0912                     	;# 
  3317  0913                     	;# 
  3318  0914                     	;# 
  3319  0915                     	;# 
  3320  0916                     	;# 
  3321  0918                     	;# 
  3322  0919                     	;# 
  3323  091A                     	;# 
  3324  091B                     	;# 
  3325  091C                     	;# 
  3326  091D                     	;# 
  3327  091E                     	;# 
  3328  091F                     	;# 
  3329  0E0F                     	;# 
  3330  0E10                     	;# 
  3331  0E11                     	;# 
  3332  0E12                     	;# 
  3333  0E13                     	;# 
  3334  0E14                     	;# 
  3335  0E15                     	;# 
  3336  0E16                     	;# 
  3337  0E17                     	;# 
  3338  0E18                     	;# 
  3339  0E19                     	;# 
  3340  0E1A                     	;# 
  3341  0E1B                     	;# 
  3342  0E1C                     	;# 
  3343  0E1D                     	;# 
  3344  0E1E                     	;# 
  3345  0E1F                     	;# 
  3346  0E20                     	;# 
  3347  0E21                     	;# 
  3348  0E22                     	;# 
  3349  0E24                     	;# 
  3350  0E25                     	;# 
  3351  0E28                     	;# 
  3352  0E29                     	;# 
  3353  0E2A                     	;# 
  3354  0E2B                     	;# 
  3355  0E2C                     	;# 
  3356  0E2D                     	;# 
  3357  0E2E                     	;# 
  3358  0E2F                     	;# 
  3359  0E90                     	;# 
  3360  0E91                     	;# 
  3361  0E92                     	;# 
  3362  0E94                     	;# 
  3363  0E95                     	;# 
  3364  0E9C                     	;# 
  3365  0E9D                     	;# 
  3366  0E9E                     	;# 
  3367  0E9F                     	;# 
  3368  0EA0                     	;# 
  3369  0EA1                     	;# 
  3370  0EA2                     	;# 
  3371  0EA3                     	;# 
  3372  0EA4                     	;# 
  3373  0EA5                     	;# 
  3374  0EA6                     	;# 
  3375  0EA7                     	;# 
  3376  0F0F                     	;# 
  3377  0F10                     	;# 
  3378  0F11                     	;# 
  3379  0F12                     	;# 
  3380  0F13                     	;# 
  3381  0F14                     	;# 
  3382  0F15                     	;# 
  3383  0F16                     	;# 
  3384  0F17                     	;# 
  3385  0F18                     	;# 
  3386  0F19                     	;# 
  3387  0F1A                     	;# 
  3388  0F1B                     	;# 
  3389  0F1C                     	;# 
  3390  0F1D                     	;# 
  3391  0F1E                     	;# 
  3392  0F1F                     	;# 
  3393  0F20                     	;# 
  3394  0F21                     	;# 
  3395  0F22                     	;# 
  3396  0F23                     	;# 
  3397  0F24                     	;# 
  3398  0F25                     	;# 
  3399  0F26                     	;# 
  3400  0F27                     	;# 
  3401  0F28                     	;# 
  3402  0F29                     	;# 
  3403  0F2A                     	;# 
  3404  0F2B                     	;# 
  3405  0F2C                     	;# 
  3406  0F2D                     	;# 
  3407  0F2E                     	;# 
  3408  0F2F                     	;# 
  3409  0F30                     	;# 
  3410  0F31                     	;# 
  3411  0F32                     	;# 
  3412  0F33                     	;# 
  3413  0F34                     	;# 
  3414  0F35                     	;# 
  3415  0F36                     	;# 
  3416  0F37                     	;# 
  3417  0FE4                     	;# 
  3418  0FE5                     	;# 
  3419  0FE6                     	;# 
  3420  0FE7                     	;# 
  3421  0FE8                     	;# 
  3422  0FE9                     	;# 
  3423  0FEA                     	;# 
  3424  0FEB                     	;# 
  3425  0FED                     	;# 
  3426  0FEE                     	;# 
  3427  0FEF                     	;# 
  3428  0000                     	;# 
  3429  0001                     	;# 
  3430  0002                     	;# 
  3431  0003                     	;# 
  3432  0004                     	;# 
  3433  0005                     	;# 
  3434  0006                     	;# 
  3435  0007                     	;# 
  3436  0008                     	;# 
  3437  0009                     	;# 
  3438  000A                     	;# 
  3439  000B                     	;# 
  3440  000C                     	;# 
  3441  000D                     	;# 
  3442  000E                     	;# 
  3443  0010                     	;# 
  3444  0011                     	;# 
  3445  0012                     	;# 
  3446  0013                     	;# 
  3447  0014                     	;# 
  3448  0015                     	;# 
  3449  0015                     	;# 
  3450  0016                     	;# 
  3451  0016                     	;# 
  3452  0017                     	;# 
  3453  0018                     	;# 
  3454  0019                     	;# 
  3455  0019                     	;# 
  3456  001A                     	;# 
  3457  001B                     	;# 
  3458  001C                     	;# 
  3459  001D                     	;# 
  3460  001E                     	;# 
  3461  001F                     	;# 
  3462  008C                     	;# 
  3463  008D                     	;# 
  3464  008E                     	;# 
  3465  0090                     	;# 
  3466  0091                     	;# 
  3467  0092                     	;# 
  3468  0093                     	;# 
  3469  0094                     	;# 
  3470  0097                     	;# 
  3471  009B                     	;# 
  3472  009B                     	;# 
  3473  009C                     	;# 
  3474  009D                     	;# 
  3475  009E                     	;# 
  3476  009F                     	;# 
  3477  010C                     	;# 
  3478  010D                     	;# 
  3479  010E                     	;# 
  3480  0111                     	;# 
  3481  0112                     	;# 
  3482  0113                     	;# 
  3483  0114                     	;# 
  3484  0115                     	;# 
  3485  0116                     	;# 
  3486  0117                     	;# 
  3487  0118                     	;# 
  3488  0119                     	;# 
  3489  018C                     	;# 
  3490  018D                     	;# 
  3491  018E                     	;# 
  3492  0199                     	;# 
  3493  0199                     	;# 
  3494  0199                     	;# 
  3495  019A                     	;# 
  3496  019A                     	;# 
  3497  019A                     	;# 
  3498  019B                     	;# 
  3499  019B                     	;# 
  3500  019B                     	;# 
  3501  019B                     	;# 
  3502  019B                     	;# 
  3503  019C                     	;# 
  3504  019C                     	;# 
  3505  019C                     	;# 
  3506  019D                     	;# 
  3507  019D                     	;# 
  3508  019D                     	;# 
  3509  019E                     	;# 
  3510  019E                     	;# 
  3511  019E                     	;# 
  3512  019F                     	;# 
  3513  019F                     	;# 
  3514  019F                     	;# 
  3515  019F                     	;# 
  3516  019F                     	;# 
  3517  020C                     	;# 
  3518  020D                     	;# 
  3519  020E                     	;# 
  3520  0211                     	;# 
  3521  0211                     	;# 
  3522  0212                     	;# 
  3523  0212                     	;# 
  3524  0213                     	;# 
  3525  0213                     	;# 
  3526  0214                     	;# 
  3527  0214                     	;# 
  3528  0215                     	;# 
  3529  0215                     	;# 
  3530  0215                     	;# 
  3531  0215                     	;# 
  3532  0216                     	;# 
  3533  0216                     	;# 
  3534  0217                     	;# 
  3535  0217                     	;# 
  3536  0219                     	;# 
  3537  021A                     	;# 
  3538  021B                     	;# 
  3539  021C                     	;# 
  3540  021D                     	;# 
  3541  021D                     	;# 
  3542  021E                     	;# 
  3543  021F                     	;# 
  3544  028C                     	;# 
  3545  028D                     	;# 
  3546  028E                     	;# 
  3547  0291                     	;# 
  3548  0291                     	;# 
  3549  0292                     	;# 
  3550  0293                     	;# 
  3551  0294                     	;# 
  3552  0295                     	;# 
  3553  0295                     	;# 
  3554  0296                     	;# 
  3555  0297                     	;# 
  3556  0298                     	;# 
  3557  029F                     	;# 
  3558  030C                     	;# 
  3559  030D                     	;# 
  3560  030E                     	;# 
  3561  0311                     	;# 
  3562  0311                     	;# 
  3563  0312                     	;# 
  3564  0313                     	;# 
  3565  0314                     	;# 
  3566  0315                     	;# 
  3567  0315                     	;# 
  3568  0316                     	;# 
  3569  0317                     	;# 
  3570  0318                     	;# 
  3571  038C                     	;# 
  3572  038D                     	;# 
  3573  038E                     	;# 
  3574  0391                     	;# 
  3575  0392                     	;# 
  3576  0393                     	;# 
  3577  0394                     	;# 
  3578  0395                     	;# 
  3579  0396                     	;# 
  3580  0397                     	;# 
  3581  0398                     	;# 
  3582  0399                     	;# 
  3583  039A                     	;# 
  3584  039C                     	;# 
  3585  039D                     	;# 
  3586  039E                     	;# 
  3587  039F                     	;# 
  3588  0411                     	;# 
  3589  0411                     	;# 
  3590  0412                     	;# 
  3591  0413                     	;# 
  3592  0414                     	;# 
  3593  0415                     	;# 
  3594  0416                     	;# 
  3595  0417                     	;# 
  3596  0418                     	;# 
  3597  0418                     	;# 
  3598  0419                     	;# 
  3599  041A                     	;# 
  3600  041B                     	;# 
  3601  041C                     	;# 
  3602  041D                     	;# 
  3603  041E                     	;# 
  3604  041F                     	;# 
  3605  0498                     	;# 
  3606  0498                     	;# 
  3607  0499                     	;# 
  3608  049A                     	;# 
  3609  049B                     	;# 
  3610  049B                     	;# 
  3611  049C                     	;# 
  3612  049D                     	;# 
  3613  049E                     	;# 
  3614  049F                     	;# 
  3615  0617                     	;# 
  3616  0618                     	;# 
  3617  0619                     	;# 
  3618  0619                     	;# 
  3619  061A                     	;# 
  3620  061B                     	;# 
  3621  061C                     	;# 
  3622  061C                     	;# 
  3623  061F                     	;# 
  3624  0691                     	;# 
  3625  0692                     	;# 
  3626  0693                     	;# 
  3627  0694                     	;# 
  3628  0695                     	;# 
  3629  0696                     	;# 
  3630  0697                     	;# 
  3631  0698                     	;# 
  3632  0699                     	;# 
  3633  0711                     	;# 
  3634  0712                     	;# 
  3635  0713                     	;# 
  3636  0714                     	;# 
  3637  0715                     	;# 
  3638  0716                     	;# 
  3639  0717                     	;# 
  3640  0718                     	;# 
  3641  0719                     	;# 
  3642  0891                     	;# 
  3643  0891                     	;# 
  3644  0891                     	;# 
  3645  0891                     	;# 
  3646  0891                     	;# 
  3647  0891                     	;# 
  3648  0892                     	;# 
  3649  0892                     	;# 
  3650  0892                     	;# 
  3651  0893                     	;# 
  3652  0893                     	;# 
  3653  0893                     	;# 
  3654  0893                     	;# 
  3655  0893                     	;# 
  3656  0893                     	;# 
  3657  0894                     	;# 
  3658  0894                     	;# 
  3659  0894                     	;# 
  3660  0895                     	;# 
  3661  0895                     	;# 
  3662  0895                     	;# 
  3663  0896                     	;# 
  3664  0896                     	;# 
  3665  0896                     	;# 
  3666  089B                     	;# 
  3667  0911                     	;# 
  3668  0912                     	;# 
  3669  0913                     	;# 
  3670  0914                     	;# 
  3671  0915                     	;# 
  3672  0916                     	;# 
  3673  0918                     	;# 
  3674  0919                     	;# 
  3675  091A                     	;# 
  3676  091B                     	;# 
  3677  091C                     	;# 
  3678  091D                     	;# 
  3679  091E                     	;# 
  3680  091F                     	;# 
  3681  0E0F                     	;# 
  3682  0E10                     	;# 
  3683  0E11                     	;# 
  3684  0E12                     	;# 
  3685  0E13                     	;# 
  3686  0E14                     	;# 
  3687  0E15                     	;# 
  3688  0E16                     	;# 
  3689  0E17                     	;# 
  3690  0E18                     	;# 
  3691  0E19                     	;# 
  3692  0E1A                     	;# 
  3693  0E1B                     	;# 
  3694  0E1C                     	;# 
  3695  0E1D                     	;# 
  3696  0E1E                     	;# 
  3697  0E1F                     	;# 
  3698  0E20                     	;# 
  3699  0E21                     	;# 
  3700  0E22                     	;# 
  3701  0E24                     	;# 
  3702  0E25                     	;# 
  3703  0E28                     	;# 
  3704  0E29                     	;# 
  3705  0E2A                     	;# 
  3706  0E2B                     	;# 
  3707  0E2C                     	;# 
  3708  0E2D                     	;# 
  3709  0E2E                     	;# 
  3710  0E2F                     	;# 
  3711  0E90                     	;# 
  3712  0E91                     	;# 
  3713  0E92                     	;# 
  3714  0E94                     	;# 
  3715  0E95                     	;# 
  3716  0E9C                     	;# 
  3717  0E9D                     	;# 
  3718  0E9E                     	;# 
  3719  0E9F                     	;# 
  3720  0EA0                     	;# 
  3721  0EA1                     	;# 
  3722  0EA2                     	;# 
  3723  0EA3                     	;# 
  3724  0EA4                     	;# 
  3725  0EA5                     	;# 
  3726  0EA6                     	;# 
  3727  0EA7                     	;# 
  3728  0F0F                     	;# 
  3729  0F10                     	;# 
  3730  0F11                     	;# 
  3731  0F12                     	;# 
  3732  0F13                     	;# 
  3733  0F14                     	;# 
  3734  0F15                     	;# 
  3735  0F16                     	;# 
  3736  0F17                     	;# 
  3737  0F18                     	;# 
  3738  0F19                     	;# 
  3739  0F1A                     	;# 
  3740  0F1B                     	;# 
  3741  0F1C                     	;# 
  3742  0F1D                     	;# 
  3743  0F1E                     	;# 
  3744  0F1F                     	;# 
  3745  0F20                     	;# 
  3746  0F21                     	;# 
  3747  0F22                     	;# 
  3748  0F23                     	;# 
  3749  0F24                     	;# 
  3750  0F25                     	;# 
  3751  0F26                     	;# 
  3752  0F27                     	;# 
  3753  0F28                     	;# 
  3754  0F29                     	;# 
  3755  0F2A                     	;# 
  3756  0F2B                     	;# 
  3757  0F2C                     	;# 
  3758  0F2D                     	;# 
  3759  0F2E                     	;# 
  3760  0F2F                     	;# 
  3761  0F30                     	;# 
  3762  0F31                     	;# 
  3763  0F32                     	;# 
  3764  0F33                     	;# 
  3765  0F34                     	;# 
  3766  0F35                     	;# 
  3767  0F36                     	;# 
  3768  0F37                     	;# 
  3769  0FE4                     	;# 
  3770  0FE5                     	;# 
  3771  0FE6                     	;# 
  3772  0FE7                     	;# 
  3773  0FE8                     	;# 
  3774  0FE9                     	;# 
  3775  0FEA                     	;# 
  3776  0FEB                     	;# 
  3777  0FED                     	;# 
  3778  0FEE                     	;# 
  3779  0FEF                     	;# 
  3780  0000                     	;# 
  3781  0001                     	;# 
  3782  0002                     	;# 
  3783  0003                     	;# 
  3784  0004                     	;# 
  3785  0005                     	;# 
  3786  0006                     	;# 
  3787  0007                     	;# 
  3788  0008                     	;# 
  3789  0009                     	;# 
  3790  000A                     	;# 
  3791  000B                     	;# 
  3792  000C                     	;# 
  3793  000D                     	;# 
  3794  000E                     	;# 
  3795  0010                     	;# 
  3796  0011                     	;# 
  3797  0012                     	;# 
  3798  0013                     	;# 
  3799  0014                     	;# 
  3800  0015                     	;# 
  3801  0015                     	;# 
  3802  0016                     	;# 
  3803  0016                     	;# 
  3804  0017                     	;# 
  3805  0018                     	;# 
  3806  0019                     	;# 
  3807  0019                     	;# 
  3808  001A                     	;# 
  3809  001B                     	;# 
  3810  001C                     	;# 
  3811  001D                     	;# 
  3812  001E                     	;# 
  3813  001F                     	;# 
  3814  008C                     	;# 
  3815  008D                     	;# 
  3816  008E                     	;# 
  3817  0090                     	;# 
  3818  0091                     	;# 
  3819  0092                     	;# 
  3820  0093                     	;# 
  3821  0094                     	;# 
  3822  0097                     	;# 
  3823  009B                     	;# 
  3824  009B                     	;# 
  3825  009C                     	;# 
  3826  009D                     	;# 
  3827  009E                     	;# 
  3828  009F                     	;# 
  3829  010C                     	;# 
  3830  010D                     	;# 
  3831  010E                     	;# 
  3832  0111                     	;# 
  3833  0112                     	;# 
  3834  0113                     	;# 
  3835  0114                     	;# 
  3836  0115                     	;# 
  3837  0116                     	;# 
  3838  0117                     	;# 
  3839  0118                     	;# 
  3840  0119                     	;# 
  3841  018C                     	;# 
  3842  018D                     	;# 
  3843  018E                     	;# 
  3844  0199                     	;# 
  3845  0199                     	;# 
  3846  0199                     	;# 
  3847  019A                     	;# 
  3848  019A                     	;# 
  3849  019A                     	;# 
  3850  019B                     	;# 
  3851  019B                     	;# 
  3852  019B                     	;# 
  3853  019B                     	;# 
  3854  019B                     	;# 
  3855  019C                     	;# 
  3856  019C                     	;# 
  3857  019C                     	;# 
  3858  019D                     	;# 
  3859  019D                     	;# 
  3860  019D                     	;# 
  3861  019E                     	;# 
  3862  019E                     	;# 
  3863  019E                     	;# 
  3864  019F                     	;# 
  3865  019F                     	;# 
  3866  019F                     	;# 
  3867  019F                     	;# 
  3868  019F                     	;# 
  3869  020C                     	;# 
  3870  020D                     	;# 
  3871  020E                     	;# 
  3872  0211                     	;# 
  3873  0211                     	;# 
  3874  0212                     	;# 
  3875  0212                     	;# 
  3876  0213                     	;# 
  3877  0213                     	;# 
  3878  0214                     	;# 
  3879  0214                     	;# 
  3880  0215                     	;# 
  3881  0215                     	;# 
  3882  0215                     	;# 
  3883  0215                     	;# 
  3884  0216                     	;# 
  3885  0216                     	;# 
  3886  0217                     	;# 
  3887  0217                     	;# 
  3888  0219                     	;# 
  3889  021A                     	;# 
  3890  021B                     	;# 
  3891  021C                     	;# 
  3892  021D                     	;# 
  3893  021D                     	;# 
  3894  021E                     	;# 
  3895  021F                     	;# 
  3896  028C                     	;# 
  3897  028D                     	;# 
  3898  028E                     	;# 
  3899  0291                     	;# 
  3900  0291                     	;# 
  3901  0292                     	;# 
  3902  0293                     	;# 
  3903  0294                     	;# 
  3904  0295                     	;# 
  3905  0295                     	;# 
  3906  0296                     	;# 
  3907  0297                     	;# 
  3908  0298                     	;# 
  3909  029F                     	;# 
  3910  030C                     	;# 
  3911  030D                     	;# 
  3912  030E                     	;# 
  3913  0311                     	;# 
  3914  0311                     	;# 
  3915  0312                     	;# 
  3916  0313                     	;# 
  3917  0314                     	;# 
  3918  0315                     	;# 
  3919  0315                     	;# 
  3920  0316                     	;# 
  3921  0317                     	;# 
  3922  0318                     	;# 
  3923  038C                     	;# 
  3924  038D                     	;# 
  3925  038E                     	;# 
  3926  0391                     	;# 
  3927  0392                     	;# 
  3928  0393                     	;# 
  3929  0394                     	;# 
  3930  0395                     	;# 
  3931  0396                     	;# 
  3932  0397                     	;# 
  3933  0398                     	;# 
  3934  0399                     	;# 
  3935  039A                     	;# 
  3936  039C                     	;# 
  3937  039D                     	;# 
  3938  039E                     	;# 
  3939  039F                     	;# 
  3940  0411                     	;# 
  3941  0411                     	;# 
  3942  0412                     	;# 
  3943  0413                     	;# 
  3944  0414                     	;# 
  3945  0415                     	;# 
  3946  0416                     	;# 
  3947  0417                     	;# 
  3948  0418                     	;# 
  3949  0418                     	;# 
  3950  0419                     	;# 
  3951  041A                     	;# 
  3952  041B                     	;# 
  3953  041C                     	;# 
  3954  041D                     	;# 
  3955  041E                     	;# 
  3956  041F                     	;# 
  3957  0498                     	;# 
  3958  0498                     	;# 
  3959  0499                     	;# 
  3960  049A                     	;# 
  3961  049B                     	;# 
  3962  049B                     	;# 
  3963  049C                     	;# 
  3964  049D                     	;# 
  3965  049E                     	;# 
  3966  049F                     	;# 
  3967  0617                     	;# 
  3968  0618                     	;# 
  3969  0619                     	;# 
  3970  0619                     	;# 
  3971  061A                     	;# 
  3972  061B                     	;# 
  3973  061C                     	;# 
  3974  061C                     	;# 
  3975  061F                     	;# 
  3976  0691                     	;# 
  3977  0692                     	;# 
  3978  0693                     	;# 
  3979  0694                     	;# 
  3980  0695                     	;# 
  3981  0696                     	;# 
  3982  0697                     	;# 
  3983  0698                     	;# 
  3984  0699                     	;# 
  3985  0711                     	;# 
  3986  0712                     	;# 
  3987  0713                     	;# 
  3988  0714                     	;# 
  3989  0715                     	;# 
  3990  0716                     	;# 
  3991  0717                     	;# 
  3992  0718                     	;# 
  3993  0719                     	;# 
  3994  0891                     	;# 
  3995  0891                     	;# 
  3996  0891                     	;# 
  3997  0891                     	;# 
  3998  0891                     	;# 
  3999  0891                     	;# 
  4000  0892                     	;# 
  4001  0892                     	;# 
  4002  0892                     	;# 
  4003  0893                     	;# 
  4004  0893                     	;# 
  4005  0893                     	;# 
  4006  0893                     	;# 
  4007  0893                     	;# 
  4008  0893                     	;# 
  4009  0894                     	;# 
  4010  0894                     	;# 
  4011  0894                     	;# 
  4012  0895                     	;# 
  4013  0895                     	;# 
  4014  0895                     	;# 
  4015  0896                     	;# 
  4016  0896                     	;# 
  4017  0896                     	;# 
  4018  089B                     	;# 
  4019  0911                     	;# 
  4020  0912                     	;# 
  4021  0913                     	;# 
  4022  0914                     	;# 
  4023  0915                     	;# 
  4024  0916                     	;# 
  4025  0918                     	;# 
  4026  0919                     	;# 
  4027  091A                     	;# 
  4028  091B                     	;# 
  4029  091C                     	;# 
  4030  091D                     	;# 
  4031  091E                     	;# 
  4032  091F                     	;# 
  4033  0E0F                     	;# 
  4034  0E10                     	;# 
  4035  0E11                     	;# 
  4036  0E12                     	;# 
  4037  0E13                     	;# 
  4038  0E14                     	;# 
  4039  0E15                     	;# 
  4040  0E16                     	;# 
  4041  0E17                     	;# 
  4042  0E18                     	;# 
  4043  0E19                     	;# 
  4044  0E1A                     	;# 
  4045  0E1B                     	;# 
  4046  0E1C                     	;# 
  4047  0E1D                     	;# 
  4048  0E1E                     	;# 
  4049  0E1F                     	;# 
  4050  0E20                     	;# 
  4051  0E21                     	;# 
  4052  0E22                     	;# 
  4053  0E24                     	;# 
  4054  0E25                     	;# 
  4055  0E28                     	;# 
  4056  0E29                     	;# 
  4057  0E2A                     	;# 
  4058  0E2B                     	;# 
  4059  0E2C                     	;# 
  4060  0E2D                     	;# 
  4061  0E2E                     	;# 
  4062  0E2F                     	;# 
  4063  0E90                     	;# 
  4064  0E91                     	;# 
  4065  0E92                     	;# 
  4066  0E94                     	;# 
  4067  0E95                     	;# 
  4068  0E9C                     	;# 
  4069  0E9D                     	;# 
  4070  0E9E                     	;# 
  4071  0E9F                     	;# 
  4072  0EA0                     	;# 
  4073  0EA1                     	;# 
  4074  0EA2                     	;# 
  4075  0EA3                     	;# 
  4076  0EA4                     	;# 
  4077  0EA5                     	;# 
  4078  0EA6                     	;# 
  4079  0EA7                     	;# 
  4080  0F0F                     	;# 
  4081  0F10                     	;# 
  4082  0F11                     	;# 
  4083  0F12                     	;# 
  4084  0F13                     	;# 
  4085  0F14                     	;# 
  4086  0F15                     	;# 
  4087  0F16                     	;# 
  4088  0F17                     	;# 
  4089  0F18                     	;# 
  4090  0F19                     	;# 
  4091  0F1A                     	;# 
  4092  0F1B                     	;# 
  4093  0F1C                     	;# 
  4094  0F1D                     	;# 
  4095  0F1E                     	;# 
  4096  0F1F                     	;# 
  4097  0F20                     	;# 
  4098  0F21                     	;# 
  4099  0F22                     	;# 
  4100  0F23                     	;# 
  4101  0F24                     	;# 
  4102  0F25                     	;# 
  4103  0F26                     	;# 
  4104  0F27                     	;# 
  4105  0F28                     	;# 
  4106  0F29                     	;# 
  4107  0F2A                     	;# 
  4108  0F2B                     	;# 
  4109  0F2C                     	;# 
  4110  0F2D                     	;# 
  4111  0F2E                     	;# 
  4112  0F2F                     	;# 
  4113  0F30                     	;# 
  4114  0F31                     	;# 
  4115  0F32                     	;# 
  4116  0F33                     	;# 
  4117  0F34                     	;# 
  4118  0F35                     	;# 
  4119  0F36                     	;# 
  4120  0F37                     	;# 
  4121  0FE4                     	;# 
  4122  0FE5                     	;# 
  4123  0FE6                     	;# 
  4124  0FE7                     	;# 
  4125  0FE8                     	;# 
  4126  0FE9                     	;# 
  4127  0FEA                     	;# 
  4128  0FEB                     	;# 
  4129  0FED                     	;# 
  4130  0FEE                     	;# 
  4131  0FEF                     	;# 
  4132  0000                     	;# 
  4133  0001                     	;# 
  4134  0002                     	;# 
  4135  0003                     	;# 
  4136  0004                     	;# 
  4137  0005                     	;# 
  4138  0006                     	;# 
  4139  0007                     	;# 
  4140  0008                     	;# 
  4141  0009                     	;# 
  4142  000A                     	;# 
  4143  000B                     	;# 
  4144  000C                     	;# 
  4145  000D                     	;# 
  4146  000E                     	;# 
  4147  0010                     	;# 
  4148  0011                     	;# 
  4149  0012                     	;# 
  4150  0013                     	;# 
  4151  0014                     	;# 
  4152  0015                     	;# 
  4153  0015                     	;# 
  4154  0016                     	;# 
  4155  0016                     	;# 
  4156  0017                     	;# 
  4157  0018                     	;# 
  4158  0019                     	;# 
  4159  0019                     	;# 
  4160  001A                     	;# 
  4161  001B                     	;# 
  4162  001C                     	;# 
  4163  001D                     	;# 
  4164  001E                     	;# 
  4165  001F                     	;# 
  4166  008C                     	;# 
  4167  008D                     	;# 
  4168  008E                     	;# 
  4169  0090                     	;# 
  4170  0091                     	;# 
  4171  0092                     	;# 
  4172  0093                     	;# 
  4173  0094                     	;# 
  4174  0097                     	;# 
  4175  009B                     	;# 
  4176  009B                     	;# 
  4177  009C                     	;# 
  4178  009D                     	;# 
  4179  009E                     	;# 
  4180  009F                     	;# 
  4181  010C                     	;# 
  4182  010D                     	;# 
  4183  010E                     	;# 
  4184  0111                     	;# 
  4185  0112                     	;# 
  4186  0113                     	;# 
  4187  0114                     	;# 
  4188  0115                     	;# 
  4189  0116                     	;# 
  4190  0117                     	;# 
  4191  0118                     	;# 
  4192  0119                     	;# 
  4193  018C                     	;# 
  4194  018D                     	;# 
  4195  018E                     	;# 
  4196  0199                     	;# 
  4197  0199                     	;# 
  4198  0199                     	;# 
  4199  019A                     	;# 
  4200  019A                     	;# 
  4201  019A                     	;# 
  4202  019B                     	;# 
  4203  019B                     	;# 
  4204  019B                     	;# 
  4205  019B                     	;# 
  4206  019B                     	;# 
  4207  019C                     	;# 
  4208  019C                     	;# 
  4209  019C                     	;# 
  4210  019D                     	;# 
  4211  019D                     	;# 
  4212  019D                     	;# 
  4213  019E                     	;# 
  4214  019E                     	;# 
  4215  019E                     	;# 
  4216  019F                     	;# 
  4217  019F                     	;# 
  4218  019F                     	;# 
  4219  019F                     	;# 
  4220  019F                     	;# 
  4221  020C                     	;# 
  4222  020D                     	;# 
  4223  020E                     	;# 
  4224  0211                     	;# 
  4225  0211                     	;# 
  4226  0212                     	;# 
  4227  0212                     	;# 
  4228  0213                     	;# 
  4229  0213                     	;# 
  4230  0214                     	;# 
  4231  0214                     	;# 
  4232  0215                     	;# 
  4233  0215                     	;# 
  4234  0215                     	;# 
  4235  0215                     	;# 
  4236  0216                     	;# 
  4237  0216                     	;# 
  4238  0217                     	;# 
  4239  0217                     	;# 
  4240  0219                     	;# 
  4241  021A                     	;# 
  4242  021B                     	;# 
  4243  021C                     	;# 
  4244  021D                     	;# 
  4245  021D                     	;# 
  4246  021E                     	;# 
  4247  021F                     	;# 
  4248  028C                     	;# 
  4249  028D                     	;# 
  4250  028E                     	;# 
  4251  0291                     	;# 
  4252  0291                     	;# 
  4253  0292                     	;# 
  4254  0293                     	;# 
  4255  0294                     	;# 
  4256  0295                     	;# 
  4257  0295                     	;# 
  4258  0296                     	;# 
  4259  0297                     	;# 
  4260  0298                     	;# 
  4261  029F                     	;# 
  4262  030C                     	;# 
  4263  030D                     	;# 
  4264  030E                     	;# 
  4265  0311                     	;# 
  4266  0311                     	;# 
  4267  0312                     	;# 
  4268  0313                     	;# 
  4269  0314                     	;# 
  4270  0315                     	;# 
  4271  0315                     	;# 
  4272  0316                     	;# 
  4273  0317                     	;# 
  4274  0318                     	;# 
  4275  038C                     	;# 
  4276  038D                     	;# 
  4277  038E                     	;# 
  4278  0391                     	;# 
  4279  0392                     	;# 
  4280  0393                     	;# 
  4281  0394                     	;# 
  4282  0395                     	;# 
  4283  0396                     	;# 
  4284  0397                     	;# 
  4285  0398                     	;# 
  4286  0399                     	;# 
  4287  039A                     	;# 
  4288  039C                     	;# 
  4289  039D                     	;# 
  4290  039E                     	;# 
  4291  039F                     	;# 
  4292  0411                     	;# 
  4293  0411                     	;# 
  4294  0412                     	;# 
  4295  0413                     	;# 
  4296  0414                     	;# 
  4297  0415                     	;# 
  4298  0416                     	;# 
  4299  0417                     	;# 
  4300  0418                     	;# 
  4301  0418                     	;# 
  4302  0419                     	;# 
  4303  041A                     	;# 
  4304  041B                     	;# 
  4305  041C                     	;# 
  4306  041D                     	;# 
  4307  041E                     	;# 
  4308  041F                     	;# 
  4309  0498                     	;# 
  4310  0498                     	;# 
  4311  0499                     	;# 
  4312  049A                     	;# 
  4313  049B                     	;# 
  4314  049B                     	;# 
  4315  049C                     	;# 
  4316  049D                     	;# 
  4317  049E                     	;# 
  4318  049F                     	;# 
  4319  0617                     	;# 
  4320  0618                     	;# 
  4321  0619                     	;# 
  4322  0619                     	;# 
  4323  061A                     	;# 
  4324  061B                     	;# 
  4325  061C                     	;# 
  4326  061C                     	;# 
  4327  061F                     	;# 
  4328  0691                     	;# 
  4329  0692                     	;# 
  4330  0693                     	;# 
  4331  0694                     	;# 
  4332  0695                     	;# 
  4333  0696                     	;# 
  4334  0697                     	;# 
  4335  0698                     	;# 
  4336  0699                     	;# 
  4337  0711                     	;# 
  4338  0712                     	;# 
  4339  0713                     	;# 
  4340  0714                     	;# 
  4341  0715                     	;# 
  4342  0716                     	;# 
  4343  0717                     	;# 
  4344  0718                     	;# 
  4345  0719                     	;# 
  4346  0891                     	;# 
  4347  0891                     	;# 
  4348  0891                     	;# 
  4349  0891                     	;# 
  4350  0891                     	;# 
  4351  0891                     	;# 
  4352  0892                     	;# 
  4353  0892                     	;# 
  4354  0892                     	;# 
  4355  0893                     	;# 
  4356  0893                     	;# 
  4357  0893                     	;# 
  4358  0893                     	;# 
  4359  0893                     	;# 
  4360  0893                     	;# 
  4361  0894                     	;# 
  4362  0894                     	;# 
  4363  0894                     	;# 
  4364  0895                     	;# 
  4365  0895                     	;# 
  4366  0895                     	;# 
  4367  0896                     	;# 
  4368  0896                     	;# 
  4369  0896                     	;# 
  4370  089B                     	;# 
  4371  0911                     	;# 
  4372  0912                     	;# 
  4373  0913                     	;# 
  4374  0914                     	;# 
  4375  0915                     	;# 
  4376  0916                     	;# 
  4377  0918                     	;# 
  4378  0919                     	;# 
  4379  091A                     	;# 
  4380  091B                     	;# 
  4381  091C                     	;# 
  4382  091D                     	;# 
  4383  091E                     	;# 
  4384  091F                     	;# 
  4385  0E0F                     	;# 
  4386  0E10                     	;# 
  4387  0E11                     	;# 
  4388  0E12                     	;# 
  4389  0E13                     	;# 
  4390  0E14                     	;# 
  4391  0E15                     	;# 
  4392  0E16                     	;# 
  4393  0E17                     	;# 
  4394  0E18                     	;# 
  4395  0E19                     	;# 
  4396  0E1A                     	;# 
  4397  0E1B                     	;# 
  4398  0E1C                     	;# 
  4399  0E1D                     	;# 
  4400  0E1E                     	;# 
  4401  0E1F                     	;# 
  4402  0E20                     	;# 
  4403  0E21                     	;# 
  4404  0E22                     	;# 
  4405  0E24                     	;# 
  4406  0E25                     	;# 
  4407  0E28                     	;# 
  4408  0E29                     	;# 
  4409  0E2A                     	;# 
  4410  0E2B                     	;# 
  4411  0E2C                     	;# 
  4412  0E2D                     	;# 
  4413  0E2E                     	;# 
  4414  0E2F                     	;# 
  4415  0E90                     	;# 
  4416  0E91                     	;# 
  4417  0E92                     	;# 
  4418  0E94                     	;# 
  4419  0E95                     	;# 
  4420  0E9C                     	;# 
  4421  0E9D                     	;# 
  4422  0E9E                     	;# 
  4423  0E9F                     	;# 
  4424  0EA0                     	;# 
  4425  0EA1                     	;# 
  4426  0EA2                     	;# 
  4427  0EA3                     	;# 
  4428  0EA4                     	;# 
  4429  0EA5                     	;# 
  4430  0EA6                     	;# 
  4431  0EA7                     	;# 
  4432  0F0F                     	;# 
  4433  0F10                     	;# 
  4434  0F11                     	;# 
  4435  0F12                     	;# 
  4436  0F13                     	;# 
  4437  0F14                     	;# 
  4438  0F15                     	;# 
  4439  0F16                     	;# 
  4440  0F17                     	;# 
  4441  0F18                     	;# 
  4442  0F19                     	;# 
  4443  0F1A                     	;# 
  4444  0F1B                     	;# 
  4445  0F1C                     	;# 
  4446  0F1D                     	;# 
  4447  0F1E                     	;# 
  4448  0F1F                     	;# 
  4449  0F20                     	;# 
  4450  0F21                     	;# 
  4451  0F22                     	;# 
  4452  0F23                     	;# 
  4453  0F24                     	;# 
  4454  0F25                     	;# 
  4455  0F26                     	;# 
  4456  0F27                     	;# 
  4457  0F28                     	;# 
  4458  0F29                     	;# 
  4459  0F2A                     	;# 
  4460  0F2B                     	;# 
  4461  0F2C                     	;# 
  4462  0F2D                     	;# 
  4463  0F2E                     	;# 
  4464  0F2F                     	;# 
  4465  0F30                     	;# 
  4466  0F31                     	;# 
  4467  0F32                     	;# 
  4468  0F33                     	;# 
  4469  0F34                     	;# 
  4470  0F35                     	;# 
  4471  0F36                     	;# 
  4472  0F37                     	;# 
  4473  0FE4                     	;# 
  4474  0FE5                     	;# 
  4475  0FE6                     	;# 
  4476  0FE7                     	;# 
  4477  0FE8                     	;# 
  4478  0FE9                     	;# 
  4479  0FEA                     	;# 
  4480  0FEB                     	;# 
  4481  0FED                     	;# 
  4482  0FEE                     	;# 
  4483  0FEF                     	;# 
  4484  0000                     	;# 
  4485  0001                     	;# 
  4486  0002                     	;# 
  4487  0003                     	;# 
  4488  0004                     	;# 
  4489  0005                     	;# 
  4490  0006                     	;# 
  4491  0007                     	;# 
  4492  0008                     	;# 
  4493  0009                     	;# 
  4494  000A                     	;# 
  4495  000B                     	;# 
  4496  000C                     	;# 
  4497  000D                     	;# 
  4498  000E                     	;# 
  4499  0010                     	;# 
  4500  0011                     	;# 
  4501  0012                     	;# 
  4502  0013                     	;# 
  4503  0014                     	;# 
  4504  0015                     	;# 
  4505  0015                     	;# 
  4506  0016                     	;# 
  4507  0016                     	;# 
  4508  0017                     	;# 
  4509  0018                     	;# 
  4510  0019                     	;# 
  4511  0019                     	;# 
  4512  001A                     	;# 
  4513  001B                     	;# 
  4514  001C                     	;# 
  4515  001D                     	;# 
  4516  001E                     	;# 
  4517  001F                     	;# 
  4518  008C                     	;# 
  4519  008D                     	;# 
  4520  008E                     	;# 
  4521  0090                     	;# 
  4522  0091                     	;# 
  4523  0092                     	;# 
  4524  0093                     	;# 
  4525  0094                     	;# 
  4526  0097                     	;# 
  4527  009B                     	;# 
  4528  009B                     	;# 
  4529  009C                     	;# 
  4530  009D                     	;# 
  4531  009E                     	;# 
  4532  009F                     	;# 
  4533  010C                     	;# 
  4534  010D                     	;# 
  4535  010E                     	;# 
  4536  0111                     	;# 
  4537  0112                     	;# 
  4538  0113                     	;# 
  4539  0114                     	;# 
  4540  0115                     	;# 
  4541  0116                     	;# 
  4542  0117                     	;# 
  4543  0118                     	;# 
  4544  0119                     	;# 
  4545  018C                     	;# 
  4546  018D                     	;# 
  4547  018E                     	;# 
  4548  0199                     	;# 
  4549  0199                     	;# 
  4550  0199                     	;# 
  4551  019A                     	;# 
  4552  019A                     	;# 
  4553  019A                     	;# 
  4554  019B                     	;# 
  4555  019B                     	;# 
  4556  019B                     	;# 
  4557  019B                     	;# 
  4558  019B                     	;# 
  4559  019C                     	;# 
  4560  019C                     	;# 
  4561  019C                     	;# 
  4562  019D                     	;# 
  4563  019D                     	;# 
  4564  019D                     	;# 
  4565  019E                     	;# 
  4566  019E                     	;# 
  4567  019E                     	;# 
  4568  019F                     	;# 
  4569  019F                     	;# 
  4570  019F                     	;# 
  4571  019F                     	;# 
  4572  019F                     	;# 
  4573  020C                     	;# 
  4574  020D                     	;# 
  4575  020E                     	;# 
  4576  0211                     	;# 
  4577  0211                     	;# 
  4578  0212                     	;# 
  4579  0212                     	;# 
  4580  0213                     	;# 
  4581  0213                     	;# 
  4582  0214                     	;# 
  4583  0214                     	;# 
  4584  0215                     	;# 
  4585  0215                     	;# 
  4586  0215                     	;# 
  4587  0215                     	;# 
  4588  0216                     	;# 
  4589  0216                     	;# 
  4590  0217                     	;# 
  4591  0217                     	;# 
  4592  0219                     	;# 
  4593  021A                     	;# 
  4594  021B                     	;# 
  4595  021C                     	;# 
  4596  021D                     	;# 
  4597  021D                     	;# 
  4598  021E                     	;# 
  4599  021F                     	;# 
  4600  028C                     	;# 
  4601  028D                     	;# 
  4602  028E                     	;# 
  4603  0291                     	;# 
  4604  0291                     	;# 
  4605  0292                     	;# 
  4606  0293                     	;# 
  4607  0294                     	;# 
  4608  0295                     	;# 
  4609  0295                     	;# 
  4610  0296                     	;# 
  4611  0297                     	;# 
  4612  0298                     	;# 
  4613  029F                     	;# 
  4614  030C                     	;# 
  4615  030D                     	;# 
  4616  030E                     	;# 
  4617  0311                     	;# 
  4618  0311                     	;# 
  4619  0312                     	;# 
  4620  0313                     	;# 
  4621  0314                     	;# 
  4622  0315                     	;# 
  4623  0315                     	;# 
  4624  0316                     	;# 
  4625  0317                     	;# 
  4626  0318                     	;# 
  4627  038C                     	;# 
  4628  038D                     	;# 
  4629  038E                     	;# 
  4630  0391                     	;# 
  4631  0392                     	;# 
  4632  0393                     	;# 
  4633  0394                     	;# 
  4634  0395                     	;# 
  4635  0396                     	;# 
  4636  0397                     	;# 
  4637  0398                     	;# 
  4638  0399                     	;# 
  4639  039A                     	;# 
  4640  039C                     	;# 
  4641  039D                     	;# 
  4642  039E                     	;# 
  4643  039F                     	;# 
  4644  0411                     	;# 
  4645  0411                     	;# 
  4646  0412                     	;# 
  4647  0413                     	;# 
  4648  0414                     	;# 
  4649  0415                     	;# 
  4650  0416                     	;# 
  4651  0417                     	;# 
  4652  0418                     	;# 
  4653  0418                     	;# 
  4654  0419                     	;# 
  4655  041A                     	;# 
  4656  041B                     	;# 
  4657  041C                     	;# 
  4658  041D                     	;# 
  4659  041E                     	;# 
  4660  041F                     	;# 
  4661  0498                     	;# 
  4662  0498                     	;# 
  4663  0499                     	;# 
  4664  049A                     	;# 
  4665  049B                     	;# 
  4666  049B                     	;# 
  4667  049C                     	;# 
  4668  049D                     	;# 
  4669  049E                     	;# 
  4670  049F                     	;# 
  4671  0617                     	;# 
  4672  0618                     	;# 
  4673  0619                     	;# 
  4674  0619                     	;# 
  4675  061A                     	;# 
  4676  061B                     	;# 
  4677  061C                     	;# 
  4678  061C                     	;# 
  4679  061F                     	;# 
  4680  0691                     	;# 
  4681  0692                     	;# 
  4682  0693                     	;# 
  4683  0694                     	;# 
  4684  0695                     	;# 
  4685  0696                     	;# 
  4686  0697                     	;# 
  4687  0698                     	;# 
  4688  0699                     	;# 
  4689  0711                     	;# 
  4690  0712                     	;# 
  4691  0713                     	;# 
  4692  0714                     	;# 
  4693  0715                     	;# 
  4694  0716                     	;# 
  4695  0717                     	;# 
  4696  0718                     	;# 
  4697  0719                     	;# 
  4698  0891                     	;# 
  4699  0891                     	;# 
  4700  0891                     	;# 
  4701  0891                     	;# 
  4702  0891                     	;# 
  4703  0891                     	;# 
  4704  0892                     	;# 
  4705  0892                     	;# 
  4706  0892                     	;# 
  4707  0893                     	;# 
  4708  0893                     	;# 
  4709  0893                     	;# 
  4710  0893                     	;# 
  4711  0893                     	;# 
  4712  0893                     	;# 
  4713  0894                     	;# 
  4714  0894                     	;# 
  4715  0894                     	;# 
  4716  0895                     	;# 
  4717  0895                     	;# 
  4718  0895                     	;# 
  4719  0896                     	;# 
  4720  0896                     	;# 
  4721  0896                     	;# 
  4722  089B                     	;# 
  4723  0911                     	;# 
  4724  0912                     	;# 
  4725  0913                     	;# 
  4726  0914                     	;# 
  4727  0915                     	;# 
  4728  0916                     	;# 
  4729  0918                     	;# 
  4730  0919                     	;# 
  4731  091A                     	;# 
  4732  091B                     	;# 
  4733  091C                     	;# 
  4734  091D                     	;# 
  4735  091E                     	;# 
  4736  091F                     	;# 
  4737  0E0F                     	;# 
  4738  0E10                     	;# 
  4739  0E11                     	;# 
  4740  0E12                     	;# 
  4741  0E13                     	;# 
  4742  0E14                     	;# 
  4743  0E15                     	;# 
  4744  0E16                     	;# 
  4745  0E17                     	;# 
  4746  0E18                     	;# 
  4747  0E19                     	;# 
  4748  0E1A                     	;# 
  4749  0E1B                     	;# 
  4750  0E1C                     	;# 
  4751  0E1D                     	;# 
  4752  0E1E                     	;# 
  4753  0E1F                     	;# 
  4754  0E20                     	;# 
  4755  0E21                     	;# 
  4756  0E22                     	;# 
  4757  0E24                     	;# 
  4758  0E25                     	;# 
  4759  0E28                     	;# 
  4760  0E29                     	;# 
  4761  0E2A                     	;# 
  4762  0E2B                     	;# 
  4763  0E2C                     	;# 
  4764  0E2D                     	;# 
  4765  0E2E                     	;# 
  4766  0E2F                     	;# 
  4767  0E90                     	;# 
  4768  0E91                     	;# 
  4769  0E92                     	;# 
  4770  0E94                     	;# 
  4771  0E95                     	;# 
  4772  0E9C                     	;# 
  4773  0E9D                     	;# 
  4774  0E9E                     	;# 
  4775  0E9F                     	;# 
  4776  0EA0                     	;# 
  4777  0EA1                     	;# 
  4778  0EA2                     	;# 
  4779  0EA3                     	;# 
  4780  0EA4                     	;# 
  4781  0EA5                     	;# 
  4782  0EA6                     	;# 
  4783  0EA7                     	;# 
  4784  0F0F                     	;# 
  4785  0F10                     	;# 
  4786  0F11                     	;# 
  4787  0F12                     	;# 
  4788  0F13                     	;# 
  4789  0F14                     	;# 
  4790  0F15                     	;# 
  4791  0F16                     	;# 
  4792  0F17                     	;# 
  4793  0F18                     	;# 
  4794  0F19                     	;# 
  4795  0F1A                     	;# 
  4796  0F1B                     	;# 
  4797  0F1C                     	;# 
  4798  0F1D                     	;# 
  4799  0F1E                     	;# 
  4800  0F1F                     	;# 
  4801  0F20                     	;# 
  4802  0F21                     	;# 
  4803  0F22                     	;# 
  4804  0F23                     	;# 
  4805  0F24                     	;# 
  4806  0F25                     	;# 
  4807  0F26                     	;# 
  4808  0F27                     	;# 
  4809  0F28                     	;# 
  4810  0F29                     	;# 
  4811  0F2A                     	;# 
  4812  0F2B                     	;# 
  4813  0F2C                     	;# 
  4814  0F2D                     	;# 
  4815  0F2E                     	;# 
  4816  0F2F                     	;# 
  4817  0F30                     	;# 
  4818  0F31                     	;# 
  4819  0F32                     	;# 
  4820  0F33                     	;# 
  4821  0F34                     	;# 
  4822  0F35                     	;# 
  4823  0F36                     	;# 
  4824  0F37                     	;# 
  4825  0FE4                     	;# 
  4826  0FE5                     	;# 
  4827  0FE6                     	;# 
  4828  0FE7                     	;# 
  4829  0FE8                     	;# 
  4830  0FE9                     	;# 
  4831  0FEA                     	;# 
  4832  0FEB                     	;# 
  4833  0FED                     	;# 
  4834  0FEE                     	;# 
  4835  0FEF                     	;# 
  4836  0000                     	;# 
  4837  0001                     	;# 
  4838  0002                     	;# 
  4839  0003                     	;# 
  4840  0004                     	;# 
  4841  0005                     	;# 
  4842  0006                     	;# 
  4843  0007                     	;# 
  4844  0008                     	;# 
  4845  0009                     	;# 
  4846  000A                     	;# 
  4847  000B                     	;# 
  4848  000C                     	;# 
  4849  000D                     	;# 
  4850  000E                     	;# 
  4851  0010                     	;# 
  4852  0011                     	;# 
  4853  0012                     	;# 
  4854  0013                     	;# 
  4855  0014                     	;# 
  4856  0015                     	;# 
  4857  0015                     	;# 
  4858  0016                     	;# 
  4859  0016                     	;# 
  4860  0017                     	;# 
  4861  0018                     	;# 
  4862  0019                     	;# 
  4863  0019                     	;# 
  4864  001A                     	;# 
  4865  001B                     	;# 
  4866  001C                     	;# 
  4867  001D                     	;# 
  4868  001E                     	;# 
  4869  001F                     	;# 
  4870  008C                     	;# 
  4871  008D                     	;# 
  4872  008E                     	;# 
  4873  0090                     	;# 
  4874  0091                     	;# 
  4875  0092                     	;# 
  4876  0093                     	;# 
  4877  0094                     	;# 
  4878  0097                     	;# 
  4879  009B                     	;# 
  4880  009B                     	;# 
  4881  009C                     	;# 
  4882  009D                     	;# 
  4883  009E                     	;# 
  4884  009F                     	;# 
  4885  010C                     	;# 
  4886  010D                     	;# 
  4887  010E                     	;# 
  4888  0111                     	;# 
  4889  0112                     	;# 
  4890  0113                     	;# 
  4891  0114                     	;# 
  4892  0115                     	;# 
  4893  0116                     	;# 
  4894  0117                     	;# 
  4895  0118                     	;# 
  4896  0119                     	;# 
  4897  018C                     	;# 
  4898  018D                     	;# 
  4899  018E                     	;# 
  4900  0199                     	;# 
  4901  0199                     	;# 
  4902  0199                     	;# 
  4903  019A                     	;# 
  4904  019A                     	;# 
  4905  019A                     	;# 
  4906  019B                     	;# 
  4907  019B                     	;# 
  4908  019B                     	;# 
  4909  019B                     	;# 
  4910  019B                     	;# 
  4911  019C                     	;# 
  4912  019C                     	;# 
  4913  019C                     	;# 
  4914  019D                     	;# 
  4915  019D                     	;# 
  4916  019D                     	;# 
  4917  019E                     	;# 
  4918  019E                     	;# 
  4919  019E                     	;# 
  4920  019F                     	;# 
  4921  019F                     	;# 
  4922  019F                     	;# 
  4923  019F                     	;# 
  4924  019F                     	;# 
  4925  020C                     	;# 
  4926  020D                     	;# 
  4927  020E                     	;# 
  4928  0211                     	;# 
  4929  0211                     	;# 
  4930  0212                     	;# 
  4931  0212                     	;# 
  4932  0213                     	;# 
  4933  0213                     	;# 
  4934  0214                     	;# 
  4935  0214                     	;# 
  4936  0215                     	;# 
  4937  0215                     	;# 
  4938  0215                     	;# 
  4939  0215                     	;# 
  4940  0216                     	;# 
  4941  0216                     	;# 
  4942  0217                     	;# 
  4943  0217                     	;# 
  4944  0219                     	;# 
  4945  021A                     	;# 
  4946  021B                     	;# 
  4947  021C                     	;# 
  4948  021D                     	;# 
  4949  021D                     	;# 
  4950  021E                     	;# 
  4951  021F                     	;# 
  4952  028C                     	;# 
  4953  028D                     	;# 
  4954  028E                     	;# 
  4955  0291                     	;# 
  4956  0291                     	;# 
  4957  0292                     	;# 
  4958  0293                     	;# 
  4959  0294                     	;# 
  4960  0295                     	;# 
  4961  0295                     	;# 
  4962  0296                     	;# 
  4963  0297                     	;# 
  4964  0298                     	;# 
  4965  029F                     	;# 
  4966  030C                     	;# 
  4967  030D                     	;# 
  4968  030E                     	;# 
  4969  0311                     	;# 
  4970  0311                     	;# 
  4971  0312                     	;# 
  4972  0313                     	;# 
  4973  0314                     	;# 
  4974  0315                     	;# 
  4975  0315                     	;# 
  4976  0316                     	;# 
  4977  0317                     	;# 
  4978  0318                     	;# 
  4979  038C                     	;# 
  4980  038D                     	;# 
  4981  038E                     	;# 
  4982  0391                     	;# 
  4983  0392                     	;# 
  4984  0393                     	;# 
  4985  0394                     	;# 
  4986  0395                     	;# 
  4987  0396                     	;# 
  4988  0397                     	;# 
  4989  0398                     	;# 
  4990  0399                     	;# 
  4991  039A                     	;# 
  4992  039C                     	;# 
  4993  039D                     	;# 
  4994  039E                     	;# 
  4995  039F                     	;# 
  4996  0411                     	;# 
  4997  0411                     	;# 
  4998  0412                     	;# 
  4999  0413                     	;# 
  5000  0414                     	;# 
  5001  0415                     	;# 
  5002  0416                     	;# 
  5003  0417                     	;# 
  5004  0418                     	;# 
  5005  0418                     	;# 
  5006  0419                     	;# 
  5007  041A                     	;# 
  5008  041B                     	;# 
  5009  041C                     	;# 
  5010  041D                     	;# 
  5011  041E                     	;# 
  5012  041F                     	;# 
  5013  0498                     	;# 
  5014  0498                     	;# 
  5015  0499                     	;# 
  5016  049A                     	;# 
  5017  049B                     	;# 
  5018  049B                     	;# 
  5019  049C                     	;# 
  5020  049D                     	;# 
  5021  049E                     	;# 
  5022  049F                     	;# 
  5023  0617                     	;# 
  5024  0618                     	;# 
  5025  0619                     	;# 
  5026  0619                     	;# 
  5027  061A                     	;# 
  5028  061B                     	;# 
  5029  061C                     	;# 
  5030  061C                     	;# 
  5031  061F                     	;# 
  5032  0691                     	;# 
  5033  0692                     	;# 
  5034  0693                     	;# 
  5035  0694                     	;# 
  5036  0695                     	;# 
  5037  0696                     	;# 
  5038  0697                     	;# 
  5039  0698                     	;# 
  5040  0699                     	;# 
  5041  0711                     	;# 
  5042  0712                     	;# 
  5043  0713                     	;# 
  5044  0714                     	;# 
  5045  0715                     	;# 
  5046  0716                     	;# 
  5047  0717                     	;# 
  5048  0718                     	;# 
  5049  0719                     	;# 
  5050  0891                     	;# 
  5051  0891                     	;# 
  5052  0891                     	;# 
  5053  0891                     	;# 
  5054  0891                     	;# 
  5055  0891                     	;# 
  5056  0892                     	;# 
  5057  0892                     	;# 
  5058  0892                     	;# 
  5059  0893                     	;# 
  5060  0893                     	;# 
  5061  0893                     	;# 
  5062  0893                     	;# 
  5063  0893                     	;# 
  5064  0893                     	;# 
  5065  0894                     	;# 
  5066  0894                     	;# 
  5067  0894                     	;# 
  5068  0895                     	;# 
  5069  0895                     	;# 
  5070  0895                     	;# 
  5071  0896                     	;# 
  5072  0896                     	;# 
  5073  0896                     	;# 
  5074  089B                     	;# 
  5075  0911                     	;# 
  5076  0912                     	;# 
  5077  0913                     	;# 
  5078  0914                     	;# 
  5079  0915                     	;# 
  5080  0916                     	;# 
  5081  0918                     	;# 
  5082  0919                     	;# 
  5083  091A                     	;# 
  5084  091B                     	;# 
  5085  091C                     	;# 
  5086  091D                     	;# 
  5087  091E                     	;# 
  5088  091F                     	;# 
  5089  0E0F                     	;# 
  5090  0E10                     	;# 
  5091  0E11                     	;# 
  5092  0E12                     	;# 
  5093  0E13                     	;# 
  5094  0E14                     	;# 
  5095  0E15                     	;# 
  5096  0E16                     	;# 
  5097  0E17                     	;# 
  5098  0E18                     	;# 
  5099  0E19                     	;# 
  5100  0E1A                     	;# 
  5101  0E1B                     	;# 
  5102  0E1C                     	;# 
  5103  0E1D                     	;# 
  5104  0E1E                     	;# 
  5105  0E1F                     	;# 
  5106  0E20                     	;# 
  5107  0E21                     	;# 
  5108  0E22                     	;# 
  5109  0E24                     	;# 
  5110  0E25                     	;# 
  5111  0E28                     	;# 
  5112  0E29                     	;# 
  5113  0E2A                     	;# 
  5114  0E2B                     	;# 
  5115  0E2C                     	;# 
  5116  0E2D                     	;# 
  5117  0E2E                     	;# 
  5118  0E2F                     	;# 
  5119  0E90                     	;# 
  5120  0E91                     	;# 
  5121  0E92                     	;# 
  5122  0E94                     	;# 
  5123  0E95                     	;# 
  5124  0E9C                     	;# 
  5125  0E9D                     	;# 
  5126  0E9E                     	;# 
  5127  0E9F                     	;# 
  5128  0EA0                     	;# 
  5129  0EA1                     	;# 
  5130  0EA2                     	;# 
  5131  0EA3                     	;# 
  5132  0EA4                     	;# 
  5133  0EA5                     	;# 
  5134  0EA6                     	;# 
  5135  0EA7                     	;# 
  5136  0F0F                     	;# 
  5137  0F10                     	;# 
  5138  0F11                     	;# 
  5139  0F12                     	;# 
  5140  0F13                     	;# 
  5141  0F14                     	;# 
  5142  0F15                     	;# 
  5143  0F16                     	;# 
  5144  0F17                     	;# 
  5145  0F18                     	;# 
  5146  0F19                     	;# 
  5147  0F1A                     	;# 
  5148  0F1B                     	;# 
  5149  0F1C                     	;# 
  5150  0F1D                     	;# 
  5151  0F1E                     	;# 
  5152  0F1F                     	;# 
  5153  0F20                     	;# 
  5154  0F21                     	;# 
  5155  0F22                     	;# 
  5156  0F23                     	;# 
  5157  0F24                     	;# 
  5158  0F25                     	;# 
  5159  0F26                     	;# 
  5160  0F27                     	;# 
  5161  0F28                     	;# 
  5162  0F29                     	;# 
  5163  0F2A                     	;# 
  5164  0F2B                     	;# 
  5165  0F2C                     	;# 
  5166  0F2D                     	;# 
  5167  0F2E                     	;# 
  5168  0F2F                     	;# 
  5169  0F30                     	;# 
  5170  0F31                     	;# 
  5171  0F32                     	;# 
  5172  0F33                     	;# 
  5173  0F34                     	;# 
  5174  0F35                     	;# 
  5175  0F36                     	;# 
  5176  0F37                     	;# 
  5177  0FE4                     	;# 
  5178  0FE5                     	;# 
  5179  0FE6                     	;# 
  5180  0FE7                     	;# 
  5181  0FE8                     	;# 
  5182  0FE9                     	;# 
  5183  0FEA                     	;# 
  5184  0FEB                     	;# 
  5185  0FED                     	;# 
  5186  0FEE                     	;# 
  5187  0FEF                     	;# 
  5188  0000                     	;# 
  5189  0001                     	;# 
  5190  0002                     	;# 
  5191  0003                     	;# 
  5192  0004                     	;# 
  5193  0005                     	;# 
  5194  0006                     	;# 
  5195  0007                     	;# 
  5196  0008                     	;# 
  5197  0009                     	;# 
  5198  000A                     	;# 
  5199  000B                     	;# 
  5200  000C                     	;# 
  5201  000D                     	;# 
  5202  000E                     	;# 
  5203  0010                     	;# 
  5204  0011                     	;# 
  5205  0012                     	;# 
  5206  0013                     	;# 
  5207  0014                     	;# 
  5208  0015                     	;# 
  5209  0015                     	;# 
  5210  0016                     	;# 
  5211  0016                     	;# 
  5212  0017                     	;# 
  5213  0018                     	;# 
  5214  0019                     	;# 
  5215  0019                     	;# 
  5216  001A                     	;# 
  5217  001B                     	;# 
  5218  001C                     	;# 
  5219  001D                     	;# 
  5220  001E                     	;# 
  5221  001F                     	;# 
  5222  008C                     	;# 
  5223  008D                     	;# 
  5224  008E                     	;# 
  5225  0090                     	;# 
  5226  0091                     	;# 
  5227  0092                     	;# 
  5228  0093                     	;# 
  5229  0094                     	;# 
  5230  0097                     	;# 
  5231  009B                     	;# 
  5232  009B                     	;# 
  5233  009C                     	;# 
  5234  009D                     	;# 
  5235  009E                     	;# 
  5236  009F                     	;# 
  5237  010C                     	;# 
  5238  010D                     	;# 
  5239  010E                     	;# 
  5240  0111                     	;# 
  5241  0112                     	;# 
  5242  0113                     	;# 
  5243  0114                     	;# 
  5244  0115                     	;# 
  5245  0116                     	;# 
  5246  0117                     	;# 
  5247  0118                     	;# 
  5248  0119                     	;# 
  5249  018C                     	;# 
  5250  018D                     	;# 
  5251  018E                     	;# 
  5252  0197                     	;# 
  5253  0199                     	;# 
  5254  0199                     	;# 
  5255  0199                     	;# 
  5256  019A                     	;# 
  5257  019A                     	;# 
  5258  019A                     	;# 
  5259  019B                     	;# 
  5260  019B                     	;# 
  5261  019B                     	;# 
  5262  019B                     	;# 
  5263  019B                     	;# 
  5264  019C                     	;# 
  5265  019C                     	;# 
  5266  019C                     	;# 
  5267  019D                     	;# 
  5268  019D                     	;# 
  5269  019D                     	;# 
  5270  019E                     	;# 
  5271  019E                     	;# 
  5272  019E                     	;# 
  5273  019F                     	;# 
  5274  019F                     	;# 
  5275  019F                     	;# 
  5276  019F                     	;# 
  5277  019F                     	;# 
  5278  020C                     	;# 
  5279  020D                     	;# 
  5280  020E                     	;# 
  5281  0211                     	;# 
  5282  0211                     	;# 
  5283  0212                     	;# 
  5284  0212                     	;# 
  5285  0213                     	;# 
  5286  0213                     	;# 
  5287  0214                     	;# 
  5288  0214                     	;# 
  5289  0215                     	;# 
  5290  0215                     	;# 
  5291  0215                     	;# 
  5292  0215                     	;# 
  5293  0216                     	;# 
  5294  0216                     	;# 
  5295  0217                     	;# 
  5296  0217                     	;# 
  5297  0219                     	;# 
  5298  021A                     	;# 
  5299  021B                     	;# 
  5300  021C                     	;# 
  5301  021D                     	;# 
  5302  021D                     	;# 
  5303  021E                     	;# 
  5304  021F                     	;# 
  5305  028C                     	;# 
  5306  028D                     	;# 
  5307  028E                     	;# 
  5308  0291                     	;# 
  5309  0291                     	;# 
  5310  0292                     	;# 
  5311  0293                     	;# 
  5312  0294                     	;# 
  5313  0295                     	;# 
  5314  0295                     	;# 
  5315  0296                     	;# 
  5316  0297                     	;# 
  5317  0298                     	;# 
  5318  029F                     	;# 
  5319  030C                     	;# 
  5320  030D                     	;# 
  5321  030E                     	;# 
  5322  0311                     	;# 
  5323  0311                     	;# 
  5324  0312                     	;# 
  5325  0313                     	;# 
  5326  0314                     	;# 
  5327  0315                     	;# 
  5328  0315                     	;# 
  5329  0316                     	;# 
  5330  0317                     	;# 
  5331  0318                     	;# 
  5332  038C                     	;# 
  5333  038D                     	;# 
  5334  038E                     	;# 
  5335  0391                     	;# 
  5336  0392                     	;# 
  5337  0393                     	;# 
  5338  0394                     	;# 
  5339  0395                     	;# 
  5340  0396                     	;# 
  5341  0397                     	;# 
  5342  0398                     	;# 
  5343  0399                     	;# 
  5344  039A                     	;# 
  5345  039C                     	;# 
  5346  039D                     	;# 
  5347  039E                     	;# 
  5348  039F                     	;# 
  5349  0411                     	;# 
  5350  0411                     	;# 
  5351  0412                     	;# 
  5352  0413                     	;# 
  5353  0414                     	;# 
  5354  0415                     	;# 
  5355  0416                     	;# 
  5356  0417                     	;# 
  5357  0418                     	;# 
  5358  0418                     	;# 
  5359  0419                     	;# 
  5360  041A                     	;# 
  5361  041B                     	;# 
  5362  041C                     	;# 
  5363  041D                     	;# 
  5364  041E                     	;# 
  5365  041F                     	;# 
  5366  0498                     	;# 
  5367  0498                     	;# 
  5368  0499                     	;# 
  5369  049A                     	;# 
  5370  049B                     	;# 
  5371  049B                     	;# 
  5372  049C                     	;# 
  5373  049D                     	;# 
  5374  049E                     	;# 
  5375  049F                     	;# 
  5376  0617                     	;# 
  5377  0618                     	;# 
  5378  0619                     	;# 
  5379  0619                     	;# 
  5380  061A                     	;# 
  5381  061B                     	;# 
  5382  061C                     	;# 
  5383  061C                     	;# 
  5384  061F                     	;# 
  5385  0691                     	;# 
  5386  0692                     	;# 
  5387  0693                     	;# 
  5388  0694                     	;# 
  5389  0695                     	;# 
  5390  0696                     	;# 
  5391  0697                     	;# 
  5392  0698                     	;# 
  5393  0699                     	;# 
  5394  0711                     	;# 
  5395  0712                     	;# 
  5396  0713                     	;# 
  5397  0714                     	;# 
  5398  0715                     	;# 
  5399  0716                     	;# 
  5400  0717                     	;# 
  5401  0718                     	;# 
  5402  0719                     	;# 
  5403  0891                     	;# 
  5404  0891                     	;# 
  5405  0891                     	;# 
  5406  0891                     	;# 
  5407  0891                     	;# 
  5408  0891                     	;# 
  5409  0892                     	;# 
  5410  0892                     	;# 
  5411  0892                     	;# 
  5412  0893                     	;# 
  5413  0893                     	;# 
  5414  0893                     	;# 
  5415  0893                     	;# 
  5416  0893                     	;# 
  5417  0893                     	;# 
  5418  0894                     	;# 
  5419  0894                     	;# 
  5420  0894                     	;# 
  5421  0895                     	;# 
  5422  0895                     	;# 
  5423  0895                     	;# 
  5424  0896                     	;# 
  5425  0896                     	;# 
  5426  0896                     	;# 
  5427  089B                     	;# 
  5428  0911                     	;# 
  5429  0912                     	;# 
  5430  0913                     	;# 
  5431  0914                     	;# 
  5432  0915                     	;# 
  5433  0916                     	;# 
  5434  0918                     	;# 
  5435  0919                     	;# 
  5436  091A                     	;# 
  5437  091B                     	;# 
  5438  091C                     	;# 
  5439  091D                     	;# 
  5440  091E                     	;# 
  5441  091F                     	;# 
  5442  0E0F                     	;# 
  5443  0E10                     	;# 
  5444  0E11                     	;# 
  5445  0E12                     	;# 
  5446  0E13                     	;# 
  5447  0E14                     	;# 
  5448  0E15                     	;# 
  5449  0E16                     	;# 
  5450  0E17                     	;# 
  5451  0E18                     	;# 
  5452  0E19                     	;# 
  5453  0E1A                     	;# 
  5454  0E1B                     	;# 
  5455  0E1C                     	;# 
  5456  0E1D                     	;# 
  5457  0E1E                     	;# 
  5458  0E1F                     	;# 
  5459  0E20                     	;# 
  5460  0E21                     	;# 
  5461  0E22                     	;# 
  5462  0E24                     	;# 
  5463  0E25                     	;# 
  5464  0E28                     	;# 
  5465  0E29                     	;# 
  5466  0E2A                     	;# 
  5467  0E2B                     	;# 
  5468  0E2C                     	;# 
  5469  0E2D                     	;# 
  5470  0E2E                     	;# 
  5471  0E2F                     	;# 
  5472  0E90                     	;# 
  5473  0E91                     	;# 
  5474  0E92                     	;# 
  5475  0E94                     	;# 
  5476  0E95                     	;# 
  5477  0E9C                     	;# 
  5478  0E9D                     	;# 
  5479  0E9E                     	;# 
  5480  0E9F                     	;# 
  5481  0EA0                     	;# 
  5482  0EA1                     	;# 
  5483  0EA2                     	;# 
  5484  0EA3                     	;# 
  5485  0EA4                     	;# 
  5486  0EA5                     	;# 
  5487  0EA6                     	;# 
  5488  0EA7                     	;# 
  5489  0F0F                     	;# 
  5490  0F10                     	;# 
  5491  0F11                     	;# 
  5492  0F12                     	;# 
  5493  0F13                     	;# 
  5494  0F14                     	;# 
  5495  0F15                     	;# 
  5496  0F16                     	;# 
  5497  0F17                     	;# 
  5498  0F18                     	;# 
  5499  0F19                     	;# 
  5500  0F1A                     	;# 
  5501  0F1B                     	;# 
  5502  0F1C                     	;# 
  5503  0F1D                     	;# 
  5504  0F1E                     	;# 
  5505  0F1F                     	;# 
  5506  0F20                     	;# 
  5507  0F21                     	;# 
  5508  0F22                     	;# 
  5509  0F23                     	;# 
  5510  0F24                     	;# 
  5511  0F25                     	;# 
  5512  0F26                     	;# 
  5513  0F27                     	;# 
  5514  0F28                     	;# 
  5515  0F29                     	;# 
  5516  0F2A                     	;# 
  5517  0F2B                     	;# 
  5518  0F2C                     	;# 
  5519  0F2D                     	;# 
  5520  0F2E                     	;# 
  5521  0F2F                     	;# 
  5522  0F30                     	;# 
  5523  0F31                     	;# 
  5524  0F32                     	;# 
  5525  0F33                     	;# 
  5526  0F34                     	;# 
  5527  0F35                     	;# 
  5528  0F36                     	;# 
  5529  0F37                     	;# 
  5530  0FE4                     	;# 
  5531  0FE5                     	;# 
  5532  0FE6                     	;# 
  5533  0FE7                     	;# 
  5534  0FE8                     	;# 
  5535  0FE9                     	;# 
  5536  0FEA                     	;# 
  5537  0FEB                     	;# 
  5538  0FED                     	;# 
  5539  0FEE                     	;# 
  5540  0FEF                     	;# 
  5541  0000                     	;# 
  5542  0001                     	;# 
  5543  0002                     	;# 
  5544  0003                     	;# 
  5545  0004                     	;# 
  5546  0005                     	;# 
  5547  0006                     	;# 
  5548  0007                     	;# 
  5549  0008                     	;# 
  5550  0009                     	;# 
  5551  000A                     	;# 
  5552  000B                     	;# 
  5553  000C                     	;# 
  5554  000D                     	;# 
  5555  000E                     	;# 
  5556  0010                     	;# 
  5557  0011                     	;# 
  5558  0012                     	;# 
  5559  0013                     	;# 
  5560  0014                     	;# 
  5561  0015                     	;# 
  5562  0015                     	;# 
  5563  0016                     	;# 
  5564  0016                     	;# 
  5565  0017                     	;# 
  5566  0018                     	;# 
  5567  0019                     	;# 
  5568  0019                     	;# 
  5569  001A                     	;# 
  5570  001B                     	;# 
  5571  001C                     	;# 
  5572  001D                     	;# 
  5573  001E                     	;# 
  5574  001F                     	;# 
  5575  008C                     	;# 
  5576  008D                     	;# 
  5577  008E                     	;# 
  5578  0090                     	;# 
  5579  0091                     	;# 
  5580  0092                     	;# 
  5581  0093                     	;# 
  5582  0094                     	;# 
  5583  0097                     	;# 
  5584  009B                     	;# 
  5585  009B                     	;# 
  5586  009C                     	;# 
  5587  009D                     	;# 
  5588  009E                     	;# 
  5589  009F                     	;# 
  5590  010C                     	;# 
  5591  010D                     	;# 
  5592  010E                     	;# 
  5593  0111                     	;# 
  5594  0112                     	;# 
  5595  0113                     	;# 
  5596  0114                     	;# 
  5597  0115                     	;# 
  5598  0116                     	;# 
  5599  0117                     	;# 
  5600  0118                     	;# 
  5601  0119                     	;# 
  5602  018C                     	;# 
  5603  018D                     	;# 
  5604  018E                     	;# 
  5605  0199                     	;# 
  5606  0199                     	;# 
  5607  0199                     	;# 
  5608  019A                     	;# 
  5609  019A                     	;# 
  5610  019A                     	;# 
  5611  019B                     	;# 
  5612  019B                     	;# 
  5613  019B                     	;# 
  5614  019B                     	;# 
  5615  019B                     	;# 
  5616  019C                     	;# 
  5617  019C                     	;# 
  5618  019C                     	;# 
  5619  019D                     	;# 
  5620  019D                     	;# 
  5621  019D                     	;# 
  5622  019E                     	;# 
  5623  019E                     	;# 
  5624  019E                     	;# 
  5625  019F                     	;# 
  5626  019F                     	;# 
  5627  019F                     	;# 
  5628  019F                     	;# 
  5629  019F                     	;# 
  5630  020C                     	;# 
  5631  020D                     	;# 
  5632  020E                     	;# 
  5633  0211                     	;# 
  5634  0211                     	;# 
  5635  0212                     	;# 
  5636  0212                     	;# 
  5637  0213                     	;# 
  5638  0213                     	;# 
  5639  0214                     	;# 
  5640  0214                     	;# 
  5641  0215                     	;# 
  5642  0215                     	;# 
  5643  0215                     	;# 
  5644  0215                     	;# 
  5645  0216                     	;# 
  5646  0216                     	;# 
  5647  0217                     	;# 
  5648  0217                     	;# 
  5649  0219                     	;# 
  5650  021A                     	;# 
  5651  021B                     	;# 
  5652  021C                     	;# 
  5653  021D                     	;# 
  5654  021D                     	;# 
  5655  021E                     	;# 
  5656  021F                     	;# 
  5657  028C                     	;# 
  5658  028D                     	;# 
  5659  028E                     	;# 
  5660  0291                     	;# 
  5661  0291                     	;# 
  5662  0292                     	;# 
  5663  0293                     	;# 
  5664  0294                     	;# 
  5665  0295                     	;# 
  5666  0295                     	;# 
  5667  0296                     	;# 
  5668  0297                     	;# 
  5669  0298                     	;# 
  5670  029F                     	;# 
  5671  030C                     	;# 
  5672  030D                     	;# 
  5673  030E                     	;# 
  5674  0311                     	;# 
  5675  0311                     	;# 
  5676  0312                     	;# 
  5677  0313                     	;# 
  5678  0314                     	;# 
  5679  0315                     	;# 
  5680  0315                     	;# 
  5681  0316                     	;# 
  5682  0317                     	;# 
  5683  0318                     	;# 
  5684  038C                     	;# 
  5685  038D                     	;# 
  5686  038E                     	;# 
  5687  0391                     	;# 
  5688  0392                     	;# 
  5689  0393                     	;# 
  5690  0394                     	;# 
  5691  0395                     	;# 
  5692  0396                     	;# 
  5693  0397                     	;# 
  5694  0398                     	;# 
  5695  0399                     	;# 
  5696  039A                     	;# 
  5697  039C                     	;# 
  5698  039D                     	;# 
  5699  039E                     	;# 
  5700  039F                     	;# 
  5701  0411                     	;# 
  5702  0411                     	;# 
  5703  0412                     	;# 
  5704  0413                     	;# 
  5705  0414                     	;# 
  5706  0415                     	;# 
  5707  0416                     	;# 
  5708  0417                     	;# 
  5709  0418                     	;# 
  5710  0418                     	;# 
  5711  0419                     	;# 
  5712  041A                     	;# 
  5713  041B                     	;# 
  5714  041C                     	;# 
  5715  041D                     	;# 
  5716  041E                     	;# 
  5717  041F                     	;# 
  5718  0498                     	;# 
  5719  0498                     	;# 
  5720  0499                     	;# 
  5721  049A                     	;# 
  5722  049B                     	;# 
  5723  049B                     	;# 
  5724  049C                     	;# 
  5725  049D                     	;# 
  5726  049E                     	;# 
  5727  049F                     	;# 
  5728  0617                     	;# 
  5729  0618                     	;# 
  5730  0619                     	;# 
  5731  0619                     	;# 
  5732  061A                     	;# 
  5733  061B                     	;# 
  5734  061C                     	;# 
  5735  061C                     	;# 
  5736  061F                     	;# 
  5737  0691                     	;# 
  5738  0692                     	;# 
  5739  0693                     	;# 
  5740  0694                     	;# 
  5741  0695                     	;# 
  5742  0696                     	;# 
  5743  0697                     	;# 
  5744  0698                     	;# 
  5745  0699                     	;# 
  5746  0711                     	;# 
  5747  0712                     	;# 
  5748  0713                     	;# 
  5749  0714                     	;# 
  5750  0715                     	;# 
  5751  0716                     	;# 
  5752  0717                     	;# 
  5753  0718                     	;# 
  5754  0719                     	;# 
  5755  0891                     	;# 
  5756  0891                     	;# 
  5757  0891                     	;# 
  5758  0891                     	;# 
  5759  0891                     	;# 
  5760  0891                     	;# 
  5761  0892                     	;# 
  5762  0892                     	;# 
  5763  0892                     	;# 
  5764  0893                     	;# 
  5765  0893                     	;# 
  5766  0893                     	;# 
  5767  0893                     	;# 
  5768  0893                     	;# 
  5769  0893                     	;# 
  5770  0894                     	;# 
  5771  0894                     	;# 
  5772  0894                     	;# 
  5773  0895                     	;# 
  5774  0895                     	;# 
  5775  0895                     	;# 
  5776  0896                     	;# 
  5777  0896                     	;# 
  5778  0896                     	;# 
  5779  089B                     	;# 
  5780  0911                     	;# 
  5781  0912                     	;# 
  5782  0913                     	;# 
  5783  0914                     	;# 
  5784  0915                     	;# 
  5785  0916                     	;# 
  5786  0918                     	;# 
  5787  0919                     	;# 
  5788  091A                     	;# 
  5789  091B                     	;# 
  5790  091C                     	;# 
  5791  091D                     	;# 
  5792  091E                     	;# 
  5793  091F                     	;# 
  5794  0E0F                     	;# 
  5795  0E10                     	;# 
  5796  0E11                     	;# 
  5797  0E12                     	;# 
  5798  0E13                     	;# 
  5799  0E14                     	;# 
  5800  0E15                     	;# 
  5801  0E16                     	;# 
  5802  0E17                     	;# 
  5803  0E18                     	;# 
  5804  0E19                     	;# 
  5805  0E1A                     	;# 
  5806  0E1B                     	;# 
  5807  0E1C                     	;# 
  5808  0E1D                     	;# 
  5809  0E1E                     	;# 
  5810  0E1F                     	;# 
  5811  0E20                     	;# 
  5812  0E21                     	;# 
  5813  0E22                     	;# 
  5814  0E24                     	;# 
  5815  0E25                     	;# 
  5816  0E28                     	;# 
  5817  0E29                     	;# 
  5818  0E2A                     	;# 
  5819  0E2B                     	;# 
  5820  0E2C                     	;# 
  5821  0E2D                     	;# 
  5822  0E2E                     	;# 
  5823  0E2F                     	;# 
  5824  0E90                     	;# 
  5825  0E91                     	;# 
  5826  0E92                     	;# 
  5827  0E94                     	;# 
  5828  0E95                     	;# 
  5829  0E9C                     	;# 
  5830  0E9D                     	;# 
  5831  0E9E                     	;# 
  5832  0E9F                     	;# 
  5833  0EA0                     	;# 
  5834  0EA1                     	;# 
  5835  0EA2                     	;# 
  5836  0EA3                     	;# 
  5837  0EA4                     	;# 
  5838  0EA5                     	;# 
  5839  0EA6                     	;# 
  5840  0EA7                     	;# 
  5841  0F0F                     	;# 
  5842  0F10                     	;# 
  5843  0F11                     	;# 
  5844  0F12                     	;# 
  5845  0F13                     	;# 
  5846  0F14                     	;# 
  5847  0F15                     	;# 
  5848  0F16                     	;# 
  5849  0F17                     	;# 
  5850  0F18                     	;# 
  5851  0F19                     	;# 
  5852  0F1A                     	;# 
  5853  0F1B                     	;# 
  5854  0F1C                     	;# 
  5855  0F1D                     	;# 
  5856  0F1E                     	;# 
  5857  0F1F                     	;# 
  5858  0F20                     	;# 
  5859  0F21                     	;# 
  5860  0F22                     	;# 
  5861  0F23                     	;# 
  5862  0F24                     	;# 
  5863  0F25                     	;# 
  5864  0F26                     	;# 
  5865  0F27                     	;# 
  5866  0F28                     	;# 
  5867  0F29                     	;# 
  5868  0F2A                     	;# 
  5869  0F2B                     	;# 
  5870  0F2C                     	;# 
  5871  0F2D                     	;# 
  5872  0F2E                     	;# 
  5873  0F2F                     	;# 
  5874  0F30                     	;# 
  5875  0F31                     	;# 
  5876  0F32                     	;# 
  5877  0F33                     	;# 
  5878  0F34                     	;# 
  5879  0F35                     	;# 
  5880  0F36                     	;# 
  5881  0F37                     	;# 
  5882  0FE4                     	;# 
  5883  0FE5                     	;# 
  5884  0FE6                     	;# 
  5885  0FE7                     	;# 
  5886  0FE8                     	;# 
  5887  0FE9                     	;# 
  5888  0FEA                     	;# 
  5889  0FEB                     	;# 
  5890  0FED                     	;# 
  5891  0FEE                     	;# 
  5892  0FEF                     	;# 
  5893  0000                     	;# 
  5894  0001                     	;# 
  5895  0002                     	;# 
  5896  0003                     	;# 
  5897  0004                     	;# 
  5898  0005                     	;# 
  5899  0006                     	;# 
  5900  0007                     	;# 
  5901  0008                     	;# 
  5902  0009                     	;# 
  5903  000A                     	;# 
  5904  000B                     	;# 
  5905  000C                     	;# 
  5906  000D                     	;# 
  5907  000E                     	;# 
  5908  0010                     	;# 
  5909  0011                     	;# 
  5910  0012                     	;# 
  5911  0013                     	;# 
  5912  0014                     	;# 
  5913  0015                     	;# 
  5914  0015                     	;# 
  5915  0016                     	;# 
  5916  0016                     	;# 
  5917  0017                     	;# 
  5918  0018                     	;# 
  5919  0019                     	;# 
  5920  0019                     	;# 
  5921  001A                     	;# 
  5922  001B                     	;# 
  5923  001C                     	;# 
  5924  001D                     	;# 
  5925  001E                     	;# 
  5926  001F                     	;# 
  5927  008C                     	;# 
  5928  008D                     	;# 
  5929  008E                     	;# 
  5930  0090                     	;# 
  5931  0091                     	;# 
  5932  0092                     	;# 
  5933  0093                     	;# 
  5934  0094                     	;# 
  5935  0097                     	;# 
  5936  009B                     	;# 
  5937  009B                     	;# 
  5938  009C                     	;# 
  5939  009D                     	;# 
  5940  009E                     	;# 
  5941  009F                     	;# 
  5942  010C                     	;# 
  5943  010D                     	;# 
  5944  010E                     	;# 
  5945  0111                     	;# 
  5946  0112                     	;# 
  5947  0113                     	;# 
  5948  0114                     	;# 
  5949  0115                     	;# 
  5950  0116                     	;# 
  5951  0117                     	;# 
  5952  0118                     	;# 
  5953  0119                     	;# 
  5954  018C                     	;# 
  5955  018D                     	;# 
  5956  018E                     	;# 
  5957  0199                     	;# 
  5958  0199                     	;# 
  5959  0199                     	;# 
  5960  019A                     	;# 
  5961  019A                     	;# 
  5962  019A                     	;# 
  5963  019B                     	;# 
  5964  019B                     	;# 
  5965  019B                     	;# 
  5966  019B                     	;# 
  5967  019B                     	;# 
  5968  019C                     	;# 
  5969  019C                     	;# 
  5970  019C                     	;# 
  5971  019D                     	;# 
  5972  019D                     	;# 
  5973  019D                     	;# 
  5974  019E                     	;# 
  5975  019E                     	;# 
  5976  019E                     	;# 
  5977  019F                     	;# 
  5978  019F                     	;# 
  5979  019F                     	;# 
  5980  019F                     	;# 
  5981  019F                     	;# 
  5982  020C                     	;# 
  5983  020D                     	;# 
  5984  020E                     	;# 
  5985  0211                     	;# 
  5986  0211                     	;# 
  5987  0212                     	;# 
  5988  0212                     	;# 
  5989  0213                     	;# 
  5990  0213                     	;# 
  5991  0214                     	;# 
  5992  0214                     	;# 
  5993  0215                     	;# 
  5994  0215                     	;# 
  5995  0215                     	;# 
  5996  0215                     	;# 
  5997  0216                     	;# 
  5998  0216                     	;# 
  5999  0217                     	;# 
  6000  0217                     	;# 
  6001  0219                     	;# 
  6002  021A                     	;# 
  6003  021B                     	;# 
  6004  021C                     	;# 
  6005  021D                     	;# 
  6006  021D                     	;# 
  6007  021E                     	;# 
  6008  021F                     	;# 
  6009  028C                     	;# 
  6010  028D                     	;# 
  6011  028E                     	;# 
  6012  0291                     	;# 
  6013  0291                     	;# 
  6014  0292                     	;# 
  6015  0293                     	;# 
  6016  0294                     	;# 
  6017  0295                     	;# 
  6018  0295                     	;# 
  6019  0296                     	;# 
  6020  0297                     	;# 
  6021  0298                     	;# 
  6022  029F                     	;# 
  6023  030C                     	;# 
  6024  030D                     	;# 
  6025  030E                     	;# 
  6026  0311                     	;# 
  6027  0311                     	;# 
  6028  0312                     	;# 
  6029  0313                     	;# 
  6030  0314                     	;# 
  6031  0315                     	;# 
  6032  0315                     	;# 
  6033  0316                     	;# 
  6034  0317                     	;# 
  6035  0318                     	;# 
  6036  038C                     	;# 
  6037  038D                     	;# 
  6038  038E                     	;# 
  6039  0391                     	;# 
  6040  0392                     	;# 
  6041  0393                     	;# 
  6042  0394                     	;# 
  6043  0395                     	;# 
  6044  0396                     	;# 
  6045  0397                     	;# 
  6046  0398                     	;# 
  6047  0399                     	;# 
  6048  039A                     	;# 
  6049  039C                     	;# 
  6050  039D                     	;# 
  6051  039E                     	;# 
  6052  039F                     	;# 
  6053  0411                     	;# 
  6054  0411                     	;# 
  6055  0412                     	;# 
  6056  0413                     	;# 
  6057  0414                     	;# 
  6058  0415                     	;# 
  6059  0416                     	;# 
  6060  0417                     	;# 
  6061  0418                     	;# 
  6062  0418                     	;# 
  6063  0419                     	;# 
  6064  041A                     	;# 
  6065  041B                     	;# 
  6066  041C                     	;# 
  6067  041D                     	;# 
  6068  041E                     	;# 
  6069  041F                     	;# 
  6070  0498                     	;# 
  6071  0498                     	;# 
  6072  0499                     	;# 
  6073  049A                     	;# 
  6074  049B                     	;# 
  6075  049B                     	;# 
  6076  049C                     	;# 
  6077  049D                     	;# 
  6078  049E                     	;# 
  6079  049F                     	;# 
  6080  0617                     	;# 
  6081  0618                     	;# 
  6082  0619                     	;# 
  6083  0619                     	;# 
  6084  061A                     	;# 
  6085  061B                     	;# 
  6086  061C                     	;# 
  6087  061C                     	;# 
  6088  061F                     	;# 
  6089  0691                     	;# 
  6090  0692                     	;# 
  6091  0693                     	;# 
  6092  0694                     	;# 
  6093  0695                     	;# 
  6094  0696                     	;# 
  6095  0697                     	;# 
  6096  0698                     	;# 
  6097  0699                     	;# 
  6098  0711                     	;# 
  6099  0712                     	;# 
  6100  0713                     	;# 
  6101  0714                     	;# 
  6102  0715                     	;# 
  6103  0716                     	;# 
  6104  0717                     	;# 
  6105  0718                     	;# 
  6106  0719                     	;# 
  6107  0891                     	;# 
  6108  0891                     	;# 
  6109  0891                     	;# 
  6110  0891                     	;# 
  6111  0891                     	;# 
  6112  0891                     	;# 
  6113  0892                     	;# 
  6114  0892                     	;# 
  6115  0892                     	;# 
  6116  0893                     	;# 
  6117  0893                     	;# 
  6118  0893                     	;# 
  6119  0893                     	;# 
  6120  0893                     	;# 
  6121  0893                     	;# 
  6122  0894                     	;# 
  6123  0894                     	;# 
  6124  0894                     	;# 
  6125  0895                     	;# 
  6126  0895                     	;# 
  6127  0895                     	;# 
  6128  0896                     	;# 
  6129  0896                     	;# 
  6130  0896                     	;# 
  6131  089B                     	;# 
  6132  0911                     	;# 
  6133  0912                     	;# 
  6134  0913                     	;# 
  6135  0914                     	;# 
  6136  0915                     	;# 
  6137  0916                     	;# 
  6138  0918                     	;# 
  6139  0919                     	;# 
  6140  091A                     	;# 
  6141  091B                     	;# 
  6142  091C                     	;# 
  6143  091D                     	;# 
  6144  091E                     	;# 
  6145  091F                     	;# 
  6146  0E0F                     	;# 
  6147  0E10                     	;# 
  6148  0E11                     	;# 
  6149  0E12                     	;# 
  6150  0E13                     	;# 
  6151  0E14                     	;# 
  6152  0E15                     	;# 
  6153  0E16                     	;# 
  6154  0E17                     	;# 
  6155  0E18                     	;# 
  6156  0E19                     	;# 
  6157  0E1A                     	;# 
  6158  0E1B                     	;# 
  6159  0E1C                     	;# 
  6160  0E1D                     	;# 
  6161  0E1E                     	;# 
  6162  0E1F                     	;# 
  6163  0E20                     	;# 
  6164  0E21                     	;# 
  6165  0E22                     	;# 
  6166  0E24                     	;# 
  6167  0E25                     	;# 
  6168  0E28                     	;# 
  6169  0E29                     	;# 
  6170  0E2A                     	;# 
  6171  0E2B                     	;# 
  6172  0E2C                     	;# 
  6173  0E2D                     	;# 
  6174  0E2E                     	;# 
  6175  0E2F                     	;# 
  6176  0E90                     	;# 
  6177  0E91                     	;# 
  6178  0E92                     	;# 
  6179  0E94                     	;# 
  6180  0E95                     	;# 
  6181  0E9C                     	;# 
  6182  0E9D                     	;# 
  6183  0E9E                     	;# 
  6184  0E9F                     	;# 
  6185  0EA0                     	;# 
  6186  0EA1                     	;# 
  6187  0EA2                     	;# 
  6188  0EA3                     	;# 
  6189  0EA4                     	;# 
  6190  0EA5                     	;# 
  6191  0EA6                     	;# 
  6192  0EA7                     	;# 
  6193  0F0F                     	;# 
  6194  0F10                     	;# 
  6195  0F11                     	;# 
  6196  0F12                     	;# 
  6197  0F13                     	;# 
  6198  0F14                     	;# 
  6199  0F15                     	;# 
  6200  0F16                     	;# 
  6201  0F17                     	;# 
  6202  0F18                     	;# 
  6203  0F19                     	;# 
  6204  0F1A                     	;# 
  6205  0F1B                     	;# 
  6206  0F1C                     	;# 
  6207  0F1D                     	;# 
  6208  0F1E                     	;# 
  6209  0F1F                     	;# 
  6210  0F20                     	;# 
  6211  0F21                     	;# 
  6212  0F22                     	;# 
  6213  0F23                     	;# 
  6214  0F24                     	;# 
  6215  0F25                     	;# 
  6216  0F26                     	;# 
  6217  0F27                     	;# 
  6218  0F28                     	;# 
  6219  0F29                     	;# 
  6220  0F2A                     	;# 
  6221  0F2B                     	;# 
  6222  0F2C                     	;# 
  6223  0F2D                     	;# 
  6224  0F2E                     	;# 
  6225  0F2F                     	;# 
  6226  0F30                     	;# 
  6227  0F31                     	;# 
  6228  0F32                     	;# 
  6229  0F33                     	;# 
  6230  0F34                     	;# 
  6231  0F35                     	;# 
  6232  0F36                     	;# 
  6233  0F37                     	;# 
  6234  0FE4                     	;# 
  6235  0FE5                     	;# 
  6236  0FE6                     	;# 
  6237  0FE7                     	;# 
  6238  0FE8                     	;# 
  6239  0FE9                     	;# 
  6240  0FEA                     	;# 
  6241  0FEB                     	;# 
  6242  0FED                     	;# 
  6243  0FEE                     	;# 
  6244  0FEF                     	;# 
  6245  0000                     	;# 
  6246  0001                     	;# 
  6247  0002                     	;# 
  6248  0003                     	;# 
  6249  0004                     	;# 
  6250  0005                     	;# 
  6251  0006                     	;# 
  6252  0007                     	;# 
  6253  0008                     	;# 
  6254  0009                     	;# 
  6255  000A                     	;# 
  6256  000B                     	;# 
  6257  000C                     	;# 
  6258  000D                     	;# 
  6259  000E                     	;# 
  6260  0010                     	;# 
  6261  0011                     	;# 
  6262  0012                     	;# 
  6263  0013                     	;# 
  6264  0014                     	;# 
  6265  0015                     	;# 
  6266  0015                     	;# 
  6267  0016                     	;# 
  6268  0016                     	;# 
  6269  0017                     	;# 
  6270  0018                     	;# 
  6271  0019                     	;# 
  6272  0019                     	;# 
  6273  001A                     	;# 
  6274  001B                     	;# 
  6275  001C                     	;# 
  6276  001D                     	;# 
  6277  001E                     	;# 
  6278  001F                     	;# 
  6279  008C                     	;# 
  6280  008D                     	;# 
  6281  008E                     	;# 
  6282  0090                     	;# 
  6283  0091                     	;# 
  6284  0092                     	;# 
  6285  0093                     	;# 
  6286  0094                     	;# 
  6287  0097                     	;# 
  6288  009B                     	;# 
  6289  009B                     	;# 
  6290  009C                     	;# 
  6291  009D                     	;# 
  6292  009E                     	;# 
  6293  009F                     	;# 
  6294  010C                     	;# 
  6295  010D                     	;# 
  6296  010E                     	;# 
  6297  0111                     	;# 
  6298  0112                     	;# 
  6299  0113                     	;# 
  6300  0114                     	;# 
  6301  0115                     	;# 
  6302  0116                     	;# 
  6303  0117                     	;# 
  6304  0118                     	;# 
  6305  0119                     	;# 
  6306  018C                     	;# 
  6307  018D                     	;# 
  6308  018E                     	;# 
  6309  0199                     	;# 
  6310  0199                     	;# 
  6311  0199                     	;# 
  6312  019A                     	;# 
  6313  019A                     	;# 
  6314  019A                     	;# 
  6315  019B                     	;# 
  6316  019B                     	;# 
  6317  019B                     	;# 
  6318  019B                     	;# 
  6319  019B                     	;# 
  6320  019C                     	;# 
  6321  019C                     	;# 
  6322  019C                     	;# 
  6323  019D                     	;# 
  6324  019D                     	;# 
  6325  019D                     	;# 
  6326  019E                     	;# 
  6327  019E                     	;# 
  6328  019E                     	;# 
  6329  019F                     	;# 
  6330  019F                     	;# 
  6331  019F                     	;# 
  6332  019F                     	;# 
  6333  019F                     	;# 
  6334  020C                     	;# 
  6335  020D                     	;# 
  6336  020E                     	;# 
  6337  0211                     	;# 
  6338  0211                     	;# 
  6339  0212                     	;# 
  6340  0212                     	;# 
  6341  0213                     	;# 
  6342  0213                     	;# 
  6343  0214                     	;# 
  6344  0214                     	;# 
  6345  0215                     	;# 
  6346  0215                     	;# 
  6347  0215                     	;# 
  6348  0215                     	;# 
  6349  0216                     	;# 
  6350  0216                     	;# 
  6351  0217                     	;# 
  6352  0217                     	;# 
  6353  0219                     	;# 
  6354  021A                     	;# 
  6355  021B                     	;# 
  6356  021C                     	;# 
  6357  021D                     	;# 
  6358  021D                     	;# 
  6359  021E                     	;# 
  6360  021F                     	;# 
  6361  028C                     	;# 
  6362  028D                     	;# 
  6363  028E                     	;# 
  6364  0291                     	;# 
  6365  0291                     	;# 
  6366  0292                     	;# 
  6367  0293                     	;# 
  6368  0294                     	;# 
  6369  0295                     	;# 
  6370  0295                     	;# 
  6371  0296                     	;# 
  6372  0297                     	;# 
  6373  0298                     	;# 
  6374  029F                     	;# 
  6375  030C                     	;# 
  6376  030D                     	;# 
  6377  030E                     	;# 
  6378  0311                     	;# 
  6379  0311                     	;# 
  6380  0312                     	;# 
  6381  0313                     	;# 
  6382  0314                     	;# 
  6383  0315                     	;# 
  6384  0315                     	;# 
  6385  0316                     	;# 
  6386  0317                     	;# 
  6387  0318                     	;# 
  6388  038C                     	;# 
  6389  038D                     	;# 
  6390  038E                     	;# 
  6391  0391                     	;# 
  6392  0392                     	;# 
  6393  0393                     	;# 
  6394  0394                     	;# 
  6395  0395                     	;# 
  6396  0396                     	;# 
  6397  0397                     	;# 
  6398  0398                     	;# 
  6399  0399                     	;# 
  6400  039A                     	;# 
  6401  039C                     	;# 
  6402  039D                     	;# 
  6403  039E                     	;# 
  6404  039F                     	;# 
  6405  0411                     	;# 
  6406  0411                     	;# 
  6407  0412                     	;# 
  6408  0413                     	;# 
  6409  0414                     	;# 
  6410  0415                     	;# 
  6411  0416                     	;# 
  6412  0417                     	;# 
  6413  0418                     	;# 
  6414  0418                     	;# 
  6415  0419                     	;# 
  6416  041A                     	;# 
  6417  041B                     	;# 
  6418  041C                     	;# 
  6419  041D                     	;# 
  6420  041E                     	;# 
  6421  041F                     	;# 
  6422  0498                     	;# 
  6423  0498                     	;# 
  6424  0499                     	;# 
  6425  049A                     	;# 
  6426  049B                     	;# 
  6427  049B                     	;# 
  6428  049C                     	;# 
  6429  049D                     	;# 
  6430  049E                     	;# 
  6431  049F                     	;# 
  6432  0617                     	;# 
  6433  0618                     	;# 
  6434  0619                     	;# 
  6435  0619                     	;# 
  6436  061A                     	;# 
  6437  061B                     	;# 
  6438  061C                     	;# 
  6439  061C                     	;# 
  6440  061F                     	;# 
  6441  0691                     	;# 
  6442  0692                     	;# 
  6443  0693                     	;# 
  6444  0694                     	;# 
  6445  0695                     	;# 
  6446  0696                     	;# 
  6447  0697                     	;# 
  6448  0698                     	;# 
  6449  0699                     	;# 
  6450  0711                     	;# 
  6451  0712                     	;# 
  6452  0713                     	;# 
  6453  0714                     	;# 
  6454  0715                     	;# 
  6455  0716                     	;# 
  6456  0717                     	;# 
  6457  0718                     	;# 
  6458  0719                     	;# 
  6459  0891                     	;# 
  6460  0891                     	;# 
  6461  0891                     	;# 
  6462  0891                     	;# 
  6463  0891                     	;# 
  6464  0891                     	;# 
  6465  0892                     	;# 
  6466  0892                     	;# 
  6467  0892                     	;# 
  6468  0893                     	;# 
  6469  0893                     	;# 
  6470  0893                     	;# 
  6471  0893                     	;# 
  6472  0893                     	;# 
  6473  0893                     	;# 
  6474  0894                     	;# 
  6475  0894                     	;# 
  6476  0894                     	;# 
  6477  0895                     	;# 
  6478  0895                     	;# 
  6479  0895                     	;# 
  6480  0896                     	;# 
  6481  0896                     	;# 
  6482  0896                     	;# 
  6483  089B                     	;# 
  6484  0911                     	;# 
  6485  0912                     	;# 
  6486  0913                     	;# 
  6487  0914                     	;# 
  6488  0915                     	;# 
  6489  0916                     	;# 
  6490  0918                     	;# 
  6491  0919                     	;# 
  6492  091A                     	;# 
  6493  091B                     	;# 
  6494  091C                     	;# 
  6495  091D                     	;# 
  6496  091E                     	;# 
  6497  091F                     	;# 
  6498  0E0F                     	;# 
  6499  0E10                     	;# 
  6500  0E11                     	;# 
  6501  0E12                     	;# 
  6502  0E13                     	;# 
  6503  0E14                     	;# 
  6504  0E15                     	;# 
  6505  0E16                     	;# 
  6506  0E17                     	;# 
  6507  0E18                     	;# 
  6508  0E19                     	;# 
  6509  0E1A                     	;# 
  6510  0E1B                     	;# 
  6511  0E1C                     	;# 
  6512  0E1D                     	;# 
  6513  0E1E                     	;# 
  6514  0E1F                     	;# 
  6515  0E20                     	;# 
  6516  0E21                     	;# 
  6517  0E22                     	;# 
  6518  0E24                     	;# 
  6519  0E25                     	;# 
  6520  0E28                     	;# 
  6521  0E29                     	;# 
  6522  0E2A                     	;# 
  6523  0E2B                     	;# 
  6524  0E2C                     	;# 
  6525  0E2D                     	;# 
  6526  0E2E                     	;# 
  6527  0E2F                     	;# 
  6528  0E90                     	;# 
  6529  0E91                     	;# 
  6530  0E92                     	;# 
  6531  0E94                     	;# 
  6532  0E95                     	;# 
  6533  0E9C                     	;# 
  6534  0E9D                     	;# 
  6535  0E9E                     	;# 
  6536  0E9F                     	;# 
  6537  0EA0                     	;# 
  6538  0EA1                     	;# 
  6539  0EA2                     	;# 
  6540  0EA3                     	;# 
  6541  0EA4                     	;# 
  6542  0EA5                     	;# 
  6543  0EA6                     	;# 
  6544  0EA7                     	;# 
  6545  0F0F                     	;# 
  6546  0F10                     	;# 
  6547  0F11                     	;# 
  6548  0F12                     	;# 
  6549  0F13                     	;# 
  6550  0F14                     	;# 
  6551  0F15                     	;# 
  6552  0F16                     	;# 
  6553  0F17                     	;# 
  6554  0F18                     	;# 
  6555  0F19                     	;# 
  6556  0F1A                     	;# 
  6557  0F1B                     	;# 
  6558  0F1C                     	;# 
  6559  0F1D                     	;# 
  6560  0F1E                     	;# 
  6561  0F1F                     	;# 
  6562  0F20                     	;# 
  6563  0F21                     	;# 
  6564  0F22                     	;# 
  6565  0F23                     	;# 
  6566  0F24                     	;# 
  6567  0F25                     	;# 
  6568  0F26                     	;# 
  6569  0F27                     	;# 
  6570  0F28                     	;# 
  6571  0F29                     	;# 
  6572  0F2A                     	;# 
  6573  0F2B                     	;# 
  6574  0F2C                     	;# 
  6575  0F2D                     	;# 
  6576  0F2E                     	;# 
  6577  0F2F                     	;# 
  6578  0F30                     	;# 
  6579  0F31                     	;# 
  6580  0F32                     	;# 
  6581  0F33                     	;# 
  6582  0F34                     	;# 
  6583  0F35                     	;# 
  6584  0F36                     	;# 
  6585  0F37                     	;# 
  6586  0FE4                     	;# 
  6587  0FE5                     	;# 
  6588  0FE6                     	;# 
  6589  0FE7                     	;# 
  6590  0FE8                     	;# 
  6591  0FE9                     	;# 
  6592  0FEA                     	;# 
  6593  0FEB                     	;# 
  6594  0FED                     	;# 
  6595  0FEE                     	;# 
  6596  0FEF                     	;# 
  6597  0000                     	;# 
  6598  0001                     	;# 
  6599  0002                     	;# 
  6600  0003                     	;# 
  6601  0004                     	;# 
  6602  0005                     	;# 
  6603  0006                     	;# 
  6604  0007                     	;# 
  6605  0008                     	;# 
  6606  0009                     	;# 
  6607  000A                     	;# 
  6608  000B                     	;# 
  6609  000C                     	;# 
  6610  000D                     	;# 
  6611  000E                     	;# 
  6612  0010                     	;# 
  6613  0011                     	;# 
  6614  0012                     	;# 
  6615  0013                     	;# 
  6616  0014                     	;# 
  6617  0015                     	;# 
  6618  0015                     	;# 
  6619  0016                     	;# 
  6620  0016                     	;# 
  6621  0017                     	;# 
  6622  0018                     	;# 
  6623  0019                     	;# 
  6624  0019                     	;# 
  6625  001A                     	;# 
  6626  001B                     	;# 
  6627  001C                     	;# 
  6628  001D                     	;# 
  6629  001E                     	;# 
  6630  001F                     	;# 
  6631  008C                     	;# 
  6632  008D                     	;# 
  6633  008E                     	;# 
  6634  0090                     	;# 
  6635  0091                     	;# 
  6636  0092                     	;# 
  6637  0093                     	;# 
  6638  0094                     	;# 
  6639  0097                     	;# 
  6640  009B                     	;# 
  6641  009B                     	;# 
  6642  009C                     	;# 
  6643  009D                     	;# 
  6644  009E                     	;# 
  6645  009F                     	;# 
  6646  010C                     	;# 
  6647  010D                     	;# 
  6648  010E                     	;# 
  6649  0111                     	;# 
  6650  0112                     	;# 
  6651  0113                     	;# 
  6652  0114                     	;# 
  6653  0115                     	;# 
  6654  0116                     	;# 
  6655  0117                     	;# 
  6656  0118                     	;# 
  6657  0119                     	;# 
  6658  018C                     	;# 
  6659  018D                     	;# 
  6660  018E                     	;# 
  6661  0199                     	;# 
  6662  0199                     	;# 
  6663  0199                     	;# 
  6664  019A                     	;# 
  6665  019A                     	;# 
  6666  019A                     	;# 
  6667  019B                     	;# 
  6668  019B                     	;# 
  6669  019B                     	;# 
  6670  019B                     	;# 
  6671  019B                     	;# 
  6672  019C                     	;# 
  6673  019C                     	;# 
  6674  019C                     	;# 
  6675  019D                     	;# 
  6676  019D                     	;# 
  6677  019D                     	;# 
  6678  019E                     	;# 
  6679  019E                     	;# 
  6680  019E                     	;# 
  6681  019F                     	;# 
  6682  019F                     	;# 
  6683  019F                     	;# 
  6684  019F                     	;# 
  6685  019F                     	;# 
  6686  020C                     	;# 
  6687  020D                     	;# 
  6688  020E                     	;# 
  6689  0211                     	;# 
  6690  0211                     	;# 
  6691  0212                     	;# 
  6692  0212                     	;# 
  6693  0213                     	;# 
  6694  0213                     	;# 
  6695  0214                     	;# 
  6696  0214                     	;# 
  6697  0215                     	;# 
  6698  0215                     	;# 
  6699  0215                     	;# 
  6700  0215                     	;# 
  6701  0216                     	;# 
  6702  0216                     	;# 
  6703  0217                     	;# 
  6704  0217                     	;# 
  6705  0219                     	;# 
  6706  021A                     	;# 
  6707  021B                     	;# 
  6708  021C                     	;# 
  6709  021D                     	;# 
  6710  021D                     	;# 
  6711  021E                     	;# 
  6712  021F                     	;# 
  6713  028C                     	;# 
  6714  028D                     	;# 
  6715  028E                     	;# 
  6716  0291                     	;# 
  6717  0291                     	;# 
  6718  0292                     	;# 
  6719  0293                     	;# 
  6720  0294                     	;# 
  6721  0295                     	;# 
  6722  0295                     	;# 
  6723  0296                     	;# 
  6724  0297                     	;# 
  6725  0298                     	;# 
  6726  029F                     	;# 
  6727  030C                     	;# 
  6728  030D                     	;# 
  6729  030E                     	;# 
  6730  0311                     	;# 
  6731  0311                     	;# 
  6732  0312                     	;# 
  6733  0313                     	;# 
  6734  0314                     	;# 
  6735  0315                     	;# 
  6736  0315                     	;# 
  6737  0316                     	;# 
  6738  0317                     	;# 
  6739  0318                     	;# 
  6740  038C                     	;# 
  6741  038D                     	;# 
  6742  038E                     	;# 
  6743  0391                     	;# 
  6744  0392                     	;# 
  6745  0393                     	;# 
  6746  0394                     	;# 
  6747  0395                     	;# 
  6748  0396                     	;# 
  6749  0397                     	;# 
  6750  0398                     	;# 
  6751  0399                     	;# 
  6752  039A                     	;# 
  6753  039C                     	;# 
  6754  039D                     	;# 
  6755  039E                     	;# 
  6756  039F                     	;# 
  6757  0411                     	;# 
  6758  0411                     	;# 
  6759  0412                     	;# 
  6760  0413                     	;# 
  6761  0414                     	;# 
  6762  0415                     	;# 
  6763  0416                     	;# 
  6764  0417                     	;# 
  6765  0418                     	;# 
  6766  0418                     	;# 
  6767  0419                     	;# 
  6768  041A                     	;# 
  6769  041B                     	;# 
  6770  041C                     	;# 
  6771  041D                     	;# 
  6772  041E                     	;# 
  6773  041F                     	;# 
  6774  0498                     	;# 
  6775  0498                     	;# 
  6776  0499                     	;# 
  6777  049A                     	;# 
  6778  049B                     	;# 
  6779  049B                     	;# 
  6780  049C                     	;# 
  6781  049D                     	;# 
  6782  049E                     	;# 
  6783  049F                     	;# 
  6784  0617                     	;# 
  6785  0618                     	;# 
  6786  0619                     	;# 
  6787  0619                     	;# 
  6788  061A                     	;# 
  6789  061B                     	;# 
  6790  061C                     	;# 
  6791  061C                     	;# 
  6792  061F                     	;# 
  6793  0691                     	;# 
  6794  0692                     	;# 
  6795  0693                     	;# 
  6796  0694                     	;# 
  6797  0695                     	;# 
  6798  0696                     	;# 
  6799  0697                     	;# 
  6800  0698                     	;# 
  6801  0699                     	;# 
  6802  0711                     	;# 
  6803  0712                     	;# 
  6804  0713                     	;# 
  6805  0714                     	;# 
  6806  0715                     	;# 
  6807  0716                     	;# 
  6808  0717                     	;# 
  6809  0718                     	;# 
  6810  0719                     	;# 
  6811  0891                     	;# 
  6812  0891                     	;# 
  6813  0891                     	;# 
  6814  0891                     	;# 
  6815  0891                     	;# 
  6816  0891                     	;# 
  6817  0892                     	;# 
  6818  0892                     	;# 
  6819  0892                     	;# 
  6820  0893                     	;# 
  6821  0893                     	;# 
  6822  0893                     	;# 
  6823  0893                     	;# 
  6824  0893                     	;# 
  6825  0893                     	;# 
  6826  0894                     	;# 
  6827  0894                     	;# 
  6828  0894                     	;# 
  6829  0895                     	;# 
  6830  0895                     	;# 
  6831  0895                     	;# 
  6832  0896                     	;# 
  6833  0896                     	;# 
  6834  0896                     	;# 
  6835  089B                     	;# 
  6836  0911                     	;# 
  6837  0912                     	;# 
  6838  0913                     	;# 
  6839  0914                     	;# 
  6840  0915                     	;# 
  6841  0916                     	;# 
  6842  0918                     	;# 
  6843  0919                     	;# 
  6844  091A                     	;# 
  6845  091B                     	;# 
  6846  091C                     	;# 
  6847  091D                     	;# 
  6848  091E                     	;# 
  6849  091F                     	;# 
  6850  0E0F                     	;# 
  6851  0E10                     	;# 
  6852  0E11                     	;# 
  6853  0E12                     	;# 
  6854  0E13                     	;# 
  6855  0E14                     	;# 
  6856  0E15                     	;# 
  6857  0E16                     	;# 
  6858  0E17                     	;# 
  6859  0E18                     	;# 
  6860  0E19                     	;# 
  6861  0E1A                     	;# 
  6862  0E1B                     	;# 
  6863  0E1C                     	;# 
  6864  0E1D                     	;# 
  6865  0E1E                     	;# 
  6866  0E1F                     	;# 
  6867  0E20                     	;# 
  6868  0E21                     	;# 
  6869  0E22                     	;# 
  6870  0E24                     	;# 
  6871  0E25                     	;# 
  6872  0E28                     	;# 
  6873  0E29                     	;# 
  6874  0E2A                     	;# 
  6875  0E2B                     	;# 
  6876  0E2C                     	;# 
  6877  0E2D                     	;# 
  6878  0E2E                     	;# 
  6879  0E2F                     	;# 
  6880  0E90                     	;# 
  6881  0E91                     	;# 
  6882  0E92                     	;# 
  6883  0E94                     	;# 
  6884  0E95                     	;# 
  6885  0E9C                     	;# 
  6886  0E9D                     	;# 
  6887  0E9E                     	;# 
  6888  0E9F                     	;# 
  6889  0EA0                     	;# 
  6890  0EA1                     	;# 
  6891  0EA2                     	;# 
  6892  0EA3                     	;# 
  6893  0EA4                     	;# 
  6894  0EA5                     	;# 
  6895  0EA6                     	;# 
  6896  0EA7                     	;# 
  6897  0F0F                     	;# 
  6898  0F10                     	;# 
  6899  0F11                     	;# 
  6900  0F12                     	;# 
  6901  0F13                     	;# 
  6902  0F14                     	;# 
  6903  0F15                     	;# 
  6904  0F16                     	;# 
  6905  0F17                     	;# 
  6906  0F18                     	;# 
  6907  0F19                     	;# 
  6908  0F1A                     	;# 
  6909  0F1B                     	;# 
  6910  0F1C                     	;# 
  6911  0F1D                     	;# 
  6912  0F1E                     	;# 
  6913  0F1F                     	;# 
  6914  0F20                     	;# 
  6915  0F21                     	;# 
  6916  0F22                     	;# 
  6917  0F23                     	;# 
  6918  0F24                     	;# 
  6919  0F25                     	;# 
  6920  0F26                     	;# 
  6921  0F27                     	;# 
  6922  0F28                     	;# 
  6923  0F29                     	;# 
  6924  0F2A                     	;# 
  6925  0F2B                     	;# 
  6926  0F2C                     	;# 
  6927  0F2D                     	;# 
  6928  0F2E                     	;# 
  6929  0F2F                     	;# 
  6930  0F30                     	;# 
  6931  0F31                     	;# 
  6932  0F32                     	;# 
  6933  0F33                     	;# 
  6934  0F34                     	;# 
  6935  0F35                     	;# 
  6936  0F36                     	;# 
  6937  0F37                     	;# 
  6938  0FE4                     	;# 
  6939  0FE5                     	;# 
  6940  0FE6                     	;# 
  6941  0FE7                     	;# 
  6942  0FE8                     	;# 
  6943  0FE9                     	;# 
  6944  0FEA                     	;# 
  6945  0FEB                     	;# 
  6946  0FED                     	;# 
  6947  0FEE                     	;# 
  6948  0FEF                     	;# 
  6949  0000                     	;# 
  6950  0001                     	;# 
  6951  0002                     	;# 
  6952  0003                     	;# 
  6953  0004                     	;# 
  6954  0005                     	;# 
  6955  0006                     	;# 
  6956  0007                     	;# 
  6957  0008                     	;# 
  6958  0009                     	;# 
  6959  000A                     	;# 
  6960  000B                     	;# 
  6961  000C                     	;# 
  6962  000D                     	;# 
  6963  000E                     	;# 
  6964  0010                     	;# 
  6965  0011                     	;# 
  6966  0012                     	;# 
  6967  0013                     	;# 
  6968  0014                     	;# 
  6969  0015                     	;# 
  6970  0015                     	;# 
  6971  0016                     	;# 
  6972  0016                     	;# 
  6973  0017                     	;# 
  6974  0018                     	;# 
  6975  0019                     	;# 
  6976  0019                     	;# 
  6977  001A                     	;# 
  6978  001B                     	;# 
  6979  001C                     	;# 
  6980  001D                     	;# 
  6981  001E                     	;# 
  6982  001F                     	;# 
  6983  008C                     	;# 
  6984  008D                     	;# 
  6985  008E                     	;# 
  6986  0090                     	;# 
  6987  0091                     	;# 
  6988  0092                     	;# 
  6989  0093                     	;# 
  6990  0094                     	;# 
  6991  0097                     	;# 
  6992  009B                     	;# 
  6993  009B                     	;# 
  6994  009C                     	;# 
  6995  009D                     	;# 
  6996  009E                     	;# 
  6997  009F                     	;# 
  6998  010C                     	;# 
  6999  010D                     	;# 
  7000  010E                     	;# 
  7001  0111                     	;# 
  7002  0112                     	;# 
  7003  0113                     	;# 
  7004  0114                     	;# 
  7005  0115                     	;# 
  7006  0116                     	;# 
  7007  0117                     	;# 
  7008  0118                     	;# 
  7009  0119                     	;# 
  7010  018C                     	;# 
  7011  018D                     	;# 
  7012  018E                     	;# 
  7013  0199                     	;# 
  7014  0199                     	;# 
  7015  0199                     	;# 
  7016  019A                     	;# 
  7017  019A                     	;# 
  7018  019A                     	;# 
  7019  019B                     	;# 
  7020  019B                     	;# 
  7021  019B                     	;# 
  7022  019B                     	;# 
  7023  019B                     	;# 
  7024  019C                     	;# 
  7025  019C                     	;# 
  7026  019C                     	;# 
  7027  019D                     	;# 
  7028  019D                     	;# 
  7029  019D                     	;# 
  7030  019E                     	;# 
  7031  019E                     	;# 
  7032  019E                     	;# 
  7033  019F                     	;# 
  7034  019F                     	;# 
  7035  019F                     	;# 
  7036  019F                     	;# 
  7037  019F                     	;# 
  7038  020C                     	;# 
  7039  020D                     	;# 
  7040  020E                     	;# 
  7041  0211                     	;# 
  7042  0211                     	;# 
  7043  0212                     	;# 
  7044  0212                     	;# 
  7045  0213                     	;# 
  7046  0213                     	;# 
  7047  0214                     	;# 
  7048  0214                     	;# 
  7049  0215                     	;# 
  7050  0215                     	;# 
  7051  0215                     	;# 
  7052  0215                     	;# 
  7053  0216                     	;# 
  7054  0216                     	;# 
  7055  0217                     	;# 
  7056  0217                     	;# 
  7057  0219                     	;# 
  7058  021A                     	;# 
  7059  021B                     	;# 
  7060  021C                     	;# 
  7061  021D                     	;# 
  7062  021D                     	;# 
  7063  021E                     	;# 
  7064  021F                     	;# 
  7065  028C                     	;# 
  7066  028D                     	;# 
  7067  028E                     	;# 
  7068  0291                     	;# 
  7069  0291                     	;# 
  7070  0292                     	;# 
  7071  0293                     	;# 
  7072  0294                     	;# 
  7073  0295                     	;# 
  7074  0295                     	;# 
  7075  0296                     	;# 
  7076  0297                     	;# 
  7077  0298                     	;# 
  7078  029F                     	;# 
  7079  030C                     	;# 
  7080  030D                     	;# 
  7081  030E                     	;# 
  7082  0311                     	;# 
  7083  0311                     	;# 
  7084  0312                     	;# 
  7085  0313                     	;# 
  7086  0314                     	;# 
  7087  0315                     	;# 
  7088  0315                     	;# 
  7089  0316                     	;# 
  7090  0317                     	;# 
  7091  0318                     	;# 
  7092  038C                     	;# 
  7093  038D                     	;# 
  7094  038E                     	;# 
  7095  0391                     	;# 
  7096  0392                     	;# 
  7097  0393                     	;# 
  7098  0394                     	;# 
  7099  0395                     	;# 
  7100  0396                     	;# 
  7101  0397                     	;# 
  7102  0398                     	;# 
  7103  0399                     	;# 
  7104  039A                     	;# 
  7105  039C                     	;# 
  7106  039D                     	;# 
  7107  039E                     	;# 
  7108  039F                     	;# 
  7109  0411                     	;# 
  7110  0411                     	;# 
  7111  0412                     	;# 
  7112  0413                     	;# 
  7113  0414                     	;# 
  7114  0415                     	;# 
  7115  0416                     	;# 
  7116  0417                     	;# 
  7117  0418                     	;# 
  7118  0418                     	;# 
  7119  0419                     	;# 
  7120  041A                     	;# 
  7121  041B                     	;# 
  7122  041C                     	;# 
  7123  041D                     	;# 
  7124  041E                     	;# 
  7125  041F                     	;# 
  7126  0498                     	;# 
  7127  0498                     	;# 
  7128  0499                     	;# 
  7129  049A                     	;# 
  7130  049B                     	;# 
  7131  049B                     	;# 
  7132  049C                     	;# 
  7133  049D                     	;# 
  7134  049E                     	;# 
  7135  049F                     	;# 
  7136  0617                     	;# 
  7137  0618                     	;# 
  7138  0619                     	;# 
  7139  0619                     	;# 
  7140  061A                     	;# 
  7141  061B                     	;# 
  7142  061C                     	;# 
  7143  061C                     	;# 
  7144  061F                     	;# 
  7145  0691                     	;# 
  7146  0692                     	;# 
  7147  0693                     	;# 
  7148  0694                     	;# 
  7149  0695                     	;# 
  7150  0696                     	;# 
  7151  0697                     	;# 
  7152  0698                     	;# 
  7153  0699                     	;# 
  7154  0711                     	;# 
  7155  0712                     	;# 
  7156  0713                     	;# 
  7157  0714                     	;# 
  7158  0715                     	;# 
  7159  0716                     	;# 
  7160  0717                     	;# 
  7161  0718                     	;# 
  7162  0719                     	;# 
  7163  0891                     	;# 
  7164  0891                     	;# 
  7165  0891                     	;# 
  7166  0891                     	;# 
  7167  0891                     	;# 
  7168  0891                     	;# 
  7169  0892                     	;# 
  7170  0892                     	;# 
  7171  0892                     	;# 
  7172  0893                     	;# 
  7173  0893                     	;# 
  7174  0893                     	;# 
  7175  0893                     	;# 
  7176  0893                     	;# 
  7177  0893                     	;# 
  7178  0894                     	;# 
  7179  0894                     	;# 
  7180  0894                     	;# 
  7181  0895                     	;# 
  7182  0895                     	;# 
  7183  0895                     	;# 
  7184  0896                     	;# 
  7185  0896                     	;# 
  7186  0896                     	;# 
  7187  089B                     	;# 
  7188  0911                     	;# 
  7189  0912                     	;# 
  7190  0913                     	;# 
  7191  0914                     	;# 
  7192  0915                     	;# 
  7193  0916                     	;# 
  7194  0918                     	;# 
  7195  0919                     	;# 
  7196  091A                     	;# 
  7197  091B                     	;# 
  7198  091C                     	;# 
  7199  091D                     	;# 
  7200  091E                     	;# 
  7201  091F                     	;# 
  7202  0E0F                     	;# 
  7203  0E10                     	;# 
  7204  0E11                     	;# 
  7205  0E12                     	;# 
  7206  0E13                     	;# 
  7207  0E14                     	;# 
  7208  0E15                     	;# 
  7209  0E16                     	;# 
  7210  0E17                     	;# 
  7211  0E18                     	;# 
  7212  0E19                     	;# 
  7213  0E1A                     	;# 
  7214  0E1B                     	;# 
  7215  0E1C                     	;# 
  7216  0E1D                     	;# 
  7217  0E1E                     	;# 
  7218  0E1F                     	;# 
  7219  0E20                     	;# 
  7220  0E21                     	;# 
  7221  0E22                     	;# 
  7222  0E24                     	;# 
  7223  0E25                     	;# 
  7224  0E28                     	;# 
  7225  0E29                     	;# 
  7226  0E2A                     	;# 
  7227  0E2B                     	;# 
  7228  0E2C                     	;# 
  7229  0E2D                     	;# 
  7230  0E2E                     	;# 
  7231  0E2F                     	;# 
  7232  0E90                     	;# 
  7233  0E91                     	;# 
  7234  0E92                     	;# 
  7235  0E94                     	;# 
  7236  0E95                     	;# 
  7237  0E9C                     	;# 
  7238  0E9D                     	;# 
  7239  0E9E                     	;# 
  7240  0E9F                     	;# 
  7241  0EA0                     	;# 
  7242  0EA1                     	;# 
  7243  0EA2                     	;# 
  7244  0EA3                     	;# 
  7245  0EA4                     	;# 
  7246  0EA5                     	;# 
  7247  0EA6                     	;# 
  7248  0EA7                     	;# 
  7249  0F0F                     	;# 
  7250  0F10                     	;# 
  7251  0F11                     	;# 
  7252  0F12                     	;# 
  7253  0F13                     	;# 
  7254  0F14                     	;# 
  7255  0F15                     	;# 
  7256  0F16                     	;# 
  7257  0F17                     	;# 
  7258  0F18                     	;# 
  7259  0F19                     	;# 
  7260  0F1A                     	;# 
  7261  0F1B                     	;# 
  7262  0F1C                     	;# 
  7263  0F1D                     	;# 
  7264  0F1E                     	;# 
  7265  0F1F                     	;# 
  7266  0F20                     	;# 
  7267  0F21                     	;# 
  7268  0F22                     	;# 
  7269  0F23                     	;# 
  7270  0F24                     	;# 
  7271  0F25                     	;# 
  7272  0F26                     	;# 
  7273  0F27                     	;# 
  7274  0F28                     	;# 
  7275  0F29                     	;# 
  7276  0F2A                     	;# 
  7277  0F2B                     	;# 
  7278  0F2C                     	;# 
  7279  0F2D                     	;# 
  7280  0F2E                     	;# 
  7281  0F2F                     	;# 
  7282  0F30                     	;# 
  7283  0F31                     	;# 
  7284  0F32                     	;# 
  7285  0F33                     	;# 
  7286  0F34                     	;# 
  7287  0F35                     	;# 
  7288  0F36                     	;# 
  7289  0F37                     	;# 
  7290  0FE4                     	;# 
  7291  0FE5                     	;# 
  7292  0FE6                     	;# 
  7293  0FE7                     	;# 
  7294  0FE8                     	;# 
  7295  0FE9                     	;# 
  7296  0FEA                     	;# 
  7297  0FEB                     	;# 
  7298  0FED                     	;# 
  7299  0FEE                     	;# 
  7300  0FEF                     	;# 
  7301  0000                     	;# 
  7302  0001                     	;# 
  7303  0002                     	;# 
  7304  0003                     	;# 
  7305  0004                     	;# 
  7306  0005                     	;# 
  7307  0006                     	;# 
  7308  0007                     	;# 
  7309  0008                     	;# 
  7310  0009                     	;# 
  7311  000A                     	;# 
  7312  000B                     	;# 
  7313  000C                     	;# 
  7314  000D                     	;# 
  7315  000E                     	;# 
  7316  0010                     	;# 
  7317  0011                     	;# 
  7318  0012                     	;# 
  7319  0013                     	;# 
  7320  0014                     	;# 
  7321  0015                     	;# 
  7322  0015                     	;# 
  7323  0016                     	;# 
  7324  0016                     	;# 
  7325  0017                     	;# 
  7326  0018                     	;# 
  7327  0019                     	;# 
  7328  0019                     	;# 
  7329  001A                     	;# 
  7330  001B                     	;# 
  7331  001C                     	;# 
  7332  001D                     	;# 
  7333  001E                     	;# 
  7334  001F                     	;# 
  7335  008C                     	;# 
  7336  008D                     	;# 
  7337  008E                     	;# 
  7338  0090                     	;# 
  7339  0091                     	;# 
  7340  0092                     	;# 
  7341  0093                     	;# 
  7342  0094                     	;# 
  7343  0097                     	;# 
  7344  009B                     	;# 
  7345  009B                     	;# 
  7346  009C                     	;# 
  7347  009D                     	;# 
  7348  009E                     	;# 
  7349  009F                     	;# 
  7350  010C                     	;# 
  7351  010D                     	;# 
  7352  010E                     	;# 
  7353  0111                     	;# 
  7354  0112                     	;# 
  7355  0113                     	;# 
  7356  0114                     	;# 
  7357  0115                     	;# 
  7358  0116                     	;# 
  7359  0117                     	;# 
  7360  0118                     	;# 
  7361  0119                     	;# 
  7362  018C                     	;# 
  7363  018D                     	;# 
  7364  018E                     	;# 
  7365  0199                     	;# 
  7366  0199                     	;# 
  7367  0199                     	;# 
  7368  019A                     	;# 
  7369  019A                     	;# 
  7370  019A                     	;# 
  7371  019B                     	;# 
  7372  019B                     	;# 
  7373  019B                     	;# 
  7374  019B                     	;# 
  7375  019B                     	;# 
  7376  019C                     	;# 
  7377  019C                     	;# 
  7378  019C                     	;# 
  7379  019D                     	;# 
  7380  019D                     	;# 
  7381  019D                     	;# 
  7382  019E                     	;# 
  7383  019E                     	;# 
  7384  019E                     	;# 
  7385  019F                     	;# 
  7386  019F                     	;# 
  7387  019F                     	;# 
  7388  019F                     	;# 
  7389  019F                     	;# 
  7390  020C                     	;# 
  7391  020D                     	;# 
  7392  020E                     	;# 
  7393  0211                     	;# 
  7394  0211                     	;# 
  7395  0212                     	;# 
  7396  0212                     	;# 
  7397  0213                     	;# 
  7398  0213                     	;# 
  7399  0214                     	;# 
  7400  0214                     	;# 
  7401  0215                     	;# 
  7402  0215                     	;# 
  7403  0215                     	;# 
  7404  0215                     	;# 
  7405  0216                     	;# 
  7406  0216                     	;# 
  7407  0217                     	;# 
  7408  0217                     	;# 
  7409  0219                     	;# 
  7410  021A                     	;# 
  7411  021B                     	;# 
  7412  021C                     	;# 
  7413  021D                     	;# 
  7414  021D                     	;# 
  7415  021E                     	;# 
  7416  021F                     	;# 
  7417  028C                     	;# 
  7418  028D                     	;# 
  7419  028E                     	;# 
  7420  0291                     	;# 
  7421  0291                     	;# 
  7422  0292                     	;# 
  7423  0293                     	;# 
  7424  0294                     	;# 
  7425  0295                     	;# 
  7426  0295                     	;# 
  7427  0296                     	;# 
  7428  0297                     	;# 
  7429  0298                     	;# 
  7430  029F                     	;# 
  7431  030C                     	;# 
  7432  030D                     	;# 
  7433  030E                     	;# 
  7434  0311                     	;# 
  7435  0311                     	;# 
  7436  0312                     	;# 
  7437  0313                     	;# 
  7438  0314                     	;# 
  7439  0315                     	;# 
  7440  0315                     	;# 
  7441  0316                     	;# 
  7442  0317                     	;# 
  7443  0318                     	;# 
  7444  038C                     	;# 
  7445  038D                     	;# 
  7446  038E                     	;# 
  7447  0391                     	;# 
  7448  0392                     	;# 
  7449  0393                     	;# 
  7450  0394                     	;# 
  7451  0395                     	;# 
  7452  0396                     	;# 
  7453  0397                     	;# 
  7454  0398                     	;# 
  7455  0399                     	;# 
  7456  039A                     	;# 
  7457  039C                     	;# 
  7458  039D                     	;# 
  7459  039E                     	;# 
  7460  039F                     	;# 
  7461  0411                     	;# 
  7462  0411                     	;# 
  7463  0412                     	;# 
  7464  0413                     	;# 
  7465  0414                     	;# 
  7466  0415                     	;# 
  7467  0416                     	;# 
  7468  0417                     	;# 
  7469  0418                     	;# 
  7470  0418                     	;# 
  7471  0419                     	;# 
  7472  041A                     	;# 
  7473  041B                     	;# 
  7474  041C                     	;# 
  7475  041D                     	;# 
  7476  041E                     	;# 
  7477  041F                     	;# 
  7478  0498                     	;# 
  7479  0498                     	;# 
  7480  0499                     	;# 
  7481  049A                     	;# 
  7482  049B                     	;# 
  7483  049B                     	;# 
  7484  049C                     	;# 
  7485  049D                     	;# 
  7486  049E                     	;# 
  7487  049F                     	;# 
  7488  0617                     	;# 
  7489  0618                     	;# 
  7490  0619                     	;# 
  7491  0619                     	;# 
  7492  061A                     	;# 
  7493  061B                     	;# 
  7494  061C                     	;# 
  7495  061C                     	;# 
  7496  061F                     	;# 
  7497  0691                     	;# 
  7498  0692                     	;# 
  7499  0693                     	;# 
  7500  0694                     	;# 
  7501  0695                     	;# 
  7502  0696                     	;# 
  7503  0697                     	;# 
  7504  0698                     	;# 
  7505  0699                     	;# 
  7506  0711                     	;# 
  7507  0712                     	;# 
  7508  0713                     	;# 
  7509  0714                     	;# 
  7510  0715                     	;# 
  7511  0716                     	;# 
  7512  0717                     	;# 
  7513  0718                     	;# 
  7514  0719                     	;# 
  7515  0891                     	;# 
  7516  0891                     	;# 
  7517  0891                     	;# 
  7518  0891                     	;# 
  7519  0891                     	;# 
  7520  0891                     	;# 
  7521  0892                     	;# 
  7522  0892                     	;# 
  7523  0892                     	;# 
  7524  0893                     	;# 
  7525  0893                     	;# 
  7526  0893                     	;# 
  7527  0893                     	;# 
  7528  0893                     	;# 
  7529  0893                     	;# 
  7530  0894                     	;# 
  7531  0894                     	;# 
  7532  0894                     	;# 
  7533  0895                     	;# 
  7534  0895                     	;# 
  7535  0895                     	;# 
  7536  0896                     	;# 
  7537  0896                     	;# 
  7538  0896                     	;# 
  7539  089B                     	;# 
  7540  0911                     	;# 
  7541  0912                     	;# 
  7542  0913                     	;# 
  7543  0914                     	;# 
  7544  0915                     	;# 
  7545  0916                     	;# 
  7546  0918                     	;# 
  7547  0919                     	;# 
  7548  091A                     	;# 
  7549  091B                     	;# 
  7550  091C                     	;# 
  7551  091D                     	;# 
  7552  091E                     	;# 
  7553  091F                     	;# 
  7554  0E0F                     	;# 
  7555  0E10                     	;# 
  7556  0E11                     	;# 
  7557  0E12                     	;# 
  7558  0E13                     	;# 
  7559  0E14                     	;# 
  7560  0E15                     	;# 
  7561  0E16                     	;# 
  7562  0E17                     	;# 
  7563  0E18                     	;# 
  7564  0E19                     	;# 
  7565  0E1A                     	;# 
  7566  0E1B                     	;# 
  7567  0E1C                     	;# 
  7568  0E1D                     	;# 
  7569  0E1E                     	;# 
  7570  0E1F                     	;# 
  7571  0E20                     	;# 
  7572  0E21                     	;# 
  7573  0E22                     	;# 
  7574  0E24                     	;# 
  7575  0E25                     	;# 
  7576  0E28                     	;# 
  7577  0E29                     	;# 
  7578  0E2A                     	;# 
  7579  0E2B                     	;# 
  7580  0E2C                     	;# 
  7581  0E2D                     	;# 
  7582  0E2E                     	;# 
  7583  0E2F                     	;# 
  7584  0E90                     	;# 
  7585  0E91                     	;# 
  7586  0E92                     	;# 
  7587  0E94                     	;# 
  7588  0E95                     	;# 
  7589  0E9C                     	;# 
  7590  0E9D                     	;# 
  7591  0E9E                     	;# 
  7592  0E9F                     	;# 
  7593  0EA0                     	;# 
  7594  0EA1                     	;# 
  7595  0EA2                     	;# 
  7596  0EA3                     	;# 
  7597  0EA4                     	;# 
  7598  0EA5                     	;# 
  7599  0EA6                     	;# 
  7600  0EA7                     	;# 
  7601  0F0F                     	;# 
  7602  0F10                     	;# 
  7603  0F11                     	;# 
  7604  0F12                     	;# 
  7605  0F13                     	;# 
  7606  0F14                     	;# 
  7607  0F15                     	;# 
  7608  0F16                     	;# 
  7609  0F17                     	;# 
  7610  0F18                     	;# 
  7611  0F19                     	;# 
  7612  0F1A                     	;# 
  7613  0F1B                     	;# 
  7614  0F1C                     	;# 
  7615  0F1D                     	;# 
  7616  0F1E                     	;# 
  7617  0F1F                     	;# 
  7618  0F20                     	;# 
  7619  0F21                     	;# 
  7620  0F22                     	;# 
  7621  0F23                     	;# 
  7622  0F24                     	;# 
  7623  0F25                     	;# 
  7624  0F26                     	;# 
  7625  0F27                     	;# 
  7626  0F28                     	;# 
  7627  0F29                     	;# 
  7628  0F2A                     	;# 
  7629  0F2B                     	;# 
  7630  0F2C                     	;# 
  7631  0F2D                     	;# 
  7632  0F2E                     	;# 
  7633  0F2F                     	;# 
  7634  0F30                     	;# 
  7635  0F31                     	;# 
  7636  0F32                     	;# 
  7637  0F33                     	;# 
  7638  0F34                     	;# 
  7639  0F35                     	;# 
  7640  0F36                     	;# 
  7641  0F37                     	;# 
  7642  0FE4                     	;# 
  7643  0FE5                     	;# 
  7644  0FE6                     	;# 
  7645  0FE7                     	;# 
  7646  0FE8                     	;# 
  7647  0FE9                     	;# 
  7648  0FEA                     	;# 
  7649  0FEB                     	;# 
  7650  0FED                     	;# 
  7651  0FEE                     	;# 
  7652  0FEF                     	;# 
  7653  0000                     	;# 
  7654  0001                     	;# 
  7655  0002                     	;# 
  7656  0003                     	;# 
  7657  0004                     	;# 
  7658  0005                     	;# 
  7659  0006                     	;# 
  7660  0007                     	;# 
  7661  0008                     	;# 
  7662  0009                     	;# 
  7663  000A                     	;# 
  7664  000B                     	;# 
  7665  000C                     	;# 
  7666  000D                     	;# 
  7667  000E                     	;# 
  7668  0010                     	;# 
  7669  0011                     	;# 
  7670  0012                     	;# 
  7671  0013                     	;# 
  7672  0014                     	;# 
  7673  0015                     	;# 
  7674  0015                     	;# 
  7675  0016                     	;# 
  7676  0016                     	;# 
  7677  0017                     	;# 
  7678  0018                     	;# 
  7679  0019                     	;# 
  7680  0019                     	;# 
  7681  001A                     	;# 
  7682  001B                     	;# 
  7683  001C                     	;# 
  7684  001D                     	;# 
  7685  001E                     	;# 
  7686  001F                     	;# 
  7687  008C                     	;# 
  7688  008D                     	;# 
  7689  008E                     	;# 
  7690  0090                     	;# 
  7691  0091                     	;# 
  7692  0092                     	;# 
  7693  0093                     	;# 
  7694  0094                     	;# 
  7695  0097                     	;# 
  7696  009B                     	;# 
  7697  009B                     	;# 
  7698  009C                     	;# 
  7699  009D                     	;# 
  7700  009E                     	;# 
  7701  009F                     	;# 
  7702  010C                     	;# 
  7703  010D                     	;# 
  7704  010E                     	;# 
  7705  0111                     	;# 
  7706  0112                     	;# 
  7707  0113                     	;# 
  7708  0114                     	;# 
  7709  0115                     	;# 
  7710  0116                     	;# 
  7711  0117                     	;# 
  7712  0118                     	;# 
  7713  0119                     	;# 
  7714  018C                     	;# 
  7715  018D                     	;# 
  7716  018E                     	;# 
  7717  0199                     	;# 
  7718  0199                     	;# 
  7719  0199                     	;# 
  7720  019A                     	;# 
  7721  019A                     	;# 
  7722  019A                     	;# 
  7723  019B                     	;# 
  7724  019B                     	;# 
  7725  019B                     	;# 
  7726  019B                     	;# 
  7727  019B                     	;# 
  7728  019C                     	;# 
  7729  019C                     	;# 
  7730  019C                     	;# 
  7731  019D                     	;# 
  7732  019D                     	;# 
  7733  019D                     	;# 
  7734  019E                     	;# 
  7735  019E                     	;# 
  7736  019E                     	;# 
  7737  019F                     	;# 
  7738  019F                     	;# 
  7739  019F                     	;# 
  7740  019F                     	;# 
  7741  019F                     	;# 
  7742  020C                     	;# 
  7743  020D                     	;# 
  7744  020E                     	;# 
  7745  0211                     	;# 
  7746  0211                     	;# 
  7747  0212                     	;# 
  7748  0212                     	;# 
  7749  0213                     	;# 
  7750  0213                     	;# 
  7751  0214                     	;# 
  7752  0214                     	;# 
  7753  0215                     	;# 
  7754  0215                     	;# 
  7755  0215                     	;# 
  7756  0215                     	;# 
  7757  0216                     	;# 
  7758  0216                     	;# 
  7759  0217                     	;# 
  7760  0217                     	;# 
  7761  0219                     	;# 
  7762  021A                     	;# 
  7763  021B                     	;# 
  7764  021C                     	;# 
  7765  021D                     	;# 
  7766  021D                     	;# 
  7767  021E                     	;# 
  7768  021F                     	;# 
  7769  028C                     	;# 
  7770  028D                     	;# 
  7771  028E                     	;# 
  7772  0291                     	;# 
  7773  0291                     	;# 
  7774  0292                     	;# 
  7775  0293                     	;# 
  7776  0294                     	;# 
  7777  0295                     	;# 
  7778  0295                     	;# 
  7779  0296                     	;# 
  7780  0297                     	;# 
  7781  0298                     	;# 
  7782  029F                     	;# 
  7783  030C                     	;# 
  7784  030D                     	;# 
  7785  030E                     	;# 
  7786  0311                     	;# 
  7787  0311                     	;# 
  7788  0312                     	;# 
  7789  0313                     	;# 
  7790  0314                     	;# 
  7791  0315                     	;# 
  7792  0315                     	;# 
  7793  0316                     	;# 
  7794  0317                     	;# 
  7795  0318                     	;# 
  7796  038C                     	;# 
  7797  038D                     	;# 
  7798  038E                     	;# 
  7799  0391                     	;# 
  7800  0392                     	;# 
  7801  0393                     	;# 
  7802  0394                     	;# 
  7803  0395                     	;# 
  7804  0396                     	;# 
  7805  0397                     	;# 
  7806  0398                     	;# 
  7807  0399                     	;# 
  7808  039A                     	;# 
  7809  039C                     	;# 
  7810  039D                     	;# 
  7811  039E                     	;# 
  7812  039F                     	;# 
  7813  0411                     	;# 
  7814  0411                     	;# 
  7815  0412                     	;# 
  7816  0413                     	;# 
  7817  0414                     	;# 
  7818  0415                     	;# 
  7819  0416                     	;# 
  7820  0417                     	;# 
  7821  0418                     	;# 
  7822  0418                     	;# 
  7823  0419                     	;# 
  7824  041A                     	;# 
  7825  041B                     	;# 
  7826  041C                     	;# 
  7827  041D                     	;# 
  7828  041E                     	;# 
  7829  041F                     	;# 
  7830  0498                     	;# 
  7831  0498                     	;# 
  7832  0499                     	;# 
  7833  049A                     	;# 
  7834  049B                     	;# 
  7835  049B                     	;# 
  7836  049C                     	;# 
  7837  049D                     	;# 
  7838  049E                     	;# 
  7839  049F                     	;# 
  7840  0617                     	;# 
  7841  0618                     	;# 
  7842  0619                     	;# 
  7843  0619                     	;# 
  7844  061A                     	;# 
  7845  061B                     	;# 
  7846  061C                     	;# 
  7847  061C                     	;# 
  7848  061F                     	;# 
  7849  0691                     	;# 
  7850  0692                     	;# 
  7851  0693                     	;# 
  7852  0694                     	;# 
  7853  0695                     	;# 
  7854  0696                     	;# 
  7855  0697                     	;# 
  7856  0698                     	;# 
  7857  0699                     	;# 
  7858  0711                     	;# 
  7859  0712                     	;# 
  7860  0713                     	;# 
  7861  0714                     	;# 
  7862  0715                     	;# 
  7863  0716                     	;# 
  7864  0717                     	;# 
  7865  0718                     	;# 
  7866  0719                     	;# 
  7867  0891                     	;# 
  7868  0891                     	;# 
  7869  0891                     	;# 
  7870  0891                     	;# 
  7871  0891                     	;# 
  7872  0891                     	;# 
  7873  0892                     	;# 
  7874  0892                     	;# 
  7875  0892                     	;# 
  7876  0893                     	;# 
  7877  0893                     	;# 
  7878  0893                     	;# 
  7879  0893                     	;# 
  7880  0893                     	;# 
  7881  0893                     	;# 
  7882  0894                     	;# 
  7883  0894                     	;# 
  7884  0894                     	;# 
  7885  0895                     	;# 
  7886  0895                     	;# 
  7887  0895                     	;# 
  7888  0896                     	;# 
  7889  0896                     	;# 
  7890  0896                     	;# 
  7891  089B                     	;# 
  7892  0911                     	;# 
  7893  0912                     	;# 
  7894  0913                     	;# 
  7895  0914                     	;# 
  7896  0915                     	;# 
  7897  0916                     	;# 
  7898  0918                     	;# 
  7899  0919                     	;# 
  7900  091A                     	;# 
  7901  091B                     	;# 
  7902  091C                     	;# 
  7903  091D                     	;# 
  7904  091E                     	;# 
  7905  091F                     	;# 
  7906  0E0F                     	;# 
  7907  0E10                     	;# 
  7908  0E11                     	;# 
  7909  0E12                     	;# 
  7910  0E13                     	;# 
  7911  0E14                     	;# 
  7912  0E15                     	;# 
  7913  0E16                     	;# 
  7914  0E17                     	;# 
  7915  0E18                     	;# 
  7916  0E19                     	;# 
  7917  0E1A                     	;# 
  7918  0E1B                     	;# 
  7919  0E1C                     	;# 
  7920  0E1D                     	;# 
  7921  0E1E                     	;# 
  7922  0E1F                     	;# 
  7923  0E20                     	;# 
  7924  0E21                     	;# 
  7925  0E22                     	;# 
  7926  0E24                     	;# 
  7927  0E25                     	;# 
  7928  0E28                     	;# 
  7929  0E29                     	;# 
  7930  0E2A                     	;# 
  7931  0E2B                     	;# 
  7932  0E2C                     	;# 
  7933  0E2D                     	;# 
  7934  0E2E                     	;# 
  7935  0E2F                     	;# 
  7936  0E90                     	;# 
  7937  0E91                     	;# 
  7938  0E92                     	;# 
  7939  0E94                     	;# 
  7940  0E95                     	;# 
  7941  0E9C                     	;# 
  7942  0E9D                     	;# 
  7943  0E9E                     	;# 
  7944  0E9F                     	;# 
  7945  0EA0                     	;# 
  7946  0EA1                     	;# 
  7947  0EA2                     	;# 
  7948  0EA3                     	;# 
  7949  0EA4                     	;# 
  7950  0EA5                     	;# 
  7951  0EA6                     	;# 
  7952  0EA7                     	;# 
  7953  0F0F                     	;# 
  7954  0F10                     	;# 
  7955  0F11                     	;# 
  7956  0F12                     	;# 
  7957  0F13                     	;# 
  7958  0F14                     	;# 
  7959  0F15                     	;# 
  7960  0F16                     	;# 
  7961  0F17                     	;# 
  7962  0F18                     	;# 
  7963  0F19                     	;# 
  7964  0F1A                     	;# 
  7965  0F1B                     	;# 
  7966  0F1C                     	;# 
  7967  0F1D                     	;# 
  7968  0F1E                     	;# 
  7969  0F1F                     	;# 
  7970  0F20                     	;# 
  7971  0F21                     	;# 
  7972  0F22                     	;# 
  7973  0F23                     	;# 
  7974  0F24                     	;# 
  7975  0F25                     	;# 
  7976  0F26                     	;# 
  7977  0F27                     	;# 
  7978  0F28                     	;# 
  7979  0F29                     	;# 
  7980  0F2A                     	;# 
  7981  0F2B                     	;# 
  7982  0F2C                     	;# 
  7983  0F2D                     	;# 
  7984  0F2E                     	;# 
  7985  0F2F                     	;# 
  7986  0F30                     	;# 
  7987  0F31                     	;# 
  7988  0F32                     	;# 
  7989  0F33                     	;# 
  7990  0F34                     	;# 
  7991  0F35                     	;# 
  7992  0F36                     	;# 
  7993  0F37                     	;# 
  7994  0FE4                     	;# 
  7995  0FE5                     	;# 
  7996  0FE6                     	;# 
  7997  0FE7                     	;# 
  7998  0FE8                     	;# 
  7999  0FE9                     	;# 
  8000  0FEA                     	;# 
  8001  0FEB                     	;# 
  8002  0FED                     	;# 
  8003  0FEE                     	;# 
  8004  0FEF                     	;# 
  8005  0000                     	;# 
  8006  0001                     	;# 
  8007  0002                     	;# 
  8008  0003                     	;# 
  8009  0004                     	;# 
  8010  0005                     	;# 
  8011  0006                     	;# 
  8012  0007                     	;# 
  8013  0008                     	;# 
  8014  0009                     	;# 
  8015  000A                     	;# 
  8016  000B                     	;# 
  8017  000C                     	;# 
  8018  000D                     	;# 
  8019  000E                     	;# 
  8020  0010                     	;# 
  8021  0011                     	;# 
  8022  0012                     	;# 
  8023  0013                     	;# 
  8024  0014                     	;# 
  8025  0015                     	;# 
  8026  0015                     	;# 
  8027  0016                     	;# 
  8028  0016                     	;# 
  8029  0017                     	;# 
  8030  0018                     	;# 
  8031  0019                     	;# 
  8032  0019                     	;# 
  8033  001A                     	;# 
  8034  001B                     	;# 
  8035  001C                     	;# 
  8036  001D                     	;# 
  8037  001E                     	;# 
  8038  001F                     	;# 
  8039  008C                     	;# 
  8040  008D                     	;# 
  8041  008E                     	;# 
  8042  0090                     	;# 
  8043  0091                     	;# 
  8044  0092                     	;# 
  8045  0093                     	;# 
  8046  0094                     	;# 
  8047  0097                     	;# 
  8048  009B                     	;# 
  8049  009B                     	;# 
  8050  009C                     	;# 
  8051  009D                     	;# 
  8052  009E                     	;# 
  8053  009F                     	;# 
  8054  010C                     	;# 
  8055  010D                     	;# 
  8056  010E                     	;# 
  8057  0111                     	;# 
  8058  0112                     	;# 
  8059  0113                     	;# 
  8060  0114                     	;# 
  8061  0115                     	;# 
  8062  0116                     	;# 
  8063  0117                     	;# 
  8064  0118                     	;# 
  8065  0119                     	;# 
  8066  018C                     	;# 
  8067  018D                     	;# 
  8068  018E                     	;# 
  8069  0199                     	;# 
  8070  0199                     	;# 
  8071  0199                     	;# 
  8072  019A                     	;# 
  8073  019A                     	;# 
  8074  019A                     	;# 
  8075  019B                     	;# 
  8076  019B                     	;# 
  8077  019B                     	;# 
  8078  019B                     	;# 
  8079  019B                     	;# 
  8080  019C                     	;# 
  8081  019C                     	;# 
  8082  019C                     	;# 
  8083  019D                     	;# 
  8084  019D                     	;# 
  8085  019D                     	;# 
  8086  019E                     	;# 
  8087  019E                     	;# 
  8088  019E                     	;# 
  8089  019F                     	;# 
  8090  019F                     	;# 
  8091  019F                     	;# 
  8092  019F                     	;# 
  8093  019F                     	;# 
  8094  020C                     	;# 
  8095  020D                     	;# 
  8096  020E                     	;# 
  8097  0211                     	;# 
  8098  0211                     	;# 
  8099  0212                     	;# 
  8100  0212                     	;# 
  8101  0213                     	;# 
  8102  0213                     	;# 
  8103  0214                     	;# 
  8104  0214                     	;# 
  8105  0215                     	;# 
  8106  0215                     	;# 
  8107  0215                     	;# 
  8108  0215                     	;# 
  8109  0216                     	;# 
  8110  0216                     	;# 
  8111  0217                     	;# 
  8112  0217                     	;# 
  8113  0219                     	;# 
  8114  021A                     	;# 
  8115  021B                     	;# 
  8116  021C                     	;# 
  8117  021D                     	;# 
  8118  021D                     	;# 
  8119  021E                     	;# 
  8120  021F                     	;# 
  8121  028C                     	;# 
  8122  028D                     	;# 
  8123  028E                     	;# 
  8124  0291                     	;# 
  8125  0291                     	;# 
  8126  0292                     	;# 
  8127  0293                     	;# 
  8128  0294                     	;# 
  8129  0295                     	;# 
  8130  0295                     	;# 
  8131  0296                     	;# 
  8132  0297                     	;# 
  8133  0298                     	;# 
  8134  029F                     	;# 
  8135  030C                     	;# 
  8136  030D                     	;# 
  8137  030E                     	;# 
  8138  0311                     	;# 
  8139  0311                     	;# 
  8140  0312                     	;# 
  8141  0313                     	;# 
  8142  0314                     	;# 
  8143  0315                     	;# 
  8144  0315                     	;# 
  8145  0316                     	;# 
  8146  0317                     	;# 
  8147  0318                     	;# 
  8148  038C                     	;# 
  8149  038D                     	;# 
  8150  038E                     	;# 
  8151  0391                     	;# 
  8152  0392                     	;# 
  8153  0393                     	;# 
  8154  0394                     	;# 
  8155  0395                     	;# 
  8156  0396                     	;# 
  8157  0397                     	;# 
  8158  0398                     	;# 
  8159  0399                     	;# 
  8160  039A                     	;# 
  8161  039C                     	;# 
  8162  039D                     	;# 
  8163  039E                     	;# 
  8164  039F                     	;# 
  8165  0411                     	;# 
  8166  0411                     	;# 
  8167  0412                     	;# 
  8168  0413                     	;# 
  8169  0414                     	;# 
  8170  0415                     	;# 
  8171  0416                     	;# 
  8172  0417                     	;# 
  8173  0418                     	;# 
  8174  0418                     	;# 
  8175  0419                     	;# 
  8176  041A                     	;# 
  8177  041B                     	;# 
  8178  041C                     	;# 
  8179  041D                     	;# 
  8180  041E                     	;# 
  8181  041F                     	;# 
  8182  0498                     	;# 
  8183  0498                     	;# 
  8184  0499                     	;# 
  8185  049A                     	;# 
  8186  049B                     	;# 
  8187  049B                     	;# 
  8188  049C                     	;# 
  8189  049D                     	;# 
  8190  049E                     	;# 
  8191  049F                     	;# 
  8192  0617                     	;# 
  8193  0618                     	;# 
  8194  0619                     	;# 
  8195  0619                     	;# 
  8196  061A                     	;# 
  8197  061B                     	;# 
  8198  061C                     	;# 
  8199  061C                     	;# 
  8200  061F                     	;# 
  8201  0691                     	;# 
  8202  0692                     	;# 
  8203  0693                     	;# 
  8204  0694                     	;# 
  8205  0695                     	;# 
  8206  0696                     	;# 
  8207  0697                     	;# 
  8208  0698                     	;# 
  8209  0699                     	;# 
  8210  0711                     	;# 
  8211  0712                     	;# 
  8212  0713                     	;# 
  8213  0714                     	;# 
  8214  0715                     	;# 
  8215  0716                     	;# 
  8216  0717                     	;# 
  8217  0718                     	;# 
  8218  0719                     	;# 
  8219  0891                     	;# 
  8220  0891                     	;# 
  8221  0891                     	;# 
  8222  0891                     	;# 
  8223  0891                     	;# 
  8224  0891                     	;# 
  8225  0892                     	;# 
  8226  0892                     	;# 
  8227  0892                     	;# 
  8228  0893                     	;# 
  8229  0893                     	;# 
  8230  0893                     	;# 
  8231  0893                     	;# 
  8232  0893                     	;# 
  8233  0893                     	;# 
  8234  0894                     	;# 
  8235  0894                     	;# 
  8236  0894                     	;# 
  8237  0895                     	;# 
  8238  0895                     	;# 
  8239  0895                     	;# 
  8240  0896                     	;# 
  8241  0896                     	;# 
  8242  0896                     	;# 
  8243  089B                     	;# 
  8244  0911                     	;# 
  8245  0912                     	;# 
  8246  0913                     	;# 
  8247  0914                     	;# 
  8248  0915                     	;# 
  8249  0916                     	;# 
  8250  0918                     	;# 
  8251  0919                     	;# 
  8252  091A                     	;# 
  8253  091B                     	;# 
  8254  091C                     	;# 
  8255  091D                     	;# 
  8256  091E                     	;# 
  8257  091F                     	;# 
  8258  0E0F                     	;# 
  8259  0E10                     	;# 
  8260  0E11                     	;# 
  8261  0E12                     	;# 
  8262  0E13                     	;# 
  8263  0E14                     	;# 
  8264  0E15                     	;# 
  8265  0E16                     	;# 
  8266  0E17                     	;# 
  8267  0E18                     	;# 
  8268  0E19                     	;# 
  8269  0E1A                     	;# 
  8270  0E1B                     	;# 
  8271  0E1C                     	;# 
  8272  0E1D                     	;# 
  8273  0E1E                     	;# 
  8274  0E1F                     	;# 
  8275  0E20                     	;# 
  8276  0E21                     	;# 
  8277  0E22                     	;# 
  8278  0E24                     	;# 
  8279  0E25                     	;# 
  8280  0E28                     	;# 
  8281  0E29                     	;# 
  8282  0E2A                     	;# 
  8283  0E2B                     	;# 
  8284  0E2C                     	;# 
  8285  0E2D                     	;# 
  8286  0E2E                     	;# 
  8287  0E2F                     	;# 
  8288  0E90                     	;# 
  8289  0E91                     	;# 
  8290  0E92                     	;# 
  8291  0E94                     	;# 
  8292  0E95                     	;# 
  8293  0E9C                     	;# 
  8294  0E9D                     	;# 
  8295  0E9E                     	;# 
  8296  0E9F                     	;# 
  8297  0EA0                     	;# 
  8298  0EA1                     	;# 
  8299  0EA2                     	;# 
  8300  0EA3                     	;# 
  8301  0EA4                     	;# 
  8302  0EA5                     	;# 
  8303  0EA6                     	;# 
  8304  0EA7                     	;# 
  8305  0F0F                     	;# 
  8306  0F10                     	;# 
  8307  0F11                     	;# 
  8308  0F12                     	;# 
  8309  0F13                     	;# 
  8310  0F14                     	;# 
  8311  0F15                     	;# 
  8312  0F16                     	;# 
  8313  0F17                     	;# 
  8314  0F18                     	;# 
  8315  0F19                     	;# 
  8316  0F1A                     	;# 
  8317  0F1B                     	;# 
  8318  0F1C                     	;# 
  8319  0F1D                     	;# 
  8320  0F1E                     	;# 
  8321  0F1F                     	;# 
  8322  0F20                     	;# 
  8323  0F21                     	;# 
  8324  0F22                     	;# 
  8325  0F23                     	;# 
  8326  0F24                     	;# 
  8327  0F25                     	;# 
  8328  0F26                     	;# 
  8329  0F27                     	;# 
  8330  0F28                     	;# 
  8331  0F29                     	;# 
  8332  0F2A                     	;# 
  8333  0F2B                     	;# 
  8334  0F2C                     	;# 
  8335  0F2D                     	;# 
  8336  0F2E                     	;# 
  8337  0F2F                     	;# 
  8338  0F30                     	;# 
  8339  0F31                     	;# 
  8340  0F32                     	;# 
  8341  0F33                     	;# 
  8342  0F34                     	;# 
  8343  0F35                     	;# 
  8344  0F36                     	;# 
  8345  0F37                     	;# 
  8346  0FE4                     	;# 
  8347  0FE5                     	;# 
  8348  0FE6                     	;# 
  8349  0FE7                     	;# 
  8350  0FE8                     	;# 
  8351  0FE9                     	;# 
  8352  0FEA                     	;# 
  8353  0FEB                     	;# 
  8354  0FED                     	;# 
  8355  0FEE                     	;# 
  8356  0FEF                     	;# 
  8357  0000                     	;# 
  8358  0001                     	;# 
  8359  0002                     	;# 
  8360  0003                     	;# 
  8361  0004                     	;# 
  8362  0005                     	;# 
  8363  0006                     	;# 
  8364  0007                     	;# 
  8365  0008                     	;# 
  8366  0009                     	;# 
  8367  000A                     	;# 
  8368  000B                     	;# 
  8369  000C                     	;# 
  8370  000D                     	;# 
  8371  000E                     	;# 
  8372  0010                     	;# 
  8373  0011                     	;# 
  8374  0012                     	;# 
  8375  0013                     	;# 
  8376  0014                     	;# 
  8377  0015                     	;# 
  8378  0015                     	;# 
  8379  0016                     	;# 
  8380  0016                     	;# 
  8381  0017                     	;# 
  8382  0018                     	;# 
  8383  0019                     	;# 
  8384  0019                     	;# 
  8385  001A                     	;# 
  8386  001B                     	;# 
  8387  001C                     	;# 
  8388  001D                     	;# 
  8389  001E                     	;# 
  8390  001F                     	;# 
  8391  008C                     	;# 
  8392  008D                     	;# 
  8393  008E                     	;# 
  8394  0090                     	;# 
  8395  0091                     	;# 
  8396  0092                     	;# 
  8397  0093                     	;# 
  8398  0094                     	;# 
  8399  0097                     	;# 
  8400  009B                     	;# 
  8401  009B                     	;# 
  8402  009C                     	;# 
  8403  009D                     	;# 
  8404  009E                     	;# 
  8405  009F                     	;# 
  8406  010C                     	;# 
  8407  010D                     	;# 
  8408  010E                     	;# 
  8409  0111                     	;# 
  8410  0112                     	;# 
  8411  0113                     	;# 
  8412  0114                     	;# 
  8413  0115                     	;# 
  8414  0116                     	;# 
  8415  0117                     	;# 
  8416  0118                     	;# 
  8417  0119                     	;# 
  8418  018C                     	;# 
  8419  018D                     	;# 
  8420  018E                     	;# 
  8421  0199                     	;# 
  8422  0199                     	;# 
  8423  0199                     	;# 
  8424  019A                     	;# 
  8425  019A                     	;# 
  8426  019A                     	;# 
  8427  019B                     	;# 
  8428  019B                     	;# 
  8429  019B                     	;# 
  8430  019B                     	;# 
  8431  019B                     	;# 
  8432  019C                     	;# 
  8433  019C                     	;# 
  8434  019C                     	;# 
  8435  019D                     	;# 
  8436  019D                     	;# 
  8437  019D                     	;# 
  8438  019E                     	;# 
  8439  019E                     	;# 
  8440  019E                     	;# 
  8441  019F                     	;# 
  8442  019F                     	;# 
  8443  019F                     	;# 
  8444  019F                     	;# 
  8445  019F                     	;# 
  8446  020C                     	;# 
  8447  020D                     	;# 
  8448  020E                     	;# 
  8449  0211                     	;# 
  8450  0211                     	;# 
  8451  0212                     	;# 
  8452  0212                     	;# 
  8453  0213                     	;# 
  8454  0213                     	;# 
  8455  0214                     	;# 
  8456  0214                     	;# 
  8457  0215                     	;# 
  8458  0215                     	;# 
  8459  0215                     	;# 
  8460  0215                     	;# 
  8461  0216                     	;# 
  8462  0216                     	;# 
  8463  0217                     	;# 
  8464  0217                     	;# 
  8465  0219                     	;# 
  8466  021A                     	;# 
  8467  021B                     	;# 
  8468  021C                     	;# 
  8469  021D                     	;# 
  8470  021D                     	;# 
  8471  021E                     	;# 
  8472  021F                     	;# 
  8473  028C                     	;# 
  8474  028D                     	;# 
  8475  028E                     	;# 
  8476  0291                     	;# 
  8477  0291                     	;# 
  8478  0292                     	;# 
  8479  0293                     	;# 
  8480  0294                     	;# 
  8481  0295                     	;# 
  8482  0295                     	;# 
  8483  0296                     	;# 
  8484  0297                     	;# 
  8485  0298                     	;# 
  8486  029F                     	;# 
  8487  030C                     	;# 
  8488  030D                     	;# 
  8489  030E                     	;# 
  8490  0311                     	;# 
  8491  0311                     	;# 
  8492  0312                     	;# 
  8493  0313                     	;# 
  8494  0314                     	;# 
  8495  0315                     	;# 
  8496  0315                     	;# 
  8497  0316                     	;# 
  8498  0317                     	;# 
  8499  0318                     	;# 
  8500  038C                     	;# 
  8501  038D                     	;# 
  8502  038E                     	;# 
  8503  0391                     	;# 
  8504  0392                     	;# 
  8505  0393                     	;# 
  8506  0394                     	;# 
  8507  0395                     	;# 
  8508  0396                     	;# 
  8509  0397                     	;# 
  8510  0398                     	;# 
  8511  0399                     	;# 
  8512  039A                     	;# 
  8513  039C                     	;# 
  8514  039D                     	;# 
  8515  039E                     	;# 
  8516  039F                     	;# 
  8517  0411                     	;# 
  8518  0411                     	;# 
  8519  0412                     	;# 
  8520  0413                     	;# 
  8521  0414                     	;# 
  8522  0415                     	;# 
  8523  0416                     	;# 
  8524  0417                     	;# 
  8525  0418                     	;# 
  8526  0418                     	;# 
  8527  0419                     	;# 
  8528  041A                     	;# 
  8529  041B                     	;# 
  8530  041C                     	;# 
  8531  041D                     	;# 
  8532  041E                     	;# 
  8533  041F                     	;# 
  8534  0498                     	;# 
  8535  0498                     	;# 
  8536  0499                     	;# 
  8537  049A                     	;# 
  8538  049B                     	;# 
  8539  049B                     	;# 
  8540  049C                     	;# 
  8541  049D                     	;# 
  8542  049E                     	;# 
  8543  049F                     	;# 
  8544  0617                     	;# 
  8545  0618                     	;# 
  8546  0619                     	;# 
  8547  0619                     	;# 
  8548  061A                     	;# 
  8549  061B                     	;# 
  8550  061C                     	;# 
  8551  061C                     	;# 
  8552  061F                     	;# 
  8553  0691                     	;# 
  8554  0692                     	;# 
  8555  0693                     	;# 
  8556  0694                     	;# 
  8557  0695                     	;# 
  8558  0696                     	;# 
  8559  0697                     	;# 
  8560  0698                     	;# 
  8561  0699                     	;# 
  8562  0711                     	;# 
  8563  0712                     	;# 
  8564  0713                     	;# 
  8565  0714                     	;# 
  8566  0715                     	;# 
  8567  0716                     	;# 
  8568  0717                     	;# 
  8569  0718                     	;# 
  8570  0719                     	;# 
  8571  0891                     	;# 
  8572  0891                     	;# 
  8573  0891                     	;# 
  8574  0891                     	;# 
  8575  0891                     	;# 
  8576  0891                     	;# 
  8577  0892                     	;# 
  8578  0892                     	;# 
  8579  0892                     	;# 
  8580  0893                     	;# 
  8581  0893                     	;# 
  8582  0893                     	;# 
  8583  0893                     	;# 
  8584  0893                     	;# 
  8585  0893                     	;# 
  8586  0894                     	;# 
  8587  0894                     	;# 
  8588  0894                     	;# 
  8589  0895                     	;# 
  8590  0895                     	;# 
  8591  0895                     	;# 
  8592  0896                     	;# 
  8593  0896                     	;# 
  8594  0896                     	;# 
  8595  089B                     	;# 
  8596  0911                     	;# 
  8597  0912                     	;# 
  8598  0913                     	;# 
  8599  0914                     	;# 
  8600  0915                     	;# 
  8601  0916                     	;# 
  8602  0918                     	;# 
  8603  0919                     	;# 
  8604  091A                     	;# 
  8605  091B                     	;# 
  8606  091C                     	;# 
  8607  091D                     	;# 
  8608  091E                     	;# 
  8609  091F                     	;# 
  8610  0E0F                     	;# 
  8611  0E10                     	;# 
  8612  0E11                     	;# 
  8613  0E12                     	;# 
  8614  0E13                     	;# 
  8615  0E14                     	;# 
  8616  0E15                     	;# 
  8617  0E16                     	;# 
  8618  0E17                     	;# 
  8619  0E18                     	;# 
  8620  0E19                     	;# 
  8621  0E1A                     	;# 
  8622  0E1B                     	;# 
  8623  0E1C                     	;# 
  8624  0E1D                     	;# 
  8625  0E1E                     	;# 
  8626  0E1F                     	;# 
  8627  0E20                     	;# 
  8628  0E21                     	;# 
  8629  0E22                     	;# 
  8630  0E24                     	;# 
  8631  0E25                     	;# 
  8632  0E28                     	;# 
  8633  0E29                     	;# 
  8634  0E2A                     	;# 
  8635  0E2B                     	;# 
  8636  0E2C                     	;# 
  8637  0E2D                     	;# 
  8638  0E2E                     	;# 
  8639  0E2F                     	;# 
  8640  0E90                     	;# 
  8641  0E91                     	;# 
  8642  0E92                     	;# 
  8643  0E94                     	;# 
  8644  0E95                     	;# 
  8645  0E9C                     	;# 
  8646  0E9D                     	;# 
  8647  0E9E                     	;# 
  8648  0E9F                     	;# 
  8649  0EA0                     	;# 
  8650  0EA1                     	;# 
  8651  0EA2                     	;# 
  8652  0EA3                     	;# 
  8653  0EA4                     	;# 
  8654  0EA5                     	;# 
  8655  0EA6                     	;# 
  8656  0EA7                     	;# 
  8657  0F0F                     	;# 
  8658  0F10                     	;# 
  8659  0F11                     	;# 
  8660  0F12                     	;# 
  8661  0F13                     	;# 
  8662  0F14                     	;# 
  8663  0F15                     	;# 
  8664  0F16                     	;# 
  8665  0F17                     	;# 
  8666  0F18                     	;# 
  8667  0F19                     	;# 
  8668  0F1A                     	;# 
  8669  0F1B                     	;# 
  8670  0F1C                     	;# 
  8671  0F1D                     	;# 
  8672  0F1E                     	;# 
  8673  0F1F                     	;# 
  8674  0F20                     	;# 
  8675  0F21                     	;# 
  8676  0F22                     	;# 
  8677  0F23                     	;# 
  8678  0F24                     	;# 
  8679  0F25                     	;# 
  8680  0F26                     	;# 
  8681  0F27                     	;# 
  8682  0F28                     	;# 
  8683  0F29                     	;# 
  8684  0F2A                     	;# 
  8685  0F2B                     	;# 
  8686  0F2C                     	;# 
  8687  0F2D                     	;# 
  8688  0F2E                     	;# 
  8689  0F2F                     	;# 
  8690  0F30                     	;# 
  8691  0F31                     	;# 
  8692  0F32                     	;# 
  8693  0F33                     	;# 
  8694  0F34                     	;# 
  8695  0F35                     	;# 
  8696  0F36                     	;# 
  8697  0F37                     	;# 
  8698  0FE4                     	;# 
  8699  0FE5                     	;# 
  8700  0FE6                     	;# 
  8701  0FE7                     	;# 
  8702  0FE8                     	;# 
  8703  0FE9                     	;# 
  8704  0FEA                     	;# 
  8705  0FEB                     	;# 
  8706  0FED                     	;# 
  8707  0FEE                     	;# 
  8708  0FEF                     	;# 
  8709  0000                     	;# 
  8710  0001                     	;# 
  8711  0002                     	;# 
  8712  0003                     	;# 
  8713  0004                     	;# 
  8714  0005                     	;# 
  8715  0006                     	;# 
  8716  0007                     	;# 
  8717  0008                     	;# 
  8718  0009                     	;# 
  8719  000A                     	;# 
  8720  000B                     	;# 
  8721  000C                     	;# 
  8722  000D                     	;# 
  8723  000E                     	;# 
  8724  0010                     	;# 
  8725  0011                     	;# 
  8726  0012                     	;# 
  8727  0013                     	;# 
  8728  0014                     	;# 
  8729  0015                     	;# 
  8730  0015                     	;# 
  8731  0016                     	;# 
  8732  0016                     	;# 
  8733  0017                     	;# 
  8734  0018                     	;# 
  8735  0019                     	;# 
  8736  0019                     	;# 
  8737  001A                     	;# 
  8738  001B                     	;# 
  8739  001C                     	;# 
  8740  001D                     	;# 
  8741  001E                     	;# 
  8742  001F                     	;# 
  8743  008C                     	;# 
  8744  008D                     	;# 
  8745  008E                     	;# 
  8746  0090                     	;# 
  8747  0091                     	;# 
  8748  0092                     	;# 
  8749  0093                     	;# 
  8750  0094                     	;# 
  8751  0097                     	;# 
  8752  009B                     	;# 
  8753  009B                     	;# 
  8754  009C                     	;# 
  8755  009D                     	;# 
  8756  009E                     	;# 
  8757  009F                     	;# 
  8758  010C                     	;# 
  8759  010D                     	;# 
  8760  010E                     	;# 
  8761  0111                     	;# 
  8762  0112                     	;# 
  8763  0113                     	;# 
  8764  0114                     	;# 
  8765  0115                     	;# 
  8766  0116                     	;# 
  8767  0117                     	;# 
  8768  0118                     	;# 
  8769  0119                     	;# 
  8770  018C                     	;# 
  8771  018D                     	;# 
  8772  018E                     	;# 
  8773  0199                     	;# 
  8774  0199                     	;# 
  8775  0199                     	;# 
  8776  019A                     	;# 
  8777  019A                     	;# 
  8778  019A                     	;# 
  8779  019B                     	;# 
  8780  019B                     	;# 
  8781  019B                     	;# 
  8782  019B                     	;# 
  8783  019B                     	;# 
  8784  019C                     	;# 
  8785  019C                     	;# 
  8786  019C                     	;# 
  8787  019D                     	;# 
  8788  019D                     	;# 
  8789  019D                     	;# 
  8790  019E                     	;# 
  8791  019E                     	;# 
  8792  019E                     	;# 
  8793  019F                     	;# 
  8794  019F                     	;# 
  8795  019F                     	;# 
  8796  019F                     	;# 
  8797  019F                     	;# 
  8798  020C                     	;# 
  8799  020D                     	;# 
  8800  020E                     	;# 
  8801  0211                     	;# 
  8802  0211                     	;# 
  8803  0212                     	;# 
  8804  0212                     	;# 
  8805  0213                     	;# 
  8806  0213                     	;# 
  8807  0214                     	;# 
  8808  0214                     	;# 
  8809  0215                     	;# 
  8810  0215                     	;# 
  8811  0215                     	;# 
  8812  0215                     	;# 
  8813  0216                     	;# 
  8814  0216                     	;# 
  8815  0217                     	;# 
  8816  0217                     	;# 
  8817  0219                     	;# 
  8818  021A                     	;# 
  8819  021B                     	;# 
  8820  021C                     	;# 
  8821  021D                     	;# 
  8822  021D                     	;# 
  8823  021E                     	;# 
  8824  021F                     	;# 
  8825  028C                     	;# 
  8826  028D                     	;# 
  8827  028E                     	;# 
  8828  0291                     	;# 
  8829  0291                     	;# 
  8830  0292                     	;# 
  8831  0293                     	;# 
  8832  0294                     	;# 
  8833  0295                     	;# 
  8834  0295                     	;# 
  8835  0296                     	;# 
  8836  0297                     	;# 
  8837  0298                     	;# 
  8838  029F                     	;# 
  8839  030C                     	;# 
  8840  030D                     	;# 
  8841  030E                     	;# 
  8842  0311                     	;# 
  8843  0311                     	;# 
  8844  0312                     	;# 
  8845  0313                     	;# 
  8846  0314                     	;# 
  8847  0315                     	;# 
  8848  0315                     	;# 
  8849  0316                     	;# 
  8850  0317                     	;# 
  8851  0318                     	;# 
  8852  038C                     	;# 
  8853  038D                     	;# 
  8854  038E                     	;# 
  8855  0391                     	;# 
  8856  0392                     	;# 
  8857  0393                     	;# 
  8858  0394                     	;# 
  8859  0395                     	;# 
  8860  0396                     	;# 
  8861  0397                     	;# 
  8862  0398                     	;# 
  8863  0399                     	;# 
  8864  039A                     	;# 
  8865  039C                     	;# 
  8866  039D                     	;# 
  8867  039E                     	;# 
  8868  039F                     	;# 
  8869  0411                     	;# 
  8870  0411                     	;# 
  8871  0412                     	;# 
  8872  0413                     	;# 
  8873  0414                     	;# 
  8874  0415                     	;# 
  8875  0416                     	;# 
  8876  0417                     	;# 
  8877  0418                     	;# 
  8878  0418                     	;# 
  8879  0419                     	;# 
  8880  041A                     	;# 
  8881  041B                     	;# 
  8882  041C                     	;# 
  8883  041D                     	;# 
  8884  041E                     	;# 
  8885  041F                     	;# 
  8886  0498                     	;# 
  8887  0498                     	;# 
  8888  0499                     	;# 
  8889  049A                     	;# 
  8890  049B                     	;# 
  8891  049B                     	;# 
  8892  049C                     	;# 
  8893  049D                     	;# 
  8894  049E                     	;# 
  8895  049F                     	;# 
  8896  0617                     	;# 
  8897  0618                     	;# 
  8898  0619                     	;# 
  8899  0619                     	;# 
  8900  061A                     	;# 
  8901  061B                     	;# 
  8902  061C                     	;# 
  8903  061C                     	;# 
  8904  061F                     	;# 
  8905  0691                     	;# 
  8906  0692                     	;# 
  8907  0693                     	;# 
  8908  0694                     	;# 
  8909  0695                     	;# 
  8910  0696                     	;# 
  8911  0697                     	;# 
  8912  0698                     	;# 
  8913  0699                     	;# 
  8914  0711                     	;# 
  8915  0712                     	;# 
  8916  0713                     	;# 
  8917  0714                     	;# 
  8918  0715                     	;# 
  8919  0716                     	;# 
  8920  0717                     	;# 
  8921  0718                     	;# 
  8922  0719                     	;# 
  8923  0891                     	;# 
  8924  0891                     	;# 
  8925  0891                     	;# 
  8926  0891                     	;# 
  8927  0891                     	;# 
  8928  0891                     	;# 
  8929  0892                     	;# 
  8930  0892                     	;# 
  8931  0892                     	;# 
  8932  0893                     	;# 
  8933  0893                     	;# 
  8934  0893                     	;# 
  8935  0893                     	;# 
  8936  0893                     	;# 
  8937  0893                     	;# 
  8938  0894                     	;# 
  8939  0894                     	;# 
  8940  0894                     	;# 
  8941  0895                     	;# 
  8942  0895                     	;# 
  8943  0895                     	;# 
  8944  0896                     	;# 
  8945  0896                     	;# 
  8946  0896                     	;# 
  8947  089B                     	;# 
  8948  0911                     	;# 
  8949  0912                     	;# 
  8950  0913                     	;# 
  8951  0914                     	;# 
  8952  0915                     	;# 
  8953  0916                     	;# 
  8954  0918                     	;# 
  8955  0919                     	;# 
  8956  091A                     	;# 
  8957  091B                     	;# 
  8958  091C                     	;# 
  8959  091D                     	;# 
  8960  091E                     	;# 
  8961  091F                     	;# 
  8962  0E0F                     	;# 
  8963  0E10                     	;# 
  8964  0E11                     	;# 
  8965  0E12                     	;# 
  8966  0E13                     	;# 
  8967  0E14                     	;# 
  8968  0E15                     	;# 
  8969  0E16                     	;# 
  8970  0E17                     	;# 
  8971  0E18                     	;# 
  8972  0E19                     	;# 
  8973  0E1A                     	;# 
  8974  0E1B                     	;# 
  8975  0E1C                     	;# 
  8976  0E1D                     	;# 
  8977  0E1E                     	;# 
  8978  0E1F                     	;# 
  8979  0E20                     	;# 
  8980  0E21                     	;# 
  8981  0E22                     	;# 
  8982  0E24                     	;# 
  8983  0E25                     	;# 
  8984  0E28                     	;# 
  8985  0E29                     	;# 
  8986  0E2A                     	;# 
  8987  0E2B                     	;# 
  8988  0E2C                     	;# 
  8989  0E2D                     	;# 
  8990  0E2E                     	;# 
  8991  0E2F                     	;# 
  8992  0E90                     	;# 
  8993  0E91                     	;# 
  8994  0E92                     	;# 
  8995  0E94                     	;# 
  8996  0E95                     	;# 
  8997  0E9C                     	;# 
  8998  0E9D                     	;# 
  8999  0E9E                     	;# 
  9000  0E9F                     	;# 
  9001  0EA0                     	;# 
  9002  0EA1                     	;# 
  9003  0EA2                     	;# 
  9004  0EA3                     	;# 
  9005  0EA4                     	;# 
  9006  0EA5                     	;# 
  9007  0EA6                     	;# 
  9008  0EA7                     	;# 
  9009  0F0F                     	;# 
  9010  0F10                     	;# 
  9011  0F11                     	;# 
  9012  0F12                     	;# 
  9013  0F13                     	;# 
  9014  0F14                     	;# 
  9015  0F15                     	;# 
  9016  0F16                     	;# 
  9017  0F17                     	;# 
  9018  0F18                     	;# 
  9019  0F19                     	;# 
  9020  0F1A                     	;# 
  9021  0F1B                     	;# 
  9022  0F1C                     	;# 
  9023  0F1D                     	;# 
  9024  0F1E                     	;# 
  9025  0F1F                     	;# 
  9026  0F20                     	;# 
  9027  0F21                     	;# 
  9028  0F22                     	;# 
  9029  0F23                     	;# 
  9030  0F24                     	;# 
  9031  0F25                     	;# 
  9032  0F26                     	;# 
  9033  0F27                     	;# 
  9034  0F28                     	;# 
  9035  0F29                     	;# 
  9036  0F2A                     	;# 
  9037  0F2B                     	;# 
  9038  0F2C                     	;# 
  9039  0F2D                     	;# 
  9040  0F2E                     	;# 
  9041  0F2F                     	;# 
  9042  0F30                     	;# 
  9043  0F31                     	;# 
  9044  0F32                     	;# 
  9045  0F33                     	;# 
  9046  0F34                     	;# 
  9047  0F35                     	;# 
  9048  0F36                     	;# 
  9049  0F37                     	;# 
  9050  0FE4                     	;# 
  9051  0FE5                     	;# 
  9052  0FE6                     	;# 
  9053  0FE7                     	;# 
  9054  0FE8                     	;# 
  9055  0FE9                     	;# 
  9056  0FEA                     	;# 
  9057  0FEB                     	;# 
  9058  0FED                     	;# 
  9059  0FEE                     	;# 
  9060  0FEF                     	;_asciiCharTableLookup
  9061                           
  9062 ;; Function _menu_Exit is unused but had its address taken
  9063  0000                     
  9064 ;; Function _flashy_Exit is unused but had its address taken
  9065  0000                     
  9066 ;; Function _locked_Exit is unused but had its address taken
  9067  0000                     
  9068 ;; Function _secret_Exit is unused but had its address taken
  9069  0000                     
  9070 ;; Function _slot_Exit is unused but had its address taken
  9071  0000                     
  9072 ;; Function _matrix_Exit is unused but had its address taken
  9073  0000                     
  9074                           	psect	idataBANK1
  9075  35D8                     __pidataBANK1:	
  9076                           
  9077                           ;initializer for _locked_locking_leds
  9078  35D8  3400               	retlw	0
  9079  35D9  3400               	retlw	0
  9080  35DA  3420               	retlw	32
  9081  35DB  3400               	retlw	0
  9082  35DC  3460               	retlw	96
  9083  35DD  3400               	retlw	0
  9084  35DE  34E0               	retlw	224
  9085  35DF  3400               	retlw	0
  9086  35E0  34E0               	retlw	224
  9087  35E1  3401               	retlw	1
  9088  35E2  34E0               	retlw	224
  9089  35E3  3403               	retlw	3
  9090                           
  9091                           ;initializer for _randx
  9092  35E4  3401               	retlw	1
  9093  35E5  3400               	retlw	0
  9094  35E6  3400               	retlw	0
  9095  35E7  3400               	retlw	0
  9096                           
  9097                           ;initializer for _Leds_idx
  9098  35E8  3401               	retlw	1
  9099  35E9  3400               	retlw	0
  9100                           
  9101                           ;initializer for _locked_lock_base_leds
  9102  35EA  341F               	retlw	31
  9103  35EB  34F8               	retlw	248
  9104                           
  9105                           ;initializer for _FLASHY_TEXT_SECRET_TEST
  9106  35EC  34E8               	retlw	low (STR_10| (0+32768))
  9107  35ED  34B9               	retlw	high (STR_10| (0+32768))
  9108                           
  9109                           	psect	idataBANK2
  9110  0002                     __pidataBANK2:	
  9111                           
  9112                           ;initializer for _FLASHY_TEXT
  9113  0002  348D               	retlw	low (STR_9| (0+32768))
  9114  0003  34BB               	retlw	high (STR_9| (0+32768))
  9115                           
  9116                           	psect	idataBANK3
  9117  3656                     __pidataBANK3:	
  9118                           
  9119                           ;initializer for _Shot_Options
  9120  3656  3474               	retlw	low (STR_46| (0+32768))
  9121  3657  34BB               	retlw	high (STR_46| (0+32768))
  9122  3658  346A               	retlw	low (STR_47| (0+32768))
  9123  3659  34BB               	retlw	high (STR_47| (0+32768))
  9124  365A  3451               	retlw	low (STR_48| (0+32768))
  9125  365B  34BB               	retlw	high (STR_48| (0+32768))
  9126  365C  3479               	retlw	low (STR_49| (0+32768))
  9127  365D  34BB               	retlw	high (STR_49| (0+32768))
  9128  365E  3456               	retlw	low (STR_50| (0+32768))
  9129  365F  34BB               	retlw	high (STR_50| (0+32768))
  9130  3660  3460               	retlw	low (STR_51| (0+32768))
  9131  3661  34BB               	retlw	high (STR_51| (0+32768))
  9132  3662  3465               	retlw	low (STR_52| (0+32768))
  9133  3663  34BB               	retlw	high (STR_52| (0+32768))
  9134  3664  345B               	retlw	low (STR_53| (0+32768))
  9135  3665  34BB               	retlw	high (STR_53| (0+32768))
  9136  3666  346F               	retlw	low (STR_54| (0+32768))
  9137  3667  34BB               	retlw	high (STR_54| (0+32768))
  9138                           
  9139                           ;initializer for marquee@F14098
  9140  3668  3420               	retlw	32
  9141  3669  3420               	retlw	32
  9142  366A  3420               	retlw	32
  9143  366B  3420               	retlw	32
  9144  366C  3400               	retlw	0
  9145                           
  9146                           ;initializer for marquee_speedy@F14089
  9147  366D  3420               	retlw	32
  9148  366E  3420               	retlw	32
  9149  366F  3420               	retlw	32
  9150  3670  3420               	retlw	32
  9151  3671  3400               	retlw	0
  9152                           
  9153                           	psect	idataBANK4
  9154  2C16                     __pidataBANK4:	
  9155                           
  9156                           ;initializer for _menu_options_leds
  9157  2C16  3400               	retlw	0
  9158  2C17  3402               	retlw	2
  9159  2C18  3400               	retlw	0
  9160  2C19  3401               	retlw	1
  9161  2C1A  3480               	retlw	128
  9162  2C1B  3400               	retlw	0
  9163  2C1C  3440               	retlw	64
  9164  2C1D  3400               	retlw	0
  9165  2C1E  3420               	retlw	32
  9166  2C1F  3400               	retlw	0
  9167                           
  9168                           ;initializer for _menu_option
  9169  2C20  3492               	retlw	low (STR_4| (0+32768))
  9170  2C21  34BB               	retlw	high (STR_4| (0+32768))
  9171  2C22  3446               	retlw	low (STR_5| (0+32768))
  9172  2C23  34BB               	retlw	high (STR_5| (0+32768))
  9173  2C24  349A               	retlw	low (STR_6| (0+32768))
  9174  2C25  34BA               	retlw	high (STR_6| (0+32768))
  9175  2C26  3409               	retlw	low (STR_7| (0+32768))
  9176  2C27  34BB               	retlw	high (STR_7| (0+32768))
  9177  2C28  3440               	retlw	low (STR_8| (0+32768))
  9178  2C29  34BB               	retlw	high (STR_8| (0+32768))
  9179                           
  9180                           ;initializer for _matrix_secret_inputs
  9181  2C2A  3401               	retlw	1
  9182  2C2B  3408               	retlw	8
  9183  2C2C  3402               	retlw	2
  9184  2C2D  3404               	retlw	4
  9185  2C2E  3405               	retlw	5
  9186  2C2F  3409               	retlw	9
  9187  2C30  3403               	retlw	3
  9188  2C31  3400               	retlw	0
  9189  2C32  3400               	retlw	0
  9190  2C33  3400               	retlw	0
  9191  2C34  3400               	retlw	0
  9192  2C35  3400               	retlw	0
  9193  2C36  3400               	retlw	0
  9194  2C37  3400               	retlw	0
  9195  2C38  3400               	retlw	0
  9196  2C39  3400               	retlw	0
  9197  2C3A  3400               	retlw	0
  9198  2C3B  3400               	retlw	0
  9199  2C3C  3400               	retlw	0
  9200  2C3D  3400               	retlw	0
  9201  2C3E  3400               	retlw	0
  9202  2C3F  3400               	retlw	0
  9203  2C40  34C5               	retlw	low (_secret_value| 0)
  9204  2C41  3401               	retlw	1
  9205  2C42  3400               	retlw	0
  9206                           
  9207                           ;initializer for _secret_inputs
  9208  2C43  3401               	retlw	1
  9209  2C44  3401               	retlw	1
  9210  2C45  3402               	retlw	2
  9211  2C46  3402               	retlw	2
  9212  2C47  3401               	retlw	1
  9213  2C48  3402               	retlw	2
  9214  2C49  3401               	retlw	1
  9215  2C4A  3402               	retlw	2
  9216  2C4B  3404               	retlw	4
  9217  2C4C  3408               	retlw	8
  9218  2C4D  3400               	retlw	0
  9219  2C4E  3400               	retlw	0
  9220  2C4F  3400               	retlw	0
  9221  2C50  3400               	retlw	0
  9222  2C51  3400               	retlw	0
  9223  2C52  3400               	retlw	0
  9224  2C53  3400               	retlw	0
  9225  2C54  3400               	retlw	0
  9226  2C55  3400               	retlw	0
  9227  2C56  3400               	retlw	0
  9228  2C57  3400               	retlw	0
  9229  2C58  3400               	retlw	0
  9230  2C59  34C5               	retlw	low (_secret_value| 0)
  9231  2C5A  3401               	retlw	1
  9232  2C5B  3400               	retlw	0
  9233                           
  9234                           	psect	idataBANK5
  9235  3754                     __pidataBANK5:	
  9236                           
  9237                           ;initializer for _matrix_option
  9238  3754  342D               	retlw	low (STR_70| (0+32768))
  9239  3755  34BB               	retlw	high (STR_70| (0+32768))
  9240  3756  3418               	retlw	low (STR_71| (0+32768))
  9241  3757  34BB               	retlw	high (STR_71| (0+32768))
  9242  3758  34A4               	retlw	low (STR_72| (0+32768))
  9243  3759  34BA               	retlw	high (STR_72| (0+32768))
  9244  375A  341F               	retlw	low (STR_73| (0+32768))
  9245  375B  34BB               	retlw	high (STR_73| (0+32768))
  9246  375C  344C               	retlw	low (STR_74| (0+32768))
  9247  375D  34BB               	retlw	high (STR_74| (0+32768))
  9248  375E  3490               	retlw	low (STR_75| (0+32768))
  9249  375F  34BA               	retlw	high (STR_75| (0+32768))
  9250  3760  3434               	retlw	low (STR_76| (0+32768))
  9251  3761  34BB               	retlw	high (STR_76| (0+32768))
  9252  3762  34D1               	retlw	low (STR_77| (0+32768))
  9253  3763  34BA               	retlw	high (STR_77| (0+32768))
  9254  3764  3426               	retlw	low (STR_78| (0+32768))
  9255  3765  34BB               	retlw	high (STR_78| (0+32768))
  9256  3766  34D9               	retlw	low (STR_79| (0+32768))
  9257  3767  34BA               	retlw	high (STR_79| (0+32768))
  9258                           
  9259                           ;initializer for _Shot_Options_Long
  9260  3768  34F1               	retlw	low (STR_55| (0+32768))
  9261  3769  34BA               	retlw	high (STR_55| (0+32768))
  9262  376A  34E9               	retlw	low (STR_56| (0+32768))
  9263  376B  34BA               	retlw	high (STR_56| (0+32768))
  9264  376C  34AD               	retlw	low (STR_57| (0+32768))
  9265  376D  34BA               	retlw	high (STR_57| (0+32768))
  9266  376E  3485               	retlw	low (STR_58| (0+32768))
  9267  376F  34BA               	retlw	high (STR_58| (0+32768))
  9268  3770  347A               	retlw	low (STR_59| (0+32768))
  9269  3771  34BA               	retlw	high (STR_59| (0+32768))
  9270  3772  34E1               	retlw	low (STR_60| (0+32768))
  9271  3773  34BA               	retlw	high (STR_60| (0+32768))
  9272  3774  3462               	retlw	low (STR_61| (0+32768))
  9273  3775  34BA               	retlw	high (STR_61| (0+32768))
  9274  3776  343B               	retlw	low (STR_62| (0+32768))
  9275  3777  34BA               	retlw	high (STR_62| (0+32768))
  9276  3778  34B6               	retlw	low (STR_63| (0+32768))
  9277  3779  34BA               	retlw	high (STR_63| (0+32768))
  9278                           
  9279                           	psect	idataBANK6
  9280  296E                     __pidataBANK6:	
  9281                           
  9282                           ;initializer for _Slot_Wheel
  9283  296E  3441               	retlw	65
  9284  296F  3442               	retlw	66
  9285  2970  3443               	retlw	67
  9286  2971  3444               	retlw	68
  9287  2972  3445               	retlw	69
  9288  2973  3446               	retlw	70
  9289  2974  3447               	retlw	71
  9290  2975  3448               	retlw	72
  9291  2976  3449               	retlw	73
  9292  2977  344A               	retlw	74
  9293  2978  344B               	retlw	75
  9294  2979  344C               	retlw	76
  9295  297A  344D               	retlw	77
  9296  297B  344E               	retlw	78
  9297  297C  344F               	retlw	79
  9298  297D  3450               	retlw	80
  9299  297E  3451               	retlw	81
  9300  297F  3452               	retlw	82
  9301  2980  3453               	retlw	83
  9302  2981  3454               	retlw	84
  9303  2982  3455               	retlw	85
  9304  2983  3456               	retlw	86
  9305  2984  3457               	retlw	87
  9306  2985  3458               	retlw	88
  9307  2986  3459               	retlw	89
  9308  2987  345A               	retlw	90
  9309  2988  3430               	retlw	48
  9310  2989  3431               	retlw	49
  9311  298A  3432               	retlw	50
  9312  298B  3433               	retlw	51
  9313  298C  3434               	retlw	52
  9314  298D  3435               	retlw	53
  9315  298E  3436               	retlw	54
  9316  298F  3437               	retlw	55
  9317  2990  3438               	retlw	56
  9318  2991  3439               	retlw	57
  9319  2992  343C               	retlw	60
  9320  2993  343E               	retlw	62
  9321  2994  3421               	retlw	33
  9322  2995  3424               	retlw	36
  9323  2996  3425               	retlw	37
  9324  2997  3426               	retlw	38
  9325  2998  342D               	retlw	45
  9326  2999  3423               	retlw	35
  9327  299A  342A               	retlw	42
  9328  299B  342B               	retlw	43
  9329  299C  342D               	retlw	45
  9330  299D  342E               	retlw	46
  9331  299E  3440               	retlw	64
  9332  299F  343B               	retlw	59
  9333  29A0  343A               	retlw	58
  9334  29A1  3427               	retlw	39
  9335  29A2  3422               	retlw	34
  9336  29A3  342F               	retlw	47
  9337  29A4  345C               	retlw	92
  9338                           
  9339                           	psect	idataBANK7
  9340  29DD                     __pidataBANK7:	
  9341                           
  9342                           ;initializer for _roundabout_leds_inverse
  9343  29DD  3480               	retlw	128
  9344  29DE  3400               	retlw	0
  9345  29DF  3440               	retlw	64
  9346  29E0  3400               	retlw	0
  9347  29E1  3420               	retlw	32
  9348  29E2  3400               	retlw	0
  9349  29E3  3410               	retlw	16
  9350  29E4  3400               	retlw	0
  9351  29E5  3408               	retlw	8
  9352  29E6  3400               	retlw	0
  9353  29E7  3404               	retlw	4
  9354  29E8  3400               	retlw	0
  9355  29E9  3402               	retlw	2
  9356  29EA  3400               	retlw	0
  9357  29EB  3401               	retlw	1
  9358  29EC  3400               	retlw	0
  9359  29ED  3402               	retlw	2
  9360  29EE  3400               	retlw	0
  9361  29EF  3404               	retlw	4
  9362  29F0  3400               	retlw	0
  9363  29F1  3408               	retlw	8
  9364  29F2  3400               	retlw	0
  9365  29F3  3410               	retlw	16
  9366  29F4  3400               	retlw	0
  9367  29F5  3420               	retlw	32
  9368  29F6  3400               	retlw	0
  9369  29F7  3440               	retlw	64
  9370  29F8  3400               	retlw	0
  9371                           
  9372                           ;initializer for _roundabout_leds
  9373  29F9  3480               	retlw	128
  9374  29FA  3400               	retlw	0
  9375  29FB  3400               	retlw	0
  9376  29FC  3401               	retlw	1
  9377  29FD  3400               	retlw	0
  9378  29FE  3402               	retlw	2
  9379  29FF  3400               	retlw	0
  9380  2A00  3408               	retlw	8
  9381  2A01  3400               	retlw	0
  9382  2A02  3410               	retlw	16
  9383  2A03  3400               	retlw	0
  9384  2A04  3420               	retlw	32
  9385  2A05  3400               	retlw	0
  9386  2A06  3440               	retlw	64
  9387  2A07  3400               	retlw	0
  9388  2A08  3480               	retlw	128
  9389  2A09  3400               	retlw	0
  9390  2A0A  3440               	retlw	64
  9391  2A0B  3400               	retlw	0
  9392  2A0C  3420               	retlw	32
  9393  2A0D  3400               	retlw	0
  9394  2A0E  3410               	retlw	16
  9395  2A0F  3400               	retlw	0
  9396  2A10  3408               	retlw	8
  9397  2A11  3400               	retlw	0
  9398  2A12  3402               	retlw	2
  9399  2A13  3400               	retlw	0
  9400  2A14  3401               	retlw	1
  9401                           
  9402                           	psect	idataBANK8
  9403  29A5                     __pidataBANK8:	
  9404                           
  9405                           ;initializer for _curtain_leds_inverse
  9406  29A5  3480               	retlw	128
  9407  29A6  3400               	retlw	0
  9408  29A7  34C0               	retlw	192
  9409  29A8  3400               	retlw	0
  9410  29A9  34E0               	retlw	224
  9411  29AA  3400               	retlw	0
  9412  29AB  34F0               	retlw	240
  9413  29AC  3400               	retlw	0
  9414  29AD  34F8               	retlw	248
  9415  29AE  3400               	retlw	0
  9416  29AF  34FC               	retlw	252
  9417  29B0  3400               	retlw	0
  9418  29B1  34FE               	retlw	254
  9419  29B2  3400               	retlw	0
  9420  29B3  34FF               	retlw	255
  9421  29B4  3400               	retlw	0
  9422  29B5  34FE               	retlw	254
  9423  29B6  3400               	retlw	0
  9424  29B7  34FC               	retlw	252
  9425  29B8  3400               	retlw	0
  9426  29B9  34F8               	retlw	248
  9427  29BA  3400               	retlw	0
  9428  29BB  34F0               	retlw	240
  9429  29BC  3400               	retlw	0
  9430  29BD  34E0               	retlw	224
  9431  29BE  3400               	retlw	0
  9432  29BF  34C0               	retlw	192
  9433  29C0  3400               	retlw	0
  9434                           
  9435                           ;initializer for _curtain_leds
  9436  29C1  3480               	retlw	128
  9437  29C2  3400               	retlw	0
  9438  29C3  3480               	retlw	128
  9439  29C4  3401               	retlw	1
  9440  29C5  3480               	retlw	128
  9441  29C6  3403               	retlw	3
  9442  29C7  3480               	retlw	128
  9443  29C8  340B               	retlw	11
  9444  29C9  3480               	retlw	128
  9445  29CA  341B               	retlw	27
  9446  29CB  3480               	retlw	128
  9447  29CC  343B               	retlw	59
  9448  29CD  3480               	retlw	128
  9449  29CE  347B               	retlw	123
  9450  29CF  3480               	retlw	128
  9451  29D0  34FB               	retlw	251
  9452  29D1  3480               	retlw	128
  9453  29D2  347B               	retlw	123
  9454  29D3  3480               	retlw	128
  9455  29D4  343B               	retlw	59
  9456  29D5  3480               	retlw	128
  9457  29D6  341B               	retlw	27
  9458  29D7  3480               	retlw	128
  9459  29D8  340B               	retlw	11
  9460  29D9  3480               	retlw	128
  9461  29DA  3403               	retlw	3
  9462  29DB  3480               	retlw	128
  9463  29DC  3401               	retlw	1
  9464                           
  9465                           	psect	idataBANK10
  9466  2A4E                     __pidataBANK10:	
  9467                           
  9468                           ;initializer for _flashy_option
  9469  2A4E  348D               	retlw	low (STR_9| (0+32768))
  9470  2A4F  34BB               	retlw	high (STR_9| (0+32768))
  9471  2A50  34C8               	retlw	low (STR_12| (0+32768))
  9472  2A51  34BA               	retlw	high (STR_12| (0+32768))
  9473  2A52  3401               	retlw	low (STR_13| (0+32768))
  9474  2A53  34BB               	retlw	high (STR_13| (0+32768))
  9475  2A54  343A               	retlw	low (STR_14| (0+32768))
  9476  2A55  34BB               	retlw	high (STR_14| (0+32768))
  9477  2A56  34D5               	retlw	low (STR_15| (0+32768))
  9478  2A57  34B9               	retlw	high (STR_15| (0+32768))
  9479  2A58  34AD               	retlw	low (STR_16| (0+32768))
  9480  2A59  34B9               	retlw	high (STR_16| (0+32768))
  9481  2A5A  3466               	retlw	low (STR_17| (0+32768))
  9482  2A5B  34B9               	retlw	high (STR_17| (0+32768))
  9483  2A5C  34F9               	retlw	low (STR_18| (0+32768))
  9484  2A5D  34BA               	retlw	high (STR_18| (0+32768))
  9485  2A5E  3497               	retlw	low (STR_19| (0+32768))
  9486  2A5F  34B9               	retlw	high (STR_19| (0+32768))
  9487  2A60  3414               	retlw	low (STR_20| (0+32768))
  9488  2A61  34B9               	retlw	high (STR_20| (0+32768))
  9489  2A62  3453               	retlw	low (STR_21| (0+32768))
  9490  2A63  34B8               	retlw	high (STR_21| (0+32768))
  9491  2A64  34BC               	retlw	low (STR_22| (0+32768))
  9492  2A65  34B8               	retlw	high (STR_22| (0+32768))
  9493  2A66  34F7               	retlw	low (STR_23| (0+32768))
  9494  2A67  34B8               	retlw	high (STR_23| (0+32768))
  9495  2A68  344B               	retlw	low (STR_24| (0+32768))
  9496  2A69  34B9               	retlw	high (STR_24| (0+32768))
  9497  2A6A  342B               	retlw	low (STR_25| (0+32768))
  9498  2A6B  34B8               	retlw	high (STR_25| (0+32768))
  9499  2A6C  34FA               	retlw	low (STR_26| (0+32768))
  9500  2A6D  34B9               	retlw	high (STR_26| (0+32768))
  9501  2A6E  34C2               	retlw	low (STR_27| (0+32768))
  9502  2A6F  34B9               	retlw	high (STR_27| (0+32768))
  9503  2A70  34DA               	retlw	low (STR_28| (0+32768))
  9504  2A71  34B8               	retlw	high (STR_28| (0+32768))
  9505  2A72  346E               	retlw	low (STR_29| (0+32768))
  9506  2A73  34BA               	retlw	high (STR_29| (0+32768))
  9507  2A74  342C               	retlw	low (STR_30| (0+32768))
  9508  2A75  34BA               	retlw	high (STR_30| (0+32768))
  9509  2A76  3477               	retlw	low (STR_31| (0+32768))
  9510  2A77  34B8               	retlw	high (STR_31| (0+32768))
  9511  2A78  341C               	retlw	low (STR_32| (0+32768))
  9512  2A79  34BA               	retlw	high (STR_32| (0+32768))
  9513  2A7A  349A               	retlw	low (STR_33| (0+32768))
  9514  2A7B  34B8               	retlw	high (STR_33| (0+32768))
  9515  2A7C  340A               	retlw	low (STR_34| (0+32768))
  9516  2A7D  34A8               	retlw	high (STR_34| (0+32768))
  9517  2A7E  340B               	retlw	low (STR_35| (0+32768))
  9518  2A7F  34BA               	retlw	high (STR_35| (0+32768))
  9519  2A80  3400               	retlw	low (STR_36| (0+32768))
  9520  2A81  34B0               	retlw	high (STR_36| (0+32768))
  9521  2A82  3455               	retlw	low (STR_37| (0+32768))
  9522  2A83  34BA               	retlw	high (STR_37| (0+32768))
  9523  2A84  3400               	retlw	low (STR_38| (0+32768))
  9524  2A85  34B8               	retlw	high (STR_38| (0+32768))
  9525  2A86  347D               	retlw	low ((STR_34+115)| (0+32768))
  9526  2A87  34A8               	retlw	high ((STR_34+115)| (0+32768))
  9527                           
  9528                           	psect	idataBIGRAM
  9529  2543                     __pidataBIGRAM:	
  9530                           
  9531                           ;initializer for _asciiCharTableLookup
  9532  2543  3400               	retlw	0
  9533  2544  3400               	retlw	0
  9534  2545  3400               	retlw	0
  9535  2546  3420               	retlw	32
  9536  2547  3410               	retlw	16
  9537  2548  3410               	retlw	16
  9538  2549  3420               	retlw	32
  9539  254A  3400               	retlw	0
  9540  254B  3410               	retlw	16
  9541  254C  3410               	retlw	16
  9542  254D  34A5               	retlw	165
  9543  254E  3421               	retlw	33
  9544  254F  34A5               	retlw	165
  9545  2550  3460               	retlw	96
  9546  2551  3410               	retlw	16
  9547  2552  3430               	retlw	48
  9548  2553  3400               	retlw	0
  9549  2554  3412               	retlw	18
  9550  2555  3410               	retlw	16
  9551  2556  3408               	retlw	8
  9552  2557  3420               	retlw	32
  9553  2558  3420               	retlw	32
  9554  2559  3485               	retlw	133
  9555  255A  3445               	retlw	69
  9556  255B  34B1               	retlw	177
  9557  255C  3430               	retlw	48
  9558  255D  3410               	retlw	16
  9559  255E  3410               	retlw	16
  9560  255F  3410               	retlw	16
  9561  2560  3410               	retlw	16
  9562  2561  3410               	retlw	16
  9563  2562  3410               	retlw	16
  9564  2563  3410               	retlw	16
  9565  2564  3410               	retlw	16
  9566  2565  3410               	retlw	16
  9567  2566  3410               	retlw	16
  9568  2567  3410               	retlw	16
  9569  2568  3410               	retlw	16
  9570  2569  3410               	retlw	16
  9571  256A  3410               	retlw	16
  9572  256B  3410               	retlw	16
  9573  256C  3410               	retlw	16
  9574  256D  3410               	retlw	16
  9575  256E  3410               	retlw	16
  9576  256F  3410               	retlw	16
  9577  2570  3410               	retlw	16
  9578  2571  3410               	retlw	16
  9579  2572  3410               	retlw	16
  9580  2573  3410               	retlw	16
  9581  2574  3410               	retlw	16
  9582  2575  3410               	retlw	16
  9583  2576  3410               	retlw	16
  9584  2577  3410               	retlw	16
  9585  2578  3410               	retlw	16
  9586  2579  3410               	retlw	16
  9587  257A  3410               	retlw	16
  9588  257B  3410               	retlw	16
  9589  257C  3410               	retlw	16
  9590  257D  3410               	retlw	16
  9591  257E  3410               	retlw	16
  9592  257F  3410               	retlw	16
  9593  2580  3410               	retlw	16
  9594  2581  3410               	retlw	16
  9595  2582  3410               	retlw	16
  9596  2583  3400               	retlw	0
  9597  2584  3400               	retlw	0
  9598  2585  34C0               	retlw	192
  9599  2586  3440               	retlw	64
  9600  2587  3400               	retlw	0
  9601  2588  3444               	retlw	68
  9602  2589  3410               	retlw	16
  9603  258A  3410               	retlw	16
  9604  258B  34B4               	retlw	180
  9605  258C  3435               	retlw	53
  9606  258D  3410               	retlw	16
  9607  258E  3410               	retlw	16
  9608  258F  3410               	retlw	16
  9609  2590  3410               	retlw	16
  9610  2591  3400               	retlw	0
  9611  2592  3404               	retlw	4
  9612  2593  3408               	retlw	8
  9613  2594  3408               	retlw	8
  9614  2595  3402               	retlw	2
  9615  2596  3402               	retlw	2
  9616  2597  341E               	retlw	30
  9617  2598  341E               	retlw	30
  9618  2599  3414               	retlw	20
  9619  259A  3414               	retlw	20
  9620  259B  3440               	retlw	64
  9621  259C  3400               	retlw	0
  9622  259D  3410               	retlw	16
  9623  259E  3410               	retlw	16
  9624  259F  3440               	retlw	64
  9625  25A0  3400               	retlw	0
  9626  25A1  3402               	retlw	2
  9627  25A2  3408               	retlw	8
  9628  25A3  34A9               	retlw	169
  9629  25A4  3463               	retlw	99
  9630  25A5  3480               	retlw	128
  9631  25A6  3440               	retlw	64
  9632  25A7  3431               	retlw	49
  9633  25A8  3470               	retlw	112
  9634  25A9  34B0               	retlw	176
  9635  25AA  3460               	retlw	96
  9636  25AB  3490               	retlw	144
  9637  25AC  3451               	retlw	81
  9638  25AD  34B0               	retlw	176
  9639  25AE  3431               	retlw	49
  9640  25AF  34B1               	retlw	177
  9641  25B0  3431               	retlw	49
  9642  25B1  3480               	retlw	128
  9643  25B2  3460               	retlw	96
  9644  25B3  34B1               	retlw	177
  9645  25B4  3471               	retlw	113
  9646  25B5  3490               	retlw	144
  9647  25B6  3471               	retlw	113
  9648  25B7  3410               	retlw	16
  9649  25B8  3410               	retlw	16
  9650  25B9  3410               	retlw	16
  9651  25BA  3410               	retlw	16
  9652  25BB  3408               	retlw	8
  9653  25BC  3408               	retlw	8
  9654  25BD  3430               	retlw	48
  9655  25BE  3410               	retlw	16
  9656  25BF  3402               	retlw	2
  9657  25C0  3402               	retlw	2
  9658  25C1  3414               	retlw	20
  9659  25C2  34E1               	retlw	225
  9660  25C3  34A5               	retlw	165
  9661  25C4  3470               	retlw	112
  9662  25C5  3491               	retlw	145
  9663  25C6  3471               	retlw	113
  9664  25C7  34B1               	retlw	177
  9665  25C8  3411               	retlw	17
  9666  25C9  3421               	retlw	33
  9667  25CA  3421               	retlw	33
  9668  25CB  34B1               	retlw	177
  9669  25CC  3450               	retlw	80
  9670  25CD  3421               	retlw	33
  9671  25CE  3431               	retlw	49
  9672  25CF  3401               	retlw	1
  9673  25D0  3431               	retlw	49
  9674  25D1  34B1               	retlw	177
  9675  25D2  3421               	retlw	33
  9676  25D3  3491               	retlw	145
  9677  25D4  3451               	retlw	81
  9678  25D5  3424               	retlw	36
  9679  25D6  3424               	retlw	36
  9680  25D7  34A1               	retlw	161
  9681  25D8  3440               	retlw	64
  9682  25D9  3409               	retlw	9
  9683  25DA  3419               	retlw	25
  9684  25DB  3421               	retlw	33
  9685  25DC  3401               	retlw	1
  9686  25DD  3481               	retlw	129
  9687  25DE  344B               	retlw	75
  9688  25DF  3489               	retlw	137
  9689  25E0  3443               	retlw	67
  9690  25E1  34A1               	retlw	161
  9691  25E2  3461               	retlw	97
  9692  25E3  3411               	retlw	17
  9693  25E4  3471               	retlw	113
  9694  25E5  34A9               	retlw	169
  9695  25E6  3461               	retlw	97
  9696  25E7  3419               	retlw	25
  9697  25E8  3471               	retlw	113
  9698  25E9  34B0               	retlw	176
  9699  25EA  3431               	retlw	49
  9700  25EB  3404               	retlw	4
  9701  25EC  3424               	retlw	36
  9702  25ED  34A1               	retlw	161
  9703  25EE  3441               	retlw	65
  9704  25EF  3403               	retlw	3
  9705  25F0  3409               	retlw	9
  9706  25F1  348B               	retlw	139
  9707  25F2  3441               	retlw	65
  9708  25F3  340A               	retlw	10
  9709  25F4  340A               	retlw	10
  9710  25F5  3404               	retlw	4
  9711  25F6  340A               	retlw	10
  9712  25F7  3422               	retlw	34
  9713  25F8  3428               	retlw	40
  9714  25F9  3421               	retlw	33
  9715  25FA  3421               	retlw	33
  9716  25FB  3408               	retlw	8
  9717  25FC  3402               	retlw	2
  9718  25FD  340A               	retlw	10
  9719  25FE  3400               	retlw	0
  9720  25FF  3420               	retlw	32
  9721  2600  3400               	retlw	0
  9722  2601  3410               	retlw	16
  9723  2602  3410               	retlw	16
  9724  2603  3491               	retlw	145
  9725  2604  3471               	retlw	113
  9726  2605  34B1               	retlw	177
  9727  2606  3411               	retlw	17
  9728  2607  3431               	retlw	49
  9729  2608  3410               	retlw	16
  9730  2609  34B1               	retlw	177
  9731  260A  3450               	retlw	80
  9732  260B  3421               	retlw	33
  9733  260C  3431               	retlw	49
  9734  260D  3401               	retlw	1
  9735  260E  3431               	retlw	49
  9736  260F  34B1               	retlw	177
  9737  2610  3421               	retlw	33
  9738  2611  3491               	retlw	145
  9739  2612  3451               	retlw	81
  9740  2613  3424               	retlw	36
  9741  2614  3424               	retlw	36
  9742  2615  34A1               	retlw	161
  9743  2616  3440               	retlw	64
  9744  2617  3409               	retlw	9
  9745  2618  3419               	retlw	25
  9746  2619  3421               	retlw	33
  9747  261A  3401               	retlw	1
  9748  261B  3481               	retlw	129
  9749  261C  344B               	retlw	75
  9750  261D  3489               	retlw	137
  9751  261E  3443               	retlw	67
  9752  261F  34A1               	retlw	161
  9753  2620  3461               	retlw	97
  9754  2621  3411               	retlw	17
  9755  2622  3471               	retlw	113
  9756  2623  34A9               	retlw	169
  9757  2624  3461               	retlw	97
  9758  2625  3419               	retlw	25
  9759  2626  3471               	retlw	113
  9760  2627  34B0               	retlw	176
  9761  2628  3431               	retlw	49
  9762  2629  3404               	retlw	4
  9763  262A  3424               	retlw	36
  9764  262B  34A1               	retlw	161
  9765  262C  3441               	retlw	65
  9766  262D  3403               	retlw	3
  9767  262E  3409               	retlw	9
  9768  262F  348B               	retlw	139
  9769  2630  3441               	retlw	65
  9770  2631  340A               	retlw	10
  9771  2632  340A               	retlw	10
  9772  2633  3404               	retlw	4
  9773  2634  340A               	retlw	10
  9774  2635  3422               	retlw	34
  9775  2636  3428               	retlw	40
  9776  2637  3408               	retlw	8
  9777  2638  3408               	retlw	8
  9778  2639  3404               	retlw	4
  9779  263A  3404               	retlw	4
  9780  263B  3402               	retlw	2
  9781  263C  3402               	retlw	2
  9782  263D  3410               	retlw	16
  9783  263E  3410               	retlw	16
  9784  263F  34FF               	retlw	255
  9785  2640  34FF               	retlw	255
  9786  2641  3400               	retlw	0
  9787  2642  3400               	retlw	0
  9788                           
  9789                           	psect	stringtext1
  9790  1800                     __pstringtext1:	
  9791  1800                     _gamma_table_256x1k:	
  9792  1800  3400               	retlw	0
  9793  1801  3400               	retlw	0
  9794  1802  3400               	retlw	0
  9795  1803  3400               	retlw	0
  9796  1804  3400               	retlw	0
  9797  1805  3400               	retlw	0
  9798  1806  3400               	retlw	0
  9799  1807  3400               	retlw	0
  9800  1808  3400               	retlw	0
  9801  1809  3400               	retlw	0
  9802  180A  3400               	retlw	0
  9803  180B  3400               	retlw	0
  9804  180C  3400               	retlw	0
  9805  180D  3400               	retlw	0
  9806  180E  3400               	retlw	0
  9807  180F  3400               	retlw	0
  9808  1810  3400               	retlw	0
  9809  1811  3400               	retlw	0
  9810  1812  3400               	retlw	0
  9811  1813  3400               	retlw	0
  9812  1814  3400               	retlw	0
  9813  1815  3400               	retlw	0
  9814  1816  3400               	retlw	0
  9815  1817  3400               	retlw	0
  9816  1818  3400               	retlw	0
  9817  1819  3400               	retlw	0
  9818  181A  3400               	retlw	0
  9819  181B  3400               	retlw	0
  9820  181C  3400               	retlw	0
  9821  181D  3400               	retlw	0
  9822  181E  3401               	retlw	1
  9823  181F  3400               	retlw	0
  9824  1820  3401               	retlw	1
  9825  1821  3400               	retlw	0
  9826  1822  3401               	retlw	1
  9827  1823  3400               	retlw	0
  9828  1824  3401               	retlw	1
  9829  1825  3400               	retlw	0
  9830  1826  3401               	retlw	1
  9831  1827  3400               	retlw	0
  9832  1828  3401               	retlw	1
  9833  1829  3400               	retlw	0
  9834  182A  3402               	retlw	2
  9835  182B  3400               	retlw	0
  9836  182C  3402               	retlw	2
  9837  182D  3400               	retlw	0
  9838  182E  3402               	retlw	2
  9839  182F  3400               	retlw	0
  9840  1830  3403               	retlw	3
  9841  1831  3400               	retlw	0
  9842  1832  3403               	retlw	3
  9843  1833  3400               	retlw	0
  9844  1834  3403               	retlw	3
  9845  1835  3400               	retlw	0
  9846  1836  3404               	retlw	4
  9847  1837  3400               	retlw	0
  9848  1838  3404               	retlw	4
  9849  1839  3400               	retlw	0
  9850  183A  3404               	retlw	4
  9851  183B  3400               	retlw	0
  9852  183C  3405               	retlw	5
  9853  183D  3400               	retlw	0
  9854  183E  3405               	retlw	5
  9855  183F  3400               	retlw	0
  9856  1840  3406               	retlw	6
  9857  1841  3400               	retlw	0
  9858  1842  3406               	retlw	6
  9859  1843  3400               	retlw	0
  9860  1844  3407               	retlw	7
  9861  1845  3400               	retlw	0
  9862  1846  3407               	retlw	7
  9863  1847  3400               	retlw	0
  9864  1848  3408               	retlw	8
  9865  1849  3400               	retlw	0
  9866  184A  3408               	retlw	8
  9867  184B  3400               	retlw	0
  9868  184C  3409               	retlw	9
  9869  184D  3400               	retlw	0
  9870  184E  3409               	retlw	9
  9871  184F  3400               	retlw	0
  9872  1850  340A               	retlw	10
  9873  1851  3400               	retlw	0
  9874  1852  340B               	retlw	11
  9875  1853  3400               	retlw	0
  9876  1854  340B               	retlw	11
  9877  1855  3400               	retlw	0
  9878  1856  340C               	retlw	12
  9879  1857  3400               	retlw	0
  9880  1858  340D               	retlw	13
  9881  1859  3400               	retlw	0
  9882  185A  340E               	retlw	14
  9883  185B  3400               	retlw	0
  9884  185C  340E               	retlw	14
  9885  185D  3400               	retlw	0
  9886  185E  340F               	retlw	15
  9887  185F  3400               	retlw	0
  9888  1860  3410               	retlw	16
  9889  1861  3400               	retlw	0
  9890  1862  3411               	retlw	17
  9891  1863  3400               	retlw	0
  9892  1864  3412               	retlw	18
  9893  1865  3400               	retlw	0
  9894  1866  3413               	retlw	19
  9895  1867  3400               	retlw	0
  9896  1868  3413               	retlw	19
  9897  1869  3400               	retlw	0
  9898  186A  3414               	retlw	20
  9899  186B  3400               	retlw	0
  9900  186C  3415               	retlw	21
  9901  186D  3400               	retlw	0
  9902  186E  3416               	retlw	22
  9903  186F  3400               	retlw	0
  9904  1870  3417               	retlw	23
  9905  1871  3400               	retlw	0
  9906  1872  3419               	retlw	25
  9907  1873  3400               	retlw	0
  9908  1874  341A               	retlw	26
  9909  1875  3400               	retlw	0
  9910  1876  341B               	retlw	27
  9911  1877  3400               	retlw	0
  9912  1878  341C               	retlw	28
  9913  1879  3400               	retlw	0
  9914  187A  341D               	retlw	29
  9915  187B  3400               	retlw	0
  9916  187C  341E               	retlw	30
  9917  187D  3400               	retlw	0
  9918  187E  3420               	retlw	32
  9919  187F  3400               	retlw	0
  9920  1880  3421               	retlw	33
  9921  1881  3400               	retlw	0
  9922  1882  3422               	retlw	34
  9923  1883  3400               	retlw	0
  9924  1884  3423               	retlw	35
  9925  1885  3400               	retlw	0
  9926  1886  3425               	retlw	37
  9927  1887  3400               	retlw	0
  9928  1888  3426               	retlw	38
  9929  1889  3400               	retlw	0
  9930  188A  3428               	retlw	40
  9931  188B  3400               	retlw	0
  9932  188C  3429               	retlw	41
  9933  188D  3400               	retlw	0
  9934  188E  342A               	retlw	42
  9935  188F  3400               	retlw	0
  9936  1890  342C               	retlw	44
  9937  1891  3400               	retlw	0
  9938  1892  342E               	retlw	46
  9939  1893  3400               	retlw	0
  9940  1894  342F               	retlw	47
  9941  1895  3400               	retlw	0
  9942  1896  3431               	retlw	49
  9943  1897  3400               	retlw	0
  9944  1898  3432               	retlw	50
  9945  1899  3400               	retlw	0
  9946  189A  3434               	retlw	52
  9947  189B  3400               	retlw	0
  9948  189C  3436               	retlw	54
  9949  189D  3400               	retlw	0
  9950  189E  3437               	retlw	55
  9951  189F  3400               	retlw	0
  9952  18A0  3439               	retlw	57
  9953  18A1  3400               	retlw	0
  9954  18A2  343B               	retlw	59
  9955  18A3  3400               	retlw	0
  9956  18A4  343D               	retlw	61
  9957  18A5  3400               	retlw	0
  9958  18A6  343F               	retlw	63
  9959  18A7  3400               	retlw	0
  9960  18A8  3441               	retlw	65
  9961  18A9  3400               	retlw	0
  9962  18AA  3442               	retlw	66
  9963  18AB  3400               	retlw	0
  9964  18AC  3444               	retlw	68
  9965  18AD  3400               	retlw	0
  9966  18AE  3446               	retlw	70
  9967  18AF  3400               	retlw	0
  9968  18B0  3448               	retlw	72
  9969  18B1  3400               	retlw	0
  9970  18B2  344B               	retlw	75
  9971  18B3  3400               	retlw	0
  9972  18B4  344D               	retlw	77
  9973  18B5  3400               	retlw	0
  9974  18B6  344F               	retlw	79
  9975  18B7  3400               	retlw	0
  9976  18B8  3451               	retlw	81
  9977  18B9  3400               	retlw	0
  9978  18BA  3453               	retlw	83
  9979  18BB  3400               	retlw	0
  9980  18BC  3455               	retlw	85
  9981  18BD  3400               	retlw	0
  9982  18BE  3458               	retlw	88
  9983  18BF  3400               	retlw	0
  9984  18C0  345A               	retlw	90
  9985  18C1  3400               	retlw	0
  9986  18C2  345C               	retlw	92
  9987  18C3  3400               	retlw	0
  9988  18C4  345F               	retlw	95
  9989  18C5  3400               	retlw	0
  9990  18C6  3461               	retlw	97
  9991  18C7  3400               	retlw	0
  9992  18C8  3464               	retlw	100
  9993  18C9  3400               	retlw	0
  9994  18CA  3466               	retlw	102
  9995  18CB  3400               	retlw	0
  9996  18CC  3469               	retlw	105
  9997  18CD  3400               	retlw	0
  9998  18CE  346B               	retlw	107
  9999  18CF  3400               	retlw	0
 10000  18D0  346E               	retlw	110
 10001  18D1  3400               	retlw	0
 10002  18D2  3470               	retlw	112
 10003  18D3  3400               	retlw	0
 10004  18D4  3473               	retlw	115
 10005  18D5  3400               	retlw	0
 10006  18D6  3476               	retlw	118
 10007  18D7  3400               	retlw	0
 10008  18D8  3479               	retlw	121
 10009  18D9  3400               	retlw	0
 10010  18DA  347B               	retlw	123
 10011  18DB  3400               	retlw	0
 10012  18DC  347E               	retlw	126
 10013  18DD  3400               	retlw	0
 10014  18DE  3481               	retlw	129
 10015  18DF  3400               	retlw	0
 10016  18E0  3484               	retlw	132
 10017  18E1  3400               	retlw	0
 10018  18E2  3487               	retlw	135
 10019  18E3  3400               	retlw	0
 10020  18E4  348A               	retlw	138
 10021  18E5  3400               	retlw	0
 10022  18E6  348D               	retlw	141
 10023  18E7  3400               	retlw	0
 10024  18E8  3490               	retlw	144
 10025  18E9  3400               	retlw	0
 10026  18EA  3493               	retlw	147
 10027  18EB  3400               	retlw	0
 10028  18EC  3496               	retlw	150
 10029  18ED  3400               	retlw	0
 10030  18EE  349A               	retlw	154
 10031  18EF  3400               	retlw	0
 10032  18F0  349D               	retlw	157
 10033  18F1  3400               	retlw	0
 10034  18F2  34A0               	retlw	160
 10035  18F3  3400               	retlw	0
 10036  18F4  34A3               	retlw	163
 10037  18F5  3400               	retlw	0
 10038  18F6  34A7               	retlw	167
 10039  18F7  3400               	retlw	0
 10040  18F8  34AA               	retlw	170
 10041  18F9  3400               	retlw	0
 10042  18FA  34AE               	retlw	174
 10043  18FB  3400               	retlw	0
 10044  18FC  34B1               	retlw	177
 10045  18FD  3400               	retlw	0
 10046  18FE  34B5               	retlw	181
 10047  18FF  3400               	retlw	0
 10048  1900  34B8               	retlw	184
 10049  1901  3400               	retlw	0
 10050  1902  34BC               	retlw	188
 10051  1903  3400               	retlw	0
 10052  1904  34BF               	retlw	191
 10053  1905  3400               	retlw	0
 10054  1906  34C3               	retlw	195
 10055  1907  3400               	retlw	0
 10056  1908  34C7               	retlw	199
 10057  1909  3400               	retlw	0
 10058  190A  34CA               	retlw	202
 10059  190B  3400               	retlw	0
 10060  190C  34CE               	retlw	206
 10061  190D  3400               	retlw	0
 10062  190E  34D2               	retlw	210
 10063  190F  3400               	retlw	0
 10064  1910  34D6               	retlw	214
 10065  1911  3400               	retlw	0
 10066  1912  34DA               	retlw	218
 10067  1913  3400               	retlw	0
 10068  1914  34DE               	retlw	222
 10069  1915  3400               	retlw	0
 10070  1916  34E2               	retlw	226
 10071  1917  3400               	retlw	0
 10072  1918  34E6               	retlw	230
 10073  1919  3400               	retlw	0
 10074  191A  34EA               	retlw	234
 10075  191B  3400               	retlw	0
 10076  191C  34EE               	retlw	238
 10077  191D  3400               	retlw	0
 10078  191E  34F3               	retlw	243
 10079  191F  3400               	retlw	0
 10080  1920  34F7               	retlw	247
 10081  1921  3400               	retlw	0
 10082  1922  34FB               	retlw	251
 10083  1923  3400               	retlw	0
 10084  1924  34FF               	retlw	255
 10085  1925  3400               	retlw	0
 10086  1926  3404               	retlw	4
 10087  1927  3401               	retlw	1
 10088  1928  3408               	retlw	8
 10089  1929  3401               	retlw	1
 10090  192A  340D               	retlw	13
 10091  192B  3401               	retlw	1
 10092  192C  3411               	retlw	17
 10093  192D  3401               	retlw	1
 10094  192E  3416               	retlw	22
 10095  192F  3401               	retlw	1
 10096  1930  341A               	retlw	26
 10097  1931  3401               	retlw	1
 10098  1932  341F               	retlw	31
 10099  1933  3401               	retlw	1
 10100  1934  3424               	retlw	36
 10101  1935  3401               	retlw	1
 10102  1936  3428               	retlw	40
 10103  1937  3401               	retlw	1
 10104  1938  342D               	retlw	45
 10105  1939  3401               	retlw	1
 10106  193A  3432               	retlw	50
 10107  193B  3401               	retlw	1
 10108  193C  3437               	retlw	55
 10109  193D  3401               	retlw	1
 10110  193E  343C               	retlw	60
 10111  193F  3401               	retlw	1
 10112  1940  3441               	retlw	65
 10113  1941  3401               	retlw	1
 10114  1942  3446               	retlw	70
 10115  1943  3401               	retlw	1
 10116  1944  344B               	retlw	75
 10117  1945  3401               	retlw	1
 10118  1946  3450               	retlw	80
 10119  1947  3401               	retlw	1
 10120  1948  3455               	retlw	85
 10121  1949  3401               	retlw	1
 10122  194A  345A               	retlw	90
 10123  194B  3401               	retlw	1
 10124  194C  345F               	retlw	95
 10125  194D  3401               	retlw	1
 10126  194E  3465               	retlw	101
 10127  194F  3401               	retlw	1
 10128  1950  346A               	retlw	106
 10129  1951  3401               	retlw	1
 10130  1952  346F               	retlw	111
 10131  1953  3401               	retlw	1
 10132  1954  3475               	retlw	117
 10133  1955  3401               	retlw	1
 10134  1956  347A               	retlw	122
 10135  1957  3401               	retlw	1
 10136  1958  3480               	retlw	128
 10137  1959  3401               	retlw	1
 10138  195A  3486               	retlw	134
 10139  195B  3401               	retlw	1
 10140  195C  348B               	retlw	139
 10141  195D  3401               	retlw	1
 10142  195E  3491               	retlw	145
 10143  195F  3401               	retlw	1
 10144  1960  3497               	retlw	151
 10145  1961  3401               	retlw	1
 10146  1962  349C               	retlw	156
 10147  1963  3401               	retlw	1
 10148  1964  34A2               	retlw	162
 10149  1965  3401               	retlw	1
 10150  1966  34A8               	retlw	168
 10151  1967  3401               	retlw	1
 10152  1968  34AE               	retlw	174
 10153  1969  3401               	retlw	1
 10154  196A  34B4               	retlw	180
 10155  196B  3401               	retlw	1
 10156  196C  34BA               	retlw	186
 10157  196D  3401               	retlw	1
 10158  196E  34C0               	retlw	192
 10159  196F  3401               	retlw	1
 10160  1970  34C6               	retlw	198
 10161  1971  3401               	retlw	1
 10162  1972  34CC               	retlw	204
 10163  1973  3401               	retlw	1
 10164  1974  34D2               	retlw	210
 10165  1975  3401               	retlw	1
 10166  1976  34D9               	retlw	217
 10167  1977  3401               	retlw	1
 10168  1978  34DF               	retlw	223
 10169  1979  3401               	retlw	1
 10170  197A  34E5               	retlw	229
 10171  197B  3401               	retlw	1
 10172  197C  34EC               	retlw	236
 10173  197D  3401               	retlw	1
 10174  197E  34F2               	retlw	242
 10175  197F  3401               	retlw	1
 10176  1980  34F9               	retlw	249
 10177  1981  3401               	retlw	1
 10178  1982  34FF               	retlw	255
 10179  1983  3401               	retlw	1
 10180  1984  3406               	retlw	6
 10181  1985  3402               	retlw	2
 10182  1986  340D               	retlw	13
 10183  1987  3402               	retlw	2
 10184  1988  3413               	retlw	19
 10185  1989  3402               	retlw	2
 10186  198A  341A               	retlw	26
 10187  198B  3402               	retlw	2
 10188  198C  3421               	retlw	33
 10189  198D  3402               	retlw	2
 10190  198E  3428               	retlw	40
 10191  198F  3402               	retlw	2
 10192  1990  342F               	retlw	47
 10193  1991  3402               	retlw	2
 10194  1992  3436               	retlw	54
 10195  1993  3402               	retlw	2
 10196  1994  343D               	retlw	61
 10197  1995  3402               	retlw	2
 10198  1996  3444               	retlw	68
 10199  1997  3402               	retlw	2
 10200  1998  344B               	retlw	75
 10201  1999  3402               	retlw	2
 10202  199A  3452               	retlw	82
 10203  199B  3402               	retlw	2
 10204  199C  345A               	retlw	90
 10205  199D  3402               	retlw	2
 10206  199E  3461               	retlw	97
 10207  199F  3402               	retlw	2
 10208  19A0  3468               	retlw	104
 10209  19A1  3402               	retlw	2
 10210  19A2  3470               	retlw	112
 10211  19A3  3402               	retlw	2
 10212  19A4  3477               	retlw	119
 10213  19A5  3402               	retlw	2
 10214  19A6  347F               	retlw	127
 10215  19A7  3402               	retlw	2
 10216  19A8  3486               	retlw	134
 10217  19A9  3402               	retlw	2
 10218  19AA  348E               	retlw	142
 10219  19AB  3402               	retlw	2
 10220  19AC  3495               	retlw	149
 10221  19AD  3402               	retlw	2
 10222  19AE  349D               	retlw	157
 10223  19AF  3402               	retlw	2
 10224  19B0  34A5               	retlw	165
 10225  19B1  3402               	retlw	2
 10226  19B2  34AD               	retlw	173
 10227  19B3  3402               	retlw	2
 10228  19B4  34B5               	retlw	181
 10229  19B5  3402               	retlw	2
 10230  19B6  34BD               	retlw	189
 10231  19B7  3402               	retlw	2
 10232  19B8  34C5               	retlw	197
 10233  19B9  3402               	retlw	2
 10234  19BA  34CD               	retlw	205
 10235  19BB  3402               	retlw	2
 10236  19BC  34D5               	retlw	213
 10237  19BD  3402               	retlw	2
 10238  19BE  34DD               	retlw	221
 10239  19BF  3402               	retlw	2
 10240  19C0  34E5               	retlw	229
 10241  19C1  3402               	retlw	2
 10242  19C2  34ED               	retlw	237
 10243  19C3  3402               	retlw	2
 10244  19C4  34F6               	retlw	246
 10245  19C5  3402               	retlw	2
 10246  19C6  34FE               	retlw	254
 10247  19C7  3402               	retlw	2
 10248  19C8  3406               	retlw	6
 10249  19C9  3403               	retlw	3
 10250  19CA  340F               	retlw	15
 10251  19CB  3403               	retlw	3
 10252  19CC  3418               	retlw	24
 10253  19CD  3403               	retlw	3
 10254  19CE  3420               	retlw	32
 10255  19CF  3403               	retlw	3
 10256  19D0  3429               	retlw	41
 10257  19D1  3403               	retlw	3
 10258  19D2  3431               	retlw	49
 10259  19D3  3403               	retlw	3
 10260  19D4  343A               	retlw	58
 10261  19D5  3403               	retlw	3
 10262  19D6  3443               	retlw	67
 10263  19D7  3403               	retlw	3
 10264  19D8  344C               	retlw	76
 10265  19D9  3403               	retlw	3
 10266  19DA  3455               	retlw	85
 10267  19DB  3403               	retlw	3
 10268  19DC  345E               	retlw	94
 10269  19DD  3403               	retlw	3
 10270  19DE  3467               	retlw	103
 10271  19DF  3403               	retlw	3
 10272  19E0  3470               	retlw	112
 10273  19E1  3403               	retlw	3
 10274  19E2  3479               	retlw	121
 10275  19E3  3403               	retlw	3
 10276  19E4  3482               	retlw	130
 10277  19E5  3403               	retlw	3
 10278  19E6  348C               	retlw	140
 10279  19E7  3403               	retlw	3
 10280  19E8  3495               	retlw	149
 10281  19E9  3403               	retlw	3
 10282  19EA  349E               	retlw	158
 10283  19EB  3403               	retlw	3
 10284  19EC  34A8               	retlw	168
 10285  19ED  3403               	retlw	3
 10286  19EE  34B1               	retlw	177
 10287  19EF  3403               	retlw	3
 10288  19F0  34BB               	retlw	187
 10289  19F1  3403               	retlw	3
 10290  19F2  34C5               	retlw	197
 10291  19F3  3403               	retlw	3
 10292  19F4  34CE               	retlw	206
 10293  19F5  3403               	retlw	3
 10294  19F6  34D8               	retlw	216
 10295  19F7  3403               	retlw	3
 10296  19F8  34E2               	retlw	226
 10297  19F9  3403               	retlw	3
 10298  19FA  34EC               	retlw	236
 10299  19FB  3403               	retlw	3
 10300  19FC  34F6               	retlw	246
 10301  19FD  3403               	retlw	3
 10302  19FE  34FF               	retlw	255
 10303  19FF  3403               	retlw	3
 10304  1A00                     __end_of_gamma_table_256x1k:	
 10305                           
 10306                           	psect	stringtext2
 10307  2800                     __pstringtext2:	
 10308  2800                     _dpowers:	
 10309  2800  3401               	retlw	1
 10310  2801  3400               	retlw	0
 10311  2802  340A               	retlw	10
 10312  2803  3400               	retlw	0
 10313  2804  3464               	retlw	100
 10314  2805  3400               	retlw	0
 10315  2806  34E8               	retlw	232
 10316  2807  3403               	retlw	3
 10317  2808  3410               	retlw	16
 10318  2809  3427               	retlw	39
 10319  280A                     __end_of_dpowers:	
 10320  000D                     _PORTBbits	set	13
 10321  000C                     _PORTAbits	set	12
 10322  000E                     _PORTCbits	set	14
 10323  000B                     _INTCONbits	set	11
 10324  0017                     _T0CON0bits	set	23
 10325  0010                     _PIR0bits	set	16
 10326  0015                     _TMR0L	set	21
 10327  0016                     _TMR0H	set	22
 10328  0018                     _T0CON1	set	24
 10329  0017                     _T0CON0	set	23
 10330  0012                     _PIR2bits	set	18
 10331  001F                     _T2CONbits	set	31
 10332  0011                     _PIR1bits	set	17
 10333  001D                     _TMR2	set	29
 10334  001E                     _PR2	set	30
 10335  001F                     _T2CON	set	31
 10336  005F                     _GIE	set	95
 10337  0090                     _PIE0bits	set	144
 10338  008E                     _TRISC	set	142
 10339  008D                     _TRISB	set	141
 10340  008C                     _TRISA	set	140
 10341  0097                     _WDTCON	set	151
 10342  010E                     _LATCbits	set	270
 10343  010D                     _LATBbits	set	269
 10344  010E                     _LATC	set	270
 10345  010D                     _LATB	set	269
 10346  010C                     _LATA	set	268
 10347  018C                     _ANSELA	set	396
 10348  018D                     _ANSELB	set	397
 10349  018E                     _ANSELC	set	398
 10350  020E                     _WPUC	set	526
 10351  020C                     _WPUA	set	524
 10352  020D                     _WPUB	set	525
 10353  0214                     _SSP1STATbits	set	532
 10354  0211                     _SSP1BUF	set	529
 10355  0215                     _SSP1CON1bits	set	533
 10356  0212                     _SSP1ADD	set	530
 10357  0215                     _SSP1CON1	set	533
 10358  0214                     _SSP1STAT	set	532
 10359  0297                     _CCP2CONbits	set	663
 10360  0295                     _CCPR2L	set	661
 10361  0296                     _CCPR2H	set	662
 10362  0297                     _CCP2CON	set	663
 10363  028E                     _ODCONC	set	654
 10364  028D                     _ODCONB	set	653
 10365  028C                     _ODCONA	set	652
 10366  0293                     _CCP1CONbits	set	659
 10367  029F                     _CCPTMRSbits	set	671
 10368  0291                     _CCPR1L	set	657
 10369  0292                     _CCPR1H	set	658
 10370  0293                     _CCP1CON	set	659
 10371  0417                     _T4CONbits	set	1047
 10372  0415                     _TMR4	set	1045
 10373  0416                     _PR4	set	1046
 10374  0417                     _T4CON	set	1047
 10375  061A                     _PWM6DCL	set	1562
 10376  061B                     _PWM6DCH	set	1563
 10377  061C                     _PWM6CON	set	1564
 10378  061F                     _PWMTMRSbits	set	1567
 10379  0617                     _PWM5DCL	set	1559
 10380  0618                     _PWM5DCH	set	1560
 10381  0619                     _PWM5CON	set	1561
 10382  0896                     _NVMCON2	set	2198
 10383  0893                     _NVMDATL	set	2195
 10384  0894                     _NVMDATH	set	2196
 10385  0895                     _NVMCON1bits	set	2197
 10386  0892                     _NVMADRH	set	2194
 10387  0891                     _NVMADRL	set	2193
 10388  091E                     _OSCTUNE	set	2334
 10389  091F                     _OSCFRQ	set	2335
 10390  091D                     _OSCEN	set	2333
 10391  091B                     _OSCCON3	set	2331
 10392  0919                     _OSCCON1	set	2329
 10393  48E0                     _PLLR	set	18656
 10394  0E20                     _SSP1CLKPPSbits	set	3616
 10395  0E21                     _SSP1DATPPSbits	set	3617
 10396  0E0F                     _PPSLOCKbits	set	3599
 10397  0E0F                     _PPSLOCK	set	3599
 10398  0EA2                     _RC2PPSbits	set	3746
 10399  0E9E                     _RB6PPSbits	set	3742
 10400  0EA3                     _RC3PPSbits	set	3747
 10401  0EA0                     _RC0PPSbits	set	3744
 10402  0EA4                     _RC4PPSbits	set	3748
 10403  0EA1                     _RC1PPSbits	set	3745
 10404  280A                     STR_34:	
 10405  280A  3449               	retlw	73	;'I'
 10406  280B  344D               	retlw	77	;'M'
 10407  280C  3420               	retlw	32	;' '
 10408  280D  3441               	retlw	65	;'A'
 10409  280E  3446               	retlw	70	;'F'
 10410  280F  3452               	retlw	82	;'R'
 10411  2810  3441               	retlw	65	;'A'
 10412  2811  3449               	retlw	73	;'I'
 10413  2812  3444               	retlw	68	;'D'
 10414  2813  3420               	retlw	32	;' '
 10415  2814  3449               	retlw	73	;'I'
 10416  2815  3420               	retlw	32	;' '
 10417  2816  3443               	retlw	67	;'C'
 10418  2817  3441               	retlw	65	;'A'
 10419  2818  344E               	retlw	78	;'N'
 10420  2819  3454               	retlw	84	;'T'
 10421  281A  3420               	retlw	32	;' '
 10422  281B  344C               	retlw	76	;'L'
 10423  281C  3445               	retlw	69	;'E'
 10424  281D  3454               	retlw	84	;'T'
 10425  281E  3420               	retlw	32	;' '
 10426  281F  3459               	retlw	89	;'Y'
 10427  2820  344F               	retlw	79	;'O'
 10428  2821  3455               	retlw	85	;'U'
 10429  2822  3420               	retlw	32	;' '
 10430  2823  3444               	retlw	68	;'D'
 10431  2824  344F               	retlw	79	;'O'
 10432  2825  3420               	retlw	32	;' '
 10433  2826  3454               	retlw	84	;'T'
 10434  2827  3448               	retlw	72	;'H'
 10435  2828  3441               	retlw	65	;'A'
 10436  2829  3454               	retlw	84	;'T'
 10437  282A  3420               	retlw	32	;' '
 10438  282B  3444               	retlw	68	;'D'
 10439  282C  3441               	retlw	65	;'A'
 10440  282D  3456               	retlw	86	;'V'
 10441  282E  3445               	retlw	69	;'E'
 10442  282F  342E               	retlw	46	;'.'
 10443  2830  342E               	retlw	46	;'.'
 10444  2831  342E               	retlw	46	;'.'
 10445  2832  3420               	retlw	32	;' '
 10446  2833  3420               	retlw	32	;' '
 10447  2834  3449               	retlw	73	;'I'
 10448  2835  344D               	retlw	77	;'M'
 10449  2836  3420               	retlw	32	;' '
 10450  2837  3448               	retlw	72	;'H'
 10451  2838  3445               	retlw	69	;'E'
 10452  2839  3452               	retlw	82	;'R'
 10453  283A  3445               	retlw	69	;'E'
 10454  283B  3420               	retlw	32	;' '
 10455  283C  3454               	retlw	84	;'T'
 10456  283D  344F               	retlw	79	;'O'
 10457  283E  3420               	retlw	32	;' '
 10458  283F  3443               	retlw	67	;'C'
 10459  2840  3448               	retlw	72	;'H'
 10460  2841  3445               	retlw	69	;'E'
 10461  2842  3457               	retlw	87	;'W'
 10462  2843  3420               	retlw	32	;' '
 10463  2844  3442               	retlw	66	;'B'
 10464  2845  3455               	retlw	85	;'U'
 10465  2846  3442               	retlw	66	;'B'
 10466  2847  3442               	retlw	66	;'B'
 10467  2848  344C               	retlw	76	;'L'
 10468  2849  3445               	retlw	69	;'E'
 10469  284A  3447               	retlw	71	;'G'
 10470  284B  3455               	retlw	85	;'U'
 10471  284C  344D               	retlw	77	;'M'
 10472  284D  3420               	retlw	32	;' '
 10473  284E  3441               	retlw	65	;'A'
 10474  284F  344E               	retlw	78	;'N'
 10475  2850  3444               	retlw	68	;'D'
 10476  2851  3420               	retlw	32	;' '
 10477  2852  344B               	retlw	75	;'K'
 10478  2853  3449               	retlw	73	;'I'
 10479  2854  3443               	retlw	67	;'C'
 10480  2855  344B               	retlw	75	;'K'
 10481  2856  3420               	retlw	32	;' '
 10482  2857  3441               	retlw	65	;'A'
 10483  2858  3453               	retlw	83	;'S'
 10484  2859  3453               	retlw	83	;'S'
 10485  285A  342E               	retlw	46	;'.'
 10486  285B  342E               	retlw	46	;'.'
 10487  285C  342E               	retlw	46	;'.'
 10488  285D  3420               	retlw	32	;' '
 10489  285E  3441               	retlw	65	;'A'
 10490  285F  344E               	retlw	78	;'N'
 10491  2860  3444               	retlw	68	;'D'
 10492  2861  3420               	retlw	32	;' '
 10493  2862  3449               	retlw	73	;'I'
 10494  2863  344D               	retlw	77	;'M'
 10495  2864  3420               	retlw	32	;' '
 10496  2865  3441               	retlw	65	;'A'
 10497  2866  344C               	retlw	76	;'L'
 10498  2867  344C               	retlw	76	;'L'
 10499  2868  3420               	retlw	32	;' '
 10500  2869  344F               	retlw	79	;'O'
 10501  286A  3455               	retlw	85	;'U'
 10502  286B  3454               	retlw	84	;'T'
 10503  286C  3420               	retlw	32	;' '
 10504  286D  344F               	retlw	79	;'O'
 10505  286E  3446               	retlw	70	;'F'
 10506  286F  3420               	retlw	32	;' '
 10507  2870  3442               	retlw	66	;'B'
 10508  2871  3455               	retlw	85	;'U'
 10509  2872  3442               	retlw	66	;'B'
 10510  2873  3442               	retlw	66	;'B'
 10511  2874  344C               	retlw	76	;'L'
 10512  2875  3445               	retlw	69	;'E'
 10513  2876  3447               	retlw	71	;'G'
 10514  2877  3455               	retlw	85	;'U'
 10515  2878  344D               	retlw	77	;'M'
 10516  2879  3420               	retlw	32	;' '
 10517  287A  3420               	retlw	32	;' '
 10518  287B  3420               	retlw	32	;' '
 10519  287C  3420               	retlw	32	;' '
 10520  287D  3420               	retlw	32	;' '
 10521  287E  3420               	retlw	32	;' '
 10522  287F  3420               	retlw	32	;' '
 10523  2880  3420               	retlw	32	;' '
 10524  2881  3400               	retlw	0
 10525                           
 10526                           	psect	stringtext3
 10527  3000                     __pstringtext3:	
 10528  3000                     STR_36:	
 10529  3000  3449               	retlw	73	;'I'
 10530  3001  3420               	retlw	32	;' '
 10531  3002  344C               	retlw	76	;'L'
 10532  3003  344F               	retlw	79	;'O'
 10533  3004  3456               	retlw	86	;'V'
 10534  3005  3445               	retlw	69	;'E'
 10535  3006  3420               	retlw	32	;' '
 10536  3007  3449               	retlw	73	;'I'
 10537  3008  3454               	retlw	84	;'T'
 10538  3009  342E               	retlw	46	;'.'
 10539  300A  3420               	retlw	32	;' '
 10540  300B  3445               	retlw	69	;'E'
 10541  300C  3453               	retlw	83	;'S'
 10542  300D  3450               	retlw	80	;'P'
 10543  300E  3445               	retlw	69	;'E'
 10544  300F  3443               	retlw	67	;'C'
 10545  3010  3449               	retlw	73	;'I'
 10546  3011  3441               	retlw	65	;'A'
 10547  3012  344C               	retlw	76	;'L'
 10548  3013  344C               	retlw	76	;'L'
 10549  3014  3459               	retlw	89	;'Y'
 10550  3015  3420               	retlw	32	;' '
 10551  3016  344C               	retlw	76	;'L'
 10552  3017  3441               	retlw	65	;'A'
 10553  3018  3454               	retlw	84	;'T'
 10554  3019  3445               	retlw	69	;'E'
 10555  301A  3452               	retlw	82	;'R'
 10556  301B  3420               	retlw	32	;' '
 10557  301C  3449               	retlw	73	;'I'
 10558  301D  344E               	retlw	78	;'N'
 10559  301E  3420               	retlw	32	;' '
 10560  301F  3454               	retlw	84	;'T'
 10561  3020  3448               	retlw	72	;'H'
 10562  3021  3445               	retlw	69	;'E'
 10563  3022  3420               	retlw	32	;' '
 10564  3023  3453               	retlw	83	;'S'
 10565  3024  3455               	retlw	85	;'U'
 10566  3025  344D               	retlw	77	;'M'
 10567  3026  344D               	retlw	77	;'M'
 10568  3027  3445               	retlw	69	;'E'
 10569  3028  3452               	retlw	82	;'R'
 10570  3029  3420               	retlw	32	;' '
 10571  302A  3420               	retlw	32	;' '
 10572  302B  3420               	retlw	32	;' '
 10573  302C  3420               	retlw	32	;' '
 10574  302D  3420               	retlw	32	;' '
 10575  302E  3400               	retlw	0
 10576                           
 10577                           	psect	stringtext4
 10578  3800                     __pstringtext4:	
 10579  3800                     STR_38:	
 10580  3800  3448               	retlw	72	;'H'
 10581  3801  3454               	retlw	84	;'T'
 10582  3802  3454               	retlw	84	;'T'
 10583  3803  3450               	retlw	80	;'P'
 10584  3804  3453               	retlw	83	;'S'
 10585  3805  343A               	retlw	58	;':'
 10586  3806  342F               	retlw	47	;'/'
 10587  3807  342F               	retlw	47	;'/'
 10588  3808  3447               	retlw	71	;'G'
 10589  3809  3449               	retlw	73	;'I'
 10590  380A  3454               	retlw	84	;'T'
 10591  380B  3448               	retlw	72	;'H'
 10592  380C  3455               	retlw	85	;'U'
 10593  380D  3442               	retlw	66	;'B'
 10594  380E  342E               	retlw	46	;'.'
 10595  380F  3443               	retlw	67	;'C'
 10596  3810  344F               	retlw	79	;'O'
 10597  3811  344D               	retlw	77	;'M'
 10598  3812  342F               	retlw	47	;'/'
 10599  3813  344E               	retlw	78	;'N'
 10600  3814  3455               	retlw	85	;'U'
 10601  3815  344C               	retlw	76	;'L'
 10602  3816  344C               	retlw	76	;'L'
 10603  3817  3449               	retlw	73	;'I'
 10604  3818  3442               	retlw	66	;'B'
 10605  3819  3441               	retlw	65	;'A'
 10606  381A  3444               	retlw	68	;'D'
 10607  381B  3447               	retlw	71	;'G'
 10608  381C  3445               	retlw	69	;'E'
 10609  381D  342F               	retlw	47	;'/'
 10610  381E  3444               	retlw	68	;'D'
 10611  381F  3445               	retlw	69	;'E'
 10612  3820  3446               	retlw	70	;'F'
 10613  3821  3443               	retlw	67	;'C'
 10614  3822  344F               	retlw	79	;'O'
 10615  3823  344E               	retlw	78	;'N'
 10616  3824  3432               	retlw	50	;'2'
 10617  3825  3435               	retlw	53	;'5'
 10618  3826  3420               	retlw	32	;' '
 10619  3827  3420               	retlw	32	;' '
 10620  3828  3420               	retlw	32	;' '
 10621  3829  3420               	retlw	32	;' '
 10622  382A  3400               	retlw	0
 10623                           
 10624                           	psect	stringtext5
 10625  382B                     __pstringtext5:	
 10626  382B                     STR_25:	
 10627  382B  3447               	retlw	71	;'G'
 10628  382C  3455               	retlw	85	;'U'
 10629  382D  3459               	retlw	89	;'Y'
 10630  382E  3453               	retlw	83	;'S'
 10631  382F  3420               	retlw	32	;' '
 10632  3830  3449               	retlw	73	;'I'
 10633  3831  3420               	retlw	32	;' '
 10634  3832  3448               	retlw	72	;'H'
 10635  3833  3441               	retlw	65	;'A'
 10636  3834  3456               	retlw	86	;'V'
 10637  3835  3445               	retlw	69	;'E'
 10638  3836  3420               	retlw	32	;' '
 10639  3837  3441               	retlw	65	;'A'
 10640  3838  3420               	retlw	32	;' '
 10641  3839  3447               	retlw	71	;'G'
 10642  383A  3452               	retlw	82	;'R'
 10643  383B  3445               	retlw	69	;'E'
 10644  383C  3441               	retlw	65	;'A'
 10645  383D  3454               	retlw	84	;'T'
 10646  383E  3420               	retlw	32	;' '
 10647  383F  3449               	retlw	73	;'I'
 10648  3840  3444               	retlw	68	;'D'
 10649  3841  3445               	retlw	69	;'E'
 10650  3842  3441               	retlw	65	;'A'
 10651  3843  3420               	retlw	32	;' '
 10652  3844  342D               	retlw	45	;'-'
 10653  3845  344D               	retlw	77	;'M'
 10654  3846  3449               	retlw	73	;'I'
 10655  3847  344B               	retlw	75	;'K'
 10656  3848  3445               	retlw	69	;'E'
 10657  3849  3420               	retlw	32	;' '
 10658  384A  344B               	retlw	75	;'K'
 10659  384B  342E               	retlw	46	;'.'
 10660  384C  3420               	retlw	32	;' '
 10661  384D  3420               	retlw	32	;' '
 10662  384E  3420               	retlw	32	;' '
 10663  384F  3420               	retlw	32	;' '
 10664  3850  3420               	retlw	32	;' '
 10665  3851  3420               	retlw	32	;' '
 10666  3852  3400               	retlw	0
 10667                           
 10668                           	psect	stringtext6
 10669  3853                     __pstringtext6:	
 10670  3853                     STR_21:	
 10671  3853  3441               	retlw	65	;'A'
 10672  3854  344C               	retlw	76	;'L'
 10673  3855  344C               	retlw	76	;'L'
 10674  3856  3420               	retlw	32	;' '
 10675  3857  3459               	retlw	89	;'Y'
 10676  3858  344F               	retlw	79	;'O'
 10677  3859  3455               	retlw	85	;'U'
 10678  385A  3452               	retlw	82	;'R'
 10679  385B  3420               	retlw	32	;' '
 10680  385C  3442               	retlw	66	;'B'
 10681  385D  3441               	retlw	65	;'A'
 10682  385E  3453               	retlw	83	;'S'
 10683  385F  3445               	retlw	69	;'E'
 10684  3860  3420               	retlw	32	;' '
 10685  3861  3441               	retlw	65	;'A'
 10686  3862  3452               	retlw	82	;'R'
 10687  3863  3445               	retlw	69	;'E'
 10688  3864  3420               	retlw	32	;' '
 10689  3865  3442               	retlw	66	;'B'
 10690  3866  3445               	retlw	69	;'E'
 10691  3867  344C               	retlw	76	;'L'
 10692  3868  344F               	retlw	79	;'O'
 10693  3869  344E               	retlw	78	;'N'
 10694  386A  3447               	retlw	71	;'G'
 10695  386B  3420               	retlw	32	;' '
 10696  386C  3454               	retlw	84	;'T'
 10697  386D  344F               	retlw	79	;'O'
 10698  386E  3420               	retlw	32	;' '
 10699  386F  3455               	retlw	85	;'U'
 10700  3870  3453               	retlw	83	;'S'
 10701  3871  3420               	retlw	32	;' '
 10702  3872  3420               	retlw	32	;' '
 10703  3873  3420               	retlw	32	;' '
 10704  3874  3420               	retlw	32	;' '
 10705  3875  3420               	retlw	32	;' '
 10706  3876  3400               	retlw	0
 10707                           
 10708                           	psect	stringtext7
 10709  3877                     __pstringtext7:	
 10710  3877                     STR_31:	
 10711  3877  3449               	retlw	73	;'I'
 10712  3878  3454               	retlw	84	;'T'
 10713  3879  3453               	retlw	83	;'S'
 10714  387A  3420               	retlw	32	;' '
 10715  387B  3441               	retlw	65	;'A'
 10716  387C  3420               	retlw	32	;' '
 10717  387D  3455               	retlw	85	;'U'
 10718  387E  344E               	retlw	78	;'N'
 10719  387F  3449               	retlw	73	;'I'
 10720  3880  3458               	retlw	88	;'X'
 10721  3881  3420               	retlw	32	;' '
 10722  3882  3453               	retlw	83	;'S'
 10723  3883  3459               	retlw	89	;'Y'
 10724  3884  3453               	retlw	83	;'S'
 10725  3885  3454               	retlw	84	;'T'
 10726  3886  3445               	retlw	69	;'E'
 10727  3887  344D               	retlw	77	;'M'
 10728  3888  3420               	retlw	32	;' '
 10729  3889  3420               	retlw	32	;' '
 10730  388A  3449               	retlw	73	;'I'
 10731  388B  3420               	retlw	32	;' '
 10732  388C  346B               	retlw	107	;'k'
 10733  388D  346E               	retlw	110	;'n'
 10734  388E  346F               	retlw	111	;'o'
 10735  388F  3477               	retlw	119	;'w'
 10736  3890  3420               	retlw	32	;' '
 10737  3891  3474               	retlw	116	;'t'
 10738  3892  3468               	retlw	104	;'h'
 10739  3893  3469               	retlw	105	;'i'
 10740  3894  3473               	retlw	115	;'s'
 10741  3895  3421               	retlw	33	;'!'
 10742  3896  3420               	retlw	32	;' '
 10743  3897  3420               	retlw	32	;' '
 10744  3898  3420               	retlw	32	;' '
 10745  3899  3400               	retlw	0
 10746                           
 10747                           	psect	stringtext8
 10748  389A                     __pstringtext8:	
 10749  389A                     STR_33:	
 10750  389A  3457               	retlw	87	;'W'
 10751  389B  344F               	retlw	79	;'O'
 10752  389C  3455               	retlw	85	;'U'
 10753  389D  344C               	retlw	76	;'L'
 10754  389E  3444               	retlw	68	;'D'
 10755  389F  3420               	retlw	32	;' '
 10756  38A0  3459               	retlw	89	;'Y'
 10757  38A1  344F               	retlw	79	;'O'
 10758  38A2  3455               	retlw	85	;'U'
 10759  38A3  3420               	retlw	32	;' '
 10760  38A4  344C               	retlw	76	;'L'
 10761  38A5  3449               	retlw	73	;'I'
 10762  38A6  344B               	retlw	75	;'K'
 10763  38A7  3445               	retlw	69	;'E'
 10764  38A8  3420               	retlw	32	;' '
 10765  38A9  3454               	retlw	84	;'T'
 10766  38AA  344F               	retlw	79	;'O'
 10767  38AB  3420               	retlw	32	;' '
 10768  38AC  3450               	retlw	80	;'P'
 10769  38AD  344C               	retlw	76	;'L'
 10770  38AE  3441               	retlw	65	;'A'
 10771  38AF  3459               	retlw	89	;'Y'
 10772  38B0  3420               	retlw	32	;' '
 10773  38B1  3441               	retlw	65	;'A'
 10774  38B2  3420               	retlw	32	;' '
 10775  38B3  3447               	retlw	71	;'G'
 10776  38B4  3441               	retlw	65	;'A'
 10777  38B5  344D               	retlw	77	;'M'
 10778  38B6  3445               	retlw	69	;'E'
 10779  38B7  343F               	retlw	63	;'?'
 10780  38B8  3420               	retlw	32	;' '
 10781  38B9  3420               	retlw	32	;' '
 10782  38BA  3420               	retlw	32	;' '
 10783  38BB  3400               	retlw	0
 10784                           
 10785                           	psect	stringtext9
 10786  38BC                     __pstringtext9:	
 10787  38BC                     STR_22:	
 10788  38BC  3444               	retlw	68	;'D'
 10789  38BD  344F               	retlw	79	;'O'
 10790  38BE  3445               	retlw	69	;'E'
 10791  38BF  3453               	retlw	83	;'S'
 10792  38C0  3420               	retlw	32	;' '
 10793  38C1  3444               	retlw	68	;'D'
 10794  38C2  3445               	retlw	69	;'E'
 10795  38C3  3456               	retlw	86	;'V'
 10796  38C4  3441               	retlw	65	;'A'
 10797  38C5  344E               	retlw	78	;'N'
 10798  38C6  3420               	retlw	32	;' '
 10799  38C7  3448               	retlw	72	;'H'
 10800  38C8  3441               	retlw	65	;'A'
 10801  38C9  3453               	retlw	83	;'S'
 10802  38CA  3420               	retlw	32	;' '
 10803  38CB  3448               	retlw	72	;'H'
 10804  38CC  3449               	retlw	73	;'I'
 10805  38CD  3453               	retlw	83	;'S'
 10806  38CE  3420               	retlw	32	;' '
 10807  38CF  3450               	retlw	80	;'P'
 10808  38D0  3448               	retlw	72	;'H'
 10809  38D1  344F               	retlw	79	;'O'
 10810  38D2  344E               	retlw	78	;'N'
 10811  38D3  3445               	retlw	69	;'E'
 10812  38D4  343F               	retlw	63	;'?'
 10813  38D5  3420               	retlw	32	;' '
 10814  38D6  3420               	retlw	32	;' '
 10815  38D7  3420               	retlw	32	;' '
 10816  38D8  3420               	retlw	32	;' '
 10817  38D9  3400               	retlw	0
 10818                           
 10819                           	psect	stringtext10
 10820  38DA                     __pstringtext10:	
 10821  38DA                     STR_28:	
 10822  38DA  344E               	retlw	78	;'N'
 10823  38DB  3443               	retlw	67	;'C'
 10824  38DC  3420               	retlw	32	;' '
 10825  38DD  342D               	retlw	45	;'-'
 10826  38DE  3445               	retlw	69	;'E'
 10827  38DF  3420               	retlw	32	;' '
 10828  38E0  342F               	retlw	47	;'/'
 10829  38E1  3442               	retlw	66	;'B'
 10830  38E2  3449               	retlw	73	;'I'
 10831  38E3  344E               	retlw	78	;'N'
 10832  38E4  342F               	retlw	47	;'/'
 10833  38E5  3442               	retlw	66	;'B'
 10834  38E6  3441               	retlw	65	;'A'
 10835  38E7  3453               	retlw	83	;'S'
 10836  38E8  3448               	retlw	72	;'H'
 10837  38E9  3420               	retlw	32	;' '
 10838  38EA  342D               	retlw	45	;'-'
 10839  38EB  344C               	retlw	76	;'L'
 10840  38EC  3450               	retlw	80	;'P'
 10841  38ED  3420               	retlw	32	;' '
 10842  38EE  3431               	retlw	49	;'1'
 10843  38EF  3433               	retlw	51	;'3'
 10844  38F0  3433               	retlw	51	;'3'
 10845  38F1  3437               	retlw	55	;'7'
 10846  38F2  3420               	retlw	32	;' '
 10847  38F3  3420               	retlw	32	;' '
 10848  38F4  3420               	retlw	32	;' '
 10849  38F5  3420               	retlw	32	;' '
 10850  38F6  3400               	retlw	0
 10851                           
 10852                           	psect	stringtext11
 10853  38F7                     __pstringtext11:	
 10854  38F7                     STR_23:	
 10855  38F7  3459               	retlw	89	;'Y'
 10856  38F8  344F               	retlw	79	;'O'
 10857  38F9  3455               	retlw	85	;'U'
 10858  38FA  3420               	retlw	32	;' '
 10859  38FB  344A               	retlw	74	;'J'
 10860  38FC  3455               	retlw	85	;'U'
 10861  38FD  3453               	retlw	83	;'S'
 10862  38FE  3454               	retlw	84	;'T'
 10863  38FF  3420               	retlw	32	;' '
 10864  3900  3448               	retlw	72	;'H'
 10865  3901  3441               	retlw	65	;'A'
 10866  3902  3456               	retlw	86	;'V'
 10867  3903  3445               	retlw	69	;'E'
 10868  3904  3420               	retlw	32	;' '
 10869  3905  3454               	retlw	84	;'T'
 10870  3906  344F               	retlw	79	;'O'
 10871  3907  3420               	retlw	32	;' '
 10872  3908  3442               	retlw	66	;'B'
 10873  3909  3445               	retlw	69	;'E'
 10874  390A  344C               	retlw	76	;'L'
 10875  390B  3449               	retlw	73	;'I'
 10876  390C  3445               	retlw	69	;'E'
 10877  390D  3456               	retlw	86	;'V'
 10878  390E  3445               	retlw	69	;'E'
 10879  390F  3420               	retlw	32	;' '
 10880  3910  3420               	retlw	32	;' '
 10881  3911  3420               	retlw	32	;' '
 10882  3912  3420               	retlw	32	;' '
 10883  3913  3400               	retlw	0
 10884                           
 10885                           	psect	stringtext12
 10886  3914                     __pstringtext12:	
 10887  3914                     STR_20:	
 10888  3914  3449               	retlw	73	;'I'
 10889  3915  3420               	retlw	32	;' '
 10890  3916  3443               	retlw	67	;'C'
 10891  3917  3441               	retlw	65	;'A'
 10892  3918  344E               	retlw	78	;'N'
 10893  3919  3420               	retlw	32	;' '
 10894  391A  3442               	retlw	66	;'B'
 10895  391B  3452               	retlw	82	;'R'
 10896  391C  3445               	retlw	69	;'E'
 10897  391D  3441               	retlw	65	;'A'
 10898  391E  344B               	retlw	75	;'K'
 10899  391F  3420               	retlw	32	;' '
 10900  3920  3454               	retlw	84	;'T'
 10901  3921  3448               	retlw	72	;'H'
 10902  3922  3441               	retlw	65	;'A'
 10903  3923  3454               	retlw	84	;'T'
 10904  3924  3420               	retlw	32	;' '
 10905  3925  3446               	retlw	70	;'F'
 10906  3926  344F               	retlw	79	;'O'
 10907  3927  3452               	retlw	82	;'R'
 10908  3928  3420               	retlw	32	;' '
 10909  3929  3459               	retlw	89	;'Y'
 10910  392A  344F               	retlw	79	;'O'
 10911  392B  3455               	retlw	85	;'U'
 10912  392C  3420               	retlw	32	;' '
 10913  392D  3420               	retlw	32	;' '
 10914  392E  3420               	retlw	32	;' '
 10915  392F  3400               	retlw	0
 10916                           
 10917                           	psect	stringtext13
 10918  3930                     __pstringtext13:	
 10919  3930                     STR_80:	
 10920  3930  3459               	retlw	89	;'Y'
 10921  3931  344F               	retlw	79	;'O'
 10922  3932  3455               	retlw	85	;'U'
 10923  3933  3420               	retlw	32	;' '
 10924  3934  3453               	retlw	83	;'S'
 10925  3935  3454               	retlw	84	;'T'
 10926  3936  3441               	retlw	65	;'A'
 10927  3937  3459               	retlw	89	;'Y'
 10928  3938  3420               	retlw	32	;' '
 10929  3939  3449               	retlw	73	;'I'
 10930  393A  344E               	retlw	78	;'N'
 10931  393B  3420               	retlw	32	;' '
 10932  393C  3457               	retlw	87	;'W'
 10933  393D  344F               	retlw	79	;'O'
 10934  393E  344E               	retlw	78	;'N'
 10935  393F  3444               	retlw	68	;'D'
 10936  3940  3445               	retlw	69	;'E'
 10937  3941  3452               	retlw	82	;'R'
 10938  3942  344C               	retlw	76	;'L'
 10939  3943  3441               	retlw	65	;'A'
 10940  3944  344E               	retlw	78	;'N'
 10941  3945  3444               	retlw	68	;'D'
 10942  3946  3420               	retlw	32	;' '
 10943  3947  3420               	retlw	32	;' '
 10944  3948  3420               	retlw	32	;' '
 10945  3949  3420               	retlw	32	;' '
 10946  394A  3400               	retlw	0
 10947                           
 10948                           	psect	stringtext14
 10949  394B                     __pstringtext14:	
 10950  394B                     STR_24:	
 10951  394B  344E               	retlw	78	;'N'
 10952  394C  344F               	retlw	79	;'O'
 10953  394D  3454               	retlw	84	;'T'
 10954  394E  3448               	retlw	72	;'H'
 10955  394F  3449               	retlw	73	;'I'
 10956  3950  344E               	retlw	78	;'N'
 10957  3951  3447               	retlw	71	;'G'
 10958  3952  3420               	retlw	32	;' '
 10959  3953  3454               	retlw	84	;'T'
 10960  3954  344F               	retlw	79	;'O'
 10961  3955  3420               	retlw	32	;' '
 10962  3956  3453               	retlw	83	;'S'
 10963  3957  3445               	retlw	69	;'E'
 10964  3958  3445               	retlw	69	;'E'
 10965  3959  3420               	retlw	32	;' '
 10966  395A  3448               	retlw	72	;'H'
 10967  395B  3445               	retlw	69	;'E'
 10968  395C  3452               	retlw	82	;'R'
 10969  395D  3445               	retlw	69	;'E'
 10970  395E  342E               	retlw	46	;'.'
 10971  395F  342E               	retlw	46	;'.'
 10972  3960  342E               	retlw	46	;'.'
 10973  3961  3420               	retlw	32	;' '
 10974  3962  3420               	retlw	32	;' '
 10975  3963  3420               	retlw	32	;' '
 10976  3964  3420               	retlw	32	;' '
 10977  3965  3400               	retlw	0
 10978                           
 10979                           	psect	stringtext15
 10980  3966                     __pstringtext15:	
 10981  3966                     STR_17:	
 10982  3966  3448               	retlw	72	;'H'
 10983  3967  3454               	retlw	84	;'T'
 10984  3968  3454               	retlw	84	;'T'
 10985  3969  3450               	retlw	80	;'P'
 10986  396A  3420               	retlw	32	;' '
 10987  396B  3434               	retlw	52	;'4'
 10988  396C  3431               	retlw	49	;'1'
 10989  396D  3438               	retlw	56	;'8'
 10990  396E  3420               	retlw	32	;' '
 10991  396F  3449               	retlw	73	;'I'
 10992  3970  3427               	retlw	39	;'''
 10993  3971  344D               	retlw	77	;'M'
 10994  3972  3420               	retlw	32	;' '
 10995  3973  3441               	retlw	65	;'A'
 10996  3974  3420               	retlw	32	;' '
 10997  3975  3454               	retlw	84	;'T'
 10998  3976  3445               	retlw	69	;'E'
 10999  3977  3441               	retlw	65	;'A'
 11000  3978  3450               	retlw	80	;'P'
 11001  3979  344F               	retlw	79	;'O'
 11002  397A  3454               	retlw	84	;'T'
 11003  397B  3420               	retlw	32	;' '
 11004  397C  3420               	retlw	32	;' '
 11005  397D  3420               	retlw	32	;' '
 11006  397E  3420               	retlw	32	;' '
 11007  397F  3400               	retlw	0
 11008                           
 11009                           	psect	stringtext16
 11010  3980                     __pstringtext16:	
 11011  3980                     STR_81:	
 11012  3980  3454               	retlw	84	;'T'
 11013  3981  3448               	retlw	72	;'H'
 11014  3982  3445               	retlw	69	;'E'
 11015  3983  3420               	retlw	32	;' '
 11016  3984  3443               	retlw	67	;'C'
 11017  3985  3448               	retlw	72	;'H'
 11018  3986  344F               	retlw	79	;'O'
 11019  3987  3449               	retlw	73	;'I'
 11020  3988  3443               	retlw	67	;'C'
 11021  3989  3445               	retlw	69	;'E'
 11022  398A  3420               	retlw	32	;' '
 11023  398B  3449               	retlw	73	;'I'
 11024  398C  3453               	retlw	83	;'S'
 11025  398D  3420               	retlw	32	;' '
 11026  398E  3459               	retlw	89	;'Y'
 11027  398F  344F               	retlw	79	;'O'
 11028  3990  3455               	retlw	85	;'U'
 11029  3991  3452               	retlw	82	;'R'
 11030  3992  3453               	retlw	83	;'S'
 11031  3993  3420               	retlw	32	;' '
 11032  3994  3420               	retlw	32	;' '
 11033  3995  3420               	retlw	32	;' '
 11034  3996  3400               	retlw	0
 11035                           
 11036                           	psect	stringtext17
 11037  3997                     __pstringtext17:	
 11038  3997                     STR_19:	
 11039  3997  3449               	retlw	73	;'I'
 11040  3998  3420               	retlw	32	;' '
 11041  3999  3441               	retlw	65	;'A'
 11042  399A  344D               	retlw	77	;'M'
 11043  399B  3420               	retlw	32	;' '
 11044  399C  344A               	retlw	74	;'J'
 11045  399D  3455               	retlw	85	;'U'
 11046  399E  3453               	retlw	83	;'S'
 11047  399F  3454               	retlw	84	;'T'
 11048  39A0  3420               	retlw	32	;' '
 11049  39A1  3441               	retlw	65	;'A'
 11050  39A2  3420               	retlw	32	;' '
 11051  39A3  3442               	retlw	66	;'B'
 11052  39A4  3441               	retlw	65	;'A'
 11053  39A5  3444               	retlw	68	;'D'
 11054  39A6  3447               	retlw	71	;'G'
 11055  39A7  3445               	retlw	69	;'E'
 11056  39A8  3420               	retlw	32	;' '
 11057  39A9  3420               	retlw	32	;' '
 11058  39AA  3420               	retlw	32	;' '
 11059  39AB  3420               	retlw	32	;' '
 11060  39AC  3400               	retlw	0
 11061                           
 11062                           	psect	stringtext18
 11063  39AD                     __pstringtext18:	
 11064  39AD                     STR_16:	
 11065  39AD  3457               	retlw	87	;'W'
 11066  39AE  3449               	retlw	73	;'I'
 11067  39AF  344C               	retlw	76	;'L'
 11068  39B0  344C               	retlw	76	;'L'
 11069  39B1  3420               	retlw	32	;' '
 11070  39B2  3448               	retlw	72	;'H'
 11071  39B3  3441               	retlw	65	;'A'
 11072  39B4  3443               	retlw	67	;'C'
 11073  39B5  344B               	retlw	75	;'K'
 11074  39B6  3420               	retlw	32	;' '
 11075  39B7  3446               	retlw	70	;'F'
 11076  39B8  344F               	retlw	79	;'O'
 11077  39B9  3452               	retlw	82	;'R'
 11078  39BA  3420               	retlw	32	;' '
 11079  39BB  3441               	retlw	65	;'A'
 11080  39BC  342F               	retlw	47	;'/'
 11081  39BD  3443               	retlw	67	;'C'
 11082  39BE  3420               	retlw	32	;' '
 11083  39BF  3420               	retlw	32	;' '
 11084  39C0  3420               	retlw	32	;' '
 11085  39C1  3400               	retlw	0
 11086                           
 11087                           	psect	stringtext19
 11088  39C2                     __pstringtext19:	
 11089  39C2                     STR_27:	
 11090  39C2  3442               	retlw	66	;'B'
 11091  39C3  3445               	retlw	69	;'E'
 11092  39C4  344C               	retlw	76	;'L'
 11093  39C5  3449               	retlw	73	;'I'
 11094  39C6  3445               	retlw	69	;'E'
 11095  39C7  3456               	retlw	86	;'V'
 11096  39C8  3445               	retlw	69	;'E'
 11097  39C9  3420               	retlw	32	;' '
 11098  39CA  3454               	retlw	84	;'T'
 11099  39CB  3448               	retlw	72	;'H'
 11100  39CC  3445               	retlw	69	;'E'
 11101  39CD  3420               	retlw	32	;' '
 11102  39CE  344C               	retlw	76	;'L'
 11103  39CF  3449               	retlw	73	;'I'
 11104  39D0  3445               	retlw	69	;'E'
 11105  39D1  3420               	retlw	32	;' '
 11106  39D2  3420               	retlw	32	;' '
 11107  39D3  3420               	retlw	32	;' '
 11108  39D4  3400               	retlw	0
 11109                           
 11110                           	psect	stringtext20
 11111  39D5                     __pstringtext20:	
 11112  39D5                     STR_15:	
 11113  39D5  3448               	retlw	72	;'H'
 11114  39D6  3441               	retlw	65	;'A'
 11115  39D7  3443               	retlw	67	;'C'
 11116  39D8  344B               	retlw	75	;'K'
 11117  39D9  3420               	retlw	32	;' '
 11118  39DA  3454               	retlw	84	;'T'
 11119  39DB  3448               	retlw	72	;'H'
 11120  39DC  3445               	retlw	69	;'E'
 11121  39DD  3420               	retlw	32	;' '
 11122  39DE  3450               	retlw	80	;'P'
 11123  39DF  344C               	retlw	76	;'L'
 11124  39E0  3441               	retlw	65	;'A'
 11125  39E1  344E               	retlw	78	;'N'
 11126  39E2  3445               	retlw	69	;'E'
 11127  39E3  3454               	retlw	84	;'T'
 11128  39E4  3420               	retlw	32	;' '
 11129  39E5  3420               	retlw	32	;' '
 11130  39E6  3420               	retlw	32	;' '
 11131  39E7  3400               	retlw	0
 11132                           
 11133                           	psect	stringtext21
 11134  39E8                     __pstringtext21:	
 11135  39E8                     STR_10:	
 11136  39E8  3405               	retlw	5
 11137  39E9  3407               	retlw	7
 11138  39EA  3407               	retlw	7
 11139  39EB  3408               	retlw	8
 11140  39EC  342D               	retlw	45	;'-'
 11141  39ED  342D               	retlw	45	;'-'
 11142  39EE  3420               	retlw	32	;' '
 11143  39EF  3420               	retlw	32	;' '
 11144  39F0  342D               	retlw	45	;'-'
 11145  39F1  342D               	retlw	45	;'-'
 11146  39F2  3409               	retlw	9
 11147  39F3  3407               	retlw	7
 11148  39F4  3407               	retlw	7
 11149  39F5  3406               	retlw	6
 11150  39F6  3420               	retlw	32	;' '
 11151  39F7  340B               	retlw	11
 11152  39F8  3420               	retlw	32	;' '
 11153  39F9  3400               	retlw	0
 11154                           
 11155                           	psect	stringtext22
 11156  39FA                     __pstringtext22:	
 11157  39FA                     STR_26:	
 11158  39FA  3464               	retlw	100	;'d'
 11159  39FB  3465               	retlw	101	;'e'
 11160  39FC  346E               	retlw	110	;'n'
 11161  39FD  3479               	retlw	121	;'y'
 11162  39FE  3420               	retlw	32	;' '
 11163  39FF  3461               	retlw	97	;'a'
 11164  3A00  346E               	retlw	110	;'n'
 11165  3A01  3479               	retlw	121	;'y'
 11166  3A02  3420               	retlw	32	;' '
 11167  3A03  3461               	retlw	97	;'a'
 11168  3A04  346E               	retlw	110	;'n'
 11169  3A05  3479               	retlw	121	;'y'
 11170  3A06  3420               	retlw	32	;' '
 11171  3A07  3420               	retlw	32	;' '
 11172  3A08  3420               	retlw	32	;' '
 11173  3A09  3420               	retlw	32	;' '
 11174  3A0A  3400               	retlw	0
 11175                           
 11176                           	psect	stringtext23
 11177  3A0B                     __pstringtext23:	
 11178  3A0B                     STR_35:	
 11179  3A0B  3442               	retlw	66	;'B'
 11180  3A0C  3455               	retlw	85	;'U'
 11181  3A0D  3454               	retlw	84	;'T'
 11182  3A0E  3454               	retlw	84	;'T'
 11183  3A0F  3445               	retlw	69	;'E'
 11184  3A10  3452               	retlw	82	;'R'
 11185  3A11  3420               	retlw	32	;' '
 11186  3A12  3445               	retlw	69	;'E'
 11187  3A13  344D               	retlw	77	;'M'
 11188  3A14  3441               	retlw	65	;'A'
 11189  3A15  3449               	retlw	73	;'I'
 11190  3A16  344C               	retlw	76	;'L'
 11191  3A17  3453               	retlw	83	;'S'
 11192  3A18  3420               	retlw	32	;' '
 11193  3A19  3420               	retlw	32	;' '
 11194  3A1A  3420               	retlw	32	;' '
 11195  3A1B  3400               	retlw	0
 11196                           
 11197                           	psect	stringtext24
 11198  3A1C                     __pstringtext24:	
 11199  3A1C                     STR_32:	
 11200  3A1C  3454               	retlw	84	;'T'
 11201  3A1D  3452               	retlw	82	;'R'
 11202  3A1E  3455               	retlw	85	;'U'
 11203  3A1F  3453               	retlw	83	;'S'
 11204  3A20  3454               	retlw	84	;'T'
 11205  3A21  3420               	retlw	32	;' '
 11206  3A22  344E               	retlw	78	;'N'
 11207  3A23  344F               	retlw	79	;'O'
 11208  3A24  3420               	retlw	32	;' '
 11209  3A25  344F               	retlw	79	;'O'
 11210  3A26  344E               	retlw	78	;'N'
 11211  3A27  3445               	retlw	69	;'E'
 11212  3A28  3420               	retlw	32	;' '
 11213  3A29  3420               	retlw	32	;' '
 11214  3A2A  3420               	retlw	32	;' '
 11215  3A2B  3400               	retlw	0
 11216                           
 11217                           	psect	stringtext25
 11218  3A2C                     __pstringtext25:	
 11219  3A2C                     STR_30:	
 11220  3A2C  3448               	retlw	72	;'H'
 11221  3A2D  3449               	retlw	73	;'I'
 11222  3A2E  3453               	retlw	83	;'S'
 11223  3A2F  3454               	retlw	84	;'T'
 11224  3A30  344F               	retlw	79	;'O'
 11225  3A31  3452               	retlw	82	;'R'
 11226  3A32  3459               	retlw	89	;'Y'
 11227  3A33  3420               	retlw	32	;' '
 11228  3A34  342D               	retlw	45	;'-'
 11229  3A35  3443               	retlw	67	;'C'
 11230  3A36  3457               	retlw	87	;'W'
 11231  3A37  3420               	retlw	32	;' '
 11232  3A38  3420               	retlw	32	;' '
 11233  3A39  3420               	retlw	32	;' '
 11234  3A3A  3400               	retlw	0
 11235                           
 11236                           	psect	stringtext26
 11237  3A3B                     __pstringtext26:	
 11238  3A3B                     STR_62:	
 11239  3A3B  3446               	retlw	70	;'F'
 11240  3A3C  3449               	retlw	73	;'I'
 11241  3A3D  3452               	retlw	82	;'R'
 11242  3A3E  3445               	retlw	69	;'E'
 11243  3A3F  3420               	retlw	32	;' '
 11244  3A40  3442               	retlw	66	;'B'
 11245  3A41  3441               	retlw	65	;'A'
 11246  3A42  344C               	retlw	76	;'L'
 11247  3A43  344C               	retlw	76	;'L'
 11248  3A44  3420               	retlw	32	;' '
 11249  3A45  3420               	retlw	32	;' '
 11250  3A46  3420               	retlw	32	;' '
 11251  3A47  3400               	retlw	0
 11252                           
 11253                           	psect	stringtext27
 11254  3A48                     __pstringtext27:	
 11255  3A48                     STR_42:	
 11256  3A48  3455               	retlw	85	;'U'
 11257  3A49  344E               	retlw	78	;'N'
 11258  3A4A  344C               	retlw	76	;'L'
 11259  3A4B  344F               	retlw	79	;'O'
 11260  3A4C  3443               	retlw	67	;'C'
 11261  3A4D  344B               	retlw	75	;'K'
 11262  3A4E  3449               	retlw	73	;'I'
 11263  3A4F  344E               	retlw	78	;'N'
 11264  3A50  3447               	retlw	71	;'G'
 11265  3A51  342E               	retlw	46	;'.'
 11266  3A52  342E               	retlw	46	;'.'
 11267  3A53  342E               	retlw	46	;'.'
 11268  3A54  3400               	retlw	0
 11269                           
 11270                           	psect	stringtext28
 11271  3A55                     __pstringtext28:	
 11272  3A55                     STR_37:	
 11273  3A55  3442               	retlw	66	;'B'
 11274  3A56  3441               	retlw	65	;'A'
 11275  3A57  3442               	retlw	66	;'B'
 11276  3A58  3441               	retlw	65	;'A'
 11277  3A59  3420               	retlw	32	;' '
 11278  3A5A  3457               	retlw	87	;'W'
 11279  3A5B  3445               	retlw	69	;'E'
 11280  3A5C  3452               	retlw	82	;'R'
 11281  3A5D  344B               	retlw	75	;'K'
 11282  3A5E  3420               	retlw	32	;' '
 11283  3A5F  3420               	retlw	32	;' '
 11284  3A60  3420               	retlw	32	;' '
 11285  3A61  3400               	retlw	0
 11286                           
 11287                           	psect	stringtext29
 11288  3A62                     __pstringtext29:	
 11289  3A62                     STR_61:	
 11290  3A62  3452               	retlw	82	;'R'
 11291  3A63  3445               	retlw	69	;'E'
 11292  3A64  3444               	retlw	68	;'D'
 11293  3A65  3420               	retlw	32	;' '
 11294  3A66  3442               	retlw	66	;'B'
 11295  3A67  3455               	retlw	85	;'U'
 11296  3A68  344C               	retlw	76	;'L'
 11297  3A69  344C               	retlw	76	;'L'
 11298  3A6A  3420               	retlw	32	;' '
 11299  3A6B  3420               	retlw	32	;' '
 11300  3A6C  3420               	retlw	32	;' '
 11301  3A6D  3400               	retlw	0
 11302                           
 11303                           	psect	stringtext30
 11304  3A6E                     __pstringtext30:	
 11305  3A6E                     STR_29:	
 11306  3A6E  3452               	retlw	82	;'R'
 11307  3A6F  344D               	retlw	77	;'M'
 11308  3A70  3420               	retlw	32	;' '
 11309  3A71  342D               	retlw	45	;'-'
 11310  3A72  3452               	retlw	82	;'R'
 11311  3A73  3446               	retlw	70	;'F'
 11312  3A74  3420               	retlw	32	;' '
 11313  3A75  342F               	retlw	47	;'/'
 11314  3A76  3420               	retlw	32	;' '
 11315  3A77  3420               	retlw	32	;' '
 11316  3A78  3420               	retlw	32	;' '
 11317  3A79  3400               	retlw	0
 11318                           
 11319                           	psect	stringtext31
 11320  3A7A                     __pstringtext31:	
 11321  3A7A                     STR_59:	
 11322  3A7A  3454               	retlw	84	;'T'
 11323  3A7B  3445               	retlw	69	;'E'
 11324  3A7C  3451               	retlw	81	;'Q'
 11325  3A7D  3455               	retlw	85	;'U'
 11326  3A7E  3449               	retlw	73	;'I'
 11327  3A7F  344C               	retlw	76	;'L'
 11328  3A80  3441               	retlw	65	;'A'
 11329  3A81  3420               	retlw	32	;' '
 11330  3A82  3420               	retlw	32	;' '
 11331  3A83  3420               	retlw	32	;' '
 11332  3A84  3400               	retlw	0
 11333                           
 11334                           	psect	stringtext32
 11335  3A85                     __pstringtext32:	
 11336  3A85                     STR_58:	
 11337  3A85  3457               	retlw	87	;'W'
 11338  3A86  3448               	retlw	72	;'H'
 11339  3A87  3449               	retlw	73	;'I'
 11340  3A88  3453               	retlw	83	;'S'
 11341  3A89  344B               	retlw	75	;'K'
 11342  3A8A  3445               	retlw	69	;'E'
 11343  3A8B  3459               	retlw	89	;'Y'
 11344  3A8C  3420               	retlw	32	;' '
 11345  3A8D  3420               	retlw	32	;' '
 11346  3A8E  3420               	retlw	32	;' '
 11347  3A8F  3400               	retlw	0
 11348                           
 11349                           	psect	stringtext33
 11350  3A90                     __pstringtext33:	
 11351  3A90                     STR_75:	
 11352  3A90  3420               	retlw	32	;' '
 11353  3A91  3420               	retlw	32	;' '
 11354  3A92  3442               	retlw	66	;'B'
 11355  3A93  3449               	retlw	73	;'I'
 11356  3A94  3454               	retlw	84	;'T'
 11357  3A95  3420               	retlw	32	;' '
 11358  3A96  344E               	retlw	78	;'N'
 11359  3A97  3420               	retlw	32	;' '
 11360  3A98  3420               	retlw	32	;' '
 11361  3A99  3400               	retlw	0
 11362                           
 11363                           	psect	stringtext34
 11364  3A9A                     __pstringtext34:	
 11365  3A9A                     STR_6:	
 11366  3A9A  3450               	retlw	80	;'P'
 11367  3A9B  3441               	retlw	65	;'A'
 11368  3A9C  3453               	retlw	83	;'S'
 11369  3A9D  3453               	retlw	83	;'S'
 11370  3A9E  3457               	retlw	87	;'W'
 11371  3A9F  344F               	retlw	79	;'O'
 11372  3AA0  3452               	retlw	82	;'R'
 11373  3AA1  3444               	retlw	68	;'D'
 11374  3AA2  3420               	retlw	32	;' '
 11375  3AA3  3400               	retlw	0
 11376                           
 11377                           	psect	stringtext35
 11378  3AA4                     __pstringtext35:	
 11379  3AA4                     STR_72:	
 11380  3AA4  3420               	retlw	32	;' '
 11381  3AA5  3454               	retlw	84	;'T'
 11382  3AA6  3448               	retlw	72	;'H'
 11383  3AA7  3445               	retlw	69	;'E'
 11384  3AA8  3420               	retlw	32	;' '
 11385  3AA9  3457               	retlw	87	;'W'
 11386  3AAA  3448               	retlw	72	;'H'
 11387  3AAB  3420               	retlw	32	;' '
 11388  3AAC  3400               	retlw	0
 11389                           
 11390                           	psect	stringtext36
 11391  3AAD                     __pstringtext36:	
 11392  3AAD                     STR_57:	
 11393  3AAD  3456               	retlw	86	;'V'
 11394  3AAE  344F               	retlw	79	;'O'
 11395  3AAF  3444               	retlw	68	;'D'
 11396  3AB0  344B               	retlw	75	;'K'
 11397  3AB1  3441               	retlw	65	;'A'
 11398  3AB2  3420               	retlw	32	;' '
 11399  3AB3  3420               	retlw	32	;' '
 11400  3AB4  3420               	retlw	32	;' '
 11401  3AB5  3400               	retlw	0
 11402                           
 11403                           	psect	stringtext37
 11404  3AB6                     __pstringtext37:	
 11405  3AB6                     STR_63:	
 11406  3AB6  3457               	retlw	87	;'W'
 11407  3AB7  3441               	retlw	65	;'A'
 11408  3AB8  3454               	retlw	84	;'T'
 11409  3AB9  3445               	retlw	69	;'E'
 11410  3ABA  3452               	retlw	82	;'R'
 11411  3ABB  3420               	retlw	32	;' '
 11412  3ABC  3420               	retlw	32	;' '
 11413  3ABD  3420               	retlw	32	;' '
 11414  3ABE  3400               	retlw	0
 11415                           
 11416                           	psect	stringtext38
 11417  3ABF                     __pstringtext38:	
 11418  3ABF                     STR_64:	
 11419  3ABF  3425               	retlw	37	;'%'
 11420  3AC0  3463               	retlw	99	;'c'
 11421  3AC1  3425               	retlw	37	;'%'
 11422  3AC2  3463               	retlw	99	;'c'
 11423  3AC3  3425               	retlw	37	;'%'
 11424  3AC4  3463               	retlw	99	;'c'
 11425  3AC5  3425               	retlw	37	;'%'
 11426  3AC6  3463               	retlw	99	;'c'
 11427  3AC7  3400               	retlw	0
 11428                           
 11429                           	psect	stringtext39
 11430  3AC8                     __pstringtext39:	
 11431  3AC8                     STR_12:	
 11432  3AC8  344E               	retlw	78	;'N'
 11433  3AC9  3455               	retlw	85	;'U'
 11434  3ACA  344C               	retlw	76	;'L'
 11435  3ACB  344C               	retlw	76	;'L'
 11436  3ACC  3449               	retlw	73	;'I'
 11437  3ACD  3446               	retlw	70	;'F'
 11438  3ACE  3459               	retlw	89	;'Y'
 11439  3ACF  3420               	retlw	32	;' '
 11440  3AD0  3400               	retlw	0
 11441                           
 11442                           	psect	stringtext40
 11443  3AD1                     __pstringtext40:	
 11444  3AD1                     STR_77:	
 11445  3AD1  3450               	retlw	80	;'P'
 11446  3AD2  344F               	retlw	79	;'O'
 11447  3AD3  3454               	retlw	84	;'T'
 11448  3AD4  3441               	retlw	65	;'A'
 11449  3AD5  3454               	retlw	84	;'T'
 11450  3AD6  3420               	retlw	32	;' '
 11451  3AD7  3420               	retlw	32	;' '
 11452  3AD8  3400               	retlw	0
 11453                           
 11454                           	psect	stringtext41
 11455  3AD9                     __pstringtext41:	
 11456  3AD9                     STR_79:	
 11457  3AD9  3420               	retlw	32	;' '
 11458  3ADA  3420               	retlw	32	;' '
 11459  3ADB  3454               	retlw	84	;'T'
 11460  3ADC  3445               	retlw	69	;'E'
 11461  3ADD  3459               	retlw	89	;'Y'
 11462  3ADE  3420               	retlw	32	;' '
 11463  3ADF  3420               	retlw	32	;' '
 11464  3AE0  3400               	retlw	0
 11465                           
 11466                           	psect	stringtext42
 11467  3AE1                     __pstringtext42:	
 11468  3AE1                     STR_60:	
 11469  3AE1  3443               	retlw	67	;'C'
 11470  3AE2  3448               	retlw	72	;'H'
 11471  3AE3  3455               	retlw	85	;'U'
 11472  3AE4  3447               	retlw	71	;'G'
 11473  3AE5  3420               	retlw	32	;' '
 11474  3AE6  3420               	retlw	32	;' '
 11475  3AE7  3420               	retlw	32	;' '
 11476  3AE8  3400               	retlw	0
 11477                           
 11478                           	psect	stringtext43
 11479  3AE9                     __pstringtext43:	
 11480  3AE9                     STR_56:	
 11481  3AE9  3442               	retlw	66	;'B'
 11482  3AEA  3445               	retlw	69	;'E'
 11483  3AEB  3445               	retlw	69	;'E'
 11484  3AEC  3452               	retlw	82	;'R'
 11485  3AED  3420               	retlw	32	;' '
 11486  3AEE  3420               	retlw	32	;' '
 11487  3AEF  3420               	retlw	32	;' '
 11488  3AF0  3400               	retlw	0
 11489                           
 11490                           	psect	stringtext44
 11491  3AF1                     __pstringtext44:	
 11492  3AF1                     STR_55:	
 11493  3AF1  3453               	retlw	83	;'S'
 11494  3AF2  3448               	retlw	72	;'H'
 11495  3AF3  344F               	retlw	79	;'O'
 11496  3AF4  3454               	retlw	84	;'T'
 11497  3AF5  3420               	retlw	32	;' '
 11498  3AF6  3420               	retlw	32	;' '
 11499  3AF7  3420               	retlw	32	;' '
 11500  3AF8  3400               	retlw	0
 11501                           
 11502                           	psect	stringtext45
 11503  3AF9                     __pstringtext45:	
 11504  3AF9                     STR_18:	
 11505  3AF9  3449               	retlw	73	;'I'
 11506  3AFA  3450               	retlw	80	;'P'
 11507  3AFB  346F               	retlw	111	;'o'
 11508  3AFC  3441               	retlw	65	;'A'
 11509  3AFD  3443               	retlw	67	;'C'
 11510  3AFE  3420               	retlw	32	;' '
 11511  3AFF  3420               	retlw	32	;' '
 11512  3B00  3400               	retlw	0
 11513                           
 11514                           	psect	stringtext46
 11515  3B01                     __pstringtext46:	
 11516  3B01                     STR_13:	
 11517  3B01  3444               	retlw	68	;'D'
 11518  3B02  3445               	retlw	69	;'E'
 11519  3B03  3446               	retlw	70	;'F'
 11520  3B04  3443               	retlw	67	;'C'
 11521  3B05  344F               	retlw	79	;'O'
 11522  3B06  344E               	retlw	78	;'N'
 11523  3B07  3420               	retlw	32	;' '
 11524  3B08  3400               	retlw	0
 11525                           
 11526                           	psect	stringtext47
 11527  3B09                     __pstringtext47:	
 11528  3B09                     STR_7:	
 11529  3B09  344D               	retlw	77	;'M'
 11530  3B0A  3441               	retlw	65	;'A'
 11531  3B0B  3454               	retlw	84	;'T'
 11532  3B0C  3452               	retlw	82	;'R'
 11533  3B0D  3449               	retlw	73	;'I'
 11534  3B0E  3458               	retlw	88	;'X'
 11535  3B0F  3420               	retlw	32	;' '
 11536  3B10  3400               	retlw	0
 11537                           
 11538                           	psect	stringtext48
 11539  3B11                     __pstringtext48:	
 11540  3B11                     STR_82:	
 11541  3B11  3428               	retlw	40	;'('
 11542  3B12  346E               	retlw	110	;'n'
 11543  3B13  3475               	retlw	117	;'u'
 11544  3B14  346C               	retlw	108	;'l'
 11545  3B15  346C               	retlw	108	;'l'
 11546  3B16  3429               	retlw	41	;')'
 11547  3B17  3400               	retlw	0
 11548                           
 11549                           	psect	stringtext49
 11550  3B18                     __pstringtext49:	
 11551  3B18                     STR_71:	
 11552  3B18  344F               	retlw	79	;'O'
 11553  3B19  3457               	retlw	87	;'W'
 11554  3B1A  3420               	retlw	32	;' '
 11555  3B1B  3420               	retlw	32	;' '
 11556  3B1C  3420               	retlw	32	;' '
 11557  3B1D  3420               	retlw	32	;' '
 11558  3B1E  3400               	retlw	0
 11559                           
 11560                           	psect	stringtext50
 11561  3B1F                     __pstringtext50:	
 11562  3B1F                     STR_73:	
 11563  3B1F  3449               	retlw	73	;'I'
 11564  3B20  3454               	retlw	84	;'T'
 11565  3B21  3445               	retlw	69	;'E'
 11566  3B22  3420               	retlw	32	;' '
 11567  3B23  3420               	retlw	32	;' '
 11568  3B24  3420               	retlw	32	;' '
 11569  3B25  3400               	retlw	0
 11570                           
 11571                           	psect	stringtext51
 11572  3B26                     __pstringtext51:	
 11573  3B26                     STR_78:	
 11574  3B26  3420               	retlw	32	;' '
 11575  3B27  3420               	retlw	32	;' '
 11576  3B28  3445               	retlw	69	;'E'
 11577  3B29  3457               	retlw	87	;'W'
 11578  3B2A  3420               	retlw	32	;' '
 11579  3B2B  3420               	retlw	32	;' '
 11580  3B2C  3400               	retlw	0
 11581                           
 11582                           	psect	stringtext52
 11583  3B2D                     __pstringtext52:	
 11584  3B2D                     STR_70:	
 11585  3B2D  3420               	retlw	32	;' '
 11586  3B2E  3420               	retlw	32	;' '
 11587  3B2F  3446               	retlw	70	;'F'
 11588  3B30  344F               	retlw	79	;'O'
 11589  3B31  344C               	retlw	76	;'L'
 11590  3B32  344C               	retlw	76	;'L'
 11591  3B33  3400               	retlw	0
 11592                           
 11593                           	psect	stringtext53
 11594  3B34                     __pstringtext53:	
 11595  3B34                     STR_76:	
 11596  3B34  3445               	retlw	69	;'E'
 11597  3B35  344F               	retlw	79	;'O'
 11598  3B36  3420               	retlw	32	;' '
 11599  3B37  3420               	retlw	32	;' '
 11600  3B38  3420               	retlw	32	;' '
 11601  3B39  3400               	retlw	0
 11602                           
 11603                           	psect	stringtext54
 11604  3B3A                     __pstringtext54:	
 11605  3B3A                     STR_14:	
 11606  3B3A  3448               	retlw	72	;'H'
 11607  3B3B  3441               	retlw	65	;'A'
 11608  3B3C  3458               	retlw	88	;'X'
 11609  3B3D  3420               	retlw	32	;' '
 11610  3B3E  3420               	retlw	32	;' '
 11611  3B3F  3400               	retlw	0
 11612                           
 11613                           	psect	stringtext55
 11614  3B40                     __pstringtext55:	
 11615  3B40                     STR_8:	
 11616  3B40  3445               	retlw	69	;'E'
 11617  3B41  3458               	retlw	88	;'X'
 11618  3B42  3449               	retlw	73	;'I'
 11619  3B43  3454               	retlw	84	;'T'
 11620  3B44  3420               	retlw	32	;' '
 11621  3B45  3400               	retlw	0
 11622                           
 11623                           	psect	stringtext56
 11624  3B46                     __pstringtext56:	
 11625  3B46                     STR_5:	
 11626  3B46  3453               	retlw	83	;'S'
 11627  3B47  344C               	retlw	76	;'L'
 11628  3B48  344F               	retlw	79	;'O'
 11629  3B49  3454               	retlw	84	;'T'
 11630  3B4A  3420               	retlw	32	;' '
 11631  3B4B  3400               	retlw	0
 11632                           
 11633                           	psect	stringtext57
 11634  3B4C                     __pstringtext57:	
 11635  3B4C                     STR_74:	
 11636  3B4C  3420               	retlw	32	;' '
 11637  3B4D  3452               	retlw	82	;'R'
 11638  3B4E  3441               	retlw	65	;'A'
 11639  3B4F  3442               	retlw	66	;'B'
 11640  3B50  3400               	retlw	0
 11641                           
 11642                           	psect	stringtext58
 11643  3B51                     __pstringtext58:	
 11644  3B51                     STR_48:	
 11645  3B51  3456               	retlw	86	;'V'
 11646  3B52  3444               	retlw	68	;'D'
 11647  3B53  344B               	retlw	75	;'K'
 11648  3B54  3441               	retlw	65	;'A'
 11649  3B55  3400               	retlw	0
 11650                           
 11651                           	psect	stringtext59
 11652  3B56                     __pstringtext59:	
 11653  3B56                     STR_50:	
 11654  3B56  3454               	retlw	84	;'T'
 11655  3B57  3451               	retlw	81	;'Q'
 11656  3B58  344C               	retlw	76	;'L'
 11657  3B59  3441               	retlw	65	;'A'
 11658  3B5A  3400               	retlw	0
 11659                           
 11660                           	psect	stringtext60
 11661  3B5B                     __pstringtext60:	
 11662  3B5B                     STR_53:	
 11663  3B5B  3446               	retlw	70	;'F'
 11664  3B5C  3449               	retlw	73	;'I'
 11665  3B5D  3452               	retlw	82	;'R'
 11666  3B5E  3445               	retlw	69	;'E'
 11667  3B5F  3400               	retlw	0
 11668                           
 11669                           	psect	stringtext61
 11670  3B60                     __pstringtext61:	
 11671  3B60                     STR_51:	
 11672  3B60  3443               	retlw	67	;'C'
 11673  3B61  3448               	retlw	72	;'H'
 11674  3B62  3455               	retlw	85	;'U'
 11675  3B63  3447               	retlw	71	;'G'
 11676  3B64  3400               	retlw	0
 11677                           
 11678                           	psect	stringtext62
 11679  3B65                     __pstringtext62:	
 11680  3B65                     STR_52:	
 11681  3B65  3452               	retlw	82	;'R'
 11682  3B66  3445               	retlw	69	;'E'
 11683  3B67  3442               	retlw	66	;'B'
 11684  3B68  344C               	retlw	76	;'L'
 11685  3B69  3400               	retlw	0
 11686                           
 11687                           	psect	stringtext63
 11688  3B6A                     __pstringtext63:	
 11689  3B6A                     STR_47:	
 11690  3B6A  3442               	retlw	66	;'B'
 11691  3B6B  3445               	retlw	69	;'E'
 11692  3B6C  3445               	retlw	69	;'E'
 11693  3B6D  3452               	retlw	82	;'R'
 11694  3B6E  3400               	retlw	0
 11695                           
 11696                           	psect	stringtext64
 11697  3B6F                     __pstringtext64:	
 11698  3B6F                     STR_54:	
 11699  3B6F  3457               	retlw	87	;'W'
 11700  3B70  3441               	retlw	65	;'A'
 11701  3B71  3454               	retlw	84	;'T'
 11702  3B72  3452               	retlw	82	;'R'
 11703  3B73  3400               	retlw	0
 11704                           
 11705                           	psect	stringtext65
 11706  3B74                     __pstringtext65:	
 11707  3B74                     STR_46:	
 11708  3B74  3453               	retlw	83	;'S'
 11709  3B75  3448               	retlw	72	;'H'
 11710  3B76  344F               	retlw	79	;'O'
 11711  3B77  3454               	retlw	84	;'T'
 11712  3B78  3400               	retlw	0
 11713                           
 11714                           	psect	stringtext66
 11715  3B79                     __pstringtext66:	
 11716  3B79                     STR_49:	
 11717  3B79  3457               	retlw	87	;'W'
 11718  3B7A  3453               	retlw	83	;'S'
 11719  3B7B  344B               	retlw	75	;'K'
 11720  3B7C  3459               	retlw	89	;'Y'
 11721  3B7D  3400               	retlw	0
 11722                           
 11723                           	psect	stringtext67
 11724  3B7E                     __pstringtext67:	
 11725  3B7E                     STR_45:	
 11726  3B7E  344C               	retlw	76	;'L'
 11727  3B7F  344F               	retlw	79	;'O'
 11728  3B80  3443               	retlw	67	;'C'
 11729  3B81  344B               	retlw	75	;'K'
 11730  3B82  3400               	retlw	0
 11731                           
 11732                           	psect	stringtext68
 11733  3B83                     __pstringtext68:	
 11734  3B83                     STR_44:	
 11735  3B83  344F               	retlw	79	;'O'
 11736  3B84  3450               	retlw	80	;'P'
 11737  3B85  3445               	retlw	69	;'E'
 11738  3B86  344E               	retlw	78	;'N'
 11739  3B87  3400               	retlw	0
 11740                           
 11741                           	psect	stringtext69
 11742  3B88                     __pstringtext69:	
 11743  3B88                     STR_40:	
 11744  3B88  3450               	retlw	80	;'P'
 11745  3B89  3445               	retlw	69	;'E'
 11746  3B8A  3457               	retlw	87	;'W'
 11747  3B8B  3420               	retlw	32	;' '
 11748  3B8C  3400               	retlw	0
 11749                           
 11750                           	psect	stringtext70
 11751  3B8D                     __pstringtext70:	
 11752  3B8D                     STR_9:	
 11753  3B8D  344E               	retlw	78	;'N'
 11754  3B8E  3455               	retlw	85	;'U'
 11755  3B8F  344C               	retlw	76	;'L'
 11756  3B90  344C               	retlw	76	;'L'
 11757  3B91  3400               	retlw	0
 11758                           
 11759                           	psect	stringtext71
 11760  3B92                     __pstringtext71:	
 11761  3B92                     STR_4:	
 11762  3B92  344D               	retlw	77	;'M'
 11763  3B93  3445               	retlw	69	;'E'
 11764  3B94  344E               	retlw	78	;'N'
 11765  3B95  3455               	retlw	85	;'U'
 11766  3B96  3400               	retlw	0
 11767                           
 11768                           	psect	stringtext72
 11769  3B97                     __pstringtext72:	
 11770  3B97                     STR_2:	
 11771  3B97  3444               	retlw	68	;'D'
 11772  3B98  344F               	retlw	79	;'O'
 11773  3B99  3457               	retlw	87	;'W'
 11774  3B9A  344E               	retlw	78	;'N'
 11775  3B9B  3400               	retlw	0
 11776                           
 11777                           	psect	stringtext73
 11778  3B9C                     __pstringtext73:	
 11779  3B9C                     STR_1:	
 11780  3B9C  3420               	retlw	32	;' '
 11781  3B9D  3420               	retlw	32	;' '
 11782  3B9E  3455               	retlw	85	;'U'
 11783  3B9F  3450               	retlw	80	;'P'
 11784  3BA0  3400               	retlw	0
 11785                           
 11786                           	psect	stringtext74
 11787  3BA1                     __pstringtext74:	
 11788  3BA1                     STR_41:	
 11789  3BA1  3425               	retlw	37	;'%'
 11790  3BA2  3434               	retlw	52	;'4'
 11791  3BA3  3464               	retlw	100	;'d'
 11792  3BA4  3400               	retlw	0
 11793                           
 11794                           	psect	stringtext75
 11795  3BA5                     __pstringtext75:	
 11796  3BA5                     STR_69:	
 11797  3BA5  3425               	retlw	37	;'%'
 11798  3BA6  3473               	retlw	115	;'s'
 11799  3BA7  3400               	retlw	0
 11800                           
 11801                           	psect	stringtext76
 11802  0000                     __pstringtext76:	
 11803  287D                     
 11804                           ; #config settings
 11805  0000                     
 11806                           	psect	cinit
 11807  0018                     start_initialization:	
 11808  0018                     __initialization:		;BIGRAM
 11809                           
 11810                           ; Initialize objects allocated to BIGRAM
 11811  0018  3043               	movlw	low __pidataBIGRAM
 11812  0019  0084               	movwf	4
 11813  001A  30A5               	movlw	(high __pidataBIGRAM)| (0+128)
 11814  001B  0085               	movwf	5
 11815  001C  30F0               	movlw	low (0+9968)
 11816  001D  0086               	movwf	6
 11817  001E  3026               	movlw	high (0+9968)
 11818  001F  0087               	movwf	7
 11819  0020  3001               	movlw	1
 11820  0021  00FF               	movwf	btemp+1
 11821  0022  3000               	movlw	0
 11822  0023  31B4  249F  3180   	fcall	init_ram
 11823                           
 11824                           ; Initialize objects allocated to BANK1
 11825  0026  30D8               	movlw	low __pidataBANK1
 11826  0027  0084               	movwf	4
 11827  0028  30B5               	movlw	(high __pidataBANK1)| (0+128)
 11828  0029  0085               	movwf	5
 11829  002A  30C7               	movlw	low __pdataBANK1
 11830  002B  0086               	movwf	6
 11831  002C  3000               	movlw	high __pdataBANK1
 11832  002D  0087               	movwf	7
 11833  002E  3000               	movlw	0
 11834  002F  00FF               	movwf	btemp+1
 11835  0030  3016               	movlw	22
 11836  0031  31B4  249F  3180   	fcall	init_ram
 11837                           
 11838                           ; Initialize objects allocated to BANK2
 11839  0034  0022               	movlb	2	; select bank2
 11840  0035  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
 11841  0038  00E7               	movwf	__pdataBANK2& (0+127)
 11842  0039  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
 11843  003C  00E8               	movwf	(__pdataBANK2+1)& (0+127)
 11844                           
 11845                           ; Initialize objects allocated to BANK3
 11846  003D  3056               	movlw	low __pidataBANK3
 11847  003E  0084               	movwf	4
 11848  003F  30B6               	movlw	(high __pidataBANK3)| (0+128)
 11849  0040  0085               	movwf	5
 11850  0041  30D1               	movlw	low __pdataBANK3
 11851  0042  0086               	movwf	6
 11852  0043  3001               	movlw	high __pdataBANK3
 11853  0044  0087               	movwf	7
 11854  0045  3000               	movlw	0
 11855  0046  00FF               	movwf	btemp+1
 11856  0047  301C               	movlw	28
 11857  0048  31B4  249F  3180   	fcall	init_ram
 11858                           
 11859                           ; Initialize objects allocated to BANK4
 11860  004B  3016               	movlw	low __pidataBANK4
 11861  004C  0084               	movwf	4
 11862  004D  30AC               	movlw	(high __pidataBANK4)| (0+128)
 11863  004E  0085               	movwf	5
 11864  004F  3020               	movlw	low __pdataBANK4
 11865  0050  0086               	movwf	6
 11866  0051  3002               	movlw	high __pdataBANK4
 11867  0052  0087               	movwf	7
 11868  0053  3000               	movlw	0
 11869  0054  00FF               	movwf	btemp+1
 11870  0055  3046               	movlw	70
 11871  0056  31B4  249F  3180   	fcall	init_ram
 11872                           
 11873                           ; Initialize objects allocated to BANK5
 11874  0059  3054               	movlw	low __pidataBANK5
 11875  005A  0084               	movwf	4
 11876  005B  30B7               	movlw	(high __pidataBANK5)| (0+128)
 11877  005C  0085               	movwf	5
 11878  005D  30CA               	movlw	low __pdataBANK5
 11879  005E  0086               	movwf	6
 11880  005F  3002               	movlw	high __pdataBANK5
 11881  0060  0087               	movwf	7
 11882  0061  3000               	movlw	0
 11883  0062  00FF               	movwf	btemp+1
 11884  0063  3026               	movlw	38
 11885  0064  31B4  249F  3180   	fcall	init_ram
 11886                           
 11887                           ; Initialize objects allocated to BANK6
 11888  0067  306E               	movlw	low __pidataBANK6
 11889  0068  0084               	movwf	4
 11890  0069  30A9               	movlw	(high __pidataBANK6)| (0+128)
 11891  006A  0085               	movwf	5
 11892  006B  3020               	movlw	low __pdataBANK6
 11893  006C  0086               	movwf	6
 11894  006D  3003               	movlw	high __pdataBANK6
 11895  006E  0087               	movwf	7
 11896  006F  3000               	movlw	0
 11897  0070  00FF               	movwf	btemp+1
 11898  0071  3037               	movlw	55
 11899  0072  31B4  249F  3180   	fcall	init_ram
 11900                           
 11901                           ; Initialize objects allocated to BANK7
 11902  0075  30DD               	movlw	low __pidataBANK7
 11903  0076  0084               	movwf	4
 11904  0077  30A9               	movlw	(high __pidataBANK7)| (0+128)
 11905  0078  0085               	movwf	5
 11906  0079  30A0               	movlw	low __pdataBANK7
 11907  007A  0086               	movwf	6
 11908  007B  3003               	movlw	high __pdataBANK7
 11909  007C  0087               	movwf	7
 11910  007D  3000               	movlw	0
 11911  007E  00FF               	movwf	btemp+1
 11912  007F  3038               	movlw	56
 11913  0080  31B4  249F  3180   	fcall	init_ram
 11914                           
 11915                           ; Initialize objects allocated to BANK8
 11916  0083  30A5               	movlw	low __pidataBANK8
 11917  0084  0084               	movwf	4
 11918  0085  30A9               	movlw	(high __pidataBANK8)| (0+128)
 11919  0086  0085               	movwf	5
 11920  0087  3020               	movlw	low __pdataBANK8
 11921  0088  0086               	movwf	6
 11922  0089  3004               	movlw	high __pdataBANK8
 11923  008A  0087               	movwf	7
 11924  008B  3000               	movlw	0
 11925  008C  00FF               	movwf	btemp+1
 11926  008D  3038               	movlw	56
 11927  008E  31B4  249F  3180   	fcall	init_ram
 11928                           
 11929                           ; Initialize objects allocated to BANK10
 11930  0091  304E               	movlw	low __pidataBANK10
 11931  0092  0084               	movwf	4
 11932  0093  30AA               	movlw	(high __pidataBANK10)| (0+128)
 11933  0094  0085               	movwf	5
 11934  0095  3020               	movlw	low __pdataBANK10
 11935  0096  0086               	movwf	6
 11936  0097  3005               	movlw	high __pdataBANK10
 11937  0098  0087               	movwf	7
 11938  0099  3000               	movlw	0
 11939  009A  00FF               	movwf	btemp+1
 11940  009B  303A               	movlw	58
 11941  009C  31B4  249F  3180   	fcall	init_ram
 11942                           
 11943                           ; Clear objects allocated to COMMON
 11944  009F  01FC               	clrf	__pbssCOMMON& (0+127)
 11945                           
 11946                           ; Clear objects allocated to BANK1
 11947  00A0  30A0               	movlw	low __pbssBANK1
 11948  00A1  0084               	movwf	4
 11949  00A2  3000               	movlw	high __pbssBANK1
 11950  00A3  0085               	movwf	5
 11951  00A4  3027               	movlw	39
 11952  00A5  00FE               	movwf	btemp
 11953  00A6  3000               	movlw	0
 11954  00A7  00FF               	movwf	btemp+1
 11955  00A8  31B4  2493  3180   	fcall	clear_ram0
 11956                           
 11957                           ; Clear objects allocated to BANK2
 11958  00AB  3020               	movlw	low __pbssBANK2
 11959  00AC  0084               	movwf	4
 11960  00AD  3001               	movlw	high __pbssBANK2
 11961  00AE  0085               	movwf	5
 11962  00AF  3047               	movlw	71
 11963  00B0  00FE               	movwf	btemp
 11964  00B1  3000               	movlw	0
 11965  00B2  00FF               	movwf	btemp+1
 11966  00B3  31B4  2493  3180   	fcall	clear_ram0
 11967                           
 11968                           ; Clear objects allocated to BANK3
 11969  00B6  30A0               	movlw	low __pbssBANK3
 11970  00B7  0084               	movwf	4
 11971  00B8  3001               	movlw	high __pbssBANK3
 11972  00B9  0085               	movwf	5
 11973  00BA  3031               	movlw	49
 11974  00BB  00FE               	movwf	btemp
 11975  00BC  3000               	movlw	0
 11976  00BD  00FF               	movwf	btemp+1
 11977  00BE  31B4  2493  3180   	fcall	clear_ram0
 11978                           
 11979                           ; Clear objects allocated to BANK5
 11980  00C1  30A0               	movlw	low __pbssBANK5
 11981  00C2  0084               	movwf	4
 11982  00C3  3002               	movlw	high __pbssBANK5
 11983  00C4  0085               	movwf	5
 11984  00C5  302A               	movlw	42
 11985  00C6  00FE               	movwf	btemp
 11986  00C7  3000               	movlw	0
 11987  00C8  00FF               	movwf	btemp+1
 11988  00C9  31B4  2493  3180   	fcall	clear_ram0
 11989                           
 11990                           ; Clear objects allocated to BANK9
 11991  00CC  30A0               	movlw	low __pbssBANK9
 11992  00CD  0084               	movwf	4
 11993  00CE  3004               	movlw	high __pbssBANK9
 11994  00CF  0085               	movwf	5
 11995  00D0  303B               	movlw	59
 11996  00D1  00FE               	movwf	btemp
 11997  00D2  3000               	movlw	0
 11998  00D3  00FF               	movwf	btemp+1
 11999  00D4  31B4  2493  3180   	fcall	clear_ram0
 12000                           
 12001                           ; Clear objects allocated to BANK11
 12002  00D7  30A0               	movlw	low __pbssBANK11
 12003  00D8  0084               	movwf	4
 12004  00D9  3005               	movlw	high __pbssBANK11
 12005  00DA  0085               	movwf	5
 12006  00DB  3028               	movlw	40
 12007  00DC  00FE               	movwf	btemp
 12008  00DD  3000               	movlw	0
 12009  00DE  00FF               	movwf	btemp+1
 12010  00DF  31B4  2493         	fcall	clear_ram0
 12011  00E1                     end_of_initialization:	
 12012                           ;End of C runtime variable initialization code
 12013                           
 12014  00E1                     __end_of__initialization:	
 12015  00E1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 12016  00E2  0020               	movlb	0
 12017  00E3  3186  2E61         	ljmp	_main	;jump to C main() function
 12018                           
 12019                           	psect	bssCOMMON
 12020  007C                     __pbssCOMMON:	
 12021  007C                     _Shot_Index:	
 12022  007C                     	ds	1
 12023                           
 12024                           	psect	bssBANK1
 12025  00A0                     __pbssBANK1:	
 12026  00A0                     _matrix_leds_idx:	
 12027  00A0                     	ds	2
 12028  00A2                     _locked_leds:	
 12029  00A2                     	ds	2
 12030  00A4                     _locked_locking_leds_idx:	
 12031  00A4                     	ds	2
 12032  00A6                     _flashy_option_size:	
 12033  00A6                     	ds	2
 12034  00A8                     _flashy_option_idx:	
 12035  00A8                     	ds	2
 12036  00AA                     _deaths:	
 12037  00AA                     	ds	2
 12038  00AC                     _flashy_scroll_rate:	
 12039  00AC                     	ds	2
 12040  00AE                     _flashy_sparkle_rate:	
 12041  00AE                     	ds	2
 12042  00B0                     _flashy_leds_state_track:	
 12043  00B0                     	ds	2
 12044  00B2                     _flashy_leds_idx:	
 12045  00B2                     	ds	2
 12046  00B4                     _menu_option_size:	
 12047  00B4                     	ds	2
 12048  00B6                     _menu_option_idx:	
 12049  00B6                     	ds	2
 12050  00B8                     _oddeven:	
 12051  00B8                     	ds	2
 12052  00BA                     _currentTask:	
 12053  00BA                     	ds	2
 12054  00BC                     _slot_taskData:	
 12055  00BC                     	ds	2
 12056  00BE                     _TMR0_InterruptHandler:	
 12057  00BE                     	ds	2
 12058  00C0                     _timer0ReloadVal16bit:	
 12059  00C0                     	ds	2
 12060  00C2                     _TMR2_InterruptHandler:	
 12061  00C2                     	ds	2
 12062  00C4                     _badge_locked:	
 12063  00C4                     	ds	1
 12064  00C5                     _secret_value:	
 12065  00C5                     	ds	2
 12066                           
 12067                           	psect	dataBANK1
 12068  00C7                     __pdataBANK1:	
 12069  00C7                     _locked_locking_leds:	
 12070  00C7                     	ds	12
 12071  00D3                     _randx:	
 12072  00D3                     	ds	4
 12073  00D7                     _Leds_idx:	
 12074  00D7                     	ds	2
 12075  00D9                     _locked_lock_base_leds:	
 12076  00D9                     	ds	2
 12077  00DB                     _FLASHY_TEXT_SECRET_TEST:	
 12078  00DB                     	ds	2
 12079                           
 12080                           	psect	bssBANK2
 12081  0120                     __pbssBANK2:	
 12082  0120                     _matrix_option_size:	
 12083  0120                     	ds	2
 12084  0122                     _matrix_option_idx:	
 12085  0122                     	ds	2
 12086  0124                     _TMR4_InterruptHandler:	
 12087  0124                     	ds	2
 12088  0126                     _secret_task:	
 12089  0126                     	ds	13
 12090  0133                     _locked_task:	
 12091  0133                     	ds	13
 12092  0140                     _slot_task:	
 12093  0140                     	ds	13
 12094  014D                     _menu_task:	
 12095  014D                     	ds	13
 12096  015A                     _flashy_task:	
 12097  015A                     	ds	13
 12098                           
 12099                           	psect	dataBANK2
 12100  0167                     __pdataBANK2:	
 12101  0167                     _FLASHY_TEXT:	
 12102  0167                     	ds	2
 12103                           
 12104                           	psect	bssBANK3
 12105  01A0                     __pbssBANK3:	
 12106  01A0                     _schedulerInst:	
 12107  01A0                     	ds	18
 12108  01B2                     _badge_inst:	
 12109  01B2                     	ds	18
 12110  01C4                     _matrix_task:	
 12111  01C4                     	ds	13
 12112                           
 12113                           	psect	dataBANK3
 12114  01D1                     __pdataBANK3:	
 12115  01D1                     _Shot_Options:	
 12116  01D1                     	ds	18
 12117  01E3                     marquee@F14098:	
 12118  01E3                     	ds	5
 12119  01E8                     marquee_speedy@F14089:	
 12120  01E8                     	ds	5
 12121                           
 12122                           	psect	dataBANK4
 12123  0220                     __pdataBANK4:	
 12124  0220                     _menu_options_leds:	
 12125  0220                     	ds	10
 12126  022A                     _menu_option:	
 12127  022A                     	ds	10
 12128  0234                     _matrix_secret_inputs:	
 12129  0234                     	ds	25
 12130  024D                     _secret_inputs:	
 12131  024D                     	ds	25
 12132                           
 12133                           	psect	bssBANK5
 12134  02A0                     __pbssBANK5:	
 12135  02A0                     _secret_TaskData:	
 12136  02A0                     	ds	14
 12137  02AE                     _locked_TaskData:	
 12138  02AE                     	ds	14
 12139  02BC                     _menu_TaskData:	
 12140  02BC                     	ds	14
 12141                           
 12142                           	psect	dataBANK5
 12143  02CA                     __pdataBANK5:	
 12144  02CA                     _matrix_option:	
 12145  02CA                     	ds	20
 12146  02DE                     _Shot_Options_Long:	
 12147  02DE                     	ds	18
 12148                           
 12149                           	psect	dataBANK6
 12150  0320                     __pdataBANK6:	
 12151  0320                     _Slot_Wheel:	
 12152  0320                     	ds	55
 12153                           
 12154                           	psect	dataBANK7
 12155  03A0                     __pdataBANK7:	
 12156  03A0                     _roundabout_leds_inverse:	
 12157  03A0                     	ds	28
 12158  03BC                     _roundabout_leds:	
 12159  03BC                     	ds	28
 12160                           
 12161                           	psect	dataBANK8
 12162  0420                     __pdataBANK8:	
 12163  0420                     _curtain_leds_inverse:	
 12164  0420                     	ds	28
 12165  043C                     _curtain_leds:	
 12166  043C                     	ds	28
 12167                           
 12168                           	psect	bssBANK9
 12169  04A0                     __pbssBANK9:	
 12170  04A0                     _flashy_TaskData:	
 12171  04A0                     	ds	30
 12172  04BE                     _matrix_TaskData:	
 12173  04BE                     	ds	29
 12174                           
 12175                           	psect	dataBANK10
 12176  0520                     __pdataBANK10:	
 12177  0520                     _flashy_option:	
 12178  0520                     	ds	58
 12179                           
 12180                           	psect	bssBANK11
 12181  05A0                     __pbssBANK11:	
 12182  05A0                     _slot_TaskData:	
 12183  05A0                     	ds	40
 12184                           
 12185                           	psect	inittext
 12186  349F                     init_ram:	
 12187  349F  00FE               	movwf	126
 12188  34A0                     initloop:	
 12189  34A0  0012               	moviw fsr0++
 12190  34A1  001E               	movwi fsr1++
 12191  34A2  3001               	movlw	1
 12192  34A3  02FE               	subwf	126,f
 12193  34A4  3000               	movlw	0
 12194  34A5  3BFF               	subwfb	127,f
 12195  34A6  087F               	movf	127,w
 12196  34A7  047E               	iorwf	126,w
 12197  34A8  1903               	btfsc	3,2
 12198  34A9  3400               	retlw	0
 12199  34AA  2CA0               	goto	initloop
 12200                           
 12201                           	psect	clrtext
 12202  3493                     clear_ram0:	
 12203                           ;	Called with FSR0 containing the base address, and
 12204                           ;	btemp/btemp+1 has the size to clear
 12205                           
 12206  3493  0064               	clrwdt	;clear the watchdog before getting into this loop
 12207  3494                     clrloop0:	
 12208  3494  0180               	clrf	0	;clear RAM location pointed to by FSR
 12209  3495  3101               	addfsr 0,1
 12210  3496  3001               	movlw	1
 12211  3497  02FE               	subwf	126,f
 12212  3498  3000               	movlw	0
 12213  3499  3BFF               	subwfb	127,f
 12214  349A  087F               	movf	127,w
 12215  349B  047E               	iorwf	126,w
 12216  349C  1903               	btfsc	3,2
 12217  349D  3400               	retlw	0	;all done for this memory range, return
 12218  349E  2C94               	goto	clrloop0	;have we reached the end yet?
 12219                           
 12220                           	psect	cstackBANK1
 12221  00DD                     __pcstackBANK1:	
 12222  00DD                     schedulerExecute@currentSystemTick:	
 12223                           
 12224                           ; 2 bytes @ 0x0
 12225  00DD                     	ds	2
 12226  00DF                     schedulerExecute@taskLastSystemTick:	
 12227                           
 12228                           ; 2 bytes @ 0x2
 12229  00DF                     	ds	2
 12230  00E1                     schedulerExecute@tickDelta:	
 12231                           
 12232                           ; 2 bytes @ 0x4
 12233  00E1                     	ds	2
 12234  00E3                     schedulerExecute@scheduler:	
 12235                           
 12236                           ; 1 bytes @ 0x6
 12237  00E3                     	ds	1
 12238  00E4                     schedulerExecute@k:	
 12239                           
 12240                           ; 1 bytes @ 0x7
 12241  00E4                     	ds	1
 12242                           
 12243                           	psect	cstackCOMMON
 12244  0070                     __pcstackCOMMON:	
 12245  0070                     ?_isdigit:	
 12246  0070                     ?_TMR2_StartTimer:	
 12247                           ; 1 bit 
 12248                           
 12249  0070                     ?_TMR4_StartTimer:	
 12250                           ; 1 bytes @ 0x0
 12251                           
 12252  0070                     ?_PIN_MANAGER_Initialize:	
 12253                           ; 1 bytes @ 0x0
 12254                           
 12255  0070                     ?_OSCILLATOR_Initialize:	
 12256                           ; 1 bytes @ 0x0
 12257                           
 12258  0070                     ?_WDT_Initialize:	
 12259                           ; 1 bytes @ 0x0
 12260                           
 12261  0070                     ?_PWM2_Initialize:	
 12262                           ; 1 bytes @ 0x0
 12263                           
 12264  0070                     ?_TMR0_Initialize:	
 12265                           ; 1 bytes @ 0x0
 12266                           
 12267  0070                     ?_TMR0_DefaultInterruptHandler:	
 12268                           ; 1 bytes @ 0x0
 12269                           
 12270  0070                     ??_TMR0_DefaultInterruptHandler:	
 12271                           ; 1 bytes @ 0x0
 12272                           
 12273  0070                     ?_TMR0_StartTimer:	
 12274                           ; 1 bytes @ 0x0
 12275                           
 12276  0070                     ?_TMR0_CallBack:	
 12277                           ; 1 bytes @ 0x0
 12278                           
 12279  0070                     ??_TMR0_CallBack:	
 12280                           ; 1 bytes @ 0x0
 12281                           
 12282  0070                     ?_nullifyBadge_segDisplayRegister:	
 12283                           ; 1 bytes @ 0x0
 12284                           
 12285  0070                     ?_nullifyBadge_segDisplayErase:	
 12286                           ; 1 bytes @ 0x0
 12287                           
 12288  0070                     ?_nullifyBadge_segDisplayForceUpdate:	
 12289                           ; 1 bytes @ 0x0
 12290                           
 12291  0070                     ?_nullifyBadge_platformInit:	
 12292                           ; 1 bytes @ 0x0
 12293                           
 12294  0070                     ?_displayL2_Initialize:	
 12295                           ; 1 bytes @ 0x0
 12296                           
 12297  0070                     ?_displayL2_ForceUpdate:	
 12298                           ; 1 bytes @ 0x0
 12299                           
 12300  0070                     ?_displayL2_EraseSegDisplay:	
 12301                           ; 1 bytes @ 0x0
 12302                           
 12303  0070                     ?_displayL2_ClrUserLeds:	
 12304                           ; 1 bytes @ 0x0
 12305                           
 12306  0070                     ?_displayL1_Update:	
 12307                           ; 1 bytes @ 0x0
 12308                           
 12309  0070                     ?_SPI1_Initialize:	
 12310                           ; 1 bytes @ 0x0
 12311                           
 12312  0070                     ?_SPI1_Exchange8bit:	
 12313                           ; 1 bytes @ 0x0
 12314                           
 12315  0070                     ?_PWM5_Initialize:	
 12316                           ; 1 bytes @ 0x0
 12317                           
 12318  0070                     ?_PWM6_Initialize:	
 12319                           ; 1 bytes @ 0x0
 12320                           
 12321  0070                     ?_PWM1_Initialize:	
 12322                           ; 1 bytes @ 0x0
 12323                           
 12324  0070                     ?_TMR2_Initialize:	
 12325                           ; 1 bytes @ 0x0
 12326                           
 12327  0070                     ?_TMR4_Initialize:	
 12328                           ; 1 bytes @ 0x0
 12329                           
 12330  0070                     ?_SYSTEM_Initialize:	
 12331                           ; 1 bytes @ 0x0
 12332                           
 12333  0070                     ?_TMR0_ISR:	
 12334                           ; 1 bytes @ 0x0
 12335                           
 12336  0070                     ??_TMR0_ISR:	
 12337                           ; 1 bytes @ 0x0
 12338                           
 12339  0070                     ?_INTERRUPT_InterruptManager:	
 12340                           ; 1 bytes @ 0x0
 12341                           
 12342  0070                     ??_INTERRUPT_InterruptManager:	
 12343                           ; 1 bytes @ 0x0
 12344                           
 12345  0070                     ?_scheduler_TaskRun:	
 12346                           ; 1 bytes @ 0x0
 12347                           
 12348  0070                     ?_scheduler_Init:	
 12349                           ; 1 bytes @ 0x0
 12350                           
 12351  0070                     ?_scheduler_TaskInit:	
 12352                           ; 1 bytes @ 0x0
 12353                           
 12354  0070                     ?_schedulerExecute:	
 12355                           ; 1 bytes @ 0x0
 12356                           
 12357  0070                     ?_led_rand:	
 12358                           ; 1 bytes @ 0x0
 12359                           
 12360  0070                     ?_main:	
 12361                           ; 1 bytes @ 0x0
 12362                           
 12363  0070                     ?_nullifyBadge_userLedsRegister:	
 12364                           ; 1 bytes @ 0x0
 12365                           
 12366  0070                     ?_nullifyBadge_userLedsClr:	
 12367                           ; 1 bytes @ 0x0
 12368                           
 12369  0070                     ?_nullifyBadge_buttonsGet:	
 12370                           ; 1 bytes @ 0x0
 12371                           
 12372  0070                     ?_nullifyBadge_irGet:	
 12373                           ; 1 bytes @ 0x0
 12374                           
 12375  0070                     ?_nullifyBadge_irTxRegister:	
 12376                           ; 1 bytes @ 0x0
 12377                           
 12378  0070                     ?_nullifyBadge_irTxRelease:	
 12379                           ; 1 bytes @ 0x0
 12380                           
 12381  0070                     ?_nullifyBadge_irTxSet:	
 12382                           ; 1 bytes @ 0x0
 12383                           
 12384  0070                     ?_nullifyBadge_irTxClr:	
 12385                           ; 1 bytes @ 0x0
 12386                           
 12387  0070                     ?_displayL1_Initialize:	
 12388                           ; 1 bytes @ 0x0
 12389                           
 12390  0070                     ?_locked_lock_leds:	
 12391                           ; 1 bytes @ 0x0
 12392                           
 12393  0070                     ?_locked_unlock_leds:	
 12394                           ; 2 bytes @ 0x0
 12395                           
 12396                           
 12397                           ; 2 bytes @ 0x0
 12398  0070                     	ds	1
 12399  0071                     ??_TMR2_StartTimer:	
 12400  0071                     ??_TMR4_StartTimer:	
 12401                           ; 1 bytes @ 0x1
 12402                           
 12403  0071                     ??_PIN_MANAGER_Initialize:	
 12404                           ; 1 bytes @ 0x1
 12405                           
 12406  0071                     ??_OSCILLATOR_Initialize:	
 12407                           ; 1 bytes @ 0x1
 12408                           
 12409  0071                     ??_WDT_Initialize:	
 12410                           ; 1 bytes @ 0x1
 12411                           
 12412  0071                     ??_PWM2_Initialize:	
 12413                           ; 1 bytes @ 0x1
 12414                           
 12415  0071                     ?_TMR0_SetInterruptHandler:	
 12416                           ; 1 bytes @ 0x1
 12417                           
 12418  0071                     ??_TMR0_StartTimer:	
 12419                           ; 1 bytes @ 0x1
 12420                           
 12421  0071                     ??_nullifyBadge_segDisplayRegister:	
 12422                           ; 1 bytes @ 0x1
 12423                           
 12424  0071                     ?_secret_clear:	
 12425                           ; 1 bytes @ 0x1
 12426                           
 12427  0071                     ??_isdigit:	
 12428                           ; 1 bytes @ 0x1
 12429                           
 12430  0071                     ??_SPI1_Initialize:	
 12431                           ; 1 bytes @ 0x1
 12432                           
 12433  0071                     ??_SPI1_Exchange8bit:	
 12434                           ; 1 bytes @ 0x1
 12435                           
 12436  0071                     ??_PWM5_Initialize:	
 12437                           ; 1 bytes @ 0x1
 12438                           
 12439  0071                     ?_PWM5_LoadDutyValue:	
 12440                           ; 1 bytes @ 0x1
 12441                           
 12442  0071                     ??_PWM6_Initialize:	
 12443                           ; 1 bytes @ 0x1
 12444                           
 12445  0071                     ?_PWM6_LoadDutyValue:	
 12446                           ; 1 bytes @ 0x1
 12447                           
 12448  0071                     ??_PWM1_Initialize:	
 12449                           ; 1 bytes @ 0x1
 12450                           
 12451  0071                     ?_PWM1_LoadDutyValue:	
 12452                           ; 1 bytes @ 0x1
 12453                           
 12454  0071                     ??_TMR2_Initialize:	
 12455                           ; 1 bytes @ 0x1
 12456                           
 12457  0071                     ??_TMR4_Initialize:	
 12458                           ; 1 bytes @ 0x1
 12459                           
 12460  0071                     ?_PWM2_LoadDutyValue:	
 12461                           ; 1 bytes @ 0x1
 12462                           
 12463  0071                     ??_scheduler_Init:	
 12464                           ; 1 bytes @ 0x1
 12465                           
 12466  0071                     ??_scheduler_TaskInit:	
 12467                           ; 1 bytes @ 0x1
 12468                           
 12469  0071                     ??_nullifyBadge_userLedsRegister:	
 12470                           ; 1 bytes @ 0x1
 12471                           
 12472  0071                     ??_nullifyBadge_buttonsGet:	
 12473                           ; 1 bytes @ 0x1
 12474                           
 12475  0071                     ??_nullifyBadge_irGet:	
 12476                           ; 1 bytes @ 0x1
 12477                           
 12478  0071                     ??_nullifyBadge_irTxRegister:	
 12479                           ; 1 bytes @ 0x1
 12480                           
 12481  0071                     ??_nullifyBadge_irTxRelease:	
 12482                           ; 1 bytes @ 0x1
 12483                           
 12484  0071                     ??_nullifyBadge_irTxSet:	
 12485                           ; 1 bytes @ 0x1
 12486                           
 12487  0071                     ??_nullifyBadge_irTxClr:	
 12488                           ; 1 bytes @ 0x1
 12489                           
 12490  0071                     ?_displayL1_SetUserLed:	
 12491                           ; 1 bytes @ 0x1
 12492                           
 12493  0071                     ??_locked_lock_leds:	
 12494                           ; 1 bytes @ 0x1
 12495                           
 12496  0071                     ??_locked_unlock_leds:	
 12497                           ; 1 bytes @ 0x1
 12498                           
 12499  0071                     ?___bmul:	
 12500                           ; 1 bytes @ 0x1
 12501                           
 12502  0071                     ?_strlen:	
 12503                           ; 1 bytes @ 0x1
 12504                           
 12505  0071                     ?_memset:	
 12506                           ; 2 bytes @ 0x1
 12507                           
 12508  0071                     ?_displayCharReverse:	
 12509                           ; 2 bytes @ 0x1
 12510                           
 12511  0071                     ?_TMR0_Read16bitTimer:	
 12512                           ; 2 bytes @ 0x1
 12513                           
 12514  0071                     ?_locked_get_lock_leds:	
 12515                           ; 2 bytes @ 0x1
 12516                           
 12517  0071                     ?_locked_get_unlock_leds:	
 12518                           ; 2 bytes @ 0x1
 12519                           
 12520  0071                     ?___wmul:	
 12521                           ; 2 bytes @ 0x1
 12522                           
 12523  0071                     ?___lwdiv:	
 12524                           ; 2 bytes @ 0x1
 12525                           
 12526  0071                     ?___lmul:	
 12527                           ; 2 bytes @ 0x1
 12528                           
 12529  0071                     SPI1_Exchange8bit@data:	
 12530                           ; 4 bytes @ 0x1
 12531                           
 12532  0071                     PIN_MANAGER_Initialize@state:	
 12533                           ; 1 bytes @ 0x1
 12534                           
 12535  0071                     scheduler_TaskInit@task:	
 12536                           ; 1 bytes @ 0x1
 12537                           
 12538  0071                     nullifyBadge_segDisplayRegister@badge:	
 12539                           ; 1 bytes @ 0x1
 12540                           
 12541  0071                     nullifyBadge_userLedsRegister@badge:	
 12542                           ; 1 bytes @ 0x1
 12543                           
 12544  0071                     nullifyBadge_irTxRegister@badge:	
 12545                           ; 1 bytes @ 0x1
 12546                           
 12547  0071                     ___bmul@multiplicand:	
 12548                           ; 1 bytes @ 0x1
 12549                           
 12550  0071                     _isdigit$3599:	
 12551                           ; 1 bytes @ 0x1
 12552                           
 12553  0071                     PWM5_LoadDutyValue@dutyValue:	
 12554                           ; 1 bytes @ 0x1
 12555                           
 12556  0071                     PWM6_LoadDutyValue@dutyValue:	
 12557                           ; 2 bytes @ 0x1
 12558                           
 12559  0071                     PWM1_LoadDutyValue@dutyValue:	
 12560                           ; 2 bytes @ 0x1
 12561                           
 12562  0071                     PWM2_LoadDutyValue@dutyValue:	
 12563                           ; 2 bytes @ 0x1
 12564                           
 12565  0071                     TMR0_SetInterruptHandler@InterruptHandler:	
 12566                           ; 2 bytes @ 0x1
 12567                           
 12568  0071                     displayL1_SetUserLed@userLedVect:	
 12569                           ; 2 bytes @ 0x1
 12570                           
 12571  0071                     displayCharReverse@cVal:	
 12572                           ; 2 bytes @ 0x1
 12573                           
 12574  0071                     secret_clear@data:	
 12575                           ; 2 bytes @ 0x1
 12576                           
 12577  0071                     ___wmul@multiplier:	
 12578                           ; 2 bytes @ 0x1
 12579                           
 12580  0071                     ___lwdiv@divisor:	
 12581                           ; 2 bytes @ 0x1
 12582                           
 12583  0071                     memset@p1:	
 12584                           ; 2 bytes @ 0x1
 12585                           
 12586  0071                     strlen@s:	
 12587                           ; 2 bytes @ 0x1
 12588                           
 12589  0071                     ___lmul@multiplier:	
 12590                           ; 2 bytes @ 0x1
 12591                           
 12592                           
 12593                           ; 4 bytes @ 0x1
 12594  0071                     	ds	1
 12595  0072                     ?_SPI1_Exchange8bitBuffer:	
 12596  0072                     ??___bmul:	
 12597                           ; 1 bytes @ 0x2
 12598                           
 12599  0072                     SPI1_Exchange8bitBuffer@bufLen:	
 12600                           ; 1 bytes @ 0x2
 12601                           
 12602  0072                     scheduler_Init@scheduler:	
 12603                           ; 1 bytes @ 0x2
 12604                           
 12605  0072                     nullifyBadge_irTxRelease@badge:	
 12606                           ; 1 bytes @ 0x2
 12607                           
 12608  0072                     isdigit@c:	
 12609                           ; 1 bytes @ 0x2
 12610                           
 12611                           
 12612                           ; 1 bytes @ 0x2
 12613  0072                     	ds	1
 12614  0073                     ??_TMR0_Initialize:	
 12615  0073                     ??_TMR0_SetInterruptHandler:	
 12616                           ; 1 bytes @ 0x3
 12617                           
 12618  0073                     ??_strlen:	
 12619                           ; 1 bytes @ 0x3
 12620                           
 12621  0073                     ??_displayCharReverse:	
 12622                           ; 1 bytes @ 0x3
 12623                           
 12624  0073                     ??_secret_clear:	
 12625                           ; 1 bytes @ 0x3
 12626                           
 12627  0073                     ??_PWM5_LoadDutyValue:	
 12628                           ; 1 bytes @ 0x3
 12629                           
 12630  0073                     ??_PWM6_LoadDutyValue:	
 12631                           ; 1 bytes @ 0x3
 12632                           
 12633  0073                     ??_PWM1_LoadDutyValue:	
 12634                           ; 1 bytes @ 0x3
 12635                           
 12636  0073                     ??_SYSTEM_Initialize:	
 12637                           ; 1 bytes @ 0x3
 12638                           
 12639  0073                     ??_PWM2_LoadDutyValue:	
 12640                           ; 1 bytes @ 0x3
 12641                           
 12642  0073                     ??_TMR0_Read16bitTimer:	
 12643                           ; 1 bytes @ 0x3
 12644                           
 12645  0073                     ??_displayL1_SetUserLed:	
 12646                           ; 1 bytes @ 0x3
 12647                           
 12648  0073                     ??_locked_get_lock_leds:	
 12649                           ; 1 bytes @ 0x3
 12650                           
 12651  0073                     ??_locked_get_unlock_leds:	
 12652                           ; 1 bytes @ 0x3
 12653                           
 12654  0073                     SPI1_Exchange8bitBuffer@dataOut:	
 12655                           ; 1 bytes @ 0x3
 12656                           
 12657  0073                     scheduler_Init@k:	
 12658                           ; 1 bytes @ 0x3
 12659                           
 12660  0073                     nullifyBadge_buttonsGet@retVal:	
 12661                           ; 1 bytes @ 0x3
 12662                           
 12663  0073                     ___bmul@product:	
 12664                           ; 1 bytes @ 0x3
 12665                           
 12666  0073                     locked_lock_leds@size:	
 12667                           ; 1 bytes @ 0x3
 12668                           
 12669  0073                     locked_get_unlock_leds@leds:	
 12670                           ; 2 bytes @ 0x3
 12671                           
 12672  0073                     ___wmul@multiplicand:	
 12673                           ; 2 bytes @ 0x3
 12674                           
 12675  0073                     ___lwdiv@dividend:	
 12676                           ; 2 bytes @ 0x3
 12677                           
 12678  0073                     memset@c:	
 12679                           ; 2 bytes @ 0x3
 12680                           
 12681                           
 12682                           ; 2 bytes @ 0x3
 12683  0073                     	ds	1
 12684  0074                     ??_SPI1_Exchange8bitBuffer:	
 12685  0074                     displayL1_SetUserLed@display:	
 12686                           ; 1 bytes @ 0x4
 12687                           
 12688  0074                     ___bmul@multiplier:	
 12689                           ; 1 bytes @ 0x4
 12690                           
 12691                           
 12692                           ; 1 bytes @ 0x4
 12693  0074                     	ds	1
 12694  0075                     ??___wmul:	
 12695  0075                     ??___lwdiv:	
 12696                           ; 1 bytes @ 0x5
 12697                           
 12698  0075                     locked_get_lock_leds@size:	
 12699                           ; 1 bytes @ 0x5
 12700                           
 12701  0075                     ___wmul@product:	
 12702                           ; 2 bytes @ 0x5
 12703                           
 12704  0075                     memset@n:	
 12705                           ; 2 bytes @ 0x5
 12706                           
 12707  0075                     strlen@cp:	
 12708                           ; 2 bytes @ 0x5
 12709                           
 12710  0075                     ___lmul@multiplicand:	
 12711                           ; 2 bytes @ 0x5
 12712                           
 12713                           
 12714                           ; 4 bytes @ 0x5
 12715  0075                     	ds	1
 12716  0076                     ___lwdiv@counter:	
 12717                           
 12718                           ; 1 bytes @ 0x6
 12719  0076                     	ds	1
 12720  0077                     ??_memset:	
 12721  0077                     ?_secret_check:	
 12722                           ; 1 bytes @ 0x7
 12723                           
 12724  0077                     ?_matrix_secret_check:	
 12725                           ; 1 bytes @ 0x7
 12726                           
 12727  0077                     SPI1_Exchange8bitBuffer@dataIn:	
 12728                           ; 1 bytes @ 0x7
 12729                           
 12730  0077                     locked_get_lock_leds@leds:	
 12731                           ; 1 bytes @ 0x7
 12732                           
 12733  0077                     secret_check@data:	
 12734                           ; 2 bytes @ 0x7
 12735                           
 12736  0077                     matrix_secret_check@data:	
 12737                           ; 2 bytes @ 0x7
 12738                           
 12739  0077                     ___lwdiv@quotient:	
 12740                           ; 2 bytes @ 0x7
 12741                           
 12742  0077                     memset@p:	
 12743                           ; 2 bytes @ 0x7
 12744                           
 12745                           
 12746                           ; 2 bytes @ 0x7
 12747  0077                     	ds	1
 12748  0078                     SPI1_Exchange8bitBuffer@bytesWritten:	
 12749  0078                     displayCharReverse@retValLower:	
 12750                           ; 1 bytes @ 0x8
 12751                           
 12752  0078                     TMR0_Read16bitTimer@readVal:	
 12753                           ; 1 bytes @ 0x8
 12754                           
 12755                           
 12756                           ; 2 bytes @ 0x8
 12757  0078                     	ds	1
 12758  0079                     ??_displayL1_Update:	
 12759  0079                     ??___lmul:	
 12760                           ; 1 bytes @ 0x9
 12761                           
 12762  0079                     ??___almod:	
 12763                           ; 1 bytes @ 0x9
 12764                           
 12765  0079                     ??___lwmod:	
 12766                           ; 1 bytes @ 0x9
 12767                           
 12768  0079                     displayCharReverse@retValUpper:	
 12769                           ; 1 bytes @ 0x9
 12770                           
 12771  0079                     secret_check@buttonPressed:	
 12772                           ; 1 bytes @ 0x9
 12773                           
 12774  0079                     matrix_secret_check@buttonPressed:	
 12775                           ; 1 bytes @ 0x9
 12776                           
 12777                           
 12778                           ; 1 bytes @ 0x9
 12779  0079                     	ds	1
 12780  007A                     TMR0_Read16bitTimer@readValLow:	
 12781  007A                     displayCharReverse@retValUpperRev:	
 12782                           ; 1 bytes @ 0xA
 12783                           
 12784  007A                     ___almod@counter:	
 12785                           ; 1 bytes @ 0xA
 12786                           
 12787  007A                     ___lwmod@counter:	
 12788                           ; 1 bytes @ 0xA
 12789                           
 12790                           
 12791                           ; 1 bytes @ 0xA
 12792  007A                     	ds	1
 12793  007B                     ??_displayL2_ForceUpdate:	
 12794  007B                     ??_displayL2_SetUserLeds:	
 12795                           ; 1 bytes @ 0xB
 12796                           
 12797  007B                     ??_displayL2_ClrUserLeds:	
 12798                           ; 1 bytes @ 0xB
 12799                           
 12800  007B                     ??_displayL1_Initialize:	
 12801                           ; 1 bytes @ 0xB
 12802                           
 12803  007B                     TMR0_Read16bitTimer@readValHigh:	
 12804                           ; 1 bytes @ 0xB
 12805                           
 12806  007B                     displayL1_Initialize@display:	
 12807                           ; 1 bytes @ 0xB
 12808                           
 12809  007B                     displayCharReverse@k:	
 12810                           ; 1 bytes @ 0xB
 12811                           
 12812  007B                     displayL2_ForceUpdate@display:	
 12813                           ; 1 bytes @ 0xB
 12814                           
 12815  007B                     displayL2_SetUserLeds@display:	
 12816                           ; 1 bytes @ 0xB
 12817                           
 12818  007B                     displayL2_ClrUserLeds@display:	
 12819                           ; 1 bytes @ 0xB
 12820                           
 12821  007B                     ___almod@sign:	
 12822                           ; 1 bytes @ 0xB
 12823                           
 12824                           
 12825                           ; 1 bytes @ 0xB
 12826  007B                     	ds	1
 12827  007C                     ??_nullifyBadge_segDisplayErase:	
 12828  007C                     ??_nullifyBadge_segDisplayPutStr:	
 12829                           ; 1 bytes @ 0xC
 12830                           
 12831  007C                     ??_nullifyBadge_segDisplayForceUpdate:	
 12832                           ; 1 bytes @ 0xC
 12833                           
 12834  007C                     ??_nullifyBadge_userLedsSet:	
 12835                           ; 1 bytes @ 0xC
 12836                           
 12837  007C                     ??_nullifyBadge_platformInit:	
 12838                           ; 1 bytes @ 0xC
 12839                           
 12840  007C                     ??_flashy_Init:	
 12841                           ; 1 bytes @ 0xC
 12842                           
 12843  007C                     ??_menu_Init:	
 12844                           ; 1 bytes @ 0xC
 12845                           
 12846  007C                     ??_slot_Init:	
 12847                           ; 1 bytes @ 0xC
 12848                           
 12849  007C                     ??_locked_Init:	
 12850                           ; 1 bytes @ 0xC
 12851                           
 12852  007C                     ??_secret_Init:	
 12853                           ; 1 bytes @ 0xC
 12854                           
 12855  007C                     ??_displayL2_Initialize:	
 12856                           ; 1 bytes @ 0xC
 12857                           
 12858  007C                     ??_displayL2_EraseSegDisplay:	
 12859                           ; 1 bytes @ 0xC
 12860                           
 12861  007C                     ??_menu_clear:	
 12862                           ; 1 bytes @ 0xC
 12863                           
 12864  007C                     ??_menu_display_option:	
 12865                           ; 1 bytes @ 0xC
 12866                           
 12867  007C                     ??_menu_run_option:	
 12868                           ; 1 bytes @ 0xC
 12869                           
 12870  007C                     ??_locked_clear:	
 12871                           ; 1 bytes @ 0xC
 12872                           
 12873  007C                     ??_scheduler_TaskRun:	
 12874                           ; 1 bytes @ 0xC
 12875                           
 12876  007C                     ??_led_circle:	
 12877                           ; 1 bytes @ 0xC
 12878                           
 12879  007C                     ??_let_alternate:	
 12880                           ; 1 bytes @ 0xC
 12881                           
 12882  007C                     ??_nullifyBadge_userLedsClr:	
 12883                           ; 1 bytes @ 0xC
 12884                           
 12885  007C                     ??_flashy_display_option:	
 12886                           ; 1 bytes @ 0xC
 12887                           
 12888                           
 12889                           	psect	cstackBANK0
 12890  0020                     __pcstackBANK0:	
 12891                           ; 1 bytes @ 0xC
 12892                           
 12893  0020                     ?_displayL1_SetSegChar:	
 12894  0020                     ??_secret_check:	
 12895                           ; 1 bytes @ 0x0
 12896                           
 12897  0020                     ??_matrix_secret_check:	
 12898                           ; 1 bytes @ 0x0
 12899                           
 12900  0020                     displayL1_SetSegChar@c:	
 12901                           ; 1 bytes @ 0x0
 12902                           
 12903  0020                     ___lmul@product:	
 12904                           ; 1 bytes @ 0x0
 12905                           
 12906  0020                     displayL1_Update@tmpRxBuf:	
 12907                           ; 4 bytes @ 0x0
 12908                           
 12909                           
 12910                           ; 10 bytes @ 0x0
 12911  0020                     	ds	1
 12912  0021                     displayL1_SetSegChar@charPos:	
 12913                           
 12914                           ; 1 bytes @ 0x1
 12915  0021                     	ds	1
 12916  0022                     ??_displayL1_SetSegChar:	
 12917                           
 12918                           ; 1 bytes @ 0x2
 12919  0022                     	ds	1
 12920  0023                     secret_check@size:	
 12921  0023                     matrix_secret_check@size:	
 12922                           ; 2 bytes @ 0x3
 12923                           
 12924                           
 12925                           ; 2 bytes @ 0x3
 12926  0023                     	ds	1
 12927  0024                     ?_rand:	
 12928                           
 12929                           ; 2 bytes @ 0x4
 12930  0024                     	ds	1
 12931  0025                     secret_check@currents_size:	
 12932  0025                     matrix_secret_check@currents_size:	
 12933                           ; 2 bytes @ 0x5
 12934                           
 12935                           
 12936                           ; 2 bytes @ 0x5
 12937  0025                     	ds	1
 12938  0026                     ??_rand:	
 12939  0026                     displayL1_SetSegChar@dispDataVectBaseIdx:	
 12940                           ; 1 bytes @ 0x6
 12941                           
 12942                           
 12943                           ; 1 bytes @ 0x6
 12944  0026                     	ds	1
 12945  0027                     displayL1_SetSegChar@display:	
 12946  0027                     secret_check@inputs:	
 12947                           ; 1 bytes @ 0x7
 12948                           
 12949  0027                     matrix_secret_check@inputs:	
 12950                           ; 1 bytes @ 0x7
 12951                           
 12952                           
 12953                           ; 1 bytes @ 0x7
 12954  0027                     	ds	1
 12955  0028                     displayL1_SetSegChar@charData:	
 12956  0028                     secret_check@i:	
 12957                           ; 2 bytes @ 0x8
 12958                           
 12959  0028                     matrix_secret_check@i:	
 12960                           ; 2 bytes @ 0x8
 12961                           
 12962                           
 12963                           ; 2 bytes @ 0x8
 12964  0028                     	ds	2
 12965  002A                     ?_displayL2_PutChar:	
 12966  002A                     displayL1_Update@display:	
 12967                           ; 1 bytes @ 0xA
 12968                           
 12969  002A                     displayL2_PutChar@c:	
 12970                           ; 1 bytes @ 0xA
 12971                           
 12972                           
 12973                           ; 1 bytes @ 0xA
 12974  002A                     	ds	1
 12975  002B                     ??_displayL2_PutChar:	
 12976  002B                     ?_displayL2_SetUserLeds:	
 12977                           ; 1 bytes @ 0xB
 12978                           
 12979  002B                     ?___lwmod:	
 12980                           ; 1 bytes @ 0xB
 12981                           
 12982  002B                     ?___almod:	
 12983                           ; 2 bytes @ 0xB
 12984                           
 12985  002B                     nullifyBadge_segDisplayForceUpdate@badge:	
 12986                           ; 4 bytes @ 0xB
 12987                           
 12988  002B                     nullifyBadge_userLedsClr@badge:	
 12989                           ; 1 bytes @ 0xB
 12990                           
 12991  002B                     displayL2_Initialize@display:	
 12992                           ; 1 bytes @ 0xB
 12993                           
 12994  002B                     displayL2_SetUserLeds@userLedData:	
 12995                           ; 1 bytes @ 0xB
 12996                           
 12997  002B                     ___lwmod@divisor:	
 12998                           ; 2 bytes @ 0xB
 12999                           
 13000  002B                     ___almod@divisor:	
 13001                           ; 2 bytes @ 0xB
 13002                           
 13003                           
 13004                           ; 4 bytes @ 0xB
 13005  002B                     	ds	1
 13006  002C                     nullifyBadge_platformInit@badge:	
 13007                           
 13008                           ; 1 bytes @ 0xC
 13009  002C                     	ds	1
 13010  002D                     ?_nullifyBadge_userLedsSet:	
 13011  002D                     nullifyBadge_userLedsSet@userLedData:	
 13012                           ; 1 bytes @ 0xD
 13013                           
 13014  002D                     ___lwmod@dividend:	
 13015                           ; 2 bytes @ 0xD
 13016                           
 13017                           
 13018                           ; 2 bytes @ 0xD
 13019  002D                     	ds	1
 13020  002E                     displayL2_PutChar@k:	
 13021                           
 13022                           ; 1 bytes @ 0xE
 13023  002E                     	ds	1
 13024  002F                     ?_slot_Setup:	
 13025  002F                     ?_sprintf:	
 13026                           ; 1 bytes @ 0xF
 13027                           
 13028  002F                     nullifyBadge_userLedsSet@badge:	
 13029                           ; 2 bytes @ 0xF
 13030                           
 13031  002F                     displayL2_PutChar@display:	
 13032                           ; 1 bytes @ 0xF
 13033                           
 13034  002F                     slot_Setup@taskData:	
 13035                           ; 1 bytes @ 0xF
 13036                           
 13037  002F                     sprintf@sp:	
 13038                           ; 2 bytes @ 0xF
 13039                           
 13040  002F                     ___almod@dividend:	
 13041                           ; 2 bytes @ 0xF
 13042                           
 13043                           
 13044                           ; 4 bytes @ 0xF
 13045  002F                     	ds	1
 13046  0030                     ?_displayL2_PutStr:	
 13047  0030                     ?_led_roundabout:	
 13048                           ; 1 bytes @ 0x10
 13049                           
 13050  0030                     ?_led_curtain:	
 13051                           ; 1 bytes @ 0x10
 13052                           
 13053  0030                     ?_led_circle:	
 13054                           ; 1 bytes @ 0x10
 13055                           
 13056  0030                     ?_let_alternate:	
 13057                           ; 1 bytes @ 0x10
 13058                           
 13059  0030                     ?_led_Parody:	
 13060                           ; 1 bytes @ 0x10
 13061                           
 13062  0030                     led_roundabout@counter:	
 13063                           ; 1 bytes @ 0x10
 13064                           
 13065  0030                     led_curtain@counter:	
 13066                           ; 2 bytes @ 0x10
 13067                           
 13068  0030                     led_circle@count:	
 13069                           ; 2 bytes @ 0x10
 13070                           
 13071  0030                     let_alternate@count:	
 13072                           ; 2 bytes @ 0x10
 13073                           
 13074  0030                     led_Parody@count:	
 13075                           ; 2 bytes @ 0x10
 13076                           
 13077  0030                     displayL2_PutStr@str:	
 13078                           ; 2 bytes @ 0x10
 13079                           
 13080                           
 13081                           ; 2 bytes @ 0x10
 13082  0030                     	ds	1
 13083  0031                     ??_slot_Setup:	
 13084  0031                     sprintf@f:	
 13085                           ; 1 bytes @ 0x11
 13086                           
 13087                           
 13088                           ; 2 bytes @ 0x11
 13089  0031                     	ds	1
 13090  0032                     ??_displayL2_PutStr:	
 13091  0032                     ??_led_roundabout:	
 13092                           ; 1 bytes @ 0x12
 13093                           
 13094  0032                     ??_led_curtain:	
 13095                           ; 1 bytes @ 0x12
 13096                           
 13097  0032                     ??_led_Parody:	
 13098                           ; 1 bytes @ 0x12
 13099                           
 13100  0032                     ?_slot_Running_Animation:	
 13101                           ; 1 bytes @ 0x12
 13102                           
 13103  0032                     slot_Running_Animation@taskData:	
 13104                           ; 1 bytes @ 0x12
 13105                           
 13106                           
 13107                           ; 2 bytes @ 0x12
 13108  0032                     	ds	1
 13109  0033                     ??_led_rand:	
 13110                           
 13111                           ; 1 bytes @ 0x13
 13112  0033                     	ds	1
 13113  0034                     ??_slot_Running_Animation:	
 13114  0034                     led_roundabout@leds:	
 13115                           ; 1 bytes @ 0x14
 13116                           
 13117  0034                     led_curtain@leds:	
 13118                           ; 2 bytes @ 0x14
 13119                           
 13120  0034                     led_Parody@leds:	
 13121                           ; 2 bytes @ 0x14
 13122                           
 13123  0034                     slot_Setup@data:	
 13124                           ; 2 bytes @ 0x14
 13125                           
 13126                           
 13127                           ; 2 bytes @ 0x14
 13128  0034                     	ds	1
 13129  0035                     displayL2_PutStr@display:	
 13130                           
 13131                           ; 1 bytes @ 0x15
 13132  0035                     	ds	1
 13133  0036                     displayL2_PutStr@k:	
 13134  0036                     led_roundabout@size:	
 13135                           ; 1 bytes @ 0x16
 13136                           
 13137  0036                     led_curtain@size:	
 13138                           ; 2 bytes @ 0x16
 13139                           
 13140  0036                     led_Parody@size:	
 13141                           ; 2 bytes @ 0x16
 13142                           
 13143  0036                     slot_Running_Animation@data:	
 13144                           ; 2 bytes @ 0x16
 13145                           
 13146                           
 13147                           ; 2 bytes @ 0x16
 13148  0036                     	ds	1
 13149  0037                     ?_nullifyBadge_segDisplayPutStr:	
 13150  0037                     displayL2_EraseSegDisplay@display:	
 13151                           ; 1 bytes @ 0x17
 13152                           
 13153  0037                     nullifyBadge_segDisplayPutStr@str:	
 13154                           ; 1 bytes @ 0x17
 13155                           
 13156                           
 13157                           ; 2 bytes @ 0x17
 13158  0037                     	ds	1
 13159  0038                     nullifyBadge_segDisplayErase@badge:	
 13160                           
 13161                           ; 1 bytes @ 0x18
 13162  0038                     	ds	1
 13163  0039                     ?_flashy_Init:	
 13164  0039                     ?_menu_Init:	
 13165                           ; 1 bytes @ 0x19
 13166                           
 13167  0039                     ?_slot_Init:	
 13168                           ; 1 bytes @ 0x19
 13169                           
 13170  0039                     ?_locked_Init:	
 13171                           ; 1 bytes @ 0x19
 13172                           
 13173  0039                     ?_secret_Init:	
 13174                           ; 1 bytes @ 0x19
 13175                           
 13176  0039                     ?_matrix_Init:	
 13177                           ; 1 bytes @ 0x19
 13178                           
 13179  0039                     ?_menu_clear:	
 13180                           ; 1 bytes @ 0x19
 13181                           
 13182  0039                     ?_locked_clear:	
 13183                           ; 1 bytes @ 0x19
 13184                           
 13185  0039                     nullifyBadge_segDisplayPutStr@badge:	
 13186                           ; 1 bytes @ 0x19
 13187                           
 13188  0039                     menu_Init@taskData:	
 13189                           ; 1 bytes @ 0x19
 13190                           
 13191  0039                     menu_clear@data:	
 13192                           ; 2 bytes @ 0x19
 13193                           
 13194  0039                     flashy_Init@taskData:	
 13195                           ; 2 bytes @ 0x19
 13196                           
 13197  0039                     locked_Init@taskData:	
 13198                           ; 2 bytes @ 0x19
 13199                           
 13200  0039                     locked_clear@data:	
 13201                           ; 2 bytes @ 0x19
 13202                           
 13203  0039                     secret_Init@taskData:	
 13204                           ; 2 bytes @ 0x19
 13205                           
 13206  0039                     slot_Init@taskData:	
 13207                           ; 2 bytes @ 0x19
 13208                           
 13209  0039                     matrix_Init@taskData:	
 13210                           ; 2 bytes @ 0x19
 13211                           
 13212                           
 13213                           ; 2 bytes @ 0x19
 13214  0039                     	ds	1
 13215  003A                     ?_marquee_speedy:	
 13216  003A                     ?_marquee:	
 13217                           ; 1 bytes @ 0x1A
 13218                           
 13219  003A                     marquee_speedy@string:	
 13220                           ; 1 bytes @ 0x1A
 13221                           
 13222  003A                     marquee@string:	
 13223                           ; 2 bytes @ 0x1A
 13224                           
 13225                           
 13226                           ; 2 bytes @ 0x1A
 13227  003A                     	ds	1
 13228  003B                     ??_matrix_Init:	
 13229  003B                     ?_menu_run_option:	
 13230                           ; 1 bytes @ 0x1B
 13231                           
 13232  003B                     ??_sprintf:	
 13233                           ; 1 bytes @ 0x1B
 13234                           
 13235  003B                     led_rand@spark:	
 13236                           ; 1 bytes @ 0x1B
 13237                           
 13238  003B                     menu_Init@data:	
 13239                           ; 2 bytes @ 0x1B
 13240                           
 13241  003B                     menu_run_option@data:	
 13242                           ; 2 bytes @ 0x1B
 13243                           
 13244  003B                     flashy_Init@data:	
 13245                           ; 2 bytes @ 0x1B
 13246                           
 13247  003B                     locked_Init@data:	
 13248                           ; 2 bytes @ 0x1B
 13249                           
 13250  003B                     secret_Init@data:	
 13251                           ; 2 bytes @ 0x1B
 13252                           
 13253  003B                     slot_Init@data:	
 13254                           ; 2 bytes @ 0x1B
 13255                           
 13256                           
 13257                           ; 2 bytes @ 0x1B
 13258  003B                     	ds	1
 13259  003C                     marquee_speedy@count:	
 13260  003C                     marquee@count:	
 13261                           ; 2 bytes @ 0x1C
 13262                           
 13263                           
 13264                           ; 2 bytes @ 0x1C
 13265  003C                     	ds	1
 13266  003D                     ?_slot_Finished_Animation:	
 13267  003D                     slot_Finished_Animation@taskData:	
 13268                           ; 1 bytes @ 0x1D
 13269                           
 13270  003D                     matrix_Init@data:	
 13271                           ; 2 bytes @ 0x1D
 13272                           
 13273                           
 13274                           ; 2 bytes @ 0x1D
 13275  003D                     	ds	1
 13276  003E                     ??_marquee:	
 13277  003E                     marquee_speedy@multiplier:	
 13278                           ; 1 bytes @ 0x1E
 13279                           
 13280                           
 13281                           ; 2 bytes @ 0x1E
 13282  003E                     	ds	1
 13283  003F                     ?_scheduler_TaskAdd:	
 13284  003F                     ??_slot_Finished_Animation:	
 13285                           ; 1 bytes @ 0x1F
 13286                           
 13287  003F                     scheduler_TaskAdd@task:	
 13288                           ; 1 bytes @ 0x1F
 13289                           
 13290  003F                     sprintf@prec:	
 13291                           ; 1 bytes @ 0x1F
 13292                           
 13293  003F                     marquee@display_string:	
 13294                           ; 1 bytes @ 0x1F
 13295                           
 13296                           
 13297                           ; 5 bytes @ 0x1F
 13298  003F                     	ds	1
 13299  0040                     ??_scheduler_TaskAdd:	
 13300  0040                     ??_marquee_speedy:	
 13301                           ; 1 bytes @ 0x20
 13302                           
 13303  0040                     sprintf@flag:	
 13304                           ; 1 bytes @ 0x20
 13305                           
 13306                           
 13307                           ; 1 bytes @ 0x20
 13308  0040                     	ds	1
 13309  0041                     slot_Finished_Animation@data:	
 13310  0041                     sprintf@cp:	
 13311                           ; 2 bytes @ 0x21
 13312                           
 13313  0041                     marquee_speedy@display_string:	
 13314                           ; 2 bytes @ 0x21
 13315                           
 13316                           
 13317                           ; 5 bytes @ 0x21
 13318  0041                     	ds	2
 13319  0043                     sprintf@ap:	
 13320                           
 13321                           ; 1 bytes @ 0x23
 13322  0043                     	ds	1
 13323  0044                     marquee@multiplier:	
 13324  0044                     sprintf@val:	
 13325                           ; 2 bytes @ 0x24
 13326                           
 13327                           
 13328                           ; 2 bytes @ 0x24
 13329  0044                     	ds	2
 13330  0046                     scheduler_TaskAdd@scheduler:	
 13331  0046                     marquee_speedy@i:	
 13332                           ; 1 bytes @ 0x26
 13333                           
 13334  0046                     marquee@i:	
 13335                           ; 2 bytes @ 0x26
 13336                           
 13337  0046                     sprintf@len:	
 13338                           ; 2 bytes @ 0x26
 13339                           
 13340                           
 13341                           ; 2 bytes @ 0x26
 13342  0046                     	ds	1
 13343  0047                     scheduler_TaskAdd@k:	
 13344                           
 13345                           ; 1 bytes @ 0x27
 13346  0047                     	ds	1
 13347  0048                     marquee_speedy@string_length:	
 13348  0048                     marquee@string_length:	
 13349                           ; 2 bytes @ 0x28
 13350                           
 13351  0048                     sprintf@width:	
 13352                           ; 2 bytes @ 0x28
 13353                           
 13354                           
 13355                           ; 2 bytes @ 0x28
 13356  0048                     	ds	2
 13357  004A                     sprintf@c:	
 13358  004A                     marquee_speedy@j:	
 13359                           ; 1 bytes @ 0x2A
 13360                           
 13361  004A                     marquee@j:	
 13362                           ; 2 bytes @ 0x2A
 13363                           
 13364                           
 13365                           ; 2 bytes @ 0x2A
 13366  004A                     	ds	2
 13367  004C                     ?_menu_display_option:	
 13368  004C                     ?_flashy_display_option:	
 13369                           ; 1 bytes @ 0x2C
 13370                           
 13371  004C                     ?_matrix_display_option:	
 13372                           ; 1 bytes @ 0x2C
 13373                           
 13374  004C                     menu_display_option@data:	
 13375                           ; 1 bytes @ 0x2C
 13376                           
 13377  004C                     flashy_display_option@data:	
 13378                           ; 2 bytes @ 0x2C
 13379                           
 13380  004C                     matrix_display_option@data:	
 13381                           ; 2 bytes @ 0x2C
 13382                           
 13383                           
 13384                           ; 2 bytes @ 0x2C
 13385  004C                     	ds	2
 13386  004E                     ??_matrix_display_option:	
 13387  004E                     menu_display_option@size:	
 13388                           ; 1 bytes @ 0x2E
 13389                           
 13390                           
 13391                           ; 2 bytes @ 0x2E
 13392  004E                     	ds	2
 13393  0050                     menu_display_option@led:	
 13394                           
 13395                           ; 2 bytes @ 0x30
 13396  0050                     	ds	2
 13397  0052                     ?_flashy_Main:	
 13398  0052                     ?_menu_Main:	
 13399                           ; 1 bytes @ 0x32
 13400                           
 13401  0052                     ?_slot_Main:	
 13402                           ; 1 bytes @ 0x32
 13403                           
 13404  0052                     ?_locked_Main:	
 13405                           ; 1 bytes @ 0x32
 13406                           
 13407  0052                     ?_secret_Main:	
 13408                           ; 1 bytes @ 0x32
 13409                           
 13410  0052                     ?_matrix_Main:	
 13411                           ; 1 bytes @ 0x32
 13412                           
 13413  0052                     menu_Main@taskData:	
 13414                           ; 1 bytes @ 0x32
 13415                           
 13416  0052                     flashy_Main@taskData:	
 13417                           ; 2 bytes @ 0x32
 13418                           
 13419  0052                     locked_Main@taskData:	
 13420                           ; 2 bytes @ 0x32
 13421                           
 13422  0052                     secret_Main@taskData:	
 13423                           ; 2 bytes @ 0x32
 13424                           
 13425  0052                     slot_Main@taskData:	
 13426                           ; 2 bytes @ 0x32
 13427                           
 13428  0052                     matrix_Main@taskData:	
 13429                           ; 2 bytes @ 0x32
 13430                           
 13431                           
 13432                           ; 2 bytes @ 0x32
 13433  0052                     	ds	2
 13434  0054                     ??_flashy_Main:	
 13435  0054                     ??_menu_Main:	
 13436                           ; 1 bytes @ 0x34
 13437                           
 13438  0054                     ??_slot_Main:	
 13439                           ; 1 bytes @ 0x34
 13440                           
 13441  0054                     ??_locked_Main:	
 13442                           ; 1 bytes @ 0x34
 13443                           
 13444  0054                     ??_secret_Main:	
 13445                           ; 1 bytes @ 0x34
 13446                           
 13447  0054                     ??_matrix_Main:	
 13448                           ; 1 bytes @ 0x34
 13449                           
 13450                           
 13451                           ; 1 bytes @ 0x34
 13452  0054                     	ds	2
 13453  0056                     menu_Main@buttonPressed:	
 13454  0056                     locked_Main@buttonPressed:	
 13455                           ; 1 bytes @ 0x36
 13456                           
 13457  0056                     secret_Main@secret_found:	
 13458                           ; 1 bytes @ 0x36
 13459                           
 13460  0056                     flashy_Main@hit_counter:	
 13461                           ; 1 bytes @ 0x36
 13462                           
 13463                           
 13464                           ; 6 bytes @ 0x36
 13465  0056                     	ds	1
 13466  0057                     secret_Main@buttonPressed:	
 13467  0057                     menu_Main@data:	
 13468                           ; 1 bytes @ 0x37
 13469                           
 13470  0057                     locked_Main@data:	
 13471                           ; 2 bytes @ 0x37
 13472                           
 13473                           
 13474                           ; 2 bytes @ 0x37
 13475  0057                     	ds	1
 13476  0058                     matrix_Main@matrix_found:	
 13477  0058                     secret_Main@data:	
 13478                           ; 1 bytes @ 0x38
 13479                           
 13480                           
 13481                           ; 2 bytes @ 0x38
 13482  0058                     	ds	1
 13483  0059                     matrix_Main@buttonPressed:	
 13484                           
 13485                           ; 1 bytes @ 0x39
 13486  0059                     	ds	1
 13487  005A                     matrix_Main@holdvalue:	
 13488                           
 13489                           ; 1 bytes @ 0x3A
 13490  005A                     	ds	1
 13491  005B                     matrix_Main@data:	
 13492                           
 13493                           ; 2 bytes @ 0x3B
 13494  005B                     	ds	1
 13495  005C                     flashy_Main@buttonPressed:	
 13496                           
 13497                           ; 2 bytes @ 0x3C
 13498  005C                     	ds	2
 13499  005E                     flashy_Main@data:	
 13500                           
 13501                           ; 2 bytes @ 0x3E
 13502  005E                     	ds	6
 13503  0064                     slot_Main@buttonPressed:	
 13504                           
 13505                           ; 1 bytes @ 0x44
 13506  0064                     	ds	1
 13507  0065                     slot_Main@data:	
 13508                           
 13509                           ; 2 bytes @ 0x45
 13510  0065                     	ds	2
 13511  0067                     scheduler_TaskRun@task:	
 13512                           
 13513                           ; 1 bytes @ 0x47
 13514  0067                     	ds	1
 13515  0068                     ??_schedulerExecute:	
 13516                           
 13517                           ; 1 bytes @ 0x48
 13518  0068                     	ds	6
 13519  006E                     ??_main:	
 13520                           
 13521                           ; 1 bytes @ 0x4E
 13522  006E                     	ds	1
 13523                           
 13524                           	psect	maintext
 13525  0661                     __pmaintext:	
 13526 ;;
 13527 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
 13528 ;;
 13529 ;; *************** function _main *****************
 13530 ;; Defined at:
 13531 ;;		line 225 in file "main.c"
 13532 ;; Parameters:    Size  Location     Type
 13533 ;;		None
 13534 ;; Auto vars:     Size  Location     Type
 13535 ;;		None
 13536 ;; Return value:  Size  Location     Type
 13537 ;;                  1    wreg      void 
 13538 ;; Registers used:
 13539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13540 ;; Tracked objects:
 13541 ;;		On entry : B1F/0
 13542 ;;		On exit  : 0/0
 13543 ;;		Unchanged: 0/0
 13544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13548 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13549 ;;Total ram usage:        1 bytes
 13550 ;; Hardware stack levels required when called:   15
 13551 ;; This function calls:
 13552 ;;		_nullifyBadge_platformInit
 13553 ;;		_schedulerExecute
 13554 ;;		_scheduler_Init
 13555 ;;		_scheduler_TaskAdd
 13556 ;;		_scheduler_TaskInit
 13557 ;; This function is called by:
 13558 ;;		Startup code after reset
 13559 ;; This function uses a non-reentrant model
 13560 ;;
 13561                           
 13562                           
 13563                           ;psect for function _main
 13564  0661                     _main:	
 13565                           
 13566                           ;main.c: 228: nullifyBadge_platformInit(&badge_inst);
 13567                           
 13568                           ;incstack = 0
 13569                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13570  0661  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13571  0662  31A0  2005  3186   	fcall	_nullifyBadge_platformInit
 13572                           
 13573                           ;main.c: 231: scheduler_Init(&schedulerInst);
 13574  0665  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13575  0666  31B6  263B  3186   	fcall	_scheduler_Init
 13576                           
 13577                           ;main.c: 234: scheduler_TaskInit(&flashy_task);
 13578  0669  305A               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 13579  066A  31AA  2215  3186   	fcall	_scheduler_TaskInit
 13580                           
 13581                           ;main.c: 235: scheduler_TaskInit(&menu_task);
 13582  066D  304D               	movlw	(low (_menu_task| (0+256)))& (0+255)
 13583  066E  31AA  2215  3186   	fcall	_scheduler_TaskInit
 13584                           
 13585                           ;main.c: 236: scheduler_TaskInit(&slot_task);
 13586  0671  3040               	movlw	(low (_slot_task| (0+256)))& (0+255)
 13587  0672  31AA  2215  3186   	fcall	_scheduler_TaskInit
 13588                           
 13589                           ;main.c: 237: scheduler_TaskInit(&locked_task);
 13590  0675  3033               	movlw	(low (_locked_task| (0+256)))& (0+255)
 13591  0676  31AA  2215  3186   	fcall	_scheduler_TaskInit
 13592                           
 13593                           ;main.c: 238: scheduler_TaskInit(&secret_task);
 13594  0679  3026               	movlw	(low (_secret_task| (0+256)))& (0+255)
 13595  067A  31AA  2215  3186   	fcall	_scheduler_TaskInit
 13596                           
 13597                           ;main.c: 239: scheduler_TaskInit(&matrix_task);
 13598  067D  30C4               	movlw	(low (_matrix_task| (0+256)))& (0+255)
 13599  067E  31AA  2215  3186   	fcall	_scheduler_TaskInit
 13600                           
 13601                           ;main.c: 242: flashy_TaskData.badge = &badge_inst;
 13602  0681  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13603  0682  0020               	movlb	0	; select bank0
 13604  0683  00EE               	movwf	??_main
 13605  0684  086E               	movf	??_main,w
 13606  0685  0029               	movlb	9	; select bank9
 13607  0686  00A0               	movwf	_flashy_TaskData^(0+1152)
 13608                           
 13609                           ;main.c: 243: menu_TaskData.badge = &badge_inst;
 13610  0687  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13611  0688  0020               	movlb	0	; select bank0
 13612  0689  00EE               	movwf	??_main
 13613  068A  086E               	movf	??_main,w
 13614  068B  0025               	movlb	5	; select bank5
 13615  068C  00BC               	movwf	_menu_TaskData^(0+640)
 13616                           
 13617                           ;main.c: 244: slot_TaskData.badge = &badge_inst;
 13618  068D  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13619  068E  0020               	movlb	0	; select bank0
 13620  068F  00EE               	movwf	??_main
 13621  0690  086E               	movf	??_main,w
 13622  0691  002B               	movlb	11	; select bank11
 13623  0692  00A0               	movwf	_slot_TaskData^(0+1408)
 13624                           
 13625                           ;main.c: 245: locked_TaskData.badge = &badge_inst;
 13626  0693  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13627  0694  0020               	movlb	0	; select bank0
 13628  0695  00EE               	movwf	??_main
 13629  0696  086E               	movf	??_main,w
 13630  0697  0025               	movlb	5	; select bank5
 13631  0698  00AE               	movwf	_locked_TaskData^(0+640)
 13632                           
 13633                           ;main.c: 246: secret_TaskData.badge = &badge_inst;
 13634  0699  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13635  069A  0020               	movlb	0	; select bank0
 13636  069B  00EE               	movwf	??_main
 13637  069C  086E               	movf	??_main,w
 13638  069D  0025               	movlb	5	; select bank5
 13639  069E  00A0               	movwf	_secret_TaskData^(0+640)
 13640                           
 13641                           ;main.c: 247: matrix_TaskData.badge = &badge_inst;
 13642  069F  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13643  06A0  0020               	movlb	0	; select bank0
 13644  06A1  00EE               	movwf	??_main
 13645  06A2  086E               	movf	??_main,w
 13646  06A3  0029               	movlb	9	; select bank9
 13647  06A4  00BE               	movwf	_matrix_TaskData^(0+1152)
 13648                           
 13649                           ;main.c: 251: badge_locked = 1;
 13650  06A5  0021               	movlb	1	; select bank1
 13651  06A6  01C4               	clrf	_badge_locked^(0+128)
 13652  06A7  0AC4               	incf	_badge_locked^(0+128),f
 13653                           
 13654                           ;main.c: 254: flashy_task.taskData = (void *) &flashy_TaskData;
 13655  06A8  30A0               	movlw	low _flashy_TaskData
 13656  06A9  0022               	movlb	2	; select bank2
 13657  06AA  00DC               	movwf	(low ((_flashy_task| (0+256)+2)))^0
 13658  06AB  3004               	movlw	high _flashy_TaskData
 13659  06AC  00DD               	movwf	((low ((_flashy_task| (0+256)+2))+1))^0
 13660                           
 13661                           ;main.c: 255: flashy_task.taskInitCallback = flashy_Init;
 13662  06AD  3064               	movlw	low _flashy_Init
 13663  06AE  00DE               	movwf	(low ((_flashy_task| (0+256)+4)))^0
 13664  06AF  3007               	movlw	high _flashy_Init
 13665  06B0  00DF               	movwf	((low ((_flashy_task| (0+256)+4)))^0+1)
 13666                           
 13667                           ;main.c: 256: flashy_task.taskExecuteCallback = flashy_Main;
 13668  06B1  3019               	movlw	low _flashy_Main
 13669  06B2  00E2               	movwf	(low ((_flashy_task| (0+256)+8)))^0
 13670  06B3  3008               	movlw	high _flashy_Main
 13671  06B4  00E3               	movwf	((low ((_flashy_task| (0+256)+8)))^0+1)
 13672                           
 13673                           ;main.c: 257: flashy_task.taskExitCallback = flashy_Exit;
 13674  06B5  3000               	movlw	0
 13675  06B6  00E0               	movwf	(low ((_flashy_task| (0+256)+6)))^0
 13676  06B7  3000               	movlw	0
 13677  06B8  00E1               	movwf	((low ((_flashy_task| (0+256)+6)))^0+1)
 13678                           
 13679                           ;main.c: 258: flashy_task.taskInterval = 10;
 13680  06B9  300A               	movlw	10
 13681  06BA  00E4               	movwf	(_flashy_task^(0+256)+10)
 13682  06BB  3000               	movlw	0
 13683  06BC  00E5               	movwf	(_flashy_task^(0+256)+11)
 13684                           
 13685                           ;main.c: 260: menu_task.taskData = (void *) &menu_TaskData;
 13686  06BD  30BC               	movlw	low _menu_TaskData
 13687  06BE  00CF               	movwf	(low ((_menu_task| (0+256)+2)))^0
 13688  06BF  3002               	movlw	high _menu_TaskData
 13689  06C0  00D0               	movwf	((low ((_menu_task| (0+256)+2))+1))^0
 13690                           
 13691                           ;main.c: 261: menu_task.taskInitCallback = menu_Init;
 13692  06C1  303B               	movlw	low _menu_Init
 13693  06C2  00D1               	movwf	(low ((_menu_task| (0+256)+4)))^0
 13694  06C3  302F               	movlw	high _menu_Init
 13695  06C4  00D2               	movwf	((low ((_menu_task| (0+256)+4)))^0+1)
 13696                           
 13697                           ;main.c: 262: menu_task.taskExecuteCallback = menu_Main;
 13698  06C5  3009               	movlw	low _menu_Main
 13699  06C6  00D5               	movwf	(low ((_menu_task| (0+256)+8)))^0
 13700  06C7  301E               	movlw	high _menu_Main
 13701  06C8  00D6               	movwf	((low ((_menu_task| (0+256)+8)))^0+1)
 13702                           
 13703                           ;main.c: 263: menu_task.taskExitCallback = menu_Exit;
 13704  06C9  3000               	movlw	0
 13705  06CA  00D3               	movwf	(low ((_menu_task| (0+256)+6)))^0
 13706  06CB  3000               	movlw	0
 13707  06CC  00D4               	movwf	((low ((_menu_task| (0+256)+6)))^0+1)
 13708                           
 13709                           ;main.c: 264: menu_task.taskInterval = 10;
 13710  06CD  300A               	movlw	10
 13711  06CE  00D7               	movwf	(_menu_task^(0+256)+10)
 13712  06CF  3000               	movlw	0
 13713  06D0  00D8               	movwf	(_menu_task^(0+256)+11)
 13714                           
 13715                           ;main.c: 266: slot_task.taskData = (void *) &slot_TaskData;
 13716  06D1  30A0               	movlw	low _slot_TaskData
 13717  06D2  00C2               	movwf	(low ((_slot_task| (0+256)+2)))^0
 13718  06D3  3005               	movlw	high _slot_TaskData
 13719  06D4  00C3               	movwf	((low ((_slot_task| (0+256)+2))+1))^0
 13720                           
 13721                           ;main.c: 267: slot_task.taskInitCallback = slot_Init;
 13722  06D5  305A               	movlw	low _slot_Init
 13723  06D6  00C4               	movwf	(low ((_slot_task| (0+256)+4)))^0
 13724  06D7  3020               	movlw	high _slot_Init
 13725  06D8  00C5               	movwf	((low ((_slot_task| (0+256)+4)))^0+1)
 13726                           
 13727                           ;main.c: 268: slot_task.taskExecuteCallback = slot_Main;
 13728  06D9  30E5               	movlw	low _slot_Main
 13729  06DA  00C8               	movwf	(low ((_slot_task| (0+256)+8)))^0
 13730  06DB  3000               	movlw	high _slot_Main
 13731  06DC  00C9               	movwf	((low ((_slot_task| (0+256)+8)))^0+1)
 13732                           
 13733                           ;main.c: 269: slot_task.taskExitCallback = slot_Exit;
 13734  06DD  3000               	movlw	0
 13735  06DE  00C6               	movwf	(low ((_slot_task| (0+256)+6)))^0
 13736  06DF  3000               	movlw	0
 13737  06E0  00C7               	movwf	((low ((_slot_task| (0+256)+6)))^0+1)
 13738                           
 13739                           ;main.c: 270: slot_task.taskInterval = 10;
 13740  06E1  300A               	movlw	10
 13741  06E2  00CA               	movwf	(_slot_task^(0+256)+10)
 13742  06E3  3000               	movlw	0
 13743  06E4  00CB               	movwf	(_slot_task^(0+256)+11)
 13744                           
 13745                           ;main.c: 272: locked_task.taskData = (void *) &locked_TaskData;
 13746  06E5  30AE               	movlw	low _locked_TaskData
 13747  06E6  00B5               	movwf	(low ((_locked_task| (0+256)+2)))^0
 13748  06E7  3002               	movlw	high _locked_TaskData
 13749  06E8  00B6               	movwf	((low ((_locked_task| (0+256)+2))+1))^0
 13750                           
 13751                           ;main.c: 273: locked_task.taskInitCallback = locked_Init;
 13752  06E9  309D               	movlw	low _locked_Init
 13753  06EA  00B7               	movwf	(low ((_locked_task| (0+256)+4)))^0
 13754  06EB  302F               	movlw	high _locked_Init
 13755  06EC  00B8               	movwf	((low ((_locked_task| (0+256)+4)))^0+1)
 13756                           
 13757                           ;main.c: 274: locked_task.taskExecuteCallback = locked_Main;
 13758  06ED  302C               	movlw	low _locked_Main
 13759  06EE  00BB               	movwf	(low ((_locked_task| (0+256)+8)))^0
 13760  06EF  301C               	movlw	high _locked_Main
 13761  06F0  00BC               	movwf	((low ((_locked_task| (0+256)+8)))^0+1)
 13762                           
 13763                           ;main.c: 275: locked_task.taskExitCallback = locked_Exit;
 13764  06F1  3000               	movlw	0
 13765  06F2  00B9               	movwf	(low ((_locked_task| (0+256)+6)))^0
 13766  06F3  3000               	movlw	0
 13767  06F4  00BA               	movwf	((low ((_locked_task| (0+256)+6)))^0+1)
 13768                           
 13769                           ;main.c: 276: locked_task.taskInterval = 10;
 13770  06F5  300A               	movlw	10
 13771  06F6  00BD               	movwf	(_locked_task^(0+256)+10)
 13772  06F7  3000               	movlw	0
 13773  06F8  00BE               	movwf	(_locked_task^(0+256)+11)
 13774                           
 13775                           ;main.c: 278: secret_task.taskData = (void *) &secret_TaskData;
 13776  06F9  30A0               	movlw	low _secret_TaskData
 13777  06FA  00A8               	movwf	(low ((_secret_task| (0+256)+2)))^0
 13778  06FB  3002               	movlw	high _secret_TaskData
 13779  06FC  00A9               	movwf	((low ((_secret_task| (0+256)+2))+1))^0
 13780                           
 13781                           ;main.c: 279: secret_task.taskInitCallback = secret_Init;
 13782  06FD  307E               	movlw	low _secret_Init
 13783  06FE  00AA               	movwf	(low ((_secret_task| (0+256)+4)))^0
 13784  06FF  302E               	movlw	high _secret_Init
 13785  0700  00AB               	movwf	((low ((_secret_task| (0+256)+4)))^0+1)
 13786                           
 13787                           ;main.c: 280: secret_task.taskExecuteCallback = secret_Main;
 13788  0701  3043               	movlw	low _secret_Main
 13789  0702  00AE               	movwf	(low ((_secret_task| (0+256)+8)))^0
 13790  0703  3026               	movlw	high _secret_Main
 13791  0704  00AF               	movwf	((low ((_secret_task| (0+256)+8)))^0+1)
 13792                           
 13793                           ;main.c: 281: secret_task.taskExitCallback = secret_Exit;
 13794  0705  3000               	movlw	0
 13795  0706  00AC               	movwf	(low ((_secret_task| (0+256)+6)))^0
 13796  0707  3000               	movlw	0
 13797  0708  00AD               	movwf	((low ((_secret_task| (0+256)+6)))^0+1)
 13798                           
 13799                           ;main.c: 282: secret_task.taskInterval = 10;
 13800  0709  300A               	movlw	10
 13801  070A  00B0               	movwf	(_secret_task^(0+256)+10)
 13802  070B  3000               	movlw	0
 13803  070C  00B1               	movwf	(_secret_task^(0+256)+11)
 13804                           
 13805                           ;main.c: 284: matrix_task.taskData = (void *) &matrix_TaskData;
 13806  070D  30BE               	movlw	low _matrix_TaskData
 13807  070E  0023               	movlb	3	; select bank3
 13808  070F  00C6               	movwf	(low ((_matrix_task| (0+256)+2)))^(0+128)
 13809  0710  3004               	movlw	high _matrix_TaskData
 13810  0711  00C7               	movwf	((low ((_matrix_task| (0+256)+2))+1))^(0+128)
 13811                           
 13812                           ;main.c: 285: matrix_task.taskInitCallback = matrix_Init;
 13813  0712  30EA               	movlw	low _matrix_Init
 13814  0713  00C8               	movwf	(low ((_matrix_task| (0+256)+4)))^(0+128)
 13815  0714  3023               	movlw	high _matrix_Init
 13816  0715  00C9               	movwf	((low ((_matrix_task| (0+256)+4)))^(0+128)+1)
 13817                           
 13818                           ;main.c: 286: matrix_task.taskExecuteCallback = matrix_Main;
 13819  0716  30E3               	movlw	low _matrix_Main
 13820  0717  00CC               	movwf	(low ((_matrix_task| (0+256)+8)))^(0+128)
 13821  0718  3010               	movlw	high _matrix_Main
 13822  0719  00CD               	movwf	((low ((_matrix_task| (0+256)+8)))^(0+128)+1)
 13823                           
 13824                           ;main.c: 287: matrix_task.taskExitCallback = matrix_Exit;
 13825  071A  3000               	movlw	0
 13826  071B  00CA               	movwf	(low ((_matrix_task| (0+256)+6)))^(0+128)
 13827  071C  3000               	movlw	0
 13828  071D  00CB               	movwf	((low ((_matrix_task| (0+256)+6)))^(0+128)+1)
 13829                           
 13830                           ;main.c: 288: matrix_task.taskInterval = 10;
 13831  071E  300A               	movlw	10
 13832  071F  00CE               	movwf	(_matrix_task^(0+384)+10)
 13833  0720  3000               	movlw	0
 13834  0721  00CF               	movwf	(_matrix_task^(0+384)+11)
 13835                           
 13836                           ;main.c: 291: secret_value = SECRET_VALUE_INIT;
 13837  0722  0021               	movlb	1	; select bank1
 13838  0723  01C5               	clrf	_secret_value^(0+128)
 13839  0724  01C6               	clrf	(_secret_value+1)^(0+128)
 13840                           
 13841                           ;main.c: 294: currentTask = FLASHY_TASK;
 13842  0725  3002               	movlw	2
 13843  0726  00BA               	movwf	_currentTask^(0+128)
 13844  0727  3000               	movlw	0
 13845  0728  00BB               	movwf	(_currentTask^(0+128)+1)
 13846                           
 13847                           ;main.c: 296: scheduler_TaskAdd(&schedulerInst, &flashy_task);
 13848  0729  305A               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 13849  072A  0020               	movlb	0	; select bank0
 13850  072B  00EE               	movwf	??_main
 13851  072C  086E               	movf	??_main,w
 13852  072D  00BF               	movwf	scheduler_TaskAdd@task
 13853  072E  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13854  072F  31A2  22EC  3186   	fcall	_scheduler_TaskAdd
 13855                           
 13856                           ;main.c: 297: scheduler_TaskAdd(&schedulerInst, &menu_task);
 13857  0732  304D               	movlw	(low (_menu_task| (0+256)))& (0+255)
 13858  0733  0020               	movlb	0	; select bank0
 13859  0734  00EE               	movwf	??_main
 13860  0735  086E               	movf	??_main,w
 13861  0736  00BF               	movwf	scheduler_TaskAdd@task
 13862  0737  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13863  0738  31A2  22EC  3186   	fcall	_scheduler_TaskAdd
 13864                           
 13865                           ;main.c: 298: scheduler_TaskAdd(&schedulerInst, &slot_task);
 13866  073B  3040               	movlw	(low (_slot_task| (0+256)))& (0+255)
 13867  073C  0020               	movlb	0	; select bank0
 13868  073D  00EE               	movwf	??_main
 13869  073E  086E               	movf	??_main,w
 13870  073F  00BF               	movwf	scheduler_TaskAdd@task
 13871  0740  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13872  0741  31A2  22EC  3186   	fcall	_scheduler_TaskAdd
 13873                           
 13874                           ;main.c: 299: scheduler_TaskAdd(&schedulerInst, &locked_task);
 13875  0744  3033               	movlw	(low (_locked_task| (0+256)))& (0+255)
 13876  0745  0020               	movlb	0	; select bank0
 13877  0746  00EE               	movwf	??_main
 13878  0747  086E               	movf	??_main,w
 13879  0748  00BF               	movwf	scheduler_TaskAdd@task
 13880  0749  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13881  074A  31A2  22EC  3186   	fcall	_scheduler_TaskAdd
 13882                           
 13883                           ;main.c: 300: scheduler_TaskAdd(&schedulerInst, &secret_task);
 13884  074D  3026               	movlw	(low (_secret_task| (0+256)))& (0+255)
 13885  074E  0020               	movlb	0	; select bank0
 13886  074F  00EE               	movwf	??_main
 13887  0750  086E               	movf	??_main,w
 13888  0751  00BF               	movwf	scheduler_TaskAdd@task
 13889  0752  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13890  0753  31A2  22EC  3186   	fcall	_scheduler_TaskAdd
 13891                           
 13892                           ;main.c: 301: scheduler_TaskAdd(&schedulerInst, &matrix_task);
 13893  0756  30C4               	movlw	(low (_matrix_task| (0+256)))& (0+255)
 13894  0757  0020               	movlb	0	; select bank0
 13895  0758  00EE               	movwf	??_main
 13896  0759  086E               	movf	??_main,w
 13897  075A  00BF               	movwf	scheduler_TaskAdd@task
 13898  075B  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13899  075C  31A2  22EC  3186   	fcall	_scheduler_TaskAdd
 13900  075F                     l10606:	
 13901                           ;main.c: 304: while(1){
 13902                           
 13903                           
 13904                           ;main.c: 305: schedulerExecute(&schedulerInst);
 13905  075F  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13906  0760  31A3  2366  3186   	fcall	_schedulerExecute
 13907  0763  2F5F               	goto	l10606
 13908  0764                     __end_of_main:	
 13909                           
 13910                           	psect	text1
 13911  2A15                     __ptext1:	
 13912 ;; *************** function _scheduler_TaskInit *****************
 13913 ;; Defined at:
 13914 ;;		line 36 in file "cooperative_scheduler.c"
 13915 ;; Parameters:    Size  Location     Type
 13916 ;;  task            1    wreg     PTR struct t_schedulerTa
 13917 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 13918 ;;		 -> menu_task(13), flashy_task(13), 
 13919 ;; Auto vars:     Size  Location     Type
 13920 ;;  task            1    1[COMMON] PTR struct t_schedulerTa
 13921 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 13922 ;;		 -> menu_task(13), flashy_task(13), 
 13923 ;; Return value:  Size  Location     Type
 13924 ;;                  1    wreg      void 
 13925 ;; Registers used:
 13926 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13927 ;; Tracked objects:
 13928 ;;		On entry : 0/0
 13929 ;;		On exit  : 0/0
 13930 ;;		Unchanged: 0/0
 13931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13935 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13936 ;;Total ram usage:        1 bytes
 13937 ;; Hardware stack levels used:    1
 13938 ;; Hardware stack levels required when called:    4
 13939 ;; This function calls:
 13940 ;;		Nothing
 13941 ;; This function is called by:
 13942 ;;		_main
 13943 ;; This function uses a non-reentrant model
 13944 ;;
 13945                           
 13946                           
 13947                           ;psect for function _scheduler_TaskInit
 13948  2A15                     _scheduler_TaskInit:	
 13949                           
 13950                           ;incstack = 0
 13951                           ; Regs used in _scheduler_TaskInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 13952                           ;scheduler_TaskInit@task stored from wreg
 13953  2A15  00F1               	movwf	scheduler_TaskInit@task
 13954                           
 13955                           ;cooperative_scheduler.c: 37: task->systemTickLastExecuted = 0;
 13956  2A16  0871               	movf	scheduler_TaskInit@task,w
 13957  2A17  0086               	movwf	6
 13958  2A18  3001               	movlw	1	; select bank2/3
 13959  2A19  0087               	movwf	7
 13960  2A1A  3000               	movlw	0
 13961  2A1B  3FC0               	movwi [0]fsr1
 13962  2A1C  3FC1               	movwi [1]fsr1
 13963                           
 13964                           ;cooperative_scheduler.c: 38: task->taskData = (0);
 13965  2A1D  0871               	movf	scheduler_TaskInit@task,w
 13966  2A1E  3E02               	addlw	2
 13967  2A1F  0086               	movwf	6
 13968  2A20  3001               	movlw	1	; select bank2/3
 13969  2A21  0087               	movwf	7
 13970  2A22  3000               	movlw	0
 13971  2A23  3FC0               	movwi [0]fsr1
 13972  2A24  3FC1               	movwi [1]fsr1
 13973                           
 13974                           ;cooperative_scheduler.c: 39: task->taskInitCallback = (0);
 13975  2A25  0871               	movf	scheduler_TaskInit@task,w
 13976  2A26  3E04               	addlw	4
 13977  2A27  0086               	movwf	6
 13978  2A28  3001               	movlw	1	; select bank2/3
 13979  2A29  0087               	movwf	7
 13980  2A2A  3000               	movlw	0
 13981  2A2B  3FC0               	movwi [0]fsr1
 13982  2A2C  3FC1               	movwi [1]fsr1
 13983                           
 13984                           ;cooperative_scheduler.c: 40: task->taskExitCallback = (0);
 13985  2A2D  0871               	movf	scheduler_TaskInit@task,w
 13986  2A2E  3E06               	addlw	6
 13987  2A2F  0086               	movwf	6
 13988  2A30  3001               	movlw	1	; select bank2/3
 13989  2A31  0087               	movwf	7
 13990  2A32  3000               	movlw	0
 13991  2A33  3FC0               	movwi [0]fsr1
 13992  2A34  3FC1               	movwi [1]fsr1
 13993                           
 13994                           ;cooperative_scheduler.c: 41: task->taskExecuteCallback = (0);
 13995  2A35  0871               	movf	scheduler_TaskInit@task,w
 13996  2A36  3E08               	addlw	8
 13997  2A37  0086               	movwf	6
 13998  2A38  3001               	movlw	1	; select bank2/3
 13999  2A39  0087               	movwf	7
 14000  2A3A  3000               	movlw	0
 14001  2A3B  3FC0               	movwi [0]fsr1
 14002  2A3C  3FC1               	movwi [1]fsr1
 14003                           
 14004                           ;cooperative_scheduler.c: 42: task->taskInterval = 65535;
 14005  2A3D  0871               	movf	scheduler_TaskInit@task,w
 14006  2A3E  3E0A               	addlw	10
 14007  2A3F  0086               	movwf	6
 14008  2A40  3001               	movlw	1	; select bank2/3
 14009  2A41  0087               	movwf	7
 14010  2A42  30FF               	movlw	255
 14011  2A43  3FC0               	movwi [0]fsr1
 14012  2A44  30FF               	movlw	255
 14013  2A45  3FC1               	movwi [1]fsr1
 14014                           
 14015                           ;cooperative_scheduler.c: 43: task->taskId = -1;
 14016  2A46  0871               	movf	scheduler_TaskInit@task,w
 14017  2A47  3E0C               	addlw	12
 14018  2A48  0086               	movwf	6
 14019  2A49  3001               	movlw	1	; select bank2/3
 14020  2A4A  0087               	movwf	7
 14021  2A4B  0181               	clrf	1
 14022  2A4C  0381               	decf	1,f
 14023  2A4D  0008               	return
 14024  2A4E                     __end_of_scheduler_TaskInit:	
 14025                           
 14026                           	psect	text2
 14027  22EC                     __ptext2:	
 14028 ;; *************** function _scheduler_TaskAdd *****************
 14029 ;; Defined at:
 14030 ;;		line 46 in file "cooperative_scheduler.c"
 14031 ;; Parameters:    Size  Location     Type
 14032 ;;  scheduler       1    wreg     PTR struct t_scheduler
 14033 ;;		 -> schedulerInst(18), 
 14034 ;;  task            1   31[BANK0 ] PTR struct t_schedulerTa
 14035 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14036 ;;		 -> menu_task(13), flashy_task(13), 
 14037 ;; Auto vars:     Size  Location     Type
 14038 ;;  scheduler       1   38[BANK0 ] PTR struct t_scheduler
 14039 ;;		 -> schedulerInst(18), 
 14040 ;;  k               1   39[BANK0 ] unsigned char 
 14041 ;; Return value:  Size  Location     Type
 14042 ;;                  1    wreg      char 
 14043 ;; Registers used:
 14044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14045 ;; Tracked objects:
 14046 ;;		On entry : 0/0
 14047 ;;		On exit  : 0/0
 14048 ;;		Unchanged: 0/0
 14049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14050 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14051 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14052 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14053 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14054 ;;Total ram usage:        9 bytes
 14055 ;; Hardware stack levels used:    1
 14056 ;; Hardware stack levels required when called:   11
 14057 ;; This function calls:
 14058 ;;		Absolute function
 14059 ;;		_flashy_Init
 14060 ;;		_locked_Init
 14061 ;;		_matrix_Init
 14062 ;;		_menu_Init
 14063 ;;		_secret_Init
 14064 ;;		_slot_Init
 14065 ;; This function is called by:
 14066 ;;		_main
 14067 ;; This function uses a non-reentrant model
 14068 ;;
 14069                           
 14070                           
 14071                           ;psect for function _scheduler_TaskAdd
 14072  22EC                     _scheduler_TaskAdd:	
 14073                           
 14074                           ;incstack = 0
 14075                           ; Regs used in _scheduler_TaskAdd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14076                           ;scheduler_TaskAdd@scheduler stored from wreg
 14077  22EC  0020               	movlb	0	; select bank0
 14078  22ED  00C6               	movwf	scheduler_TaskAdd@scheduler
 14079                           
 14080                           ;cooperative_scheduler.c: 47: u8 k;
 14081                           ;cooperative_scheduler.c: 48: for (k = 0; k < 16; k++) {
 14082  22EE  01C7               	clrf	scheduler_TaskAdd@k
 14083  22EF  3010               	movlw	16
 14084  22F0  0247               	subwf	scheduler_TaskAdd@k,w
 14085  22F1  1803               	btfsc	3,0
 14086  22F2  2B5E               	goto	l10402
 14087  22F3                     l10388:	
 14088                           
 14089                           ;cooperative_scheduler.c: 49: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 14090  22F3  0846               	movf	scheduler_TaskAdd@scheduler,w
 14091  22F4  3E10               	addlw	16
 14092  22F5  0086               	movwf	6
 14093  22F6  3001               	movlw	1	; select bank2/3
 14094  22F7  0087               	movwf	7
 14095  22F8  3F40               	moviw [0]fsr1
 14096  22F9  00C0               	movwf	??_scheduler_TaskAdd
 14097  22FA  3F41               	moviw [1]fsr1
 14098  22FB  00C1               	movwf	??_scheduler_TaskAdd+1
 14099  22FC  3001               	movlw	1
 14100  22FD  00C2               	movwf	??_scheduler_TaskAdd+2
 14101  22FE  3000               	movlw	0
 14102  22FF  00C3               	movwf	??_scheduler_TaskAdd+3
 14103  2300  0A47               	incf	scheduler_TaskAdd@k,w
 14104  2301  2B04               	goto	u6394
 14105  2302                     u6395:	
 14106  2302  35C2               	lslf	??_scheduler_TaskAdd+2,f
 14107  2303  0DC3               	rlf	??_scheduler_TaskAdd+3,f
 14108  2304                     u6394:	
 14109  2304  0B89               	decfsz	9,f
 14110  2305  2B02               	goto	u6395
 14111  2306  0840               	movf	??_scheduler_TaskAdd,w
 14112  2307  0542               	andwf	??_scheduler_TaskAdd+2,w
 14113  2308  00C4               	movwf	??_scheduler_TaskAdd+4
 14114  2309  0841               	movf	??_scheduler_TaskAdd+1,w
 14115  230A  0543               	andwf	??_scheduler_TaskAdd+3,w
 14116  230B  00C5               	movwf	??_scheduler_TaskAdd+5
 14117  230C  0844               	movf	??_scheduler_TaskAdd+4,w
 14118  230D  0445               	iorwf	??_scheduler_TaskAdd+5,w
 14119  230E  1D03               	btfss	3,2
 14120  230F  2B56               	goto	l10398
 14121                           
 14122                           ;cooperative_scheduler.c: 50: scheduler->tasks[k] = task;
 14123  2310  083F               	movf	scheduler_TaskAdd@task,w
 14124  2311  00C0               	movwf	??_scheduler_TaskAdd
 14125  2312  0847               	movf	scheduler_TaskAdd@k,w
 14126  2313  0746               	addwf	scheduler_TaskAdd@scheduler,w
 14127  2314  00C1               	movwf	??_scheduler_TaskAdd+1
 14128  2315  0841               	movf	??_scheduler_TaskAdd+1,w
 14129  2316  0086               	movwf	6
 14130  2317  3001               	movlw	1	; select bank2/3
 14131  2318  0087               	movwf	7
 14132  2319  0840               	movf	??_scheduler_TaskAdd,w
 14133  231A  0081               	movwf	1
 14134                           
 14135                           ;cooperative_scheduler.c: 51: scheduler->taskEntryVector |= (1 << k);
 14136  231B  3001               	movlw	1
 14137  231C  00C0               	movwf	??_scheduler_TaskAdd
 14138  231D  3000               	movlw	0
 14139  231E  00C1               	movwf	??_scheduler_TaskAdd+1
 14140  231F  0A47               	incf	scheduler_TaskAdd@k,w
 14141  2320  2B23               	goto	u6414
 14142  2321                     u6415:	
 14143  2321  35C0               	lslf	??_scheduler_TaskAdd,f
 14144  2322  0DC1               	rlf	??_scheduler_TaskAdd+1,f
 14145  2323                     u6414:	
 14146  2323  0B89               	decfsz	9,f
 14147  2324  2B21               	goto	u6415
 14148  2325  0846               	movf	scheduler_TaskAdd@scheduler,w
 14149  2326  3E10               	addlw	16
 14150  2327  0086               	movwf	6
 14151  2328  3001               	movlw	1	; select bank2/3
 14152  2329  0087               	movwf	7
 14153  232A  0840               	movf	??_scheduler_TaskAdd,w
 14154  232B  0481               	iorwf	1,f
 14155  232C  3141               	addfsr 1,1
 14156  232D  0841               	movf	??_scheduler_TaskAdd+1,w
 14157  232E  0481               	iorwf	1,f
 14158                           
 14159                           ;cooperative_scheduler.c: 53: if (task->taskInitCallback != (0)) {
 14160  232F  083F               	movf	scheduler_TaskAdd@task,w
 14161  2330  3E04               	addlw	4
 14162  2331  0086               	movwf	6
 14163  2332  3001               	movlw	1	; select bank2/3
 14164  2333  0087               	movwf	7
 14165  2334  0016               	moviw fsr1++
 14166  2335  0401               	iorwf	1,w
 14167  2336  1903               	btfsc	3,2
 14168  2337  2B4B               	goto	l10394
 14169                           
 14170                           ;cooperative_scheduler.c: 54: task->taskInitCallback (task->taskData);
 14171  2338  083F               	movf	scheduler_TaskAdd@task,w
 14172  2339  3E02               	addlw	2
 14173  233A  0086               	movwf	6
 14174  233B  3001               	movlw	1	; select bank2/3
 14175  233C  0087               	movwf	7
 14176  233D  3F40               	moviw [0]fsr1
 14177  233E  00B9               	movwf	matrix_Init@taskData
 14178  233F  3F41               	moviw [1]fsr1
 14179  2340  00BA               	movwf	matrix_Init@taskData+1
 14180  2341  083F               	movf	scheduler_TaskAdd@task,w
 14181  2342  3E04               	addlw	4
 14182  2343  0086               	movwf	6
 14183  2344  3001               	movlw	1	; select bank2/3
 14184  2345  0087               	movwf	7
 14185  2346  3F41               	moviw [1]fsr1
 14186  2347  008A               	movwf	10
 14187  2348  3F40               	moviw [0]fsr1
 14188  2349  000A               	callw
 14189  234A  31A2               	pagesel	$
 14190  234B                     l10394:	
 14191                           
 14192                           ;cooperative_scheduler.c: 55: }
 14193                           ;cooperative_scheduler.c: 57: task->taskId = (s8) k;
 14194  234B  0020               	movlb	0	; select bank0
 14195  234C  0847               	movf	scheduler_TaskAdd@k,w
 14196  234D  00C0               	movwf	??_scheduler_TaskAdd
 14197  234E  083F               	movf	scheduler_TaskAdd@task,w
 14198  234F  3E0C               	addlw	12
 14199  2350  0086               	movwf	6
 14200  2351  3001               	movlw	1	; select bank2/3
 14201  2352  0087               	movwf	7
 14202  2353  0840               	movf	??_scheduler_TaskAdd,w
 14203  2354  0081               	movwf	1
 14204                           
 14205                           ;cooperative_scheduler.c: 58: return k;
 14206                           ;	Return value of _scheduler_TaskAdd is never used
 14207  2355  0008               	return
 14208  2356                     l10398:	
 14209  2356  3001               	movlw	1
 14210  2357  00C0               	movwf	??_scheduler_TaskAdd
 14211  2358  0840               	movf	??_scheduler_TaskAdd,w
 14212  2359  07C7               	addwf	scheduler_TaskAdd@k,f
 14213  235A  3010               	movlw	16
 14214  235B  0247               	subwf	scheduler_TaskAdd@k,w
 14215  235C  1C03               	skipc
 14216  235D  2AF3               	goto	l10388
 14217  235E                     l10402:	
 14218                           
 14219                           ;cooperative_scheduler.c: 59: }
 14220                           ;cooperative_scheduler.c: 60: }
 14221                           ;cooperative_scheduler.c: 62: task->taskId = -1;
 14222  235E  083F               	movf	scheduler_TaskAdd@task,w
 14223  235F  3E0C               	addlw	12
 14224  2360  0086               	movwf	6
 14225  2361  3001               	movlw	1	; select bank2/3
 14226  2362  0087               	movwf	7
 14227  2363  0181               	clrf	1
 14228  2364  0381               	decf	1,f
 14229  2365  0008               	return
 14230  2366                     __end_of_scheduler_TaskAdd:	
 14231                           ;cooperative_scheduler.c: 63: return -1;
 14232                           ;	Return value of _scheduler_TaskAdd is never used
 14233                           
 14234                           
 14235                           	psect	text3
 14236  23EA                     __ptext3:	
 14237 ;; *************** function _matrix_Init *****************
 14238 ;; Defined at:
 14239 ;;		line 66 in file "matrix_task.c"
 14240 ;; Parameters:    Size  Location     Type
 14241 ;;  taskData        2   25[BANK0 ] PTR void 
 14242 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14243 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14244 ;; Auto vars:     Size  Location     Type
 14245 ;;  data            2   29[BANK0 ] PTR struct t_matrix_task
 14246 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14247 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14248 ;; Return value:  Size  Location     Type
 14249 ;;                  1    wreg      void 
 14250 ;; Registers used:
 14251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14257 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14258 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14259 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14260 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14261 ;;Total ram usage:        6 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; Hardware stack levels required when called:   10
 14264 ;; This function calls:
 14265 ;;		_nullifyBadge_segDisplayErase
 14266 ;;		_nullifyBadge_segDisplayRegister
 14267 ;;		_nullifyBadge_userLedsClr
 14268 ;;		_nullifyBadge_userLedsRegister
 14269 ;; This function is called by:
 14270 ;;		_main
 14271 ;;		_scheduler_TaskAdd
 14272 ;; This function uses a non-reentrant model
 14273 ;;
 14274                           
 14275                           
 14276                           ;psect for function _matrix_Init
 14277  23EA                     _matrix_Init:	
 14278                           
 14279                           ;matrix_task.c: 67: struct t_matrix_taskData *data = (struct t_matrix_taskData *) taskDa
      +                          ta;
 14280                           
 14281                           ;incstack = 0
 14282                           ; Regs used in _matrix_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14283  23EA  0020               	movlb	0	; select bank0
 14284  23EB  083A               	movf	matrix_Init@taskData+1,w
 14285  23EC  00BE               	movwf	matrix_Init@data+1
 14286  23ED  0839               	movf	matrix_Init@taskData,w
 14287  23EE  00BD               	movwf	matrix_Init@data
 14288                           
 14289                           ;matrix_task.c: 70: nullifyBadge_userLedsRegister(data->badge);
 14290  23EF  083D               	movf	matrix_Init@data,w
 14291  23F0  0086               	movwf	6
 14292  23F1  083E               	movf	matrix_Init@data+1,w
 14293  23F2  0087               	movwf	7
 14294  23F3  0801               	movf	1,w
 14295  23F4  31B4  24E3  31A3   	fcall	_nullifyBadge_userLedsRegister
 14296                           
 14297                           ;matrix_task.c: 71: nullifyBadge_userLedsClr(data->badge);
 14298  23F7  0020               	movlb	0	; select bank0
 14299  23F8  083D               	movf	matrix_Init@data,w
 14300  23F9  0086               	movwf	6
 14301  23FA  083E               	movf	matrix_Init@data+1,w
 14302  23FB  0087               	movwf	7
 14303  23FC  0801               	movf	1,w
 14304  23FD  3187  27FA  31A3   	fcall	_nullifyBadge_userLedsClr
 14305                           
 14306                           ;matrix_task.c: 72: nullifyBadge_segDisplayRegister(data->badge);
 14307  2400  0020               	movlb	0	; select bank0
 14308  2401  083D               	movf	matrix_Init@data,w
 14309  2402  0086               	movwf	6
 14310  2403  083E               	movf	matrix_Init@data+1,w
 14311  2404  0087               	movwf	7
 14312  2405  0801               	movf	1,w
 14313  2406  31B4  240C  31A3   	fcall	_nullifyBadge_segDisplayRegister
 14314                           
 14315                           ;matrix_task.c: 73: nullifyBadge_segDisplayErase(data->badge);
 14316  2409  0020               	movlb	0	; select bank0
 14317  240A  083D               	movf	matrix_Init@data,w
 14318  240B  0086               	movwf	6
 14319  240C  083E               	movf	matrix_Init@data+1,w
 14320  240D  0087               	movwf	7
 14321  240E  0801               	movf	1,w
 14322  240F  31B3  23FE  31A3   	fcall	_nullifyBadge_segDisplayErase
 14323                           
 14324                           ;matrix_task.c: 75: data->display_state = MATRIX_STATE_DISPLAY;
 14325  2412  0020               	movlb	0	; select bank0
 14326  2413  083D               	movf	matrix_Init@data,w
 14327  2414  3E02               	addlw	2
 14328  2415  00BB               	movwf	??_matrix_Init
 14329  2416  3000               	movlw	0
 14330  2417  3D3E               	addwfc	matrix_Init@data+1,w
 14331  2418  00BC               	movwf	??_matrix_Init+1
 14332  2419  083B               	movf	??_matrix_Init,w
 14333  241A  0086               	movwf	6
 14334  241B  083C               	movf	??_matrix_Init+1,w
 14335  241C  0087               	movwf	7
 14336  241D  300A               	movlw	10
 14337  241E  0081               	movwf	1
 14338                           
 14339                           ;matrix_task.c: 76: data->martix_state = STILL_IN_MATRIX;
 14340  241F  083D               	movf	matrix_Init@data,w
 14341  2420  3E01               	addlw	1
 14342  2421  00BB               	movwf	??_matrix_Init
 14343  2422  3000               	movlw	0
 14344  2423  3D3E               	addwfc	matrix_Init@data+1,w
 14345  2424  00BC               	movwf	??_matrix_Init+1
 14346  2425  083B               	movf	??_matrix_Init,w
 14347  2426  0086               	movwf	6
 14348  2427  083C               	movf	??_matrix_Init+1,w
 14349  2428  0087               	movwf	7
 14350  2429  3001               	movlw	1
 14351  242A  0081               	movwf	1
 14352                           
 14353                           ;matrix_task.c: 77: matrix_leds_idx =0;
 14354  242B  0021               	movlb	1	; select bank1
 14355  242C  01A0               	clrf	_matrix_leds_idx^(0+128)
 14356  242D  01A1               	clrf	(_matrix_leds_idx+1)^(0+128)
 14357                           
 14358                           ;matrix_task.c: 80: data->holdCountA = 0 ;
 14359  242E  0020               	movlb	0	; select bank0
 14360  242F  083D               	movf	matrix_Init@data,w
 14361  2430  0086               	movwf	6
 14362  2431  083E               	movf	matrix_Init@data+1,w
 14363  2432  0087               	movwf	7
 14364  2433  3147               	addfsr 1,7
 14365  2434  3000               	movlw	0
 14366  2435  3FC0               	movwi [0]fsr1
 14367  2436  3FC1               	movwi [1]fsr1
 14368                           
 14369                           ;matrix_task.c: 81: data->holdCountB = 0 ;
 14370  2437  083D               	movf	matrix_Init@data,w
 14371  2438  0086               	movwf	6
 14372  2439  083E               	movf	matrix_Init@data+1,w
 14373  243A  0087               	movwf	7
 14374  243B  3149               	addfsr 1,9
 14375  243C  3000               	movlw	0
 14376  243D  3FC0               	movwi [0]fsr1
 14377  243E  3FC1               	movwi [1]fsr1
 14378                           
 14379                           ;matrix_task.c: 82: data->holdCountX = 0 ;
 14380  243F  083D               	movf	matrix_Init@data,w
 14381  2440  0086               	movwf	6
 14382  2441  083E               	movf	matrix_Init@data+1,w
 14383  2442  0087               	movwf	7
 14384  2443  314B               	addfsr 1,11
 14385  2444  3000               	movlw	0
 14386  2445  3FC0               	movwi [0]fsr1
 14387  2446  3FC1               	movwi [1]fsr1
 14388                           
 14389                           ;matrix_task.c: 83: data->holdCountY = 0 ;
 14390  2447  083D               	movf	matrix_Init@data,w
 14391  2448  0086               	movwf	6
 14392  2449  083E               	movf	matrix_Init@data+1,w
 14393  244A  0087               	movwf	7
 14394  244B  314D               	addfsr 1,13
 14395  244C  3000               	movlw	0
 14396  244D  3FC0               	movwi [0]fsr1
 14397  244E  3FC1               	movwi [1]fsr1
 14398                           
 14399                           ;matrix_task.c: 84: data->holdCountXY = 0;
 14400  244F  083D               	movf	matrix_Init@data,w
 14401  2450  0086               	movwf	6
 14402  2451  083E               	movf	matrix_Init@data+1,w
 14403  2452  0087               	movwf	7
 14404  2453  314F               	addfsr 1,15
 14405  2454  3000               	movlw	0
 14406  2455  3FC0               	movwi [0]fsr1
 14407  2456  3FC1               	movwi [1]fsr1
 14408                           
 14409                           ;matrix_task.c: 85: data->holdCountAY = 0;
 14410  2457  083D               	movf	matrix_Init@data,w
 14411  2458  0086               	movwf	6
 14412  2459  083E               	movf	matrix_Init@data+1,w
 14413  245A  0087               	movwf	7
 14414  245B  3151               	addfsr 1,17
 14415  245C  3000               	movlw	0
 14416  245D  3FC0               	movwi [0]fsr1
 14417  245E  3FC1               	movwi [1]fsr1
 14418                           
 14419                           ;matrix_task.c: 86: data->holdCountAX = 0;
 14420  245F  083D               	movf	matrix_Init@data,w
 14421  2460  0086               	movwf	6
 14422  2461  083E               	movf	matrix_Init@data+1,w
 14423  2462  0087               	movwf	7
 14424  2463  3153               	addfsr 1,19
 14425  2464  3000               	movlw	0
 14426  2465  3FC0               	movwi [0]fsr1
 14427  2466  3FC1               	movwi [1]fsr1
 14428                           
 14429                           ;matrix_task.c: 87: data->holdCountBX = 0;
 14430  2467  083D               	movf	matrix_Init@data,w
 14431  2468  0086               	movwf	6
 14432  2469  083E               	movf	matrix_Init@data+1,w
 14433  246A  0087               	movwf	7
 14434  246B  3155               	addfsr 1,21
 14435  246C  3000               	movlw	0
 14436  246D  3FC0               	movwi [0]fsr1
 14437  246E  3FC1               	movwi [1]fsr1
 14438                           
 14439                           ;matrix_task.c: 88: data->holdCountBY = 0;
 14440  246F  083D               	movf	matrix_Init@data,w
 14441  2470  0086               	movwf	6
 14442  2471  083E               	movf	matrix_Init@data+1,w
 14443  2472  0087               	movwf	7
 14444  2473  3157               	addfsr 1,23
 14445  2474  3000               	movlw	0
 14446  2475  3FC0               	movwi [0]fsr1
 14447  2476  3FC1               	movwi [1]fsr1
 14448                           
 14449                           ;matrix_task.c: 89: data->holdCountBA = 0;
 14450  2477  083D               	movf	matrix_Init@data,w
 14451  2478  0086               	movwf	6
 14452  2479  083E               	movf	matrix_Init@data+1,w
 14453  247A  0087               	movwf	7
 14454  247B  3159               	addfsr 1,25
 14455  247C  3000               	movlw	0
 14456  247D  3FC0               	movwi [0]fsr1
 14457  247E  3FC1               	movwi [1]fsr1
 14458                           
 14459                           ;matrix_task.c: 90: data->noholdCount = 0;
 14460  247F  083D               	movf	matrix_Init@data,w
 14461  2480  0086               	movwf	6
 14462  2481  083E               	movf	matrix_Init@data+1,w
 14463  2482  0087               	movwf	7
 14464  2483  315B               	addfsr 1,27
 14465  2484  3000               	movlw	0
 14466  2485  3FC0               	movwi [0]fsr1
 14467  2486  3FC1               	movwi [1]fsr1
 14468  2487  0008               	return
 14469  2488                     __end_of_matrix_Init:	
 14470                           
 14471                           	psect	text4
 14472  2E7E                     __ptext4:	
 14473 ;; *************** function _secret_Init *****************
 14474 ;; Defined at:
 14475 ;;		line 51 in file "secret_task.c"
 14476 ;; Parameters:    Size  Location     Type
 14477 ;;  taskData        2   25[BANK0 ] PTR void 
 14478 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14479 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14480 ;; Auto vars:     Size  Location     Type
 14481 ;;  data            2   27[BANK0 ] PTR struct t_secret_task
 14482 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14483 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14484 ;; Return value:  Size  Location     Type
 14485 ;;                  1    wreg      void 
 14486 ;; Registers used:
 14487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14488 ;; Tracked objects:
 14489 ;;		On entry : 0/0
 14490 ;;		On exit  : 0/0
 14491 ;;		Unchanged: 0/0
 14492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14493 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14494 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14496 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14497 ;;Total ram usage:        4 bytes
 14498 ;; Hardware stack levels used:    1
 14499 ;; Hardware stack levels required when called:   10
 14500 ;; This function calls:
 14501 ;;		_nullifyBadge_segDisplayErase
 14502 ;;		_nullifyBadge_segDisplayRegister
 14503 ;;		_nullifyBadge_userLedsClr
 14504 ;;		_nullifyBadge_userLedsRegister
 14505 ;; This function is called by:
 14506 ;;		_main
 14507 ;;		_scheduler_TaskAdd
 14508 ;; This function uses a non-reentrant model
 14509 ;;
 14510                           
 14511                           
 14512                           ;psect for function _secret_Init
 14513  2E7E                     _secret_Init:	
 14514                           
 14515                           ;secret_task.c: 52: struct t_secret_taskData *data = (struct t_secret_taskData *) taskDa
      +                          ta;
 14516                           
 14517                           ;incstack = 0
 14518                           ; Regs used in _secret_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14519  2E7E  0020               	movlb	0	; select bank0
 14520  2E7F  083A               	movf	secret_Init@taskData+1,w
 14521  2E80  00BC               	movwf	secret_Init@data+1
 14522  2E81  0839               	movf	secret_Init@taskData,w
 14523  2E82  00BB               	movwf	secret_Init@data
 14524                           
 14525                           ;secret_task.c: 55: nullifyBadge_userLedsRegister(data->badge);
 14526  2E83  083B               	movf	secret_Init@data,w
 14527  2E84  0086               	movwf	6
 14528  2E85  083C               	movf	secret_Init@data+1,w
 14529  2E86  0087               	movwf	7
 14530  2E87  0801               	movf	1,w
 14531  2E88  31B4  24E3  31AE   	fcall	_nullifyBadge_userLedsRegister
 14532                           
 14533                           ;secret_task.c: 56: nullifyBadge_userLedsClr(data->badge);
 14534  2E8B  0020               	movlb	0	; select bank0
 14535  2E8C  083B               	movf	secret_Init@data,w
 14536  2E8D  0086               	movwf	6
 14537  2E8E  083C               	movf	secret_Init@data+1,w
 14538  2E8F  0087               	movwf	7
 14539  2E90  0801               	movf	1,w
 14540  2E91  3187  27FA  31AE   	fcall	_nullifyBadge_userLedsClr
 14541                           
 14542                           ;secret_task.c: 57: nullifyBadge_segDisplayRegister(data->badge);
 14543  2E94  0020               	movlb	0	; select bank0
 14544  2E95  083B               	movf	secret_Init@data,w
 14545  2E96  0086               	movwf	6
 14546  2E97  083C               	movf	secret_Init@data+1,w
 14547  2E98  0087               	movwf	7
 14548  2E99  0801               	movf	1,w
 14549  2E9A  31B4  240C  31AE   	fcall	_nullifyBadge_segDisplayRegister
 14550                           
 14551                           ;secret_task.c: 58: nullifyBadge_segDisplayErase(data->badge);
 14552  2E9D  0020               	movlb	0	; select bank0
 14553  2E9E  083B               	movf	secret_Init@data,w
 14554  2E9F  0086               	movwf	6
 14555  2EA0  083C               	movf	secret_Init@data+1,w
 14556  2EA1  0087               	movwf	7
 14557  2EA2  0801               	movf	1,w
 14558  2EA3  31B3  23FE  31AE   	fcall	_nullifyBadge_segDisplayErase
 14559                           
 14560                           ;secret_task.c: 61: data->delayTickCount = 300;
 14561  2EA6  0020               	movlb	0	; select bank0
 14562  2EA7  083B               	movf	secret_Init@data,w
 14563  2EA8  0086               	movwf	6
 14564  2EA9  083C               	movf	secret_Init@data+1,w
 14565  2EAA  0087               	movwf	7
 14566  2EAB  3142               	addfsr 1,2
 14567  2EAC  302C               	movlw	44
 14568  2EAD  3FC0               	movwi [0]fsr1
 14569  2EAE  3001               	movlw	1
 14570  2EAF  3FC1               	movwi [1]fsr1
 14571                           
 14572                           ;secret_task.c: 62: data->holdCountA = 0;
 14573  2EB0  083B               	movf	secret_Init@data,w
 14574  2EB1  0086               	movwf	6
 14575  2EB2  083C               	movf	secret_Init@data+1,w
 14576  2EB3  0087               	movwf	7
 14577  2EB4  3144               	addfsr 1,4
 14578  2EB5  3000               	movlw	0
 14579  2EB6  3FC0               	movwi [0]fsr1
 14580  2EB7  3FC1               	movwi [1]fsr1
 14581                           
 14582                           ;secret_task.c: 63: data->holdCountB = 0;
 14583  2EB8  083B               	movf	secret_Init@data,w
 14584  2EB9  0086               	movwf	6
 14585  2EBA  083C               	movf	secret_Init@data+1,w
 14586  2EBB  0087               	movwf	7
 14587  2EBC  3146               	addfsr 1,6
 14588  2EBD  3000               	movlw	0
 14589  2EBE  3FC0               	movwi [0]fsr1
 14590  2EBF  3FC1               	movwi [1]fsr1
 14591                           
 14592                           ;secret_task.c: 64: data->holdCountX = 0;
 14593  2EC0  083B               	movf	secret_Init@data,w
 14594  2EC1  0086               	movwf	6
 14595  2EC2  083C               	movf	secret_Init@data+1,w
 14596  2EC3  0087               	movwf	7
 14597  2EC4  3148               	addfsr 1,8
 14598  2EC5  3000               	movlw	0
 14599  2EC6  3FC0               	movwi [0]fsr1
 14600  2EC7  3FC1               	movwi [1]fsr1
 14601                           
 14602                           ;secret_task.c: 65: data->holdCountY = 0;
 14603  2EC8  083B               	movf	secret_Init@data,w
 14604  2EC9  0086               	movwf	6
 14605  2ECA  083C               	movf	secret_Init@data+1,w
 14606  2ECB  0087               	movwf	7
 14607  2ECC  314A               	addfsr 1,10
 14608  2ECD  3000               	movlw	0
 14609  2ECE  3FC0               	movwi [0]fsr1
 14610  2ECF  3FC1               	movwi [1]fsr1
 14611                           
 14612                           ;secret_task.c: 66: data->noholdCount = 0;
 14613  2ED0  083B               	movf	secret_Init@data,w
 14614  2ED1  0086               	movwf	6
 14615  2ED2  083C               	movf	secret_Init@data+1,w
 14616  2ED3  0087               	movwf	7
 14617  2ED4  314C               	addfsr 1,12
 14618  2ED5  3000               	movlw	0
 14619  2ED6  3FC0               	movwi [0]fsr1
 14620  2ED7  3FC1               	movwi [1]fsr1
 14621  2ED8  0008               	return
 14622  2ED9                     __end_of_secret_Init:	
 14623                           
 14624                           	psect	text5
 14625  2F9D                     __ptext5:	
 14626 ;; *************** function _locked_Init *****************
 14627 ;; Defined at:
 14628 ;;		line 65 in file "locked_task.c"
 14629 ;; Parameters:    Size  Location     Type
 14630 ;;  taskData        2   25[BANK0 ] PTR void 
 14631 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14632 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14633 ;; Auto vars:     Size  Location     Type
 14634 ;;  data            2   27[BANK0 ] PTR struct t_locked_task
 14635 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14636 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14637 ;; Return value:  Size  Location     Type
 14638 ;;                  1    wreg      void 
 14639 ;; Registers used:
 14640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14641 ;; Tracked objects:
 14642 ;;		On entry : 0/0
 14643 ;;		On exit  : 0/0
 14644 ;;		Unchanged: 0/0
 14645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14646 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14647 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14649 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14650 ;;Total ram usage:        4 bytes
 14651 ;; Hardware stack levels used:    1
 14652 ;; Hardware stack levels required when called:   10
 14653 ;; This function calls:
 14654 ;;		_locked_lock_leds
 14655 ;;		_nullifyBadge_segDisplayErase
 14656 ;;		_nullifyBadge_segDisplayRegister
 14657 ;;		_nullifyBadge_userLedsClr
 14658 ;;		_nullifyBadge_userLedsRegister
 14659 ;; This function is called by:
 14660 ;;		_main
 14661 ;;		_scheduler_TaskAdd
 14662 ;; This function uses a non-reentrant model
 14663 ;;
 14664                           
 14665                           
 14666                           ;psect for function _locked_Init
 14667  2F9D                     _locked_Init:	
 14668                           
 14669                           ;locked_task.c: 66: struct t_locked_taskData *data = (struct t_locked_taskData *) taskDa
      +                          ta;
 14670                           
 14671                           ;incstack = 0
 14672                           ; Regs used in _locked_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14673  2F9D  0020               	movlb	0	; select bank0
 14674  2F9E  083A               	movf	locked_Init@taskData+1,w
 14675  2F9F  00BC               	movwf	locked_Init@data+1
 14676  2FA0  0839               	movf	locked_Init@taskData,w
 14677  2FA1  00BB               	movwf	locked_Init@data
 14678                           
 14679                           ;locked_task.c: 69: nullifyBadge_userLedsRegister(data->badge);
 14680  2FA2  083B               	movf	locked_Init@data,w
 14681  2FA3  0086               	movwf	6
 14682  2FA4  083C               	movf	locked_Init@data+1,w
 14683  2FA5  0087               	movwf	7
 14684  2FA6  0801               	movf	1,w
 14685  2FA7  31B4  24E3  31AF   	fcall	_nullifyBadge_userLedsRegister
 14686                           
 14687                           ;locked_task.c: 70: nullifyBadge_userLedsClr(data->badge);
 14688  2FAA  0020               	movlb	0	; select bank0
 14689  2FAB  083B               	movf	locked_Init@data,w
 14690  2FAC  0086               	movwf	6
 14691  2FAD  083C               	movf	locked_Init@data+1,w
 14692  2FAE  0087               	movwf	7
 14693  2FAF  0801               	movf	1,w
 14694  2FB0  3187  27FA  31AF   	fcall	_nullifyBadge_userLedsClr
 14695                           
 14696                           ;locked_task.c: 71: nullifyBadge_segDisplayRegister(data->badge);
 14697  2FB3  0020               	movlb	0	; select bank0
 14698  2FB4  083B               	movf	locked_Init@data,w
 14699  2FB5  0086               	movwf	6
 14700  2FB6  083C               	movf	locked_Init@data+1,w
 14701  2FB7  0087               	movwf	7
 14702  2FB8  0801               	movf	1,w
 14703  2FB9  31B4  240C  31AF   	fcall	_nullifyBadge_segDisplayRegister
 14704                           
 14705                           ;locked_task.c: 72: nullifyBadge_segDisplayErase(data->badge);
 14706  2FBC  0020               	movlb	0	; select bank0
 14707  2FBD  083B               	movf	locked_Init@data,w
 14708  2FBE  0086               	movwf	6
 14709  2FBF  083C               	movf	locked_Init@data+1,w
 14710  2FC0  0087               	movwf	7
 14711  2FC1  0801               	movf	1,w
 14712  2FC2  31B3  23FE  31AF   	fcall	_nullifyBadge_segDisplayErase
 14713                           
 14714                           ;locked_task.c: 75: locked_lock_leds();
 14715  2FC5  31B6  2606  31AF   	fcall	_locked_lock_leds
 14716                           
 14717                           ;locked_task.c: 76: data->state = LOCKED_LOCKED_STATE;
 14718  2FC8  0020               	movlb	0	; select bank0
 14719  2FC9  083B               	movf	locked_Init@data,w
 14720  2FCA  0086               	movwf	6
 14721  2FCB  083C               	movf	locked_Init@data+1,w
 14722  2FCC  0087               	movwf	7
 14723  2FCD  314D               	addfsr 1,13
 14724  2FCE  0181               	clrf	1
 14725                           
 14726                           ;locked_task.c: 77: data->delayTickCount = 0;
 14727  2FCF  083B               	movf	locked_Init@data,w
 14728  2FD0  0086               	movwf	6
 14729  2FD1  083C               	movf	locked_Init@data+1,w
 14730  2FD2  0087               	movwf	7
 14731  2FD3  3141               	addfsr 1,1
 14732  2FD4  3000               	movlw	0
 14733  2FD5  3FC0               	movwi [0]fsr1
 14734  2FD6  3FC1               	movwi [1]fsr1
 14735                           
 14736                           ;locked_task.c: 78: data->holdCountA = 0;
 14737  2FD7  083B               	movf	locked_Init@data,w
 14738  2FD8  0086               	movwf	6
 14739  2FD9  083C               	movf	locked_Init@data+1,w
 14740  2FDA  0087               	movwf	7
 14741  2FDB  3143               	addfsr 1,3
 14742  2FDC  3000               	movlw	0
 14743  2FDD  3FC0               	movwi [0]fsr1
 14744  2FDE  3FC1               	movwi [1]fsr1
 14745                           
 14746                           ;locked_task.c: 79: data->holdCountB = 0;
 14747  2FDF  083B               	movf	locked_Init@data,w
 14748  2FE0  0086               	movwf	6
 14749  2FE1  083C               	movf	locked_Init@data+1,w
 14750  2FE2  0087               	movwf	7
 14751  2FE3  3145               	addfsr 1,5
 14752  2FE4  3000               	movlw	0
 14753  2FE5  3FC0               	movwi [0]fsr1
 14754  2FE6  3FC1               	movwi [1]fsr1
 14755                           
 14756                           ;locked_task.c: 80: data->holdCountX = 0;
 14757  2FE7  083B               	movf	locked_Init@data,w
 14758  2FE8  0086               	movwf	6
 14759  2FE9  083C               	movf	locked_Init@data+1,w
 14760  2FEA  0087               	movwf	7
 14761  2FEB  3147               	addfsr 1,7
 14762  2FEC  3000               	movlw	0
 14763  2FED  3FC0               	movwi [0]fsr1
 14764  2FEE  3FC1               	movwi [1]fsr1
 14765                           
 14766                           ;locked_task.c: 81: data->holdCountY = 0;
 14767  2FEF  083B               	movf	locked_Init@data,w
 14768  2FF0  0086               	movwf	6
 14769  2FF1  083C               	movf	locked_Init@data+1,w
 14770  2FF2  0087               	movwf	7
 14771  2FF3  3149               	addfsr 1,9
 14772  2FF4  3000               	movlw	0
 14773  2FF5  3FC0               	movwi [0]fsr1
 14774  2FF6  3FC1               	movwi [1]fsr1
 14775                           
 14776                           ;locked_task.c: 82: data->noholdCount = 0;
 14777  2FF7  083B               	movf	locked_Init@data,w
 14778  2FF8  0086               	movwf	6
 14779  2FF9  083C               	movf	locked_Init@data+1,w
 14780  2FFA  0087               	movwf	7
 14781  2FFB  314B               	addfsr 1,11
 14782  2FFC  3000               	movlw	0
 14783  2FFD  3FC0               	movwi [0]fsr1
 14784  2FFE  3FC1               	movwi [1]fsr1
 14785  2FFF  0008               	return
 14786  3000                     __end_of_locked_Init:	
 14787                           
 14788                           	psect	text6
 14789  2F3B                     __ptext6:	
 14790 ;; *************** function _menu_Init *****************
 14791 ;; Defined at:
 14792 ;;		line 37 in file "menu_task.c"
 14793 ;; Parameters:    Size  Location     Type
 14794 ;;  taskData        2   25[BANK0 ] PTR void 
 14795 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14796 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14797 ;; Auto vars:     Size  Location     Type
 14798 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 14799 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14800 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14801 ;; Return value:  Size  Location     Type
 14802 ;;                  1    wreg      void 
 14803 ;; Registers used:
 14804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14805 ;; Tracked objects:
 14806 ;;		On entry : 0/0
 14807 ;;		On exit  : 0/0
 14808 ;;		Unchanged: 0/0
 14809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14810 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14811 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14813 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14814 ;;Total ram usage:        4 bytes
 14815 ;; Hardware stack levels used:    1
 14816 ;; Hardware stack levels required when called:   10
 14817 ;; This function calls:
 14818 ;;		_nullifyBadge_segDisplayErase
 14819 ;;		_nullifyBadge_segDisplayRegister
 14820 ;;		_nullifyBadge_userLedsClr
 14821 ;;		_nullifyBadge_userLedsRegister
 14822 ;; This function is called by:
 14823 ;;		_main
 14824 ;;		_scheduler_TaskAdd
 14825 ;; This function uses a non-reentrant model
 14826 ;;
 14827                           
 14828                           
 14829                           ;psect for function _menu_Init
 14830  2F3B                     _menu_Init:	
 14831                           
 14832                           ;menu_task.c: 38: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 14833                           
 14834                           ;incstack = 0
 14835                           ; Regs used in _menu_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14836  2F3B  0020               	movlb	0	; select bank0
 14837  2F3C  083A               	movf	menu_Init@taskData+1,w
 14838  2F3D  00BC               	movwf	menu_Init@data+1
 14839  2F3E  0839               	movf	menu_Init@taskData,w
 14840  2F3F  00BB               	movwf	menu_Init@data
 14841                           
 14842                           ;menu_task.c: 41: nullifyBadge_userLedsRegister(data->badge);
 14843  2F40  083B               	movf	menu_Init@data,w
 14844  2F41  0086               	movwf	6
 14845  2F42  083C               	movf	menu_Init@data+1,w
 14846  2F43  0087               	movwf	7
 14847  2F44  0801               	movf	1,w
 14848  2F45  31B4  24E3  31AF   	fcall	_nullifyBadge_userLedsRegister
 14849                           
 14850                           ;menu_task.c: 42: nullifyBadge_userLedsClr(data->badge);
 14851  2F48  0020               	movlb	0	; select bank0
 14852  2F49  083B               	movf	menu_Init@data,w
 14853  2F4A  0086               	movwf	6
 14854  2F4B  083C               	movf	menu_Init@data+1,w
 14855  2F4C  0087               	movwf	7
 14856  2F4D  0801               	movf	1,w
 14857  2F4E  3187  27FA  31AF   	fcall	_nullifyBadge_userLedsClr
 14858                           
 14859                           ;menu_task.c: 43: nullifyBadge_segDisplayRegister(data->badge);
 14860  2F51  0020               	movlb	0	; select bank0
 14861  2F52  083B               	movf	menu_Init@data,w
 14862  2F53  0086               	movwf	6
 14863  2F54  083C               	movf	menu_Init@data+1,w
 14864  2F55  0087               	movwf	7
 14865  2F56  0801               	movf	1,w
 14866  2F57  31B4  240C  31AF   	fcall	_nullifyBadge_segDisplayRegister
 14867                           
 14868                           ;menu_task.c: 44: nullifyBadge_segDisplayErase(data->badge);
 14869  2F5A  0020               	movlb	0	; select bank0
 14870  2F5B  083B               	movf	menu_Init@data,w
 14871  2F5C  0086               	movwf	6
 14872  2F5D  083C               	movf	menu_Init@data+1,w
 14873  2F5E  0087               	movwf	7
 14874  2F5F  0801               	movf	1,w
 14875  2F60  31B3  23FE  31AF   	fcall	_nullifyBadge_segDisplayErase
 14876                           
 14877                           ;menu_task.c: 47: data->delayTickCount = 50;
 14878  2F63  0020               	movlb	0	; select bank0
 14879  2F64  083B               	movf	menu_Init@data,w
 14880  2F65  0086               	movwf	6
 14881  2F66  083C               	movf	menu_Init@data+1,w
 14882  2F67  0087               	movwf	7
 14883  2F68  3142               	addfsr 1,2
 14884  2F69  3032               	movlw	50
 14885  2F6A  3FC0               	movwi [0]fsr1
 14886  2F6B  3000               	movlw	0
 14887  2F6C  3FC1               	movwi [1]fsr1
 14888                           
 14889                           ;menu_task.c: 48: data->holdCountA = 0;
 14890  2F6D  083B               	movf	menu_Init@data,w
 14891  2F6E  0086               	movwf	6
 14892  2F6F  083C               	movf	menu_Init@data+1,w
 14893  2F70  0087               	movwf	7
 14894  2F71  3144               	addfsr 1,4
 14895  2F72  3000               	movlw	0
 14896  2F73  3FC0               	movwi [0]fsr1
 14897  2F74  3FC1               	movwi [1]fsr1
 14898                           
 14899                           ;menu_task.c: 49: data->holdCountB = 0;
 14900  2F75  083B               	movf	menu_Init@data,w
 14901  2F76  0086               	movwf	6
 14902  2F77  083C               	movf	menu_Init@data+1,w
 14903  2F78  0087               	movwf	7
 14904  2F79  3146               	addfsr 1,6
 14905  2F7A  3000               	movlw	0
 14906  2F7B  3FC0               	movwi [0]fsr1
 14907  2F7C  3FC1               	movwi [1]fsr1
 14908                           
 14909                           ;menu_task.c: 50: data->holdCountX = 0;
 14910  2F7D  083B               	movf	menu_Init@data,w
 14911  2F7E  0086               	movwf	6
 14912  2F7F  083C               	movf	menu_Init@data+1,w
 14913  2F80  0087               	movwf	7
 14914  2F81  3148               	addfsr 1,8
 14915  2F82  3000               	movlw	0
 14916  2F83  3FC0               	movwi [0]fsr1
 14917  2F84  3FC1               	movwi [1]fsr1
 14918                           
 14919                           ;menu_task.c: 51: data->holdCountY = 0;
 14920  2F85  083B               	movf	menu_Init@data,w
 14921  2F86  0086               	movwf	6
 14922  2F87  083C               	movf	menu_Init@data+1,w
 14923  2F88  0087               	movwf	7
 14924  2F89  314A               	addfsr 1,10
 14925  2F8A  3000               	movlw	0
 14926  2F8B  3FC0               	movwi [0]fsr1
 14927  2F8C  3FC1               	movwi [1]fsr1
 14928                           
 14929                           ;menu_task.c: 52: data->noholdCount = 0;
 14930  2F8D  083B               	movf	menu_Init@data,w
 14931  2F8E  0086               	movwf	6
 14932  2F8F  083C               	movf	menu_Init@data+1,w
 14933  2F90  0087               	movwf	7
 14934  2F91  314C               	addfsr 1,12
 14935  2F92  3000               	movlw	0
 14936  2F93  3FC0               	movwi [0]fsr1
 14937  2F94  3FC1               	movwi [1]fsr1
 14938                           
 14939                           ;menu_task.c: 54: menu_option_idx = 0;
 14940  2F95  0021               	movlb	1	; select bank1
 14941  2F96  01B6               	clrf	_menu_option_idx^(0+128)
 14942  2F97  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 14943                           
 14944                           ;menu_task.c: 56: menu_option_size = sizeof(menu_option)/sizeof(menu_option[0]);
 14945  2F98  3005               	movlw	5
 14946  2F99  00B4               	movwf	_menu_option_size^(0+128)
 14947  2F9A  3000               	movlw	0
 14948  2F9B  00B5               	movwf	(_menu_option_size^(0+128)+1)
 14949  2F9C  0008               	return
 14950  2F9D                     __end_of_menu_Init:	
 14951                           
 14952                           	psect	text7
 14953  0764                     __ptext7:	
 14954 ;; *************** function _flashy_Init *****************
 14955 ;; Defined at:
 14956 ;;		line 66 in file "flashy_task.c"
 14957 ;; Parameters:    Size  Location     Type
 14958 ;;  taskData        2   25[BANK0 ] PTR void 
 14959 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14960 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14961 ;; Auto vars:     Size  Location     Type
 14962 ;;  data            2   27[BANK0 ] PTR struct t_flashy_task
 14963 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14964 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14965 ;; Return value:  Size  Location     Type
 14966 ;;                  1    wreg      void 
 14967 ;; Registers used:
 14968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14969 ;; Tracked objects:
 14970 ;;		On entry : 0/0
 14971 ;;		On exit  : 0/0
 14972 ;;		Unchanged: 0/0
 14973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14974 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14975 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14977 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14978 ;;Total ram usage:        4 bytes
 14979 ;; Hardware stack levels used:    1
 14980 ;; Hardware stack levels required when called:   10
 14981 ;; This function calls:
 14982 ;;		_nullifyBadge_segDisplayErase
 14983 ;;		_nullifyBadge_segDisplayRegister
 14984 ;;		_nullifyBadge_userLedsClr
 14985 ;;		_nullifyBadge_userLedsRegister
 14986 ;; This function is called by:
 14987 ;;		_main
 14988 ;;		_scheduler_TaskAdd
 14989 ;; This function uses a non-reentrant model
 14990 ;;
 14991                           
 14992                           
 14993                           ;psect for function _flashy_Init
 14994  0764                     _flashy_Init:	
 14995                           
 14996                           ;flashy_task.c: 67: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskDa
      +                          ta;
 14997                           
 14998                           ;incstack = 0
 14999                           ; Regs used in _flashy_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15000  0764  0020               	movlb	0	; select bank0
 15001  0765  083A               	movf	flashy_Init@taskData+1,w
 15002  0766  00BC               	movwf	flashy_Init@data+1
 15003  0767  0839               	movf	flashy_Init@taskData,w
 15004  0768  00BB               	movwf	flashy_Init@data
 15005                           
 15006                           ;flashy_task.c: 70: nullifyBadge_userLedsRegister(data->badge);
 15007  0769  083B               	movf	flashy_Init@data,w
 15008  076A  0086               	movwf	6
 15009  076B  083C               	movf	flashy_Init@data+1,w
 15010  076C  0087               	movwf	7
 15011  076D  0801               	movf	1,w
 15012  076E  31B4  24E3  3187   	fcall	_nullifyBadge_userLedsRegister
 15013                           
 15014                           ;flashy_task.c: 71: nullifyBadge_userLedsClr(data->badge);
 15015  0771  0020               	movlb	0	; select bank0
 15016  0772  083B               	movf	flashy_Init@data,w
 15017  0773  0086               	movwf	6
 15018  0774  083C               	movf	flashy_Init@data+1,w
 15019  0775  0087               	movwf	7
 15020  0776  0801               	movf	1,w
 15021  0777  3187  27FA  3187   	fcall	_nullifyBadge_userLedsClr
 15022                           
 15023                           ;flashy_task.c: 72: nullifyBadge_segDisplayRegister(data->badge);
 15024  077A  0020               	movlb	0	; select bank0
 15025  077B  083B               	movf	flashy_Init@data,w
 15026  077C  0086               	movwf	6
 15027  077D  083C               	movf	flashy_Init@data+1,w
 15028  077E  0087               	movwf	7
 15029  077F  0801               	movf	1,w
 15030  0780  31B4  240C  3187   	fcall	_nullifyBadge_segDisplayRegister
 15031                           
 15032                           ;flashy_task.c: 73: nullifyBadge_segDisplayErase(data->badge);
 15033  0783  0020               	movlb	0	; select bank0
 15034  0784  083B               	movf	flashy_Init@data,w
 15035  0785  0086               	movwf	6
 15036  0786  083C               	movf	flashy_Init@data+1,w
 15037  0787  0087               	movwf	7
 15038  0788  0801               	movf	1,w
 15039  0789  31B3  23FE  3187   	fcall	_nullifyBadge_segDisplayErase
 15040                           
 15041                           ;flashy_task.c: 79: data->delayTickCount = 35;
 15042  078C  0020               	movlb	0	; select bank0
 15043  078D  083B               	movf	flashy_Init@data,w
 15044  078E  0086               	movwf	6
 15045  078F  083C               	movf	flashy_Init@data+1,w
 15046  0790  0087               	movwf	7
 15047  0791  3141               	addfsr 1,1
 15048  0792  3023               	movlw	35
 15049  0793  3FC0               	movwi [0]fsr1
 15050  0794  3000               	movlw	0
 15051  0795  3FC1               	movwi [1]fsr1
 15052                           
 15053                           ;flashy_task.c: 80: data->displayTickCount = 0;
 15054  0796  083B               	movf	flashy_Init@data,w
 15055  0797  0086               	movwf	6
 15056  0798  083C               	movf	flashy_Init@data+1,w
 15057  0799  0087               	movwf	7
 15058  079A  3144               	addfsr 1,4
 15059  079B  3000               	movlw	0
 15060  079C  3FC0               	movwi [0]fsr1
 15061  079D  3FC1               	movwi [1]fsr1
 15062                           
 15063                           ;flashy_task.c: 83: data->holdCountA = 0;
 15064  079E  083B               	movf	flashy_Init@data,w
 15065  079F  0086               	movwf	6
 15066  07A0  083C               	movf	flashy_Init@data+1,w
 15067  07A1  0087               	movwf	7
 15068  07A2  314A               	addfsr 1,10
 15069  07A3  3000               	movlw	0
 15070  07A4  3FC0               	movwi [0]fsr1
 15071  07A5  3FC1               	movwi [1]fsr1
 15072                           
 15073                           ;flashy_task.c: 84: data->holdCountB = 0;
 15074  07A6  083B               	movf	flashy_Init@data,w
 15075  07A7  0086               	movwf	6
 15076  07A8  083C               	movf	flashy_Init@data+1,w
 15077  07A9  0087               	movwf	7
 15078  07AA  314C               	addfsr 1,12
 15079  07AB  3000               	movlw	0
 15080  07AC  3FC0               	movwi [0]fsr1
 15081  07AD  3FC1               	movwi [1]fsr1
 15082                           
 15083                           ;flashy_task.c: 85: data->holdCountX = 0;
 15084  07AE  083B               	movf	flashy_Init@data,w
 15085  07AF  0086               	movwf	6
 15086  07B0  083C               	movf	flashy_Init@data+1,w
 15087  07B1  0087               	movwf	7
 15088  07B2  314E               	addfsr 1,14
 15089  07B3  3000               	movlw	0
 15090  07B4  3FC0               	movwi [0]fsr1
 15091  07B5  3FC1               	movwi [1]fsr1
 15092                           
 15093                           ;flashy_task.c: 86: data->holdCountY = 0;
 15094  07B6  083B               	movf	flashy_Init@data,w
 15095  07B7  0086               	movwf	6
 15096  07B8  083C               	movf	flashy_Init@data+1,w
 15097  07B9  0087               	movwf	7
 15098  07BA  3150               	addfsr 1,16
 15099  07BB  3000               	movlw	0
 15100  07BC  3FC0               	movwi [0]fsr1
 15101  07BD  3FC1               	movwi [1]fsr1
 15102                           
 15103                           ;flashy_task.c: 87: data->holdCountXY = 0;
 15104  07BE  083B               	movf	flashy_Init@data,w
 15105  07BF  0086               	movwf	6
 15106  07C0  083C               	movf	flashy_Init@data+1,w
 15107  07C1  0087               	movwf	7
 15108  07C2  3152               	addfsr 1,18
 15109  07C3  3000               	movlw	0
 15110  07C4  3FC0               	movwi [0]fsr1
 15111  07C5  3FC1               	movwi [1]fsr1
 15112                           
 15113                           ;flashy_task.c: 88: data->holdCountAY = 0;
 15114  07C6  083B               	movf	flashy_Init@data,w
 15115  07C7  0086               	movwf	6
 15116  07C8  083C               	movf	flashy_Init@data+1,w
 15117  07C9  0087               	movwf	7
 15118  07CA  3154               	addfsr 1,20
 15119  07CB  3000               	movlw	0
 15120  07CC  3FC0               	movwi [0]fsr1
 15121  07CD  3FC1               	movwi [1]fsr1
 15122                           
 15123                           ;flashy_task.c: 89: data->holdCountAX = 0;
 15124  07CE  083B               	movf	flashy_Init@data,w
 15125  07CF  0086               	movwf	6
 15126  07D0  083C               	movf	flashy_Init@data+1,w
 15127  07D1  0087               	movwf	7
 15128  07D2  3156               	addfsr 1,22
 15129  07D3  3000               	movlw	0
 15130  07D4  3FC0               	movwi [0]fsr1
 15131  07D5  3FC1               	movwi [1]fsr1
 15132                           
 15133                           ;flashy_task.c: 90: data->noholdCount = 0;
 15134  07D6  083B               	movf	flashy_Init@data,w
 15135  07D7  0086               	movwf	6
 15136  07D8  083C               	movf	flashy_Init@data+1,w
 15137  07D9  0087               	movwf	7
 15138  07DA  315C               	addfsr 1,28
 15139  07DB  3000               	movlw	0
 15140  07DC  3FC0               	movwi [0]fsr1
 15141  07DD  3FC1               	movwi [1]fsr1
 15142                           
 15143                           ;flashy_task.c: 92: flashy_leds_idx = 0;
 15144  07DE  0021               	movlb	1	; select bank1
 15145  07DF  01B2               	clrf	_flashy_leds_idx^(0+128)
 15146  07E0  01B3               	clrf	(_flashy_leds_idx+1)^(0+128)
 15147                           
 15148                           ;flashy_task.c: 93: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 15149  07E1  0020               	movlb	0	; select bank0
 15150  07E2  083B               	movf	flashy_Init@data,w
 15151  07E3  0086               	movwf	6
 15152  07E4  083C               	movf	flashy_Init@data+1,w
 15153  07E5  0087               	movwf	7
 15154  07E6  3143               	addfsr 1,3
 15155  07E7  0181               	clrf	1
 15156                           
 15157                           ;flashy_task.c: 94: flashy_option_idx = 0;
 15158  07E8  0021               	movlb	1	; select bank1
 15159  07E9  01A8               	clrf	_flashy_option_idx^(0+128)
 15160  07EA  01A9               	clrf	(_flashy_option_idx+1)^(0+128)
 15161                           
 15162                           ;flashy_task.c: 96: flashy_option_size = sizeof(flashy_option)/sizeof(flashy_option[0]);
 15163  07EB  301D               	movlw	29
 15164  07EC  00A6               	movwf	_flashy_option_size^(0+128)
 15165  07ED  3000               	movlw	0
 15166  07EE  00A7               	movwf	(_flashy_option_size^(0+128)+1)
 15167                           
 15168                           ;flashy_task.c: 98: flashy_sparkle_rate =50;
 15169  07EF  3032               	movlw	50
 15170  07F0  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 15171  07F1  3000               	movlw	0
 15172  07F2  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 15173                           
 15174                           ;flashy_task.c: 99: flashy_scroll_rate=50;
 15175  07F3  3032               	movlw	50
 15176  07F4  00AC               	movwf	_flashy_scroll_rate^(0+128)
 15177  07F5  3000               	movlw	0
 15178  07F6  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 15179                           
 15180                           ;flashy_task.c: 100: flashy_leds_state_track =0;
 15181  07F7  01B0               	clrf	_flashy_leds_state_track^(0+128)
 15182  07F8  01B1               	clrf	(_flashy_leds_state_track+1)^(0+128)
 15183  07F9  0008               	return
 15184  07FA                     __end_of_flashy_Init:	
 15185                           
 15186                           	psect	text8
 15187  205A                     __ptext8:	
 15188 ;; *************** function _slot_Init *****************
 15189 ;; Defined at:
 15190 ;;		line 29 in file "slot_task.c"
 15191 ;; Parameters:    Size  Location     Type
 15192 ;;  taskData        2   25[BANK0 ] PTR void 
 15193 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15194 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15195 ;; Auto vars:     Size  Location     Type
 15196 ;;  data            2   27[BANK0 ] PTR struct t_slot_taskDa
 15197 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15198 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15199 ;; Return value:  Size  Location     Type
 15200 ;;                  1    wreg      void 
 15201 ;; Registers used:
 15202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15203 ;; Tracked objects:
 15204 ;;		On entry : 0/0
 15205 ;;		On exit  : 0/0
 15206 ;;		Unchanged: 0/0
 15207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15208 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15209 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15211 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15212 ;;Total ram usage:        4 bytes
 15213 ;; Hardware stack levels used:    1
 15214 ;; Hardware stack levels required when called:   10
 15215 ;; This function calls:
 15216 ;;		_nullifyBadge_segDisplayErase
 15217 ;;		_nullifyBadge_segDisplayRegister
 15218 ;;		_nullifyBadge_userLedsClr
 15219 ;;		_nullifyBadge_userLedsRegister
 15220 ;;		_slot_Setup
 15221 ;; This function is called by:
 15222 ;;		_main
 15223 ;;		_scheduler_TaskAdd
 15224 ;; This function uses a non-reentrant model
 15225 ;;
 15226                           
 15227                           
 15228                           ;psect for function _slot_Init
 15229  205A                     _slot_Init:	
 15230                           
 15231                           ;slot_task.c: 30: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 15232                           
 15233                           ;incstack = 0
 15234                           ; Regs used in _slot_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15235  205A  0020               	movlb	0	; select bank0
 15236  205B  083A               	movf	slot_Init@taskData+1,w
 15237  205C  00BC               	movwf	slot_Init@data+1
 15238  205D  0839               	movf	slot_Init@taskData,w
 15239  205E  00BB               	movwf	slot_Init@data
 15240                           
 15241                           ;slot_task.c: 33: nullifyBadge_userLedsRegister(data->badge);
 15242  205F  083B               	movf	slot_Init@data,w
 15243  2060  0086               	movwf	6
 15244  2061  083C               	movf	slot_Init@data+1,w
 15245  2062  0087               	movwf	7
 15246  2063  0801               	movf	1,w
 15247  2064  31B4  24E3  31A0   	fcall	_nullifyBadge_userLedsRegister
 15248                           
 15249                           ;slot_task.c: 34: nullifyBadge_userLedsClr(data->badge);
 15250  2067  0020               	movlb	0	; select bank0
 15251  2068  083B               	movf	slot_Init@data,w
 15252  2069  0086               	movwf	6
 15253  206A  083C               	movf	slot_Init@data+1,w
 15254  206B  0087               	movwf	7
 15255  206C  0801               	movf	1,w
 15256  206D  3187  27FA  31A0   	fcall	_nullifyBadge_userLedsClr
 15257                           
 15258                           ;slot_task.c: 35: nullifyBadge_segDisplayRegister(data->badge);
 15259  2070  0020               	movlb	0	; select bank0
 15260  2071  083B               	movf	slot_Init@data,w
 15261  2072  0086               	movwf	6
 15262  2073  083C               	movf	slot_Init@data+1,w
 15263  2074  0087               	movwf	7
 15264  2075  0801               	movf	1,w
 15265  2076  31B4  240C  31A0   	fcall	_nullifyBadge_segDisplayRegister
 15266                           
 15267                           ;slot_task.c: 36: nullifyBadge_segDisplayErase(data->badge);
 15268  2079  0020               	movlb	0	; select bank0
 15269  207A  083B               	movf	slot_Init@data,w
 15270  207B  0086               	movwf	6
 15271  207C  083C               	movf	slot_Init@data+1,w
 15272  207D  0087               	movwf	7
 15273  207E  0801               	movf	1,w
 15274  207F  31B3  23FE  31A0   	fcall	_nullifyBadge_segDisplayErase
 15275                           
 15276                           ;slot_task.c: 39: data->displayTickCount = 0;
 15277  2082  0020               	movlb	0	; select bank0
 15278  2083  083B               	movf	slot_Init@data,w
 15279  2084  0086               	movwf	6
 15280  2085  083C               	movf	slot_Init@data+1,w
 15281  2086  0087               	movwf	7
 15282  2087  3143               	addfsr 1,3
 15283  2088  3000               	movlw	0
 15284  2089  3FC0               	movwi [0]fsr1
 15285  208A  3FC1               	movwi [1]fsr1
 15286                           
 15287                           ;slot_task.c: 40: data->holdCountA = 0;
 15288  208B  083B               	movf	slot_Init@data,w
 15289  208C  0086               	movwf	6
 15290  208D  083C               	movf	slot_Init@data+1,w
 15291  208E  0087               	movwf	7
 15292  208F  315F               	addfsr 1,31
 15293  2090  3000               	movlw	0
 15294  2091  3FC0               	movwi [0]fsr1
 15295  2092  3FC1               	movwi [1]fsr1
 15296                           
 15297                           ;slot_task.c: 41: data->holdCountB = 0;
 15298  2093  083B               	movf	slot_Init@data,w
 15299  2094  3E21               	addlw	33
 15300  2095  0086               	movwf	6
 15301  2096  3000               	movlw	0
 15302  2097  3D3C               	addwfc	slot_Init@data+1,w
 15303  2098  0087               	movwf	7
 15304  2099  3000               	movlw	0
 15305  209A  3FC0               	movwi [0]fsr1
 15306  209B  3FC1               	movwi [1]fsr1
 15307                           
 15308                           ;slot_task.c: 42: data->holdCountX = 0;
 15309  209C  083B               	movf	slot_Init@data,w
 15310  209D  3E23               	addlw	35
 15311  209E  0086               	movwf	6
 15312  209F  3000               	movlw	0
 15313  20A0  3D3C               	addwfc	slot_Init@data+1,w
 15314  20A1  0087               	movwf	7
 15315  20A2  3000               	movlw	0
 15316  20A3  3FC0               	movwi [0]fsr1
 15317  20A4  3FC1               	movwi [1]fsr1
 15318                           
 15319                           ;slot_task.c: 43: data->holdCountY = 0;
 15320  20A5  083B               	movf	slot_Init@data,w
 15321  20A6  3E25               	addlw	37
 15322  20A7  0086               	movwf	6
 15323  20A8  3000               	movlw	0
 15324  20A9  3D3C               	addwfc	slot_Init@data+1,w
 15325  20AA  0087               	movwf	7
 15326  20AB  3000               	movlw	0
 15327  20AC  3FC0               	movwi [0]fsr1
 15328  20AD  3FC1               	movwi [1]fsr1
 15329                           
 15330                           ;slot_task.c: 44: data->noholdCount = 0;
 15331  20AE  083B               	movf	slot_Init@data,w
 15332  20AF  3E27               	addlw	39
 15333  20B0  0086               	movwf	6
 15334  20B1  3000               	movlw	0
 15335  20B2  3D3C               	addwfc	slot_Init@data+1,w
 15336  20B3  0087               	movwf	7
 15337  20B4  3000               	movlw	0
 15338  20B5  3FC0               	movwi [0]fsr1
 15339  20B6  3FC1               	movwi [1]fsr1
 15340                           
 15341                           ;slot_task.c: 45: slot_Setup(data);
 15342  20B7  083C               	movf	slot_Init@data+1,w
 15343  20B8  00B0               	movwf	slot_Setup@taskData+1
 15344  20B9  083B               	movf	slot_Init@data,w
 15345  20BA  00AF               	movwf	slot_Setup@taskData
 15346  20BB  31AD  25D5         	fcall	_slot_Setup
 15347  20BD  0008               	return
 15348  20BE                     __end_of_slot_Init:	
 15349                           
 15350                           	psect	text9
 15351  34E3                     __ptext9:	
 15352 ;; *************** function _nullifyBadge_userLedsRegister *****************
 15353 ;; Defined at:
 15354 ;;		line 133 in file "nullifyBadge.c"
 15355 ;; Parameters:    Size  Location     Type
 15356 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 15357 ;;		 -> badge_inst(18), 
 15358 ;; Auto vars:     Size  Location     Type
 15359 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 15360 ;;		 -> badge_inst(18), 
 15361 ;; Return value:  Size  Location     Type
 15362 ;;                  1    wreg      char 
 15363 ;; Registers used:
 15364 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15365 ;; Tracked objects:
 15366 ;;		On entry : 0/0
 15367 ;;		On exit  : 0/0
 15368 ;;		Unchanged: 0/0
 15369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15373 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15374 ;;Total ram usage:        1 bytes
 15375 ;; Hardware stack levels used:    1
 15376 ;; Hardware stack levels required when called:    4
 15377 ;; This function calls:
 15378 ;;		Nothing
 15379 ;; This function is called by:
 15380 ;;		_menu_Init
 15381 ;;		_flashy_Init
 15382 ;;		_locked_Init
 15383 ;;		_secret_Init
 15384 ;;		_slot_Init
 15385 ;;		_matrix_Init
 15386 ;; This function uses a non-reentrant model
 15387 ;;
 15388                           
 15389                           
 15390                           ;psect for function _nullifyBadge_userLedsRegister
 15391  34E3                     _nullifyBadge_userLedsRegister:	
 15392                           
 15393                           ;incstack = 0
 15394                           ; Regs used in _nullifyBadge_userLedsRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 15395                           ;nullifyBadge_userLedsRegister@badge stored from wreg
 15396  34E3  00F1               	movwf	nullifyBadge_userLedsRegister@badge
 15397                           
 15398                           ;nullifyBadge.c: 134: if (badge->registeredHw & HW_USER_LEDS) {
 15399  34E4  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 15400  34E5  3E11               	addlw	17
 15401  34E6  0086               	movwf	6
 15402  34E7  3001               	movlw	1	; select bank2/3
 15403  34E8  0087               	movwf	7
 15404  34E9  1801               	btfsc	1,0
 15405  34EA  0008               	return
 15406                           
 15407                           ;nullifyBadge.c: 137: else {
 15408                           ;nullifyBadge.c: 138: badge->registeredHw |= (1 << HW_USER_LEDS);
 15409                           
 15410                           ;nullifyBadge.c: 136: }
 15411                           
 15412                           ;nullifyBadge.c: 135: return -1;
 15413                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 15414  34EB  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 15415  34EC  3E11               	addlw	17
 15416  34ED  0086               	movwf	6
 15417  34EE  3001               	movlw	1	; select bank2/3
 15418  34EF  0087               	movwf	7
 15419  34F0  1481               	bsf	1,1
 15420                           
 15421                           ;nullifyBadge.c: 139: return 0;
 15422                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 15423  34F1  0008               	return
 15424  34F2                     __end_of_nullifyBadge_userLedsRegister:	
 15425                           
 15426                           	psect	text10
 15427  340C                     __ptext10:	
 15428 ;; *************** function _nullifyBadge_segDisplayRegister *****************
 15429 ;; Defined at:
 15430 ;;		line 68 in file "nullifyBadge.c"
 15431 ;; Parameters:    Size  Location     Type
 15432 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 15433 ;;		 -> badge_inst(18), 
 15434 ;; Auto vars:     Size  Location     Type
 15435 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 15436 ;;		 -> badge_inst(18), 
 15437 ;; Return value:  Size  Location     Type
 15438 ;;                  1    wreg      char 
 15439 ;; Registers used:
 15440 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15441 ;; Tracked objects:
 15442 ;;		On entry : 0/0
 15443 ;;		On exit  : 0/0
 15444 ;;		Unchanged: 0/0
 15445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15447 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15449 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15450 ;;Total ram usage:        1 bytes
 15451 ;; Hardware stack levels used:    1
 15452 ;; Hardware stack levels required when called:    4
 15453 ;; This function calls:
 15454 ;;		Nothing
 15455 ;; This function is called by:
 15456 ;;		_menu_Init
 15457 ;;		_flashy_Init
 15458 ;;		_locked_Init
 15459 ;;		_secret_Init
 15460 ;;		_slot_Init
 15461 ;;		_matrix_Init
 15462 ;;		_fadeDisplay_Init
 15463 ;; This function uses a non-reentrant model
 15464 ;;
 15465                           
 15466                           
 15467                           ;psect for function _nullifyBadge_segDisplayRegister
 15468  340C                     _nullifyBadge_segDisplayRegister:	
 15469                           
 15470                           ;incstack = 0
 15471                           ; Regs used in _nullifyBadge_segDisplayRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 15472                           ;nullifyBadge_segDisplayRegister@badge stored from wreg
 15473  340C  00F1               	movwf	nullifyBadge_segDisplayRegister@badge
 15474                           
 15475                           ;nullifyBadge.c: 72: else {
 15476                           ;nullifyBadge.c: 73: badge->registeredHw |= (1 << HW_SEG_DISPLAY);
 15477                           
 15478                           ;nullifyBadge.c: 71: }
 15479                           
 15480                           ;nullifyBadge.c: 70: return -1;
 15481                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 15482                           
 15483                           ;nullifyBadge.c: 69: if (badge->registeredHw & HW_SEG_DISPLAY) {
 15484  340D  0871               	movf	nullifyBadge_segDisplayRegister@badge,w
 15485  340E  3E11               	addlw	17
 15486  340F  0086               	movwf	6
 15487  3410  3001               	movlw	1	; select bank2/3
 15488  3411  0087               	movwf	7
 15489  3412  1401               	bsf	1,0
 15490                           
 15491                           ;nullifyBadge.c: 74: return 0;
 15492                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 15493  3413  0008               	return
 15494  3414                     __end_of_nullifyBadge_segDisplayRegister:	
 15495                           
 15496                           	psect	text11
 15497  363B                     __ptext11:	
 15498 ;; *************** function _scheduler_Init *****************
 15499 ;; Defined at:
 15500 ;;		line 27 in file "cooperative_scheduler.c"
 15501 ;; Parameters:    Size  Location     Type
 15502 ;;  scheduler       1    wreg     PTR struct t_scheduler
 15503 ;;		 -> schedulerInst(18), 
 15504 ;; Auto vars:     Size  Location     Type
 15505 ;;  scheduler       1    2[COMMON] PTR struct t_scheduler
 15506 ;;		 -> schedulerInst(18), 
 15507 ;;  k               1    3[COMMON] unsigned char 
 15508 ;; Return value:  Size  Location     Type
 15509 ;;                  1    wreg      void 
 15510 ;; Registers used:
 15511 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15512 ;; Tracked objects:
 15513 ;;		On entry : 0/0
 15514 ;;		On exit  : 0/0
 15515 ;;		Unchanged: 0/0
 15516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15518 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15519 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15520 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15521 ;;Total ram usage:        3 bytes
 15522 ;; Hardware stack levels used:    1
 15523 ;; Hardware stack levels required when called:    4
 15524 ;; This function calls:
 15525 ;;		Nothing
 15526 ;; This function is called by:
 15527 ;;		_main
 15528 ;; This function uses a non-reentrant model
 15529 ;;
 15530                           
 15531                           
 15532                           ;psect for function _scheduler_Init
 15533  363B                     _scheduler_Init:	
 15534                           
 15535                           ;incstack = 0
 15536                           ; Regs used in _scheduler_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 15537                           ;scheduler_Init@scheduler stored from wreg
 15538  363B  00F2               	movwf	scheduler_Init@scheduler
 15539                           
 15540                           ;cooperative_scheduler.c: 28: scheduler->taskEntryVector = 0x0;
 15541  363C  0872               	movf	scheduler_Init@scheduler,w
 15542  363D  3E10               	addlw	16
 15543  363E  0086               	movwf	6
 15544  363F  3001               	movlw	1	; select bank2/3
 15545  3640  0087               	movwf	7
 15546  3641  3000               	movlw	0
 15547  3642  3FC0               	movwi [0]fsr1
 15548  3643  3FC1               	movwi [1]fsr1
 15549                           
 15550                           ;cooperative_scheduler.c: 29: u8 k;
 15551                           ;cooperative_scheduler.c: 31: for (k = 0; k < 16; k++) {
 15552  3644  01F3               	clrf	scheduler_Init@k
 15553  3645                     L1:	
 15554  3645  3010               	movlw	16
 15555  3646  0273               	subwf	scheduler_Init@k,w
 15556  3647  1803               	btfsc	3,0
 15557  3648  0008               	return
 15558                           
 15559                           ;cooperative_scheduler.c: 32: scheduler->tasks[k] = (0);
 15560  3649  0873               	movf	scheduler_Init@k,w
 15561  364A  0772               	addwf	scheduler_Init@scheduler,w
 15562  364B  00F1               	movwf	??_scheduler_Init
 15563  364C  0871               	movf	??_scheduler_Init,w
 15564  364D  0086               	movwf	6
 15565  364E  3001               	movlw	1	; select bank2/3
 15566  364F  0087               	movwf	7
 15567  3650  0181               	clrf	1
 15568  3651  3001               	movlw	1
 15569  3652  00F1               	movwf	??_scheduler_Init
 15570  3653  0871               	movf	??_scheduler_Init,w
 15571  3654  07F3               	addwf	scheduler_Init@k,f
 15572  3655  2E45               	goto	L1
 15573  3656                     __end_of_scheduler_Init:	
 15574                           
 15575                           	psect	text12
 15576  2366                     __ptext12:	
 15577 ;; *************** function _schedulerExecute *****************
 15578 ;; Defined at:
 15579 ;;		line 77 in file "cooperative_scheduler.c"
 15580 ;; Parameters:    Size  Location     Type
 15581 ;;  scheduler       1    wreg     PTR struct t_scheduler
 15582 ;;		 -> schedulerInst(18), 
 15583 ;; Auto vars:     Size  Location     Type
 15584 ;;  scheduler       1    6[BANK1 ] PTR struct t_scheduler
 15585 ;;		 -> schedulerInst(18), 
 15586 ;;  tickDelta       2    4[BANK1 ] unsigned int 
 15587 ;;  taskLastSyst    2    2[BANK1 ] unsigned int 
 15588 ;;  currentSyste    2    0[BANK1 ] unsigned int 
 15589 ;;  k               1    7[BANK1 ] unsigned char 
 15590 ;; Return value:  Size  Location     Type
 15591 ;;                  1    wreg      void 
 15592 ;; Registers used:
 15593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15594 ;; Tracked objects:
 15595 ;;		On entry : 0/0
 15596 ;;		On exit  : 0/0
 15597 ;;		Unchanged: 0/0
 15598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15600 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15601 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15602 ;;      Totals:         0       6       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15603 ;;Total ram usage:       14 bytes
 15604 ;; Hardware stack levels used:    1
 15605 ;; Hardware stack levels required when called:   14
 15606 ;; This function calls:
 15607 ;;		_TMR0_Read16bitTimer
 15608 ;;		_scheduler_TaskRun
 15609 ;; This function is called by:
 15610 ;;		_main
 15611 ;; This function uses a non-reentrant model
 15612 ;;
 15613                           
 15614                           
 15615                           ;psect for function _schedulerExecute
 15616  2366                     _schedulerExecute:	
 15617                           
 15618                           ;incstack = 0
 15619                           ; Regs used in _schedulerExecute: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15620                           ;schedulerExecute@scheduler stored from wreg
 15621  2366  0021               	movlb	1	; select bank1
 15622  2367  00E3               	movwf	schedulerExecute@scheduler^(0+128)
 15623                           
 15624                           ;cooperative_scheduler.c: 78: u16 currentSystemTick;
 15625                           ;cooperative_scheduler.c: 79: u16 taskLastSystemTick;
 15626                           ;cooperative_scheduler.c: 80: u16 tickDelta;
 15627                           ;cooperative_scheduler.c: 81: u8 k;
 15628                           ;cooperative_scheduler.c: 83: for (k = 0; k < 16; k++) {
 15629  2368  01E4               	clrf	schedulerExecute@k^(0+128)
 15630  2369                     L2:	
 15631  2369  3010               	movlw	16
 15632  236A  0264               	subwf	schedulerExecute@k^(0+128),w
 15633  236B  1803               	btfsc	3,0
 15634  236C  0008               	return
 15635                           
 15636                           ;cooperative_scheduler.c: 86: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 15637  236D  0863               	movf	schedulerExecute@scheduler^(0+128),w
 15638  236E  3E10               	addlw	16
 15639  236F  0086               	movwf	6
 15640  2370  3001               	movlw	1	; select bank2/3
 15641  2371  0087               	movwf	7
 15642  2372  3F40               	moviw [0]fsr1
 15643  2373  0020               	movlb	0	; select bank0
 15644  2374  00E8               	movwf	??_schedulerExecute
 15645  2375  3F41               	moviw [1]fsr1
 15646  2376  00E9               	movwf	??_schedulerExecute+1
 15647  2377  3001               	movlw	1
 15648  2378  00EA               	movwf	??_schedulerExecute+2
 15649  2379  3000               	movlw	0
 15650  237A  00EB               	movwf	??_schedulerExecute+3
 15651  237B  0021               	movlb	1	; select bank1
 15652  237C  0A64               	incf	schedulerExecute@k^(0+128),w
 15653  237D  0020               	movlb	0	; select bank0
 15654  237E  2B81               	goto	u6454
 15655  237F                     u6455:	
 15656  237F  35EA               	lslf	??_schedulerExecute+2,f
 15657  2380  0DEB               	rlf	??_schedulerExecute+3,f
 15658  2381                     u6454:	
 15659  2381  0B89               	decfsz	9,f
 15660  2382  2B7F               	goto	u6455
 15661  2383  0868               	movf	??_schedulerExecute,w
 15662  2384  056A               	andwf	??_schedulerExecute+2,w
 15663  2385  00EC               	movwf	??_schedulerExecute+4
 15664  2386  0869               	movf	??_schedulerExecute+1,w
 15665  2387  056B               	andwf	??_schedulerExecute+3,w
 15666  2388  00ED               	movwf	??_schedulerExecute+5
 15667  2389  086C               	movf	??_schedulerExecute+4,w
 15668  238A  046D               	iorwf	??_schedulerExecute+5,w
 15669  238B  1903               	btfsc	3,2
 15670  238C  2BE3               	goto	l10426
 15671                           
 15672                           ;cooperative_scheduler.c: 88: }
 15673                           ;cooperative_scheduler.c: 90: currentSystemTick = TMR0_Read16bitTimer();
 15674                           
 15675                           ;cooperative_scheduler.c: 87: continue;
 15676  238D  31B6  2672  31A3   	fcall	_TMR0_Read16bitTimer
 15677  2390  0872               	movf	?_TMR0_Read16bitTimer+1,w
 15678  2391  0021               	movlb	1	; select bank1
 15679  2392  00DE               	movwf	(schedulerExecute@currentSystemTick+1)^(0+128)
 15680  2393  0871               	movf	?_TMR0_Read16bitTimer,w
 15681  2394  00DD               	movwf	schedulerExecute@currentSystemTick^(0+128)
 15682                           
 15683                           ;cooperative_scheduler.c: 91: taskLastSystemTick = scheduler->tasks[k]->systemTickLastEx
      +                          ecuted;
 15684  2395  0864               	movf	schedulerExecute@k^(0+128),w
 15685  2396  0763               	addwf	schedulerExecute@scheduler^(0+128),w
 15686  2397  0020               	movlb	0	; select bank0
 15687  2398  00E8               	movwf	??_schedulerExecute
 15688  2399  0868               	movf	??_schedulerExecute,w
 15689  239A  0086               	movwf	6
 15690  239B  3001               	movlw	1	; select bank2/3
 15691  239C  0087               	movwf	7
 15692  239D  0801               	movf	1,w
 15693  239E  0086               	movwf	6
 15694  239F  3001               	movlw	1	; select bank2/3
 15695  23A0  0087               	movwf	7
 15696  23A1  3F40               	moviw [0]fsr1
 15697  23A2  0021               	movlb	1	; select bank1
 15698  23A3  00DF               	movwf	schedulerExecute@taskLastSystemTick^(0+128)
 15699  23A4  3F41               	moviw [1]fsr1
 15700  23A5  00E0               	movwf	(schedulerExecute@taskLastSystemTick+1)^(0+128)
 15701                           
 15702                           ;cooperative_scheduler.c: 99: tickDelta = currentSystemTick - taskLastSystemTick;
 15703  23A6  095F               	comf	schedulerExecute@taskLastSystemTick^(0+128),w
 15704  23A7  0020               	movlb	0	; select bank0
 15705  23A8  00E8               	movwf	??_schedulerExecute
 15706  23A9  0021               	movlb	1	; select bank1
 15707  23AA  0960               	comf	(schedulerExecute@taskLastSystemTick+1)^(0+128),w
 15708  23AB  0020               	movlb	0	; select bank0
 15709  23AC  00E9               	movwf	??_schedulerExecute+1
 15710  23AD  0AE8               	incf	??_schedulerExecute,f
 15711  23AE  1903               	skipnz
 15712  23AF  0AE9               	incf	??_schedulerExecute+1,f
 15713  23B0  0021               	movlb	1	; select bank1
 15714  23B1  085D               	movf	schedulerExecute@currentSystemTick^(0+128),w
 15715  23B2  0020               	movlb	0	; select bank0
 15716  23B3  0768               	addwf	??_schedulerExecute,w
 15717  23B4  0021               	movlb	1	; select bank1
 15718  23B5  00E1               	movwf	schedulerExecute@tickDelta^(0+128)
 15719  23B6  085E               	movf	(schedulerExecute@currentSystemTick+1)^(0+128),w
 15720  23B7  0020               	movlb	0	; select bank0
 15721  23B8  3D69               	addwfc	??_schedulerExecute+1,w
 15722  23B9  0021               	movlb	1	; select bank1
 15723  23BA  00E2               	movwf	(schedulerExecute@tickDelta+1)^(0+128)
 15724                           
 15725                           ;cooperative_scheduler.c: 103: if (tickDelta >= scheduler->tasks[k]->taskInterval) {
 15726  23BB  0864               	movf	schedulerExecute@k^(0+128),w
 15727  23BC  0763               	addwf	schedulerExecute@scheduler^(0+128),w
 15728  23BD  0020               	movlb	0	; select bank0
 15729  23BE  00E8               	movwf	??_schedulerExecute
 15730  23BF  0868               	movf	??_schedulerExecute,w
 15731  23C0  0086               	movwf	6
 15732  23C1  3001               	movlw	1	; select bank2/3
 15733  23C2  0087               	movwf	7
 15734  23C3  0801               	movf	1,w
 15735  23C4  3E0A               	addlw	10
 15736  23C5  0086               	movwf	6
 15737  23C6  3001               	movlw	1	; select bank2/3
 15738  23C7  0087               	movwf	7
 15739  23C8  3F40               	moviw [0]fsr1
 15740  23C9  00E9               	movwf	??_schedulerExecute+1
 15741  23CA  3F41               	moviw [1]fsr1
 15742  23CB  00EA               	movwf	??_schedulerExecute+2
 15743  23CC  086A               	movf	??_schedulerExecute+2,w
 15744  23CD  0021               	movlb	1	; select bank1
 15745  23CE  0262               	subwf	(schedulerExecute@tickDelta+1)^(0+128),w
 15746  23CF  1D03               	skipz
 15747  23D0  2BD5               	goto	u6475
 15748  23D1  0020               	movlb	0	; select bank0
 15749  23D2  0869               	movf	??_schedulerExecute+1,w
 15750  23D3  0021               	movlb	1	; select bank1
 15751  23D4  0261               	subwf	schedulerExecute@tickDelta^(0+128),w
 15752  23D5                     u6475:	
 15753  23D5  1C03               	skipc
 15754  23D6  2BE3               	goto	l10426
 15755                           
 15756                           ;cooperative_scheduler.c: 104: scheduler_TaskRun(scheduler->tasks[k]);
 15757  23D7  0864               	movf	schedulerExecute@k^(0+128),w
 15758  23D8  0763               	addwf	schedulerExecute@scheduler^(0+128),w
 15759  23D9  0020               	movlb	0	; select bank0
 15760  23DA  00E8               	movwf	??_schedulerExecute
 15761  23DB  0868               	movf	??_schedulerExecute,w
 15762  23DC  0086               	movwf	6
 15763  23DD  3001               	movlw	1	; select bank2/3
 15764  23DE  0087               	movwf	7
 15765  23DF  0801               	movf	1,w
 15766  23E0  31A8  2084  31A3   	fcall	_scheduler_TaskRun
 15767  23E3                     l10426:	
 15768  23E3  3001               	movlw	1
 15769  23E4  0020               	movlb	0	; select bank0
 15770  23E5  00E8               	movwf	??_schedulerExecute
 15771  23E6  0868               	movf	??_schedulerExecute,w
 15772  23E7  0021               	movlb	1	; select bank1
 15773  23E8  07E4               	addwf	schedulerExecute@k^(0+128),f
 15774  23E9  2B69               	goto	L2
 15775  23EA                     __end_of_schedulerExecute:	
 15776                           
 15777                           	psect	text13
 15778  2884                     __ptext13:	
 15779 ;; *************** function _scheduler_TaskRun *****************
 15780 ;; Defined at:
 15781 ;;		line 20 in file "cooperative_scheduler.c"
 15782 ;; Parameters:    Size  Location     Type
 15783 ;;  task            1    wreg     PTR struct t_schedulerTa
 15784 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 15785 ;;		 -> menu_task(13), flashy_task(13), NULL(0), 
 15786 ;; Auto vars:     Size  Location     Type
 15787 ;;  task            1   71[BANK0 ] PTR struct t_schedulerTa
 15788 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 15789 ;;		 -> menu_task(13), flashy_task(13), NULL(0), 
 15790 ;; Return value:  Size  Location     Type
 15791 ;;                  1    wreg      void 
 15792 ;; Registers used:
 15793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15794 ;; Tracked objects:
 15795 ;;		On entry : 0/0
 15796 ;;		On exit  : 0/0
 15797 ;;		Unchanged: 0/0
 15798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15802 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15803 ;;Total ram usage:        1 bytes
 15804 ;; Hardware stack levels used:    1
 15805 ;; Hardware stack levels required when called:   13
 15806 ;; This function calls:
 15807 ;;		Absolute function
 15808 ;;		_TMR0_Read16bitTimer
 15809 ;;		_flashy_Main
 15810 ;;		_locked_Main
 15811 ;;		_matrix_Main
 15812 ;;		_menu_Main
 15813 ;;		_secret_Main
 15814 ;;		_slot_Main
 15815 ;; This function is called by:
 15816 ;;		_schedulerExecute
 15817 ;; This function uses a non-reentrant model
 15818 ;;
 15819                           
 15820                           
 15821                           ;psect for function _scheduler_TaskRun
 15822  2884                     _scheduler_TaskRun:	
 15823                           
 15824                           ;incstack = 0
 15825                           ; Regs used in _scheduler_TaskRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15826                           ;scheduler_TaskRun@task stored from wreg
 15827  2884  0020               	movlb	0	; select bank0
 15828  2885  00E7               	movwf	scheduler_TaskRun@task
 15829                           
 15830                           ;cooperative_scheduler.c: 21: task->taskExecuteCallback (task->taskData);
 15831  2886  0867               	movf	scheduler_TaskRun@task,w
 15832  2887  3E02               	addlw	2
 15833  2888  0086               	movwf	6
 15834  2889  3001               	movlw	1	; select bank2/3
 15835  288A  0087               	movwf	7
 15836  288B  3F40               	moviw [0]fsr1
 15837  288C  00D2               	movwf	matrix_Main@taskData
 15838  288D  3F41               	moviw [1]fsr1
 15839  288E  00D3               	movwf	matrix_Main@taskData+1
 15840  288F  0867               	movf	scheduler_TaskRun@task,w
 15841  2890  3E08               	addlw	8
 15842  2891  0086               	movwf	6
 15843  2892  3001               	movlw	1	; select bank2/3
 15844  2893  0087               	movwf	7
 15845  2894  3F41               	moviw [1]fsr1
 15846  2895  008A               	movwf	10
 15847  2896  3F40               	moviw [0]fsr1
 15848  2897  000A               	callw
 15849  2898  31A8               	pagesel	$
 15850                           
 15851                           ;cooperative_scheduler.c: 22: task->systemTickLastExecuted = TMR0_Read16bitTimer();
 15852  2899  31B6  2672         	fcall	_TMR0_Read16bitTimer
 15853  289B  0020               	movlb	0	; select bank0
 15854  289C  0867               	movf	scheduler_TaskRun@task,w
 15855  289D  0086               	movwf	6
 15856  289E  3001               	movlw	1	; select bank2/3
 15857  289F  0087               	movwf	7
 15858  28A0  0871               	movf	?_TMR0_Read16bitTimer,w
 15859  28A1  3FC0               	movwi [0]fsr1
 15860  28A2  0872               	movf	?_TMR0_Read16bitTimer+1,w
 15861  28A3  3FC1               	movwi [1]fsr1
 15862  28A4  0008               	return
 15863  28A5                     __end_of_scheduler_TaskRun:	
 15864                           
 15865                           	psect	text14
 15866  10E3                     __ptext14:	
 15867 ;; *************** function _matrix_Main *****************
 15868 ;; Defined at:
 15869 ;;		line 141 in file "matrix_task.c"
 15870 ;; Parameters:    Size  Location     Type
 15871 ;;  taskData        2   50[BANK0 ] PTR void 
 15872 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15873 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15874 ;; Auto vars:     Size  Location     Type
 15875 ;;  data            2   59[BANK0 ] PTR struct t_matrix_task
 15876 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15877 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15878 ;;  holdvalue       1   58[BANK0 ] unsigned char 
 15879 ;;  buttonPresse    1   57[BANK0 ] unsigned char 
 15880 ;;  matrix_found    1   56[BANK0 ] unsigned char 
 15881 ;; Return value:  Size  Location     Type
 15882 ;;                  1    wreg      void 
 15883 ;; Registers used:
 15884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15885 ;; Tracked objects:
 15886 ;;		On entry : 0/0
 15887 ;;		On exit  : 0/0
 15888 ;;		Unchanged: 0/0
 15889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15890 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15891 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15892 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15893 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15894 ;;Total ram usage:       11 bytes
 15895 ;; Hardware stack levels used:    1
 15896 ;; Hardware stack levels required when called:   11
 15897 ;; This function calls:
 15898 ;;		_led_Parody
 15899 ;;		_led_curtain
 15900 ;;		_matrix_display_option
 15901 ;;		_matrix_secret_check
 15902 ;;		_nullifyBadge_buttonsGet
 15903 ;; This function is called by:
 15904 ;;		_main
 15905 ;;		_scheduler_TaskRun
 15906 ;; This function uses a non-reentrant model
 15907 ;;
 15908                           
 15909                           
 15910                           ;psect for function _matrix_Main
 15911  10E3                     _matrix_Main:	
 15912                           
 15913                           ;matrix_task.c: 142: struct t_matrix_taskData *data = (struct t_matrix_taskData *) taskD
      +                          ata ;
 15914                           
 15915                           ;incstack = 0
 15916                           ; Regs used in _matrix_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15917  10E3  0020               	movlb	0	; select bank0
 15918  10E4  0853               	movf	matrix_Main@taskData+1,w
 15919  10E5  00DC               	movwf	matrix_Main@data+1
 15920  10E6  0852               	movf	matrix_Main@taskData,w
 15921  10E7  00DB               	movwf	matrix_Main@data
 15922                           
 15923                           ;matrix_task.c: 143: u8 buttonPressed = 0 ;
 15924  10E8  01D9               	clrf	matrix_Main@buttonPressed
 15925                           
 15926                           ;matrix_task.c: 144: u8 matrix_found =0;
 15927  10E9  01D8               	clrf	matrix_Main@matrix_found
 15928                           
 15929                           ;matrix_task.c: 145: u8 holdvalue = 50;
 15930  10EA  3032               	movlw	50
 15931  10EB  00D4               	movwf	??_matrix_Main
 15932  10EC  0854               	movf	??_matrix_Main,w
 15933  10ED  00DA               	movwf	matrix_Main@holdvalue
 15934                           
 15935                           ;matrix_task.c: 147: if ( currentTask != MATRIX_TASK ){
 15936  10EE  3004               	movlw	4
 15937  10EF  0021               	movlb	1	; select bank1
 15938  10F0  063A               	xorwf	_currentTask^(0+128),w
 15939  10F1  043B               	iorwf	(_currentTask+1)^(0+128),w
 15940  10F2  1903               	btfsc	3,2
 15941  10F3  291A               	goto	l9766
 15942                           
 15943                           ;matrix_task.c: 148: data->holdCountA = 1;
 15944  10F4  0020               	movlb	0	; select bank0
 15945  10F5  085B               	movf	matrix_Main@data,w
 15946  10F6  0086               	movwf	6
 15947  10F7  085C               	movf	matrix_Main@data+1,w
 15948  10F8  0087               	movwf	7
 15949  10F9  3147               	addfsr 1,7
 15950  10FA  3001               	movlw	1
 15951  10FB  3FC0               	movwi [0]fsr1
 15952  10FC  3000               	movlw	0
 15953  10FD  3FC1               	movwi [1]fsr1
 15954                           
 15955                           ;matrix_task.c: 149: data->holdCountB = 1;
 15956  10FE  085B               	movf	matrix_Main@data,w
 15957  10FF  0086               	movwf	6
 15958  1100  085C               	movf	matrix_Main@data+1,w
 15959  1101  0087               	movwf	7
 15960  1102  3149               	addfsr 1,9
 15961  1103  3001               	movlw	1
 15962  1104  3FC0               	movwi [0]fsr1
 15963  1105  3000               	movlw	0
 15964  1106  3FC1               	movwi [1]fsr1
 15965                           
 15966                           ;matrix_task.c: 150: data->holdCountX = 1;
 15967  1107  085B               	movf	matrix_Main@data,w
 15968  1108  0086               	movwf	6
 15969  1109  085C               	movf	matrix_Main@data+1,w
 15970  110A  0087               	movwf	7
 15971  110B  314B               	addfsr 1,11
 15972  110C  3001               	movlw	1
 15973  110D  3FC0               	movwi [0]fsr1
 15974  110E  3000               	movlw	0
 15975  110F  3FC1               	movwi [1]fsr1
 15976                           
 15977                           ;matrix_task.c: 151: data->holdCountY = 1;
 15978  1110  085B               	movf	matrix_Main@data,w
 15979  1111  0086               	movwf	6
 15980  1112  085C               	movf	matrix_Main@data+1,w
 15981  1113  0087               	movwf	7
 15982  1114  314D               	addfsr 1,13
 15983  1115  3001               	movlw	1
 15984  1116  3FC0               	movwi [0]fsr1
 15985  1117  3000               	movlw	0
 15986  1118  3FC1               	movwi [1]fsr1
 15987                           
 15988                           ;matrix_task.c: 152: return;
 15989  1119  0008               	return
 15990  111A                     l9766:	
 15991                           
 15992                           ;matrix_task.c: 153: }
 15993                           ;matrix_task.c: 157: if (data->martix_state == STILL_IN_MATRIX){
 15994  111A  0020               	movlb	0	; select bank0
 15995  111B  085B               	movf	matrix_Main@data,w
 15996  111C  0086               	movwf	6
 15997  111D  085C               	movf	matrix_Main@data+1,w
 15998  111E  0087               	movwf	7
 15999  111F  3141               	addfsr 1,1
 16000  1120  0301               	decf	1,w
 16001  1121  1D03               	btfss	3,2
 16002  1122  2952               	goto	l9778
 16003                           
 16004                           ;matrix_task.c: 158: if(data->delayTickCount == 0){
 16005  1123  085B               	movf	matrix_Main@data,w
 16006  1124  0086               	movwf	6
 16007  1125  085C               	movf	matrix_Main@data+1,w
 16008  1126  0087               	movwf	7
 16009  1127  3143               	addfsr 1,3
 16010  1128  0016               	moviw fsr1++
 16011  1129  0401               	iorwf	1,w
 16012  112A  1D03               	btfss	3,2
 16013  112B  2947               	goto	l9776
 16014                           
 16015                           ;matrix_task.c: 159: led_Parody(matrix_leds_idx);
 16016  112C  0021               	movlb	1	; select bank1
 16017  112D  0821               	movf	(_matrix_leds_idx+1)^(0+128),w
 16018  112E  0020               	movlb	0	; select bank0
 16019  112F  00B1               	movwf	led_Parody@count+1
 16020  1130  0021               	movlb	1	; select bank1
 16021  1131  0820               	movf	_matrix_leds_idx^(0+128),w
 16022  1132  0020               	movlb	0	; select bank0
 16023  1133  00B0               	movwf	led_Parody@count
 16024  1134  31A0  20BE  3190   	fcall	_led_Parody
 16025                           
 16026                           ;matrix_task.c: 160: matrix_leds_idx += 1;
 16027  1137  3001               	movlw	1
 16028  1138  0021               	movlb	1	; select bank1
 16029  1139  07A0               	addwf	_matrix_leds_idx^(0+128),f
 16030  113A  3000               	movlw	0
 16031  113B  3DA1               	addwfc	(_matrix_leds_idx+1)^(0+128),f
 16032                           
 16033                           ;matrix_task.c: 161: data->delayTickCount = 10;
 16034  113C  0020               	movlb	0	; select bank0
 16035  113D  085B               	movf	matrix_Main@data,w
 16036  113E  0086               	movwf	6
 16037  113F  085C               	movf	matrix_Main@data+1,w
 16038  1140  0087               	movwf	7
 16039  1141  3143               	addfsr 1,3
 16040  1142  300A               	movlw	10
 16041  1143  3FC0               	movwi [0]fsr1
 16042  1144  3000               	movlw	0
 16043  1145  3FC1               	movwi [1]fsr1
 16044                           
 16045                           ;matrix_task.c: 162: }
 16046  1146  2952               	goto	l9778
 16047  1147                     l9776:	
 16048                           
 16049                           ;matrix_task.c: 163: else {
 16050                           ;matrix_task.c: 164: data->delayTickCount -= 1;
 16051  1147  085B               	movf	matrix_Main@data,w
 16052  1148  0086               	movwf	6
 16053  1149  085C               	movf	matrix_Main@data+1,w
 16054  114A  0087               	movwf	7
 16055  114B  3143               	addfsr 1,3
 16056  114C  3001               	movlw	1
 16057  114D  0281               	subwf	1,f
 16058  114E  3141               	addfsr 1,1
 16059  114F  3000               	movlw	0
 16060  1150  3B81               	subwfb	1,f
 16061  1151  317F               	addfsr 1,-1
 16062  1152                     l9778:	
 16063                           
 16064                           ;matrix_task.c: 165: }
 16065                           ;matrix_task.c: 166: }
 16066                           ;matrix_task.c: 170: buttonPressed = nullifyBadge_buttonsGet();
 16067  1152  31A8  20A5  3190   	fcall	_nullifyBadge_buttonsGet
 16068  1155  0020               	movlb	0	; select bank0
 16069  1156  00D4               	movwf	??_matrix_Main
 16070  1157  0854               	movf	??_matrix_Main,w
 16071  1158  00D9               	movwf	matrix_Main@buttonPressed
 16072                           
 16073                           ;matrix_task.c: 173: switch (buttonPressed) {
 16074  1159  2F95               	goto	l10112
 16075  115A                     l9780:	
 16076                           ;matrix_task.c: 174: case 1:
 16077                           
 16078                           
 16079                           ;matrix_task.c: 176: if (data->holdCountA == holdvalue){
 16080  115A  085B               	movf	matrix_Main@data,w
 16081  115B  0086               	movwf	6
 16082  115C  085C               	movf	matrix_Main@data+1,w
 16083  115D  0087               	movwf	7
 16084  115E  3147               	addfsr 1,7
 16085  115F  3F40               	moviw [0]fsr1
 16086  1160  00D4               	movwf	??_matrix_Main
 16087  1161  3F41               	moviw [1]fsr1
 16088  1162  00D5               	movwf	??_matrix_Main+1
 16089  1163  085A               	movf	matrix_Main@holdvalue,w
 16090  1164  00D6               	movwf	??_matrix_Main+2
 16091  1165  01D7               	clrf	??_matrix_Main+3
 16092  1166  0855               	movf	??_matrix_Main+1,w
 16093  1167  0657               	xorwf	??_matrix_Main+3,w
 16094  1168  1D03               	skipz
 16095  1169  296C               	goto	u6165
 16096  116A  0854               	movf	??_matrix_Main,w
 16097  116B  0656               	xorwf	??_matrix_Main+2,w
 16098  116C                     u6165:	
 16099  116C  1D03               	skipz
 16100  116D  2983               	goto	l9786
 16101                           
 16102                           ;matrix_task.c: 177: matrix_found = matrix_secret_check(data, buttonPressed);
 16103  116E  085C               	movf	matrix_Main@data+1,w
 16104  116F  00F8               	movwf	matrix_secret_check@data+1
 16105  1170  085B               	movf	matrix_Main@data,w
 16106  1171  00F7               	movwf	matrix_secret_check@data
 16107  1172  0859               	movf	matrix_Main@buttonPressed,w
 16108  1173  00D4               	movwf	??_matrix_Main
 16109  1174  0854               	movf	??_matrix_Main,w
 16110  1175  00F9               	movwf	matrix_secret_check@buttonPressed
 16111  1176  31A4  2488  3190   	fcall	_matrix_secret_check
 16112  1179  0020               	movlb	0	; select bank0
 16113  117A  00D5               	movwf	??_matrix_Main+1
 16114  117B  0855               	movf	??_matrix_Main+1,w
 16115  117C  00D8               	movwf	matrix_Main@matrix_found
 16116                           
 16117                           ;matrix_task.c: 178: data->display_state = MATRIX_A;
 16118  117D  085B               	movf	matrix_Main@data,w
 16119  117E  0086               	movwf	6
 16120  117F  085C               	movf	matrix_Main@data+1,w
 16121  1180  0087               	movwf	7
 16122  1181  3142               	addfsr 1,2
 16123  1182  0181               	clrf	1
 16124  1183                     l9786:	
 16125                           
 16126                           ;matrix_task.c: 179: }
 16127                           ;matrix_task.c: 180: data->holdCountA += 1;
 16128  1183  085B               	movf	matrix_Main@data,w
 16129  1184  0086               	movwf	6
 16130  1185  085C               	movf	matrix_Main@data+1,w
 16131  1186  0087               	movwf	7
 16132  1187  3147               	addfsr 1,7
 16133  1188  3001               	movlw	1
 16134  1189  0781               	addwf	1,f
 16135  118A  3141               	addfsr 1,1
 16136  118B  1803               	skipnc
 16137  118C  0A81               	incf	1,f
 16138                           
 16139                           ;matrix_task.c: 181: data->holdCountB = 0;
 16140  118D  085B               	movf	matrix_Main@data,w
 16141  118E  0086               	movwf	6
 16142  118F  085C               	movf	matrix_Main@data+1,w
 16143  1190  0087               	movwf	7
 16144  1191  3149               	addfsr 1,9
 16145  1192  3000               	movlw	0
 16146  1193  3FC0               	movwi [0]fsr1
 16147  1194  3FC1               	movwi [1]fsr1
 16148                           
 16149                           ;matrix_task.c: 182: data->holdCountX = 0;
 16150  1195  085B               	movf	matrix_Main@data,w
 16151  1196  0086               	movwf	6
 16152  1197  085C               	movf	matrix_Main@data+1,w
 16153  1198  0087               	movwf	7
 16154  1199  314B               	addfsr 1,11
 16155  119A  3000               	movlw	0
 16156  119B  3FC0               	movwi [0]fsr1
 16157  119C  3FC1               	movwi [1]fsr1
 16158                           
 16159                           ;matrix_task.c: 183: data->holdCountY = 0;
 16160  119D  085B               	movf	matrix_Main@data,w
 16161  119E  0086               	movwf	6
 16162  119F  085C               	movf	matrix_Main@data+1,w
 16163  11A0  0087               	movwf	7
 16164  11A1  314D               	addfsr 1,13
 16165  11A2  3000               	movlw	0
 16166  11A3  3FC0               	movwi [0]fsr1
 16167  11A4  3FC1               	movwi [1]fsr1
 16168                           
 16169                           ;matrix_task.c: 184: data->holdCountXY = 0;
 16170  11A5  085B               	movf	matrix_Main@data,w
 16171  11A6  0086               	movwf	6
 16172  11A7  085C               	movf	matrix_Main@data+1,w
 16173  11A8  0087               	movwf	7
 16174  11A9  314F               	addfsr 1,15
 16175  11AA  3000               	movlw	0
 16176  11AB  3FC0               	movwi [0]fsr1
 16177  11AC  3FC1               	movwi [1]fsr1
 16178                           
 16179                           ;matrix_task.c: 185: data->holdCountAY = 0;
 16180  11AD  085B               	movf	matrix_Main@data,w
 16181  11AE  0086               	movwf	6
 16182  11AF  085C               	movf	matrix_Main@data+1,w
 16183  11B0  0087               	movwf	7
 16184  11B1  3151               	addfsr 1,17
 16185  11B2  3000               	movlw	0
 16186  11B3  3FC0               	movwi [0]fsr1
 16187  11B4  3FC1               	movwi [1]fsr1
 16188                           
 16189                           ;matrix_task.c: 186: data->holdCountAX = 0;
 16190  11B5  085B               	movf	matrix_Main@data,w
 16191  11B6  0086               	movwf	6
 16192  11B7  085C               	movf	matrix_Main@data+1,w
 16193  11B8  0087               	movwf	7
 16194  11B9  3153               	addfsr 1,19
 16195  11BA  3000               	movlw	0
 16196  11BB  3FC0               	movwi [0]fsr1
 16197  11BC  3FC1               	movwi [1]fsr1
 16198                           
 16199                           ;matrix_task.c: 187: data->holdCountBX = 0;
 16200  11BD  085B               	movf	matrix_Main@data,w
 16201  11BE  0086               	movwf	6
 16202  11BF  085C               	movf	matrix_Main@data+1,w
 16203  11C0  0087               	movwf	7
 16204  11C1  3155               	addfsr 1,21
 16205  11C2  3000               	movlw	0
 16206  11C3  3FC0               	movwi [0]fsr1
 16207  11C4  3FC1               	movwi [1]fsr1
 16208                           
 16209                           ;matrix_task.c: 188: data->holdCountBY = 0;
 16210  11C5  085B               	movf	matrix_Main@data,w
 16211  11C6  0086               	movwf	6
 16212  11C7  085C               	movf	matrix_Main@data+1,w
 16213  11C8  0087               	movwf	7
 16214  11C9  3157               	addfsr 1,23
 16215  11CA  3000               	movlw	0
 16216  11CB  3FC0               	movwi [0]fsr1
 16217  11CC  3FC1               	movwi [1]fsr1
 16218                           
 16219                           ;matrix_task.c: 189: data->holdCountBA = 0;
 16220  11CD  085B               	movf	matrix_Main@data,w
 16221  11CE  0086               	movwf	6
 16222  11CF  085C               	movf	matrix_Main@data+1,w
 16223  11D0  0087               	movwf	7
 16224  11D1  3159               	addfsr 1,25
 16225  11D2  3000               	movlw	0
 16226  11D3  3FC0               	movwi [0]fsr1
 16227  11D4  3FC1               	movwi [1]fsr1
 16228                           
 16229                           ;matrix_task.c: 190: data->noholdCount = 0;
 16230  11D5  085B               	movf	matrix_Main@data,w
 16231  11D6  0086               	movwf	6
 16232  11D7  085C               	movf	matrix_Main@data+1,w
 16233  11D8  0087               	movwf	7
 16234  11D9  315B               	addfsr 1,27
 16235  11DA  3000               	movlw	0
 16236  11DB  3FC0               	movwi [0]fsr1
 16237  11DC  3FC1               	movwi [1]fsr1
 16238                           
 16239                           ;matrix_task.c: 191: data->displayTickdown = 300;
 16240  11DD  085B               	movf	matrix_Main@data,w
 16241  11DE  0086               	movwf	6
 16242  11DF  085C               	movf	matrix_Main@data+1,w
 16243  11E0  0087               	movwf	7
 16244  11E1  3145               	addfsr 1,5
 16245  11E2  302C               	movlw	44
 16246  11E3  3FC0               	movwi [0]fsr1
 16247  11E4  3001               	movlw	1
 16248  11E5  3FC1               	movwi [1]fsr1
 16249                           
 16250                           ;matrix_task.c: 192: break;
 16251  11E6  2FB6               	goto	l10114
 16252  11E7                     l9810:	
 16253                           ;matrix_task.c: 193: case 2:
 16254                           
 16255                           
 16256                           ;matrix_task.c: 195: if (data->holdCountB == holdvalue){
 16257  11E7  085B               	movf	matrix_Main@data,w
 16258  11E8  0086               	movwf	6
 16259  11E9  085C               	movf	matrix_Main@data+1,w
 16260  11EA  0087               	movwf	7
 16261  11EB  3149               	addfsr 1,9
 16262  11EC  3F40               	moviw [0]fsr1
 16263  11ED  00D4               	movwf	??_matrix_Main
 16264  11EE  3F41               	moviw [1]fsr1
 16265  11EF  00D5               	movwf	??_matrix_Main+1
 16266  11F0  085A               	movf	matrix_Main@holdvalue,w
 16267  11F1  00D6               	movwf	??_matrix_Main+2
 16268  11F2  01D7               	clrf	??_matrix_Main+3
 16269  11F3  0855               	movf	??_matrix_Main+1,w
 16270  11F4  0657               	xorwf	??_matrix_Main+3,w
 16271  11F5  1D03               	skipz
 16272  11F6  29F9               	goto	u6175
 16273  11F7  0854               	movf	??_matrix_Main,w
 16274  11F8  0656               	xorwf	??_matrix_Main+2,w
 16275  11F9                     u6175:	
 16276  11F9  1D03               	skipz
 16277  11FA  2A16               	goto	l9816
 16278                           
 16279                           ;matrix_task.c: 196: matrix_found = matrix_secret_check(data, buttonPressed);
 16280  11FB  085C               	movf	matrix_Main@data+1,w
 16281  11FC  00F8               	movwf	matrix_secret_check@data+1
 16282  11FD  085B               	movf	matrix_Main@data,w
 16283  11FE  00F7               	movwf	matrix_secret_check@data
 16284  11FF  0859               	movf	matrix_Main@buttonPressed,w
 16285  1200  00D4               	movwf	??_matrix_Main
 16286  1201  0854               	movf	??_matrix_Main,w
 16287  1202  00F9               	movwf	matrix_secret_check@buttonPressed
 16288  1203  31A4  2488  3190   	fcall	_matrix_secret_check
 16289  1206  0020               	movlb	0	; select bank0
 16290  1207  00D5               	movwf	??_matrix_Main+1
 16291  1208  0855               	movf	??_matrix_Main+1,w
 16292  1209  00D8               	movwf	matrix_Main@matrix_found
 16293                           
 16294                           ;matrix_task.c: 197: data->display_state = MATRIX_B;
 16295  120A  085B               	movf	matrix_Main@data,w
 16296  120B  3E02               	addlw	2
 16297  120C  00D4               	movwf	??_matrix_Main
 16298  120D  3000               	movlw	0
 16299  120E  3D5C               	addwfc	matrix_Main@data+1,w
 16300  120F  00D5               	movwf	??_matrix_Main+1
 16301  1210  0854               	movf	??_matrix_Main,w
 16302  1211  0086               	movwf	6
 16303  1212  0855               	movf	??_matrix_Main+1,w
 16304  1213  0087               	movwf	7
 16305  1214  3002               	movlw	2
 16306  1215  0081               	movwf	1
 16307  1216                     l9816:	
 16308                           
 16309                           ;matrix_task.c: 198: }
 16310                           ;matrix_task.c: 199: data->holdCountA = 0;
 16311  1216  085B               	movf	matrix_Main@data,w
 16312  1217  0086               	movwf	6
 16313  1218  085C               	movf	matrix_Main@data+1,w
 16314  1219  0087               	movwf	7
 16315  121A  3147               	addfsr 1,7
 16316  121B  3000               	movlw	0
 16317  121C  3FC0               	movwi [0]fsr1
 16318  121D  3FC1               	movwi [1]fsr1
 16319                           
 16320                           ;matrix_task.c: 200: data->holdCountB += 1;
 16321  121E  085B               	movf	matrix_Main@data,w
 16322  121F  0086               	movwf	6
 16323  1220  085C               	movf	matrix_Main@data+1,w
 16324  1221  0087               	movwf	7
 16325  1222  3149               	addfsr 1,9
 16326  1223  3001               	movlw	1
 16327  1224  0781               	addwf	1,f
 16328  1225  3141               	addfsr 1,1
 16329  1226  1803               	skipnc
 16330  1227  0A81               	incf	1,f
 16331                           
 16332                           ;matrix_task.c: 201: data->holdCountX = 0;
 16333  1228  085B               	movf	matrix_Main@data,w
 16334  1229  0086               	movwf	6
 16335  122A  085C               	movf	matrix_Main@data+1,w
 16336  122B  0087               	movwf	7
 16337  122C  314B               	addfsr 1,11
 16338  122D  3000               	movlw	0
 16339  122E  3FC0               	movwi [0]fsr1
 16340  122F  3FC1               	movwi [1]fsr1
 16341                           
 16342                           ;matrix_task.c: 202: data->holdCountY = 0;
 16343  1230  085B               	movf	matrix_Main@data,w
 16344  1231  0086               	movwf	6
 16345  1232  085C               	movf	matrix_Main@data+1,w
 16346  1233  0087               	movwf	7
 16347  1234  314D               	addfsr 1,13
 16348  1235  3000               	movlw	0
 16349  1236  3FC0               	movwi [0]fsr1
 16350  1237  3FC1               	movwi [1]fsr1
 16351                           
 16352                           ;matrix_task.c: 203: data->holdCountXY = 0;
 16353  1238  085B               	movf	matrix_Main@data,w
 16354  1239  0086               	movwf	6
 16355  123A  085C               	movf	matrix_Main@data+1,w
 16356  123B  0087               	movwf	7
 16357  123C  314F               	addfsr 1,15
 16358  123D  3000               	movlw	0
 16359  123E  3FC0               	movwi [0]fsr1
 16360  123F  3FC1               	movwi [1]fsr1
 16361                           
 16362                           ;matrix_task.c: 204: data->holdCountAY = 0;
 16363  1240  085B               	movf	matrix_Main@data,w
 16364  1241  0086               	movwf	6
 16365  1242  085C               	movf	matrix_Main@data+1,w
 16366  1243  0087               	movwf	7
 16367  1244  3151               	addfsr 1,17
 16368  1245  3000               	movlw	0
 16369  1246  3FC0               	movwi [0]fsr1
 16370  1247  3FC1               	movwi [1]fsr1
 16371                           
 16372                           ;matrix_task.c: 205: data->holdCountAX = 0;
 16373  1248  085B               	movf	matrix_Main@data,w
 16374  1249  0086               	movwf	6
 16375  124A  085C               	movf	matrix_Main@data+1,w
 16376  124B  0087               	movwf	7
 16377  124C  3153               	addfsr 1,19
 16378  124D  3000               	movlw	0
 16379  124E  3FC0               	movwi [0]fsr1
 16380  124F  3FC1               	movwi [1]fsr1
 16381                           
 16382                           ;matrix_task.c: 206: data->holdCountBX = 0;
 16383  1250  085B               	movf	matrix_Main@data,w
 16384  1251  0086               	movwf	6
 16385  1252  085C               	movf	matrix_Main@data+1,w
 16386  1253  0087               	movwf	7
 16387  1254  3155               	addfsr 1,21
 16388  1255  3000               	movlw	0
 16389  1256  3FC0               	movwi [0]fsr1
 16390  1257  3FC1               	movwi [1]fsr1
 16391                           
 16392                           ;matrix_task.c: 207: data->holdCountBY = 0;
 16393  1258  085B               	movf	matrix_Main@data,w
 16394  1259  0086               	movwf	6
 16395  125A  085C               	movf	matrix_Main@data+1,w
 16396  125B  0087               	movwf	7
 16397  125C  3157               	addfsr 1,23
 16398  125D  3000               	movlw	0
 16399  125E  3FC0               	movwi [0]fsr1
 16400  125F  3FC1               	movwi [1]fsr1
 16401                           
 16402                           ;matrix_task.c: 208: data->holdCountBA = 0;
 16403  1260  085B               	movf	matrix_Main@data,w
 16404  1261  0086               	movwf	6
 16405  1262  085C               	movf	matrix_Main@data+1,w
 16406  1263  0087               	movwf	7
 16407  1264  3159               	addfsr 1,25
 16408  1265  3000               	movlw	0
 16409  1266  3FC0               	movwi [0]fsr1
 16410  1267  3FC1               	movwi [1]fsr1
 16411                           
 16412                           ;matrix_task.c: 209: data->noholdCount = 0;
 16413  1268  085B               	movf	matrix_Main@data,w
 16414  1269  0086               	movwf	6
 16415  126A  085C               	movf	matrix_Main@data+1,w
 16416  126B  0087               	movwf	7
 16417  126C  315B               	addfsr 1,27
 16418  126D  3000               	movlw	0
 16419  126E  3FC0               	movwi [0]fsr1
 16420  126F  3FC1               	movwi [1]fsr1
 16421                           
 16422                           ;matrix_task.c: 210: data->displayTickdown = 300;
 16423  1270  085B               	movf	matrix_Main@data,w
 16424  1271  0086               	movwf	6
 16425  1272  085C               	movf	matrix_Main@data+1,w
 16426  1273  0087               	movwf	7
 16427  1274  3145               	addfsr 1,5
 16428  1275  302C               	movlw	44
 16429  1276  3FC0               	movwi [0]fsr1
 16430  1277  3001               	movlw	1
 16431  1278  3FC1               	movwi [1]fsr1
 16432                           
 16433                           ;matrix_task.c: 211: break;
 16434  1279  2FB6               	goto	l10114
 16435  127A                     l9840:	
 16436                           ;matrix_task.c: 212: case 4:
 16437                           
 16438                           
 16439                           ;matrix_task.c: 214: if (data->holdCountX == holdvalue){
 16440  127A  085B               	movf	matrix_Main@data,w
 16441  127B  0086               	movwf	6
 16442  127C  085C               	movf	matrix_Main@data+1,w
 16443  127D  0087               	movwf	7
 16444  127E  314B               	addfsr 1,11
 16445  127F  3F40               	moviw [0]fsr1
 16446  1280  00D4               	movwf	??_matrix_Main
 16447  1281  3F41               	moviw [1]fsr1
 16448  1282  00D5               	movwf	??_matrix_Main+1
 16449  1283  085A               	movf	matrix_Main@holdvalue,w
 16450  1284  00D6               	movwf	??_matrix_Main+2
 16451  1285  01D7               	clrf	??_matrix_Main+3
 16452  1286  0855               	movf	??_matrix_Main+1,w
 16453  1287  0657               	xorwf	??_matrix_Main+3,w
 16454  1288  1D03               	skipz
 16455  1289  2A8C               	goto	u6185
 16456  128A  0854               	movf	??_matrix_Main,w
 16457  128B  0656               	xorwf	??_matrix_Main+2,w
 16458  128C                     u6185:	
 16459  128C  1D03               	skipz
 16460  128D  2AA9               	goto	l9846
 16461                           
 16462                           ;matrix_task.c: 215: matrix_found = matrix_secret_check(data, buttonPressed);
 16463  128E  085C               	movf	matrix_Main@data+1,w
 16464  128F  00F8               	movwf	matrix_secret_check@data+1
 16465  1290  085B               	movf	matrix_Main@data,w
 16466  1291  00F7               	movwf	matrix_secret_check@data
 16467  1292  0859               	movf	matrix_Main@buttonPressed,w
 16468  1293  00D4               	movwf	??_matrix_Main
 16469  1294  0854               	movf	??_matrix_Main,w
 16470  1295  00F9               	movwf	matrix_secret_check@buttonPressed
 16471  1296  31A4  2488  3190   	fcall	_matrix_secret_check
 16472  1299  0020               	movlb	0	; select bank0
 16473  129A  00D5               	movwf	??_matrix_Main+1
 16474  129B  0855               	movf	??_matrix_Main+1,w
 16475  129C  00D8               	movwf	matrix_Main@matrix_found
 16476                           
 16477                           ;matrix_task.c: 216: data->display_state = MATRIX_X;
 16478  129D  085B               	movf	matrix_Main@data,w
 16479  129E  3E02               	addlw	2
 16480  129F  00D4               	movwf	??_matrix_Main
 16481  12A0  3000               	movlw	0
 16482  12A1  3D5C               	addwfc	matrix_Main@data+1,w
 16483  12A2  00D5               	movwf	??_matrix_Main+1
 16484  12A3  0854               	movf	??_matrix_Main,w
 16485  12A4  0086               	movwf	6
 16486  12A5  0855               	movf	??_matrix_Main+1,w
 16487  12A6  0087               	movwf	7
 16488  12A7  3003               	movlw	3
 16489  12A8  0081               	movwf	1
 16490  12A9                     l9846:	
 16491                           
 16492                           ;matrix_task.c: 217: }
 16493                           ;matrix_task.c: 218: data->holdCountA = 0;
 16494  12A9  085B               	movf	matrix_Main@data,w
 16495  12AA  0086               	movwf	6
 16496  12AB  085C               	movf	matrix_Main@data+1,w
 16497  12AC  0087               	movwf	7
 16498  12AD  3147               	addfsr 1,7
 16499  12AE  3000               	movlw	0
 16500  12AF  3FC0               	movwi [0]fsr1
 16501  12B0  3FC1               	movwi [1]fsr1
 16502                           
 16503                           ;matrix_task.c: 219: data->holdCountB = 0;
 16504  12B1  085B               	movf	matrix_Main@data,w
 16505  12B2  0086               	movwf	6
 16506  12B3  085C               	movf	matrix_Main@data+1,w
 16507  12B4  0087               	movwf	7
 16508  12B5  3149               	addfsr 1,9
 16509  12B6  3000               	movlw	0
 16510  12B7  3FC0               	movwi [0]fsr1
 16511  12B8  3FC1               	movwi [1]fsr1
 16512                           
 16513                           ;matrix_task.c: 220: data->holdCountX += 1;
 16514  12B9  085B               	movf	matrix_Main@data,w
 16515  12BA  0086               	movwf	6
 16516  12BB  085C               	movf	matrix_Main@data+1,w
 16517  12BC  0087               	movwf	7
 16518  12BD  314B               	addfsr 1,11
 16519  12BE  3001               	movlw	1
 16520  12BF  0781               	addwf	1,f
 16521  12C0  3141               	addfsr 1,1
 16522  12C1  1803               	skipnc
 16523  12C2  0A81               	incf	1,f
 16524                           
 16525                           ;matrix_task.c: 221: data->holdCountY = 0;
 16526  12C3  085B               	movf	matrix_Main@data,w
 16527  12C4  0086               	movwf	6
 16528  12C5  085C               	movf	matrix_Main@data+1,w
 16529  12C6  0087               	movwf	7
 16530  12C7  314D               	addfsr 1,13
 16531  12C8  3000               	movlw	0
 16532  12C9  3FC0               	movwi [0]fsr1
 16533  12CA  3FC1               	movwi [1]fsr1
 16534                           
 16535                           ;matrix_task.c: 222: data->holdCountXY = 0;
 16536  12CB  085B               	movf	matrix_Main@data,w
 16537  12CC  0086               	movwf	6
 16538  12CD  085C               	movf	matrix_Main@data+1,w
 16539  12CE  0087               	movwf	7
 16540  12CF  314F               	addfsr 1,15
 16541  12D0  3000               	movlw	0
 16542  12D1  3FC0               	movwi [0]fsr1
 16543  12D2  3FC1               	movwi [1]fsr1
 16544                           
 16545                           ;matrix_task.c: 223: data->holdCountAY = 0;
 16546  12D3  085B               	movf	matrix_Main@data,w
 16547  12D4  0086               	movwf	6
 16548  12D5  085C               	movf	matrix_Main@data+1,w
 16549  12D6  0087               	movwf	7
 16550  12D7  3151               	addfsr 1,17
 16551  12D8  3000               	movlw	0
 16552  12D9  3FC0               	movwi [0]fsr1
 16553  12DA  3FC1               	movwi [1]fsr1
 16554                           
 16555                           ;matrix_task.c: 224: data->holdCountAX = 0;
 16556  12DB  085B               	movf	matrix_Main@data,w
 16557  12DC  0086               	movwf	6
 16558  12DD  085C               	movf	matrix_Main@data+1,w
 16559  12DE  0087               	movwf	7
 16560  12DF  3153               	addfsr 1,19
 16561  12E0  3000               	movlw	0
 16562  12E1  3FC0               	movwi [0]fsr1
 16563  12E2  3FC1               	movwi [1]fsr1
 16564                           
 16565                           ;matrix_task.c: 225: data->holdCountBX = 0;
 16566  12E3  085B               	movf	matrix_Main@data,w
 16567  12E4  0086               	movwf	6
 16568  12E5  085C               	movf	matrix_Main@data+1,w
 16569  12E6  0087               	movwf	7
 16570  12E7  3155               	addfsr 1,21
 16571  12E8  3000               	movlw	0
 16572  12E9  3FC0               	movwi [0]fsr1
 16573  12EA  3FC1               	movwi [1]fsr1
 16574                           
 16575                           ;matrix_task.c: 226: data->holdCountBY = 0;
 16576  12EB  085B               	movf	matrix_Main@data,w
 16577  12EC  0086               	movwf	6
 16578  12ED  085C               	movf	matrix_Main@data+1,w
 16579  12EE  0087               	movwf	7
 16580  12EF  3157               	addfsr 1,23
 16581  12F0  3000               	movlw	0
 16582  12F1  3FC0               	movwi [0]fsr1
 16583  12F2  3FC1               	movwi [1]fsr1
 16584                           
 16585                           ;matrix_task.c: 227: data->holdCountBA = 0;
 16586  12F3  085B               	movf	matrix_Main@data,w
 16587  12F4  0086               	movwf	6
 16588  12F5  085C               	movf	matrix_Main@data+1,w
 16589  12F6  0087               	movwf	7
 16590  12F7  3159               	addfsr 1,25
 16591  12F8  3000               	movlw	0
 16592  12F9  3FC0               	movwi [0]fsr1
 16593  12FA  3FC1               	movwi [1]fsr1
 16594                           
 16595                           ;matrix_task.c: 228: data->noholdCount = 0;
 16596  12FB  085B               	movf	matrix_Main@data,w
 16597  12FC  0086               	movwf	6
 16598  12FD  085C               	movf	matrix_Main@data+1,w
 16599  12FE  0087               	movwf	7
 16600  12FF  315B               	addfsr 1,27
 16601  1300  3000               	movlw	0
 16602  1301  3FC0               	movwi [0]fsr1
 16603  1302  3FC1               	movwi [1]fsr1
 16604                           
 16605                           ;matrix_task.c: 229: data->displayTickdown = 300;
 16606  1303  085B               	movf	matrix_Main@data,w
 16607  1304  0086               	movwf	6
 16608  1305  085C               	movf	matrix_Main@data+1,w
 16609  1306  0087               	movwf	7
 16610  1307  3145               	addfsr 1,5
 16611  1308  302C               	movlw	44
 16612  1309  3FC0               	movwi [0]fsr1
 16613  130A  3001               	movlw	1
 16614  130B  3FC1               	movwi [1]fsr1
 16615                           
 16616                           ;matrix_task.c: 230: break;
 16617  130C  2FB6               	goto	l10114
 16618  130D                     l9870:	
 16619                           ;matrix_task.c: 231: case 8:
 16620                           
 16621                           
 16622                           ;matrix_task.c: 233: if (data->holdCountY == holdvalue){
 16623  130D  085B               	movf	matrix_Main@data,w
 16624  130E  0086               	movwf	6
 16625  130F  085C               	movf	matrix_Main@data+1,w
 16626  1310  0087               	movwf	7
 16627  1311  314D               	addfsr 1,13
 16628  1312  3F40               	moviw [0]fsr1
 16629  1313  00D4               	movwf	??_matrix_Main
 16630  1314  3F41               	moviw [1]fsr1
 16631  1315  00D5               	movwf	??_matrix_Main+1
 16632  1316  085A               	movf	matrix_Main@holdvalue,w
 16633  1317  00D6               	movwf	??_matrix_Main+2
 16634  1318  01D7               	clrf	??_matrix_Main+3
 16635  1319  0855               	movf	??_matrix_Main+1,w
 16636  131A  0657               	xorwf	??_matrix_Main+3,w
 16637  131B  1D03               	skipz
 16638  131C  2B1F               	goto	u6195
 16639  131D  0854               	movf	??_matrix_Main,w
 16640  131E  0656               	xorwf	??_matrix_Main+2,w
 16641  131F                     u6195:	
 16642  131F  1D03               	skipz
 16643  1320  2B3C               	goto	l9876
 16644                           
 16645                           ;matrix_task.c: 234: matrix_found = matrix_secret_check(data, buttonPressed);
 16646  1321  085C               	movf	matrix_Main@data+1,w
 16647  1322  00F8               	movwf	matrix_secret_check@data+1
 16648  1323  085B               	movf	matrix_Main@data,w
 16649  1324  00F7               	movwf	matrix_secret_check@data
 16650  1325  0859               	movf	matrix_Main@buttonPressed,w
 16651  1326  00D4               	movwf	??_matrix_Main
 16652  1327  0854               	movf	??_matrix_Main,w
 16653  1328  00F9               	movwf	matrix_secret_check@buttonPressed
 16654  1329  31A4  2488  3190   	fcall	_matrix_secret_check
 16655  132C  0020               	movlb	0	; select bank0
 16656  132D  00D5               	movwf	??_matrix_Main+1
 16657  132E  0855               	movf	??_matrix_Main+1,w
 16658  132F  00D8               	movwf	matrix_Main@matrix_found
 16659                           
 16660                           ;matrix_task.c: 235: data->display_state = MATRIX_Y;
 16661  1330  085B               	movf	matrix_Main@data,w
 16662  1331  3E02               	addlw	2
 16663  1332  00D4               	movwf	??_matrix_Main
 16664  1333  3000               	movlw	0
 16665  1334  3D5C               	addwfc	matrix_Main@data+1,w
 16666  1335  00D5               	movwf	??_matrix_Main+1
 16667  1336  0854               	movf	??_matrix_Main,w
 16668  1337  0086               	movwf	6
 16669  1338  0855               	movf	??_matrix_Main+1,w
 16670  1339  0087               	movwf	7
 16671  133A  3001               	movlw	1
 16672  133B  0081               	movwf	1
 16673  133C                     l9876:	
 16674                           
 16675                           ;matrix_task.c: 236: }
 16676                           ;matrix_task.c: 238: data->holdCountA = 0;
 16677  133C  085B               	movf	matrix_Main@data,w
 16678  133D  0086               	movwf	6
 16679  133E  085C               	movf	matrix_Main@data+1,w
 16680  133F  0087               	movwf	7
 16681  1340  3147               	addfsr 1,7
 16682  1341  3000               	movlw	0
 16683  1342  3FC0               	movwi [0]fsr1
 16684  1343  3FC1               	movwi [1]fsr1
 16685                           
 16686                           ;matrix_task.c: 239: data->holdCountB = 0;
 16687  1344  085B               	movf	matrix_Main@data,w
 16688  1345  0086               	movwf	6
 16689  1346  085C               	movf	matrix_Main@data+1,w
 16690  1347  0087               	movwf	7
 16691  1348  3149               	addfsr 1,9
 16692  1349  3000               	movlw	0
 16693  134A  3FC0               	movwi [0]fsr1
 16694  134B  3FC1               	movwi [1]fsr1
 16695                           
 16696                           ;matrix_task.c: 240: data->holdCountX = 0;
 16697  134C  085B               	movf	matrix_Main@data,w
 16698  134D  0086               	movwf	6
 16699  134E  085C               	movf	matrix_Main@data+1,w
 16700  134F  0087               	movwf	7
 16701  1350  314B               	addfsr 1,11
 16702  1351  3000               	movlw	0
 16703  1352  3FC0               	movwi [0]fsr1
 16704  1353  3FC1               	movwi [1]fsr1
 16705                           
 16706                           ;matrix_task.c: 241: data->holdCountY += 1;
 16707  1354  085B               	movf	matrix_Main@data,w
 16708  1355  0086               	movwf	6
 16709  1356  085C               	movf	matrix_Main@data+1,w
 16710  1357  0087               	movwf	7
 16711  1358  314D               	addfsr 1,13
 16712  1359  3001               	movlw	1
 16713  135A  0781               	addwf	1,f
 16714  135B  3141               	addfsr 1,1
 16715  135C  1803               	skipnc
 16716  135D  0A81               	incf	1,f
 16717                           
 16718                           ;matrix_task.c: 242: data->holdCountXY = 0;
 16719  135E  085B               	movf	matrix_Main@data,w
 16720  135F  0086               	movwf	6
 16721  1360  085C               	movf	matrix_Main@data+1,w
 16722  1361  0087               	movwf	7
 16723  1362  314F               	addfsr 1,15
 16724  1363  3000               	movlw	0
 16725  1364  3FC0               	movwi [0]fsr1
 16726  1365  3FC1               	movwi [1]fsr1
 16727                           
 16728                           ;matrix_task.c: 243: data->holdCountAY = 0;
 16729  1366  085B               	movf	matrix_Main@data,w
 16730  1367  0086               	movwf	6
 16731  1368  085C               	movf	matrix_Main@data+1,w
 16732  1369  0087               	movwf	7
 16733  136A  3151               	addfsr 1,17
 16734  136B  3000               	movlw	0
 16735  136C  3FC0               	movwi [0]fsr1
 16736  136D  3FC1               	movwi [1]fsr1
 16737                           
 16738                           ;matrix_task.c: 244: data->holdCountAX = 0;
 16739  136E  085B               	movf	matrix_Main@data,w
 16740  136F  0086               	movwf	6
 16741  1370  085C               	movf	matrix_Main@data+1,w
 16742  1371  0087               	movwf	7
 16743  1372  3153               	addfsr 1,19
 16744  1373  3000               	movlw	0
 16745  1374  3FC0               	movwi [0]fsr1
 16746  1375  3FC1               	movwi [1]fsr1
 16747                           
 16748                           ;matrix_task.c: 245: data->holdCountBX = 0;
 16749  1376  085B               	movf	matrix_Main@data,w
 16750  1377  0086               	movwf	6
 16751  1378  085C               	movf	matrix_Main@data+1,w
 16752  1379  0087               	movwf	7
 16753  137A  3155               	addfsr 1,21
 16754  137B  3000               	movlw	0
 16755  137C  3FC0               	movwi [0]fsr1
 16756  137D  3FC1               	movwi [1]fsr1
 16757                           
 16758                           ;matrix_task.c: 246: data->holdCountBY = 0;
 16759  137E  085B               	movf	matrix_Main@data,w
 16760  137F  0086               	movwf	6
 16761  1380  085C               	movf	matrix_Main@data+1,w
 16762  1381  0087               	movwf	7
 16763  1382  3157               	addfsr 1,23
 16764  1383  3000               	movlw	0
 16765  1384  3FC0               	movwi [0]fsr1
 16766  1385  3FC1               	movwi [1]fsr1
 16767                           
 16768                           ;matrix_task.c: 247: data->holdCountBA = 0;
 16769  1386  085B               	movf	matrix_Main@data,w
 16770  1387  0086               	movwf	6
 16771  1388  085C               	movf	matrix_Main@data+1,w
 16772  1389  0087               	movwf	7
 16773  138A  3159               	addfsr 1,25
 16774  138B  3000               	movlw	0
 16775  138C  3FC0               	movwi [0]fsr1
 16776  138D  3FC1               	movwi [1]fsr1
 16777                           
 16778                           ;matrix_task.c: 248: data->noholdCount = 0;
 16779  138E  085B               	movf	matrix_Main@data,w
 16780  138F  0086               	movwf	6
 16781  1390  085C               	movf	matrix_Main@data+1,w
 16782  1391  0087               	movwf	7
 16783  1392  315B               	addfsr 1,27
 16784  1393  3000               	movlw	0
 16785  1394  3FC0               	movwi [0]fsr1
 16786  1395  3FC1               	movwi [1]fsr1
 16787                           
 16788                           ;matrix_task.c: 249: data->displayTickdown = 300;
 16789  1396  085B               	movf	matrix_Main@data,w
 16790  1397  0086               	movwf	6
 16791  1398  085C               	movf	matrix_Main@data+1,w
 16792  1399  0087               	movwf	7
 16793  139A  3145               	addfsr 1,5
 16794  139B  302C               	movlw	44
 16795  139C  3FC0               	movwi [0]fsr1
 16796  139D  3001               	movlw	1
 16797  139E  3FC1               	movwi [1]fsr1
 16798                           
 16799                           ;matrix_task.c: 250: break;
 16800  139F  2FB6               	goto	l10114
 16801  13A0                     l9900:	
 16802                           ;matrix_task.c: 251: case 4 | 8:
 16803                           
 16804                           
 16805                           ;matrix_task.c: 253: if (data->holdCountXY == holdvalue){
 16806  13A0  085B               	movf	matrix_Main@data,w
 16807  13A1  0086               	movwf	6
 16808  13A2  085C               	movf	matrix_Main@data+1,w
 16809  13A3  0087               	movwf	7
 16810  13A4  314F               	addfsr 1,15
 16811  13A5  3F40               	moviw [0]fsr1
 16812  13A6  00D4               	movwf	??_matrix_Main
 16813  13A7  3F41               	moviw [1]fsr1
 16814  13A8  00D5               	movwf	??_matrix_Main+1
 16815  13A9  085A               	movf	matrix_Main@holdvalue,w
 16816  13AA  00D6               	movwf	??_matrix_Main+2
 16817  13AB  01D7               	clrf	??_matrix_Main+3
 16818  13AC  0855               	movf	??_matrix_Main+1,w
 16819  13AD  0657               	xorwf	??_matrix_Main+3,w
 16820  13AE  1D03               	skipz
 16821  13AF  2BB2               	goto	u6205
 16822  13B0  0854               	movf	??_matrix_Main,w
 16823  13B1  0656               	xorwf	??_matrix_Main+2,w
 16824  13B2                     u6205:	
 16825  13B2  1D03               	skipz
 16826  13B3  2BCF               	goto	l9906
 16827                           
 16828                           ;matrix_task.c: 254: matrix_found = matrix_secret_check(data, 4 | 8);
 16829  13B4  085C               	movf	matrix_Main@data+1,w
 16830  13B5  00F8               	movwf	matrix_secret_check@data+1
 16831  13B6  085B               	movf	matrix_Main@data,w
 16832  13B7  00F7               	movwf	matrix_secret_check@data
 16833  13B8  300C               	movlw	12
 16834  13B9  00D4               	movwf	??_matrix_Main
 16835  13BA  0854               	movf	??_matrix_Main,w
 16836  13BB  00F9               	movwf	matrix_secret_check@buttonPressed
 16837  13BC  31A4  2488  3190   	fcall	_matrix_secret_check
 16838  13BF  0020               	movlb	0	; select bank0
 16839  13C0  00D5               	movwf	??_matrix_Main+1
 16840  13C1  0855               	movf	??_matrix_Main+1,w
 16841  13C2  00D8               	movwf	matrix_Main@matrix_found
 16842                           
 16843                           ;matrix_task.c: 255: data->display_state = MATRIX_XY;
 16844  13C3  085B               	movf	matrix_Main@data,w
 16845  13C4  3E02               	addlw	2
 16846  13C5  00D4               	movwf	??_matrix_Main
 16847  13C6  3000               	movlw	0
 16848  13C7  3D5C               	addwfc	matrix_Main@data+1,w
 16849  13C8  00D5               	movwf	??_matrix_Main+1
 16850  13C9  0854               	movf	??_matrix_Main,w
 16851  13CA  0086               	movwf	6
 16852  13CB  0855               	movf	??_matrix_Main+1,w
 16853  13CC  0087               	movwf	7
 16854  13CD  3008               	movlw	8
 16855  13CE  0081               	movwf	1
 16856  13CF                     l9906:	
 16857                           
 16858                           ;matrix_task.c: 256: }
 16859                           ;matrix_task.c: 257: data->holdCountA = 0;
 16860  13CF  085B               	movf	matrix_Main@data,w
 16861  13D0  0086               	movwf	6
 16862  13D1  085C               	movf	matrix_Main@data+1,w
 16863  13D2  0087               	movwf	7
 16864  13D3  3147               	addfsr 1,7
 16865  13D4  3000               	movlw	0
 16866  13D5  3FC0               	movwi [0]fsr1
 16867  13D6  3FC1               	movwi [1]fsr1
 16868                           
 16869                           ;matrix_task.c: 258: data->holdCountB = 0;
 16870  13D7  085B               	movf	matrix_Main@data,w
 16871  13D8  0086               	movwf	6
 16872  13D9  085C               	movf	matrix_Main@data+1,w
 16873  13DA  0087               	movwf	7
 16874  13DB  3149               	addfsr 1,9
 16875  13DC  3000               	movlw	0
 16876  13DD  3FC0               	movwi [0]fsr1
 16877  13DE  3FC1               	movwi [1]fsr1
 16878                           
 16879                           ;matrix_task.c: 259: data->holdCountX = 0;
 16880  13DF  085B               	movf	matrix_Main@data,w
 16881  13E0  0086               	movwf	6
 16882  13E1  085C               	movf	matrix_Main@data+1,w
 16883  13E2  0087               	movwf	7
 16884  13E3  314B               	addfsr 1,11
 16885  13E4  3000               	movlw	0
 16886  13E5  3FC0               	movwi [0]fsr1
 16887  13E6  3FC1               	movwi [1]fsr1
 16888                           
 16889                           ;matrix_task.c: 260: data->holdCountY = 0;
 16890  13E7  085B               	movf	matrix_Main@data,w
 16891  13E8  0086               	movwf	6
 16892  13E9  085C               	movf	matrix_Main@data+1,w
 16893  13EA  0087               	movwf	7
 16894  13EB  314D               	addfsr 1,13
 16895  13EC  3000               	movlw	0
 16896  13ED  3FC0               	movwi [0]fsr1
 16897  13EE  3FC1               	movwi [1]fsr1
 16898                           
 16899                           ;matrix_task.c: 261: data->holdCountXY += 1;
 16900  13EF  085B               	movf	matrix_Main@data,w
 16901  13F0  0086               	movwf	6
 16902  13F1  085C               	movf	matrix_Main@data+1,w
 16903  13F2  0087               	movwf	7
 16904  13F3  314F               	addfsr 1,15
 16905  13F4  3001               	movlw	1
 16906  13F5  0781               	addwf	1,f
 16907  13F6  3141               	addfsr 1,1
 16908  13F7  1803               	skipnc
 16909  13F8  0A81               	incf	1,f
 16910                           
 16911                           ;matrix_task.c: 262: data->holdCountAY = 0;
 16912  13F9  085B               	movf	matrix_Main@data,w
 16913  13FA  0086               	movwf	6
 16914  13FB  085C               	movf	matrix_Main@data+1,w
 16915  13FC  0087               	movwf	7
 16916  13FD  3151               	addfsr 1,17
 16917  13FE  3000               	movlw	0
 16918  13FF  3FC0               	movwi [0]fsr1
 16919  1400  3FC1               	movwi [1]fsr1
 16920                           
 16921                           ;matrix_task.c: 263: data->holdCountAX = 0;
 16922  1401  085B               	movf	matrix_Main@data,w
 16923  1402  0086               	movwf	6
 16924  1403  085C               	movf	matrix_Main@data+1,w
 16925  1404  0087               	movwf	7
 16926  1405  3153               	addfsr 1,19
 16927  1406  3000               	movlw	0
 16928  1407  3FC0               	movwi [0]fsr1
 16929  1408  3FC1               	movwi [1]fsr1
 16930                           
 16931                           ;matrix_task.c: 264: data->holdCountBX = 0;
 16932  1409  085B               	movf	matrix_Main@data,w
 16933  140A  0086               	movwf	6
 16934  140B  085C               	movf	matrix_Main@data+1,w
 16935  140C  0087               	movwf	7
 16936  140D  3155               	addfsr 1,21
 16937  140E  3000               	movlw	0
 16938  140F  3FC0               	movwi [0]fsr1
 16939  1410  3FC1               	movwi [1]fsr1
 16940                           
 16941                           ;matrix_task.c: 265: data->holdCountBY = 0;
 16942  1411  085B               	movf	matrix_Main@data,w
 16943  1412  0086               	movwf	6
 16944  1413  085C               	movf	matrix_Main@data+1,w
 16945  1414  0087               	movwf	7
 16946  1415  3157               	addfsr 1,23
 16947  1416  3000               	movlw	0
 16948  1417  3FC0               	movwi [0]fsr1
 16949  1418  3FC1               	movwi [1]fsr1
 16950                           
 16951                           ;matrix_task.c: 266: data->holdCountBA = 0;
 16952  1419  085B               	movf	matrix_Main@data,w
 16953  141A  0086               	movwf	6
 16954  141B  085C               	movf	matrix_Main@data+1,w
 16955  141C  0087               	movwf	7
 16956  141D  3159               	addfsr 1,25
 16957  141E  3000               	movlw	0
 16958  141F  3FC0               	movwi [0]fsr1
 16959  1420  3FC1               	movwi [1]fsr1
 16960                           
 16961                           ;matrix_task.c: 267: data->noholdCount = 0;
 16962  1421  085B               	movf	matrix_Main@data,w
 16963  1422  0086               	movwf	6
 16964  1423  085C               	movf	matrix_Main@data+1,w
 16965  1424  0087               	movwf	7
 16966  1425  315B               	addfsr 1,27
 16967  1426  3000               	movlw	0
 16968  1427  3FC0               	movwi [0]fsr1
 16969  1428  3FC1               	movwi [1]fsr1
 16970                           
 16971                           ;matrix_task.c: 268: data->displayTickdown = 300;
 16972  1429  085B               	movf	matrix_Main@data,w
 16973  142A  0086               	movwf	6
 16974  142B  085C               	movf	matrix_Main@data+1,w
 16975  142C  0087               	movwf	7
 16976  142D  3145               	addfsr 1,5
 16977  142E  302C               	movlw	44
 16978  142F  3FC0               	movwi [0]fsr1
 16979  1430  3001               	movlw	1
 16980  1431  3FC1               	movwi [1]fsr1
 16981                           
 16982                           ;matrix_task.c: 269: break;
 16983  1432  2FB6               	goto	l10114
 16984  1433                     l9930:	
 16985                           ;matrix_task.c: 270: case 1 | 8:
 16986                           
 16987                           
 16988                           ;matrix_task.c: 272: if (data->holdCountAY == holdvalue){
 16989  1433  085B               	movf	matrix_Main@data,w
 16990  1434  0086               	movwf	6
 16991  1435  085C               	movf	matrix_Main@data+1,w
 16992  1436  0087               	movwf	7
 16993  1437  3151               	addfsr 1,17
 16994  1438  3F40               	moviw [0]fsr1
 16995  1439  00D4               	movwf	??_matrix_Main
 16996  143A  3F41               	moviw [1]fsr1
 16997  143B  00D5               	movwf	??_matrix_Main+1
 16998  143C  085A               	movf	matrix_Main@holdvalue,w
 16999  143D  00D6               	movwf	??_matrix_Main+2
 17000  143E  01D7               	clrf	??_matrix_Main+3
 17001  143F  0855               	movf	??_matrix_Main+1,w
 17002  1440  0657               	xorwf	??_matrix_Main+3,w
 17003  1441  1D03               	skipz
 17004  1442  2C45               	goto	u6215
 17005  1443  0854               	movf	??_matrix_Main,w
 17006  1444  0656               	xorwf	??_matrix_Main+2,w
 17007  1445                     u6215:	
 17008  1445  1D03               	skipz
 17009  1446  2C62               	goto	l9936
 17010                           
 17011                           ;matrix_task.c: 273: matrix_found = matrix_secret_check(data, 1 | 8);
 17012  1447  085C               	movf	matrix_Main@data+1,w
 17013  1448  00F8               	movwf	matrix_secret_check@data+1
 17014  1449  085B               	movf	matrix_Main@data,w
 17015  144A  00F7               	movwf	matrix_secret_check@data
 17016  144B  3009               	movlw	9
 17017  144C  00D4               	movwf	??_matrix_Main
 17018  144D  0854               	movf	??_matrix_Main,w
 17019  144E  00F9               	movwf	matrix_secret_check@buttonPressed
 17020  144F  31A4  2488  3190   	fcall	_matrix_secret_check
 17021  1452  0020               	movlb	0	; select bank0
 17022  1453  00D5               	movwf	??_matrix_Main+1
 17023  1454  0855               	movf	??_matrix_Main+1,w
 17024  1455  00D8               	movwf	matrix_Main@matrix_found
 17025                           
 17026                           ;matrix_task.c: 274: data->display_state = MATRIX_AY;
 17027  1456  085B               	movf	matrix_Main@data,w
 17028  1457  3E02               	addlw	2
 17029  1458  00D4               	movwf	??_matrix_Main
 17030  1459  3000               	movlw	0
 17031  145A  3D5C               	addwfc	matrix_Main@data+1,w
 17032  145B  00D5               	movwf	??_matrix_Main+1
 17033  145C  0854               	movf	??_matrix_Main,w
 17034  145D  0086               	movwf	6
 17035  145E  0855               	movf	??_matrix_Main+1,w
 17036  145F  0087               	movwf	7
 17037  1460  3005               	movlw	5
 17038  1461  0081               	movwf	1
 17039  1462                     l9936:	
 17040                           
 17041                           ;matrix_task.c: 275: }
 17042                           ;matrix_task.c: 276: data->holdCountA = 0;
 17043  1462  085B               	movf	matrix_Main@data,w
 17044  1463  0086               	movwf	6
 17045  1464  085C               	movf	matrix_Main@data+1,w
 17046  1465  0087               	movwf	7
 17047  1466  3147               	addfsr 1,7
 17048  1467  3000               	movlw	0
 17049  1468  3FC0               	movwi [0]fsr1
 17050  1469  3FC1               	movwi [1]fsr1
 17051                           
 17052                           ;matrix_task.c: 277: data->holdCountB = 0;
 17053  146A  085B               	movf	matrix_Main@data,w
 17054  146B  0086               	movwf	6
 17055  146C  085C               	movf	matrix_Main@data+1,w
 17056  146D  0087               	movwf	7
 17057  146E  3149               	addfsr 1,9
 17058  146F  3000               	movlw	0
 17059  1470  3FC0               	movwi [0]fsr1
 17060  1471  3FC1               	movwi [1]fsr1
 17061                           
 17062                           ;matrix_task.c: 278: data->holdCountX = 0;
 17063  1472  085B               	movf	matrix_Main@data,w
 17064  1473  0086               	movwf	6
 17065  1474  085C               	movf	matrix_Main@data+1,w
 17066  1475  0087               	movwf	7
 17067  1476  314B               	addfsr 1,11
 17068  1477  3000               	movlw	0
 17069  1478  3FC0               	movwi [0]fsr1
 17070  1479  3FC1               	movwi [1]fsr1
 17071                           
 17072                           ;matrix_task.c: 279: data->holdCountY = 0;
 17073  147A  085B               	movf	matrix_Main@data,w
 17074  147B  0086               	movwf	6
 17075  147C  085C               	movf	matrix_Main@data+1,w
 17076  147D  0087               	movwf	7
 17077  147E  314D               	addfsr 1,13
 17078  147F  3000               	movlw	0
 17079  1480  3FC0               	movwi [0]fsr1
 17080  1481  3FC1               	movwi [1]fsr1
 17081                           
 17082                           ;matrix_task.c: 280: data->holdCountXY = 0;
 17083  1482  085B               	movf	matrix_Main@data,w
 17084  1483  0086               	movwf	6
 17085  1484  085C               	movf	matrix_Main@data+1,w
 17086  1485  0087               	movwf	7
 17087  1486  314F               	addfsr 1,15
 17088  1487  3000               	movlw	0
 17089  1488  3FC0               	movwi [0]fsr1
 17090  1489  3FC1               	movwi [1]fsr1
 17091                           
 17092                           ;matrix_task.c: 281: data->holdCountAY += 1;
 17093  148A  085B               	movf	matrix_Main@data,w
 17094  148B  0086               	movwf	6
 17095  148C  085C               	movf	matrix_Main@data+1,w
 17096  148D  0087               	movwf	7
 17097  148E  3151               	addfsr 1,17
 17098  148F  3001               	movlw	1
 17099  1490  0781               	addwf	1,f
 17100  1491  3141               	addfsr 1,1
 17101  1492  1803               	skipnc
 17102  1493  0A81               	incf	1,f
 17103                           
 17104                           ;matrix_task.c: 282: data->holdCountAX = 0;
 17105  1494  085B               	movf	matrix_Main@data,w
 17106  1495  0086               	movwf	6
 17107  1496  085C               	movf	matrix_Main@data+1,w
 17108  1497  0087               	movwf	7
 17109  1498  3153               	addfsr 1,19
 17110  1499  3000               	movlw	0
 17111  149A  3FC0               	movwi [0]fsr1
 17112  149B  3FC1               	movwi [1]fsr1
 17113                           
 17114                           ;matrix_task.c: 283: data->holdCountBX = 0;
 17115  149C  085B               	movf	matrix_Main@data,w
 17116  149D  0086               	movwf	6
 17117  149E  085C               	movf	matrix_Main@data+1,w
 17118  149F  0087               	movwf	7
 17119  14A0  3155               	addfsr 1,21
 17120  14A1  3000               	movlw	0
 17121  14A2  3FC0               	movwi [0]fsr1
 17122  14A3  3FC1               	movwi [1]fsr1
 17123                           
 17124                           ;matrix_task.c: 284: data->holdCountBY = 0;
 17125  14A4  085B               	movf	matrix_Main@data,w
 17126  14A5  0086               	movwf	6
 17127  14A6  085C               	movf	matrix_Main@data+1,w
 17128  14A7  0087               	movwf	7
 17129  14A8  3157               	addfsr 1,23
 17130  14A9  3000               	movlw	0
 17131  14AA  3FC0               	movwi [0]fsr1
 17132  14AB  3FC1               	movwi [1]fsr1
 17133                           
 17134                           ;matrix_task.c: 285: data->holdCountBA = 0;
 17135  14AC  085B               	movf	matrix_Main@data,w
 17136  14AD  0086               	movwf	6
 17137  14AE  085C               	movf	matrix_Main@data+1,w
 17138  14AF  0087               	movwf	7
 17139  14B0  3159               	addfsr 1,25
 17140  14B1  3000               	movlw	0
 17141  14B2  3FC0               	movwi [0]fsr1
 17142  14B3  3FC1               	movwi [1]fsr1
 17143                           
 17144                           ;matrix_task.c: 286: data->noholdCount = 0;
 17145  14B4  085B               	movf	matrix_Main@data,w
 17146  14B5  0086               	movwf	6
 17147  14B6  085C               	movf	matrix_Main@data+1,w
 17148  14B7  0087               	movwf	7
 17149  14B8  315B               	addfsr 1,27
 17150  14B9  3000               	movlw	0
 17151  14BA  3FC0               	movwi [0]fsr1
 17152  14BB  3FC1               	movwi [1]fsr1
 17153                           
 17154                           ;matrix_task.c: 287: data->displayTickdown = 300;
 17155  14BC  085B               	movf	matrix_Main@data,w
 17156  14BD  0086               	movwf	6
 17157  14BE  085C               	movf	matrix_Main@data+1,w
 17158  14BF  0087               	movwf	7
 17159  14C0  3145               	addfsr 1,5
 17160  14C1  302C               	movlw	44
 17161  14C2  3FC0               	movwi [0]fsr1
 17162  14C3  3001               	movlw	1
 17163  14C4  3FC1               	movwi [1]fsr1
 17164                           
 17165                           ;matrix_task.c: 288: break;
 17166  14C5  2FB6               	goto	l10114
 17167  14C6                     l9960:	
 17168                           ;matrix_task.c: 289: case 1 | 4:
 17169                           
 17170                           
 17171                           ;matrix_task.c: 291: if (data->holdCountAX == holdvalue){
 17172  14C6  085B               	movf	matrix_Main@data,w
 17173  14C7  0086               	movwf	6
 17174  14C8  085C               	movf	matrix_Main@data+1,w
 17175  14C9  0087               	movwf	7
 17176  14CA  3153               	addfsr 1,19
 17177  14CB  3F40               	moviw [0]fsr1
 17178  14CC  00D4               	movwf	??_matrix_Main
 17179  14CD  3F41               	moviw [1]fsr1
 17180  14CE  00D5               	movwf	??_matrix_Main+1
 17181  14CF  085A               	movf	matrix_Main@holdvalue,w
 17182  14D0  00D6               	movwf	??_matrix_Main+2
 17183  14D1  01D7               	clrf	??_matrix_Main+3
 17184  14D2  0855               	movf	??_matrix_Main+1,w
 17185  14D3  0657               	xorwf	??_matrix_Main+3,w
 17186  14D4  1D03               	skipz
 17187  14D5  2CD8               	goto	u6225
 17188  14D6  0854               	movf	??_matrix_Main,w
 17189  14D7  0656               	xorwf	??_matrix_Main+2,w
 17190  14D8                     u6225:	
 17191  14D8  1D03               	skipz
 17192  14D9  2CF5               	goto	l9966
 17193                           
 17194                           ;matrix_task.c: 292: matrix_found = matrix_secret_check(data, 1 | 4);
 17195  14DA  085C               	movf	matrix_Main@data+1,w
 17196  14DB  00F8               	movwf	matrix_secret_check@data+1
 17197  14DC  085B               	movf	matrix_Main@data,w
 17198  14DD  00F7               	movwf	matrix_secret_check@data
 17199  14DE  3005               	movlw	5
 17200  14DF  00D4               	movwf	??_matrix_Main
 17201  14E0  0854               	movf	??_matrix_Main,w
 17202  14E1  00F9               	movwf	matrix_secret_check@buttonPressed
 17203  14E2  31A4  2488  3190   	fcall	_matrix_secret_check
 17204  14E5  0020               	movlb	0	; select bank0
 17205  14E6  00D5               	movwf	??_matrix_Main+1
 17206  14E7  0855               	movf	??_matrix_Main+1,w
 17207  14E8  00D8               	movwf	matrix_Main@matrix_found
 17208                           
 17209                           ;matrix_task.c: 293: data->display_state = MATRIX_AX;
 17210  14E9  085B               	movf	matrix_Main@data,w
 17211  14EA  3E02               	addlw	2
 17212  14EB  00D4               	movwf	??_matrix_Main
 17213  14EC  3000               	movlw	0
 17214  14ED  3D5C               	addwfc	matrix_Main@data+1,w
 17215  14EE  00D5               	movwf	??_matrix_Main+1
 17216  14EF  0854               	movf	??_matrix_Main,w
 17217  14F0  0086               	movwf	6
 17218  14F1  0855               	movf	??_matrix_Main+1,w
 17219  14F2  0087               	movwf	7
 17220  14F3  3004               	movlw	4
 17221  14F4  0081               	movwf	1
 17222  14F5                     l9966:	
 17223                           
 17224                           ;matrix_task.c: 294: }
 17225                           ;matrix_task.c: 295: data->holdCountA = 0;
 17226  14F5  085B               	movf	matrix_Main@data,w
 17227  14F6  0086               	movwf	6
 17228  14F7  085C               	movf	matrix_Main@data+1,w
 17229  14F8  0087               	movwf	7
 17230  14F9  3147               	addfsr 1,7
 17231  14FA  3000               	movlw	0
 17232  14FB  3FC0               	movwi [0]fsr1
 17233  14FC  3FC1               	movwi [1]fsr1
 17234                           
 17235                           ;matrix_task.c: 296: data->holdCountB = 0;
 17236  14FD  085B               	movf	matrix_Main@data,w
 17237  14FE  0086               	movwf	6
 17238  14FF  085C               	movf	matrix_Main@data+1,w
 17239  1500  0087               	movwf	7
 17240  1501  3149               	addfsr 1,9
 17241  1502  3000               	movlw	0
 17242  1503  3FC0               	movwi [0]fsr1
 17243  1504  3FC1               	movwi [1]fsr1
 17244                           
 17245                           ;matrix_task.c: 297: data->holdCountX = 0;
 17246  1505  085B               	movf	matrix_Main@data,w
 17247  1506  0086               	movwf	6
 17248  1507  085C               	movf	matrix_Main@data+1,w
 17249  1508  0087               	movwf	7
 17250  1509  314B               	addfsr 1,11
 17251  150A  3000               	movlw	0
 17252  150B  3FC0               	movwi [0]fsr1
 17253  150C  3FC1               	movwi [1]fsr1
 17254                           
 17255                           ;matrix_task.c: 298: data->holdCountY = 0;
 17256  150D  085B               	movf	matrix_Main@data,w
 17257  150E  0086               	movwf	6
 17258  150F  085C               	movf	matrix_Main@data+1,w
 17259  1510  0087               	movwf	7
 17260  1511  314D               	addfsr 1,13
 17261  1512  3000               	movlw	0
 17262  1513  3FC0               	movwi [0]fsr1
 17263  1514  3FC1               	movwi [1]fsr1
 17264                           
 17265                           ;matrix_task.c: 299: data->holdCountXY = 0;
 17266  1515  085B               	movf	matrix_Main@data,w
 17267  1516  0086               	movwf	6
 17268  1517  085C               	movf	matrix_Main@data+1,w
 17269  1518  0087               	movwf	7
 17270  1519  314F               	addfsr 1,15
 17271  151A  3000               	movlw	0
 17272  151B  3FC0               	movwi [0]fsr1
 17273  151C  3FC1               	movwi [1]fsr1
 17274                           
 17275                           ;matrix_task.c: 300: data->holdCountAY = 0;
 17276  151D  085B               	movf	matrix_Main@data,w
 17277  151E  0086               	movwf	6
 17278  151F  085C               	movf	matrix_Main@data+1,w
 17279  1520  0087               	movwf	7
 17280  1521  3151               	addfsr 1,17
 17281  1522  3000               	movlw	0
 17282  1523  3FC0               	movwi [0]fsr1
 17283  1524  3FC1               	movwi [1]fsr1
 17284                           
 17285                           ;matrix_task.c: 301: data->holdCountAX += 1;
 17286  1525  085B               	movf	matrix_Main@data,w
 17287  1526  0086               	movwf	6
 17288  1527  085C               	movf	matrix_Main@data+1,w
 17289  1528  0087               	movwf	7
 17290  1529  3153               	addfsr 1,19
 17291  152A  3001               	movlw	1
 17292  152B  0781               	addwf	1,f
 17293  152C  3141               	addfsr 1,1
 17294  152D  1803               	skipnc
 17295  152E  0A81               	incf	1,f
 17296                           
 17297                           ;matrix_task.c: 302: data->holdCountBX = 0;
 17298  152F  085B               	movf	matrix_Main@data,w
 17299  1530  0086               	movwf	6
 17300  1531  085C               	movf	matrix_Main@data+1,w
 17301  1532  0087               	movwf	7
 17302  1533  3155               	addfsr 1,21
 17303  1534  3000               	movlw	0
 17304  1535  3FC0               	movwi [0]fsr1
 17305  1536  3FC1               	movwi [1]fsr1
 17306                           
 17307                           ;matrix_task.c: 303: data->holdCountBY = 0;
 17308  1537  085B               	movf	matrix_Main@data,w
 17309  1538  0086               	movwf	6
 17310  1539  085C               	movf	matrix_Main@data+1,w
 17311  153A  0087               	movwf	7
 17312  153B  3157               	addfsr 1,23
 17313  153C  3000               	movlw	0
 17314  153D  3FC0               	movwi [0]fsr1
 17315  153E  3FC1               	movwi [1]fsr1
 17316                           
 17317                           ;matrix_task.c: 304: data->holdCountBA = 0;
 17318  153F  085B               	movf	matrix_Main@data,w
 17319  1540  0086               	movwf	6
 17320  1541  085C               	movf	matrix_Main@data+1,w
 17321  1542  0087               	movwf	7
 17322  1543  3159               	addfsr 1,25
 17323  1544  3000               	movlw	0
 17324  1545  3FC0               	movwi [0]fsr1
 17325  1546  3FC1               	movwi [1]fsr1
 17326                           
 17327                           ;matrix_task.c: 305: data->noholdCount = 0;
 17328  1547  085B               	movf	matrix_Main@data,w
 17329  1548  0086               	movwf	6
 17330  1549  085C               	movf	matrix_Main@data+1,w
 17331  154A  0087               	movwf	7
 17332  154B  315B               	addfsr 1,27
 17333  154C  3000               	movlw	0
 17334  154D  3FC0               	movwi [0]fsr1
 17335  154E  3FC1               	movwi [1]fsr1
 17336                           
 17337                           ;matrix_task.c: 306: data->displayTickdown = 300;
 17338  154F  085B               	movf	matrix_Main@data,w
 17339  1550  0086               	movwf	6
 17340  1551  085C               	movf	matrix_Main@data+1,w
 17341  1552  0087               	movwf	7
 17342  1553  3145               	addfsr 1,5
 17343  1554  302C               	movlw	44
 17344  1555  3FC0               	movwi [0]fsr1
 17345  1556  3001               	movlw	1
 17346  1557  3FC1               	movwi [1]fsr1
 17347                           
 17348                           ;matrix_task.c: 307: break;
 17349  1558  2FB6               	goto	l10114
 17350  1559                     l9990:	
 17351                           ;matrix_task.c: 308: case 2 | 4:
 17352                           
 17353                           
 17354                           ;matrix_task.c: 310: if (data->holdCountBX == holdvalue){
 17355  1559  085B               	movf	matrix_Main@data,w
 17356  155A  0086               	movwf	6
 17357  155B  085C               	movf	matrix_Main@data+1,w
 17358  155C  0087               	movwf	7
 17359  155D  3155               	addfsr 1,21
 17360  155E  3F40               	moviw [0]fsr1
 17361  155F  00D4               	movwf	??_matrix_Main
 17362  1560  3F41               	moviw [1]fsr1
 17363  1561  00D5               	movwf	??_matrix_Main+1
 17364  1562  085A               	movf	matrix_Main@holdvalue,w
 17365  1563  00D6               	movwf	??_matrix_Main+2
 17366  1564  01D7               	clrf	??_matrix_Main+3
 17367  1565  0855               	movf	??_matrix_Main+1,w
 17368  1566  0657               	xorwf	??_matrix_Main+3,w
 17369  1567  1D03               	skipz
 17370  1568  2D6B               	goto	u6235
 17371  1569  0854               	movf	??_matrix_Main,w
 17372  156A  0656               	xorwf	??_matrix_Main+2,w
 17373  156B                     u6235:	
 17374  156B  1D03               	skipz
 17375  156C  2D88               	goto	l9996
 17376                           
 17377                           ;matrix_task.c: 311: matrix_found = matrix_secret_check(data, 2 | 4);
 17378  156D  085C               	movf	matrix_Main@data+1,w
 17379  156E  00F8               	movwf	matrix_secret_check@data+1
 17380  156F  085B               	movf	matrix_Main@data,w
 17381  1570  00F7               	movwf	matrix_secret_check@data
 17382  1571  3006               	movlw	6
 17383  1572  00D4               	movwf	??_matrix_Main
 17384  1573  0854               	movf	??_matrix_Main,w
 17385  1574  00F9               	movwf	matrix_secret_check@buttonPressed
 17386  1575  31A4  2488  3190   	fcall	_matrix_secret_check
 17387  1578  0020               	movlb	0	; select bank0
 17388  1579  00D5               	movwf	??_matrix_Main+1
 17389  157A  0855               	movf	??_matrix_Main+1,w
 17390  157B  00D8               	movwf	matrix_Main@matrix_found
 17391                           
 17392                           ;matrix_task.c: 312: data->display_state = MATRIX_BX;
 17393  157C  085B               	movf	matrix_Main@data,w
 17394  157D  3E02               	addlw	2
 17395  157E  00D4               	movwf	??_matrix_Main
 17396  157F  3000               	movlw	0
 17397  1580  3D5C               	addwfc	matrix_Main@data+1,w
 17398  1581  00D5               	movwf	??_matrix_Main+1
 17399  1582  0854               	movf	??_matrix_Main,w
 17400  1583  0086               	movwf	6
 17401  1584  0855               	movf	??_matrix_Main+1,w
 17402  1585  0087               	movwf	7
 17403  1586  3007               	movlw	7
 17404  1587  0081               	movwf	1
 17405  1588                     l9996:	
 17406                           
 17407                           ;matrix_task.c: 313: }
 17408                           ;matrix_task.c: 314: data->holdCountA = 0;
 17409  1588  085B               	movf	matrix_Main@data,w
 17410  1589  0086               	movwf	6
 17411  158A  085C               	movf	matrix_Main@data+1,w
 17412  158B  0087               	movwf	7
 17413  158C  3147               	addfsr 1,7
 17414  158D  3000               	movlw	0
 17415  158E  3FC0               	movwi [0]fsr1
 17416  158F  3FC1               	movwi [1]fsr1
 17417                           
 17418                           ;matrix_task.c: 315: data->holdCountB = 0;
 17419  1590  085B               	movf	matrix_Main@data,w
 17420  1591  0086               	movwf	6
 17421  1592  085C               	movf	matrix_Main@data+1,w
 17422  1593  0087               	movwf	7
 17423  1594  3149               	addfsr 1,9
 17424  1595  3000               	movlw	0
 17425  1596  3FC0               	movwi [0]fsr1
 17426  1597  3FC1               	movwi [1]fsr1
 17427                           
 17428                           ;matrix_task.c: 316: data->holdCountX = 0;
 17429  1598  085B               	movf	matrix_Main@data,w
 17430  1599  0086               	movwf	6
 17431  159A  085C               	movf	matrix_Main@data+1,w
 17432  159B  0087               	movwf	7
 17433  159C  314B               	addfsr 1,11
 17434  159D  3000               	movlw	0
 17435  159E  3FC0               	movwi [0]fsr1
 17436  159F  3FC1               	movwi [1]fsr1
 17437                           
 17438                           ;matrix_task.c: 317: data->holdCountY = 0;
 17439  15A0  085B               	movf	matrix_Main@data,w
 17440  15A1  0086               	movwf	6
 17441  15A2  085C               	movf	matrix_Main@data+1,w
 17442  15A3  0087               	movwf	7
 17443  15A4  314D               	addfsr 1,13
 17444  15A5  3000               	movlw	0
 17445  15A6  3FC0               	movwi [0]fsr1
 17446  15A7  3FC1               	movwi [1]fsr1
 17447                           
 17448                           ;matrix_task.c: 318: data->holdCountXY = 0;
 17449  15A8  085B               	movf	matrix_Main@data,w
 17450  15A9  0086               	movwf	6
 17451  15AA  085C               	movf	matrix_Main@data+1,w
 17452  15AB  0087               	movwf	7
 17453  15AC  314F               	addfsr 1,15
 17454  15AD  3000               	movlw	0
 17455  15AE  3FC0               	movwi [0]fsr1
 17456  15AF  3FC1               	movwi [1]fsr1
 17457                           
 17458                           ;matrix_task.c: 319: data->holdCountAY = 0;
 17459  15B0  085B               	movf	matrix_Main@data,w
 17460  15B1  0086               	movwf	6
 17461  15B2  085C               	movf	matrix_Main@data+1,w
 17462  15B3  0087               	movwf	7
 17463  15B4  3151               	addfsr 1,17
 17464  15B5  3000               	movlw	0
 17465  15B6  3FC0               	movwi [0]fsr1
 17466  15B7  3FC1               	movwi [1]fsr1
 17467                           
 17468                           ;matrix_task.c: 320: data->holdCountAX = 0;
 17469  15B8  085B               	movf	matrix_Main@data,w
 17470  15B9  0086               	movwf	6
 17471  15BA  085C               	movf	matrix_Main@data+1,w
 17472  15BB  0087               	movwf	7
 17473  15BC  3153               	addfsr 1,19
 17474  15BD  3000               	movlw	0
 17475  15BE  3FC0               	movwi [0]fsr1
 17476  15BF  3FC1               	movwi [1]fsr1
 17477                           
 17478                           ;matrix_task.c: 321: data->holdCountBX += 1;
 17479  15C0  085B               	movf	matrix_Main@data,w
 17480  15C1  0086               	movwf	6
 17481  15C2  085C               	movf	matrix_Main@data+1,w
 17482  15C3  0087               	movwf	7
 17483  15C4  3155               	addfsr 1,21
 17484  15C5  3001               	movlw	1
 17485  15C6  0781               	addwf	1,f
 17486  15C7  3141               	addfsr 1,1
 17487  15C8  1803               	skipnc
 17488  15C9  0A81               	incf	1,f
 17489                           
 17490                           ;matrix_task.c: 322: data->holdCountBY = 0;
 17491  15CA  085B               	movf	matrix_Main@data,w
 17492  15CB  0086               	movwf	6
 17493  15CC  085C               	movf	matrix_Main@data+1,w
 17494  15CD  0087               	movwf	7
 17495  15CE  3157               	addfsr 1,23
 17496  15CF  3000               	movlw	0
 17497  15D0  3FC0               	movwi [0]fsr1
 17498  15D1  3FC1               	movwi [1]fsr1
 17499                           
 17500                           ;matrix_task.c: 323: data->holdCountBA = 0;
 17501  15D2  085B               	movf	matrix_Main@data,w
 17502  15D3  0086               	movwf	6
 17503  15D4  085C               	movf	matrix_Main@data+1,w
 17504  15D5  0087               	movwf	7
 17505  15D6  3159               	addfsr 1,25
 17506  15D7  3000               	movlw	0
 17507  15D8  3FC0               	movwi [0]fsr1
 17508  15D9  3FC1               	movwi [1]fsr1
 17509                           
 17510                           ;matrix_task.c: 324: data->noholdCount = 0;
 17511  15DA  085B               	movf	matrix_Main@data,w
 17512  15DB  0086               	movwf	6
 17513  15DC  085C               	movf	matrix_Main@data+1,w
 17514  15DD  0087               	movwf	7
 17515  15DE  315B               	addfsr 1,27
 17516  15DF  3000               	movlw	0
 17517  15E0  3FC0               	movwi [0]fsr1
 17518  15E1  3FC1               	movwi [1]fsr1
 17519                           
 17520                           ;matrix_task.c: 325: data->displayTickdown = 300;
 17521  15E2  085B               	movf	matrix_Main@data,w
 17522  15E3  0086               	movwf	6
 17523  15E4  085C               	movf	matrix_Main@data+1,w
 17524  15E5  0087               	movwf	7
 17525  15E6  3145               	addfsr 1,5
 17526  15E7  302C               	movlw	44
 17527  15E8  3FC0               	movwi [0]fsr1
 17528  15E9  3001               	movlw	1
 17529  15EA  3FC1               	movwi [1]fsr1
 17530                           
 17531                           ;matrix_task.c: 326: break;
 17532  15EB  2FB6               	goto	l10114
 17533  15EC                     l10020:	
 17534                           ;matrix_task.c: 327: case 2 | 8:
 17535                           
 17536                           
 17537                           ;matrix_task.c: 329: if (data->holdCountBY == holdvalue){
 17538  15EC  085B               	movf	matrix_Main@data,w
 17539  15ED  0086               	movwf	6
 17540  15EE  085C               	movf	matrix_Main@data+1,w
 17541  15EF  0087               	movwf	7
 17542  15F0  3157               	addfsr 1,23
 17543  15F1  3F40               	moviw [0]fsr1
 17544  15F2  00D4               	movwf	??_matrix_Main
 17545  15F3  3F41               	moviw [1]fsr1
 17546  15F4  00D5               	movwf	??_matrix_Main+1
 17547  15F5  085A               	movf	matrix_Main@holdvalue,w
 17548  15F6  00D6               	movwf	??_matrix_Main+2
 17549  15F7  01D7               	clrf	??_matrix_Main+3
 17550  15F8  0855               	movf	??_matrix_Main+1,w
 17551  15F9  0657               	xorwf	??_matrix_Main+3,w
 17552  15FA  1D03               	skipz
 17553  15FB  2DFE               	goto	u6245
 17554  15FC  0854               	movf	??_matrix_Main,w
 17555  15FD  0656               	xorwf	??_matrix_Main+2,w
 17556  15FE                     u6245:	
 17557  15FE  1D03               	skipz
 17558  15FF  2E1B               	goto	l10026
 17559                           
 17560                           ;matrix_task.c: 330: matrix_found = matrix_secret_check(data, 2 | 8);
 17561  1600  085C               	movf	matrix_Main@data+1,w
 17562  1601  00F8               	movwf	matrix_secret_check@data+1
 17563  1602  085B               	movf	matrix_Main@data,w
 17564  1603  00F7               	movwf	matrix_secret_check@data
 17565  1604  300A               	movlw	10
 17566  1605  00D4               	movwf	??_matrix_Main
 17567  1606  0854               	movf	??_matrix_Main,w
 17568  1607  00F9               	movwf	matrix_secret_check@buttonPressed
 17569  1608  31A4  2488  3190   	fcall	_matrix_secret_check
 17570  160B  0020               	movlb	0	; select bank0
 17571  160C  00D5               	movwf	??_matrix_Main+1
 17572  160D  0855               	movf	??_matrix_Main+1,w
 17573  160E  00D8               	movwf	matrix_Main@matrix_found
 17574                           
 17575                           ;matrix_task.c: 331: data->display_state = MATRIX_BY;
 17576  160F  085B               	movf	matrix_Main@data,w
 17577  1610  3E02               	addlw	2
 17578  1611  00D4               	movwf	??_matrix_Main
 17579  1612  3000               	movlw	0
 17580  1613  3D5C               	addwfc	matrix_Main@data+1,w
 17581  1614  00D5               	movwf	??_matrix_Main+1
 17582  1615  0854               	movf	??_matrix_Main,w
 17583  1616  0086               	movwf	6
 17584  1617  0855               	movf	??_matrix_Main+1,w
 17585  1618  0087               	movwf	7
 17586  1619  3009               	movlw	9
 17587  161A  0081               	movwf	1
 17588  161B                     l10026:	
 17589                           
 17590                           ;matrix_task.c: 332: }
 17591                           ;matrix_task.c: 333: data->holdCountA = 0;
 17592  161B  085B               	movf	matrix_Main@data,w
 17593  161C  0086               	movwf	6
 17594  161D  085C               	movf	matrix_Main@data+1,w
 17595  161E  0087               	movwf	7
 17596  161F  3147               	addfsr 1,7
 17597  1620  3000               	movlw	0
 17598  1621  3FC0               	movwi [0]fsr1
 17599  1622  3FC1               	movwi [1]fsr1
 17600                           
 17601                           ;matrix_task.c: 334: data->holdCountB = 0;
 17602  1623  085B               	movf	matrix_Main@data,w
 17603  1624  0086               	movwf	6
 17604  1625  085C               	movf	matrix_Main@data+1,w
 17605  1626  0087               	movwf	7
 17606  1627  3149               	addfsr 1,9
 17607  1628  3000               	movlw	0
 17608  1629  3FC0               	movwi [0]fsr1
 17609  162A  3FC1               	movwi [1]fsr1
 17610                           
 17611                           ;matrix_task.c: 335: data->holdCountX = 0;
 17612  162B  085B               	movf	matrix_Main@data,w
 17613  162C  0086               	movwf	6
 17614  162D  085C               	movf	matrix_Main@data+1,w
 17615  162E  0087               	movwf	7
 17616  162F  314B               	addfsr 1,11
 17617  1630  3000               	movlw	0
 17618  1631  3FC0               	movwi [0]fsr1
 17619  1632  3FC1               	movwi [1]fsr1
 17620                           
 17621                           ;matrix_task.c: 336: data->holdCountY = 0;
 17622  1633  085B               	movf	matrix_Main@data,w
 17623  1634  0086               	movwf	6
 17624  1635  085C               	movf	matrix_Main@data+1,w
 17625  1636  0087               	movwf	7
 17626  1637  314D               	addfsr 1,13
 17627  1638  3000               	movlw	0
 17628  1639  3FC0               	movwi [0]fsr1
 17629  163A  3FC1               	movwi [1]fsr1
 17630                           
 17631                           ;matrix_task.c: 337: data->holdCountXY = 0;
 17632  163B  085B               	movf	matrix_Main@data,w
 17633  163C  0086               	movwf	6
 17634  163D  085C               	movf	matrix_Main@data+1,w
 17635  163E  0087               	movwf	7
 17636  163F  314F               	addfsr 1,15
 17637  1640  3000               	movlw	0
 17638  1641  3FC0               	movwi [0]fsr1
 17639  1642  3FC1               	movwi [1]fsr1
 17640                           
 17641                           ;matrix_task.c: 338: data->holdCountAY = 0;
 17642  1643  085B               	movf	matrix_Main@data,w
 17643  1644  0086               	movwf	6
 17644  1645  085C               	movf	matrix_Main@data+1,w
 17645  1646  0087               	movwf	7
 17646  1647  3151               	addfsr 1,17
 17647  1648  3000               	movlw	0
 17648  1649  3FC0               	movwi [0]fsr1
 17649  164A  3FC1               	movwi [1]fsr1
 17650                           
 17651                           ;matrix_task.c: 339: data->holdCountAX = 0;
 17652  164B  085B               	movf	matrix_Main@data,w
 17653  164C  0086               	movwf	6
 17654  164D  085C               	movf	matrix_Main@data+1,w
 17655  164E  0087               	movwf	7
 17656  164F  3153               	addfsr 1,19
 17657  1650  3000               	movlw	0
 17658  1651  3FC0               	movwi [0]fsr1
 17659  1652  3FC1               	movwi [1]fsr1
 17660                           
 17661                           ;matrix_task.c: 340: data->holdCountBX = 0;
 17662  1653  085B               	movf	matrix_Main@data,w
 17663  1654  0086               	movwf	6
 17664  1655  085C               	movf	matrix_Main@data+1,w
 17665  1656  0087               	movwf	7
 17666  1657  3155               	addfsr 1,21
 17667  1658  3000               	movlw	0
 17668  1659  3FC0               	movwi [0]fsr1
 17669  165A  3FC1               	movwi [1]fsr1
 17670                           
 17671                           ;matrix_task.c: 341: data->holdCountBY += 1;
 17672  165B  085B               	movf	matrix_Main@data,w
 17673  165C  0086               	movwf	6
 17674  165D  085C               	movf	matrix_Main@data+1,w
 17675  165E  0087               	movwf	7
 17676  165F  3157               	addfsr 1,23
 17677  1660  3001               	movlw	1
 17678  1661  0781               	addwf	1,f
 17679  1662  3141               	addfsr 1,1
 17680  1663  1803               	skipnc
 17681  1664  0A81               	incf	1,f
 17682                           
 17683                           ;matrix_task.c: 342: data->holdCountBA = 0;
 17684  1665  085B               	movf	matrix_Main@data,w
 17685  1666  0086               	movwf	6
 17686  1667  085C               	movf	matrix_Main@data+1,w
 17687  1668  0087               	movwf	7
 17688  1669  3159               	addfsr 1,25
 17689  166A  3000               	movlw	0
 17690  166B  3FC0               	movwi [0]fsr1
 17691  166C  3FC1               	movwi [1]fsr1
 17692                           
 17693                           ;matrix_task.c: 343: data->noholdCount = 0;
 17694  166D  085B               	movf	matrix_Main@data,w
 17695  166E  0086               	movwf	6
 17696  166F  085C               	movf	matrix_Main@data+1,w
 17697  1670  0087               	movwf	7
 17698  1671  315B               	addfsr 1,27
 17699  1672  3000               	movlw	0
 17700  1673  3FC0               	movwi [0]fsr1
 17701  1674  3FC1               	movwi [1]fsr1
 17702                           
 17703                           ;matrix_task.c: 344: data->displayTickdown = 300;
 17704  1675  085B               	movf	matrix_Main@data,w
 17705  1676  0086               	movwf	6
 17706  1677  085C               	movf	matrix_Main@data+1,w
 17707  1678  0087               	movwf	7
 17708  1679  3145               	addfsr 1,5
 17709  167A  302C               	movlw	44
 17710  167B  3FC0               	movwi [0]fsr1
 17711  167C  3001               	movlw	1
 17712  167D  3FC1               	movwi [1]fsr1
 17713                           
 17714                           ;matrix_task.c: 346: break;
 17715  167E  2FB6               	goto	l10114
 17716  167F                     l10050:	
 17717                           ;matrix_task.c: 347: case 2 | 1:
 17718                           
 17719                           
 17720                           ;matrix_task.c: 349: if (data->holdCountBA == holdvalue){
 17721  167F  085B               	movf	matrix_Main@data,w
 17722  1680  0086               	movwf	6
 17723  1681  085C               	movf	matrix_Main@data+1,w
 17724  1682  0087               	movwf	7
 17725  1683  3159               	addfsr 1,25
 17726  1684  3F40               	moviw [0]fsr1
 17727  1685  00D4               	movwf	??_matrix_Main
 17728  1686  3F41               	moviw [1]fsr1
 17729  1687  00D5               	movwf	??_matrix_Main+1
 17730  1688  085A               	movf	matrix_Main@holdvalue,w
 17731  1689  00D6               	movwf	??_matrix_Main+2
 17732  168A  01D7               	clrf	??_matrix_Main+3
 17733  168B  0855               	movf	??_matrix_Main+1,w
 17734  168C  0657               	xorwf	??_matrix_Main+3,w
 17735  168D  1D03               	skipz
 17736  168E  2E91               	goto	u6255
 17737  168F  0854               	movf	??_matrix_Main,w
 17738  1690  0656               	xorwf	??_matrix_Main+2,w
 17739  1691                     u6255:	
 17740  1691  1D03               	skipz
 17741  1692  2EAE               	goto	l10056
 17742                           
 17743                           ;matrix_task.c: 350: matrix_found = matrix_secret_check(data, 2 | 1);
 17744  1693  085C               	movf	matrix_Main@data+1,w
 17745  1694  00F8               	movwf	matrix_secret_check@data+1
 17746  1695  085B               	movf	matrix_Main@data,w
 17747  1696  00F7               	movwf	matrix_secret_check@data
 17748  1697  3003               	movlw	3
 17749  1698  00D4               	movwf	??_matrix_Main
 17750  1699  0854               	movf	??_matrix_Main,w
 17751  169A  00F9               	movwf	matrix_secret_check@buttonPressed
 17752  169B  31A4  2488  3190   	fcall	_matrix_secret_check
 17753  169E  0020               	movlb	0	; select bank0
 17754  169F  00D5               	movwf	??_matrix_Main+1
 17755  16A0  0855               	movf	??_matrix_Main+1,w
 17756  16A1  00D8               	movwf	matrix_Main@matrix_found
 17757                           
 17758                           ;matrix_task.c: 351: data->display_state = MATRIX_BA;
 17759  16A2  085B               	movf	matrix_Main@data,w
 17760  16A3  3E02               	addlw	2
 17761  16A4  00D4               	movwf	??_matrix_Main
 17762  16A5  3000               	movlw	0
 17763  16A6  3D5C               	addwfc	matrix_Main@data+1,w
 17764  16A7  00D5               	movwf	??_matrix_Main+1
 17765  16A8  0854               	movf	??_matrix_Main,w
 17766  16A9  0086               	movwf	6
 17767  16AA  0855               	movf	??_matrix_Main+1,w
 17768  16AB  0087               	movwf	7
 17769  16AC  3006               	movlw	6
 17770  16AD  0081               	movwf	1
 17771  16AE                     l10056:	
 17772                           
 17773                           ;matrix_task.c: 352: }
 17774                           ;matrix_task.c: 353: data->holdCountA = 0;
 17775  16AE  085B               	movf	matrix_Main@data,w
 17776  16AF  0086               	movwf	6
 17777  16B0  085C               	movf	matrix_Main@data+1,w
 17778  16B1  0087               	movwf	7
 17779  16B2  3147               	addfsr 1,7
 17780  16B3  3000               	movlw	0
 17781  16B4  3FC0               	movwi [0]fsr1
 17782  16B5  3FC1               	movwi [1]fsr1
 17783                           
 17784                           ;matrix_task.c: 354: data->holdCountB = 0;
 17785  16B6  085B               	movf	matrix_Main@data,w
 17786  16B7  0086               	movwf	6
 17787  16B8  085C               	movf	matrix_Main@data+1,w
 17788  16B9  0087               	movwf	7
 17789  16BA  3149               	addfsr 1,9
 17790  16BB  3000               	movlw	0
 17791  16BC  3FC0               	movwi [0]fsr1
 17792  16BD  3FC1               	movwi [1]fsr1
 17793                           
 17794                           ;matrix_task.c: 355: data->holdCountX = 0;
 17795  16BE  085B               	movf	matrix_Main@data,w
 17796  16BF  0086               	movwf	6
 17797  16C0  085C               	movf	matrix_Main@data+1,w
 17798  16C1  0087               	movwf	7
 17799  16C2  314B               	addfsr 1,11
 17800  16C3  3000               	movlw	0
 17801  16C4  3FC0               	movwi [0]fsr1
 17802  16C5  3FC1               	movwi [1]fsr1
 17803                           
 17804                           ;matrix_task.c: 356: data->holdCountY = 0;
 17805  16C6  085B               	movf	matrix_Main@data,w
 17806  16C7  0086               	movwf	6
 17807  16C8  085C               	movf	matrix_Main@data+1,w
 17808  16C9  0087               	movwf	7
 17809  16CA  314D               	addfsr 1,13
 17810  16CB  3000               	movlw	0
 17811  16CC  3FC0               	movwi [0]fsr1
 17812  16CD  3FC1               	movwi [1]fsr1
 17813                           
 17814                           ;matrix_task.c: 357: data->holdCountXY = 0;
 17815  16CE  085B               	movf	matrix_Main@data,w
 17816  16CF  0086               	movwf	6
 17817  16D0  085C               	movf	matrix_Main@data+1,w
 17818  16D1  0087               	movwf	7
 17819  16D2  314F               	addfsr 1,15
 17820  16D3  3000               	movlw	0
 17821  16D4  3FC0               	movwi [0]fsr1
 17822  16D5  3FC1               	movwi [1]fsr1
 17823                           
 17824                           ;matrix_task.c: 358: data->holdCountAY = 0;
 17825  16D6  085B               	movf	matrix_Main@data,w
 17826  16D7  0086               	movwf	6
 17827  16D8  085C               	movf	matrix_Main@data+1,w
 17828  16D9  0087               	movwf	7
 17829  16DA  3151               	addfsr 1,17
 17830  16DB  3000               	movlw	0
 17831  16DC  3FC0               	movwi [0]fsr1
 17832  16DD  3FC1               	movwi [1]fsr1
 17833                           
 17834                           ;matrix_task.c: 359: data->holdCountAX = 0;
 17835  16DE  085B               	movf	matrix_Main@data,w
 17836  16DF  0086               	movwf	6
 17837  16E0  085C               	movf	matrix_Main@data+1,w
 17838  16E1  0087               	movwf	7
 17839  16E2  3153               	addfsr 1,19
 17840  16E3  3000               	movlw	0
 17841  16E4  3FC0               	movwi [0]fsr1
 17842  16E5  3FC1               	movwi [1]fsr1
 17843                           
 17844                           ;matrix_task.c: 360: data->holdCountBX = 0;
 17845  16E6  085B               	movf	matrix_Main@data,w
 17846  16E7  0086               	movwf	6
 17847  16E8  085C               	movf	matrix_Main@data+1,w
 17848  16E9  0087               	movwf	7
 17849  16EA  3155               	addfsr 1,21
 17850  16EB  3000               	movlw	0
 17851  16EC  3FC0               	movwi [0]fsr1
 17852  16ED  3FC1               	movwi [1]fsr1
 17853                           
 17854                           ;matrix_task.c: 361: data->holdCountBY = 0;
 17855  16EE  085B               	movf	matrix_Main@data,w
 17856  16EF  0086               	movwf	6
 17857  16F0  085C               	movf	matrix_Main@data+1,w
 17858  16F1  0087               	movwf	7
 17859  16F2  3157               	addfsr 1,23
 17860  16F3  3000               	movlw	0
 17861  16F4  3FC0               	movwi [0]fsr1
 17862  16F5  3FC1               	movwi [1]fsr1
 17863                           
 17864                           ;matrix_task.c: 362: data->holdCountBA += 1;
 17865  16F6  085B               	movf	matrix_Main@data,w
 17866  16F7  0086               	movwf	6
 17867  16F8  085C               	movf	matrix_Main@data+1,w
 17868  16F9  0087               	movwf	7
 17869  16FA  3159               	addfsr 1,25
 17870  16FB  3001               	movlw	1
 17871  16FC  0781               	addwf	1,f
 17872  16FD  3141               	addfsr 1,1
 17873  16FE  1803               	skipnc
 17874  16FF  0A81               	incf	1,f
 17875                           
 17876                           ;matrix_task.c: 363: data->noholdCount = 0;
 17877  1700  085B               	movf	matrix_Main@data,w
 17878  1701  0086               	movwf	6
 17879  1702  085C               	movf	matrix_Main@data+1,w
 17880  1703  0087               	movwf	7
 17881  1704  315B               	addfsr 1,27
 17882  1705  3000               	movlw	0
 17883  1706  3FC0               	movwi [0]fsr1
 17884  1707  3FC1               	movwi [1]fsr1
 17885                           
 17886                           ;matrix_task.c: 364: data->displayTickdown = 300;
 17887  1708  085B               	movf	matrix_Main@data,w
 17888  1709  0086               	movwf	6
 17889  170A  085C               	movf	matrix_Main@data+1,w
 17890  170B  0087               	movwf	7
 17891  170C  3145               	addfsr 1,5
 17892  170D  302C               	movlw	44
 17893  170E  3FC0               	movwi [0]fsr1
 17894  170F  3001               	movlw	1
 17895  1710  3FC1               	movwi [1]fsr1
 17896                           
 17897                           ;matrix_task.c: 365: break;
 17898  1711  2FB6               	goto	l10114
 17899  1712                     l10080:	
 17900                           ;matrix_task.c: 366: default:
 17901                           
 17902                           
 17903                           ;matrix_task.c: 367: data->noholdCount += 1;
 17904  1712  085B               	movf	matrix_Main@data,w
 17905  1713  0086               	movwf	6
 17906  1714  085C               	movf	matrix_Main@data+1,w
 17907  1715  0087               	movwf	7
 17908  1716  315B               	addfsr 1,27
 17909  1717  3001               	movlw	1
 17910  1718  0781               	addwf	1,f
 17911  1719  3141               	addfsr 1,1
 17912  171A  1803               	skipnc
 17913  171B  0A81               	incf	1,f
 17914                           
 17915                           ;matrix_task.c: 368: data->holdCountA = 0;
 17916  171C  085B               	movf	matrix_Main@data,w
 17917  171D  0086               	movwf	6
 17918  171E  085C               	movf	matrix_Main@data+1,w
 17919  171F  0087               	movwf	7
 17920  1720  3147               	addfsr 1,7
 17921  1721  3000               	movlw	0
 17922  1722  3FC0               	movwi [0]fsr1
 17923  1723  3FC1               	movwi [1]fsr1
 17924                           
 17925                           ;matrix_task.c: 369: data->holdCountB = 0;
 17926  1724  085B               	movf	matrix_Main@data,w
 17927  1725  0086               	movwf	6
 17928  1726  085C               	movf	matrix_Main@data+1,w
 17929  1727  0087               	movwf	7
 17930  1728  3149               	addfsr 1,9
 17931  1729  3000               	movlw	0
 17932  172A  3FC0               	movwi [0]fsr1
 17933  172B  3FC1               	movwi [1]fsr1
 17934                           
 17935                           ;matrix_task.c: 370: data->holdCountX = 0;
 17936  172C  085B               	movf	matrix_Main@data,w
 17937  172D  0086               	movwf	6
 17938  172E  085C               	movf	matrix_Main@data+1,w
 17939  172F  0087               	movwf	7
 17940  1730  314B               	addfsr 1,11
 17941  1731  3000               	movlw	0
 17942  1732  3FC0               	movwi [0]fsr1
 17943  1733  3FC1               	movwi [1]fsr1
 17944                           
 17945                           ;matrix_task.c: 371: data->holdCountY = 0;
 17946  1734  085B               	movf	matrix_Main@data,w
 17947  1735  0086               	movwf	6
 17948  1736  085C               	movf	matrix_Main@data+1,w
 17949  1737  0087               	movwf	7
 17950  1738  314D               	addfsr 1,13
 17951  1739  3000               	movlw	0
 17952  173A  3FC0               	movwi [0]fsr1
 17953  173B  3FC1               	movwi [1]fsr1
 17954                           
 17955                           ;matrix_task.c: 372: data->holdCountXY = 0;
 17956  173C  085B               	movf	matrix_Main@data,w
 17957  173D  0086               	movwf	6
 17958  173E  085C               	movf	matrix_Main@data+1,w
 17959  173F  0087               	movwf	7
 17960  1740  314F               	addfsr 1,15
 17961  1741  3000               	movlw	0
 17962  1742  3FC0               	movwi [0]fsr1
 17963  1743  3FC1               	movwi [1]fsr1
 17964                           
 17965                           ;matrix_task.c: 373: data->holdCountAY = 0;
 17966  1744  085B               	movf	matrix_Main@data,w
 17967  1745  0086               	movwf	6
 17968  1746  085C               	movf	matrix_Main@data+1,w
 17969  1747  0087               	movwf	7
 17970  1748  3151               	addfsr 1,17
 17971  1749  3000               	movlw	0
 17972  174A  3FC0               	movwi [0]fsr1
 17973  174B  3FC1               	movwi [1]fsr1
 17974                           
 17975                           ;matrix_task.c: 374: data->holdCountAX = 0;
 17976  174C  085B               	movf	matrix_Main@data,w
 17977  174D  0086               	movwf	6
 17978  174E  085C               	movf	matrix_Main@data+1,w
 17979  174F  0087               	movwf	7
 17980  1750  3153               	addfsr 1,19
 17981  1751  3000               	movlw	0
 17982  1752  3FC0               	movwi [0]fsr1
 17983  1753  3FC1               	movwi [1]fsr1
 17984                           
 17985                           ;matrix_task.c: 375: data->holdCountBX = 0;
 17986  1754  085B               	movf	matrix_Main@data,w
 17987  1755  0086               	movwf	6
 17988  1756  085C               	movf	matrix_Main@data+1,w
 17989  1757  0087               	movwf	7
 17990  1758  3155               	addfsr 1,21
 17991  1759  3000               	movlw	0
 17992  175A  3FC0               	movwi [0]fsr1
 17993  175B  3FC1               	movwi [1]fsr1
 17994                           
 17995                           ;matrix_task.c: 376: data->holdCountBY = 0;
 17996  175C  085B               	movf	matrix_Main@data,w
 17997  175D  0086               	movwf	6
 17998  175E  085C               	movf	matrix_Main@data+1,w
 17999  175F  0087               	movwf	7
 18000  1760  3157               	addfsr 1,23
 18001  1761  3000               	movlw	0
 18002  1762  3FC0               	movwi [0]fsr1
 18003  1763  3FC1               	movwi [1]fsr1
 18004                           
 18005                           ;matrix_task.c: 377: data->holdCountBA = 0;
 18006  1764  085B               	movf	matrix_Main@data,w
 18007  1765  0086               	movwf	6
 18008  1766  085C               	movf	matrix_Main@data+1,w
 18009  1767  0087               	movwf	7
 18010  1768  3159               	addfsr 1,25
 18011  1769  3000               	movlw	0
 18012  176A  3FC0               	movwi [0]fsr1
 18013  176B  3FC1               	movwi [1]fsr1
 18014                           
 18015                           ;matrix_task.c: 378: if (matrix_found){
 18016  176C  0858               	movf	matrix_Main@matrix_found,w
 18017  176D  1903               	btfsc	3,2
 18018  176E  2F82               	goto	l10108
 18019                           
 18020                           ;matrix_task.c: 379: data->display_state = MATRIX_DONE;
 18021  176F  085B               	movf	matrix_Main@data,w
 18022  1770  3E02               	addlw	2
 18023  1771  00D4               	movwf	??_matrix_Main
 18024  1772  3000               	movlw	0
 18025  1773  3D5C               	addwfc	matrix_Main@data+1,w
 18026  1774  00D5               	movwf	??_matrix_Main+1
 18027  1775  0854               	movf	??_matrix_Main,w
 18028  1776  0086               	movwf	6
 18029  1777  0855               	movf	??_matrix_Main+1,w
 18030  1778  0087               	movwf	7
 18031  1779  300B               	movlw	11
 18032  177A  0081               	movwf	1
 18033                           
 18034                           ;matrix_task.c: 380: data->martix_state = MATRIX_SOLVED;
 18035  177B  085B               	movf	matrix_Main@data,w
 18036  177C  0086               	movwf	6
 18037  177D  085C               	movf	matrix_Main@data+1,w
 18038  177E  0087               	movwf	7
 18039  177F  3141               	addfsr 1,1
 18040  1780  0181               	clrf	1
 18041                           
 18042                           ;matrix_task.c: 381: break;
 18043  1781  2FB6               	goto	l10114
 18044  1782                     l10108:	
 18045                           
 18046                           ;matrix_task.c: 382: }
 18047                           ;matrix_task.c: 383: data->displayTickdown -= 1;
 18048  1782  085B               	movf	matrix_Main@data,w
 18049  1783  0086               	movwf	6
 18050  1784  085C               	movf	matrix_Main@data+1,w
 18051  1785  0087               	movwf	7
 18052  1786  3145               	addfsr 1,5
 18053  1787  3001               	movlw	1
 18054  1788  0281               	subwf	1,f
 18055  1789  3141               	addfsr 1,1
 18056  178A  3000               	movlw	0
 18057  178B  3B81               	subwfb	1,f
 18058  178C  317F               	addfsr 1,-1
 18059                           
 18060                           ;matrix_task.c: 384: matrix_display_option(data);
 18061  178D  085C               	movf	matrix_Main@data+1,w
 18062  178E  00CD               	movwf	matrix_display_option@data+1
 18063  178F  085B               	movf	matrix_Main@data,w
 18064  1790  00CC               	movwf	matrix_display_option@data
 18065  1791  31A1  2191  3190   	fcall	_matrix_display_option
 18066                           
 18067                           ;matrix_task.c: 385: }
 18068  1794  2FB6               	goto	l10114
 18069  1795                     l10112:	
 18070  1795  0020               	movlb	0	; select bank0
 18071  1796  0859               	movf	matrix_Main@buttonPressed,w
 18072                           
 18073                           ; Switch size 1, requested type "space"
 18074                           ; Number of cases is 10, Range of values is 1 to 12
 18075                           ; switch strategies available:
 18076                           ; Name         Instructions Cycles
 18077                           ; simple_byte           31    16 (average)
 18078                           ; direct_byte           33     9 (fixed)
 18079                           ; jumptable            263     9 (fixed)
 18080                           ;	Chosen strategy is simple_byte
 18081  1797  3A01               	xorlw	1	; case 1
 18082  1798  1903               	skipnz
 18083  1799  295A               	goto	l9780
 18084  179A  3A03               	xorlw	3	; case 2
 18085  179B  1903               	skipnz
 18086  179C  29E7               	goto	l9810
 18087  179D  3A01               	xorlw	1	; case 3
 18088  179E  1903               	skipnz
 18089  179F  2E7F               	goto	l10050
 18090  17A0  3A07               	xorlw	7	; case 4
 18091  17A1  1903               	skipnz
 18092  17A2  2A7A               	goto	l9840
 18093  17A3  3A01               	xorlw	1	; case 5
 18094  17A4  1903               	skipnz
 18095  17A5  2CC6               	goto	l9960
 18096  17A6  3A03               	xorlw	3	; case 6
 18097  17A7  1903               	skipnz
 18098  17A8  2D59               	goto	l9990
 18099  17A9  3A0E               	xorlw	14	; case 8
 18100  17AA  1903               	skipnz
 18101  17AB  2B0D               	goto	l9870
 18102  17AC  3A01               	xorlw	1	; case 9
 18103  17AD  1903               	skipnz
 18104  17AE  2C33               	goto	l9930
 18105  17AF  3A03               	xorlw	3	; case 10
 18106  17B0  1903               	skipnz
 18107  17B1  2DEC               	goto	l10020
 18108  17B2  3A06               	xorlw	6	; case 12
 18109  17B3  1903               	skipnz
 18110  17B4  2BA0               	goto	l9900
 18111  17B5  2F12               	goto	l10080
 18112  17B6                     l10114:	
 18113                           
 18114                           ;matrix_task.c: 386: if (matrix_found){
 18115  17B6  0020               	movlb	0	; select bank0
 18116  17B7  0858               	movf	matrix_Main@matrix_found,w
 18117  17B8  1903               	btfsc	3,2
 18118  17B9  2FCC               	goto	l10120
 18119                           
 18120                           ;matrix_task.c: 387: data->display_state = MATRIX_DONE;
 18121  17BA  085B               	movf	matrix_Main@data,w
 18122  17BB  3E02               	addlw	2
 18123  17BC  00D4               	movwf	??_matrix_Main
 18124  17BD  3000               	movlw	0
 18125  17BE  3D5C               	addwfc	matrix_Main@data+1,w
 18126  17BF  00D5               	movwf	??_matrix_Main+1
 18127  17C0  0854               	movf	??_matrix_Main,w
 18128  17C1  0086               	movwf	6
 18129  17C2  0855               	movf	??_matrix_Main+1,w
 18130  17C3  0087               	movwf	7
 18131  17C4  300B               	movlw	11
 18132  17C5  0081               	movwf	1
 18133                           
 18134                           ;matrix_task.c: 388: data->martix_state = MATRIX_SOLVED;
 18135  17C6  085B               	movf	matrix_Main@data,w
 18136  17C7  0086               	movwf	6
 18137  17C8  085C               	movf	matrix_Main@data+1,w
 18138  17C9  0087               	movwf	7
 18139  17CA  3141               	addfsr 1,1
 18140  17CB  0181               	clrf	1
 18141  17CC                     l10120:	
 18142                           
 18143                           ;matrix_task.c: 389: }
 18144                           ;matrix_task.c: 391: if(data->display_state == MATRIX_DONE){
 18145  17CC  085B               	movf	matrix_Main@data,w
 18146  17CD  0086               	movwf	6
 18147  17CE  085C               	movf	matrix_Main@data+1,w
 18148  17CF  0087               	movwf	7
 18149  17D0  3142               	addfsr 1,2
 18150  17D1  300B               	movlw	11
 18151  17D2  0601               	xorwf	1,w
 18152  17D3  1D03               	btfss	3,2
 18153  17D4  0008               	return
 18154                           
 18155                           ;matrix_task.c: 393: if (data->delayTickCount < 1){
 18156  17D5  085B               	movf	matrix_Main@data,w
 18157  17D6  0086               	movwf	6
 18158  17D7  085C               	movf	matrix_Main@data+1,w
 18159  17D8  0087               	movwf	7
 18160  17D9  3143               	addfsr 1,3
 18161  17DA  0016               	moviw fsr1++
 18162  17DB  0401               	iorwf	1,w
 18163  17DC  1D03               	btfss	3,2
 18164  17DD  2FF4               	goto	l10128
 18165                           
 18166                           ;matrix_task.c: 394: led_curtain(data->noholdCount);
 18167  17DE  085B               	movf	matrix_Main@data,w
 18168  17DF  0086               	movwf	6
 18169  17E0  085C               	movf	matrix_Main@data+1,w
 18170  17E1  0087               	movwf	7
 18171  17E2  315B               	addfsr 1,27
 18172  17E3  3F40               	moviw [0]fsr1
 18173  17E4  00B0               	movwf	led_curtain@counter
 18174  17E5  3F41               	moviw [1]fsr1
 18175  17E6  00B1               	movwf	led_curtain@counter+1
 18176  17E7  31AA  22C9         	fcall	_led_curtain
 18177                           
 18178                           ;matrix_task.c: 395: data->delayTickCount = 20;
 18179  17E9  0020               	movlb	0	; select bank0
 18180  17EA  085B               	movf	matrix_Main@data,w
 18181  17EB  0086               	movwf	6
 18182  17EC  085C               	movf	matrix_Main@data+1,w
 18183  17ED  0087               	movwf	7
 18184  17EE  3143               	addfsr 1,3
 18185  17EF  3014               	movlw	20
 18186  17F0  3FC0               	movwi [0]fsr1
 18187  17F1  3000               	movlw	0
 18188  17F2  3FC1               	movwi [1]fsr1
 18189                           
 18190                           ;matrix_task.c: 396: }
 18191  17F3  0008               	return
 18192  17F4                     l10128:	
 18193                           
 18194                           ;matrix_task.c: 397: else {
 18195                           ;matrix_task.c: 398: data->delayTickCount -= 1;
 18196  17F4  085B               	movf	matrix_Main@data,w
 18197  17F5  0086               	movwf	6
 18198  17F6  085C               	movf	matrix_Main@data+1,w
 18199  17F7  0087               	movwf	7
 18200  17F8  3143               	addfsr 1,3
 18201  17F9  3001               	movlw	1
 18202  17FA  0281               	subwf	1,f
 18203  17FB  3141               	addfsr 1,1
 18204  17FC  3000               	movlw	0
 18205  17FD  3B81               	subwfb	1,f
 18206  17FE  317F               	addfsr 1,-1
 18207  17FF  0008               	return
 18208  1800                     __end_of_matrix_Main:	
 18209                           
 18210                           	psect	text15
 18211  2643                     __ptext15:	
 18212 ;; *************** function _secret_Main *****************
 18213 ;; Defined at:
 18214 ;;		line 99 in file "secret_task.c"
 18215 ;; Parameters:    Size  Location     Type
 18216 ;;  taskData        2   50[BANK0 ] PTR void 
 18217 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18218 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18219 ;; Auto vars:     Size  Location     Type
 18220 ;;  data            2   56[BANK0 ] PTR struct t_secret_task
 18221 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18222 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18223 ;;  buttonPresse    1   55[BANK0 ] unsigned char 
 18224 ;;  secret_found    1   54[BANK0 ] unsigned char 
 18225 ;; Return value:  Size  Location     Type
 18226 ;;                  1    wreg      void 
 18227 ;; Registers used:
 18228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18229 ;; Tracked objects:
 18230 ;;		On entry : 0/0
 18231 ;;		On exit  : 0/0
 18232 ;;		Unchanged: 0/0
 18233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18235 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18236 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18237 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18238 ;;Total ram usage:        8 bytes
 18239 ;; Hardware stack levels used:    1
 18240 ;; Hardware stack levels required when called:    6
 18241 ;; This function calls:
 18242 ;;		_nullifyBadge_buttonsGet
 18243 ;;		_secret_check
 18244 ;;		_secret_clear
 18245 ;; This function is called by:
 18246 ;;		_main
 18247 ;;		_scheduler_TaskRun
 18248 ;; This function uses a non-reentrant model
 18249 ;;
 18250                           
 18251                           
 18252                           ;psect for function _secret_Main
 18253  2643                     _secret_Main:	
 18254                           
 18255                           ;secret_task.c: 100: struct t_secret_taskData *data = (struct t_secret_taskData *) taskD
      +                          ata;
 18256                           
 18257                           ;incstack = 0
 18258                           ; Regs used in _secret_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18259  2643  0020               	movlb	0	; select bank0
 18260  2644  0853               	movf	secret_Main@taskData+1,w
 18261  2645  00D9               	movwf	secret_Main@data+1
 18262  2646  0852               	movf	secret_Main@taskData,w
 18263  2647  00D8               	movwf	secret_Main@data
 18264                           
 18265                           ;secret_task.c: 101: u8 buttonPressed, secret_found = 0;
 18266  2648  01D6               	clrf	secret_Main@secret_found
 18267                           
 18268                           ;secret_task.c: 103: buttonPressed = nullifyBadge_buttonsGet();
 18269  2649  31A8  20A5  31A6   	fcall	_nullifyBadge_buttonsGet
 18270  264C  0020               	movlb	0	; select bank0
 18271  264D  00D4               	movwf	??_secret_Main
 18272  264E  0854               	movf	??_secret_Main,w
 18273  264F  00D7               	movwf	secret_Main@buttonPressed
 18274                           
 18275                           ;secret_task.c: 104: switch (buttonPressed) {
 18276  2650  2FE3               	goto	l9642
 18277  2651                     l9556:	
 18278                           ;secret_task.c: 105: case 0:
 18279                           
 18280                           
 18281                           ;secret_task.c: 107: if (data->delayTickCount == 0){
 18282  2651  0858               	movf	secret_Main@data,w
 18283  2652  0086               	movwf	6
 18284  2653  0859               	movf	secret_Main@data+1,w
 18285  2654  0087               	movwf	7
 18286  2655  3142               	addfsr 1,2
 18287  2656  0016               	moviw fsr1++
 18288  2657  0401               	iorwf	1,w
 18289  2658  1D03               	btfss	3,2
 18290  2659  2E6B               	goto	l9562
 18291                           
 18292                           ;secret_task.c: 108: data->delayTickCount = 300;
 18293  265A  0858               	movf	secret_Main@data,w
 18294  265B  0086               	movwf	6
 18295  265C  0859               	movf	secret_Main@data+1,w
 18296  265D  0087               	movwf	7
 18297  265E  3142               	addfsr 1,2
 18298  265F  302C               	movlw	44
 18299  2660  3FC0               	movwi [0]fsr1
 18300  2661  3001               	movlw	1
 18301  2662  3FC1               	movwi [1]fsr1
 18302                           
 18303                           ;secret_task.c: 109: secret_check(data, 0);
 18304  2663  0859               	movf	secret_Main@data+1,w
 18305  2664  00F8               	movwf	secret_check@data+1
 18306  2665  0858               	movf	secret_Main@data,w
 18307  2666  00F7               	movwf	secret_check@data
 18308  2667  01F9               	clrf	secret_check@buttonPressed
 18309  2668  3190  2028  31A6   	fcall	_secret_check
 18310  266B                     l9562:	
 18311                           
 18312                           ;secret_task.c: 110: }
 18313                           ;secret_task.c: 111: data->holdCountA = 0;
 18314  266B  0020               	movlb	0	; select bank0
 18315  266C  0858               	movf	secret_Main@data,w
 18316  266D  0086               	movwf	6
 18317  266E  0859               	movf	secret_Main@data+1,w
 18318  266F  0087               	movwf	7
 18319  2670  3144               	addfsr 1,4
 18320  2671  3000               	movlw	0
 18321  2672  3FC0               	movwi [0]fsr1
 18322  2673  3FC1               	movwi [1]fsr1
 18323                           
 18324                           ;secret_task.c: 112: data->holdCountB = 0;
 18325  2674  0858               	movf	secret_Main@data,w
 18326  2675  0086               	movwf	6
 18327  2676  0859               	movf	secret_Main@data+1,w
 18328  2677  0087               	movwf	7
 18329  2678  3146               	addfsr 1,6
 18330  2679  3000               	movlw	0
 18331  267A  3FC0               	movwi [0]fsr1
 18332  267B  3FC1               	movwi [1]fsr1
 18333                           
 18334                           ;secret_task.c: 113: data->holdCountX = 0;
 18335  267C  0858               	movf	secret_Main@data,w
 18336  267D  0086               	movwf	6
 18337  267E  0859               	movf	secret_Main@data+1,w
 18338  267F  0087               	movwf	7
 18339  2680  3148               	addfsr 1,8
 18340  2681  3000               	movlw	0
 18341  2682  3FC0               	movwi [0]fsr1
 18342  2683  3FC1               	movwi [1]fsr1
 18343                           
 18344                           ;secret_task.c: 114: data->holdCountY = 0;
 18345  2684  0858               	movf	secret_Main@data,w
 18346  2685  0086               	movwf	6
 18347  2686  0859               	movf	secret_Main@data+1,w
 18348  2687  0087               	movwf	7
 18349  2688  314A               	addfsr 1,10
 18350  2689  3000               	movlw	0
 18351  268A  3FC0               	movwi [0]fsr1
 18352  268B  3FC1               	movwi [1]fsr1
 18353                           
 18354                           ;secret_task.c: 115: data->noholdCount += 1;
 18355  268C  0858               	movf	secret_Main@data,w
 18356  268D  0086               	movwf	6
 18357  268E  0859               	movf	secret_Main@data+1,w
 18358  268F  0087               	movwf	7
 18359  2690  314C               	addfsr 1,12
 18360  2691  3001               	movlw	1
 18361  2692  0781               	addwf	1,f
 18362  2693  3141               	addfsr 1,1
 18363  2694  1803               	skipnc
 18364  2695  0A81               	incf	1,f
 18365                           
 18366                           ;secret_task.c: 116: data->delayTickCount -= 1;
 18367  2696  0858               	movf	secret_Main@data,w
 18368  2697  0086               	movwf	6
 18369  2698  0859               	movf	secret_Main@data+1,w
 18370  2699  0087               	movwf	7
 18371  269A  3142               	addfsr 1,2
 18372  269B  3001               	movlw	1
 18373  269C  0281               	subwf	1,f
 18374  269D  3141               	addfsr 1,1
 18375  269E  3000               	movlw	0
 18376  269F  3B81               	subwfb	1,f
 18377  26A0  317F               	addfsr 1,-1
 18378                           
 18379                           ;secret_task.c: 117: break;
 18380  26A1  2FF5               	goto	l9644
 18381  26A2                     l9574:	
 18382                           ;secret_task.c: 118: case 1:
 18383                           
 18384                           
 18385                           ;secret_task.c: 120: if (data->holdCountA == 0){
 18386  26A2  0858               	movf	secret_Main@data,w
 18387  26A3  0086               	movwf	6
 18388  26A4  0859               	movf	secret_Main@data+1,w
 18389  26A5  0087               	movwf	7
 18390  26A6  3144               	addfsr 1,4
 18391  26A7  0016               	moviw fsr1++
 18392  26A8  0401               	iorwf	1,w
 18393  26A9  1D03               	btfss	3,2
 18394  26AA  2EBA               	goto	l9578
 18395                           
 18396                           ;secret_task.c: 121: secret_found = secret_check(data, buttonPressed);
 18397  26AB  0859               	movf	secret_Main@data+1,w
 18398  26AC  00F8               	movwf	secret_check@data+1
 18399  26AD  0858               	movf	secret_Main@data,w
 18400  26AE  00F7               	movwf	secret_check@data
 18401  26AF  0857               	movf	secret_Main@buttonPressed,w
 18402  26B0  00D4               	movwf	??_secret_Main
 18403  26B1  0854               	movf	??_secret_Main,w
 18404  26B2  00F9               	movwf	secret_check@buttonPressed
 18405  26B3  3190  2028  31A6   	fcall	_secret_check
 18406  26B6  0020               	movlb	0	; select bank0
 18407  26B7  00D5               	movwf	??_secret_Main+1
 18408  26B8  0855               	movf	??_secret_Main+1,w
 18409  26B9  00D6               	movwf	secret_Main@secret_found
 18410  26BA                     l9578:	
 18411                           
 18412                           ;secret_task.c: 122: }
 18413                           ;secret_task.c: 123: data->holdCountA += 1;
 18414  26BA  0858               	movf	secret_Main@data,w
 18415  26BB  0086               	movwf	6
 18416  26BC  0859               	movf	secret_Main@data+1,w
 18417  26BD  0087               	movwf	7
 18418  26BE  3144               	addfsr 1,4
 18419  26BF  3001               	movlw	1
 18420  26C0  0781               	addwf	1,f
 18421  26C1  3141               	addfsr 1,1
 18422  26C2  1803               	skipnc
 18423  26C3  0A81               	incf	1,f
 18424                           
 18425                           ;secret_task.c: 124: data->holdCountB = 0;
 18426  26C4  0858               	movf	secret_Main@data,w
 18427  26C5  0086               	movwf	6
 18428  26C6  0859               	movf	secret_Main@data+1,w
 18429  26C7  0087               	movwf	7
 18430  26C8  3146               	addfsr 1,6
 18431  26C9  3000               	movlw	0
 18432  26CA  3FC0               	movwi [0]fsr1
 18433  26CB  3FC1               	movwi [1]fsr1
 18434                           
 18435                           ;secret_task.c: 125: data->holdCountX = 0;
 18436  26CC  0858               	movf	secret_Main@data,w
 18437  26CD  0086               	movwf	6
 18438  26CE  0859               	movf	secret_Main@data+1,w
 18439  26CF  0087               	movwf	7
 18440  26D0  3148               	addfsr 1,8
 18441  26D1  3000               	movlw	0
 18442  26D2  3FC0               	movwi [0]fsr1
 18443  26D3  3FC1               	movwi [1]fsr1
 18444                           
 18445                           ;secret_task.c: 126: data->holdCountY = 0;
 18446  26D4  0858               	movf	secret_Main@data,w
 18447  26D5  0086               	movwf	6
 18448  26D6  0859               	movf	secret_Main@data+1,w
 18449  26D7  0087               	movwf	7
 18450  26D8  314A               	addfsr 1,10
 18451  26D9  3000               	movlw	0
 18452  26DA  3FC0               	movwi [0]fsr1
 18453  26DB  3FC1               	movwi [1]fsr1
 18454                           
 18455                           ;secret_task.c: 127: data->noholdCount = 0;
 18456  26DC  0858               	movf	secret_Main@data,w
 18457  26DD  0086               	movwf	6
 18458  26DE  0859               	movf	secret_Main@data+1,w
 18459  26DF  0087               	movwf	7
 18460  26E0  314C               	addfsr 1,12
 18461  26E1  3000               	movlw	0
 18462  26E2  3FC0               	movwi [0]fsr1
 18463  26E3  3FC1               	movwi [1]fsr1
 18464                           
 18465                           ;secret_task.c: 128: data->delayTickCount = 300;
 18466  26E4  0858               	movf	secret_Main@data,w
 18467  26E5  0086               	movwf	6
 18468  26E6  0859               	movf	secret_Main@data+1,w
 18469  26E7  0087               	movwf	7
 18470  26E8  3142               	addfsr 1,2
 18471  26E9  302C               	movlw	44
 18472  26EA  3FC0               	movwi [0]fsr1
 18473  26EB  3001               	movlw	1
 18474  26EC  3FC1               	movwi [1]fsr1
 18475                           
 18476                           ;secret_task.c: 129: break;
 18477  26ED  2FF5               	goto	l9644
 18478  26EE                     l9590:	
 18479                           ;secret_task.c: 130: case 2:
 18480                           
 18481                           
 18482                           ;secret_task.c: 132: if (data->holdCountB == 0){
 18483  26EE  0858               	movf	secret_Main@data,w
 18484  26EF  0086               	movwf	6
 18485  26F0  0859               	movf	secret_Main@data+1,w
 18486  26F1  0087               	movwf	7
 18487  26F2  3146               	addfsr 1,6
 18488  26F3  0016               	moviw fsr1++
 18489  26F4  0401               	iorwf	1,w
 18490  26F5  1D03               	btfss	3,2
 18491  26F6  2F06               	goto	l9594
 18492                           
 18493                           ;secret_task.c: 133: secret_found = secret_check(data, buttonPressed);
 18494  26F7  0859               	movf	secret_Main@data+1,w
 18495  26F8  00F8               	movwf	secret_check@data+1
 18496  26F9  0858               	movf	secret_Main@data,w
 18497  26FA  00F7               	movwf	secret_check@data
 18498  26FB  0857               	movf	secret_Main@buttonPressed,w
 18499  26FC  00D4               	movwf	??_secret_Main
 18500  26FD  0854               	movf	??_secret_Main,w
 18501  26FE  00F9               	movwf	secret_check@buttonPressed
 18502  26FF  3190  2028  31A6   	fcall	_secret_check
 18503  2702  0020               	movlb	0	; select bank0
 18504  2703  00D5               	movwf	??_secret_Main+1
 18505  2704  0855               	movf	??_secret_Main+1,w
 18506  2705  00D6               	movwf	secret_Main@secret_found
 18507  2706                     l9594:	
 18508                           
 18509                           ;secret_task.c: 134: }
 18510                           ;secret_task.c: 135: data->holdCountA = 0;
 18511  2706  0858               	movf	secret_Main@data,w
 18512  2707  0086               	movwf	6
 18513  2708  0859               	movf	secret_Main@data+1,w
 18514  2709  0087               	movwf	7
 18515  270A  3144               	addfsr 1,4
 18516  270B  3000               	movlw	0
 18517  270C  3FC0               	movwi [0]fsr1
 18518  270D  3FC1               	movwi [1]fsr1
 18519                           
 18520                           ;secret_task.c: 136: data->holdCountB += 1;
 18521  270E  0858               	movf	secret_Main@data,w
 18522  270F  0086               	movwf	6
 18523  2710  0859               	movf	secret_Main@data+1,w
 18524  2711  0087               	movwf	7
 18525  2712  3146               	addfsr 1,6
 18526  2713  3001               	movlw	1
 18527  2714  0781               	addwf	1,f
 18528  2715  3141               	addfsr 1,1
 18529  2716  1803               	skipnc
 18530  2717  0A81               	incf	1,f
 18531                           
 18532                           ;secret_task.c: 137: data->holdCountX = 0;
 18533  2718  0858               	movf	secret_Main@data,w
 18534  2719  0086               	movwf	6
 18535  271A  0859               	movf	secret_Main@data+1,w
 18536  271B  0087               	movwf	7
 18537  271C  3148               	addfsr 1,8
 18538  271D  3000               	movlw	0
 18539  271E  3FC0               	movwi [0]fsr1
 18540  271F  3FC1               	movwi [1]fsr1
 18541                           
 18542                           ;secret_task.c: 138: data->holdCountY = 0;
 18543  2720  0858               	movf	secret_Main@data,w
 18544  2721  0086               	movwf	6
 18545  2722  0859               	movf	secret_Main@data+1,w
 18546  2723  0087               	movwf	7
 18547  2724  314A               	addfsr 1,10
 18548  2725  3000               	movlw	0
 18549  2726  3FC0               	movwi [0]fsr1
 18550  2727  3FC1               	movwi [1]fsr1
 18551                           
 18552                           ;secret_task.c: 139: data->noholdCount = 0;
 18553  2728  0858               	movf	secret_Main@data,w
 18554  2729  0086               	movwf	6
 18555  272A  0859               	movf	secret_Main@data+1,w
 18556  272B  0087               	movwf	7
 18557  272C  314C               	addfsr 1,12
 18558  272D  3000               	movlw	0
 18559  272E  3FC0               	movwi [0]fsr1
 18560  272F  3FC1               	movwi [1]fsr1
 18561                           
 18562                           ;secret_task.c: 140: data->delayTickCount = 300;
 18563  2730  0858               	movf	secret_Main@data,w
 18564  2731  0086               	movwf	6
 18565  2732  0859               	movf	secret_Main@data+1,w
 18566  2733  0087               	movwf	7
 18567  2734  3142               	addfsr 1,2
 18568  2735  302C               	movlw	44
 18569  2736  3FC0               	movwi [0]fsr1
 18570  2737  3001               	movlw	1
 18571  2738  3FC1               	movwi [1]fsr1
 18572                           
 18573                           ;secret_task.c: 141: break;
 18574  2739  2FF5               	goto	l9644
 18575  273A                     l9606:	
 18576                           ;secret_task.c: 142: case 4:
 18577                           
 18578                           
 18579                           ;secret_task.c: 144: if (data->holdCountX == 0){
 18580  273A  0858               	movf	secret_Main@data,w
 18581  273B  0086               	movwf	6
 18582  273C  0859               	movf	secret_Main@data+1,w
 18583  273D  0087               	movwf	7
 18584  273E  3148               	addfsr 1,8
 18585  273F  0016               	moviw fsr1++
 18586  2740  0401               	iorwf	1,w
 18587  2741  1D03               	btfss	3,2
 18588  2742  2F52               	goto	l9610
 18589                           
 18590                           ;secret_task.c: 145: secret_found = secret_check(data, buttonPressed);
 18591  2743  0859               	movf	secret_Main@data+1,w
 18592  2744  00F8               	movwf	secret_check@data+1
 18593  2745  0858               	movf	secret_Main@data,w
 18594  2746  00F7               	movwf	secret_check@data
 18595  2747  0857               	movf	secret_Main@buttonPressed,w
 18596  2748  00D4               	movwf	??_secret_Main
 18597  2749  0854               	movf	??_secret_Main,w
 18598  274A  00F9               	movwf	secret_check@buttonPressed
 18599  274B  3190  2028  31A6   	fcall	_secret_check
 18600  274E  0020               	movlb	0	; select bank0
 18601  274F  00D5               	movwf	??_secret_Main+1
 18602  2750  0855               	movf	??_secret_Main+1,w
 18603  2751  00D6               	movwf	secret_Main@secret_found
 18604  2752                     l9610:	
 18605                           
 18606                           ;secret_task.c: 146: }
 18607                           ;secret_task.c: 147: data->holdCountA = 0;
 18608  2752  0858               	movf	secret_Main@data,w
 18609  2753  0086               	movwf	6
 18610  2754  0859               	movf	secret_Main@data+1,w
 18611  2755  0087               	movwf	7
 18612  2756  3144               	addfsr 1,4
 18613  2757  3000               	movlw	0
 18614  2758  3FC0               	movwi [0]fsr1
 18615  2759  3FC1               	movwi [1]fsr1
 18616                           
 18617                           ;secret_task.c: 148: data->holdCountB = 0;
 18618  275A  0858               	movf	secret_Main@data,w
 18619  275B  0086               	movwf	6
 18620  275C  0859               	movf	secret_Main@data+1,w
 18621  275D  0087               	movwf	7
 18622  275E  3146               	addfsr 1,6
 18623  275F  3000               	movlw	0
 18624  2760  3FC0               	movwi [0]fsr1
 18625  2761  3FC1               	movwi [1]fsr1
 18626                           
 18627                           ;secret_task.c: 149: data->holdCountX += 1;
 18628  2762  0858               	movf	secret_Main@data,w
 18629  2763  0086               	movwf	6
 18630  2764  0859               	movf	secret_Main@data+1,w
 18631  2765  0087               	movwf	7
 18632  2766  3148               	addfsr 1,8
 18633  2767  3001               	movlw	1
 18634  2768  0781               	addwf	1,f
 18635  2769  3141               	addfsr 1,1
 18636  276A  1803               	skipnc
 18637  276B  0A81               	incf	1,f
 18638                           
 18639                           ;secret_task.c: 150: data->holdCountY = 0;
 18640  276C  0858               	movf	secret_Main@data,w
 18641  276D  0086               	movwf	6
 18642  276E  0859               	movf	secret_Main@data+1,w
 18643  276F  0087               	movwf	7
 18644  2770  314A               	addfsr 1,10
 18645  2771  3000               	movlw	0
 18646  2772  3FC0               	movwi [0]fsr1
 18647  2773  3FC1               	movwi [1]fsr1
 18648                           
 18649                           ;secret_task.c: 151: data->noholdCount = 0;
 18650  2774  0858               	movf	secret_Main@data,w
 18651  2775  0086               	movwf	6
 18652  2776  0859               	movf	secret_Main@data+1,w
 18653  2777  0087               	movwf	7
 18654  2778  314C               	addfsr 1,12
 18655  2779  3000               	movlw	0
 18656  277A  3FC0               	movwi [0]fsr1
 18657  277B  3FC1               	movwi [1]fsr1
 18658                           
 18659                           ;secret_task.c: 152: data->delayTickCount = 300;
 18660  277C  0858               	movf	secret_Main@data,w
 18661  277D  0086               	movwf	6
 18662  277E  0859               	movf	secret_Main@data+1,w
 18663  277F  0087               	movwf	7
 18664  2780  3142               	addfsr 1,2
 18665  2781  302C               	movlw	44
 18666  2782  3FC0               	movwi [0]fsr1
 18667  2783  3001               	movlw	1
 18668  2784  3FC1               	movwi [1]fsr1
 18669                           
 18670                           ;secret_task.c: 153: break;
 18671  2785  2FF5               	goto	l9644
 18672  2786                     l9622:	
 18673                           ;secret_task.c: 154: case 8:
 18674                           
 18675                           
 18676                           ;secret_task.c: 156: if (data->holdCountY == 0){
 18677  2786  0858               	movf	secret_Main@data,w
 18678  2787  0086               	movwf	6
 18679  2788  0859               	movf	secret_Main@data+1,w
 18680  2789  0087               	movwf	7
 18681  278A  314A               	addfsr 1,10
 18682  278B  0016               	moviw fsr1++
 18683  278C  0401               	iorwf	1,w
 18684  278D  1D03               	btfss	3,2
 18685  278E  2F9E               	goto	l9626
 18686                           
 18687                           ;secret_task.c: 157: secret_found = secret_check(data, buttonPressed);
 18688  278F  0859               	movf	secret_Main@data+1,w
 18689  2790  00F8               	movwf	secret_check@data+1
 18690  2791  0858               	movf	secret_Main@data,w
 18691  2792  00F7               	movwf	secret_check@data
 18692  2793  0857               	movf	secret_Main@buttonPressed,w
 18693  2794  00D4               	movwf	??_secret_Main
 18694  2795  0854               	movf	??_secret_Main,w
 18695  2796  00F9               	movwf	secret_check@buttonPressed
 18696  2797  3190  2028  31A6   	fcall	_secret_check
 18697  279A  0020               	movlb	0	; select bank0
 18698  279B  00D5               	movwf	??_secret_Main+1
 18699  279C  0855               	movf	??_secret_Main+1,w
 18700  279D  00D6               	movwf	secret_Main@secret_found
 18701  279E                     l9626:	
 18702                           
 18703                           ;secret_task.c: 158: }
 18704                           ;secret_task.c: 159: data->holdCountA = 0;
 18705  279E  0858               	movf	secret_Main@data,w
 18706  279F  0086               	movwf	6
 18707  27A0  0859               	movf	secret_Main@data+1,w
 18708  27A1  0087               	movwf	7
 18709  27A2  3144               	addfsr 1,4
 18710  27A3  3000               	movlw	0
 18711  27A4  3FC0               	movwi [0]fsr1
 18712  27A5  3FC1               	movwi [1]fsr1
 18713                           
 18714                           ;secret_task.c: 160: data->holdCountB = 0;
 18715  27A6  0858               	movf	secret_Main@data,w
 18716  27A7  0086               	movwf	6
 18717  27A8  0859               	movf	secret_Main@data+1,w
 18718  27A9  0087               	movwf	7
 18719  27AA  3146               	addfsr 1,6
 18720  27AB  3000               	movlw	0
 18721  27AC  3FC0               	movwi [0]fsr1
 18722  27AD  3FC1               	movwi [1]fsr1
 18723                           
 18724                           ;secret_task.c: 161: data->holdCountX = 0;
 18725  27AE  0858               	movf	secret_Main@data,w
 18726  27AF  0086               	movwf	6
 18727  27B0  0859               	movf	secret_Main@data+1,w
 18728  27B1  0087               	movwf	7
 18729  27B2  3148               	addfsr 1,8
 18730  27B3  3000               	movlw	0
 18731  27B4  3FC0               	movwi [0]fsr1
 18732  27B5  3FC1               	movwi [1]fsr1
 18733                           
 18734                           ;secret_task.c: 162: data->holdCountY += 1;
 18735  27B6  0858               	movf	secret_Main@data,w
 18736  27B7  0086               	movwf	6
 18737  27B8  0859               	movf	secret_Main@data+1,w
 18738  27B9  0087               	movwf	7
 18739  27BA  314A               	addfsr 1,10
 18740  27BB  3001               	movlw	1
 18741  27BC  0781               	addwf	1,f
 18742  27BD  3141               	addfsr 1,1
 18743  27BE  1803               	skipnc
 18744  27BF  0A81               	incf	1,f
 18745                           
 18746                           ;secret_task.c: 163: data->noholdCount = 0;
 18747  27C0  0858               	movf	secret_Main@data,w
 18748  27C1  0086               	movwf	6
 18749  27C2  0859               	movf	secret_Main@data+1,w
 18750  27C3  0087               	movwf	7
 18751  27C4  314C               	addfsr 1,12
 18752  27C5  3000               	movlw	0
 18753  27C6  3FC0               	movwi [0]fsr1
 18754  27C7  3FC1               	movwi [1]fsr1
 18755                           
 18756                           ;secret_task.c: 164: data->delayTickCount = 300;
 18757  27C8  0858               	movf	secret_Main@data,w
 18758  27C9  0086               	movwf	6
 18759  27CA  0859               	movf	secret_Main@data+1,w
 18760  27CB  0087               	movwf	7
 18761  27CC  3142               	addfsr 1,2
 18762  27CD  302C               	movlw	44
 18763  27CE  3FC0               	movwi [0]fsr1
 18764  27CF  3001               	movlw	1
 18765  27D0  3FC1               	movwi [1]fsr1
 18766                           
 18767                           ;secret_task.c: 165: break;
 18768  27D1  2FF5               	goto	l9644
 18769  27D2                     l9638:	
 18770                           ;secret_task.c: 166: default:
 18771                           
 18772                           
 18773                           ;secret_task.c: 168: secret_check(data, 0);
 18774  27D2  0859               	movf	secret_Main@data+1,w
 18775  27D3  00F8               	movwf	secret_check@data+1
 18776  27D4  0858               	movf	secret_Main@data,w
 18777  27D5  00F7               	movwf	secret_check@data
 18778  27D6  01F9               	clrf	secret_check@buttonPressed
 18779  27D7  3190  2028  31A6   	fcall	_secret_check
 18780                           
 18781                           ;secret_task.c: 169: secret_clear(data);
 18782  27DA  0020               	movlb	0	; select bank0
 18783  27DB  0859               	movf	secret_Main@data+1,w
 18784  27DC  00F2               	movwf	secret_clear@data+1
 18785  27DD  0858               	movf	secret_Main@data,w
 18786  27DE  00F1               	movwf	secret_clear@data
 18787  27DF  31A9  2108  31A6   	fcall	_secret_clear
 18788                           
 18789                           ;secret_task.c: 170: }
 18790  27E2  2FF5               	goto	l9644
 18791  27E3                     l9642:	
 18792  27E3  0020               	movlb	0	; select bank0
 18793  27E4  0857               	movf	secret_Main@buttonPressed,w
 18794                           
 18795                           ; Switch size 1, requested type "space"
 18796                           ; Number of cases is 5, Range of values is 0 to 8
 18797                           ; switch strategies available:
 18798                           ; Name         Instructions Cycles
 18799                           ; simple_byte           16     9 (average)
 18800                           ; direct_byte           24     6 (fixed)
 18801                           ; jumptable            260     6 (fixed)
 18802                           ;	Chosen strategy is simple_byte
 18803  27E5  3A00               	xorlw	0	; case 0
 18804  27E6  1903               	skipnz
 18805  27E7  2E51               	goto	l9556
 18806  27E8  3A01               	xorlw	1	; case 1
 18807  27E9  1903               	skipnz
 18808  27EA  2EA2               	goto	l9574
 18809  27EB  3A03               	xorlw	3	; case 2
 18810  27EC  1903               	skipnz
 18811  27ED  2EEE               	goto	l9590
 18812  27EE  3A06               	xorlw	6	; case 4
 18813  27EF  1903               	skipnz
 18814  27F0  2F3A               	goto	l9606
 18815  27F1  3A0C               	xorlw	12	; case 8
 18816  27F2  1903               	skipnz
 18817  27F3  2F86               	goto	l9622
 18818  27F4  2FD2               	goto	l9638
 18819  27F5                     l9644:	
 18820                           
 18821                           ;secret_task.c: 173: if (secret_found){
 18822  27F5  0020               	movlb	0	; select bank0
 18823  27F6  0856               	movf	secret_Main@secret_found,w
 18824  27F7  1903               	btfsc	3,2
 18825  27F8  0008               	return
 18826                           
 18827                           ;secret_task.c: 174: secret_clear(data);
 18828  27F9  0859               	movf	secret_Main@data+1,w
 18829  27FA  00F2               	movwf	secret_clear@data+1
 18830  27FB  0858               	movf	secret_Main@data,w
 18831  27FC  00F1               	movwf	secret_clear@data
 18832  27FD  31A9  2108         	fcall	_secret_clear
 18833  27FF  0008               	return
 18834  2800                     __end_of_secret_Main:	
 18835                           
 18836                           	psect	text16
 18837  1C2C                     __ptext16:	
 18838 ;; *************** function _locked_Main *****************
 18839 ;; Defined at:
 18840 ;;		line 85 in file "locked_task.c"
 18841 ;; Parameters:    Size  Location     Type
 18842 ;;  taskData        2   50[BANK0 ] PTR void 
 18843 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18844 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18845 ;; Auto vars:     Size  Location     Type
 18846 ;;  data            2   55[BANK0 ] PTR struct t_locked_task
 18847 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18848 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18849 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 18850 ;; Return value:  Size  Location     Type
 18851 ;;                  1    wreg      void 
 18852 ;; Registers used:
 18853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18854 ;; Tracked objects:
 18855 ;;		On entry : 0/0
 18856 ;;		On exit  : 0/0
 18857 ;;		Unchanged: 0/0
 18858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18859 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18860 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18861 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18862 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18863 ;;Total ram usage:        7 bytes
 18864 ;; Hardware stack levels used:    1
 18865 ;; Hardware stack levels required when called:   11
 18866 ;; This function calls:
 18867 ;;		___lwmod
 18868 ;;		_locked_clear
 18869 ;;		_locked_get_lock_leds
 18870 ;;		_locked_get_unlock_leds
 18871 ;;		_locked_lock_leds
 18872 ;;		_locked_unlock_leds
 18873 ;;		_marquee
 18874 ;;		_nullifyBadge_buttonsGet
 18875 ;;		_nullifyBadge_userLedsSet
 18876 ;;		_slot_Setup
 18877 ;; This function is called by:
 18878 ;;		_main
 18879 ;;		_scheduler_TaskRun
 18880 ;; This function uses a non-reentrant model
 18881 ;;
 18882                           
 18883                           
 18884                           ;psect for function _locked_Main
 18885  1C2C                     _locked_Main:	
 18886                           
 18887                           ;locked_task.c: 86: struct t_locked_taskData *data = (struct t_locked_taskData *) taskDa
      +                          ta;
 18888                           
 18889                           ;incstack = 0
 18890                           ; Regs used in _locked_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18891  1C2C  0020               	movlb	0	; select bank0
 18892  1C2D  0853               	movf	locked_Main@taskData+1,w
 18893  1C2E  00D8               	movwf	locked_Main@data+1
 18894  1C2F  0852               	movf	locked_Main@taskData,w
 18895  1C30  00D7               	movwf	locked_Main@data
 18896                           
 18897                           ;locked_task.c: 87: u8 buttonPressed;
 18898                           ;locked_task.c: 89: if ( currentTask != LOCKED_TASK ){
 18899  1C31  3003               	movlw	3
 18900  1C32  0021               	movlb	1	; select bank1
 18901  1C33  063A               	xorwf	_currentTask^(0+128),w
 18902  1C34  043B               	iorwf	(_currentTask+1)^(0+128),w
 18903  1C35  1903               	btfsc	3,2
 18904  1C36  2D44               	goto	l9516
 18905                           
 18906                           ;locked_task.c: 90: data->holdCountA = 1;
 18907  1C37  0020               	movlb	0	; select bank0
 18908  1C38  0857               	movf	locked_Main@data,w
 18909  1C39  0086               	movwf	6
 18910  1C3A  0858               	movf	locked_Main@data+1,w
 18911  1C3B  0087               	movwf	7
 18912  1C3C  3143               	addfsr 1,3
 18913  1C3D  3001               	movlw	1
 18914  1C3E  3FC0               	movwi [0]fsr1
 18915  1C3F  3000               	movlw	0
 18916  1C40  3FC1               	movwi [1]fsr1
 18917                           
 18918                           ;locked_task.c: 91: data->holdCountB = 1;
 18919  1C41  0857               	movf	locked_Main@data,w
 18920  1C42  0086               	movwf	6
 18921  1C43  0858               	movf	locked_Main@data+1,w
 18922  1C44  0087               	movwf	7
 18923  1C45  3145               	addfsr 1,5
 18924  1C46  3001               	movlw	1
 18925  1C47  3FC0               	movwi [0]fsr1
 18926  1C48  3000               	movlw	0
 18927  1C49  3FC1               	movwi [1]fsr1
 18928                           
 18929                           ;locked_task.c: 92: data->holdCountX = 1;
 18930  1C4A  0857               	movf	locked_Main@data,w
 18931  1C4B  0086               	movwf	6
 18932  1C4C  0858               	movf	locked_Main@data+1,w
 18933  1C4D  0087               	movwf	7
 18934  1C4E  3147               	addfsr 1,7
 18935  1C4F  3001               	movlw	1
 18936  1C50  3FC0               	movwi [0]fsr1
 18937  1C51  3000               	movlw	0
 18938  1C52  3FC1               	movwi [1]fsr1
 18939                           
 18940                           ;locked_task.c: 93: data->holdCountY = 1;
 18941  1C53  0857               	movf	locked_Main@data,w
 18942  1C54  0086               	movwf	6
 18943  1C55  0858               	movf	locked_Main@data+1,w
 18944  1C56  0087               	movwf	7
 18945  1C57  3149               	addfsr 1,9
 18946  1C58  3001               	movlw	1
 18947  1C59  3FC0               	movwi [0]fsr1
 18948  1C5A  3000               	movlw	0
 18949  1C5B  3FC1               	movwi [1]fsr1
 18950                           
 18951                           ;locked_task.c: 94: return;
 18952  1C5C  0008               	return
 18953  1C5D                     l9472:	
 18954                           ;locked_task.c: 101: case LOCKED_UNLOCKING_STATE:
 18955                           
 18956                           ;locked_task.c: 95: }
 18957                           ;locked_task.c: 100: switch (data->state){
 18958                           
 18959                           
 18960                           ;locked_task.c: 102: badge_locked = 0;
 18961  1C5D  0021               	movlb	1	; select bank1
 18962  1C5E  01C4               	clrf	_badge_locked^(0+128)
 18963                           
 18964                           ;locked_task.c: 103: slot_Setup(slot_taskData);
 18965  1C5F  083D               	movf	(_slot_taskData+1)^(0+128),w
 18966  1C60  0020               	movlb	0	; select bank0
 18967  1C61  00B0               	movwf	slot_Setup@taskData+1
 18968  1C62  0021               	movlb	1	; select bank1
 18969  1C63  083C               	movf	_slot_taskData^(0+128),w
 18970  1C64  0020               	movlb	0	; select bank0
 18971  1C65  00AF               	movwf	slot_Setup@taskData
 18972  1C66  31AD  25D5  319C   	fcall	_slot_Setup
 18973                           
 18974                           ;locked_task.c: 104: marquee("UNLOCKING...", data->delayTickCount);
 18975  1C69  3048               	movlw	low (STR_42| (0+32768))
 18976  1C6A  0020               	movlb	0	; select bank0
 18977  1C6B  00BA               	movwf	marquee@string
 18978  1C6C  30BA               	movlw	high (STR_42| (0+32768))
 18979  1C6D  00BB               	movwf	marquee@string+1
 18980  1C6E  0857               	movf	locked_Main@data,w
 18981  1C6F  0086               	movwf	6
 18982  1C70  0858               	movf	locked_Main@data+1,w
 18983  1C71  0087               	movwf	7
 18984  1C72  3141               	addfsr 1,1
 18985  1C73  3F40               	moviw [0]fsr1
 18986  1C74  00BC               	movwf	marquee@count
 18987  1C75  3F41               	moviw [1]fsr1
 18988  1C76  00BD               	movwf	marquee@count+1
 18989  1C77  31A2  2275  319C   	fcall	_marquee
 18990                           
 18991                           ;locked_task.c: 106: if (data->delayTickCount % 75 == 0){
 18992  1C7A  304B               	movlw	75
 18993  1C7B  0020               	movlb	0	; select bank0
 18994  1C7C  00AB               	movwf	___lwmod@divisor
 18995  1C7D  3000               	movlw	0
 18996  1C7E  00AC               	movwf	___lwmod@divisor+1
 18997  1C7F  0857               	movf	locked_Main@data,w
 18998  1C80  0086               	movwf	6
 18999  1C81  0858               	movf	locked_Main@data+1,w
 19000  1C82  0087               	movwf	7
 19001  1C83  3141               	addfsr 1,1
 19002  1C84  3F40               	moviw [0]fsr1
 19003  1C85  00AD               	movwf	___lwmod@dividend
 19004  1C86  3F41               	moviw [1]fsr1
 19005  1C87  00AE               	movwf	___lwmod@dividend+1
 19006  1C88  31B7  27A4  319C   	fcall	___lwmod
 19007  1C8B  0020               	movlb	0	; select bank0
 19008  1C8C  082B               	movf	?___lwmod,w
 19009  1C8D  042C               	iorwf	?___lwmod+1,w
 19010  1C8E  1D03               	btfss	3,2
 19011  1C8F  2C9A               	goto	l9482
 19012                           
 19013                           ;locked_task.c: 107: locked_leds = locked_lock_base_leds | locked_get_unlock_leds();
 19014  1C90  3188  2001  319C   	fcall	_locked_get_unlock_leds
 19015  1C93  0021               	movlb	1	; select bank1
 19016  1C94  0859               	movf	_locked_lock_base_leds^(0+128),w
 19017  1C95  0471               	iorwf	?_locked_get_unlock_leds,w
 19018  1C96  00A2               	movwf	_locked_leds^(0+128)
 19019  1C97  085A               	movf	(_locked_lock_base_leds+1)^(0+128),w
 19020  1C98  0472               	iorwf	?_locked_get_unlock_leds+1,w
 19021  1C99  00A3               	movwf	(_locked_leds+1)^(0+128)
 19022  1C9A                     l9482:	
 19023                           
 19024                           ;locked_task.c: 108: }
 19025                           ;locked_task.c: 111: if (data->delayTickCount == 375){
 19026  1C9A  0020               	movlb	0	; select bank0
 19027  1C9B  0857               	movf	locked_Main@data,w
 19028  1C9C  0086               	movwf	6
 19029  1C9D  0858               	movf	locked_Main@data+1,w
 19030  1C9E  0087               	movwf	7
 19031  1C9F  3141               	addfsr 1,1
 19032  1CA0  0016               	moviw fsr1++
 19033  1CA1  3A77               	xorlw	119
 19034  1CA2  00D4               	movwf	??_locked_Main
 19035  1CA3  0016               	moviw fsr1++
 19036  1CA4  3A01               	xorlw	1
 19037  1CA5  04D4               	iorwf	??_locked_Main,f
 19038  1CA6  1D03               	btfss	3,2
 19039  1CA7  2D0A               	goto	l9502
 19040                           
 19041                           ;locked_task.c: 112: data->state = LOCKED_UNLOCKED_STATE;
 19042  1CA8  0857               	movf	locked_Main@data,w
 19043  1CA9  3E0D               	addlw	13
 19044  1CAA  00D4               	movwf	??_locked_Main
 19045  1CAB  3000               	movlw	0
 19046  1CAC  3D58               	addwfc	locked_Main@data+1,w
 19047  1CAD  00D5               	movwf	??_locked_Main+1
 19048  1CAE  0854               	movf	??_locked_Main,w
 19049  1CAF  0086               	movwf	6
 19050  1CB0  0855               	movf	??_locked_Main+1,w
 19051  1CB1  0087               	movwf	7
 19052  1CB2  3002               	movlw	2
 19053  1CB3  0081               	movwf	1
 19054                           
 19055                           ;locked_task.c: 113: data->delayTickCount = 0;
 19056  1CB4  0857               	movf	locked_Main@data,w
 19057  1CB5  0086               	movwf	6
 19058  1CB6  0858               	movf	locked_Main@data+1,w
 19059  1CB7  0087               	movwf	7
 19060  1CB8  3141               	addfsr 1,1
 19061  1CB9  3000               	movlw	0
 19062  1CBA  3FC0               	movwi [0]fsr1
 19063  1CBB  3FC1               	movwi [1]fsr1
 19064  1CBC  2D58               	goto	l9518
 19065  1CBD                     l9490:	
 19066                           ;locked_task.c: 119: case LOCKED_LOCKING_STATE:
 19067                           
 19068                           ;locked_task.c: 117: }
 19069                           ;locked_task.c: 118: break;
 19070                           
 19071                           ;locked_task.c: 115: else {
 19072                           ;locked_task.c: 116: data->delayTickCount += 1;
 19073                           
 19074                           ;locked_task.c: 114: }
 19075                           
 19076                           
 19077                           ;locked_task.c: 120: marquee("LOCKING...", data->delayTickCount);
 19078  1CBD  304A               	movlw	low ((STR_42+2)| (0+32768))
 19079  1CBE  00BA               	movwf	marquee@string
 19080  1CBF  30BA               	movlw	high ((STR_42+2)| (0+32768))
 19081  1CC0  00BB               	movwf	marquee@string+1
 19082  1CC1  0857               	movf	locked_Main@data,w
 19083  1CC2  0086               	movwf	6
 19084  1CC3  0858               	movf	locked_Main@data+1,w
 19085  1CC4  0087               	movwf	7
 19086  1CC5  3141               	addfsr 1,1
 19087  1CC6  3F40               	moviw [0]fsr1
 19088  1CC7  00BC               	movwf	marquee@count
 19089  1CC8  3F41               	moviw [1]fsr1
 19090  1CC9  00BD               	movwf	marquee@count+1
 19091  1CCA  31A2  2275  319C   	fcall	_marquee
 19092                           
 19093                           ;locked_task.c: 122: if (data->delayTickCount % 75 == 0){
 19094  1CCD  304B               	movlw	75
 19095  1CCE  0020               	movlb	0	; select bank0
 19096  1CCF  00AB               	movwf	___lwmod@divisor
 19097  1CD0  3000               	movlw	0
 19098  1CD1  00AC               	movwf	___lwmod@divisor+1
 19099  1CD2  0857               	movf	locked_Main@data,w
 19100  1CD3  0086               	movwf	6
 19101  1CD4  0858               	movf	locked_Main@data+1,w
 19102  1CD5  0087               	movwf	7
 19103  1CD6  3141               	addfsr 1,1
 19104  1CD7  3F40               	moviw [0]fsr1
 19105  1CD8  00AD               	movwf	___lwmod@dividend
 19106  1CD9  3F41               	moviw [1]fsr1
 19107  1CDA  00AE               	movwf	___lwmod@dividend+1
 19108  1CDB  31B7  27A4  319C   	fcall	___lwmod
 19109  1CDE  0020               	movlb	0	; select bank0
 19110  1CDF  082B               	movf	?___lwmod,w
 19111  1CE0  042C               	iorwf	?___lwmod+1,w
 19112  1CE1  1D03               	btfss	3,2
 19113  1CE2  2CED               	goto	l9496
 19114                           
 19115                           ;locked_task.c: 123: locked_leds = locked_lock_base_leds | locked_get_lock_leds();
 19116  1CE3  31B7  270A  319C   	fcall	_locked_get_lock_leds
 19117  1CE6  0021               	movlb	1	; select bank1
 19118  1CE7  0859               	movf	_locked_lock_base_leds^(0+128),w
 19119  1CE8  0471               	iorwf	?_locked_get_lock_leds,w
 19120  1CE9  00A2               	movwf	_locked_leds^(0+128)
 19121  1CEA  085A               	movf	(_locked_lock_base_leds+1)^(0+128),w
 19122  1CEB  0472               	iorwf	?_locked_get_lock_leds+1,w
 19123  1CEC  00A3               	movwf	(_locked_leds+1)^(0+128)
 19124  1CED                     l9496:	
 19125                           
 19126                           ;locked_task.c: 124: }
 19127                           ;locked_task.c: 127: if (data->delayTickCount == 375){
 19128  1CED  0020               	movlb	0	; select bank0
 19129  1CEE  0857               	movf	locked_Main@data,w
 19130  1CEF  0086               	movwf	6
 19131  1CF0  0858               	movf	locked_Main@data+1,w
 19132  1CF1  0087               	movwf	7
 19133  1CF2  3141               	addfsr 1,1
 19134  1CF3  0016               	moviw fsr1++
 19135  1CF4  3A77               	xorlw	119
 19136  1CF5  00D4               	movwf	??_locked_Main
 19137  1CF6  0016               	moviw fsr1++
 19138  1CF7  3A01               	xorlw	1
 19139  1CF8  04D4               	iorwf	??_locked_Main,f
 19140  1CF9  1D03               	btfss	3,2
 19141  1CFA  2D0A               	goto	l9502
 19142                           
 19143                           ;locked_task.c: 128: data->state = LOCKED_LOCKED_STATE;
 19144  1CFB  0857               	movf	locked_Main@data,w
 19145  1CFC  0086               	movwf	6
 19146  1CFD  0858               	movf	locked_Main@data+1,w
 19147  1CFE  0087               	movwf	7
 19148  1CFF  314D               	addfsr 1,13
 19149  1D00  0181               	clrf	1
 19150                           
 19151                           ;locked_task.c: 129: data->delayTickCount = 0;
 19152  1D01  0857               	movf	locked_Main@data,w
 19153  1D02  0086               	movwf	6
 19154  1D03  0858               	movf	locked_Main@data+1,w
 19155  1D04  0087               	movwf	7
 19156  1D05  3141               	addfsr 1,1
 19157  1D06  3000               	movlw	0
 19158  1D07  3FC0               	movwi [0]fsr1
 19159  1D08  3FC1               	movwi [1]fsr1
 19160                           
 19161                           ;locked_task.c: 130: }
 19162  1D09  2D58               	goto	l9518
 19163  1D0A                     l9502:	
 19164                           
 19165                           ;locked_task.c: 131: else {
 19166                           ;locked_task.c: 132: data->delayTickCount += 1;
 19167  1D0A  0857               	movf	locked_Main@data,w
 19168  1D0B  0086               	movwf	6
 19169  1D0C  0858               	movf	locked_Main@data+1,w
 19170  1D0D  0087               	movwf	7
 19171  1D0E  3141               	addfsr 1,1
 19172  1D0F  3001               	movlw	1
 19173  1D10  0781               	addwf	1,f
 19174  1D11  3141               	addfsr 1,1
 19175  1D12  1803               	skipnc
 19176  1D13  0A81               	incf	1,f
 19177                           
 19178                           ;locked_task.c: 133: }
 19179                           ;locked_task.c: 134: break;
 19180  1D14  2D58               	goto	l9518
 19181  1D15                     l9504:	
 19182                           ;locked_task.c: 135: case LOCKED_UNLOCKED_STATE:
 19183                           
 19184                           
 19185                           ;locked_task.c: 136: badge_locked = 0;
 19186  1D15  0021               	movlb	1	; select bank1
 19187  1D16  01C4               	clrf	_badge_locked^(0+128)
 19188                           
 19189                           ;locked_task.c: 138: marquee("OPEN", data->delayTickCount);
 19190  1D17  3083               	movlw	low (STR_44| (0+32768))
 19191  1D18  0020               	movlb	0	; select bank0
 19192  1D19  00BA               	movwf	marquee@string
 19193  1D1A  30BB               	movlw	high (STR_44| (0+32768))
 19194  1D1B  00BB               	movwf	marquee@string+1
 19195  1D1C  0857               	movf	locked_Main@data,w
 19196  1D1D  0086               	movwf	6
 19197  1D1E  0858               	movf	locked_Main@data+1,w
 19198  1D1F  0087               	movwf	7
 19199  1D20  3141               	addfsr 1,1
 19200  1D21  3F40               	moviw [0]fsr1
 19201  1D22  00BC               	movwf	marquee@count
 19202  1D23  3F41               	moviw [1]fsr1
 19203  1D24  00BD               	movwf	marquee@count+1
 19204  1D25  31A2  2275  319C   	fcall	_marquee
 19205                           
 19206                           ;locked_task.c: 139: locked_unlock_leds();
 19207  1D28  31B5  2547  319C   	fcall	_locked_unlock_leds
 19208                           
 19209                           ;locked_task.c: 140: break;
 19210  1D2B  2D58               	goto	l9518
 19211  1D2C                     l1265:	
 19212                           ;locked_task.c: 141: case LOCKED_LOCKED_STATE:
 19213                           
 19214                           
 19215                           ;locked_task.c: 142: badge_locked = 1;
 19216  1D2C  0021               	movlb	1	; select bank1
 19217  1D2D  01C4               	clrf	_badge_locked^(0+128)
 19218  1D2E  0AC4               	incf	_badge_locked^(0+128),f
 19219                           
 19220                           ;locked_task.c: 143: marquee("LOCK", data->delayTickCount);
 19221  1D2F  307E               	movlw	low (STR_45| (0+32768))
 19222  1D30  0020               	movlb	0	; select bank0
 19223  1D31  00BA               	movwf	marquee@string
 19224  1D32  30BB               	movlw	high (STR_45| (0+32768))
 19225  1D33  00BB               	movwf	marquee@string+1
 19226  1D34  0857               	movf	locked_Main@data,w
 19227  1D35  0086               	movwf	6
 19228  1D36  0858               	movf	locked_Main@data+1,w
 19229  1D37  0087               	movwf	7
 19230  1D38  3141               	addfsr 1,1
 19231  1D39  3F40               	moviw [0]fsr1
 19232  1D3A  00BC               	movwf	marquee@count
 19233  1D3B  3F41               	moviw [1]fsr1
 19234  1D3C  00BD               	movwf	marquee@count+1
 19235  1D3D  31A2  2275  319C   	fcall	_marquee
 19236                           
 19237                           ;locked_task.c: 145: locked_lock_leds();
 19238  1D40  31B6  2606  319C   	fcall	_locked_lock_leds
 19239                           
 19240                           ;locked_task.c: 147: }
 19241                           
 19242                           ;locked_task.c: 146: break;
 19243  1D43  2D58               	goto	l9518
 19244  1D44                     l9516:	
 19245  1D44  0020               	movlb	0	; select bank0
 19246  1D45  0857               	movf	locked_Main@data,w
 19247  1D46  0086               	movwf	6
 19248  1D47  0858               	movf	locked_Main@data+1,w
 19249  1D48  0087               	movwf	7
 19250  1D49  314D               	addfsr 1,13
 19251  1D4A  0801               	movf	1,w
 19252                           
 19253                           ; Switch size 1, requested type "space"
 19254                           ; Number of cases is 4, Range of values is 0 to 3
 19255                           ; switch strategies available:
 19256                           ; Name         Instructions Cycles
 19257                           ; simple_byte           13     7 (average)
 19258                           ; direct_byte           14     6 (fixed)
 19259                           ; jumptable            260     6 (fixed)
 19260                           ;	Chosen strategy is simple_byte
 19261  1D4B  3A00               	xorlw	0	; case 0
 19262  1D4C  1903               	skipnz
 19263  1D4D  2D2C               	goto	l1265
 19264  1D4E  3A01               	xorlw	1	; case 1
 19265  1D4F  1903               	skipnz
 19266  1D50  2CBD               	goto	l9490
 19267  1D51  3A03               	xorlw	3	; case 2
 19268  1D52  1903               	skipnz
 19269  1D53  2D15               	goto	l9504
 19270  1D54  3A01               	xorlw	1	; case 3
 19271  1D55  1903               	skipnz
 19272  1D56  2C5D               	goto	l9472
 19273  1D57  2D58               	goto	l9518
 19274  1D58                     l9518:	
 19275                           
 19276                           ;locked_task.c: 148: nullifyBadge_userLedsSet(data->badge, locked_leds);
 19277  1D58  0021               	movlb	1	; select bank1
 19278  1D59  0823               	movf	(_locked_leds+1)^(0+128),w
 19279  1D5A  0020               	movlb	0	; select bank0
 19280  1D5B  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 19281  1D5C  0021               	movlb	1	; select bank1
 19282  1D5D  0822               	movf	_locked_leds^(0+128),w
 19283  1D5E  0020               	movlb	0	; select bank0
 19284  1D5F  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 19285  1D60  0857               	movf	locked_Main@data,w
 19286  1D61  0086               	movwf	6
 19287  1D62  0858               	movf	locked_Main@data+1,w
 19288  1D63  0087               	movwf	7
 19289  1D64  0801               	movf	1,w
 19290  1D65  31B5  2513  319C   	fcall	_nullifyBadge_userLedsSet
 19291                           
 19292                           ;locked_task.c: 151: buttonPressed = nullifyBadge_buttonsGet();
 19293  1D68  31A8  20A5  319C   	fcall	_nullifyBadge_buttonsGet
 19294  1D6B  0020               	movlb	0	; select bank0
 19295  1D6C  00D4               	movwf	??_locked_Main
 19296  1D6D  0854               	movf	??_locked_Main,w
 19297  1D6E  00D6               	movwf	locked_Main@buttonPressed
 19298                           
 19299                           ;locked_task.c: 152: switch (buttonPressed) {
 19300  1D6F  2E00               	goto	l9548
 19301  1D70                     l9522:	
 19302                           ;locked_task.c: 153: case 4:
 19303                           
 19304                           
 19305                           ;locked_task.c: 154: locked_clear(data);
 19306  1D70  0858               	movf	locked_Main@data+1,w
 19307  1D71  00BA               	movwf	locked_clear@data+1
 19308  1D72  0857               	movf	locked_Main@data,w
 19309  1D73  00B9               	movwf	locked_clear@data
 19310  1D74  31AB  234B         	fcall	_locked_clear
 19311                           
 19312                           ;locked_task.c: 155: currentTask = MENU_TASK;
 19313  1D76  0021               	movlb	1	; select bank1
 19314  1D77  01BA               	clrf	_currentTask^(0+128)
 19315  1D78  01BB               	clrf	(_currentTask+1)^(0+128)
 19316                           
 19317                           ;locked_task.c: 156: break;
 19318  1D79  0008               	return
 19319  1D7A                     l9526:	
 19320                           ;locked_task.c: 157: case 8:
 19321                           
 19322                           
 19323                           ;locked_task.c: 158: if (data->holdCountY == 0){
 19324  1D7A  0020               	movlb	0	; select bank0
 19325  1D7B  0857               	movf	locked_Main@data,w
 19326  1D7C  0086               	movwf	6
 19327  1D7D  0858               	movf	locked_Main@data+1,w
 19328  1D7E  0087               	movwf	7
 19329  1D7F  3149               	addfsr 1,9
 19330  1D80  0016               	moviw fsr1++
 19331  1D81  0401               	iorwf	1,w
 19332  1D82  1D03               	btfss	3,2
 19333  1D83  2DAA               	goto	l9536
 19334                           
 19335                           ;locked_task.c: 161: data->delayTickCount = 0;
 19336  1D84  0857               	movf	locked_Main@data,w
 19337  1D85  0086               	movwf	6
 19338  1D86  0858               	movf	locked_Main@data+1,w
 19339  1D87  0087               	movwf	7
 19340  1D88  3141               	addfsr 1,1
 19341  1D89  3000               	movlw	0
 19342  1D8A  3FC0               	movwi [0]fsr1
 19343  1D8B  3FC1               	movwi [1]fsr1
 19344                           
 19345                           ;locked_task.c: 162: if (badge_locked){
 19346  1D8C  0021               	movlb	1	; select bank1
 19347  1D8D  0844               	movf	_badge_locked^(0+128),w
 19348  1D8E  1903               	btfsc	3,2
 19349  1D8F  2D9D               	goto	l9534
 19350                           
 19351                           ;locked_task.c: 164: data->state = LOCKED_UNLOCKING_STATE;
 19352  1D90  0020               	movlb	0	; select bank0
 19353  1D91  0857               	movf	locked_Main@data,w
 19354  1D92  3E0D               	addlw	13
 19355  1D93  00D4               	movwf	??_locked_Main
 19356  1D94  3000               	movlw	0
 19357  1D95  3D58               	addwfc	locked_Main@data+1,w
 19358  1D96  00D5               	movwf	??_locked_Main+1
 19359  1D97  0854               	movf	??_locked_Main,w
 19360  1D98  0086               	movwf	6
 19361  1D99  0855               	movf	??_locked_Main+1,w
 19362  1D9A  0087               	movwf	7
 19363  1D9B  3003               	movlw	3
 19364  1D9C  2DA9               	goto	L3
 19365  1D9D                     l9534:	
 19366                           ;locked_task.c: 165: }
 19367                           
 19368                           
 19369                           ;locked_task.c: 166: else {
 19370                           ;locked_task.c: 168: data->state = LOCKED_LOCKING_STATE;
 19371  1D9D  0020               	movlb	0	; select bank0
 19372  1D9E  0857               	movf	locked_Main@data,w
 19373  1D9F  3E0D               	addlw	13
 19374  1DA0  00D4               	movwf	??_locked_Main
 19375  1DA1  3000               	movlw	0
 19376  1DA2  3D58               	addwfc	locked_Main@data+1,w
 19377  1DA3  00D5               	movwf	??_locked_Main+1
 19378  1DA4  0854               	movf	??_locked_Main,w
 19379  1DA5  0086               	movwf	6
 19380  1DA6  0855               	movf	??_locked_Main+1,w
 19381  1DA7  0087               	movwf	7
 19382  1DA8  3001               	movlw	1
 19383  1DA9                     L3:	
 19384  1DA9  0081               	movwf	1
 19385  1DAA                     l9536:	
 19386                           
 19387                           ;locked_task.c: 169: }
 19388                           ;locked_task.c: 170: }
 19389                           ;locked_task.c: 171: data->holdCountA = 0;
 19390  1DAA  0857               	movf	locked_Main@data,w
 19391  1DAB  0086               	movwf	6
 19392  1DAC  0858               	movf	locked_Main@data+1,w
 19393  1DAD  0087               	movwf	7
 19394  1DAE  3143               	addfsr 1,3
 19395  1DAF  3000               	movlw	0
 19396  1DB0  3FC0               	movwi [0]fsr1
 19397  1DB1  3FC1               	movwi [1]fsr1
 19398                           
 19399                           ;locked_task.c: 172: data->holdCountB = 0;
 19400  1DB2  0857               	movf	locked_Main@data,w
 19401  1DB3  0086               	movwf	6
 19402  1DB4  0858               	movf	locked_Main@data+1,w
 19403  1DB5  0087               	movwf	7
 19404  1DB6  3145               	addfsr 1,5
 19405  1DB7  3000               	movlw	0
 19406  1DB8  3FC0               	movwi [0]fsr1
 19407  1DB9  3FC1               	movwi [1]fsr1
 19408                           
 19409                           ;locked_task.c: 173: data->holdCountX = 0;
 19410  1DBA  0857               	movf	locked_Main@data,w
 19411  1DBB  0086               	movwf	6
 19412  1DBC  0858               	movf	locked_Main@data+1,w
 19413  1DBD  0087               	movwf	7
 19414  1DBE  3147               	addfsr 1,7
 19415  1DBF  3000               	movlw	0
 19416  1DC0  3FC0               	movwi [0]fsr1
 19417  1DC1  3FC1               	movwi [1]fsr1
 19418                           
 19419                           ;locked_task.c: 174: data->holdCountY += 1;
 19420  1DC2  0857               	movf	locked_Main@data,w
 19421  1DC3  0086               	movwf	6
 19422  1DC4  0858               	movf	locked_Main@data+1,w
 19423  1DC5  0087               	movwf	7
 19424  1DC6  3149               	addfsr 1,9
 19425  1DC7  3001               	movlw	1
 19426  1DC8  0781               	addwf	1,f
 19427  1DC9  3141               	addfsr 1,1
 19428  1DCA  1803               	skipnc
 19429  1DCB  0A81               	incf	1,f
 19430                           
 19431                           ;locked_task.c: 175: data->noholdCount = 0;
 19432  1DCC  0857               	movf	locked_Main@data,w
 19433  1DCD  0086               	movwf	6
 19434  1DCE  0858               	movf	locked_Main@data+1,w
 19435  1DCF  0087               	movwf	7
 19436  1DD0  314B               	addfsr 1,11
 19437  1DD1  3000               	movlw	0
 19438  1DD2  3FC0               	movwi [0]fsr1
 19439  1DD3  3FC1               	movwi [1]fsr1
 19440                           
 19441                           ;locked_task.c: 176: break;
 19442  1DD4  0008               	return
 19443  1DD5                     l9544:	
 19444                           ;locked_task.c: 177: default:
 19445                           
 19446                           
 19447                           ;locked_task.c: 178: data->holdCountA = 0;
 19448  1DD5  0857               	movf	locked_Main@data,w
 19449  1DD6  0086               	movwf	6
 19450  1DD7  0858               	movf	locked_Main@data+1,w
 19451  1DD8  0087               	movwf	7
 19452  1DD9  3143               	addfsr 1,3
 19453  1DDA  3000               	movlw	0
 19454  1DDB  3FC0               	movwi [0]fsr1
 19455  1DDC  3FC1               	movwi [1]fsr1
 19456                           
 19457                           ;locked_task.c: 179: data->holdCountB = 0;
 19458  1DDD  0857               	movf	locked_Main@data,w
 19459  1DDE  0086               	movwf	6
 19460  1DDF  0858               	movf	locked_Main@data+1,w
 19461  1DE0  0087               	movwf	7
 19462  1DE1  3145               	addfsr 1,5
 19463  1DE2  3000               	movlw	0
 19464  1DE3  3FC0               	movwi [0]fsr1
 19465  1DE4  3FC1               	movwi [1]fsr1
 19466                           
 19467                           ;locked_task.c: 180: data->holdCountX = 0;
 19468  1DE5  0857               	movf	locked_Main@data,w
 19469  1DE6  0086               	movwf	6
 19470  1DE7  0858               	movf	locked_Main@data+1,w
 19471  1DE8  0087               	movwf	7
 19472  1DE9  3147               	addfsr 1,7
 19473  1DEA  3000               	movlw	0
 19474  1DEB  3FC0               	movwi [0]fsr1
 19475  1DEC  3FC1               	movwi [1]fsr1
 19476                           
 19477                           ;locked_task.c: 181: data->holdCountY = 0;
 19478  1DED  0857               	movf	locked_Main@data,w
 19479  1DEE  0086               	movwf	6
 19480  1DEF  0858               	movf	locked_Main@data+1,w
 19481  1DF0  0087               	movwf	7
 19482  1DF1  3149               	addfsr 1,9
 19483  1DF2  3000               	movlw	0
 19484  1DF3  3FC0               	movwi [0]fsr1
 19485  1DF4  3FC1               	movwi [1]fsr1
 19486                           
 19487                           ;locked_task.c: 182: data->noholdCount += 1;
 19488  1DF5  0857               	movf	locked_Main@data,w
 19489  1DF6  0086               	movwf	6
 19490  1DF7  0858               	movf	locked_Main@data+1,w
 19491  1DF8  0087               	movwf	7
 19492  1DF9  314B               	addfsr 1,11
 19493  1DFA  3001               	movlw	1
 19494  1DFB  0781               	addwf	1,f
 19495  1DFC  3141               	addfsr 1,1
 19496  1DFD  1803               	skipnc
 19497  1DFE  0A81               	incf	1,f
 19498                           
 19499                           ;locked_task.c: 183: }
 19500  1DFF  0008               	return
 19501  1E00                     l9548:	
 19502  1E00  0856               	movf	locked_Main@buttonPressed,w
 19503                           
 19504                           ; Switch size 1, requested type "space"
 19505                           ; Number of cases is 2, Range of values is 4 to 8
 19506                           ; switch strategies available:
 19507                           ; Name         Instructions Cycles
 19508                           ; simple_byte            7     4 (average)
 19509                           ; direct_byte           19     9 (fixed)
 19510                           ; jumptable            263     9 (fixed)
 19511                           ;	Chosen strategy is simple_byte
 19512  1E01  3A04               	xorlw	4	; case 4
 19513  1E02  1903               	skipnz
 19514  1E03  2D70               	goto	l9522
 19515  1E04  3A0C               	xorlw	12	; case 8
 19516  1E05  1903               	skipnz
 19517  1E06  2D7A               	goto	l9526
 19518  1E07  2DD5               	goto	l9544
 19519  1E08  0008               	return
 19520  1E09                     __end_of_locked_Main:	
 19521                           
 19522                           	psect	text17
 19523  1E09                     __ptext17:	
 19524 ;; *************** function _menu_Main *****************
 19525 ;; Defined at:
 19526 ;;		line 59 in file "menu_task.c"
 19527 ;; Parameters:    Size  Location     Type
 19528 ;;  taskData        2   50[BANK0 ] PTR void 
 19529 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19530 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19531 ;; Auto vars:     Size  Location     Type
 19532 ;;  data            2   55[BANK0 ] PTR struct t_menu_taskDa
 19533 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19534 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19535 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 19536 ;; Return value:  Size  Location     Type
 19537 ;;                  1    wreg      void 
 19538 ;; Registers used:
 19539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19540 ;; Tracked objects:
 19541 ;;		On entry : 0/0
 19542 ;;		On exit  : 0/0
 19543 ;;		Unchanged: 0/0
 19544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19545 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19546 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19547 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19548 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19549 ;;Total ram usage:        7 bytes
 19550 ;; Hardware stack levels used:    1
 19551 ;; Hardware stack levels required when called:   12
 19552 ;; This function calls:
 19553 ;;		_menu_clear
 19554 ;;		_menu_display_option
 19555 ;;		_menu_run_option
 19556 ;;		_nullifyBadge_buttonsGet
 19557 ;;		_slot_Setup
 19558 ;; This function is called by:
 19559 ;;		_main
 19560 ;;		_scheduler_TaskRun
 19561 ;; This function uses a non-reentrant model
 19562 ;;
 19563                           
 19564                           
 19565                           ;psect for function _menu_Main
 19566  1E09                     _menu_Main:	
 19567                           
 19568                           ;menu_task.c: 60: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 19569                           
 19570                           ;incstack = 0
 19571                           ; Regs used in _menu_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19572  1E09  0020               	movlb	0	; select bank0
 19573  1E0A  0853               	movf	menu_Main@taskData+1,w
 19574  1E0B  00D8               	movwf	menu_Main@data+1
 19575  1E0C  0852               	movf	menu_Main@taskData,w
 19576  1E0D  00D7               	movwf	menu_Main@data
 19577                           
 19578                           ;menu_task.c: 61: u8 buttonPressed;
 19579                           ;menu_task.c: 63: if ( currentTask != MENU_TASK ){
 19580  1E0E  0021               	movlb	1	; select bank1
 19581  1E0F  083A               	movf	_currentTask^(0+128),w
 19582  1E10  043B               	iorwf	(_currentTask+1)^(0+128),w
 19583  1E11  1903               	btfsc	3,2
 19584  1E12  2E8D               	goto	l8926
 19585                           
 19586                           ;menu_task.c: 65: buttonPressed = nullifyBadge_buttonsGet();
 19587  1E13  31A8  20A5  319E   	fcall	_nullifyBadge_buttonsGet
 19588  1E16  0020               	movlb	0	; select bank0
 19589  1E17  00D4               	movwf	??_menu_Main
 19590  1E18  0854               	movf	??_menu_Main,w
 19591  1E19  00D6               	movwf	menu_Main@buttonPressed
 19592                           
 19593                           ;menu_task.c: 66: switch (buttonPressed) {
 19594  1E1A  2E87               	goto	l8924
 19595  1E1B                     l8902:	
 19596                           ;menu_task.c: 67: case 1 | 2 | 8:
 19597                           
 19598                           
 19599                           ;menu_task.c: 68: currentTask = MENU_TASK;
 19600  1E1B  0021               	movlb	1	; select bank1
 19601  1E1C  01BA               	clrf	_currentTask^(0+128)
 19602  1E1D  01BB               	clrf	(_currentTask+1)^(0+128)
 19603                           
 19604                           ;menu_task.c: 69: menu_clear(data);
 19605  1E1E  0020               	movlb	0	; select bank0
 19606  1E1F  0858               	movf	menu_Main@data+1,w
 19607  1E20  00BA               	movwf	menu_clear@data+1
 19608  1E21  0857               	movf	menu_Main@data,w
 19609  1E22  00B9               	movwf	menu_clear@data
 19610  1E23  31AC  245C  319E   	fcall	_menu_clear
 19611                           
 19612                           ;menu_task.c: 72: slot_Setup(slot_taskData);
 19613  1E26  0021               	movlb	1	; select bank1
 19614  1E27  083D               	movf	(_slot_taskData+1)^(0+128),w
 19615  1E28  0020               	movlb	0	; select bank0
 19616  1E29  00B0               	movwf	slot_Setup@taskData+1
 19617  1E2A  0021               	movlb	1	; select bank1
 19618  1E2B  083C               	movf	_slot_taskData^(0+128),w
 19619  1E2C  0020               	movlb	0	; select bank0
 19620  1E2D  00AF               	movwf	slot_Setup@taskData
 19621  1E2E  31AD  25D5  319E   	fcall	_slot_Setup
 19622                           
 19623                           ;menu_task.c: 75: data->holdCountA = 1;
 19624  1E31  0020               	movlb	0	; select bank0
 19625  1E32  0857               	movf	menu_Main@data,w
 19626  1E33  0086               	movwf	6
 19627  1E34  0858               	movf	menu_Main@data+1,w
 19628  1E35  0087               	movwf	7
 19629  1E36  3144               	addfsr 1,4
 19630  1E37  3001               	movlw	1
 19631  1E38  3FC0               	movwi [0]fsr1
 19632  1E39  3000               	movlw	0
 19633  1E3A  3FC1               	movwi [1]fsr1
 19634                           
 19635                           ;menu_task.c: 76: data->holdCountB = 1;
 19636  1E3B  0857               	movf	menu_Main@data,w
 19637  1E3C  0086               	movwf	6
 19638  1E3D  0858               	movf	menu_Main@data+1,w
 19639  1E3E  0087               	movwf	7
 19640  1E3F  3146               	addfsr 1,6
 19641  1E40  3001               	movlw	1
 19642  1E41  3FC0               	movwi [0]fsr1
 19643  1E42  3000               	movlw	0
 19644  1E43  3FC1               	movwi [1]fsr1
 19645                           
 19646                           ;menu_task.c: 77: data->holdCountX = 1;
 19647  1E44  0857               	movf	menu_Main@data,w
 19648  1E45  0086               	movwf	6
 19649  1E46  0858               	movf	menu_Main@data+1,w
 19650  1E47  0087               	movwf	7
 19651  1E48  3148               	addfsr 1,8
 19652  1E49  3001               	movlw	1
 19653  1E4A  3FC0               	movwi [0]fsr1
 19654  1E4B  3000               	movlw	0
 19655  1E4C  3FC1               	movwi [1]fsr1
 19656                           
 19657                           ;menu_task.c: 78: data->holdCountY = 1;
 19658  1E4D  0857               	movf	menu_Main@data,w
 19659  1E4E  0086               	movwf	6
 19660  1E4F  0858               	movf	menu_Main@data+1,w
 19661  1E50  0087               	movwf	7
 19662  1E51  314A               	addfsr 1,10
 19663  1E52  3001               	movlw	1
 19664  1E53  3FC0               	movwi [0]fsr1
 19665  1E54  3000               	movlw	0
 19666  1E55  3FC1               	movwi [1]fsr1
 19667                           
 19668                           ;menu_task.c: 80: menu_option_idx = 0;
 19669  1E56  0021               	movlb	1	; select bank1
 19670  1E57  01B6               	clrf	_menu_option_idx^(0+128)
 19671  1E58  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 19672                           
 19673                           ;menu_task.c: 81: menu_display_option(data);
 19674  1E59  0020               	movlb	0	; select bank0
 19675  1E5A  0858               	movf	menu_Main@data+1,w
 19676  1E5B  00CD               	movwf	menu_display_option@data+1
 19677  1E5C  0857               	movf	menu_Main@data,w
 19678  1E5D  00CC               	movwf	menu_display_option@data
 19679  1E5E  31AE  26D9         	fcall	_menu_display_option
 19680                           
 19681                           ;menu_task.c: 82: break;
 19682  1E60  0008               	return
 19683  1E61                     l8920:	
 19684                           ;menu_task.c: 83: default:
 19685                           
 19686                           
 19687                           ;menu_task.c: 85: data->holdCountA = 1;
 19688  1E61  0020               	movlb	0	; select bank0
 19689  1E62  0857               	movf	menu_Main@data,w
 19690  1E63  0086               	movwf	6
 19691  1E64  0858               	movf	menu_Main@data+1,w
 19692  1E65  0087               	movwf	7
 19693  1E66  3144               	addfsr 1,4
 19694  1E67  3001               	movlw	1
 19695  1E68  3FC0               	movwi [0]fsr1
 19696  1E69  3000               	movlw	0
 19697  1E6A  3FC1               	movwi [1]fsr1
 19698                           
 19699                           ;menu_task.c: 86: data->holdCountB = 1;
 19700  1E6B  0857               	movf	menu_Main@data,w
 19701  1E6C  0086               	movwf	6
 19702  1E6D  0858               	movf	menu_Main@data+1,w
 19703  1E6E  0087               	movwf	7
 19704  1E6F  3146               	addfsr 1,6
 19705  1E70  3001               	movlw	1
 19706  1E71  3FC0               	movwi [0]fsr1
 19707  1E72  3000               	movlw	0
 19708  1E73  3FC1               	movwi [1]fsr1
 19709                           
 19710                           ;menu_task.c: 87: data->holdCountX = 1;
 19711  1E74  0857               	movf	menu_Main@data,w
 19712  1E75  0086               	movwf	6
 19713  1E76  0858               	movf	menu_Main@data+1,w
 19714  1E77  0087               	movwf	7
 19715  1E78  3148               	addfsr 1,8
 19716  1E79  3001               	movlw	1
 19717  1E7A  3FC0               	movwi [0]fsr1
 19718  1E7B  3000               	movlw	0
 19719  1E7C  3FC1               	movwi [1]fsr1
 19720                           
 19721                           ;menu_task.c: 88: data->holdCountY = 1;
 19722  1E7D  0857               	movf	menu_Main@data,w
 19723  1E7E  0086               	movwf	6
 19724  1E7F  0858               	movf	menu_Main@data+1,w
 19725  1E80  0087               	movwf	7
 19726  1E81  314A               	addfsr 1,10
 19727  1E82  3001               	movlw	1
 19728  1E83  3FC0               	movwi [0]fsr1
 19729  1E84  3000               	movlw	0
 19730  1E85  3FC1               	movwi [1]fsr1
 19731                           
 19732                           ;menu_task.c: 90: }
 19733                           
 19734                           ;menu_task.c: 89: break;
 19735  1E86  0008               	return
 19736  1E87                     l8924:	
 19737  1E87  0856               	movf	menu_Main@buttonPressed,w
 19738                           
 19739                           ; Switch size 1, requested type "space"
 19740                           ; Number of cases is 1, Range of values is 11 to 11
 19741                           ; switch strategies available:
 19742                           ; Name         Instructions Cycles
 19743                           ; simple_byte            4     3 (average)
 19744                           ; direct_byte           11     9 (fixed)
 19745                           ; jumptable            263     9 (fixed)
 19746                           ;	Chosen strategy is simple_byte
 19747  1E88  3A0B               	xorlw	11	; case 11
 19748  1E89  1903               	skipnz
 19749  1E8A  2E1B               	goto	l8902
 19750  1E8B  2E61               	goto	l8920
 19751                           
 19752                           ;menu_task.c: 91: return;
 19753  1E8C  0008               	return
 19754  1E8D                     l8926:	
 19755                           
 19756                           ;menu_task.c: 92: }
 19757                           ;menu_task.c: 94: buttonPressed = nullifyBadge_buttonsGet();
 19758  1E8D  31A8  20A5  319E   	fcall	_nullifyBadge_buttonsGet
 19759  1E90  0020               	movlb	0	; select bank0
 19760  1E91  00D4               	movwf	??_menu_Main
 19761  1E92  0854               	movf	??_menu_Main,w
 19762  1E93  00D6               	movwf	menu_Main@buttonPressed
 19763                           
 19764                           ;menu_task.c: 95: switch (buttonPressed) {
 19765  1E94  2FEE               	goto	l9010
 19766  1E95                     l8928:	
 19767                           ;menu_task.c: 96: case 1:
 19768                           
 19769                           
 19770                           ;menu_task.c: 98: if (data->holdCountA == 0){
 19771  1E95  0857               	movf	menu_Main@data,w
 19772  1E96  0086               	movwf	6
 19773  1E97  0858               	movf	menu_Main@data+1,w
 19774  1E98  0087               	movwf	7
 19775  1E99  3144               	addfsr 1,4
 19776  1E9A  0016               	moviw fsr1++
 19777  1E9B  0401               	iorwf	1,w
 19778  1E9C  1D03               	btfss	3,2
 19779  1E9D  2EAE               	goto	l8936
 19780                           
 19781                           ;menu_task.c: 100: if (menu_option_idx == 0){
 19782  1E9E  0021               	movlb	1	; select bank1
 19783  1E9F  0836               	movf	_menu_option_idx^(0+128),w
 19784  1EA0  0437               	iorwf	(_menu_option_idx+1)^(0+128),w
 19785  1EA1  1D03               	btfss	3,2
 19786  1EA2  2EAA               	goto	l8934
 19787                           
 19788                           ;menu_task.c: 101: menu_option_idx = menu_option_size - 1;
 19789  1EA3  0834               	movf	_menu_option_size^(0+128),w
 19790  1EA4  3EFF               	addlw	255
 19791  1EA5  00B6               	movwf	_menu_option_idx^(0+128)
 19792  1EA6  30FF               	movlw	255
 19793  1EA7  3D35               	addwfc	(_menu_option_size+1)^(0+128),w
 19794  1EA8  00B7               	movwf	(_menu_option_idx+1)^(0+128)
 19795                           
 19796                           ;menu_task.c: 102: }
 19797  1EA9  2EAE               	goto	l8936
 19798  1EAA                     l8934:	
 19799                           
 19800                           ;menu_task.c: 103: else {
 19801                           ;menu_task.c: 104: menu_option_idx -= 1;
 19802  1EAA  3001               	movlw	1
 19803  1EAB  02B6               	subwf	_menu_option_idx^(0+128),f
 19804  1EAC  3000               	movlw	0
 19805  1EAD  3BB7               	subwfb	(_menu_option_idx+1)^(0+128),f
 19806  1EAE                     l8936:	
 19807                           
 19808                           ;menu_task.c: 105: }
 19809                           ;menu_task.c: 106: }
 19810                           ;menu_task.c: 107: menu_display_option(data);
 19811  1EAE  0020               	movlb	0	; select bank0
 19812  1EAF  0858               	movf	menu_Main@data+1,w
 19813  1EB0  00CD               	movwf	menu_display_option@data+1
 19814  1EB1  0857               	movf	menu_Main@data,w
 19815  1EB2  00CC               	movwf	menu_display_option@data
 19816  1EB3  31AE  26D9  319E   	fcall	_menu_display_option
 19817                           
 19818                           ;menu_task.c: 108: data->holdCountA += 1;
 19819  1EB6  0020               	movlb	0	; select bank0
 19820  1EB7  0857               	movf	menu_Main@data,w
 19821  1EB8  0086               	movwf	6
 19822  1EB9  0858               	movf	menu_Main@data+1,w
 19823  1EBA  0087               	movwf	7
 19824  1EBB  3144               	addfsr 1,4
 19825  1EBC  3001               	movlw	1
 19826  1EBD  0781               	addwf	1,f
 19827  1EBE  3141               	addfsr 1,1
 19828  1EBF  1803               	skipnc
 19829  1EC0  0A81               	incf	1,f
 19830                           
 19831                           ;menu_task.c: 109: data->holdCountB = 0;
 19832  1EC1  0857               	movf	menu_Main@data,w
 19833  1EC2  0086               	movwf	6
 19834  1EC3  0858               	movf	menu_Main@data+1,w
 19835  1EC4  0087               	movwf	7
 19836  1EC5  3146               	addfsr 1,6
 19837  1EC6  3000               	movlw	0
 19838  1EC7  3FC0               	movwi [0]fsr1
 19839  1EC8  3FC1               	movwi [1]fsr1
 19840                           
 19841                           ;menu_task.c: 110: data->holdCountX = 0;
 19842  1EC9  0857               	movf	menu_Main@data,w
 19843  1ECA  0086               	movwf	6
 19844  1ECB  0858               	movf	menu_Main@data+1,w
 19845  1ECC  0087               	movwf	7
 19846  1ECD  3148               	addfsr 1,8
 19847  1ECE  3000               	movlw	0
 19848  1ECF  3FC0               	movwi [0]fsr1
 19849  1ED0  3FC1               	movwi [1]fsr1
 19850                           
 19851                           ;menu_task.c: 111: data->holdCountY = 0;
 19852  1ED1  0857               	movf	menu_Main@data,w
 19853  1ED2  0086               	movwf	6
 19854  1ED3  0858               	movf	menu_Main@data+1,w
 19855  1ED4  0087               	movwf	7
 19856  1ED5  314A               	addfsr 1,10
 19857  1ED6  3000               	movlw	0
 19858  1ED7  3FC0               	movwi [0]fsr1
 19859  1ED8  3FC1               	movwi [1]fsr1
 19860                           
 19861                           ;menu_task.c: 112: data->noholdCount = 0;
 19862  1ED9  0857               	movf	menu_Main@data,w
 19863  1EDA  0086               	movwf	6
 19864  1EDB  0858               	movf	menu_Main@data+1,w
 19865  1EDC  0087               	movwf	7
 19866  1EDD  314C               	addfsr 1,12
 19867  1EDE  3000               	movlw	0
 19868  1EDF  3FC0               	movwi [0]fsr1
 19869  1EE0  3FC1               	movwi [1]fsr1
 19870                           
 19871                           ;menu_task.c: 113: break;
 19872  1EE1  0008               	return
 19873  1EE2                     l8948:	
 19874                           ;menu_task.c: 114: case 2:
 19875                           
 19876                           
 19877                           ;menu_task.c: 116: if (data->holdCountB == 0){
 19878  1EE2  0857               	movf	menu_Main@data,w
 19879  1EE3  0086               	movwf	6
 19880  1EE4  0858               	movf	menu_Main@data+1,w
 19881  1EE5  0087               	movwf	7
 19882  1EE6  3146               	addfsr 1,6
 19883  1EE7  0016               	moviw fsr1++
 19884  1EE8  0401               	iorwf	1,w
 19885  1EE9  1D03               	btfss	3,2
 19886  1EEA  2F0A               	goto	l8956
 19887                           
 19888                           ;menu_task.c: 118: if (menu_option_idx == menu_option_size - 1){
 19889  1EEB  0021               	movlb	1	; select bank1
 19890  1EEC  0834               	movf	_menu_option_size^(0+128),w
 19891  1EED  3EFF               	addlw	255
 19892  1EEE  0020               	movlb	0	; select bank0
 19893  1EEF  00D4               	movwf	??_menu_Main
 19894  1EF0  30FF               	movlw	255
 19895  1EF1  0021               	movlb	1	; select bank1
 19896  1EF2  3D35               	addwfc	(_menu_option_size+1)^(0+128),w
 19897  1EF3  0020               	movlb	0	; select bank0
 19898  1EF4  00D5               	movwf	??_menu_Main+1
 19899  1EF5  0021               	movlb	1	; select bank1
 19900  1EF6  0837               	movf	(_menu_option_idx+1)^(0+128),w
 19901  1EF7  0020               	movlb	0	; select bank0
 19902  1EF8  0655               	xorwf	??_menu_Main+1,w
 19903  1EF9  1D03               	skipz
 19904  1EFA  2EFF               	goto	u5515
 19905  1EFB  0021               	movlb	1	; select bank1
 19906  1EFC  0836               	movf	_menu_option_idx^(0+128),w
 19907  1EFD  0020               	movlb	0	; select bank0
 19908  1EFE  0654               	xorwf	??_menu_Main,w
 19909  1EFF                     u5515:	
 19910  1EFF  1D03               	skipz
 19911  1F00  2F05               	goto	l8954
 19912                           
 19913                           ;menu_task.c: 119: menu_option_idx = 0;
 19914  1F01  0021               	movlb	1	; select bank1
 19915  1F02  01B6               	clrf	_menu_option_idx^(0+128)
 19916  1F03  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 19917                           
 19918                           ;menu_task.c: 120: }
 19919  1F04  2F0A               	goto	l8956
 19920  1F05                     l8954:	
 19921                           
 19922                           ;menu_task.c: 121: else {
 19923                           ;menu_task.c: 122: menu_option_idx += 1;
 19924  1F05  3001               	movlw	1
 19925  1F06  0021               	movlb	1	; select bank1
 19926  1F07  07B6               	addwf	_menu_option_idx^(0+128),f
 19927  1F08  3000               	movlw	0
 19928  1F09  3DB7               	addwfc	(_menu_option_idx+1)^(0+128),f
 19929  1F0A                     l8956:	
 19930                           
 19931                           ;menu_task.c: 123: }
 19932                           ;menu_task.c: 124: }
 19933                           ;menu_task.c: 125: menu_display_option(data);
 19934  1F0A  0020               	movlb	0	; select bank0
 19935  1F0B  0858               	movf	menu_Main@data+1,w
 19936  1F0C  00CD               	movwf	menu_display_option@data+1
 19937  1F0D  0857               	movf	menu_Main@data,w
 19938  1F0E  00CC               	movwf	menu_display_option@data
 19939  1F0F  31AE  26D9  319E   	fcall	_menu_display_option
 19940                           
 19941                           ;menu_task.c: 126: data->holdCountA = 0;
 19942  1F12  0020               	movlb	0	; select bank0
 19943  1F13  0857               	movf	menu_Main@data,w
 19944  1F14  0086               	movwf	6
 19945  1F15  0858               	movf	menu_Main@data+1,w
 19946  1F16  0087               	movwf	7
 19947  1F17  3144               	addfsr 1,4
 19948  1F18  3000               	movlw	0
 19949  1F19  3FC0               	movwi [0]fsr1
 19950  1F1A  3FC1               	movwi [1]fsr1
 19951                           
 19952                           ;menu_task.c: 127: data->holdCountB += 1;
 19953  1F1B  0857               	movf	menu_Main@data,w
 19954  1F1C  0086               	movwf	6
 19955  1F1D  0858               	movf	menu_Main@data+1,w
 19956  1F1E  0087               	movwf	7
 19957  1F1F  3146               	addfsr 1,6
 19958  1F20  3001               	movlw	1
 19959  1F21  0781               	addwf	1,f
 19960  1F22  3141               	addfsr 1,1
 19961  1F23  1803               	skipnc
 19962  1F24  0A81               	incf	1,f
 19963                           
 19964                           ;menu_task.c: 128: data->holdCountX = 0;
 19965  1F25  0857               	movf	menu_Main@data,w
 19966  1F26  0086               	movwf	6
 19967  1F27  0858               	movf	menu_Main@data+1,w
 19968  1F28  0087               	movwf	7
 19969  1F29  3148               	addfsr 1,8
 19970  1F2A  3000               	movlw	0
 19971  1F2B  3FC0               	movwi [0]fsr1
 19972  1F2C  3FC1               	movwi [1]fsr1
 19973                           
 19974                           ;menu_task.c: 129: data->holdCountY = 0;
 19975  1F2D  0857               	movf	menu_Main@data,w
 19976  1F2E  0086               	movwf	6
 19977  1F2F  0858               	movf	menu_Main@data+1,w
 19978  1F30  0087               	movwf	7
 19979  1F31  314A               	addfsr 1,10
 19980  1F32  3000               	movlw	0
 19981  1F33  3FC0               	movwi [0]fsr1
 19982  1F34  3FC1               	movwi [1]fsr1
 19983                           
 19984                           ;menu_task.c: 130: data->noholdCount = 0;
 19985  1F35  0857               	movf	menu_Main@data,w
 19986  1F36  0086               	movwf	6
 19987  1F37  0858               	movf	menu_Main@data+1,w
 19988  1F38  0087               	movwf	7
 19989  1F39  314C               	addfsr 1,12
 19990  1F3A  3000               	movlw	0
 19991  1F3B  3FC0               	movwi [0]fsr1
 19992  1F3C  3FC1               	movwi [1]fsr1
 19993                           
 19994                           ;menu_task.c: 131: break;
 19995  1F3D  0008               	return
 19996  1F3E                     l8968:	
 19997                           ;menu_task.c: 132: case 4:
 19998                           
 19999                           
 20000                           ;menu_task.c: 133: if (data->holdCountX == 0){
 20001  1F3E  0857               	movf	menu_Main@data,w
 20002  1F3F  0086               	movwf	6
 20003  1F40  0858               	movf	menu_Main@data+1,w
 20004  1F41  0087               	movwf	7
 20005  1F42  3148               	addfsr 1,8
 20006  1F43  0016               	moviw fsr1++
 20007  1F44  0401               	iorwf	1,w
 20008  1F45  1D03               	btfss	3,2
 20009  1F46  2F53               	goto	l8974
 20010                           
 20011                           ;menu_task.c: 135: menu_clear(data);
 20012  1F47  0858               	movf	menu_Main@data+1,w
 20013  1F48  00BA               	movwf	menu_clear@data+1
 20014  1F49  0857               	movf	menu_Main@data,w
 20015  1F4A  00B9               	movwf	menu_clear@data
 20016  1F4B  31AC  245C  319E   	fcall	_menu_clear
 20017                           
 20018                           ;menu_task.c: 136: currentTask = FLASHY_TASK;
 20019  1F4E  3002               	movlw	2
 20020  1F4F  0021               	movlb	1	; select bank1
 20021  1F50  00BA               	movwf	_currentTask^(0+128)
 20022  1F51  3000               	movlw	0
 20023  1F52  00BB               	movwf	(_currentTask^(0+128)+1)
 20024  1F53                     l8974:	
 20025                           
 20026                           ;menu_task.c: 137: }
 20027                           ;menu_task.c: 138: data->holdCountA = 0;
 20028  1F53  0020               	movlb	0	; select bank0
 20029  1F54  0857               	movf	menu_Main@data,w
 20030  1F55  0086               	movwf	6
 20031  1F56  0858               	movf	menu_Main@data+1,w
 20032  1F57  0087               	movwf	7
 20033  1F58  3144               	addfsr 1,4
 20034  1F59  3000               	movlw	0
 20035  1F5A  3FC0               	movwi [0]fsr1
 20036  1F5B  3FC1               	movwi [1]fsr1
 20037                           
 20038                           ;menu_task.c: 139: data->holdCountB = 0;
 20039  1F5C  0857               	movf	menu_Main@data,w
 20040  1F5D  0086               	movwf	6
 20041  1F5E  0858               	movf	menu_Main@data+1,w
 20042  1F5F  0087               	movwf	7
 20043  1F60  3146               	addfsr 1,6
 20044  1F61  3000               	movlw	0
 20045  1F62  3FC0               	movwi [0]fsr1
 20046  1F63  3FC1               	movwi [1]fsr1
 20047                           
 20048                           ;menu_task.c: 140: data->holdCountX += 1;
 20049  1F64  0857               	movf	menu_Main@data,w
 20050  1F65  0086               	movwf	6
 20051  1F66  0858               	movf	menu_Main@data+1,w
 20052  1F67  0087               	movwf	7
 20053  1F68  3148               	addfsr 1,8
 20054  1F69  3001               	movlw	1
 20055  1F6A  0781               	addwf	1,f
 20056  1F6B  3141               	addfsr 1,1
 20057  1F6C  1803               	skipnc
 20058  1F6D  0A81               	incf	1,f
 20059                           
 20060                           ;menu_task.c: 141: data->holdCountY = 0;
 20061  1F6E  0857               	movf	menu_Main@data,w
 20062  1F6F  0086               	movwf	6
 20063  1F70  0858               	movf	menu_Main@data+1,w
 20064  1F71  0087               	movwf	7
 20065  1F72  314A               	addfsr 1,10
 20066  1F73  3000               	movlw	0
 20067  1F74  3FC0               	movwi [0]fsr1
 20068  1F75  3FC1               	movwi [1]fsr1
 20069                           
 20070                           ;menu_task.c: 142: data->noholdCount = 0;
 20071  1F76  0857               	movf	menu_Main@data,w
 20072  1F77  0086               	movwf	6
 20073  1F78  0858               	movf	menu_Main@data+1,w
 20074  1F79  0087               	movwf	7
 20075  1F7A  314C               	addfsr 1,12
 20076  1F7B  3000               	movlw	0
 20077  1F7C  3FC0               	movwi [0]fsr1
 20078  1F7D  3FC1               	movwi [1]fsr1
 20079                           
 20080                           ;menu_task.c: 143: break;
 20081  1F7E  0008               	return
 20082  1F7F                     l8984:	
 20083                           ;menu_task.c: 144: case 8:
 20084                           
 20085                           
 20086                           ;menu_task.c: 145: if (data->holdCountY == 0){
 20087  1F7F  0857               	movf	menu_Main@data,w
 20088  1F80  0086               	movwf	6
 20089  1F81  0858               	movf	menu_Main@data+1,w
 20090  1F82  0087               	movwf	7
 20091  1F83  314A               	addfsr 1,10
 20092  1F84  0016               	moviw fsr1++
 20093  1F85  0401               	iorwf	1,w
 20094  1F86  1D03               	btfss	3,2
 20095  1F87  2F8F               	goto	l8988
 20096                           
 20097                           ;menu_task.c: 146: menu_run_option(data);
 20098  1F88  0858               	movf	menu_Main@data+1,w
 20099  1F89  00BC               	movwf	menu_run_option@data+1
 20100  1F8A  0857               	movf	menu_Main@data,w
 20101  1F8B  00BB               	movwf	menu_run_option@data
 20102  1F8C  31AC  24EB  319E   	fcall	_menu_run_option
 20103  1F8F                     l8988:	
 20104                           
 20105                           ;menu_task.c: 147: }
 20106                           ;menu_task.c: 148: data->holdCountA = 0;
 20107  1F8F  0020               	movlb	0	; select bank0
 20108  1F90  0857               	movf	menu_Main@data,w
 20109  1F91  0086               	movwf	6
 20110  1F92  0858               	movf	menu_Main@data+1,w
 20111  1F93  0087               	movwf	7
 20112  1F94  3144               	addfsr 1,4
 20113  1F95  3000               	movlw	0
 20114  1F96  3FC0               	movwi [0]fsr1
 20115  1F97  3FC1               	movwi [1]fsr1
 20116                           
 20117                           ;menu_task.c: 149: data->holdCountB = 0;
 20118  1F98  0857               	movf	menu_Main@data,w
 20119  1F99  0086               	movwf	6
 20120  1F9A  0858               	movf	menu_Main@data+1,w
 20121  1F9B  0087               	movwf	7
 20122  1F9C  3146               	addfsr 1,6
 20123  1F9D  3000               	movlw	0
 20124  1F9E  3FC0               	movwi [0]fsr1
 20125  1F9F  3FC1               	movwi [1]fsr1
 20126                           
 20127                           ;menu_task.c: 150: data->holdCountX = 0;
 20128  1FA0  0857               	movf	menu_Main@data,w
 20129  1FA1  0086               	movwf	6
 20130  1FA2  0858               	movf	menu_Main@data+1,w
 20131  1FA3  0087               	movwf	7
 20132  1FA4  3148               	addfsr 1,8
 20133  1FA5  3000               	movlw	0
 20134  1FA6  3FC0               	movwi [0]fsr1
 20135  1FA7  3FC1               	movwi [1]fsr1
 20136                           
 20137                           ;menu_task.c: 151: data->holdCountY += 1;
 20138  1FA8  0857               	movf	menu_Main@data,w
 20139  1FA9  0086               	movwf	6
 20140  1FAA  0858               	movf	menu_Main@data+1,w
 20141  1FAB  0087               	movwf	7
 20142  1FAC  314A               	addfsr 1,10
 20143  1FAD  3001               	movlw	1
 20144  1FAE  0781               	addwf	1,f
 20145  1FAF  3141               	addfsr 1,1
 20146  1FB0  1803               	skipnc
 20147  1FB1  0A81               	incf	1,f
 20148                           
 20149                           ;menu_task.c: 152: data->noholdCount = 0;
 20150  1FB2  0857               	movf	menu_Main@data,w
 20151  1FB3  0086               	movwf	6
 20152  1FB4  0858               	movf	menu_Main@data+1,w
 20153  1FB5  0087               	movwf	7
 20154  1FB6  314C               	addfsr 1,12
 20155  1FB7  3000               	movlw	0
 20156  1FB8  3FC0               	movwi [0]fsr1
 20157  1FB9  3FC1               	movwi [1]fsr1
 20158                           
 20159                           ;menu_task.c: 153: break;
 20160  1FBA  0008               	return
 20161  1FBB                     l8998:	
 20162                           ;menu_task.c: 155: default:
 20163                           
 20164                           ;menu_task.c: 154: case 1 | 2 | 8:
 20165                           
 20166                           
 20167                           ;menu_task.c: 156: menu_display_option(data);
 20168  1FBB  0858               	movf	menu_Main@data+1,w
 20169  1FBC  00CD               	movwf	menu_display_option@data+1
 20170  1FBD  0857               	movf	menu_Main@data,w
 20171  1FBE  00CC               	movwf	menu_display_option@data
 20172  1FBF  31AE  26D9  319E   	fcall	_menu_display_option
 20173                           
 20174                           ;menu_task.c: 157: data->holdCountA = 0;
 20175  1FC2  0020               	movlb	0	; select bank0
 20176  1FC3  0857               	movf	menu_Main@data,w
 20177  1FC4  0086               	movwf	6
 20178  1FC5  0858               	movf	menu_Main@data+1,w
 20179  1FC6  0087               	movwf	7
 20180  1FC7  3144               	addfsr 1,4
 20181  1FC8  3000               	movlw	0
 20182  1FC9  3FC0               	movwi [0]fsr1
 20183  1FCA  3FC1               	movwi [1]fsr1
 20184                           
 20185                           ;menu_task.c: 158: data->holdCountB = 0;
 20186  1FCB  0857               	movf	menu_Main@data,w
 20187  1FCC  0086               	movwf	6
 20188  1FCD  0858               	movf	menu_Main@data+1,w
 20189  1FCE  0087               	movwf	7
 20190  1FCF  3146               	addfsr 1,6
 20191  1FD0  3000               	movlw	0
 20192  1FD1  3FC0               	movwi [0]fsr1
 20193  1FD2  3FC1               	movwi [1]fsr1
 20194                           
 20195                           ;menu_task.c: 159: data->holdCountX = 0;
 20196  1FD3  0857               	movf	menu_Main@data,w
 20197  1FD4  0086               	movwf	6
 20198  1FD5  0858               	movf	menu_Main@data+1,w
 20199  1FD6  0087               	movwf	7
 20200  1FD7  3148               	addfsr 1,8
 20201  1FD8  3000               	movlw	0
 20202  1FD9  3FC0               	movwi [0]fsr1
 20203  1FDA  3FC1               	movwi [1]fsr1
 20204                           
 20205                           ;menu_task.c: 160: data->holdCountY = 0;
 20206  1FDB  0857               	movf	menu_Main@data,w
 20207  1FDC  0086               	movwf	6
 20208  1FDD  0858               	movf	menu_Main@data+1,w
 20209  1FDE  0087               	movwf	7
 20210  1FDF  314A               	addfsr 1,10
 20211  1FE0  3000               	movlw	0
 20212  1FE1  3FC0               	movwi [0]fsr1
 20213  1FE2  3FC1               	movwi [1]fsr1
 20214                           
 20215                           ;menu_task.c: 161: data->noholdCount += 1;
 20216  1FE3  0857               	movf	menu_Main@data,w
 20217  1FE4  0086               	movwf	6
 20218  1FE5  0858               	movf	menu_Main@data+1,w
 20219  1FE6  0087               	movwf	7
 20220  1FE7  314C               	addfsr 1,12
 20221  1FE8  3001               	movlw	1
 20222  1FE9  0781               	addwf	1,f
 20223  1FEA  3141               	addfsr 1,1
 20224  1FEB  1803               	skipnc
 20225  1FEC  0A81               	incf	1,f
 20226                           
 20227                           ;menu_task.c: 162: }
 20228  1FED  0008               	return
 20229  1FEE                     l9010:	
 20230  1FEE  0856               	movf	menu_Main@buttonPressed,w
 20231                           
 20232                           ; Switch size 1, requested type "space"
 20233                           ; Number of cases is 5, Range of values is 1 to 11
 20234                           ; switch strategies available:
 20235                           ; Name         Instructions Cycles
 20236                           ; simple_byte           16     9 (average)
 20237                           ; direct_byte           31     9 (fixed)
 20238                           ; jumptable            263     9 (fixed)
 20239                           ;	Chosen strategy is simple_byte
 20240  1FEF  3A01               	xorlw	1	; case 1
 20241  1FF0  1903               	skipnz
 20242  1FF1  2E95               	goto	l8928
 20243  1FF2  3A03               	xorlw	3	; case 2
 20244  1FF3  1903               	skipnz
 20245  1FF4  2EE2               	goto	l8948
 20246  1FF5  3A06               	xorlw	6	; case 4
 20247  1FF6  1903               	skipnz
 20248  1FF7  2F3E               	goto	l8968
 20249  1FF8  3A0C               	xorlw	12	; case 8
 20250  1FF9  1903               	skipnz
 20251  1FFA  2F7F               	goto	l8984
 20252  1FFB  3A03               	xorlw	3	; case 11
 20253  1FFC  1903               	skipnz
 20254  1FFD  2FBB               	goto	l8998
 20255  1FFE  2FBB               	goto	l8998
 20256  1FFF  0008               	return
 20257  2000                     __end_of_menu_Main:	
 20258                           
 20259                           	psect	text18
 20260  0819                     __ptext18:	
 20261 ;; *************** function _flashy_Main *****************
 20262 ;; Defined at:
 20263 ;;		line 122 in file "flashy_task.c"
 20264 ;; Parameters:    Size  Location     Type
 20265 ;;  taskData        2   50[BANK0 ] PTR void 
 20266 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20267 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20268 ;; Auto vars:     Size  Location     Type
 20269 ;;  hit_counter     6   54[BANK0 ] unsigned char [6]
 20270 ;;  data            2   62[BANK0 ] PTR struct t_flashy_task
 20271 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20272 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20273 ;;  buttonPresse    2   60[BANK0 ] unsigned int 
 20274 ;; Return value:  Size  Location     Type
 20275 ;;                  1    wreg      void 
 20276 ;; Registers used:
 20277 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20278 ;; Tracked objects:
 20279 ;;		On entry : 0/0
 20280 ;;		On exit  : 0/0
 20281 ;;		Unchanged: 0/0
 20282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20283 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20284 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20285 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20286 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20287 ;;Total ram usage:       14 bytes
 20288 ;; Hardware stack levels used:    1
 20289 ;; Hardware stack levels required when called:   11
 20290 ;; This function calls:
 20291 ;;		_flashy_display_option
 20292 ;;		_led_Parody
 20293 ;;		_led_circle
 20294 ;;		_led_curtain
 20295 ;;		_led_rand
 20296 ;;		_led_roundabout
 20297 ;;		_let_alternate
 20298 ;;		_marquee
 20299 ;;		_nullifyBadge_buttonsGet
 20300 ;;		_nullifyBadge_irGet
 20301 ;;		_nullifyBadge_irTxClr
 20302 ;;		_nullifyBadge_irTxRegister
 20303 ;;		_nullifyBadge_irTxRelease
 20304 ;;		_nullifyBadge_irTxSet
 20305 ;;		_nullifyBadge_segDisplayForceUpdate
 20306 ;;		_nullifyBadge_segDisplayPutStr
 20307 ;;		_nullifyBadge_userLedsSet
 20308 ;;		_sprintf
 20309 ;; This function is called by:
 20310 ;;		_main
 20311 ;;		_scheduler_TaskRun
 20312 ;; This function uses a non-reentrant model
 20313 ;;
 20314                           
 20315                           
 20316                           ;psect for function _flashy_Main
 20317  0819                     _flashy_Main:	
 20318                           
 20319                           ;flashy_task.c: 123: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskD
      +                          ata;
 20320                           
 20321                           ;incstack = 0
 20322                           ; Regs used in _flashy_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20323  0819  0020               	movlb	0	; select bank0
 20324  081A  0853               	movf	flashy_Main@taskData+1,w
 20325  081B  00DF               	movwf	flashy_Main@data+1
 20326  081C  0852               	movf	flashy_Main@taskData,w
 20327  081D  00DE               	movwf	flashy_Main@data
 20328                           
 20329                           ;flashy_task.c: 124: u16 buttonPressed;
 20330                           ;flashy_task.c: 125: char hit_counter[6];
 20331                           ;flashy_task.c: 127: if ( currentTask != FLASHY_TASK ){
 20332  081E  3002               	movlw	2
 20333  081F  0021               	movlb	1	; select bank1
 20334  0820  063A               	xorwf	_currentTask^(0+128),w
 20335  0821  043B               	iorwf	(_currentTask+1)^(0+128),w
 20336  0822  1903               	btfsc	3,2
 20337  0823  28C6               	goto	l9048
 20338                           
 20339                           ;flashy_task.c: 128: data->holdCountA = 1;
 20340  0824  0020               	movlb	0	; select bank0
 20341  0825  085E               	movf	flashy_Main@data,w
 20342  0826  0086               	movwf	6
 20343  0827  085F               	movf	flashy_Main@data+1,w
 20344  0828  0087               	movwf	7
 20345  0829  314A               	addfsr 1,10
 20346  082A  3001               	movlw	1
 20347  082B  3FC0               	movwi [0]fsr1
 20348  082C  3000               	movlw	0
 20349  082D  3FC1               	movwi [1]fsr1
 20350                           
 20351                           ;flashy_task.c: 129: data->holdCountB = 1;
 20352  082E  085E               	movf	flashy_Main@data,w
 20353  082F  0086               	movwf	6
 20354  0830  085F               	movf	flashy_Main@data+1,w
 20355  0831  0087               	movwf	7
 20356  0832  314C               	addfsr 1,12
 20357  0833  3001               	movlw	1
 20358  0834  3FC0               	movwi [0]fsr1
 20359  0835  3000               	movlw	0
 20360  0836  3FC1               	movwi [1]fsr1
 20361                           
 20362                           ;flashy_task.c: 130: data->holdCountX = 1;
 20363  0837  085E               	movf	flashy_Main@data,w
 20364  0838  0086               	movwf	6
 20365  0839  085F               	movf	flashy_Main@data+1,w
 20366  083A  0087               	movwf	7
 20367  083B  314E               	addfsr 1,14
 20368  083C  3001               	movlw	1
 20369  083D  3FC0               	movwi [0]fsr1
 20370  083E  3000               	movlw	0
 20371  083F  3FC1               	movwi [1]fsr1
 20372                           
 20373                           ;flashy_task.c: 131: data->holdCountY = 1;
 20374  0840  085E               	movf	flashy_Main@data,w
 20375  0841  0086               	movwf	6
 20376  0842  085F               	movf	flashy_Main@data+1,w
 20377  0843  0087               	movwf	7
 20378  0844  3150               	addfsr 1,16
 20379  0845  3001               	movlw	1
 20380  0846  3FC0               	movwi [0]fsr1
 20381  0847  3000               	movlw	0
 20382  0848  3FC1               	movwi [1]fsr1
 20383                           
 20384                           ;flashy_task.c: 132: data->holdCountXY = 1;
 20385  0849  085E               	movf	flashy_Main@data,w
 20386  084A  0086               	movwf	6
 20387  084B  085F               	movf	flashy_Main@data+1,w
 20388  084C  0087               	movwf	7
 20389  084D  3152               	addfsr 1,18
 20390  084E  3001               	movlw	1
 20391  084F  3FC0               	movwi [0]fsr1
 20392  0850  3000               	movlw	0
 20393  0851  3FC1               	movwi [1]fsr1
 20394                           
 20395                           ;flashy_task.c: 133: data->holdCountAY = 1;
 20396  0852  085E               	movf	flashy_Main@data,w
 20397  0853  0086               	movwf	6
 20398  0854  085F               	movf	flashy_Main@data+1,w
 20399  0855  0087               	movwf	7
 20400  0856  3154               	addfsr 1,20
 20401  0857  3001               	movlw	1
 20402  0858  3FC0               	movwi [0]fsr1
 20403  0859  3000               	movlw	0
 20404  085A  3FC1               	movwi [1]fsr1
 20405                           
 20406                           ;flashy_task.c: 134: data->holdCountAX = 1;
 20407  085B  085E               	movf	flashy_Main@data,w
 20408  085C  0086               	movwf	6
 20409  085D  085F               	movf	flashy_Main@data+1,w
 20410  085E  0087               	movwf	7
 20411  085F  3156               	addfsr 1,22
 20412  0860  3001               	movlw	1
 20413  0861  3FC0               	movwi [0]fsr1
 20414  0862  3000               	movlw	0
 20415  0863  3FC1               	movwi [1]fsr1
 20416                           
 20417                           ;flashy_task.c: 135: return;
 20418  0864  0008               	return
 20419  0865                     l9020:	
 20420                           ;flashy_task.c: 142: case SECRET_VALUE_TEST:
 20421                           
 20422                           ;flashy_task.c: 141: break;
 20423                           
 20424                           ;flashy_task.c: 140: case SECRET_VALUE_INIT:
 20425                           
 20426                           ;flashy_task.c: 136: }
 20427                           ;flashy_task.c: 139: switch (secret_value){
 20428                           
 20429                           
 20430                           ;flashy_task.c: 143: secret_value = SECRET_VALUE_INIT;
 20431  0865  0021               	movlb	1	; select bank1
 20432  0866  01C5               	clrf	_secret_value^(0+128)
 20433  0867  01C6               	clrf	(_secret_value+1)^(0+128)
 20434                           
 20435                           ;flashy_task.c: 144: data->displayTickCount = 0;
 20436  0868  0020               	movlb	0	; select bank0
 20437  0869  085E               	movf	flashy_Main@data,w
 20438  086A  0086               	movwf	6
 20439  086B  085F               	movf	flashy_Main@data+1,w
 20440  086C  0087               	movwf	7
 20441  086D  3144               	addfsr 1,4
 20442  086E  3000               	movlw	0
 20443  086F  3FC0               	movwi [0]fsr1
 20444  0870  3FC1               	movwi [1]fsr1
 20445                           
 20446                           ;flashy_task.c: 145: data->display_state = FLASHY_STATE_DISPLAY_SECRET_TEST;
 20447  0871  085E               	movf	flashy_Main@data,w
 20448  0872  3E06               	addlw	6
 20449  0873  00D4               	movwf	??_flashy_Main
 20450  0874  3000               	movlw	0
 20451  0875  3D5F               	addwfc	flashy_Main@data+1,w
 20452  0876  00D5               	movwf	??_flashy_Main+1
 20453  0877  0854               	movf	??_flashy_Main,w
 20454  0878  0086               	movwf	6
 20455  0879  0855               	movf	??_flashy_Main+1,w
 20456  087A  0087               	movwf	7
 20457  087B  3005               	movlw	5
 20458  087C  0081               	movwf	1
 20459                           
 20460                           ;flashy_task.c: 147: data->holdCountA = 1;
 20461  087D  085E               	movf	flashy_Main@data,w
 20462  087E  0086               	movwf	6
 20463  087F  085F               	movf	flashy_Main@data+1,w
 20464  0880  0087               	movwf	7
 20465  0881  314A               	addfsr 1,10
 20466  0882  3001               	movlw	1
 20467  0883  3FC0               	movwi [0]fsr1
 20468  0884  3000               	movlw	0
 20469  0885  3FC1               	movwi [1]fsr1
 20470                           
 20471                           ;flashy_task.c: 148: data->holdCountB = 1;
 20472  0886  085E               	movf	flashy_Main@data,w
 20473  0887  0086               	movwf	6
 20474  0888  085F               	movf	flashy_Main@data+1,w
 20475  0889  0087               	movwf	7
 20476  088A  314C               	addfsr 1,12
 20477  088B  3001               	movlw	1
 20478  088C  3FC0               	movwi [0]fsr1
 20479  088D  3000               	movlw	0
 20480  088E  3FC1               	movwi [1]fsr1
 20481                           
 20482                           ;flashy_task.c: 149: data->holdCountX = 1;
 20483  088F  085E               	movf	flashy_Main@data,w
 20484  0890  0086               	movwf	6
 20485  0891  085F               	movf	flashy_Main@data+1,w
 20486  0892  0087               	movwf	7
 20487  0893  314E               	addfsr 1,14
 20488  0894  3001               	movlw	1
 20489  0895  3FC0               	movwi [0]fsr1
 20490  0896  3000               	movlw	0
 20491  0897  3FC1               	movwi [1]fsr1
 20492                           
 20493                           ;flashy_task.c: 150: data->holdCountY = 1;
 20494  0898  085E               	movf	flashy_Main@data,w
 20495  0899  0086               	movwf	6
 20496  089A  085F               	movf	flashy_Main@data+1,w
 20497  089B  0087               	movwf	7
 20498  089C  3150               	addfsr 1,16
 20499  089D  3001               	movlw	1
 20500  089E  3FC0               	movwi [0]fsr1
 20501  089F  3000               	movlw	0
 20502  08A0  3FC1               	movwi [1]fsr1
 20503                           
 20504                           ;flashy_task.c: 151: data->holdCountXY = 1;
 20505  08A1  085E               	movf	flashy_Main@data,w
 20506  08A2  0086               	movwf	6
 20507  08A3  085F               	movf	flashy_Main@data+1,w
 20508  08A4  0087               	movwf	7
 20509  08A5  3152               	addfsr 1,18
 20510  08A6  3001               	movlw	1
 20511  08A7  3FC0               	movwi [0]fsr1
 20512  08A8  3000               	movlw	0
 20513  08A9  3FC1               	movwi [1]fsr1
 20514                           
 20515                           ;flashy_task.c: 152: data->holdCountAY = 1;
 20516  08AA  085E               	movf	flashy_Main@data,w
 20517  08AB  0086               	movwf	6
 20518  08AC  085F               	movf	flashy_Main@data+1,w
 20519  08AD  0087               	movwf	7
 20520  08AE  3154               	addfsr 1,20
 20521  08AF  3001               	movlw	1
 20522  08B0  3FC0               	movwi [0]fsr1
 20523  08B1  3000               	movlw	0
 20524  08B2  3FC1               	movwi [1]fsr1
 20525                           
 20526                           ;flashy_task.c: 153: data->holdCountAX = 1;
 20527  08B3  085E               	movf	flashy_Main@data,w
 20528  08B4  0086               	movwf	6
 20529  08B5  085F               	movf	flashy_Main@data+1,w
 20530  08B6  0087               	movwf	7
 20531  08B7  3156               	addfsr 1,22
 20532  08B8  3001               	movlw	1
 20533  08B9  3FC0               	movwi [0]fsr1
 20534  08BA  3000               	movlw	0
 20535  08BB  3FC1               	movwi [1]fsr1
 20536                           
 20537                           ;flashy_task.c: 154: data->noholdCount = 1;
 20538  08BC  085E               	movf	flashy_Main@data,w
 20539  08BD  0086               	movwf	6
 20540  08BE  085F               	movf	flashy_Main@data+1,w
 20541  08BF  0087               	movwf	7
 20542  08C0  315C               	addfsr 1,28
 20543  08C1  3001               	movlw	1
 20544  08C2  3FC0               	movwi [0]fsr1
 20545  08C3  3000               	movlw	0
 20546  08C4  3FC1               	movwi [1]fsr1
 20547                           
 20548                           ;flashy_task.c: 155: return;
 20549  08C5  0008               	return
 20550  08C6                     l9048:	
 20551                           ;flashy_task.c: 157: }
 20552                           
 20553                           ;flashy_task.c: 156: break;
 20554                           
 20555                           
 20556                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20557                           ; Switch size 1, requested type "space"
 20558                           ; Number of cases is 1, Range of values is 0 to 0
 20559                           ; switch strategies available:
 20560                           ; Name         Instructions Cycles
 20561                           ; simple_byte            4     3 (average)
 20562                           ; direct_byte            8     6 (fixed)
 20563                           ; jumptable            260     6 (fixed)
 20564                           ;	Chosen strategy is simple_byte
 20565  08C6  0021               	movlb	1	; select bank1
 20566  08C7  0846               	movf	(_secret_value+1)^(0+128),w
 20567  08C8  3A00               	xorlw	0	; case 0
 20568  08C9  1903               	skipnz
 20569  08CA  28CC               	goto	l10768
 20570  08CB  29C4               	goto	l9118
 20571  08CC                     l10768:	
 20572                           
 20573                           ; Switch size 1, requested type "space"
 20574                           ; Number of cases is 2, Range of values is 0 to 1
 20575                           ; switch strategies available:
 20576                           ; Name         Instructions Cycles
 20577                           ; simple_byte            7     4 (average)
 20578                           ; direct_byte           10     6 (fixed)
 20579                           ; jumptable            260     6 (fixed)
 20580                           ;	Chosen strategy is simple_byte
 20581  08CC  0845               	movf	_secret_value^(0+128),w
 20582  08CD  3A00               	xorlw	0	; case 0
 20583  08CE  1903               	skipnz
 20584  08CF  29C4               	goto	l9118
 20585  08D0  3A01               	xorlw	1	; case 1
 20586  08D1  1903               	skipnz
 20587  08D2  2865               	goto	l9020
 20588  08D3  29C4               	goto	l9118
 20589                           
 20590                           ;flashy_task.c: 160: switch (data->led_state){
 20591  08D4  29C4               	goto	l9118
 20592  08D5                     l9050:	
 20593                           ;flashy_task.c: 161: case FLASHY_STATE_LED_ROUNDABOUT:
 20594                           
 20595                           
 20596                           ;flashy_task.c: 162: if (data->delayTickCount == 0){
 20597  08D5  0020               	movlb	0	; select bank0
 20598  08D6  085E               	movf	flashy_Main@data,w
 20599  08D7  0086               	movwf	6
 20600  08D8  085F               	movf	flashy_Main@data+1,w
 20601  08D9  0087               	movwf	7
 20602  08DA  3141               	addfsr 1,1
 20603  08DB  0016               	moviw fsr1++
 20604  08DC  0401               	iorwf	1,w
 20605  08DD  1D03               	btfss	3,2
 20606  08DE  29B8               	goto	L8
 20607                           
 20608                           ;flashy_task.c: 163: led_roundabout(flashy_leds_idx);
 20609  08DF  0021               	movlb	1	; select bank1
 20610  08E0  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20611  08E1  0020               	movlb	0	; select bank0
 20612  08E2  00B1               	movwf	led_roundabout@counter+1
 20613  08E3  0021               	movlb	1	; select bank1
 20614  08E4  0832               	movf	_flashy_leds_idx^(0+128),w
 20615  08E5  0020               	movlb	0	; select bank0
 20616  08E6  00B0               	movwf	led_roundabout@counter
 20617  08E7  31AB  230A  3188   	fcall	_led_roundabout
 20618                           
 20619                           ;flashy_task.c: 164: flashy_leds_idx += 1;
 20620  08EA  3001               	movlw	1
 20621  08EB  0021               	movlb	1	; select bank1
 20622  08EC  07B2               	addwf	_flashy_leds_idx^(0+128),f
 20623  08ED  3000               	movlw	0
 20624  08EE  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 20625                           
 20626                           ;flashy_task.c: 165: data->delayTickCount = 35;
 20627  08EF  0020               	movlb	0	; select bank0
 20628  08F0  085E               	movf	flashy_Main@data,w
 20629  08F1  0086               	movwf	6
 20630  08F2  085F               	movf	flashy_Main@data+1,w
 20631  08F3  0087               	movwf	7
 20632  08F4  3141               	addfsr 1,1
 20633  08F5  3023               	movlw	35
 20634  08F6  3FC0               	movwi [0]fsr1
 20635  08F7  3000               	movlw	0
 20636  08F8  3FC1               	movwi [1]fsr1
 20637                           
 20638                           ;flashy_task.c: 166: }
 20639  08F9  2A5E               	goto	l9148
 20640  08FA                     l9060:	
 20641                           ;flashy_task.c: 171: case FLASHY_STATE_LED_SHOT:
 20642                           
 20643                           ;flashy_task.c: 169: }
 20644                           ;flashy_task.c: 170: break;
 20645                           
 20646                           ;flashy_task.c: 167: else {
 20647                           ;flashy_task.c: 168: data->delayTickCount -= 1;
 20648                           
 20649                           
 20650                           ;flashy_task.c: 172: if (data->delayTickCount == 0){
 20651  08FA  085E               	movf	flashy_Main@data,w
 20652  08FB  0086               	movwf	6
 20653  08FC  085F               	movf	flashy_Main@data+1,w
 20654  08FD  0087               	movwf	7
 20655  08FE  3141               	addfsr 1,1
 20656  08FF  0016               	moviw fsr1++
 20657  0900  0401               	iorwf	1,w
 20658  0901  1D03               	btfss	3,2
 20659  0902  29B8               	goto	L8
 20660                           
 20661                           ;flashy_task.c: 173: led_curtain(flashy_leds_idx);
 20662  0903  0021               	movlb	1	; select bank1
 20663  0904  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20664  0905  0020               	movlb	0	; select bank0
 20665  0906  00B1               	movwf	led_curtain@counter+1
 20666  0907  0021               	movlb	1	; select bank1
 20667  0908  0832               	movf	_flashy_leds_idx^(0+128),w
 20668  0909  0020               	movlb	0	; select bank0
 20669  090A  00B0               	movwf	led_curtain@counter
 20670  090B  31AA  22C9  3188   	fcall	_led_curtain
 20671                           
 20672                           ;flashy_task.c: 174: flashy_leds_idx += 1;
 20673  090E  3001               	movlw	1
 20674  090F  0021               	movlb	1	; select bank1
 20675  0910  07B2               	addwf	_flashy_leds_idx^(0+128),f
 20676  0911  3000               	movlw	0
 20677  0912  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 20678                           
 20679                           ;flashy_task.c: 175: data->delayTickCount = 5;
 20680  0913  0020               	movlb	0	; select bank0
 20681  0914  085E               	movf	flashy_Main@data,w
 20682  0915  0086               	movwf	6
 20683  0916  085F               	movf	flashy_Main@data+1,w
 20684  0917  0087               	movwf	7
 20685  0918  3141               	addfsr 1,1
 20686  0919  3005               	movlw	5
 20687  091A  3FC0               	movwi [0]fsr1
 20688  091B  3000               	movlw	0
 20689  091C  3FC1               	movwi [1]fsr1
 20690                           
 20691                           ;flashy_task.c: 176: }
 20692  091D  2A5E               	goto	l9148
 20693  091E                     l9070:	
 20694                           ;flashy_task.c: 181: case FLASHY_STATE_SPARKLE:
 20695                           
 20696                           ;flashy_task.c: 179: }
 20697                           ;flashy_task.c: 180: break;
 20698                           
 20699                           ;flashy_task.c: 177: else {
 20700                           ;flashy_task.c: 178: data->delayTickCount -= 1;
 20701                           
 20702                           
 20703                           ;flashy_task.c: 182: if (data->delayTickCount < 1){
 20704  091E  085E               	movf	flashy_Main@data,w
 20705  091F  0086               	movwf	6
 20706  0920  085F               	movf	flashy_Main@data+1,w
 20707  0921  0087               	movwf	7
 20708  0922  3141               	addfsr 1,1
 20709  0923  0016               	moviw fsr1++
 20710  0924  0401               	iorwf	1,w
 20711  0925  1D03               	btfss	3,2
 20712  0926  29B7               	goto	l9114
 20713                           
 20714                           ;flashy_task.c: 183: led_rand();
 20715  0927  31AC  24A3  3188   	fcall	_led_rand
 20716                           
 20717                           ;flashy_task.c: 184: data->delayTickCount = flashy_sparkle_rate;
 20718  092A  0020               	movlb	0	; select bank0
 20719  092B  085E               	movf	flashy_Main@data,w
 20720  092C  0086               	movwf	6
 20721  092D  085F               	movf	flashy_Main@data+1,w
 20722  092E  0087               	movwf	7
 20723  092F  3141               	addfsr 1,1
 20724  0930  0021               	movlb	1	; select bank1
 20725  0931  082E               	movf	_flashy_sparkle_rate^(0+128),w
 20726  0932  3FC0               	movwi [0]fsr1
 20727  0933  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 20728  0934  3FC1               	movwi [1]fsr1
 20729  0935  2A5E               	goto	l9148
 20730  0936                     l9078:	
 20731                           ;flashy_task.c: 190: case FLASHY_STATE_CIRCLE:
 20732                           
 20733                           ;flashy_task.c: 188: }
 20734                           ;flashy_task.c: 189: break;
 20735                           
 20736                           ;flashy_task.c: 186: else {
 20737                           ;flashy_task.c: 187: data->delayTickCount -= 1;
 20738                           
 20739                           ;flashy_task.c: 185: }
 20740                           
 20741                           
 20742                           ;flashy_task.c: 191: if (data->delayTickCount ==0 ){
 20743  0936  085E               	movf	flashy_Main@data,w
 20744  0937  0086               	movwf	6
 20745  0938  085F               	movf	flashy_Main@data+1,w
 20746  0939  0087               	movwf	7
 20747  093A  3141               	addfsr 1,1
 20748  093B  0016               	moviw fsr1++
 20749  093C  0401               	iorwf	1,w
 20750  093D  1D03               	btfss	3,2
 20751  093E  29B7               	goto	l9114
 20752                           
 20753                           ;flashy_task.c: 192: if (flashy_leds_idx == 1024 ){
 20754  093F  3004               	movlw	4
 20755  0940  0021               	movlb	1	; select bank1
 20756  0941  0633               	xorwf	(_flashy_leds_idx+1)^(0+128),w
 20757  0942  0432               	iorwf	_flashy_leds_idx^(0+128),w
 20758  0943  1D03               	btfss	3,2
 20759  0944  2949               	goto	l9084
 20760                           
 20761                           ;flashy_task.c: 193: flashy_leds_idx = flashy_leds_idx << 1;
 20762  0945  3532               	lslf	_flashy_leds_idx^(0+128),w
 20763  0946  00B2               	movwf	_flashy_leds_idx^(0+128)
 20764  0947  0D33               	rlf	(_flashy_leds_idx+1)^(0+128),w
 20765  0948  00B3               	movwf	(_flashy_leds_idx+1)^(0+128)
 20766  0949                     l9084:	
 20767                           
 20768                           ;flashy_task.c: 194: }
 20769                           ;flashy_task.c: 195: led_circle(flashy_leds_idx);
 20770  0949  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20771  094A  0020               	movlb	0	; select bank0
 20772  094B  00B1               	movwf	led_circle@count+1
 20773  094C  0021               	movlb	1	; select bank1
 20774  094D  0832               	movf	_flashy_leds_idx^(0+128),w
 20775  094E  0020               	movlb	0	; select bank0
 20776  094F  00B0               	movwf	led_circle@count
 20777  0950  31B4  241D  3188   	fcall	_led_circle
 20778                           
 20779                           ;flashy_task.c: 196: if (flashy_leds_idx < 1 ){
 20780  0953  0021               	movlb	1	; select bank1
 20781  0954  0832               	movf	_flashy_leds_idx^(0+128),w
 20782  0955  0433               	iorwf	(_flashy_leds_idx+1)^(0+128),w
 20783  0956  1D03               	btfss	3,2
 20784  0957  295D               	goto	l9090
 20785                           
 20786                           ;flashy_task.c: 197: flashy_leds_idx = 1;
 20787  0958  3001               	movlw	1
 20788  0959  00B2               	movwf	_flashy_leds_idx^(0+128)
 20789  095A  3000               	movlw	0
 20790  095B  00B3               	movwf	(_flashy_leds_idx^(0+128)+1)
 20791                           
 20792                           ;flashy_task.c: 198: break;
 20793  095C  2A5E               	goto	l9148
 20794  095D                     l9090:	
 20795                           
 20796                           ;flashy_task.c: 199: }
 20797                           ;flashy_task.c: 200: flashy_leds_idx = flashy_leds_idx << 1;
 20798  095D  3532               	lslf	_flashy_leds_idx^(0+128),w
 20799  095E  00B2               	movwf	_flashy_leds_idx^(0+128)
 20800  095F  0D33               	rlf	(_flashy_leds_idx+1)^(0+128),w
 20801  0960  00B3               	movwf	(_flashy_leds_idx+1)^(0+128)
 20802                           
 20803                           ;flashy_task.c: 202: data->delayTickCount = flashy_sparkle_rate;
 20804  0961  0020               	movlb	0	; select bank0
 20805  0962  085E               	movf	flashy_Main@data,w
 20806  0963  0086               	movwf	6
 20807  0964  085F               	movf	flashy_Main@data+1,w
 20808  0965  0087               	movwf	7
 20809  0966  3141               	addfsr 1,1
 20810  0967  0021               	movlb	1	; select bank1
 20811  0968  082E               	movf	_flashy_sparkle_rate^(0+128),w
 20812  0969  3FC0               	movwi [0]fsr1
 20813  096A  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 20814  096B  3FC1               	movwi [1]fsr1
 20815  096C  2A5E               	goto	l9148
 20816  096D                     l9096:	
 20817                           ;flashy_task.c: 208: case FLASHY_STATE_LED_ALT:
 20818                           
 20819                           ;flashy_task.c: 206: }
 20820                           ;flashy_task.c: 207: break;
 20821                           
 20822                           ;flashy_task.c: 204: else {
 20823                           ;flashy_task.c: 205: data->delayTickCount -= 1;
 20824                           
 20825                           ;flashy_task.c: 203: }
 20826                           
 20827                           
 20828                           ;flashy_task.c: 209: if (data->delayTickCount == 0){
 20829  096D  085E               	movf	flashy_Main@data,w
 20830  096E  0086               	movwf	6
 20831  096F  085F               	movf	flashy_Main@data+1,w
 20832  0970  0087               	movwf	7
 20833  0971  3141               	addfsr 1,1
 20834  0972  0016               	moviw fsr1++
 20835  0973  0401               	iorwf	1,w
 20836  0974  1D03               	btfss	3,2
 20837  0975  29B7               	goto	l9114
 20838                           
 20839                           ;flashy_task.c: 210: let_alternate(flashy_leds_idx);
 20840  0976  0021               	movlb	1	; select bank1
 20841  0977  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20842  0978  0020               	movlb	0	; select bank0
 20843  0979  00B1               	movwf	let_alternate@count+1
 20844  097A  0021               	movlb	1	; select bank1
 20845  097B  0832               	movf	_flashy_leds_idx^(0+128),w
 20846  097C  0020               	movlb	0	; select bank0
 20847  097D  00B0               	movwf	let_alternate@count
 20848  097E  31B5  256C  3188   	fcall	_let_alternate
 20849                           
 20850                           ;flashy_task.c: 211: flashy_leds_idx += 1;
 20851  0981  3001               	movlw	1
 20852  0982  0021               	movlb	1	; select bank1
 20853  0983  07B2               	addwf	_flashy_leds_idx^(0+128),f
 20854  0984  3000               	movlw	0
 20855  0985  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 20856                           
 20857                           ;flashy_task.c: 212: data->delayTickCount = flashy_sparkle_rate;
 20858  0986  0020               	movlb	0	; select bank0
 20859  0987  085E               	movf	flashy_Main@data,w
 20860  0988  0086               	movwf	6
 20861  0989  085F               	movf	flashy_Main@data+1,w
 20862  098A  0087               	movwf	7
 20863  098B  3141               	addfsr 1,1
 20864  098C  0021               	movlb	1	; select bank1
 20865  098D  082E               	movf	_flashy_sparkle_rate^(0+128),w
 20866  098E  3FC0               	movwi [0]fsr1
 20867  098F  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 20868  0990  3FC1               	movwi [1]fsr1
 20869  0991  2A5E               	goto	l9148
 20870  0992                     l9106:	
 20871                           ;flashy_task.c: 218: case FLASHY_STATE_LED_PARODY:
 20872                           
 20873                           ;flashy_task.c: 216: }
 20874                           ;flashy_task.c: 217: break;
 20875                           
 20876                           ;flashy_task.c: 214: else {
 20877                           ;flashy_task.c: 215: data->delayTickCount -= 1;
 20878                           
 20879                           ;flashy_task.c: 213: }
 20880                           
 20881                           
 20882                           ;flashy_task.c: 219: if (data->delayTickCount == 0){
 20883  0992  085E               	movf	flashy_Main@data,w
 20884  0993  0086               	movwf	6
 20885  0994  085F               	movf	flashy_Main@data+1,w
 20886  0995  0087               	movwf	7
 20887  0996  3141               	addfsr 1,1
 20888  0997  0016               	moviw fsr1++
 20889  0998  0401               	iorwf	1,w
 20890  0999  1D03               	btfss	3,2
 20891  099A  29B7               	goto	l9114
 20892                           
 20893                           ;flashy_task.c: 220: led_Parody(flashy_leds_idx);
 20894  099B  0021               	movlb	1	; select bank1
 20895  099C  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20896  099D  0020               	movlb	0	; select bank0
 20897  099E  00B1               	movwf	led_Parody@count+1
 20898  099F  0021               	movlb	1	; select bank1
 20899  09A0  0832               	movf	_flashy_leds_idx^(0+128),w
 20900  09A1  0020               	movlb	0	; select bank0
 20901  09A2  00B0               	movwf	led_Parody@count
 20902  09A3  31A0  20BE  3188   	fcall	_led_Parody
 20903                           
 20904                           ;flashy_task.c: 221: flashy_leds_idx += 1;
 20905  09A6  3001               	movlw	1
 20906  09A7  0021               	movlb	1	; select bank1
 20907  09A8  07B2               	addwf	_flashy_leds_idx^(0+128),f
 20908  09A9  3000               	movlw	0
 20909  09AA  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 20910                           
 20911                           ;flashy_task.c: 222: data->delayTickCount = flashy_sparkle_rate;
 20912  09AB  0020               	movlb	0	; select bank0
 20913  09AC  085E               	movf	flashy_Main@data,w
 20914  09AD  0086               	movwf	6
 20915  09AE  085F               	movf	flashy_Main@data+1,w
 20916  09AF  0087               	movwf	7
 20917  09B0  3141               	addfsr 1,1
 20918  09B1  0021               	movlb	1	; select bank1
 20919  09B2  082E               	movf	_flashy_sparkle_rate^(0+128),w
 20920  09B3  3FC0               	movwi [0]fsr1
 20921  09B4  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 20922  09B5  3FC1               	movwi [1]fsr1
 20923                           
 20924                           ;flashy_task.c: 223: }
 20925  09B6  2A5E               	goto	l9148
 20926  09B7                     l9114:	
 20927                           
 20928                           ;flashy_task.c: 224: else {
 20929                           ;flashy_task.c: 225: data->delayTickCount -= 1;
 20930  09B7  0020               	movlb	0	; select bank0
 20931  09B8                     L8:	
 20932  09B8  085E               	movf	flashy_Main@data,w
 20933  09B9  0086               	movwf	6
 20934  09BA  085F               	movf	flashy_Main@data+1,w
 20935  09BB  0087               	movwf	7
 20936  09BC  3141               	addfsr 1,1
 20937  09BD  3001               	movlw	1
 20938  09BE  0281               	subwf	1,f
 20939  09BF  3141               	addfsr 1,1
 20940  09C0  3000               	movlw	0
 20941  09C1  3B81               	subwfb	1,f
 20942  09C2  317F               	addfsr 1,-1
 20943                           
 20944                           ;flashy_task.c: 229: }
 20945                           
 20946                           ;flashy_task.c: 226: }
 20947                           ;flashy_task.c: 227: break;
 20948  09C3  2A5E               	goto	l9148
 20949  09C4                     l9118:	
 20950  09C4  0020               	movlb	0	; select bank0
 20951  09C5  085E               	movf	flashy_Main@data,w
 20952  09C6  0086               	movwf	6
 20953  09C7  085F               	movf	flashy_Main@data+1,w
 20954  09C8  0087               	movwf	7
 20955  09C9  3143               	addfsr 1,3
 20956  09CA  0801               	movf	1,w
 20957                           
 20958                           ; Switch size 1, requested type "space"
 20959                           ; Number of cases is 6, Range of values is 0 to 5
 20960                           ; switch strategies available:
 20961                           ; Name         Instructions Cycles
 20962                           ; direct_byte           18     6 (fixed)
 20963                           ; simple_byte           19    10 (average)
 20964                           ; jumptable            260     6 (fixed)
 20965                           ;	Chosen strategy is direct_byte
 20966  09CB  0084               	movwf	4
 20967  09CC  3006               	movlw	6
 20968  09CD  0204               	subwf	4,w
 20969  09CE  1803               	skipnc
 20970  09CF  2A5E               	goto	l9148
 20971  09D0  31B0               	movlp	high S10770
 20972  09D1  3504               	lslf	4,w
 20973  09D2  3E2F               	addlw	low S10770
 20974  09D3  0082               	movwf	2
 20975                           
 20976                           ;flashy_task.c: 232: switch (data->display_state){
 20977  09D4  2A5E               	goto	l9148
 20978  09D5                     l9120:	
 20979                           ;flashy_task.c: 233: case FLASHY_STATE_DISPLAY_BLASTER:
 20980                           
 20981                           
 20982                           ;flashy_task.c: 234: nullifyBadge_segDisplayPutStr(data->badge, "PEW ");
 20983  09D5  3088               	movlw	low (STR_40| (0+32768))
 20984  09D6  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 20985  09D7  30BB               	movlw	high (STR_40| (0+32768))
 20986  09D8  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 20987  09D9  085E               	movf	flashy_Main@data,w
 20988  09DA  0086               	movwf	6
 20989  09DB  085F               	movf	flashy_Main@data+1,w
 20990  09DC  0087               	movwf	7
 20991  09DD  0801               	movf	1,w
 20992  09DE  31B4  243A  3188   	fcall	_nullifyBadge_segDisplayPutStr
 20993                           
 20994                           ;flashy_task.c: 235: nullifyBadge_segDisplayForceUpdate(data->badge);
 20995  09E1  0020               	movlb	0	; select bank0
 20996  09E2  085E               	movf	flashy_Main@data,w
 20997  09E3  0086               	movwf	6
 20998  09E4  085F               	movf	flashy_Main@data+1,w
 20999  09E5  0087               	movwf	7
 21000  09E6  0801               	movf	1,w
 21001  09E7  31B3  23F8  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 21002  09EA  2A52               	goto	L11
 21003  09EB                     l9126:	
 21004                           ;flashy_task.c: 238: case FLASHY_STATE_DISPLAY_SHOT:
 21005                           
 21006                           ;flashy_task.c: 237: break;
 21007                           
 21008                           ;flashy_task.c: 236: data->displayTickCount += 1;
 21009                           
 21010                           
 21011                           ;flashy_task.c: 239: sprintf((char *)hit_counter, "%4d", deaths);
 21012  09EB  3056               	movlw	low flashy_Main@hit_counter
 21013  09EC  00AF               	movwf	sprintf@sp
 21014  09ED  3000               	movlw	high flashy_Main@hit_counter
 21015  09EE  00B0               	movwf	sprintf@sp+1
 21016  09EF  30A1               	movlw	low (STR_41| (0+32768))
 21017  09F0  00B1               	movwf	sprintf@f
 21018  09F1  30BB               	movlw	high (STR_41| (0+32768))
 21019  09F2  00B2               	movwf	sprintf@f+1
 21020  09F3  0021               	movlb	1	; select bank1
 21021  09F4  082B               	movf	(_deaths+1)^(0+128),w
 21022  09F5  0020               	movlb	0	; select bank0
 21023  09F6  00B4               	movwf	?_sprintf+5
 21024  09F7  0021               	movlb	1	; select bank1
 21025  09F8  082A               	movf	_deaths^(0+128),w
 21026  09F9  0020               	movlb	0	; select bank0
 21027  09FA  00B3               	movwf	?_sprintf+4
 21028  09FB  319A  225F  3188   	fcall	_sprintf
 21029                           
 21030                           ;flashy_task.c: 241: nullifyBadge_segDisplayPutStr(data->badge, hit_counter);
 21031  09FE  3056               	movlw	low flashy_Main@hit_counter
 21032  09FF  0020               	movlb	0	; select bank0
 21033  0A00  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21034  0A01  3000               	movlw	high flashy_Main@hit_counter
 21035  0A02  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21036  0A03  085E               	movf	flashy_Main@data,w
 21037  0A04  0086               	movwf	6
 21038  0A05  085F               	movf	flashy_Main@data+1,w
 21039  0A06  0087               	movwf	7
 21040  0A07  0801               	movf	1,w
 21041  0A08  31B4  243A  3188   	fcall	_nullifyBadge_segDisplayPutStr
 21042                           
 21043                           ;flashy_task.c: 242: nullifyBadge_segDisplayForceUpdate(data->badge);
 21044  0A0B  0020               	movlb	0	; select bank0
 21045  0A0C  085E               	movf	flashy_Main@data,w
 21046  0A0D  0086               	movwf	6
 21047  0A0E  085F               	movf	flashy_Main@data+1,w
 21048  0A0F  0087               	movwf	7
 21049  0A10  0801               	movf	1,w
 21050  0A11  31B3  23F8  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 21051                           
 21052                           ;flashy_task.c: 243: if (data->displayTickCount == 150){
 21053  0A14  0020               	movlb	0	; select bank0
 21054  0A15  085E               	movf	flashy_Main@data,w
 21055  0A16  0086               	movwf	6
 21056  0A17  085F               	movf	flashy_Main@data+1,w
 21057  0A18  0087               	movwf	7
 21058  0A19  3144               	addfsr 1,4
 21059  0A1A  0016               	moviw fsr1++
 21060  0A1B  3A96               	xorlw	150
 21061  0A1C  00D4               	movwf	??_flashy_Main
 21062  0A1D  0016               	moviw fsr1++
 21063  0A1E  04D4               	iorwf	??_flashy_Main,f
 21064  0A1F  1D03               	btfss	3,2
 21065  0A20  2A53               	goto	L10
 21066                           
 21067                           ;flashy_task.c: 244: data->displayTickCount = 0;
 21068  0A21  085E               	movf	flashy_Main@data,w
 21069  0A22  0086               	movwf	6
 21070  0A23  085F               	movf	flashy_Main@data+1,w
 21071  0A24  0087               	movwf	7
 21072  0A25  3144               	addfsr 1,4
 21073  0A26  3000               	movlw	0
 21074  0A27  3FC0               	movwi [0]fsr1
 21075  0A28  3FC1               	movwi [1]fsr1
 21076                           
 21077                           ;flashy_task.c: 245: data->display_state = 35;
 21078  0A29  085E               	movf	flashy_Main@data,w
 21079  0A2A  3E06               	addlw	6
 21080  0A2B  00D4               	movwf	??_flashy_Main
 21081  0A2C  3000               	movlw	0
 21082  0A2D  3D5F               	addwfc	flashy_Main@data+1,w
 21083  0A2E  00D5               	movwf	??_flashy_Main+1
 21084  0A2F  0854               	movf	??_flashy_Main,w
 21085  0A30  0086               	movwf	6
 21086  0A31  0855               	movf	??_flashy_Main+1,w
 21087  0A32  0087               	movwf	7
 21088  0A33  3023               	movlw	35
 21089  0A34  0081               	movwf	1
 21090  0A35  2A53               	goto	L10
 21091  0A36                     l9138:	
 21092                           ;flashy_task.c: 249: case FLASHY_STATE_DISPLAY_SECRET_TEST:
 21093                           
 21094                           ;flashy_task.c: 248: break;
 21095                           
 21096                           ;flashy_task.c: 246: }
 21097                           ;flashy_task.c: 247: data->displayTickCount += 1;
 21098                           
 21099                           
 21100                           ;flashy_task.c: 250: marquee(FLASHY_TEXT_SECRET_TEST, data->displayTickCount);
 21101  0A36  0021               	movlb	1	; select bank1
 21102  0A37  085C               	movf	(_FLASHY_TEXT_SECRET_TEST+1)^(0+128),w
 21103  0A38  0020               	movlb	0	; select bank0
 21104  0A39  00BB               	movwf	marquee@string+1
 21105  0A3A  0021               	movlb	1	; select bank1
 21106  0A3B  085B               	movf	_FLASHY_TEXT_SECRET_TEST^(0+128),w
 21107  0A3C  0020               	movlb	0	; select bank0
 21108  0A3D  00BA               	movwf	marquee@string
 21109  0A3E  085E               	movf	flashy_Main@data,w
 21110  0A3F  0086               	movwf	6
 21111  0A40  085F               	movf	flashy_Main@data+1,w
 21112  0A41  0087               	movwf	7
 21113  0A42  3144               	addfsr 1,4
 21114  0A43  3F40               	moviw [0]fsr1
 21115  0A44  00BC               	movwf	marquee@count
 21116  0A45  3F41               	moviw [1]fsr1
 21117  0A46  00BD               	movwf	marquee@count+1
 21118  0A47  31A2  2275  3188   	fcall	_marquee
 21119  0A4A  2A52               	goto	L11
 21120  0A4B                     l9142:	
 21121                           ;flashy_task.c: 255: default:
 21122                           
 21123                           ;flashy_task.c: 253: case FLASHY_STATE_DISPLAY:
 21124                           
 21125                           ;flashy_task.c: 252: break;
 21126                           
 21127                           ;flashy_task.c: 251: data->displayTickCount += 1;
 21128                           
 21129                           
 21130                           ;flashy_task.c: 256: flashy_display_option(data);
 21131  0A4B  085F               	movf	flashy_Main@data+1,w
 21132  0A4C  00CD               	movwf	flashy_display_option@data+1
 21133  0A4D  085E               	movf	flashy_Main@data,w
 21134  0A4E  00CC               	movwf	flashy_display_option@data
 21135  0A4F  319A  2200  3188   	fcall	_flashy_display_option
 21136  0A52                     L11:	
 21137                           
 21138                           ;flashy_task.c: 257: data->displayTickCount += 1;
 21139  0A52  0020               	movlb	0	; select bank0
 21140  0A53                     L10:	
 21141  0A53  085E               	movf	flashy_Main@data,w
 21142  0A54  0086               	movwf	6
 21143  0A55  085F               	movf	flashy_Main@data+1,w
 21144  0A56  0087               	movwf	7
 21145  0A57  3144               	addfsr 1,4
 21146  0A58  3001               	movlw	1
 21147  0A59  0781               	addwf	1,f
 21148  0A5A  3141               	addfsr 1,1
 21149  0A5B  1803               	skipnc
 21150  0A5C  0A81               	incf	1,f
 21151                           
 21152                           ;flashy_task.c: 259: }
 21153                           
 21154                           ;flashy_task.c: 258: break;
 21155  0A5D  2A72               	goto	l9150
 21156  0A5E                     l9148:	
 21157  0A5E  0020               	movlb	0	; select bank0
 21158  0A5F  085E               	movf	flashy_Main@data,w
 21159  0A60  0086               	movwf	6
 21160  0A61  085F               	movf	flashy_Main@data+1,w
 21161  0A62  0087               	movwf	7
 21162  0A63  3146               	addfsr 1,6
 21163  0A64  0801               	movf	1,w
 21164                           
 21165                           ; Switch size 1, requested type "space"
 21166                           ; Number of cases is 4, Range of values is 0 to 5
 21167                           ; switch strategies available:
 21168                           ; Name         Instructions Cycles
 21169                           ; simple_byte           13     7 (average)
 21170                           ; direct_byte           18     6 (fixed)
 21171                           ; jumptable            260     6 (fixed)
 21172                           ;	Chosen strategy is simple_byte
 21173  0A65  3A00               	xorlw	0	; case 0
 21174  0A66  1903               	skipnz
 21175  0A67  2A4B               	goto	l9142
 21176  0A68  3A02               	xorlw	2	; case 2
 21177  0A69  1903               	skipnz
 21178  0A6A  29D5               	goto	l9120
 21179  0A6B  3A01               	xorlw	1	; case 3
 21180  0A6C  1903               	skipnz
 21181  0A6D  29EB               	goto	l9126
 21182  0A6E  3A06               	xorlw	6	; case 5
 21183  0A6F  1903               	skipnz
 21184  0A70  2A36               	goto	l9138
 21185  0A71  2A4B               	goto	l9142
 21186  0A72                     l9150:	
 21187                           
 21188                           ;flashy_task.c: 262: buttonPressed = nullifyBadge_buttonsGet();
 21189  0A72  31A8  20A5  3188   	fcall	_nullifyBadge_buttonsGet
 21190  0A75  0020               	movlb	0	; select bank0
 21191  0A76  00D4               	movwf	??_flashy_Main
 21192  0A77  01D5               	clrf	??_flashy_Main+1
 21193  0A78  0854               	movf	??_flashy_Main,w
 21194  0A79  00DC               	movwf	flashy_Main@buttonPressed
 21195  0A7A  0855               	movf	??_flashy_Main+1,w
 21196  0A7B  00DD               	movwf	flashy_Main@buttonPressed+1
 21197                           
 21198                           ;flashy_task.c: 263: switch (buttonPressed) {
 21199  0A7C  2F36               	goto	l9410
 21200  0A7D                     l9152:	
 21201                           ;flashy_task.c: 264: case 4 | 8:
 21202                           
 21203                           
 21204                           ;flashy_task.c: 265: if (data->holdCountXY == 0 ){
 21205  0A7D  085E               	movf	flashy_Main@data,w
 21206  0A7E  0086               	movwf	6
 21207  0A7F  085F               	movf	flashy_Main@data+1,w
 21208  0A80  0087               	movwf	7
 21209  0A81  3152               	addfsr 1,18
 21210  0A82  0016               	moviw fsr1++
 21211  0A83  0401               	iorwf	1,w
 21212  0A84  1D03               	btfss	3,2
 21213  0A85  2A8C               	goto	l9156
 21214                           
 21215                           ;flashy_task.c: 267: data->display_state = FLASHY_STATE_DISPLAY;
 21216  0A86  085E               	movf	flashy_Main@data,w
 21217  0A87  0086               	movwf	6
 21218  0A88  085F               	movf	flashy_Main@data+1,w
 21219  0A89  0087               	movwf	7
 21220  0A8A  3146               	addfsr 1,6
 21221  0A8B  0181               	clrf	1
 21222  0A8C                     l9156:	
 21223                           
 21224                           ;flashy_task.c: 268: }
 21225                           ;flashy_task.c: 270: data->holdCountA = 0;
 21226  0A8C  085E               	movf	flashy_Main@data,w
 21227  0A8D  0086               	movwf	6
 21228  0A8E  085F               	movf	flashy_Main@data+1,w
 21229  0A8F  0087               	movwf	7
 21230  0A90  314A               	addfsr 1,10
 21231  0A91  3000               	movlw	0
 21232  0A92  3FC0               	movwi [0]fsr1
 21233  0A93  3FC1               	movwi [1]fsr1
 21234                           
 21235                           ;flashy_task.c: 271: data->holdCountB = 0;
 21236  0A94  085E               	movf	flashy_Main@data,w
 21237  0A95  0086               	movwf	6
 21238  0A96  085F               	movf	flashy_Main@data+1,w
 21239  0A97  0087               	movwf	7
 21240  0A98  314C               	addfsr 1,12
 21241  0A99  3000               	movlw	0
 21242  0A9A  3FC0               	movwi [0]fsr1
 21243  0A9B  3FC1               	movwi [1]fsr1
 21244                           
 21245                           ;flashy_task.c: 272: data->holdCountX = 0;
 21246  0A9C  085E               	movf	flashy_Main@data,w
 21247  0A9D  0086               	movwf	6
 21248  0A9E  085F               	movf	flashy_Main@data+1,w
 21249  0A9F  0087               	movwf	7
 21250  0AA0  314E               	addfsr 1,14
 21251  0AA1  3000               	movlw	0
 21252  0AA2  3FC0               	movwi [0]fsr1
 21253  0AA3  3FC1               	movwi [1]fsr1
 21254                           
 21255                           ;flashy_task.c: 273: data->holdCountY = 0;
 21256  0AA4  085E               	movf	flashy_Main@data,w
 21257  0AA5  0086               	movwf	6
 21258  0AA6  085F               	movf	flashy_Main@data+1,w
 21259  0AA7  0087               	movwf	7
 21260  0AA8  3150               	addfsr 1,16
 21261  0AA9  3000               	movlw	0
 21262  0AAA  3FC0               	movwi [0]fsr1
 21263  0AAB  3FC1               	movwi [1]fsr1
 21264                           
 21265                           ;flashy_task.c: 274: data->holdCountXY += 1;
 21266  0AAC  085E               	movf	flashy_Main@data,w
 21267  0AAD  0086               	movwf	6
 21268  0AAE  085F               	movf	flashy_Main@data+1,w
 21269  0AAF  0087               	movwf	7
 21270  0AB0  3152               	addfsr 1,18
 21271  0AB1  3001               	movlw	1
 21272  0AB2  0781               	addwf	1,f
 21273  0AB3  3141               	addfsr 1,1
 21274  0AB4  1803               	skipnc
 21275  0AB5  0A81               	incf	1,f
 21276                           
 21277                           ;flashy_task.c: 275: data->holdCountAY = 0;
 21278  0AB6  085E               	movf	flashy_Main@data,w
 21279  0AB7  0086               	movwf	6
 21280  0AB8  085F               	movf	flashy_Main@data+1,w
 21281  0AB9  0087               	movwf	7
 21282  0ABA  3154               	addfsr 1,20
 21283  0ABB  3000               	movlw	0
 21284  0ABC  3FC0               	movwi [0]fsr1
 21285  0ABD  3FC1               	movwi [1]fsr1
 21286                           
 21287                           ;flashy_task.c: 276: data->holdCountAX = 0;
 21288  0ABE  085E               	movf	flashy_Main@data,w
 21289  0ABF  0086               	movwf	6
 21290  0AC0  085F               	movf	flashy_Main@data+1,w
 21291  0AC1  0087               	movwf	7
 21292  0AC2  3156               	addfsr 1,22
 21293  0AC3  3000               	movlw	0
 21294  0AC4  3FC0               	movwi [0]fsr1
 21295  0AC5  3FC1               	movwi [1]fsr1
 21296                           
 21297                           ;flashy_task.c: 277: data->holdCountBX = 0;
 21298  0AC6  085E               	movf	flashy_Main@data,w
 21299  0AC7  0086               	movwf	6
 21300  0AC8  085F               	movf	flashy_Main@data+1,w
 21301  0AC9  0087               	movwf	7
 21302  0ACA  3158               	addfsr 1,24
 21303  0ACB  3000               	movlw	0
 21304  0ACC  3FC0               	movwi [0]fsr1
 21305  0ACD  3FC1               	movwi [1]fsr1
 21306                           
 21307                           ;flashy_task.c: 278: data->holdCountBY = 0;
 21308  0ACE  085E               	movf	flashy_Main@data,w
 21309  0ACF  0086               	movwf	6
 21310  0AD0  085F               	movf	flashy_Main@data+1,w
 21311  0AD1  0087               	movwf	7
 21312  0AD2  315A               	addfsr 1,26
 21313  0AD3  3000               	movlw	0
 21314  0AD4  3FC0               	movwi [0]fsr1
 21315  0AD5  3FC1               	movwi [1]fsr1
 21316                           
 21317                           ;flashy_task.c: 279: data->noholdCount = 0;
 21318  0AD6  085E               	movf	flashy_Main@data,w
 21319  0AD7  0086               	movwf	6
 21320  0AD8  085F               	movf	flashy_Main@data+1,w
 21321  0AD9  0087               	movwf	7
 21322  0ADA  315C               	addfsr 1,28
 21323  0ADB  3000               	movlw	0
 21324  0ADC  3FC0               	movwi [0]fsr1
 21325  0ADD  3FC1               	movwi [1]fsr1
 21326                           
 21327                           ;flashy_task.c: 280: break;
 21328  0ADE  2FC9               	goto	l9440
 21329  0ADF                     l9176:	
 21330                           ;flashy_task.c: 281: case 1 | 8:
 21331                           
 21332                           
 21333                           ;flashy_task.c: 282: if ( data->holdCountAY == 0 ){
 21334  0ADF  085E               	movf	flashy_Main@data,w
 21335  0AE0  0086               	movwf	6
 21336  0AE1  085F               	movf	flashy_Main@data+1,w
 21337  0AE2  0087               	movwf	7
 21338  0AE3  3154               	addfsr 1,20
 21339  0AE4  0016               	moviw fsr1++
 21340  0AE5  0401               	iorwf	1,w
 21341  0AE6  1D03               	btfss	3,2
 21342  0AE7  2AF8               	goto	l9182
 21343                           
 21344                           ;flashy_task.c: 283: if (flashy_sparkle_rate > 1000){
 21345  0AE8  3003               	movlw	3
 21346  0AE9  0021               	movlb	1	; select bank1
 21347  0AEA  022F               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 21348  0AEB  30E9               	movlw	233
 21349  0AEC  1903               	skipnz
 21350  0AED  022E               	subwf	_flashy_sparkle_rate^(0+128),w
 21351  0AEE  1C03               	skipc
 21352  0AEF  2AF4               	goto	l1147
 21353                           
 21354                           ;flashy_task.c: 284: flashy_sparkle_rate = 1000;
 21355  0AF0  30E8               	movlw	232
 21356  0AF1  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 21357  0AF2  3003               	movlw	3
 21358  0AF3  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 21359  0AF4                     l1147:	
 21360                           
 21361                           ;flashy_task.c: 285: }
 21362                           ;flashy_task.c: 286: flashy_sparkle_rate += 5;
 21363  0AF4  3005               	movlw	5
 21364  0AF5  07AE               	addwf	_flashy_sparkle_rate^(0+128),f
 21365  0AF6  3000               	movlw	0
 21366  0AF7  3DAF               	addwfc	(_flashy_sparkle_rate+1)^(0+128),f
 21367  0AF8                     l9182:	
 21368                           
 21369                           ;flashy_task.c: 287: }
 21370                           ;flashy_task.c: 289: data->holdCountA = 0;
 21371  0AF8  0020               	movlb	0	; select bank0
 21372  0AF9  085E               	movf	flashy_Main@data,w
 21373  0AFA  0086               	movwf	6
 21374  0AFB  085F               	movf	flashy_Main@data+1,w
 21375  0AFC  0087               	movwf	7
 21376  0AFD  314A               	addfsr 1,10
 21377  0AFE  3000               	movlw	0
 21378  0AFF  3FC0               	movwi [0]fsr1
 21379  0B00  3FC1               	movwi [1]fsr1
 21380                           
 21381                           ;flashy_task.c: 290: data->holdCountB = 0;
 21382  0B01  085E               	movf	flashy_Main@data,w
 21383  0B02  0086               	movwf	6
 21384  0B03  085F               	movf	flashy_Main@data+1,w
 21385  0B04  0087               	movwf	7
 21386  0B05  314C               	addfsr 1,12
 21387  0B06  3000               	movlw	0
 21388  0B07  3FC0               	movwi [0]fsr1
 21389  0B08  3FC1               	movwi [1]fsr1
 21390                           
 21391                           ;flashy_task.c: 291: data->holdCountX = 0;
 21392  0B09  085E               	movf	flashy_Main@data,w
 21393  0B0A  0086               	movwf	6
 21394  0B0B  085F               	movf	flashy_Main@data+1,w
 21395  0B0C  0087               	movwf	7
 21396  0B0D  314E               	addfsr 1,14
 21397  0B0E  3000               	movlw	0
 21398  0B0F  3FC0               	movwi [0]fsr1
 21399  0B10  3FC1               	movwi [1]fsr1
 21400                           
 21401                           ;flashy_task.c: 292: data->holdCountY = 0;
 21402  0B11  085E               	movf	flashy_Main@data,w
 21403  0B12  0086               	movwf	6
 21404  0B13  085F               	movf	flashy_Main@data+1,w
 21405  0B14  0087               	movwf	7
 21406  0B15  3150               	addfsr 1,16
 21407  0B16  3000               	movlw	0
 21408  0B17  3FC0               	movwi [0]fsr1
 21409  0B18  3FC1               	movwi [1]fsr1
 21410                           
 21411                           ;flashy_task.c: 293: data->holdCountXY = 0;
 21412  0B19  085E               	movf	flashy_Main@data,w
 21413  0B1A  0086               	movwf	6
 21414  0B1B  085F               	movf	flashy_Main@data+1,w
 21415  0B1C  0087               	movwf	7
 21416  0B1D  3152               	addfsr 1,18
 21417  0B1E  3000               	movlw	0
 21418  0B1F  3FC0               	movwi [0]fsr1
 21419  0B20  3FC1               	movwi [1]fsr1
 21420                           
 21421                           ;flashy_task.c: 294: data->holdCountAY += 1;
 21422  0B21  085E               	movf	flashy_Main@data,w
 21423  0B22  0086               	movwf	6
 21424  0B23  085F               	movf	flashy_Main@data+1,w
 21425  0B24  0087               	movwf	7
 21426  0B25  3154               	addfsr 1,20
 21427  0B26  3001               	movlw	1
 21428  0B27  0781               	addwf	1,f
 21429  0B28  3141               	addfsr 1,1
 21430  0B29  1803               	skipnc
 21431  0B2A  0A81               	incf	1,f
 21432                           
 21433                           ;flashy_task.c: 295: data->holdCountAX = 0;
 21434  0B2B  085E               	movf	flashy_Main@data,w
 21435  0B2C  0086               	movwf	6
 21436  0B2D  085F               	movf	flashy_Main@data+1,w
 21437  0B2E  0087               	movwf	7
 21438  0B2F  3156               	addfsr 1,22
 21439  0B30  3000               	movlw	0
 21440  0B31  3FC0               	movwi [0]fsr1
 21441  0B32  3FC1               	movwi [1]fsr1
 21442                           
 21443                           ;flashy_task.c: 296: data->holdCountBX = 0;
 21444  0B33  085E               	movf	flashy_Main@data,w
 21445  0B34  0086               	movwf	6
 21446  0B35  085F               	movf	flashy_Main@data+1,w
 21447  0B36  0087               	movwf	7
 21448  0B37  3158               	addfsr 1,24
 21449  0B38  3000               	movlw	0
 21450  0B39  3FC0               	movwi [0]fsr1
 21451  0B3A  3FC1               	movwi [1]fsr1
 21452                           
 21453                           ;flashy_task.c: 297: data->holdCountBY = 0;
 21454  0B3B  085E               	movf	flashy_Main@data,w
 21455  0B3C  0086               	movwf	6
 21456  0B3D  085F               	movf	flashy_Main@data+1,w
 21457  0B3E  0087               	movwf	7
 21458  0B3F  315A               	addfsr 1,26
 21459  0B40  3000               	movlw	0
 21460  0B41  3FC0               	movwi [0]fsr1
 21461  0B42  3FC1               	movwi [1]fsr1
 21462                           
 21463                           ;flashy_task.c: 298: data->noholdCount = 0;
 21464  0B43  085E               	movf	flashy_Main@data,w
 21465  0B44  0086               	movwf	6
 21466  0B45  085F               	movf	flashy_Main@data+1,w
 21467  0B46  0087               	movwf	7
 21468  0B47  315C               	addfsr 1,28
 21469  0B48  3000               	movlw	0
 21470  0B49  3FC0               	movwi [0]fsr1
 21471  0B4A  3FC1               	movwi [1]fsr1
 21472                           
 21473                           ;flashy_task.c: 299: break;
 21474  0B4B  2FC9               	goto	l9440
 21475  0B4C                     l9202:	
 21476                           ;flashy_task.c: 300: case 1 | 4:
 21477                           
 21478                           
 21479                           ;flashy_task.c: 301: if ( data->holdCountAX == 0 ){
 21480  0B4C  085E               	movf	flashy_Main@data,w
 21481  0B4D  0086               	movwf	6
 21482  0B4E  085F               	movf	flashy_Main@data+1,w
 21483  0B4F  0087               	movwf	7
 21484  0B50  3156               	addfsr 1,22
 21485  0B51  0016               	moviw fsr1++
 21486  0B52  0401               	iorwf	1,w
 21487  0B53  1D03               	btfss	3,2
 21488  0B54  2B65               	goto	l9208
 21489                           
 21490                           ;flashy_task.c: 302: if (flashy_sparkle_rate < 5)
 21491  0B55  3000               	movlw	0
 21492  0B56  0021               	movlb	1	; select bank1
 21493  0B57  022F               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 21494  0B58  3005               	movlw	5
 21495  0B59  1903               	skipnz
 21496  0B5A  022E               	subwf	_flashy_sparkle_rate^(0+128),w
 21497  0B5B  1803               	skipnc
 21498  0B5C  2B61               	goto	l1150
 21499                           
 21500                           ;flashy_task.c: 303: flashy_sparkle_rate=5;
 21501  0B5D  3005               	movlw	5
 21502  0B5E  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 21503  0B5F  3000               	movlw	0
 21504  0B60  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 21505  0B61                     l1150:	
 21506                           
 21507                           ;flashy_task.c: 304: flashy_sparkle_rate -= 5;
 21508  0B61  3005               	movlw	5
 21509  0B62  02AE               	subwf	_flashy_sparkle_rate^(0+128),f
 21510  0B63  3000               	movlw	0
 21511  0B64  3BAF               	subwfb	(_flashy_sparkle_rate+1)^(0+128),f
 21512  0B65                     l9208:	
 21513                           
 21514                           ;flashy_task.c: 305: }
 21515                           ;flashy_task.c: 307: data->holdCountA = 0;
 21516  0B65  0020               	movlb	0	; select bank0
 21517  0B66  085E               	movf	flashy_Main@data,w
 21518  0B67  0086               	movwf	6
 21519  0B68  085F               	movf	flashy_Main@data+1,w
 21520  0B69  0087               	movwf	7
 21521  0B6A  314A               	addfsr 1,10
 21522  0B6B  3000               	movlw	0
 21523  0B6C  3FC0               	movwi [0]fsr1
 21524  0B6D  3FC1               	movwi [1]fsr1
 21525                           
 21526                           ;flashy_task.c: 308: data->holdCountB = 0;
 21527  0B6E  085E               	movf	flashy_Main@data,w
 21528  0B6F  0086               	movwf	6
 21529  0B70  085F               	movf	flashy_Main@data+1,w
 21530  0B71  0087               	movwf	7
 21531  0B72  314C               	addfsr 1,12
 21532  0B73  3000               	movlw	0
 21533  0B74  3FC0               	movwi [0]fsr1
 21534  0B75  3FC1               	movwi [1]fsr1
 21535                           
 21536                           ;flashy_task.c: 309: data->holdCountX += 1;
 21537  0B76  085E               	movf	flashy_Main@data,w
 21538  0B77  0086               	movwf	6
 21539  0B78  085F               	movf	flashy_Main@data+1,w
 21540  0B79  0087               	movwf	7
 21541  0B7A  314E               	addfsr 1,14
 21542  0B7B  3001               	movlw	1
 21543  0B7C  0781               	addwf	1,f
 21544  0B7D  3141               	addfsr 1,1
 21545  0B7E  1803               	skipnc
 21546  0B7F  0A81               	incf	1,f
 21547                           
 21548                           ;flashy_task.c: 310: data->holdCountY = 0;
 21549  0B80  085E               	movf	flashy_Main@data,w
 21550  0B81  0086               	movwf	6
 21551  0B82  085F               	movf	flashy_Main@data+1,w
 21552  0B83  0087               	movwf	7
 21553  0B84  3150               	addfsr 1,16
 21554  0B85  3000               	movlw	0
 21555  0B86  3FC0               	movwi [0]fsr1
 21556  0B87  3FC1               	movwi [1]fsr1
 21557                           
 21558                           ;flashy_task.c: 311: data->holdCountXY = 0;
 21559  0B88  085E               	movf	flashy_Main@data,w
 21560  0B89  0086               	movwf	6
 21561  0B8A  085F               	movf	flashy_Main@data+1,w
 21562  0B8B  0087               	movwf	7
 21563  0B8C  3152               	addfsr 1,18
 21564  0B8D  3000               	movlw	0
 21565  0B8E  3FC0               	movwi [0]fsr1
 21566  0B8F  3FC1               	movwi [1]fsr1
 21567                           
 21568                           ;flashy_task.c: 312: data->holdCountAY = 0;
 21569  0B90  085E               	movf	flashy_Main@data,w
 21570  0B91  0086               	movwf	6
 21571  0B92  085F               	movf	flashy_Main@data+1,w
 21572  0B93  0087               	movwf	7
 21573  0B94  3154               	addfsr 1,20
 21574  0B95  3000               	movlw	0
 21575  0B96  3FC0               	movwi [0]fsr1
 21576  0B97  3FC1               	movwi [1]fsr1
 21577                           
 21578                           ;flashy_task.c: 313: data->holdCountAX += 1;
 21579  0B98  085E               	movf	flashy_Main@data,w
 21580  0B99  0086               	movwf	6
 21581  0B9A  085F               	movf	flashy_Main@data+1,w
 21582  0B9B  0087               	movwf	7
 21583  0B9C  3156               	addfsr 1,22
 21584  0B9D  3001               	movlw	1
 21585  0B9E  0781               	addwf	1,f
 21586  0B9F  3141               	addfsr 1,1
 21587  0BA0  1803               	skipnc
 21588  0BA1  0A81               	incf	1,f
 21589                           
 21590                           ;flashy_task.c: 314: data->holdCountBX = 0;
 21591  0BA2  085E               	movf	flashy_Main@data,w
 21592  0BA3  0086               	movwf	6
 21593  0BA4  085F               	movf	flashy_Main@data+1,w
 21594  0BA5  0087               	movwf	7
 21595  0BA6  3158               	addfsr 1,24
 21596  0BA7  3000               	movlw	0
 21597  0BA8  3FC0               	movwi [0]fsr1
 21598  0BA9  3FC1               	movwi [1]fsr1
 21599                           
 21600                           ;flashy_task.c: 315: data->holdCountBY = 0;
 21601  0BAA  085E               	movf	flashy_Main@data,w
 21602  0BAB  0086               	movwf	6
 21603  0BAC  085F               	movf	flashy_Main@data+1,w
 21604  0BAD  0087               	movwf	7
 21605  0BAE  315A               	addfsr 1,26
 21606  0BAF  3000               	movlw	0
 21607  0BB0  3FC0               	movwi [0]fsr1
 21608  0BB1  3FC1               	movwi [1]fsr1
 21609                           
 21610                           ;flashy_task.c: 316: data->noholdCount = 0;
 21611  0BB2  085E               	movf	flashy_Main@data,w
 21612  0BB3  0086               	movwf	6
 21613  0BB4  085F               	movf	flashy_Main@data+1,w
 21614  0BB5  0087               	movwf	7
 21615  0BB6  315C               	addfsr 1,28
 21616  0BB7  3000               	movlw	0
 21617  0BB8  3FC0               	movwi [0]fsr1
 21618  0BB9  3FC1               	movwi [1]fsr1
 21619                           
 21620                           ;flashy_task.c: 317: break;
 21621  0BBA  2FC9               	goto	l9440
 21622  0BBB                     l9228:	
 21623                           ;flashy_task.c: 318: case 2 | 8:
 21624                           
 21625                           
 21626                           ;flashy_task.c: 319: if (data->holdCountBY == 0){
 21627  0BBB  085E               	movf	flashy_Main@data,w
 21628  0BBC  0086               	movwf	6
 21629  0BBD  085F               	movf	flashy_Main@data+1,w
 21630  0BBE  0087               	movwf	7
 21631  0BBF  315A               	addfsr 1,26
 21632  0BC0  0016               	moviw fsr1++
 21633  0BC1  0401               	iorwf	1,w
 21634  0BC2  1D03               	btfss	3,2
 21635  0BC3  2BD8               	goto	l9238
 21636                           
 21637                           ;flashy_task.c: 320: if (flashy_option_idx == 0){
 21638  0BC4  0021               	movlb	1	; select bank1
 21639  0BC5  0828               	movf	_flashy_option_idx^(0+128),w
 21640  0BC6  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 21641  0BC7  1903               	btfsc	3,2
 21642  0BC8  2BD8               	goto	l9238
 21643                           
 21644                           ;flashy_task.c: 323: else {
 21645                           ;flashy_task.c: 324: if (flashy_scroll_rate > 150){
 21646                           
 21647                           ;flashy_task.c: 322: }
 21648  0BC9  3000               	movlw	0
 21649  0BCA  022D               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 21650  0BCB  3097               	movlw	151
 21651  0BCC  1903               	skipnz
 21652  0BCD  022C               	subwf	_flashy_scroll_rate^(0+128),w
 21653  0BCE  1C03               	skipc
 21654  0BCF  2BD4               	goto	l1155
 21655                           
 21656                           ;flashy_task.c: 325: flashy_scroll_rate =150;
 21657  0BD0  3096               	movlw	150
 21658  0BD1  00AC               	movwf	_flashy_scroll_rate^(0+128)
 21659  0BD2  3000               	movlw	0
 21660  0BD3  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 21661  0BD4                     l1155:	
 21662                           
 21663                           ;flashy_task.c: 326: }
 21664                           ;flashy_task.c: 327: flashy_scroll_rate +=2;
 21665  0BD4  3002               	movlw	2
 21666  0BD5  07AC               	addwf	_flashy_scroll_rate^(0+128),f
 21667  0BD6  3000               	movlw	0
 21668  0BD7  3DAD               	addwfc	(_flashy_scroll_rate+1)^(0+128),f
 21669  0BD8                     l9238:	
 21670                           
 21671                           ;flashy_task.c: 328: }
 21672                           ;flashy_task.c: 330: }
 21673                           ;flashy_task.c: 331: data->holdCountA = 0;
 21674  0BD8  0020               	movlb	0	; select bank0
 21675  0BD9  085E               	movf	flashy_Main@data,w
 21676  0BDA  0086               	movwf	6
 21677  0BDB  085F               	movf	flashy_Main@data+1,w
 21678  0BDC  0087               	movwf	7
 21679  0BDD  314A               	addfsr 1,10
 21680  0BDE  3000               	movlw	0
 21681  0BDF  3FC0               	movwi [0]fsr1
 21682  0BE0  3FC1               	movwi [1]fsr1
 21683                           
 21684                           ;flashy_task.c: 332: data->holdCountB += 1;
 21685  0BE1  085E               	movf	flashy_Main@data,w
 21686  0BE2  0086               	movwf	6
 21687  0BE3  085F               	movf	flashy_Main@data+1,w
 21688  0BE4  0087               	movwf	7
 21689  0BE5  314C               	addfsr 1,12
 21690  0BE6  3001               	movlw	1
 21691  0BE7  0781               	addwf	1,f
 21692  0BE8  3141               	addfsr 1,1
 21693  0BE9  1803               	skipnc
 21694  0BEA  0A81               	incf	1,f
 21695                           
 21696                           ;flashy_task.c: 333: data->holdCountX = 0;
 21697  0BEB  085E               	movf	flashy_Main@data,w
 21698  0BEC  0086               	movwf	6
 21699  0BED  085F               	movf	flashy_Main@data+1,w
 21700  0BEE  0087               	movwf	7
 21701  0BEF  314E               	addfsr 1,14
 21702  0BF0  3000               	movlw	0
 21703  0BF1  3FC0               	movwi [0]fsr1
 21704  0BF2  3FC1               	movwi [1]fsr1
 21705                           
 21706                           ;flashy_task.c: 334: data->holdCountY += 1;
 21707  0BF3  085E               	movf	flashy_Main@data,w
 21708  0BF4  0086               	movwf	6
 21709  0BF5  085F               	movf	flashy_Main@data+1,w
 21710  0BF6  0087               	movwf	7
 21711  0BF7  3150               	addfsr 1,16
 21712  0BF8  3001               	movlw	1
 21713  0BF9  0781               	addwf	1,f
 21714  0BFA  3141               	addfsr 1,1
 21715  0BFB  1803               	skipnc
 21716  0BFC  0A81               	incf	1,f
 21717                           
 21718                           ;flashy_task.c: 335: data->holdCountXY = 0;
 21719  0BFD  085E               	movf	flashy_Main@data,w
 21720  0BFE  0086               	movwf	6
 21721  0BFF  085F               	movf	flashy_Main@data+1,w
 21722  0C00  0087               	movwf	7
 21723  0C01  3152               	addfsr 1,18
 21724  0C02  3000               	movlw	0
 21725  0C03  3FC0               	movwi [0]fsr1
 21726  0C04  3FC1               	movwi [1]fsr1
 21727                           
 21728                           ;flashy_task.c: 336: data->holdCountAY = 0;
 21729  0C05  085E               	movf	flashy_Main@data,w
 21730  0C06  0086               	movwf	6
 21731  0C07  085F               	movf	flashy_Main@data+1,w
 21732  0C08  0087               	movwf	7
 21733  0C09  3154               	addfsr 1,20
 21734  0C0A  3000               	movlw	0
 21735  0C0B  3FC0               	movwi [0]fsr1
 21736  0C0C  3FC1               	movwi [1]fsr1
 21737                           
 21738                           ;flashy_task.c: 337: data->holdCountAX = 0;
 21739  0C0D  085E               	movf	flashy_Main@data,w
 21740  0C0E  0086               	movwf	6
 21741  0C0F  085F               	movf	flashy_Main@data+1,w
 21742  0C10  0087               	movwf	7
 21743  0C11  3156               	addfsr 1,22
 21744  0C12  3000               	movlw	0
 21745  0C13  3FC0               	movwi [0]fsr1
 21746  0C14  3FC1               	movwi [1]fsr1
 21747                           
 21748                           ;flashy_task.c: 338: data->holdCountBX = 0;
 21749  0C15  085E               	movf	flashy_Main@data,w
 21750  0C16  0086               	movwf	6
 21751  0C17  085F               	movf	flashy_Main@data+1,w
 21752  0C18  0087               	movwf	7
 21753  0C19  3158               	addfsr 1,24
 21754  0C1A  3000               	movlw	0
 21755  0C1B  3FC0               	movwi [0]fsr1
 21756  0C1C  3FC1               	movwi [1]fsr1
 21757                           
 21758                           ;flashy_task.c: 339: data->holdCountBY += 1;
 21759  0C1D  085E               	movf	flashy_Main@data,w
 21760  0C1E  0086               	movwf	6
 21761  0C1F  085F               	movf	flashy_Main@data+1,w
 21762  0C20  0087               	movwf	7
 21763  0C21  315A               	addfsr 1,26
 21764  0C22  3001               	movlw	1
 21765  0C23  0781               	addwf	1,f
 21766  0C24  3141               	addfsr 1,1
 21767  0C25  1803               	skipnc
 21768  0C26  0A81               	incf	1,f
 21769                           
 21770                           ;flashy_task.c: 340: data->noholdCount = 0;
 21771  0C27  085E               	movf	flashy_Main@data,w
 21772  0C28  0086               	movwf	6
 21773  0C29  085F               	movf	flashy_Main@data+1,w
 21774  0C2A  0087               	movwf	7
 21775  0C2B  315C               	addfsr 1,28
 21776  0C2C  3000               	movlw	0
 21777  0C2D  3FC0               	movwi [0]fsr1
 21778  0C2E  3FC1               	movwi [1]fsr1
 21779                           
 21780                           ;flashy_task.c: 341: break;
 21781  0C2F  2FC9               	goto	l9440
 21782  0C30                     l9258:	
 21783                           ;flashy_task.c: 342: case 2 | 4:
 21784                           
 21785                           
 21786                           ;flashy_task.c: 343: if (data-> holdCountBX == 0){
 21787  0C30  085E               	movf	flashy_Main@data,w
 21788  0C31  0086               	movwf	6
 21789  0C32  085F               	movf	flashy_Main@data+1,w
 21790  0C33  0087               	movwf	7
 21791  0C34  3158               	addfsr 1,24
 21792  0C35  0016               	moviw fsr1++
 21793  0C36  0401               	iorwf	1,w
 21794  0C37  1D03               	btfss	3,2
 21795  0C38  2C4D               	goto	l9268
 21796                           
 21797                           ;flashy_task.c: 344: if (flashy_option_idx == 0){
 21798  0C39  0021               	movlb	1	; select bank1
 21799  0C3A  0828               	movf	_flashy_option_idx^(0+128),w
 21800  0C3B  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 21801  0C3C  1903               	btfsc	3,2
 21802  0C3D  2C4D               	goto	l9268
 21803                           
 21804                           ;flashy_task.c: 347: else {
 21805                           ;flashy_task.c: 348: if (flashy_scroll_rate < 5){
 21806                           
 21807                           ;flashy_task.c: 346: }
 21808  0C3E  3000               	movlw	0
 21809  0C3F  022D               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 21810  0C40  3005               	movlw	5
 21811  0C41  1903               	skipnz
 21812  0C42  022C               	subwf	_flashy_scroll_rate^(0+128),w
 21813  0C43  1803               	skipnc
 21814  0C44  2C49               	goto	l1160
 21815                           
 21816                           ;flashy_task.c: 349: flashy_scroll_rate =5;
 21817  0C45  3005               	movlw	5
 21818  0C46  00AC               	movwf	_flashy_scroll_rate^(0+128)
 21819  0C47  3000               	movlw	0
 21820  0C48  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 21821  0C49                     l1160:	
 21822                           
 21823                           ;flashy_task.c: 350: }
 21824                           ;flashy_task.c: 351: flashy_scroll_rate -=3;
 21825  0C49  3003               	movlw	3
 21826  0C4A  02AC               	subwf	_flashy_scroll_rate^(0+128),f
 21827  0C4B  3000               	movlw	0
 21828  0C4C  3BAD               	subwfb	(_flashy_scroll_rate+1)^(0+128),f
 21829  0C4D                     l9268:	
 21830                           
 21831                           ;flashy_task.c: 352: }
 21832                           ;flashy_task.c: 354: }
 21833                           ;flashy_task.c: 355: data->holdCountA = 0;
 21834  0C4D  0020               	movlb	0	; select bank0
 21835  0C4E  085E               	movf	flashy_Main@data,w
 21836  0C4F  0086               	movwf	6
 21837  0C50  085F               	movf	flashy_Main@data+1,w
 21838  0C51  0087               	movwf	7
 21839  0C52  314A               	addfsr 1,10
 21840  0C53  3000               	movlw	0
 21841  0C54  3FC0               	movwi [0]fsr1
 21842  0C55  3FC1               	movwi [1]fsr1
 21843                           
 21844                           ;flashy_task.c: 356: data->holdCountB += 1;
 21845  0C56  085E               	movf	flashy_Main@data,w
 21846  0C57  0086               	movwf	6
 21847  0C58  085F               	movf	flashy_Main@data+1,w
 21848  0C59  0087               	movwf	7
 21849  0C5A  314C               	addfsr 1,12
 21850  0C5B  3001               	movlw	1
 21851  0C5C  0781               	addwf	1,f
 21852  0C5D  3141               	addfsr 1,1
 21853  0C5E  1803               	skipnc
 21854  0C5F  0A81               	incf	1,f
 21855                           
 21856                           ;flashy_task.c: 357: data->holdCountX += 1;
 21857  0C60  085E               	movf	flashy_Main@data,w
 21858  0C61  0086               	movwf	6
 21859  0C62  085F               	movf	flashy_Main@data+1,w
 21860  0C63  0087               	movwf	7
 21861  0C64  314E               	addfsr 1,14
 21862  0C65  3001               	movlw	1
 21863  0C66  0781               	addwf	1,f
 21864  0C67  3141               	addfsr 1,1
 21865  0C68  1803               	skipnc
 21866  0C69  0A81               	incf	1,f
 21867                           
 21868                           ;flashy_task.c: 358: data->holdCountY = 0;
 21869  0C6A  085E               	movf	flashy_Main@data,w
 21870  0C6B  0086               	movwf	6
 21871  0C6C  085F               	movf	flashy_Main@data+1,w
 21872  0C6D  0087               	movwf	7
 21873  0C6E  3150               	addfsr 1,16
 21874  0C6F  3000               	movlw	0
 21875  0C70  3FC0               	movwi [0]fsr1
 21876  0C71  3FC1               	movwi [1]fsr1
 21877                           
 21878                           ;flashy_task.c: 359: data->holdCountXY = 0;
 21879  0C72  085E               	movf	flashy_Main@data,w
 21880  0C73  0086               	movwf	6
 21881  0C74  085F               	movf	flashy_Main@data+1,w
 21882  0C75  0087               	movwf	7
 21883  0C76  3152               	addfsr 1,18
 21884  0C77  3000               	movlw	0
 21885  0C78  3FC0               	movwi [0]fsr1
 21886  0C79  3FC1               	movwi [1]fsr1
 21887                           
 21888                           ;flashy_task.c: 360: data->holdCountAY = 0;
 21889  0C7A  085E               	movf	flashy_Main@data,w
 21890  0C7B  0086               	movwf	6
 21891  0C7C  085F               	movf	flashy_Main@data+1,w
 21892  0C7D  0087               	movwf	7
 21893  0C7E  3154               	addfsr 1,20
 21894  0C7F  3000               	movlw	0
 21895  0C80  3FC0               	movwi [0]fsr1
 21896  0C81  3FC1               	movwi [1]fsr1
 21897                           
 21898                           ;flashy_task.c: 361: data->holdCountAX = 0;
 21899  0C82  085E               	movf	flashy_Main@data,w
 21900  0C83  0086               	movwf	6
 21901  0C84  085F               	movf	flashy_Main@data+1,w
 21902  0C85  0087               	movwf	7
 21903  0C86  3156               	addfsr 1,22
 21904  0C87  3000               	movlw	0
 21905  0C88  3FC0               	movwi [0]fsr1
 21906  0C89  3FC1               	movwi [1]fsr1
 21907                           
 21908                           ;flashy_task.c: 362: data->holdCountBX += 1;
 21909  0C8A  085E               	movf	flashy_Main@data,w
 21910  0C8B  0086               	movwf	6
 21911  0C8C  085F               	movf	flashy_Main@data+1,w
 21912  0C8D  0087               	movwf	7
 21913  0C8E  3158               	addfsr 1,24
 21914  0C8F  3001               	movlw	1
 21915  0C90  0781               	addwf	1,f
 21916  0C91  3141               	addfsr 1,1
 21917  0C92  1803               	skipnc
 21918  0C93  0A81               	incf	1,f
 21919                           
 21920                           ;flashy_task.c: 363: data->holdCountBY = 0;
 21921  0C94  085E               	movf	flashy_Main@data,w
 21922  0C95  0086               	movwf	6
 21923  0C96  085F               	movf	flashy_Main@data+1,w
 21924  0C97  0087               	movwf	7
 21925  0C98  315A               	addfsr 1,26
 21926  0C99  3000               	movlw	0
 21927  0C9A  3FC0               	movwi [0]fsr1
 21928  0C9B  3FC1               	movwi [1]fsr1
 21929                           
 21930                           ;flashy_task.c: 364: data->noholdCount = 0;
 21931  0C9C  085E               	movf	flashy_Main@data,w
 21932  0C9D  0086               	movwf	6
 21933  0C9E  085F               	movf	flashy_Main@data+1,w
 21934  0C9F  0087               	movwf	7
 21935  0CA0  315C               	addfsr 1,28
 21936  0CA1  3000               	movlw	0
 21937  0CA2  3FC0               	movwi [0]fsr1
 21938  0CA3  3FC1               	movwi [1]fsr1
 21939                           
 21940                           ;flashy_task.c: 365: break;
 21941  0CA4  2FC9               	goto	l9440
 21942  0CA5                     l9288:	
 21943                           ;flashy_task.c: 366: case 8:
 21944                           
 21945                           
 21946                           ;flashy_task.c: 368: if (data->holdCountY == 0 && data->blasterTickCount == 0){
 21947  0CA5  085E               	movf	flashy_Main@data,w
 21948  0CA6  0086               	movwf	6
 21949  0CA7  085F               	movf	flashy_Main@data+1,w
 21950  0CA8  0087               	movwf	7
 21951  0CA9  3150               	addfsr 1,16
 21952  0CAA  0016               	moviw fsr1++
 21953  0CAB  0401               	iorwf	1,w
 21954  0CAC  1D03               	btfss	3,2
 21955  0CAD  2CFB               	goto	l9306
 21956  0CAE  085E               	movf	flashy_Main@data,w
 21957  0CAF  0086               	movwf	6
 21958  0CB0  085F               	movf	flashy_Main@data+1,w
 21959  0CB1  0087               	movwf	7
 21960  0CB2  3147               	addfsr 1,7
 21961  0CB3  0016               	moviw fsr1++
 21962  0CB4  0401               	iorwf	1,w
 21963  0CB5  1D03               	btfss	3,2
 21964  0CB6  2CFB               	goto	l9306
 21965                           
 21966                           ;flashy_task.c: 370: nullifyBadge_userLedsSet(data->badge, 0x0);
 21967  0CB7  3000               	movlw	0
 21968  0CB8  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 21969  0CB9  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 21970  0CBA  085E               	movf	flashy_Main@data,w
 21971  0CBB  0086               	movwf	6
 21972  0CBC  085F               	movf	flashy_Main@data+1,w
 21973  0CBD  0087               	movwf	7
 21974  0CBE  0801               	movf	1,w
 21975  0CBF  31B5  2513  3188   	fcall	_nullifyBadge_userLedsSet
 21976                           
 21977                           ;flashy_task.c: 372: data->displayTickCount = 0;
 21978  0CC2  0020               	movlb	0	; select bank0
 21979  0CC3  085E               	movf	flashy_Main@data,w
 21980  0CC4  0086               	movwf	6
 21981  0CC5  085F               	movf	flashy_Main@data+1,w
 21982  0CC6  0087               	movwf	7
 21983  0CC7  3144               	addfsr 1,4
 21984  0CC8  3000               	movlw	0
 21985  0CC9  3FC0               	movwi [0]fsr1
 21986  0CCA  3FC1               	movwi [1]fsr1
 21987                           
 21988                           ;flashy_task.c: 373: data->blasterTickCount = 100;
 21989  0CCB  085E               	movf	flashy_Main@data,w
 21990  0CCC  0086               	movwf	6
 21991  0CCD  085F               	movf	flashy_Main@data+1,w
 21992  0CCE  0087               	movwf	7
 21993  0CCF  3147               	addfsr 1,7
 21994  0CD0  3064               	movlw	100
 21995  0CD1  3FC0               	movwi [0]fsr1
 21996  0CD2  3000               	movlw	0
 21997  0CD3  3FC1               	movwi [1]fsr1
 21998                           
 21999                           ;flashy_task.c: 374: data->delayTickCount = 5;
 22000  0CD4  085E               	movf	flashy_Main@data,w
 22001  0CD5  0086               	movwf	6
 22002  0CD6  085F               	movf	flashy_Main@data+1,w
 22003  0CD7  0087               	movwf	7
 22004  0CD8  3141               	addfsr 1,1
 22005  0CD9  3005               	movlw	5
 22006  0CDA  3FC0               	movwi [0]fsr1
 22007  0CDB  3000               	movlw	0
 22008  0CDC  3FC1               	movwi [1]fsr1
 22009                           
 22010                           ;flashy_task.c: 376: data->led_state = FLASHY_STATE_LED_SHOT;
 22011  0CDD  085E               	movf	flashy_Main@data,w
 22012  0CDE  3E03               	addlw	3
 22013  0CDF  00D4               	movwf	??_flashy_Main
 22014  0CE0  3000               	movlw	0
 22015  0CE1  3D5F               	addwfc	flashy_Main@data+1,w
 22016  0CE2  00D5               	movwf	??_flashy_Main+1
 22017  0CE3  0854               	movf	??_flashy_Main,w
 22018  0CE4  0086               	movwf	6
 22019  0CE5  0855               	movf	??_flashy_Main+1,w
 22020  0CE6  0087               	movwf	7
 22021  0CE7  3001               	movlw	1
 22022  0CE8  0081               	movwf	1
 22023                           
 22024                           ;flashy_task.c: 377: data->display_state = FLASHY_STATE_DISPLAY_BLASTER;
 22025  0CE9  085E               	movf	flashy_Main@data,w
 22026  0CEA  3E06               	addlw	6
 22027  0CEB  00D4               	movwf	??_flashy_Main
 22028  0CEC  3000               	movlw	0
 22029  0CED  3D5F               	addwfc	flashy_Main@data+1,w
 22030  0CEE  00D5               	movwf	??_flashy_Main+1
 22031  0CEF  0854               	movf	??_flashy_Main,w
 22032  0CF0  0086               	movwf	6
 22033  0CF1  0855               	movf	??_flashy_Main+1,w
 22034  0CF2  0087               	movwf	7
 22035  0CF3  3002               	movlw	2
 22036  0CF4  0081               	movwf	1
 22037                           
 22038                           ;flashy_task.c: 378: data->blaster_state = FLASHY_BLASTER_SHOOTING_STATE;
 22039  0CF5  085E               	movf	flashy_Main@data,w
 22040  0CF6  0086               	movwf	6
 22041  0CF7  085F               	movf	flashy_Main@data+1,w
 22042  0CF8  0087               	movwf	7
 22043  0CF9  3149               	addfsr 1,9
 22044  0CFA  0181               	clrf	1
 22045  0CFB                     l9306:	
 22046                           
 22047                           ;flashy_task.c: 379: }
 22048                           ;flashy_task.c: 381: data->holdCountA = 0;
 22049  0CFB  085E               	movf	flashy_Main@data,w
 22050  0CFC  0086               	movwf	6
 22051  0CFD  085F               	movf	flashy_Main@data+1,w
 22052  0CFE  0087               	movwf	7
 22053  0CFF  314A               	addfsr 1,10
 22054  0D00  3000               	movlw	0
 22055  0D01  3FC0               	movwi [0]fsr1
 22056  0D02  3FC1               	movwi [1]fsr1
 22057                           
 22058                           ;flashy_task.c: 382: data->holdCountB = 0;
 22059  0D03  085E               	movf	flashy_Main@data,w
 22060  0D04  0086               	movwf	6
 22061  0D05  085F               	movf	flashy_Main@data+1,w
 22062  0D06  0087               	movwf	7
 22063  0D07  314C               	addfsr 1,12
 22064  0D08  3000               	movlw	0
 22065  0D09  3FC0               	movwi [0]fsr1
 22066  0D0A  3FC1               	movwi [1]fsr1
 22067                           
 22068                           ;flashy_task.c: 383: data->holdCountX = 0;
 22069  0D0B  085E               	movf	flashy_Main@data,w
 22070  0D0C  0086               	movwf	6
 22071  0D0D  085F               	movf	flashy_Main@data+1,w
 22072  0D0E  0087               	movwf	7
 22073  0D0F  314E               	addfsr 1,14
 22074  0D10  3000               	movlw	0
 22075  0D11  3FC0               	movwi [0]fsr1
 22076  0D12  3FC1               	movwi [1]fsr1
 22077                           
 22078                           ;flashy_task.c: 384: data->holdCountY += 1;
 22079  0D13  085E               	movf	flashy_Main@data,w
 22080  0D14  0086               	movwf	6
 22081  0D15  085F               	movf	flashy_Main@data+1,w
 22082  0D16  0087               	movwf	7
 22083  0D17  3150               	addfsr 1,16
 22084  0D18  3001               	movlw	1
 22085  0D19  0781               	addwf	1,f
 22086  0D1A  3141               	addfsr 1,1
 22087  0D1B  1803               	skipnc
 22088  0D1C  0A81               	incf	1,f
 22089                           
 22090                           ;flashy_task.c: 385: data->holdCountXY = 0;
 22091  0D1D  085E               	movf	flashy_Main@data,w
 22092  0D1E  0086               	movwf	6
 22093  0D1F  085F               	movf	flashy_Main@data+1,w
 22094  0D20  0087               	movwf	7
 22095  0D21  3152               	addfsr 1,18
 22096  0D22  3000               	movlw	0
 22097  0D23  3FC0               	movwi [0]fsr1
 22098  0D24  3FC1               	movwi [1]fsr1
 22099                           
 22100                           ;flashy_task.c: 386: data->holdCountAY = 0;
 22101  0D25  085E               	movf	flashy_Main@data,w
 22102  0D26  0086               	movwf	6
 22103  0D27  085F               	movf	flashy_Main@data+1,w
 22104  0D28  0087               	movwf	7
 22105  0D29  3154               	addfsr 1,20
 22106  0D2A  3000               	movlw	0
 22107  0D2B  3FC0               	movwi [0]fsr1
 22108  0D2C  3FC1               	movwi [1]fsr1
 22109                           
 22110                           ;flashy_task.c: 387: data->holdCountAX = 0;
 22111  0D2D  085E               	movf	flashy_Main@data,w
 22112  0D2E  0086               	movwf	6
 22113  0D2F  085F               	movf	flashy_Main@data+1,w
 22114  0D30  0087               	movwf	7
 22115  0D31  3156               	addfsr 1,22
 22116  0D32  3000               	movlw	0
 22117  0D33  3FC0               	movwi [0]fsr1
 22118  0D34  3FC1               	movwi [1]fsr1
 22119                           
 22120                           ;flashy_task.c: 388: data->holdCountBX = 0;
 22121  0D35  085E               	movf	flashy_Main@data,w
 22122  0D36  0086               	movwf	6
 22123  0D37  085F               	movf	flashy_Main@data+1,w
 22124  0D38  0087               	movwf	7
 22125  0D39  3158               	addfsr 1,24
 22126  0D3A  3000               	movlw	0
 22127  0D3B  3FC0               	movwi [0]fsr1
 22128  0D3C  3FC1               	movwi [1]fsr1
 22129                           
 22130                           ;flashy_task.c: 389: data->holdCountBY = 0;
 22131  0D3D  085E               	movf	flashy_Main@data,w
 22132  0D3E  0086               	movwf	6
 22133  0D3F  085F               	movf	flashy_Main@data+1,w
 22134  0D40  0087               	movwf	7
 22135  0D41  315A               	addfsr 1,26
 22136  0D42  3000               	movlw	0
 22137  0D43  3FC0               	movwi [0]fsr1
 22138  0D44  3FC1               	movwi [1]fsr1
 22139                           
 22140                           ;flashy_task.c: 390: data->noholdCount = 0;
 22141  0D45  085E               	movf	flashy_Main@data,w
 22142  0D46  0086               	movwf	6
 22143  0D47  085F               	movf	flashy_Main@data+1,w
 22144  0D48  0087               	movwf	7
 22145  0D49  315C               	addfsr 1,28
 22146  0D4A  3000               	movlw	0
 22147  0D4B  3FC0               	movwi [0]fsr1
 22148  0D4C  3FC1               	movwi [1]fsr1
 22149                           
 22150                           ;flashy_task.c: 391: break;
 22151  0D4D  2FC9               	goto	l9440
 22152  0D4E                     l9326:	
 22153                           ;flashy_task.c: 392: case 2:
 22154                           
 22155                           
 22156                           ;flashy_task.c: 394: if (data->holdCountB == 0){
 22157  0D4E  085E               	movf	flashy_Main@data,w
 22158  0D4F  0086               	movwf	6
 22159  0D50  085F               	movf	flashy_Main@data+1,w
 22160  0D51  0087               	movwf	7
 22161  0D52  314C               	addfsr 1,12
 22162  0D53  0016               	moviw fsr1++
 22163  0D54  0401               	iorwf	1,w
 22164  0D55  1D03               	btfss	3,2
 22165  0D56  2D7C               	goto	l9336
 22166                           
 22167                           ;flashy_task.c: 395: data->display_state = FLASHY_STATE_DISPLAY;
 22168  0D57  085E               	movf	flashy_Main@data,w
 22169  0D58  0086               	movwf	6
 22170  0D59  085F               	movf	flashy_Main@data+1,w
 22171  0D5A  0087               	movwf	7
 22172  0D5B  3146               	addfsr 1,6
 22173  0D5C  0181               	clrf	1
 22174                           
 22175                           ;flashy_task.c: 396: if (flashy_option_idx == flashy_option_size - 1){
 22176  0D5D  0021               	movlb	1	; select bank1
 22177  0D5E  0826               	movf	_flashy_option_size^(0+128),w
 22178  0D5F  3EFF               	addlw	255
 22179  0D60  0020               	movlb	0	; select bank0
 22180  0D61  00D4               	movwf	??_flashy_Main
 22181  0D62  30FF               	movlw	255
 22182  0D63  0021               	movlb	1	; select bank1
 22183  0D64  3D27               	addwfc	(_flashy_option_size+1)^(0+128),w
 22184  0D65  0020               	movlb	0	; select bank0
 22185  0D66  00D5               	movwf	??_flashy_Main+1
 22186  0D67  0021               	movlb	1	; select bank1
 22187  0D68  0829               	movf	(_flashy_option_idx+1)^(0+128),w
 22188  0D69  0020               	movlb	0	; select bank0
 22189  0D6A  0655               	xorwf	??_flashy_Main+1,w
 22190  0D6B  1D03               	skipz
 22191  0D6C  2D71               	goto	u5785
 22192  0D6D  0021               	movlb	1	; select bank1
 22193  0D6E  0828               	movf	_flashy_option_idx^(0+128),w
 22194  0D6F  0020               	movlb	0	; select bank0
 22195  0D70  0654               	xorwf	??_flashy_Main,w
 22196  0D71                     u5785:	
 22197  0D71  1D03               	skipz
 22198  0D72  2D77               	goto	l9334
 22199                           
 22200                           ;flashy_task.c: 397: flashy_option_idx = 0;
 22201  0D73  0021               	movlb	1	; select bank1
 22202  0D74  01A8               	clrf	_flashy_option_idx^(0+128)
 22203  0D75  01A9               	clrf	(_flashy_option_idx+1)^(0+128)
 22204                           
 22205                           ;flashy_task.c: 398: }
 22206  0D76  2D7C               	goto	l9336
 22207  0D77                     l9334:	
 22208                           
 22209                           ;flashy_task.c: 399: else {
 22210                           ;flashy_task.c: 400: flashy_option_idx += 1;
 22211  0D77  3001               	movlw	1
 22212  0D78  0021               	movlb	1	; select bank1
 22213  0D79  07A8               	addwf	_flashy_option_idx^(0+128),f
 22214  0D7A  3000               	movlw	0
 22215  0D7B  3DA9               	addwfc	(_flashy_option_idx+1)^(0+128),f
 22216  0D7C                     l9336:	
 22217                           
 22218                           ;flashy_task.c: 401: }
 22219                           ;flashy_task.c: 402: }
 22220                           ;flashy_task.c: 403: data->holdCountA = 0;
 22221  0D7C  0020               	movlb	0	; select bank0
 22222  0D7D  085E               	movf	flashy_Main@data,w
 22223  0D7E  0086               	movwf	6
 22224  0D7F  085F               	movf	flashy_Main@data+1,w
 22225  0D80  0087               	movwf	7
 22226  0D81  314A               	addfsr 1,10
 22227  0D82  3000               	movlw	0
 22228  0D83  3FC0               	movwi [0]fsr1
 22229  0D84  3FC1               	movwi [1]fsr1
 22230                           
 22231                           ;flashy_task.c: 404: data->holdCountB += 1;
 22232  0D85  085E               	movf	flashy_Main@data,w
 22233  0D86  0086               	movwf	6
 22234  0D87  085F               	movf	flashy_Main@data+1,w
 22235  0D88  0087               	movwf	7
 22236  0D89  314C               	addfsr 1,12
 22237  0D8A  3001               	movlw	1
 22238  0D8B  0781               	addwf	1,f
 22239  0D8C  3141               	addfsr 1,1
 22240  0D8D  1803               	skipnc
 22241  0D8E  0A81               	incf	1,f
 22242                           
 22243                           ;flashy_task.c: 405: data->holdCountX = 0;
 22244  0D8F  085E               	movf	flashy_Main@data,w
 22245  0D90  0086               	movwf	6
 22246  0D91  085F               	movf	flashy_Main@data+1,w
 22247  0D92  0087               	movwf	7
 22248  0D93  314E               	addfsr 1,14
 22249  0D94  3000               	movlw	0
 22250  0D95  3FC0               	movwi [0]fsr1
 22251  0D96  3FC1               	movwi [1]fsr1
 22252                           
 22253                           ;flashy_task.c: 406: data->holdCountY = 0;
 22254  0D97  085E               	movf	flashy_Main@data,w
 22255  0D98  0086               	movwf	6
 22256  0D99  085F               	movf	flashy_Main@data+1,w
 22257  0D9A  0087               	movwf	7
 22258  0D9B  3150               	addfsr 1,16
 22259  0D9C  3000               	movlw	0
 22260  0D9D  3FC0               	movwi [0]fsr1
 22261  0D9E  3FC1               	movwi [1]fsr1
 22262                           
 22263                           ;flashy_task.c: 407: data->holdCountXY = 0;
 22264  0D9F  085E               	movf	flashy_Main@data,w
 22265  0DA0  0086               	movwf	6
 22266  0DA1  085F               	movf	flashy_Main@data+1,w
 22267  0DA2  0087               	movwf	7
 22268  0DA3  3152               	addfsr 1,18
 22269  0DA4  3000               	movlw	0
 22270  0DA5  3FC0               	movwi [0]fsr1
 22271  0DA6  3FC1               	movwi [1]fsr1
 22272                           
 22273                           ;flashy_task.c: 408: data->holdCountAY = 0;
 22274  0DA7  085E               	movf	flashy_Main@data,w
 22275  0DA8  0086               	movwf	6
 22276  0DA9  085F               	movf	flashy_Main@data+1,w
 22277  0DAA  0087               	movwf	7
 22278  0DAB  3154               	addfsr 1,20
 22279  0DAC  3000               	movlw	0
 22280  0DAD  3FC0               	movwi [0]fsr1
 22281  0DAE  3FC1               	movwi [1]fsr1
 22282                           
 22283                           ;flashy_task.c: 409: data->holdCountAX = 0;
 22284  0DAF  085E               	movf	flashy_Main@data,w
 22285  0DB0  0086               	movwf	6
 22286  0DB1  085F               	movf	flashy_Main@data+1,w
 22287  0DB2  0087               	movwf	7
 22288  0DB3  3156               	addfsr 1,22
 22289  0DB4  3000               	movlw	0
 22290  0DB5  3FC0               	movwi [0]fsr1
 22291  0DB6  3FC1               	movwi [1]fsr1
 22292                           
 22293                           ;flashy_task.c: 410: data->holdCountBX = 0;
 22294  0DB7  085E               	movf	flashy_Main@data,w
 22295  0DB8  0086               	movwf	6
 22296  0DB9  085F               	movf	flashy_Main@data+1,w
 22297  0DBA  0087               	movwf	7
 22298  0DBB  3158               	addfsr 1,24
 22299  0DBC  3000               	movlw	0
 22300  0DBD  3FC0               	movwi [0]fsr1
 22301  0DBE  3FC1               	movwi [1]fsr1
 22302                           
 22303                           ;flashy_task.c: 411: data->holdCountBY = 0;
 22304  0DBF  085E               	movf	flashy_Main@data,w
 22305  0DC0  0086               	movwf	6
 22306  0DC1  085F               	movf	flashy_Main@data+1,w
 22307  0DC2  0087               	movwf	7
 22308  0DC3  315A               	addfsr 1,26
 22309  0DC4  3000               	movlw	0
 22310  0DC5  3FC0               	movwi [0]fsr1
 22311  0DC6  3FC1               	movwi [1]fsr1
 22312                           
 22313                           ;flashy_task.c: 412: data->noholdCount = 0;
 22314  0DC7  085E               	movf	flashy_Main@data,w
 22315  0DC8  0086               	movwf	6
 22316  0DC9  085F               	movf	flashy_Main@data+1,w
 22317  0DCA  0087               	movwf	7
 22318  0DCB  315C               	addfsr 1,28
 22319  0DCC  3000               	movlw	0
 22320  0DCD  3FC0               	movwi [0]fsr1
 22321  0DCE  3FC1               	movwi [1]fsr1
 22322                           
 22323                           ;flashy_task.c: 413: break;
 22324  0DCF  2FC9               	goto	l9440
 22325  0DD0                     l9356:	
 22326                           ;flashy_task.c: 414: case 1:
 22327                           
 22328                           
 22329                           ;flashy_task.c: 415: if ( data->holdCountA == 0){
 22330  0DD0  085E               	movf	flashy_Main@data,w
 22331  0DD1  0086               	movwf	6
 22332  0DD2  085F               	movf	flashy_Main@data+1,w
 22333  0DD3  0087               	movwf	7
 22334  0DD4  314A               	addfsr 1,10
 22335  0DD5  0016               	moviw fsr1++
 22336  0DD6  0401               	iorwf	1,w
 22337  0DD7  1D03               	btfss	3,2
 22338  0DD8  2E3E               	goto	l9384
 22339                           
 22340                           ;flashy_task.c: 418: if (flashy_leds_state_track > 4){
 22341  0DD9  3000               	movlw	0
 22342  0DDA  0021               	movlb	1	; select bank1
 22343  0DDB  0231               	subwf	(_flashy_leds_state_track+1)^(0+128),w
 22344  0DDC  3005               	movlw	5
 22345  0DDD  1903               	skipnz
 22346  0DDE  0230               	subwf	_flashy_leds_state_track^(0+128),w
 22347  0DDF  1C03               	skipc
 22348  0DE0  2DE3               	goto	l9362
 22349                           
 22350                           ;flashy_task.c: 419: flashy_leds_state_track=0;
 22351  0DE1  01B0               	clrf	_flashy_leds_state_track^(0+128)
 22352  0DE2  01B1               	clrf	(_flashy_leds_state_track+1)^(0+128)
 22353  0DE3                     l9362:	
 22354                           
 22355                           ;flashy_task.c: 420: }
 22356                           ;flashy_task.c: 421: if (flashy_leds_state_track== 0){
 22357  0DE3  0830               	movf	_flashy_leds_state_track^(0+128),w
 22358  0DE4  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22359  0DE5  1D03               	btfss	3,2
 22360  0DE6  2DF4               	goto	l9366
 22361                           
 22362                           ;flashy_task.c: 422: data->led_state = FLASHY_STATE_LED_ALT;
 22363  0DE7  0020               	movlb	0	; select bank0
 22364  0DE8  085E               	movf	flashy_Main@data,w
 22365  0DE9  3E03               	addlw	3
 22366  0DEA  00D4               	movwf	??_flashy_Main
 22367  0DEB  3000               	movlw	0
 22368  0DEC  3D5F               	addwfc	flashy_Main@data+1,w
 22369  0DED  00D5               	movwf	??_flashy_Main+1
 22370  0DEE  0854               	movf	??_flashy_Main,w
 22371  0DEF  0086               	movwf	6
 22372  0DF0  0855               	movf	??_flashy_Main+1,w
 22373  0DF1  0087               	movwf	7
 22374  0DF2  3004               	movlw	4
 22375  0DF3  0081               	movwf	1
 22376  0DF4                     l9366:	
 22377                           
 22378                           ;flashy_task.c: 423: }
 22379                           ;flashy_task.c: 424: if (flashy_leds_state_track ==1){
 22380  0DF4  0021               	movlb	1	; select bank1
 22381  0DF5  0330               	decf	_flashy_leds_state_track^(0+128),w
 22382  0DF6  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22383  0DF7  1D03               	btfss	3,2
 22384  0DF8  2E06               	goto	l9370
 22385                           
 22386                           ;flashy_task.c: 425: data->led_state = FLASHY_STATE_SPARKLE;
 22387  0DF9  0020               	movlb	0	; select bank0
 22388  0DFA  085E               	movf	flashy_Main@data,w
 22389  0DFB  3E03               	addlw	3
 22390  0DFC  00D4               	movwf	??_flashy_Main
 22391  0DFD  3000               	movlw	0
 22392  0DFE  3D5F               	addwfc	flashy_Main@data+1,w
 22393  0DFF  00D5               	movwf	??_flashy_Main+1
 22394  0E00  0854               	movf	??_flashy_Main,w
 22395  0E01  0086               	movwf	6
 22396  0E02  0855               	movf	??_flashy_Main+1,w
 22397  0E03  0087               	movwf	7
 22398  0E04  3002               	movlw	2
 22399  0E05  0081               	movwf	1
 22400  0E06                     l9370:	
 22401                           
 22402                           ;flashy_task.c: 426: }
 22403                           ;flashy_task.c: 427: if (flashy_leds_state_track == 2){
 22404  0E06  3002               	movlw	2
 22405  0E07  0021               	movlb	1	; select bank1
 22406  0E08  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22407  0E09  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22408  0E0A  1D03               	btfss	3,2
 22409  0E0B  2E19               	goto	l9374
 22410                           
 22411                           ;flashy_task.c: 428: data->led_state = FLASHY_STATE_CIRCLE;
 22412  0E0C  0020               	movlb	0	; select bank0
 22413  0E0D  085E               	movf	flashy_Main@data,w
 22414  0E0E  3E03               	addlw	3
 22415  0E0F  00D4               	movwf	??_flashy_Main
 22416  0E10  3000               	movlw	0
 22417  0E11  3D5F               	addwfc	flashy_Main@data+1,w
 22418  0E12  00D5               	movwf	??_flashy_Main+1
 22419  0E13  0854               	movf	??_flashy_Main,w
 22420  0E14  0086               	movwf	6
 22421  0E15  0855               	movf	??_flashy_Main+1,w
 22422  0E16  0087               	movwf	7
 22423  0E17  3003               	movlw	3
 22424  0E18  0081               	movwf	1
 22425  0E19                     l9374:	
 22426                           
 22427                           ;flashy_task.c: 429: }
 22428                           ;flashy_task.c: 430: if (flashy_leds_state_track == 3){
 22429  0E19  3003               	movlw	3
 22430  0E1A  0021               	movlb	1	; select bank1
 22431  0E1B  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22432  0E1C  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22433  0E1D  1D03               	btfss	3,2
 22434  0E1E  2E26               	goto	l9378
 22435                           
 22436                           ;flashy_task.c: 431: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 22437  0E1F  0020               	movlb	0	; select bank0
 22438  0E20  085E               	movf	flashy_Main@data,w
 22439  0E21  0086               	movwf	6
 22440  0E22  085F               	movf	flashy_Main@data+1,w
 22441  0E23  0087               	movwf	7
 22442  0E24  3143               	addfsr 1,3
 22443  0E25  0181               	clrf	1
 22444  0E26                     l9378:	
 22445                           
 22446                           ;flashy_task.c: 432: }
 22447                           ;flashy_task.c: 433: if (flashy_leds_state_track ==4 ){
 22448  0E26  3004               	movlw	4
 22449  0E27  0021               	movlb	1	; select bank1
 22450  0E28  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22451  0E29  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22452  0E2A  1D03               	btfss	3,2
 22453  0E2B  2E39               	goto	l9382
 22454                           
 22455                           ;flashy_task.c: 434: data->led_state = FLASHY_STATE_LED_PARODY;
 22456  0E2C  0020               	movlb	0	; select bank0
 22457  0E2D  085E               	movf	flashy_Main@data,w
 22458  0E2E  3E03               	addlw	3
 22459  0E2F  00D4               	movwf	??_flashy_Main
 22460  0E30  3000               	movlw	0
 22461  0E31  3D5F               	addwfc	flashy_Main@data+1,w
 22462  0E32  00D5               	movwf	??_flashy_Main+1
 22463  0E33  0854               	movf	??_flashy_Main,w
 22464  0E34  0086               	movwf	6
 22465  0E35  0855               	movf	??_flashy_Main+1,w
 22466  0E36  0087               	movwf	7
 22467  0E37  3005               	movlw	5
 22468  0E38  0081               	movwf	1
 22469  0E39                     l9382:	
 22470                           
 22471                           ;flashy_task.c: 435: }
 22472                           ;flashy_task.c: 436: flashy_leds_state_track +=1;
 22473  0E39  3001               	movlw	1
 22474  0E3A  0021               	movlb	1	; select bank1
 22475  0E3B  07B0               	addwf	_flashy_leds_state_track^(0+128),f
 22476  0E3C  3000               	movlw	0
 22477  0E3D  3DB1               	addwfc	(_flashy_leds_state_track+1)^(0+128),f
 22478  0E3E                     l9384:	
 22479                           
 22480                           ;flashy_task.c: 437: }
 22481                           ;flashy_task.c: 439: data->holdCountA += 1;
 22482  0E3E  0020               	movlb	0	; select bank0
 22483  0E3F  085E               	movf	flashy_Main@data,w
 22484  0E40  0086               	movwf	6
 22485  0E41  085F               	movf	flashy_Main@data+1,w
 22486  0E42  0087               	movwf	7
 22487  0E43  314A               	addfsr 1,10
 22488  0E44  3001               	movlw	1
 22489  0E45  0781               	addwf	1,f
 22490  0E46  3141               	addfsr 1,1
 22491  0E47  1803               	skipnc
 22492  0E48  0A81               	incf	1,f
 22493                           
 22494                           ;flashy_task.c: 440: data->holdCountB = 0;
 22495  0E49  085E               	movf	flashy_Main@data,w
 22496  0E4A  0086               	movwf	6
 22497  0E4B  085F               	movf	flashy_Main@data+1,w
 22498  0E4C  0087               	movwf	7
 22499  0E4D  314C               	addfsr 1,12
 22500  0E4E  3000               	movlw	0
 22501  0E4F  3FC0               	movwi [0]fsr1
 22502  0E50  3FC1               	movwi [1]fsr1
 22503                           
 22504                           ;flashy_task.c: 441: data->holdCountX = 0;
 22505  0E51  085E               	movf	flashy_Main@data,w
 22506  0E52  0086               	movwf	6
 22507  0E53  085F               	movf	flashy_Main@data+1,w
 22508  0E54  0087               	movwf	7
 22509  0E55  314E               	addfsr 1,14
 22510  0E56  3000               	movlw	0
 22511  0E57  3FC0               	movwi [0]fsr1
 22512  0E58  3FC1               	movwi [1]fsr1
 22513                           
 22514                           ;flashy_task.c: 442: data->holdCountY = 0;
 22515  0E59  085E               	movf	flashy_Main@data,w
 22516  0E5A  0086               	movwf	6
 22517  0E5B  085F               	movf	flashy_Main@data+1,w
 22518  0E5C  0087               	movwf	7
 22519  0E5D  3150               	addfsr 1,16
 22520  0E5E  3000               	movlw	0
 22521  0E5F  3FC0               	movwi [0]fsr1
 22522  0E60  3FC1               	movwi [1]fsr1
 22523                           
 22524                           ;flashy_task.c: 443: data->holdCountXY = 0;
 22525  0E61  085E               	movf	flashy_Main@data,w
 22526  0E62  0086               	movwf	6
 22527  0E63  085F               	movf	flashy_Main@data+1,w
 22528  0E64  0087               	movwf	7
 22529  0E65  3152               	addfsr 1,18
 22530  0E66  3000               	movlw	0
 22531  0E67  3FC0               	movwi [0]fsr1
 22532  0E68  3FC1               	movwi [1]fsr1
 22533                           
 22534                           ;flashy_task.c: 444: data->holdCountAY = 0;
 22535  0E69  085E               	movf	flashy_Main@data,w
 22536  0E6A  0086               	movwf	6
 22537  0E6B  085F               	movf	flashy_Main@data+1,w
 22538  0E6C  0087               	movwf	7
 22539  0E6D  3154               	addfsr 1,20
 22540  0E6E  3000               	movlw	0
 22541  0E6F  3FC0               	movwi [0]fsr1
 22542  0E70  3FC1               	movwi [1]fsr1
 22543                           
 22544                           ;flashy_task.c: 445: data->holdCountAX = 0;
 22545  0E71  085E               	movf	flashy_Main@data,w
 22546  0E72  0086               	movwf	6
 22547  0E73  085F               	movf	flashy_Main@data+1,w
 22548  0E74  0087               	movwf	7
 22549  0E75  3156               	addfsr 1,22
 22550  0E76  3000               	movlw	0
 22551  0E77  3FC0               	movwi [0]fsr1
 22552  0E78  3FC1               	movwi [1]fsr1
 22553                           
 22554                           ;flashy_task.c: 446: data->holdCountBX = 0;
 22555  0E79  085E               	movf	flashy_Main@data,w
 22556  0E7A  0086               	movwf	6
 22557  0E7B  085F               	movf	flashy_Main@data+1,w
 22558  0E7C  0087               	movwf	7
 22559  0E7D  3158               	addfsr 1,24
 22560  0E7E  3000               	movlw	0
 22561  0E7F  3FC0               	movwi [0]fsr1
 22562  0E80  3FC1               	movwi [1]fsr1
 22563                           
 22564                           ;flashy_task.c: 447: data->holdCountBY = 0;
 22565  0E81  085E               	movf	flashy_Main@data,w
 22566  0E82  0086               	movwf	6
 22567  0E83  085F               	movf	flashy_Main@data+1,w
 22568  0E84  0087               	movwf	7
 22569  0E85  315A               	addfsr 1,26
 22570  0E86  3000               	movlw	0
 22571  0E87  3FC0               	movwi [0]fsr1
 22572  0E88  3FC1               	movwi [1]fsr1
 22573                           
 22574                           ;flashy_task.c: 448: data->noholdCount = 0;
 22575  0E89  085E               	movf	flashy_Main@data,w
 22576  0E8A  0086               	movwf	6
 22577  0E8B  085F               	movf	flashy_Main@data+1,w
 22578  0E8C  0087               	movwf	7
 22579  0E8D  315C               	addfsr 1,28
 22580  0E8E  3000               	movlw	0
 22581  0E8F  3FC0               	movwi [0]fsr1
 22582  0E90  3FC1               	movwi [1]fsr1
 22583                           
 22584                           ;flashy_task.c: 449: break;
 22585  0E91  2FC9               	goto	l9440
 22586  0E92                     l9404:	
 22587                           ;flashy_task.c: 450: case 0:
 22588                           
 22589                           
 22590                           ;flashy_task.c: 452: data->holdCountA = 0;
 22591  0E92  085E               	movf	flashy_Main@data,w
 22592  0E93  0086               	movwf	6
 22593  0E94  085F               	movf	flashy_Main@data+1,w
 22594  0E95  0087               	movwf	7
 22595  0E96  314A               	addfsr 1,10
 22596  0E97  3000               	movlw	0
 22597  0E98  3FC0               	movwi [0]fsr1
 22598  0E99  3FC1               	movwi [1]fsr1
 22599                           
 22600                           ;flashy_task.c: 453: data->holdCountB = 0;
 22601  0E9A  085E               	movf	flashy_Main@data,w
 22602  0E9B  0086               	movwf	6
 22603  0E9C  085F               	movf	flashy_Main@data+1,w
 22604  0E9D  0087               	movwf	7
 22605  0E9E  314C               	addfsr 1,12
 22606  0E9F  3000               	movlw	0
 22607  0EA0  3FC0               	movwi [0]fsr1
 22608  0EA1  3FC1               	movwi [1]fsr1
 22609                           
 22610                           ;flashy_task.c: 454: data->holdCountX = 0;
 22611  0EA2  085E               	movf	flashy_Main@data,w
 22612  0EA3  0086               	movwf	6
 22613  0EA4  085F               	movf	flashy_Main@data+1,w
 22614  0EA5  0087               	movwf	7
 22615  0EA6  314E               	addfsr 1,14
 22616  0EA7  3000               	movlw	0
 22617  0EA8  3FC0               	movwi [0]fsr1
 22618  0EA9  3FC1               	movwi [1]fsr1
 22619                           
 22620                           ;flashy_task.c: 455: data->holdCountY = 0;
 22621  0EAA  085E               	movf	flashy_Main@data,w
 22622  0EAB  0086               	movwf	6
 22623  0EAC  085F               	movf	flashy_Main@data+1,w
 22624  0EAD  0087               	movwf	7
 22625  0EAE  3150               	addfsr 1,16
 22626  0EAF  3000               	movlw	0
 22627  0EB0  3FC0               	movwi [0]fsr1
 22628  0EB1  3FC1               	movwi [1]fsr1
 22629                           
 22630                           ;flashy_task.c: 456: data->holdCountXY = 0;
 22631  0EB2  085E               	movf	flashy_Main@data,w
 22632  0EB3  0086               	movwf	6
 22633  0EB4  085F               	movf	flashy_Main@data+1,w
 22634  0EB5  0087               	movwf	7
 22635  0EB6  3152               	addfsr 1,18
 22636  0EB7  3000               	movlw	0
 22637  0EB8  3FC0               	movwi [0]fsr1
 22638  0EB9  3FC1               	movwi [1]fsr1
 22639                           
 22640                           ;flashy_task.c: 457: data->holdCountAY = 0;
 22641  0EBA  085E               	movf	flashy_Main@data,w
 22642  0EBB  0086               	movwf	6
 22643  0EBC  085F               	movf	flashy_Main@data+1,w
 22644  0EBD  0087               	movwf	7
 22645  0EBE  3154               	addfsr 1,20
 22646  0EBF  3000               	movlw	0
 22647  0EC0  3FC0               	movwi [0]fsr1
 22648  0EC1  3FC1               	movwi [1]fsr1
 22649                           
 22650                           ;flashy_task.c: 458: data->holdCountAX = 0;
 22651  0EC2  085E               	movf	flashy_Main@data,w
 22652  0EC3  0086               	movwf	6
 22653  0EC4  085F               	movf	flashy_Main@data+1,w
 22654  0EC5  0087               	movwf	7
 22655  0EC6  3156               	addfsr 1,22
 22656  0EC7  3000               	movlw	0
 22657  0EC8  3FC0               	movwi [0]fsr1
 22658  0EC9  3FC1               	movwi [1]fsr1
 22659                           
 22660                           ;flashy_task.c: 459: data->holdCountBX = 0;
 22661  0ECA  085E               	movf	flashy_Main@data,w
 22662  0ECB  0086               	movwf	6
 22663  0ECC  085F               	movf	flashy_Main@data+1,w
 22664  0ECD  0087               	movwf	7
 22665  0ECE  3158               	addfsr 1,24
 22666  0ECF  3000               	movlw	0
 22667  0ED0  3FC0               	movwi [0]fsr1
 22668  0ED1  3FC1               	movwi [1]fsr1
 22669                           
 22670                           ;flashy_task.c: 460: data->holdCountBY = 0;
 22671  0ED2  085E               	movf	flashy_Main@data,w
 22672  0ED3  0086               	movwf	6
 22673  0ED4  085F               	movf	flashy_Main@data+1,w
 22674  0ED5  0087               	movwf	7
 22675  0ED6  315A               	addfsr 1,26
 22676  0ED7  3000               	movlw	0
 22677  0ED8  3FC0               	movwi [0]fsr1
 22678  0ED9  3FC1               	movwi [1]fsr1
 22679                           
 22680                           ;flashy_task.c: 461: data->noholdCount += 1;
 22681  0EDA  085E               	movf	flashy_Main@data,w
 22682  0EDB  0086               	movwf	6
 22683  0EDC  085F               	movf	flashy_Main@data+1,w
 22684  0EDD  0087               	movwf	7
 22685  0EDE  315C               	addfsr 1,28
 22686  0EDF  3001               	movlw	1
 22687  0EE0  0781               	addwf	1,f
 22688  0EE1  3141               	addfsr 1,1
 22689  0EE2  1803               	skipnc
 22690  0EE3  0A81               	incf	1,f
 22691                           
 22692                           ;flashy_task.c: 462: break;
 22693  0EE4  2FC9               	goto	l9440
 22694  0EE5                     l9408:	
 22695                           ;flashy_task.c: 463: default:
 22696                           
 22697                           
 22698                           ;flashy_task.c: 464: data->holdCountA = 0;
 22699  0EE5  085E               	movf	flashy_Main@data,w
 22700  0EE6  0086               	movwf	6
 22701  0EE7  085F               	movf	flashy_Main@data+1,w
 22702  0EE8  0087               	movwf	7
 22703  0EE9  314A               	addfsr 1,10
 22704  0EEA  3000               	movlw	0
 22705  0EEB  3FC0               	movwi [0]fsr1
 22706  0EEC  3FC1               	movwi [1]fsr1
 22707                           
 22708                           ;flashy_task.c: 465: data->holdCountB = 0;
 22709  0EED  085E               	movf	flashy_Main@data,w
 22710  0EEE  0086               	movwf	6
 22711  0EEF  085F               	movf	flashy_Main@data+1,w
 22712  0EF0  0087               	movwf	7
 22713  0EF1  314C               	addfsr 1,12
 22714  0EF2  3000               	movlw	0
 22715  0EF3  3FC0               	movwi [0]fsr1
 22716  0EF4  3FC1               	movwi [1]fsr1
 22717                           
 22718                           ;flashy_task.c: 466: data->holdCountX = 0;
 22719  0EF5  085E               	movf	flashy_Main@data,w
 22720  0EF6  0086               	movwf	6
 22721  0EF7  085F               	movf	flashy_Main@data+1,w
 22722  0EF8  0087               	movwf	7
 22723  0EF9  314E               	addfsr 1,14
 22724  0EFA  3000               	movlw	0
 22725  0EFB  3FC0               	movwi [0]fsr1
 22726  0EFC  3FC1               	movwi [1]fsr1
 22727                           
 22728                           ;flashy_task.c: 467: data->holdCountY = 0;
 22729  0EFD  085E               	movf	flashy_Main@data,w
 22730  0EFE  0086               	movwf	6
 22731  0EFF  085F               	movf	flashy_Main@data+1,w
 22732  0F00  0087               	movwf	7
 22733  0F01  3150               	addfsr 1,16
 22734  0F02  3000               	movlw	0
 22735  0F03  3FC0               	movwi [0]fsr1
 22736  0F04  3FC1               	movwi [1]fsr1
 22737                           
 22738                           ;flashy_task.c: 468: data->holdCountXY = 0;
 22739  0F05  085E               	movf	flashy_Main@data,w
 22740  0F06  0086               	movwf	6
 22741  0F07  085F               	movf	flashy_Main@data+1,w
 22742  0F08  0087               	movwf	7
 22743  0F09  3152               	addfsr 1,18
 22744  0F0A  3000               	movlw	0
 22745  0F0B  3FC0               	movwi [0]fsr1
 22746  0F0C  3FC1               	movwi [1]fsr1
 22747                           
 22748                           ;flashy_task.c: 469: data->holdCountAY = 0;
 22749  0F0D  085E               	movf	flashy_Main@data,w
 22750  0F0E  0086               	movwf	6
 22751  0F0F  085F               	movf	flashy_Main@data+1,w
 22752  0F10  0087               	movwf	7
 22753  0F11  3154               	addfsr 1,20
 22754  0F12  3000               	movlw	0
 22755  0F13  3FC0               	movwi [0]fsr1
 22756  0F14  3FC1               	movwi [1]fsr1
 22757                           
 22758                           ;flashy_task.c: 470: data->holdCountAX = 0;
 22759  0F15  085E               	movf	flashy_Main@data,w
 22760  0F16  0086               	movwf	6
 22761  0F17  085F               	movf	flashy_Main@data+1,w
 22762  0F18  0087               	movwf	7
 22763  0F19  3156               	addfsr 1,22
 22764  0F1A  3000               	movlw	0
 22765  0F1B  3FC0               	movwi [0]fsr1
 22766  0F1C  3FC1               	movwi [1]fsr1
 22767                           
 22768                           ;flashy_task.c: 471: data->holdCountBX = 0;
 22769  0F1D  085E               	movf	flashy_Main@data,w
 22770  0F1E  0086               	movwf	6
 22771  0F1F  085F               	movf	flashy_Main@data+1,w
 22772  0F20  0087               	movwf	7
 22773  0F21  3158               	addfsr 1,24
 22774  0F22  3000               	movlw	0
 22775  0F23  3FC0               	movwi [0]fsr1
 22776  0F24  3FC1               	movwi [1]fsr1
 22777                           
 22778                           ;flashy_task.c: 472: data->holdCountBY = 0;
 22779  0F25  085E               	movf	flashy_Main@data,w
 22780  0F26  0086               	movwf	6
 22781  0F27  085F               	movf	flashy_Main@data+1,w
 22782  0F28  0087               	movwf	7
 22783  0F29  315A               	addfsr 1,26
 22784  0F2A  3000               	movlw	0
 22785  0F2B  3FC0               	movwi [0]fsr1
 22786  0F2C  3FC1               	movwi [1]fsr1
 22787                           
 22788                           ;flashy_task.c: 473: data->noholdCount = 0;
 22789  0F2D  085E               	movf	flashy_Main@data,w
 22790  0F2E  0086               	movwf	6
 22791  0F2F  085F               	movf	flashy_Main@data+1,w
 22792  0F30  0087               	movwf	7
 22793  0F31  315C               	addfsr 1,28
 22794  0F32  3000               	movlw	0
 22795  0F33  3FC0               	movwi [0]fsr1
 22796  0F34  3FC1               	movwi [1]fsr1
 22797                           
 22798                           ;flashy_task.c: 474: }
 22799  0F35  2FC9               	goto	l9440
 22800  0F36                     l9410:	
 22801                           
 22802                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22803                           ; Switch size 1, requested type "space"
 22804                           ; Number of cases is 1, Range of values is 0 to 0
 22805                           ; switch strategies available:
 22806                           ; Name         Instructions Cycles
 22807                           ; simple_byte            4     3 (average)
 22808                           ; direct_byte            8     6 (fixed)
 22809                           ; jumptable            260     6 (fixed)
 22810                           ;	Chosen strategy is simple_byte
 22811  0F36  085D               	movf	flashy_Main@buttonPressed+1,w
 22812  0F37  3A00               	xorlw	0	; case 0
 22813  0F38  1903               	skipnz
 22814  0F39  2F3B               	goto	l10772
 22815  0F3A  2EE5               	goto	l9408
 22816  0F3B                     l10772:	
 22817                           
 22818                           ; Switch size 1, requested type "space"
 22819                           ; Number of cases is 9, Range of values is 0 to 12
 22820                           ; switch strategies available:
 22821                           ; Name         Instructions Cycles
 22822                           ; simple_byte           28    15 (average)
 22823                           ; direct_byte           32     6 (fixed)
 22824                           ; jumptable            260     6 (fixed)
 22825                           ;	Chosen strategy is simple_byte
 22826  0F3B  085C               	movf	flashy_Main@buttonPressed,w
 22827  0F3C  3A00               	xorlw	0	; case 0
 22828  0F3D  1903               	skipnz
 22829  0F3E  2E92               	goto	l9404
 22830  0F3F  3A01               	xorlw	1	; case 1
 22831  0F40  1903               	skipnz
 22832  0F41  2DD0               	goto	l9356
 22833  0F42  3A03               	xorlw	3	; case 2
 22834  0F43  1903               	skipnz
 22835  0F44  2D4E               	goto	l9326
 22836  0F45  3A07               	xorlw	7	; case 5
 22837  0F46  1903               	skipnz
 22838  0F47  2B4C               	goto	l9202
 22839  0F48  3A03               	xorlw	3	; case 6
 22840  0F49  1903               	skipnz
 22841  0F4A  2C30               	goto	l9258
 22842  0F4B  3A0E               	xorlw	14	; case 8
 22843  0F4C  1903               	skipnz
 22844  0F4D  2CA5               	goto	l9288
 22845  0F4E  3A01               	xorlw	1	; case 9
 22846  0F4F  1903               	skipnz
 22847  0F50  2ADF               	goto	l9176
 22848  0F51  3A03               	xorlw	3	; case 10
 22849  0F52  1903               	skipnz
 22850  0F53  2BBB               	goto	l9228
 22851  0F54  3A06               	xorlw	6	; case 12
 22852  0F55  1903               	skipnz
 22853  0F56  2A7D               	goto	l9152
 22854  0F57  2EE5               	goto	l9408
 22855                           
 22856                           ;flashy_task.c: 477: switch (data->blaster_state) {
 22857  0F58  2FC9               	goto	l9440
 22858  0F59                     l9412:	
 22859                           ;flashy_task.c: 478: case FLASHY_BLASTER_SHOOTING_STATE:
 22860                           
 22861                           
 22862                           ;flashy_task.c: 480: if (data->blasterTickCount == 100) {
 22863  0F59  085E               	movf	flashy_Main@data,w
 22864  0F5A  0086               	movwf	6
 22865  0F5B  085F               	movf	flashy_Main@data+1,w
 22866  0F5C  0087               	movwf	7
 22867  0F5D  3147               	addfsr 1,7
 22868  0F5E  0016               	moviw fsr1++
 22869  0F5F  3A64               	xorlw	100
 22870  0F60  00D4               	movwf	??_flashy_Main
 22871  0F61  0016               	moviw fsr1++
 22872  0F62  04D4               	iorwf	??_flashy_Main,f
 22873  0F63  1D03               	btfss	3,2
 22874  0F64  2F70               	goto	l9418
 22875                           
 22876                           ;flashy_task.c: 481: nullifyBadge_irTxRegister(data->badge);
 22877  0F65  085E               	movf	flashy_Main@data,w
 22878  0F66  0086               	movwf	6
 22879  0F67  085F               	movf	flashy_Main@data+1,w
 22880  0F68  0087               	movwf	7
 22881  0F69  0801               	movf	1,w
 22882  0F6A  31B4  24D4  3188   	fcall	_nullifyBadge_irTxRegister
 22883                           
 22884                           ;flashy_task.c: 482: nullifyBadge_irTxSet();
 22885  0F6D  31B3  23E5  3188   	fcall	_nullifyBadge_irTxSet
 22886  0F70                     l9418:	
 22887                           
 22888                           ;flashy_task.c: 483: }
 22889                           ;flashy_task.c: 484: if (data->blasterTickCount == 100 - 1 ){
 22890  0F70  0020               	movlb	0	; select bank0
 22891  0F71  085E               	movf	flashy_Main@data,w
 22892  0F72  0086               	movwf	6
 22893  0F73  085F               	movf	flashy_Main@data+1,w
 22894  0F74  0087               	movwf	7
 22895  0F75  3147               	addfsr 1,7
 22896  0F76  0016               	moviw fsr1++
 22897  0F77  3A63               	xorlw	99
 22898  0F78  00D4               	movwf	??_flashy_Main
 22899  0F79  0016               	moviw fsr1++
 22900  0F7A  04D4               	iorwf	??_flashy_Main,f
 22901  0F7B  1D03               	btfss	3,2
 22902  0F7C  2F89               	goto	l9424
 22903                           
 22904                           ;flashy_task.c: 485: nullifyBadge_irTxClr();
 22905  0F7D  31B3  23E2  3188   	fcall	_nullifyBadge_irTxClr
 22906                           
 22907                           ;flashy_task.c: 486: nullifyBadge_irTxRelease(data->badge);
 22908  0F80  0020               	movlb	0	; select bank0
 22909  0F81  085E               	movf	flashy_Main@data,w
 22910  0F82  0086               	movwf	6
 22911  0F83  085F               	movf	flashy_Main@data+1,w
 22912  0F84  0087               	movwf	7
 22913  0F85  0801               	movf	1,w
 22914  0F86  31B4  2470  3188   	fcall	_nullifyBadge_irTxRelease
 22915  0F89                     l9424:	
 22916                           
 22917                           ;flashy_task.c: 487: }
 22918                           ;flashy_task.c: 488: if (data->blasterTickCount == 0){
 22919  0F89  0020               	movlb	0	; select bank0
 22920  0F8A  085E               	movf	flashy_Main@data,w
 22921  0F8B  0086               	movwf	6
 22922  0F8C  085F               	movf	flashy_Main@data+1,w
 22923  0F8D  0087               	movwf	7
 22924  0F8E  3147               	addfsr 1,7
 22925  0F8F  0016               	moviw fsr1++
 22926  0F90  0401               	iorwf	1,w
 22927  0F91  1D03               	btfss	3,2
 22928  0F92  2FBD               	goto	l9436
 22929                           
 22930                           ;flashy_task.c: 489: data->displayTickCount = 0;
 22931  0F93  085E               	movf	flashy_Main@data,w
 22932  0F94  0086               	movwf	6
 22933  0F95  085F               	movf	flashy_Main@data+1,w
 22934  0F96  0087               	movwf	7
 22935  0F97  3144               	addfsr 1,4
 22936  0F98  3000               	movlw	0
 22937  0F99  3FC0               	movwi [0]fsr1
 22938  0F9A  3FC1               	movwi [1]fsr1
 22939                           
 22940                           ;flashy_task.c: 490: data->delayTickCount = 5;
 22941  0F9B  085E               	movf	flashy_Main@data,w
 22942  0F9C  0086               	movwf	6
 22943  0F9D  085F               	movf	flashy_Main@data+1,w
 22944  0F9E  0087               	movwf	7
 22945  0F9F  3141               	addfsr 1,1
 22946  0FA0  3005               	movlw	5
 22947  0FA1  3FC0               	movwi [0]fsr1
 22948  0FA2  3000               	movlw	0
 22949  0FA3  3FC1               	movwi [1]fsr1
 22950                           
 22951                           ;flashy_task.c: 492: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 22952  0FA4  085E               	movf	flashy_Main@data,w
 22953  0FA5  0086               	movwf	6
 22954  0FA6  085F               	movf	flashy_Main@data+1,w
 22955  0FA7  0087               	movwf	7
 22956  0FA8  3143               	addfsr 1,3
 22957  0FA9  0181               	clrf	1
 22958                           
 22959                           ;flashy_task.c: 493: data->display_state = FLASHY_STATE_DISPLAY;
 22960  0FAA  085E               	movf	flashy_Main@data,w
 22961  0FAB  0086               	movwf	6
 22962  0FAC  085F               	movf	flashy_Main@data+1,w
 22963  0FAD  0087               	movwf	7
 22964  0FAE  3146               	addfsr 1,6
 22965  0FAF  0181               	clrf	1
 22966                           
 22967                           ;flashy_task.c: 494: data->blaster_state = FLASHY_BLASTER_IDLE_STATE;
 22968  0FB0  085E               	movf	flashy_Main@data,w
 22969  0FB1  3E09               	addlw	9
 22970  0FB2  00D4               	movwf	??_flashy_Main
 22971  0FB3  3000               	movlw	0
 22972  0FB4  3D5F               	addwfc	flashy_Main@data+1,w
 22973  0FB5  00D5               	movwf	??_flashy_Main+1
 22974  0FB6  0854               	movf	??_flashy_Main,w
 22975  0FB7  0086               	movwf	6
 22976  0FB8  0855               	movf	??_flashy_Main+1,w
 22977  0FB9  0087               	movwf	7
 22978  0FBA  3001               	movlw	1
 22979  0FBB  0081               	movwf	1
 22980                           
 22981                           ;flashy_task.c: 495: }
 22982  0FBC  2FD6               	goto	l9442
 22983  0FBD                     l9436:	
 22984                           
 22985                           ;flashy_task.c: 496: else {
 22986                           ;flashy_task.c: 497: data->blasterTickCount -= 1;
 22987  0FBD  085E               	movf	flashy_Main@data,w
 22988  0FBE  0086               	movwf	6
 22989  0FBF  085F               	movf	flashy_Main@data+1,w
 22990  0FC0  0087               	movwf	7
 22991  0FC1  3147               	addfsr 1,7
 22992  0FC2  3001               	movlw	1
 22993  0FC3  0281               	subwf	1,f
 22994  0FC4  3141               	addfsr 1,1
 22995  0FC5  3000               	movlw	0
 22996  0FC6  3B81               	subwfb	1,f
 22997  0FC7  317F               	addfsr 1,-1
 22998                           
 22999                           ;flashy_task.c: 502: }
 23000                           
 23001                           ;flashy_task.c: 501: break;
 23002                           
 23003                           ;flashy_task.c: 500: case FLASHY_BLASTER_IDLE_STATE:
 23004                           
 23005                           ;flashy_task.c: 498: }
 23006                           ;flashy_task.c: 499: break;
 23007  0FC8  2FD6               	goto	l9442
 23008  0FC9                     l9440:	
 23009  0FC9  085E               	movf	flashy_Main@data,w
 23010  0FCA  0086               	movwf	6
 23011  0FCB  085F               	movf	flashy_Main@data+1,w
 23012  0FCC  0087               	movwf	7
 23013  0FCD  3149               	addfsr 1,9
 23014  0FCE  0801               	movf	1,w
 23015                           
 23016                           ; Switch size 1, requested type "space"
 23017                           ; Number of cases is 2, Range of values is 0 to 1
 23018                           ; switch strategies available:
 23019                           ; Name         Instructions Cycles
 23020                           ; simple_byte            7     4 (average)
 23021                           ; direct_byte           10     6 (fixed)
 23022                           ; jumptable            260     6 (fixed)
 23023                           ;	Chosen strategy is simple_byte
 23024  0FCF  3A00               	xorlw	0	; case 0
 23025  0FD0  1903               	skipnz
 23026  0FD1  2F59               	goto	l9412
 23027  0FD2  3A01               	xorlw	1	; case 1
 23028  0FD3  1903               	skipnz
 23029  0FD4  2FD6               	goto	l9442
 23030  0FD5  2FD6               	goto	l9442
 23031  0FD6                     l9442:	
 23032                           
 23033                           ;flashy_task.c: 505: if (nullifyBadge_irGet() && (data->blaster_state != FLASHY_BLASTER_
      +                          SHOOTING_STATE)) {
 23034  0FD6  31A0  2000  3188   	fcall	_nullifyBadge_irGet
 23035  0FD9  3A00               	xorlw	0
 23036  0FDA  1903               	skipnz
 23037  0FDB  0008               	return
 23038  0FDC  0020               	movlb	0	; select bank0
 23039  0FDD  085E               	movf	flashy_Main@data,w
 23040  0FDE  0086               	movwf	6
 23041  0FDF  085F               	movf	flashy_Main@data+1,w
 23042  0FE0  0087               	movwf	7
 23043  0FE1  3149               	addfsr 1,9
 23044  0FE2  0801               	movf	1,w
 23045  0FE3  1903               	btfsc	3,2
 23046  0FE4  0008               	return
 23047                           
 23048                           ;flashy_task.c: 506: data->displayTickCount = 0;
 23049  0FE5  085E               	movf	flashy_Main@data,w
 23050  0FE6  0086               	movwf	6
 23051  0FE7  085F               	movf	flashy_Main@data+1,w
 23052  0FE8  0087               	movwf	7
 23053  0FE9  3144               	addfsr 1,4
 23054  0FEA  3000               	movlw	0
 23055  0FEB  3FC0               	movwi [0]fsr1
 23056  0FEC  3FC1               	movwi [1]fsr1
 23057                           
 23058                           ;flashy_task.c: 507: deaths += 1;
 23059  0FED  3001               	movlw	1
 23060  0FEE  0021               	movlb	1	; select bank1
 23061  0FEF  07AA               	addwf	_deaths^(0+128),f
 23062  0FF0  3000               	movlw	0
 23063  0FF1  3DAB               	addwfc	(_deaths+1)^(0+128),f
 23064                           
 23065                           ;flashy_task.c: 508: data->display_state = FLASHY_STATE_DISPLAY_SHOT;
 23066  0FF2  0020               	movlb	0	; select bank0
 23067  0FF3  085E               	movf	flashy_Main@data,w
 23068  0FF4  3E06               	addlw	6
 23069  0FF5  00D4               	movwf	??_flashy_Main
 23070  0FF6  3000               	movlw	0
 23071  0FF7  3D5F               	addwfc	flashy_Main@data+1,w
 23072  0FF8  00D5               	movwf	??_flashy_Main+1
 23073  0FF9  0854               	movf	??_flashy_Main,w
 23074  0FFA  0086               	movwf	6
 23075  0FFB  0855               	movf	??_flashy_Main+1,w
 23076  0FFC  0087               	movwf	7
 23077  0FFD  3003               	movlw	3
 23078  0FFE  0081               	movwf	1
 23079  0FFF  0008               	return
 23080  1000                     __end_of_flashy_Main:	
 23081                           
 23082                           	psect	swtext1
 23083  302F                     __pswtext1:	
 23084  302F                     S10770:	
 23085  302F  3188  28D5         	ljmp	l9050
 23086  3031  3188  28FA         	ljmp	l9060
 23087  3033  3189  291E         	ljmp	l9070
 23088  3035  3189  2936         	ljmp	l9078
 23089  3037  3189  296D         	ljmp	l9096
 23090  3039  3189  2992         	ljmp	l9106
 23091                           
 23092                           	psect	text19
 23093  00E5                     __ptext19:	
 23094 ;; *************** function _slot_Main *****************
 23095 ;; Defined at:
 23096 ;;		line 96 in file "slot_task.c"
 23097 ;; Parameters:    Size  Location     Type
 23098 ;;  taskData        2   50[BANK0 ] PTR void 
 23099 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 23100 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 23101 ;; Auto vars:     Size  Location     Type
 23102 ;;  data            2   69[BANK0 ] PTR struct t_slot_taskDa
 23103 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 23104 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 23105 ;;  buttonPresse    1   68[BANK0 ] unsigned char 
 23106 ;; Return value:  Size  Location     Type
 23107 ;;                  1    wreg      void 
 23108 ;; Registers used:
 23109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23110 ;; Tracked objects:
 23111 ;;		On entry : 0/0
 23112 ;;		On exit  : 0/0
 23113 ;;		Unchanged: 0/0
 23114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23115 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23116 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23117 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23118 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23119 ;;Total ram usage:       21 bytes
 23120 ;; Hardware stack levels used:    1
 23121 ;; Hardware stack levels required when called:   11
 23122 ;; This function calls:
 23123 ;;		___lwmod
 23124 ;;		_marquee
 23125 ;;		_marquee_speedy
 23126 ;;		_memset
 23127 ;;		_nullifyBadge_buttonsGet
 23128 ;;		_rand
 23129 ;;		_slot_Finished_Animation
 23130 ;;		_slot_Running_Animation
 23131 ;;		_slot_Setup
 23132 ;;		_sprintf
 23133 ;;		_strlen
 23134 ;; This function is called by:
 23135 ;;		_main
 23136 ;;		_scheduler_TaskRun
 23137 ;; This function uses a non-reentrant model
 23138 ;;
 23139                           
 23140                           
 23141                           ;psect for function _slot_Main
 23142  00E5                     _slot_Main:	
 23143                           
 23144                           ;slot_task.c: 97: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 23145                           
 23146                           ;incstack = 0
 23147                           ; Regs used in _slot_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23148  00E5  0020               	movlb	0	; select bank0
 23149  00E6  0853               	movf	slot_Main@taskData+1,w
 23150  00E7  00E6               	movwf	slot_Main@data+1
 23151  00E8  0852               	movf	slot_Main@taskData,w
 23152  00E9  00E5               	movwf	slot_Main@data
 23153                           
 23154                           ;slot_task.c: 98: u8 buttonPressed;
 23155                           ;slot_task.c: 101: if ( currentTask != SLOT_TASK ){
 23156  00EA  0021               	movlb	1	; select bank1
 23157  00EB  033A               	decf	_currentTask^(0+128),w
 23158  00EC  043B               	iorwf	(_currentTask+1)^(0+128),w
 23159  00ED  1903               	btfsc	3,2
 23160  00EE  291E               	goto	l9658
 23161                           
 23162                           ;slot_task.c: 102: buttonPressed = nullifyBadge_buttonsGet();
 23163  00EF  31A8  20A5  3180   	fcall	_nullifyBadge_buttonsGet
 23164  00F2  0020               	movlb	0	; select bank0
 23165  00F3  00D4               	movwf	??_slot_Main
 23166  00F4  0854               	movf	??_slot_Main,w
 23167  00F5  00E4               	movwf	slot_Main@buttonPressed
 23168                           
 23169                           ;slot_task.c: 106: data->holdCountA = 1;
 23170                           
 23171                           ;slot_task.c: 104: default:
 23172                           
 23173                           ;slot_task.c: 103: switch (buttonPressed) {
 23174  00F6  0865               	movf	slot_Main@data,w
 23175  00F7  0086               	movwf	6
 23176  00F8  0866               	movf	slot_Main@data+1,w
 23177  00F9  0087               	movwf	7
 23178  00FA  315F               	addfsr 1,31
 23179  00FB  3001               	movlw	1
 23180  00FC  3FC0               	movwi [0]fsr1
 23181  00FD  3000               	movlw	0
 23182  00FE  3FC1               	movwi [1]fsr1
 23183                           
 23184                           ;slot_task.c: 107: data->holdCountB = 1;
 23185  00FF  0865               	movf	slot_Main@data,w
 23186  0100  3E21               	addlw	33
 23187  0101  0086               	movwf	6
 23188  0102  3000               	movlw	0
 23189  0103  3D66               	addwfc	slot_Main@data+1,w
 23190  0104  0087               	movwf	7
 23191  0105  3001               	movlw	1
 23192  0106  3FC0               	movwi [0]fsr1
 23193  0107  3000               	movlw	0
 23194  0108  3FC1               	movwi [1]fsr1
 23195                           
 23196                           ;slot_task.c: 108: data->holdCountX = 1;
 23197  0109  0865               	movf	slot_Main@data,w
 23198  010A  3E23               	addlw	35
 23199  010B  0086               	movwf	6
 23200  010C  3000               	movlw	0
 23201  010D  3D66               	addwfc	slot_Main@data+1,w
 23202  010E  0087               	movwf	7
 23203  010F  3001               	movlw	1
 23204  0110  3FC0               	movwi [0]fsr1
 23205  0111  3000               	movlw	0
 23206  0112  3FC1               	movwi [1]fsr1
 23207                           
 23208                           ;slot_task.c: 109: data->holdCountY = 1;
 23209  0113  0865               	movf	slot_Main@data,w
 23210  0114  3E25               	addlw	37
 23211  0115  0086               	movwf	6
 23212  0116  3000               	movlw	0
 23213  0117  3D66               	addwfc	slot_Main@data+1,w
 23214  0118  0087               	movwf	7
 23215  0119  3001               	movlw	1
 23216  011A  3FC0               	movwi [0]fsr1
 23217  011B  3000               	movlw	0
 23218  011C  3FC1               	movwi [1]fsr1
 23219                           
 23220                           ;slot_task.c: 111: }
 23221                           
 23222                           ;slot_task.c: 110: break;
 23223  011D  0008               	return
 23224  011E                     l9658:	
 23225                           ;slot_task.c: 112: return;
 23226                           
 23227                           
 23228                           ;slot_task.c: 113: }
 23229                           ;slot_task.c: 115: buttonPressed = nullifyBadge_buttonsGet();
 23230  011E  31A8  20A5  3180   	fcall	_nullifyBadge_buttonsGet
 23231  0121  0020               	movlb	0	; select bank0
 23232  0122  00D4               	movwf	??_slot_Main
 23233  0123  0854               	movf	??_slot_Main,w
 23234  0124  00E4               	movwf	slot_Main@buttonPressed
 23235                           
 23236                           ;slot_task.c: 119: memset(data->slot_print_buf, 0x00, 20);
 23237                           
 23238                           ;slot_task.c: 117: default:
 23239                           
 23240                           ;slot_task.c: 116: switch (buttonPressed) {
 23241  0125  0865               	movf	slot_Main@data,w
 23242  0126  3E0B               	addlw	11
 23243  0127  00F1               	movwf	memset@p1
 23244  0128  3000               	movlw	0
 23245  0129  3D66               	addwfc	slot_Main@data+1,w
 23246  012A  00F2               	movwf	memset@p1+1
 23247  012B  3000               	movlw	0
 23248  012C  00F3               	movwf	memset@c
 23249  012D  00F4               	movwf	memset@c+1
 23250  012E  3014               	movlw	20
 23251  012F  00F5               	movwf	memset@n
 23252  0130  3000               	movlw	0
 23253  0131  00F6               	movwf	memset@n+1
 23254  0132  31B5  25EE  3180   	fcall	_memset
 23255                           
 23256                           ;slot_task.c: 122: if (data->displayTickCount < 100) {
 23257  0135  0020               	movlb	0	; select bank0
 23258  0136  0865               	movf	slot_Main@data,w
 23259  0137  0086               	movwf	6
 23260  0138  0866               	movf	slot_Main@data+1,w
 23261  0139  0087               	movwf	7
 23262  013A  3143               	addfsr 1,3
 23263  013B  3F40               	moviw [0]fsr1
 23264  013C  00D4               	movwf	??_slot_Main
 23265  013D  3F41               	moviw [1]fsr1
 23266  013E  00D5               	movwf	??_slot_Main+1
 23267  013F  3000               	movlw	0
 23268  0140  0255               	subwf	??_slot_Main+1,w
 23269  0141  3064               	movlw	100
 23270  0142  1903               	skipnz
 23271  0143  0254               	subwf	??_slot_Main,w
 23272  0144  1803               	skipnc
 23273  0145  2A51               	goto	l9678
 23274                           
 23275                           ;slot_task.c: 123: slot_Running_Animation(data);
 23276  0146  0866               	movf	slot_Main@data+1,w
 23277  0147  00B3               	movwf	slot_Running_Animation@taskData+1
 23278  0148  0865               	movf	slot_Main@data,w
 23279  0149  00B2               	movwf	slot_Running_Animation@taskData
 23280  014A  31AB  23D0  3180   	fcall	_slot_Running_Animation
 23281                           
 23282                           ;slot_task.c: 124: data->slot_wheel_index[0] = (u8)rand() % strlen(Slot_Wheel);
 23283  014D  3020               	movlw	low _Slot_Wheel
 23284  014E  00F1               	movwf	strlen@s
 23285  014F  3003               	movlw	high _Slot_Wheel
 23286  0150  00F2               	movwf	strlen@s+1
 23287  0151  31B6  26AD  3180   	fcall	_strlen
 23288  0154  0872               	movf	?_strlen+1,w
 23289  0155  0020               	movlb	0	; select bank0
 23290  0156  00AC               	movwf	___lwmod@divisor+1
 23291  0157  0871               	movf	?_strlen,w
 23292  0158  00AB               	movwf	___lwmod@divisor
 23293  0159  31AB  238D  3180   	fcall	_rand
 23294  015C  0020               	movlb	0	; select bank0
 23295  015D  0824               	movf	?_rand,w
 23296  015E  00D4               	movwf	??_slot_Main
 23297  015F  01D5               	clrf	??_slot_Main+1
 23298  0160  0854               	movf	??_slot_Main,w
 23299  0161  00AD               	movwf	___lwmod@dividend
 23300  0162  0855               	movf	??_slot_Main+1,w
 23301  0163  00AE               	movwf	___lwmod@dividend+1
 23302  0164  31B7  27A4  3180   	fcall	___lwmod
 23303  0167  0020               	movlb	0	; select bank0
 23304  0168  082B               	movf	?___lwmod,w
 23305  0169  00D6               	movwf	??_slot_Main+2
 23306  016A  0865               	movf	slot_Main@data,w
 23307  016B  3E07               	addlw	7
 23308  016C  00D7               	movwf	??_slot_Main+3
 23309  016D  3000               	movlw	0
 23310  016E  3D66               	addwfc	slot_Main@data+1,w
 23311  016F  00D8               	movwf	??_slot_Main+4
 23312  0170  0857               	movf	??_slot_Main+3,w
 23313  0171  0086               	movwf	6
 23314  0172  0858               	movf	??_slot_Main+4,w
 23315  0173  0087               	movwf	7
 23316  0174  0856               	movf	??_slot_Main+2,w
 23317  0175  0081               	movwf	1
 23318                           
 23319                           ;slot_task.c: 125: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 23320  0176  3020               	movlw	low _Slot_Wheel
 23321  0177  00F1               	movwf	strlen@s
 23322  0178  3003               	movlw	high _Slot_Wheel
 23323  0179  00F2               	movwf	strlen@s+1
 23324  017A  31B6  26AD  3180   	fcall	_strlen
 23325  017D  0872               	movf	?_strlen+1,w
 23326  017E  0020               	movlb	0	; select bank0
 23327  017F  00AC               	movwf	___lwmod@divisor+1
 23328  0180  0871               	movf	?_strlen,w
 23329  0181  00AB               	movwf	___lwmod@divisor
 23330  0182  31AB  238D  3180   	fcall	_rand
 23331  0185  0020               	movlb	0	; select bank0
 23332  0186  0824               	movf	?_rand,w
 23333  0187  00D4               	movwf	??_slot_Main
 23334  0188  01D5               	clrf	??_slot_Main+1
 23335  0189  0854               	movf	??_slot_Main,w
 23336  018A  00AD               	movwf	___lwmod@dividend
 23337  018B  0855               	movf	??_slot_Main+1,w
 23338  018C  00AE               	movwf	___lwmod@dividend+1
 23339  018D  31B7  27A4  3180   	fcall	___lwmod
 23340  0190  0020               	movlb	0	; select bank0
 23341  0191  082B               	movf	?___lwmod,w
 23342  0192  00D6               	movwf	??_slot_Main+2
 23343  0193  0865               	movf	slot_Main@data,w
 23344  0194  3E08               	addlw	8
 23345  0195  00D7               	movwf	??_slot_Main+3
 23346  0196  3000               	movlw	0
 23347  0197  3D66               	addwfc	slot_Main@data+1,w
 23348  0198  00D8               	movwf	??_slot_Main+4
 23349  0199  0857               	movf	??_slot_Main+3,w
 23350  019A  0086               	movwf	6
 23351  019B  0858               	movf	??_slot_Main+4,w
 23352  019C  0087               	movwf	7
 23353  019D  0856               	movf	??_slot_Main+2,w
 23354  019E  0081               	movwf	1
 23355                           
 23356                           ;slot_task.c: 126: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 23357  019F  3020               	movlw	low _Slot_Wheel
 23358  01A0  00F1               	movwf	strlen@s
 23359  01A1  3003               	movlw	high _Slot_Wheel
 23360  01A2  00F2               	movwf	strlen@s+1
 23361  01A3  31B6  26AD  3180   	fcall	_strlen
 23362  01A6  0872               	movf	?_strlen+1,w
 23363  01A7  0020               	movlb	0	; select bank0
 23364  01A8  00AC               	movwf	___lwmod@divisor+1
 23365  01A9  0871               	movf	?_strlen,w
 23366  01AA  00AB               	movwf	___lwmod@divisor
 23367  01AB  31AB  238D  3180   	fcall	_rand
 23368  01AE  0020               	movlb	0	; select bank0
 23369  01AF  0824               	movf	?_rand,w
 23370  01B0  00D4               	movwf	??_slot_Main
 23371  01B1  01D5               	clrf	??_slot_Main+1
 23372  01B2  0854               	movf	??_slot_Main,w
 23373  01B3  00AD               	movwf	___lwmod@dividend
 23374  01B4  0855               	movf	??_slot_Main+1,w
 23375  01B5  00AE               	movwf	___lwmod@dividend+1
 23376  01B6  31B7  27A4  3180   	fcall	___lwmod
 23377  01B9  0020               	movlb	0	; select bank0
 23378  01BA  082B               	movf	?___lwmod,w
 23379  01BB  00D6               	movwf	??_slot_Main+2
 23380  01BC  0865               	movf	slot_Main@data,w
 23381  01BD  3E09               	addlw	9
 23382  01BE  00D7               	movwf	??_slot_Main+3
 23383  01BF  3000               	movlw	0
 23384  01C0  3D66               	addwfc	slot_Main@data+1,w
 23385  01C1  00D8               	movwf	??_slot_Main+4
 23386  01C2  0857               	movf	??_slot_Main+3,w
 23387  01C3  0086               	movwf	6
 23388  01C4  0858               	movf	??_slot_Main+4,w
 23389  01C5  0087               	movwf	7
 23390  01C6  0856               	movf	??_slot_Main+2,w
 23391  01C7  0081               	movwf	1
 23392                           
 23393                           ;slot_task.c: 127: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23394  01C8  3020               	movlw	low _Slot_Wheel
 23395  01C9  00F1               	movwf	strlen@s
 23396  01CA  3003               	movlw	high _Slot_Wheel
 23397  01CB  00F2               	movwf	strlen@s+1
 23398  01CC  31B6  26AD  3180   	fcall	_strlen
 23399  01CF  0872               	movf	?_strlen+1,w
 23400  01D0  0020               	movlb	0	; select bank0
 23401  01D1  00AC               	movwf	___lwmod@divisor+1
 23402  01D2  0871               	movf	?_strlen,w
 23403  01D3  00AB               	movwf	___lwmod@divisor
 23404  01D4  31AB  238D  3180   	fcall	_rand
 23405  01D7  0020               	movlb	0	; select bank0
 23406  01D8  0824               	movf	?_rand,w
 23407  01D9  00D4               	movwf	??_slot_Main
 23408  01DA  01D5               	clrf	??_slot_Main+1
 23409  01DB  0854               	movf	??_slot_Main,w
 23410  01DC  00AD               	movwf	___lwmod@dividend
 23411  01DD  0855               	movf	??_slot_Main+1,w
 23412  01DE  00AE               	movwf	___lwmod@dividend+1
 23413  01DF  31B7  27A4  3180   	fcall	___lwmod
 23414  01E2  0020               	movlb	0	; select bank0
 23415  01E3  082B               	movf	?___lwmod,w
 23416  01E4  00D6               	movwf	??_slot_Main+2
 23417  01E5  0865               	movf	slot_Main@data,w
 23418  01E6  3E0A               	addlw	10
 23419  01E7  00D7               	movwf	??_slot_Main+3
 23420  01E8  3000               	movlw	0
 23421  01E9  3D66               	addwfc	slot_Main@data+1,w
 23422  01EA  00D8               	movwf	??_slot_Main+4
 23423  01EB  0857               	movf	??_slot_Main+3,w
 23424  01EC  0086               	movwf	6
 23425  01ED  0858               	movf	??_slot_Main+4,w
 23426  01EE  0087               	movwf	7
 23427  01EF  0856               	movf	??_slot_Main+2,w
 23428  01F0  0081               	movwf	1
 23429                           
 23430                           ;slot_task.c: 128: sprintf(data->slot_print_buf, "%c%c%c%c", Slot_Wheel[data->slot_wheel
      +                          _index[0]], Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]]
      +                          , Slot_Wheel[data->slot_wheel_index[3]]);
 23431  01F1  0865               	movf	slot_Main@data,w
 23432  01F2  3E0B               	addlw	11
 23433  01F3  00AF               	movwf	sprintf@sp
 23434  01F4  3000               	movlw	0
 23435  01F5  3D66               	addwfc	slot_Main@data+1,w
 23436  01F6  00B0               	movwf	sprintf@sp+1
 23437  01F7  30BF               	movlw	low (STR_64| (0+32768))
 23438  01F8  00B1               	movwf	sprintf@f
 23439  01F9  30BA               	movlw	high (STR_64| (0+32768))
 23440  01FA  00B2               	movwf	sprintf@f+1
 23441  01FB  0865               	movf	slot_Main@data,w
 23442  01FC  0086               	movwf	6
 23443  01FD  0866               	movf	slot_Main@data+1,w
 23444  01FE  0087               	movwf	7
 23445  01FF  3147               	addfsr 1,7
 23446  0200  0801               	movf	1,w
 23447  0201  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23448  0202  0086               	movwf	6
 23449  0203  3003               	movlw	3	; select bank6/7
 23450  0204  0087               	movwf	7
 23451  0205  0801               	movf	1,w
 23452  0206  00D4               	movwf	??_slot_Main
 23453  0207  01D5               	clrf	??_slot_Main+1
 23454  0208  0854               	movf	??_slot_Main,w
 23455  0209  00B3               	movwf	?_sprintf+4
 23456  020A  0855               	movf	??_slot_Main+1,w
 23457  020B  00B4               	movwf	?_sprintf+5
 23458  020C  0865               	movf	slot_Main@data,w
 23459  020D  0086               	movwf	6
 23460  020E  0866               	movf	slot_Main@data+1,w
 23461  020F  0087               	movwf	7
 23462  0210  3148               	addfsr 1,8
 23463  0211  0801               	movf	1,w
 23464  0212  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23465  0213  0086               	movwf	6
 23466  0214  3003               	movlw	3	; select bank6/7
 23467  0215  0087               	movwf	7
 23468  0216  0801               	movf	1,w
 23469  0217  00D6               	movwf	??_slot_Main+2
 23470  0218  01D7               	clrf	??_slot_Main+3
 23471  0219  0856               	movf	??_slot_Main+2,w
 23472  021A  00B5               	movwf	?_sprintf+6
 23473  021B  0857               	movf	??_slot_Main+3,w
 23474  021C  00B6               	movwf	?_sprintf+7
 23475  021D  0865               	movf	slot_Main@data,w
 23476  021E  0086               	movwf	6
 23477  021F  0866               	movf	slot_Main@data+1,w
 23478  0220  0087               	movwf	7
 23479  0221  3149               	addfsr 1,9
 23480  0222  0801               	movf	1,w
 23481  0223  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23482  0224  0086               	movwf	6
 23483  0225  3003               	movlw	3	; select bank6/7
 23484  0226  0087               	movwf	7
 23485  0227  0801               	movf	1,w
 23486  0228  00D8               	movwf	??_slot_Main+4
 23487  0229  01D9               	clrf	??_slot_Main+5
 23488  022A  0858               	movf	??_slot_Main+4,w
 23489  022B  00B7               	movwf	?_sprintf+8
 23490  022C  0859               	movf	??_slot_Main+5,w
 23491  022D  00B8               	movwf	?_sprintf+9
 23492  022E  0865               	movf	slot_Main@data,w
 23493  022F  0086               	movwf	6
 23494  0230  0866               	movf	slot_Main@data+1,w
 23495  0231  0087               	movwf	7
 23496  0232  314A               	addfsr 1,10
 23497  0233  0801               	movf	1,w
 23498  0234  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23499  0235  0086               	movwf	6
 23500  0236  3003               	movlw	3	; select bank6/7
 23501  0237  0087               	movwf	7
 23502  0238  0801               	movf	1,w
 23503  0239  00DA               	movwf	??_slot_Main+6
 23504  023A  01DB               	clrf	??_slot_Main+7
 23505  023B  085A               	movf	??_slot_Main+6,w
 23506  023C  00B9               	movwf	?_sprintf+10
 23507  023D  085B               	movf	??_slot_Main+7,w
 23508  023E  00BA               	movwf	?_sprintf+11
 23509  023F  319A  225F  3180   	fcall	_sprintf
 23510                           
 23511                           ;slot_task.c: 129: marquee(data->slot_print_buf, 1);}
 23512  0242  0020               	movlb	0	; select bank0
 23513  0243  0865               	movf	slot_Main@data,w
 23514  0244  3E0B               	addlw	11
 23515  0245  00BA               	movwf	marquee@string
 23516  0246  3000               	movlw	0
 23517  0247  3D66               	addwfc	slot_Main@data+1,w
 23518  0248  00BB               	movwf	marquee@string+1
 23519  0249  3001               	movlw	1
 23520  024A  00BC               	movwf	marquee@count
 23521  024B  3000               	movlw	0
 23522  024C  00BD               	movwf	marquee@count+1
 23523  024D  31A2  2275  3180   	fcall	_marquee
 23524  0250  2E27               	goto	l9742
 23525  0251                     l9678:	
 23526                           
 23527                           ;slot_task.c: 130: else if (data->displayTickCount < 200) {
 23528  0251  0020               	movlb	0	; select bank0
 23529  0252  0865               	movf	slot_Main@data,w
 23530  0253  0086               	movwf	6
 23531  0254  0866               	movf	slot_Main@data+1,w
 23532  0255  0087               	movwf	7
 23533  0256  3143               	addfsr 1,3
 23534  0257  3F40               	moviw [0]fsr1
 23535  0258  00D4               	movwf	??_slot_Main
 23536  0259  3F41               	moviw [1]fsr1
 23537  025A  00D5               	movwf	??_slot_Main+1
 23538  025B  3000               	movlw	0
 23539  025C  0255               	subwf	??_slot_Main+1,w
 23540  025D  30C8               	movlw	200
 23541  025E  1903               	skipnz
 23542  025F  0254               	subwf	??_slot_Main,w
 23543  0260  1803               	skipnc
 23544  0261  2B47               	goto	l9692
 23545                           
 23546                           ;slot_task.c: 131: slot_Running_Animation(data);
 23547  0262  0866               	movf	slot_Main@data+1,w
 23548  0263  00B3               	movwf	slot_Running_Animation@taskData+1
 23549  0264  0865               	movf	slot_Main@data,w
 23550  0265  00B2               	movwf	slot_Running_Animation@taskData
 23551  0266  31AB  23D0  3180   	fcall	_slot_Running_Animation
 23552                           
 23553                           ;slot_task.c: 132: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 23554  0269  3020               	movlw	low _Slot_Wheel
 23555  026A  00F1               	movwf	strlen@s
 23556  026B  3003               	movlw	high _Slot_Wheel
 23557  026C  00F2               	movwf	strlen@s+1
 23558  026D  31B6  26AD  3180   	fcall	_strlen
 23559  0270  0872               	movf	?_strlen+1,w
 23560  0271  0020               	movlb	0	; select bank0
 23561  0272  00AC               	movwf	___lwmod@divisor+1
 23562  0273  0871               	movf	?_strlen,w
 23563  0274  00AB               	movwf	___lwmod@divisor
 23564  0275  31AB  238D  3180   	fcall	_rand
 23565  0278  0020               	movlb	0	; select bank0
 23566  0279  0824               	movf	?_rand,w
 23567  027A  00D4               	movwf	??_slot_Main
 23568  027B  01D5               	clrf	??_slot_Main+1
 23569  027C  0854               	movf	??_slot_Main,w
 23570  027D  00AD               	movwf	___lwmod@dividend
 23571  027E  0855               	movf	??_slot_Main+1,w
 23572  027F  00AE               	movwf	___lwmod@dividend+1
 23573  0280  31B7  27A4  3180   	fcall	___lwmod
 23574  0283  0020               	movlb	0	; select bank0
 23575  0284  082B               	movf	?___lwmod,w
 23576  0285  00D6               	movwf	??_slot_Main+2
 23577  0286  0865               	movf	slot_Main@data,w
 23578  0287  3E08               	addlw	8
 23579  0288  00D7               	movwf	??_slot_Main+3
 23580  0289  3000               	movlw	0
 23581  028A  3D66               	addwfc	slot_Main@data+1,w
 23582  028B  00D8               	movwf	??_slot_Main+4
 23583  028C  0857               	movf	??_slot_Main+3,w
 23584  028D  0086               	movwf	6
 23585  028E  0858               	movf	??_slot_Main+4,w
 23586  028F  0087               	movwf	7
 23587  0290  0856               	movf	??_slot_Main+2,w
 23588  0291  0081               	movwf	1
 23589                           
 23590                           ;slot_task.c: 133: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 23591  0292  3020               	movlw	low _Slot_Wheel
 23592  0293  00F1               	movwf	strlen@s
 23593  0294  3003               	movlw	high _Slot_Wheel
 23594  0295  00F2               	movwf	strlen@s+1
 23595  0296  31B6  26AD  3180   	fcall	_strlen
 23596  0299  0872               	movf	?_strlen+1,w
 23597  029A  0020               	movlb	0	; select bank0
 23598  029B  00AC               	movwf	___lwmod@divisor+1
 23599  029C  0871               	movf	?_strlen,w
 23600  029D  00AB               	movwf	___lwmod@divisor
 23601  029E  31AB  238D  3180   	fcall	_rand
 23602  02A1  0020               	movlb	0	; select bank0
 23603  02A2  0824               	movf	?_rand,w
 23604  02A3  00D4               	movwf	??_slot_Main
 23605  02A4  01D5               	clrf	??_slot_Main+1
 23606  02A5  0854               	movf	??_slot_Main,w
 23607  02A6  00AD               	movwf	___lwmod@dividend
 23608  02A7  0855               	movf	??_slot_Main+1,w
 23609  02A8  00AE               	movwf	___lwmod@dividend+1
 23610  02A9  31B7  27A4  3180   	fcall	___lwmod
 23611  02AC  0020               	movlb	0	; select bank0
 23612  02AD  082B               	movf	?___lwmod,w
 23613  02AE  00D6               	movwf	??_slot_Main+2
 23614  02AF  0865               	movf	slot_Main@data,w
 23615  02B0  3E09               	addlw	9
 23616  02B1  00D7               	movwf	??_slot_Main+3
 23617  02B2  3000               	movlw	0
 23618  02B3  3D66               	addwfc	slot_Main@data+1,w
 23619  02B4  00D8               	movwf	??_slot_Main+4
 23620  02B5  0857               	movf	??_slot_Main+3,w
 23621  02B6  0086               	movwf	6
 23622  02B7  0858               	movf	??_slot_Main+4,w
 23623  02B8  0087               	movwf	7
 23624  02B9  0856               	movf	??_slot_Main+2,w
 23625  02BA  0081               	movwf	1
 23626                           
 23627                           ;slot_task.c: 134: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23628  02BB  3020               	movlw	low _Slot_Wheel
 23629  02BC  00F1               	movwf	strlen@s
 23630  02BD  3003               	movlw	high _Slot_Wheel
 23631  02BE  00F2               	movwf	strlen@s+1
 23632  02BF  31B6  26AD  3180   	fcall	_strlen
 23633  02C2  0872               	movf	?_strlen+1,w
 23634  02C3  0020               	movlb	0	; select bank0
 23635  02C4  00AC               	movwf	___lwmod@divisor+1
 23636  02C5  0871               	movf	?_strlen,w
 23637  02C6  00AB               	movwf	___lwmod@divisor
 23638  02C7  31AB  238D  3180   	fcall	_rand
 23639  02CA  0020               	movlb	0	; select bank0
 23640  02CB  0824               	movf	?_rand,w
 23641  02CC  00D4               	movwf	??_slot_Main
 23642  02CD  01D5               	clrf	??_slot_Main+1
 23643  02CE  0854               	movf	??_slot_Main,w
 23644  02CF  00AD               	movwf	___lwmod@dividend
 23645  02D0  0855               	movf	??_slot_Main+1,w
 23646  02D1  00AE               	movwf	___lwmod@dividend+1
 23647  02D2  31B7  27A4  3180   	fcall	___lwmod
 23648  02D5  0020               	movlb	0	; select bank0
 23649  02D6  082B               	movf	?___lwmod,w
 23650  02D7  00D6               	movwf	??_slot_Main+2
 23651  02D8  0865               	movf	slot_Main@data,w
 23652  02D9  3E0A               	addlw	10
 23653  02DA  00D7               	movwf	??_slot_Main+3
 23654  02DB  3000               	movlw	0
 23655  02DC  3D66               	addwfc	slot_Main@data+1,w
 23656  02DD  00D8               	movwf	??_slot_Main+4
 23657  02DE  0857               	movf	??_slot_Main+3,w
 23658  02DF  0086               	movwf	6
 23659  02E0  0858               	movf	??_slot_Main+4,w
 23660  02E1  0087               	movwf	7
 23661  02E2  0856               	movf	??_slot_Main+2,w
 23662  02E3  0081               	movwf	1
 23663                           
 23664                           ;slot_task.c: 135: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]], Slot_Whe
      +                          el[data->slot_wheel_index[3]]);
 23665  02E4  0865               	movf	slot_Main@data,w
 23666  02E5  3E0B               	addlw	11
 23667  02E6  00AF               	movwf	sprintf@sp
 23668  02E7  3000               	movlw	0
 23669  02E8  3D66               	addwfc	slot_Main@data+1,w
 23670  02E9  00B0               	movwf	sprintf@sp+1
 23671  02EA  30BF               	movlw	low (STR_64| (0+32768))
 23672  02EB  00B1               	movwf	sprintf@f
 23673  02EC  30BA               	movlw	high (STR_64| (0+32768))
 23674  02ED  00B2               	movwf	sprintf@f+1
 23675  02EE  357C               	lslf	_Shot_Index,w
 23676  02EF  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 23677  02F0  0086               	movwf	6
 23678  02F1  3001               	movlw	1	; select bank3/4
 23679  02F2  0087               	movwf	7
 23680  02F3  3F40               	moviw [0]fsr1
 23681  02F4  00D4               	movwf	??_slot_Main
 23682  02F5  3F41               	moviw [1]fsr1
 23683  02F6  00D5               	movwf	??_slot_Main+1
 23684  02F7  0854               	movf	??_slot_Main,w
 23685  02F8  0084               	movwf	4
 23686  02F9  0855               	movf	??_slot_Main+1,w
 23687  02FA  0085               	movwf	5
 23688  02FB  0800               	movf	0,w	;code access
 23689  02FC  00D6               	movwf	??_slot_Main+2
 23690  02FD  01D7               	clrf	??_slot_Main+3
 23691  02FE  0856               	movf	??_slot_Main+2,w
 23692  02FF  00B3               	movwf	?_sprintf+4
 23693  0300  0857               	movf	??_slot_Main+3,w
 23694  0301  00B4               	movwf	?_sprintf+5
 23695  0302  0865               	movf	slot_Main@data,w
 23696  0303  0086               	movwf	6
 23697  0304  0866               	movf	slot_Main@data+1,w
 23698  0305  0087               	movwf	7
 23699  0306  3148               	addfsr 1,8
 23700  0307  0801               	movf	1,w
 23701  0308  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23702  0309  0086               	movwf	6
 23703  030A  3003               	movlw	3	; select bank6/7
 23704  030B  0087               	movwf	7
 23705  030C  0801               	movf	1,w
 23706  030D  00D8               	movwf	??_slot_Main+4
 23707  030E  01D9               	clrf	??_slot_Main+5
 23708  030F  0858               	movf	??_slot_Main+4,w
 23709  0310  00B5               	movwf	?_sprintf+6
 23710  0311  0859               	movf	??_slot_Main+5,w
 23711  0312  00B6               	movwf	?_sprintf+7
 23712  0313  0865               	movf	slot_Main@data,w
 23713  0314  0086               	movwf	6
 23714  0315  0866               	movf	slot_Main@data+1,w
 23715  0316  0087               	movwf	7
 23716  0317  3149               	addfsr 1,9
 23717  0318  0801               	movf	1,w
 23718  0319  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23719  031A  0086               	movwf	6
 23720  031B  3003               	movlw	3	; select bank6/7
 23721  031C  0087               	movwf	7
 23722  031D  0801               	movf	1,w
 23723  031E  00DA               	movwf	??_slot_Main+6
 23724  031F  01DB               	clrf	??_slot_Main+7
 23725  0320  085A               	movf	??_slot_Main+6,w
 23726  0321  00B7               	movwf	?_sprintf+8
 23727  0322  085B               	movf	??_slot_Main+7,w
 23728  0323  00B8               	movwf	?_sprintf+9
 23729  0324  0865               	movf	slot_Main@data,w
 23730  0325  0086               	movwf	6
 23731  0326  0866               	movf	slot_Main@data+1,w
 23732  0327  0087               	movwf	7
 23733  0328  314A               	addfsr 1,10
 23734  0329  0801               	movf	1,w
 23735  032A  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23736  032B  0086               	movwf	6
 23737  032C  3003               	movlw	3	; select bank6/7
 23738  032D  0087               	movwf	7
 23739  032E  0801               	movf	1,w
 23740  032F  00DC               	movwf	??_slot_Main+8
 23741  0330  01DD               	clrf	??_slot_Main+9
 23742  0331  085C               	movf	??_slot_Main+8,w
 23743  0332  00B9               	movwf	?_sprintf+10
 23744  0333  085D               	movf	??_slot_Main+9,w
 23745  0334  00BA               	movwf	?_sprintf+11
 23746  0335  319A  225F  3180   	fcall	_sprintf
 23747                           
 23748                           ;slot_task.c: 136: marquee(data->slot_print_buf, 1);}
 23749  0338  0020               	movlb	0	; select bank0
 23750  0339  0865               	movf	slot_Main@data,w
 23751  033A  3E0B               	addlw	11
 23752  033B  00BA               	movwf	marquee@string
 23753  033C  3000               	movlw	0
 23754  033D  3D66               	addwfc	slot_Main@data+1,w
 23755  033E  00BB               	movwf	marquee@string+1
 23756  033F  3001               	movlw	1
 23757  0340  00BC               	movwf	marquee@count
 23758  0341  3000               	movlw	0
 23759  0342  00BD               	movwf	marquee@count+1
 23760  0343  31A2  2275  3180   	fcall	_marquee
 23761  0346  2E27               	goto	l9742
 23762  0347                     l9692:	
 23763                           
 23764                           ;slot_task.c: 137: else if (data->displayTickCount < 300) {
 23765  0347  0020               	movlb	0	; select bank0
 23766  0348  0865               	movf	slot_Main@data,w
 23767  0349  0086               	movwf	6
 23768  034A  0866               	movf	slot_Main@data+1,w
 23769  034B  0087               	movwf	7
 23770  034C  3143               	addfsr 1,3
 23771  034D  3F40               	moviw [0]fsr1
 23772  034E  00D4               	movwf	??_slot_Main
 23773  034F  3F41               	moviw [1]fsr1
 23774  0350  00D5               	movwf	??_slot_Main+1
 23775  0351  3001               	movlw	1
 23776  0352  0255               	subwf	??_slot_Main+1,w
 23777  0353  302C               	movlw	44
 23778  0354  1903               	skipnz
 23779  0355  0254               	subwf	??_slot_Main,w
 23780  0356  1803               	skipnc
 23781  0357  2C1A               	goto	l9704
 23782                           
 23783                           ;slot_task.c: 138: slot_Running_Animation(data);
 23784  0358  0866               	movf	slot_Main@data+1,w
 23785  0359  00B3               	movwf	slot_Running_Animation@taskData+1
 23786  035A  0865               	movf	slot_Main@data,w
 23787  035B  00B2               	movwf	slot_Running_Animation@taskData
 23788  035C  31AB  23D0  3180   	fcall	_slot_Running_Animation
 23789                           
 23790                           ;slot_task.c: 139: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 23791  035F  3020               	movlw	low _Slot_Wheel
 23792  0360  00F1               	movwf	strlen@s
 23793  0361  3003               	movlw	high _Slot_Wheel
 23794  0362  00F2               	movwf	strlen@s+1
 23795  0363  31B6  26AD  3180   	fcall	_strlen
 23796  0366  0872               	movf	?_strlen+1,w
 23797  0367  0020               	movlb	0	; select bank0
 23798  0368  00AC               	movwf	___lwmod@divisor+1
 23799  0369  0871               	movf	?_strlen,w
 23800  036A  00AB               	movwf	___lwmod@divisor
 23801  036B  31AB  238D  3180   	fcall	_rand
 23802  036E  0020               	movlb	0	; select bank0
 23803  036F  0824               	movf	?_rand,w
 23804  0370  00D4               	movwf	??_slot_Main
 23805  0371  01D5               	clrf	??_slot_Main+1
 23806  0372  0854               	movf	??_slot_Main,w
 23807  0373  00AD               	movwf	___lwmod@dividend
 23808  0374  0855               	movf	??_slot_Main+1,w
 23809  0375  00AE               	movwf	___lwmod@dividend+1
 23810  0376  31B7  27A4  3180   	fcall	___lwmod
 23811  0379  0020               	movlb	0	; select bank0
 23812  037A  082B               	movf	?___lwmod,w
 23813  037B  00D6               	movwf	??_slot_Main+2
 23814  037C  0865               	movf	slot_Main@data,w
 23815  037D  3E09               	addlw	9
 23816  037E  00D7               	movwf	??_slot_Main+3
 23817  037F  3000               	movlw	0
 23818  0380  3D66               	addwfc	slot_Main@data+1,w
 23819  0381  00D8               	movwf	??_slot_Main+4
 23820  0382  0857               	movf	??_slot_Main+3,w
 23821  0383  0086               	movwf	6
 23822  0384  0858               	movf	??_slot_Main+4,w
 23823  0385  0087               	movwf	7
 23824  0386  0856               	movf	??_slot_Main+2,w
 23825  0387  0081               	movwf	1
 23826                           
 23827                           ;slot_task.c: 140: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23828  0388  3020               	movlw	low _Slot_Wheel
 23829  0389  00F1               	movwf	strlen@s
 23830  038A  3003               	movlw	high _Slot_Wheel
 23831  038B  00F2               	movwf	strlen@s+1
 23832  038C  31B6  26AD  3180   	fcall	_strlen
 23833  038F  0872               	movf	?_strlen+1,w
 23834  0390  0020               	movlb	0	; select bank0
 23835  0391  00AC               	movwf	___lwmod@divisor+1
 23836  0392  0871               	movf	?_strlen,w
 23837  0393  00AB               	movwf	___lwmod@divisor
 23838  0394  31AB  238D  3180   	fcall	_rand
 23839  0397  0020               	movlb	0	; select bank0
 23840  0398  0824               	movf	?_rand,w
 23841  0399  00D4               	movwf	??_slot_Main
 23842  039A  01D5               	clrf	??_slot_Main+1
 23843  039B  0854               	movf	??_slot_Main,w
 23844  039C  00AD               	movwf	___lwmod@dividend
 23845  039D  0855               	movf	??_slot_Main+1,w
 23846  039E  00AE               	movwf	___lwmod@dividend+1
 23847  039F  31B7  27A4  3180   	fcall	___lwmod
 23848  03A2  0020               	movlb	0	; select bank0
 23849  03A3  082B               	movf	?___lwmod,w
 23850  03A4  00D6               	movwf	??_slot_Main+2
 23851  03A5  0865               	movf	slot_Main@data,w
 23852  03A6  3E0A               	addlw	10
 23853  03A7  00D7               	movwf	??_slot_Main+3
 23854  03A8  3000               	movlw	0
 23855  03A9  3D66               	addwfc	slot_Main@data+1,w
 23856  03AA  00D8               	movwf	??_slot_Main+4
 23857  03AB  0857               	movf	??_slot_Main+3,w
 23858  03AC  0086               	movwf	6
 23859  03AD  0858               	movf	??_slot_Main+4,w
 23860  03AE  0087               	movwf	7
 23861  03AF  0856               	movf	??_slot_Main+2,w
 23862  03B0  0081               	movwf	1
 23863                           
 23864                           ;slot_task.c: 141: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Slot_Wheel[data->slot_wheel_index[2]], Slot_Wheel[data->s
      +                          lot_wheel_index[3]]);
 23865  03B1  0865               	movf	slot_Main@data,w
 23866  03B2  3E0B               	addlw	11
 23867  03B3  00AF               	movwf	sprintf@sp
 23868  03B4  3000               	movlw	0
 23869  03B5  3D66               	addwfc	slot_Main@data+1,w
 23870  03B6  00B0               	movwf	sprintf@sp+1
 23871  03B7  30BF               	movlw	low (STR_64| (0+32768))
 23872  03B8  00B1               	movwf	sprintf@f
 23873  03B9  30BA               	movlw	high (STR_64| (0+32768))
 23874  03BA  00B2               	movwf	sprintf@f+1
 23875  03BB  357C               	lslf	_Shot_Index,w
 23876  03BC  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 23877  03BD  0086               	movwf	6
 23878  03BE  3001               	movlw	1	; select bank3/4
 23879  03BF  0087               	movwf	7
 23880  03C0  3F40               	moviw [0]fsr1
 23881  03C1  00D4               	movwf	??_slot_Main
 23882  03C2  3F41               	moviw [1]fsr1
 23883  03C3  00D5               	movwf	??_slot_Main+1
 23884  03C4  0854               	movf	??_slot_Main,w
 23885  03C5  0084               	movwf	4
 23886  03C6  0855               	movf	??_slot_Main+1,w
 23887  03C7  0085               	movwf	5
 23888  03C8  0800               	movf	0,w	;code access
 23889  03C9  00D6               	movwf	??_slot_Main+2
 23890  03CA  01D7               	clrf	??_slot_Main+3
 23891  03CB  0856               	movf	??_slot_Main+2,w
 23892  03CC  00B3               	movwf	?_sprintf+4
 23893  03CD  0857               	movf	??_slot_Main+3,w
 23894  03CE  00B4               	movwf	?_sprintf+5
 23895  03CF  357C               	lslf	_Shot_Index,w
 23896  03D0  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 23897  03D1  0086               	movwf	6
 23898  03D2  3001               	movlw	1	; select bank3/4
 23899  03D3  0087               	movwf	7
 23900  03D4  3F40               	moviw [0]fsr1
 23901  03D5  00D8               	movwf	??_slot_Main+4
 23902  03D6  3F41               	moviw [1]fsr1
 23903  03D7  00D9               	movwf	??_slot_Main+5
 23904  03D8  3001               	movlw	1
 23905  03D9  0758               	addwf	??_slot_Main+4,w
 23906  03DA  0084               	movwf	4
 23907  03DB  0859               	movf	??_slot_Main+5,w
 23908  03DC  1803               	skipnc
 23909  03DD  0A59               	incf	??_slot_Main+5,w
 23910  03DE  0085               	movwf	5
 23911  03DF  0800               	movf	0,w	;code access
 23912  03E0  00DA               	movwf	??_slot_Main+6
 23913  03E1  01DB               	clrf	??_slot_Main+7
 23914  03E2  085A               	movf	??_slot_Main+6,w
 23915  03E3  00B5               	movwf	?_sprintf+6
 23916  03E4  085B               	movf	??_slot_Main+7,w
 23917  03E5  00B6               	movwf	?_sprintf+7
 23918  03E6  0865               	movf	slot_Main@data,w
 23919  03E7  0086               	movwf	6
 23920  03E8  0866               	movf	slot_Main@data+1,w
 23921  03E9  0087               	movwf	7
 23922  03EA  3149               	addfsr 1,9
 23923  03EB  0801               	movf	1,w
 23924  03EC  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23925  03ED  0086               	movwf	6
 23926  03EE  3003               	movlw	3	; select bank6/7
 23927  03EF  0087               	movwf	7
 23928  03F0  0801               	movf	1,w
 23929  03F1  00DC               	movwf	??_slot_Main+8
 23930  03F2  01DD               	clrf	??_slot_Main+9
 23931  03F3  085C               	movf	??_slot_Main+8,w
 23932  03F4  00B7               	movwf	?_sprintf+8
 23933  03F5  085D               	movf	??_slot_Main+9,w
 23934  03F6  00B8               	movwf	?_sprintf+9
 23935  03F7  0865               	movf	slot_Main@data,w
 23936  03F8  0086               	movwf	6
 23937  03F9  0866               	movf	slot_Main@data+1,w
 23938  03FA  0087               	movwf	7
 23939  03FB  314A               	addfsr 1,10
 23940  03FC  0801               	movf	1,w
 23941  03FD  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23942  03FE  0086               	movwf	6
 23943  03FF  3003               	movlw	3	; select bank6/7
 23944  0400  0087               	movwf	7
 23945  0401  0801               	movf	1,w
 23946  0402  00DE               	movwf	??_slot_Main+10
 23947  0403  01DF               	clrf	??_slot_Main+11
 23948  0404  085E               	movf	??_slot_Main+10,w
 23949  0405  00B9               	movwf	?_sprintf+10
 23950  0406  085F               	movf	??_slot_Main+11,w
 23951  0407  00BA               	movwf	?_sprintf+11
 23952  0408  319A  225F  3180   	fcall	_sprintf
 23953                           
 23954                           ;slot_task.c: 142: marquee(data->slot_print_buf, 1);}
 23955  040B  0020               	movlb	0	; select bank0
 23956  040C  0865               	movf	slot_Main@data,w
 23957  040D  3E0B               	addlw	11
 23958  040E  00BA               	movwf	marquee@string
 23959  040F  3000               	movlw	0
 23960  0410  3D66               	addwfc	slot_Main@data+1,w
 23961  0411  00BB               	movwf	marquee@string+1
 23962  0412  3001               	movlw	1
 23963  0413  00BC               	movwf	marquee@count
 23964  0414  3000               	movlw	0
 23965  0415  00BD               	movwf	marquee@count+1
 23966  0416  31A2  2275  3180   	fcall	_marquee
 23967  0419  2E27               	goto	l9742
 23968  041A                     l9704:	
 23969                           
 23970                           ;slot_task.c: 143: else if (data->displayTickCount < 400) {
 23971  041A  0020               	movlb	0	; select bank0
 23972  041B  0865               	movf	slot_Main@data,w
 23973  041C  0086               	movwf	6
 23974  041D  0866               	movf	slot_Main@data+1,w
 23975  041E  0087               	movwf	7
 23976  041F  3143               	addfsr 1,3
 23977  0420  3F40               	moviw [0]fsr1
 23978  0421  00D4               	movwf	??_slot_Main
 23979  0422  3F41               	moviw [1]fsr1
 23980  0423  00D5               	movwf	??_slot_Main+1
 23981  0424  3001               	movlw	1
 23982  0425  0255               	subwf	??_slot_Main+1,w
 23983  0426  3090               	movlw	144
 23984  0427  1903               	skipnz
 23985  0428  0254               	subwf	??_slot_Main,w
 23986  0429  1803               	skipnc
 23987  042A  2CCA               	goto	l9714
 23988                           
 23989                           ;slot_task.c: 144: slot_Running_Animation(data);
 23990  042B  0866               	movf	slot_Main@data+1,w
 23991  042C  00B3               	movwf	slot_Running_Animation@taskData+1
 23992  042D  0865               	movf	slot_Main@data,w
 23993  042E  00B2               	movwf	slot_Running_Animation@taskData
 23994  042F  31AB  23D0  3180   	fcall	_slot_Running_Animation
 23995                           
 23996                           ;slot_task.c: 145: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23997  0432  3020               	movlw	low _Slot_Wheel
 23998  0433  00F1               	movwf	strlen@s
 23999  0434  3003               	movlw	high _Slot_Wheel
 24000  0435  00F2               	movwf	strlen@s+1
 24001  0436  31B6  26AD  3180   	fcall	_strlen
 24002  0439  0872               	movf	?_strlen+1,w
 24003  043A  0020               	movlb	0	; select bank0
 24004  043B  00AC               	movwf	___lwmod@divisor+1
 24005  043C  0871               	movf	?_strlen,w
 24006  043D  00AB               	movwf	___lwmod@divisor
 24007  043E  31AB  238D  3180   	fcall	_rand
 24008  0441  0020               	movlb	0	; select bank0
 24009  0442  0824               	movf	?_rand,w
 24010  0443  00D4               	movwf	??_slot_Main
 24011  0444  01D5               	clrf	??_slot_Main+1
 24012  0445  0854               	movf	??_slot_Main,w
 24013  0446  00AD               	movwf	___lwmod@dividend
 24014  0447  0855               	movf	??_slot_Main+1,w
 24015  0448  00AE               	movwf	___lwmod@dividend+1
 24016  0449  31B7  27A4  3180   	fcall	___lwmod
 24017  044C  0020               	movlb	0	; select bank0
 24018  044D  082B               	movf	?___lwmod,w
 24019  044E  00D6               	movwf	??_slot_Main+2
 24020  044F  0865               	movf	slot_Main@data,w
 24021  0450  3E0A               	addlw	10
 24022  0451  00D7               	movwf	??_slot_Main+3
 24023  0452  3000               	movlw	0
 24024  0453  3D66               	addwfc	slot_Main@data+1,w
 24025  0454  00D8               	movwf	??_slot_Main+4
 24026  0455  0857               	movf	??_slot_Main+3,w
 24027  0456  0086               	movwf	6
 24028  0457  0858               	movf	??_slot_Main+4,w
 24029  0458  0087               	movwf	7
 24030  0459  0856               	movf	??_slot_Main+2,w
 24031  045A  0081               	movwf	1
 24032                           
 24033                           ;slot_task.c: 146: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Slot_Wheel[data->slot_wheel_
      +                          index[3]]);
 24034  045B  0865               	movf	slot_Main@data,w
 24035  045C  3E0B               	addlw	11
 24036  045D  00AF               	movwf	sprintf@sp
 24037  045E  3000               	movlw	0
 24038  045F  3D66               	addwfc	slot_Main@data+1,w
 24039  0460  00B0               	movwf	sprintf@sp+1
 24040  0461  30BF               	movlw	low (STR_64| (0+32768))
 24041  0462  00B1               	movwf	sprintf@f
 24042  0463  30BA               	movlw	high (STR_64| (0+32768))
 24043  0464  00B2               	movwf	sprintf@f+1
 24044  0465  357C               	lslf	_Shot_Index,w
 24045  0466  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24046  0467  0086               	movwf	6
 24047  0468  3001               	movlw	1	; select bank3/4
 24048  0469  0087               	movwf	7
 24049  046A  3F40               	moviw [0]fsr1
 24050  046B  00D4               	movwf	??_slot_Main
 24051  046C  3F41               	moviw [1]fsr1
 24052  046D  00D5               	movwf	??_slot_Main+1
 24053  046E  0854               	movf	??_slot_Main,w
 24054  046F  0084               	movwf	4
 24055  0470  0855               	movf	??_slot_Main+1,w
 24056  0471  0085               	movwf	5
 24057  0472  0800               	movf	0,w	;code access
 24058  0473  00D6               	movwf	??_slot_Main+2
 24059  0474  01D7               	clrf	??_slot_Main+3
 24060  0475  0856               	movf	??_slot_Main+2,w
 24061  0476  00B3               	movwf	?_sprintf+4
 24062  0477  0857               	movf	??_slot_Main+3,w
 24063  0478  00B4               	movwf	?_sprintf+5
 24064  0479  357C               	lslf	_Shot_Index,w
 24065  047A  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24066  047B  0086               	movwf	6
 24067  047C  3001               	movlw	1	; select bank3/4
 24068  047D  0087               	movwf	7
 24069  047E  3F40               	moviw [0]fsr1
 24070  047F  00D8               	movwf	??_slot_Main+4
 24071  0480  3F41               	moviw [1]fsr1
 24072  0481  00D9               	movwf	??_slot_Main+5
 24073  0482  3001               	movlw	1
 24074  0483  0758               	addwf	??_slot_Main+4,w
 24075  0484  0084               	movwf	4
 24076  0485  0859               	movf	??_slot_Main+5,w
 24077  0486  1803               	skipnc
 24078  0487  0A59               	incf	??_slot_Main+5,w
 24079  0488  0085               	movwf	5
 24080  0489  0800               	movf	0,w	;code access
 24081  048A  00DA               	movwf	??_slot_Main+6
 24082  048B  01DB               	clrf	??_slot_Main+7
 24083  048C  085A               	movf	??_slot_Main+6,w
 24084  048D  00B5               	movwf	?_sprintf+6
 24085  048E  085B               	movf	??_slot_Main+7,w
 24086  048F  00B6               	movwf	?_sprintf+7
 24087  0490  357C               	lslf	_Shot_Index,w
 24088  0491  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24089  0492  0086               	movwf	6
 24090  0493  3001               	movlw	1	; select bank3/4
 24091  0494  0087               	movwf	7
 24092  0495  3F40               	moviw [0]fsr1
 24093  0496  00DC               	movwf	??_slot_Main+8
 24094  0497  3F41               	moviw [1]fsr1
 24095  0498  00DD               	movwf	??_slot_Main+9
 24096  0499  3002               	movlw	2
 24097  049A  075C               	addwf	??_slot_Main+8,w
 24098  049B  0084               	movwf	4
 24099  049C  085D               	movf	??_slot_Main+9,w
 24100  049D  1803               	skipnc
 24101  049E  0A5D               	incf	??_slot_Main+9,w
 24102  049F  0085               	movwf	5
 24103  04A0  0800               	movf	0,w	;code access
 24104  04A1  00DE               	movwf	??_slot_Main+10
 24105  04A2  01DF               	clrf	??_slot_Main+11
 24106  04A3  085E               	movf	??_slot_Main+10,w
 24107  04A4  00B7               	movwf	?_sprintf+8
 24108  04A5  085F               	movf	??_slot_Main+11,w
 24109  04A6  00B8               	movwf	?_sprintf+9
 24110  04A7  0865               	movf	slot_Main@data,w
 24111  04A8  0086               	movwf	6
 24112  04A9  0866               	movf	slot_Main@data+1,w
 24113  04AA  0087               	movwf	7
 24114  04AB  314A               	addfsr 1,10
 24115  04AC  0801               	movf	1,w
 24116  04AD  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24117  04AE  0086               	movwf	6
 24118  04AF  3003               	movlw	3	; select bank6/7
 24119  04B0  0087               	movwf	7
 24120  04B1  0801               	movf	1,w
 24121  04B2  00E0               	movwf	??_slot_Main+12
 24122  04B3  01E1               	clrf	??_slot_Main+13
 24123  04B4  0860               	movf	??_slot_Main+12,w
 24124  04B5  00B9               	movwf	?_sprintf+10
 24125  04B6  0861               	movf	??_slot_Main+13,w
 24126  04B7  00BA               	movwf	?_sprintf+11
 24127  04B8  319A  225F  3180   	fcall	_sprintf
 24128                           
 24129                           ;slot_task.c: 148: marquee(data->slot_print_buf, 1);}
 24130  04BB  0020               	movlb	0	; select bank0
 24131  04BC  0865               	movf	slot_Main@data,w
 24132  04BD  3E0B               	addlw	11
 24133  04BE  00BA               	movwf	marquee@string
 24134  04BF  3000               	movlw	0
 24135  04C0  3D66               	addwfc	slot_Main@data+1,w
 24136  04C1  00BB               	movwf	marquee@string+1
 24137  04C2  3001               	movlw	1
 24138  04C3  00BC               	movwf	marquee@count
 24139  04C4  3000               	movlw	0
 24140  04C5  00BD               	movwf	marquee@count+1
 24141  04C6  31A2  2275  3180   	fcall	_marquee
 24142  04C9  2E27               	goto	l9742
 24143  04CA                     l9714:	
 24144                           
 24145                           ;slot_task.c: 149: else if (data->displayTickCount < 500) {
 24146  04CA  0020               	movlb	0	; select bank0
 24147  04CB  0865               	movf	slot_Main@data,w
 24148  04CC  0086               	movwf	6
 24149  04CD  0866               	movf	slot_Main@data+1,w
 24150  04CE  0087               	movwf	7
 24151  04CF  3143               	addfsr 1,3
 24152  04D0  3F40               	moviw [0]fsr1
 24153  04D1  00D4               	movwf	??_slot_Main
 24154  04D2  3F41               	moviw [1]fsr1
 24155  04D3  00D5               	movwf	??_slot_Main+1
 24156  04D4  3001               	movlw	1
 24157  04D5  0255               	subwf	??_slot_Main+1,w
 24158  04D6  30F4               	movlw	244
 24159  04D7  1903               	skipnz
 24160  04D8  0254               	subwf	??_slot_Main,w
 24161  04D9  1803               	skipnc
 24162  04DA  2D83               	goto	l9722
 24163                           
 24164                           ;slot_task.c: 150: slot_Finished_Animation(data);
 24165  04DB  0866               	movf	slot_Main@data+1,w
 24166  04DC  00BE               	movwf	slot_Finished_Animation@taskData+1
 24167  04DD  0865               	movf	slot_Main@data,w
 24168  04DE  00BD               	movwf	slot_Finished_Animation@taskData
 24169  04DF  3190  2001  3180   	fcall	_slot_Finished_Animation
 24170                           
 24171                           ;slot_task.c: 151: if ( data->displayTickCount % 50 <= 25 ) {
 24172  04E2  3032               	movlw	50
 24173  04E3  0020               	movlb	0	; select bank0
 24174  04E4  00AB               	movwf	___lwmod@divisor
 24175  04E5  3000               	movlw	0
 24176  04E6  00AC               	movwf	___lwmod@divisor+1
 24177  04E7  0865               	movf	slot_Main@data,w
 24178  04E8  0086               	movwf	6
 24179  04E9  0866               	movf	slot_Main@data+1,w
 24180  04EA  0087               	movwf	7
 24181  04EB  3143               	addfsr 1,3
 24182  04EC  3F40               	moviw [0]fsr1
 24183  04ED  00AD               	movwf	___lwmod@dividend
 24184  04EE  3F41               	moviw [1]fsr1
 24185  04EF  00AE               	movwf	___lwmod@dividend+1
 24186  04F0  31B7  27A4  3180   	fcall	___lwmod
 24187  04F3  3000               	movlw	0
 24188  04F4  0020               	movlb	0	; select bank0
 24189  04F5  022C               	subwf	?___lwmod+1,w
 24190  04F6  301A               	movlw	26
 24191  04F7  1903               	skipnz
 24192  04F8  022B               	subwf	?___lwmod,w
 24193  04F9  1803               	skipnc
 24194  04FA  2D0D               	goto	l9720
 24195                           
 24196                           ;slot_task.c: 152: memset(data->slot_print_buf, 0x20, 4);
 24197  04FB  0865               	movf	slot_Main@data,w
 24198  04FC  3E0B               	addlw	11
 24199  04FD  00F1               	movwf	memset@p1
 24200  04FE  3000               	movlw	0
 24201  04FF  3D66               	addwfc	slot_Main@data+1,w
 24202  0500  00F2               	movwf	memset@p1+1
 24203  0501  3020               	movlw	32
 24204  0502  00F3               	movwf	memset@c
 24205  0503  3000               	movlw	0
 24206  0504  00F4               	movwf	memset@c+1
 24207  0505  3004               	movlw	4
 24208  0506  00F5               	movwf	memset@n
 24209  0507  3000               	movlw	0
 24210  0508  00F6               	movwf	memset@n+1
 24211  0509  31B5  25EE  3180   	fcall	_memset
 24212                           
 24213                           ;slot_task.c: 153: }
 24214  050C  2D74               	goto	l1432
 24215  050D                     l9720:	
 24216                           
 24217                           ;slot_task.c: 154: else {
 24218                           ;slot_task.c: 155: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Shot_Options[Shot_Index][3])
      +                          ;
 24219  050D  0020               	movlb	0	; select bank0
 24220  050E  0865               	movf	slot_Main@data,w
 24221  050F  3E0B               	addlw	11
 24222  0510  00AF               	movwf	sprintf@sp
 24223  0511  3000               	movlw	0
 24224  0512  3D66               	addwfc	slot_Main@data+1,w
 24225  0513  00B0               	movwf	sprintf@sp+1
 24226  0514  30BF               	movlw	low (STR_64| (0+32768))
 24227  0515  00B1               	movwf	sprintf@f
 24228  0516  30BA               	movlw	high (STR_64| (0+32768))
 24229  0517  00B2               	movwf	sprintf@f+1
 24230  0518  357C               	lslf	_Shot_Index,w
 24231  0519  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24232  051A  0086               	movwf	6
 24233  051B  3001               	movlw	1	; select bank3/4
 24234  051C  0087               	movwf	7
 24235  051D  3F40               	moviw [0]fsr1
 24236  051E  00D4               	movwf	??_slot_Main
 24237  051F  3F41               	moviw [1]fsr1
 24238  0520  00D5               	movwf	??_slot_Main+1
 24239  0521  0854               	movf	??_slot_Main,w
 24240  0522  0084               	movwf	4
 24241  0523  0855               	movf	??_slot_Main+1,w
 24242  0524  0085               	movwf	5
 24243  0525  0800               	movf	0,w	;code access
 24244  0526  00D6               	movwf	??_slot_Main+2
 24245  0527  01D7               	clrf	??_slot_Main+3
 24246  0528  0856               	movf	??_slot_Main+2,w
 24247  0529  00B3               	movwf	?_sprintf+4
 24248  052A  0857               	movf	??_slot_Main+3,w
 24249  052B  00B4               	movwf	?_sprintf+5
 24250  052C  357C               	lslf	_Shot_Index,w
 24251  052D  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24252  052E  0086               	movwf	6
 24253  052F  3001               	movlw	1	; select bank3/4
 24254  0530  0087               	movwf	7
 24255  0531  3F40               	moviw [0]fsr1
 24256  0532  00D8               	movwf	??_slot_Main+4
 24257  0533  3F41               	moviw [1]fsr1
 24258  0534  00D9               	movwf	??_slot_Main+5
 24259  0535  3001               	movlw	1
 24260  0536  0758               	addwf	??_slot_Main+4,w
 24261  0537  0084               	movwf	4
 24262  0538  0859               	movf	??_slot_Main+5,w
 24263  0539  1803               	skipnc
 24264  053A  0A59               	incf	??_slot_Main+5,w
 24265  053B  0085               	movwf	5
 24266  053C  0800               	movf	0,w	;code access
 24267  053D  00DA               	movwf	??_slot_Main+6
 24268  053E  01DB               	clrf	??_slot_Main+7
 24269  053F  085A               	movf	??_slot_Main+6,w
 24270  0540  00B5               	movwf	?_sprintf+6
 24271  0541  085B               	movf	??_slot_Main+7,w
 24272  0542  00B6               	movwf	?_sprintf+7
 24273  0543  357C               	lslf	_Shot_Index,w
 24274  0544  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24275  0545  0086               	movwf	6
 24276  0546  3001               	movlw	1	; select bank3/4
 24277  0547  0087               	movwf	7
 24278  0548  3F40               	moviw [0]fsr1
 24279  0549  00DC               	movwf	??_slot_Main+8
 24280  054A  3F41               	moviw [1]fsr1
 24281  054B  00DD               	movwf	??_slot_Main+9
 24282  054C  3002               	movlw	2
 24283  054D  075C               	addwf	??_slot_Main+8,w
 24284  054E  0084               	movwf	4
 24285  054F  085D               	movf	??_slot_Main+9,w
 24286  0550  1803               	skipnc
 24287  0551  0A5D               	incf	??_slot_Main+9,w
 24288  0552  0085               	movwf	5
 24289  0553  0800               	movf	0,w	;code access
 24290  0554  00DE               	movwf	??_slot_Main+10
 24291  0555  01DF               	clrf	??_slot_Main+11
 24292  0556  085E               	movf	??_slot_Main+10,w
 24293  0557  00B7               	movwf	?_sprintf+8
 24294  0558  085F               	movf	??_slot_Main+11,w
 24295  0559  00B8               	movwf	?_sprintf+9
 24296  055A  357C               	lslf	_Shot_Index,w
 24297  055B  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24298  055C  0086               	movwf	6
 24299  055D  3001               	movlw	1	; select bank3/4
 24300  055E  0087               	movwf	7
 24301  055F  3F40               	moviw [0]fsr1
 24302  0560  00E0               	movwf	??_slot_Main+12
 24303  0561  3F41               	moviw [1]fsr1
 24304  0562  00E1               	movwf	??_slot_Main+13
 24305  0563  3003               	movlw	3
 24306  0564  0760               	addwf	??_slot_Main+12,w
 24307  0565  0084               	movwf	4
 24308  0566  0861               	movf	??_slot_Main+13,w
 24309  0567  1803               	skipnc
 24310  0568  0A61               	incf	??_slot_Main+13,w
 24311  0569  0085               	movwf	5
 24312  056A  0800               	movf	0,w	;code access
 24313  056B  00E2               	movwf	??_slot_Main+14
 24314  056C  01E3               	clrf	??_slot_Main+15
 24315  056D  0862               	movf	??_slot_Main+14,w
 24316  056E  00B9               	movwf	?_sprintf+10
 24317  056F  0863               	movf	??_slot_Main+15,w
 24318  0570  00BA               	movwf	?_sprintf+11
 24319  0571  319A  225F  3180   	fcall	_sprintf
 24320  0574                     l1432:	
 24321                           
 24322                           ;slot_task.c: 156: }
 24323                           ;slot_task.c: 157: marquee(data->slot_print_buf, 1);
 24324  0574  0020               	movlb	0	; select bank0
 24325  0575  0865               	movf	slot_Main@data,w
 24326  0576  3E0B               	addlw	11
 24327  0577  00BA               	movwf	marquee@string
 24328  0578  3000               	movlw	0
 24329  0579  3D66               	addwfc	slot_Main@data+1,w
 24330  057A  00BB               	movwf	marquee@string+1
 24331  057B  3001               	movlw	1
 24332  057C  00BC               	movwf	marquee@count
 24333  057D  3000               	movlw	0
 24334  057E  00BD               	movwf	marquee@count+1
 24335  057F  31A2  2275  3180   	fcall	_marquee
 24336                           
 24337                           ;slot_task.c: 158: }
 24338  0582  2E27               	goto	l9742
 24339  0583                     l9722:	
 24340                           
 24341                           ;slot_task.c: 159: else {
 24342                           ;slot_task.c: 160: slot_Finished_Animation(data);
 24343  0583  0020               	movlb	0	; select bank0
 24344  0584  0866               	movf	slot_Main@data+1,w
 24345  0585  00BE               	movwf	slot_Finished_Animation@taskData+1
 24346  0586  0865               	movf	slot_Main@data,w
 24347  0587  00BD               	movwf	slot_Finished_Animation@taskData
 24348  0588  3190  2001  3180   	fcall	_slot_Finished_Animation
 24349                           
 24350                           ;slot_task.c: 161: if ( data->displayTickCount % 50 <= 25 ) {
 24351  058B  3032               	movlw	50
 24352  058C  0020               	movlb	0	; select bank0
 24353  058D  00AB               	movwf	___lwmod@divisor
 24354  058E  3000               	movlw	0
 24355  058F  00AC               	movwf	___lwmod@divisor+1
 24356  0590  0865               	movf	slot_Main@data,w
 24357  0591  0086               	movwf	6
 24358  0592  0866               	movf	slot_Main@data+1,w
 24359  0593  0087               	movwf	7
 24360  0594  3143               	addfsr 1,3
 24361  0595  3F40               	moviw [0]fsr1
 24362  0596  00AD               	movwf	___lwmod@dividend
 24363  0597  3F41               	moviw [1]fsr1
 24364  0598  00AE               	movwf	___lwmod@dividend+1
 24365  0599  31B7  27A4  3180   	fcall	___lwmod
 24366  059C  3000               	movlw	0
 24367  059D  0020               	movlb	0	; select bank0
 24368  059E  022C               	subwf	?___lwmod+1,w
 24369  059F  301A               	movlw	26
 24370  05A0  1903               	skipnz
 24371  05A1  022B               	subwf	?___lwmod,w
 24372  05A2  1803               	skipnc
 24373  05A3  2DB6               	goto	l9726
 24374                           
 24375                           ;slot_task.c: 162: memset(data->slot_print_buf, 0x20, 4);
 24376  05A4  0865               	movf	slot_Main@data,w
 24377  05A5  3E0B               	addlw	11
 24378  05A6  00F1               	movwf	memset@p1
 24379  05A7  3000               	movlw	0
 24380  05A8  3D66               	addwfc	slot_Main@data+1,w
 24381  05A9  00F2               	movwf	memset@p1+1
 24382  05AA  3020               	movlw	32
 24383  05AB  00F3               	movwf	memset@c
 24384  05AC  3000               	movlw	0
 24385  05AD  00F4               	movwf	memset@c+1
 24386  05AE  3004               	movlw	4
 24387  05AF  00F5               	movwf	memset@n
 24388  05B0  3000               	movlw	0
 24389  05B1  00F6               	movwf	memset@n+1
 24390  05B2  31B5  25EE  3180   	fcall	_memset
 24391                           
 24392                           ;slot_task.c: 163: }
 24393  05B5  2DCD               	goto	l1435
 24394  05B6                     l9726:	
 24395                           
 24396                           ;slot_task.c: 164: else {
 24397                           ;slot_task.c: 165: sprintf(data->slot_print_buf, "%s", Shot_Options_Long[Shot_Index]);
 24398  05B6  0020               	movlb	0	; select bank0
 24399  05B7  0865               	movf	slot_Main@data,w
 24400  05B8  3E0B               	addlw	11
 24401  05B9  00AF               	movwf	sprintf@sp
 24402  05BA  3000               	movlw	0
 24403  05BB  3D66               	addwfc	slot_Main@data+1,w
 24404  05BC  00B0               	movwf	sprintf@sp+1
 24405  05BD  30A5               	movlw	low (STR_69| (0+32768))
 24406  05BE  00B1               	movwf	sprintf@f
 24407  05BF  30BB               	movlw	high (STR_69| (0+32768))
 24408  05C0  00B2               	movwf	sprintf@f+1
 24409  05C1  357C               	lslf	_Shot_Index,w
 24410  05C2  3EDE               	addlw	(low (_Shot_Options_Long| (0+512)))& (0+255)
 24411  05C3  0086               	movwf	6
 24412  05C4  3002               	movlw	2	; select bank5/6
 24413  05C5  0087               	movwf	7
 24414  05C6  3F40               	moviw [0]fsr1
 24415  05C7  00B3               	movwf	low ((?_sprintf| 0+4))
 24416  05C8  3F41               	moviw [1]fsr1
 24417  05C9  00B4               	movwf	(low ((?_sprintf| 0+4))+1)
 24418  05CA  319A  225F  3180   	fcall	_sprintf
 24419  05CD                     l1435:	
 24420                           
 24421                           ;slot_task.c: 166: }
 24422                           ;slot_task.c: 168: marquee_speedy(data->slot_print_buf, data->displayTickCount, 20);
 24423  05CD  0020               	movlb	0	; select bank0
 24424  05CE  0865               	movf	slot_Main@data,w
 24425  05CF  3E0B               	addlw	11
 24426  05D0  00BA               	movwf	marquee_speedy@string
 24427  05D1  3000               	movlw	0
 24428  05D2  3D66               	addwfc	slot_Main@data+1,w
 24429  05D3  00BB               	movwf	marquee_speedy@string+1
 24430  05D4  0865               	movf	slot_Main@data,w
 24431  05D5  0086               	movwf	6
 24432  05D6  0866               	movf	slot_Main@data+1,w
 24433  05D7  0087               	movwf	7
 24434  05D8  3143               	addfsr 1,3
 24435  05D9  3F40               	moviw [0]fsr1
 24436  05DA  00BC               	movwf	marquee_speedy@count
 24437  05DB  3F41               	moviw [1]fsr1
 24438  05DC  00BD               	movwf	marquee_speedy@count+1
 24439  05DD  3014               	movlw	20
 24440  05DE  00BE               	movwf	marquee_speedy@multiplier
 24441  05DF  3000               	movlw	0
 24442  05E0  00BF               	movwf	marquee_speedy@multiplier+1
 24443  05E1  31A2  2202  3180   	fcall	_marquee_speedy
 24444                           
 24445                           ;slot_task.c: 169: if (data->displayTickCount == 500 + (50 * 10)) {
 24446  05E4  0020               	movlb	0	; select bank0
 24447  05E5  0865               	movf	slot_Main@data,w
 24448  05E6  0086               	movwf	6
 24449  05E7  0866               	movf	slot_Main@data+1,w
 24450  05E8  0087               	movwf	7
 24451  05E9  3143               	addfsr 1,3
 24452  05EA  0016               	moviw fsr1++
 24453  05EB  3AE8               	xorlw	232
 24454  05EC  00D4               	movwf	??_slot_Main
 24455  05ED  0016               	moviw fsr1++
 24456  05EE  3A03               	xorlw	3
 24457  05EF  04D4               	iorwf	??_slot_Main,f
 24458  05F0  1D03               	btfss	3,2
 24459  05F1  2E27               	goto	l9742
 24460                           
 24461                           ;slot_task.c: 170: currentTask = MENU_TASK;
 24462  05F2  0021               	movlb	1	; select bank1
 24463  05F3  01BA               	clrf	_currentTask^(0+128)
 24464  05F4  01BB               	clrf	(_currentTask+1)^(0+128)
 24465                           
 24466                           ;slot_task.c: 173: slot_Setup(slot_taskData);
 24467  05F5  083D               	movf	(_slot_taskData+1)^(0+128),w
 24468  05F6  0020               	movlb	0	; select bank0
 24469  05F7  00B0               	movwf	slot_Setup@taskData+1
 24470  05F8  0021               	movlb	1	; select bank1
 24471  05F9  083C               	movf	_slot_taskData^(0+128),w
 24472  05FA  0020               	movlb	0	; select bank0
 24473  05FB  00AF               	movwf	slot_Setup@taskData
 24474  05FC  31AD  25D5         	fcall	_slot_Setup
 24475                           
 24476                           ;slot_task.c: 176: data->holdCountA = 1;
 24477  05FE  0020               	movlb	0	; select bank0
 24478  05FF  0865               	movf	slot_Main@data,w
 24479  0600  0086               	movwf	6
 24480  0601  0866               	movf	slot_Main@data+1,w
 24481  0602  0087               	movwf	7
 24482  0603  315F               	addfsr 1,31
 24483  0604  3001               	movlw	1
 24484  0605  3FC0               	movwi [0]fsr1
 24485  0606  3000               	movlw	0
 24486  0607  3FC1               	movwi [1]fsr1
 24487                           
 24488                           ;slot_task.c: 177: data->holdCountB = 1;
 24489  0608  0865               	movf	slot_Main@data,w
 24490  0609  3E21               	addlw	33
 24491  060A  0086               	movwf	6
 24492  060B  3000               	movlw	0
 24493  060C  3D66               	addwfc	slot_Main@data+1,w
 24494  060D  0087               	movwf	7
 24495  060E  3001               	movlw	1
 24496  060F  3FC0               	movwi [0]fsr1
 24497  0610  3000               	movlw	0
 24498  0611  3FC1               	movwi [1]fsr1
 24499                           
 24500                           ;slot_task.c: 178: data->holdCountX = 1;
 24501  0612  0865               	movf	slot_Main@data,w
 24502  0613  3E23               	addlw	35
 24503  0614  0086               	movwf	6
 24504  0615  3000               	movlw	0
 24505  0616  3D66               	addwfc	slot_Main@data+1,w
 24506  0617  0087               	movwf	7
 24507  0618  3001               	movlw	1
 24508  0619  3FC0               	movwi [0]fsr1
 24509  061A  3000               	movlw	0
 24510  061B  3FC1               	movwi [1]fsr1
 24511                           
 24512                           ;slot_task.c: 179: data->holdCountY = 1;
 24513  061C  0865               	movf	slot_Main@data,w
 24514  061D  3E25               	addlw	37
 24515  061E  0086               	movwf	6
 24516  061F  3000               	movlw	0
 24517  0620  3D66               	addwfc	slot_Main@data+1,w
 24518  0621  0087               	movwf	7
 24519  0622  3001               	movlw	1
 24520  0623  3FC0               	movwi [0]fsr1
 24521  0624  3000               	movlw	0
 24522  0625  3FC1               	movwi [1]fsr1
 24523                           
 24524                           ;slot_task.c: 180: break;
 24525  0626  0008               	return
 24526  0627                     l9742:	
 24527                           
 24528                           ;slot_task.c: 181: }
 24529                           ;slot_task.c: 182: }
 24530                           ;slot_task.c: 184: data->displayTickCount += 1;
 24531  0627  0020               	movlb	0	; select bank0
 24532  0628  0865               	movf	slot_Main@data,w
 24533  0629  0086               	movwf	6
 24534  062A  0866               	movf	slot_Main@data+1,w
 24535  062B  0087               	movwf	7
 24536  062C  3143               	addfsr 1,3
 24537  062D  3001               	movlw	1
 24538  062E  0781               	addwf	1,f
 24539  062F  3141               	addfsr 1,1
 24540  0630  1803               	skipnc
 24541  0631  0A81               	incf	1,f
 24542                           
 24543                           ;slot_task.c: 185: data->holdCountA = 0;
 24544  0632  0865               	movf	slot_Main@data,w
 24545  0633  0086               	movwf	6
 24546  0634  0866               	movf	slot_Main@data+1,w
 24547  0635  0087               	movwf	7
 24548  0636  315F               	addfsr 1,31
 24549  0637  3000               	movlw	0
 24550  0638  3FC0               	movwi [0]fsr1
 24551  0639  3FC1               	movwi [1]fsr1
 24552                           
 24553                           ;slot_task.c: 186: data->holdCountB = 0;
 24554  063A  0865               	movf	slot_Main@data,w
 24555  063B  3E21               	addlw	33
 24556  063C  0086               	movwf	6
 24557  063D  3000               	movlw	0
 24558  063E  3D66               	addwfc	slot_Main@data+1,w
 24559  063F  0087               	movwf	7
 24560  0640  3000               	movlw	0
 24561  0641  3FC0               	movwi [0]fsr1
 24562  0642  3FC1               	movwi [1]fsr1
 24563                           
 24564                           ;slot_task.c: 187: data->holdCountX = 0;
 24565  0643  0865               	movf	slot_Main@data,w
 24566  0644  3E23               	addlw	35
 24567  0645  0086               	movwf	6
 24568  0646  3000               	movlw	0
 24569  0647  3D66               	addwfc	slot_Main@data+1,w
 24570  0648  0087               	movwf	7
 24571  0649  3000               	movlw	0
 24572  064A  3FC0               	movwi [0]fsr1
 24573  064B  3FC1               	movwi [1]fsr1
 24574                           
 24575                           ;slot_task.c: 188: data->holdCountY = 0;
 24576  064C  0865               	movf	slot_Main@data,w
 24577  064D  3E25               	addlw	37
 24578  064E  0086               	movwf	6
 24579  064F  3000               	movlw	0
 24580  0650  3D66               	addwfc	slot_Main@data+1,w
 24581  0651  0087               	movwf	7
 24582  0652  3000               	movlw	0
 24583  0653  3FC0               	movwi [0]fsr1
 24584  0654  3FC1               	movwi [1]fsr1
 24585                           
 24586                           ;slot_task.c: 189: data->noholdCount += 1;
 24587  0655  0865               	movf	slot_Main@data,w
 24588  0656  3E27               	addlw	39
 24589  0657  0086               	movwf	6
 24590  0658  3000               	movlw	0
 24591  0659  3D66               	addwfc	slot_Main@data+1,w
 24592  065A  0087               	movwf	7
 24593  065B  3001               	movlw	1
 24594  065C  0781               	addwf	1,f
 24595  065D  3141               	addfsr 1,1
 24596  065E  1803               	skipnc
 24597  065F  0A81               	incf	1,f
 24598                           
 24599                           ;slot_task.c: 190: }
 24600  0660  0008               	return
 24601  0661                     __end_of_slot_Main:	
 24602                           
 24603                           	psect	text20
 24604  2BD0                     __ptext20:	
 24605 ;; *************** function _slot_Running_Animation *****************
 24606 ;; Defined at:
 24607 ;;		line 64 in file "slot_task.c"
 24608 ;; Parameters:    Size  Location     Type
 24609 ;;  taskData        2   18[BANK0 ] PTR void 
 24610 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24611 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24612 ;; Auto vars:     Size  Location     Type
 24613 ;;  data            2   22[BANK0 ] PTR struct t_slot_taskDa
 24614 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24615 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24616 ;; Return value:  Size  Location     Type
 24617 ;;                  1    wreg      void 
 24618 ;; Registers used:
 24619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24620 ;; Tracked objects:
 24621 ;;		On entry : 0/0
 24622 ;;		On exit  : 0/0
 24623 ;;		Unchanged: 0/0
 24624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24625 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24626 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24627 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24628 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24629 ;;Total ram usage:        6 bytes
 24630 ;; Hardware stack levels used:    1
 24631 ;; Hardware stack levels required when called:   10
 24632 ;; This function calls:
 24633 ;;		_led_circle
 24634 ;; This function is called by:
 24635 ;;		_slot_Main
 24636 ;; This function uses a non-reentrant model
 24637 ;;
 24638                           
 24639                           
 24640                           ;psect for function _slot_Running_Animation
 24641  2BD0                     _slot_Running_Animation:	
 24642                           
 24643                           ;slot_task.c: 65: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 24644                           
 24645                           ;incstack = 0
 24646                           ; Regs used in _slot_Running_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 24647  2BD0  0020               	movlb	0	; select bank0
 24648  2BD1  0833               	movf	slot_Running_Animation@taskData+1,w
 24649  2BD2  00B7               	movwf	slot_Running_Animation@data+1
 24650  2BD3  0832               	movf	slot_Running_Animation@taskData,w
 24651  2BD4  00B6               	movwf	slot_Running_Animation@data
 24652                           
 24653                           ;slot_task.c: 66: if (data->delayTickCount ==0 ){
 24654  2BD5  0836               	movf	slot_Running_Animation@data,w
 24655  2BD6  0086               	movwf	6
 24656  2BD7  0837               	movf	slot_Running_Animation@data+1,w
 24657  2BD8  0087               	movwf	7
 24658  2BD9  3145               	addfsr 1,5
 24659  2BDA  0016               	moviw fsr1++
 24660  2BDB  0401               	iorwf	1,w
 24661  2BDC  1D03               	btfss	3,2
 24662  2BDD  2C0A               	goto	l8688
 24663                           
 24664                           ;slot_task.c: 67: if (Leds_idx == 1024 ){
 24665  2BDE  3004               	movlw	4
 24666  2BDF  0021               	movlb	1	; select bank1
 24667  2BE0  0658               	xorwf	(_Leds_idx+1)^(0+128),w
 24668  2BE1  0457               	iorwf	_Leds_idx^(0+128),w
 24669  2BE2  1D03               	btfss	3,2
 24670  2BE3  2BE8               	goto	l8680
 24671                           
 24672                           ;slot_task.c: 68: Leds_idx = Leds_idx << 1;
 24673  2BE4  3557               	lslf	_Leds_idx^(0+128),w
 24674  2BE5  00D7               	movwf	_Leds_idx^(0+128)
 24675  2BE6  0D58               	rlf	(_Leds_idx+1)^(0+128),w
 24676  2BE7  00D8               	movwf	(_Leds_idx+1)^(0+128)
 24677  2BE8                     l8680:	
 24678                           
 24679                           ;slot_task.c: 69: }
 24680                           ;slot_task.c: 70: led_circle(Leds_idx);
 24681  2BE8  0858               	movf	(_Leds_idx+1)^(0+128),w
 24682  2BE9  0020               	movlb	0	; select bank0
 24683  2BEA  00B1               	movwf	led_circle@count+1
 24684  2BEB  0021               	movlb	1	; select bank1
 24685  2BEC  0857               	movf	_Leds_idx^(0+128),w
 24686  2BED  0020               	movlb	0	; select bank0
 24687  2BEE  00B0               	movwf	led_circle@count
 24688  2BEF  31B4  241D  31AB   	fcall	_led_circle
 24689                           
 24690                           ;slot_task.c: 71: if (Leds_idx < 1 ){
 24691  2BF2  0021               	movlb	1	; select bank1
 24692  2BF3  0857               	movf	_Leds_idx^(0+128),w
 24693  2BF4  0458               	iorwf	(_Leds_idx+1)^(0+128),w
 24694  2BF5  1D03               	btfss	3,2
 24695  2BF6  2BFB               	goto	l1405
 24696                           
 24697                           ;slot_task.c: 72: Leds_idx = 1;
 24698  2BF7  3001               	movlw	1
 24699  2BF8  00D7               	movwf	_Leds_idx^(0+128)
 24700  2BF9  3000               	movlw	0
 24701  2BFA  00D8               	movwf	(_Leds_idx^(0+128)+1)
 24702  2BFB                     l1405:	
 24703                           
 24704                           ;slot_task.c: 73: }
 24705                           ;slot_task.c: 74: Leds_idx = Leds_idx << 1;
 24706  2BFB  3557               	lslf	_Leds_idx^(0+128),w
 24707  2BFC  00D7               	movwf	_Leds_idx^(0+128)
 24708  2BFD  0D58               	rlf	(_Leds_idx+1)^(0+128),w
 24709  2BFE  00D8               	movwf	(_Leds_idx+1)^(0+128)
 24710                           
 24711                           ;slot_task.c: 76: data->delayTickCount = 10;
 24712  2BFF  0020               	movlb	0	; select bank0
 24713  2C00  0836               	movf	slot_Running_Animation@data,w
 24714  2C01  0086               	movwf	6
 24715  2C02  0837               	movf	slot_Running_Animation@data+1,w
 24716  2C03  0087               	movwf	7
 24717  2C04  3145               	addfsr 1,5
 24718  2C05  300A               	movlw	10
 24719  2C06  3FC0               	movwi [0]fsr1
 24720  2C07  3000               	movlw	0
 24721  2C08  3FC1               	movwi [1]fsr1
 24722                           
 24723                           ;slot_task.c: 77: }
 24724  2C09  0008               	return
 24725  2C0A                     l8688:	
 24726                           
 24727                           ;slot_task.c: 78: else {
 24728                           ;slot_task.c: 79: data->delayTickCount -= 1;
 24729  2C0A  0836               	movf	slot_Running_Animation@data,w
 24730  2C0B  0086               	movwf	6
 24731  2C0C  0837               	movf	slot_Running_Animation@data+1,w
 24732  2C0D  0087               	movwf	7
 24733  2C0E  3145               	addfsr 1,5
 24734  2C0F  3001               	movlw	1
 24735  2C10  0281               	subwf	1,f
 24736  2C11  3141               	addfsr 1,1
 24737  2C12  3000               	movlw	0
 24738  2C13  3B81               	subwfb	1,f
 24739  2C14  317F               	addfsr 1,-1
 24740  2C15  0008               	return
 24741  2C16                     __end_of_slot_Running_Animation:	
 24742                           
 24743                           	psect	text21
 24744  1001                     __ptext21:	
 24745 ;; *************** function _slot_Finished_Animation *****************
 24746 ;; Defined at:
 24747 ;;		line 84 in file "slot_task.c"
 24748 ;; Parameters:    Size  Location     Type
 24749 ;;  taskData        2   29[BANK0 ] PTR void 
 24750 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24751 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24752 ;; Auto vars:     Size  Location     Type
 24753 ;;  data            2   33[BANK0 ] PTR struct t_slot_taskDa
 24754 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24755 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24756 ;; Return value:  Size  Location     Type
 24757 ;;                  1    wreg      void 
 24758 ;; Registers used:
 24759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24760 ;; Tracked objects:
 24761 ;;		On entry : 0/0
 24762 ;;		On exit  : 0/0
 24763 ;;		Unchanged: 0/0
 24764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24765 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24766 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24767 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24768 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24769 ;;Total ram usage:        6 bytes
 24770 ;; Hardware stack levels used:    1
 24771 ;; Hardware stack levels required when called:   10
 24772 ;; This function calls:
 24773 ;;		_led_rand
 24774 ;; This function is called by:
 24775 ;;		_slot_Main
 24776 ;; This function uses a non-reentrant model
 24777 ;;
 24778                           
 24779                           
 24780                           ;psect for function _slot_Finished_Animation
 24781  1001                     _slot_Finished_Animation:	
 24782                           
 24783                           ;slot_task.c: 85: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 24784                           
 24785                           ;incstack = 0
 24786                           ; Regs used in _slot_Finished_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 24787  1001  0020               	movlb	0	; select bank0
 24788  1002  083E               	movf	slot_Finished_Animation@taskData+1,w
 24789  1003  00C2               	movwf	slot_Finished_Animation@data+1
 24790  1004  083D               	movf	slot_Finished_Animation@taskData,w
 24791  1005  00C1               	movwf	slot_Finished_Animation@data
 24792                           
 24793                           ;slot_task.c: 86: if (data->delayTickCount < 1){
 24794  1006  0841               	movf	slot_Finished_Animation@data,w
 24795  1007  0086               	movwf	6
 24796  1008  0842               	movf	slot_Finished_Animation@data+1,w
 24797  1009  0087               	movwf	7
 24798  100A  3145               	addfsr 1,5
 24799  100B  0016               	moviw fsr1++
 24800  100C  0401               	iorwf	1,w
 24801  100D  1D03               	btfss	3,2
 24802  100E  281C               	goto	l8698
 24803                           
 24804                           ;slot_task.c: 87: led_rand();
 24805  100F  31AC  24A3         	fcall	_led_rand
 24806                           
 24807                           ;slot_task.c: 88: data->delayTickCount = 10;
 24808  1011  0020               	movlb	0	; select bank0
 24809  1012  0841               	movf	slot_Finished_Animation@data,w
 24810  1013  0086               	movwf	6
 24811  1014  0842               	movf	slot_Finished_Animation@data+1,w
 24812  1015  0087               	movwf	7
 24813  1016  3145               	addfsr 1,5
 24814  1017  300A               	movlw	10
 24815  1018  3FC0               	movwi [0]fsr1
 24816  1019  3000               	movlw	0
 24817  101A  3FC1               	movwi [1]fsr1
 24818                           
 24819                           ;slot_task.c: 89: }
 24820  101B  0008               	return
 24821  101C                     l8698:	
 24822                           
 24823                           ;slot_task.c: 90: else {
 24824                           ;slot_task.c: 91: data->delayTickCount -= 1;
 24825  101C  0841               	movf	slot_Finished_Animation@data,w
 24826  101D  0086               	movwf	6
 24827  101E  0842               	movf	slot_Finished_Animation@data+1,w
 24828  101F  0087               	movwf	7
 24829  1020  3145               	addfsr 1,5
 24830  1021  3001               	movlw	1
 24831  1022  0281               	subwf	1,f
 24832  1023  3141               	addfsr 1,1
 24833  1024  3000               	movlw	0
 24834  1025  3B81               	subwfb	1,f
 24835  1026  317F               	addfsr 1,-1
 24836  1027  0008               	return
 24837  1028                     __end_of_slot_Finished_Animation:	
 24838                           
 24839                           	psect	text22
 24840  2908                     __ptext22:	
 24841 ;; *************** function _secret_clear *****************
 24842 ;; Defined at:
 24843 ;;		line 178 in file "secret_task.c"
 24844 ;; Parameters:    Size  Location     Type
 24845 ;;  data            2    1[COMMON] PTR struct t_secret_task
 24846 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24847 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24848 ;; Auto vars:     Size  Location     Type
 24849 ;;		None
 24850 ;; Return value:  Size  Location     Type
 24851 ;;                  1    wreg      void 
 24852 ;; Registers used:
 24853 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 24854 ;; Tracked objects:
 24855 ;;		On entry : 0/0
 24856 ;;		On exit  : 0/0
 24857 ;;		Unchanged: 0/0
 24858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24859 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24862 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24863 ;;Total ram usage:        2 bytes
 24864 ;; Hardware stack levels used:    1
 24865 ;; Hardware stack levels required when called:    4
 24866 ;; This function calls:
 24867 ;;		Nothing
 24868 ;; This function is called by:
 24869 ;;		_secret_Main
 24870 ;; This function uses a non-reentrant model
 24871 ;;
 24872                           
 24873                           
 24874                           ;psect for function _secret_clear
 24875  2908                     _secret_clear:	
 24876                           
 24877                           ;secret_task.c: 180: data->delayTickCount = 300;
 24878                           
 24879                           ;incstack = 0
 24880                           ; Regs used in _secret_clear: [wreg+fsr1l+fsr1h+status,2+status,0]
 24881  2908  0871               	movf	secret_clear@data,w
 24882  2909  0086               	movwf	6
 24883  290A  0872               	movf	secret_clear@data+1,w
 24884  290B  0087               	movwf	7
 24885  290C  3142               	addfsr 1,2
 24886  290D  302C               	movlw	44
 24887  290E  3FC0               	movwi [0]fsr1
 24888  290F  3001               	movlw	1
 24889  2910  3FC1               	movwi [1]fsr1
 24890                           
 24891                           ;secret_task.c: 181: data->holdCountA = 0;
 24892  2911  0871               	movf	secret_clear@data,w
 24893  2912  0086               	movwf	6
 24894  2913  0872               	movf	secret_clear@data+1,w
 24895  2914  0087               	movwf	7
 24896  2915  3144               	addfsr 1,4
 24897  2916  3000               	movlw	0
 24898  2917  3FC0               	movwi [0]fsr1
 24899  2918  3FC1               	movwi [1]fsr1
 24900                           
 24901                           ;secret_task.c: 182: data->holdCountB = 0;
 24902  2919  0871               	movf	secret_clear@data,w
 24903  291A  0086               	movwf	6
 24904  291B  0872               	movf	secret_clear@data+1,w
 24905  291C  0087               	movwf	7
 24906  291D  3146               	addfsr 1,6
 24907  291E  3000               	movlw	0
 24908  291F  3FC0               	movwi [0]fsr1
 24909  2920  3FC1               	movwi [1]fsr1
 24910                           
 24911                           ;secret_task.c: 183: data->holdCountX = 0;
 24912  2921  0871               	movf	secret_clear@data,w
 24913  2922  0086               	movwf	6
 24914  2923  0872               	movf	secret_clear@data+1,w
 24915  2924  0087               	movwf	7
 24916  2925  3148               	addfsr 1,8
 24917  2926  3000               	movlw	0
 24918  2927  3FC0               	movwi [0]fsr1
 24919  2928  3FC1               	movwi [1]fsr1
 24920                           
 24921                           ;secret_task.c: 184: data->holdCountY = 0;
 24922  2929  0871               	movf	secret_clear@data,w
 24923  292A  0086               	movwf	6
 24924  292B  0872               	movf	secret_clear@data+1,w
 24925  292C  0087               	movwf	7
 24926  292D  314A               	addfsr 1,10
 24927  292E  3000               	movlw	0
 24928  292F  3FC0               	movwi [0]fsr1
 24929  2930  3FC1               	movwi [1]fsr1
 24930                           
 24931                           ;secret_task.c: 185: data->noholdCount = 0;
 24932  2931  0871               	movf	secret_clear@data,w
 24933  2932  0086               	movwf	6
 24934  2933  0872               	movf	secret_clear@data+1,w
 24935  2934  0087               	movwf	7
 24936  2935  314C               	addfsr 1,12
 24937  2936  3000               	movlw	0
 24938  2937  3FC0               	movwi [0]fsr1
 24939  2938  3FC1               	movwi [1]fsr1
 24940  2939  0008               	return
 24941  293A                     __end_of_secret_clear:	
 24942                           
 24943                           	psect	text23
 24944  1028                     __ptext23:	
 24945 ;; *************** function _secret_check *****************
 24946 ;; Defined at:
 24947 ;;		line 69 in file "secret_task.c"
 24948 ;; Parameters:    Size  Location     Type
 24949 ;;  data            2    7[COMMON] PTR struct t_secret_task
 24950 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24951 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24952 ;;  buttonPresse    1    9[COMMON] unsigned char 
 24953 ;; Auto vars:     Size  Location     Type
 24954 ;;  i               2    8[BANK0 ] unsigned int 
 24955 ;;  hit_counter     6    0        unsigned char [6]
 24956 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 24957 ;;  size            2    3[BANK0 ] unsigned int 
 24958 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 24959 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), 
 24960 ;; Return value:  Size  Location     Type
 24961 ;;                  1    wreg      unsigned char 
 24962 ;; Registers used:
 24963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24964 ;; Tracked objects:
 24965 ;;		On entry : 0/0
 24966 ;;		On exit  : 0/0
 24967 ;;		Unchanged: 0/0
 24968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24969 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24970 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24971 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24972 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24973 ;;Total ram usage:       13 bytes
 24974 ;; Hardware stack levels used:    1
 24975 ;; Hardware stack levels required when called:    5
 24976 ;; This function calls:
 24977 ;;		___bmul
 24978 ;;		_strlen
 24979 ;; This function is called by:
 24980 ;;		_secret_Main
 24981 ;; This function uses a non-reentrant model
 24982 ;;
 24983                           
 24984                           
 24985                           ;psect for function _secret_check
 24986  1028                     _secret_check:	
 24987                           
 24988                           ;secret_task.c: 70: u8 *inputs;
 24989                           ;secret_task.c: 71: u16 size = sizeof(secret_inputs) / sizeof(secret_inputs[0]);
 24990                           
 24991                           ;incstack = 0
 24992                           ; Regs used in _secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24993  1028  3001               	movlw	1
 24994  1029  0020               	movlb	0	; select bank0
 24995  102A  00A3               	movwf	secret_check@size
 24996  102B  3000               	movlw	0
 24997  102C  00A4               	movwf	secret_check@size+1
 24998                           
 24999                           ;secret_task.c: 72: u16 currents_size;
 25000                           ;secret_task.c: 73: char hit_counter[6];
 25001                           ;secret_task.c: 75: for (u16 i = 0; i < size; i++){
 25002  102D  01A8               	clrf	secret_check@i
 25003  102E  01A9               	clrf	secret_check@i+1
 25004  102F                     l8654:	
 25005  102F  0824               	movf	secret_check@size+1,w
 25006  1030  0229               	subwf	secret_check@i+1,w
 25007  1031  1D03               	skipz
 25008  1032  2835               	goto	u5315
 25009  1033  0823               	movf	secret_check@size,w
 25010  1034  0228               	subwf	secret_check@i,w
 25011  1035                     u5315:	
 25012  1035  1803               	btfsc	3,0
 25013  1036  28E1               	goto	l8656
 25014                           
 25015                           ;secret_task.c: 76: inputs = secret_inputs[i].inputs;
 25016  1037  3019               	movlw	25
 25017  1038  00A0               	movwf	??_secret_check
 25018  1039  0820               	movf	??_secret_check,w
 25019  103A  00F1               	movwf	___bmul@multiplicand
 25020  103B  0828               	movf	secret_check@i,w
 25021  103C  31B5  2524  3190   	fcall	___bmul
 25022  103F  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25023  1040  0020               	movlb	0	; select bank0
 25024  1041  00A1               	movwf	??_secret_check+1
 25025  1042  0821               	movf	??_secret_check+1,w
 25026  1043  00A7               	movwf	secret_check@inputs
 25027                           
 25028                           ;secret_task.c: 78: if (buttonPressed == inputs[secret_inputs[i].idx]){
 25029  1044  3019               	movlw	25
 25030  1045  00A0               	movwf	??_secret_check
 25031  1046  0820               	movf	??_secret_check,w
 25032  1047  00F1               	movwf	___bmul@multiplicand
 25033  1048  0828               	movf	secret_check@i,w
 25034  1049  31B5  2524  3190   	fcall	___bmul
 25035  104C  3E14               	addlw	20
 25036  104D  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25037  104E  0086               	movwf	6
 25038  104F  3002               	movlw	2	; select bank4/5
 25039  1050  0087               	movwf	7
 25040  1051  0801               	movf	1,w
 25041  1052  0020               	movlb	0	; select bank0
 25042  1053  0727               	addwf	secret_check@inputs,w
 25043  1054  00A1               	movwf	??_secret_check+1
 25044  1055  0821               	movf	??_secret_check+1,w
 25045  1056  0086               	movwf	6
 25046  1057  3002               	movlw	2	; select bank4/5
 25047  1058  0087               	movwf	7
 25048  1059  0801               	movf	1,w
 25049  105A  0679               	xorwf	secret_check@buttonPressed,w
 25050  105B  1D03               	skipz
 25051  105C  28CA               	goto	l8650
 25052                           
 25053                           ;secret_task.c: 79: currents_size = strlen((const char *)inputs);
 25054  105D  0827               	movf	secret_check@inputs,w
 25055  105E  00F1               	movwf	strlen@s
 25056  105F  3002               	movlw	2
 25057  1060  00F2               	movwf	strlen@s+1
 25058  1061  31B6  26AD  3190   	fcall	_strlen
 25059  1064  0872               	movf	?_strlen+1,w
 25060  1065  0020               	movlb	0	; select bank0
 25061  1066  00A6               	movwf	secret_check@currents_size+1
 25062  1067  0871               	movf	?_strlen,w
 25063  1068  00A5               	movwf	secret_check@currents_size
 25064                           
 25065                           ;secret_task.c: 80: secret_inputs[i].idx++;
 25066  1069  3019               	movlw	25
 25067  106A  00A0               	movwf	??_secret_check
 25068  106B  0820               	movf	??_secret_check,w
 25069  106C  00F1               	movwf	___bmul@multiplicand
 25070  106D  0828               	movf	secret_check@i,w
 25071  106E  31B5  2524  3190   	fcall	___bmul
 25072  1071  3E14               	addlw	20
 25073  1072  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25074  1073  0086               	movwf	6
 25075  1074  3002               	movlw	2	; select bank4/5
 25076  1075  0087               	movwf	7
 25077  1076  3001               	movlw	1
 25078  1077  0781               	addwf	1,f
 25079  1078  3141               	addfsr 1,1
 25080  1079  1803               	skipnc
 25081  107A  0A81               	incf	1,f
 25082                           
 25083                           ;secret_task.c: 82: if (secret_inputs[i].idx == currents_size) {
 25084  107B  3019               	movlw	25
 25085  107C  0020               	movlb	0	; select bank0
 25086  107D  00A0               	movwf	??_secret_check
 25087  107E  0820               	movf	??_secret_check,w
 25088  107F  00F1               	movwf	___bmul@multiplicand
 25089  1080  0828               	movf	secret_check@i,w
 25090  1081  31B5  2524  3190   	fcall	___bmul
 25091  1084  3E14               	addlw	20
 25092  1085  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25093  1086  0086               	movwf	6
 25094  1087  3002               	movlw	2	; select bank4/5
 25095  1088  0087               	movwf	7
 25096  1089  3F40               	moviw [0]fsr1
 25097  108A  0020               	movlb	0	; select bank0
 25098  108B  00A1               	movwf	??_secret_check+1
 25099  108C  3F41               	moviw [1]fsr1
 25100  108D  00A2               	movwf	??_secret_check+2
 25101  108E  0826               	movf	secret_check@currents_size+1,w
 25102  108F  0622               	xorwf	??_secret_check+2,w
 25103  1090  1D03               	skipz
 25104  1091  2894               	goto	u5305
 25105  1092  0825               	movf	secret_check@currents_size,w
 25106  1093  0621               	xorwf	??_secret_check+1,w
 25107  1094                     u5305:	
 25108  1094  1D03               	skipz
 25109  1095  28DB               	goto	l8652
 25110                           
 25111                           ;secret_task.c: 84: secret_inputs[i].idx = 0;
 25112  1096  3019               	movlw	25
 25113  1097  00A0               	movwf	??_secret_check
 25114  1098  0820               	movf	??_secret_check,w
 25115  1099  00F1               	movwf	___bmul@multiplicand
 25116  109A  0828               	movf	secret_check@i,w
 25117  109B  31B5  2524  3190   	fcall	___bmul
 25118  109E  3E14               	addlw	20
 25119  109F  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25120  10A0  0086               	movwf	6
 25121  10A1  3002               	movlw	2	; select bank4/5
 25122  10A2  0087               	movwf	7
 25123  10A3  3000               	movlw	0
 25124  10A4  3FC0               	movwi [0]fsr1
 25125  10A5  3FC1               	movwi [1]fsr1
 25126                           
 25127                           ;secret_task.c: 87: *(secret_inputs[i].variable) = (u16) secret_inputs[i].value;
 25128  10A6  3019               	movlw	25
 25129  10A7  0020               	movlb	0	; select bank0
 25130  10A8  00A0               	movwf	??_secret_check
 25131  10A9  0820               	movf	??_secret_check,w
 25132  10AA  00F1               	movwf	___bmul@multiplicand
 25133  10AB  0828               	movf	secret_check@i,w
 25134  10AC  31B5  2524  3190   	fcall	___bmul
 25135  10AF  3E17               	addlw	23
 25136  10B0  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25137  10B1  0086               	movwf	6
 25138  10B2  3002               	movlw	2	; select bank4/5
 25139  10B3  0087               	movwf	7
 25140  10B4  3019               	movlw	25
 25141  10B5  0020               	movlb	0	; select bank0
 25142  10B6  00A1               	movwf	??_secret_check+1
 25143  10B7  0821               	movf	??_secret_check+1,w
 25144  10B8  00F1               	movwf	___bmul@multiplicand
 25145  10B9  0828               	movf	secret_check@i,w
 25146  10BA  31B5  2524         	fcall	___bmul
 25147  10BC  3E16               	addlw	22
 25148  10BD  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25149  10BE  0084               	movwf	4
 25150  10BF  3002               	movlw	2	; select bank4/5
 25151  10C0  0085               	movwf	5
 25152  10C1  0800               	movf	0,w
 25153  10C2  0084               	movwf	4
 25154  10C3  0185               	clrf	5
 25155  10C4  3F40               	moviw [0]fsr1
 25156  10C5  3F80               	movwi [0]fsr0
 25157  10C6  3F41               	moviw [1]fsr1
 25158  10C7  3F81               	movwi [1]fsr0
 25159                           
 25160                           ;secret_task.c: 89: return 1;
 25161  10C8  3001               	movlw	1
 25162  10C9  0008               	return
 25163  10CA                     l8650:	
 25164                           ;secret_task.c: 90: }
 25165                           ;secret_task.c: 91: } else {
 25166                           
 25167                           
 25168                           ;secret_task.c: 93: secret_inputs[i].idx = 0;
 25169  10CA  3019               	movlw	25
 25170  10CB  0020               	movlb	0	; select bank0
 25171  10CC  00A0               	movwf	??_secret_check
 25172  10CD  0820               	movf	??_secret_check,w
 25173  10CE  00F1               	movwf	___bmul@multiplicand
 25174  10CF  0828               	movf	secret_check@i,w
 25175  10D0  31B5  2524  3190   	fcall	___bmul
 25176  10D3  3E14               	addlw	20
 25177  10D4  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25178  10D5  0086               	movwf	6
 25179  10D6  3002               	movlw	2	; select bank4/5
 25180  10D7  0087               	movwf	7
 25181  10D8  3000               	movlw	0
 25182  10D9  3FC0               	movwi [0]fsr1
 25183  10DA  3FC1               	movwi [1]fsr1
 25184  10DB                     l8652:	
 25185  10DB  3001               	movlw	1
 25186  10DC  0020               	movlb	0	; select bank0
 25187  10DD  07A8               	addwf	secret_check@i,f
 25188  10DE  3000               	movlw	0
 25189  10DF  3DA9               	addwfc	secret_check@i+1,f
 25190  10E0  282F               	goto	l8654
 25191  10E1                     l8656:	
 25192                           
 25193                           ;secret_task.c: 94: }
 25194                           ;secret_task.c: 95: }
 25195                           ;secret_task.c: 96: return 0;
 25196  10E1  3000               	movlw	0
 25197  10E2  0008               	return
 25198  10E3                     __end_of_secret_check:	
 25199                           
 25200                           	psect	text24
 25201  2CEB                     __ptext24:	
 25202 ;; *************** function _menu_run_option *****************
 25203 ;; Defined at:
 25204 ;;		line 185 in file "menu_task.c"
 25205 ;; Parameters:    Size  Location     Type
 25206 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 25207 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25208 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25209 ;; Auto vars:     Size  Location     Type
 25210 ;;		None
 25211 ;; Return value:  Size  Location     Type
 25212 ;;                  1    wreg      void 
 25213 ;; Registers used:
 25214 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25215 ;; Tracked objects:
 25216 ;;		On entry : 0/0
 25217 ;;		On exit  : 0/0
 25218 ;;		Unchanged: 0/0
 25219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25220 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25223 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25224 ;;Total ram usage:        2 bytes
 25225 ;; Hardware stack levels used:    1
 25226 ;; Hardware stack levels required when called:   11
 25227 ;; This function calls:
 25228 ;;		_menu_clear
 25229 ;; This function is called by:
 25230 ;;		_menu_Main
 25231 ;; This function uses a non-reentrant model
 25232 ;;
 25233                           
 25234                           
 25235                           ;psect for function _menu_run_option
 25236  2CEB                     _menu_run_option:	
 25237                           
 25238                           ;menu_task.c: 186: switch (menu_option_idx){
 25239                           
 25240                           ;incstack = 0
 25241                           ; Regs used in _menu_run_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25242  2CEB  2D20               	goto	l8442
 25243  2CEC                     l8424:	
 25244                           ;menu_task.c: 187: case 1:
 25245                           
 25246                           
 25247                           ;menu_task.c: 188: menu_clear(data);
 25248  2CEC  0020               	movlb	0	; select bank0
 25249  2CED  083C               	movf	menu_run_option@data+1,w
 25250  2CEE  00BA               	movwf	menu_clear@data+1
 25251  2CEF  083B               	movf	menu_run_option@data,w
 25252  2CF0  00B9               	movwf	menu_clear@data
 25253  2CF1  31AC  245C         	fcall	_menu_clear
 25254                           
 25255                           ;menu_task.c: 189: currentTask = SLOT_TASK;
 25256  2CF3  3001               	movlw	1
 25257  2CF4  0021               	movlb	1	; select bank1
 25258  2CF5  00BA               	movwf	_currentTask^(0+128)
 25259  2CF6  3000               	movlw	0
 25260  2CF7  00BB               	movwf	(_currentTask^(0+128)+1)
 25261                           
 25262                           ;menu_task.c: 190: break;
 25263  2CF8  0008               	return
 25264  2CF9                     l8428:	
 25265                           ;menu_task.c: 191: case 2:
 25266                           
 25267                           
 25268                           ;menu_task.c: 192: menu_clear(data);
 25269  2CF9  0020               	movlb	0	; select bank0
 25270  2CFA  083C               	movf	menu_run_option@data+1,w
 25271  2CFB  00BA               	movwf	menu_clear@data+1
 25272  2CFC  083B               	movf	menu_run_option@data,w
 25273  2CFD  00B9               	movwf	menu_clear@data
 25274  2CFE  31AC  245C         	fcall	_menu_clear
 25275                           
 25276                           ;menu_task.c: 193: currentTask = LOCKED_TASK;
 25277  2D00  3003               	movlw	3
 25278  2D01  0021               	movlb	1	; select bank1
 25279  2D02  00BA               	movwf	_currentTask^(0+128)
 25280  2D03  3000               	movlw	0
 25281  2D04  00BB               	movwf	(_currentTask^(0+128)+1)
 25282                           
 25283                           ;menu_task.c: 194: break;
 25284  2D05  0008               	return
 25285  2D06                     l8432:	
 25286                           ;menu_task.c: 195: case 4:
 25287                           
 25288                           
 25289                           ;menu_task.c: 196: menu_clear(data);
 25290  2D06  0020               	movlb	0	; select bank0
 25291  2D07  083C               	movf	menu_run_option@data+1,w
 25292  2D08  00BA               	movwf	menu_clear@data+1
 25293  2D09  083B               	movf	menu_run_option@data,w
 25294  2D0A  00B9               	movwf	menu_clear@data
 25295  2D0B  31AC  245C         	fcall	_menu_clear
 25296                           
 25297                           ;menu_task.c: 197: currentTask = FLASHY_TASK;
 25298  2D0D  3002               	movlw	2
 25299  2D0E  0021               	movlb	1	; select bank1
 25300  2D0F  00BA               	movwf	_currentTask^(0+128)
 25301  2D10  3000               	movlw	0
 25302  2D11  00BB               	movwf	(_currentTask^(0+128)+1)
 25303                           
 25304                           ;menu_task.c: 198: break;
 25305  2D12  0008               	return
 25306  2D13                     l8436:	
 25307                           ;menu_task.c: 199: case 3:
 25308                           
 25309                           
 25310                           ;menu_task.c: 200: menu_clear(data);
 25311  2D13  0020               	movlb	0	; select bank0
 25312  2D14  083C               	movf	menu_run_option@data+1,w
 25313  2D15  00BA               	movwf	menu_clear@data+1
 25314  2D16  083B               	movf	menu_run_option@data,w
 25315  2D17  00B9               	movwf	menu_clear@data
 25316  2D18  31AC  245C         	fcall	_menu_clear
 25317                           
 25318                           ;menu_task.c: 201: currentTask = MATRIX_TASK;
 25319  2D1A  3004               	movlw	4
 25320  2D1B  0021               	movlb	1	; select bank1
 25321  2D1C  00BA               	movwf	_currentTask^(0+128)
 25322  2D1D  3000               	movlw	0
 25323  2D1E  00BB               	movwf	(_currentTask^(0+128)+1)
 25324                           
 25325                           ;menu_task.c: 203: }
 25326                           
 25327                           ;menu_task.c: 202: break;
 25328  2D1F  0008               	return
 25329  2D20                     l8442:	
 25330                           
 25331                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 25332                           ; Switch size 1, requested type "space"
 25333                           ; Number of cases is 1, Range of values is 0 to 0
 25334                           ; switch strategies available:
 25335                           ; Name         Instructions Cycles
 25336                           ; simple_byte            4     3 (average)
 25337                           ; direct_byte            8     6 (fixed)
 25338                           ; jumptable            260     6 (fixed)
 25339                           ;	Chosen strategy is simple_byte
 25340  2D20  0021               	movlb	1	; select bank1
 25341  2D21  0837               	movf	(_menu_option_idx+1)^(0+128),w
 25342  2D22  3A00               	xorlw	0	; case 0
 25343  2D23  1903               	skipnz
 25344  2D24  2D26               	goto	l10774
 25345  2D25  2D34               	goto	l1010
 25346  2D26                     l10774:	
 25347                           
 25348                           ; Switch size 1, requested type "space"
 25349                           ; Number of cases is 4, Range of values is 1 to 4
 25350                           ; switch strategies available:
 25351                           ; Name         Instructions Cycles
 25352                           ; simple_byte           13     7 (average)
 25353                           ; direct_byte           17     9 (fixed)
 25354                           ; jumptable            263     9 (fixed)
 25355                           ;	Chosen strategy is simple_byte
 25356  2D26  0836               	movf	_menu_option_idx^(0+128),w
 25357  2D27  3A01               	xorlw	1	; case 1
 25358  2D28  1903               	skipnz
 25359  2D29  2CEC               	goto	l8424
 25360  2D2A  3A03               	xorlw	3	; case 2
 25361  2D2B  1903               	skipnz
 25362  2D2C  2CF9               	goto	l8428
 25363  2D2D  3A01               	xorlw	1	; case 3
 25364  2D2E  1903               	skipnz
 25365  2D2F  2D13               	goto	l8436
 25366  2D30  3A07               	xorlw	7	; case 4
 25367  2D31  1903               	skipnz
 25368  2D32  2D06               	goto	l8432
 25369  2D33  2D34               	goto	l1010
 25370  2D34                     l1010:	
 25371  2D34  0008               	return
 25372  2D35                     __end_of_menu_run_option:	
 25373                           
 25374                           	psect	text25
 25375  2C5C                     __ptext25:	
 25376 ;; *************** function _menu_clear *****************
 25377 ;; Defined at:
 25378 ;;		line 206 in file "menu_task.c"
 25379 ;; Parameters:    Size  Location     Type
 25380 ;;  data            2   25[BANK0 ] PTR struct t_menu_taskDa
 25381 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25382 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25383 ;; Auto vars:     Size  Location     Type
 25384 ;;		None
 25385 ;; Return value:  Size  Location     Type
 25386 ;;                  1    wreg      void 
 25387 ;; Registers used:
 25388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25389 ;; Tracked objects:
 25390 ;;		On entry : 0/0
 25391 ;;		On exit  : 0/0
 25392 ;;		Unchanged: 0/0
 25393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25394 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25397 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25398 ;;Total ram usage:        2 bytes
 25399 ;; Hardware stack levels used:    1
 25400 ;; Hardware stack levels required when called:   10
 25401 ;; This function calls:
 25402 ;;		_nullifyBadge_segDisplayErase
 25403 ;;		_nullifyBadge_userLedsClr
 25404 ;; This function is called by:
 25405 ;;		_menu_Main
 25406 ;;		_menu_run_option
 25407 ;; This function uses a non-reentrant model
 25408 ;;
 25409                           
 25410                           
 25411                           ;psect for function _menu_clear
 25412  2C5C                     _menu_clear:	
 25413                           
 25414                           ;menu_task.c: 208: data->delayTickCount = 50;
 25415                           
 25416                           ;incstack = 0
 25417                           ; Regs used in _menu_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25418  2C5C  0020               	movlb	0	; select bank0
 25419  2C5D  0839               	movf	menu_clear@data,w
 25420  2C5E  0086               	movwf	6
 25421  2C5F  083A               	movf	menu_clear@data+1,w
 25422  2C60  0087               	movwf	7
 25423  2C61  3142               	addfsr 1,2
 25424  2C62  3032               	movlw	50
 25425  2C63  3FC0               	movwi [0]fsr1
 25426  2C64  3000               	movlw	0
 25427  2C65  3FC1               	movwi [1]fsr1
 25428                           
 25429                           ;menu_task.c: 209: data->holdCountA = 0;
 25430  2C66  0839               	movf	menu_clear@data,w
 25431  2C67  0086               	movwf	6
 25432  2C68  083A               	movf	menu_clear@data+1,w
 25433  2C69  0087               	movwf	7
 25434  2C6A  3144               	addfsr 1,4
 25435  2C6B  3000               	movlw	0
 25436  2C6C  3FC0               	movwi [0]fsr1
 25437  2C6D  3FC1               	movwi [1]fsr1
 25438                           
 25439                           ;menu_task.c: 210: data->holdCountB = 0;
 25440  2C6E  0839               	movf	menu_clear@data,w
 25441  2C6F  0086               	movwf	6
 25442  2C70  083A               	movf	menu_clear@data+1,w
 25443  2C71  0087               	movwf	7
 25444  2C72  3146               	addfsr 1,6
 25445  2C73  3000               	movlw	0
 25446  2C74  3FC0               	movwi [0]fsr1
 25447  2C75  3FC1               	movwi [1]fsr1
 25448                           
 25449                           ;menu_task.c: 211: data->holdCountX = 0;
 25450  2C76  0839               	movf	menu_clear@data,w
 25451  2C77  0086               	movwf	6
 25452  2C78  083A               	movf	menu_clear@data+1,w
 25453  2C79  0087               	movwf	7
 25454  2C7A  3148               	addfsr 1,8
 25455  2C7B  3000               	movlw	0
 25456  2C7C  3FC0               	movwi [0]fsr1
 25457  2C7D  3FC1               	movwi [1]fsr1
 25458                           
 25459                           ;menu_task.c: 212: data->holdCountY = 0;
 25460  2C7E  0839               	movf	menu_clear@data,w
 25461  2C7F  0086               	movwf	6
 25462  2C80  083A               	movf	menu_clear@data+1,w
 25463  2C81  0087               	movwf	7
 25464  2C82  314A               	addfsr 1,10
 25465  2C83  3000               	movlw	0
 25466  2C84  3FC0               	movwi [0]fsr1
 25467  2C85  3FC1               	movwi [1]fsr1
 25468                           
 25469                           ;menu_task.c: 213: data->noholdCount = 0;
 25470  2C86  0839               	movf	menu_clear@data,w
 25471  2C87  0086               	movwf	6
 25472  2C88  083A               	movf	menu_clear@data+1,w
 25473  2C89  0087               	movwf	7
 25474  2C8A  314C               	addfsr 1,12
 25475  2C8B  3000               	movlw	0
 25476  2C8C  3FC0               	movwi [0]fsr1
 25477  2C8D  3FC1               	movwi [1]fsr1
 25478                           
 25479                           ;menu_task.c: 215: menu_option_idx = 0;
 25480  2C8E  0021               	movlb	1	; select bank1
 25481  2C8F  01B6               	clrf	_menu_option_idx^(0+128)
 25482  2C90  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 25483                           
 25484                           ;menu_task.c: 218: nullifyBadge_userLedsClr(data->badge);
 25485  2C91  0020               	movlb	0	; select bank0
 25486  2C92  0839               	movf	menu_clear@data,w
 25487  2C93  0086               	movwf	6
 25488  2C94  083A               	movf	menu_clear@data+1,w
 25489  2C95  0087               	movwf	7
 25490  2C96  0801               	movf	1,w
 25491  2C97  3187  27FA  31AC   	fcall	_nullifyBadge_userLedsClr
 25492                           
 25493                           ;menu_task.c: 219: nullifyBadge_segDisplayErase(data->badge);
 25494  2C9A  0020               	movlb	0	; select bank0
 25495  2C9B  0839               	movf	menu_clear@data,w
 25496  2C9C  0086               	movwf	6
 25497  2C9D  083A               	movf	menu_clear@data+1,w
 25498  2C9E  0087               	movwf	7
 25499  2C9F  0801               	movf	1,w
 25500  2CA0  31B3  23FE         	fcall	_nullifyBadge_segDisplayErase
 25501  2CA2  0008               	return
 25502  2CA3                     __end_of_menu_clear:	
 25503                           
 25504                           	psect	text26
 25505  2ED9                     __ptext26:	
 25506 ;; *************** function _menu_display_option *****************
 25507 ;; Defined at:
 25508 ;;		line 166 in file "menu_task.c"
 25509 ;; Parameters:    Size  Location     Type
 25510 ;;  data            2   44[BANK0 ] PTR struct t_menu_taskDa
 25511 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25512 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25513 ;; Auto vars:     Size  Location     Type
 25514 ;;  led             2   48[BANK0 ] unsigned int 
 25515 ;;  size            2   46[BANK0 ] unsigned int 
 25516 ;; Return value:  Size  Location     Type
 25517 ;;                  1    wreg      void 
 25518 ;; Registers used:
 25519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25520 ;; Tracked objects:
 25521 ;;		On entry : 0/0
 25522 ;;		On exit  : 0/0
 25523 ;;		Unchanged: 0/0
 25524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25525 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25526 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25528 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25529 ;;Total ram usage:        6 bytes
 25530 ;; Hardware stack levels used:    1
 25531 ;; Hardware stack levels required when called:   10
 25532 ;; This function calls:
 25533 ;;		___lwmod
 25534 ;;		_marquee
 25535 ;;		_nullifyBadge_segDisplayForceUpdate
 25536 ;;		_nullifyBadge_segDisplayPutStr
 25537 ;;		_nullifyBadge_userLedsSet
 25538 ;; This function is called by:
 25539 ;;		_menu_Main
 25540 ;; This function uses a non-reentrant model
 25541 ;;
 25542                           
 25543                           
 25544                           ;psect for function _menu_display_option
 25545  2ED9                     _menu_display_option:	
 25546                           
 25547                           ;menu_task.c: 167: u16 size = sizeof(menu_options_leds)/sizeof(menu_options_leds[0]);
 25548                           
 25549                           ;incstack = 0
 25550                           ; Regs used in _menu_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25551  2ED9  3005               	movlw	5
 25552  2EDA  0020               	movlb	0	; select bank0
 25553  2EDB  00CE               	movwf	menu_display_option@size
 25554  2EDC  3000               	movlw	0
 25555  2EDD  00CF               	movwf	menu_display_option@size+1
 25556                           
 25557                           ;menu_task.c: 168: u16 led = menu_options_leds[menu_option_idx % size];
 25558  2EDE  084F               	movf	menu_display_option@size+1,w
 25559  2EDF  00AC               	movwf	___lwmod@divisor+1
 25560  2EE0  084E               	movf	menu_display_option@size,w
 25561  2EE1  00AB               	movwf	___lwmod@divisor
 25562  2EE2  0021               	movlb	1	; select bank1
 25563  2EE3  0837               	movf	(_menu_option_idx+1)^(0+128),w
 25564  2EE4  0020               	movlb	0	; select bank0
 25565  2EE5  00AE               	movwf	___lwmod@dividend+1
 25566  2EE6  0021               	movlb	1	; select bank1
 25567  2EE7  0836               	movf	_menu_option_idx^(0+128),w
 25568  2EE8  0020               	movlb	0	; select bank0
 25569  2EE9  00AD               	movwf	___lwmod@dividend
 25570  2EEA  31B7  27A4  31AE   	fcall	___lwmod
 25571  2EED  0020               	movlb	0	; select bank0
 25572  2EEE  082B               	movf	?___lwmod,w
 25573  2EEF  0709               	addwf	9,w
 25574  2EF0  3E20               	addlw	(low (_menu_options_leds| (0+512)))& (0+255)
 25575  2EF1  0086               	movwf	6
 25576  2EF2  3002               	movlw	2	; select bank4/5
 25577  2EF3  0087               	movwf	7
 25578  2EF4  3F40               	moviw [0]fsr1
 25579  2EF5  00D0               	movwf	menu_display_option@led
 25580  2EF6  3F41               	moviw [1]fsr1
 25581  2EF7  00D1               	movwf	menu_display_option@led+1
 25582                           
 25583                           ;menu_task.c: 174: nullifyBadge_userLedsSet(data->badge, led);
 25584  2EF8  0851               	movf	menu_display_option@led+1,w
 25585  2EF9  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 25586  2EFA  0850               	movf	menu_display_option@led,w
 25587  2EFB  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 25588  2EFC  084C               	movf	menu_display_option@data,w
 25589  2EFD  0086               	movwf	6
 25590  2EFE  084D               	movf	menu_display_option@data+1,w
 25591  2EFF  0087               	movwf	7
 25592  2F00  0801               	movf	1,w
 25593  2F01  31B5  2513  31AE   	fcall	_nullifyBadge_userLedsSet
 25594                           
 25595                           ;menu_task.c: 176: if (menu_option_idx == 0){
 25596  2F04  0021               	movlb	1	; select bank1
 25597  2F05  0836               	movf	_menu_option_idx^(0+128),w
 25598  2F06  0437               	iorwf	(_menu_option_idx+1)^(0+128),w
 25599  2F07  1D03               	btfss	3,2
 25600  2F08  2F24               	goto	l8420
 25601                           
 25602                           ;menu_task.c: 177: nullifyBadge_segDisplayPutStr(data->badge, menu_option[menu_option_id
      +                          x]);
 25603  2F09  3536               	lslf	_menu_option_idx^(0+128),w
 25604  2F0A  3E2A               	addlw	(low (_menu_option| (0+512)))& (0+255)
 25605  2F0B  0086               	movwf	6
 25606  2F0C  3002               	movlw	2	; select bank4/5
 25607  2F0D  0087               	movwf	7
 25608  2F0E  3F40               	moviw [0]fsr1
 25609  2F0F  0020               	movlb	0	; select bank0
 25610  2F10  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 25611  2F11  3F41               	moviw [1]fsr1
 25612  2F12  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 25613  2F13  084C               	movf	menu_display_option@data,w
 25614  2F14  0086               	movwf	6
 25615  2F15  084D               	movf	menu_display_option@data+1,w
 25616  2F16  0087               	movwf	7
 25617  2F17  0801               	movf	1,w
 25618  2F18  31B4  243A  31AE   	fcall	_nullifyBadge_segDisplayPutStr
 25619                           
 25620                           ;menu_task.c: 178: nullifyBadge_segDisplayForceUpdate(data->badge);
 25621  2F1B  0020               	movlb	0	; select bank0
 25622  2F1C  084C               	movf	menu_display_option@data,w
 25623  2F1D  0086               	movwf	6
 25624  2F1E  084D               	movf	menu_display_option@data+1,w
 25625  2F1F  0087               	movwf	7
 25626  2F20  0801               	movf	1,w
 25627  2F21  31B3  23F8         	fcall	_nullifyBadge_segDisplayForceUpdate
 25628                           
 25629                           ;menu_task.c: 179: }
 25630  2F23  0008               	return
 25631  2F24                     l8420:	
 25632                           
 25633                           ;menu_task.c: 180: else {
 25634                           ;menu_task.c: 181: marquee(menu_option[menu_option_idx], data->noholdCount);
 25635  2F24  0021               	movlb	1	; select bank1
 25636  2F25  3536               	lslf	_menu_option_idx^(0+128),w
 25637  2F26  3E2A               	addlw	(low (_menu_option| (0+512)))& (0+255)
 25638  2F27  0086               	movwf	6
 25639  2F28  3002               	movlw	2	; select bank4/5
 25640  2F29  0087               	movwf	7
 25641  2F2A  3F40               	moviw [0]fsr1
 25642  2F2B  0020               	movlb	0	; select bank0
 25643  2F2C  00BA               	movwf	marquee@string
 25644  2F2D  3F41               	moviw [1]fsr1
 25645  2F2E  00BB               	movwf	marquee@string+1
 25646  2F2F  084C               	movf	menu_display_option@data,w
 25647  2F30  0086               	movwf	6
 25648  2F31  084D               	movf	menu_display_option@data+1,w
 25649  2F32  0087               	movwf	7
 25650  2F33  314C               	addfsr 1,12
 25651  2F34  3F40               	moviw [0]fsr1
 25652  2F35  00BC               	movwf	marquee@count
 25653  2F36  3F41               	moviw [1]fsr1
 25654  2F37  00BD               	movwf	marquee@count+1
 25655  2F38  31A2  2275         	fcall	_marquee
 25656  2F3A  0008               	return
 25657  2F3B                     __end_of_menu_display_option:	
 25658                           
 25659                           	psect	text27
 25660  2488                     __ptext27:	
 25661 ;; *************** function _matrix_secret_check *****************
 25662 ;; Defined at:
 25663 ;;		line 93 in file "matrix_task.c"
 25664 ;; Parameters:    Size  Location     Type
 25665 ;;  data            2    7[COMMON] PTR struct t_matrix_task
 25666 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25667 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25668 ;;  buttonPresse    1    9[COMMON] unsigned char 
 25669 ;; Auto vars:     Size  Location     Type
 25670 ;;  i               2    8[BANK0 ] unsigned int 
 25671 ;;  hit_counter     6    0        unsigned char [6]
 25672 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 25673 ;;  size            2    3[BANK0 ] unsigned int 
 25674 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 25675 ;;		 -> matrix_secret_inputs.inputs(20), matrix_secret_inputs(25), 
 25676 ;; Return value:  Size  Location     Type
 25677 ;;                  1    wreg      unsigned char 
 25678 ;; Registers used:
 25679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25680 ;; Tracked objects:
 25681 ;;		On entry : 0/0
 25682 ;;		On exit  : 0/0
 25683 ;;		Unchanged: 0/0
 25684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25685 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25686 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25687 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25688 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25689 ;;Total ram usage:       13 bytes
 25690 ;; Hardware stack levels used:    1
 25691 ;; Hardware stack levels required when called:    5
 25692 ;; This function calls:
 25693 ;;		___bmul
 25694 ;;		_strlen
 25695 ;; This function is called by:
 25696 ;;		_matrix_Main
 25697 ;; This function uses a non-reentrant model
 25698 ;;
 25699                           
 25700                           
 25701                           ;psect for function _matrix_secret_check
 25702  2488                     _matrix_secret_check:	
 25703                           
 25704                           ;matrix_task.c: 94: u8 *inputs;
 25705                           ;matrix_task.c: 95: u16 size = sizeof(matrix_secret_inputs) / sizeof(matrix_secret_input
      +                          s[0]);
 25706                           
 25707                           ;incstack = 0
 25708                           ; Regs used in _matrix_secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25709  2488  3001               	movlw	1
 25710  2489  0020               	movlb	0	; select bank0
 25711  248A  00A3               	movwf	matrix_secret_check@size
 25712  248B  3000               	movlw	0
 25713  248C  00A4               	movwf	matrix_secret_check@size+1
 25714                           
 25715                           ;matrix_task.c: 96: u16 currents_size;
 25716                           ;matrix_task.c: 97: char hit_counter[6];
 25717                           ;matrix_task.c: 99: for (u16 i = 0; i < size; i++){
 25718  248D  01A8               	clrf	matrix_secret_check@i
 25719  248E  01A9               	clrf	matrix_secret_check@i+1
 25720  248F                     l8726:	
 25721  248F  0824               	movf	matrix_secret_check@size+1,w
 25722  2490  0229               	subwf	matrix_secret_check@i+1,w
 25723  2491  1D03               	skipz
 25724  2492  2C95               	goto	u5385
 25725  2493  0823               	movf	matrix_secret_check@size,w
 25726  2494  0228               	subwf	matrix_secret_check@i,w
 25727  2495                     u5385:	
 25728  2495  1803               	btfsc	3,0
 25729  2496  2D41               	goto	l8728
 25730                           
 25731                           ;matrix_task.c: 100: inputs = matrix_secret_inputs[i].inputs;
 25732  2497  3019               	movlw	25
 25733  2498  00A0               	movwf	??_matrix_secret_check
 25734  2499  0820               	movf	??_matrix_secret_check,w
 25735  249A  00F1               	movwf	___bmul@multiplicand
 25736  249B  0828               	movf	matrix_secret_check@i,w
 25737  249C  31B5  2524  31A4   	fcall	___bmul
 25738  249F  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25739  24A0  0020               	movlb	0	; select bank0
 25740  24A1  00A1               	movwf	??_matrix_secret_check+1
 25741  24A2  0821               	movf	??_matrix_secret_check+1,w
 25742  24A3  00A7               	movwf	matrix_secret_check@inputs
 25743                           
 25744                           ;matrix_task.c: 102: if (buttonPressed == inputs[matrix_secret_inputs[i].idx]){
 25745  24A4  3019               	movlw	25
 25746  24A5  00A0               	movwf	??_matrix_secret_check
 25747  24A6  0820               	movf	??_matrix_secret_check,w
 25748  24A7  00F1               	movwf	___bmul@multiplicand
 25749  24A8  0828               	movf	matrix_secret_check@i,w
 25750  24A9  31B5  2524  31A4   	fcall	___bmul
 25751  24AC  3E14               	addlw	20
 25752  24AD  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25753  24AE  0086               	movwf	6
 25754  24AF  3002               	movlw	2	; select bank4/5
 25755  24B0  0087               	movwf	7
 25756  24B1  0801               	movf	1,w
 25757  24B2  0020               	movlb	0	; select bank0
 25758  24B3  0727               	addwf	matrix_secret_check@inputs,w
 25759  24B4  00A1               	movwf	??_matrix_secret_check+1
 25760  24B5  0821               	movf	??_matrix_secret_check+1,w
 25761  24B6  0086               	movwf	6
 25762  24B7  3002               	movlw	2	; select bank4/5
 25763  24B8  0087               	movwf	7
 25764  24B9  0801               	movf	1,w
 25765  24BA  0679               	xorwf	matrix_secret_check@buttonPressed,w
 25766  24BB  1D03               	skipz
 25767  24BC  2D2A               	goto	l8722
 25768                           
 25769                           ;matrix_task.c: 103: currents_size = strlen((const char *)inputs);
 25770  24BD  0827               	movf	matrix_secret_check@inputs,w
 25771  24BE  00F1               	movwf	strlen@s
 25772  24BF  3002               	movlw	2
 25773  24C0  00F2               	movwf	strlen@s+1
 25774  24C1  31B6  26AD  31A4   	fcall	_strlen
 25775  24C4  0872               	movf	?_strlen+1,w
 25776  24C5  0020               	movlb	0	; select bank0
 25777  24C6  00A6               	movwf	matrix_secret_check@currents_size+1
 25778  24C7  0871               	movf	?_strlen,w
 25779  24C8  00A5               	movwf	matrix_secret_check@currents_size
 25780                           
 25781                           ;matrix_task.c: 104: matrix_secret_inputs[i].idx++;
 25782  24C9  3019               	movlw	25
 25783  24CA  00A0               	movwf	??_matrix_secret_check
 25784  24CB  0820               	movf	??_matrix_secret_check,w
 25785  24CC  00F1               	movwf	___bmul@multiplicand
 25786  24CD  0828               	movf	matrix_secret_check@i,w
 25787  24CE  31B5  2524  31A4   	fcall	___bmul
 25788  24D1  3E14               	addlw	20
 25789  24D2  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25790  24D3  0086               	movwf	6
 25791  24D4  3002               	movlw	2	; select bank4/5
 25792  24D5  0087               	movwf	7
 25793  24D6  3001               	movlw	1
 25794  24D7  0781               	addwf	1,f
 25795  24D8  3141               	addfsr 1,1
 25796  24D9  1803               	skipnc
 25797  24DA  0A81               	incf	1,f
 25798                           
 25799                           ;matrix_task.c: 106: if (matrix_secret_inputs[i].idx == currents_size) {
 25800  24DB  3019               	movlw	25
 25801  24DC  0020               	movlb	0	; select bank0
 25802  24DD  00A0               	movwf	??_matrix_secret_check
 25803  24DE  0820               	movf	??_matrix_secret_check,w
 25804  24DF  00F1               	movwf	___bmul@multiplicand
 25805  24E0  0828               	movf	matrix_secret_check@i,w
 25806  24E1  31B5  2524  31A4   	fcall	___bmul
 25807  24E4  3E14               	addlw	20
 25808  24E5  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25809  24E6  0086               	movwf	6
 25810  24E7  3002               	movlw	2	; select bank4/5
 25811  24E8  0087               	movwf	7
 25812  24E9  3F40               	moviw [0]fsr1
 25813  24EA  0020               	movlb	0	; select bank0
 25814  24EB  00A1               	movwf	??_matrix_secret_check+1
 25815  24EC  3F41               	moviw [1]fsr1
 25816  24ED  00A2               	movwf	??_matrix_secret_check+2
 25817  24EE  0826               	movf	matrix_secret_check@currents_size+1,w
 25818  24EF  0622               	xorwf	??_matrix_secret_check+2,w
 25819  24F0  1D03               	skipz
 25820  24F1  2CF4               	goto	u5375
 25821  24F2  0825               	movf	matrix_secret_check@currents_size,w
 25822  24F3  0621               	xorwf	??_matrix_secret_check+1,w
 25823  24F4                     u5375:	
 25824  24F4  1D03               	skipz
 25825  24F5  2D3B               	goto	l8724
 25826                           
 25827                           ;matrix_task.c: 108: matrix_secret_inputs[i].idx = 0;
 25828  24F6  3019               	movlw	25
 25829  24F7  00A0               	movwf	??_matrix_secret_check
 25830  24F8  0820               	movf	??_matrix_secret_check,w
 25831  24F9  00F1               	movwf	___bmul@multiplicand
 25832  24FA  0828               	movf	matrix_secret_check@i,w
 25833  24FB  31B5  2524  31A4   	fcall	___bmul
 25834  24FE  3E14               	addlw	20
 25835  24FF  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25836  2500  0086               	movwf	6
 25837  2501  3002               	movlw	2	; select bank4/5
 25838  2502  0087               	movwf	7
 25839  2503  3000               	movlw	0
 25840  2504  3FC0               	movwi [0]fsr1
 25841  2505  3FC1               	movwi [1]fsr1
 25842                           
 25843                           ;matrix_task.c: 111: *(matrix_secret_inputs[i].variable) = (u16) matrix_secret_inputs[i]
      +                          .value;
 25844  2506  3019               	movlw	25
 25845  2507  0020               	movlb	0	; select bank0
 25846  2508  00A0               	movwf	??_matrix_secret_check
 25847  2509  0820               	movf	??_matrix_secret_check,w
 25848  250A  00F1               	movwf	___bmul@multiplicand
 25849  250B  0828               	movf	matrix_secret_check@i,w
 25850  250C  31B5  2524  31A4   	fcall	___bmul
 25851  250F  3E17               	addlw	23
 25852  2510  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25853  2511  0086               	movwf	6
 25854  2512  3002               	movlw	2	; select bank4/5
 25855  2513  0087               	movwf	7
 25856  2514  3019               	movlw	25
 25857  2515  0020               	movlb	0	; select bank0
 25858  2516  00A1               	movwf	??_matrix_secret_check+1
 25859  2517  0821               	movf	??_matrix_secret_check+1,w
 25860  2518  00F1               	movwf	___bmul@multiplicand
 25861  2519  0828               	movf	matrix_secret_check@i,w
 25862  251A  31B5  2524         	fcall	___bmul
 25863  251C  3E16               	addlw	22
 25864  251D  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25865  251E  0084               	movwf	4
 25866  251F  3002               	movlw	2	; select bank4/5
 25867  2520  0085               	movwf	5
 25868  2521  0800               	movf	0,w
 25869  2522  0084               	movwf	4
 25870  2523  0185               	clrf	5
 25871  2524  3F40               	moviw [0]fsr1
 25872  2525  3F80               	movwi [0]fsr0
 25873  2526  3F41               	moviw [1]fsr1
 25874  2527  3F81               	movwi [1]fsr0
 25875                           
 25876                           ;matrix_task.c: 113: return 1;
 25877  2528  3001               	movlw	1
 25878  2529  0008               	return
 25879  252A                     l8722:	
 25880                           ;matrix_task.c: 114: }
 25881                           ;matrix_task.c: 115: } else {
 25882                           
 25883                           
 25884                           ;matrix_task.c: 117: matrix_secret_inputs[i].idx = 0;
 25885  252A  3019               	movlw	25
 25886  252B  0020               	movlb	0	; select bank0
 25887  252C  00A0               	movwf	??_matrix_secret_check
 25888  252D  0820               	movf	??_matrix_secret_check,w
 25889  252E  00F1               	movwf	___bmul@multiplicand
 25890  252F  0828               	movf	matrix_secret_check@i,w
 25891  2530  31B5  2524  31A4   	fcall	___bmul
 25892  2533  3E14               	addlw	20
 25893  2534  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25894  2535  0086               	movwf	6
 25895  2536  3002               	movlw	2	; select bank4/5
 25896  2537  0087               	movwf	7
 25897  2538  3000               	movlw	0
 25898  2539  3FC0               	movwi [0]fsr1
 25899  253A  3FC1               	movwi [1]fsr1
 25900  253B                     l8724:	
 25901  253B  3001               	movlw	1
 25902  253C  0020               	movlb	0	; select bank0
 25903  253D  07A8               	addwf	matrix_secret_check@i,f
 25904  253E  3000               	movlw	0
 25905  253F  3DA9               	addwfc	matrix_secret_check@i+1,f
 25906  2540  2C8F               	goto	l8726
 25907  2541                     l8728:	
 25908                           
 25909                           ;matrix_task.c: 118: }
 25910                           ;matrix_task.c: 119: }
 25911                           ;matrix_task.c: 120: return 0;
 25912  2541  3000               	movlw	0
 25913  2542  0008               	return
 25914  2543                     __end_of_matrix_secret_check:	
 25915                           
 25916                           	psect	text28
 25917  3524                     __ptext28:	
 25918 ;; *************** function ___bmul *****************
 25919 ;; Defined at:
 25920 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul8.c"
 25921 ;; Parameters:    Size  Location     Type
 25922 ;;  multiplier      1    wreg     unsigned char 
 25923 ;;  multiplicand    1    1[COMMON] unsigned char 
 25924 ;; Auto vars:     Size  Location     Type
 25925 ;;  multiplier      1    4[COMMON] unsigned char 
 25926 ;;  product         1    3[COMMON] unsigned char 
 25927 ;; Return value:  Size  Location     Type
 25928 ;;                  1    wreg      unsigned char 
 25929 ;; Registers used:
 25930 ;;		wreg, status,2, status,0
 25931 ;; Tracked objects:
 25932 ;;		On entry : 0/0
 25933 ;;		On exit  : 0/0
 25934 ;;		Unchanged: 0/0
 25935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25936 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25937 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25938 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25939 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25940 ;;Total ram usage:        4 bytes
 25941 ;; Hardware stack levels used:    1
 25942 ;; Hardware stack levels required when called:    4
 25943 ;; This function calls:
 25944 ;;		Nothing
 25945 ;; This function is called by:
 25946 ;;		_matrix_secret_check
 25947 ;;		_secret_check
 25948 ;; This function uses a non-reentrant model
 25949 ;;
 25950                           
 25951                           
 25952                           ;psect for function ___bmul
 25953  3524                     ___bmul:	
 25954                           
 25955                           ;incstack = 0
 25956                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 25957                           ;___bmul@multiplier stored from wreg
 25958  3524  00F4               	movwf	___bmul@multiplier
 25959  3525  01F3               	clrf	___bmul@product
 25960  3526                     l8314:	
 25961  3526  1C74               	btfss	___bmul@multiplier,0
 25962  3527  2D2C               	goto	l8318
 25963  3528  0871               	movf	___bmul@multiplicand,w
 25964  3529  00F2               	movwf	??___bmul
 25965  352A  0872               	movf	??___bmul,w
 25966  352B  07F3               	addwf	___bmul@product,f
 25967  352C                     l8318:	
 25968  352C  1003               	clrc
 25969  352D  0DF1               	rlf	___bmul@multiplicand,f
 25970  352E  1003               	clrc
 25971  352F  0CF4               	rrf	___bmul@multiplier,f
 25972  3530  0874               	movf	___bmul@multiplier,w
 25973  3531  1D03               	btfss	3,2
 25974  3532  2D26               	goto	l8314
 25975  3533  0873               	movf	___bmul@product,w
 25976  3534  0008               	return
 25977  3535                     __end_of___bmul:	
 25978                           
 25979                           	psect	text29
 25980  2191                     __ptext29:	
 25981 ;; *************** function _matrix_display_option *****************
 25982 ;; Defined at:
 25983 ;;		line 123 in file "matrix_task.c"
 25984 ;; Parameters:    Size  Location     Type
 25985 ;;  data            2   44[BANK0 ] PTR struct t_matrix_task
 25986 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25987 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25988 ;; Auto vars:     Size  Location     Type
 25989 ;;		None
 25990 ;; Return value:  Size  Location     Type
 25991 ;;                  1    wreg      void 
 25992 ;; Registers used:
 25993 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25994 ;; Tracked objects:
 25995 ;;		On entry : 0/0
 25996 ;;		On exit  : 0/0
 25997 ;;		Unchanged: 0/0
 25998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25999 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26001 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26002 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26003 ;;Total ram usage:        4 bytes
 26004 ;; Hardware stack levels used:    1
 26005 ;; Hardware stack levels required when called:   10
 26006 ;; This function calls:
 26007 ;;		_marquee_speedy
 26008 ;; This function is called by:
 26009 ;;		_matrix_Main
 26010 ;; This function uses a non-reentrant model
 26011 ;;
 26012                           
 26013                           
 26014                           ;psect for function _matrix_display_option
 26015  2191                     _matrix_display_option:	
 26016                           
 26017                           ;matrix_task.c: 125: if (data->display_state == MATRIX_DONE){
 26018                           
 26019                           ;incstack = 0
 26020                           ; Regs used in _matrix_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26021  2191  0020               	movlb	0	; select bank0
 26022  2192  084C               	movf	matrix_display_option@data,w
 26023  2193  0086               	movwf	6
 26024  2194  084D               	movf	matrix_display_option@data+1,w
 26025  2195  0087               	movwf	7
 26026  2196  3142               	addfsr 1,2
 26027  2197  300B               	movlw	11
 26028  2198  0601               	xorwf	1,w
 26029  2199  1D03               	btfss	3,2
 26030  219A  29AA               	goto	l8736
 26031                           
 26032                           ;matrix_task.c: 126: marquee_speedy("YOU STAY IN WONDERLAND    ", data->noholdCount, 15)
      +                          ;
 26033  219B  3030               	movlw	low (STR_80| (0+32768))
 26034  219C  00BA               	movwf	marquee_speedy@string
 26035  219D  30B9               	movlw	high (STR_80| (0+32768))
 26036  219E  00BB               	movwf	marquee_speedy@string+1
 26037  219F  084C               	movf	matrix_display_option@data,w
 26038  21A0  0086               	movwf	6
 26039  21A1  084D               	movf	matrix_display_option@data+1,w
 26040  21A2  0087               	movwf	7
 26041  21A3  315B               	addfsr 1,27
 26042  21A4  3F40               	moviw [0]fsr1
 26043  21A5  00BC               	movwf	marquee_speedy@count
 26044  21A6  3F41               	moviw [1]fsr1
 26045  21A7  00BD               	movwf	marquee_speedy@count+1
 26046  21A8  300F               	movlw	15
 26047  21A9  29DC               	goto	L13
 26048  21AA                     l8736:	
 26049                           ;matrix_task.c: 127: }
 26050                           
 26051                           
 26052                           ;matrix_task.c: 128: else if (data->display_state != MATRIX_STATE_DISPLAY ){
 26053  21AA  0020               	movlb	0	; select bank0
 26054  21AB  084C               	movf	matrix_display_option@data,w
 26055  21AC  0086               	movwf	6
 26056  21AD  084D               	movf	matrix_display_option@data+1,w
 26057  21AE  0087               	movwf	7
 26058  21AF  3142               	addfsr 1,2
 26059  21B0  300A               	movlw	10
 26060  21B1  0601               	xorwf	1,w
 26061  21B2  1903               	btfsc	3,2
 26062  21B3  29CD               	goto	l8740
 26063                           
 26064                           ;matrix_task.c: 130: marquee_speedy(matrix_option[data->display_state], data->noholdCoun
      +                          t, 20);
 26065  21B4  084C               	movf	matrix_display_option@data,w
 26066  21B5  0086               	movwf	6
 26067  21B6  084D               	movf	matrix_display_option@data+1,w
 26068  21B7  0087               	movwf	7
 26069  21B8  3142               	addfsr 1,2
 26070  21B9  3501               	lslf	1,w
 26071  21BA  3ECA               	addlw	(low (_matrix_option| (0+512)))& (0+255)
 26072  21BB  0086               	movwf	6
 26073  21BC  3002               	movlw	2	; select bank5/6
 26074  21BD  0087               	movwf	7
 26075  21BE  3F40               	moviw [0]fsr1
 26076  21BF  00BA               	movwf	marquee_speedy@string
 26077  21C0  3F41               	moviw [1]fsr1
 26078  21C1  00BB               	movwf	marquee_speedy@string+1
 26079  21C2  084C               	movf	matrix_display_option@data,w
 26080  21C3  0086               	movwf	6
 26081  21C4  084D               	movf	matrix_display_option@data+1,w
 26082  21C5  0087               	movwf	7
 26083  21C6  315B               	addfsr 1,27
 26084  21C7  3F40               	moviw [0]fsr1
 26085  21C8  00BC               	movwf	marquee_speedy@count
 26086  21C9  3F41               	moviw [1]fsr1
 26087  21CA  00BD               	movwf	marquee_speedy@count+1
 26088  21CB  3014               	movlw	20
 26089  21CC  29DC               	goto	L13
 26090  21CD                     l8740:	
 26091                           ;matrix_task.c: 131: }
 26092                           
 26093                           
 26094                           ;matrix_task.c: 132: else{
 26095                           ;matrix_task.c: 133: marquee_speedy("THE CHOICE IS YOURS   ", data->noholdCount, 30);
 26096  21CD  3080               	movlw	low (STR_81| (0+32768))
 26097  21CE  0020               	movlb	0	; select bank0
 26098  21CF  00BA               	movwf	marquee_speedy@string
 26099  21D0  30B9               	movlw	high (STR_81| (0+32768))
 26100  21D1  00BB               	movwf	marquee_speedy@string+1
 26101  21D2  084C               	movf	matrix_display_option@data,w
 26102  21D3  0086               	movwf	6
 26103  21D4  084D               	movf	matrix_display_option@data+1,w
 26104  21D5  0087               	movwf	7
 26105  21D6  315B               	addfsr 1,27
 26106  21D7  3F40               	moviw [0]fsr1
 26107  21D8  00BC               	movwf	marquee_speedy@count
 26108  21D9  3F41               	moviw [1]fsr1
 26109  21DA  00BD               	movwf	marquee_speedy@count+1
 26110  21DB  301E               	movlw	30
 26111  21DC                     L13:	
 26112  21DC  00BE               	movwf	marquee_speedy@multiplier
 26113  21DD  3000               	movlw	0
 26114  21DE  00BF               	movwf	marquee_speedy@multiplier+1
 26115  21DF  31A2  2202  31A1   	fcall	_marquee_speedy
 26116                           
 26117                           ;matrix_task.c: 134: }
 26118                           ;matrix_task.c: 136: if (data -> displayTickdown == 0 && data->display_state != MATRIX_D
      +                          ONE ){
 26119  21E2  0020               	movlb	0	; select bank0
 26120  21E3  084C               	movf	matrix_display_option@data,w
 26121  21E4  0086               	movwf	6
 26122  21E5  084D               	movf	matrix_display_option@data+1,w
 26123  21E6  0087               	movwf	7
 26124  21E7  3145               	addfsr 1,5
 26125  21E8  0016               	moviw fsr1++
 26126  21E9  0401               	iorwf	1,w
 26127  21EA  1D03               	btfss	3,2
 26128  21EB  0008               	return
 26129  21EC  084C               	movf	matrix_display_option@data,w
 26130  21ED  0086               	movwf	6
 26131  21EE  084D               	movf	matrix_display_option@data+1,w
 26132  21EF  0087               	movwf	7
 26133  21F0  3142               	addfsr 1,2
 26134  21F1  300B               	movlw	11
 26135  21F2  0601               	xorwf	1,w
 26136  21F3  1903               	btfsc	3,2
 26137  21F4  0008               	return
 26138                           
 26139                           ;matrix_task.c: 137: data->display_state = MATRIX_STATE_DISPLAY;
 26140  21F5  084C               	movf	matrix_display_option@data,w
 26141  21F6  3E02               	addlw	2
 26142  21F7  00CE               	movwf	??_matrix_display_option
 26143  21F8  3000               	movlw	0
 26144  21F9  3D4D               	addwfc	matrix_display_option@data+1,w
 26145  21FA  00CF               	movwf	??_matrix_display_option+1
 26146  21FB  084E               	movf	??_matrix_display_option,w
 26147  21FC  0086               	movwf	6
 26148  21FD  084F               	movf	??_matrix_display_option+1,w
 26149  21FE  0087               	movwf	7
 26150  21FF  300A               	movlw	10
 26151  2200  0081               	movwf	1
 26152  2201  0008               	return
 26153  2202                     __end_of_matrix_display_option:	
 26154                           
 26155                           	psect	text30
 26156  2DD5                     __ptext30:	
 26157 ;; *************** function _slot_Setup *****************
 26158 ;; Defined at:
 26159 ;;		line 48 in file "slot_task.c"
 26160 ;; Parameters:    Size  Location     Type
 26161 ;;  taskData        2   15[BANK0 ] PTR void 
 26162 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26163 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26164 ;; Auto vars:     Size  Location     Type
 26165 ;;  data            2   20[BANK0 ] PTR struct t_slot_taskDa
 26166 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26167 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26168 ;; Return value:  Size  Location     Type
 26169 ;;                  1    wreg      void 
 26170 ;; Registers used:
 26171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26172 ;; Tracked objects:
 26173 ;;		On entry : 0/0
 26174 ;;		On exit  : 0/0
 26175 ;;		Unchanged: 0/0
 26176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26177 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26179 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26180 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26181 ;;Total ram usage:        7 bytes
 26182 ;; Hardware stack levels used:    1
 26183 ;; Hardware stack levels required when called:    6
 26184 ;; This function calls:
 26185 ;;		___lwmod
 26186 ;;		_memset
 26187 ;;		_rand
 26188 ;; This function is called by:
 26189 ;;		_menu_Main
 26190 ;;		_locked_Main
 26191 ;;		_slot_Init
 26192 ;;		_slot_Main
 26193 ;; This function uses a non-reentrant model
 26194 ;;
 26195                           
 26196                           
 26197                           ;psect for function _slot_Setup
 26198  2DD5                     _slot_Setup:	
 26199                           
 26200                           ;slot_task.c: 49: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 26201                           
 26202                           ;incstack = 0
 26203                           ; Regs used in _slot_Setup: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 26204  2DD5  0020               	movlb	0	; select bank0
 26205  2DD6  0830               	movf	slot_Setup@taskData+1,w
 26206  2DD7  00B5               	movwf	slot_Setup@data+1
 26207  2DD8  082F               	movf	slot_Setup@taskData,w
 26208  2DD9  00B4               	movwf	slot_Setup@data
 26209                           
 26210                           ;slot_task.c: 50: slot_taskData = data;
 26211  2DDA  0835               	movf	slot_Setup@data+1,w
 26212  2DDB  0021               	movlb	1	; select bank1
 26213  2DDC  00BD               	movwf	(_slot_taskData+1)^(0+128)
 26214  2DDD  0020               	movlb	0	; select bank0
 26215  2DDE  0834               	movf	slot_Setup@data,w
 26216  2DDF  0021               	movlb	1	; select bank1
 26217  2DE0  00BC               	movwf	_slot_taskData^(0+128)
 26218                           
 26219                           ;slot_task.c: 51: data->displayTickCount = 0;
 26220  2DE1  0020               	movlb	0	; select bank0
 26221  2DE2  0834               	movf	slot_Setup@data,w
 26222  2DE3  0086               	movwf	6
 26223  2DE4  0835               	movf	slot_Setup@data+1,w
 26224  2DE5  0087               	movwf	7
 26225  2DE6  3143               	addfsr 1,3
 26226  2DE7  3000               	movlw	0
 26227  2DE8  3FC0               	movwi [0]fsr1
 26228  2DE9  3FC1               	movwi [1]fsr1
 26229                           
 26230                           ;slot_task.c: 52: data->delayTickCount = 0;
 26231  2DEA  0834               	movf	slot_Setup@data,w
 26232  2DEB  0086               	movwf	6
 26233  2DEC  0835               	movf	slot_Setup@data+1,w
 26234  2DED  0087               	movwf	7
 26235  2DEE  3145               	addfsr 1,5
 26236  2DEF  3000               	movlw	0
 26237  2DF0  3FC0               	movwi [0]fsr1
 26238  2DF1  3FC1               	movwi [1]fsr1
 26239                           
 26240                           ;slot_task.c: 53: memset(data->slot_print_buf, 0x00, 20);
 26241  2DF2  0834               	movf	slot_Setup@data,w
 26242  2DF3  3E0B               	addlw	11
 26243  2DF4  00F1               	movwf	memset@p1
 26244  2DF5  3000               	movlw	0
 26245  2DF6  3D35               	addwfc	slot_Setup@data+1,w
 26246  2DF7  00F2               	movwf	memset@p1+1
 26247  2DF8  3000               	movlw	0
 26248  2DF9  00F3               	movwf	memset@c
 26249  2DFA  00F4               	movwf	memset@c+1
 26250  2DFB  3014               	movlw	20
 26251  2DFC  00F5               	movwf	memset@n
 26252  2DFD  3000               	movlw	0
 26253  2DFE  00F6               	movwf	memset@n+1
 26254  2DFF  31B5  25EE  31AD   	fcall	_memset
 26255                           
 26256                           ;slot_task.c: 54: if (!badge_locked) {
 26257  2E02  0021               	movlb	1	; select bank1
 26258  2E03  0844               	movf	_badge_locked^(0+128),w
 26259  2E04  1D03               	btfss	3,2
 26260  2E05  2E1E               	goto	l8406
 26261                           
 26262                           ;slot_task.c: 55: Shot_Index = (u8)rand() % (sizeof(Shot_Options)/sizeof(Shot_Options[0]
      +                          ));
 26263  2E06  3009               	movlw	9
 26264  2E07  0020               	movlb	0	; select bank0
 26265  2E08  00AB               	movwf	___lwmod@divisor
 26266  2E09  3000               	movlw	0
 26267  2E0A  00AC               	movwf	___lwmod@divisor+1
 26268  2E0B  31AB  238D  31AD   	fcall	_rand
 26269  2E0E  0020               	movlb	0	; select bank0
 26270  2E0F  0824               	movf	?_rand,w
 26271  2E10  00B1               	movwf	??_slot_Setup
 26272  2E11  01B2               	clrf	??_slot_Setup+1
 26273  2E12  0831               	movf	??_slot_Setup,w
 26274  2E13  00AD               	movwf	___lwmod@dividend
 26275  2E14  0832               	movf	??_slot_Setup+1,w
 26276  2E15  00AE               	movwf	___lwmod@dividend+1
 26277  2E16  31B7  27A4  31AD   	fcall	___lwmod
 26278  2E19  0020               	movlb	0	; select bank0
 26279  2E1A  082B               	movf	?___lwmod,w
 26280  2E1B  00B3               	movwf	??_slot_Setup+2
 26281  2E1C  0833               	movf	??_slot_Setup+2,w
 26282  2E1D  2E22               	goto	L14
 26283  2E1E                     l8406:	
 26284                           ;slot_task.c: 56: }
 26285                           
 26286                           
 26287                           ;slot_task.c: 57: else {
 26288                           ;slot_task.c: 58: Shot_Index = ((sizeof(Shot_Options)/sizeof(Shot_Options[0]))-1);
 26289  2E1E  3008               	movlw	8
 26290  2E1F  0020               	movlb	0	; select bank0
 26291  2E20  00B1               	movwf	??_slot_Setup
 26292  2E21  0831               	movf	??_slot_Setup,w
 26293  2E22                     L14:	
 26294  2E22  00FC               	movwf	_Shot_Index
 26295                           
 26296                           ;slot_task.c: 59: }
 26297                           ;slot_task.c: 61: Leds_idx = 1;
 26298  2E23  3001               	movlw	1
 26299  2E24  0021               	movlb	1	; select bank1
 26300  2E25  00D7               	movwf	_Leds_idx^(0+128)
 26301  2E26  3000               	movlw	0
 26302  2E27  00D8               	movwf	(_Leds_idx^(0+128)+1)
 26303  2E28  0008               	return
 26304  2E29                     __end_of_slot_Setup:	
 26305                           
 26306                           	psect	text31
 26307  3547                     __ptext31:	
 26308 ;; *************** function _locked_unlock_leds *****************
 26309 ;; Defined at:
 26310 ;;		line 37 in file "locked_task.c"
 26311 ;; Parameters:    Size  Location     Type
 26312 ;;		None
 26313 ;; Auto vars:     Size  Location     Type
 26314 ;;		None
 26315 ;; Return value:  Size  Location     Type
 26316 ;;                  2  1237[None  ] unsigned int 
 26317 ;; Registers used:
 26318 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26319 ;; Tracked objects:
 26320 ;;		On entry : 0/0
 26321 ;;		On exit  : 0/0
 26322 ;;		Unchanged: 0/0
 26323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26326 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26327 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26328 ;;Total ram usage:        2 bytes
 26329 ;; Hardware stack levels used:    1
 26330 ;; Hardware stack levels required when called:    4
 26331 ;; This function calls:
 26332 ;;		Nothing
 26333 ;; This function is called by:
 26334 ;;		_locked_Main
 26335 ;; This function uses a non-reentrant model
 26336 ;;
 26337                           
 26338                           
 26339                           ;psect for function _locked_unlock_leds
 26340  3547                     _locked_unlock_leds:	
 26341                           
 26342                           ;locked_task.c: 38: locked_locking_leds_idx = 0;
 26343                           
 26344                           ;incstack = 0
 26345                           ; Regs used in _locked_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 26346  3547  0021               	movlb	1	; select bank1
 26347  3548  01A4               	clrf	_locked_locking_leds_idx^(0+128)
 26348  3549  01A5               	clrf	(_locked_locking_leds_idx+1)^(0+128)
 26349                           
 26350                           ;locked_task.c: 39: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 26351  354A  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 26352  354B  3EC7               	addlw	(low (_locked_locking_leds| 0))& (0+255)
 26353  354C  0086               	movwf	6
 26354  354D  0187               	clrf	7
 26355  354E  3F40               	moviw [0]fsr1
 26356  354F  00F1               	movwf	??_locked_unlock_leds
 26357  3550  3F41               	moviw [1]fsr1
 26358  3551  00F2               	movwf	??_locked_unlock_leds+1
 26359  3552  0859               	movf	_locked_lock_base_leds^(0+128),w
 26360  3553  0471               	iorwf	??_locked_unlock_leds,w
 26361  3554  00A2               	movwf	_locked_leds^(0+128)
 26362  3555  085A               	movf	(_locked_lock_base_leds+1)^(0+128),w
 26363  3556  0472               	iorwf	??_locked_unlock_leds+1,w
 26364  3557  00A3               	movwf	(_locked_leds+1)^(0+128)
 26365  3558  0008               	return
 26366  3559                     __end_of_locked_unlock_leds:	
 26367                           ;locked_task.c: 40: return locked_leds;
 26368                           ;	Return value of _locked_unlock_leds is never used
 26369                           
 26370                           
 26371                           	psect	text32
 26372  3606                     __ptext32:	
 26373 ;; *************** function _locked_lock_leds *****************
 26374 ;; Defined at:
 26375 ;;		line 29 in file "locked_task.c"
 26376 ;; Parameters:    Size  Location     Type
 26377 ;;		None
 26378 ;; Auto vars:     Size  Location     Type
 26379 ;;  size            2    3[COMMON] unsigned int 
 26380 ;; Return value:  Size  Location     Type
 26381 ;;                  2  1234[None  ] unsigned int 
 26382 ;; Registers used:
 26383 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26384 ;; Tracked objects:
 26385 ;;		On entry : 0/0
 26386 ;;		On exit  : 0/0
 26387 ;;		Unchanged: 0/0
 26388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26390 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26391 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26392 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26393 ;;Total ram usage:        4 bytes
 26394 ;; Hardware stack levels used:    1
 26395 ;; Hardware stack levels required when called:    4
 26396 ;; This function calls:
 26397 ;;		Nothing
 26398 ;; This function is called by:
 26399 ;;		_locked_Init
 26400 ;;		_locked_Main
 26401 ;; This function uses a non-reentrant model
 26402 ;;
 26403                           
 26404                           
 26405                           ;psect for function _locked_lock_leds
 26406  3606                     _locked_lock_leds:	
 26407                           
 26408                           ;locked_task.c: 30: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 26409                           
 26410                           ;incstack = 0
 26411                           ; Regs used in _locked_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 26412  3606  3006               	movlw	6
 26413  3607  00F3               	movwf	locked_lock_leds@size
 26414  3608  3000               	movlw	0
 26415  3609  00F4               	movwf	locked_lock_leds@size+1
 26416                           
 26417                           ;locked_task.c: 31: locked_locking_leds_idx = size - 1;
 26418  360A  0873               	movf	locked_lock_leds@size,w
 26419  360B  3EFF               	addlw	255
 26420  360C  0021               	movlb	1	; select bank1
 26421  360D  00A4               	movwf	_locked_locking_leds_idx^(0+128)
 26422  360E  30FF               	movlw	255
 26423  360F  3D74               	addwfc	locked_lock_leds@size+1,w
 26424  3610  00A5               	movwf	(_locked_locking_leds_idx+1)^(0+128)
 26425                           
 26426                           ;locked_task.c: 32: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 26427  3611  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 26428  3612  3EC7               	addlw	(low (_locked_locking_leds| 0))& (0+255)
 26429  3613  0086               	movwf	6
 26430  3614  0187               	clrf	7
 26431  3615  3F40               	moviw [0]fsr1
 26432  3616  00F1               	movwf	??_locked_lock_leds
 26433  3617  3F41               	moviw [1]fsr1
 26434  3618  00F2               	movwf	??_locked_lock_leds+1
 26435  3619  0859               	movf	_locked_lock_base_leds^(0+128),w
 26436  361A  0471               	iorwf	??_locked_lock_leds,w
 26437  361B  00A2               	movwf	_locked_leds^(0+128)
 26438  361C  085A               	movf	(_locked_lock_base_leds+1)^(0+128),w
 26439  361D  0472               	iorwf	??_locked_lock_leds+1,w
 26440  361E  00A3               	movwf	(_locked_leds+1)^(0+128)
 26441  361F  0008               	return
 26442  3620                     __end_of_locked_lock_leds:	
 26443                           ;locked_task.c: 33: return locked_leds;
 26444                           ;	Return value of _locked_lock_leds is never used
 26445                           
 26446                           
 26447                           	psect	text33
 26448  0801                     __ptext33:	
 26449 ;; *************** function _locked_get_unlock_leds *****************
 26450 ;; Defined at:
 26451 ;;		line 54 in file "locked_task.c"
 26452 ;; Parameters:    Size  Location     Type
 26453 ;;		None
 26454 ;; Auto vars:     Size  Location     Type
 26455 ;;  leds            2    3[COMMON] unsigned int 
 26456 ;; Return value:  Size  Location     Type
 26457 ;;                  2    1[COMMON] unsigned int 
 26458 ;; Registers used:
 26459 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26460 ;; Tracked objects:
 26461 ;;		On entry : 0/0
 26462 ;;		On exit  : 0/0
 26463 ;;		Unchanged: 0/0
 26464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26466 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26468 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26469 ;;Total ram usage:        4 bytes
 26470 ;; Hardware stack levels used:    1
 26471 ;; Hardware stack levels required when called:    4
 26472 ;; This function calls:
 26473 ;;		Nothing
 26474 ;; This function is called by:
 26475 ;;		_locked_Main
 26476 ;; This function uses a non-reentrant model
 26477 ;;
 26478                           
 26479                           
 26480                           ;psect for function _locked_get_unlock_leds
 26481  0801                     _locked_get_unlock_leds:	
 26482                           
 26483                           ;locked_task.c: 55: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 26484                           
 26485                           ;incstack = 0
 26486                           ; Regs used in _locked_get_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 26487  0801  0021               	movlb	1	; select bank1
 26488  0802  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 26489  0803  3EC7               	addlw	(low (_locked_locking_leds| 0))& (0+255)
 26490  0804  0086               	movwf	6
 26491  0805  0187               	clrf	7
 26492  0806  3F40               	moviw [0]fsr1
 26493  0807  00F3               	movwf	locked_get_unlock_leds@leds
 26494  0808  3F41               	moviw [1]fsr1
 26495  0809  00F4               	movwf	locked_get_unlock_leds@leds+1
 26496                           
 26497                           ;locked_task.c: 58: if (locked_locking_leds_idx > 0){
 26498  080A  0824               	movf	_locked_locking_leds_idx^(0+128),w
 26499  080B  0425               	iorwf	(_locked_locking_leds_idx+1)^(0+128),w
 26500  080C  1903               	btfsc	3,2
 26501  080D  2812               	goto	l1245
 26502                           
 26503                           ;locked_task.c: 59: locked_locking_leds_idx -= 1;
 26504  080E  3001               	movlw	1
 26505  080F  02A4               	subwf	_locked_locking_leds_idx^(0+128),f
 26506  0810  3000               	movlw	0
 26507  0811  3BA5               	subwfb	(_locked_locking_leds_idx+1)^(0+128),f
 26508  0812                     l1245:	
 26509                           
 26510                           ;locked_task.c: 60: }
 26511                           ;locked_task.c: 61: return locked_lock_base_leds | leds;
 26512  0812  0873               	movf	locked_get_unlock_leds@leds,w
 26513  0813  0459               	iorwf	_locked_lock_base_leds^(0+128),w
 26514  0814  00F1               	movwf	?_locked_get_unlock_leds
 26515  0815  0874               	movf	locked_get_unlock_leds@leds+1,w
 26516  0816  045A               	iorwf	(_locked_lock_base_leds+1)^(0+128),w
 26517  0817  00F2               	movwf	?_locked_get_unlock_leds+1
 26518  0818  0008               	return
 26519  0819                     __end_of_locked_get_unlock_leds:	
 26520                           
 26521                           	psect	text34
 26522  370A                     __ptext34:	
 26523 ;; *************** function _locked_get_lock_leds *****************
 26524 ;; Defined at:
 26525 ;;		line 43 in file "locked_task.c"
 26526 ;; Parameters:    Size  Location     Type
 26527 ;;		None
 26528 ;; Auto vars:     Size  Location     Type
 26529 ;;  leds            2    7[COMMON] unsigned int 
 26530 ;;  size            2    5[COMMON] unsigned int 
 26531 ;; Return value:  Size  Location     Type
 26532 ;;                  2    1[COMMON] unsigned int 
 26533 ;; Registers used:
 26534 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26535 ;; Tracked objects:
 26536 ;;		On entry : 0/0
 26537 ;;		On exit  : 0/0
 26538 ;;		Unchanged: 0/0
 26539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26540 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26541 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26542 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26543 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26544 ;;Total ram usage:        8 bytes
 26545 ;; Hardware stack levels used:    1
 26546 ;; Hardware stack levels required when called:    4
 26547 ;; This function calls:
 26548 ;;		Nothing
 26549 ;; This function is called by:
 26550 ;;		_locked_Main
 26551 ;; This function uses a non-reentrant model
 26552 ;;
 26553                           
 26554                           
 26555                           ;psect for function _locked_get_lock_leds
 26556  370A                     _locked_get_lock_leds:	
 26557                           
 26558                           ;locked_task.c: 44: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 26559                           
 26560                           ;incstack = 0
 26561                           ; Regs used in _locked_get_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 26562  370A  3006               	movlw	6
 26563  370B  00F5               	movwf	locked_get_lock_leds@size
 26564  370C  3000               	movlw	0
 26565  370D  00F6               	movwf	locked_get_lock_leds@size+1
 26566                           
 26567                           ;locked_task.c: 45: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 26568  370E  0021               	movlb	1	; select bank1
 26569  370F  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 26570  3710  3EC7               	addlw	(low (_locked_locking_leds| 0))& (0+255)
 26571  3711  0086               	movwf	6
 26572  3712  0187               	clrf	7
 26573  3713  3F40               	moviw [0]fsr1
 26574  3714  00F7               	movwf	locked_get_lock_leds@leds
 26575  3715  3F41               	moviw [1]fsr1
 26576  3716  00F8               	movwf	locked_get_lock_leds@leds+1
 26577                           
 26578                           ;locked_task.c: 48: if (locked_locking_leds_idx < size - 1){
 26579  3717  0875               	movf	locked_get_lock_leds@size,w
 26580  3718  3EFF               	addlw	255
 26581  3719  00F3               	movwf	??_locked_get_lock_leds
 26582  371A  30FF               	movlw	255
 26583  371B  3D76               	addwfc	locked_get_lock_leds@size+1,w
 26584  371C  00F4               	movwf	??_locked_get_lock_leds+1
 26585  371D  0874               	movf	??_locked_get_lock_leds+1,w
 26586  371E  0225               	subwf	(_locked_locking_leds_idx+1)^(0+128),w
 26587  371F  1D03               	skipz
 26588  3720  2F23               	goto	u5275
 26589  3721  0873               	movf	??_locked_get_lock_leds,w
 26590  3722  0224               	subwf	_locked_locking_leds_idx^(0+128),w
 26591  3723                     u5275:	
 26592  3723  1803               	skipnc
 26593  3724  2F29               	goto	l1241
 26594                           
 26595                           ;locked_task.c: 49: locked_locking_leds_idx += 1;
 26596  3725  3001               	movlw	1
 26597  3726  07A4               	addwf	_locked_locking_leds_idx^(0+128),f
 26598  3727  3000               	movlw	0
 26599  3728  3DA5               	addwfc	(_locked_locking_leds_idx+1)^(0+128),f
 26600  3729                     l1241:	
 26601                           
 26602                           ;locked_task.c: 50: }
 26603                           ;locked_task.c: 51: return leds;
 26604  3729  0878               	movf	locked_get_lock_leds@leds+1,w
 26605  372A  00F2               	movwf	?_locked_get_lock_leds+1
 26606  372B  0877               	movf	locked_get_lock_leds@leds,w
 26607  372C  00F1               	movwf	?_locked_get_lock_leds
 26608  372D  0008               	return
 26609  372E                     __end_of_locked_get_lock_leds:	
 26610                           
 26611                           	psect	text35
 26612  2B4B                     __ptext35:	
 26613 ;; *************** function _locked_clear *****************
 26614 ;; Defined at:
 26615 ;;		line 186 in file "locked_task.c"
 26616 ;; Parameters:    Size  Location     Type
 26617 ;;  data            2   25[BANK0 ] PTR struct t_locked_task
 26618 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26619 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26620 ;; Auto vars:     Size  Location     Type
 26621 ;;		None
 26622 ;; Return value:  Size  Location     Type
 26623 ;;                  1    wreg      void 
 26624 ;; Registers used:
 26625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26626 ;; Tracked objects:
 26627 ;;		On entry : 0/0
 26628 ;;		On exit  : 0/0
 26629 ;;		Unchanged: 0/0
 26630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26631 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26634 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26635 ;;Total ram usage:        2 bytes
 26636 ;; Hardware stack levels used:    1
 26637 ;; Hardware stack levels required when called:   10
 26638 ;; This function calls:
 26639 ;;		_nullifyBadge_segDisplayErase
 26640 ;;		_nullifyBadge_userLedsClr
 26641 ;; This function is called by:
 26642 ;;		_locked_Main
 26643 ;; This function uses a non-reentrant model
 26644 ;;
 26645                           
 26646                           
 26647                           ;psect for function _locked_clear
 26648  2B4B                     _locked_clear:	
 26649                           
 26650                           ;locked_task.c: 188: data->delayTickCount = 0;
 26651                           
 26652                           ;incstack = 0
 26653                           ; Regs used in _locked_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26654  2B4B  0020               	movlb	0	; select bank0
 26655  2B4C  0839               	movf	locked_clear@data,w
 26656  2B4D  0086               	movwf	6
 26657  2B4E  083A               	movf	locked_clear@data+1,w
 26658  2B4F  0087               	movwf	7
 26659  2B50  3141               	addfsr 1,1
 26660  2B51  3000               	movlw	0
 26661  2B52  3FC0               	movwi [0]fsr1
 26662  2B53  3FC1               	movwi [1]fsr1
 26663                           
 26664                           ;locked_task.c: 189: data->holdCountA = 0;
 26665  2B54  0839               	movf	locked_clear@data,w
 26666  2B55  0086               	movwf	6
 26667  2B56  083A               	movf	locked_clear@data+1,w
 26668  2B57  0087               	movwf	7
 26669  2B58  3143               	addfsr 1,3
 26670  2B59  3000               	movlw	0
 26671  2B5A  3FC0               	movwi [0]fsr1
 26672  2B5B  3FC1               	movwi [1]fsr1
 26673                           
 26674                           ;locked_task.c: 190: data->holdCountB = 0;
 26675  2B5C  0839               	movf	locked_clear@data,w
 26676  2B5D  0086               	movwf	6
 26677  2B5E  083A               	movf	locked_clear@data+1,w
 26678  2B5F  0087               	movwf	7
 26679  2B60  3145               	addfsr 1,5
 26680  2B61  3000               	movlw	0
 26681  2B62  3FC0               	movwi [0]fsr1
 26682  2B63  3FC1               	movwi [1]fsr1
 26683                           
 26684                           ;locked_task.c: 191: data->holdCountX = 0;
 26685  2B64  0839               	movf	locked_clear@data,w
 26686  2B65  0086               	movwf	6
 26687  2B66  083A               	movf	locked_clear@data+1,w
 26688  2B67  0087               	movwf	7
 26689  2B68  3147               	addfsr 1,7
 26690  2B69  3000               	movlw	0
 26691  2B6A  3FC0               	movwi [0]fsr1
 26692  2B6B  3FC1               	movwi [1]fsr1
 26693                           
 26694                           ;locked_task.c: 192: data->holdCountY = 0;
 26695  2B6C  0839               	movf	locked_clear@data,w
 26696  2B6D  0086               	movwf	6
 26697  2B6E  083A               	movf	locked_clear@data+1,w
 26698  2B6F  0087               	movwf	7
 26699  2B70  3149               	addfsr 1,9
 26700  2B71  3000               	movlw	0
 26701  2B72  3FC0               	movwi [0]fsr1
 26702  2B73  3FC1               	movwi [1]fsr1
 26703                           
 26704                           ;locked_task.c: 193: data->noholdCount = 0;
 26705  2B74  0839               	movf	locked_clear@data,w
 26706  2B75  0086               	movwf	6
 26707  2B76  083A               	movf	locked_clear@data+1,w
 26708  2B77  0087               	movwf	7
 26709  2B78  314B               	addfsr 1,11
 26710  2B79  3000               	movlw	0
 26711  2B7A  3FC0               	movwi [0]fsr1
 26712  2B7B  3FC1               	movwi [1]fsr1
 26713                           
 26714                           ;locked_task.c: 196: nullifyBadge_userLedsClr(data->badge);
 26715  2B7C  0839               	movf	locked_clear@data,w
 26716  2B7D  0086               	movwf	6
 26717  2B7E  083A               	movf	locked_clear@data+1,w
 26718  2B7F  0087               	movwf	7
 26719  2B80  0801               	movf	1,w
 26720  2B81  3187  27FA  31AB   	fcall	_nullifyBadge_userLedsClr
 26721                           
 26722                           ;locked_task.c: 197: nullifyBadge_segDisplayErase(data->badge);
 26723  2B84  0020               	movlb	0	; select bank0
 26724  2B85  0839               	movf	locked_clear@data,w
 26725  2B86  0086               	movwf	6
 26726  2B87  083A               	movf	locked_clear@data+1,w
 26727  2B88  0087               	movwf	7
 26728  2B89  0801               	movf	1,w
 26729  2B8A  31B3  23FE         	fcall	_nullifyBadge_segDisplayErase
 26730  2B8C  0008               	return
 26731  2B8D                     __end_of_locked_clear:	
 26732                           
 26733                           	psect	text36
 26734  07FA                     __ptext36:	
 26735 ;; *************** function _nullifyBadge_userLedsClr *****************
 26736 ;; Defined at:
 26737 ;;		line 177 in file "nullifyBadge.c"
 26738 ;; Parameters:    Size  Location     Type
 26739 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 26740 ;;		 -> badge_inst(18), 
 26741 ;; Auto vars:     Size  Location     Type
 26742 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 26743 ;;		 -> badge_inst(18), 
 26744 ;; Return value:  Size  Location     Type
 26745 ;;                  1    wreg      void 
 26746 ;; Registers used:
 26747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26748 ;; Tracked objects:
 26749 ;;		On entry : 0/0
 26750 ;;		On exit  : 0/0
 26751 ;;		Unchanged: 0/0
 26752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26756 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26757 ;;Total ram usage:        1 bytes
 26758 ;; Hardware stack levels used:    1
 26759 ;; Hardware stack levels required when called:    8
 26760 ;; This function calls:
 26761 ;;		_displayL2_ClrUserLeds
 26762 ;; This function is called by:
 26763 ;;		_menu_Init
 26764 ;;		_menu_clear
 26765 ;;		_menu_Exit
 26766 ;;		_flashy_Init
 26767 ;;		_flashy_Exit
 26768 ;;		_locked_Init
 26769 ;;		_locked_clear
 26770 ;;		_locked_Exit
 26771 ;;		_secret_Init
 26772 ;;		_secret_Exit
 26773 ;;		_slot_Init
 26774 ;;		_slot_Exit
 26775 ;;		_matrix_Init
 26776 ;;		_matrix_Exit
 26777 ;; This function uses a non-reentrant model
 26778 ;;
 26779                           
 26780                           
 26781                           ;psect for function _nullifyBadge_userLedsClr
 26782  07FA                     _nullifyBadge_userLedsClr:	
 26783                           
 26784                           ;incstack = 0
 26785                           ; Regs used in _nullifyBadge_userLedsClr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 26786                           ;nullifyBadge_userLedsClr@badge stored from wreg
 26787  07FA  0020               	movlb	0	; select bank0
 26788  07FB  00AB               	movwf	nullifyBadge_userLedsClr@badge
 26789                           
 26790                           ;nullifyBadge.c: 178: displayL2_ClrUserLeds(&badge->display);
 26791  07FC  082B               	movf	nullifyBadge_userLedsClr@badge,w
 26792  07FD  31B4  24C6         	fcall	_displayL2_ClrUserLeds
 26793  07FF  0008               	return
 26794  0800                     __end_of_nullifyBadge_userLedsClr:	
 26795                           
 26796                           	psect	text37
 26797  34C6                     __ptext37:	
 26798 ;; *************** function _displayL2_ClrUserLeds *****************
 26799 ;; Defined at:
 26800 ;;		line 94 in file "nullifyBadge_displayL2.c"
 26801 ;; Parameters:    Size  Location     Type
 26802 ;;  display         1    wreg     PTR struct t_nullifyDisp
 26803 ;;		 -> badge_inst(18), 
 26804 ;; Auto vars:     Size  Location     Type
 26805 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 26806 ;;		 -> badge_inst(18), 
 26807 ;; Return value:  Size  Location     Type
 26808 ;;                  1    wreg      void 
 26809 ;; Registers used:
 26810 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26811 ;; Tracked objects:
 26812 ;;		On entry : 0/0
 26813 ;;		On exit  : 0/0
 26814 ;;		Unchanged: 0/0
 26815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26817 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26819 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26820 ;;Total ram usage:        1 bytes
 26821 ;; Hardware stack levels used:    1
 26822 ;; Hardware stack levels required when called:    7
 26823 ;; This function calls:
 26824 ;;		_displayL1_SetUserLed
 26825 ;;		_displayL1_Update
 26826 ;; This function is called by:
 26827 ;;		_nullifyBadge_userLedsClr
 26828 ;; This function uses a non-reentrant model
 26829 ;;
 26830                           
 26831                           
 26832                           ;psect for function _displayL2_ClrUserLeds
 26833  34C6                     _displayL2_ClrUserLeds:	
 26834                           
 26835                           ;incstack = 0
 26836                           ; Regs used in _displayL2_ClrUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 26837                           ;displayL2_ClrUserLeds@display stored from wreg
 26838  34C6  00FB               	movwf	displayL2_ClrUserLeds@display
 26839                           
 26840                           ;nullifyBadge_displayL2.c: 95: displayL1_SetUserLed(&display->display_l1, 0);
 26841  34C7  3000               	movlw	0
 26842  34C8  00F1               	movwf	displayL1_SetUserLed@userLedVect
 26843  34C9  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 26844  34CA  087B               	movf	displayL2_ClrUserLeds@display,w
 26845  34CB  3E07               	addlw	7
 26846  34CC  31B5  2535  31B4   	fcall	_displayL1_SetUserLed
 26847                           
 26848                           ;nullifyBadge_displayL2.c: 96: displayL1_Update(&display->display_l1);
 26849  34CF  087B               	movf	displayL2_ClrUserLeds@display,w
 26850  34D0  3E07               	addlw	7
 26851  34D1  31B5  2502         	fcall	_displayL1_Update
 26852  34D3  0008               	return
 26853  34D4                     __end_of_displayL2_ClrUserLeds:	
 26854                           
 26855                           	psect	text38
 26856  33FE                     __ptext38:	
 26857 ;; *************** function _nullifyBadge_segDisplayErase *****************
 26858 ;; Defined at:
 26859 ;;		line 123 in file "nullifyBadge.c"
 26860 ;; Parameters:    Size  Location     Type
 26861 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 26862 ;;		 -> badge_inst(18), 
 26863 ;; Auto vars:     Size  Location     Type
 26864 ;;  badge           1   24[BANK0 ] PTR struct t_nullifyBadg
 26865 ;;		 -> badge_inst(18), 
 26866 ;; Return value:  Size  Location     Type
 26867 ;;                  1    wreg      void 
 26868 ;; Registers used:
 26869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26870 ;; Tracked objects:
 26871 ;;		On entry : 0/0
 26872 ;;		On exit  : 0/0
 26873 ;;		Unchanged: 0/0
 26874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26878 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26879 ;;Total ram usage:        1 bytes
 26880 ;; Hardware stack levels used:    1
 26881 ;; Hardware stack levels required when called:    9
 26882 ;; This function calls:
 26883 ;;		_displayL2_EraseSegDisplay
 26884 ;; This function is called by:
 26885 ;;		_menu_Init
 26886 ;;		_menu_clear
 26887 ;;		_menu_Exit
 26888 ;;		_flashy_Init
 26889 ;;		_flashy_Exit
 26890 ;;		_locked_Init
 26891 ;;		_locked_clear
 26892 ;;		_locked_Exit
 26893 ;;		_secret_Init
 26894 ;;		_secret_Exit
 26895 ;;		_slot_Init
 26896 ;;		_slot_Exit
 26897 ;;		_matrix_Init
 26898 ;;		_matrix_Exit
 26899 ;;		_fadeDisplay_Init
 26900 ;;		_fadeDisplay_Exit
 26901 ;; This function uses a non-reentrant model
 26902 ;;
 26903                           
 26904                           
 26905                           ;psect for function _nullifyBadge_segDisplayErase
 26906  33FE                     _nullifyBadge_segDisplayErase:	
 26907                           
 26908                           ;incstack = 0
 26909                           ; Regs used in _nullifyBadge_segDisplayErase: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 26910                           ;nullifyBadge_segDisplayErase@badge stored from wreg
 26911  33FE  0020               	movlb	0	; select bank0
 26912  33FF  00B8               	movwf	nullifyBadge_segDisplayErase@badge
 26913                           
 26914                           ;nullifyBadge.c: 124: displayL2_EraseSegDisplay(&badge->display);
 26915  3400  0838               	movf	nullifyBadge_segDisplayErase@badge,w
 26916  3401  31B4  24F2         	fcall	_displayL2_EraseSegDisplay
 26917  3403  0008               	return
 26918  3404                     __end_of_nullifyBadge_segDisplayErase:	
 26919                           
 26920                           	psect	text39
 26921  34F2                     __ptext39:	
 26922 ;; *************** function _displayL2_EraseSegDisplay *****************
 26923 ;; Defined at:
 26924 ;;		line 83 in file "nullifyBadge_displayL2.c"
 26925 ;; Parameters:    Size  Location     Type
 26926 ;;  display         1    wreg     PTR struct t_nullifyDisp
 26927 ;;		 -> badge_inst(18), 
 26928 ;; Auto vars:     Size  Location     Type
 26929 ;;  display         1   23[BANK0 ] PTR struct t_nullifyDisp
 26930 ;;		 -> badge_inst(18), 
 26931 ;; Return value:  Size  Location     Type
 26932 ;;                  1    wreg      void 
 26933 ;; Registers used:
 26934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26935 ;; Tracked objects:
 26936 ;;		On entry : 0/0
 26937 ;;		On exit  : 0/0
 26938 ;;		Unchanged: 0/0
 26939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26943 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26944 ;;Total ram usage:        1 bytes
 26945 ;; Hardware stack levels used:    1
 26946 ;; Hardware stack levels required when called:    8
 26947 ;; This function calls:
 26948 ;;		_displayL1_Update
 26949 ;;		_displayL2_PutStr
 26950 ;; This function is called by:
 26951 ;;		_nullifyBadge_segDisplayErase
 26952 ;; This function uses a non-reentrant model
 26953 ;;
 26954                           
 26955                           
 26956                           ;psect for function _displayL2_EraseSegDisplay
 26957  34F2                     _displayL2_EraseSegDisplay:	
 26958                           
 26959                           ;incstack = 0
 26960                           ; Regs used in _displayL2_EraseSegDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26961                           ;displayL2_EraseSegDisplay@display stored from wreg
 26962  34F2  0020               	movlb	0	; select bank0
 26963  34F3  00B7               	movwf	displayL2_EraseSegDisplay@display
 26964                           
 26965                           ;nullifyBadge_displayL2.c: 84: displayL2_PutStr(display, "    ");
 26966  34F4  307D               	movlw	low ((STR_34+115)| (0+32768))
 26967  34F5  00B0               	movwf	displayL2_PutStr@str
 26968  34F6  30A8               	movlw	high ((STR_34+115)| (0+32768))
 26969  34F7  00B1               	movwf	displayL2_PutStr@str+1
 26970  34F8  0837               	movf	displayL2_EraseSegDisplay@display,w
 26971  34F9  31B7  277A  31B4   	fcall	_displayL2_PutStr
 26972                           
 26973                           ;nullifyBadge_displayL2.c: 85: displayL1_Update(&display->display_l1);
 26974  34FC  0020               	movlb	0	; select bank0
 26975  34FD  0837               	movf	displayL2_EraseSegDisplay@display,w
 26976  34FE  3E07               	addlw	7
 26977  34FF  31B5  2502         	fcall	_displayL1_Update
 26978  3501  0008               	return
 26979  3502                     __end_of_displayL2_EraseSegDisplay:	
 26980                           
 26981                           	psect	text40
 26982  1A5F                     __ptext40:	
 26983 ;; *************** function _sprintf *****************
 26984 ;; Defined at:
 26985 ;;		line 492 in file "/Applications/microchip/xc8/v1.42/sources/common/doprnt.c"
 26986 ;; Parameters:    Size  Location     Type
 26987 ;;  sp              2   15[BANK0 ] PTR unsigned char 
 26988 ;;		 -> flashy_Main@hit_counter(6), matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), 
 26989 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26990 ;;  f               2   17[BANK0 ] PTR const unsigned char 
 26991 ;;		 -> STR_69(3), STR_68(9), STR_67(9), STR_66(9), 
 26992 ;;		 -> STR_65(9), STR_64(9), STR_41(4), 
 26993 ;; Auto vars:     Size  Location     Type
 26994 ;;  tmpval          4    0        struct .
 26995 ;;  width           2   40[BANK0 ] int 
 26996 ;;  len             2   38[BANK0 ] unsigned int 
 26997 ;;  val             2   36[BANK0 ] unsigned int 
 26998 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
 26999 ;;		 -> STR_82(7), sprintf@c(1), STR_63(9), STR_62(13), 
 27000 ;;		 -> STR_61(12), STR_60(8), STR_59(11), STR_58(11), 
 27001 ;;		 -> STR_57(9), STR_56(8), STR_55(8), 
 27002 ;;  c               1   42[BANK0 ] char 
 27003 ;;  ap              1   35[BANK0 ] PTR void [1]
 27004 ;;		 -> ?_sprintf(2), 
 27005 ;;  flag            1   32[BANK0 ] unsigned char 
 27006 ;;  prec            1   31[BANK0 ] char 
 27007 ;; Return value:  Size  Location     Type
 27008 ;;                  2   15[BANK0 ] int 
 27009 ;; Registers used:
 27010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27011 ;; Tracked objects:
 27012 ;;		On entry : 0/0
 27013 ;;		On exit  : 0/0
 27014 ;;		Unchanged: 0/0
 27015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27016 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27017 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27018 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27019 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27020 ;;Total ram usage:       28 bytes
 27021 ;; Hardware stack levels used:    1
 27022 ;; Hardware stack levels required when called:    5
 27023 ;; This function calls:
 27024 ;;		___lwdiv
 27025 ;;		___lwmod
 27026 ;;		___wmul
 27027 ;;		_isdigit
 27028 ;; This function is called by:
 27029 ;;		_flashy_Main
 27030 ;;		_slot_Main
 27031 ;; This function uses a non-reentrant model
 27032 ;;
 27033                           
 27034                           
 27035                           ;psect for function _sprintf
 27036  1A5F                     _sprintf:	
 27037                           
 27038                           ;doprnt.c: 494: va_list ap;
 27039                           ;doprnt.c: 499: signed char c;
 27040                           ;doprnt.c: 501: int width;
 27041                           ;doprnt.c: 506: signed char prec;
 27042                           ;doprnt.c: 508: unsigned char flag;
 27043                           ;doprnt.c: 523: union {
 27044                           ;doprnt.c: 524: unsigned long vd;
 27045                           ;doprnt.c: 525: double integ;
 27046                           ;doprnt.c: 526: } tmpval;
 27047                           ;doprnt.c: 528: unsigned int val;
 27048                           ;doprnt.c: 529: unsigned len;
 27049                           ;doprnt.c: 530: const char * cp;
 27050                           ;doprnt.c: 533: *ap = __va_start();
 27051                           
 27052                           ;incstack = 0
 27053                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27054  1A5F  3033               	movlw	(low ((?_sprintf| 0+4)))& (0+255)
 27055  1A60  0020               	movlb	0	; select bank0
 27056  1A61  00BB               	movwf	??_sprintf
 27057  1A62  083B               	movf	??_sprintf,w
 27058  1A63  00C3               	movwf	sprintf@ap
 27059  1A64                     l8584:	
 27060                           ;doprnt.c: 536: while(c = *f++) {
 27061                           
 27062  1A64  0832               	movf	sprintf@f+1,w
 27063  1A65  00BC               	movwf	??_sprintf+1
 27064  1A66  0831               	movf	sprintf@f,w
 27065  1A67  00BB               	movwf	??_sprintf
 27066  1A68  0AB1               	incf	sprintf@f,f
 27067  1A69  1903               	skipnz
 27068  1A6A  0AB2               	incf	sprintf@f+1,f
 27069  1A6B  083B               	movf	??_sprintf,w
 27070  1A6C  0084               	movwf	4
 27071  1A6D  083C               	movf	??_sprintf+1,w
 27072  1A6E  0085               	movwf	5
 27073  1A6F  0800               	movf	0,w	;code access
 27074  1A70  00BD               	movwf	??_sprintf+2
 27075  1A71  083D               	movf	??_sprintf+2,w
 27076  1A72  00CA               	movwf	sprintf@c
 27077  1A73  084A               	movf	sprintf@c,w
 27078  1A74  1903               	btfsc	3,2
 27079  1A75  2C25               	goto	l8586
 27080                           
 27081                           ;doprnt.c: 538: if(c != '%')
 27082  1A76  3025               	movlw	37
 27083  1A77  064A               	xorwf	sprintf@c,w
 27084  1A78  1903               	btfsc	3,2
 27085  1A79  2A85               	goto	l8468
 27086                           
 27087                           ;doprnt.c: 540: {
 27088                           ;doprnt.c: 541: ((*sp++ = (c)));
 27089  1A7A  082F               	movf	sprintf@sp,w
 27090  1A7B  0086               	movwf	6
 27091  1A7C  0830               	movf	sprintf@sp+1,w
 27092  1A7D  0087               	movwf	7
 27093  1A7E  084A               	movf	sprintf@c,w
 27094  1A7F  0081               	movwf	1
 27095  1A80  3001               	movlw	1
 27096  1A81  07AF               	addwf	sprintf@sp,f
 27097  1A82  3000               	movlw	0
 27098  1A83  3DB0               	addwfc	sprintf@sp+1,f
 27099                           
 27100                           ;doprnt.c: 542: continue;
 27101  1A84  2A64               	goto	l8584
 27102  1A85                     l8468:	
 27103                           
 27104                           ;doprnt.c: 543: }
 27105                           ;doprnt.c: 546: width = 0;
 27106  1A85  01C8               	clrf	sprintf@width
 27107  1A86  01C9               	clrf	sprintf@width+1
 27108                           
 27109                           ;doprnt.c: 548: flag = 0;
 27110  1A87  01C0               	clrf	sprintf@flag
 27111                           
 27112                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 27113  1A88  0831               	movf	sprintf@f,w
 27114  1A89  0084               	movwf	4
 27115  1A8A  0832               	movf	sprintf@f+1,w
 27116  1A8B  0085               	movwf	5
 27117  1A8C  0800               	movf	0,w	;code access
 27118  1A8D  31B4  24B8  319A   	fcall	_isdigit
 27119  1A90  1C03               	btfss	3,0
 27120  1A91  2B3E               	goto	l8526
 27121                           
 27122                           ;doprnt.c: 598: width = 0;
 27123  1A92  0020               	movlb	0	; select bank0
 27124  1A93  01C8               	clrf	sprintf@width
 27125  1A94  01C9               	clrf	sprintf@width+1
 27126  1A95                     l8474:	
 27127                           ;doprnt.c: 599: do {
 27128                           
 27129                           
 27130                           ;doprnt.c: 600: width *= 10;
 27131  1A95  300A               	movlw	10
 27132  1A96  00F1               	movwf	___wmul@multiplier
 27133  1A97  3000               	movlw	0
 27134  1A98  00F2               	movwf	___wmul@multiplier+1
 27135  1A99  0020               	movlb	0	; select bank0
 27136  1A9A  0849               	movf	sprintf@width+1,w
 27137  1A9B  00F4               	movwf	___wmul@multiplicand+1
 27138  1A9C  0848               	movf	sprintf@width,w
 27139  1A9D  00F3               	movwf	___wmul@multiplicand
 27140  1A9E  31B6  2620  319A   	fcall	___wmul
 27141  1AA1  0872               	movf	?___wmul+1,w
 27142  1AA2  0020               	movlb	0	; select bank0
 27143  1AA3  00C9               	movwf	sprintf@width+1
 27144  1AA4  0871               	movf	?___wmul,w
 27145  1AA5  00C8               	movwf	sprintf@width
 27146                           
 27147                           ;doprnt.c: 601: width += *f++ - '0';
 27148  1AA6  0831               	movf	sprintf@f,w
 27149  1AA7  0084               	movwf	4
 27150  1AA8  0832               	movf	sprintf@f+1,w
 27151  1AA9  0085               	movwf	5
 27152  1AAA  0800               	movf	0,w	;code access
 27153  1AAB  3ED0               	addlw	208
 27154  1AAC  00BB               	movwf	??_sprintf
 27155  1AAD  30FF               	movlw	255
 27156  1AAE  1803               	skipnc
 27157  1AAF  3000               	movlw	0
 27158  1AB0  00BC               	movwf	??_sprintf+1
 27159  1AB1  083B               	movf	??_sprintf,w
 27160  1AB2  07C8               	addwf	sprintf@width,f
 27161  1AB3  083C               	movf	??_sprintf+1,w
 27162  1AB4  3DC9               	addwfc	sprintf@width+1,f
 27163  1AB5  3001               	movlw	1
 27164  1AB6  07B1               	addwf	sprintf@f,f
 27165  1AB7  3000               	movlw	0
 27166  1AB8  3DB2               	addwfc	sprintf@f+1,f
 27167                           
 27168                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 27169  1AB9  0831               	movf	sprintf@f,w
 27170  1ABA  0084               	movwf	4
 27171  1ABB  0832               	movf	sprintf@f+1,w
 27172  1ABC  0085               	movwf	5
 27173  1ABD  0800               	movf	0,w	;code access
 27174  1ABE  31B4  24B8  319A   	fcall	_isdigit
 27175  1AC1  1C03               	btfss	3,0
 27176  1AC2  2B3E               	goto	l8526
 27177  1AC3  2A95               	goto	l8474
 27178  1AC4                     l8482:	
 27179                           ;doprnt.c: 728: case 's':
 27180                           
 27181                           ;doprnt.c: 698: case 'i':
 27182                           ;doprnt.c: 699: break;
 27183                           
 27184                           ;doprnt.c: 697: case 'd':
 27185                           
 27186                           ;doprnt.c: 638: goto alldone;
 27187                           
 27188                           ;doprnt.c: 637: case 0:
 27189                           
 27190                           ;doprnt.c: 608: }
 27191                           ;doprnt.c: 635: switch(c = *f++) {
 27192                           
 27193                           
 27194                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 27195  1AC4  0020               	movlb	0	; select bank0
 27196  1AC5  0843               	movf	sprintf@ap,w
 27197  1AC6  0086               	movwf	6
 27198  1AC7  0187               	clrf	7
 27199  1AC8  3F40               	moviw [0]fsr1
 27200  1AC9  00C1               	movwf	sprintf@cp
 27201  1ACA  3F41               	moviw [1]fsr1
 27202  1ACB  00C2               	movwf	sprintf@cp+1
 27203  1ACC  3002               	movlw	2
 27204  1ACD  00BB               	movwf	??_sprintf
 27205  1ACE  083B               	movf	??_sprintf,w
 27206  1ACF  07C3               	addwf	sprintf@ap,f
 27207                           
 27208                           ;doprnt.c: 740: if(!cp)
 27209  1AD0  0841               	movf	sprintf@cp,w
 27210  1AD1  0442               	iorwf	sprintf@cp+1,w
 27211  1AD2  1D03               	btfss	3,2
 27212  1AD3  2AD8               	goto	l8490
 27213                           
 27214                           ;doprnt.c: 741: cp = "(null)";
 27215  1AD4  3011               	movlw	low (STR_82| (0+32768))
 27216  1AD5  00C1               	movwf	sprintf@cp
 27217  1AD6  30BB               	movlw	high (STR_82| (0+32768))
 27218  1AD7  00C2               	movwf	sprintf@cp+1
 27219  1AD8                     l8490:	
 27220                           
 27221                           ;doprnt.c: 745: len = 0;
 27222  1AD8  01C6               	clrf	sprintf@len
 27223  1AD9  01C7               	clrf	sprintf@len+1
 27224  1ADA                     l8494:	
 27225                           ;doprnt.c: 746: while(cp[len])
 27226                           
 27227  1ADA  0841               	movf	sprintf@cp,w
 27228  1ADB  0746               	addwf	sprintf@len,w
 27229  1ADC  0084               	movwf	4
 27230  1ADD  0842               	movf	sprintf@cp+1,w
 27231  1ADE  3D47               	addwfc	sprintf@len+1,w
 27232  1ADF  0085               	movwf	5
 27233  1AE0  0012               	moviw fsr0++
 27234  1AE1  1903               	btfsc	3,2
 27235  1AE2  2AE8               	goto	l8496
 27236                           
 27237                           ;doprnt.c: 747: len++;
 27238  1AE3  3001               	movlw	1
 27239  1AE4  07C6               	addwf	sprintf@len,f
 27240  1AE5  3000               	movlw	0
 27241  1AE6  3DC7               	addwfc	sprintf@len+1,f
 27242  1AE7  2ADA               	goto	l8494
 27243  1AE8                     l8496:	
 27244                           ;doprnt.c: 750: dostring:
 27245                           
 27246                           
 27247                           ;doprnt.c: 757: if(width > len)
 27248  1AE8  0849               	movf	sprintf@width+1,w
 27249  1AE9  0247               	subwf	sprintf@len+1,w
 27250  1AEA  1D03               	skipz
 27251  1AEB  2AEE               	goto	u5125
 27252  1AEC  0848               	movf	sprintf@width,w
 27253  1AED  0246               	subwf	sprintf@len,w
 27254  1AEE                     u5125:	
 27255  1AEE  1803               	skipnc
 27256  1AEF  2AF5               	goto	l8500
 27257                           
 27258                           ;doprnt.c: 758: width -= len;
 27259  1AF0  0846               	movf	sprintf@len,w
 27260  1AF1  02C8               	subwf	sprintf@width,f
 27261  1AF2  0847               	movf	sprintf@len+1,w
 27262  1AF3  3BC9               	subwfb	sprintf@width+1,f
 27263  1AF4  2AF7               	goto	l8506
 27264  1AF5                     l8500:	
 27265                           
 27266                           ;doprnt.c: 759: else
 27267                           ;doprnt.c: 760: width = 0;
 27268  1AF5  01C8               	clrf	sprintf@width
 27269  1AF6  01C9               	clrf	sprintf@width+1
 27270  1AF7                     l8506:	
 27271                           ;doprnt.c: 764: while(width--)
 27272                           
 27273  1AF7  30FF               	movlw	255
 27274  1AF8  07C8               	addwf	sprintf@width,f
 27275  1AF9  30FF               	movlw	255
 27276  1AFA  3DC9               	addwfc	sprintf@width+1,f
 27277  1AFB  0A48               	incf	sprintf@width,w
 27278  1AFC  1903               	btfsc	3,2
 27279  1AFD  0A49               	incf	sprintf@width+1,w
 27280  1AFE  1903               	btfsc	3,2
 27281  1AFF  2B1F               	goto	l8514
 27282                           
 27283                           ;doprnt.c: 765: ((*sp++ = (' ')));
 27284  1B00  082F               	movf	sprintf@sp,w
 27285  1B01  0086               	movwf	6
 27286  1B02  0830               	movf	sprintf@sp+1,w
 27287  1B03  0087               	movwf	7
 27288  1B04  3020               	movlw	32
 27289  1B05  0081               	movwf	1
 27290  1B06  3001               	movlw	1
 27291  1B07  07AF               	addwf	sprintf@sp,f
 27292  1B08  3000               	movlw	0
 27293  1B09  3DB0               	addwfc	sprintf@sp+1,f
 27294  1B0A  2AF7               	goto	l8506
 27295  1B0B                     l8508:	
 27296                           ;doprnt.c: 767: while(len--)
 27297                           
 27298                           
 27299                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 27300  1B0B  0841               	movf	sprintf@cp,w
 27301  1B0C  0084               	movwf	4
 27302  1B0D  0842               	movf	sprintf@cp+1,w
 27303  1B0E  0085               	movwf	5
 27304  1B0F  0800               	movf	0,w	;code access
 27305  1B10  00BB               	movwf	??_sprintf
 27306  1B11  082F               	movf	sprintf@sp,w
 27307  1B12  0086               	movwf	6
 27308  1B13  0830               	movf	sprintf@sp+1,w
 27309  1B14  0087               	movwf	7
 27310  1B15  083B               	movf	??_sprintf,w
 27311  1B16  0081               	movwf	1
 27312  1B17  3001               	movlw	1
 27313  1B18  07C1               	addwf	sprintf@cp,f
 27314  1B19  3000               	movlw	0
 27315  1B1A  3DC2               	addwfc	sprintf@cp+1,f
 27316  1B1B  3001               	movlw	1
 27317  1B1C  07AF               	addwf	sprintf@sp,f
 27318  1B1D  3000               	movlw	0
 27319  1B1E  3DB0               	addwfc	sprintf@sp+1,f
 27320  1B1F                     l8514:	
 27321  1B1F  3001               	movlw	1
 27322  1B20  02C6               	subwf	sprintf@len,f
 27323  1B21  3000               	movlw	0
 27324  1B22  3BC7               	subwfb	sprintf@len+1,f
 27325  1B23  0A46               	incf	sprintf@len,w
 27326  1B24  1D03               	skipz
 27327  1B25  2B0B               	goto	l8508
 27328  1B26  0A47               	incf	sprintf@len+1,w
 27329  1B27  1903               	btfsc	3,2
 27330  1B28  2A64               	goto	l8584
 27331  1B29  2B0B               	goto	l8508
 27332  1B2A                     l8516:	
 27333                           ;doprnt.c: 784: case 'c':
 27334                           
 27335                           ;doprnt.c: 774: continue;
 27336                           
 27337                           
 27338                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 27339  1B2A  0843               	movf	sprintf@ap,w
 27340  1B2B  0086               	movwf	6
 27341  1B2C  0187               	clrf	7
 27342  1B2D  0801               	movf	1,w
 27343  1B2E  00BB               	movwf	??_sprintf
 27344  1B2F  083B               	movf	??_sprintf,w
 27345  1B30  00CA               	movwf	sprintf@c
 27346  1B31  3002               	movlw	2
 27347  1B32  00BB               	movwf	??_sprintf
 27348  1B33  083B               	movf	??_sprintf,w
 27349  1B34  07C3               	addwf	sprintf@ap,f
 27350  1B35                     l8520:	
 27351                           ;doprnt.c: 802: default:
 27352                           
 27353                           
 27354                           ;doprnt.c: 805: cp = (char *)&c;
 27355  1B35  304A               	movlw	low sprintf@c
 27356  1B36  00C1               	movwf	sprintf@cp
 27357  1B37  3000               	movlw	high sprintf@c
 27358  1B38  00C2               	movwf	sprintf@cp+1
 27359                           
 27360                           ;doprnt.c: 806: len = 1;
 27361  1B39  3001               	movlw	1
 27362  1B3A  00C6               	movwf	sprintf@len
 27363  1B3B  3000               	movlw	0
 27364  1B3C  00C7               	movwf	sprintf@len+1
 27365                           
 27366                           ;doprnt.c: 807: goto dostring;
 27367  1B3D  2AE8               	goto	l8496
 27368  1B3E                     l8526:	
 27369                           ;doprnt.c: 822: }
 27370                           
 27371  1B3E  0020               	movlb	0	; select bank0
 27372  1B3F  0832               	movf	sprintf@f+1,w
 27373  1B40  00BC               	movwf	??_sprintf+1
 27374  1B41  0831               	movf	sprintf@f,w
 27375  1B42  00BB               	movwf	??_sprintf
 27376  1B43  0AB1               	incf	sprintf@f,f
 27377  1B44  1903               	skipnz
 27378  1B45  0AB2               	incf	sprintf@f+1,f
 27379  1B46  083B               	movf	??_sprintf,w
 27380  1B47  0084               	movwf	4
 27381  1B48  083C               	movf	??_sprintf+1,w
 27382  1B49  0085               	movwf	5
 27383  1B4A  0800               	movf	0,w	;code access
 27384  1B4B  00CA               	movwf	sprintf@c
 27385                           
 27386                           ; Switch size 1, requested type "space"
 27387                           ; Number of cases is 5, Range of values is 0 to 115
 27388                           ; switch strategies available:
 27389                           ; Name         Instructions Cycles
 27390                           ; simple_byte           16     9 (average)
 27391                           ; direct_byte          238     6 (fixed)
 27392                           ; jumptable            260     6 (fixed)
 27393                           ;	Chosen strategy is simple_byte
 27394  1B4C  3A00               	xorlw	0	; case 0
 27395  1B4D  1903               	skipnz
 27396  1B4E  2C25               	goto	l8586
 27397  1B4F  3A63               	xorlw	99	; case 99
 27398  1B50  1903               	skipnz
 27399  1B51  2B2A               	goto	l8516
 27400  1B52  3A07               	xorlw	7	; case 100
 27401  1B53  1903               	skipnz
 27402  1B54  2B5C               	goto	l8528
 27403  1B55  3A0D               	xorlw	13	; case 105
 27404  1B56  1903               	skipnz
 27405  1B57  2B5C               	goto	l8528
 27406  1B58  3A1A               	xorlw	26	; case 115
 27407  1B59  1903               	skipnz
 27408  1B5A  2AC4               	goto	l8482
 27409  1B5B  2B35               	goto	l8520
 27410  1B5C                     l8528:	
 27411                           
 27412                           ;doprnt.c: 1253: {
 27413                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 27414  1B5C  0020               	movlb	0	; select bank0
 27415  1B5D  0843               	movf	sprintf@ap,w
 27416  1B5E  0086               	movwf	6
 27417  1B5F  0187               	clrf	7
 27418  1B60  3F40               	moviw [0]fsr1
 27419  1B61  00C4               	movwf	sprintf@val
 27420  1B62  3F41               	moviw [1]fsr1
 27421  1B63  00C5               	movwf	sprintf@val+1
 27422  1B64  3002               	movlw	2
 27423  1B65  00BB               	movwf	??_sprintf
 27424  1B66  083B               	movf	??_sprintf,w
 27425  1B67  07C3               	addwf	sprintf@ap,f
 27426                           
 27427                           ;doprnt.c: 1261: if((int)val < 0) {
 27428  1B68  1FC5               	btfss	sprintf@val+1,7
 27429  1B69  2B73               	goto	l8538
 27430                           
 27431                           ;doprnt.c: 1262: flag |= 0x03;
 27432  1B6A  3003               	movlw	3
 27433  1B6B  00BB               	movwf	??_sprintf
 27434  1B6C  083B               	movf	??_sprintf,w
 27435  1B6D  04C0               	iorwf	sprintf@flag,f
 27436                           
 27437                           ;doprnt.c: 1263: val = -val;
 27438  1B6E  09C4               	comf	sprintf@val,f
 27439  1B6F  09C5               	comf	sprintf@val+1,f
 27440  1B70  0AC4               	incf	sprintf@val,f
 27441  1B71  1903               	skipnz
 27442  1B72  0AC5               	incf	sprintf@val+1,f
 27443  1B73                     l8538:	
 27444                           
 27445                           ;doprnt.c: 1264: }
 27446                           ;doprnt.c: 1266: }
 27447                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 27448  1B73  01CA               	clrf	sprintf@c
 27449  1B74  0ACA               	incf	sprintf@c,f
 27450  1B75  3005               	movlw	5
 27451  1B76  064A               	xorwf	sprintf@c,w
 27452  1B77  1903               	btfsc	3,2
 27453  1B78  2B98               	goto	l8550
 27454  1B79                     l8544:	
 27455                           
 27456                           ;doprnt.c: 1306: if(val < dpowers[c])
 27457  1B79  084A               	movf	sprintf@c,w
 27458  1B7A  00BB               	movwf	??_sprintf
 27459  1B7B  01BC               	clrf	??_sprintf+1
 27460  1B7C  35BB               	lslf	??_sprintf,f
 27461  1B7D  0DBC               	rlf	??_sprintf+1,f
 27462  1B7E  3000               	movlw	low (_dpowers| (0+32768))
 27463  1B7F  073B               	addwf	??_sprintf,w
 27464  1B80  0084               	movwf	4
 27465  1B81  30A8               	movlw	high (_dpowers| (0+32768))
 27466  1B82  3D3C               	addwfc	??_sprintf+1,w
 27467  1B83  0085               	movwf	5
 27468  1B84  3F00               	moviw [0]fsr0
 27469  1B85  00BD               	movwf	??_sprintf+2
 27470  1B86  3F01               	moviw [1]fsr0
 27471  1B87  00BE               	movwf	??_sprintf+3
 27472  1B88  083E               	movf	??_sprintf+3,w
 27473  1B89  0245               	subwf	sprintf@val+1,w
 27474  1B8A  1D03               	skipz
 27475  1B8B  2B8E               	goto	u5175
 27476  1B8C  083D               	movf	??_sprintf+2,w
 27477  1B8D  0244               	subwf	sprintf@val,w
 27478  1B8E                     u5175:	
 27479  1B8E  1C03               	btfss	3,0
 27480  1B8F  2B98               	goto	l8550
 27481                           
 27482                           ;doprnt.c: 1307: break;
 27483  1B90  3001               	movlw	1
 27484  1B91  00BB               	movwf	??_sprintf
 27485  1B92  083B               	movf	??_sprintf,w
 27486  1B93  07CA               	addwf	sprintf@c,f
 27487  1B94  3005               	movlw	5
 27488  1B95  064A               	xorwf	sprintf@c,w
 27489  1B96  1D03               	btfss	3,2
 27490  1B97  2B79               	goto	l8544
 27491  1B98                     l8550:	
 27492                           
 27493                           ;doprnt.c: 1345: if(width && flag & 0x03)
 27494  1B98  0848               	movf	sprintf@width,w
 27495  1B99  0449               	iorwf	sprintf@width+1,w
 27496  1B9A  1903               	btfsc	3,2
 27497  1B9B  2BA4               	goto	l1584
 27498  1B9C  0840               	movf	sprintf@flag,w
 27499  1B9D  3903               	andlw	3
 27500  1B9E  1903               	btfsc	3,2
 27501  1B9F  2BA4               	goto	l1584
 27502                           
 27503                           ;doprnt.c: 1346: width--;
 27504  1BA0  30FF               	movlw	255
 27505  1BA1  07C8               	addwf	sprintf@width,f
 27506  1BA2  30FF               	movlw	255
 27507  1BA3  3DC9               	addwfc	sprintf@width+1,f
 27508  1BA4                     l1584:	
 27509                           
 27510                           ;doprnt.c: 1381: if(width > c)
 27511  1BA4  084A               	movf	sprintf@c,w
 27512  1BA5  00BB               	movwf	??_sprintf
 27513  1BA6  01BC               	clrf	??_sprintf+1
 27514  1BA7  1BBB               	btfsc	??_sprintf,7
 27515  1BA8  03BC               	decf	??_sprintf+1,f
 27516  1BA9  083C               	movf	??_sprintf+1,w
 27517  1BAA  3A80               	xorlw	128
 27518  1BAB  00BD               	movwf	??_sprintf+2
 27519  1BAC  0849               	movf	sprintf@width+1,w
 27520  1BAD  3A80               	xorlw	128
 27521  1BAE  023D               	subwf	??_sprintf+2,w
 27522  1BAF  1D03               	skipz
 27523  1BB0  2BB3               	goto	u5215
 27524  1BB1  0848               	movf	sprintf@width,w
 27525  1BB2  023B               	subwf	??_sprintf,w
 27526  1BB3                     u5215:	
 27527  1BB3  1803               	skipnc
 27528  1BB4  2BC0               	goto	l8558
 27529                           
 27530                           ;doprnt.c: 1382: width -= c;
 27531  1BB5  0020               	movlb	0	; select bank0
 27532  1BB6  084A               	movf	sprintf@c,w
 27533  1BB7  00BB               	movwf	??_sprintf
 27534  1BB8  01BC               	clrf	??_sprintf+1
 27535  1BB9  1BBB               	btfsc	??_sprintf,7
 27536  1BBA  03BC               	decf	??_sprintf+1,f
 27537  1BBB  083B               	movf	??_sprintf,w
 27538  1BBC  02C8               	subwf	sprintf@width,f
 27539  1BBD  083C               	movf	??_sprintf+1,w
 27540  1BBE  3BC9               	subwfb	sprintf@width+1,f
 27541  1BBF  2BC3               	goto	l8560
 27542  1BC0                     l8558:	
 27543                           
 27544                           ;doprnt.c: 1383: else
 27545                           ;doprnt.c: 1384: width = 0;
 27546  1BC0  0020               	movlb	0	; select bank0
 27547  1BC1  01C8               	clrf	sprintf@width
 27548  1BC2  01C9               	clrf	sprintf@width+1
 27549  1BC3                     l8560:	
 27550                           
 27551                           ;doprnt.c: 1422: {
 27552                           ;doprnt.c: 1424: if(width
 27553                           ;doprnt.c: 1428: )
 27554  1BC3  0848               	movf	sprintf@width,w
 27555  1BC4  0449               	iorwf	sprintf@width+1,w
 27556  1BC5  1903               	btfsc	3,2
 27557  1BC6  2BD9               	goto	l8568
 27558  1BC7                     l8562:	
 27559                           ;doprnt.c: 1429: do
 27560                           
 27561                           
 27562                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 27563  1BC7  082F               	movf	sprintf@sp,w
 27564  1BC8  0086               	movwf	6
 27565  1BC9  0830               	movf	sprintf@sp+1,w
 27566  1BCA  0087               	movwf	7
 27567  1BCB  3020               	movlw	32
 27568  1BCC  0081               	movwf	1
 27569  1BCD  3001               	movlw	1
 27570  1BCE  07AF               	addwf	sprintf@sp,f
 27571  1BCF  3000               	movlw	0
 27572  1BD0  3DB0               	addwfc	sprintf@sp+1,f
 27573                           
 27574                           ;doprnt.c: 1431: while(--width);
 27575  1BD1  30FF               	movlw	255
 27576  1BD2  07C8               	addwf	sprintf@width,f
 27577  1BD3  30FF               	movlw	255
 27578  1BD4  3DC9               	addwfc	sprintf@width+1,f
 27579  1BD5  0848               	movf	sprintf@width,w
 27580  1BD6  0449               	iorwf	sprintf@width+1,w
 27581  1BD7  1D03               	btfss	3,2
 27582  1BD8  2BC7               	goto	l8562
 27583  1BD9                     l8568:	
 27584                           
 27585                           ;doprnt.c: 1438: if(flag & 0x03)
 27586  1BD9  0840               	movf	sprintf@flag,w
 27587  1BDA  3903               	andlw	3
 27588  1BDB  1903               	btfsc	3,2
 27589  1BDC  2BE7               	goto	l8574
 27590                           
 27591                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 27592  1BDD  082F               	movf	sprintf@sp,w
 27593  1BDE  0086               	movwf	6
 27594  1BDF  0830               	movf	sprintf@sp+1,w
 27595  1BE0  0087               	movwf	7
 27596  1BE1  302D               	movlw	45
 27597  1BE2  0081               	movwf	1
 27598  1BE3  3001               	movlw	1
 27599  1BE4  07AF               	addwf	sprintf@sp,f
 27600  1BE5  3000               	movlw	0
 27601  1BE6  3DB0               	addwfc	sprintf@sp+1,f
 27602  1BE7                     l8574:	
 27603                           
 27604                           ;doprnt.c: 1469: }
 27605                           ;doprnt.c: 1472: prec = c;
 27606  1BE7  084A               	movf	sprintf@c,w
 27607  1BE8  00BB               	movwf	??_sprintf
 27608  1BE9  083B               	movf	??_sprintf,w
 27609  1BEA  00BF               	movwf	sprintf@prec
 27610  1BEB                     l8582:	
 27611                           ;doprnt.c: 1474: while(prec--) {
 27612                           
 27613  1BEB  30FF               	movlw	255
 27614  1BEC  00BB               	movwf	??_sprintf
 27615  1BED  083B               	movf	??_sprintf,w
 27616  1BEE  07BF               	addwf	sprintf@prec,f
 27617  1BEF  0A3F               	incf	sprintf@prec,w
 27618  1BF0  1903               	btfsc	3,2
 27619  1BF1  2A64               	goto	l8584
 27620                           
 27621                           ;doprnt.c: 1478: {
 27622                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 27623  1BF2  300A               	movlw	10
 27624  1BF3  00AB               	movwf	___lwmod@divisor
 27625  1BF4  3000               	movlw	0
 27626  1BF5  00AC               	movwf	___lwmod@divisor+1
 27627  1BF6  083F               	movf	sprintf@prec,w
 27628  1BF7  00BB               	movwf	??_sprintf
 27629  1BF8  01BC               	clrf	??_sprintf+1
 27630  1BF9  35BB               	lslf	??_sprintf,f
 27631  1BFA  0DBC               	rlf	??_sprintf+1,f
 27632  1BFB  3000               	movlw	low (_dpowers| (0+32768))
 27633  1BFC  073B               	addwf	??_sprintf,w
 27634  1BFD  0084               	movwf	4
 27635  1BFE  30A8               	movlw	high (_dpowers| (0+32768))
 27636  1BFF  3D3C               	addwfc	??_sprintf+1,w
 27637  1C00  0085               	movwf	5
 27638  1C01  3F00               	moviw [0]fsr0
 27639  1C02  00F1               	movwf	___lwdiv@divisor
 27640  1C03  3F01               	moviw [1]fsr0
 27641  1C04  00F2               	movwf	___lwdiv@divisor+1
 27642  1C05  0845               	movf	sprintf@val+1,w
 27643  1C06  00F4               	movwf	___lwdiv@dividend+1
 27644  1C07  0844               	movf	sprintf@val,w
 27645  1C08  00F3               	movwf	___lwdiv@dividend
 27646  1C09  31A9  213A  319A   	fcall	___lwdiv
 27647  1C0C  0872               	movf	?___lwdiv+1,w
 27648  1C0D  0020               	movlb	0	; select bank0
 27649  1C0E  00AE               	movwf	___lwmod@dividend+1
 27650  1C0F  0871               	movf	?___lwdiv,w
 27651  1C10  00AD               	movwf	___lwmod@dividend
 27652  1C11  31B7  27A4  319A   	fcall	___lwmod
 27653  1C14  0020               	movlb	0	; select bank0
 27654  1C15  082B               	movf	?___lwmod,w
 27655  1C16  3E30               	addlw	48
 27656  1C17  00BD               	movwf	??_sprintf+2
 27657  1C18  083D               	movf	??_sprintf+2,w
 27658  1C19  00CA               	movwf	sprintf@c
 27659                           
 27660                           ;doprnt.c: 1523: }
 27661                           ;doprnt.c: 1524: ((*sp++ = (c)));
 27662  1C1A  082F               	movf	sprintf@sp,w
 27663  1C1B  0086               	movwf	6
 27664  1C1C  0830               	movf	sprintf@sp+1,w
 27665  1C1D  0087               	movwf	7
 27666  1C1E  084A               	movf	sprintf@c,w
 27667  1C1F  0081               	movwf	1
 27668  1C20  3001               	movlw	1
 27669  1C21  07AF               	addwf	sprintf@sp,f
 27670  1C22  3000               	movlw	0
 27671  1C23  3DB0               	addwfc	sprintf@sp+1,f
 27672  1C24  2BEB               	goto	l8582
 27673  1C25                     l8586:	
 27674                           ;doprnt.c: 1525: }
 27675                           ;doprnt.c: 1533: }
 27676                           ;doprnt.c: 1535: alldone:
 27677                           
 27678                           
 27679                           ;doprnt.c: 1538: *sp = 0;
 27680  1C25  0020               	movlb	0	; select bank0
 27681  1C26  082F               	movf	sprintf@sp,w
 27682  1C27  0086               	movwf	6
 27683  1C28  0830               	movf	sprintf@sp+1,w
 27684  1C29  0087               	movwf	7
 27685  1C2A  0181               	clrf	1
 27686  1C2B  0008               	return
 27687  1C2C                     __end_of_sprintf:	
 27688                           ;doprnt.c: 1540: return 0;
 27689                           ;	Return value of _sprintf is never used
 27690                           
 27691                           
 27692                           	psect	text41
 27693  34B8                     __ptext41:	
 27694 ;; *************** function _isdigit *****************
 27695 ;; Defined at:
 27696 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/isdigit.c"
 27697 ;; Parameters:    Size  Location     Type
 27698 ;;  c               1    wreg     unsigned char 
 27699 ;; Auto vars:     Size  Location     Type
 27700 ;;  c               1    2[COMMON] unsigned char 
 27701 ;; Return value:  Size  Location     Type
 27702 ;;		None               void
 27703 ;; Registers used:
 27704 ;;		wreg, status,2, status,0
 27705 ;; Tracked objects:
 27706 ;;		On entry : 0/0
 27707 ;;		On exit  : 0/0
 27708 ;;		Unchanged: 0/0
 27709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27711 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27713 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27714 ;;Total ram usage:        2 bytes
 27715 ;; Hardware stack levels used:    1
 27716 ;; Hardware stack levels required when called:    4
 27717 ;; This function calls:
 27718 ;;		Nothing
 27719 ;; This function is called by:
 27720 ;;		_sprintf
 27721 ;; This function uses a non-reentrant model
 27722 ;;
 27723                           
 27724                           
 27725                           ;psect for function _isdigit
 27726  34B8                     _isdigit:	
 27727                           
 27728                           ;incstack = 0
 27729                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 27730                           ;isdigit@c stored from wreg
 27731  34B8  00F2               	movwf	isdigit@c
 27732  34B9  01F1               	clrf	_isdigit$3599
 27733  34BA  303A               	movlw	58
 27734  34BB  0272               	subwf	isdigit@c,w
 27735  34BC  1803               	skipnc
 27736  34BD  2CC4               	goto	l8294
 27737  34BE  3030               	movlw	48
 27738  34BF  0272               	subwf	isdigit@c,w
 27739  34C0  1C03               	skipc
 27740  34C1  2CC4               	goto	l8294
 27741  34C2  01F1               	clrf	_isdigit$3599
 27742  34C3  0AF1               	incf	_isdigit$3599,f
 27743  34C4                     l8294:	
 27744  34C4  0C71               	rrf	_isdigit$3599,w
 27745  34C5  0008               	return
 27746  34C6                     __end_of_isdigit:	
 27747                           
 27748                           	psect	text42
 27749  3620                     __ptext42:	
 27750 ;; *************** function ___wmul *****************
 27751 ;; Defined at:
 27752 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
 27753 ;; Parameters:    Size  Location     Type
 27754 ;;  multiplier      2    1[COMMON] unsigned int 
 27755 ;;  multiplicand    2    3[COMMON] unsigned int 
 27756 ;; Auto vars:     Size  Location     Type
 27757 ;;  product         2    5[COMMON] unsigned int 
 27758 ;; Return value:  Size  Location     Type
 27759 ;;                  2    1[COMMON] unsigned int 
 27760 ;; Registers used:
 27761 ;;		wreg, status,2, status,0
 27762 ;; Tracked objects:
 27763 ;;		On entry : 0/0
 27764 ;;		On exit  : 0/0
 27765 ;;		Unchanged: 0/0
 27766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27767 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27768 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27770 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27771 ;;Total ram usage:        6 bytes
 27772 ;; Hardware stack levels used:    1
 27773 ;; Hardware stack levels required when called:    4
 27774 ;; This function calls:
 27775 ;;		Nothing
 27776 ;; This function is called by:
 27777 ;;		_secret_check
 27778 ;;		_matrix_secret_check
 27779 ;;		_sprintf
 27780 ;; This function uses a non-reentrant model
 27781 ;;
 27782                           
 27783                           
 27784                           ;psect for function ___wmul
 27785  3620                     ___wmul:	
 27786                           
 27787                           ;incstack = 0
 27788                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 27789  3620  01F5               	clrf	___wmul@product
 27790  3621  01F6               	clrf	___wmul@product+1
 27791  3622                     l8300:	
 27792  3622  1C71               	btfss	___wmul@multiplier,0
 27793  3623  2E28               	goto	l1677
 27794  3624  0873               	movf	___wmul@multiplicand,w
 27795  3625  07F5               	addwf	___wmul@product,f
 27796  3626  0874               	movf	___wmul@multiplicand+1,w
 27797  3627  3DF6               	addwfc	___wmul@product+1,f
 27798  3628                     l1677:	
 27799  3628  3001               	movlw	1
 27800  3629                     u4925:	
 27801  3629  35F3               	lslf	___wmul@multiplicand,f
 27802  362A  0DF4               	rlf	___wmul@multiplicand+1,f
 27803  362B  0B89               	decfsz	9,f
 27804  362C  2E29               	goto	u4925
 27805  362D  3001               	movlw	1
 27806  362E                     u4935:	
 27807  362E  36F2               	lsrf	___wmul@multiplier+1,f
 27808  362F  0CF1               	rrf	___wmul@multiplier,f
 27809  3630  0B89               	decfsz	9,f
 27810  3631  2E2E               	goto	u4935
 27811  3632  0871               	movf	___wmul@multiplier,w
 27812  3633  0472               	iorwf	___wmul@multiplier+1,w
 27813  3634  1D03               	btfss	3,2
 27814  3635  2E22               	goto	l8300
 27815  3636  0876               	movf	___wmul@product+1,w
 27816  3637  00F2               	movwf	?___wmul+1
 27817  3638  0875               	movf	___wmul@product,w
 27818  3639  00F1               	movwf	?___wmul
 27819  363A  0008               	return
 27820  363B                     __end_of___wmul:	
 27821                           
 27822                           	psect	text43
 27823  33E5                     __ptext43:	
 27824 ;; *************** function _nullifyBadge_irTxSet *****************
 27825 ;; Defined at:
 27826 ;;		line 264 in file "nullifyBadge.c"
 27827 ;; Parameters:    Size  Location     Type
 27828 ;;		None
 27829 ;; Auto vars:     Size  Location     Type
 27830 ;;		None
 27831 ;; Return value:  Size  Location     Type
 27832 ;;                  1    wreg      void 
 27833 ;; Registers used:
 27834 ;;		None
 27835 ;; Tracked objects:
 27836 ;;		On entry : 0/0
 27837 ;;		On exit  : 0/0
 27838 ;;		Unchanged: 0/0
 27839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27844 ;;Total ram usage:        0 bytes
 27845 ;; Hardware stack levels used:    1
 27846 ;; Hardware stack levels required when called:    4
 27847 ;; This function calls:
 27848 ;;		Nothing
 27849 ;; This function is called by:
 27850 ;;		_flashy_Main
 27851 ;; This function uses a non-reentrant model
 27852 ;;
 27853                           
 27854                           
 27855                           ;psect for function _nullifyBadge_irTxSet
 27856  33E5                     _nullifyBadge_irTxSet:	
 27857                           
 27858                           ;incstack = 0
 27859                           ; Regs used in _nullifyBadge_irTxSet: []
 27860                           ;nullifyBadge.c: 266: do { LATBbits.LATB7 = 0; } while(0);
 27861  33E5  0022               	movlb	2	; select bank2
 27862  33E6  138D               	bcf	13,7	;volatile
 27863  33E7  0008               	return
 27864  33E8                     __end_of_nullifyBadge_irTxSet:	
 27865                           
 27866                           	psect	text44
 27867  3470                     __ptext44:	
 27868 ;; *************** function _nullifyBadge_irTxRelease *****************
 27869 ;; Defined at:
 27870 ;;		line 254 in file "nullifyBadge.c"
 27871 ;; Parameters:    Size  Location     Type
 27872 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 27873 ;;		 -> badge_inst(18), 
 27874 ;; Auto vars:     Size  Location     Type
 27875 ;;  badge           1    2[COMMON] PTR struct t_nullifyBadg
 27876 ;;		 -> badge_inst(18), 
 27877 ;; Return value:  Size  Location     Type
 27878 ;;                  1    wreg      void 
 27879 ;; Registers used:
 27880 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27881 ;; Tracked objects:
 27882 ;;		On entry : 0/0
 27883 ;;		On exit  : 0/0
 27884 ;;		Unchanged: 0/0
 27885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27887 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27888 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27889 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27890 ;;Total ram usage:        2 bytes
 27891 ;; Hardware stack levels used:    1
 27892 ;; Hardware stack levels required when called:    4
 27893 ;; This function calls:
 27894 ;;		Nothing
 27895 ;; This function is called by:
 27896 ;;		_flashy_Main
 27897 ;; This function uses a non-reentrant model
 27898 ;;
 27899                           
 27900                           
 27901                           ;psect for function _nullifyBadge_irTxRelease
 27902  3470                     _nullifyBadge_irTxRelease:	
 27903                           
 27904                           ;incstack = 0
 27905                           ; Regs used in _nullifyBadge_irTxRelease: [wreg+fsr1l+fsr1h+status,2+status,0]
 27906                           ;nullifyBadge_irTxRelease@badge stored from wreg
 27907  3470  00F2               	movwf	nullifyBadge_irTxRelease@badge
 27908                           
 27909                           ;nullifyBadge.c: 255: badge->registeredHw &= ~(1 << HW_IR_TX);
 27910  3471  30FB               	movlw	251
 27911  3472  00F1               	movwf	??_nullifyBadge_irTxRelease
 27912  3473  0872               	movf	nullifyBadge_irTxRelease@badge,w
 27913  3474  3E11               	addlw	17
 27914  3475  0086               	movwf	6
 27915  3476  3001               	movlw	1	; select bank2/3
 27916  3477  0087               	movwf	7
 27917  3478  0871               	movf	??_nullifyBadge_irTxRelease,w
 27918  3479  0581               	andwf	1,f
 27919  347A  0008               	return
 27920  347B                     __end_of_nullifyBadge_irTxRelease:	
 27921                           
 27922                           	psect	text45
 27923  34D4                     __ptext45:	
 27924 ;; *************** function _nullifyBadge_irTxRegister *****************
 27925 ;; Defined at:
 27926 ;;		line 242 in file "nullifyBadge.c"
 27927 ;; Parameters:    Size  Location     Type
 27928 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 27929 ;;		 -> badge_inst(18), 
 27930 ;; Auto vars:     Size  Location     Type
 27931 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 27932 ;;		 -> badge_inst(18), 
 27933 ;; Return value:  Size  Location     Type
 27934 ;;                  1    wreg      char 
 27935 ;; Registers used:
 27936 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27937 ;; Tracked objects:
 27938 ;;		On entry : 0/0
 27939 ;;		On exit  : 0/0
 27940 ;;		Unchanged: 0/0
 27941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27945 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27946 ;;Total ram usage:        1 bytes
 27947 ;; Hardware stack levels used:    1
 27948 ;; Hardware stack levels required when called:    4
 27949 ;; This function calls:
 27950 ;;		Nothing
 27951 ;; This function is called by:
 27952 ;;		_flashy_Main
 27953 ;; This function uses a non-reentrant model
 27954 ;;
 27955                           
 27956                           
 27957                           ;psect for function _nullifyBadge_irTxRegister
 27958  34D4                     _nullifyBadge_irTxRegister:	
 27959                           
 27960                           ;incstack = 0
 27961                           ; Regs used in _nullifyBadge_irTxRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 27962                           ;nullifyBadge_irTxRegister@badge stored from wreg
 27963  34D4  00F1               	movwf	nullifyBadge_irTxRegister@badge
 27964                           
 27965                           ;nullifyBadge.c: 243: if (badge->registeredHw & HW_IR_TX) {
 27966  34D5  0871               	movf	nullifyBadge_irTxRegister@badge,w
 27967  34D6  3E11               	addlw	17
 27968  34D7  0086               	movwf	6
 27969  34D8  3001               	movlw	1	; select bank2/3
 27970  34D9  0087               	movwf	7
 27971  34DA  1881               	btfsc	1,1
 27972  34DB  0008               	return
 27973                           
 27974                           ;nullifyBadge.c: 246: else {
 27975                           ;nullifyBadge.c: 247: badge->registeredHw |= (1 << HW_IR_TX);
 27976                           
 27977                           ;nullifyBadge.c: 245: }
 27978                           
 27979                           ;nullifyBadge.c: 244: return -1;
 27980                           ;	Return value of _nullifyBadge_irTxRegister is never used
 27981  34DC  0871               	movf	nullifyBadge_irTxRegister@badge,w
 27982  34DD  3E11               	addlw	17
 27983  34DE  0086               	movwf	6
 27984  34DF  3001               	movlw	1	; select bank2/3
 27985  34E0  0087               	movwf	7
 27986  34E1  1501               	bsf	1,2
 27987                           
 27988                           ;nullifyBadge.c: 248: return 0;
 27989                           ;	Return value of _nullifyBadge_irTxRegister is never used
 27990  34E2  0008               	return
 27991  34E3                     __end_of_nullifyBadge_irTxRegister:	
 27992                           
 27993                           	psect	text46
 27994  33E2                     __ptext46:	
 27995 ;; *************** function _nullifyBadge_irTxClr *****************
 27996 ;; Defined at:
 27997 ;;		line 270 in file "nullifyBadge.c"
 27998 ;; Parameters:    Size  Location     Type
 27999 ;;		None
 28000 ;; Auto vars:     Size  Location     Type
 28001 ;;		None
 28002 ;; Return value:  Size  Location     Type
 28003 ;;                  1    wreg      void 
 28004 ;; Registers used:
 28005 ;;		None
 28006 ;; Tracked objects:
 28007 ;;		On entry : 0/0
 28008 ;;		On exit  : 0/0
 28009 ;;		Unchanged: 0/0
 28010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28015 ;;Total ram usage:        0 bytes
 28016 ;; Hardware stack levels used:    1
 28017 ;; Hardware stack levels required when called:    4
 28018 ;; This function calls:
 28019 ;;		Nothing
 28020 ;; This function is called by:
 28021 ;;		_flashy_Main
 28022 ;; This function uses a non-reentrant model
 28023 ;;
 28024                           
 28025                           
 28026                           ;psect for function _nullifyBadge_irTxClr
 28027  33E2                     _nullifyBadge_irTxClr:	
 28028                           
 28029                           ;incstack = 0
 28030                           ; Regs used in _nullifyBadge_irTxClr: []
 28031                           ;nullifyBadge.c: 272: do { LATBbits.LATB7 = 1; } while(0);
 28032  33E2  0022               	movlb	2	; select bank2
 28033  33E3  178D               	bsf	13,7	;volatile
 28034  33E4  0008               	return
 28035  33E5                     __end_of_nullifyBadge_irTxClr:	
 28036                           
 28037                           	psect	text47
 28038  2000                     __ptext47:	
 28039 ;; *************** function _nullifyBadge_irGet *****************
 28040 ;; Defined at:
 28041 ;;		line 232 in file "nullifyBadge.c"
 28042 ;; Parameters:    Size  Location     Type
 28043 ;;		None
 28044 ;; Auto vars:     Size  Location     Type
 28045 ;;		None
 28046 ;; Return value:  Size  Location     Type
 28047 ;;                  1    wreg      unsigned char 
 28048 ;; Registers used:
 28049 ;;		wreg, status,2, status,0
 28050 ;; Tracked objects:
 28051 ;;		On entry : 0/0
 28052 ;;		On exit  : 0/0
 28053 ;;		Unchanged: 0/0
 28054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28059 ;;Total ram usage:        0 bytes
 28060 ;; Hardware stack levels used:    1
 28061 ;; Hardware stack levels required when called:    4
 28062 ;; This function calls:
 28063 ;;		Nothing
 28064 ;; This function is called by:
 28065 ;;		_flashy_Main
 28066 ;; This function uses a non-reentrant model
 28067 ;;
 28068                           
 28069                           
 28070                           ;psect for function _nullifyBadge_irGet
 28071  2000                     _nullifyBadge_irGet:	
 28072                           
 28073                           ;nullifyBadge.c: 233: return PORTBbits.RB5;
 28074                           
 28075                           ;incstack = 0
 28076                           ; Regs used in _nullifyBadge_irGet: [wreg+status,2+status,0]
 28077  2000  0020               	movlb	0	; select bank0
 28078  2001  0E0D               	swapf	13,w	;volatile
 28079  2002  0C89               	rrf	9,f
 28080  2003  3901               	andlw	1
 28081  2004  0008               	return
 28082  2005                     __end_of_nullifyBadge_irGet:	
 28083                           
 28084                           	psect	text48
 28085  28A5                     __ptext48:	
 28086 ;; *************** function _nullifyBadge_buttonsGet *****************
 28087 ;; Defined at:
 28088 ;;		line 187 in file "nullifyBadge.c"
 28089 ;; Parameters:    Size  Location     Type
 28090 ;;		None
 28091 ;; Auto vars:     Size  Location     Type
 28092 ;;  retVal          1    3[COMMON] unsigned char 
 28093 ;; Return value:  Size  Location     Type
 28094 ;;                  1    wreg      unsigned char 
 28095 ;; Registers used:
 28096 ;;		wreg, status,2, status,0
 28097 ;; Tracked objects:
 28098 ;;		On entry : 0/0
 28099 ;;		On exit  : 0/0
 28100 ;;		Unchanged: 0/0
 28101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28103 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28104 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28105 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28106 ;;Total ram usage:        3 bytes
 28107 ;; Hardware stack levels used:    1
 28108 ;; Hardware stack levels required when called:    4
 28109 ;; This function calls:
 28110 ;;		Nothing
 28111 ;; This function is called by:
 28112 ;;		_menu_Main
 28113 ;;		_flashy_Main
 28114 ;;		_locked_Main
 28115 ;;		_secret_Main
 28116 ;;		_slot_Main
 28117 ;;		_matrix_Main
 28118 ;; This function uses a non-reentrant model
 28119 ;;
 28120                           
 28121                           
 28122                           ;psect for function _nullifyBadge_buttonsGet
 28123  28A5                     _nullifyBadge_buttonsGet:	
 28124                           
 28125                           ;nullifyBadge.c: 188: u8 retVal = 0x0F;
 28126                           
 28127                           ;incstack = 0
 28128                           ; Regs used in _nullifyBadge_buttonsGet: [wreg+status,2+status,0]
 28129  28A5  300F               	movlw	15
 28130  28A6  00F1               	movwf	??_nullifyBadge_buttonsGet
 28131  28A7  0871               	movf	??_nullifyBadge_buttonsGet,w
 28132  28A8  00F3               	movwf	nullifyBadge_buttonsGet@retVal
 28133                           
 28134                           ;nullifyBadge.c: 190: retVal &= ~(PORTCbits.RC5 << 0);
 28135  28A9  0020               	movlb	0	; select bank0
 28136  28AA  0E0E               	swapf	14,w	;volatile
 28137  28AB  0C89               	rrf	9,f
 28138  28AC  3901               	andlw	1
 28139  28AD  3AFF               	xorlw	255
 28140  28AE  00F1               	movwf	??_nullifyBadge_buttonsGet
 28141  28AF  0871               	movf	??_nullifyBadge_buttonsGet,w
 28142  28B0  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28143                           
 28144                           ;nullifyBadge.c: 191: retVal &= ~(PORTAbits.RA2 << 1);
 28145  28B1  0C0C               	rrf	12,w	;volatile
 28146  28B2  0C89               	rrf	9,f
 28147  28B3  3901               	andlw	1
 28148  28B4  0709               	addwf	9,w
 28149  28B5  3AFF               	xorlw	255
 28150  28B6  00F1               	movwf	??_nullifyBadge_buttonsGet
 28151  28B7  0871               	movf	??_nullifyBadge_buttonsGet,w
 28152  28B8  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28153                           
 28154                           ;nullifyBadge.c: 192: retVal &= ~(PORTAbits.RA4 << 2);
 28155  28B9  0E0C               	swapf	12,w	;volatile
 28156  28BA  3901               	andlw	1
 28157  28BB  00F1               	movwf	??_nullifyBadge_buttonsGet
 28158  28BC  3001               	movlw	1
 28159  28BD                     u5005:	
 28160  28BD  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 28161  28BE  3EFF               	addlw	-1
 28162  28BF  1D03               	skipz
 28163  28C0  28BD               	goto	u5005
 28164  28C1  3571               	lslf	??_nullifyBadge_buttonsGet,w
 28165  28C2  3AFF               	xorlw	255
 28166  28C3  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 28167  28C4  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 28168  28C5  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28169                           
 28170                           ;nullifyBadge.c: 193: retVal &= ~(PORTAbits.RA5 << 3);
 28171  28C6  0E0C               	swapf	12,w	;volatile
 28172  28C7  0C89               	rrf	9,f
 28173  28C8  3901               	andlw	1
 28174  28C9  00F1               	movwf	??_nullifyBadge_buttonsGet
 28175  28CA  3002               	movlw	2
 28176  28CB                     u5015:	
 28177  28CB  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 28178  28CC  3EFF               	addlw	-1
 28179  28CD  1D03               	skipz
 28180  28CE  28CB               	goto	u5015
 28181  28CF  3571               	lslf	??_nullifyBadge_buttonsGet,w
 28182  28D0  3AFF               	xorlw	255
 28183  28D1  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 28184  28D2  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 28185  28D3  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28186                           
 28187                           ;nullifyBadge.c: 195: return retVal;
 28188  28D4  0873               	movf	nullifyBadge_buttonsGet@retVal,w
 28189  28D5  0008               	return
 28190  28D6                     __end_of_nullifyBadge_buttonsGet:	
 28191                           
 28192                           	psect	text49
 28193  356C                     __ptext49:	
 28194 ;; *************** function _let_alternate *****************
 28195 ;; Defined at:
 28196 ;;		line 194 in file "main.c"
 28197 ;; Parameters:    Size  Location     Type
 28198 ;;  count           2   16[BANK0 ] unsigned int 
 28199 ;; Auto vars:     Size  Location     Type
 28200 ;;		None
 28201 ;; Return value:  Size  Location     Type
 28202 ;;                  1    wreg      void 
 28203 ;; Registers used:
 28204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28205 ;; Tracked objects:
 28206 ;;		On entry : 0/0
 28207 ;;		On exit  : 0/0
 28208 ;;		Unchanged: 0/0
 28209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28210 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28214 ;;Total ram usage:        2 bytes
 28215 ;; Hardware stack levels used:    1
 28216 ;; Hardware stack levels required when called:    9
 28217 ;; This function calls:
 28218 ;;		_nullifyBadge_userLedsSet
 28219 ;; This function is called by:
 28220 ;;		_flashy_Main
 28221 ;; This function uses a non-reentrant model
 28222 ;;
 28223                           
 28224                           
 28225                           ;psect for function _let_alternate
 28226  356C                     _let_alternate:	
 28227                           
 28228                           ;main.c: 195: if(count %2 == 1){
 28229                           
 28230                           ;incstack = 0
 28231                           ; Regs used in _let_alternate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 28232  356C  0020               	movlb	0	; select bank0
 28233  356D  1C30               	btfss	let_alternate@count,0
 28234  356E  2D77               	goto	l8350
 28235                           
 28236                           ;main.c: 196: nullifyBadge_userLedsSet(&badge_inst,43349);
 28237  356F  3055               	movlw	85
 28238  3570  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28239  3571  30A9               	movlw	169
 28240  3572  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28241  3573  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28242  3574  31B5  2513         	fcall	_nullifyBadge_userLedsSet
 28243                           
 28244                           ;main.c: 197: }
 28245  3576  0008               	return
 28246  3577                     l8350:	
 28247                           
 28248                           ;main.c: 198: else{
 28249                           ;main.c: 199: nullifyBadge_userLedsSet(&badge_inst,21162);
 28250  3577  30AA               	movlw	170
 28251  3578  0020               	movlb	0	; select bank0
 28252  3579  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28253  357A  3052               	movlw	82
 28254  357B  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28255  357C  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28256  357D  31B5  2513         	fcall	_nullifyBadge_userLedsSet
 28257  357F  0008               	return
 28258  3580                     __end_of_let_alternate:	
 28259                           
 28260                           	psect	text50
 28261  2B0A                     __ptext50:	
 28262 ;; *************** function _led_roundabout *****************
 28263 ;; Defined at:
 28264 ;;		line 159 in file "main.c"
 28265 ;; Parameters:    Size  Location     Type
 28266 ;;  counter         2   16[BANK0 ] unsigned int 
 28267 ;; Auto vars:     Size  Location     Type
 28268 ;;  size            2   22[BANK0 ] unsigned int 
 28269 ;;  leds            2   20[BANK0 ] unsigned int 
 28270 ;; Return value:  Size  Location     Type
 28271 ;;                  1    wreg      void 
 28272 ;; Registers used:
 28273 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28274 ;; Tracked objects:
 28275 ;;		On entry : 0/0
 28276 ;;		On exit  : 0/0
 28277 ;;		Unchanged: 0/0
 28278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28279 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28280 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28281 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28282 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28283 ;;Total ram usage:        8 bytes
 28284 ;; Hardware stack levels used:    1
 28285 ;; Hardware stack levels required when called:    9
 28286 ;; This function calls:
 28287 ;;		___lwmod
 28288 ;;		_nullifyBadge_userLedsSet
 28289 ;; This function is called by:
 28290 ;;		_flashy_Main
 28291 ;; This function uses a non-reentrant model
 28292 ;;
 28293                           
 28294                           
 28295                           ;psect for function _led_roundabout
 28296  2B0A                     _led_roundabout:	
 28297                           
 28298                           ;main.c: 160: u16 size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 28299                           
 28300                           ;incstack = 0
 28301                           ; Regs used in _led_roundabout: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 28302  2B0A  300E               	movlw	14
 28303  2B0B  0020               	movlb	0	; select bank0
 28304  2B0C  00B6               	movwf	led_roundabout@size
 28305  2B0D  3000               	movlw	0
 28306  2B0E  00B7               	movwf	led_roundabout@size+1
 28307                           
 28308                           ;main.c: 161: u16 leds = roundabout_leds[counter % size];
 28309  2B0F  0837               	movf	led_roundabout@size+1,w
 28310  2B10  00AC               	movwf	___lwmod@divisor+1
 28311  2B11  0836               	movf	led_roundabout@size,w
 28312  2B12  00AB               	movwf	___lwmod@divisor
 28313  2B13  0831               	movf	led_roundabout@counter+1,w
 28314  2B14  00AE               	movwf	___lwmod@dividend+1
 28315  2B15  0830               	movf	led_roundabout@counter,w
 28316  2B16  00AD               	movwf	___lwmod@dividend
 28317  2B17  31B7  27A4  31AB   	fcall	___lwmod
 28318  2B1A  0020               	movlb	0	; select bank0
 28319  2B1B  082B               	movf	?___lwmod,w
 28320  2B1C  0709               	addwf	9,w
 28321  2B1D  3EBC               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 28322  2B1E  0086               	movwf	6
 28323  2B1F  3003               	movlw	3	; select bank7/8
 28324  2B20  0087               	movwf	7
 28325  2B21  3F40               	moviw [0]fsr1
 28326  2B22  00B4               	movwf	led_roundabout@leds
 28327  2B23  3F41               	moviw [1]fsr1
 28328  2B24  00B5               	movwf	led_roundabout@leds+1
 28329                           
 28330                           ;main.c: 163: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 28331  2B25  300E               	movlw	14
 28332  2B26  00B6               	movwf	led_roundabout@size
 28333  2B27  3000               	movlw	0
 28334  2B28  00B7               	movwf	led_roundabout@size+1
 28335                           
 28336                           ;main.c: 164: leds |= roundabout_leds_inverse[counter % size];
 28337  2B29  0837               	movf	led_roundabout@size+1,w
 28338  2B2A  00AC               	movwf	___lwmod@divisor+1
 28339  2B2B  0836               	movf	led_roundabout@size,w
 28340  2B2C  00AB               	movwf	___lwmod@divisor
 28341  2B2D  0831               	movf	led_roundabout@counter+1,w
 28342  2B2E  00AE               	movwf	___lwmod@dividend+1
 28343  2B2F  0830               	movf	led_roundabout@counter,w
 28344  2B30  00AD               	movwf	___lwmod@dividend
 28345  2B31  31B7  27A4  31AB   	fcall	___lwmod
 28346  2B34  0020               	movlb	0	; select bank0
 28347  2B35  082B               	movf	?___lwmod,w
 28348  2B36  0709               	addwf	9,w
 28349  2B37  3EA0               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 28350  2B38  0086               	movwf	6
 28351  2B39  3003               	movlw	3	; select bank7/8
 28352  2B3A  0087               	movwf	7
 28353  2B3B  3F40               	moviw [0]fsr1
 28354  2B3C  00B2               	movwf	??_led_roundabout
 28355  2B3D  3F41               	moviw [1]fsr1
 28356  2B3E  00B3               	movwf	??_led_roundabout+1
 28357  2B3F  0832               	movf	??_led_roundabout,w
 28358  2B40  04B4               	iorwf	led_roundabout@leds,f
 28359  2B41  0833               	movf	??_led_roundabout+1,w
 28360  2B42  04B5               	iorwf	led_roundabout@leds+1,f
 28361                           
 28362                           ;main.c: 166: nullifyBadge_userLedsSet(&badge_inst, leds);
 28363  2B43  0835               	movf	led_roundabout@leds+1,w
 28364  2B44  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28365  2B45  0834               	movf	led_roundabout@leds,w
 28366  2B46  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28367  2B47  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28368  2B48  31B5  2513         	fcall	_nullifyBadge_userLedsSet
 28369  2B4A  0008               	return
 28370  2B4B                     __end_of_led_roundabout:	
 28371                           
 28372                           	psect	text51
 28373  2CA3                     __ptext51:	
 28374 ;; *************** function _led_rand *****************
 28375 ;; Defined at:
 28376 ;;		line 179 in file "main.c"
 28377 ;; Parameters:    Size  Location     Type
 28378 ;;		None
 28379 ;; Auto vars:     Size  Location     Type
 28380 ;;  spark           2   27[BANK0 ] unsigned int 
 28381 ;; Return value:  Size  Location     Type
 28382 ;;                  1    wreg      void 
 28383 ;; Registers used:
 28384 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28385 ;; Tracked objects:
 28386 ;;		On entry : 0/0
 28387 ;;		On exit  : 0/0
 28388 ;;		Unchanged: 0/0
 28389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28391 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28392 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28393 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28394 ;;Total ram usage:       10 bytes
 28395 ;; Hardware stack levels used:    1
 28396 ;; Hardware stack levels required when called:    9
 28397 ;; This function calls:
 28398 ;;		___almod
 28399 ;;		_nullifyBadge_userLedsSet
 28400 ;;		_rand
 28401 ;; This function is called by:
 28402 ;;		_flashy_Main
 28403 ;;		_slot_Finished_Animation
 28404 ;; This function uses a non-reentrant model
 28405 ;;
 28406                           
 28407                           
 28408                           ;psect for function _led_rand
 28409  2CA3                     _led_rand:	
 28410                           
 28411                           ;main.c: 181: u16 spark = rand() % 65535;
 28412                           
 28413                           ;incstack = 0
 28414                           ; Regs used in _led_rand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 28415  2CA3  3000               	movlw	0
 28416  2CA4  0020               	movlb	0	; select bank0
 28417  2CA5  00AE               	movwf	___almod@divisor+3
 28418  2CA6  3000               	movlw	0
 28419  2CA7  00AD               	movwf	___almod@divisor+2
 28420  2CA8  30FF               	movlw	255
 28421  2CA9  00AC               	movwf	___almod@divisor+1
 28422  2CAA  30FF               	movlw	255
 28423  2CAB  00AB               	movwf	___almod@divisor
 28424  2CAC  31AB  238D  31AC   	fcall	_rand
 28425  2CAF  0020               	movlb	0	; select bank0
 28426  2CB0  0824               	movf	?_rand,w
 28427  2CB1  00AF               	movwf	___almod@dividend
 28428  2CB2  0825               	movf	?_rand+1,w
 28429  2CB3  00B0               	movwf	___almod@dividend+1
 28430  2CB4  0D89               	rlf	9,f
 28431  2CB5  3B89               	subwfb	9,f
 28432  2CB6  0989               	comf	9,f
 28433  2CB7  00B1               	movwf	___almod@dividend+2
 28434  2CB8  00B2               	movwf	___almod@dividend+3
 28435  2CB9  31A1  2123  31AC   	fcall	___almod
 28436  2CBC  0020               	movlb	0	; select bank0
 28437  2CBD  082C               	movf	?___almod+1,w
 28438  2CBE  00BC               	movwf	led_rand@spark+1
 28439  2CBF  082B               	movf	?___almod,w
 28440  2CC0  00BB               	movwf	led_rand@spark
 28441                           
 28442                           ;main.c: 182: if ( (spark | 64511) == 65535 ){
 28443  2CC1  30FF               	movlw	255
 28444  2CC2  00B3               	movwf	??_led_rand
 28445  2CC3  30FB               	movlw	251
 28446  2CC4  00B4               	movwf	??_led_rand+1
 28447  2CC5  3000               	movlw	0
 28448  2CC6  00B5               	movwf	??_led_rand+2
 28449  2CC7  3000               	movlw	0
 28450  2CC8  00B6               	movwf	??_led_rand+3
 28451  2CC9  083B               	movf	led_rand@spark,w
 28452  2CCA  00B7               	movwf	??_led_rand+4
 28453  2CCB  083C               	movf	led_rand@spark+1,w
 28454  2CCC  00B8               	movwf	??_led_rand+5
 28455  2CCD  01B9               	clrf	??_led_rand+6
 28456  2CCE  01BA               	clrf	??_led_rand+7
 28457  2CCF  0837               	movf	??_led_rand+4,w
 28458  2CD0  04B3               	iorwf	??_led_rand,f
 28459  2CD1  0838               	movf	??_led_rand+5,w
 28460  2CD2  04B4               	iorwf	??_led_rand+1,f
 28461  2CD3  0839               	movf	??_led_rand+6,w
 28462  2CD4  04B5               	iorwf	??_led_rand+2,f
 28463  2CD5  083A               	movf	??_led_rand+7,w
 28464  2CD6  04B6               	iorwf	??_led_rand+3,f
 28465  2CD7  0A33               	incf	??_led_rand,w
 28466  2CD8  1D03               	skipz
 28467  2CD9  2CE3               	goto	l8256
 28468  2CDA  0A34               	incf	??_led_rand+1,w
 28469  2CDB  0435               	iorwf	??_led_rand+2,w
 28470  2CDC  0436               	iorwf	??_led_rand+3,w
 28471  2CDD  1D03               	btfss	3,2
 28472  2CDE  2CE3               	goto	l8256
 28473                           
 28474                           ;main.c: 183: spark ^= 1024 ;
 28475  2CDF  3000               	movlw	0
 28476  2CE0  06BB               	xorwf	led_rand@spark,f
 28477  2CE1  3004               	movlw	4
 28478  2CE2  06BC               	xorwf	led_rand@spark+1,f
 28479  2CE3                     l8256:	
 28480                           
 28481                           ;main.c: 184: }
 28482                           ;main.c: 185: nullifyBadge_userLedsSet(&badge_inst,spark);
 28483  2CE3  083C               	movf	led_rand@spark+1,w
 28484  2CE4  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28485  2CE5  083B               	movf	led_rand@spark,w
 28486  2CE6  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28487  2CE7  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28488  2CE8  31B5  2513         	fcall	_nullifyBadge_userLedsSet
 28489  2CEA  0008               	return
 28490  2CEB                     __end_of_led_rand:	
 28491                           
 28492                           	psect	text52
 28493  2B8D                     __ptext52:	
 28494 ;; *************** function _rand *****************
 28495 ;; Defined at:
 28496 ;;		line 12 in file "/Applications/microchip/xc8/v1.42/sources/common/rand.c"
 28497 ;; Parameters:    Size  Location     Type
 28498 ;;		None
 28499 ;; Auto vars:     Size  Location     Type
 28500 ;;		None
 28501 ;; Return value:  Size  Location     Type
 28502 ;;                  2    4[BANK0 ] int 
 28503 ;; Registers used:
 28504 ;;		wreg, status,2, status,0, pclath, cstack
 28505 ;; Tracked objects:
 28506 ;;		On entry : 0/0
 28507 ;;		On exit  : 0/0
 28508 ;;		Unchanged: 0/0
 28509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28510 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28512 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28513 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28514 ;;Total ram usage:        7 bytes
 28515 ;; Hardware stack levels used:    1
 28516 ;; Hardware stack levels required when called:    5
 28517 ;; This function calls:
 28518 ;;		___lmul
 28519 ;; This function is called by:
 28520 ;;		_led_rand
 28521 ;;		_slot_Setup
 28522 ;;		_slot_Main
 28523 ;; This function uses a non-reentrant model
 28524 ;;
 28525                           
 28526                           
 28527                           ;psect for function _rand
 28528  2B8D                     _rand:	
 28529                           
 28530                           ;incstack = 0
 28531                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 28532  2B8D  0021               	movlb	1	; select bank1
 28533  2B8E  0856               	movf	(_randx+3)^(0+128),w
 28534  2B8F  00F4               	movwf	___lmul@multiplier+3
 28535  2B90  0855               	movf	(_randx+2)^(0+128),w
 28536  2B91  00F3               	movwf	___lmul@multiplier+2
 28537  2B92  0854               	movf	(_randx+1)^(0+128),w
 28538  2B93  00F2               	movwf	___lmul@multiplier+1
 28539  2B94  0853               	movf	_randx^(0+128),w
 28540  2B95  00F1               	movwf	___lmul@multiplier
 28541  2B96  3041               	movlw	65
 28542  2B97  00F8               	movwf	___lmul@multiplicand+3
 28543  2B98  30C6               	movlw	198
 28544  2B99  00F7               	movwf	___lmul@multiplicand+2
 28545  2B9A  304E               	movlw	78
 28546  2B9B  00F6               	movwf	___lmul@multiplicand+1
 28547  2B9C  306D               	movlw	109
 28548  2B9D  00F5               	movwf	___lmul@multiplicand
 28549  2B9E  31A8  20D6  31AB   	fcall	___lmul
 28550  2BA1  0874               	movf	?___lmul+3,w
 28551  2BA2  0021               	movlb	1	; select bank1
 28552  2BA3  00D6               	movwf	(_randx+3)^(0+128)
 28553  2BA4  0873               	movf	?___lmul+2,w
 28554  2BA5  00D5               	movwf	(_randx+2)^(0+128)
 28555  2BA6  0872               	movf	?___lmul+1,w
 28556  2BA7  00D4               	movwf	(_randx+1)^(0+128)
 28557  2BA8  0871               	movf	?___lmul,w
 28558  2BA9  00D3               	movwf	_randx^(0+128)
 28559  2BAA  3039               	movlw	57
 28560  2BAB  07D3               	addwf	_randx^(0+128),f
 28561  2BAC  3030               	movlw	48
 28562  2BAD  3DD4               	addwfc	(_randx+1)^(0+128),f
 28563  2BAE  3000               	movlw	0
 28564  2BAF  3DD5               	addwfc	(_randx+2)^(0+128),f
 28565  2BB0  3000               	movlw	0
 28566  2BB1  3DD6               	addwfc	(_randx+3)^(0+128),f
 28567  2BB2  0853               	movf	_randx^(0+128),w
 28568  2BB3  0020               	movlb	0	; select bank0
 28569  2BB4  00A6               	movwf	??_rand
 28570  2BB5  0021               	movlb	1	; select bank1
 28571  2BB6  0854               	movf	(_randx+1)^(0+128),w
 28572  2BB7  0020               	movlb	0	; select bank0
 28573  2BB8  00A7               	movwf	??_rand+1
 28574  2BB9  0021               	movlb	1	; select bank1
 28575  2BBA  0855               	movf	(_randx+2)^(0+128),w
 28576  2BBB  0020               	movlb	0	; select bank0
 28577  2BBC  00A8               	movwf	??_rand+2
 28578  2BBD  0021               	movlb	1	; select bank1
 28579  2BBE  0856               	movf	(_randx+3)^(0+128),w
 28580  2BBF  0020               	movlb	0	; select bank0
 28581  2BC0  00A9               	movwf	??_rand+3
 28582  2BC1  3010               	movlw	16
 28583  2BC2  00AA               	movwf	??_rand+4
 28584  2BC3                     u4585:	
 28585  2BC3  37A9               	asrf	??_rand+3,f
 28586  2BC4  0CA8               	rrf	??_rand+2,f
 28587  2BC5  0CA7               	rrf	??_rand+1,f
 28588  2BC6  0CA6               	rrf	??_rand,f
 28589  2BC7  0BAA               	decfsz	??_rand+4,f
 28590  2BC8  2BC3               	goto	u4585
 28591  2BC9  30FF               	movlw	255
 28592  2BCA  0526               	andwf	??_rand,w
 28593  2BCB  00A4               	movwf	?_rand
 28594  2BCC  307F               	movlw	127
 28595  2BCD  0527               	andwf	??_rand+1,w
 28596  2BCE  00A5               	movwf	?_rand+1
 28597  2BCF  0008               	return
 28598  2BD0                     __end_of_rand:	
 28599                           
 28600                           	psect	text53
 28601  28D6                     __ptext53:	
 28602 ;; *************** function ___lmul *****************
 28603 ;; Defined at:
 28604 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul32.c"
 28605 ;; Parameters:    Size  Location     Type
 28606 ;;  multiplier      4    1[COMMON] unsigned long 
 28607 ;;  multiplicand    4    5[COMMON] unsigned long 
 28608 ;; Auto vars:     Size  Location     Type
 28609 ;;  product         4    0[BANK0 ] unsigned long 
 28610 ;; Return value:  Size  Location     Type
 28611 ;;                  4    1[COMMON] unsigned long 
 28612 ;; Registers used:
 28613 ;;		wreg, status,2, status,0
 28614 ;; Tracked objects:
 28615 ;;		On entry : 0/0
 28616 ;;		On exit  : 0/0
 28617 ;;		Unchanged: 0/0
 28618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28619 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28620 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28622 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28623 ;;Total ram usage:       12 bytes
 28624 ;; Hardware stack levels used:    1
 28625 ;; Hardware stack levels required when called:    4
 28626 ;; This function calls:
 28627 ;;		Nothing
 28628 ;; This function is called by:
 28629 ;;		_rand
 28630 ;; This function uses a non-reentrant model
 28631 ;;
 28632                           
 28633                           
 28634                           ;psect for function ___lmul
 28635  28D6                     ___lmul:	
 28636                           
 28637                           ;incstack = 0
 28638                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 28639  28D6  3000               	movlw	0
 28640  28D7  0020               	movlb	0	; select bank0
 28641  28D8  00A3               	movwf	___lmul@product+3
 28642  28D9  3000               	movlw	0
 28643  28DA  00A2               	movwf	___lmul@product+2
 28644  28DB  3000               	movlw	0
 28645  28DC  00A1               	movwf	___lmul@product+1
 28646  28DD  3000               	movlw	0
 28647  28DE  00A0               	movwf	___lmul@product
 28648  28DF                     l8080:	
 28649  28DF  1C71               	btfss	___lmul@multiplier,0
 28650  28E0  28EA               	goto	l8084
 28651  28E1  0875               	movf	___lmul@multiplicand,w
 28652  28E2  0020               	movlb	0	; select bank0
 28653  28E3  07A0               	addwf	___lmul@product,f
 28654  28E4  0876               	movf	___lmul@multiplicand+1,w
 28655  28E5  3DA1               	addwfc	___lmul@product+1,f
 28656  28E6  0877               	movf	___lmul@multiplicand+2,w
 28657  28E7  3DA2               	addwfc	___lmul@product+2,f
 28658  28E8  0878               	movf	___lmul@multiplicand+3,w
 28659  28E9  3DA3               	addwfc	___lmul@product+3,f
 28660  28EA                     l8084:	
 28661  28EA  3001               	movlw	1
 28662  28EB                     u4535:	
 28663  28EB  35F5               	lslf	___lmul@multiplicand,f
 28664  28EC  0DF6               	rlf	___lmul@multiplicand+1,f
 28665  28ED  0DF7               	rlf	___lmul@multiplicand+2,f
 28666  28EE  0DF8               	rlf	___lmul@multiplicand+3,f
 28667  28EF  0B89               	decfsz	9,f
 28668  28F0  28EB               	goto	u4535
 28669  28F1  3001               	movlw	1
 28670  28F2                     u4545:	
 28671  28F2  36F4               	lsrf	___lmul@multiplier+3,f
 28672  28F3  0CF3               	rrf	___lmul@multiplier+2,f
 28673  28F4  0CF2               	rrf	___lmul@multiplier+1,f
 28674  28F5  0CF1               	rrf	___lmul@multiplier,f
 28675  28F6  0B89               	decfsz	9,f
 28676  28F7  28F2               	goto	u4545
 28677  28F8  0874               	movf	___lmul@multiplier+3,w
 28678  28F9  0473               	iorwf	___lmul@multiplier+2,w
 28679  28FA  0472               	iorwf	___lmul@multiplier+1,w
 28680  28FB  0471               	iorwf	___lmul@multiplier,w
 28681  28FC  1D03               	skipz
 28682  28FD  28DF               	goto	l8080
 28683  28FE  0020               	movlb	0	; select bank0
 28684  28FF  0823               	movf	___lmul@product+3,w
 28685  2900  00F4               	movwf	?___lmul+3
 28686  2901  0822               	movf	___lmul@product+2,w
 28687  2902  00F3               	movwf	?___lmul+2
 28688  2903  0821               	movf	___lmul@product+1,w
 28689  2904  00F2               	movwf	?___lmul+1
 28690  2905  0820               	movf	___lmul@product,w
 28691  2906  00F1               	movwf	?___lmul
 28692  2907  0008               	return
 28693  2908                     __end_of___lmul:	
 28694                           
 28695                           	psect	text54
 28696  2123                     __ptext54:	
 28697 ;; *************** function ___almod *****************
 28698 ;; Defined at:
 28699 ;;		line 5 in file "/Applications/microchip/xc8/v1.42/sources/common/almod.c"
 28700 ;; Parameters:    Size  Location     Type
 28701 ;;  divisor         4   11[BANK0 ] long 
 28702 ;;  dividend        4   15[BANK0 ] long 
 28703 ;; Auto vars:     Size  Location     Type
 28704 ;;  sign            1   11[COMMON] unsigned char 
 28705 ;;  counter         1   10[COMMON] unsigned char 
 28706 ;; Return value:  Size  Location     Type
 28707 ;;                  4   11[BANK0 ] long 
 28708 ;; Registers used:
 28709 ;;		wreg, status,2, status,0
 28710 ;; Tracked objects:
 28711 ;;		On entry : 0/0
 28712 ;;		On exit  : 0/0
 28713 ;;		Unchanged: 0/0
 28714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28715 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28716 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28717 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28718 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28719 ;;Total ram usage:       11 bytes
 28720 ;; Hardware stack levels used:    1
 28721 ;; Hardware stack levels required when called:    4
 28722 ;; This function calls:
 28723 ;;		Nothing
 28724 ;; This function is called by:
 28725 ;;		_led_rand
 28726 ;; This function uses a non-reentrant model
 28727 ;;
 28728                           
 28729                           
 28730                           ;psect for function ___almod
 28731  2123                     ___almod:	
 28732                           
 28733                           ;incstack = 0
 28734                           ; Regs used in ___almod: [wreg+status,2+status,0]
 28735  2123  01FB               	clrf	___almod@sign
 28736  2124  0020               	movlb	0	; select bank0
 28737  2125  1FB2               	btfss	___almod@dividend+3,7
 28738  2126  2934               	goto	l1745
 28739  2127  09AF               	comf	___almod@dividend,f
 28740  2128  09B0               	comf	___almod@dividend+1,f
 28741  2129  09B1               	comf	___almod@dividend+2,f
 28742  212A  09B2               	comf	___almod@dividend+3,f
 28743  212B  0AAF               	incf	___almod@dividend,f
 28744  212C  1903               	skipnz
 28745  212D  0AB0               	incf	___almod@dividend+1,f
 28746  212E  1903               	skipnz
 28747  212F  0AB1               	incf	___almod@dividend+2,f
 28748  2130  1903               	skipnz
 28749  2131  0AB2               	incf	___almod@dividend+3,f
 28750  2132  01FB               	clrf	___almod@sign
 28751  2133  0AFB               	incf	___almod@sign,f
 28752  2134                     l1745:	
 28753  2134  1FAE               	btfss	___almod@divisor+3,7
 28754  2135  2941               	goto	l8132
 28755  2136  09AB               	comf	___almod@divisor,f
 28756  2137  09AC               	comf	___almod@divisor+1,f
 28757  2138  09AD               	comf	___almod@divisor+2,f
 28758  2139  09AE               	comf	___almod@divisor+3,f
 28759  213A  0AAB               	incf	___almod@divisor,f
 28760  213B  1903               	skipnz
 28761  213C  0AAC               	incf	___almod@divisor+1,f
 28762  213D  1903               	skipnz
 28763  213E  0AAD               	incf	___almod@divisor+2,f
 28764  213F  1903               	skipnz
 28765  2140  0AAE               	incf	___almod@divisor+3,f
 28766  2141                     l8132:	
 28767  2141  082E               	movf	___almod@divisor+3,w
 28768  2142  042D               	iorwf	___almod@divisor+2,w
 28769  2143  042C               	iorwf	___almod@divisor+1,w
 28770  2144  042B               	iorwf	___almod@divisor,w
 28771  2145  1903               	skipnz
 28772  2146  297A               	goto	l8148
 28773  2147  01FA               	clrf	___almod@counter
 28774  2148  0AFA               	incf	___almod@counter,f
 28775  2149                     l8138:	
 28776  2149  1BAE               	btfsc	___almod@divisor+3,7
 28777  214A  2957               	goto	l8140
 28778  214B  3001               	movlw	1
 28779  214C                     u4625:	
 28780  214C  35AB               	lslf	___almod@divisor,f
 28781  214D  0DAC               	rlf	___almod@divisor+1,f
 28782  214E  0DAD               	rlf	___almod@divisor+2,f
 28783  214F  0DAE               	rlf	___almod@divisor+3,f
 28784  2150  0B89               	decfsz	9,f
 28785  2151  294C               	goto	u4625
 28786  2152  3001               	movlw	1
 28787  2153  00F9               	movwf	??___almod
 28788  2154  0879               	movf	??___almod,w
 28789  2155  07FA               	addwf	___almod@counter,f
 28790  2156  2949               	goto	l8138
 28791  2157                     l8140:	
 28792  2157  082E               	movf	___almod@divisor+3,w
 28793  2158  0232               	subwf	___almod@dividend+3,w
 28794  2159  1D03               	skipz
 28795  215A  2965               	goto	u4645
 28796  215B  082D               	movf	___almod@divisor+2,w
 28797  215C  0231               	subwf	___almod@dividend+2,w
 28798  215D  1D03               	skipz
 28799  215E  2965               	goto	u4645
 28800  215F  082C               	movf	___almod@divisor+1,w
 28801  2160  0230               	subwf	___almod@dividend+1,w
 28802  2161  1D03               	skipz
 28803  2162  2965               	goto	u4645
 28804  2163  082B               	movf	___almod@divisor,w
 28805  2164  022F               	subwf	___almod@dividend,w
 28806  2165                     u4645:	
 28807  2165  1C03               	skipc
 28808  2166  296F               	goto	l8144
 28809  2167  082B               	movf	___almod@divisor,w
 28810  2168  02AF               	subwf	___almod@dividend,f
 28811  2169  082C               	movf	___almod@divisor+1,w
 28812  216A  3BB0               	subwfb	___almod@dividend+1,f
 28813  216B  082D               	movf	___almod@divisor+2,w
 28814  216C  3BB1               	subwfb	___almod@dividend+2,f
 28815  216D  082E               	movf	___almod@divisor+3,w
 28816  216E  3BB2               	subwfb	___almod@dividend+3,f
 28817  216F                     l8144:	
 28818  216F  3001               	movlw	1
 28819  2170                     u4655:	
 28820  2170  36AE               	lsrf	___almod@divisor+3,f
 28821  2171  0CAD               	rrf	___almod@divisor+2,f
 28822  2172  0CAC               	rrf	___almod@divisor+1,f
 28823  2173  0CAB               	rrf	___almod@divisor,f
 28824  2174  0B89               	decfsz	9,f
 28825  2175  2970               	goto	u4655
 28826  2176  3001               	movlw	1
 28827  2177  02FA               	subwf	___almod@counter,f
 28828  2178  1D03               	btfss	3,2
 28829  2179  2957               	goto	l8140
 28830  217A                     l8148:	
 28831  217A  087B               	movf	___almod@sign,w
 28832  217B  1903               	btfsc	3,2
 28833  217C  2988               	goto	l8152
 28834  217D  09AF               	comf	___almod@dividend,f
 28835  217E  09B0               	comf	___almod@dividend+1,f
 28836  217F  09B1               	comf	___almod@dividend+2,f
 28837  2180  09B2               	comf	___almod@dividend+3,f
 28838  2181  0AAF               	incf	___almod@dividend,f
 28839  2182  1903               	skipnz
 28840  2183  0AB0               	incf	___almod@dividend+1,f
 28841  2184  1903               	skipnz
 28842  2185  0AB1               	incf	___almod@dividend+2,f
 28843  2186  1903               	skipnz
 28844  2187  0AB2               	incf	___almod@dividend+3,f
 28845  2188                     l8152:	
 28846  2188  0832               	movf	___almod@dividend+3,w
 28847  2189  00AE               	movwf	?___almod+3
 28848  218A  0831               	movf	___almod@dividend+2,w
 28849  218B  00AD               	movwf	?___almod+2
 28850  218C  0830               	movf	___almod@dividend+1,w
 28851  218D  00AC               	movwf	?___almod+1
 28852  218E  082F               	movf	___almod@dividend,w
 28853  218F  00AB               	movwf	?___almod
 28854  2190  0008               	return
 28855  2191                     __end_of___almod:	
 28856                           
 28857                           	psect	text55
 28858  2AC9                     __ptext55:	
 28859 ;; *************** function _led_curtain *****************
 28860 ;; Defined at:
 28861 ;;		line 169 in file "main.c"
 28862 ;; Parameters:    Size  Location     Type
 28863 ;;  counter         2   16[BANK0 ] unsigned int 
 28864 ;; Auto vars:     Size  Location     Type
 28865 ;;  size            2   22[BANK0 ] unsigned int 
 28866 ;;  leds            2   20[BANK0 ] unsigned int 
 28867 ;; Return value:  Size  Location     Type
 28868 ;;                  1    wreg      void 
 28869 ;; Registers used:
 28870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28871 ;; Tracked objects:
 28872 ;;		On entry : 0/0
 28873 ;;		On exit  : 0/0
 28874 ;;		Unchanged: 0/0
 28875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28876 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28877 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28878 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28879 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28880 ;;Total ram usage:        8 bytes
 28881 ;; Hardware stack levels used:    1
 28882 ;; Hardware stack levels required when called:    9
 28883 ;; This function calls:
 28884 ;;		___lwmod
 28885 ;;		_nullifyBadge_userLedsSet
 28886 ;; This function is called by:
 28887 ;;		_flashy_Main
 28888 ;;		_matrix_Main
 28889 ;; This function uses a non-reentrant model
 28890 ;;
 28891                           
 28892                           
 28893                           ;psect for function _led_curtain
 28894  2AC9                     _led_curtain:	
 28895                           
 28896                           ;main.c: 170: u16 size = sizeof(curtain_leds) / sizeof(curtain_leds[0]);
 28897                           
 28898                           ;incstack = 0
 28899                           ; Regs used in _led_curtain: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 28900  2AC9  300E               	movlw	14
 28901  2ACA  0020               	movlb	0	; select bank0
 28902  2ACB  00B6               	movwf	led_curtain@size
 28903  2ACC  3000               	movlw	0
 28904  2ACD  00B7               	movwf	led_curtain@size+1
 28905                           
 28906                           ;main.c: 171: u16 leds = curtain_leds[counter % size];
 28907  2ACE  0837               	movf	led_curtain@size+1,w
 28908  2ACF  00AC               	movwf	___lwmod@divisor+1
 28909  2AD0  0836               	movf	led_curtain@size,w
 28910  2AD1  00AB               	movwf	___lwmod@divisor
 28911  2AD2  0831               	movf	led_curtain@counter+1,w
 28912  2AD3  00AE               	movwf	___lwmod@dividend+1
 28913  2AD4  0830               	movf	led_curtain@counter,w
 28914  2AD5  00AD               	movwf	___lwmod@dividend
 28915  2AD6  31B7  27A4  31AA   	fcall	___lwmod
 28916  2AD9  0020               	movlb	0	; select bank0
 28917  2ADA  082B               	movf	?___lwmod,w
 28918  2ADB  0709               	addwf	9,w
 28919  2ADC  3E3C               	addlw	(low (_curtain_leds| (0+1024)))& (0+255)
 28920  2ADD  0086               	movwf	6
 28921  2ADE  3004               	movlw	4	; select bank8/9
 28922  2ADF  0087               	movwf	7
 28923  2AE0  3F40               	moviw [0]fsr1
 28924  2AE1  00B4               	movwf	led_curtain@leds
 28925  2AE2  3F41               	moviw [1]fsr1
 28926  2AE3  00B5               	movwf	led_curtain@leds+1
 28927                           
 28928                           ;main.c: 173: size = sizeof(curtain_leds_inverse) / sizeof(curtain_leds_inverse[0]);
 28929  2AE4  300E               	movlw	14
 28930  2AE5  00B6               	movwf	led_curtain@size
 28931  2AE6  3000               	movlw	0
 28932  2AE7  00B7               	movwf	led_curtain@size+1
 28933                           
 28934                           ;main.c: 174: leds |= curtain_leds_inverse[counter % size];
 28935  2AE8  0837               	movf	led_curtain@size+1,w
 28936  2AE9  00AC               	movwf	___lwmod@divisor+1
 28937  2AEA  0836               	movf	led_curtain@size,w
 28938  2AEB  00AB               	movwf	___lwmod@divisor
 28939  2AEC  0831               	movf	led_curtain@counter+1,w
 28940  2AED  00AE               	movwf	___lwmod@dividend+1
 28941  2AEE  0830               	movf	led_curtain@counter,w
 28942  2AEF  00AD               	movwf	___lwmod@dividend
 28943  2AF0  31B7  27A4  31AA   	fcall	___lwmod
 28944  2AF3  0020               	movlb	0	; select bank0
 28945  2AF4  082B               	movf	?___lwmod,w
 28946  2AF5  0709               	addwf	9,w
 28947  2AF6  3E20               	addlw	(low (_curtain_leds_inverse| (0+1024)))& (0+255)
 28948  2AF7  0086               	movwf	6
 28949  2AF8  3004               	movlw	4	; select bank8/9
 28950  2AF9  0087               	movwf	7
 28951  2AFA  3F40               	moviw [0]fsr1
 28952  2AFB  00B2               	movwf	??_led_curtain
 28953  2AFC  3F41               	moviw [1]fsr1
 28954  2AFD  00B3               	movwf	??_led_curtain+1
 28955  2AFE  0832               	movf	??_led_curtain,w
 28956  2AFF  04B4               	iorwf	led_curtain@leds,f
 28957  2B00  0833               	movf	??_led_curtain+1,w
 28958  2B01  04B5               	iorwf	led_curtain@leds+1,f
 28959                           
 28960                           ;main.c: 176: nullifyBadge_userLedsSet(&badge_inst, leds);
 28961  2B02  0835               	movf	led_curtain@leds+1,w
 28962  2B03  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28963  2B04  0834               	movf	led_curtain@leds,w
 28964  2B05  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28965  2B06  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28966  2B07  31B5  2513         	fcall	_nullifyBadge_userLedsSet
 28967  2B09  0008               	return
 28968  2B0A                     __end_of_led_curtain:	
 28969                           
 28970                           	psect	text56
 28971  341D                     __ptext56:	
 28972 ;; *************** function _led_circle *****************
 28973 ;; Defined at:
 28974 ;;		line 188 in file "main.c"
 28975 ;; Parameters:    Size  Location     Type
 28976 ;;  count           2   16[BANK0 ] unsigned int 
 28977 ;; Auto vars:     Size  Location     Type
 28978 ;;		None
 28979 ;; Return value:  Size  Location     Type
 28980 ;;                  1    wreg      void 
 28981 ;; Registers used:
 28982 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28983 ;; Tracked objects:
 28984 ;;		On entry : 0/0
 28985 ;;		On exit  : 0/0
 28986 ;;		Unchanged: 0/0
 28987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28988 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28991 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28992 ;;Total ram usage:        2 bytes
 28993 ;; Hardware stack levels used:    1
 28994 ;; Hardware stack levels required when called:    9
 28995 ;; This function calls:
 28996 ;;		_nullifyBadge_userLedsSet
 28997 ;; This function is called by:
 28998 ;;		_flashy_Main
 28999 ;;		_slot_Running_Animation
 29000 ;; This function uses a non-reentrant model
 29001 ;;
 29002                           
 29003                           
 29004                           ;psect for function _led_circle
 29005  341D                     _led_circle:	
 29006                           
 29007                           ;main.c: 190: nullifyBadge_userLedsSet(&badge_inst,count);
 29008                           
 29009                           ;incstack = 0
 29010                           ; Regs used in _led_circle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29011  341D  0020               	movlb	0	; select bank0
 29012  341E  0831               	movf	led_circle@count+1,w
 29013  341F  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29014  3420  0830               	movf	led_circle@count,w
 29015  3421  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29016  3422  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29017  3423  31B5  2513         	fcall	_nullifyBadge_userLedsSet
 29018  3425  0008               	return
 29019  3426                     __end_of_led_circle:	
 29020                           
 29021                           	psect	text57
 29022  20BE                     __ptext57:	
 29023 ;; *************** function _led_Parody *****************
 29024 ;; Defined at:
 29025 ;;		line 203 in file "main.c"
 29026 ;; Parameters:    Size  Location     Type
 29027 ;;  count           2   16[BANK0 ] unsigned int 
 29028 ;; Auto vars:     Size  Location     Type
 29029 ;;  size            2   22[BANK0 ] unsigned int 
 29030 ;;  leds            2   20[BANK0 ] unsigned int 
 29031 ;; Return value:  Size  Location     Type
 29032 ;;                  1    wreg      void 
 29033 ;; Registers used:
 29034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29035 ;; Tracked objects:
 29036 ;;		On entry : 0/0
 29037 ;;		On exit  : 0/0
 29038 ;;		Unchanged: 0/0
 29039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29040 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29041 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29042 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29043 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29044 ;;Total ram usage:        8 bytes
 29045 ;; Hardware stack levels used:    1
 29046 ;; Hardware stack levels required when called:    9
 29047 ;; This function calls:
 29048 ;;		___lwmod
 29049 ;;		_nullifyBadge_userLedsSet
 29050 ;; This function is called by:
 29051 ;;		_flashy_Main
 29052 ;;		_matrix_Main
 29053 ;; This function uses a non-reentrant model
 29054 ;;
 29055                           
 29056                           
 29057                           ;psect for function _led_Parody
 29058  20BE                     _led_Parody:	
 29059                           
 29060                           ;main.c: 204: u16 size;
 29061                           ;main.c: 205: u16 leds;
 29062                           ;main.c: 207: if (count % 30 == 0){
 29063                           
 29064                           ;incstack = 0
 29065                           ; Regs used in _led_Parody: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29066  20BE  301E               	movlw	30
 29067  20BF  0020               	movlb	0	; select bank0
 29068  20C0  00AB               	movwf	___lwmod@divisor
 29069  20C1  3000               	movlw	0
 29070  20C2  00AC               	movwf	___lwmod@divisor+1
 29071  20C3  0831               	movf	led_Parody@count+1,w
 29072  20C4  00AE               	movwf	___lwmod@dividend+1
 29073  20C5  0830               	movf	led_Parody@count,w
 29074  20C6  00AD               	movwf	___lwmod@dividend
 29075  20C7  31B7  27A4  31A0   	fcall	___lwmod
 29076  20CA  0020               	movlb	0	; select bank0
 29077  20CB  082B               	movf	?___lwmod,w
 29078  20CC  042C               	iorwf	?___lwmod+1,w
 29079  20CD  1D03               	btfss	3,2
 29080  20CE  28D4               	goto	l625
 29081                           
 29082                           ;main.c: 208: oddeven ^= 1 ;
 29083  20CF  3001               	movlw	1
 29084  20D0  0021               	movlb	1	; select bank1
 29085  20D1  06B8               	xorwf	_oddeven^(0+128),f
 29086  20D2  3000               	movlw	0
 29087  20D3  06B9               	xorwf	(_oddeven+1)^(0+128),f
 29088  20D4                     l625:	
 29089                           
 29090                           ;main.c: 209: }
 29091                           ;main.c: 211: if(count %2 == oddeven){
 29092  20D4  3001               	movlw	1
 29093  20D5  0020               	movlb	0	; select bank0
 29094  20D6  0530               	andwf	led_Parody@count,w
 29095  20D7  00B2               	movwf	??_led_Parody
 29096  20D8  3000               	movlw	0
 29097  20D9  0531               	andwf	led_Parody@count+1,w
 29098  20DA  00B3               	movwf	??_led_Parody+1
 29099  20DB  0021               	movlb	1	; select bank1
 29100  20DC  0839               	movf	(_oddeven+1)^(0+128),w
 29101  20DD  0020               	movlb	0	; select bank0
 29102  20DE  0633               	xorwf	??_led_Parody+1,w
 29103  20DF  1D03               	skipz
 29104  20E0  28E5               	goto	u4995
 29105  20E1  0021               	movlb	1	; select bank1
 29106  20E2  0838               	movf	_oddeven^(0+128),w
 29107  20E3  0020               	movlb	0	; select bank0
 29108  20E4  0632               	xorwf	??_led_Parody,w
 29109  20E5                     u4995:	
 29110  20E5  1D03               	skipz
 29111  20E6  2901               	goto	l8360
 29112                           
 29113                           ;main.c: 213: size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 29114  20E7  300E               	movlw	14
 29115  20E8  00B6               	movwf	led_Parody@size
 29116  20E9  3000               	movlw	0
 29117  20EA  00B7               	movwf	led_Parody@size+1
 29118                           
 29119                           ;main.c: 214: leds = roundabout_leds[count % size];
 29120  20EB  0837               	movf	led_Parody@size+1,w
 29121  20EC  00AC               	movwf	___lwmod@divisor+1
 29122  20ED  0836               	movf	led_Parody@size,w
 29123  20EE  00AB               	movwf	___lwmod@divisor
 29124  20EF  0831               	movf	led_Parody@count+1,w
 29125  20F0  00AE               	movwf	___lwmod@dividend+1
 29126  20F1  0830               	movf	led_Parody@count,w
 29127  20F2  00AD               	movwf	___lwmod@dividend
 29128  20F3  31B7  27A4  31A0   	fcall	___lwmod
 29129  20F6  0020               	movlb	0	; select bank0
 29130  20F7  082B               	movf	?___lwmod,w
 29131  20F8  0709               	addwf	9,w
 29132  20F9  3EBC               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 29133  20FA  0086               	movwf	6
 29134  20FB  3003               	movlw	3	; select bank7/8
 29135  20FC  0087               	movwf	7
 29136  20FD  3F40               	moviw [0]fsr1
 29137  20FE  00B4               	movwf	led_Parody@leds
 29138  20FF  3F41               	moviw [1]fsr1
 29139  2100  291A               	goto	L15
 29140  2101                     l8360:	
 29141                           ;main.c: 215: }
 29142                           
 29143                           
 29144                           ;main.c: 216: else{
 29145                           ;main.c: 217: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 29146  2101  300E               	movlw	14
 29147  2102  00B6               	movwf	led_Parody@size
 29148  2103  3000               	movlw	0
 29149  2104  00B7               	movwf	led_Parody@size+1
 29150                           
 29151                           ;main.c: 218: leds = roundabout_leds_inverse[count % size];
 29152  2105  0837               	movf	led_Parody@size+1,w
 29153  2106  00AC               	movwf	___lwmod@divisor+1
 29154  2107  0836               	movf	led_Parody@size,w
 29155  2108  00AB               	movwf	___lwmod@divisor
 29156  2109  0831               	movf	led_Parody@count+1,w
 29157  210A  00AE               	movwf	___lwmod@dividend+1
 29158  210B  0830               	movf	led_Parody@count,w
 29159  210C  00AD               	movwf	___lwmod@dividend
 29160  210D  31B7  27A4  31A0   	fcall	___lwmod
 29161  2110  0020               	movlb	0	; select bank0
 29162  2111  082B               	movf	?___lwmod,w
 29163  2112  0709               	addwf	9,w
 29164  2113  3EA0               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 29165  2114  0086               	movwf	6
 29166  2115  3003               	movlw	3	; select bank7/8
 29167  2116  0087               	movwf	7
 29168  2117  3F40               	moviw [0]fsr1
 29169  2118  00B4               	movwf	led_Parody@leds
 29170  2119  3F41               	moviw [1]fsr1
 29171  211A                     L15:	
 29172  211A  00B5               	movwf	led_Parody@leds+1
 29173                           
 29174                           ;main.c: 219: }
 29175                           ;main.c: 220: nullifyBadge_userLedsSet(&badge_inst, leds);
 29176  211B  0835               	movf	led_Parody@leds+1,w
 29177  211C  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29178  211D  0834               	movf	led_Parody@leds,w
 29179  211E  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29180  211F  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29181  2120  31B5  2513         	fcall	_nullifyBadge_userLedsSet
 29182  2122  0008               	return
 29183  2123                     __end_of_led_Parody:	
 29184                           
 29185                           	psect	text58
 29186  3513                     __ptext58:	
 29187 ;; *************** function _nullifyBadge_userLedsSet *****************
 29188 ;; Defined at:
 29189 ;;		line 164 in file "nullifyBadge.c"
 29190 ;; Parameters:    Size  Location     Type
 29191 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 29192 ;;		 -> badge_inst(18), 
 29193 ;;  userLedData     2   13[BANK0 ] unsigned int 
 29194 ;; Auto vars:     Size  Location     Type
 29195 ;;  badge           1   15[BANK0 ] PTR struct t_nullifyBadg
 29196 ;;		 -> badge_inst(18), 
 29197 ;; Return value:  Size  Location     Type
 29198 ;;                  1    wreg      void 
 29199 ;; Registers used:
 29200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29201 ;; Tracked objects:
 29202 ;;		On entry : 0/0
 29203 ;;		On exit  : 0/0
 29204 ;;		Unchanged: 0/0
 29205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29206 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29209 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29210 ;;Total ram usage:        3 bytes
 29211 ;; Hardware stack levels used:    1
 29212 ;; Hardware stack levels required when called:    8
 29213 ;; This function calls:
 29214 ;;		_displayL2_SetUserLeds
 29215 ;; This function is called by:
 29216 ;;		_led_roundabout
 29217 ;;		_led_curtain
 29218 ;;		_led_rand
 29219 ;;		_led_circle
 29220 ;;		_let_alternate
 29221 ;;		_led_Parody
 29222 ;;		_menu_display_option
 29223 ;;		_flashy_Main
 29224 ;;		_locked_Main
 29225 ;; This function uses a non-reentrant model
 29226 ;;
 29227                           
 29228                           
 29229                           ;psect for function _nullifyBadge_userLedsSet
 29230  3513                     _nullifyBadge_userLedsSet:	
 29231                           
 29232                           ;incstack = 0
 29233                           ; Regs used in _nullifyBadge_userLedsSet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 29234                           ;nullifyBadge_userLedsSet@badge stored from wreg
 29235  3513  0020               	movlb	0	; select bank0
 29236  3514  00AF               	movwf	nullifyBadge_userLedsSet@badge
 29237                           
 29238                           ;nullifyBadge.c: 165: if (badge_locked) {
 29239  3515  0021               	movlb	1	; select bank1
 29240  3516  0844               	movf	_badge_locked^(0+128),w
 29241  3517  1903               	btfsc	3,2
 29242  3518  2D1B               	goto	l8112
 29243                           
 29244                           ;nullifyBadge.c: 166: userLedData |= 1024;
 29245  3519  0020               	movlb	0	; select bank0
 29246  351A  152E               	bsf	nullifyBadge_userLedsSet@userLedData+1,2
 29247  351B                     l8112:	
 29248                           
 29249                           ;nullifyBadge.c: 167: }
 29250                           ;nullifyBadge.c: 168: displayL2_SetUserLeds(&badge->display, userLedData);
 29251  351B  0020               	movlb	0	; select bank0
 29252  351C  082E               	movf	nullifyBadge_userLedsSet@userLedData+1,w
 29253  351D  00AC               	movwf	displayL2_SetUserLeds@userLedData+1
 29254  351E  082D               	movf	nullifyBadge_userLedsSet@userLedData,w
 29255  351F  00AB               	movwf	displayL2_SetUserLeds@userLedData
 29256  3520  082F               	movf	nullifyBadge_userLedsSet@badge,w
 29257  3521  31B6  26CB         	fcall	_displayL2_SetUserLeds
 29258  3523  0008               	return
 29259  3524                     __end_of_nullifyBadge_userLedsSet:	
 29260                           
 29261                           	psect	text59
 29262  36CB                     __ptext59:	
 29263 ;; *************** function _displayL2_SetUserLeds *****************
 29264 ;; Defined at:
 29265 ;;		line 88 in file "nullifyBadge_displayL2.c"
 29266 ;; Parameters:    Size  Location     Type
 29267 ;;  display         1    wreg     PTR struct t_nullifyDisp
 29268 ;;		 -> badge_inst(18), 
 29269 ;;  userLedData     2   11[BANK0 ] unsigned int 
 29270 ;; Auto vars:     Size  Location     Type
 29271 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 29272 ;;		 -> badge_inst(18), 
 29273 ;; Return value:  Size  Location     Type
 29274 ;;                  1    wreg      void 
 29275 ;; Registers used:
 29276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29277 ;; Tracked objects:
 29278 ;;		On entry : 0/0
 29279 ;;		On exit  : 0/0
 29280 ;;		Unchanged: 0/0
 29281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29282 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29283 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29285 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29286 ;;Total ram usage:        3 bytes
 29287 ;; Hardware stack levels used:    1
 29288 ;; Hardware stack levels required when called:    7
 29289 ;; This function calls:
 29290 ;;		_displayL1_SetUserLed
 29291 ;;		_displayL1_Update
 29292 ;; This function is called by:
 29293 ;;		_nullifyBadge_userLedsSet
 29294 ;;		_nullifyBadge_userLedsSetForce
 29295 ;; This function uses a non-reentrant model
 29296 ;;
 29297                           
 29298                           
 29299                           ;psect for function _displayL2_SetUserLeds
 29300  36CB                     _displayL2_SetUserLeds:	
 29301                           
 29302                           ;incstack = 0
 29303                           ; Regs used in _displayL2_SetUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 29304                           ;displayL2_SetUserLeds@display stored from wreg
 29305  36CB  00FB               	movwf	displayL2_SetUserLeds@display
 29306                           
 29307                           ;nullifyBadge_displayL2.c: 89: display->ledVect = userLedData;
 29308  36CC  087B               	movf	displayL2_SetUserLeds@display,w
 29309  36CD  3E05               	addlw	5
 29310  36CE  0086               	movwf	6
 29311  36CF  3001               	movlw	1	; select bank2/3
 29312  36D0  0087               	movwf	7
 29313  36D1  0020               	movlb	0	; select bank0
 29314  36D2  082B               	movf	displayL2_SetUserLeds@userLedData,w
 29315  36D3  3FC0               	movwi [0]fsr1
 29316  36D4  082C               	movf	displayL2_SetUserLeds@userLedData+1,w
 29317  36D5  3FC1               	movwi [1]fsr1
 29318                           
 29319                           ;nullifyBadge_displayL2.c: 90: displayL1_SetUserLed(&display->display_l1, display->ledVe
      +                          ct);
 29320  36D6  087B               	movf	displayL2_SetUserLeds@display,w
 29321  36D7  3E05               	addlw	5
 29322  36D8  0086               	movwf	6
 29323  36D9  3001               	movlw	1	; select bank2/3
 29324  36DA  0087               	movwf	7
 29325  36DB  3F40               	moviw [0]fsr1
 29326  36DC  00F1               	movwf	displayL1_SetUserLed@userLedVect
 29327  36DD  3F41               	moviw [1]fsr1
 29328  36DE  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 29329  36DF  087B               	movf	displayL2_SetUserLeds@display,w
 29330  36E0  3E07               	addlw	7
 29331  36E1  31B5  2535  31B6   	fcall	_displayL1_SetUserLed
 29332                           
 29333                           ;nullifyBadge_displayL2.c: 91: displayL1_Update(&display->display_l1);
 29334  36E4  087B               	movf	displayL2_SetUserLeds@display,w
 29335  36E5  3E07               	addlw	7
 29336  36E6  31B5  2502         	fcall	_displayL1_Update
 29337  36E8  0008               	return
 29338  36E9                     __end_of_displayL2_SetUserLeds:	
 29339                           
 29340                           	psect	text60
 29341  3535                     __ptext60:	
 29342 ;; *************** function _displayL1_SetUserLed *****************
 29343 ;; Defined at:
 29344 ;;		line 71 in file "nullifyBadge_displayL1.c"
 29345 ;; Parameters:    Size  Location     Type
 29346 ;;  display         1    wreg     PTR struct t_nullifyDisp
 29347 ;;		 -> badge_inst(18), 
 29348 ;;  userLedVect     2    1[COMMON] unsigned int 
 29349 ;; Auto vars:     Size  Location     Type
 29350 ;;  display         1    4[COMMON] PTR struct t_nullifyDisp
 29351 ;;		 -> badge_inst(18), 
 29352 ;; Return value:  Size  Location     Type
 29353 ;;                  1    wreg      void 
 29354 ;; Registers used:
 29355 ;;		wreg, fsr1l, fsr1h, status,2
 29356 ;; Tracked objects:
 29357 ;;		On entry : 0/0
 29358 ;;		On exit  : 0/0
 29359 ;;		Unchanged: 0/0
 29360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29361 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29362 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29363 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29364 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29365 ;;Total ram usage:        4 bytes
 29366 ;; Hardware stack levels used:    1
 29367 ;; Hardware stack levels required when called:    4
 29368 ;; This function calls:
 29369 ;;		Nothing
 29370 ;; This function is called by:
 29371 ;;		_displayL2_SetUserLeds
 29372 ;;		_displayL2_ClrUserLeds
 29373 ;; This function uses a non-reentrant model
 29374 ;;
 29375                           
 29376                           
 29377                           ;psect for function _displayL1_SetUserLed
 29378  3535                     _displayL1_SetUserLed:	
 29379                           
 29380                           ;incstack = 0
 29381                           ; Regs used in _displayL1_SetUserLed: [wreg+fsr1l+fsr1h+status,2]
 29382                           ;displayL1_SetUserLed@display stored from wreg
 29383  3535  00F4               	movwf	displayL1_SetUserLed@display
 29384                           
 29385                           ;nullifyBadge_displayL1.c: 73: display->displayVect[0] = (u8) (userLedVect >> 8);
 29386  3536  0872               	movf	displayL1_SetUserLed@userLedVect+1,w
 29387  3537  00F3               	movwf	??_displayL1_SetUserLed
 29388  3538  0874               	movf	displayL1_SetUserLed@display,w
 29389  3539  0086               	movwf	6
 29390  353A  3001               	movlw	1	; select bank2/3
 29391  353B  0087               	movwf	7
 29392  353C  0873               	movf	??_displayL1_SetUserLed,w
 29393  353D  0081               	movwf	1
 29394                           
 29395                           ;nullifyBadge_displayL1.c: 74: display->displayVect[1] = (u8) (userLedVect & 0xFF);
 29396  353E  0871               	movf	displayL1_SetUserLed@userLedVect,w
 29397  353F  00F3               	movwf	??_displayL1_SetUserLed
 29398  3540  0A74               	incf	displayL1_SetUserLed@display,w
 29399  3541  0086               	movwf	6
 29400  3542  3001               	movlw	1	; select bank2/3
 29401  3543  0087               	movwf	7
 29402  3544  0873               	movf	??_displayL1_SetUserLed,w
 29403  3545  0081               	movwf	1
 29404  3546  0008               	return
 29405  3547                     __end_of_displayL1_SetUserLed:	
 29406                           
 29407                           	psect	text61
 29408  1A00                     __ptext61:	
 29409 ;; *************** function _flashy_display_option *****************
 29410 ;; Defined at:
 29411 ;;		line 105 in file "flashy_task.c"
 29412 ;; Parameters:    Size  Location     Type
 29413 ;;  data            2   44[BANK0 ] PTR struct t_flashy_task
 29414 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 29415 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 29416 ;; Auto vars:     Size  Location     Type
 29417 ;;		None
 29418 ;; Return value:  Size  Location     Type
 29419 ;;                  1    wreg      void 
 29420 ;; Registers used:
 29421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29422 ;; Tracked objects:
 29423 ;;		On entry : 0/0
 29424 ;;		On exit  : 0/0
 29425 ;;		Unchanged: 0/0
 29426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29427 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29430 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29431 ;;Total ram usage:        2 bytes
 29432 ;; Hardware stack levels used:    1
 29433 ;; Hardware stack levels required when called:   10
 29434 ;; This function calls:
 29435 ;;		_marquee
 29436 ;;		_marquee_speedy
 29437 ;;		_nullifyBadge_segDisplayForceUpdate
 29438 ;;		_nullifyBadge_segDisplayPutStr
 29439 ;; This function is called by:
 29440 ;;		_flashy_Main
 29441 ;; This function uses a non-reentrant model
 29442 ;;
 29443                           
 29444                           
 29445                           ;psect for function _flashy_display_option
 29446  1A00                     _flashy_display_option:	
 29447                           
 29448                           ;flashy_task.c: 106: if (flashy_option_idx == 0){
 29449                           
 29450                           ;incstack = 0
 29451                           ; Regs used in _flashy_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 29452  1A00  0021               	movlb	1	; select bank1
 29453  1A01  0828               	movf	_flashy_option_idx^(0+128),w
 29454  1A02  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 29455  1A03  1D03               	btfss	3,2
 29456  1A04  2A20               	goto	l8454
 29457                           
 29458                           ;flashy_task.c: 107: nullifyBadge_segDisplayPutStr(data->badge, flashy_option[flashy_opt
      +                          ion_idx]);
 29459  1A05  3528               	lslf	_flashy_option_idx^(0+128),w
 29460  1A06  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 29461  1A07  0086               	movwf	6
 29462  1A08  3005               	movlw	5	; select bank10/11
 29463  1A09  0087               	movwf	7
 29464  1A0A  3F40               	moviw [0]fsr1
 29465  1A0B  0020               	movlb	0	; select bank0
 29466  1A0C  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 29467  1A0D  3F41               	moviw [1]fsr1
 29468  1A0E  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 29469  1A0F  084C               	movf	flashy_display_option@data,w
 29470  1A10  0086               	movwf	6
 29471  1A11  084D               	movf	flashy_display_option@data+1,w
 29472  1A12  0087               	movwf	7
 29473  1A13  0801               	movf	1,w
 29474  1A14  31B4  243A  319A   	fcall	_nullifyBadge_segDisplayPutStr
 29475                           
 29476                           ;flashy_task.c: 108: nullifyBadge_segDisplayForceUpdate(data->badge);
 29477  1A17  0020               	movlb	0	; select bank0
 29478  1A18  084C               	movf	flashy_display_option@data,w
 29479  1A19  0086               	movwf	6
 29480  1A1A  084D               	movf	flashy_display_option@data+1,w
 29481  1A1B  0087               	movwf	7
 29482  1A1C  0801               	movf	1,w
 29483  1A1D  31B3  23F8         	fcall	_nullifyBadge_segDisplayForceUpdate
 29484                           
 29485                           ;flashy_task.c: 109: }
 29486  1A1F  0008               	return
 29487  1A20                     l8454:	
 29488                           
 29489                           ;flashy_task.c: 110: else {
 29490                           ;flashy_task.c: 111: if (data->display_state==FLASHY_STATE_DISPLAY ){
 29491  1A20  0020               	movlb	0	; select bank0
 29492  1A21  084C               	movf	flashy_display_option@data,w
 29493  1A22  0086               	movwf	6
 29494  1A23  084D               	movf	flashy_display_option@data+1,w
 29495  1A24  0087               	movwf	7
 29496  1A25  3146               	addfsr 1,6
 29497  1A26  0801               	movf	1,w
 29498  1A27  1D03               	btfss	3,2
 29499  1A28  2A48               	goto	l8458
 29500                           
 29501                           ;flashy_task.c: 113: marquee_speedy(flashy_option[flashy_option_idx], data->noholdCount,
      +                           flashy_scroll_rate);
 29502  1A29  0021               	movlb	1	; select bank1
 29503  1A2A  3528               	lslf	_flashy_option_idx^(0+128),w
 29504  1A2B  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 29505  1A2C  0086               	movwf	6
 29506  1A2D  3005               	movlw	5	; select bank10/11
 29507  1A2E  0087               	movwf	7
 29508  1A2F  3F40               	moviw [0]fsr1
 29509  1A30  0020               	movlb	0	; select bank0
 29510  1A31  00BA               	movwf	marquee_speedy@string
 29511  1A32  3F41               	moviw [1]fsr1
 29512  1A33  00BB               	movwf	marquee_speedy@string+1
 29513  1A34  084C               	movf	flashy_display_option@data,w
 29514  1A35  0086               	movwf	6
 29515  1A36  084D               	movf	flashy_display_option@data+1,w
 29516  1A37  0087               	movwf	7
 29517  1A38  315C               	addfsr 1,28
 29518  1A39  3F40               	moviw [0]fsr1
 29519  1A3A  00BC               	movwf	marquee_speedy@count
 29520  1A3B  3F41               	moviw [1]fsr1
 29521  1A3C  00BD               	movwf	marquee_speedy@count+1
 29522  1A3D  0021               	movlb	1	; select bank1
 29523  1A3E  082D               	movf	(_flashy_scroll_rate+1)^(0+128),w
 29524  1A3F  0020               	movlb	0	; select bank0
 29525  1A40  00BF               	movwf	marquee_speedy@multiplier+1
 29526  1A41  0021               	movlb	1	; select bank1
 29527  1A42  082C               	movf	_flashy_scroll_rate^(0+128),w
 29528  1A43  0020               	movlb	0	; select bank0
 29529  1A44  00BE               	movwf	marquee_speedy@multiplier
 29530  1A45  31A2  2202         	fcall	_marquee_speedy
 29531                           
 29532                           ;flashy_task.c: 114: }
 29533  1A47  0008               	return
 29534  1A48                     l8458:	
 29535                           
 29536                           ;flashy_task.c: 115: else{
 29537                           ;flashy_task.c: 116: marquee(flashy_option[flashy_option_idx], data->noholdCount);
 29538  1A48  0021               	movlb	1	; select bank1
 29539  1A49  3528               	lslf	_flashy_option_idx^(0+128),w
 29540  1A4A  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 29541  1A4B  0086               	movwf	6
 29542  1A4C  3005               	movlw	5	; select bank10/11
 29543  1A4D  0087               	movwf	7
 29544  1A4E  3F40               	moviw [0]fsr1
 29545  1A4F  0020               	movlb	0	; select bank0
 29546  1A50  00BA               	movwf	marquee@string
 29547  1A51  3F41               	moviw [1]fsr1
 29548  1A52  00BB               	movwf	marquee@string+1
 29549  1A53  084C               	movf	flashy_display_option@data,w
 29550  1A54  0086               	movwf	6
 29551  1A55  084D               	movf	flashy_display_option@data+1,w
 29552  1A56  0087               	movwf	7
 29553  1A57  315C               	addfsr 1,28
 29554  1A58  3F40               	moviw [0]fsr1
 29555  1A59  00BC               	movwf	marquee@count
 29556  1A5A  3F41               	moviw [1]fsr1
 29557  1A5B  00BD               	movwf	marquee@count+1
 29558  1A5C  31A2  2275         	fcall	_marquee
 29559  1A5E  0008               	return
 29560  1A5F                     __end_of_flashy_display_option:	
 29561                           
 29562                           	psect	text62
 29563  2202                     __ptext62:	
 29564 ;; *************** function _marquee_speedy *****************
 29565 ;; Defined at:
 29566 ;;		line 133 in file "main.c"
 29567 ;; Parameters:    Size  Location     Type
 29568 ;;  string          2   26[BANK0 ] PTR unsigned char 
 29569 ;;		 -> STR_81(23), STR_80(27), STR_79(8), STR_78(7), 
 29570 ;;		 -> STR_77(8), STR_76(6), STR_75(10), STR_74(5), 
 29571 ;;		 -> STR_73(7), STR_72(9), STR_71(7), STR_70(7), 
 29572 ;;		 -> STR_39(5), STR_38(43), STR_37(13), STR_36(47), 
 29573 ;;		 -> STR_35(17), STR_34(120), STR_33(34), STR_32(16), 
 29574 ;;		 -> STR_31(35), STR_30(15), STR_29(12), STR_28(29), 
 29575 ;;		 -> STR_27(19), STR_26(17), STR_25(40), STR_24(27), 
 29576 ;;		 -> STR_23(29), STR_22(30), STR_21(36), STR_20(28), 
 29577 ;;		 -> STR_19(22), STR_18(8), STR_17(26), STR_16(21), 
 29578 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 29579 ;;		 -> STR_11(5), matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), 
 29580 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 29581 ;;  count           2   28[BANK0 ] unsigned int 
 29582 ;;  multiplier      2   30[BANK0 ] unsigned int 
 29583 ;; Auto vars:     Size  Location     Type
 29584 ;;  j               2   42[BANK0 ] unsigned int 
 29585 ;;  display_stri    5   33[BANK0 ] unsigned char [5]
 29586 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 29587 ;;  i               2   38[BANK0 ] unsigned int 
 29588 ;; Return value:  Size  Location     Type
 29589 ;;                  1    wreg      void 
 29590 ;; Registers used:
 29591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29592 ;; Tracked objects:
 29593 ;;		On entry : 0/0
 29594 ;;		On exit  : 0/0
 29595 ;;		Unchanged: 0/0
 29596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29597 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29598 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29600 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29601 ;;Total ram usage:       18 bytes
 29602 ;; Hardware stack levels used:    1
 29603 ;; Hardware stack levels required when called:    9
 29604 ;; This function calls:
 29605 ;;		___lwdiv
 29606 ;;		___lwmod
 29607 ;;		_nullifyBadge_segDisplayForceUpdate
 29608 ;;		_nullifyBadge_segDisplayPutStr
 29609 ;;		_strlen
 29610 ;; This function is called by:
 29611 ;;		_flashy_display_option
 29612 ;;		_slot_Main
 29613 ;;		_matrix_display_option
 29614 ;; This function uses a non-reentrant model
 29615 ;;
 29616                           
 29617                           
 29618                           ;psect for function _marquee_speedy
 29619  2202                     _marquee_speedy:	
 29620                           
 29621                           ;main.c: 134: u16 string_length = strlen((const char *) string);
 29622                           
 29623                           ;incstack = 0
 29624                           ; Regs used in _marquee_speedy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 29625  2202  0020               	movlb	0	; select bank0
 29626  2203  083B               	movf	marquee_speedy@string+1,w
 29627  2204  00F2               	movwf	strlen@s+1
 29628  2205  083A               	movf	marquee_speedy@string,w
 29629  2206  00F1               	movwf	strlen@s
 29630  2207  31B6  26AD  31A2   	fcall	_strlen
 29631  220A  0872               	movf	?_strlen+1,w
 29632  220B  0020               	movlb	0	; select bank0
 29633  220C  00C9               	movwf	marquee_speedy@string_length+1
 29634  220D  0871               	movf	?_strlen,w
 29635  220E  00C8               	movwf	marquee_speedy@string_length
 29636                           
 29637                           ;main.c: 135: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 29638  220F  30E8               	movlw	low marquee_speedy@F14089
 29639  2210  0086               	movwf	6
 29640  2211  3001               	movlw	high marquee_speedy@F14089
 29641  2212  0087               	movwf	7
 29642  2213  3041               	movlw	low marquee_speedy@display_string
 29643  2214  0084               	movwf	4
 29644  2215  3000               	movlw	high marquee_speedy@display_string
 29645  2216  0085               	movwf	5
 29646  2217  3005               	movlw	5
 29647  2218  00C0               	movwf	??_marquee_speedy
 29648  2219                     u4810:	
 29649  2219  0016               	moviw fsr1++
 29650  221A  001A               	movwi fsr0++
 29651  221B  0BC0               	decfsz	??_marquee_speedy,f
 29652  221C  2A19               	goto	u4810
 29653                           
 29654                           ;main.c: 136: u16 i = (count / multiplier) % string_length;
 29655  221D  0849               	movf	marquee_speedy@string_length+1,w
 29656  221E  00AC               	movwf	___lwmod@divisor+1
 29657  221F  0848               	movf	marquee_speedy@string_length,w
 29658  2220  00AB               	movwf	___lwmod@divisor
 29659  2221  083F               	movf	marquee_speedy@multiplier+1,w
 29660  2222  00F2               	movwf	___lwdiv@divisor+1
 29661  2223  083E               	movf	marquee_speedy@multiplier,w
 29662  2224  00F1               	movwf	___lwdiv@divisor
 29663  2225  083D               	movf	marquee_speedy@count+1,w
 29664  2226  00F4               	movwf	___lwdiv@dividend+1
 29665  2227  083C               	movf	marquee_speedy@count,w
 29666  2228  00F3               	movwf	___lwdiv@dividend
 29667  2229  31A9  213A  31A2   	fcall	___lwdiv
 29668  222C  0872               	movf	?___lwdiv+1,w
 29669  222D  0020               	movlb	0	; select bank0
 29670  222E  00AE               	movwf	___lwmod@dividend+1
 29671  222F  0871               	movf	?___lwdiv,w
 29672  2230  00AD               	movwf	___lwmod@dividend
 29673  2231  31B7  27A4  31A2   	fcall	___lwmod
 29674  2234  0020               	movlb	0	; select bank0
 29675  2235  082C               	movf	?___lwmod+1,w
 29676  2236  00C7               	movwf	marquee_speedy@i+1
 29677  2237  082B               	movf	?___lwmod,w
 29678  2238  00C6               	movwf	marquee_speedy@i
 29679                           
 29680                           ;main.c: 138: for (u16 j=0; j < 4; j++){
 29681  2239  01CA               	clrf	marquee_speedy@j
 29682  223A  01CB               	clrf	marquee_speedy@j+1
 29683  223B  3000               	movlw	0
 29684  223C  024B               	subwf	marquee_speedy@j+1,w
 29685  223D  3004               	movlw	4
 29686  223E  1903               	skipnz
 29687  223F  024A               	subwf	marquee_speedy@j,w
 29688  2240  1803               	btfsc	3,0
 29689  2241  2A69               	goto	l8222
 29690  2242                     l8216:	
 29691                           
 29692                           ;main.c: 139: display_string[j] = string[(i + j) % string_length];
 29693  2242  0849               	movf	marquee_speedy@string_length+1,w
 29694  2243  00AC               	movwf	___lwmod@divisor+1
 29695  2244  0848               	movf	marquee_speedy@string_length,w
 29696  2245  00AB               	movwf	___lwmod@divisor
 29697  2246  084A               	movf	marquee_speedy@j,w
 29698  2247  0746               	addwf	marquee_speedy@i,w
 29699  2248  00AD               	movwf	___lwmod@dividend
 29700  2249  084B               	movf	marquee_speedy@j+1,w
 29701  224A  3D47               	addwfc	marquee_speedy@i+1,w
 29702  224B  00AE               	movwf	___lwmod@dividend+1
 29703  224C  31B7  27A4  31A2   	fcall	___lwmod
 29704  224F  0020               	movlb	0	; select bank0
 29705  2250  083A               	movf	marquee_speedy@string,w
 29706  2251  072B               	addwf	?___lwmod,w
 29707  2252  0084               	movwf	4
 29708  2253  083B               	movf	marquee_speedy@string+1,w
 29709  2254  3D2C               	addwfc	?___lwmod+1,w
 29710  2255  0085               	movwf	5
 29711  2256  0800               	movf	0,w	;code access
 29712  2257  00C0               	movwf	??_marquee_speedy
 29713  2258  084A               	movf	marquee_speedy@j,w
 29714  2259  3E41               	addlw	(low (marquee_speedy@display_string| 0))& (0+255)
 29715  225A  0086               	movwf	6
 29716  225B  0187               	clrf	7
 29717  225C  0840               	movf	??_marquee_speedy,w
 29718  225D  0081               	movwf	1
 29719  225E  3001               	movlw	1
 29720  225F  07CA               	addwf	marquee_speedy@j,f
 29721  2260  3000               	movlw	0
 29722  2261  3DCB               	addwfc	marquee_speedy@j+1,f
 29723  2262  3000               	movlw	0
 29724  2263  024B               	subwf	marquee_speedy@j+1,w
 29725  2264  3004               	movlw	4
 29726  2265  1903               	skipnz
 29727  2266  024A               	subwf	marquee_speedy@j,w
 29728  2267  1C03               	skipc
 29729  2268  2A42               	goto	l8216
 29730  2269                     l8222:	
 29731                           
 29732                           ;main.c: 140: }
 29733                           ;main.c: 141: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 29734  2269  3041               	movlw	low marquee_speedy@display_string
 29735  226A  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 29736  226B  3000               	movlw	high marquee_speedy@display_string
 29737  226C  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 29738  226D  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29739  226E  31B4  243A  31A2   	fcall	_nullifyBadge_segDisplayPutStr
 29740                           
 29741                           ;main.c: 142: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 29742  2271  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29743  2272  31B3  23F8         	fcall	_nullifyBadge_segDisplayForceUpdate
 29744  2274  0008               	return
 29745  2275                     __end_of_marquee_speedy:	
 29746                           
 29747                           	psect	text63
 29748  2275                     __ptext63:	
 29749 ;; *************** function _marquee *****************
 29750 ;; Defined at:
 29751 ;;		line 146 in file "main.c"
 29752 ;; Parameters:    Size  Location     Type
 29753 ;;  string          2   26[BANK0 ] PTR unsigned char 
 29754 ;;		 -> STR_45(5), STR_44(5), STR_43(11), STR_42(13), 
 29755 ;;		 -> STR_39(5), STR_38(43), STR_37(13), STR_36(47), 
 29756 ;;		 -> STR_35(17), STR_34(120), STR_33(34), STR_32(16), 
 29757 ;;		 -> STR_31(35), STR_30(15), STR_29(12), STR_28(29), 
 29758 ;;		 -> STR_27(19), STR_26(17), STR_25(40), STR_24(27), 
 29759 ;;		 -> STR_23(29), STR_22(30), STR_21(36), STR_20(28), 
 29760 ;;		 -> STR_19(22), STR_18(8), STR_17(26), STR_16(21), 
 29761 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 29762 ;;		 -> STR_11(5), STR_10(18), STR_8(6), STR_7(8), 
 29763 ;;		 -> STR_6(10), STR_5(6), STR_4(5), matrix_TaskData(29), 
 29764 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 29765 ;;		 -> flashy_TaskData(30), NULL(0), 
 29766 ;;  count           2   28[BANK0 ] unsigned int 
 29767 ;; Auto vars:     Size  Location     Type
 29768 ;;  j               2   42[BANK0 ] unsigned int 
 29769 ;;  display_stri    5   31[BANK0 ] unsigned char [5]
 29770 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 29771 ;;  i               2   38[BANK0 ] unsigned int 
 29772 ;;  multiplier      2   36[BANK0 ] unsigned int 
 29773 ;; Return value:  Size  Location     Type
 29774 ;;                  1    wreg      void 
 29775 ;; Registers used:
 29776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29777 ;; Tracked objects:
 29778 ;;		On entry : 0/0
 29779 ;;		On exit  : 0/0
 29780 ;;		Unchanged: 0/0
 29781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29782 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29783 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29785 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29786 ;;Total ram usage:       18 bytes
 29787 ;; Hardware stack levels used:    1
 29788 ;; Hardware stack levels required when called:    9
 29789 ;; This function calls:
 29790 ;;		___lwdiv
 29791 ;;		___lwmod
 29792 ;;		_nullifyBadge_segDisplayForceUpdate
 29793 ;;		_nullifyBadge_segDisplayPutStr
 29794 ;;		_strlen
 29795 ;; This function is called by:
 29796 ;;		_menu_display_option
 29797 ;;		_flashy_display_option
 29798 ;;		_flashy_Main
 29799 ;;		_locked_Main
 29800 ;;		_slot_Main
 29801 ;; This function uses a non-reentrant model
 29802 ;;
 29803                           
 29804                           
 29805                           ;psect for function _marquee
 29806  2275                     _marquee:	
 29807                           
 29808                           ;main.c: 147: u16 multiplier = 50;
 29809                           
 29810                           ;incstack = 0
 29811                           ; Regs used in _marquee: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 29812  2275  3032               	movlw	50
 29813  2276  0020               	movlb	0	; select bank0
 29814  2277  00C4               	movwf	marquee@multiplier
 29815  2278  3000               	movlw	0
 29816  2279  00C5               	movwf	marquee@multiplier+1
 29817                           
 29818                           ;main.c: 148: u16 string_length = strlen((const char *) string);
 29819  227A  083B               	movf	marquee@string+1,w
 29820  227B  00F2               	movwf	strlen@s+1
 29821  227C  083A               	movf	marquee@string,w
 29822  227D  00F1               	movwf	strlen@s
 29823  227E  31B6  26AD  31A2   	fcall	_strlen
 29824  2281  0872               	movf	?_strlen+1,w
 29825  2282  0020               	movlb	0	; select bank0
 29826  2283  00C9               	movwf	marquee@string_length+1
 29827  2284  0871               	movf	?_strlen,w
 29828  2285  00C8               	movwf	marquee@string_length
 29829                           
 29830                           ;main.c: 149: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 29831  2286  30E3               	movlw	low marquee@F14098
 29832  2287  0086               	movwf	6
 29833  2288  3001               	movlw	high marquee@F14098
 29834  2289  0087               	movwf	7
 29835  228A  303F               	movlw	low marquee@display_string
 29836  228B  0084               	movwf	4
 29837  228C  3000               	movlw	high marquee@display_string
 29838  228D  0085               	movwf	5
 29839  228E  3005               	movlw	5
 29840  228F  00BE               	movwf	??_marquee
 29841  2290                     u4840:	
 29842  2290  0016               	moviw fsr1++
 29843  2291  001A               	movwi fsr0++
 29844  2292  0BBE               	decfsz	??_marquee,f
 29845  2293  2A90               	goto	u4840
 29846                           
 29847                           ;main.c: 150: u16 i = (count / multiplier) % string_length;
 29848  2294  0849               	movf	marquee@string_length+1,w
 29849  2295  00AC               	movwf	___lwmod@divisor+1
 29850  2296  0848               	movf	marquee@string_length,w
 29851  2297  00AB               	movwf	___lwmod@divisor
 29852  2298  0845               	movf	marquee@multiplier+1,w
 29853  2299  00F2               	movwf	___lwdiv@divisor+1
 29854  229A  0844               	movf	marquee@multiplier,w
 29855  229B  00F1               	movwf	___lwdiv@divisor
 29856  229C  083D               	movf	marquee@count+1,w
 29857  229D  00F4               	movwf	___lwdiv@dividend+1
 29858  229E  083C               	movf	marquee@count,w
 29859  229F  00F3               	movwf	___lwdiv@dividend
 29860  22A0  31A9  213A  31A2   	fcall	___lwdiv
 29861  22A3  0872               	movf	?___lwdiv+1,w
 29862  22A4  0020               	movlb	0	; select bank0
 29863  22A5  00AE               	movwf	___lwmod@dividend+1
 29864  22A6  0871               	movf	?___lwdiv,w
 29865  22A7  00AD               	movwf	___lwmod@dividend
 29866  22A8  31B7  27A4  31A2   	fcall	___lwmod
 29867  22AB  0020               	movlb	0	; select bank0
 29868  22AC  082C               	movf	?___lwmod+1,w
 29869  22AD  00C7               	movwf	marquee@i+1
 29870  22AE  082B               	movf	?___lwmod,w
 29871  22AF  00C6               	movwf	marquee@i
 29872                           
 29873                           ;main.c: 152: for (u16 j=0; j < 4; j++){
 29874  22B0  01CA               	clrf	marquee@j
 29875  22B1  01CB               	clrf	marquee@j+1
 29876  22B2  3000               	movlw	0
 29877  22B3  024B               	subwf	marquee@j+1,w
 29878  22B4  3004               	movlw	4
 29879  22B5  1903               	skipnz
 29880  22B6  024A               	subwf	marquee@j,w
 29881  22B7  1803               	btfsc	3,0
 29882  22B8  2AE0               	goto	l8246
 29883  22B9                     l8240:	
 29884                           
 29885                           ;main.c: 153: display_string[j] = string[(i + j) % string_length];
 29886  22B9  0849               	movf	marquee@string_length+1,w
 29887  22BA  00AC               	movwf	___lwmod@divisor+1
 29888  22BB  0848               	movf	marquee@string_length,w
 29889  22BC  00AB               	movwf	___lwmod@divisor
 29890  22BD  084A               	movf	marquee@j,w
 29891  22BE  0746               	addwf	marquee@i,w
 29892  22BF  00AD               	movwf	___lwmod@dividend
 29893  22C0  084B               	movf	marquee@j+1,w
 29894  22C1  3D47               	addwfc	marquee@i+1,w
 29895  22C2  00AE               	movwf	___lwmod@dividend+1
 29896  22C3  31B7  27A4  31A2   	fcall	___lwmod
 29897  22C6  0020               	movlb	0	; select bank0
 29898  22C7  083A               	movf	marquee@string,w
 29899  22C8  072B               	addwf	?___lwmod,w
 29900  22C9  0084               	movwf	4
 29901  22CA  083B               	movf	marquee@string+1,w
 29902  22CB  3D2C               	addwfc	?___lwmod+1,w
 29903  22CC  0085               	movwf	5
 29904  22CD  0800               	movf	0,w	;code access
 29905  22CE  00BE               	movwf	??_marquee
 29906  22CF  084A               	movf	marquee@j,w
 29907  22D0  3E3F               	addlw	(low (marquee@display_string| 0))& (0+255)
 29908  22D1  0086               	movwf	6
 29909  22D2  0187               	clrf	7
 29910  22D3  083E               	movf	??_marquee,w
 29911  22D4  0081               	movwf	1
 29912  22D5  3001               	movlw	1
 29913  22D6  07CA               	addwf	marquee@j,f
 29914  22D7  3000               	movlw	0
 29915  22D8  3DCB               	addwfc	marquee@j+1,f
 29916  22D9  3000               	movlw	0
 29917  22DA  024B               	subwf	marquee@j+1,w
 29918  22DB  3004               	movlw	4
 29919  22DC  1903               	skipnz
 29920  22DD  024A               	subwf	marquee@j,w
 29921  22DE  1C03               	skipc
 29922  22DF  2AB9               	goto	l8240
 29923  22E0                     l8246:	
 29924                           
 29925                           ;main.c: 154: }
 29926                           ;main.c: 155: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 29927  22E0  303F               	movlw	low marquee@display_string
 29928  22E1  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 29929  22E2  3000               	movlw	high marquee@display_string
 29930  22E3  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 29931  22E4  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29932  22E5  31B4  243A  31A2   	fcall	_nullifyBadge_segDisplayPutStr
 29933                           
 29934                           ;main.c: 156: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 29935  22E8  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29936  22E9  31B3  23F8         	fcall	_nullifyBadge_segDisplayForceUpdate
 29937  22EB  0008               	return
 29938  22EC                     __end_of_marquee:	
 29939                           
 29940                           	psect	text64
 29941  36AD                     __ptext64:	
 29942 ;; *************** function _strlen *****************
 29943 ;; Defined at:
 29944 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/strlen.c"
 29945 ;; Parameters:    Size  Location     Type
 29946 ;;  s               2    1[COMMON] PTR const unsigned char 
 29947 ;;		 -> STR_81(23), STR_80(27), matrix_secret_inputs.inputs(20), matrix_secret_inputs(25), 
 29948 ;;		 -> STR_79(8), STR_78(7), STR_77(8), STR_76(6), 
 29949 ;;		 -> STR_75(10), STR_74(5), STR_73(7), STR_72(9), 
 29950 ;;		 -> STR_71(7), STR_70(7), Slot_Wheel(55), secret_inputs.inputs(20), 
 29951 ;;		 -> secret_inputs(25), STR_45(5), STR_44(5), STR_43(11), 
 29952 ;;		 -> STR_42(13), STR_39(5), STR_38(43), STR_37(13), 
 29953 ;;		 -> STR_36(47), STR_35(17), STR_34(120), STR_33(34), 
 29954 ;;		 -> STR_32(16), STR_31(35), STR_30(15), STR_29(12), 
 29955 ;;		 -> STR_28(29), STR_27(19), STR_26(17), STR_25(40), 
 29956 ;;		 -> STR_24(27), STR_23(29), STR_22(30), STR_21(36), 
 29957 ;;		 -> STR_20(28), STR_19(22), STR_18(8), STR_17(26), 
 29958 ;;		 -> STR_16(21), STR_15(19), STR_14(6), STR_13(8), 
 29959 ;;		 -> STR_12(9), STR_11(5), STR_10(18), STR_8(6), 
 29960 ;;		 -> STR_7(8), STR_6(10), STR_5(6), STR_4(5), 
 29961 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 29962 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 29963 ;; Auto vars:     Size  Location     Type
 29964 ;;  cp              2    5[COMMON] PTR const unsigned char 
 29965 ;;		 -> STR_81(23), STR_80(27), matrix_secret_inputs.inputs(20), matrix_secret_inputs(25), 
 29966 ;;		 -> STR_79(8), STR_78(7), STR_77(8), STR_76(6), 
 29967 ;;		 -> STR_75(10), STR_74(5), STR_73(7), STR_72(9), 
 29968 ;;		 -> STR_71(7), STR_70(7), Slot_Wheel(55), secret_inputs.inputs(20), 
 29969 ;;		 -> secret_inputs(25), STR_45(5), STR_44(5), STR_43(11), 
 29970 ;;		 -> STR_42(13), STR_39(5), STR_38(43), STR_37(13), 
 29971 ;;		 -> STR_36(47), STR_35(17), STR_34(120), STR_33(34), 
 29972 ;;		 -> STR_32(16), STR_31(35), STR_30(15), STR_29(12), 
 29973 ;;		 -> STR_28(29), STR_27(19), STR_26(17), STR_25(40), 
 29974 ;;		 -> STR_24(27), STR_23(29), STR_22(30), STR_21(36), 
 29975 ;;		 -> STR_20(28), STR_19(22), STR_18(8), STR_17(26), 
 29976 ;;		 -> STR_16(21), STR_15(19), STR_14(6), STR_13(8), 
 29977 ;;		 -> STR_12(9), STR_11(5), STR_10(18), STR_8(6), 
 29978 ;;		 -> STR_7(8), STR_6(10), STR_5(6), STR_4(5), 
 29979 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 29980 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 29981 ;; Return value:  Size  Location     Type
 29982 ;;                  2    1[COMMON] unsigned int 
 29983 ;; Registers used:
 29984 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 29985 ;; Tracked objects:
 29986 ;;		On entry : 0/0
 29987 ;;		On exit  : 0/0
 29988 ;;		Unchanged: 0/0
 29989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29990 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29992 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29993 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29994 ;;Total ram usage:        6 bytes
 29995 ;; Hardware stack levels used:    1
 29996 ;; Hardware stack levels required when called:    4
 29997 ;; This function calls:
 29998 ;;		Nothing
 29999 ;; This function is called by:
 30000 ;;		_marquee_speedy
 30001 ;;		_marquee
 30002 ;;		_secret_check
 30003 ;;		_slot_Main
 30004 ;;		_matrix_secret_check
 30005 ;; This function uses a non-reentrant model
 30006 ;;
 30007                           
 30008                           
 30009                           ;psect for function _strlen
 30010  36AD                     _strlen:	
 30011                           
 30012                           ;incstack = 0
 30013                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 30014  36AD  0872               	movf	strlen@s+1,w
 30015  36AE  00F6               	movwf	strlen@cp+1
 30016  36AF  0871               	movf	strlen@s,w
 30017  36B0  00F5               	movwf	strlen@cp
 30018  36B1                     l8098:	
 30019  36B1  0875               	movf	strlen@cp,w
 30020  36B2  0084               	movwf	4
 30021  36B3  0876               	movf	strlen@cp+1,w
 30022  36B4  0085               	movwf	5
 30023  36B5  0012               	moviw fsr0++
 30024  36B6  1903               	btfsc	3,2
 30025  36B7  2EBD               	goto	l8100
 30026  36B8  3001               	movlw	1
 30027  36B9  07F5               	addwf	strlen@cp,f
 30028  36BA  3000               	movlw	0
 30029  36BB  3DF6               	addwfc	strlen@cp+1,f
 30030  36BC  2EB1               	goto	l8098
 30031  36BD                     l8100:	
 30032  36BD  0971               	comf	strlen@s,w
 30033  36BE  00F3               	movwf	??_strlen
 30034  36BF  0972               	comf	strlen@s+1,w
 30035  36C0  00F4               	movwf	??_strlen+1
 30036  36C1  0AF3               	incf	??_strlen,f
 30037  36C2  1903               	skipnz
 30038  36C3  0AF4               	incf	??_strlen+1,f
 30039  36C4  0875               	movf	strlen@cp,w
 30040  36C5  0773               	addwf	??_strlen,w
 30041  36C6  00F1               	movwf	?_strlen
 30042  36C7  0876               	movf	strlen@cp+1,w
 30043  36C8  3D74               	addwfc	??_strlen+1,w
 30044  36C9  00F2               	movwf	?_strlen+1
 30045  36CA  0008               	return
 30046  36CB                     __end_of_strlen:	
 30047                           
 30048                           	psect	text65
 30049  343A                     __ptext65:	
 30050 ;; *************** function _nullifyBadge_segDisplayPutStr *****************
 30051 ;; Defined at:
 30052 ;;		line 113 in file "nullifyBadge.c"
 30053 ;; Parameters:    Size  Location     Type
 30054 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 30055 ;;		 -> badge_inst(18), 
 30056 ;;  str             2   23[BANK0 ] PTR unsigned char 
 30057 ;;		 -> flashy_Main@hit_counter(6), STR_40(5), STR_39(5), STR_38(43), 
 30058 ;;		 -> STR_37(13), STR_36(47), STR_35(17), STR_34(120), 
 30059 ;;		 -> STR_33(34), STR_32(16), STR_31(35), STR_30(15), 
 30060 ;;		 -> STR_29(12), STR_28(29), STR_27(19), STR_26(17), 
 30061 ;;		 -> STR_25(40), STR_24(27), STR_23(29), STR_22(30), 
 30062 ;;		 -> STR_21(36), STR_20(28), STR_19(22), STR_18(8), 
 30063 ;;		 -> STR_17(26), STR_16(21), STR_15(19), STR_14(6), 
 30064 ;;		 -> STR_13(8), STR_12(9), STR_11(5), STR_8(6), 
 30065 ;;		 -> STR_7(8), STR_6(10), STR_5(6), STR_4(5), 
 30066 ;;		 -> marquee@display_string(5), marquee_speedy@display_string(5), 
 30067 ;; Auto vars:     Size  Location     Type
 30068 ;;  badge           1   25[BANK0 ] PTR struct t_nullifyBadg
 30069 ;;		 -> badge_inst(18), 
 30070 ;; Return value:  Size  Location     Type
 30071 ;;                  1    wreg      void 
 30072 ;; Registers used:
 30073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30074 ;; Tracked objects:
 30075 ;;		On entry : 0/0
 30076 ;;		On exit  : 0/0
 30077 ;;		Unchanged: 0/0
 30078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30079 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30082 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30083 ;;Total ram usage:        3 bytes
 30084 ;; Hardware stack levels used:    1
 30085 ;; Hardware stack levels required when called:    8
 30086 ;; This function calls:
 30087 ;;		_displayL2_PutStr
 30088 ;; This function is called by:
 30089 ;;		_marquee_speedy
 30090 ;;		_marquee
 30091 ;;		_menu_display_option
 30092 ;;		_flashy_display_option
 30093 ;;		_flashy_Main
 30094 ;; This function uses a non-reentrant model
 30095 ;;
 30096                           
 30097                           
 30098                           ;psect for function _nullifyBadge_segDisplayPutStr
 30099  343A                     _nullifyBadge_segDisplayPutStr:	
 30100                           
 30101                           ;incstack = 0
 30102                           ; Regs used in _nullifyBadge_segDisplayPutStr: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 30103                           ;nullifyBadge_segDisplayPutStr@badge stored from wreg
 30104  343A  0020               	movlb	0	; select bank0
 30105  343B  00B9               	movwf	nullifyBadge_segDisplayPutStr@badge
 30106                           
 30107                           ;nullifyBadge.c: 114: displayL2_PutStr(&badge->display, str);
 30108  343C  0838               	movf	nullifyBadge_segDisplayPutStr@str+1,w
 30109  343D  00B1               	movwf	displayL2_PutStr@str+1
 30110  343E  0837               	movf	nullifyBadge_segDisplayPutStr@str,w
 30111  343F  00B0               	movwf	displayL2_PutStr@str
 30112  3440  0839               	movf	nullifyBadge_segDisplayPutStr@badge,w
 30113  3441  31B7  277A         	fcall	_displayL2_PutStr
 30114  3443  0008               	return
 30115  3444                     __end_of_nullifyBadge_segDisplayPutStr:	
 30116                           
 30117                           	psect	text66
 30118  377A                     __ptext66:	
 30119 ;; *************** function _displayL2_PutStr *****************
 30120 ;; Defined at:
 30121 ;;		line 55 in file "nullifyBadge_displayL2.c"
 30122 ;; Parameters:    Size  Location     Type
 30123 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30124 ;;		 -> badge_inst(18), 
 30125 ;;  str             2   16[BANK0 ] PTR unsigned char 
 30126 ;;		 -> flashy_Main@hit_counter(6), STR_40(5), STR_39(5), STR_38(43), 
 30127 ;;		 -> STR_37(13), STR_36(47), STR_35(17), STR_34(120), 
 30128 ;;		 -> STR_33(34), STR_32(16), STR_31(35), STR_30(15), 
 30129 ;;		 -> STR_29(12), STR_28(29), STR_27(19), STR_26(17), 
 30130 ;;		 -> STR_25(40), STR_24(27), STR_23(29), STR_22(30), 
 30131 ;;		 -> STR_21(36), STR_20(28), STR_19(22), STR_18(8), 
 30132 ;;		 -> STR_17(26), STR_16(21), STR_15(19), STR_14(6), 
 30133 ;;		 -> STR_13(8), STR_12(9), STR_11(5), STR_8(6), 
 30134 ;;		 -> STR_7(8), STR_6(10), STR_5(6), STR_4(5), 
 30135 ;;		 -> STR_3(5), marquee@display_string(5), marquee_speedy@display_string(5), 
 30136 ;; Auto vars:     Size  Location     Type
 30137 ;;  display         1   21[BANK0 ] PTR struct t_nullifyDisp
 30138 ;;		 -> badge_inst(18), 
 30139 ;;  k               1   22[BANK0 ] unsigned char 
 30140 ;; Return value:  Size  Location     Type
 30141 ;;                  1    wreg      void 
 30142 ;; Registers used:
 30143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30144 ;; Tracked objects:
 30145 ;;		On entry : 0/0
 30146 ;;		On exit  : 0/0
 30147 ;;		Unchanged: 0/0
 30148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30149 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30150 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30151 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30152 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30153 ;;Total ram usage:        7 bytes
 30154 ;; Hardware stack levels used:    1
 30155 ;; Hardware stack levels required when called:    7
 30156 ;; This function calls:
 30157 ;;		_displayL2_PutChar
 30158 ;; This function is called by:
 30159 ;;		_nullifyBadge_segDisplayPutStr
 30160 ;;		_displayL2_EraseSegDisplay
 30161 ;; This function uses a non-reentrant model
 30162 ;;
 30163                           
 30164                           
 30165                           ;psect for function _displayL2_PutStr
 30166  377A                     _displayL2_PutStr:	
 30167                           
 30168                           ;incstack = 0
 30169                           ; Regs used in _displayL2_PutStr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30170                           ;displayL2_PutStr@display stored from wreg
 30171  377A  0020               	movlb	0	; select bank0
 30172  377B  00B5               	movwf	displayL2_PutStr@display
 30173                           
 30174                           ;nullifyBadge_displayL2.c: 57: u8 k = 0;
 30175  377C  01B6               	clrf	displayL2_PutStr@k
 30176  377D                     l8052:	
 30177                           ;nullifyBadge_displayL2.c: 59: while (str[k] != '\0') {
 30178                           
 30179  377D  0831               	movf	displayL2_PutStr@str+1,w
 30180  377E  00B3               	movwf	??_displayL2_PutStr+1
 30181  377F  0830               	movf	displayL2_PutStr@str,w
 30182  3780  00B2               	movwf	??_displayL2_PutStr
 30183  3781  0836               	movf	displayL2_PutStr@k,w
 30184  3782  0732               	addwf	??_displayL2_PutStr,w
 30185  3783  0084               	movwf	4
 30186  3784  0833               	movf	??_displayL2_PutStr+1,w
 30187  3785  1803               	skipnc
 30188  3786  0A33               	incf	??_displayL2_PutStr+1,w
 30189  3787  0085               	movwf	5
 30190  3788  0012               	moviw fsr0++
 30191  3789  1903               	btfsc	3,2
 30192  378A  0008               	return
 30193                           
 30194                           ;nullifyBadge_displayL2.c: 60: displayL2_PutChar(display, str[k]);
 30195  378B  0831               	movf	displayL2_PutStr@str+1,w
 30196  378C  00B3               	movwf	??_displayL2_PutStr+1
 30197  378D  0830               	movf	displayL2_PutStr@str,w
 30198  378E  00B2               	movwf	??_displayL2_PutStr
 30199  378F  0836               	movf	displayL2_PutStr@k,w
 30200  3790  0732               	addwf	??_displayL2_PutStr,w
 30201  3791  0084               	movwf	4
 30202  3792  0833               	movf	??_displayL2_PutStr+1,w
 30203  3793  1803               	skipnc
 30204  3794  0A33               	incf	??_displayL2_PutStr+1,w
 30205  3795  0085               	movwf	5
 30206  3796  0800               	movf	0,w	;code access
 30207  3797  00B4               	movwf	??_displayL2_PutStr+2
 30208  3798  0834               	movf	??_displayL2_PutStr+2,w
 30209  3799  00AA               	movwf	displayL2_PutChar@c
 30210  379A  0835               	movf	displayL2_PutStr@display,w
 30211  379B  31AD  2583  31B7   	fcall	_displayL2_PutChar
 30212                           
 30213                           ;nullifyBadge_displayL2.c: 61: k++;
 30214  379E  3001               	movlw	1
 30215  379F  0020               	movlb	0	; select bank0
 30216  37A0  00B2               	movwf	??_displayL2_PutStr
 30217  37A1  0832               	movf	??_displayL2_PutStr,w
 30218  37A2  07B6               	addwf	displayL2_PutStr@k,f
 30219  37A3  2F7D               	goto	l8052
 30220  37A4                     __end_of_displayL2_PutStr:	
 30221                           
 30222                           	psect	text67
 30223  2D83                     __ptext67:	
 30224 ;; *************** function _displayL2_PutChar *****************
 30225 ;; Defined at:
 30226 ;;		line 38 in file "nullifyBadge_displayL2.c"
 30227 ;; Parameters:    Size  Location     Type
 30228 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30229 ;;		 -> badge_inst(18), 
 30230 ;;  c               1   10[BANK0 ] unsigned char 
 30231 ;; Auto vars:     Size  Location     Type
 30232 ;;  display         1   15[BANK0 ] PTR struct t_nullifyDisp
 30233 ;;		 -> badge_inst(18), 
 30234 ;;  k               1   14[BANK0 ] unsigned char 
 30235 ;; Return value:  Size  Location     Type
 30236 ;;                  1    wreg      void 
 30237 ;; Registers used:
 30238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30239 ;; Tracked objects:
 30240 ;;		On entry : 0/0
 30241 ;;		On exit  : 0/0
 30242 ;;		Unchanged: 0/0
 30243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30244 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30245 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30246 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30247 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30248 ;;Total ram usage:        6 bytes
 30249 ;; Hardware stack levels used:    1
 30250 ;; Hardware stack levels required when called:    6
 30251 ;; This function calls:
 30252 ;;		_displayL1_SetSegChar
 30253 ;; This function is called by:
 30254 ;;		_displayL2_PutStr
 30255 ;;		_nullifyBadge_segDisplayPutChar
 30256 ;; This function uses a non-reentrant model
 30257 ;;
 30258                           
 30259                           
 30260                           ;psect for function _displayL2_PutChar
 30261  2D83                     _displayL2_PutChar:	
 30262                           
 30263                           ;incstack = 0
 30264                           ; Regs used in _displayL2_PutChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30265                           ;displayL2_PutChar@display stored from wreg
 30266  2D83  0020               	movlb	0	; select bank0
 30267  2D84  00AF               	movwf	displayL2_PutChar@display
 30268                           
 30269                           ;nullifyBadge_displayL2.c: 40: display->charVect[0] = display->charVect[1];
 30270  2D85  0A2F               	incf	displayL2_PutChar@display,w
 30271  2D86  0086               	movwf	6
 30272  2D87  3001               	movlw	1	; select bank2/3
 30273  2D88  0087               	movwf	7
 30274  2D89  0801               	movf	1,w
 30275  2D8A  00AB               	movwf	??_displayL2_PutChar
 30276  2D8B  082F               	movf	displayL2_PutChar@display,w
 30277  2D8C  0086               	movwf	6
 30278  2D8D  3001               	movlw	1	; select bank2/3
 30279  2D8E  0087               	movwf	7
 30280  2D8F  082B               	movf	??_displayL2_PutChar,w
 30281  2D90  0081               	movwf	1
 30282                           
 30283                           ;nullifyBadge_displayL2.c: 41: display->charVect[1] = display->charVect[2];
 30284  2D91  082F               	movf	displayL2_PutChar@display,w
 30285  2D92  3E02               	addlw	2
 30286  2D93  0086               	movwf	6
 30287  2D94  3001               	movlw	1	; select bank2/3
 30288  2D95  0087               	movwf	7
 30289  2D96  0801               	movf	1,w
 30290  2D97  00AB               	movwf	??_displayL2_PutChar
 30291  2D98  0A2F               	incf	displayL2_PutChar@display,w
 30292  2D99  0086               	movwf	6
 30293  2D9A  3001               	movlw	1	; select bank2/3
 30294  2D9B  0087               	movwf	7
 30295  2D9C  082B               	movf	??_displayL2_PutChar,w
 30296  2D9D  0081               	movwf	1
 30297                           
 30298                           ;nullifyBadge_displayL2.c: 42: display->charVect[2] = display->charVect[3];
 30299  2D9E  082F               	movf	displayL2_PutChar@display,w
 30300  2D9F  3E03               	addlw	3
 30301  2DA0  0086               	movwf	6
 30302  2DA1  3001               	movlw	1	; select bank2/3
 30303  2DA2  0087               	movwf	7
 30304  2DA3  0801               	movf	1,w
 30305  2DA4  00AB               	movwf	??_displayL2_PutChar
 30306  2DA5  082F               	movf	displayL2_PutChar@display,w
 30307  2DA6  3E02               	addlw	2
 30308  2DA7  0086               	movwf	6
 30309  2DA8  3001               	movlw	1	; select bank2/3
 30310  2DA9  0087               	movwf	7
 30311  2DAA  082B               	movf	??_displayL2_PutChar,w
 30312  2DAB  0081               	movwf	1
 30313                           
 30314                           ;nullifyBadge_displayL2.c: 45: display->charVect[3] = c;
 30315  2DAC  082A               	movf	displayL2_PutChar@c,w
 30316  2DAD  00AB               	movwf	??_displayL2_PutChar
 30317  2DAE  082F               	movf	displayL2_PutChar@display,w
 30318  2DAF  3E03               	addlw	3
 30319  2DB0  0086               	movwf	6
 30320  2DB1  3001               	movlw	1	; select bank2/3
 30321  2DB2  0087               	movwf	7
 30322  2DB3  082B               	movf	??_displayL2_PutChar,w
 30323  2DB4  0081               	movwf	1
 30324                           
 30325                           ;nullifyBadge_displayL2.c: 48: u8 k = 0;
 30326  2DB5  01AE               	clrf	displayL2_PutChar@k
 30327                           
 30328                           ;nullifyBadge_displayL2.c: 49: for (k = 0; k < 4; k++) {
 30329  2DB6  01AE               	clrf	displayL2_PutChar@k
 30330  2DB7                     L16:	
 30331  2DB7  3004               	movlw	4
 30332  2DB8  022E               	subwf	displayL2_PutChar@k,w
 30333  2DB9  1803               	btfsc	3,0
 30334  2DBA  0008               	return
 30335                           
 30336                           ;nullifyBadge_displayL2.c: 50: displayL1_SetSegChar(&display->display_l1, display->charV
      +                          ect[k], k);
 30337  2DBB  082E               	movf	displayL2_PutChar@k,w
 30338  2DBC  072F               	addwf	displayL2_PutChar@display,w
 30339  2DBD  00AB               	movwf	??_displayL2_PutChar
 30340  2DBE  082B               	movf	??_displayL2_PutChar,w
 30341  2DBF  0086               	movwf	6
 30342  2DC0  3001               	movlw	1	; select bank2/3
 30343  2DC1  0087               	movwf	7
 30344  2DC2  0801               	movf	1,w
 30345  2DC3  00AC               	movwf	??_displayL2_PutChar+1
 30346  2DC4  082C               	movf	??_displayL2_PutChar+1,w
 30347  2DC5  00A0               	movwf	displayL1_SetSegChar@c
 30348  2DC6  082E               	movf	displayL2_PutChar@k,w
 30349  2DC7  00AD               	movwf	??_displayL2_PutChar+2
 30350  2DC8  082D               	movf	??_displayL2_PutChar+2,w
 30351  2DC9  00A1               	movwf	displayL1_SetSegChar@charPos
 30352  2DCA  082F               	movf	displayL2_PutChar@display,w
 30353  2DCB  3E07               	addlw	7
 30354  2DCC  31AA  2288  31AD   	fcall	_displayL1_SetSegChar
 30355  2DCF  3001               	movlw	1
 30356  2DD0  0020               	movlb	0	; select bank0
 30357  2DD1  00AB               	movwf	??_displayL2_PutChar
 30358  2DD2  082B               	movf	??_displayL2_PutChar,w
 30359  2DD3  07AE               	addwf	displayL2_PutChar@k,f
 30360  2DD4  2DB7               	goto	L16
 30361  2DD5                     __end_of_displayL2_PutChar:	
 30362                           
 30363                           	psect	text68
 30364  2A88                     __ptext68:	
 30365 ;; *************** function _displayL1_SetSegChar *****************
 30366 ;; Defined at:
 30367 ;;		line 18 in file "nullifyBadge_displayL1.c"
 30368 ;; Parameters:    Size  Location     Type
 30369 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30370 ;;		 -> badge_inst(18), 
 30371 ;;  c               1    0[BANK0 ] unsigned char 
 30372 ;;  charPos         1    1[BANK0 ] unsigned char 
 30373 ;; Auto vars:     Size  Location     Type
 30374 ;;  display         1    7[BANK0 ] PTR struct t_nullifyDisp
 30375 ;;		 -> badge_inst(18), 
 30376 ;;  charData        2    8[BANK0 ] unsigned int 
 30377 ;;  dispDataVect    1    6[BANK0 ] unsigned char 
 30378 ;; Return value:  Size  Location     Type
 30379 ;;                  1    wreg      void 
 30380 ;; Registers used:
 30381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30382 ;; Tracked objects:
 30383 ;;		On entry : 0/0
 30384 ;;		On exit  : 0/0
 30385 ;;		Unchanged: 0/0
 30386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30387 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30388 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30389 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30390 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30391 ;;Total ram usage:       10 bytes
 30392 ;; Hardware stack levels used:    1
 30393 ;; Hardware stack levels required when called:    5
 30394 ;; This function calls:
 30395 ;;		_displayCharReverse
 30396 ;; This function is called by:
 30397 ;;		_displayL2_PutChar
 30398 ;;		_nullifyBadge_segDisplayPutCharPos
 30399 ;;		_displayL2_PrintChar
 30400 ;; This function uses a non-reentrant model
 30401 ;;
 30402                           
 30403                           
 30404                           ;psect for function _displayL1_SetSegChar
 30405  2A88                     _displayL1_SetSegChar:	
 30406                           
 30407                           ;incstack = 0
 30408                           ; Regs used in _displayL1_SetSegChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30409                           ;displayL1_SetSegChar@display stored from wreg
 30410  2A88  0020               	movlb	0	; select bank0
 30411  2A89  00A7               	movwf	displayL1_SetSegChar@display
 30412                           
 30413                           ;nullifyBadge_displayL1.c: 23: u16 charData = asciiCharTableLookup[(u8) c];
 30414  2A8A  0820               	movf	displayL1_SetSegChar@c,w
 30415  2A8B  00A2               	movwf	??_displayL1_SetSegChar
 30416  2A8C  01A3               	clrf	??_displayL1_SetSegChar+1
 30417  2A8D  35A2               	lslf	??_displayL1_SetSegChar,f
 30418  2A8E  0DA3               	rlf	??_displayL1_SetSegChar+1,f
 30419  2A8F  30F0               	movlw	240
 30420  2A90  00A4               	movwf	??_displayL1_SetSegChar+2
 30421  2A91  3026               	movlw	38
 30422  2A92  00A5               	movwf	??_displayL1_SetSegChar+3
 30423  2A93  0822               	movf	??_displayL1_SetSegChar,w
 30424  2A94  0724               	addwf	??_displayL1_SetSegChar+2,w
 30425  2A95  0086               	movwf	6
 30426  2A96  0823               	movf	??_displayL1_SetSegChar+1,w
 30427  2A97  3D25               	addwfc	??_displayL1_SetSegChar+3,w
 30428  2A98  0087               	movwf	7
 30429  2A99  3F40               	moviw [0]fsr1
 30430  2A9A  00A8               	movwf	displayL1_SetSegChar@charData
 30431  2A9B  3F41               	moviw [1]fsr1
 30432  2A9C  00A9               	movwf	displayL1_SetSegChar@charData+1
 30433                           
 30434                           ;nullifyBadge_displayL1.c: 29: if (charPos & 0x1) {
 30435  2A9D  1C21               	btfss	displayL1_SetSegChar@charPos,0
 30436  2A9E  2AAA               	goto	l7990
 30437                           
 30438                           ;nullifyBadge_displayL1.c: 30: charData = displayCharReverse(charData);
 30439  2A9F  0829               	movf	displayL1_SetSegChar@charData+1,w
 30440  2AA0  00F2               	movwf	displayCharReverse@cVal+1
 30441  2AA1  0828               	movf	displayL1_SetSegChar@charData,w
 30442  2AA2  00F1               	movwf	displayCharReverse@cVal
 30443  2AA3  31B7  27D1         	fcall	_displayCharReverse
 30444  2AA5  0872               	movf	?_displayCharReverse+1,w
 30445  2AA6  0020               	movlb	0	; select bank0
 30446  2AA7  00A9               	movwf	displayL1_SetSegChar@charData+1
 30447  2AA8  0871               	movf	?_displayCharReverse,w
 30448  2AA9  00A8               	movwf	displayL1_SetSegChar@charData
 30449  2AAA                     l7990:	
 30450                           
 30451                           ;nullifyBadge_displayL1.c: 31: }
 30452                           ;nullifyBadge_displayL1.c: 61: u8 dispDataVectBaseIdx = 8 - ( charPos << 1 );
 30453  2AAA  3521               	lslf	displayL1_SetSegChar@charPos,w
 30454  2AAB  3AFF               	xorlw	255
 30455  2AAC  3E01               	addlw	1
 30456  2AAD  3E08               	addlw	8
 30457  2AAE  00A2               	movwf	??_displayL1_SetSegChar
 30458  2AAF  0822               	movf	??_displayL1_SetSegChar,w
 30459  2AB0  00A6               	movwf	displayL1_SetSegChar@dispDataVectBaseIdx
 30460                           
 30461                           ;nullifyBadge_displayL1.c: 64: display->displayVect[dispDataVectBaseIdx] = (u8) (charDat
      +                          a >> 8);
 30462  2AB1  0829               	movf	displayL1_SetSegChar@charData+1,w
 30463  2AB2  00A2               	movwf	??_displayL1_SetSegChar
 30464  2AB3  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 30465  2AB4  0727               	addwf	displayL1_SetSegChar@display,w
 30466  2AB5  00A3               	movwf	??_displayL1_SetSegChar+1
 30467  2AB6  0823               	movf	??_displayL1_SetSegChar+1,w
 30468  2AB7  0086               	movwf	6
 30469  2AB8  3001               	movlw	1	; select bank2/3
 30470  2AB9  0087               	movwf	7
 30471  2ABA  0822               	movf	??_displayL1_SetSegChar,w
 30472  2ABB  0081               	movwf	1
 30473                           
 30474                           ;nullifyBadge_displayL1.c: 67: display->displayVect[dispDataVectBaseIdx+1] = (u8) (charD
      +                          ata & 0xFF);
 30475  2ABC  0828               	movf	displayL1_SetSegChar@charData,w
 30476  2ABD  00A2               	movwf	??_displayL1_SetSegChar
 30477  2ABE  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 30478  2ABF  3E01               	addlw	1
 30479  2AC0  0727               	addwf	displayL1_SetSegChar@display,w
 30480  2AC1  00A3               	movwf	??_displayL1_SetSegChar+1
 30481  2AC2  0823               	movf	??_displayL1_SetSegChar+1,w
 30482  2AC3  0086               	movwf	6
 30483  2AC4  3001               	movlw	1	; select bank2/3
 30484  2AC5  0087               	movwf	7
 30485  2AC6  0822               	movf	??_displayL1_SetSegChar,w
 30486  2AC7  0081               	movwf	1
 30487  2AC8  0008               	return
 30488  2AC9                     __end_of_displayL1_SetSegChar:	
 30489                           
 30490                           	psect	text69
 30491  37D1                     __ptext69:	
 30492 ;; *************** function _displayCharReverse *****************
 30493 ;; Defined at:
 30494 ;;		line 105 in file "nullifyBadge_displayL1.c"
 30495 ;; Parameters:    Size  Location     Type
 30496 ;;  cVal            2    1[COMMON] unsigned int 
 30497 ;; Auto vars:     Size  Location     Type
 30498 ;;  k               1   11[COMMON] unsigned char 
 30499 ;;  retValUpperR    1   10[COMMON] unsigned char 
 30500 ;;  retValUpper     1    9[COMMON] unsigned char 
 30501 ;;  retValLower     1    8[COMMON] unsigned char 
 30502 ;; Return value:  Size  Location     Type
 30503 ;;                  2    1[COMMON] unsigned int 
 30504 ;; Registers used:
 30505 ;;		wreg, status,2, status,0
 30506 ;; Tracked objects:
 30507 ;;		On entry : 0/0
 30508 ;;		On exit  : 0/0
 30509 ;;		Unchanged: 0/0
 30510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30511 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30512 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30513 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30514 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30515 ;;Total ram usage:       11 bytes
 30516 ;; Hardware stack levels used:    1
 30517 ;; Hardware stack levels required when called:    4
 30518 ;; This function calls:
 30519 ;;		Nothing
 30520 ;; This function is called by:
 30521 ;;		_displayL1_SetSegChar
 30522 ;; This function uses a non-reentrant model
 30523 ;;
 30524                           
 30525                           
 30526                           ;psect for function _displayCharReverse
 30527  37D1                     _displayCharReverse:	
 30528                           
 30529                           ;nullifyBadge_displayL1.c: 106: u8 retValUpper, retValLower, retValUpperRev;
 30530                           ;nullifyBadge_displayL1.c: 108: u8 k;
 30531                           ;nullifyBadge_displayL1.c: 111: retValUpper = cVal >> 8;
 30532                           
 30533                           ;incstack = 0
 30534                           ; Regs used in _displayCharReverse: [wreg+status,2+status,0]
 30535  37D1  0872               	movf	displayCharReverse@cVal+1,w
 30536  37D2  00F3               	movwf	??_displayCharReverse
 30537  37D3  0873               	movf	??_displayCharReverse,w
 30538  37D4  00F9               	movwf	displayCharReverse@retValUpper
 30539                           
 30540                           ;nullifyBadge_displayL1.c: 112: retValLower = cVal & 0xFF;
 30541  37D5  0871               	movf	displayCharReverse@cVal,w
 30542  37D6  00F3               	movwf	??_displayCharReverse
 30543  37D7  0873               	movf	??_displayCharReverse,w
 30544  37D8  00F8               	movwf	displayCharReverse@retValLower
 30545                           
 30546                           ;nullifyBadge_displayL1.c: 115: retValUpperRev = 0;
 30547  37D9  01FA               	clrf	displayCharReverse@retValUpperRev
 30548                           
 30549                           ;nullifyBadge_displayL1.c: 117: for (k = 0; k < 7; k++) {
 30550  37DA  01FB               	clrf	displayCharReverse@k
 30551  37DB  3007               	movlw	7
 30552  37DC  027B               	subwf	displayCharReverse@k,w
 30553  37DD  1803               	btfsc	3,0
 30554  37DE  2FF0               	goto	l7972
 30555  37DF                     l7964:	
 30556                           
 30557                           ;nullifyBadge_displayL1.c: 118: retValUpperRev |= (retValUpper & 0x1);
 30558  37DF  0879               	movf	displayCharReverse@retValUpper,w
 30559  37E0  3901               	andlw	1
 30560  37E1  00F3               	movwf	??_displayCharReverse
 30561  37E2  0873               	movf	??_displayCharReverse,w
 30562  37E3  04FA               	iorwf	displayCharReverse@retValUpperRev,f
 30563                           
 30564                           ;nullifyBadge_displayL1.c: 119: retValUpper >>= 1;
 30565  37E4  1003               	clrc
 30566  37E5  0CF9               	rrf	displayCharReverse@retValUpper,f
 30567                           
 30568                           ;nullifyBadge_displayL1.c: 120: retValUpperRev <<= 1;
 30569  37E6  1003               	clrc
 30570  37E7  0DFA               	rlf	displayCharReverse@retValUpperRev,f
 30571  37E8  3001               	movlw	1
 30572  37E9  00F3               	movwf	??_displayCharReverse
 30573  37EA  0873               	movf	??_displayCharReverse,w
 30574  37EB  07FB               	addwf	displayCharReverse@k,f
 30575  37EC  3007               	movlw	7
 30576  37ED  027B               	subwf	displayCharReverse@k,w
 30577  37EE  1C03               	skipc
 30578  37EF  2FDF               	goto	l7964
 30579  37F0                     l7972:	
 30580                           
 30581                           ;nullifyBadge_displayL1.c: 121: }
 30582                           ;nullifyBadge_displayL1.c: 123: return (retValLower << 8) | (retValUpperRev);
 30583  37F0  087A               	movf	displayCharReverse@retValUpperRev,w
 30584  37F1  00F3               	movwf	??_displayCharReverse
 30585  37F2  01F4               	clrf	??_displayCharReverse+1
 30586  37F3  0878               	movf	displayCharReverse@retValLower,w
 30587  37F4  00F5               	movwf	??_displayCharReverse+2
 30588  37F5  01F6               	clrf	??_displayCharReverse+3
 30589  37F6  0875               	movf	??_displayCharReverse+2,w
 30590  37F7  00F6               	movwf	??_displayCharReverse+3
 30591  37F8  01F5               	clrf	??_displayCharReverse+2
 30592  37F9  0873               	movf	??_displayCharReverse,w
 30593  37FA  0475               	iorwf	??_displayCharReverse+2,w
 30594  37FB  00F1               	movwf	?_displayCharReverse
 30595  37FC  0874               	movf	??_displayCharReverse+1,w
 30596  37FD  0476               	iorwf	??_displayCharReverse+3,w
 30597  37FE  00F2               	movwf	?_displayCharReverse+1
 30598  37FF  0008               	return
 30599  3800                     __end_of_displayCharReverse:	
 30600                           
 30601                           	psect	text70
 30602  33F8                     __ptext70:	
 30603 ;; *************** function _nullifyBadge_segDisplayForceUpdate *****************
 30604 ;; Defined at:
 30605 ;;		line 108 in file "nullifyBadge.c"
 30606 ;; Parameters:    Size  Location     Type
 30607 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 30608 ;;		 -> badge_inst(18), 
 30609 ;; Auto vars:     Size  Location     Type
 30610 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 30611 ;;		 -> badge_inst(18), 
 30612 ;; Return value:  Size  Location     Type
 30613 ;;                  1    wreg      void 
 30614 ;; Registers used:
 30615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30616 ;; Tracked objects:
 30617 ;;		On entry : 0/0
 30618 ;;		On exit  : 0/0
 30619 ;;		Unchanged: 0/0
 30620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30624 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30625 ;;Total ram usage:        1 bytes
 30626 ;; Hardware stack levels used:    1
 30627 ;; Hardware stack levels required when called:    8
 30628 ;; This function calls:
 30629 ;;		_displayL2_ForceUpdate
 30630 ;; This function is called by:
 30631 ;;		_marquee_speedy
 30632 ;;		_marquee
 30633 ;;		_menu_display_option
 30634 ;;		_flashy_display_option
 30635 ;;		_flashy_Main
 30636 ;; This function uses a non-reentrant model
 30637 ;;
 30638                           
 30639                           
 30640                           ;psect for function _nullifyBadge_segDisplayForceUpdate
 30641  33F8                     _nullifyBadge_segDisplayForceUpdate:	
 30642                           
 30643                           ;incstack = 0
 30644                           ; Regs used in _nullifyBadge_segDisplayForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+
      +                          pclath+cstack]
 30645                           ;nullifyBadge_segDisplayForceUpdate@badge stored from wreg
 30646  33F8  0020               	movlb	0	; select bank0
 30647  33F9  00AB               	movwf	nullifyBadge_segDisplayForceUpdate@badge
 30648                           
 30649                           ;nullifyBadge.c: 109: displayL2_ForceUpdate(&badge->display);
 30650  33FA  082B               	movf	nullifyBadge_segDisplayForceUpdate@badge,w
 30651  33FB  31B3  23F2         	fcall	_displayL2_ForceUpdate
 30652  33FD  0008               	return
 30653  33FE                     __end_of_nullifyBadge_segDisplayForceUpdate:	
 30654                           
 30655                           	psect	text71
 30656  33F2                     __ptext71:	
 30657 ;; *************** function _displayL2_ForceUpdate *****************
 30658 ;; Defined at:
 30659 ;;		line 79 in file "nullifyBadge_displayL2.c"
 30660 ;; Parameters:    Size  Location     Type
 30661 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30662 ;;		 -> badge_inst(18), 
 30663 ;; Auto vars:     Size  Location     Type
 30664 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 30665 ;;		 -> badge_inst(18), 
 30666 ;; Return value:  Size  Location     Type
 30667 ;;                  1    wreg      void 
 30668 ;; Registers used:
 30669 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30670 ;; Tracked objects:
 30671 ;;		On entry : 0/0
 30672 ;;		On exit  : 0/0
 30673 ;;		Unchanged: 0/0
 30674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30676 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30678 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30679 ;;Total ram usage:        1 bytes
 30680 ;; Hardware stack levels used:    1
 30681 ;; Hardware stack levels required when called:    7
 30682 ;; This function calls:
 30683 ;;		_displayL1_Update
 30684 ;; This function is called by:
 30685 ;;		_nullifyBadge_segDisplayForceUpdate
 30686 ;; This function uses a non-reentrant model
 30687 ;;
 30688                           
 30689                           
 30690                           ;psect for function _displayL2_ForceUpdate
 30691  33F2                     _displayL2_ForceUpdate:	
 30692                           
 30693                           ;incstack = 0
 30694                           ; Regs used in _displayL2_ForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 30695                           ;displayL2_ForceUpdate@display stored from wreg
 30696  33F2  00FB               	movwf	displayL2_ForceUpdate@display
 30697                           
 30698                           ;nullifyBadge_displayL2.c: 80: displayL1_Update(&display->display_l1);
 30699  33F3  087B               	movf	displayL2_ForceUpdate@display,w
 30700  33F4  3E07               	addlw	7
 30701  33F5  31B5  2502         	fcall	_displayL1_Update
 30702  33F7  0008               	return
 30703  33F8                     __end_of_displayL2_ForceUpdate:	
 30704                           
 30705                           	psect	text72
 30706  37A4                     __ptext72:	
 30707 ;; *************** function ___lwmod *****************
 30708 ;; Defined at:
 30709 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwmod.c"
 30710 ;; Parameters:    Size  Location     Type
 30711 ;;  divisor         2   11[BANK0 ] unsigned int 
 30712 ;;  dividend        2   13[BANK0 ] unsigned int 
 30713 ;; Auto vars:     Size  Location     Type
 30714 ;;  counter         1   10[COMMON] unsigned char 
 30715 ;; Return value:  Size  Location     Type
 30716 ;;                  2   11[BANK0 ] unsigned int 
 30717 ;; Registers used:
 30718 ;;		wreg, status,2, status,0
 30719 ;; Tracked objects:
 30720 ;;		On entry : 0/0
 30721 ;;		On exit  : 0/0
 30722 ;;		Unchanged: 0/0
 30723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30724 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30725 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30726 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30727 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30728 ;;Total ram usage:        6 bytes
 30729 ;; Hardware stack levels used:    1
 30730 ;; Hardware stack levels required when called:    4
 30731 ;; This function calls:
 30732 ;;		Nothing
 30733 ;; This function is called by:
 30734 ;;		_marquee_speedy
 30735 ;;		_marquee
 30736 ;;		_led_roundabout
 30737 ;;		_led_curtain
 30738 ;;		_led_Parody
 30739 ;;		_menu_display_option
 30740 ;;		_locked_Main
 30741 ;;		_slot_Setup
 30742 ;;		_slot_Main
 30743 ;;		_sprintf
 30744 ;; This function uses a non-reentrant model
 30745 ;;
 30746                           
 30747                           
 30748                           ;psect for function ___lwmod
 30749  37A4                     ___lwmod:	
 30750                           
 30751                           ;incstack = 0
 30752                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 30753  37A4  0020               	movlb	0	; select bank0
 30754  37A5  082B               	movf	___lwmod@divisor,w
 30755  37A6  042C               	iorwf	___lwmod@divisor+1,w
 30756  37A7  1903               	btfsc	3,2
 30757  37A8  2FCC               	goto	l8200
 30758  37A9  01FA               	clrf	___lwmod@counter
 30759  37AA  0AFA               	incf	___lwmod@counter,f
 30760  37AB                     l8190:	
 30761  37AB  1BAC               	btfsc	___lwmod@divisor+1,7
 30762  37AC  2FB7               	goto	l8192
 30763  37AD  3001               	movlw	1
 30764  37AE                     u4765:	
 30765  37AE  35AB               	lslf	___lwmod@divisor,f
 30766  37AF  0DAC               	rlf	___lwmod@divisor+1,f
 30767  37B0  0B89               	decfsz	9,f
 30768  37B1  2FAE               	goto	u4765
 30769  37B2  3001               	movlw	1
 30770  37B3  00F9               	movwf	??___lwmod
 30771  37B4  0879               	movf	??___lwmod,w
 30772  37B5  07FA               	addwf	___lwmod@counter,f
 30773  37B6  2FAB               	goto	l8190
 30774  37B7                     l8192:	
 30775  37B7  082C               	movf	___lwmod@divisor+1,w
 30776  37B8  022E               	subwf	___lwmod@dividend+1,w
 30777  37B9  1D03               	skipz
 30778  37BA  2FBD               	goto	u4785
 30779  37BB  082B               	movf	___lwmod@divisor,w
 30780  37BC  022D               	subwf	___lwmod@dividend,w
 30781  37BD                     u4785:	
 30782  37BD  1C03               	skipc
 30783  37BE  2FC3               	goto	l8196
 30784  37BF  082B               	movf	___lwmod@divisor,w
 30785  37C0  02AD               	subwf	___lwmod@dividend,f
 30786  37C1  082C               	movf	___lwmod@divisor+1,w
 30787  37C2  3BAE               	subwfb	___lwmod@dividend+1,f
 30788  37C3                     l8196:	
 30789  37C3  3001               	movlw	1
 30790  37C4                     u4795:	
 30791  37C4  36AC               	lsrf	___lwmod@divisor+1,f
 30792  37C5  0CAB               	rrf	___lwmod@divisor,f
 30793  37C6  0B89               	decfsz	9,f
 30794  37C7  2FC4               	goto	u4795
 30795  37C8  3001               	movlw	1
 30796  37C9  02FA               	subwf	___lwmod@counter,f
 30797  37CA  1D03               	btfss	3,2
 30798  37CB  2FB7               	goto	l8192
 30799  37CC                     l8200:	
 30800  37CC  082E               	movf	___lwmod@dividend+1,w
 30801  37CD  00AC               	movwf	?___lwmod+1
 30802  37CE  082D               	movf	___lwmod@dividend,w
 30803  37CF  00AB               	movwf	?___lwmod
 30804  37D0  0008               	return
 30805  37D1                     __end_of___lwmod:	
 30806                           
 30807                           	psect	text73
 30808  293A                     __ptext73:	
 30809 ;; *************** function ___lwdiv *****************
 30810 ;; Defined at:
 30811 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwdiv.c"
 30812 ;; Parameters:    Size  Location     Type
 30813 ;;  divisor         2    1[COMMON] unsigned int 
 30814 ;;  dividend        2    3[COMMON] unsigned int 
 30815 ;; Auto vars:     Size  Location     Type
 30816 ;;  quotient        2    7[COMMON] unsigned int 
 30817 ;;  counter         1    6[COMMON] unsigned char 
 30818 ;; Return value:  Size  Location     Type
 30819 ;;                  2    1[COMMON] unsigned int 
 30820 ;; Registers used:
 30821 ;;		wreg, status,2, status,0
 30822 ;; Tracked objects:
 30823 ;;		On entry : 0/0
 30824 ;;		On exit  : 0/0
 30825 ;;		Unchanged: 0/0
 30826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30827 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30828 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30830 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30831 ;;Total ram usage:        8 bytes
 30832 ;; Hardware stack levels used:    1
 30833 ;; Hardware stack levels required when called:    4
 30834 ;; This function calls:
 30835 ;;		Nothing
 30836 ;; This function is called by:
 30837 ;;		_marquee_speedy
 30838 ;;		_marquee
 30839 ;;		_sprintf
 30840 ;; This function uses a non-reentrant model
 30841 ;;
 30842                           
 30843                           
 30844                           ;psect for function ___lwdiv
 30845  293A                     ___lwdiv:	
 30846                           
 30847                           ;incstack = 0
 30848                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 30849  293A  01F7               	clrf	___lwdiv@quotient
 30850  293B  01F8               	clrf	___lwdiv@quotient+1
 30851  293C  0871               	movf	___lwdiv@divisor,w
 30852  293D  0472               	iorwf	___lwdiv@divisor+1,w
 30853  293E  1903               	btfsc	3,2
 30854  293F  2969               	goto	l8178
 30855  2940  01F6               	clrf	___lwdiv@counter
 30856  2941  0AF6               	incf	___lwdiv@counter,f
 30857  2942                     l8166:	
 30858  2942  1BF2               	btfsc	___lwdiv@divisor+1,7
 30859  2943  294E               	goto	l8168
 30860  2944  3001               	movlw	1
 30861  2945                     u4695:	
 30862  2945  35F1               	lslf	___lwdiv@divisor,f
 30863  2946  0DF2               	rlf	___lwdiv@divisor+1,f
 30864  2947  0B89               	decfsz	9,f
 30865  2948  2945               	goto	u4695
 30866  2949  3001               	movlw	1
 30867  294A  00F5               	movwf	??___lwdiv
 30868  294B  0875               	movf	??___lwdiv,w
 30869  294C  07F6               	addwf	___lwdiv@counter,f
 30870  294D  2942               	goto	l8166
 30871  294E                     l8168:	
 30872  294E  3001               	movlw	1
 30873  294F                     u4715:	
 30874  294F  35F7               	lslf	___lwdiv@quotient,f
 30875  2950  0DF8               	rlf	___lwdiv@quotient+1,f
 30876  2951  0B89               	decfsz	9,f
 30877  2952  294F               	goto	u4715
 30878  2953  0872               	movf	___lwdiv@divisor+1,w
 30879  2954  0274               	subwf	___lwdiv@dividend+1,w
 30880  2955  1D03               	skipz
 30881  2956  2959               	goto	u4725
 30882  2957  0871               	movf	___lwdiv@divisor,w
 30883  2958  0273               	subwf	___lwdiv@dividend,w
 30884  2959                     u4725:	
 30885  2959  1C03               	skipc
 30886  295A  2960               	goto	l8174
 30887  295B  0871               	movf	___lwdiv@divisor,w
 30888  295C  02F3               	subwf	___lwdiv@dividend,f
 30889  295D  0872               	movf	___lwdiv@divisor+1,w
 30890  295E  3BF4               	subwfb	___lwdiv@dividend+1,f
 30891  295F  1477               	bsf	___lwdiv@quotient,0
 30892  2960                     l8174:	
 30893  2960  3001               	movlw	1
 30894  2961                     u4735:	
 30895  2961  36F2               	lsrf	___lwdiv@divisor+1,f
 30896  2962  0CF1               	rrf	___lwdiv@divisor,f
 30897  2963  0B89               	decfsz	9,f
 30898  2964  2961               	goto	u4735
 30899  2965  3001               	movlw	1
 30900  2966  02F6               	subwf	___lwdiv@counter,f
 30901  2967  1D03               	btfss	3,2
 30902  2968  294E               	goto	l8168
 30903  2969                     l8178:	
 30904  2969  0878               	movf	___lwdiv@quotient+1,w
 30905  296A  00F2               	movwf	?___lwdiv+1
 30906  296B  0877               	movf	___lwdiv@quotient,w
 30907  296C  00F1               	movwf	?___lwdiv
 30908  296D  0008               	return
 30909  296E                     __end_of___lwdiv:	
 30910                           
 30911                           	psect	text74
 30912  3672                     __ptext74:	
 30913 ;; *************** function _TMR0_Read16bitTimer *****************
 30914 ;; Defined at:
 30915 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 30916 ;; Parameters:    Size  Location     Type
 30917 ;;		None
 30918 ;; Auto vars:     Size  Location     Type
 30919 ;;  readVal         2    8[COMMON] unsigned int 
 30920 ;;  readValHigh     1   11[COMMON] unsigned char 
 30921 ;;  readValLow      1   10[COMMON] unsigned char 
 30922 ;; Return value:  Size  Location     Type
 30923 ;;                  2    1[COMMON] unsigned int 
 30924 ;; Registers used:
 30925 ;;		wreg, status,2, status,0
 30926 ;; Tracked objects:
 30927 ;;		On entry : 0/0
 30928 ;;		On exit  : 0/0
 30929 ;;		Unchanged: 0/0
 30930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30931 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30932 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30933 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30934 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30935 ;;Total ram usage:       11 bytes
 30936 ;; Hardware stack levels used:    1
 30937 ;; Hardware stack levels required when called:    4
 30938 ;; This function calls:
 30939 ;;		Nothing
 30940 ;; This function is called by:
 30941 ;;		_scheduler_TaskRun
 30942 ;;		_schedulerExecute
 30943 ;; This function uses a non-reentrant model
 30944 ;;
 30945                           
 30946                           
 30947                           ;psect for function _TMR0_Read16bitTimer
 30948  3672                     _TMR0_Read16bitTimer:	
 30949                           
 30950                           ;tmr0.c: 111: uint16_t readVal;
 30951                           ;tmr0.c: 112: uint8_t readValLow;
 30952                           ;tmr0.c: 113: uint8_t readValHigh;
 30953                           ;tmr0.c: 115: readValLow = TMR0L;
 30954                           
 30955                           ;incstack = 0
 30956                           ; Regs used in _TMR0_Read16bitTimer: [wreg+status,2+status,0]
 30957  3672  0020               	movlb	0	; select bank0
 30958  3673  0815               	movf	21,w	;volatile
 30959  3674  00F3               	movwf	??_TMR0_Read16bitTimer
 30960  3675  0873               	movf	??_TMR0_Read16bitTimer,w
 30961  3676  00FA               	movwf	TMR0_Read16bitTimer@readValLow
 30962                           
 30963                           ;tmr0.c: 116: readValHigh = TMR0H;
 30964  3677  0816               	movf	22,w	;volatile
 30965  3678  00F3               	movwf	??_TMR0_Read16bitTimer
 30966  3679  0873               	movf	??_TMR0_Read16bitTimer,w
 30967  367A  00FB               	movwf	TMR0_Read16bitTimer@readValHigh
 30968                           
 30969                           ;tmr0.c: 117: readVal = ((uint16_t)readValHigh << 8) + readValLow;
 30970  367B  087A               	movf	TMR0_Read16bitTimer@readValLow,w
 30971  367C  00F3               	movwf	??_TMR0_Read16bitTimer
 30972  367D  01F4               	clrf	??_TMR0_Read16bitTimer+1
 30973  367E  087B               	movf	TMR0_Read16bitTimer@readValHigh,w
 30974  367F  00F5               	movwf	??_TMR0_Read16bitTimer+2
 30975  3680  01F6               	clrf	??_TMR0_Read16bitTimer+3
 30976  3681  0875               	movf	??_TMR0_Read16bitTimer+2,w
 30977  3682  00F6               	movwf	??_TMR0_Read16bitTimer+3
 30978  3683  01F5               	clrf	??_TMR0_Read16bitTimer+2
 30979  3684  0873               	movf	??_TMR0_Read16bitTimer,w
 30980  3685  0775               	addwf	??_TMR0_Read16bitTimer+2,w
 30981  3686  00F8               	movwf	TMR0_Read16bitTimer@readVal
 30982  3687  0874               	movf	??_TMR0_Read16bitTimer+1,w
 30983  3688  3D76               	addwfc	??_TMR0_Read16bitTimer+3,w
 30984  3689  00F9               	movwf	TMR0_Read16bitTimer@readVal+1
 30985                           
 30986                           ;tmr0.c: 119: return readVal;
 30987  368A  0879               	movf	TMR0_Read16bitTimer@readVal+1,w
 30988  368B  00F2               	movwf	?_TMR0_Read16bitTimer+1
 30989  368C  0878               	movf	TMR0_Read16bitTimer@readVal,w
 30990  368D  00F1               	movwf	?_TMR0_Read16bitTimer
 30991  368E  0008               	return
 30992  368F                     __end_of_TMR0_Read16bitTimer:	
 30993                           
 30994                           	psect	text75
 30995  2005                     __ptext75:	
 30996 ;; *************** function _nullifyBadge_platformInit *****************
 30997 ;; Defined at:
 30998 ;;		line 13 in file "nullifyBadge.c"
 30999 ;; Parameters:    Size  Location     Type
 31000 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 31001 ;;		 -> badge_inst(18), 
 31002 ;; Auto vars:     Size  Location     Type
 31003 ;;  badge           1   12[BANK0 ] PTR struct t_nullifyBadg
 31004 ;;		 -> badge_inst(18), 
 31005 ;; Return value:  Size  Location     Type
 31006 ;;                  1    wreg      void 
 31007 ;; Registers used:
 31008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31009 ;; Tracked objects:
 31010 ;;		On entry : 0/0
 31011 ;;		On exit  : 0/0
 31012 ;;		Unchanged: 0/0
 31013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31017 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31018 ;;Total ram usage:        1 bytes
 31019 ;; Hardware stack levels used:    1
 31020 ;; Hardware stack levels required when called:    9
 31021 ;; This function calls:
 31022 ;;		_OSCILLATOR_Initialize
 31023 ;;		_PIN_MANAGER_Initialize
 31024 ;;		_PWM1_Initialize
 31025 ;;		_PWM1_LoadDutyValue
 31026 ;;		_PWM2_Initialize
 31027 ;;		_PWM2_LoadDutyValue
 31028 ;;		_PWM5_Initialize
 31029 ;;		_PWM5_LoadDutyValue
 31030 ;;		_PWM6_Initialize
 31031 ;;		_PWM6_LoadDutyValue
 31032 ;;		_SPI1_Initialize
 31033 ;;		_SYSTEM_Initialize
 31034 ;;		_TMR0_Initialize
 31035 ;;		_TMR2_Initialize
 31036 ;;		_TMR4_Initialize
 31037 ;;		_displayL2_Initialize
 31038 ;; This function is called by:
 31039 ;;		_main
 31040 ;; This function uses a non-reentrant model
 31041 ;;
 31042                           
 31043                           
 31044                           ;psect for function _nullifyBadge_platformInit
 31045  2005                     _nullifyBadge_platformInit:	
 31046                           
 31047                           ;incstack = 0
 31048                           ; Regs used in _nullifyBadge_platformInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 31049                           ;nullifyBadge_platformInit@badge stored from wreg
 31050  2005  0020               	movlb	0	; select bank0
 31051  2006  00AC               	movwf	nullifyBadge_platformInit@badge
 31052                           
 31053                           ;nullifyBadge.c: 15: SYSTEM_Initialize();
 31054  2007  31B6  26E9  31A0   	fcall	_SYSTEM_Initialize
 31055                           
 31056                           ;nullifyBadge.c: 16: OSCILLATOR_Initialize();
 31057  200A  31B4  2426  31A0   	fcall	_OSCILLATOR_Initialize
 31058                           
 31059                           ;nullifyBadge.c: 19: TMR0_Initialize();
 31060  200D  31B6  268F  31A0   	fcall	_TMR0_Initialize
 31061                           
 31062                           ;nullifyBadge.c: 20: TMR2_Initialize();
 31063  2010  31B4  2430  31A0   	fcall	_TMR2_Initialize
 31064                           
 31065                           ;nullifyBadge.c: 21: TMR4_Initialize();
 31066  2013  31B4  2465  31A0   	fcall	_TMR4_Initialize
 31067                           
 31068                           ;nullifyBadge.c: 23: PIN_MANAGER_Initialize();
 31069  2016  31AE  2629  31A0   	fcall	_PIN_MANAGER_Initialize
 31070                           
 31071                           ;nullifyBadge.c: 24: PWM1_Initialize();
 31072  2019  31B4  244F  31A0   	fcall	_PWM1_Initialize
 31073                           
 31074                           ;nullifyBadge.c: 26: PWM2_Initialize();
 31075  201C  31B4  245A  31A0   	fcall	_PWM2_Initialize
 31076                           
 31077                           ;nullifyBadge.c: 27: PWM5_Initialize();
 31078  201F  31B4  247B  31A0   	fcall	_PWM5_Initialize
 31079                           
 31080                           ;nullifyBadge.c: 28: PWM6_Initialize();
 31081  2022  31B4  2487  31A0   	fcall	_PWM6_Initialize
 31082                           
 31083                           ;nullifyBadge.c: 29: SPI1_Initialize();
 31084  2025  31B4  2404  31A0   	fcall	_SPI1_Initialize
 31085                           
 31086                           ;nullifyBadge.c: 32: PWM1_LoadDutyValue(128);
 31087  2028  3080               	movlw	128
 31088  2029  00F1               	movwf	PWM1_LoadDutyValue@dutyValue
 31089  202A  3000               	movlw	0
 31090  202B  00F2               	movwf	PWM1_LoadDutyValue@dutyValue+1
 31091  202C  31B5  2580  31A0   	fcall	_PWM1_LoadDutyValue
 31092                           
 31093                           ;nullifyBadge.c: 44: do { LATBbits.LATB7 = 1; } while(0);
 31094  202F  0022               	movlb	2	; select bank2
 31095  2030  178D               	bsf	13,7	;volatile
 31096                           
 31097                           ;nullifyBadge.c: 45: PWM2_LoadDutyValue(192);
 31098  2031  30C0               	movlw	192
 31099  2032  00F1               	movwf	PWM2_LoadDutyValue@dutyValue
 31100  2033  3000               	movlw	0
 31101  2034  00F2               	movwf	PWM2_LoadDutyValue@dutyValue+1
 31102  2035  31B5  2596  31A0   	fcall	_PWM2_LoadDutyValue
 31103                           
 31104                           ;nullifyBadge.c: 50: PWM5_LoadDutyValue(gamma_table_256x1k[128]);
 31105  2038  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 31106  2039  0084               	movwf	4
 31107  203A  3099               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 31108  203B  0085               	movwf	5
 31109  203C  3F00               	moviw [0]fsr0
 31110  203D  00F1               	movwf	PWM5_LoadDutyValue@dutyValue
 31111  203E  3F01               	moviw [1]fsr0
 31112  203F  00F2               	movwf	PWM5_LoadDutyValue@dutyValue+1
 31113  2040  31B5  25AC  31A0   	fcall	_PWM5_LoadDutyValue
 31114                           
 31115                           ;nullifyBadge.c: 51: PWM6_LoadDutyValue(gamma_table_256x1k[128]);
 31116  2043  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 31117  2044  0084               	movwf	4
 31118  2045  3099               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 31119  2046  0085               	movwf	5
 31120  2047  3F00               	moviw [0]fsr0
 31121  2048  00F1               	movwf	PWM6_LoadDutyValue@dutyValue
 31122  2049  3F01               	moviw [1]fsr0
 31123  204A  00F2               	movwf	PWM6_LoadDutyValue@dutyValue+1
 31124  204B  31B5  25C2  31A0   	fcall	_PWM6_LoadDutyValue
 31125                           
 31126                           ;nullifyBadge.c: 54: displayL2_Initialize(&badge->display);
 31127  204E  0020               	movlb	0	; select bank0
 31128  204F  082C               	movf	nullifyBadge_platformInit@badge,w
 31129  2050  31B7  272E         	fcall	_displayL2_Initialize
 31130                           
 31131                           ;nullifyBadge.c: 57: badge->registeredHw = 0x0;
 31132  2052  0020               	movlb	0	; select bank0
 31133  2053  082C               	movf	nullifyBadge_platformInit@badge,w
 31134  2054  3E11               	addlw	17
 31135  2055  0086               	movwf	6
 31136  2056  3001               	movlw	1	; select bank2/3
 31137  2057  0087               	movwf	7
 31138  2058  0181               	clrf	1
 31139  2059  0008               	return
 31140  205A                     __end_of_nullifyBadge_platformInit:	
 31141                           
 31142                           	psect	text76
 31143  372E                     __ptext76:	
 31144 ;; *************** function _displayL2_Initialize *****************
 31145 ;; Defined at:
 31146 ;;		line 12 in file "nullifyBadge_displayL2.c"
 31147 ;; Parameters:    Size  Location     Type
 31148 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31149 ;;		 -> badge_inst(18), 
 31150 ;; Auto vars:     Size  Location     Type
 31151 ;;  display         1   11[BANK0 ] PTR struct t_nullifyDisp
 31152 ;;		 -> badge_inst(18), 
 31153 ;; Return value:  Size  Location     Type
 31154 ;;                  1    wreg      void 
 31155 ;; Registers used:
 31156 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31157 ;; Tracked objects:
 31158 ;;		On entry : 0/0
 31159 ;;		On exit  : 0/0
 31160 ;;		Unchanged: 0/0
 31161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31163 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31165 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31166 ;;Total ram usage:        1 bytes
 31167 ;; Hardware stack levels used:    1
 31168 ;; Hardware stack levels required when called:    8
 31169 ;; This function calls:
 31170 ;;		_displayL1_Initialize
 31171 ;;		_memset
 31172 ;; This function is called by:
 31173 ;;		_nullifyBadge_platformInit
 31174 ;; This function uses a non-reentrant model
 31175 ;;
 31176                           
 31177                           
 31178                           ;psect for function _displayL2_Initialize
 31179  372E                     _displayL2_Initialize:	
 31180                           
 31181                           ;incstack = 0
 31182                           ; Regs used in _displayL2_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31183                           ;displayL2_Initialize@display stored from wreg
 31184  372E  0020               	movlb	0	; select bank0
 31185  372F  00AB               	movwf	displayL2_Initialize@display
 31186                           
 31187                           ;nullifyBadge_displayL2.c: 13: displayL1_Initialize(&display->display_l1);
 31188  3730  082B               	movf	displayL2_Initialize@display,w
 31189  3731  3E07               	addlw	7
 31190  3732  31B5  2559  31B7   	fcall	_displayL1_Initialize
 31191                           
 31192                           ;nullifyBadge_displayL2.c: 14: memset(display->charVect, ' ', sizeof(display->charVect))
      +                          ;
 31193  3735  0020               	movlb	0	; select bank0
 31194  3736  082B               	movf	displayL2_Initialize@display,w
 31195  3737  00F1               	movwf	memset@p1
 31196  3738  3001               	movlw	1
 31197  3739  00F2               	movwf	memset@p1+1
 31198  373A  3020               	movlw	32
 31199  373B  00F3               	movwf	memset@c
 31200  373C  3000               	movlw	0
 31201  373D  00F4               	movwf	memset@c+1
 31202  373E  3004               	movlw	4
 31203  373F  00F5               	movwf	memset@n
 31204  3740  3000               	movlw	0
 31205  3741  00F6               	movwf	memset@n+1
 31206  3742  31B5  25EE         	fcall	_memset
 31207                           
 31208                           ;nullifyBadge_displayL2.c: 15: display->dpVect = 0;
 31209  3744  0020               	movlb	0	; select bank0
 31210  3745  082B               	movf	displayL2_Initialize@display,w
 31211  3746  3E04               	addlw	4
 31212  3747  0086               	movwf	6
 31213  3748  3001               	movlw	1	; select bank2/3
 31214  3749  0087               	movwf	7
 31215  374A  0181               	clrf	1
 31216                           
 31217                           ;nullifyBadge_displayL2.c: 16: display->ledVect = 0;
 31218  374B  082B               	movf	displayL2_Initialize@display,w
 31219  374C  3E05               	addlw	5
 31220  374D  0086               	movwf	6
 31221  374E  3001               	movlw	1	; select bank2/3
 31222  374F  0087               	movwf	7
 31223  3750  3000               	movlw	0
 31224  3751  3FC0               	movwi [0]fsr1
 31225  3752  3FC1               	movwi [1]fsr1
 31226  3753  0008               	return
 31227  3754                     __end_of_displayL2_Initialize:	
 31228                           
 31229                           	psect	text77
 31230  3559                     __ptext77:	
 31231 ;; *************** function _displayL1_Initialize *****************
 31232 ;; Defined at:
 31233 ;;		line 13 in file "nullifyBadge_displayL1.c"
 31234 ;; Parameters:    Size  Location     Type
 31235 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31236 ;;		 -> badge_inst(18), 
 31237 ;; Auto vars:     Size  Location     Type
 31238 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 31239 ;;		 -> badge_inst(18), 
 31240 ;; Return value:  Size  Location     Type
 31241 ;;                  1    wreg      void 
 31242 ;; Registers used:
 31243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31244 ;; Tracked objects:
 31245 ;;		On entry : 0/0
 31246 ;;		On exit  : 0/0
 31247 ;;		Unchanged: 0/0
 31248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31252 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31253 ;;Total ram usage:        1 bytes
 31254 ;; Hardware stack levels used:    1
 31255 ;; Hardware stack levels required when called:    7
 31256 ;; This function calls:
 31257 ;;		_displayL1_Update
 31258 ;;		_memset
 31259 ;; This function is called by:
 31260 ;;		_displayL2_Initialize
 31261 ;; This function uses a non-reentrant model
 31262 ;;
 31263                           
 31264                           
 31265                           ;psect for function _displayL1_Initialize
 31266  3559                     _displayL1_Initialize:	
 31267                           
 31268                           ;incstack = 0
 31269                           ; Regs used in _displayL1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31270                           ;displayL1_Initialize@display stored from wreg
 31271  3559  00FB               	movwf	displayL1_Initialize@display
 31272                           
 31273                           ;nullifyBadge_displayL1.c: 14: memset(display->displayVect, 0, sizeof(struct t_nullifyDi
      +                          splay_l1));
 31274  355A  087B               	movf	displayL1_Initialize@display,w
 31275  355B  00F1               	movwf	memset@p1
 31276  355C  3001               	movlw	1
 31277  355D  00F2               	movwf	memset@p1+1
 31278  355E  3000               	movlw	0
 31279  355F  00F3               	movwf	memset@c
 31280  3560  00F4               	movwf	memset@c+1
 31281  3561  300A               	movlw	10
 31282  3562  00F5               	movwf	memset@n
 31283  3563  3000               	movlw	0
 31284  3564  00F6               	movwf	memset@n+1
 31285  3565  31B5  25EE  31B5   	fcall	_memset
 31286                           
 31287                           ;nullifyBadge_displayL1.c: 15: displayL1_Update(display);
 31288  3568  087B               	movf	displayL1_Initialize@display,w
 31289  3569  31B5  2502         	fcall	_displayL1_Update
 31290  356B  0008               	return
 31291  356C                     __end_of_displayL1_Initialize:	
 31292                           
 31293                           	psect	text78
 31294  35EE                     __ptext78:	
 31295 ;; *************** function _memset *****************
 31296 ;; Defined at:
 31297 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/memset.c"
 31298 ;; Parameters:    Size  Location     Type
 31299 ;;  p1              2    1[COMMON] PTR void 
 31300 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 31301 ;;		 -> menu_TaskData(14), flashy_TaskData(30), badge_inst(18), NULL(0), 
 31302 ;;  c               2    3[COMMON] int 
 31303 ;;  n               2    5[COMMON] unsigned int 
 31304 ;; Auto vars:     Size  Location     Type
 31305 ;;  p               2    7[COMMON] PTR unsigned char 
 31306 ;;		 -> matrix_TaskData(29), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 31307 ;;		 -> menu_TaskData(14), flashy_TaskData(30), badge_inst(18), NULL(0), 
 31308 ;; Return value:  Size  Location     Type
 31309 ;;                  2    1[COMMON] PTR void 
 31310 ;; Registers used:
 31311 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 31312 ;; Tracked objects:
 31313 ;;		On entry : 0/0
 31314 ;;		On exit  : 0/0
 31315 ;;		Unchanged: 0/0
 31316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31317 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31318 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31320 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31321 ;;Total ram usage:        8 bytes
 31322 ;; Hardware stack levels used:    1
 31323 ;; Hardware stack levels required when called:    4
 31324 ;; This function calls:
 31325 ;;		Nothing
 31326 ;; This function is called by:
 31327 ;;		_displayL1_Initialize
 31328 ;;		_displayL2_Initialize
 31329 ;;		_slot_Setup
 31330 ;;		_slot_Main
 31331 ;; This function uses a non-reentrant model
 31332 ;;
 31333                           
 31334                           
 31335                           ;psect for function _memset
 31336  35EE                     _memset:	
 31337                           
 31338                           ;incstack = 0
 31339                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 31340  35EE  0872               	movf	memset@p1+1,w
 31341  35EF  00F8               	movwf	memset@p+1
 31342  35F0  0871               	movf	memset@p1,w
 31343  35F1  00F7               	movwf	memset@p
 31344  35F2                     l8266:	
 31345  35F2  3001               	movlw	1
 31346  35F3  02F5               	subwf	memset@n,f
 31347  35F4  3000               	movlw	0
 31348  35F5  3BF6               	subwfb	memset@n+1,f
 31349  35F6  0A75               	incf	memset@n,w
 31350  35F7  1903               	btfsc	3,2
 31351  35F8  0A76               	incf	memset@n+1,w
 31352  35F9  1903               	btfsc	3,2
 31353  35FA  0008               	return
 31354  35FB  0877               	movf	memset@p,w
 31355  35FC  0086               	movwf	6
 31356  35FD  0878               	movf	memset@p+1,w
 31357  35FE  0087               	movwf	7
 31358  35FF  0873               	movf	memset@c,w
 31359  3600  0081               	movwf	1
 31360  3601  3001               	movlw	1
 31361  3602  07F7               	addwf	memset@p,f
 31362  3603  3000               	movlw	0
 31363  3604  3DF8               	addwfc	memset@p+1,f
 31364  3605  2DF2               	goto	l8266
 31365  3606                     __end_of_memset:	
 31366                           ;	Return value of _memset is never used
 31367                           
 31368                           
 31369                           	psect	text79
 31370  3502                     __ptext79:	
 31371 ;; *************** function _displayL1_Update *****************
 31372 ;; Defined at:
 31373 ;;		line 97 in file "nullifyBadge_displayL1.c"
 31374 ;; Parameters:    Size  Location     Type
 31375 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31376 ;;		 -> badge_inst(18), 
 31377 ;; Auto vars:     Size  Location     Type
 31378 ;;  display         1   10[BANK0 ] PTR struct t_nullifyDisp
 31379 ;;		 -> badge_inst(18), 
 31380 ;;  tmpRxBuf       10    0[BANK0 ] unsigned char [10]
 31381 ;; Return value:  Size  Location     Type
 31382 ;;                  1    wreg      void 
 31383 ;; Registers used:
 31384 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31385 ;; Tracked objects:
 31386 ;;		On entry : 0/0
 31387 ;;		On exit  : 0/0
 31388 ;;		Unchanged: 0/0
 31389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31391 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31392 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31393 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31394 ;;Total ram usage:       13 bytes
 31395 ;; Hardware stack levels used:    1
 31396 ;; Hardware stack levels required when called:    6
 31397 ;; This function calls:
 31398 ;;		_SPI1_Exchange8bitBuffer
 31399 ;; This function is called by:
 31400 ;;		_displayL1_Initialize
 31401 ;;		_displayL2_ForceUpdate
 31402 ;;		_displayL2_EraseSegDisplay
 31403 ;;		_displayL2_SetUserLeds
 31404 ;;		_displayL2_ClrUserLeds
 31405 ;;		_displayL2_PrintChar
 31406 ;;		_displayL2_PrintStr
 31407 ;; This function uses a non-reentrant model
 31408 ;;
 31409                           
 31410                           
 31411                           ;psect for function _displayL1_Update
 31412  3502                     _displayL1_Update:	
 31413                           
 31414                           ;incstack = 0
 31415                           ; Regs used in _displayL1_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31416                           ;displayL1_Update@display stored from wreg
 31417  3502  0020               	movlb	0	; select bank0
 31418  3503  00AA               	movwf	displayL1_Update@display
 31419                           
 31420                           ;nullifyBadge_displayL1.c: 98: u8 tmpRxBuf[10];
 31421                           ;nullifyBadge_displayL1.c: 100: SPI1_Exchange8bitBuffer(display->displayVect, 10, tmpRxB
      +                          uf);
 31422  3504  300A               	movlw	10
 31423  3505  00F9               	movwf	??_displayL1_Update
 31424  3506  0879               	movf	??_displayL1_Update,w
 31425  3507  00F2               	movwf	SPI1_Exchange8bitBuffer@bufLen
 31426  3508  3020               	movlw	(low (displayL1_Update@tmpRxBuf| 0))& (0+255)
 31427  3509  00FA               	movwf	??_displayL1_Update+1
 31428  350A  087A               	movf	??_displayL1_Update+1,w
 31429  350B  00F3               	movwf	SPI1_Exchange8bitBuffer@dataOut
 31430  350C  082A               	movf	displayL1_Update@display,w
 31431  350D  31AD  2535         	fcall	_SPI1_Exchange8bitBuffer
 31432                           
 31433                           ;nullifyBadge_displayL1.c: 101: do { LATCbits.LATC7 = 1; } while(0);
 31434  350F  0022               	movlb	2	; select bank2
 31435  3510  178E               	bsf	14,7	;volatile
 31436                           
 31437                           ;nullifyBadge_displayL1.c: 102: do { LATCbits.LATC7 = 0; } while(0);
 31438  3511  138E               	bcf	14,7	;volatile
 31439  3512  0008               	return
 31440  3513                     __end_of_displayL1_Update:	
 31441                           
 31442                           	psect	text80
 31443  2D35                     __ptext80:	
 31444 ;; *************** function _SPI1_Exchange8bitBuffer *****************
 31445 ;; Defined at:
 31446 ;;		line 91 in file "mcc_generated_files/spi1.c"
 31447 ;; Parameters:    Size  Location     Type
 31448 ;;  dataIn          1    wreg     PTR unsigned char 
 31449 ;;		 -> badge_inst(18), 
 31450 ;;  bufLen          1    2[COMMON] unsigned char 
 31451 ;;  dataOut         1    3[COMMON] PTR unsigned char 
 31452 ;;		 -> displayL1_Update@tmpRxBuf(10), 
 31453 ;; Auto vars:     Size  Location     Type
 31454 ;;  dataIn          1    7[COMMON] PTR unsigned char 
 31455 ;;		 -> badge_inst(18), 
 31456 ;;  bytesWritten    1    8[COMMON] unsigned char 
 31457 ;; Return value:  Size  Location     Type
 31458 ;;                  1    wreg      unsigned char 
 31459 ;; Registers used:
 31460 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31461 ;; Tracked objects:
 31462 ;;		On entry : 0/0
 31463 ;;		On exit  : 0/0
 31464 ;;		Unchanged: 0/0
 31465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31466 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31467 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31468 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31469 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31470 ;;Total ram usage:        7 bytes
 31471 ;; Hardware stack levels used:    1
 31472 ;; Hardware stack levels required when called:    5
 31473 ;; This function calls:
 31474 ;;		_SPI1_Exchange8bit
 31475 ;; This function is called by:
 31476 ;;		_displayL1_Update
 31477 ;; This function uses a non-reentrant model
 31478 ;;
 31479                           
 31480                           
 31481                           ;psect for function _SPI1_Exchange8bitBuffer
 31482  2D35                     _SPI1_Exchange8bitBuffer:	
 31483                           
 31484                           ;incstack = 0
 31485                           ; Regs used in _SPI1_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 31486                           ;SPI1_Exchange8bitBuffer@dataIn stored from wreg
 31487  2D35  00F7               	movwf	SPI1_Exchange8bitBuffer@dataIn
 31488                           
 31489                           ;spi1.c: 93: uint8_t bytesWritten = 0;
 31490  2D36  01F8               	clrf	SPI1_Exchange8bitBuffer@bytesWritten
 31491                           
 31492                           ;spi1.c: 95: if(bufLen != 0)
 31493  2D37  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 31494  2D38  1903               	btfsc	3,2
 31495  2D39  0008               	return
 31496                           
 31497                           ;spi1.c: 96: {
 31498                           ;spi1.c: 97: if(dataIn != (0))
 31499  2D3A  0877               	movf	SPI1_Exchange8bitBuffer@dataIn,w
 31500  2D3B  1D03               	btfss	3,2
 31501  2D3C  2D65               	goto	l8012
 31502  2D3D  2D6A               	goto	l8014
 31503  2D3E                     l8004:	
 31504                           ;spi1.c: 98: {
 31505                           ;spi1.c: 99: while(bytesWritten < bufLen)
 31506                           
 31507                           
 31508                           ;spi1.c: 100: {
 31509                           ;spi1.c: 101: if(dataOut == (0))
 31510  2D3E  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 31511  2D3F  1D03               	btfss	3,2
 31512  2D40  2D4D               	goto	l8008
 31513                           
 31514                           ;spi1.c: 102: {
 31515                           ;spi1.c: 103: SPI1_Exchange8bit(dataIn[bytesWritten]);
 31516  2D41  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 31517  2D42  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 31518  2D43  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 31519  2D44  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 31520  2D45  0086               	movwf	6
 31521  2D46  3001               	movlw	1	; select bank2/3
 31522  2D47  0087               	movwf	7
 31523  2D48  0801               	movf	1,w
 31524  2D49  31B4  2414  31AD   	fcall	_SPI1_Exchange8bit
 31525                           
 31526                           ;spi1.c: 104: }
 31527  2D4C  2D61               	goto	l8010
 31528  2D4D                     l8008:	
 31529                           
 31530                           ;spi1.c: 105: else
 31531                           ;spi1.c: 106: {
 31532                           ;spi1.c: 107: dataOut[bytesWritten] = SPI1_Exchange8bit(dataIn[bytesWritten]);
 31533  2D4D  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 31534  2D4E  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 31535  2D4F  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 31536  2D50  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 31537  2D51  0086               	movwf	6
 31538  2D52  3001               	movlw	1	; select bank2/3
 31539  2D53  0087               	movwf	7
 31540  2D54  0801               	movf	1,w
 31541  2D55  31B4  2414  31AD   	fcall	_SPI1_Exchange8bit
 31542  2D58  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 31543  2D59  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 31544  2D5A  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 31545  2D5B  00F6               	movwf	??_SPI1_Exchange8bitBuffer+2
 31546  2D5C  0876               	movf	??_SPI1_Exchange8bitBuffer+2,w
 31547  2D5D  0086               	movwf	6
 31548  2D5E  0187               	clrf	7
 31549  2D5F  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 31550  2D60  0081               	movwf	1
 31551  2D61                     l8010:	
 31552                           
 31553                           ;spi1.c: 108: }
 31554                           ;spi1.c: 110: bytesWritten++;
 31555  2D61  3001               	movlw	1
 31556  2D62  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 31557  2D63  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 31558  2D64  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 31559  2D65                     l8012:	
 31560  2D65  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 31561  2D66  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 31562  2D67  1803               	btfsc	3,0
 31563  2D68  0008               	return
 31564  2D69  2D3E               	goto	l8004
 31565  2D6A                     l8014:	
 31566                           ;spi1.c: 111: }
 31567                           ;spi1.c: 112: }
 31568                           
 31569                           
 31570                           ;spi1.c: 113: else
 31571                           ;spi1.c: 114: {
 31572                           ;spi1.c: 115: if(dataOut != (0))
 31573  2D6A  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 31574  2D6B  1903               	btfsc	3,2
 31575  2D6C  0008               	return
 31576  2D6D                     l8022:	
 31577  2D6D  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 31578  2D6E  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 31579  2D6F  1803               	btfsc	3,0
 31580  2D70  0008               	return
 31581                           
 31582                           ;spi1.c: 118: {
 31583                           ;spi1.c: 119: dataOut[bytesWritten] = SPI1_Exchange8bit(0x0);
 31584                           
 31585                           ;spi1.c: 116: {
 31586                           ;spi1.c: 117: while(bytesWritten < bufLen )
 31587  2D71  3000               	movlw	0
 31588  2D72  31B4  2414  31AD   	fcall	_SPI1_Exchange8bit
 31589  2D75  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 31590  2D76  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 31591  2D77  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 31592  2D78  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 31593  2D79  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 31594  2D7A  0086               	movwf	6
 31595  2D7B  0187               	clrf	7
 31596  2D7C  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 31597  2D7D  0081               	movwf	1
 31598                           
 31599                           ;spi1.c: 121: bytesWritten++;
 31600  2D7E  3001               	movlw	1
 31601  2D7F  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 31602  2D80  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 31603  2D81  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 31604  2D82  2D6D               	goto	l8022
 31605  2D83                     __end_of_SPI1_Exchange8bitBuffer:	
 31606                           ;spi1.c: 122: }
 31607                           ;spi1.c: 123: }
 31608                           ;spi1.c: 124: }
 31609                           ;spi1.c: 125: }
 31610                           ;spi1.c: 127: return bytesWritten;
 31611                           ;	Return value of _SPI1_Exchange8bitBuffer is never used
 31612                           
 31613                           
 31614                           	psect	text81
 31615  3414                     __ptext81:	
 31616 ;; *************** function _SPI1_Exchange8bit *****************
 31617 ;; Defined at:
 31618 ;;		line 77 in file "mcc_generated_files/spi1.c"
 31619 ;; Parameters:    Size  Location     Type
 31620 ;;  data            1    wreg     unsigned char 
 31621 ;; Auto vars:     Size  Location     Type
 31622 ;;  data            1    1[COMMON] unsigned char 
 31623 ;; Return value:  Size  Location     Type
 31624 ;;                  1    wreg      unsigned char 
 31625 ;; Registers used:
 31626 ;;		wreg
 31627 ;; Tracked objects:
 31628 ;;		On entry : 0/0
 31629 ;;		On exit  : 0/0
 31630 ;;		Unchanged: 0/0
 31631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31633 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31635 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31636 ;;Total ram usage:        1 bytes
 31637 ;; Hardware stack levels used:    1
 31638 ;; Hardware stack levels required when called:    4
 31639 ;; This function calls:
 31640 ;;		Nothing
 31641 ;; This function is called by:
 31642 ;;		_SPI1_Exchange8bitBuffer
 31643 ;; This function uses a non-reentrant model
 31644 ;;
 31645                           
 31646                           
 31647                           ;psect for function _SPI1_Exchange8bit
 31648  3414                     _SPI1_Exchange8bit:	
 31649                           
 31650                           ;incstack = 0
 31651                           ; Regs used in _SPI1_Exchange8bit: [wreg]
 31652                           ;SPI1_Exchange8bit@data stored from wreg
 31653  3414  00F1               	movwf	SPI1_Exchange8bit@data
 31654                           
 31655                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
 31656  3415  0024               	movlb	4	; select bank4
 31657  3416  1395               	bcf	21,7	;volatile
 31658                           
 31659                           ;spi1.c: 82: SSP1BUF = data;
 31660  3417  0871               	movf	SPI1_Exchange8bit@data,w
 31661  3418  0091               	movwf	17	;volatile
 31662  3419                     l18:	
 31663                           ;spi1.c: 85: {
 31664                           
 31665                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
 31666                           
 31667  3419  1C14               	btfss	20,0	;volatile
 31668  341A  2C19               	goto	l18
 31669                           
 31670                           ;spi1.c: 86: }
 31671                           ;spi1.c: 88: return (SSP1BUF);
 31672  341B  0811               	movf	17,w	;volatile
 31673  341C  0008               	return
 31674  341D                     __end_of_SPI1_Exchange8bit:	
 31675                           
 31676                           	psect	text82
 31677  36E9                     __ptext82:	
 31678 ;; *************** function _SYSTEM_Initialize *****************
 31679 ;; Defined at:
 31680 ;;		line 76 in file "mcc_generated_files/mcc.c"
 31681 ;; Parameters:    Size  Location     Type
 31682 ;;		None
 31683 ;; Auto vars:     Size  Location     Type
 31684 ;;		None
 31685 ;; Return value:  Size  Location     Type
 31686 ;;                  1    wreg      void 
 31687 ;; Registers used:
 31688 ;;		wreg, status,2, status,0, pclath, cstack
 31689 ;; Tracked objects:
 31690 ;;		On entry : 0/0
 31691 ;;		On exit  : 0/0
 31692 ;;		Unchanged: 0/0
 31693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31698 ;;Total ram usage:        0 bytes
 31699 ;; Hardware stack levels used:    1
 31700 ;; Hardware stack levels required when called:    6
 31701 ;; This function calls:
 31702 ;;		_OSCILLATOR_Initialize
 31703 ;;		_PIN_MANAGER_Initialize
 31704 ;;		_PWM1_Initialize
 31705 ;;		_PWM2_Initialize
 31706 ;;		_PWM5_Initialize
 31707 ;;		_PWM6_Initialize
 31708 ;;		_SPI1_Initialize
 31709 ;;		_TMR0_Initialize
 31710 ;;		_TMR2_Initialize
 31711 ;;		_TMR4_Initialize
 31712 ;;		_WDT_Initialize
 31713 ;; This function is called by:
 31714 ;;		_nullifyBadge_platformInit
 31715 ;; This function uses a non-reentrant model
 31716 ;;
 31717                           
 31718                           
 31719                           ;psect for function _SYSTEM_Initialize
 31720  36E9                     _SYSTEM_Initialize:	
 31721                           
 31722                           ;mcc.c: 79: PIN_MANAGER_Initialize();
 31723                           
 31724                           ;incstack = 0
 31725                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 31726  36E9  31AE  2629  31B6   	fcall	_PIN_MANAGER_Initialize
 31727                           
 31728                           ;mcc.c: 80: OSCILLATOR_Initialize();
 31729  36EC  31B4  2426  31B6   	fcall	_OSCILLATOR_Initialize
 31730                           
 31731                           ;mcc.c: 81: WDT_Initialize();
 31732  36EF  31B3  23E8  31B6   	fcall	_WDT_Initialize
 31733                           
 31734                           ;mcc.c: 82: SPI1_Initialize();
 31735  36F2  31B4  2404  31B6   	fcall	_SPI1_Initialize
 31736                           
 31737                           ;mcc.c: 83: PWM6_Initialize();
 31738  36F5  31B4  2487  31B6   	fcall	_PWM6_Initialize
 31739                           
 31740                           ;mcc.c: 84: PWM1_Initialize();
 31741  36F8  31B4  244F  31B6   	fcall	_PWM1_Initialize
 31742                           
 31743                           ;mcc.c: 85: PWM2_Initialize();
 31744  36FB  31B4  245A  31B6   	fcall	_PWM2_Initialize
 31745                           
 31746                           ;mcc.c: 86: TMR4_Initialize();
 31747  36FE  31B4  2465  31B6   	fcall	_TMR4_Initialize
 31748                           
 31749                           ;mcc.c: 87: TMR2_Initialize();
 31750  3701  31B4  2430  31B6   	fcall	_TMR2_Initialize
 31751                           
 31752                           ;mcc.c: 88: PWM5_Initialize();
 31753  3704  31B4  247B  31B6   	fcall	_PWM5_Initialize
 31754                           
 31755                           ;mcc.c: 89: TMR0_Initialize();
 31756  3707  31B6  268F         	fcall	_TMR0_Initialize
 31757  3709  0008               	return
 31758  370A                     __end_of_SYSTEM_Initialize:	
 31759                           
 31760                           	psect	text83
 31761  33E8                     __ptext83:	
 31762 ;; *************** function _WDT_Initialize *****************
 31763 ;; Defined at:
 31764 ;;		line 110 in file "mcc_generated_files/mcc.c"
 31765 ;; Parameters:    Size  Location     Type
 31766 ;;		None
 31767 ;; Auto vars:     Size  Location     Type
 31768 ;;		None
 31769 ;; Return value:  Size  Location     Type
 31770 ;;                  1    wreg      void 
 31771 ;; Registers used:
 31772 ;;		wreg
 31773 ;; Tracked objects:
 31774 ;;		On entry : 0/0
 31775 ;;		On exit  : 0/0
 31776 ;;		Unchanged: 0/0
 31777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31782 ;;Total ram usage:        0 bytes
 31783 ;; Hardware stack levels used:    1
 31784 ;; Hardware stack levels required when called:    4
 31785 ;; This function calls:
 31786 ;;		Nothing
 31787 ;; This function is called by:
 31788 ;;		_SYSTEM_Initialize
 31789 ;; This function uses a non-reentrant model
 31790 ;;
 31791                           
 31792                           
 31793                           ;psect for function _WDT_Initialize
 31794  33E8                     _WDT_Initialize:	
 31795                           
 31796                           ;mcc.c: 113: WDTCON = 0x16;
 31797                           
 31798                           ;incstack = 0
 31799                           ; Regs used in _WDT_Initialize: [wreg]
 31800  33E8  3016               	movlw	22
 31801  33E9  0021               	movlb	1	; select bank1
 31802  33EA  0097               	movwf	23	;volatile
 31803  33EB  0008               	return
 31804  33EC                     __end_of_WDT_Initialize:	
 31805                           
 31806                           	psect	text84
 31807  3465                     __ptext84:	
 31808 ;; *************** function _TMR4_Initialize *****************
 31809 ;; Defined at:
 31810 ;;		line 63 in file "mcc_generated_files/tmr4.c"
 31811 ;; Parameters:    Size  Location     Type
 31812 ;;		None
 31813 ;; Auto vars:     Size  Location     Type
 31814 ;;		None
 31815 ;; Return value:  Size  Location     Type
 31816 ;;                  1    wreg      void 
 31817 ;; Registers used:
 31818 ;;		wreg, status,2, status,0, pclath, cstack
 31819 ;; Tracked objects:
 31820 ;;		On entry : 0/0
 31821 ;;		On exit  : 0/0
 31822 ;;		Unchanged: 0/0
 31823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31828 ;;Total ram usage:        0 bytes
 31829 ;; Hardware stack levels used:    1
 31830 ;; Hardware stack levels required when called:    5
 31831 ;; This function calls:
 31832 ;;		_TMR4_StartTimer
 31833 ;; This function is called by:
 31834 ;;		_SYSTEM_Initialize
 31835 ;;		_nullifyBadge_platformInit
 31836 ;; This function uses a non-reentrant model
 31837 ;;
 31838                           
 31839                           
 31840                           ;psect for function _TMR4_Initialize
 31841  3465                     _TMR4_Initialize:	
 31842                           
 31843                           ;tmr4.c: 68: T4CON = 0x7B;
 31844                           
 31845                           ;incstack = 0
 31846                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 31847  3465  307B               	movlw	123
 31848  3466  0028               	movlb	8	; select bank8
 31849  3467  0097               	movwf	23	;volatile
 31850                           
 31851                           ;tmr4.c: 71: PR4 = 0xFF;
 31852  3468  30FF               	movlw	255
 31853  3469  0096               	movwf	22	;volatile
 31854                           
 31855                           ;tmr4.c: 74: TMR4 = 0x00;
 31856  346A  0195               	clrf	21	;volatile
 31857                           
 31858                           ;tmr4.c: 77: PIR2bits.TMR4IF = 0;
 31859  346B  0020               	movlb	0	; select bank0
 31860  346C  1092               	bcf	18,1	;volatile
 31861                           
 31862                           ;tmr4.c: 80: TMR4_StartTimer();
 31863  346D  31B3  23DF         	fcall	_TMR4_StartTimer
 31864  346F  0008               	return
 31865  3470                     __end_of_TMR4_Initialize:	
 31866                           
 31867                           	psect	text85
 31868  33DF                     __ptext85:	
 31869 ;; *************** function _TMR4_StartTimer *****************
 31870 ;; Defined at:
 31871 ;;		line 83 in file "mcc_generated_files/tmr4.c"
 31872 ;; Parameters:    Size  Location     Type
 31873 ;;		None
 31874 ;; Auto vars:     Size  Location     Type
 31875 ;;		None
 31876 ;; Return value:  Size  Location     Type
 31877 ;;                  1    wreg      void 
 31878 ;; Registers used:
 31879 ;;		None
 31880 ;; Tracked objects:
 31881 ;;		On entry : 0/0
 31882 ;;		On exit  : 0/0
 31883 ;;		Unchanged: 0/0
 31884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31889 ;;Total ram usage:        0 bytes
 31890 ;; Hardware stack levels used:    1
 31891 ;; Hardware stack levels required when called:    4
 31892 ;; This function calls:
 31893 ;;		Nothing
 31894 ;; This function is called by:
 31895 ;;		_TMR4_Initialize
 31896 ;; This function uses a non-reentrant model
 31897 ;;
 31898                           
 31899                           
 31900                           ;psect for function _TMR4_StartTimer
 31901  33DF                     _TMR4_StartTimer:	
 31902                           
 31903                           ;tmr4.c: 86: T4CONbits.TMR4ON = 1;
 31904                           
 31905                           ;incstack = 0
 31906                           ; Regs used in _TMR4_StartTimer: []
 31907  33DF  0028               	movlb	8	; select bank8
 31908  33E0  1517               	bsf	23,2	;volatile
 31909  33E1  0008               	return
 31910  33E2                     __end_of_TMR4_StartTimer:	
 31911                           
 31912                           	psect	text86
 31913  3430                     __ptext86:	
 31914 ;; *************** function _TMR2_Initialize *****************
 31915 ;; Defined at:
 31916 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 31917 ;; Parameters:    Size  Location     Type
 31918 ;;		None
 31919 ;; Auto vars:     Size  Location     Type
 31920 ;;		None
 31921 ;; Return value:  Size  Location     Type
 31922 ;;                  1    wreg      void 
 31923 ;; Registers used:
 31924 ;;		wreg, status,2, status,0, pclath, cstack
 31925 ;; Tracked objects:
 31926 ;;		On entry : 0/0
 31927 ;;		On exit  : 0/0
 31928 ;;		Unchanged: 0/0
 31929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31934 ;;Total ram usage:        0 bytes
 31935 ;; Hardware stack levels used:    1
 31936 ;; Hardware stack levels required when called:    5
 31937 ;; This function calls:
 31938 ;;		_TMR2_StartTimer
 31939 ;; This function is called by:
 31940 ;;		_SYSTEM_Initialize
 31941 ;;		_nullifyBadge_platformInit
 31942 ;; This function uses a non-reentrant model
 31943 ;;
 31944                           
 31945                           
 31946                           ;psect for function _TMR2_Initialize
 31947  3430                     _TMR2_Initialize:	
 31948                           
 31949                           ;tmr2.c: 68: T2CON = 0x01;
 31950                           
 31951                           ;incstack = 0
 31952                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 31953  3430  3001               	movlw	1
 31954  3431  0020               	movlb	0	; select bank0
 31955  3432  009F               	movwf	31	;volatile
 31956                           
 31957                           ;tmr2.c: 71: PR2 = 0x4A;
 31958  3433  304A               	movlw	74
 31959  3434  009E               	movwf	30	;volatile
 31960                           
 31961                           ;tmr2.c: 74: TMR2 = 0x00;
 31962  3435  019D               	clrf	29	;volatile
 31963                           
 31964                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 31965  3436  1091               	bcf	17,1	;volatile
 31966                           
 31967                           ;tmr2.c: 80: TMR2_StartTimer();
 31968  3437  31B3  23DC         	fcall	_TMR2_StartTimer
 31969  3439  0008               	return
 31970  343A                     __end_of_TMR2_Initialize:	
 31971                           
 31972                           	psect	text87
 31973  33DC                     __ptext87:	
 31974 ;; *************** function _TMR2_StartTimer *****************
 31975 ;; Defined at:
 31976 ;;		line 83 in file "mcc_generated_files/tmr2.c"
 31977 ;; Parameters:    Size  Location     Type
 31978 ;;		None
 31979 ;; Auto vars:     Size  Location     Type
 31980 ;;		None
 31981 ;; Return value:  Size  Location     Type
 31982 ;;                  1    wreg      void 
 31983 ;; Registers used:
 31984 ;;		None
 31985 ;; Tracked objects:
 31986 ;;		On entry : 0/0
 31987 ;;		On exit  : 0/0
 31988 ;;		Unchanged: 0/0
 31989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31994 ;;Total ram usage:        0 bytes
 31995 ;; Hardware stack levels used:    1
 31996 ;; Hardware stack levels required when called:    4
 31997 ;; This function calls:
 31998 ;;		Nothing
 31999 ;; This function is called by:
 32000 ;;		_TMR2_Initialize
 32001 ;; This function uses a non-reentrant model
 32002 ;;
 32003                           
 32004                           
 32005                           ;psect for function _TMR2_StartTimer
 32006  33DC                     _TMR2_StartTimer:	
 32007                           
 32008                           ;tmr2.c: 86: T2CONbits.TMR2ON = 1;
 32009                           
 32010                           ;incstack = 0
 32011                           ; Regs used in _TMR2_StartTimer: []
 32012  33DC  0020               	movlb	0	; select bank0
 32013  33DD  151F               	bsf	31,2	;volatile
 32014  33DE  0008               	return
 32015  33DF                     __end_of_TMR2_StartTimer:	
 32016                           
 32017                           	psect	text88
 32018  368F                     __ptext88:	
 32019 ;; *************** function _TMR0_Initialize *****************
 32020 ;; Defined at:
 32021 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 32022 ;; Parameters:    Size  Location     Type
 32023 ;;		None
 32024 ;; Auto vars:     Size  Location     Type
 32025 ;;		None
 32026 ;; Return value:  Size  Location     Type
 32027 ;;                  1    wreg      void 
 32028 ;; Registers used:
 32029 ;;		wreg, status,2, status,0, pclath, cstack
 32030 ;; Tracked objects:
 32031 ;;		On entry : 0/0
 32032 ;;		On exit  : 0/0
 32033 ;;		Unchanged: 0/0
 32034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32039 ;;Total ram usage:        0 bytes
 32040 ;; Hardware stack levels used:    1
 32041 ;; Hardware stack levels required when called:    5
 32042 ;; This function calls:
 32043 ;;		_TMR0_SetInterruptHandler
 32044 ;;		_TMR0_StartTimer
 32045 ;; This function is called by:
 32046 ;;		_SYSTEM_Initialize
 32047 ;;		_nullifyBadge_platformInit
 32048 ;; This function uses a non-reentrant model
 32049 ;;
 32050                           
 32051                           
 32052                           ;psect for function _TMR0_Initialize
 32053  368F                     _TMR0_Initialize:	
 32054                           
 32055                           ;tmr0.c: 70: T0CON0 = 0x10;
 32056                           
 32057                           ;incstack = 0
 32058                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32059  368F  3010               	movlw	16
 32060  3690  0020               	movlb	0	; select bank0
 32061  3691  0097               	movwf	23	;volatile
 32062                           
 32063                           ;tmr0.c: 73: T0CON1 = 0x4D;
 32064  3692  304D               	movlw	77
 32065  3693  0098               	movwf	24	;volatile
 32066                           
 32067                           ;tmr0.c: 76: TMR0H = 0xFF;
 32068  3694  30FF               	movlw	255
 32069  3695  0096               	movwf	22	;volatile
 32070                           
 32071                           ;tmr0.c: 79: TMR0L = 0xFF;
 32072  3696  30FF               	movlw	255
 32073  3697  0095               	movwf	21	;volatile
 32074                           
 32075                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 32076  3698  0816               	movf	22,w	;volatile
 32077  3699  0021               	movlb	1	; select bank1
 32078  369A  00C1               	movwf	(_timer0ReloadVal16bit+1)^(0+128)	;volatile
 32079  369B  0020               	movlb	0	; select bank0
 32080  369C  0815               	movf	21,w	;volatile
 32081  369D  0021               	movlb	1	; select bank1
 32082  369E  00C0               	movwf	_timer0ReloadVal16bit^(0+128)	;volatile
 32083                           
 32084                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
 32085  369F  0020               	movlb	0	; select bank0
 32086  36A0  1290               	bcf	16,5	;volatile
 32087                           
 32088                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
 32089  36A1  0021               	movlb	1	; select bank1
 32090  36A2  1690               	bsf	16,5	;volatile
 32091                           
 32092                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 32093  36A3  3000               	movlw	low _TMR0_DefaultInterruptHandler
 32094  36A4  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 32095  36A5  3008               	movlw	high _TMR0_DefaultInterruptHandler
 32096  36A6  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 32097  36A7  31B3  23EC  31B6   	fcall	_TMR0_SetInterruptHandler
 32098                           
 32099                           ;tmr0.c: 94: TMR0_StartTimer();
 32100  36AA  31B3  23D9         	fcall	_TMR0_StartTimer
 32101  36AC  0008               	return
 32102  36AD                     __end_of_TMR0_Initialize:	
 32103                           
 32104                           	psect	text89
 32105  33D9                     __ptext89:	
 32106 ;; *************** function _TMR0_StartTimer *****************
 32107 ;; Defined at:
 32108 ;;		line 97 in file "mcc_generated_files/tmr0.c"
 32109 ;; Parameters:    Size  Location     Type
 32110 ;;		None
 32111 ;; Auto vars:     Size  Location     Type
 32112 ;;		None
 32113 ;; Return value:  Size  Location     Type
 32114 ;;                  1    wreg      void 
 32115 ;; Registers used:
 32116 ;;		None
 32117 ;; Tracked objects:
 32118 ;;		On entry : 0/0
 32119 ;;		On exit  : 0/0
 32120 ;;		Unchanged: 0/0
 32121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32126 ;;Total ram usage:        0 bytes
 32127 ;; Hardware stack levels used:    1
 32128 ;; Hardware stack levels required when called:    4
 32129 ;; This function calls:
 32130 ;;		Nothing
 32131 ;; This function is called by:
 32132 ;;		_TMR0_Initialize
 32133 ;; This function uses a non-reentrant model
 32134 ;;
 32135                           
 32136                           
 32137                           ;psect for function _TMR0_StartTimer
 32138  33D9                     _TMR0_StartTimer:	
 32139                           
 32140                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
 32141                           
 32142                           ;incstack = 0
 32143                           ; Regs used in _TMR0_StartTimer: []
 32144  33D9  0020               	movlb	0	; select bank0
 32145  33DA  1797               	bsf	23,7	;volatile
 32146  33DB  0008               	return
 32147  33DC                     __end_of_TMR0_StartTimer:	
 32148                           
 32149                           	psect	text90
 32150  33EC                     __ptext90:	
 32151 ;; *************** function _TMR0_SetInterruptHandler *****************
 32152 ;; Defined at:
 32153 ;;		line 161 in file "mcc_generated_files/tmr0.c"
 32154 ;; Parameters:    Size  Location     Type
 32155 ;;  InterruptHan    2    1[COMMON] PTR void 
 32156 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 32157 ;; Auto vars:     Size  Location     Type
 32158 ;;		None
 32159 ;; Return value:  Size  Location     Type
 32160 ;;                  1    wreg      void 
 32161 ;; Registers used:
 32162 ;;		wreg
 32163 ;; Tracked objects:
 32164 ;;		On entry : 0/0
 32165 ;;		On exit  : 0/0
 32166 ;;		Unchanged: 0/0
 32167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32168 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32171 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32172 ;;Total ram usage:        2 bytes
 32173 ;; Hardware stack levels used:    1
 32174 ;; Hardware stack levels required when called:    4
 32175 ;; This function calls:
 32176 ;;		Nothing
 32177 ;; This function is called by:
 32178 ;;		_TMR0_Initialize
 32179 ;; This function uses a non-reentrant model
 32180 ;;
 32181                           
 32182                           
 32183                           ;psect for function _TMR0_SetInterruptHandler
 32184  33EC                     _TMR0_SetInterruptHandler:	
 32185                           
 32186                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
 32187                           
 32188                           ;incstack = 0
 32189                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 32190  33EC  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 32191  33ED  0021               	movlb	1	; select bank1
 32192  33EE  00BF               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 32193  33EF  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 32194  33F0  00BE               	movwf	_TMR0_InterruptHandler^(0+128)
 32195  33F1  0008               	return
 32196  33F2                     __end_of_TMR0_SetInterruptHandler:	
 32197                           
 32198                           	psect	text91
 32199  3404                     __ptext91:	
 32200 ;; *************** function _SPI1_Initialize *****************
 32201 ;; Defined at:
 32202 ;;		line 63 in file "mcc_generated_files/spi1.c"
 32203 ;; Parameters:    Size  Location     Type
 32204 ;;		None
 32205 ;; Auto vars:     Size  Location     Type
 32206 ;;		None
 32207 ;; Return value:  Size  Location     Type
 32208 ;;                  1    wreg      void 
 32209 ;; Registers used:
 32210 ;;		wreg
 32211 ;; Tracked objects:
 32212 ;;		On entry : 0/0
 32213 ;;		On exit  : 0/0
 32214 ;;		Unchanged: 0/0
 32215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32220 ;;Total ram usage:        0 bytes
 32221 ;; Hardware stack levels used:    1
 32222 ;; Hardware stack levels required when called:    4
 32223 ;; This function calls:
 32224 ;;		Nothing
 32225 ;; This function is called by:
 32226 ;;		_SYSTEM_Initialize
 32227 ;;		_nullifyBadge_platformInit
 32228 ;; This function uses a non-reentrant model
 32229 ;;
 32230                           
 32231                           
 32232                           ;psect for function _SPI1_Initialize
 32233  3404                     _SPI1_Initialize:	
 32234                           
 32235                           ;spi1.c: 68: SSP1STAT = 0x40;
 32236                           
 32237                           ;incstack = 0
 32238                           ; Regs used in _SPI1_Initialize: [wreg]
 32239  3404  3040               	movlw	64
 32240  3405  0024               	movlb	4	; select bank4
 32241  3406  0094               	movwf	20	;volatile
 32242                           
 32243                           ;spi1.c: 71: SSP1CON1 = 0x22;
 32244  3407  3022               	movlw	34
 32245  3408  0095               	movwf	21	;volatile
 32246                           
 32247                           ;spi1.c: 74: SSP1ADD = 0x01;
 32248  3409  3001               	movlw	1
 32249  340A  0092               	movwf	18	;volatile
 32250  340B  0008               	return
 32251  340C                     __end_of_SPI1_Initialize:	
 32252                           
 32253                           	psect	text92
 32254  3487                     __ptext92:	
 32255 ;; *************** function _PWM6_Initialize *****************
 32256 ;; Defined at:
 32257 ;;		line 57 in file "mcc_generated_files/pwm6.c"
 32258 ;; Parameters:    Size  Location     Type
 32259 ;;		None
 32260 ;; Auto vars:     Size  Location     Type
 32261 ;;		None
 32262 ;; Return value:  Size  Location     Type
 32263 ;;                  1    wreg      void 
 32264 ;; Registers used:
 32265 ;;		wreg, status,2, status,0
 32266 ;; Tracked objects:
 32267 ;;		On entry : 0/0
 32268 ;;		On exit  : 0/0
 32269 ;;		Unchanged: 0/0
 32270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32275 ;;Total ram usage:        0 bytes
 32276 ;; Hardware stack levels used:    1
 32277 ;; Hardware stack levels required when called:    4
 32278 ;; This function calls:
 32279 ;;		Nothing
 32280 ;; This function is called by:
 32281 ;;		_SYSTEM_Initialize
 32282 ;;		_nullifyBadge_platformInit
 32283 ;; This function uses a non-reentrant model
 32284 ;;
 32285                           
 32286                           
 32287                           ;psect for function _PWM6_Initialize
 32288  3487                     _PWM6_Initialize:	
 32289                           
 32290                           ;pwm6.c: 61: PWM6CON = 0x90;
 32291                           
 32292                           ;incstack = 0
 32293                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 32294  3487  3090               	movlw	144
 32295  3488  002C               	movlb	12	; select bank12
 32296  3489  009C               	movwf	28	;volatile
 32297                           
 32298                           ;pwm6.c: 64: PWM6DCH = 0x7F;
 32299  348A  307F               	movlw	127
 32300  348B  009B               	movwf	27	;volatile
 32301                           
 32302                           ;pwm6.c: 67: PWM6DCL = 0xC0;
 32303  348C  30C0               	movlw	192
 32304  348D  009A               	movwf	26	;volatile
 32305                           
 32306                           ;pwm6.c: 71: PWMTMRSbits.P6TSEL = 0x2;
 32307  348E  081F               	movf	31,w	;volatile
 32308  348F  39F3               	andlw	-13
 32309  3490  3808               	iorlw	8
 32310  3491  009F               	movwf	31	;volatile
 32311  3492  0008               	return
 32312  3493                     __end_of_PWM6_Initialize:	
 32313                           
 32314                           	psect	text93
 32315  347B                     __ptext93:	
 32316 ;; *************** function _PWM5_Initialize *****************
 32317 ;; Defined at:
 32318 ;;		line 57 in file "mcc_generated_files/pwm5.c"
 32319 ;; Parameters:    Size  Location     Type
 32320 ;;		None
 32321 ;; Auto vars:     Size  Location     Type
 32322 ;;		None
 32323 ;; Return value:  Size  Location     Type
 32324 ;;                  1    wreg      void 
 32325 ;; Registers used:
 32326 ;;		wreg, status,2, status,0
 32327 ;; Tracked objects:
 32328 ;;		On entry : 0/0
 32329 ;;		On exit  : 0/0
 32330 ;;		Unchanged: 0/0
 32331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32336 ;;Total ram usage:        0 bytes
 32337 ;; Hardware stack levels used:    1
 32338 ;; Hardware stack levels required when called:    4
 32339 ;; This function calls:
 32340 ;;		Nothing
 32341 ;; This function is called by:
 32342 ;;		_SYSTEM_Initialize
 32343 ;;		_nullifyBadge_platformInit
 32344 ;; This function uses a non-reentrant model
 32345 ;;
 32346                           
 32347                           
 32348                           ;psect for function _PWM5_Initialize
 32349  347B                     _PWM5_Initialize:	
 32350                           
 32351                           ;pwm5.c: 61: PWM5CON = 0x90;
 32352                           
 32353                           ;incstack = 0
 32354                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
 32355  347B  3090               	movlw	144
 32356  347C  002C               	movlb	12	; select bank12
 32357  347D  0099               	movwf	25	;volatile
 32358                           
 32359                           ;pwm5.c: 64: PWM5DCH = 0x7F;
 32360  347E  307F               	movlw	127
 32361  347F  0098               	movwf	24	;volatile
 32362                           
 32363                           ;pwm5.c: 67: PWM5DCL = 0xC0;
 32364  3480  30C0               	movlw	192
 32365  3481  0097               	movwf	23	;volatile
 32366                           
 32367                           ;pwm5.c: 71: PWMTMRSbits.P5TSEL = 0x2;
 32368  3482  081F               	movf	31,w	;volatile
 32369  3483  39FC               	andlw	-4
 32370  3484  3802               	iorlw	2
 32371  3485  009F               	movwf	31	;volatile
 32372  3486  0008               	return
 32373  3487                     __end_of_PWM5_Initialize:	
 32374                           
 32375                           	psect	text94
 32376  345A                     __ptext94:	
 32377 ;; *************** function _PWM2_Initialize *****************
 32378 ;; Defined at:
 32379 ;;		line 63 in file "mcc_generated_files/pwm2.c"
 32380 ;; Parameters:    Size  Location     Type
 32381 ;;		None
 32382 ;; Auto vars:     Size  Location     Type
 32383 ;;		None
 32384 ;; Return value:  Size  Location     Type
 32385 ;;                  1    wreg      void 
 32386 ;; Registers used:
 32387 ;;		wreg, status,2, status,0
 32388 ;; Tracked objects:
 32389 ;;		On entry : 0/0
 32390 ;;		On exit  : 0/0
 32391 ;;		Unchanged: 0/0
 32392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32397 ;;Total ram usage:        0 bytes
 32398 ;; Hardware stack levels used:    1
 32399 ;; Hardware stack levels required when called:    4
 32400 ;; This function calls:
 32401 ;;		Nothing
 32402 ;; This function is called by:
 32403 ;;		_SYSTEM_Initialize
 32404 ;;		_nullifyBadge_platformInit
 32405 ;; This function uses a non-reentrant model
 32406 ;;
 32407                           
 32408                           
 32409                           ;psect for function _PWM2_Initialize
 32410  345A                     _PWM2_Initialize:	
 32411                           
 32412                           ;pwm2.c: 68: CCP2CON = 0x8F;
 32413                           
 32414                           ;incstack = 0
 32415                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
 32416  345A  308F               	movlw	143
 32417  345B  0025               	movlb	5	; select bank5
 32418  345C  0097               	movwf	23	;volatile
 32419                           
 32420                           ;pwm2.c: 71: CCPR2H = 0x00;
 32421  345D  0196               	clrf	22	;volatile
 32422                           
 32423                           ;pwm2.c: 74: CCPR2L = 0xE0;
 32424  345E  30E0               	movlw	224
 32425  345F  0095               	movwf	21	;volatile
 32426                           
 32427                           ;pwm2.c: 77: CCPTMRSbits.C2TSEL = 0x1;
 32428  3460  081F               	movf	31,w	;volatile
 32429  3461  39F3               	andlw	-13
 32430  3462  3804               	iorlw	4
 32431  3463  009F               	movwf	31	;volatile
 32432  3464  0008               	return
 32433  3465                     __end_of_PWM2_Initialize:	
 32434                           
 32435                           	psect	text95
 32436  344F                     __ptext95:	
 32437 ;; *************** function _PWM1_Initialize *****************
 32438 ;; Defined at:
 32439 ;;		line 63 in file "mcc_generated_files/pwm1.c"
 32440 ;; Parameters:    Size  Location     Type
 32441 ;;		None
 32442 ;; Auto vars:     Size  Location     Type
 32443 ;;		None
 32444 ;; Return value:  Size  Location     Type
 32445 ;;                  1    wreg      void 
 32446 ;; Registers used:
 32447 ;;		wreg, status,2, status,0
 32448 ;; Tracked objects:
 32449 ;;		On entry : 0/0
 32450 ;;		On exit  : 0/0
 32451 ;;		Unchanged: 0/0
 32452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32457 ;;Total ram usage:        0 bytes
 32458 ;; Hardware stack levels used:    1
 32459 ;; Hardware stack levels required when called:    4
 32460 ;; This function calls:
 32461 ;;		Nothing
 32462 ;; This function is called by:
 32463 ;;		_SYSTEM_Initialize
 32464 ;;		_nullifyBadge_platformInit
 32465 ;; This function uses a non-reentrant model
 32466 ;;
 32467                           
 32468                           
 32469                           ;psect for function _PWM1_Initialize
 32470  344F                     _PWM1_Initialize:	
 32471                           
 32472                           ;pwm1.c: 68: CCP1CON = 0x8F;
 32473                           
 32474                           ;incstack = 0
 32475                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 32476  344F  308F               	movlw	143
 32477  3450  0025               	movlb	5	; select bank5
 32478  3451  0093               	movwf	19	;volatile
 32479                           
 32480                           ;pwm1.c: 71: CCPR1H = 0x00;
 32481  3452  0192               	clrf	18	;volatile
 32482                           
 32483                           ;pwm1.c: 74: CCPR1L = 0x95;
 32484  3453  3095               	movlw	149
 32485  3454  0091               	movwf	17	;volatile
 32486                           
 32487                           ;pwm1.c: 77: CCPTMRSbits.C1TSEL = 0x1;
 32488  3455  081F               	movf	31,w	;volatile
 32489  3456  39FC               	andlw	-4
 32490  3457  3801               	iorlw	1
 32491  3458  009F               	movwf	31	;volatile
 32492  3459  0008               	return
 32493  345A                     __end_of_PWM1_Initialize:	
 32494                           
 32495                           	psect	text96
 32496  2E29                     __ptext96:	
 32497 ;; *************** function _PIN_MANAGER_Initialize *****************
 32498 ;; Defined at:
 32499 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 32500 ;; Parameters:    Size  Location     Type
 32501 ;;		None
 32502 ;; Auto vars:     Size  Location     Type
 32503 ;;  state           1    1[COMMON] unsigned char 
 32504 ;; Return value:  Size  Location     Type
 32505 ;;                  1    wreg      void 
 32506 ;; Registers used:
 32507 ;;		wreg, status,2, status,0
 32508 ;; Tracked objects:
 32509 ;;		On entry : 0/0
 32510 ;;		On exit  : 0/0
 32511 ;;		Unchanged: 0/0
 32512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32514 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32516 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32517 ;;Total ram usage:        1 bytes
 32518 ;; Hardware stack levels used:    1
 32519 ;; Hardware stack levels required when called:    4
 32520 ;; This function calls:
 32521 ;;		Nothing
 32522 ;; This function is called by:
 32523 ;;		_SYSTEM_Initialize
 32524 ;;		_nullifyBadge_platformInit
 32525 ;; This function uses a non-reentrant model
 32526 ;;
 32527                           
 32528                           
 32529                           ;psect for function _PIN_MANAGER_Initialize
 32530  2E29                     _PIN_MANAGER_Initialize:	
 32531                           
 32532                           ;pin_manager.c: 56: LATA = 0x00;
 32533                           
 32534                           ;incstack = 0
 32535                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 32536  2E29  0022               	movlb	2	; select bank2
 32537  2E2A  018C               	clrf	12	;volatile
 32538                           
 32539                           ;pin_manager.c: 57: LATB = 0x80;
 32540  2E2B  3080               	movlw	128
 32541  2E2C  008D               	movwf	13	;volatile
 32542                           
 32543                           ;pin_manager.c: 58: LATC = 0x1A;
 32544  2E2D  301A               	movlw	26
 32545  2E2E  008E               	movwf	14	;volatile
 32546                           
 32547                           ;pin_manager.c: 63: TRISA = 0x37;
 32548  2E2F  3037               	movlw	55
 32549  2E30  0021               	movlb	1	; select bank1
 32550  2E31  008C               	movwf	12	;volatile
 32551                           
 32552                           ;pin_manager.c: 64: TRISB = 0x30;
 32553  2E32  3030               	movlw	48
 32554  2E33  008D               	movwf	13	;volatile
 32555                           
 32556                           ;pin_manager.c: 65: TRISC = 0x60;
 32557  2E34  3060               	movlw	96
 32558  2E35  008E               	movwf	14	;volatile
 32559                           
 32560                           ;pin_manager.c: 70: ANSELC = 0x40;
 32561  2E36  3040               	movlw	64
 32562  2E37  0023               	movlb	3	; select bank3
 32563  2E38  008E               	movwf	14	;volatile
 32564                           
 32565                           ;pin_manager.c: 71: ANSELB = 0x00;
 32566  2E39  018D               	clrf	13	;volatile
 32567                           
 32568                           ;pin_manager.c: 72: ANSELA = 0x03;
 32569  2E3A  3003               	movlw	3
 32570  2E3B  008C               	movwf	12	;volatile
 32571                           
 32572                           ;pin_manager.c: 77: WPUB = 0x00;
 32573  2E3C  0024               	movlb	4	; select bank4
 32574  2E3D  018D               	clrf	13	;volatile
 32575                           
 32576                           ;pin_manager.c: 78: WPUA = 0x00;
 32577  2E3E  018C               	clrf	12	;volatile
 32578                           
 32579                           ;pin_manager.c: 79: WPUC = 0x00;
 32580  2E3F  018E               	clrf	14	;volatile
 32581                           
 32582                           ;pin_manager.c: 84: ODCONA = 0x00;
 32583  2E40  0025               	movlb	5	; select bank5
 32584  2E41  018C               	clrf	12	;volatile
 32585                           
 32586                           ;pin_manager.c: 85: ODCONB = 0x00;
 32587  2E42  018D               	clrf	13	;volatile
 32588                           
 32589                           ;pin_manager.c: 86: ODCONC = 0x00;
 32590  2E43  018E               	clrf	14	;volatile
 32591                           
 32592                           ;pin_manager.c: 93: bool state = GIE;
 32593  2E44  3000               	movlw	0
 32594  2E45  1B8B               	btfsc	11,7	;volatile
 32595  2E46  3001               	movlw	1
 32596  2E47  00F1               	movwf	PIN_MANAGER_Initialize@state
 32597                           
 32598                           ;pin_manager.c: 94: GIE = 0;
 32599  2E48  138B               	bcf	11,7	;volatile
 32600                           
 32601                           ;pin_manager.c: 95: PPSLOCK = 0x55;
 32602  2E49  3055               	movlw	85
 32603  2E4A  003C               	movlb	28	; select bank28
 32604  2E4B  008F               	movwf	15	;volatile
 32605                           
 32606                           ;pin_manager.c: 96: PPSLOCK = 0xAA;
 32607  2E4C  30AA               	movlw	170
 32608  2E4D  008F               	movwf	15	;volatile
 32609                           
 32610                           ;pin_manager.c: 97: PPSLOCKbits.PPSLOCKED = 0x00;
 32611  2E4E  100F               	bcf	15,0	;volatile
 32612                           
 32613                           ;pin_manager.c: 99: RC1PPSbits.RC1PPS = 0x0D;
 32614  2E4F  003D               	movlb	29	; select bank29
 32615  2E50  0821               	movf	33,w	;volatile
 32616  2E51  39E0               	andlw	-32
 32617  2E52  380D               	iorlw	13
 32618  2E53  00A1               	movwf	33	;volatile
 32619                           
 32620                           ;pin_manager.c: 100: SSP1DATPPSbits.SSP1DATPPS = 0x0C;
 32621  2E54  003C               	movlb	28	; select bank28
 32622  2E55  0821               	movf	33,w	;volatile
 32623  2E56  39E0               	andlw	-32
 32624  2E57  380C               	iorlw	12
 32625  2E58  00A1               	movwf	33	;volatile
 32626                           
 32627                           ;pin_manager.c: 101: SSP1CLKPPSbits.SSP1CLKPPS = 0x0E;
 32628  2E59  0820               	movf	32,w	;volatile
 32629  2E5A  39E0               	andlw	-32
 32630  2E5B  380E               	iorlw	14
 32631  2E5C  00A0               	movwf	32	;volatile
 32632                           
 32633                           ;pin_manager.c: 102: RC4PPSbits.RC4PPS = 0x02;
 32634  2E5D  003D               	movlb	29	; select bank29
 32635  2E5E  0824               	movf	36,w	;volatile
 32636  2E5F  39E0               	andlw	-32
 32637  2E60  3802               	iorlw	2
 32638  2E61  00A4               	movwf	36	;volatile
 32639                           
 32640                           ;pin_manager.c: 103: RC0PPSbits.RC0PPS = 0x0C;
 32641  2E62  0820               	movf	32,w	;volatile
 32642  2E63  39E0               	andlw	-32
 32643  2E64  380C               	iorlw	12
 32644  2E65  00A0               	movwf	32	;volatile
 32645                           
 32646                           ;pin_manager.c: 104: RC3PPSbits.RC3PPS = 0x03;
 32647  2E66  0823               	movf	35,w	;volatile
 32648  2E67  39E0               	andlw	-32
 32649  2E68  3803               	iorlw	3
 32650  2E69  00A3               	movwf	35	;volatile
 32651                           
 32652                           ;pin_manager.c: 105: RB6PPSbits.RB6PPS = 0x18;
 32653  2E6A  081E               	movf	30,w	;volatile
 32654  2E6B  39E0               	andlw	-32
 32655  2E6C  3818               	iorlw	24
 32656  2E6D  009E               	movwf	30	;volatile
 32657                           
 32658                           ;pin_manager.c: 106: RC2PPSbits.RC2PPS = 0x19;
 32659  2E6E  0822               	movf	34,w	;volatile
 32660  2E6F  39E0               	andlw	-32
 32661  2E70  3819               	iorlw	25
 32662  2E71  00A2               	movwf	34	;volatile
 32663                           
 32664                           ;pin_manager.c: 108: PPSLOCK = 0x55;
 32665  2E72  3055               	movlw	85
 32666  2E73  003C               	movlb	28	; select bank28
 32667  2E74  008F               	movwf	15	;volatile
 32668                           
 32669                           ;pin_manager.c: 109: PPSLOCK = 0xAA;
 32670  2E75  30AA               	movlw	170
 32671  2E76  008F               	movwf	15	;volatile
 32672                           
 32673                           ;pin_manager.c: 110: PPSLOCKbits.PPSLOCKED = 0x01;
 32674  2E77  140F               	bsf	15,0	;volatile
 32675                           
 32676                           ;pin_manager.c: 112: GIE = state;
 32677  2E78  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 32678  2E79  2E7C               	goto	u5430
 32679  2E7A  178B               	bsf	11,7	;volatile
 32680  2E7B  0008               	return
 32681  2E7C                     u5430:	
 32682  2E7C  138B               	bcf	11,7	;volatile
 32683  2E7D  0008               	return
 32684  2E7E                     __end_of_PIN_MANAGER_Initialize:	
 32685                           
 32686                           	psect	text97
 32687  3426                     __ptext97:	
 32688 ;; *************** function _OSCILLATOR_Initialize *****************
 32689 ;; Defined at:
 32690 ;;		line 92 in file "mcc_generated_files/mcc.c"
 32691 ;; Parameters:    Size  Location     Type
 32692 ;;		None
 32693 ;; Auto vars:     Size  Location     Type
 32694 ;;		None
 32695 ;; Return value:  Size  Location     Type
 32696 ;;                  1    wreg      void 
 32697 ;; Registers used:
 32698 ;;		wreg, status,2
 32699 ;; Tracked objects:
 32700 ;;		On entry : 0/0
 32701 ;;		On exit  : 0/0
 32702 ;;		Unchanged: 0/0
 32703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32708 ;;Total ram usage:        0 bytes
 32709 ;; Hardware stack levels used:    1
 32710 ;; Hardware stack levels required when called:    4
 32711 ;; This function calls:
 32712 ;;		Nothing
 32713 ;; This function is called by:
 32714 ;;		_SYSTEM_Initialize
 32715 ;;		_nullifyBadge_platformInit
 32716 ;; This function uses a non-reentrant model
 32717 ;;
 32718                           
 32719                           
 32720                           ;psect for function _OSCILLATOR_Initialize
 32721  3426                     _OSCILLATOR_Initialize:	
 32722                           
 32723                           ;mcc.c: 95: OSCCON1 = 0x00;
 32724                           
 32725                           ;incstack = 0
 32726                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 32727  3426  0032               	movlb	18	; select bank18
 32728  3427  0199               	clrf	25	;volatile
 32729                           
 32730                           ;mcc.c: 97: OSCCON3 = 0x00;
 32731  3428  019B               	clrf	27	;volatile
 32732                           
 32733                           ;mcc.c: 99: OSCEN = 0x00;
 32734  3429  019D               	clrf	29	;volatile
 32735                           
 32736                           ;mcc.c: 101: OSCFRQ = 0x06;
 32737  342A  3006               	movlw	6
 32738  342B  009F               	movwf	31	;volatile
 32739                           
 32740                           ;mcc.c: 103: OSCTUNE = 0x00;
 32741  342C  019E               	clrf	30	;volatile
 32742  342D                     l208:	
 32743                           ;mcc.c: 106: {
 32744                           
 32745                           ;mcc.c: 105: while(PLLR == 0)
 32746                           
 32747  342D  181C               	btfsc	28,0	;volatile
 32748  342E  0008               	return
 32749  342F  2C2D               	goto	l208
 32750  3430                     __end_of_OSCILLATOR_Initialize:	
 32751                           
 32752                           	psect	text98
 32753  35C2                     __ptext98:	
 32754 ;; *************** function _PWM6_LoadDutyValue *****************
 32755 ;; Defined at:
 32756 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 32757 ;; Parameters:    Size  Location     Type
 32758 ;;  dutyValue       2    1[COMMON] unsigned int 
 32759 ;; Auto vars:     Size  Location     Type
 32760 ;;		None
 32761 ;; Return value:  Size  Location     Type
 32762 ;;                  1    wreg      void 
 32763 ;; Registers used:
 32764 ;;		wreg, status,2, status,0
 32765 ;; Tracked objects:
 32766 ;;		On entry : 0/0
 32767 ;;		On exit  : 0/0
 32768 ;;		Unchanged: 0/0
 32769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32770 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32772 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32773 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32774 ;;Total ram usage:        4 bytes
 32775 ;; Hardware stack levels used:    1
 32776 ;; Hardware stack levels required when called:    4
 32777 ;; This function calls:
 32778 ;;		Nothing
 32779 ;; This function is called by:
 32780 ;;		_nullifyBadge_platformInit
 32781 ;;		_nullifyBadge_userLedsSetBrightness
 32782 ;; This function uses a non-reentrant model
 32783 ;;
 32784                           
 32785                           
 32786                           ;psect for function _PWM6_LoadDutyValue
 32787  35C2                     _PWM6_LoadDutyValue:	
 32788                           
 32789                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 32790                           
 32791                           ;incstack = 0
 32792                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 32793  35C2  0872               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 32794  35C3  00F4               	movwf	??_PWM6_LoadDutyValue+1
 32795  35C4  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 32796  35C5  00F3               	movwf	??_PWM6_LoadDutyValue
 32797  35C6  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 32798  35C7  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 32799  35C8  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 32800  35C9  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 32801  35CA  0873               	movf	??_PWM6_LoadDutyValue,w
 32802  35CB  002C               	movlb	12	; select bank12
 32803  35CC  009B               	movwf	27	;volatile
 32804                           
 32805                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 32806  35CD  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 32807  35CE  3903               	andlw	3
 32808  35CF  00F3               	movwf	??_PWM6_LoadDutyValue
 32809  35D0  3005               	movlw	5
 32810  35D1                     u6315:	
 32811  35D1  35F3               	lslf	??_PWM6_LoadDutyValue,f
 32812  35D2  3EFF               	addlw	-1
 32813  35D3  1D03               	skipz
 32814  35D4  2DD1               	goto	u6315
 32815  35D5  3573               	lslf	??_PWM6_LoadDutyValue,w
 32816  35D6  009A               	movwf	26	;volatile
 32817  35D7  0008               	return
 32818  35D8                     __end_of_PWM6_LoadDutyValue:	
 32819                           
 32820                           	psect	text99
 32821  35AC                     __ptext99:	
 32822 ;; *************** function _PWM5_LoadDutyValue *****************
 32823 ;; Defined at:
 32824 ;;		line 74 in file "mcc_generated_files/pwm5.c"
 32825 ;; Parameters:    Size  Location     Type
 32826 ;;  dutyValue       2    1[COMMON] unsigned int 
 32827 ;; Auto vars:     Size  Location     Type
 32828 ;;		None
 32829 ;; Return value:  Size  Location     Type
 32830 ;;                  1    wreg      void 
 32831 ;; Registers used:
 32832 ;;		wreg, status,2, status,0
 32833 ;; Tracked objects:
 32834 ;;		On entry : 0/0
 32835 ;;		On exit  : 0/0
 32836 ;;		Unchanged: 0/0
 32837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32838 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32840 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32841 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32842 ;;Total ram usage:        4 bytes
 32843 ;; Hardware stack levels used:    1
 32844 ;; Hardware stack levels required when called:    4
 32845 ;; This function calls:
 32846 ;;		Nothing
 32847 ;; This function is called by:
 32848 ;;		_nullifyBadge_platformInit
 32849 ;;		_fadeDisplay_Init
 32850 ;;		_nullifyBadge_segDisplaySetBrightness
 32851 ;; This function uses a non-reentrant model
 32852 ;;
 32853                           
 32854                           
 32855                           ;psect for function _PWM5_LoadDutyValue
 32856  35AC                     _PWM5_LoadDutyValue:	
 32857                           
 32858                           ;pwm5.c: 77: PWM5DCH = (dutyValue & 0x03FC)>>2;
 32859                           
 32860                           ;incstack = 0
 32861                           ; Regs used in _PWM5_LoadDutyValue: [wreg+status,2+status,0]
 32862  35AC  0872               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 32863  35AD  00F4               	movwf	??_PWM5_LoadDutyValue+1
 32864  35AE  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 32865  35AF  00F3               	movwf	??_PWM5_LoadDutyValue
 32866  35B0  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 32867  35B1  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 32868  35B2  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 32869  35B3  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 32870  35B4  0873               	movf	??_PWM5_LoadDutyValue,w
 32871  35B5  002C               	movlb	12	; select bank12
 32872  35B6  0098               	movwf	24	;volatile
 32873                           
 32874                           ;pwm5.c: 80: PWM5DCL = (dutyValue & 0x0003)<<6;
 32875  35B7  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 32876  35B8  3903               	andlw	3
 32877  35B9  00F3               	movwf	??_PWM5_LoadDutyValue
 32878  35BA  3005               	movlw	5
 32879  35BB                     u6305:	
 32880  35BB  35F3               	lslf	??_PWM5_LoadDutyValue,f
 32881  35BC  3EFF               	addlw	-1
 32882  35BD  1D03               	skipz
 32883  35BE  2DBB               	goto	u6305
 32884  35BF  3573               	lslf	??_PWM5_LoadDutyValue,w
 32885  35C0  0097               	movwf	23	;volatile
 32886  35C1  0008               	return
 32887  35C2                     __end_of_PWM5_LoadDutyValue:	
 32888                           
 32889                           	psect	text100
 32890  3596                     __ptext100:	
 32891 ;; *************** function _PWM2_LoadDutyValue *****************
 32892 ;; Defined at:
 32893 ;;		line 80 in file "mcc_generated_files/pwm2.c"
 32894 ;; Parameters:    Size  Location     Type
 32895 ;;  dutyValue       2    1[COMMON] unsigned int 
 32896 ;; Auto vars:     Size  Location     Type
 32897 ;;		None
 32898 ;; Return value:  Size  Location     Type
 32899 ;;                  1    wreg      void 
 32900 ;; Registers used:
 32901 ;;		wreg, status,2
 32902 ;; Tracked objects:
 32903 ;;		On entry : 0/0
 32904 ;;		On exit  : 0/0
 32905 ;;		Unchanged: 0/0
 32906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32907 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32910 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32911 ;;Total ram usage:        2 bytes
 32912 ;; Hardware stack levels used:    1
 32913 ;; Hardware stack levels required when called:    4
 32914 ;; This function calls:
 32915 ;;		Nothing
 32916 ;; This function is called by:
 32917 ;;		_nullifyBadge_platformInit
 32918 ;; This function uses a non-reentrant model
 32919 ;;
 32920                           
 32921                           
 32922                           ;psect for function _PWM2_LoadDutyValue
 32923  3596                     _PWM2_LoadDutyValue:	
 32924                           
 32925                           ;pwm2.c: 82: dutyValue &= 0x03FF;
 32926                           
 32927                           ;incstack = 0
 32928                           ; Regs used in _PWM2_LoadDutyValue: [wreg+status,2]
 32929  3596  30FF               	movlw	255
 32930  3597  05F1               	andwf	PWM2_LoadDutyValue@dutyValue,f
 32931  3598  3003               	movlw	3
 32932  3599  05F2               	andwf	PWM2_LoadDutyValue@dutyValue+1,f
 32933                           
 32934                           ;pwm2.c: 85: if(CCP2CONbits.CCP2FMT)
 32935  359A  0025               	movlb	5	; select bank5
 32936  359B  1E17               	btfss	23,4	;volatile
 32937  359C  2DA7               	goto	l10160
 32938                           
 32939                           ;pwm2.c: 86: {
 32940                           ;pwm2.c: 87: dutyValue <<= 6;
 32941  359D  3006               	movlw	6
 32942  359E                     u6355:	
 32943  359E  35F1               	lslf	PWM2_LoadDutyValue@dutyValue,f
 32944  359F  0DF2               	rlf	PWM2_LoadDutyValue@dutyValue+1,f
 32945  35A0  0B89               	decfsz	9,f
 32946  35A1  2D9E               	goto	u6355
 32947                           
 32948                           ;pwm2.c: 88: CCPR2H = dutyValue >> 8;
 32949  35A2  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 32950  35A3  0096               	movwf	22	;volatile
 32951                           
 32952                           ;pwm2.c: 89: CCPR2L = dutyValue;
 32953  35A4  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 32954  35A5  0095               	movwf	21	;volatile
 32955                           
 32956                           ;pwm2.c: 90: }
 32957  35A6  0008               	return
 32958  35A7                     l10160:	
 32959                           
 32960                           ;pwm2.c: 91: else
 32961                           ;pwm2.c: 92: {
 32962                           ;pwm2.c: 93: CCPR2H = dutyValue >> 8;
 32963  35A7  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 32964  35A8  0096               	movwf	22	;volatile
 32965                           
 32966                           ;pwm2.c: 94: CCPR2L = dutyValue;
 32967  35A9  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 32968  35AA  0095               	movwf	21	;volatile
 32969  35AB  0008               	return
 32970  35AC                     __end_of_PWM2_LoadDutyValue:	
 32971                           
 32972                           	psect	text101
 32973  3580                     __ptext101:	
 32974 ;; *************** function _PWM1_LoadDutyValue *****************
 32975 ;; Defined at:
 32976 ;;		line 80 in file "mcc_generated_files/pwm1.c"
 32977 ;; Parameters:    Size  Location     Type
 32978 ;;  dutyValue       2    1[COMMON] unsigned int 
 32979 ;; Auto vars:     Size  Location     Type
 32980 ;;		None
 32981 ;; Return value:  Size  Location     Type
 32982 ;;                  1    wreg      void 
 32983 ;; Registers used:
 32984 ;;		wreg, status,2
 32985 ;; Tracked objects:
 32986 ;;		On entry : 0/0
 32987 ;;		On exit  : 0/0
 32988 ;;		Unchanged: 0/0
 32989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32990 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32993 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32994 ;;Total ram usage:        2 bytes
 32995 ;; Hardware stack levels used:    1
 32996 ;; Hardware stack levels required when called:    4
 32997 ;; This function calls:
 32998 ;;		Nothing
 32999 ;; This function is called by:
 33000 ;;		_nullifyBadge_platformInit
 33001 ;; This function uses a non-reentrant model
 33002 ;;
 33003                           
 33004                           
 33005                           ;psect for function _PWM1_LoadDutyValue
 33006  3580                     _PWM1_LoadDutyValue:	
 33007                           
 33008                           ;pwm1.c: 82: dutyValue &= 0x03FF;
 33009                           
 33010                           ;incstack = 0
 33011                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2]
 33012  3580  30FF               	movlw	255
 33013  3581  05F1               	andwf	PWM1_LoadDutyValue@dutyValue,f
 33014  3582  3003               	movlw	3
 33015  3583  05F2               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
 33016                           
 33017                           ;pwm1.c: 85: if(CCP1CONbits.CCP1FMT)
 33018  3584  0025               	movlb	5	; select bank5
 33019  3585  1E13               	btfss	19,4	;volatile
 33020  3586  2D91               	goto	l10144
 33021                           
 33022                           ;pwm1.c: 86: {
 33023                           ;pwm1.c: 87: dutyValue <<= 6;
 33024  3587  3006               	movlw	6
 33025  3588                     u6335:	
 33026  3588  35F1               	lslf	PWM1_LoadDutyValue@dutyValue,f
 33027  3589  0DF2               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
 33028  358A  0B89               	decfsz	9,f
 33029  358B  2D88               	goto	u6335
 33030                           
 33031                           ;pwm1.c: 88: CCPR1H = dutyValue >> 8;
 33032  358C  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 33033  358D  0092               	movwf	18	;volatile
 33034                           
 33035                           ;pwm1.c: 89: CCPR1L = dutyValue;
 33036  358E  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 33037  358F  0091               	movwf	17	;volatile
 33038                           
 33039                           ;pwm1.c: 90: }
 33040  3590  0008               	return
 33041  3591                     l10144:	
 33042                           
 33043                           ;pwm1.c: 91: else
 33044                           ;pwm1.c: 92: {
 33045                           ;pwm1.c: 93: CCPR1H = dutyValue >> 8;
 33046  3591  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 33047  3592  0092               	movwf	18	;volatile
 33048                           
 33049                           ;pwm1.c: 94: CCPR1L = dutyValue;
 33050  3593  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 33051  3594  0091               	movwf	17	;volatile
 33052  3595  0008               	return
 33053  3596                     __end_of_PWM1_LoadDutyValue:	
 33054                           
 33055                           	psect	intentry
 33056  0004                     __pintentry:	
 33057 ;; *************** function _INTERRUPT_InterruptManager *****************
 33058 ;; Defined at:
 33059 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 33060 ;; Parameters:    Size  Location     Type
 33061 ;;		None
 33062 ;; Auto vars:     Size  Location     Type
 33063 ;;		None
 33064 ;; Return value:  Size  Location     Type
 33065 ;;                  1    wreg      void 
 33066 ;; Registers used:
 33067 ;;		wreg, status,2, status,0, pclath, cstack
 33068 ;; Tracked objects:
 33069 ;;		On entry : 0/0
 33070 ;;		On exit  : 0/0
 33071 ;;		Unchanged: 0/0
 33072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33075 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33076 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33077 ;;Total ram usage:        1 bytes
 33078 ;; Hardware stack levels used:    1
 33079 ;; Hardware stack levels required when called:    3
 33080 ;; This function calls:
 33081 ;;		_TMR0_ISR
 33082 ;; This function is called by:
 33083 ;;		Interrupt level 1
 33084 ;; This function uses a non-reentrant model
 33085 ;;
 33086                           
 33087  0004                     _INTERRUPT_InterruptManager:	
 33088                           
 33089                           ;incstack = 0
 33090  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 33091                           
 33092                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 33093  0005  3180               	pagesel	$
 33094  0006  0020               	movlb	0	; select bank0
 33095  0007  087F               	movf	127,w
 33096  0008  00F0               	movwf	??_INTERRUPT_InterruptManager
 33097                           
 33098                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 33099  0009  0021               	movlb	1	; select bank1
 33100  000A  1E90               	btfss	16,5	;volatile
 33101  000B  2811               	goto	i1l363
 33102  000C  0020               	movlb	0	; select bank0
 33103  000D  1E90               	btfss	16,5	;volatile
 33104  000E  2811               	goto	i1l363
 33105                           
 33106                           ;interrupt_manager.c: 55: {
 33107                           ;interrupt_manager.c: 56: TMR0_ISR();
 33108  000F  31B4  24AB         	fcall	_TMR0_ISR
 33109  0011                     i1l363:	
 33110                           ;interrupt_manager.c: 58: else
 33111                           ;interrupt_manager.c: 59: {
 33112                           
 33113                           ;interrupt_manager.c: 57: }
 33114                           
 33115  0011  0870               	movf	??_INTERRUPT_InterruptManager,w
 33116  0012  0020               	movlb	0	; select bank0
 33117  0013  00FF               	movwf	127
 33118  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 33119  0015  0009               	retfie
 33120  0016                     __end_of_INTERRUPT_InterruptManager:	
 33121                           
 33122                           	psect	text103
 33123  34AB                     __ptext103:	
 33124 ;; *************** function _TMR0_ISR *****************
 33125 ;; Defined at:
 33126 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 33127 ;; Parameters:    Size  Location     Type
 33128 ;;		None
 33129 ;; Auto vars:     Size  Location     Type
 33130 ;;		None
 33131 ;; Return value:  Size  Location     Type
 33132 ;;                  1    wreg      void 
 33133 ;; Registers used:
 33134 ;;		wreg, status,2, status,0, pclath, cstack
 33135 ;; Tracked objects:
 33136 ;;		On entry : 0/0
 33137 ;;		On exit  : 0/0
 33138 ;;		Unchanged: 0/0
 33139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33144 ;;Total ram usage:        0 bytes
 33145 ;; Hardware stack levels used:    1
 33146 ;; Hardware stack levels required when called:    2
 33147 ;; This function calls:
 33148 ;;		_TMR0_CallBack
 33149 ;; This function is called by:
 33150 ;;		_INTERRUPT_InterruptManager
 33151 ;; This function uses a non-reentrant model
 33152 ;;
 33153                           
 33154                           
 33155                           ;psect for function _TMR0_ISR
 33156  34AB                     _TMR0_ISR:	
 33157                           
 33158                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
 33159                           
 33160                           ;incstack = 0
 33161                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 33162  34AB  0020               	movlb	0	; select bank0
 33163  34AC  1290               	bcf	16,5	;volatile
 33164                           
 33165                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
 33166  34AD  0021               	movlb	1	; select bank1
 33167  34AE  0841               	movf	(_timer0ReloadVal16bit+1)^(0+128),w	;volatile
 33168  34AF  0020               	movlb	0	; select bank0
 33169  34B0  0096               	movwf	22	;volatile
 33170                           
 33171                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
 33172  34B1  0021               	movlb	1	; select bank1
 33173  34B2  0840               	movf	_timer0ReloadVal16bit^(0+128),w	;volatile
 33174  34B3  0020               	movlb	0	; select bank0
 33175  34B4  0095               	movwf	21	;volatile
 33176                           
 33177                           ;tmr0.c: 146: TMR0_CallBack();
 33178  34B5  31B4  2444         	fcall	_TMR0_CallBack
 33179  34B7  0008               	return
 33180  34B8                     __end_of_TMR0_ISR:	
 33181                           
 33182                           	psect	text104
 33183  3444                     __ptext104:	
 33184 ;; *************** function _TMR0_CallBack *****************
 33185 ;; Defined at:
 33186 ;;		line 151 in file "mcc_generated_files/tmr0.c"
 33187 ;; Parameters:    Size  Location     Type
 33188 ;;		None
 33189 ;; Auto vars:     Size  Location     Type
 33190 ;;		None
 33191 ;; Return value:  Size  Location     Type
 33192 ;;                  1    wreg      void 
 33193 ;; Registers used:
 33194 ;;		wreg, status,2, status,0, pclath, cstack
 33195 ;; Tracked objects:
 33196 ;;		On entry : 0/0
 33197 ;;		On exit  : 0/0
 33198 ;;		Unchanged: 0/0
 33199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33204 ;;Total ram usage:        0 bytes
 33205 ;; Hardware stack levels used:    1
 33206 ;; Hardware stack levels required when called:    1
 33207 ;; This function calls:
 33208 ;;		Absolute function
 33209 ;;		_TMR0_DefaultInterruptHandler
 33210 ;; This function is called by:
 33211 ;;		_TMR0_ISR
 33212 ;; This function uses a non-reentrant model
 33213 ;;
 33214                           
 33215                           
 33216                           ;psect for function _TMR0_CallBack
 33217  3444                     _TMR0_CallBack:	
 33218                           
 33219                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
 33220                           
 33221                           ;incstack = 0
 33222                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 33223  3444  0021               	movlb	1	; select bank1
 33224  3445  083E               	movf	_TMR0_InterruptHandler^(0+128),w
 33225  3446  043F               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 33226  3447  1903               	btfsc	3,2
 33227  3448  0008               	return
 33228                           
 33229                           ;tmr0.c: 156: {
 33230                           ;tmr0.c: 157: TMR0_InterruptHandler();
 33231  3449  083F               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 33232  344A  008A               	movwf	10
 33233  344B  083E               	movf	_TMR0_InterruptHandler^(0+128),w
 33234  344C  000A               	callw
 33235  344D  31B4               	pagesel	$
 33236  344E  0008               	return
 33237  344F                     __end_of_TMR0_CallBack:	
 33238                           
 33239                           	psect	text105
 33240  0800                     __ptext105:	
 33241 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 33242 ;; Defined at:
 33243 ;;		line 165 in file "mcc_generated_files/tmr0.c"
 33244 ;; Parameters:    Size  Location     Type
 33245 ;;		None
 33246 ;; Auto vars:     Size  Location     Type
 33247 ;;		None
 33248 ;; Return value:  Size  Location     Type
 33249 ;;                  1    wreg      void 
 33250 ;; Registers used:
 33251 ;;		None
 33252 ;; Tracked objects:
 33253 ;;		On entry : 0/0
 33254 ;;		On exit  : 0/0
 33255 ;;		Unchanged: 0/0
 33256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33261 ;;Total ram usage:        0 bytes
 33262 ;; Hardware stack levels used:    1
 33263 ;; This function calls:
 33264 ;;		Nothing
 33265 ;; This function is called by:
 33266 ;;		_TMR0_Initialize
 33267 ;;		_TMR0_CallBack
 33268 ;; This function uses a non-reentrant model
 33269 ;;
 33270                           
 33271                           
 33272                           ;psect for function _TMR0_DefaultInterruptHandler
 33273  0800                     _TMR0_DefaultInterruptHandler:	
 33274                           
 33275                           ;incstack = 0
 33276                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 33277  0800  0008               	return
 33278  0801                     __end_of_TMR0_DefaultInterruptHandler:	
 33279  007E                     btemp	set	126	;btemp
 33280  007E                     int$flags	set	126
 33281  007E                     wtemp0	set	126


Data Sizes:
    Strings     1103
    Constant    522
    Data        641
    BSS         301
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     79      79
    BANK1            80      8      69
    BANK2            80      0      73
    BANK3            80      0      77
    BANK4            80      0      70
    BANK5            80      0      80
    BANK6            80      0      55
    BANK7            80      0      56
    BANK8            80      0      56
    BANK9            80      0      59
    BANK10           80      0      58
    BANK11           80      0      40
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           16      0       0
    BANK23            0      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    menu_run_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    schedulerInst.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    schedulerInst.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    schedulerInst.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    schedulerInst.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerExecute$4061	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    matrix_secret_check@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_check@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$3$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$2$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$4$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_81(CODE[23]), STR_80(CODE[27]), matrix_secret_inputs.inputs(BANK4[20]), matrix_secret_inputs(BANK4[25]), 
		 -> STR_79(CODE[8]), STR_78(CODE[7]), STR_77(CODE[8]), STR_76(CODE[6]), 
		 -> STR_75(CODE[10]), STR_74(CODE[5]), STR_73(CODE[7]), STR_72(CODE[9]), 
		 -> STR_71(CODE[7]), STR_70(CODE[7]), Slot_Wheel(BANK6[55]), secret_inputs.inputs(BANK4[20]), 
		 -> secret_inputs(BANK4[25]), STR_45(CODE[5]), STR_44(CODE[5]), STR_43(CODE[11]), 
		 -> STR_42(CODE[13]), STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), 
		 -> STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), 
		 -> STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), 
		 -> STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), 
		 -> STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), 
		 -> STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), 
		 -> STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), 
		 -> STR_12(CODE[9]), STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), 
		 -> STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_81(CODE[23]), STR_80(CODE[27]), matrix_secret_inputs.inputs(BANK4[20]), matrix_secret_inputs(BANK4[25]), 
		 -> STR_79(CODE[8]), STR_78(CODE[7]), STR_77(CODE[8]), STR_76(CODE[6]), 
		 -> STR_75(CODE[10]), STR_74(CODE[5]), STR_73(CODE[7]), STR_72(CODE[9]), 
		 -> STR_71(CODE[7]), STR_70(CODE[7]), Slot_Wheel(BANK6[55]), secret_inputs.inputs(BANK4[20]), 
		 -> secret_inputs(BANK4[25]), STR_45(CODE[5]), STR_44(CODE[5]), STR_43(CODE[11]), 
		 -> STR_42(CODE[13]), STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), 
		 -> STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), 
		 -> STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), 
		 -> STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), 
		 -> STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), 
		 -> STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), 
		 -> STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), 
		 -> STR_12(CODE[9]), STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), 
		 -> STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_82(CODE[7]), sprintf@c(BANK0[1]), STR_63(CODE[9]), STR_62(CODE[13]), 
		 -> STR_61(CODE[12]), STR_60(CODE[8]), STR_59(CODE[11]), STR_58(CODE[11]), 
		 -> STR_57(CODE[9]), STR_56(CODE[8]), STR_55(CODE[8]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_69(CODE[3]), STR_68(CODE[9]), STR_67(CODE[9]), STR_66(CODE[9]), 
		 -> STR_65(CODE[9]), STR_64(CODE[9]), STR_41(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 41
		 -> flashy_Main@hit_counter(BANK0[6]), matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), 
		 -> slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    matrix_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_Main@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_display_option@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> matrix_secret_inputs.inputs(BANK4[20]), matrix_secret_inputs(BANK4[25]), 

    matrix_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_Init@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S3135matrix_secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    matrix_secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    matrix_option	PTR unsigned char [10] size(2) Largest target is 10
		 -> STR_79(CODE[8]), STR_78(CODE[7]), STR_77(CODE[8]), STR_76(CODE[6]), 
		 -> STR_75(CODE[10]), STR_74(CODE[5]), STR_73(CODE[7]), STR_72(CODE[9]), 
		 -> STR_71(CODE[7]), STR_70(CODE[7]), 

    slot_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Main@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Finished_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Running_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Running_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Running_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Setup@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Setup@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Setup@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2368t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Init@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    Shot_Options_Long	PTR unsigned char [9] size(2) Largest target is 13
		 -> STR_63(CODE[9]), STR_62(CODE[13]), STR_61(CODE[12]), STR_60(CODE[8]), 
		 -> STR_59(CODE[11]), STR_58(CODE[11]), STR_57(CODE[9]), STR_56(CODE[8]), 
		 -> STR_55(CODE[8]), 

    Shot_Options	PTR unsigned char [9] size(2) Largest target is 5
		 -> STR_54(CODE[5]), STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), 
		 -> STR_50(CODE[5]), STR_49(CODE[5]), STR_48(CODE[5]), STR_47(CODE[5]), 
		 -> STR_46(CODE[5]), 

    secret_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Main@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), 

    secret_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Init@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2844secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    locked_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Main@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Init@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Main@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_display_option@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Init@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_option	PTR unsigned char [29] size(2) Largest target is 120
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), 

    FLASHY_TEXT_SECRET_TEST	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_10(CODE[18]), 

    FLASHY_TEXT	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_9(CODE[5]), 

    menu_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_run_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_display_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_taskData	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Init@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_option	PTR unsigned char [5] size(2) Largest target is 10
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), 
		 -> STR_4(CODE[5]), 

    displayL2_ClrUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_SetUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_EraseSegDisplay@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_ForceUpdate@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutStr@str	PTR unsigned char  size(2) Largest target is 120
		 -> flashy_Main@hit_counter(BANK0[6]), STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[43]), 
		 -> STR_37(CODE[13]), STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), 
		 -> STR_33(CODE[34]), STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), 
		 -> STR_29(CODE[12]), STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), 
		 -> STR_25(CODE[40]), STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), 
		 -> STR_21(CODE[36]), STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), 
		 -> STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), 
		 -> STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), STR_8(CODE[6]), 
		 -> STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    displayL2_PutStr@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutChar@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_Initialize@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_Update@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetUserLed@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetSegChar@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    sp__memset	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    displayL1_Initialize@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRelease@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsClr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsSet@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayErase@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayPutStr@str	PTR unsigned char  size(2) Largest target is 120
		 -> flashy_Main@hit_counter(BANK0[6]), STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[43]), 
		 -> STR_37(CODE[13]), STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), 
		 -> STR_33(CODE[34]), STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), 
		 -> STR_29(CODE[12]), STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), 
		 -> STR_25(CODE[40]), STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), 
		 -> STR_21(CODE[36]), STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), 
		 -> STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), 
		 -> STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), STR_8(CODE[6]), 
		 -> STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    nullifyBadge_segDisplayPutStr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayForceUpdate@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_platformInit@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    marquee@string	PTR unsigned char  size(2) Largest target is 120
		 -> STR_45(CODE[5]), STR_44(CODE[5]), STR_43(CODE[11]), STR_42(CODE[13]), 
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[29]), 
		 -> secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), 
		 -> flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    marquee_speedy@string	PTR unsigned char  size(2) Largest target is 120
		 -> STR_81(CODE[23]), STR_80(CODE[27]), STR_79(CODE[8]), STR_78(CODE[7]), 
		 -> STR_77(CODE[8]), STR_76(CODE[6]), STR_75(CODE[10]), STR_74(CODE[5]), 
		 -> STR_73(CODE[7]), STR_72(CODE[9]), STR_71(CODE[7]), STR_70(CODE[7]), 
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), 
		 -> slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerInst.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    S1195t_matrix_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1170t_secret_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1161t_locked_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1067t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1136t_menu_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1118t_flashy_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    matrix_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    matrix_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    matrix_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    secret_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    secret_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    secret_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    locked_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    locked_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    locked_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    slot_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    slot_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    slot_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    menu_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    menu_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    menu_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    flashy_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    flashy_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    flashy_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    fadeDisplay_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    S1013t_fadeDisplay_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    schedulerExecute@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerExecute@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    schedulerExecute@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskRemove@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskRemove@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskRemove@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskRemove@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRemove@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), 

    scheduler_TaskAdd@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskInit@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskInit@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskInit@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskInit@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskInit@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), 

    S923t_scheduler$tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    S902t_schedulerTask$taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskRun@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    S902t_schedulerTask$taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskRun@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    S902t_schedulerTask$taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskRun@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    S902t_schedulerTask$taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[29]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    SPI1_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 10
		 -> displayL1_Update@tmpRxBuf(BANK0[10]), 

    SPI1_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 


Critical Paths under _main in COMMON

    _schedulerExecute->_TMR0_Read16bitTimer
    _scheduler_TaskRun->_TMR0_Read16bitTimer
    _secret_check->_strlen
    _matrix_secret_check->_strlen
    _slot_Setup->___lwmod
    _nullifyBadge_userLedsClr->_displayL2_ClrUserLeds
    _displayL2_ClrUserLeds->_displayL1_Update
    _sprintf->___lwmod
    _led_rand->___almod
    _rand->___lmul
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _displayL1_SetSegChar->_displayCharReverse
    _nullifyBadge_segDisplayForceUpdate->_displayL2_ForceUpdate
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->___lwdiv
    _displayL2_Initialize->_displayL1_Initialize
    _displayL1_Initialize->_displayL1_Update
    _displayL1_Update->_SPI1_Exchange8bitBuffer
    _SPI1_Exchange8bitBuffer->_SPI1_Exchange8bit
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_schedulerExecute
    _scheduler_TaskAdd->_matrix_Init
    _slot_Init->_nullifyBadge_segDisplayErase
    _secret_Init->_nullifyBadge_segDisplayErase
    _menu_Init->_nullifyBadge_segDisplayErase
    _matrix_Init->_nullifyBadge_segDisplayErase
    _locked_Init->_nullifyBadge_segDisplayErase
    _flashy_Init->_nullifyBadge_segDisplayErase
    _schedulerExecute->_scheduler_TaskRun
    _scheduler_TaskRun->_slot_Main
    _slot_Running_Animation->_led_circle
    _slot_Finished_Animation->_led_rand
    _menu_Main->_menu_display_option
    _menu_run_option->_menu_clear
    _menu_clear->_nullifyBadge_segDisplayErase
    _menu_display_option->_marquee
    _matrix_display_option->_marquee_speedy
    _slot_Setup->___lwmod
    _locked_clear->_nullifyBadge_segDisplayErase
    _displayL2_ClrUserLeds->_displayL1_Update
    _nullifyBadge_segDisplayErase->_displayL2_EraseSegDisplay
    _displayL2_EraseSegDisplay->_displayL2_PutStr
    _sprintf->___lwmod
    _let_alternate->_nullifyBadge_userLedsSet
    _led_roundabout->_nullifyBadge_userLedsSet
    _led_rand->___almod
    _rand->___lmul
    ___almod->_rand
    _led_curtain->_nullifyBadge_userLedsSet
    _led_circle->_nullifyBadge_userLedsSet
    _led_Parody->_nullifyBadge_userLedsSet
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _flashy_display_option->_marquee
    _flashy_display_option->_marquee_speedy
    _marquee_speedy->_nullifyBadge_segDisplayPutStr
    _marquee->_nullifyBadge_segDisplayPutStr
    _nullifyBadge_segDisplayPutStr->_displayL2_PutStr
    _displayL2_PutStr->_displayL2_PutChar
    _displayL2_PutChar->_displayL1_SetSegChar
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->_rand
    _nullifyBadge_platformInit->_displayL2_Initialize
    _displayL1_Initialize->_displayL1_Update

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_schedulerExecute

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  382481
                                             78 BANK0      1     1      0
          _nullifyBadge_platformInit
                   _schedulerExecute
                     _scheduler_Init
                  _scheduler_TaskAdd
                 _scheduler_TaskInit
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskInit                                   1     1      0     433
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskAdd                                    9     8      1   52340
                                             31 BANK0      9     8      1
                   Absolute function *
                        _flashy_Init *
                        _locked_Init *
                        _matrix_Init *
                          _menu_Init *
                        _secret_Init *
                          _slot_Init *
 ---------------------------------------------------------------------------------
 (2) _slot_Init                                            4     2      2   14629
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (2) _secret_Init                                          4     2      2    7195
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _menu_Init                                            4     2      2    7195
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _matrix_Init                                          6     4      2    7477
                                             25 BANK0      6     4      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _locked_Init                                          4     2      2    7260
                                             25 BANK0      4     2      2
                   _locked_lock_leds
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _flashy_Init                                          4     2      2    7350
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsRegister                        1     1      0     278
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayRegister                      1     1      0     283
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_Init                                       3     3      0     197
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _schedulerExecute                                    14    14      0  323832
                                             72 BANK0      6     6      0
                                              0 BANK1      8     8      0
                _TMR0_Read16bitTimer
                  _scheduler_TaskRun
 ---------------------------------------------------------------------------------
 (2) _scheduler_TaskRun                                    1     1      0  323276
                                             71 BANK0      1     1      0
                   Absolute function *
                _TMR0_Read16bitTimer
                        _flashy_Main *
                        _locked_Main *
                        _matrix_Main *
                          _menu_Main *
                        _secret_Main *
                          _slot_Main *
 ---------------------------------------------------------------------------------
 (3) _slot_Main                                           21    19      2   70448
                                             50 BANK0     21    19      2
                            ___lwmod
                            _marquee
                     _marquee_speedy
                             _memset
            _nullifyBadge_buttonsGet
                               _rand
            _slot_Finished_Animation
             _slot_Running_Animation
                         _slot_Setup
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _slot_Running_Animation                               6     4      2    3731
                                             18 BANK0      6     4      2
                         _led_circle
 ---------------------------------------------------------------------------------
 (4) _slot_Finished_Animation                              6     4      2    4417
                                             29 BANK0      6     4      2
                           _led_rand
 ---------------------------------------------------------------------------------
 (3) _secret_Main                                          8     6      2    4719
                                             50 BANK0      8     6      2
            _nullifyBadge_buttonsGet
                       _secret_check
                       _secret_clear
 ---------------------------------------------------------------------------------
 (4) _secret_clear                                         2     0      2     286
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (4) _secret_check                                        19    16      3    2785
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _menu_Main                                            7     5      2   51344
                                             50 BANK0      7     5      2
                         _menu_clear
                _menu_display_option
                    _menu_run_option
            _nullifyBadge_buttonsGet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (4) _menu_run_option                                      2     0      2    7012
                                             27 BANK0      2     0      2
                         _menu_clear
 ---------------------------------------------------------------------------------
 (5) _menu_clear                                           2     0      2    6838
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (4) _menu_display_option                                  6     4      2   28579
                                             44 BANK0      6     4      2
                            ___lwmod
                            _marquee
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (3) _matrix_Main                                         11     9      2   41976
                                             50 BANK0     11     9      2
                         _led_Parody
                        _led_curtain
              _matrix_display_option
                _matrix_secret_check
            _nullifyBadge_buttonsGet
 ---------------------------------------------------------------------------------
 (4) _matrix_secret_check                                 19    16      3    3381
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1      52
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _matrix_display_option                                4     2      2   14615
                                             44 BANK0      4     2      2
                     _marquee_speedy
 ---------------------------------------------------------------------------------
 (3) _locked_Main                                          7     5      2   38890
                                             50 BANK0      7     5      2
                            ___lwmod
                       _locked_clear
               _locked_get_lock_leds
             _locked_get_unlock_leds
                   _locked_lock_leds
                 _locked_unlock_leds
                            _marquee
            _nullifyBadge_buttonsGet
           _nullifyBadge_userLedsSet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (3) _slot_Setup                                           7     5      2    7403
                                             15 BANK0      7     5      2
                            ___lwmod
                             _memset
                               _rand
 ---------------------------------------------------------------------------------
 (4) _locked_unlock_leds                                   2     2      0       0
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _locked_lock_leds                                     4     4      0      34
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _locked_get_unlock_leds                               4     2      2      34
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _locked_get_lock_leds                                 8     6      2      68
                                              1 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (4) _locked_clear                                         2     0      2    6588
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsClr                             1     1      0    2094
                                             11 BANK0      1     1      0
              _displayL2_ClrUserLeds
 ---------------------------------------------------------------------------------
 (4) _displayL2_ClrUserLeds                                1     1      0    1559
                                             11 COMMON     1     1      0
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayErase                         1     1      0    4196
                                             24 BANK0      1     1      0
          _displayL2_EraseSegDisplay
 ---------------------------------------------------------------------------------
 (4) _displayL2_EraseSegDisplay                            1     1      0    3589
                                             23 BANK0      1     1      0
                   _displayL1_Update
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (3) _flashy_Main                                         14    12      2  115668
                                             50 BANK0     14    12      2
              _flashy_display_option
                         _led_Parody
                         _led_circle
                        _led_curtain
                           _led_rand
                     _led_roundabout
                      _let_alternate
                            _marquee
            _nullifyBadge_buttonsGet
                 _nullifyBadge_irGet
               _nullifyBadge_irTxClr
          _nullifyBadge_irTxRegister
           _nullifyBadge_irTxRelease
               _nullifyBadge_irTxSet
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             32    20     12   15007
                                             15 BANK0     28    16     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    5928
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxSet                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRelease                             2     2      0      67
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRegister                            1     1      0      98
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxClr                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irGet                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_buttonsGet                              3     3      0      46
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _let_alternate                                        2     0      2    3314
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_roundabout                                       8     6      2    8722
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_rand                                            10    10      0    4190
                                             19 BANK0     10    10      0
                            ___almod
           _nullifyBadge_userLedsSet
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 7     5      2     316
                                              4 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     316
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) ___almod                                             11     3      8     613
                                              9 COMMON     3     3      0
                                             11 BANK0      8     0      8
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) _led_curtain                                          8     6      2    8812
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_circle                                           2     0      2    3404
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_Parody                                           8     6      2    8874
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (6) _nullifyBadge_userLedsSet                             3     1      2    3193
                                             13 BANK0      3     1      2
              _displayL2_SetUserLeds
 ---------------------------------------------------------------------------------
 (7) _displayL2_SetUserLeds                                3     1      2    1868
                                             11 COMMON     1     1      0
                                             11 BANK0      2     0      2
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (5) _displayL1_SetUserLed                                 4     2      2     376
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _flashy_display_option                                2     0      2   34213
                                             44 BANK0      2     0      2
                            _marquee
                     _marquee_speedy
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
 ---------------------------------------------------------------------------------
 (4) _marquee_speedy                                      18    12      6   14286
                                             26 BANK0     18    12      6
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _marquee                                             18    14      4   15099
                                             26 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2    1390
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayPutStr                        3     1      2    3224
                                             23 BANK0      3     1      2
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (5) _displayL2_PutStr                                     7     5      2    2406
                                             16 BANK0      7     5      2
                  _displayL2_PutChar
 ---------------------------------------------------------------------------------
 (6) _displayL2_PutChar                                    6     5      1    1993
                                             10 BANK0      6     5      1
               _displayL1_SetSegChar
 ---------------------------------------------------------------------------------
 (7) _displayL1_SetSegChar                                10     8      2    1298
                                              0 BANK0     10     8      2
                 _displayCharReverse
 ---------------------------------------------------------------------------------
 (8) _displayCharReverse                                  11     9      2     331
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayForceUpdate                   1     1      0    1399
                                             11 BANK0      1     1      0
              _displayL2_ForceUpdate
 ---------------------------------------------------------------------------------
 (6) _displayL2_ForceUpdate                                1     1      0    1152
                                             11 COMMON     1     1      0
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4    5272
                                              9 COMMON     2     2      0
                                             11 BANK0      4     0      4
                            ___lwdiv (ARG)
                               _rand (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4    1221
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _TMR0_Read16bitTimer                                 11     9      2     102
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (1) _nullifyBadge_platformInit                            1     1      0    5679
                                             12 BANK0      1     1      0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                 _PWM1_LoadDutyValue
                    _PWM2_Initialize
                 _PWM2_LoadDutyValue
                    _PWM5_Initialize
                 _PWM5_LoadDutyValue
                    _PWM6_Initialize
                 _PWM6_LoadDutyValue
                    _SPI1_Initialize
                  _SYSTEM_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
               _displayL2_Initialize
 ---------------------------------------------------------------------------------
 (2) _displayL2_Initialize                                 1     1      0    4257
                                             11 BANK0      1     1      0
               _displayL1_Initialize
                             _memset
 ---------------------------------------------------------------------------------
 (3) _displayL1_Initialize                                 1     1      0    2640
                                             11 COMMON     1     1      0
                   _displayL1_Update
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    1457
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (5) _displayL1_Update                                    13    13      0    1085
                                              9 COMMON     2     2      0
                                              0 BANK0     11    11      0
            _SPI1_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bitBuffer                              7     5      2     759
                                              2 COMMON     7     5      2
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     155
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM5_Initialize
                    _PWM6_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     121
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     121
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               1     1      0      34
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM6_LoadDutyValue                                   4     2      2     242
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM5_LoadDutyValue                                   4     2      2     332
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_LoadDutyValue                                   2     0      2     220
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM1_LoadDutyValue                                   2     0      2     220
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          1     1      0       0
                                              0 COMMON     1     1      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (13) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (14) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _nullifyBadge_platformInit
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM1_LoadDutyValue
     _PWM2_Initialize
     _PWM2_LoadDutyValue
     _PWM5_Initialize
     _PWM5_LoadDutyValue
     _PWM6_Initialize
     _PWM6_LoadDutyValue
     _SPI1_Initialize
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _PWM1_Initialize
       _PWM2_Initialize
       _PWM5_Initialize
       _PWM6_Initialize
       _SPI1_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
         _TMR0_StartTimer
       _TMR2_Initialize
         _TMR2_StartTimer
       _TMR4_Initialize
         _TMR4_StartTimer
       _WDT_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
     _TMR4_Initialize
       _TMR4_StartTimer
     _displayL2_Initialize
       _displayL1_Initialize
         _displayL1_Update
           _SPI1_Exchange8bitBuffer
             _SPI1_Exchange8bit
         _memset
       _memset
   _schedulerExecute
     _TMR0_Read16bitTimer
     _scheduler_TaskRun
       Absolute function(Fake) *
       _TMR0_Read16bitTimer *
       _flashy_Main *
         _flashy_display_option
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_circle
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_rand
           ___almod
             _rand (ARG)
               ___lmul
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _rand
             ___lmul
         _led_roundabout
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _let_alternate
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_irGet
         _nullifyBadge_irTxClr
         _nullifyBadge_irTxRegister
         _nullifyBadge_irTxRelease
         _nullifyBadge_irTxSet
         _nullifyBadge_segDisplayForceUpdate
           _displayL2_ForceUpdate
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _nullifyBadge_segDisplayPutStr
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
       _locked_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _locked_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _locked_get_lock_leds
         _locked_get_unlock_leds
         _locked_lock_leds
         _locked_unlock_leds
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _matrix_Main *
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _matrix_display_option
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
         _matrix_secret_check
           ___bmul
           _strlen
         _nullifyBadge_buttonsGet
       _menu_Main *
         _menu_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_display_option
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_run_option
           _menu_clear
             _nullifyBadge_segDisplayErase
               _displayL2_EraseSegDisplay
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
                 _displayL2_PutStr
                   _displayL2_PutChar
                     _displayL1_SetSegChar
                       _displayCharReverse
             _nullifyBadge_userLedsClr
               _displayL2_ClrUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _nullifyBadge_buttonsGet
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _secret_Main *
         _nullifyBadge_buttonsGet
         _secret_check
           ___bmul
           _strlen
         _secret_clear
       _slot_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _marquee_speedy
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _memset
         _nullifyBadge_buttonsGet
         _rand
           ___lmul
         _slot_Finished_Animation
           _led_rand
             ___almod
               _rand (ARG)
                 ___lmul
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _rand
               ___lmul
         _slot_Running_Animation
           _led_circle
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
         _strlen
   _scheduler_Init
   _scheduler_TaskAdd
     Absolute function(Fake) *
     _flashy_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _locked_Init *
       _locked_lock_leds
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _matrix_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _menu_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _secret_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _slot_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
       _slot_Setup
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _memset
         _rand
           ___lmul
   _scheduler_TaskInit

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      45       7       86.2%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.2%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4D      11       96.2%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      46      13       87.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     311      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      50      16      100.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      37      18       68.8%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      38      20       70.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      38      22       70.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      3B      24       73.8%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      3A      26       72.5%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     311      28        0.0%
BANK11              50      0      28      29       50.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              10      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23               0      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24               0      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25               0      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Jul 25 23:24:46 2017

                          _SPI1_Exchange8bit 3414                                            pc 0002  
           __size_of_slot_Finished_Animation 0027                               ___bmul@product 0073  
                 __end_of_gamma_table_256x1k 1A00                           ?_SPI1_Exchange8bit 0070  
                                __CFG_CP$OFF 0000                                           l18 3419  
                      _displayL2_ClrUserLeds 34C6                          ___wmul@multiplicand 0073  
                   marquee_speedy@multiplier 003E                                 ?_led_curtain 0030  
              nullifyBadge_buttonsGet@retVal 0073                  __size_of_PWM6_LoadDutyValue 0016  
                                __CFG_LVP$ON 0000                   ??_nullifyBadge_userLedsClr 007C  
                 ??_nullifyBadge_userLedsSet 007C                                          l208 342D  
                                        l625 20D4                                          _GIE 005F  
                             led_Parody@leds 0034              ??_nullifyBadge_segDisplayPutStr 007C  
                                        _PR2 001E                                          _PR4 0416  
                               __CFG_CPD$OFF 0000                               _scheduler_Init 363B  
                             led_Parody@size 0036                          ??_SPI1_Exchange8bit 0071  
                   ??_slot_Running_Animation 0034                           _locked_unlock_leds 3547  
                marquee_speedy@string_length 0048                              _TMR2_Initialize 3430  
             SPI1_Exchange8bitBuffer@dataOut 0073                     displayL1_Update@tmpRxBuf 0020  
                                        wreg 0009                                _slot_taskData 00BC  
               marquee_speedy@display_string 0041                  displayL1_Initialize@display 007B  
        nullifyBadge_userLedsSet@userLedData 002D                              led_curtain@leds 0034  
                    secret_Main@secret_found 0056                              led_curtain@size 0036  
                       _displayL1_Initialize 3559                  slot_Finished_Animation@data 0041  
                                       l1010 2D34                                         l1150 0B61  
                                       l1160 0C49                                         l1241 3729  
                                       l1155 0BD4                                         l1147 0AF4  
                                       l1245 0812                                         l1405 2BFB  
                                       l1432 0574                                         l1265 1D2C  
                                       l1435 05CD                                         l1584 1BA4  
                                       l1745 2134                                         l1677 3628  
                                       l8010 2D61                                         l8004 2D3E  
                                       l8012 2D65                                         l8100 36BD  
                                       l8022 2D6D                                         l8014 2D6A  
                                       l8008 2D4D                                         l8200 37CC  
                                       l8112 351B                                         l9010 1FEE  
                                       l8052 377D                                         l8140 2157  
                                       l8132 2141                                         l8300 3622  
                                       l9020 0865                                         l8222 2269  
                                       l8240 22B9                                         l8216 2242  
                                       l8152 2188                                         l8144 216F  
                                       l8080 28DF                                         l9120 09D5  
                                       l8138 2149                                         l8314 3526  
                                       l9202 0B4C                                         l9114 09B7  
                                       l9106 0992                                         l9050 08D5  
                                       l8148 217A                                         l8084 28EA  
                                       l8500 1AF5                                         l8420 2F24  
                                       l9060 08FA                                         l8174 2960  
                                       l8166 2942                                         l8190 37AB  
                                       l8246 22E0                                         l8350 3577  
                                       l8406 2E1E                                         l8318 352C  
                                       l9142 0A4B                                         l9126 09EB  
                                       l9150 0A72                                         l9070 091E  
                                       l9118 09C4                                         l8168 294E  
                                       l8192 37B7                                         l8360 2101  
                                       l8256 2CE3                                         l8520 1B35  
                                       l8432 2D06                                         l8424 2CEC  
                                       l9208 0B65                                         l9152 0A7D  
                                       l9048 08C6                                         l8266 35F2  
                                       l8178 2969                                         l8098 36B1  
                                       l8514 1B1F                                         l8506 1AF7  
                                       l8442 2D20                                         l9306 0CFB  
                                       l9410 0F36                                         l9138 0A36  
                                       l9090 095D                                         l8196 37C3  
                                       l8516 1B2A                                         l8508 1B0B  
                                       l8436 2D13                                         l8428 2CF9  
                                       l9412 0F59                                         l9404 0E92  
                                       l9228 0BBB                                         l9156 0A8C  
                                       l9084 0949                                         l9148 0A5E  
                                       l8454 1A20                                         l8294 34C4  
                                       l8550 1B98                                         l8526 1B3E  
                                       l9334 0D77                                         l9326 0D4E  
                                       l9238 0BD8                                         l9182 0AF8  
                                       l9078 0936                                         l9502 1D0A  
                                       l8560 1BC3                                         l8544 1B79  
                                       l8528 1B5C                                         l9424 0F89  
                                       l9408 0EE5                                         l9336 0D7C  
                                       l9176 0ADF                                         l9440 0FC9  
                                       l9096 096D                                         l9504 1D15  
                                       l8458 1A48                                         l8562 1BC7  
                                       l8538 1B73                                         l8490 1AD8  
                                       l8482 1AC4                                         l8474 1A95  
                                       l8722 252A                                         l8650 10CA  
                                       l9442 0FD6                                         l9418 0F70  
                                       l9370 0E06                                         l9362 0DE3  
                                       l9258 0C30                                         l9522 1D70  
                                       l9610 2752                                         l8468 1A85  
                                       l8740 21CD                                         l8724 253B  
                                       l8652 10DB                                         l9436 0FBD  
                                       l9356 0DD0                                         l9268 0C4D  
                                       l9516 1D44                                         l8582 1BEB  
                                       l8574 1BE7                                         l8558 1BC0  
                                       l8494 1ADA                                         l8726 248F  
                                       l8654 102F                                         l9382 0E39  
                                       l9374 0E19                                         l9366 0DF4  
                                       l8902 1E1B                                         l9534 1D9D  
                                       l9526 1D7A                                         l9518 1D58  
                                       l9622 2786                                         l9606 273A  
                                       l8568 1BD9                                         l8496 1AE8  
                                       l8584 1A64                                         l8736 21AA  
                                       l8728 2541                                         l8656 10E1  
                                       l8680 2BE8                                         l9720 050D  
                                       l9704 041A                                         l9384 0E3E  
                                       l9288 0CA5                                         l8920 1E61  
                                       l9544 1DD5                                         l9536 1DAA  
                                       l9472 1C5D                                         l8586 1C25  
                                       l9722 0583                                         l9714 04CA  
                                       l9378 0E26                                         l9490 1CBD  
                                       l9482 1C9A                                         l9626 279E  
                                       l9562 266B                                         l9642 27E3  
                                       l9810 11E7                                         l7972 37F0  
                                       l7964 37DF                                         l8924 1E87  
                                       l9548 1E00                                         l9644 27F5  
                                       l9556 2651                                         l9900 13A0  
                                       l7990 2AAA                                         l9726 05B6  
                                       l9742 0627                                         l8934 1EAA  
                                       l8926 1E8D                                         l9638 27D2  
                                       l9590 26EE                                         l9574 26A2  
                                       l8688 2C0A                                         l8936 1EAE  
                                       l8928 1E95                                         l9496 1CED  
                                       l9840 127A                                         l9816 1216  
                                       l8698 101C                                         l9658 011E  
                                       l8954 1F05                                         l9594 2706  
                                       l9578 26BA                                         l9930 1433  
                                       l9906 13CF                                         l9692 0347  
                                       l8956 1F0A                                         l8948 1EE2  
                                       l9780 115A                                         l9678 0251  
                                       l8974 1F53                                         l9870 130D  
                                       l9846 12A9                                         l9766 111A  
                                       STR_1 3B9C                                         l8984 1F7F  
                                       l8968 1F3E                                         l9960 14C6  
                                       l9936 1462                                         l9776 1147  
                                       STR_2 3B97                          ?_locked_unlock_leds 0070  
                                       STR_3 287D                                         l9786 1183  
                                       l9778 1152                                         STR_4 3B92  
                                       STR_5 3B46                                         l8988 1F8F  
                                       l9876 133C                                         STR_6 3A9A  
                                       STR_7 3B09                                         l8998 1FBB  
                                       l9990 1559                                         l9966 14F5  
                                       STR_8 3B40                                         STR_9 3B8D  
                                       l9996 1588                      __end_of_PWM1_Initialize 345A  
                                       _LATA 010C                                         _LATB 010D  
                                       _LATC 010E                                         u5005 28BD  
                                       u5015 28CB                                         u5125 1AEE  
                                       u5215 1BB3                                         u5305 1094  
                                       u5315 1035                              led_Parody@count 0030  
                                       u6205 13B2                                         u5430 2E7C  
                                       u4535 28EB                                         u5175 1B8E  
                                       u6215 1445                                         u6305 35BB  
                                       u4625 214C                                         u4545 28F2  
                                       u6225 14D8                                         u4810 2219  
                                       u6315 35D1                                         u4715 294F  
                                       u5275 3723                                         u5515 1EFF  
                                       u6235 156B                                         u4725 2959  
                                       u4645 2165                                         u6245 15FE  
                                       u6165 116C                                         u6414 2323  
                                       u6335 3588                                         u4735 2961  
                                       u4655 2170                                         u5375 24F4  
                                       u6255 1691                                         u6175 11F9  
                                       u6415 2321                                         u4840 2290  
                                       u4585 2BC3                                         u5385 2495  
                                       u6185 128C                                         u6355 359E  
                                       u6195 131F                                         u4765 37AE  
                                       u4925 3629                                         u6454 2381  
                                       u4695 2945                                         u4935 362E  
                                       u6455 237F                                         u4785 37BD  
                                       u6394 2304                                         u4795 37C4  
                                       u6475 23D5                                         u6395 2302  
                                       u5785 0D71                                         u4995 20E5  
                                       _PLLR 48E0                                         _TMR2 001D  
                                       _TMR4 0415                                         _WPUA 020C  
                                       _WPUB 020D                                         _WPUC 020E  
                               __CFG_WRT$OFF 0000                                __CFG_FCMEN$ON 0000  
                     ?_matrix_display_option 004C                                         _main 0661  
                                       _rand 2B8D                              _TMR0_StartTimer 33D9  
                                       fsr0h 0005                                         fsr1h 0007  
                                       indf0 0000                                         fsr0l 0004  
                                       indf1 0001                                         fsr1l 0006  
                                       btemp 007E                                __CFG_BOREN$ON 0000  
                           ??_marquee_speedy 0040                                __CFG_BORV$LOW 0000  
                                       start 0016                    __end_of_SPI1_Exchange8bit 341D  
                        _menu_display_option 2ED9                              _PWM5_Initialize 347B  
                        matrix_Main@taskData 0052                          locked_Main@taskData 0052  
               displayL2_ClrUserLeds@display 007B                      displayL2_PutStr@display 0035  
                              __CFG_CSWEN$ON 0000                            ___bmul@multiplier 0074  
                              __CFG_MCLRE$ON 0000                         _displayL1_SetSegChar 2A88  
                 __end_of_PWM5_LoadDutyValue 35C2                                        S10770 302F  
                        menu_run_option@data 003B                         _displayL2_Initialize 372E  
                       ??_locked_unlock_leds 0071                      __end_of_PWM2_Initialize 3465  
                    __end_of_TMR0_Initialize 36AD               ??_TMR0_DefaultInterruptHandler 0070  
             __size_of_OSCILLATOR_Initialize 000A                       __end_of_scheduler_Init 3656  
                       _displayL1_SetUserLed 3535                        marquee@display_string 003F  
              __end_of_OSCILLATOR_Initialize 3430                                        l10020 15EC  
                                      l10120 17CC                                        l10112 1795  
                                      l10050 167F                                        l10026 161B  
                                      l10114 17B6                                        l10108 1782  
                                      l10144 3591                                        l10160 35A7  
                                      l10128 17F4                                        l10080 1712  
                                      l10056 16AE                                        l10402 235E  
                                      l10426 23E3                                        l10606 075F  
                                      l10394 234B                                        l10388 22F3  
                                      l10398 2356                                        l10772 0F3B  
                                      l10774 2D26                                        l10768 08CC  
                    ?_locked_get_unlock_leds 0071                      _locked_locking_leds_idx 00A4  
                            __end_of___almod 2191                                        ?_main 0070  
                                      ?_rand 0024                                        STR_10 39E8  
                                      STR_11 3B8D                                        STR_20 3914  
                                      STR_12 3AC8                                        STR_21 3853  
                                      STR_13 3B01                                        STR_30 3A2C  
                                      STR_22 38BC                                        STR_14 3B3A  
                                      STR_31 3877                                        STR_23 38F7  
                                      STR_15 39D5                                        STR_40 3B88  
                                      STR_32 3A1C                                        STR_24 394B  
                                      STR_16 39AD                                        STR_41 3BA1  
                                      STR_33 389A                                        STR_25 382B  
                                      STR_17 3966                                __CFG_WDTE$OFF 0000  
                                      STR_42 3A48                                        STR_34 280A  
                                      STR_26 39FA                                        STR_18 3AF9  
                                      STR_50 3B56                                        STR_43 3A4A  
                                      STR_35 3A0B                                        STR_27 39C2  
                                      STR_19 3997                                        STR_51 3B60  
                                      STR_44 3B83                                        STR_36 3000  
                                      STR_28 38DA                                        STR_60 3AE1  
                                      STR_52 3B65                                        STR_45 3B7E  
                                      STR_37 3A55                                        STR_29 3A6E  
                                      STR_61 3A62                                        STR_53 3B5B  
                                      STR_38 3800                                        STR_62 3A3B  
                                      STR_70 3B2D                                        STR_54 3B6F  
                                      STR_46 3B74                                        STR_39 287D  
                                      STR_63 3AB6                                        STR_55 3AF1  
                                      STR_71 3B18                                        STR_47 3B6A  
                                      STR_64 3ABF                                        STR_80 3930  
                                      STR_56 3AE9                                        STR_72 3AA4  
                                      STR_48 3B51                                        STR_65 3ABF  
                                      STR_81 3980                                        STR_57 3AAD  
                                      STR_73 3B1F                                        STR_49 3B79  
                                      STR_66 3ABF                                        STR_82 3B11  
                                      STR_58 3A85                                        STR_74 3B4C  
                                      STR_67 3ABF                                        STR_59 3A7A  
                                      STR_75 3A90                                        STR_68 3ABF  
                                      STR_76 3B34                                        STR_69 3BA5  
                                      STR_77 3AD1                                        STR_78 3B26  
                                      STR_79 3AD9                             _schedulerExecute 2366  
                                      _T2CON 001F                      _flashy_leds_state_track 00B0  
                                      _T4CON 0417                               __CFG_DEBUG$OFF 0000  
                            __end_of___lwdiv 296E                              __end_of___lwmod 37D1  
                                      i1l363 0011                                        _OSCEN 091D  
                                      _TMR0H 0016                                        _TMR0L 0015  
                             _led_roundabout 2B0A                         ?_menu_display_option 004C  
             nullifyBadge_irTxRegister@badge 0071                   __end_of_scheduler_TaskInit 2A4E  
                                      _TRISA 008C                                        _TRISB 008D  
                                      _TRISC 008E             __size_of_nullifyBadge_buttonsGet 0031  
          __size_of_TMR0_SetInterruptHandler 0006                              _TMR4_Initialize 3465  
                            _PWM6_Initialize 3487                          ___lmul@multiplicand 0075  
                  ?_TMR0_SetInterruptHandler 0071                        _displayL2_ForceUpdate 33F2  
                     ??_locked_get_lock_leds 0073                             __end_of_TMR0_ISR 34B8  
                               _badge_locked 00C4                                 ?_matrix_Main 0052  
                               ?_locked_Main 0052                                 ?_matrix_Init 0039  
                               ?_locked_Init 0039                        ?_displayL1_Initialize 0070  
                            __end_of_dpowers 280A                      _SPI1_Exchange8bitBuffer 2D35  
                             _WDT_Initialize 33E8                              __end_of_isdigit 34C6  
                            __end_of_marquee 22EC                                        _randx 00D3  
                       matrix_Main@holdvalue 005A                                        pclath 000A  
         __size_of_nullifyBadge_platformInit 0055                                        status 0003  
                                      wtemp0 007E                              __end_of_sprintf 1C2C  
                            _TMR2_StartTimer 33DC            __size_of_nullifyBadge_irTxRelease 000B  
                           _menu_option_size 00B4                    ?_nullifyBadge_irTxRelease 0070  
                   __size_of_SPI1_Initialize 0008                       menu_Main@buttonPressed 0056  
               displayL1_SetSegChar@charData 0028                        ?_displayL1_SetSegChar 0020  
                            __initialization 0018                            ?_displayL1_Update 0070  
                               __end_of_main 0764                                 __end_of_rand 2BD0  
                      ?_displayL2_Initialize 0070                            ?_displayL2_PutStr 0030  
                     __size_of_let_alternate 0014                       ?_displayL2_ClrUserLeds 0070  
             __end_of_locked_get_unlock_leds 0819                           ??_displayL1_Update 0079  
                    __end_of_TMR2_Initialize 343A                        ?_displayL1_SetUserLed 0071  
                ?_INTERRUPT_InterruptManager 0070                           ??_displayL2_PutStr 0032  
           displayCharReverse@retValUpperRev 007A                              ?_scheduler_Init 0070  
                     __end_of_led_roundabout 2B4B                                       ??_main 006E  
                                     ??_rand 0026                                slot_Main@data 0065  
                       _nullifyBadge_irTxClr 33E2                        ??_menu_display_option 007C  
                       _nullifyBadge_irTxSet 33E5                                 ?_secret_Main 0052  
                               ?_secret_Init 0039              __size_of_slot_Running_Animation 0046  
                     __end_of_WDT_Initialize 33EC                                slot_Init@data 003B  
      __end_of_nullifyBadge_segDisplayPutStr 3444       __size_of_nullifyBadge_segDisplayPutStr 000A  
              _nullifyBadge_segDisplayPutStr 343A                      __end_of_TMR0_StartTimer 33DC  
                            scheduler_Init@k 0073               nullifyBadge_platformInit@badge 002C  
                                     _CCPR1H 0292                                       _CCPR2H 0296  
                                     _CCPR1L 0291                                       _CCPR2L 0295  
                                     _ANSELA 018C                                       _ANSELB 018D  
                                     _ANSELC 018E                                       _T0CON0 0017  
                                     _T0CON1 0018                             ?_PWM1_Initialize 0070  
                                     _ODCONA 028C                                       _ODCONB 028D  
                                     _ODCONC 028E                      __end_of_PWM5_Initialize 3487  
                __end_of_TMR0_Read16bitTimer 368F                                       _OSCFRQ 091F  
                                     _WDTCON 0097                    matrix_secret_check@inputs 0027  
                            _TMR4_StartTimer 33DF                        SPI1_Exchange8bit@data 0071  
                          _scheduler_TaskAdd 22EC                     __size_of_menu_run_option 004A  
                   __end_of_locked_lock_leds 3620            __end_of_nullifyBadge_platformInit 205A  
                 __size_of_SPI1_Exchange8bit 0009                            _scheduler_TaskRun 2884  
                             __CFG_PWRTE$OFF 0000                  __end_of_matrix_secret_check 2543  
                         ?_scheduler_TaskAdd 003F                           ?_scheduler_TaskRun 0070  
                    _slot_Finished_Animation 1001                                       ___bmul 3524  
                           __end_of_led_rand 2CEB                                       ___lmul 28D6  
                                  ??___almod 0079                     locked_get_lock_leds@leds 0077  
                                 _Shot_Index 007C                                       ___wmul 3620  
                             __CFG_STVREN$ON 0000                     locked_get_lock_leds@size 0075  
                                     _deaths 00AA                         __size_of_flashy_Main 07E7  
                       __size_of_flashy_Init 0096                                    ??___lwdiv 0075  
                                  ??___lwmod 0079                        _flashy_display_option 1A00  
                           ?_TMR0_Initialize 0070                             ?_PWM2_Initialize 0070  
                              ?_locked_clear 0039                                       _memset 35EE  
                    __end_of_PWM6_Initialize 3493                      __end_of_TMR4_Initialize 3470  
                        ??_scheduler_TaskAdd 0040             nullifyBadge_segDisplayPutStr@str 0037  
           __end_of_nullifyBadge_userLedsClr 0800             __end_of_nullifyBadge_userLedsSet 3524  
                        ??_scheduler_TaskRun 007C                              ?_led_roundabout 0030  
                      ?_nullifyBadge_irTxClr 0070                                 __pdataBANK10 0520  
                      ?_nullifyBadge_irTxSet 0070                                       _strlen 36AD  
                               __pdataBIGRAM 26F0                         __size_of_led_curtain 0041  
                                 _Slot_Wheel 0320                       ?_displayL2_ForceUpdate 0070  
                                  ??_isdigit 0071                                    ??_marquee 003E  
                  ??_SPI1_Exchange8bitBuffer 0074                              ?_WDT_Initialize 0070  
                     ??_displayL1_Initialize 007B                        _displayL2_SetUserLeds 36CB  
              TMR0_Read16bitTimer@readValLow 007A                        __end_of_TMR0_CallBack 344F  
                              _let_alternate 356C                      __end_of_TMR2_StartTimer 33DF  
   TMR0_SetInterruptHandler@InterruptHandler 0071                                    ??_sprintf 003B  
                 ?_displayL2_EraseSegDisplay 0070                   __end_of_nullifyBadge_irGet 2005  
                       locked_lock_leds@size 0073                            _SYSTEM_Initialize 36E9  
           displayL2_EraseSegDisplay@display 0037                   ?_nullifyBadge_irTxRegister 0070  
                          _menu_options_leds 0220                    __end_of_scheduler_TaskAdd 2366  
                    __end_of__initialization 00E1                    secret_check@buttonPressed 0079  
                  __end_of_scheduler_TaskRun 28A5                       menu_display_option@led 0050  
                    _roundabout_leds_inverse 03A0                           ?_SYSTEM_Initialize 0070  
                 __end_of_PWM2_LoadDutyValue 35AC                       _slot_Running_Animation 2BD0  
                     ??_displayL1_SetSegChar 0022                  PWM1_LoadDutyValue@dutyValue 0071  
                  secret_check@currents_size 0025                          ___bmul@multiplicand 0071  
                              led_rand@spark 003B                       ??_displayL2_Initialize 007C  
                          _displayL2_PutChar 2D83                               __pcstackCOMMON 0070  
                displayL1_SetSegChar@charPos 0021                  __size_of_displayCharReverse 002F  
                               __pidataBANK1 35D8                                 __pidataBANK2 0002  
                               __pidataBANK3 3656                                 __pidataBANK4 2C16  
                               __pidataBANK5 3754                                 __pidataBANK6 296E  
                               __pidataBANK7 29DD                                 __pidataBANK8 29A5  
                        ??_SYSTEM_Initialize 0073                                    ?_TMR0_ISR 0070  
                     ??_displayL1_SetUserLed 0073                           ?_displayL2_PutChar 002A  
                                 _badge_inst 01B2                               ??_locked_clear 007C  
                          ??_SPI1_Initialize 0071                  displayL1_SetSegChar@display 0027  
                         _PWM1_LoadDutyValue 3580                        scheduler_TaskAdd@task 003F  
                           ?_TMR2_Initialize 0070                          matrix_Init@taskData 0039  
                        locked_Init@taskData 0039                          _flashy_sparkle_rate 00AE  
       __end_of_nullifyBadge_segDisplayErase 3404        __size_of_nullifyBadge_segDisplayErase 0006  
               _nullifyBadge_segDisplayErase 33FE                      _nullifyBadge_buttonsGet 28A5  
                        ??_displayL2_PutChar 002B                          ?_PWM1_LoadDutyValue 0071  
                             ?_let_alternate 0030                           _gamma_table_256x1k 1800  
                           ?_TMR0_StartTimer 0070                      ??_matrix_display_option 004E  
                    __end_of_TMR4_StartTimer 33E2                    __end_of_SYSTEM_Initialize 370A  
                         led_curtain@counter 0030                                 sprintf@width 0048  
                              _menu_TaskData 02BC                                   __pbssBANK1 00A0  
                                 __pbssBANK2 0120                                   __pbssBANK3 01A0  
                                 __pbssBANK5 02A0                                   __pbssBANK9 04A0  
                       __size_of_locked_Main 01DD                         __size_of_matrix_Main 071D  
                       __size_of_locked_Init 0063                         __size_of_matrix_Init 009E  
                        secret_Main@taskData 0052                             ?_PWM5_Initialize 0070  
             ?_nullifyBadge_segDisplayPutStr 0037                            _flashy_option_idx 00A8  
                   __end_of_schedulerExecute 23EA                        _TMR4_InterruptHandler 0124  
         nullifyBadge_userLedsRegister@badge 0071                           __size_of_menu_Main 01F7  
                         __size_of_menu_Init 0062                    __end_of_displayL2_PutChar 2DD5  
                  ??_slot_Finished_Animation 003F                                ?_secret_check 0077  
                       ??_PWM1_LoadDutyValue 0073                                ?_secret_clear 0071  
                             _SSP1DATPPSbits 0E21                              _secret_TaskData 02A0  
                                 __pmaintext 0661                                      ?___bmul 0071  
           __end_of_TMR0_SetInterruptHandler 33F2                                      ?___lmul 0071  
                     ?_flashy_display_option 004C                                      ?___wmul 0071  
                      scheduler_TaskRun@task 0067                                   ??_TMR0_ISR 0070  
                            __CFG_PPS1WAY$ON 0000                   __end_of_PWM6_LoadDutyValue 35D8  
                                 __pintentry 0004                            ??_menu_run_option 007C  
                                    _CCP1CON 0293                                      _CCP2CON 0297  
                                    ?_memset 0071                               ___lmul@product 0020  
                     ??_nullifyBadge_irTxClr 0071                             ?_TMR4_Initialize 0070  
                           ?_PWM6_Initialize 0070                       ??_nullifyBadge_irTxSet 0071  
                             _SSP1CLKPPSbits 0E20                          __CFG_RSTOSC$HFINT32 0000  
                                    ?_strlen 0071                                   _led_Parody 20BE  
              ?_nullifyBadge_segDisplayErase 0070                       ?_displayL2_SetUserLeds 002B  
                         _PWM5_LoadDutyValue 35AC                                      _OSCCON1 0919  
                   displayL2_PutChar@display 002F                                      _OSCCON3 091B  
                         __size_of_slot_Main 057C                           __size_of_slot_Init 0064  
                                    _NVMADRH 0892                    matrix_display_option@data 004C  
                                    _NVMADRL 0891                                      _NVMDATH 0894  
                                    _OSCTUNE 091E                                      _NVMDATL 0893  
                                    _NVMCON2 0896                                      _PWM5DCH 0618  
                                    _PWM5DCL 0617                                      _PWM6DCH 061B  
                                    _PWM6DCL 061A                                      _PWM5CON 0619  
                                    _PWM6CON 061C                                      _SSP1ADD 0212  
                       __size_of_secret_Main 01BD                                      _PPSLOCK 0E0F  
                                    _SSP1BUF 0211                                   _led_circle 341D  
                       __size_of_secret_Init 005B                             ?_TMR2_StartTimer 0070  
                              _matrix_option 02CA                                    ?_led_rand 0070  
                        ?_PWM5_LoadDutyValue 0071                      _FLASHY_TEXT_SECRET_TEST 00DB  
                   flashy_Main@buttonPressed 005C                   __size_of_scheduler_TaskAdd 007A  
          __size_of_nullifyBadge_userLedsClr 0006                   __size_of_scheduler_TaskRun 0021  
          __size_of_nullifyBadge_userLedsSet 0011                           _scheduler_TaskInit 2A15  
                  ?_nullifyBadge_userLedsClr 0070                    ?_nullifyBadge_userLedsSet 002D  
                             ??_secret_check 0020                               ??_secret_clear 0073  
                    ??_displayL2_ClrUserLeds 007B                 displayL2_SetUserLeds@display 007B  
                           ??_scheduler_Init 0071                          ?_scheduler_TaskInit 0070  
                            __size_of___bmul 0011                                      ___almod 2123  
                            __size_of___lmul 0032                              __size_of___wmul 001B  
            ??_nullifyBadge_userLedsRegister 0071                                      ___lwdiv 293A  
                         scheduler_TaskAdd@k 0047                                      ___lwmod 37A4  
                       ??_PWM5_LoadDutyValue 0073                  __size_of_locked_unlock_leds 0012  
                  ??_nullifyBadge_buttonsGet 0071                              _roundabout_leds 03BC  
                    scheduler_Init@scheduler 0072                              __size_of_memset 0018  
                      displayL1_SetSegChar@c 0020                              _matrix_TaskData 04BE  
                            _locked_TaskData 02AE                                   _menu_clear 2C5C  
                                    __ptext1 2A15                                      __ptext2 22EC  
                                    __ptext3 23EA                                      __ptext4 2E7E  
                                    __ptext5 2F9D                                      __ptext6 2F3B  
                                    __ptext7 0764                                      __ptext8 205A  
                                    __ptext9 34E3                              __size_of_strlen 001E  
            __end_of_slot_Finished_Animation 1028                                      _dpowers 2800  
                             slot_Setup@data 0034                        _OSCILLATOR_Initialize 3426  
                                    _oddeven 00B8                                    _T2CONbits 001F  
                          __end_of_menu_Main 2000                            __end_of_menu_Init 2F9D  
                                    _isdigit 34B8                              ??_let_alternate 007C  
                                    _marquee 2275                                    _T4CONbits 0417  
                   ??_PIN_MANAGER_Initialize 0071      nullifyBadge_segDisplayForceUpdate@badge 002B  
                  __size_of_displayL1_Update 0011                         ??_scheduler_TaskInit 0071  
                  __size_of_displayL2_PutStr 002A                   __size_of_SYSTEM_Initialize 0021  
                                    _sprintf 1A5F                                      clrloop0 3494  
                           ?_TMR4_StartTimer 0070                __size_of_locked_get_lock_leds 0024  
                        displayL2_PutStr@str 0030                                   ??_led_rand 0033  
                       end_of_initialization 00E1                         __end_of_locked_clear 2B8D  
                                    init_ram 349F                                      memset@c 0073  
                                    memset@n 0075                                      memset@p 0077  
                              secret_check@i 0028                                      initloop 34A0  
                               marquee@count 003C                   __size_of_displayL2_PutChar 0052  
                          ?_locked_lock_leds 0070                            __end_of_slot_Main 0661  
                          __end_of_slot_Init 20BE                             ??_led_roundabout 0032  
                         ??_locked_lock_leds 0071                              _matrix_leds_idx 00A0  
             TMR0_Read16bitTimer@readValHigh 007B                  __end_of_menu_display_option 2F3B  
                     slot_Main@buttonPressed 0064                                      strlen@s 0071  
                    ??_displayL2_ForceUpdate 007B                      __size_of_marquee_speedy 0073  
                         secret_check@inputs 0027                             ??_WDT_Initialize 0071  
                   _TMR0_SetInterruptHandler 33EC                                    _PORTAbits 000C  
                                  _PORTBbits 000D                                    _PORTCbits 000E  
              nullifyBadge_userLedsClr@badge 002B                                  ?_led_Parody 0030  
                                 _slot_Setup 2DD5                      displayL1_Update@display 002A  
                                ?_led_circle 0030                      menu_display_option@data 004C  
             ??_nullifyBadge_segDisplayErase 007C                      menu_display_option@size 004E  
                           __CFG_FEXTOSC$OFF 0000                  ??_displayL2_EraseSegDisplay 007C  
            __end_of_nullifyBadge_buttonsGet 28D6                                _schedulerInst 01A0  
                   _nullifyBadge_irTxRelease 3470                      ?_slot_Running_Animation 0032  
                ??_nullifyBadge_irTxRegister 0071                                  _CCP1CONbits 0293  
                            _SPI1_Initialize 3404                                  _CCP2CONbits 0297  
                          slot_Main@taskData 0052                                ??_flashy_Main 0054  
                              ??_flashy_Init 007C                   ?_nullifyBadge_platformInit 0070  
               __size_of_TMR0_Read16bitTimer 001D                     __size_of_PWM1_Initialize 000B  
                        secret_Init@taskData 0039                         _timer0ReloadVal16bit 00C0  
                         _nullifyBadge_irGet 2000                              flashy_Main@data 005E  
                              __pidataBANK10 2A4E                               __end_of___bmul 3535  
              nullifyBadge_userLedsSet@badge 002F                               __end_of___lmul 2908  
                              __pidataBIGRAM 2543                                ??_led_curtain 0032  
                             __end_of___wmul 363B              slot_Finished_Animation@taskData 003D  
                     flashy_Main@hit_counter 0056                            __size_of_TMR0_ISR 000D  
                         _PWM2_LoadDutyValue 3596                 __size_of_matrix_secret_check 00BB  
                                ?_menu_clear 0039                       ?_OSCILLATOR_Initialize 0070  
                             __end_of_memset 3606                          ?_nullifyBadge_irGet 0070  
                            flashy_Init@data 003B        __end_of_nullifyBadge_userLedsRegister 34F2  
     __size_of_nullifyBadge_userLedsRegister 000F                _nullifyBadge_userLedsRegister 34E3  
                       __end_of_secret_check 10E3                              _menu_option_idx 00B6  
                       __end_of_secret_clear 293A                               __end_of_strlen 36CB  
                        start_initialization 0018                     __size_of_PWM2_Initialize 000B  
                   __size_of_TMR0_Initialize 001E                          ?_PWM2_LoadDutyValue 0071  
            __size_of_PIN_MANAGER_Initialize 0055                         marquee_speedy@F14089 01E8  
              __size_of_displayL1_Initialize 0013               __end_of_slot_Running_Animation 2C16  
                       _matrix_secret_inputs 0234               __size_of_matrix_display_option 0071  
              __end_of_matrix_display_option 2202                         ??_nullifyBadge_irGet 0071  
                            _menu_run_option 2CEB                            ?_schedulerExecute 0070  
                    ??_flashy_display_option 007C                   __end_of_displayCharReverse 3800  
                   ??_locked_get_unlock_leds 0073                          __size_of_led_Parody 0065  
                         led_roundabout@leds 0034                             __CFG_LPBOREN$OFF 0000  
                         led_roundabout@size 0036                           _flashy_scroll_rate 00AC  
                       ??_PWM2_LoadDutyValue 0073                                _secret_inputs 024D  
                         ??_schedulerExecute 0068                    flashy_display_option@data 004C  
              __size_of_displayL1_SetSegChar 0041                                     ??___bmul 0072  
                PWM2_LoadDutyValue@dutyValue 0071                                     ??___lmul 0079  
                 slot_Running_Animation@data 0036                                     ??___wmul 0075  
                  _displayL2_EraseSegDisplay 34F2                                  _CCPTMRSbits 029F  
                        __size_of_led_circle 0009                __size_of_displayL2_Initialize 0026  
                     __size_of_TMR0_CallBack 000B                                  __pdataBANK1 00C7  
                                __pdataBANK2 0167                                  __pdataBANK3 01D1  
                                __pdataBANK4 0220                                  __pdataBANK5 02CA  
                                __pdataBANK6 0320                                  __pdataBANK7 03A0  
                                __pdataBANK8 0420                                     ??_memset 0077  
                  _nullifyBadge_irTxRegister 34D4                __size_of_displayL1_SetUserLed 0012  
                        __end_of_flashy_Main 1000                          __end_of_flashy_Init 07FA  
                   ?_SPI1_Exchange8bitBuffer 0072                      ??_displayL2_SetUserLeds 007B  
                           secret_check@data 0077                                     ??_strlen 0073  
                           secret_check@size 0023                                  __pbssBANK11 05A0  
                  schedulerExecute@scheduler 00E3           nullifyBadge_segDisplayPutStr@badge 0039  
                PWM5_LoadDutyValue@dutyValue 0071                         marquee_speedy@string 003A  
                                __pbssCOMMON 007C                                  ?_slot_Setup 002F  
                  schedulerExecute@tickDelta 00E1                                    ___latbits 0003  
                        __end_of_led_curtain 2B0A                                __pcstackBANK0 0020  
                              __pcstackBANK1 00DD                        __size_of_locked_clear 0042  
                           _displayL1_Update 3502                           _PWM6_LoadDutyValue 35C2  
                   __size_of_TMR2_Initialize 000A                                ??_matrix_Main 0054  
                              ??_locked_Main 0054                             _displayL2_PutStr 377A  
                              ??_matrix_Init 003B                                ??_locked_Init 007C  
                     scheduler_TaskInit@task 0071                             secret_clear@data 0071  
                    __end_of_SPI1_Initialize 340C                                 _isdigit$3599 0071  
                       _asciiCharTableLookup 26F0                        _locked_lock_base_leds 00D9  
                         _flashy_option_size 00A6             matrix_secret_check@buttonPressed 0079  
                    matrix_secret_check@data 0077                                 _curtain_leds 043C  
                        ?_PWM6_LoadDutyValue 0071                      matrix_secret_check@size 0023  
           displayL2_SetUserLeds@userLedData 002B                                  sprintf@flag 0040  
                          __size_of_led_rand 0048                                  sprintf@prec 003F  
           matrix_secret_check@currents_size 0025                          __size_of_menu_clear 0047  
                      _TMR0_InterruptHandler 00BE                     __size_of_TMR0_StartTimer 0003  
                __size_of_PWM1_LoadDutyValue 0016                             ___lwdiv@dividend 0073  
                     _PIN_MANAGER_Initialize 2E29                                  _FLASHY_TEXT 0167  
                   __size_of_PWM5_Initialize 000C                            menu_Main@taskData 0052  
             __size_of_displayL2_ClrUserLeds 000E                __end_of_displayL2_ClrUserLeds 34D4  
                displayL1_SetUserLed@display 0074                                     ?___almod 002B  
                                  __ptext100 3596                                    __ptext101 3580  
                                  __ptext103 34AB                                    __ptext104 3444  
                                  __ptext105 0800                            schedulerExecute@k 00E4  
                                   ?___lwdiv 0071                                     ?___lwmod 002B  
                             _marquee_speedy 2202                         ??_PWM6_LoadDutyValue 0073  
                               _locked_clear 2B4B                            ??_PWM1_Initialize 0071  
               ??_INTERRUPT_InterruptManager 0070                             ___almod@dividend 002F  
                          marquee@multiplier 0044                                    __pswtext1 302F  
                     displayCharReverse@cVal 0071                __size_of_nullifyBadge_irTxClr 0003  
              __size_of_nullifyBadge_irTxSet 0003                                ??_secret_Main 0054  
                              ??_secret_Init 007C                          _locked_locking_leds 00C7  
                                   ?_isdigit 0070                                     ?_marquee 003A  
                   __size_of_PWM6_Initialize 000C                     __size_of_TMR4_Initialize 000B  
             ?_nullifyBadge_userLedsRegister 0070                  displayL2_Initialize@display 002B  
                    __end_of_menu_run_option 2D35                             ___lwdiv@quotient 0077  
                            secret_Main@data 0058                                    _menu_Main 1E09  
                       matrix_secret_check@i 0028                                    _menu_Init 2F3B  
              nullifyBadge_irTxRelease@badge 0072                                    _menu_Exit 0000  
                                   ?_sprintf 002F                          flashy_Main@taskData 0052  
                              _TMR0_CallBack 3444                           displayL2_PutChar@c 002A  
                         displayL2_PutChar@k 002E                                    _menu_task 014D  
    displayL1_SetSegChar@dispDataVectBaseIdx 0026                     ?_slot_Finished_Animation 003D  
                          ??_TMR0_Initialize 0073                            ??_PWM2_Initialize 0071  
                            secret_Init@data 003B                SPI1_Exchange8bitBuffer@dataIn 0077  
                             ___wmul@product 0075                          __end_of_locked_Main 1E09  
                        __end_of_matrix_Main 1800                          __end_of_locked_Init 3000  
                        __end_of_matrix_Init 2488                                     _LATBbits 010D  
                                   _LATCbits 010E                SPI1_Exchange8bitBuffer@bufLen 0072  
                                  clear_ram0 3493                                     _PIE0bits 0090  
                   __size_of_TMR2_StartTimer 0003          __size_of_INTERRUPT_InterruptManager 0012  
                 ??_TMR0_SetInterruptHandler 0073              __size_of_locked_get_unlock_leds 0018  
                                   _PIR0bits 0010                                     _PIR1bits 0011  
                                   _PIR2bits 0012                                  _flashy_Main 0819  
                                _flashy_Init 0764                                  _flashy_Exit 0000  
                        __size_of_slot_Setup 0054                   TMR0_Read16bitTimer@readVal 0078  
                 __end_of_locked_unlock_leds 3559                   scheduler_TaskAdd@scheduler 0046  
            __end_of_SPI1_Exchange8bitBuffer 2D83                 __end_of_locked_get_lock_leds 372E  
                     __end_of_marquee_speedy 2275                                  _flashy_task 015A  
                                   _SSP1CON1 0215                                     _TMR0_ISR 34AB  
                                   _SSP1STAT 0214                            slot_Init@taskData 0039  
                __size_of_PWM5_LoadDutyValue 0016                        __size_of_secret_check 00BB  
                                  _slot_Main 00E5                        __size_of_secret_clear 0032  
                                  _slot_Init 205A                                    _slot_Exit 0000  
                                _led_curtain 2AC9              displayL1_SetUserLed@userLedVect 0071  
                            _flashy_TaskData 04A0                                    _slot_task 0140  
          schedulerExecute@currentSystemTick 00DD                            ___wmul@multiplier 0071  
             __size_of_displayL2_ForceUpdate 0006                __end_of_displayL2_ForceUpdate 33F8  
                          _Shot_Options_Long 02DE                                 ??_led_Parody 0032  
                 ??_nullifyBadge_irTxRelease 0071                    __size_of_locked_lock_leds 001A  
          nullifyBadge_segDisplayErase@badge 0038                     matrix_Main@buttonPressed 0059  
                   locked_Main@buttonPressed 0056                          _TMR0_Read16bitTimer 3672  
                      __end_of_let_alternate 3580                                 ??_led_circle 007C  
                            led_circle@count 0030                  __size_of_scheduler_TaskInit 0039  
                             ?_TMR0_CallBack 0070                                   ?_menu_Main 0052  
                                 ?_menu_Init 0039                             ?_SPI1_Initialize 0070  
                   _nullifyBadge_userLedsClr 07FA                            ___lmul@multiplier 0071  
                      led_roundabout@counter 0030                     _nullifyBadge_userLedsSet 3513  
                        __end_of_secret_Main 2800                          __end_of_secret_Init 2ED9  
                                   _Leds_idx 00D7                          _matrix_secret_check 2488  
                          ??_TMR2_Initialize 0071                     secret_Main@buttonPressed 0057  
                 locked_get_unlock_leds@leds 0073                     __size_of_TMR4_StartTimer 0003  
                               _secret_check 1028                                 _secret_clear 2908  
                       ?_TMR0_Read16bitTimer 0071                           __end_of_led_Parody 2123  
                            marquee_speedy@i 0046                              marquee_speedy@j 004A  
                ??_nullifyBadge_platformInit 007C                     ?_nullifyBadge_buttonsGet 0070  
                               _secret_value 00C5                              _flashy_leds_idx 00B2  
 __end_of_nullifyBadge_segDisplayForceUpdate 33FE  __size_of_nullifyBadge_segDisplayForceUpdate 0006  
       ??_nullifyBadge_segDisplayForceUpdate 007C          ?_nullifyBadge_segDisplayForceUpdate 0070  
         _nullifyBadge_segDisplayForceUpdate 33F8                              ?_marquee_speedy 003A  
                    ??_OSCILLATOR_Initialize 0071                          marquee_speedy@count 003C  
                          ??_TMR0_StartTimer 0071                             __size_of___almod 006E  
                         __end_of_led_circle 3426                                   ?_slot_Main 0052  
                                 ?_slot_Init 0039                             __size_of___lwdiv 0034  
                           __size_of___lwmod 002D                         ?_matrix_secret_check 0077  
                               ??_menu_clear 007C                            ??_PWM5_Initialize 0071  
                    __size_of_scheduler_Init 001B                                   sprintf@len 0046  
                                _currentTask 00BA                                   sprintf@val 0044  
               __size_of_menu_display_option 0062           __size_of_displayL2_EraseSegDisplay 0010  
                                 _T0CON0bits 0017                       _locked_get_unlock_leds 0801  
                           __size_of_isdigit 000E                             __size_of_marquee 0077  
                            ___lwdiv@divisor 0071                              ___lwdiv@counter 0076  
                               _Shot_Options 01D1                          displayCharReverse@k 007B  
         __size_of_nullifyBadge_irTxRegister 000F                                     __ptext10 340C  
                                   __ptext11 363B                                     __ptext20 2BD0  
                                   __ptext12 2366                                     __ptext21 1001  
                                   __ptext13 2884                                     __ptext30 2DD5  
                                   __ptext22 2908                                     __ptext14 10E3  
                                   __ptext31 3547                                     __ptext23 1028  
                                   __ptext15 2643                                     __ptext40 1A5F  
                                   __ptext32 3606                                     __ptext24 2CEB  
                                   __ptext16 1C2C                                     __ptext41 34B8  
                                   __ptext33 0801                                     __ptext25 2C5C  
                                   __ptext17 1E09                                     __ptext50 2B0A  
                                   __ptext42 3620                                     __ptext34 370A  
                                   __ptext26 2ED9                                     __ptext18 0819  
                                   __ptext51 2CA3                                     __ptext43 33E5  
                                   __ptext35 2B4B                                     __ptext27 2488  
                                   __ptext19 00E5                                     __ptext60 3535  
                                   __ptext52 2B8D                                     __ptext44 3470  
                                   __ptext36 07FA                                     __ptext28 3524  
                                   __ptext61 1A00                                     __ptext53 28D6  
                                   __ptext45 34D4                                     __ptext37 34C6  
                                   __ptext29 2191                                     __ptext70 33F8  
                                   __ptext62 2202                                     __ptext54 2123  
                                   __ptext46 33E2                                     __ptext38 33FE  
                                   __ptext71 33F2                                     __ptext63 2275  
                                   __ptext55 2AC9                                     __ptext47 2000  
                                   __ptext39 34F2                                     __ptext80 2D35  
                                   __ptext72 37A4                                     __ptext64 36AD  
                                   __ptext56 341D                                     __ptext48 28A5  
                                   __ptext81 3414                                     __ptext73 293A  
                                   __ptext65 343A                                     __ptext57 20BE  
                                   __ptext49 356C                                     __ptext90 33EC  
                                   __ptext82 36E9                                     __ptext74 3672  
                                   __ptext66 377A                                     __ptext58 3513  
                                   __ptext91 3404                                     __ptext83 33E8  
                                   __ptext75 2005                                     __ptext67 2D83  
                                   __ptext59 36CB                                     __ptext92 3487  
                                   __ptext84 3465                                     __ptext76 372E  
                                   __ptext68 2A88                                     __ptext93 347B  
                                   __ptext85 33DF                                     __ptext77 3559  
                                   __ptext69 37D1                                     __ptext94 345A  
                                   __ptext86 3430                                     __ptext78 35EE  
                                   __ptext95 344F                                     __ptext87 33DC  
                                   __ptext79 3502                                     __ptext96 2E29  
                                   __ptext88 368F                                     __ptext97 3426  
                                   __ptext89 33D9                                     __ptext98 35C2  
                                   __ptext99 35AC                                  _matrix_Main 10E3  
                                _locked_Main 1C2C                                  _matrix_Init 23EA  
                                _locked_Init 2F9D                           slot_Setup@taskData 002F  
                                _matrix_Exit 0000                                  _locked_Exit 0000  
                               _SSP1CON1bits 0215                             ?_menu_run_option 003B  
                                _locked_leds 00A2                                  _matrix_task 01C4  
                                _locked_task 0133                              ___almod@divisor 002B  
                                   _led_rand 2CA3                             __size_of_sprintf 01CD  
                            ___almod@counter 007A               slot_Running_Animation@taskData 0032  
                                _menu_option 022A      __end_of_nullifyBadge_segDisplayRegister 3414  
   __size_of_nullifyBadge_segDisplayRegister 0008            ??_nullifyBadge_segDisplayRegister 0071  
           ?_nullifyBadge_segDisplayRegister 0070              _nullifyBadge_segDisplayRegister 340C  
                       marquee@string_length 0048                                menu_Main@data 0057  
                          ??_TMR4_Initialize 0071                            ??_PWM6_Initialize 0071  
                              __size_of_main 0103                                __size_of_rand 0043  
       __end_of_TMR0_DefaultInterruptHandler 0801        __size_of_TMR0_DefaultInterruptHandler 0001  
               _TMR0_DefaultInterruptHandler 0800                           __end_of_menu_clear 2CA3  
                          displayL2_PutStr@k 0036                        ??_TMR0_Read16bitTimer 0073  
                                 _RC0PPSbits 0EA0                                marquee@F14098 01E3  
                                 _RC1PPSbits 0EA1                                menu_Init@data 003B  
                   __end_of_displayL1_Update 3513                           let_alternate@count 0030  
                                 _RC2PPSbits 0EA2               __size_of_flashy_display_option 005F  
                   __end_of_displayL2_PutStr 37A4                __end_of_flashy_display_option 1A5F  
                                 _RC3PPSbits 0EA3                 __end_of_displayL1_Initialize 356C  
                       _curtain_leds_inverse 0420                                   _RC4PPSbits 0EA4  
                                 _RB6PPSbits 0E9E                                     int$flags 007E  
               displayL2_ForceUpdate@display 007B                              matrix_Main@data 005B  
                            locked_Main@data 0057                            ??_TMR2_StartTimer 0071  
         __end_of_INTERRUPT_InterruptManager 0016                   _INTERRUPT_InterruptManager 0004  
                      ??_matrix_secret_check 0020                                 _SSP1STATbits 0214  
       nullifyBadge_segDisplayRegister@badge 0071                  PIN_MANAGER_Initialize@state 0071  
         schedulerExecute@taskLastSystemTick 00DF                           _displayCharReverse 37D1  
                          menu_Init@taskData 0039                    __size_of_schedulerExecute 0084  
             __size_of_displayL2_SetUserLeds 001E                              matrix_Init@data 003D  
                            locked_Init@data 003B                __end_of_displayL2_SetUserLeds 36E9  
              displayCharReverse@retValLower 0078                displayCharReverse@retValUpper 0079  
                                 _INTCONbits 000B                                  _secret_Main 2643  
                    __size_of_led_roundabout 0041                                  _secret_Init 2E7E  
                               ??_slot_Setup 0031                                  _secret_Exit 0000  
                            ??_TMR0_CallBack 0070                                  _NVMCON1bits 0895  
                  _nullifyBadge_platformInit 2005                 __end_of_displayL1_SetSegChar 2AC9  
                                _secret_task 0126                               __pstringtext10 38DA  
                             __pstringtext11 38F7                               __pstringtext20 39D5  
                             __pstringtext12 3914                               __pstringtext21 39E8  
                             __pstringtext13 3930                               __pstringtext30 3A6E  
                             __pstringtext22 39FA                               __pstringtext14 394B  
                             __pstringtext31 3A7A                               __pstringtext23 3A0B  
                             __pstringtext15 3966                               __pstringtext40 3AD1  
                             __pstringtext32 3A85                               __pstringtext24 3A1C  
                             __pstringtext16 3980                               __pstringtext41 3AD9  
                             __pstringtext33 3A90                               __pstringtext25 3A2C  
                             __pstringtext17 3997                               __pstringtext50 3B1F  
                             __pstringtext42 3AE1                               __pstringtext34 3A9A  
                             __pstringtext26 3A3B                               __pstringtext18 39AD  
                             __pstringtext51 3B26                               __pstringtext43 3AE9  
                             __pstringtext35 3AA4                               __pstringtext27 3A48  
                             __pstringtext19 39C2                               __pstringtext60 3B5B  
                             __pstringtext52 3B2D                               __pstringtext44 3AF1  
                             __pstringtext36 3AAD                               __pstringtext28 3A55  
                             __pstringtext61 3B60                               __pstringtext53 3B34  
                             __pstringtext45 3AF9                               __pstringtext37 3AB6  
                             __pstringtext29 3A62                               __pstringtext70 3B8D  
                             __pstringtext62 3B65                               __pstringtext54 3B3A  
                             __pstringtext46 3B01                               __pstringtext38 3ABF  
                             __pstringtext71 3B92                               __pstringtext63 3B6A  
                             __pstringtext55 3B40                               __pstringtext47 3B09  
                             __pstringtext39 3AC8                               __pstringtext72 3B97  
                             __pstringtext64 3B6F                               __pstringtext56 3B46  
                             __pstringtext48 3B11                               __pstringtext73 3B9C  
                             __pstringtext65 3B74                               __pstringtext57 3B4C  
                             __pstringtext49 3B18                               __pstringtext74 3BA1  
                             __pstringtext66 3B79                               __pstringtext58 3B51  
                             __pstringtext75 3BA5                               __pstringtext67 3B7E  
                             __pstringtext59 3B56                               __pstringtext76 0000  
                             __pstringtext68 3B83                               __pstringtext69 3B88  
          __end_of_displayL2_EraseSegDisplay 3502                                     isdigit@c 0072  
                                   marquee@i 0046                                     marquee@j 004A  
                                   memset@p1 0071                 __end_of_displayL2_Initialize 3754  
                        ?_displayCharReverse 0071                                  ??_menu_Main 0054  
                                ??_menu_Init 007C                      __size_of_WDT_Initialize 0004  
                       _locked_get_lock_leds 370A            __end_of_nullifyBadge_irTxRegister 34E3  
           __size_of_SPI1_Exchange8bitBuffer 004E                      matrix_Main@matrix_found 0058  
               __end_of_displayL1_SetUserLed 3547                                     intlevel1 0000  
                                  sprintf@ap 0043                                    sprintf@cp 0041  
                                  sprintf@sp 002F                             ___lwmod@dividend 002D  
                    ?_PIN_MANAGER_Initialize 0070                                marquee@string 003A  
                __size_of_nullifyBadge_irGet 0005                            __CFG_CLKOUTEN$OFF 0000  
                      _matrix_display_option 2191          SPI1_Exchange8bitBuffer@bytesWritten 0078  
                                _PPSLOCKbits 0E0F                              _PWM1_Initialize 344F  
                        flashy_Init@taskData 0039                               menu_clear@data 0039  
              ?_TMR0_DefaultInterruptHandler 0070                  __size_of_PWM2_LoadDutyValue 0016  
                       ??_displayCharReverse 0073                           __end_of_slot_Setup 2E29  
                          ??_TMR4_StartTimer 0071                                  ??_slot_Main 0054  
                                ??_slot_Init 007C                                __pstringtext1 1800  
                              __pstringtext2 2800                                __pstringtext3 3000  
                              __pstringtext4 3800                                __pstringtext5 382B  
                              __pstringtext6 3853                                __pstringtext7 3877  
                              __pstringtext8 389A                                __pstringtext9 38BC  
           __end_of_nullifyBadge_irTxRelease 347B                                     sprintf@c 004A  
                                   sprintf@f 0031                                _flashy_option 0520  
                           _locked_lock_leds 3606                              ___lwmod@divisor 002B  
                            _TMR0_Initialize 368F                              _PWM2_Initialize 345A  
                                   strlen@cp 0075                                _slot_TaskData 05A0  
                            ___lwmod@counter 007A                  PWM6_LoadDutyValue@dutyValue 0071  
                      ?_locked_get_lock_leds 0071               __end_of_PIN_MANAGER_Initialize 2E7E  
                         _matrix_option_size 0120                             locked_clear@data 0039  
                               ___almod@sign 007B                                  _PWMTMRSbits 061F  
               __end_of_nullifyBadge_irTxClr 33E5                 __end_of_nullifyBadge_irTxSet 33E8  
                 __end_of_PWM1_LoadDutyValue 3596                            _matrix_option_idx 0122  
                      _TMR2_InterruptHandler 00C2                                 ?_flashy_Main 0052  
                               ?_flashy_Init 0039  
